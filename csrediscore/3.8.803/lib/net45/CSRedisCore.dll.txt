public enum CSRedis.ClientKillType : Enum {
    public int value__;
    public static ClientKillType normal;
    public static ClientKillType slave;
    public static ClientKillType pubsub;
}
public class CSRedis.CSRedisClient : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<string, RedisClientPool> <Nodes>k__BackingField;
    private int NodesIndexIncrement;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<int, string> <NodesIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<string, int> <NodesKey>k__BackingField;
    internal Func`2<string, string> NodeRuleRaw;
    internal Func`2<string, string> NodeRuleExternal;
    internal RedisSentinelManager SentinelManager;
    internal string SentinelMasterName;
    internal string SentinelMasterValue;
    private object NodesLock;
    public ConcurrentDictionary`2<ushort, ushort> SlotCache;
    private Func`1<JsonSerializerSettings> JsonSerializerSettings;
    public static Func`2<object, string> Serialize;
    public static Func`3<string, Type, object> Deserialize;
    public Func`2<object, string> CurrentSerialize;
    public Func`3<string, Type, object> CurrentDeserialize;
    private DateTime _dt1970;
    private Random _rnd;
    private bool BackgroundGetSentinelMasterValueIng;
    private object BackgroundGetSentinelMasterValueIngLock;
    private static UInt16[] crc16tab;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NodesServerManagerProvider <NodesServerManager>k__BackingField;
    private ConcurrentDictionary`2<string, AutoPipe> _autoPipe;
    public ConcurrentDictionary`2<string, RedisClientPool> Nodes { get; }
    public ConcurrentDictionary`2<int, string> NodesIndex { get; }
    private ConcurrentDictionary`2<string, int> NodesKey { get; }
    internal bool IsMultiNode { get; }
    public NodesServerManagerProvider NodesServerManager { get; public set; }
    public CSRedisClient(string connectionString);
    public CSRedisClient(string connectionString, String[] sentinels, bool readOnly);
    public CSRedisClient(string connectionString, String[] sentinels, bool readOnly, SentinelMasterConverter convert);
    public CSRedisClient(Func`2<string, string> NodeRule, String[] connectionStrings);
    protected CSRedisClient(Func`2<string, string> NodeRule, String[] sentinels, bool readOnly, SentinelMasterConverter convert, String[] connectionStrings);
    private static CSRedisClient();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, RedisClientPool> get_Nodes();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<int, string> get_NodesIndex();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, int> get_NodesKey();
    internal bool get_IsMultiNode();
    internal string SerializeObject(object value);
    internal T DeserializeObject(string value);
    internal object SerializeRedisValueInternal(object value);
    internal T DeserializeRedisValueInternal(Byte[] value);
    internal T[] DeserializeRedisValueArrayInternal(Byte[][] value);
    internal ValueTuple`2[] DeserializeRedisValueTuple1Internal(Tuple`2[] value);
    internal ValueTuple`2[] DeserializeRedisValueTuple2Internal(Tuple`2[] value);
    internal Dictionary`2<TKey, TValue> DeserializeRedisValueDictionaryInternal(Dictionary`2<TKey, Byte[]> value);
    public sealed virtual void Dispose();
    private bool BackgroundGetSentinelMasterValue();
    private T GetAndExecute(RedisClientPool pool, Func`2<Object`1<RedisClient>, T> handler, int jump, int errtimes);
    private bool TryAddNode(string nodeKey, RedisClientPool pool);
    private RedisClientPool GetRedirectPool(ValueTuple`4<bool, bool, ushort, string> redirect, RedisClientPool pool);
    private Nullable`1<ValueTuple`4<bool, bool, ushort, string>> ParseClusterRedirect(Exception ex);
    private T NodesNotSupport(String[] keys, T defaultValue, Func`3<Object`1<RedisClient>, String[], T> callback);
    private T NodesNotSupport(string key, Func`3<Object`1<RedisClient>, string, T> callback);
    private RedisClientPool GetNodeOrThrowNotFound(string nodeKey);
    public T CacheShell(string key, int timeoutSeconds, Func`1<T> getData);
    public T CacheShell(string key, string field, int timeoutSeconds, Func`1<T> getData);
    public ValueTuple`2[] CacheShell(string key, String[] fields, int timeoutSeconds, Func`2<String[], ValueTuple`2[]> getData);
    internal T ExecuteScalar(string key, Func`3<Object`1<RedisClient>, string, T> hander);
    internal T[] ExecuteArray(String[] key, Func`3<Object`1<RedisClient>, String[], T[]> hander);
    internal long ExecuteNonQuery(String[] key, Func`3<Object`1<RedisClient>, String[], long> hander);
    public static ushort GetClusterSlot(string key);
    public Object[] StartPipe(Action`1<CSRedisClientPipe`1<string>> handler);
    public CSRedisClientPipe`1<string> StartPipe();
    [CompilerGeneratedAttribute]
public NodesServerManagerProvider get_NodesServerManager();
    [CompilerGeneratedAttribute]
public void set_NodesServerManager(NodesServerManagerProvider value);
    public NodeServerManagerProvider NodeServerManager(string node);
    [ObsoleteAttribute("不建议手工执行，连接池自己管理最佳")]
private bool Auth(string nodeKey, string password);
    public string Echo(string nodeKey, string message);
    public string Echo(string message);
    public bool Ping(string nodeKey);
    public bool Ping();
    [ObsoleteAttribute("不建议手工执行，连接池自己管理最佳")]
private bool Quit(string nodeKey);
    [ObsoleteAttribute("不建议手工执行，连接池所有连接应该指向同一数据库，若手工修改将导致数据的不一致")]
private bool Select(string nodeKey, int index);
    public object Eval(string script, string key, Object[] args);
    public object EvalSHA(string sha1, string key, Object[] args);
    public Boolean[] ScriptExists(String[] sha1);
    public void ScriptFlush();
    public void ScriptKill();
    public string ScriptLoad(string script);
    public long Publish(string channel, string message);
    public long PublishNoneMessageId(string channel, string message);
    public String[] PubSubChannels(string pattern);
    public long PubSubNumPat();
    public Dictionary`2<string, long> PubSubNumSub(String[] channels);
    public SubscribeObject Subscribe(ValueTuple`2[] channels);
    public PSubscribeObject PSubscribe(String[] channelPatterns, Action`1<PSubscribePMessageEventArgs> pmessage);
    public SubscribeListBroadcastObject SubscribeListBroadcast(string listKey, string clientId, Action`1<string> onMessage);
    public SubscribeListObject SubscribeList(string listKey, Action`1<string> onMessage);
    public SubscribeListObject SubscribeList(String[] listKeys, Action`2<string, string> onMessage);
    private SubscribeListObject SubscribeList(String[] listKeys, Action`2<string, string> onMessage, bool ignoreEmpty);
    public bool PfAdd(string key, T[] elements);
    public long PfCount(String[] keys);
    public bool PfMerge(string destKey, String[] sourceKeys);
    public ValueTuple`2[] ZPopMax(string key, long count);
    public ValueTuple`2[] ZPopMax(string key, long count);
    public ValueTuple`2[] ZPopMin(string key, long count);
    public ValueTuple`2[] ZPopMin(string key, long count);
    public long ZAdd(string key, ValueTuple`2[] scoreMembers);
    public long ZCard(string key);
    public long ZCount(string key, decimal min, decimal max);
    public long ZCount(string key, string min, string max);
    public decimal ZIncrBy(string key, object member, decimal increment);
    public long ZInterStore(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    public String[] ZRange(string key, long start, long stop);
    public T[] ZRange(string key, long start, long stop);
    public ValueTuple`2[] ZRangeWithScores(string key, long start, long stop);
    public ValueTuple`2[] ZRangeWithScores(string key, long start, long stop);
    public String[] ZRangeByScore(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    public T[] ZRangeByScore(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    public String[] ZRangeByScore(string key, string min, string max, Nullable`1<long> count, long offset);
    public T[] ZRangeByScore(string key, string min, string max, Nullable`1<long> count, long offset);
    public ValueTuple`2[] ZRangeByScoreWithScores(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    public ValueTuple`2[] ZRangeByScoreWithScores(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    public ValueTuple`2[] ZRangeByScoreWithScores(string key, string min, string max, Nullable`1<long> count, long offset);
    public ValueTuple`2[] ZRangeByScoreWithScores(string key, string min, string max, Nullable`1<long> count, long offset);
    public Nullable`1<long> ZRank(string key, object member);
    public long ZRem(string key, T[] member);
    public long ZRemRangeByRank(string key, long start, long stop);
    public long ZRemRangeByScore(string key, decimal min, decimal max);
    public long ZRemRangeByScore(string key, string min, string max);
    public String[] ZRevRange(string key, long start, long stop);
    public T[] ZRevRange(string key, long start, long stop);
    public ValueTuple`2[] ZRevRangeWithScores(string key, long start, long stop);
    public ValueTuple`2[] ZRevRangeWithScores(string key, long start, long stop);
    public String[] ZRevRangeByScore(string key, decimal max, decimal min, Nullable`1<long> count, Nullable`1<long> offset);
    public T[] ZRevRangeByScore(string key, decimal max, decimal min, Nullable`1<long> count, long offset);
    public String[] ZRevRangeByScore(string key, string max, string min, Nullable`1<long> count, Nullable`1<long> offset);
    public T[] ZRevRangeByScore(string key, string max, string min, Nullable`1<long> count, long offset);
    public ValueTuple`2[] ZRevRangeByScoreWithScores(string key, decimal max, decimal min, Nullable`1<long> count, long offset);
    public ValueTuple`2[] ZRevRangeByScoreWithScores(string key, decimal max, decimal min, Nullable`1<long> count, long offset);
    public ValueTuple`2[] ZRevRangeByScoreWithScores(string key, string max, string min, Nullable`1<long> count, long offset);
    public ValueTuple`2[] ZRevRangeByScoreWithScores(string key, string max, string min, Nullable`1<long> count, long offset);
    public Nullable`1<long> ZRevRank(string key, object member);
    public Nullable`1<decimal> ZScore(string key, object member);
    public long ZUnionStore(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    public RedisScan`1<ValueTuple`2<string, decimal>> ZScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public RedisScan`1<ValueTuple`2<T, decimal>> ZScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public String[] ZRangeByLex(string key, string min, string max, Nullable`1<long> count, long offset);
    public T[] ZRangeByLex(string key, string min, string max, Nullable`1<long> count, long offset);
    public long ZRemRangeByLex(string key, string min, string max);
    public long ZLexCount(string key, string min, string max);
    public long SAdd(string key, T[] members);
    public long SCard(string key);
    public String[] SDiff(String[] keys);
    public T[] SDiff(String[] keys);
    public long SDiffStore(string destination, String[] keys);
    public String[] SInter(String[] keys);
    public T[] SInter(String[] keys);
    public long SInterStore(string destination, String[] keys);
    public bool SIsMember(string key, object member);
    public String[] SMembers(string key);
    public T[] SMembers(string key);
    public bool SMove(string source, string destination, object member);
    public string SPop(string key);
    public T SPop(string key);
    public String[] SPop(string key, long count);
    public T[] SPop(string key, long count);
    public string SRandMember(string key);
    public T SRandMember(string key);
    public String[] SRandMembers(string key, int count);
    public T[] SRandMembers(string key, int count);
    public long SRem(string key, T[] members);
    public String[] SUnion(String[] keys);
    public T[] SUnion(String[] keys);
    public long SUnionStore(string destination, String[] keys);
    public RedisScan`1<string> SScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public RedisScan`1<T> SScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public Nullable`1<ValueTuple`2<string, string>> BLPopWithKey(int timeout, String[] keys);
    public Nullable`1<ValueTuple`2<string, T>> BLPopWithKey(int timeout, String[] keys);
    public string BLPop(int timeout, String[] keys);
    public T BLPop(int timeout, String[] keys);
    public Nullable`1<ValueTuple`2<string, string>> BRPopWithKey(int timeout, String[] keys);
    public Nullable`1<ValueTuple`2<string, T>> BRPopWithKey(int timeout, String[] keys);
    public string BRPop(int timeout, String[] keys);
    public T BRPop(int timeout, String[] keys);
    public string BRPopLPush(string source, string destination, int timeout);
    public T BRPopLPush(string source, string destination, int timeout);
    public string LIndex(string key, long index);
    public T LIndex(string key, long index);
    public long LInsertBefore(string key, object pivot, object value);
    public long LInsertAfter(string key, object pivot, object value);
    public long LLen(string key);
    public string LPop(string key);
    public T LPop(string key);
    public long LPush(string key, T[] value);
    public long LPushX(string key, object value);
    public String[] LRange(string key, long start, long stop);
    public T[] LRange(string key, long start, long stop);
    public long LRem(string key, long count, object value);
    public bool LSet(string key, long index, object value);
    public bool LTrim(string key, long start, long stop);
    public string RPop(string key);
    public T RPop(string key);
    public string RPopLPush(string source, string destination);
    public T RPopLPush(string source, string destination);
    public long RPush(string key, T[] value);
    public long RPushX(string key, object value);
    public long HStrLen(string key, string field);
    public long HDel(string key, String[] fields);
    public bool HExists(string key, string field);
    public string HGet(string key, string field);
    public T HGet(string key, string field);
    public Dictionary`2<string, string> HGetAll(string key);
    public Dictionary`2<string, T> HGetAll(string key);
    public long HIncrBy(string key, string field, long value);
    public decimal HIncrByFloat(string key, string field, decimal value);
    public String[] HKeys(string key);
    public long HLen(string key);
    public String[] HMGet(string key, String[] fields);
    public T[] HMGet(string key, String[] fields);
    public bool HMSet(string key, Object[] keyValues);
    public bool HSet(string key, string field, object value);
    public bool HSetNx(string key, string field, object value);
    public String[] HVals(string key);
    public T[] HVals(string key);
    public RedisScan`1<ValueTuple`2<string, string>> HScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public RedisScan`1<ValueTuple`2<string, T>> HScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public long Append(string key, object value);
    public long BitCount(string key, long start, long end);
    public long BitOp(RedisBitOp op, string destKey, String[] keys);
    public long BitPos(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public string Get(string key);
    public T Get(string key);
    public void Get(string key, Stream destination, int bufferSize);
    public bool GetBit(string key, UInt32 offset);
    public string GetRange(string key, long start, long end);
    public T GetRange(string key, long start, long end);
    public string GetSet(string key, object value);
    public T GetSet(string key, object value);
    public long IncrBy(string key, long value);
    public decimal IncrByFloat(string key, decimal value);
    public String[] MGet(String[] keys);
    public T[] MGet(String[] keys);
    public bool MSet(Object[] keyValues);
    public bool MSetNx(Object[] keyValues);
    internal bool MSetInternal(RedisExistence exists, Object[] keyValues);
    public bool Set(string key, object value, int expireSeconds, Nullable`1<RedisExistence> exists);
    public bool Set(string key, object value, TimeSpan expire, Nullable`1<RedisExistence> exists);
    public bool SetBit(string key, UInt32 offset, bool value);
    public bool SetNx(string key, object value);
    public long SetRange(string key, UInt32 offset, object value);
    public long StrLen(string key);
    public long Touch(String[] key);
    public long UnLink(String[] key);
    public long Del(String[] key);
    public Byte[] Dump(string key);
    public bool Exists(string key);
    public long Exists(String[] keys);
    public bool Expire(string key, int seconds);
    public bool Expire(string key, TimeSpan expire);
    public bool ExpireAt(string key, DateTime expire);
    public String[] Keys(string pattern);
    public bool Move(string key, int database);
    public string ObjectEncoding(string key);
    public Nullable`1<long> ObjectRefCount(string key);
    public Nullable`1<long> ObjectIdleTime(string key);
    public bool Persist(string key);
    public bool PExpire(string key, int milliseconds);
    public bool PExpire(string key, TimeSpan expire);
    public bool PExpireAt(string key, DateTime expire);
    public long PTtl(string key);
    public string RandomKey();
    public bool Rename(string key, string newKey);
    public bool RenameNx(string key, string newKey);
    public bool Restore(string key, Byte[] serializedValue);
    public bool Restore(string key, long ttlMilliseconds, Byte[] serializedValue);
    public String[] Sort(string key, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public long SortAndStore(string key, string destination, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public long Ttl(string key);
    public KeyType Type(string key);
    public RedisScan`1<string> Scan(long cursor, string pattern, Nullable`1<long> count);
    public RedisScan`1<T> Scan(long cursor, string pattern, Nullable`1<long> count);
    public bool GeoAdd(string key, decimal longitude, decimal latitude, object member);
    public long GeoAdd(string key, ValueTuple`3[] values);
    public Nullable`1<decimal> GeoDist(string key, object member1, object member2, GeoUnit unit);
    public String[] GeoHash(string key, Object[] members);
    public Nullable`1[] GeoPos(string key, Object[] members);
    public String[] GeoRadius(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public T[] GeoRadius(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public ValueTuple`2[] GeoRadiusWithDist(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public ValueTuple`2[] GeoRadiusWithDist(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    private ValueTuple`3[] GeoRadiusWithCoord(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    private ValueTuple`3[] GeoRadiusWithCoord(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public ValueTuple`4[] GeoRadiusWithDistAndCoord(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public ValueTuple`4[] GeoRadiusWithDistAndCoord(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public String[] GeoRadiusByMember(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public T[] GeoRadiusByMember(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public ValueTuple`2[] GeoRadiusByMemberWithDist(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public ValueTuple`2[] GeoRadiusByMemberWithDist(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    private ValueTuple`3[] GeoRadiusByMemberWithCoord(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    private ValueTuple`3[] GeoRadiusByMemberWithCoord(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public ValueTuple`4[] GeoRadiusByMemberWithDistAndCoord(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public ValueTuple`4[] GeoRadiusByMemberWithDistAndCoord(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public long XAck(string key, string group, string id);
    public string XAdd(string key, ValueTuple`2[] fieldValues);
    public string XAdd(string key, string id, ValueTuple`2[] fieldValues);
    public string XAdd(string key, long maxLen, string id, ValueTuple`2[] fieldValues);
    public ValueTuple`2[] XClaim(string key, string group, string consumer, long minIdleTime, String[] id);
    public ValueTuple`2[] XClaim(string key, string group, string consumer, long minIdleTime, String[] id, long idle, long retryCount, bool force);
    public String[] XClaimJustId(string key, string group, string consumer, long minIdleTime, String[] id);
    public String[] XClaimJustId(string key, string group, string consumer, long minIdleTime, String[] id, long idle, long retryCount, bool force);
    public long XDel(string key, String[] id);
    public string XGroupCreate(string key, string group, string id, bool MkStream);
    public string XGroupSetId(string key, string group, string id);
    public bool XGroupDestroy(string key, string group);
    public bool XGroupDelConsumer(string key, string group, string consumer);
    public ValueTuple`7<long, long, long, long, string, ValueTuple`2<string, String[]>, ValueTuple`2<string, String[]>> XInfoStream(string key);
    public ValueTuple`4[] XInfoGroups(string key);
    public ValueTuple`3[] XInfoConsumers(string key, string group);
    public long XLen(string key);
    public ValueTuple`4<long, string, string, ValueTuple`2[]> XPending(string key, string group);
    public ValueTuple`4[] XPending(string key, string group, string start, string end, long count, string consumer);
    public ValueTuple`2[] XRange(string key, string start, string end, long count);
    public ValueTuple`2[] XRevRange(string key, string end, string start, long count);
    public ValueTuple`2[] XRead(long count, long block, ValueTuple`2[] streams);
    public ValueTuple`2[] XReadGroup(string group, string consumer, long count, long block, ValueTuple`2[] streams);
    public long XTrim(string key, long maxLen);
    public bool BfReserve(string key, decimal errorRate, long capacity, int expansion, bool nonScaling);
    public bool BfAdd(string key, object item);
    public Boolean[] BfMAdd(string key, Object[] items);
    public Boolean[] BfInsert(string key, Object[] items, Nullable`1<long> capacity, string error, int expansion, bool noCreate, bool nonScaling);
    public bool BfExists(string key, object item);
    public Boolean[] BfMExists(string key, Object[] items);
    public RedisScan`1<Byte[]> BfScanDump(string key, long iter);
    public bool BfLoadChunk(string key, long iter, Byte[] data);
    public ValueTuple`5<long, long, long, long, long> BfInfo(string key);
    public bool CfReserve(string key, long capacity, Nullable`1<long> bucketSize, Nullable`1<long> maxIterations, Nullable`1<int> expansion);
    public bool CfAdd(string key, object item);
    public bool CfAddNx(string key, object item);
    public Boolean[] CfInsert(string key, Object[] items, Nullable`1<long> capacity, bool noCreate);
    public Boolean[] CfInsertNx(string key, Object[] items, Nullable`1<long> capacity, bool noCreate);
    public bool CfExists(string key, object item);
    public bool CfDel(string key, object item);
    public long CfCount(string key, object item);
    public RedisScan`1<Byte[]> CfScanDump(string key, long iter);
    public bool CfLoadChunk(string key, long iter, Byte[] data);
    public ValueTuple`8<long, long, long, long, long, long, long, ValueTuple`1<long>> CfInfo(string key);
    public bool CmsInitByDim(string key, long width, long depth);
    public bool CmsInitByProb(string key, decimal error, decimal probability);
    public Int64[] CmsIncrBy(string key, ValueTuple`2[] items);
    public Int64[] CmsQuery(string key, Object[] items);
    public bool CmsMerge(string dest, long numKeys, String[] src, Int64[] weights);
    public ValueTuple`3<long, long, long> CmsInfo(string key);
    public bool TopkReserve(string key, long topk, long width, long depth, decimal decay);
    public String[] TopkAdd(string key, Object[] items);
    public String[] TopkIncrBy(string key, ValueTuple`2[] items);
    public Boolean[] TopkQuery(string key, Object[] items);
    public Int64[] TopkCount(string key, Object[] items);
    public String[] TopkList(string key);
    public ValueTuple`4<long, long, long, decimal> TopkInfo(string key);
    public CSRedisClientLock Lock(string name, int timeoutSeconds, bool autoDelay);
    public CSRedisClientLock TryLock(string name, int timeoutSeconds, bool autoDelay);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GetClientAsync>d__361")]
[DebuggerStepThroughAttribute]
private Task`1<AutoPipe> GetClientAsync(RedisClientPool pool);
    private void ReturnClient(AutoPipe ap, Object`1<RedisClient> obj, RedisClientPool pool, Exception ex);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GetAndExecuteAsync>d__363`1")]
[DebuggerStepThroughAttribute]
private Task`1<T> GetAndExecuteAsync(RedisClientPool pool, Func`2<Object`1<RedisClient>, Task`1<T>> handerAsync, int jump, int errtimes);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<NodesNotSupportAsync>d__364`1")]
[DebuggerStepThroughAttribute]
private Task`1<T> NodesNotSupportAsync(String[] keys, T defaultValue, Func`3<Object`1<RedisClient>, String[], Task`1<T>> callbackAsync);
    private Task`1<T> NodesNotSupportAsync(string key, Func`3<Object`1<RedisClient>, string, Task`1<T>> callback);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<CacheShellAsync>d__366`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> CacheShellAsync(string key, int timeoutSeconds, Func`1<Task`1<T>> getDataAsync);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<CacheShellAsync>d__367`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> CacheShellAsync(string key, string field, int timeoutSeconds, Func`1<Task`1<T>> getDataAsync);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<CacheShellAsync>d__368`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> CacheShellAsync(string key, String[] fields, int timeoutSeconds, Func`2<String[], Task`1<ValueTuple`2[]>> getDataAsync);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ExecuteScalarAsync>d__369`1")]
[DebuggerStepThroughAttribute]
private Task`1<T> ExecuteScalarAsync(string key, Func`3<Object`1<RedisClient>, string, Task`1<T>> handerAsync);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ExecuteArrayAsync>d__370`1")]
[DebuggerStepThroughAttribute]
private Task`1<T[]> ExecuteArrayAsync(String[] key, Func`3<Object`1<RedisClient>, String[], Task`1<T[]>> handerAsync);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ExecuteNonQueryAsync>d__371")]
[DebuggerStepThroughAttribute]
private Task`1<long> ExecuteNonQueryAsync(String[] key, Func`3<Object`1<RedisClient>, String[], Task`1<long>> handerAsync);
    [ObsoleteAttribute("不建议手工执行，连接池自己管理最佳")]
private Task`1<bool> AuthAsync(string nodeKey, string password);
    public Task`1<string> EchoAsync(string nodeKey, string message);
    public Task`1<string> EchoAsync(string message);
    public Task`1<bool> PingAsync(string nodeKey);
    public Task`1<bool> PingAsync();
    [ObsoleteAttribute("不建议手工执行，连接池自己管理最佳")]
private Task`1<bool> QuitAsync(string nodeKey);
    [ObsoleteAttribute("不建议手工执行，连接池所有连接应该指向同一数据库，若手工修改将导致数据的不一致")]
private Task`1<bool> SelectAsync(string nodeKey, int index);
    public Task`1<object> EvalAsync(string script, string key, Object[] args);
    public Task`1<object> EvalSHAAsync(string sha1, string key, Object[] args);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ScriptExistsAsync>d__381")]
[DebuggerStepThroughAttribute]
public Task`1<Boolean[]> ScriptExistsAsync(String[] sha1);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ScriptFlushAsync>d__382")]
[DebuggerStepThroughAttribute]
public Task ScriptFlushAsync();
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ScriptKillAsync>d__383")]
[DebuggerStepThroughAttribute]
public Task ScriptKillAsync();
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ScriptLoadAsync>d__384")]
[DebuggerStepThroughAttribute]
public Task`1<string> ScriptLoadAsync(string script);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<PublishAsync>d__385")]
[DebuggerStepThroughAttribute]
public Task`1<long> PublishAsync(string channel, string message);
    public Task`1<long> PublishNoneMessageIdAsync(string channel, string message);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<PubSubChannelsAsync>d__387")]
[DebuggerStepThroughAttribute]
public Task`1<String[]> PubSubChannelsAsync(string pattern);
    [ObsoleteAttribute("分区模式下，其他客户端的模糊订阅可能不会返回")]
public Task`1<long> PubSubNumPatAsync();
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<PubSubNumSubAsync>d__389")]
[DebuggerStepThroughAttribute]
[ObsoleteAttribute("分区模式下，其他客户端的订阅可能不会返回")]
public Task`1<Dictionary`2<string, long>> PubSubNumSubAsync(String[] channels);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<PfAddAsync>d__390`1")]
[DebuggerStepThroughAttribute]
public Task`1<bool> PfAddAsync(string key, T[] elements);
    [ObsoleteAttribute("分区模式下，若keys分散在多个分区节点时，将报错")]
public Task`1<long> PfCountAsync(String[] keys);
    [ObsoleteAttribute("分区模式下，若keys分散在多个分区节点时，将报错")]
public Task`1<bool> PfMergeAsync(string destKey, String[] sourceKeys);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZPopMaxAsync>d__393")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZPopMaxAsync(string key, long count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZPopMaxAsync>d__394`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZPopMaxAsync(string key, long count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZPopMinAsync>d__395")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZPopMinAsync(string key, long count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZPopMinAsync>d__396`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZPopMinAsync(string key, long count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZAddAsync>d__397")]
[DebuggerStepThroughAttribute]
public Task`1<long> ZAddAsync(string key, ValueTuple`2[] scoreMembers);
    public Task`1<long> ZCardAsync(string key);
    public Task`1<long> ZCountAsync(string key, decimal min, decimal max);
    public Task`1<long> ZCountAsync(string key, string min, string max);
    public Task`1<decimal> ZIncrByAsync(string key, string member, decimal increment);
    public Task`1<long> ZInterStoreAsync(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    public Task`1<String[]> ZRangeAsync(string key, long start, long stop);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeAsync>d__404`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> ZRangeAsync(string key, long start, long stop);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeWithScoresAsync>d__405")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRangeWithScoresAsync(string key, long start, long stop);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeWithScoresAsync>d__406`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRangeWithScoresAsync(string key, long start, long stop);
    public Task`1<String[]> ZRangeByScoreAsync(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeByScoreAsync>d__408`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> ZRangeByScoreAsync(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    public Task`1<String[]> ZRangeByScoreAsync(string key, string min, string max, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeByScoreAsync>d__410`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> ZRangeByScoreAsync(string key, string min, string max, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeByScoreWithScoresAsync>d__411")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRangeByScoreWithScoresAsync(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeByScoreWithScoresAsync>d__412`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRangeByScoreWithScoresAsync(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeByScoreWithScoresAsync>d__413")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRangeByScoreWithScoresAsync(string key, string min, string max, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeByScoreWithScoresAsync>d__414`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRangeByScoreWithScoresAsync(string key, string min, string max, Nullable`1<long> count, long offset);
    public Task`1<Nullable`1<long>> ZRankAsync(string key, object member);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRemAsync>d__416`1")]
[DebuggerStepThroughAttribute]
public Task`1<long> ZRemAsync(string key, T[] member);
    public Task`1<long> ZRemRangeByRankAsync(string key, long start, long stop);
    public Task`1<long> ZRemRangeByScoreAsync(string key, decimal min, decimal max);
    public Task`1<long> ZRemRangeByScoreAsync(string key, string min, string max);
    public Task`1<String[]> ZRevRangeAsync(string key, long start, long stop);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRevRangeAsync>d__421`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> ZRevRangeAsync(string key, long start, long stop);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRevRangeWithScoresAsync>d__422")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRevRangeWithScoresAsync(string key, long start, long stop);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRevRangeWithScoresAsync>d__423`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRevRangeWithScoresAsync(string key, long start, long stop);
    public Task`1<String[]> ZRevRangeByScoreAsync(string key, decimal max, decimal min, Nullable`1<long> count, Nullable`1<long> offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRevRangeByScoreAsync>d__425`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> ZRevRangeByScoreAsync(string key, decimal max, decimal min, Nullable`1<long> count, long offset);
    public Task`1<String[]> ZRevRangeByScoreAsync(string key, string max, string min, Nullable`1<long> count, Nullable`1<long> offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRevRangeByScoreAsync>d__427`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> ZRevRangeByScoreAsync(string key, string max, string min, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRevRangeByScoreWithScoresAsync>d__428")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, decimal max, decimal min, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRevRangeByScoreWithScoresAsync>d__429`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, decimal max, decimal min, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRevRangeByScoreWithScoresAsync>d__430")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, string max, string min, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRevRangeByScoreWithScoresAsync>d__431`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, string max, string min, Nullable`1<long> count, long offset);
    public Task`1<Nullable`1<long>> ZRevRankAsync(string key, object member);
    public Task`1<Nullable`1<decimal>> ZScoreAsync(string key, object member);
    public Task`1<long> ZUnionStoreAsync(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZScanAsync>d__435")]
[DebuggerStepThroughAttribute]
public Task`1<RedisScan`1<ValueTuple`2<string, decimal>>> ZScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZScanAsync>d__436`1")]
[DebuggerStepThroughAttribute]
public Task`1<RedisScan`1<ValueTuple`2<T, decimal>>> ZScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public Task`1<String[]> ZRangeByLexAsync(string key, string min, string max, Nullable`1<long> count, long offset);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ZRangeByLexAsync>d__438`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> ZRangeByLexAsync(string key, string min, string max, Nullable`1<long> count, long offset);
    public Task`1<long> ZRemRangeByLexAsync(string key, string min, string max);
    public Task`1<long> ZLexCountAsync(string key, string min, string max);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SAddAsync>d__441`1")]
[DebuggerStepThroughAttribute]
public Task`1<long> SAddAsync(string key, T[] members);
    public Task`1<long> SCardAsync(string key);
    public Task`1<String[]> SDiffAsync(String[] keys);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SDiffAsync>d__444`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> SDiffAsync(String[] keys);
    public Task`1<long> SDiffStoreAsync(string destination, String[] keys);
    public Task`1<String[]> SInterAsync(String[] keys);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SInterAsync>d__447`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> SInterAsync(String[] keys);
    public Task`1<long> SInterStoreAsync(string destination, String[] keys);
    public Task`1<bool> SIsMemberAsync(string key, object member);
    public Task`1<String[]> SMembersAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SMembersAsync>d__451`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> SMembersAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SMoveAsync>d__452")]
[DebuggerStepThroughAttribute]
public Task`1<bool> SMoveAsync(string source, string destination, object member);
    public Task`1<string> SPopAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SPopAsync>d__454`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> SPopAsync(string key);
    public Task`1<String[]> SPopAsync(string key, long count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SPopAsync>d__456`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> SPopAsync(string key, long count);
    public Task`1<string> SRandMemberAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SRandMemberAsync>d__458`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> SRandMemberAsync(string key);
    public Task`1<String[]> SRandMembersAsync(string key, int count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SRandMembersAsync>d__460`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> SRandMembersAsync(string key, int count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SRemAsync>d__461`1")]
[DebuggerStepThroughAttribute]
public Task`1<long> SRemAsync(string key, T[] members);
    public Task`1<String[]> SUnionAsync(String[] keys);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SUnionAsync>d__463`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> SUnionAsync(String[] keys);
    public Task`1<long> SUnionStoreAsync(string destination, String[] keys);
    public Task`1<RedisScan`1<string>> SScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SScanAsync>d__466`1")]
[DebuggerStepThroughAttribute]
public Task`1<RedisScan`1<T>> SScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public Task`1<string> LIndexAsync(string key, long index);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<LIndexAsync>d__468`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> LIndexAsync(string key, long index);
    public Task`1<long> LInsertBeforeAsync(string key, object pivot, object value);
    public Task`1<long> LInsertAfterAsync(string key, object pivot, object value);
    public Task`1<long> LLenAsync(string key);
    public Task`1<string> LPopAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<LPopAsync>d__473`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> LPopAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<LPushAsync>d__474`1")]
[DebuggerStepThroughAttribute]
public Task`1<long> LPushAsync(string key, T[] value);
    public Task`1<long> LPushXAsync(string key, object value);
    public Task`1<String[]> LRangeAsync(string key, long start, long stop);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<LRangeAsync>d__477`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> LRangeAsync(string key, long start, long stop);
    public Task`1<long> LRemAsync(string key, long count, object value);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<LSetAsync>d__479")]
[DebuggerStepThroughAttribute]
public Task`1<bool> LSetAsync(string key, long index, object value);
    public Task`1<bool> LTrimAsync(string key, long start, long stop);
    public Task`1<string> RPopAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<RPopAsync>d__482`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> RPopAsync(string key);
    public Task`1<string> RPopLPushAsync(string source, string destination);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<RPopLPushAsync>d__484`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> RPopLPushAsync(string source, string destination);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<RPushAsync>d__485`1")]
[DebuggerStepThroughAttribute]
public Task`1<long> RPushAsync(string key, T[] value);
    public Task`1<long> RPushXAsync(string key, object value);
    public Task`1<long> HStrLenAsync(string key, string field);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<HDelAsync>d__488")]
[DebuggerStepThroughAttribute]
public Task`1<long> HDelAsync(string key, String[] fields);
    public Task`1<bool> HExistsAsync(string key, string field);
    public Task`1<string> HGetAsync(string key, string field);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<HGetAsync>d__491`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> HGetAsync(string key, string field);
    public Task`1<Dictionary`2<string, string>> HGetAllAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<HGetAllAsync>d__493`1")]
[DebuggerStepThroughAttribute]
public Task`1<Dictionary`2<string, T>> HGetAllAsync(string key);
    public Task`1<long> HIncrByAsync(string key, string field, long value);
    public Task`1<decimal> HIncrByFloatAsync(string key, string field, decimal value);
    public Task`1<String[]> HKeysAsync(string key);
    public Task`1<long> HLenAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<HMGetAsync>d__498")]
[DebuggerStepThroughAttribute]
public Task`1<String[]> HMGetAsync(string key, String[] fields);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<HMGetAsync>d__499`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> HMGetAsync(string key, String[] fields);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<HMSetAsync>d__500")]
[DebuggerStepThroughAttribute]
public Task`1<bool> HMSetAsync(string key, Object[] keyValues);
    public Task`1<bool> HSetAsync(string key, string field, object value);
    public Task`1<bool> HSetNxAsync(string key, string field, object value);
    public Task`1<String[]> HValsAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<HValsAsync>d__504`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> HValsAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<HScanAsync>d__505")]
[DebuggerStepThroughAttribute]
public Task`1<RedisScan`1<ValueTuple`2<string, string>>> HScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<HScanAsync>d__506`1")]
[DebuggerStepThroughAttribute]
public Task`1<RedisScan`1<ValueTuple`2<string, T>>> HScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public Task`1<long> AppendAsync(string key, object value);
    public Task`1<long> BitCountAsync(string key, long start, long end);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<BitOpAsync>d__509")]
[DebuggerStepThroughAttribute]
public Task`1<long> BitOpAsync(RedisBitOp op, string destKey, String[] keys);
    public Task`1<long> BitPosAsync(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public Task`1<string> GetAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GetAsync>d__512`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> GetAsync(string key);
    public Task`1<bool> GetBitAsync(string key, UInt32 offset);
    public Task`1<string> GetRangeAsync(string key, long start, long end);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GetRangeAsync>d__515`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> GetRangeAsync(string key, long start, long end);
    public Task`1<string> GetSetAsync(string key, object value);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GetSetAsync>d__517`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> GetSetAsync(string key, object value);
    public Task`1<long> IncrByAsync(string key, long value);
    public Task`1<decimal> IncrByFloatAsync(string key, decimal value);
    public Task`1<String[]> MGetAsync(String[] keys);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<MGetAsync>d__521`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> MGetAsync(String[] keys);
    public Task`1<bool> MSetAsync(Object[] keyValues);
    public Task`1<bool> MSetNxAsync(Object[] keyValues);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<MSetInternalAsync>d__524")]
[DebuggerStepThroughAttribute]
internal Task`1<bool> MSetInternalAsync(RedisExistence exists, Object[] keyValues);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SetAsync>d__525")]
[DebuggerStepThroughAttribute]
public Task`1<bool> SetAsync(string key, object value, int expireSeconds, Nullable`1<RedisExistence> exists);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<SetAsync>d__526")]
[DebuggerStepThroughAttribute]
public Task`1<bool> SetAsync(string key, object value, TimeSpan expire, Nullable`1<RedisExistence> exists);
    public Task`1<bool> SetBitAsync(string key, UInt32 offset, bool value);
    public Task`1<bool> SetNxAsync(string key, object value);
    public Task`1<long> SetRangeAsync(string key, UInt32 offset, object value);
    public Task`1<long> StrLenAsync(string key);
    public Task`1<long> TouchAsync(String[] key);
    public Task`1<long> UnLinkAsync(String[] key);
    public Task`1<long> DelAsync(String[] key);
    public Task`1<Byte[]> DumpAsync(string key);
    public Task`1<bool> ExistsAsync(string key);
    public Task`1<long> ExistsAsync(String[] keys);
    public Task`1<bool> ExpireAsync(string key, int seconds);
    public Task`1<bool> ExpireAsync(string key, TimeSpan expire);
    public Task`1<bool> ExpireAtAsync(string key, DateTime expire);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<KeysAsync>d__540")]
[DebuggerStepThroughAttribute]
public Task`1<String[]> KeysAsync(string pattern);
    public Task`1<bool> MoveAsync(string key, int database);
    public Task`1<string> ObjectEncodingAsync(string key);
    public Task`1<Nullable`1<long>> ObjectRefCountAsync(string key);
    public Task`1<Nullable`1<long>> ObjectIdleTimeAsync(string key);
    public Task`1<bool> PersistAsync(string key);
    public Task`1<bool> PExpireAsync(string key, int milliseconds);
    public Task`1<bool> PExpireAsync(string key, TimeSpan expire);
    public Task`1<bool> PExpireAtAsync(string key, DateTime expire);
    public Task`1<long> PTtlAsync(string key);
    public Task`1<string> RandomKeyAsync();
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<RenameAsync>d__551")]
[DebuggerStepThroughAttribute]
public Task`1<bool> RenameAsync(string key, string newKey);
    public Task`1<bool> RenameNxAsync(string key, string newKey);
    public Task`1<bool> RestoreAsync(string key, Byte[] serializedValue);
    public Task`1<bool> RestoreAsync(string key, long ttlMilliseconds, Byte[] serializedValue);
    public Task`1<String[]> SortAsync(string key, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public Task`1<long> SortAndStoreAsync(string key, string destination, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public Task`1<long> TtlAsync(string key);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<TypeAsync>d__558")]
[DebuggerStepThroughAttribute]
public Task`1<KeyType> TypeAsync(string key);
    public Task`1<RedisScan`1<string>> ScanAsync(long cursor, string pattern, Nullable`1<long> count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<ScanAsync>d__560`1")]
[DebuggerStepThroughAttribute]
public Task`1<RedisScan`1<T>> ScanAsync(long cursor, string pattern, Nullable`1<long> count);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoAddAsync>d__561")]
[DebuggerStepThroughAttribute]
public Task`1<bool> GeoAddAsync(string key, decimal longitude, decimal latitude, object member);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoAddAsync>d__562")]
[DebuggerStepThroughAttribute]
public Task`1<long> GeoAddAsync(string key, ValueTuple`3[] values);
    public Task`1<Nullable`1<decimal>> GeoDistAsync(string key, object member1, object member2, GeoUnit unit);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoHashAsync>d__564")]
[DebuggerStepThroughAttribute]
public Task`1<String[]> GeoHashAsync(string key, Object[] members);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoPosAsync>d__565")]
[DebuggerStepThroughAttribute]
public Task`1<Nullable`1[]> GeoPosAsync(string key, Object[] members);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusAsync>d__566")]
[DebuggerStepThroughAttribute]
public Task`1<String[]> GeoRadiusAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusAsync>d__567`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> GeoRadiusAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusWithDistAsync>d__568")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> GeoRadiusWithDistAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusWithDistAsync>d__569`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> GeoRadiusWithDistAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusWithCoordAsync>d__570")]
[DebuggerStepThroughAttribute]
private Task`1<ValueTuple`3[]> GeoRadiusWithCoordAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusWithCoordAsync>d__571`1")]
[DebuggerStepThroughAttribute]
private Task`1<ValueTuple`3[]> GeoRadiusWithCoordAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusWithDistAndCoordAsync>d__572")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`4[]> GeoRadiusWithDistAndCoordAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusWithDistAndCoordAsync>d__573`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`4[]> GeoRadiusWithDistAndCoordAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusByMemberAsync>d__574")]
[DebuggerStepThroughAttribute]
public Task`1<String[]> GeoRadiusByMemberAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusByMemberAsync>d__575`1")]
[DebuggerStepThroughAttribute]
public Task`1<T[]> GeoRadiusByMemberAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusByMemberWithDistAsync>d__576")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> GeoRadiusByMemberWithDistAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusByMemberWithDistAsync>d__577`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`2[]> GeoRadiusByMemberWithDistAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusByMemberWithCoordAsync>d__578")]
[DebuggerStepThroughAttribute]
private Task`1<ValueTuple`3[]> GeoRadiusByMemberWithCoordAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusByMemberWithCoordAsync>d__579`1")]
[DebuggerStepThroughAttribute]
private Task`1<ValueTuple`3[]> GeoRadiusByMemberWithCoordAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusByMemberWithDistAndCoordAsync>d__580")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`4[]> GeoRadiusByMemberWithDistAndCoordAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [AsyncStateMachineAttribute("CSRedis.CSRedisClient/<GeoRadiusByMemberWithDistAndCoordAsync>d__581`1")]
[DebuggerStepThroughAttribute]
public Task`1<ValueTuple`4[]> GeoRadiusByMemberWithDistAndCoordAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    [CompilerGeneratedAttribute]
private string <ScriptFlush>b__77_0(KeyValuePair`2<string, RedisClientPool> a);
    [CompilerGeneratedAttribute]
private string <ScriptKill>b__78_0(KeyValuePair`2<string, RedisClientPool> a);
}
public class CSRedis.CSRedisClientLock : object {
    private CSRedisClient _client;
    private string _name;
    private string _value;
    private int _timeoutSeconds;
    private Timer _autoDelayTimer;
    public CSRedisClientLock(CSRedisClient rds, string name, string value, int timeoutSeconds, double refreshSeconds, bool autoDelay);
    public bool Delay(int milliseconds);
    public bool Refresh(int milliseconds);
    public bool Unlock();
    public sealed virtual void Dispose();
}
public class CSRedis.CSRedisClientPipe`1 : object {
    private CSRedisClient rds;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, ValueTuple`2<List`1<int>, Object`1<RedisClient>>> Conns;
    private Queue`1<Func`2<object, object>> Parsers;
    private static object ConnsLock;
    private ConcurrentDictionary`2<string, RedisClientPool> Nodes { get; }
    private bool IsMultiNode { get; }
    private Func`2<string, string> NodeRuleRaw { get; }
    public int Counter { get; }
    internal CSRedisClientPipe`1(CSRedisClient csredis);
    private CSRedisClientPipe`1(CSRedisClient csredis, ConcurrentDictionary`2<string, ValueTuple`2<List`1<int>, Object`1<RedisClient>>> conns, Queue`1<Func`2<object, object>> parsers);
    private static CSRedisClientPipe`1();
    private ConcurrentDictionary`2<string, RedisClientPool> get_Nodes();
    private bool get_IsMultiNode();
    private Func`2<string, string> get_NodeRuleRaw();
    public int get_Counter();
    public Object[] EndPipe();
    public sealed virtual void Dispose();
    private CSRedisClientPipe`1<TReturn> PipeCommand(string key, Func`3<Object`1<RedisClient>, string, TReturn> handle);
    private CSRedisClientPipe`1<TReturn> PipeCommand(string key, Func`3<Object`1<RedisClient>, string, TReturn> handle, Func`2<object, object> parser);
    public CSRedisClientPipe`1<object> Eval(string script, string key, Object[] args);
    public CSRedisClientPipe`1<object> EvalSHA(string sha1, string key, Object[] args);
    public CSRedisClientPipe`1<long> Publish(string channel, string message);
    public CSRedisClientPipe`1<long> PublishNoneMessageId(string channel, string message);
    public CSRedisClientPipe`1<bool> PfAdd(string key, T[] elements);
    public CSRedisClientPipe`1<long> PfCount(string key);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZPopMax(string key, long count);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZPopMax(string key, long count);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZPopMin(string key, long count);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZPopMin(string key, long count);
    public CSRedisClientPipe`1<long> ZAdd(string key, ValueTuple`2[] scoreMembers);
    public CSRedisClientPipe`1<long> ZCard(string key);
    public CSRedisClientPipe`1<long> ZCount(string key, decimal min, decimal max);
    public CSRedisClientPipe`1<long> ZCount(string key, string min, string max);
    public CSRedisClientPipe`1<decimal> ZIncrBy(string key, string member, decimal increment);
    public CSRedisClientPipe`1<long> ZInterStore(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    public CSRedisClientPipe`1<String[]> ZRange(string key, long start, long stop);
    public CSRedisClientPipe`1<T[]> ZRange(string key, long start, long stop);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRangeWithScores(string key, long start, long stop);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRangeWithScores(string key, long start, long stop);
    public CSRedisClientPipe`1<String[]> ZRangeByScore(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<T[]> ZRangeByScore(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<String[]> ZRangeByScore(string key, string min, string max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<T[]> ZRangeByScore(string key, string min, string max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRangeByScoreWithScores(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRangeByScoreWithScores(string key, decimal min, decimal max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRangeByScoreWithScores(string key, string min, string max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRangeByScoreWithScores(string key, string min, string max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<Nullable`1<long>> ZRank(string key, object member);
    public CSRedisClientPipe`1<long> ZRem(string key, T[] member);
    public CSRedisClientPipe`1<long> ZRemRangeByRank(string key, long start, long stop);
    public CSRedisClientPipe`1<long> ZRemRangeByScore(string key, decimal min, decimal max);
    public CSRedisClientPipe`1<long> ZRemRangeByScore(string key, string min, string max);
    public CSRedisClientPipe`1<String[]> ZRevRange(string key, long start, long stop);
    public CSRedisClientPipe`1<T[]> ZRevRange(string key, long start, long stop);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRevRangeWithScores(string key, long start, long stop);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRevRangeWithScores(string key, long start, long stop);
    public CSRedisClientPipe`1<String[]> ZRevRangeByScore(string key, decimal max, decimal min, Nullable`1<long> count, Nullable`1<long> offset);
    public CSRedisClientPipe`1<T[]> ZRevRangeByScore(string key, decimal max, decimal min, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<String[]> ZRevRangeByScore(string key, string max, string min, Nullable`1<long> count, Nullable`1<long> offset);
    public CSRedisClientPipe`1<T[]> ZRevRangeByScore(string key, string max, string min, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRevRangeByScoreWithScores(string key, decimal max, decimal min, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRevRangeByScoreWithScores(string key, decimal max, decimal min, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRevRangeByScoreWithScores(string key, string max, string min, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<ValueTuple`2[]> ZRevRangeByScoreWithScores(string key, string max, string min, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<Nullable`1<long>> ZRevRank(string key, object member);
    public CSRedisClientPipe`1<Nullable`1<decimal>> ZScore(string key, object member);
    public CSRedisClientPipe`1<long> ZUnionStore(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    public CSRedisClientPipe`1<RedisScan`1<ValueTuple`2<string, decimal>>> ZScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public CSRedisClientPipe`1<RedisScan`1<ValueTuple`2<T, decimal>>> ZScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public CSRedisClientPipe`1<String[]> ZRangeByLex(string key, string min, string max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<T[]> ZRangeByLex(string key, string min, string max, Nullable`1<long> count, long offset);
    public CSRedisClientPipe`1<long> ZRemRangeByLex(string key, string min, string max);
    public CSRedisClientPipe`1<long> ZLexCount(string key, string min, string max);
    public CSRedisClientPipe`1<long> SAdd(string key, T[] members);
    public CSRedisClientPipe`1<long> SCard(string key);
    public CSRedisClientPipe`1<String[]> SDiff(String[] keys);
    public CSRedisClientPipe`1<T[]> SDiff(String[] keys);
    public CSRedisClientPipe`1<long> SDiffStore(string destination, String[] keys);
    public CSRedisClientPipe`1<String[]> SInter(String[] keys);
    public CSRedisClientPipe`1<T[]> SInter(String[] keys);
    public CSRedisClientPipe`1<long> SInterStore(string destination, String[] keys);
    public CSRedisClientPipe`1<bool> SIsMember(string key, object member);
    public CSRedisClientPipe`1<String[]> SMembers(string key);
    public CSRedisClientPipe`1<T[]> SMembers(string key);
    public CSRedisClientPipe`1<bool> SMove(string source, string destination, object member);
    public CSRedisClientPipe`1<string> SPop(string key);
    public CSRedisClientPipe`1<T> SPop(string key);
    public CSRedisClientPipe`1<string> SRandMember(string key);
    public CSRedisClientPipe`1<T> SRandMember(string key);
    public CSRedisClientPipe`1<String[]> SRandMembers(string key, int count);
    public CSRedisClientPipe`1<T[]> SRandMembers(string key, int count);
    public CSRedisClientPipe`1<long> SRem(string key, T[] members);
    public CSRedisClientPipe`1<String[]> SUnion(String[] keys);
    public CSRedisClientPipe`1<T[]> SUnion(String[] keys);
    public CSRedisClientPipe`1<long> SUnionStore(string destination, String[] keys);
    public CSRedisClientPipe`1<RedisScan`1<string>> SScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public CSRedisClientPipe`1<RedisScan`1<T>> SScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public CSRedisClientPipe`1<string> LIndex(string key, long index);
    public CSRedisClientPipe`1<T> LIndex(string key, long index);
    public CSRedisClientPipe`1<long> LInsertBefore(string key, string pivot, object value);
    public CSRedisClientPipe`1<long> LInsertAfter(string key, string pivot, object value);
    public CSRedisClientPipe`1<long> LLen(string key);
    public CSRedisClientPipe`1<string> LPop(string key);
    public CSRedisClientPipe`1<T> LPop(string key);
    public CSRedisClientPipe`1<long> LPush(string key, T[] value);
    public CSRedisClientPipe`1<long> LPushX(string key, object value);
    public CSRedisClientPipe`1<String[]> LRange(string key, long start, long stop);
    public CSRedisClientPipe`1<T[]> LRange(string key, long start, long stop);
    public CSRedisClientPipe`1<long> LRem(string key, long count, object value);
    public CSRedisClientPipe`1<bool> LSet(string key, long index, object value);
    public CSRedisClientPipe`1<bool> LTrim(string key, long start, long stop);
    public CSRedisClientPipe`1<string> RPop(string key);
    public CSRedisClientPipe`1<T> RPop(string key);
    public CSRedisClientPipe`1<string> RPopLPush(string source, string destination);
    public CSRedisClientPipe`1<T> RPopLPush(string source, string destination);
    public CSRedisClientPipe`1<long> RPush(string key, T[] value);
    public CSRedisClientPipe`1<long> RPushX(string key, object value);
    public CSRedisClientPipe`1<long> HStrLen(string key, string field);
    public CSRedisClientPipe`1<long> HDel(string key, String[] fields);
    public CSRedisClientPipe`1<bool> HExists(string key, string field);
    public CSRedisClientPipe`1<string> HGet(string key, string field);
    public CSRedisClientPipe`1<T> HGet(string key, string field);
    public CSRedisClientPipe`1<Dictionary`2<string, string>> HGetAll(string key);
    public CSRedisClientPipe`1<Dictionary`2<string, T>> HGetAll(string key);
    public CSRedisClientPipe`1<long> HIncrBy(string key, string field, long value);
    public CSRedisClientPipe`1<decimal> HIncrByFloat(string key, string field, decimal value);
    public CSRedisClientPipe`1<String[]> HKeys(string key);
    public CSRedisClientPipe`1<long> HLen(string key);
    public CSRedisClientPipe`1<String[]> HMGet(string key, String[] fields);
    public CSRedisClientPipe`1<T[]> HMGet(string key, String[] fields);
    public CSRedisClientPipe`1<bool> HMSet(string key, Object[] keyValues);
    public CSRedisClientPipe`1<bool> HSet(string key, string field, object value);
    public CSRedisClientPipe`1<bool> HSetNx(string key, string field, object value);
    public CSRedisClientPipe`1<String[]> HVals(string key);
    public CSRedisClientPipe`1<T[]> HVals(string key);
    public CSRedisClientPipe`1<RedisScan`1<ValueTuple`2<string, string>>> HScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public CSRedisClientPipe`1<RedisScan`1<ValueTuple`2<string, T>>> HScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public CSRedisClientPipe`1<long> Append(string key, object value);
    public CSRedisClientPipe`1<long> BitCount(string key, long start, long end);
    public CSRedisClientPipe`1<long> BitOp(RedisBitOp op, string destKey, String[] keys);
    public CSRedisClientPipe`1<long> BitPos(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public CSRedisClientPipe`1<string> Get(string key);
    public CSRedisClientPipe`1<T> Get(string key);
    public CSRedisClientPipe`1<bool> GetBit(string key, UInt32 offset);
    public CSRedisClientPipe`1<string> GetRange(string key, long start, long end);
    public CSRedisClientPipe`1<T> GetRange(string key, long start, long end);
    public CSRedisClientPipe`1<string> GetSet(string key, object value);
    public CSRedisClientPipe`1<T> GetSet(string key, object value);
    public CSRedisClientPipe`1<long> IncrBy(string key, long value);
    public CSRedisClientPipe`1<decimal> IncrBy(string key, decimal value);
    public CSRedisClientPipe`1<String[]> MGet(String[] keys);
    public CSRedisClientPipe`1<bool> Set(string key, object value, int expireSeconds, Nullable`1<RedisExistence> exists);
    public CSRedisClientPipe`1<bool> Set(string key, object value, TimeSpan expire, Nullable`1<RedisExistence> exists);
    public CSRedisClientPipe`1<bool> SetBit(string key, UInt32 offset, bool value);
    public CSRedisClientPipe`1<bool> SetNx(string key, object value);
    public CSRedisClientPipe`1<long> SetRange(string key, UInt32 offset, object value);
    public CSRedisClientPipe`1<long> StrLen(string key);
    public CSRedisClientPipe`1<long> Touch(string key);
    public CSRedisClientPipe`1<long> UnLink(string key);
    public CSRedisClientPipe`1<long> Del(string key);
    public CSRedisClientPipe`1<Byte[]> Dump(string key);
    public CSRedisClientPipe`1<bool> Exists(string key);
    public CSRedisClientPipe`1<bool> Expire(string key, int seconds);
    public CSRedisClientPipe`1<bool> Expire(string key, TimeSpan expire);
    public CSRedisClientPipe`1<bool> ExpireAt(string key, DateTime expire);
    public CSRedisClientPipe`1<String[]> Keys(string pattern);
    public CSRedisClientPipe`1<bool> Move(string key, int database);
    public CSRedisClientPipe`1<string> ObjectEncoding(string key);
    public CSRedisClientPipe`1<Nullable`1<long>> ObjectRefCount(string key);
    public CSRedisClientPipe`1<Nullable`1<long>> ObjectIdleTime(string key);
    public CSRedisClientPipe`1<bool> Persist(string key);
    public CSRedisClientPipe`1<bool> PExpire(string key, int milliseconds);
    public CSRedisClientPipe`1<bool> PExpire(string key, TimeSpan expire);
    public CSRedisClientPipe`1<bool> PExpireAt(string key, DateTime expire);
    public CSRedisClientPipe`1<long> PTtl(string key);
    public CSRedisClientPipe`1<string> RandomKey();
    public CSRedisClientPipe`1<bool> Rename(string key, string newKey);
    public CSRedisClientPipe`1<bool> RenameNx(string key, string newKey);
    public CSRedisClientPipe`1<bool> Restore(string key, Byte[] serializedValue);
    public CSRedisClientPipe`1<bool> Restore(string key, long ttlMilliseconds, Byte[] serializedValue);
    public CSRedisClientPipe`1<String[]> Sort(string key, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public CSRedisClientPipe`1<long> SortAndStore(string key, string destination, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public CSRedisClientPipe`1<long> Ttl(string key);
    public CSRedisClientPipe`1<KeyType> Type(string key);
    public CSRedisClientPipe`1<RedisScan`1<string>> Scan(long cursor, string pattern, Nullable`1<long> count);
    public CSRedisClientPipe`1<RedisScan`1<T>> Scan(string key, long cursor, string pattern, Nullable`1<long> count);
    [CompilerGeneratedAttribute]
private object <SMembers>b__82_1(object obj);
    [CompilerGeneratedAttribute]
private object <SPop>b__85_1(object obj);
    [CompilerGeneratedAttribute]
private object <SRandMember>b__87_1(object obj);
    [CompilerGeneratedAttribute]
private object <LPop>b__102_1(object obj);
    [CompilerGeneratedAttribute]
private object <RPop>b__111_1(object obj);
    [CompilerGeneratedAttribute]
private object <HGetAll>b__122_1(object obj);
    [CompilerGeneratedAttribute]
private object <HVals>b__133_1(object obj);
    [CompilerGeneratedAttribute]
private object <Get>b__141_1(object obj);
}
public enum CSRedis.GeoOrderBy : Enum {
    public int value__;
    public static GeoOrderBy ASC;
    public static GeoOrderBy DESC;
}
public enum CSRedis.GeoUnit : Enum {
    public int value__;
    public static GeoUnit m;
    public static GeoUnit km;
    public static GeoUnit mi;
    public static GeoUnit ft;
}
public enum CSRedis.InfoSection : Enum {
    public int value__;
    public static InfoSection Server;
    public static InfoSection Clients;
    public static InfoSection Memory;
    public static InfoSection Persistence;
    public static InfoSection Stats;
    public static InfoSection Replication;
    public static InfoSection CPU;
    public static InfoSection CommandStats;
    public static InfoSection Cluster;
    public static InfoSection Keyspace;
}
internal class CSRedis.Internal.Commands.RedisArray : RedisCommand`1<Object[]> {
    private Queue`1<Func`2<RedisReader, object>> _parsers;
    public RedisArray(string command, Object[] args);
    public virtual Object[] Parse(RedisReader reader);
    public void AddParser(Func`2<RedisReader, object> parser);
}
internal class CSRedis.Internal.Commands.RedisBool : RedisCommand`1<bool> {
    public RedisBool(string command, Object[] args);
    public virtual bool Parse(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisBytes : RedisCommand`1<Byte[]> {
    public RedisBytes(string command, Object[] args);
    public virtual Byte[] Parse(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisDate : RedisCommand`1<DateTime> {
    private static DateTime _epoch;
    public RedisDate(string command, Object[] args);
    private static RedisDate();
    public virtual DateTime Parse(RedisReader reader);
    public static DateTime FromTimestamp(long seconds);
    public static TimeSpan ToTimestamp(DateTime date);
}
internal class CSRedis.Internal.Commands.RedisFloat : RedisCommand`1<decimal> {
    public RedisFloat(string command, Object[] args);
    public virtual decimal Parse(RedisReader reader);
    private static decimal FromString(string input);
}
internal class CSRedis.Internal.Commands.RedisHash : RedisCommand`1<Dictionary`2<string, string>> {
    public RedisHash(string command, Object[] args);
    public virtual Dictionary`2<string, string> Parse(RedisReader reader);
    private static Dictionary`2<string, string> ToDict(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisHashBytes : RedisCommand`1<Dictionary`2<string, Byte[]>> {
    public RedisHashBytes(string command, Object[] args);
    public virtual Dictionary`2<string, Byte[]> Parse(RedisReader reader);
    private static Dictionary`2<string, Byte[]> ToDict(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisInt : RedisCommand`1<long> {
    public RedisInt(string command, Object[] args);
    public virtual long Parse(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisIsMasterDownByAddrCommand : RedisCommand`1<RedisMasterState> {
    public RedisIsMasterDownByAddrCommand(string command, Object[] args);
    public virtual RedisMasterState Parse(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisObject : RedisCommand`1<object> {
    public RedisObject(string command, Object[] args);
    public virtual object Parse(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisRoleCommand : RedisCommand`1<RedisRole> {
    public RedisRoleCommand(string command, Object[] args);
    public virtual RedisRole Parse(RedisReader reader);
    private static RedisMasterRole ParseMaster(int num, string role, RedisReader reader);
    private static RedisSlaveRole ParseSlave(int num, string role, RedisReader reader);
    private static RedisSentinelRole ParseSentinel(int num, string role, RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisScanCommand`1 : RedisCommand`1<RedisScan`1<T>> {
    private RedisCommand`1<T[]> _command;
    public RedisScanCommand`1(RedisCommand`1<T[]> command);
    public virtual RedisScan`1<T> Parse(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisSlowLogCommand : RedisCommand`1<RedisSlowLogEntry> {
    public RedisSlowLogCommand(string command, Object[] args);
    public virtual RedisSlowLogEntry Parse(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisStatus : RedisCommand`1<string> {
    public RedisStatus(string command, Object[] args);
    public virtual string Parse(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisString : RedisCommand`1<string> {
    public RedisString(string command, Object[] args);
    public virtual string Parse(RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisSubscription : RedisCommand`1<RedisSubscriptionResponse> {
    public RedisSubscription(string command, Object[] args);
    public virtual RedisSubscriptionResponse Parse(RedisReader reader);
    private static RedisSubscriptionChannel ParseChannel(string type, RedisReader reader);
    private static RedisSubscriptionMessage ParseMessage(string type, RedisReader reader);
}
internal class CSRedis.Internal.Commands.RedisTuple : RedisCommand`1<Tuple`2<string, string>> {
    public RedisTuple(string command, Object[] args);
    public virtual Tuple`2<string, string> Parse(RedisReader reader);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class CSRedis.Internal.Commands.RedisXInfoConsumersCommand : RedisCommand`1<ValueTuple`3[]> {
    public RedisXInfoConsumersCommand(string command, Object[] args);
    public virtual ValueTuple`3[] Parse(RedisReader reader);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class CSRedis.Internal.Commands.RedisXInfoGroupsCommand : RedisCommand`1<ValueTuple`4[]> {
    public RedisXInfoGroupsCommand(string command, Object[] args);
    public virtual ValueTuple`4[] Parse(RedisReader reader);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class CSRedis.Internal.Commands.RedisXInfoStreamCommand : RedisCommand`1<ValueTuple`7<long, long, long, long, string, ValueTuple`2<string, String[]>, ValueTuple`2<string, String[]>>> {
    public RedisXInfoStreamCommand(string command, Object[] args);
    public virtual ValueTuple`7<long, long, long, long, string, ValueTuple`2<string, String[]>, ValueTuple`2<string, String[]>> Parse(RedisReader reader);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class CSRedis.Internal.Commands.RedisXPendingCommand : RedisCommand`1<ValueTuple`4<long, string, string, ValueTuple`2[]>> {
    public RedisXPendingCommand(string command, Object[] args);
    public virtual ValueTuple`4<long, string, string, ValueTuple`2[]> Parse(RedisReader reader);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class CSRedis.Internal.Commands.RedisXPendingStartEndCountCommand : RedisCommand`1<ValueTuple`4[]> {
    public RedisXPendingStartEndCountCommand(string command, Object[] args);
    public virtual ValueTuple`4[] Parse(RedisReader reader);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class CSRedis.Internal.Commands.RedisXRangeCommand : RedisCommand`1<ValueTuple`2[]> {
    public RedisXRangeCommand(string command, Object[] args);
    public virtual ValueTuple`2[] Parse(RedisReader reader);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class CSRedis.Internal.Commands.RedisXReadCommand : RedisCommand`1<ValueTuple`2[]> {
    public RedisXReadCommand(string command, Object[] args);
    public virtual ValueTuple`2[] Parse(RedisReader reader);
}
internal interface CSRedis.Internal.IO.IRedisAsyncCommandToken {
    public Task Task { get; }
    public RedisCommand Command { get; }
    public abstract virtual Task get_Task();
    public abstract virtual RedisCommand get_Command();
    public abstract virtual void SetResult(RedisReader reader);
    public abstract virtual void SetException(Exception e);
}
internal interface CSRedis.Internal.IO.IRedisSocket {
    public bool Connected { get; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public abstract virtual bool get_Connected();
    public abstract virtual int get_ReceiveTimeout();
    public abstract virtual void set_ReceiveTimeout(int value);
    public abstract virtual int get_SendTimeout();
    public abstract virtual void set_SendTimeout(int value);
    public abstract virtual void Connect(EndPoint endpoint, int timeout);
    public abstract virtual Task`1<bool> ConnectAsync(EndPoint endpoint);
    public abstract virtual Stream GetStream();
}
internal class CSRedis.Internal.IO.RedisAsyncCommandToken`1 : object {
    private TaskCompletionSource`1<T> _tcs;
    private RedisCommand`1<T> _command;
    public TaskCompletionSource`1<T> TaskSource { get; }
    public RedisCommand Command { get; }
    public Task Task { get; }
    public RedisAsyncCommandToken`1(RedisCommand`1<T> command);
    public TaskCompletionSource`1<T> get_TaskSource();
    public sealed virtual RedisCommand get_Command();
    public sealed virtual Task get_Task();
    public sealed virtual void SetResult(RedisReader reader);
    public sealed virtual void SetException(Exception e);
}
internal class CSRedis.Internal.IO.RedisIO : object {
    private RedisWriter _writer;
    private RedisReader _reader;
    private RedisPipeline _pipeline;
    private Stream _stream;
    private object _streamLock;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Encoding <Encoding>k__BackingField;
    public Stream Stream { get; }
    public RedisWriter Writer { get; }
    public RedisReader Reader { get; }
    public Encoding Encoding { get; public set; }
    public RedisPipeline Pipeline { get; }
    public bool IsPipelined { get; }
    public Stream get_Stream();
    public RedisWriter get_Writer();
    public RedisReader get_Reader();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    public RedisPipeline get_Pipeline();
    public bool get_IsPipelined();
    public void SetStream(Stream stream);
    [AsyncStateMachineAttribute("CSRedis.Internal.IO.RedisIO/<WriteAsync>d__21")]
[DebuggerStepThroughAttribute]
public Task`1<int> WriteAsync(RedisCommand command);
    public void Write(Byte[] data);
    public void Write(Stream stream);
    public int ReadByte();
    public int Read(Byte[] data, int offset, int count);
    public Byte[] ReadAll();
    public sealed virtual void Dispose();
    private static T GetOrThrow(T obj);
}
internal class CSRedis.Internal.IO.RedisReader : object {
    private RedisIO _io;
    public RedisReader(RedisIO io);
    public RedisMessage ReadType();
    public string ReadStatus(bool checkType);
    public long ReadInt(bool checkType);
    public object ReadBulk(bool checkType, bool asString);
    public Byte[] ReadBulkBytes(bool checkType);
    public void ReadBulkBytes(Stream destination, int bufferSize, bool checkType);
    public string ReadBulkString(bool checkType);
    public void ExpectType(RedisMessage expectedType);
    public void ExpectMultiBulk(long expectedSize);
    public void ExpectSize(long expectedSize);
    public void ExpectSize(long expectedSize, long actualSize);
    public void ReadCRLF();
    public Object[] ReadMultiBulk(bool checkType, bool bulkAsString);
    public object Read(bool bulkAsString);
    private string ReadLine();
    private void ExpectBytesRead(long expecting, long actual);
}
internal class CSRedis.Internal.IO.RedisSocket : object {
    private bool _ssl;
    internal Socket _socket;
    private EndPoint _remote;
    private TaskCompletionSource`1<bool> connectTcs;
    private bool isDisposed;
    public bool Connected { get; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public RedisSocket(bool ssl);
    public sealed virtual bool get_Connected();
    public sealed virtual int get_ReceiveTimeout();
    public sealed virtual void set_ReceiveTimeout(int value);
    public sealed virtual int get_SendTimeout();
    public sealed virtual void set_SendTimeout(int value);
    public sealed virtual void Connect(EndPoint endpoint, int timeout);
    public sealed virtual Task`1<bool> ConnectAsync(EndPoint endpoint);
    public sealed virtual Stream GetStream();
    public sealed virtual void Dispose();
    private void InitSocket(EndPoint endpoint);
    private string GetHostForAuthentication();
    [CompilerGeneratedAttribute]
private void <ConnectAsync>b__14_0(IAsyncResult asyncResult);
}
internal class CSRedis.Internal.IO.RedisSocketException : Exception {
    public RedisSocketException(string message);
}
internal class CSRedis.Internal.IO.RedisWriter : object {
    private static char Bulk;
    private static char MultiBulk;
    private static string EOL;
    private RedisIO _io;
    public RedisWriter(RedisIO io);
    public Byte[] Prepare(RedisCommand command);
}
internal class CSRedis.Internal.MonitorListener : RedisListener`1<object> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisMonitorEventArgs> MonitorReceived;
    public MonitorListener(RedisConnector connection);
    [CompilerGeneratedAttribute]
public void add_MonitorReceived(EventHandler`1<RedisMonitorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MonitorReceived(EventHandler`1<RedisMonitorEventArgs> value);
    public string Start();
    protected virtual void OnParsed(object value);
    protected virtual bool Continue();
    private void OnMonitorReceived(object message);
}
public class CSRedis.Internal.ObjectPool.DefaultPolicy`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <SyncGetTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <AsyncGetCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsThrowGetTimeoutException>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoDisposeWithSystem>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CheckAvailableInterval>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Weight>k__BackingField;
    public Func`1<T> CreateObject;
    public Action`1<Object`1<T>> OnGetObject;
    public string Name { get; public set; }
    public int PoolSize { get; public set; }
    public TimeSpan SyncGetTimeout { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public int AsyncGetCapacity { get; public set; }
    public bool IsThrowGetTimeoutException { get; public set; }
    public bool IsAutoDisposeWithSystem { get; public set; }
    public int CheckAvailableInterval { get; public set; }
    public int Weight { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PoolSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PoolSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_SyncGetTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SyncGetTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_AsyncGetCapacity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AsyncGetCapacity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsThrowGetTimeoutException();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsThrowGetTimeoutException(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAutoDisposeWithSystem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsAutoDisposeWithSystem(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CheckAvailableInterval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CheckAvailableInterval(int value);
    [CompilerGeneratedAttribute]
public int get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(int value);
    public sealed virtual T OnCreate();
    public sealed virtual void OnDestroy(T obj);
    public sealed virtual void OnGet(Object`1<T> obj);
    public sealed virtual Task OnGetAsync(Object`1<T> obj);
    public sealed virtual void OnGetTimeout();
    public sealed virtual void OnReturn(Object`1<T> obj);
    public sealed virtual bool OnCheckAvailable(Object`1<T> obj);
    public sealed virtual void OnAvailable();
    public sealed virtual void OnUnavailable();
}
public interface CSRedis.Internal.ObjectPool.IObjectPool`1 {
    public IPolicy`1<T> Policy { get; }
    public bool IsAvailable { get; }
    public Exception UnavailableException { get; }
    public Nullable`1<DateTime> UnavailableTime { get; }
    public string Statistics { get; }
    public string StatisticsFullily { get; }
    public abstract virtual IPolicy`1<T> get_Policy();
    public abstract virtual bool get_IsAvailable();
    public abstract virtual Exception get_UnavailableException();
    public abstract virtual Nullable`1<DateTime> get_UnavailableTime();
    public abstract virtual bool SetUnavailable(Exception exception, DateTime lastGetTime);
    public abstract virtual string get_Statistics();
    public abstract virtual string get_StatisticsFullily();
    public abstract virtual Object`1<T> Get(Nullable`1<TimeSpan> timeout);
    public abstract virtual Task`1<Object`1<T>> GetAsync();
    public abstract virtual void Return(Object`1<T> obj, bool isReset);
}
public interface CSRedis.Internal.ObjectPool.IPolicy`1 {
    public string Name { get; public set; }
    public int PoolSize { get; public set; }
    public TimeSpan SyncGetTimeout { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public int AsyncGetCapacity { get; public set; }
    public bool IsThrowGetTimeoutException { get; public set; }
    public bool IsAutoDisposeWithSystem { get; public set; }
    public int CheckAvailableInterval { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_PoolSize();
    public abstract virtual void set_PoolSize(int value);
    public abstract virtual TimeSpan get_SyncGetTimeout();
    public abstract virtual void set_SyncGetTimeout(TimeSpan value);
    public abstract virtual TimeSpan get_IdleTimeout();
    public abstract virtual void set_IdleTimeout(TimeSpan value);
    public abstract virtual int get_AsyncGetCapacity();
    public abstract virtual void set_AsyncGetCapacity(int value);
    public abstract virtual bool get_IsThrowGetTimeoutException();
    public abstract virtual void set_IsThrowGetTimeoutException(bool value);
    public abstract virtual bool get_IsAutoDisposeWithSystem();
    public abstract virtual void set_IsAutoDisposeWithSystem(bool value);
    public abstract virtual int get_CheckAvailableInterval();
    public abstract virtual void set_CheckAvailableInterval(int value);
    public abstract virtual T OnCreate();
    public abstract virtual void OnDestroy(T obj);
    public abstract virtual void OnGetTimeout();
    public abstract virtual void OnGet(Object`1<T> obj);
    public abstract virtual Task OnGetAsync(Object`1<T> obj);
    public abstract virtual void OnReturn(Object`1<T> obj);
    public abstract virtual bool OnCheckAvailable(Object`1<T> obj);
    public abstract virtual void OnAvailable();
    public abstract virtual void OnUnavailable();
}
public class CSRedis.Internal.ObjectPool.Object`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IObjectPool`1<T> <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Value>k__BackingField;
    internal long _getTimes;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <LastGetTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <LastGetTimeCopy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <LastReturnTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <CreateTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <LastGetThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <LastReturnThreadId>k__BackingField;
    internal bool _isReturned;
    public IObjectPool`1<T> Pool { get; internal set; }
    public int Id { get; internal set; }
    public T Value { get; internal set; }
    public long GetTimes { get; }
    public DateTime LastGetTime { get; internal set; }
    public DateTime LastGetTimeCopy { get; internal set; }
    public DateTime LastReturnTime { get; internal set; }
    public DateTime CreateTime { get; internal set; }
    public int LastGetThreadId { get; internal set; }
    public int LastReturnThreadId { get; internal set; }
    public static Object`1<T> InitWith(IObjectPool`1<T> pool, int id, T value);
    [CompilerGeneratedAttribute]
public IObjectPool`1<T> get_Pool();
    [CompilerGeneratedAttribute]
internal void set_Pool(IObjectPool`1<T> value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(int value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(T value);
    public long get_GetTimes();
    [CompilerGeneratedAttribute]
public DateTime get_LastGetTime();
    [CompilerGeneratedAttribute]
internal void set_LastGetTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastGetTimeCopy();
    [CompilerGeneratedAttribute]
internal void set_LastGetTimeCopy(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastReturnTime();
    [CompilerGeneratedAttribute]
internal void set_LastReturnTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateTime();
    [CompilerGeneratedAttribute]
internal void set_CreateTime(DateTime value);
    [CompilerGeneratedAttribute]
public int get_LastGetThreadId();
    [CompilerGeneratedAttribute]
internal void set_LastGetThreadId(int value);
    [CompilerGeneratedAttribute]
public int get_LastReturnThreadId();
    [CompilerGeneratedAttribute]
internal void set_LastReturnThreadId(int value);
    public virtual string ToString();
    public void ResetValue();
    public sealed virtual void Dispose();
}
public class CSRedis.Internal.ObjectPool.ObjectPool`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPolicy`1<T> <Policy>k__BackingField;
    private object _allObjectsLock;
    internal List`1<Object`1<T>> _allObjects;
    internal ConcurrentStack`1<Object`1<T>> _freeObjects;
    private ConcurrentQueue`1<GetSyncQueueInfo<T>> _getSyncQueue;
    private ConcurrentQueue`1<TaskCompletionSource`1<Object`1<T>>> _getAsyncQueue;
    private ConcurrentQueue`1<bool> _getQueue;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <UnavailableException>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <UnavailableTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <AvailableTime>k__BackingField;
    private object UnavailableLock;
    private bool running;
    public IPolicy`1<T> Policy { get; protected set; }
    public bool IsAvailable { get; }
    public Exception UnavailableException { get; private set; }
    public Nullable`1<DateTime> UnavailableTime { get; private set; }
    public Nullable`1<DateTime> AvailableTime { get; private set; }
    public string Statistics { get; }
    public string StatisticsFullily { get; }
    public ObjectPool`1(int poolsize, Func`1<T> createObject, Action`1<Object`1<T>> onGetObject);
    public ObjectPool`1(IPolicy`1<T> policy);
    [CompilerGeneratedAttribute]
public sealed virtual IPolicy`1<T> get_Policy();
    [CompilerGeneratedAttribute]
protected void set_Policy(IPolicy`1<T> value);
    public sealed virtual bool get_IsAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_UnavailableException();
    [CompilerGeneratedAttribute]
private void set_UnavailableException(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_UnavailableTime();
    [CompilerGeneratedAttribute]
private void set_UnavailableTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_AvailableTime();
    [CompilerGeneratedAttribute]
private void set_AvailableTime(Nullable`1<DateTime> value);
    public sealed virtual bool SetUnavailable(Exception exception, DateTime lastGetTime);
    private void CheckAvailable(int interval);
    private void RestoreToAvailable();
    protected bool LiveCheckAvailable();
    public sealed virtual string get_Statistics();
    public sealed virtual string get_StatisticsFullily();
    public void AutoFree();
    private Object`1<T> GetFree(bool checkAvailable);
    public sealed virtual Object`1<T> Get(Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("CSRedis.Internal.ObjectPool.ObjectPool`1/<GetAsync>d__39")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Object`1<T>> GetAsync();
    public sealed virtual void Return(Object`1<T> obj, bool isReset);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__35_0(object s1, EventArgs e1);
    [CompilerGeneratedAttribute]
private void <.ctor>b__35_1(object s1, ConsoleCancelEventArgs e1);
}
internal class CSRedis.Internal.ObjectPool.TestTrace : object {
    internal static void WriteLine(string text, ConsoleColor backgroundColor);
}
internal class CSRedis.Internal.RedisConnector : object {
    private int _concurrency;
    private int _bufferSize;
    internal IRedisSocket _redisSocket;
    private EndPoint _endPoint;
    internal RedisIO _io;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Connected;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ReconnectAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ReconnectWait>k__BackingField;
    public bool IsConnected { get; }
    public EndPoint EndPoint { get; }
    public bool IsPipelined { get; }
    public RedisPipeline Pipeline { get; }
    public int ReconnectAttempts { get; public set; }
    public int ReconnectWait { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public Encoding Encoding { get; public set; }
    public RedisConnector(EndPoint endPoint, IRedisSocket socket, int concurrency, int bufferSize);
    [CompilerGeneratedAttribute]
public void add_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Connected(EventHandler value);
    public bool get_IsConnected();
    public EndPoint get_EndPoint();
    public bool get_IsPipelined();
    public RedisPipeline get_Pipeline();
    [CompilerGeneratedAttribute]
public int get_ReconnectAttempts();
    [CompilerGeneratedAttribute]
public void set_ReconnectAttempts(int value);
    [CompilerGeneratedAttribute]
public int get_ReconnectWait();
    [CompilerGeneratedAttribute]
public void set_ReconnectWait(int value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool Connect(int timeout);
    public Task`1<bool> ConnectAsync();
    public T Call(RedisCommand`1<T> command);
    public void CallNoneRead(RedisCommand command);
    [AsyncStateMachineAttribute("CSRedis.Internal.RedisConnector/<CallAsync>d__38`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> CallAsync(RedisCommand`1<T> command);
    public void Write(RedisCommand command);
    public T Read(Func`2<RedisReader, T> func);
    public void Read(Stream destination, int bufferSize);
    public void BeginPipe();
    public Object[] EndPipe();
    public void Dispose();
    private void Reconnect();
    private void OnConnected();
    private void OnAsyncConnected(object sender, EventArgs args);
    private void ConnectIfNotConnected();
    private void ExpectConnected();
}
internal abstract class CSRedis.Internal.RedisListener`1 : object {
    private RedisConnector _connection;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Listening>k__BackingField;
    public bool Listening { get; private set; }
    protected RedisConnector Connection { get; }
    protected RedisListener`1(RedisConnector connection);
    [CompilerGeneratedAttribute]
public bool get_Listening();
    [CompilerGeneratedAttribute]
private void set_Listening(bool value);
    protected RedisConnector get_Connection();
    protected void Listen(Func`2<RedisReader, TResponse> func);
    protected void Write(RedisCommand`1<T> command);
    protected T Call(RedisCommand`1<T> command);
    protected abstract virtual void OnParsed(TResponse value);
    protected abstract virtual bool Continue();
}
internal class CSRedis.Internal.RedisPipeline : object {
    private RedisIO _io;
    private MemoryStream _buffer;
    private object _bufferLock;
    private ConcurrentQueue`1<Func`1<object>> _parsers;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Active>k__BackingField;
    public bool Active { get; private set; }
    internal RedisPipeline(RedisIO io);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
private void set_Active(bool value);
    public T Write(RedisCommand`1<T> command);
    public void Begin();
    public Object[] Flush();
    public sealed virtual void Dispose();
}
internal class CSRedis.Internal.RedisTransaction : object {
    private RedisConnector _connector;
    private RedisArray _execCommand;
    private List`1<Tuple`2<string, Object[]>> _pipeCommands;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisTransactionQueuedEventArgs> TransactionQueued;
    private bool _active;
    public bool Active { get; }
    public RedisTransaction(RedisConnector connector);
    [CompilerGeneratedAttribute]
public void add_TransactionQueued(EventHandler`1<RedisTransactionQueuedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TransactionQueued(EventHandler`1<RedisTransactionQueuedEventArgs> value);
    public bool get_Active();
    public string Start();
    public T Write(RedisCommand`1<T> command);
    public Object[] Execute();
    public string Abort();
    private void OnTransactionQueued(RedisCommand`1<T> command, string response);
    private void OnTransactionQueued(string command, Object[] args, string response);
    public Task`1<string> StartAsync();
    public Task`1<T> WriteAsync(RedisCommand`1<T> command);
    public Task`1<Object[]> ExecuteAsync();
    public Task`1<string> AbortAsync();
}
internal class CSRedis.Internal.SubscriptionListener : RedisListener`1<RedisSubscriptionResponse> {
    private long _count;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisSubscriptionReceivedEventArgs> MessageReceived;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisSubscriptionChangedEventArgs> Changed;
    public SubscriptionListener(RedisConnector connection);
    [CompilerGeneratedAttribute]
public void add_MessageReceived(EventHandler`1<RedisSubscriptionReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MessageReceived(EventHandler`1<RedisSubscriptionReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Changed(EventHandler`1<RedisSubscriptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Changed(EventHandler`1<RedisSubscriptionChangedEventArgs> value);
    public void Send(RedisSubscription command);
    protected virtual void OnParsed(RedisSubscriptionResponse response);
    protected virtual bool Continue();
    private void OnReceivedChannel(RedisSubscriptionChannel channel);
    private void OnReceivedMessage(RedisSubscriptionMessage message);
}
internal static class CSRedis.Internal.Utilities.RedisArgs : object {
    public static Object[] Concat(Object[][] arrays);
    public static Object[] Concat(string str, Object[] arrays);
    public static Object[] GetTupleArgs(Tuple`2[] tuples);
    public static string GetScore(decimal score, bool isExclusive);
    public static Object[] FromDict(Dictionary`2<string, object> dict);
    public static Object[] FromObject(T obj);
}
internal static class CSRedis.Internal.Utilities.Serializer`1 : object {
    private static Lazy`1<Func`2<T, Dictionary`2<string, string>>> _propertySerializer;
    private static Lazy`1<Func`2<Dictionary`2<string, string>, T>> _propertyDeserializer;
    private static Lazy`1<Func`2<T, Dictionary`2<string, string>>> _serializer;
    private static Lazy`1<Func`2<Dictionary`2<string, string>, T>> _deserializer;
    private static Serializer`1();
    public static Dictionary`2<string, string> Serialize(T obj);
    public static T Deserialize(Dictionary`2<string, string> fields);
    private static Func`2<T, Dictionary`2<string, string>> CompilePropertySerializer();
    private static Func`2<Dictionary`2<string, string>, T> CompilePropertyDeserializer();
    private static Func`2<T, Dictionary`2<string, string>> CompileSerializer();
    private static Func`2<Dictionary`2<string, string>, T> CompileDeserializer();
}
public interface CSRedis.IRedisClient {
    public string Host { get; }
    public int Port { get; }
    public bool IsConnected { get; }
    public Encoding Encoding { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public int ReconnectAttempts { get; public set; }
    public int ReconnectWait { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_SubscriptionReceived(EventHandler`1<RedisSubscriptionReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SubscriptionReceived(EventHandler`1<RedisSubscriptionReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SubscriptionChanged(EventHandler`1<RedisSubscriptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SubscriptionChanged(EventHandler`1<RedisSubscriptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionQueued(EventHandler`1<RedisTransactionQueuedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionQueued(EventHandler`1<RedisTransactionQueuedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MonitorReceived(EventHandler`1<RedisMonitorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MonitorReceived(EventHandler`1<RedisMonitorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Connected(EventHandler value);
    public abstract virtual string get_Host();
    public abstract virtual int get_Port();
    public abstract virtual bool get_IsConnected();
    public abstract virtual Encoding get_Encoding();
    public abstract virtual void set_Encoding(Encoding value);
    public abstract virtual int get_ReceiveTimeout();
    public abstract virtual void set_ReceiveTimeout(int value);
    public abstract virtual int get_SendTimeout();
    public abstract virtual void set_SendTimeout(int value);
    public abstract virtual int get_ReconnectAttempts();
    public abstract virtual void set_ReconnectAttempts(int value);
    public abstract virtual int get_ReconnectWait();
    public abstract virtual void set_ReconnectWait(int value);
}
public interface CSRedis.IRedisClientAsync {
    public abstract virtual Task`1<bool> ConnectAsync();
    public abstract virtual Task`1<object> CallAsync(string command, String[] args);
    public abstract virtual Task`1<string> AuthAsync(string password);
    public abstract virtual Task`1<string> EchoAsync(string message);
    public abstract virtual Task`1<string> PingAsync();
    public abstract virtual Task`1<string> QuitAsync();
    public abstract virtual Task`1<string> SelectAsync(int index);
    public abstract virtual Task`1<long> DelAsync(String[] keys);
    public abstract virtual Task`1<Byte[]> DumpAsync(string key);
    public abstract virtual Task`1<bool> ExistsAsync(string key);
    public abstract virtual Task`1<bool> ExpireAsync(string key, int expiration);
    public abstract virtual Task`1<bool> ExpireAsync(string key, TimeSpan expiration);
    public abstract virtual Task`1<bool> ExpireAtAsync(string key, DateTime expirationDate);
    public abstract virtual Task`1<bool> ExpireAtAsync(string key, int timestamp);
    public abstract virtual Task`1<String[]> KeysAsync(string pattern);
    public abstract virtual Task`1<string> MigrateAsync(string host, int port, string key, int destinationDb, int timeout);
    public abstract virtual Task`1<string> MigrateAsync(string host, int port, string key, int destinationDb, TimeSpan timeout);
    public abstract virtual Task`1<bool> MoveAsync(string key, int database);
    public abstract virtual Task`1<string> ObjectEncodingAsync(String[] arguments);
    public abstract virtual Task`1<Nullable`1<long>> ObjectAsync(RedisObjectSubCommand subCommand, String[] arguments);
    public abstract virtual Task`1<bool> PersistAsync(string key);
    public abstract virtual Task`1<bool> PExpireAsync(string key, TimeSpan expiration);
    public abstract virtual Task`1<bool> PExpireAsync(string key, long milliseconds);
    public abstract virtual Task`1<bool> PExpireAtAsync(string key, DateTime date);
    public abstract virtual Task`1<bool> PExpireAtAsync(string key, long timestamp);
    public abstract virtual Task`1<long> PTtlAsync(string key);
    public abstract virtual Task`1<string> RandomKeyAsync();
    public abstract virtual Task`1<string> RenameAsync(string key, string newKey);
    public abstract virtual Task`1<bool> RenameNxAsync(string key, string newKey);
    public abstract virtual Task`1<string> RestoreAsync(string key, long ttlMilliseconds, Byte[] serializedValue);
    public abstract virtual Task`1<String[]> SortAsync(string key, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public abstract virtual Task`1<long> SortAndStoreAsync(string key, string destination, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public abstract virtual Task`1<long> TtlAsync(string key);
    public abstract virtual Task`1<string> TypeAsync(string key);
    public abstract virtual Task`1<RedisScan`1<string>> ScanAsync(long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual Task`1<RedisScan`1<Byte[]>> ScanBytesAsync(long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual Task`1<long> HDelAsync(string key, String[] fields);
    public abstract virtual Task`1<bool> HExistsAsync(string key, string field);
    public abstract virtual Task`1<string> HGetAsync(string key, string field);
    public abstract virtual Task`1<Byte[]> HGetBytesAsync(string key, string field);
    public abstract virtual Task`1<T> HGetAllAsync(string key);
    public abstract virtual Task`1<Dictionary`2<string, string>> HGetAllAsync(string key);
    public abstract virtual Task`1<Dictionary`2<string, Byte[]>> HGetAllBytesAsync(string key);
    public abstract virtual Task`1<long> HIncrByAsync(string key, string field, long increment);
    public abstract virtual Task`1<decimal> HIncrByFloatAsync(string key, string field, decimal increment);
    public abstract virtual Task`1<String[]> HKeysAsync(string key);
    public abstract virtual Task`1<long> HLenAsync(string key);
    public abstract virtual Task`1<String[]> HMGetAsync(string key, String[] fields);
    public abstract virtual Task`1<Byte[][]> HMGetBytesAsync(string key, String[] fields);
    public abstract virtual Task`1<string> HMSetAsync(string key, Dictionary`2<string, object> dict);
    public abstract virtual Task`1<string> HMSetAsync(string key, T obj);
    public abstract virtual Task`1<string> HMSetAsync(string key, Object[] keyValues);
    public abstract virtual Task`1<bool> HSetAsync(string key, string field, object value);
    public abstract virtual Task`1<bool> HSetNxAsync(string key, string field, object value);
    public abstract virtual Task`1<String[]> HValsAsync(string key);
    public abstract virtual Task`1<Byte[][]> HValsBytesAsync(string key);
    public abstract virtual Task`1<RedisScan`1<Tuple`2<string, string>>> HScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual Task`1<RedisScan`1<Tuple`2<string, Byte[]>>> HScanBytesAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual Task`1<string> LIndexAsync(string key, long index);
    public abstract virtual Task`1<Byte[]> LIndexBytesAsync(string key, long index);
    public abstract virtual Task`1<long> LInsertAsync(string key, RedisInsert insertType, object pivot, object value);
    public abstract virtual Task`1<long> LLenAsync(string key);
    public abstract virtual Task`1<string> LPopAsync(string key);
    public abstract virtual Task`1<Byte[]> LPopBytesAsync(string key);
    public abstract virtual Task`1<long> LPushAsync(string key, Object[] values);
    public abstract virtual Task`1<long> LPushXAsync(string key, object value);
    public abstract virtual Task`1<String[]> LRangeAsync(string key, long start, long stop);
    public abstract virtual Task`1<Byte[][]> LRangeBytesAsync(string key, long start, long stop);
    public abstract virtual Task`1<long> LRemAsync(string key, long count, object value);
    public abstract virtual Task`1<string> LSetAsync(string key, long index, object value);
    public abstract virtual Task`1<string> LTrimAsync(string key, long start, long stop);
    public abstract virtual Task`1<string> RPopAsync(string key);
    public abstract virtual Task`1<Byte[]> RPopBytesAsync(string key);
    public abstract virtual Task`1<string> RPopLPushAsync(string source, string destination);
    public abstract virtual Task`1<Byte[]> RPopBytesLPushAsync(string source, string destination);
    public abstract virtual Task`1<long> RPushAsync(string key, Object[] values);
    public abstract virtual Task`1<long> RPushXAsync(string key, object value);
    public abstract virtual Task`1<long> SAddAsync(string key, Object[] members);
    public abstract virtual Task`1<long> SCardAsync(string key);
    public abstract virtual Task`1<String[]> SDiffAsync(String[] keys);
    public abstract virtual Task`1<Byte[][]> SDiffBytesAsync(String[] keys);
    public abstract virtual Task`1<long> SDiffStoreAsync(string destination, String[] keys);
    public abstract virtual Task`1<String[]> SInterAsync(String[] keys);
    public abstract virtual Task`1<Byte[][]> SInterBytesAsync(String[] keys);
    public abstract virtual Task`1<long> SInterStoreAsync(string destination, String[] keys);
    public abstract virtual Task`1<bool> SIsMemberAsync(string key, object member);
    public abstract virtual Task`1<String[]> SMembersAsync(string key);
    public abstract virtual Task`1<Byte[][]> SMembersBytesAsync(string key);
    public abstract virtual Task`1<bool> SMoveAsync(string source, string destination, object member);
    public abstract virtual Task`1<string> SPopAsync(string key);
    public abstract virtual Task`1<Byte[]> SPopBytesAsync(string key);
    public abstract virtual Task`1<String[]> SPopAsync(string key, long count);
    public abstract virtual Task`1<Byte[][]> SPopBytesAsync(string key, long count);
    public abstract virtual Task`1<string> SRandMemberAsync(string key);
    public abstract virtual Task`1<Byte[]> SRandMemberBytesAsync(string key);
    public abstract virtual Task`1<String[]> SRandMembersAsync(string key, long count);
    public abstract virtual Task`1<Byte[][]> SRandMembersBytesAsync(string key, long count);
    public abstract virtual Task`1<long> SRemAsync(string key, Object[] members);
    public abstract virtual Task`1<String[]> SUnionAsync(String[] keys);
    public abstract virtual Task`1<Byte[][]> SUnionBytesAsync(String[] keys);
    public abstract virtual Task`1<long> SUnionStoreAsync(string destination, String[] keys);
    public abstract virtual Task`1<RedisScan`1<string>> SScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual Task`1<RedisScan`1<Byte[]>> SScanBytesAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual Task`1<long> ZAddAsync(string key, Tuple`2[] scoreMembers);
    public abstract virtual Task`1<long> ZAddAsync(string key, Object[] scoreMembers);
    public abstract virtual Task`1<long> ZCardAsync(string key);
    public abstract virtual Task`1<long> ZCountAsync(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public abstract virtual Task`1<long> ZCountAsync(string key, string min, string max);
    public abstract virtual Task`1<decimal> ZIncrByAsync(string key, decimal increment, object member);
    public abstract virtual Task`1<long> ZInterStoreAsync(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public abstract virtual Task`1<long> ZInterStoreAsync(string destination, String[] keys);
    public abstract virtual Task`1<String[]> ZRangeAsync(string key, long start, long stop, bool withScores);
    public abstract virtual Task`1<Byte[][]> ZRangeBytesAsync(string key, long start, long stop, bool withScores);
    public abstract virtual Task`1<Tuple`2[]> ZRangeWithScoresAsync(string key, long start, long stop);
    public abstract virtual Task`1<Tuple`2[]> ZRangeBytesWithScoresAsync(string key, long start, long stop);
    public abstract virtual Task`1<String[]> ZRangeByScoreAsync(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Byte[][]> ZRangeBytesByScoreAsync(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<String[]> ZRangeByScoreAsync(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Byte[][]> ZRangeBytesByScoreAsync(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Tuple`2[]> ZRangeByScoreWithScoresAsync(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Tuple`2[]> ZRangeBytesByScoreWithScoresAsync(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Tuple`2[]> ZRangeByScoreWithScoresAsync(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Tuple`2[]> ZRangeBytesByScoreWithScoresAsync(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Nullable`1<long>> ZRankAsync(string key, object member);
    public abstract virtual Task`1<long> ZRemAsync(string key, Object[] members);
    public abstract virtual Task`1<long> ZRemRangeByRankAsync(string key, long start, long stop);
    public abstract virtual Task`1<long> ZRemRangeByScoreAsync(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public abstract virtual Task`1<long> ZRemRangeByScoreAsync(string key, string min, string max);
    public abstract virtual Task`1<String[]> ZRevRangeAsync(string key, long start, long stop, bool withScores);
    public abstract virtual Task`1<Byte[][]> ZRevRangeBytesAsync(string key, long start, long stop, bool withScores);
    public abstract virtual Task`1<Tuple`2[]> ZRevRangeWithScoresAsync(string key, long start, long stop);
    public abstract virtual Task`1<Tuple`2[]> ZRevRangeBytesWithScoresAsync(string key, long start, long stop);
    public abstract virtual Task`1<String[]> ZRevRangeByScoreAsync(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Byte[][]> ZRevRangeBytesByScoreAsync(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<String[]> ZRevRangeByScoreAsync(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Byte[][]> ZRevRangeBytesByScoreAsync(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Tuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Tuple`2[]> ZRevRangeBytesByScoreWithScoresAsync(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Tuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Tuple`2[]> ZRevRangeBytesByScoreWithScoresAsync(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Nullable`1<long>> ZRevRankAsync(string key, object member);
    public abstract virtual Task`1<Nullable`1<decimal>> ZScoreAsync(string key, object member);
    public abstract virtual Task`1<long> ZUnionStoreAsync(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public abstract virtual Task`1<RedisScan`1<Tuple`2<string, decimal>>> ZScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual Task`1<RedisScan`1<Tuple`2<Byte[], decimal>>> ZScanBytesAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual Task`1<String[]> ZRangeByLexAsync(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<Byte[][]> ZRangeBytesByLexAsync(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Task`1<long> ZRemRangeByLexAsync(string key, string min, string max);
    public abstract virtual Task`1<long> ZLexCountAsync(string key, string min, string max);
    public abstract virtual Task`1<long> PublishAsync(string channel, string message);
    public abstract virtual Task`1<String[]> PubSubChannelsAsync(string pattern);
    public abstract virtual Task`1<Tuple`2[]> PubSubNumSubAsync(String[] channels);
    public abstract virtual Task`1<long> PubSubNumPatAsync();
    public abstract virtual Task`1<object> EvalAsync(string script, String[] keys, Object[] arguments);
    public abstract virtual Task`1<object> EvalSHAAsync(string sha1, String[] keys, Object[] arguments);
    public abstract virtual Task`1<Boolean[]> ScriptExistsAsync(String[] sha1s);
    public abstract virtual Task`1<string> ScriptFlushAsync();
    public abstract virtual Task`1<string> ScriptKillAsync();
    public abstract virtual Task`1<string> ScriptLoadAsync(string script);
    public abstract virtual Task`1<long> AppendAsync(string key, object value);
    public abstract virtual Task`1<long> BitCountAsync(string key, Nullable`1<long> start, Nullable`1<long> end);
    public abstract virtual Task`1<long> BitOpAsync(RedisBitOp operation, string destKey, String[] keys);
    public abstract virtual Task`1<long> BitPosAsync(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public abstract virtual Task`1<long> DecrAsync(string key);
    public abstract virtual Task`1<long> DecrByAsync(string key, long decrement);
    public abstract virtual Task`1<string> GetAsync(string key);
    public abstract virtual Task`1<Byte[]> GetBytesAsync(string key);
    public abstract virtual Task`1<bool> GetBitAsync(string key, UInt32 offset);
    public abstract virtual Task`1<string> GetRangeAsync(string key, long start, long end);
    public abstract virtual Task`1<Byte[]> GetRangeBytesAsync(string key, long start, long end);
    public abstract virtual Task`1<string> GetSetAsync(string key, object value);
    public abstract virtual Task`1<Byte[]> GetSetBytesAsync(string key, object value);
    public abstract virtual Task`1<long> IncrAsync(string key);
    public abstract virtual Task`1<long> IncrByAsync(string key, long increment);
    public abstract virtual Task`1<decimal> IncrByFloatAsync(string key, decimal increment);
    public abstract virtual Task`1<String[]> MGetAsync(String[] keys);
    public abstract virtual Task`1<Byte[][]> MGetBytesAsync(String[] keys);
    public abstract virtual Task`1<string> MSetAsync(Tuple`2[] keyValues);
    public abstract virtual Task`1<string> MSetAsync(Object[] keyValues);
    public abstract virtual Task`1<bool> MSetNxAsync(Tuple`2[] keyValues);
    public abstract virtual Task`1<bool> MSetNxAsync(Object[] keyValues);
    public abstract virtual Task`1<string> PSetExAsync(string key, long milliseconds, object value);
    public abstract virtual Task`1<string> SetAsync(string key, object value);
    public abstract virtual Task`1<string> SetAsync(string key, object value, TimeSpan expiration, Nullable`1<RedisExistence> condition);
    public abstract virtual Task`1<string> SetAsync(string key, object value, Nullable`1<int> expirationSeconds, Nullable`1<RedisExistence> condition);
    public abstract virtual Task`1<string> SetAsync(string key, object value, Nullable`1<long> expirationMilliseconds, Nullable`1<RedisExistence> condition);
    public abstract virtual Task`1<bool> SetBitAsync(string key, UInt32 offset, bool value);
    public abstract virtual Task`1<string> SetExAsync(string key, long seconds, object value);
    public abstract virtual Task`1<bool> SetNxAsync(string key, object value);
    public abstract virtual Task`1<long> SetRangeAsync(string key, UInt32 offset, object value);
    public abstract virtual Task`1<long> StrLenAsync(string key);
    public abstract virtual Task`1<string> BgRewriteAofAsync();
    public abstract virtual Task`1<string> BgSaveAsync();
    public abstract virtual Task`1<string> ClientGetNameAsync();
    public abstract virtual Task`1<string> ClientKillAsync(string ip, int port);
    public abstract virtual Task`1<long> ClientKillAsync(string addr, string id, string type, Nullable`1<bool> skipMe);
    public abstract virtual Task`1<string> ClientListAsync();
    public abstract virtual Task`1<string> ClientPauseAsync(int milliseconds);
    public abstract virtual Task`1<string> ClientPauseAsync(TimeSpan timeout);
    public abstract virtual Task`1<string> ClientSetNameAsync(string connectionName);
    public abstract virtual Task`1<Tuple`2[]> ConfigGetAsync(string parameter);
    public abstract virtual Task`1<string> ConfigResetStatAsync();
    public abstract virtual Task`1<string> ConfigRewriteAsync();
    public abstract virtual Task`1<string> ConfigSetAsync(string parameter, string value);
    public abstract virtual Task`1<long> DbSizeAsync();
    public abstract virtual Task`1<string> DebugSegFaultAsync();
    public abstract virtual Task`1<string> FlushAllAsync();
    public abstract virtual Task`1<string> FlushDbAsync();
    public abstract virtual Task`1<string> InfoAsync(string section);
    public abstract virtual Task`1<DateTime> LastSaveAsync();
    public abstract virtual Task`1<RedisRole> RoleAsync();
    public abstract virtual Task`1<string> SaveAsync();
    public abstract virtual Task`1<string> ShutdownAsync(Nullable`1<bool> save);
    public abstract virtual Task`1<string> SlaveOfAsync(string host, int port);
    public abstract virtual Task`1<string> SlaveOfNoOneAsync();
    public abstract virtual Task`1<RedisSlowLogEntry[]> SlowLogGetAsync(Nullable`1<long> count);
    public abstract virtual Task`1<long> SlowLogLenAsync();
    public abstract virtual Task`1<string> SlowLogResetAsync();
    public abstract virtual Task`1<Byte[]> SyncAsync();
    public abstract virtual Task`1<DateTime> TimeAsync();
    public abstract virtual Task`1<string> MultiAsync();
    public abstract virtual Task`1<string> DiscardAsync();
    public abstract virtual Task`1<Object[]> ExecAsync();
    public abstract virtual Task`1<string> UnwatchAsync();
    public abstract virtual Task`1<string> WatchAsync(String[] keys);
    public abstract virtual Task`1<bool> PfAddAsync(string key, Object[] elements);
    public abstract virtual Task`1<long> PfCountAsync(String[] keys);
    public abstract virtual Task`1<string> PfMergeAsync(string destKey, String[] sourceKeys);
    public abstract virtual Task`1<long> GeoAddAsync(string key, ValueTuple`3[] values);
    public abstract virtual Task`1<Nullable`1<decimal>> GeoDistAsync(string key, object member1, object member2, GeoUnit unit);
    public abstract virtual Task`1<String[]> GeoHashAsync(string key, Object[] members);
    public abstract virtual Task`1<Nullable`1[]> GeoPosAsync(string key, Object[] members);
    public abstract virtual Task`1<ValueTuple`5[]> GeoRadiusAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public abstract virtual Task`1<ValueTuple`5[]> GeoRadiusBytesAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public abstract virtual Task`1<ValueTuple`5[]> GeoRadiusByMemberAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public abstract virtual Task`1<ValueTuple`5[]> GeoRadiusBytesByMemberAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
}
public interface CSRedis.IRedisClientSync {
    public abstract virtual bool Connect(int timeout);
    public abstract virtual object Call(string command, String[] args);
    public abstract virtual string Auth(string password);
    public abstract virtual string Echo(string message);
    public abstract virtual string Ping();
    public abstract virtual string Quit();
    public abstract virtual string Select(int index);
    public abstract virtual long Del(String[] keys);
    public abstract virtual Byte[] Dump(string key);
    public abstract virtual bool Exists(string key);
    public abstract virtual bool Expire(string key, TimeSpan expiration);
    public abstract virtual bool Expire(string key, int seconds);
    public abstract virtual bool ExpireAt(string key, DateTime expirationDate);
    public abstract virtual bool ExpireAt(string key, int timestamp);
    public abstract virtual String[] Keys(string pattern);
    public abstract virtual string Migrate(string host, int port, string key, int destinationDb, int timeoutMilliseconds);
    public abstract virtual string Migrate(string host, int port, string key, int destinationDb, TimeSpan timeout);
    public abstract virtual bool Move(string key, int database);
    public abstract virtual string ObjectEncoding(String[] arguments);
    public abstract virtual Nullable`1<long> Object(RedisObjectSubCommand subCommand, String[] arguments);
    public abstract virtual bool Persist(string key);
    public abstract virtual bool PExpire(string key, TimeSpan expiration);
    public abstract virtual bool PExpire(string key, long milliseconds);
    public abstract virtual bool PExpireAt(string key, DateTime date);
    public abstract virtual bool PExpireAt(string key, long timestamp);
    public abstract virtual long PTtl(string key);
    public abstract virtual string RandomKey();
    public abstract virtual string Rename(string key, string newKey);
    public abstract virtual bool RenameNx(string key, string newKey);
    public abstract virtual string Restore(string key, long ttlMilliseconds, Byte[] serializedValue);
    public abstract virtual String[] Sort(string key, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public abstract virtual long SortAndStore(string key, string destination, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public abstract virtual long Ttl(string key);
    public abstract virtual string Type(string key);
    public abstract virtual RedisScan`1<string> Scan(long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual RedisScan`1<Byte[]> ScanBytes(long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual long HDel(string key, String[] fields);
    public abstract virtual bool HExists(string key, string field);
    public abstract virtual string HGet(string key, string field);
    public abstract virtual Byte[] HGetBytes(string key, string field);
    public abstract virtual T HGetAll(string key);
    public abstract virtual Dictionary`2<string, string> HGetAll(string key);
    public abstract virtual Dictionary`2<string, Byte[]> HGetAllBytes(string key);
    public abstract virtual long HIncrBy(string key, string field, long increment);
    public abstract virtual decimal HIncrByFloat(string key, string field, decimal increment);
    public abstract virtual String[] HKeys(string key);
    public abstract virtual long HLen(string key);
    public abstract virtual String[] HMGet(string key, String[] fields);
    public abstract virtual Byte[][] HMGetBytes(string key, String[] fields);
    public abstract virtual string HMSet(string key, Dictionary`2<string, object> dict);
    public abstract virtual string HMSet(string key, T obj);
    public abstract virtual string HMSet(string key, Object[] keyValues);
    public abstract virtual bool HSet(string key, string field, object value);
    public abstract virtual bool HSetNx(string key, string field, object value);
    public abstract virtual String[] HVals(string key);
    public abstract virtual Byte[][] HValsBytes(string key);
    public abstract virtual RedisScan`1<Tuple`2<string, string>> HScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual RedisScan`1<Tuple`2<string, Byte[]>> HScanBytes(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual Tuple`2<string, string> BLPopWithKey(int timeout, String[] keys);
    public abstract virtual Tuple`2<string, Byte[]> BLPopBytesWithKey(int timeout, String[] keys);
    public abstract virtual Tuple`2<string, string> BLPopWithKey(TimeSpan timeout, String[] keys);
    public abstract virtual Tuple`2<string, Byte[]> BLPopBytesWithKey(TimeSpan timeout, String[] keys);
    public abstract virtual string BLPop(int timeout, String[] keys);
    public abstract virtual Byte[] BLPopBytes(int timeout, String[] keys);
    public abstract virtual string BLPop(TimeSpan timeout, String[] keys);
    public abstract virtual Byte[] BLPopBytes(TimeSpan timeout, String[] keys);
    public abstract virtual Tuple`2<string, string> BRPopWithKey(int timeout, String[] keys);
    public abstract virtual Tuple`2<string, Byte[]> BRPopBytesWithKey(int timeout, String[] keys);
    public abstract virtual Tuple`2<string, string> BRPopWithKey(TimeSpan timeout, String[] keys);
    public abstract virtual Tuple`2<string, Byte[]> BRPopBytesWithKey(TimeSpan timeout, String[] keys);
    public abstract virtual string BRPop(int timeout, String[] keys);
    public abstract virtual Byte[] BRPopBytes(int timeout, String[] keys);
    public abstract virtual string BRPop(TimeSpan timeout, String[] keys);
    public abstract virtual Byte[] BRPopBytes(TimeSpan timeout, String[] keys);
    public abstract virtual string BRPopLPush(string source, string destination, int timeout);
    public abstract virtual Byte[] BRPopBytesLPush(string source, string destination, int timeout);
    public abstract virtual string BRPopLPush(string source, string destination, TimeSpan timeout);
    public abstract virtual Byte[] BRPopBytesLPush(string source, string destination, TimeSpan timeout);
    public abstract virtual string LIndex(string key, long index);
    public abstract virtual Byte[] LIndexBytes(string key, long index);
    public abstract virtual long LInsert(string key, RedisInsert insertType, object pivot, object value);
    public abstract virtual long LLen(string key);
    public abstract virtual string LPop(string key);
    public abstract virtual Byte[] LPopBytes(string key);
    public abstract virtual long LPush(string key, Object[] values);
    public abstract virtual long LPushX(string key, object value);
    public abstract virtual String[] LRange(string key, long start, long stop);
    public abstract virtual Byte[][] LRangeBytes(string key, long start, long stop);
    public abstract virtual long LRem(string key, long count, object value);
    public abstract virtual string LSet(string key, long index, object value);
    public abstract virtual string LTrim(string key, long start, long stop);
    public abstract virtual string RPop(string key);
    public abstract virtual Byte[] RPopBytes(string key);
    public abstract virtual string RPopLPush(string source, string destination);
    public abstract virtual Byte[] RPopBytesLPush(string source, string destination);
    public abstract virtual long RPush(string key, Object[] values);
    public abstract virtual long RPushX(string key, object value);
    public abstract virtual long SAdd(string key, Object[] members);
    public abstract virtual long SCard(string key);
    public abstract virtual String[] SDiff(String[] keys);
    public abstract virtual Byte[][] SDiffBytes(String[] keys);
    public abstract virtual long SDiffStore(string destination, String[] keys);
    public abstract virtual String[] SInter(String[] keys);
    public abstract virtual Byte[][] SInterBytes(String[] keys);
    public abstract virtual long SInterStore(string destination, String[] keys);
    public abstract virtual bool SIsMember(string key, object member);
    public abstract virtual String[] SMembers(string key);
    public abstract virtual Byte[][] SMembersBytes(string key);
    public abstract virtual bool SMove(string source, string destination, object member);
    public abstract virtual string SPop(string key);
    public abstract virtual Byte[] SPopBytes(string key);
    public abstract virtual String[] SPop(string key, long count);
    public abstract virtual Byte[][] SPopBytes(string key, long count);
    public abstract virtual string SRandMember(string key);
    public abstract virtual Byte[] SRandMemberBytes(string key);
    public abstract virtual String[] SRandMembers(string key, long count);
    public abstract virtual Byte[][] SRandMembersBytes(string key, long count);
    public abstract virtual long SRem(string key, Object[] members);
    public abstract virtual String[] SUnion(String[] keys);
    public abstract virtual Byte[][] SUnionBytes(String[] keys);
    public abstract virtual long SUnionStore(string destination, String[] keys);
    public abstract virtual RedisScan`1<string> SScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual RedisScan`1<Byte[]> SScanBytes(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual long ZAdd(string key, Tuple`2[] scoreMembers);
    public abstract virtual long ZAdd(string key, Object[] scoreMembers);
    public abstract virtual long ZCard(string key);
    public abstract virtual long ZCount(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public abstract virtual long ZCount(string key, string min, string max);
    public abstract virtual decimal ZIncrBy(string key, decimal increment, object member);
    public abstract virtual long ZInterStore(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public abstract virtual long ZInterStore(string destination, String[] keys);
    public abstract virtual String[] ZRange(string key, long start, long stop, bool withScores);
    public abstract virtual Byte[][] ZRangeBytes(string key, long start, long stop, bool withScores);
    public abstract virtual Tuple`2[] ZRangeWithScores(string key, long start, long stop);
    public abstract virtual Tuple`2[] ZRangeBytesWithScores(string key, long start, long stop);
    public abstract virtual String[] ZRangeByScore(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Byte[][] ZRangeBytesByScore(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual String[] ZRangeByScore(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Byte[][] ZRangeBytesByScore(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Tuple`2[] ZRangeByScoreWithScores(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Tuple`2[] ZRangeBytesByScoreWithScores(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Tuple`2[] ZRangeByScoreWithScores(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Tuple`2[] ZRangeBytesByScoreWithScores(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Nullable`1<long> ZRank(string key, object member);
    public abstract virtual long ZRem(string key, Object[] members);
    public abstract virtual long ZRemRangeByRank(string key, long start, long stop);
    public abstract virtual long ZRemRangeByScore(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public abstract virtual long ZRemRangeByScore(string key, string min, string max);
    public abstract virtual String[] ZRevRange(string key, long start, long stop, bool withScores);
    public abstract virtual Byte[][] ZRevRangeBytes(string key, long start, long stop, bool withScores);
    public abstract virtual Tuple`2[] ZRevRangeWithScores(string key, long start, long stop);
    public abstract virtual Tuple`2[] ZRevRangeBytesWithScores(string key, long start, long stop);
    public abstract virtual String[] ZRevRangeByScore(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Byte[][] ZRevRangeBytesByScore(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual String[] ZRevRangeByScore(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Byte[][] ZRevRangeBytesByScore(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Tuple`2[] ZRevRangeByScoreWithScores(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Tuple`2[] ZRevRangeBytesByScoreWithScores(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Tuple`2[] ZRevRangeByScoreWithScores(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Tuple`2[] ZRevRangeBytesByScoreWithScores(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Nullable`1<long> ZRevRank(string key, object member);
    public abstract virtual Nullable`1<decimal> ZScore(string key, object member);
    public abstract virtual long ZUnionStore(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public abstract virtual long ZUnionStore(string destination, String[] keys);
    public abstract virtual RedisScan`1<Tuple`2<string, decimal>> ZScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual RedisScan`1<Tuple`2<Byte[], decimal>> ZScanBytes(string key, long cursor, string pattern, Nullable`1<long> count);
    public abstract virtual String[] ZRangeByLex(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual Byte[][] ZRangeBytesByLex(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public abstract virtual long ZRemRangeByLex(string key, string min, string max);
    public abstract virtual long ZLexCount(string key, string min, string max);
    public abstract virtual void PSubscribe(String[] channelPatterns);
    public abstract virtual long Publish(string channel, string message);
    public abstract virtual String[] PubSubChannels(string pattern);
    public abstract virtual Tuple`2[] PubSubNumSub(String[] channels);
    public abstract virtual long PubSubNumPat();
    public abstract virtual void PUnsubscribe(String[] channelPatterns);
    public abstract virtual void Subscribe(String[] channels);
    public abstract virtual void Unsubscribe(String[] channels);
    public abstract virtual object Eval(string script, String[] keys, Object[] arguments);
    public abstract virtual object EvalSHA(string sha1, String[] keys, Object[] arguments);
    public abstract virtual Boolean[] ScriptExists(String[] sha1s);
    public abstract virtual string ScriptFlush();
    public abstract virtual string ScriptKill();
    public abstract virtual string ScriptLoad(string script);
    public abstract virtual long Append(string key, object value);
    public abstract virtual long BitCount(string key, Nullable`1<long> start, Nullable`1<long> end);
    public abstract virtual long BitOp(RedisBitOp operation, string destKey, String[] keys);
    public abstract virtual long BitPos(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public abstract virtual long Decr(string key);
    public abstract virtual long DecrBy(string key, long decrement);
    public abstract virtual string Get(string key);
    public abstract virtual Byte[] GetBytes(string key);
    public abstract virtual bool GetBit(string key, UInt32 offset);
    public abstract virtual string GetRange(string key, long start, long end);
    public abstract virtual Byte[] GetRangeBytes(string key, long start, long end);
    public abstract virtual string GetSet(string key, object value);
    public abstract virtual Byte[] GetSetBytes(string key, object value);
    public abstract virtual long Incr(string key);
    public abstract virtual long IncrBy(string key, long increment);
    public abstract virtual decimal IncrByFloat(string key, decimal increment);
    public abstract virtual String[] MGet(String[] keys);
    public abstract virtual Byte[][] MGetBytes(String[] keys);
    public abstract virtual string MSet(Tuple`2[] keyValues);
    public abstract virtual string MSet(Object[] keyValues);
    public abstract virtual bool MSetNx(Tuple`2[] keyValues);
    public abstract virtual bool MSetNx(Object[] keyValues);
    public abstract virtual string PSetEx(string key, long milliseconds, object value);
    public abstract virtual string Set(string key, object value);
    public abstract virtual string Set(string key, object value, TimeSpan expiration, Nullable`1<RedisExistence> condition);
    public abstract virtual string Set(string key, object value, Nullable`1<int> expirationSeconds, Nullable`1<RedisExistence> condition);
    public abstract virtual string Set(string key, object value, Nullable`1<long> expirationMilliseconds, Nullable`1<RedisExistence> condition);
    public abstract virtual bool SetBit(string key, UInt32 offset, bool value);
    public abstract virtual string SetEx(string key, long seconds, object value);
    public abstract virtual bool SetNx(string key, object value);
    public abstract virtual long SetRange(string key, UInt32 offset, object value);
    public abstract virtual long StrLen(string key);
    public abstract virtual string BgRewriteAof();
    public abstract virtual string BgSave();
    public abstract virtual string ClientKill(string ip, int port);
    public abstract virtual long ClientKill(string addr, string id, string type, Nullable`1<bool> skipMe);
    public abstract virtual string ClientList();
    public abstract virtual string ClientPause(int milliseconds);
    public abstract virtual string ClientPause(TimeSpan timeout);
    public abstract virtual string ClientGetName();
    public abstract virtual string ClientSetName(string connectionName);
    public abstract virtual Tuple`2[] ConfigGet(string parameter);
    public abstract virtual string ConfigResetStat();
    public abstract virtual string ConfigRewrite();
    public abstract virtual string ConfigSet(string parameter, string value);
    public abstract virtual long DbSize();
    public abstract virtual string DebugSegFault();
    public abstract virtual string FlushAll();
    public abstract virtual string FlushDb();
    public abstract virtual string Info(string section);
    public abstract virtual DateTime LastSave();
    public abstract virtual string Monitor();
    public abstract virtual RedisRole Role();
    public abstract virtual string Save();
    public abstract virtual string Shutdown(Nullable`1<bool> save);
    public abstract virtual string SlaveOf(string host, int port);
    public abstract virtual string SlaveOfNoOne();
    public abstract virtual RedisSlowLogEntry[] SlowLogGet(Nullable`1<long> count);
    public abstract virtual long SlowLogLen();
    public abstract virtual string SlowLogReset();
    public abstract virtual Byte[] Sync();
    public abstract virtual DateTime Time();
    public abstract virtual string Discard();
    public abstract virtual Object[] Exec();
    public abstract virtual string Multi();
    public abstract virtual string Unwatch();
    public abstract virtual string Watch(String[] keys);
    public abstract virtual bool PfAdd(string key, Object[] elements);
    public abstract virtual long PfCount(String[] keys);
    public abstract virtual string PfMerge(string destKey, String[] sourceKeys);
    public abstract virtual long GeoAdd(string key, ValueTuple`3[] values);
    public abstract virtual Nullable`1<decimal> GeoDist(string key, object member1, object member2, GeoUnit unit);
    public abstract virtual String[] GeoHash(string key, Object[] members);
    public abstract virtual Nullable`1[] GeoPos(string key, Object[] members);
    public abstract virtual ValueTuple`5[] GeoRadius(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public abstract virtual ValueTuple`5[] GeoRadiusBytes(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public abstract virtual ValueTuple`5[] GeoRadiusByMember(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public abstract virtual ValueTuple`5[] GeoRadiusBytesByMember(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
}
public enum CSRedis.KeyType : Enum {
    public int value__;
    public static KeyType None;
    public static KeyType String;
    public static KeyType List;
    public static KeyType Set;
    public static KeyType ZSet;
    public static KeyType Hash;
    public static KeyType Stream;
}
public enum CSRedis.RedisAggregate : Enum {
    public int value__;
    public static RedisAggregate Sum;
    public static RedisAggregate Min;
    public static RedisAggregate Max;
}
public enum CSRedis.RedisBitOp : Enum {
    public int value__;
    public static RedisBitOp And;
    public static RedisBitOp Or;
    public static RedisBitOp XOr;
    public static RedisBitOp Not;
}
public class CSRedis.RedisClient : object {
    internal ConcurrentQueue`1<TaskCompletionSource`1<object>> _asyncPipe;
    private static int DefaultPort;
    private static bool DefaultSSL;
    private static int DefaultConcurrency;
    private static int DefaultBufferSize;
    private RedisConnector _connector;
    private RedisTransaction _transaction;
    private SubscriptionListener _subscription;
    private MonitorListener _monitor;
    private bool _streaming;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisSubscriptionReceivedEventArgs> SubscriptionReceived;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisSubscriptionChangedEventArgs> SubscriptionChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisTransactionQueuedEventArgs> TransactionQueued;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisMonitorEventArgs> MonitorReceived;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Connected;
    internal RedisReader _reader { get; }
    internal Socket Socket { get; }
    public string Host { get; }
    public int Port { get; }
    public bool IsConnected { get; }
    public Encoding Encoding { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public int ReconnectAttempts { get; public set; }
    public int ReconnectWait { get; public set; }
    public RedisClient(string host);
    public RedisClient(string host, int port);
    public RedisClient(string host, int port, bool ssl);
    public RedisClient(EndPoint endpoint);
    public RedisClient(EndPoint endpoint, bool ssl);
    public RedisClient(string host, int port, int asyncConcurrency, int asyncBufferSize);
    public RedisClient(string host, int port, bool ssl, int asyncConcurrency, int asyncBufferSize);
    public RedisClient(EndPoint endpoint, int asyncConcurrency, int asyncBufferSize);
    public RedisClient(EndPoint endpoint, bool ssl, int asyncConcurrency, int asyncBufferSize);
    internal RedisClient(IRedisSocket socket, EndPoint endpoint);
    internal RedisClient(IRedisSocket socket, EndPoint endpoint, int asyncConcurrency, int asyncBufferSize);
    public sealed virtual Task`1<bool> ConnectAsync();
    public sealed virtual Task`1<object> CallAsync(string command, String[] args);
    [AsyncStateMachineAttribute("CSRedis.RedisClient/<WriteAsync>d__3`1")]
[DebuggerStepThroughAttribute]
private Task`1<T> WriteAsync(RedisCommand`1<T> command);
    public sealed virtual Task`1<string> AuthAsync(string password);
    public sealed virtual Task`1<string> EchoAsync(string message);
    public sealed virtual Task`1<string> PingAsync();
    public sealed virtual Task`1<string> QuitAsync();
    public sealed virtual Task`1<string> SelectAsync(int index);
    public Task`1<long> TouchAsync(String[] keys);
    public Task`1<long> UnLinkAsync(String[] keys);
    public sealed virtual Task`1<long> DelAsync(String[] keys);
    public sealed virtual Task`1<Byte[]> DumpAsync(string key);
    public sealed virtual Task`1<bool> ExistsAsync(string key);
    public Task`1<long> ExistsAsync(String[] keys);
    public sealed virtual Task`1<bool> ExpireAsync(string key, int expiration);
    public sealed virtual Task`1<bool> ExpireAsync(string key, TimeSpan expiration);
    public sealed virtual Task`1<bool> ExpireAtAsync(string key, DateTime expirationDate);
    public sealed virtual Task`1<bool> ExpireAtAsync(string key, int timestamp);
    public sealed virtual Task`1<String[]> KeysAsync(string pattern);
    public sealed virtual Task`1<string> MigrateAsync(string host, int port, string key, int destinationDb, int timeout);
    public sealed virtual Task`1<string> MigrateAsync(string host, int port, string key, int destinationDb, TimeSpan timeout);
    public sealed virtual Task`1<bool> MoveAsync(string key, int database);
    public sealed virtual Task`1<string> ObjectEncodingAsync(String[] arguments);
    public sealed virtual Task`1<Nullable`1<long>> ObjectAsync(RedisObjectSubCommand subCommand, String[] arguments);
    public sealed virtual Task`1<bool> PersistAsync(string key);
    public sealed virtual Task`1<bool> PExpireAsync(string key, TimeSpan expiration);
    public sealed virtual Task`1<bool> PExpireAsync(string key, long milliseconds);
    public sealed virtual Task`1<bool> PExpireAtAsync(string key, DateTime date);
    public sealed virtual Task`1<bool> PExpireAtAsync(string key, long timestamp);
    public sealed virtual Task`1<long> PTtlAsync(string key);
    public sealed virtual Task`1<string> RandomKeyAsync();
    public sealed virtual Task`1<string> RenameAsync(string key, string newKey);
    public sealed virtual Task`1<bool> RenameNxAsync(string key, string newKey);
    public sealed virtual Task`1<string> RestoreAsync(string key, long ttlMilliseconds, Byte[] serializedValue);
    public sealed virtual Task`1<String[]> SortAsync(string key, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public sealed virtual Task`1<long> SortAndStoreAsync(string key, string destination, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public sealed virtual Task`1<long> TtlAsync(string key);
    public sealed virtual Task`1<string> TypeAsync(string key);
    public sealed virtual Task`1<RedisScan`1<string>> ScanAsync(long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual Task`1<RedisScan`1<Byte[]>> ScanBytesAsync(long cursor, string pattern, Nullable`1<long> count);
    public Task`1<long> HStrLenAsync(string key, string field);
    public sealed virtual Task`1<long> HDelAsync(string key, String[] fields);
    public sealed virtual Task`1<bool> HExistsAsync(string key, string field);
    public sealed virtual Task`1<string> HGetAsync(string key, string field);
    public sealed virtual Task`1<Byte[]> HGetBytesAsync(string key, string field);
    public sealed virtual Task`1<T> HGetAllAsync(string key);
    public sealed virtual Task`1<Dictionary`2<string, string>> HGetAllAsync(string key);
    public sealed virtual Task`1<Dictionary`2<string, Byte[]>> HGetAllBytesAsync(string key);
    public sealed virtual Task`1<long> HIncrByAsync(string key, string field, long increment);
    public sealed virtual Task`1<decimal> HIncrByFloatAsync(string key, string field, decimal increment);
    public sealed virtual Task`1<String[]> HKeysAsync(string key);
    public sealed virtual Task`1<long> HLenAsync(string key);
    public sealed virtual Task`1<String[]> HMGetAsync(string key, String[] fields);
    public sealed virtual Task`1<Byte[][]> HMGetBytesAsync(string key, String[] fields);
    public sealed virtual Task`1<string> HMSetAsync(string key, Dictionary`2<string, object> dict);
    public sealed virtual Task`1<string> HMSetAsync(string key, T obj);
    public sealed virtual Task`1<string> HMSetAsync(string key, Object[] keyValues);
    public sealed virtual Task`1<bool> HSetAsync(string key, string field, object value);
    public sealed virtual Task`1<bool> HSetNxAsync(string key, string field, object value);
    public sealed virtual Task`1<String[]> HValsAsync(string key);
    public sealed virtual Task`1<Byte[][]> HValsBytesAsync(string key);
    public sealed virtual Task`1<RedisScan`1<Tuple`2<string, string>>> HScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual Task`1<RedisScan`1<Tuple`2<string, Byte[]>>> HScanBytesAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual Task`1<string> LIndexAsync(string key, long index);
    public sealed virtual Task`1<Byte[]> LIndexBytesAsync(string key, long index);
    public sealed virtual Task`1<long> LInsertAsync(string key, RedisInsert insertType, object pivot, object value);
    public sealed virtual Task`1<long> LLenAsync(string key);
    public sealed virtual Task`1<string> LPopAsync(string key);
    public sealed virtual Task`1<Byte[]> LPopBytesAsync(string key);
    public sealed virtual Task`1<long> LPushAsync(string key, Object[] values);
    public sealed virtual Task`1<long> LPushXAsync(string key, object value);
    public sealed virtual Task`1<String[]> LRangeAsync(string key, long start, long stop);
    public sealed virtual Task`1<Byte[][]> LRangeBytesAsync(string key, long start, long stop);
    public sealed virtual Task`1<long> LRemAsync(string key, long count, object value);
    public sealed virtual Task`1<string> LSetAsync(string key, long index, object value);
    public sealed virtual Task`1<string> LTrimAsync(string key, long start, long stop);
    public sealed virtual Task`1<string> RPopAsync(string key);
    public sealed virtual Task`1<Byte[]> RPopBytesAsync(string key);
    public sealed virtual Task`1<string> RPopLPushAsync(string source, string destination);
    public sealed virtual Task`1<Byte[]> RPopBytesLPushAsync(string source, string destination);
    public sealed virtual Task`1<long> RPushAsync(string key, Object[] values);
    public sealed virtual Task`1<long> RPushXAsync(string key, object value);
    public sealed virtual Task`1<long> SAddAsync(string key, Object[] members);
    public sealed virtual Task`1<long> SCardAsync(string key);
    public sealed virtual Task`1<String[]> SDiffAsync(String[] keys);
    public sealed virtual Task`1<Byte[][]> SDiffBytesAsync(String[] keys);
    public sealed virtual Task`1<long> SDiffStoreAsync(string destination, String[] keys);
    public sealed virtual Task`1<String[]> SInterAsync(String[] keys);
    public sealed virtual Task`1<Byte[][]> SInterBytesAsync(String[] keys);
    public sealed virtual Task`1<long> SInterStoreAsync(string destination, String[] keys);
    public sealed virtual Task`1<bool> SIsMemberAsync(string key, object member);
    public sealed virtual Task`1<String[]> SMembersAsync(string key);
    public sealed virtual Task`1<Byte[][]> SMembersBytesAsync(string key);
    public sealed virtual Task`1<bool> SMoveAsync(string source, string destination, object member);
    public sealed virtual Task`1<string> SPopAsync(string key);
    public sealed virtual Task`1<Byte[]> SPopBytesAsync(string key);
    public sealed virtual Task`1<String[]> SPopAsync(string key, long count);
    public sealed virtual Task`1<Byte[][]> SPopBytesAsync(string key, long count);
    public sealed virtual Task`1<string> SRandMemberAsync(string key);
    public sealed virtual Task`1<Byte[]> SRandMemberBytesAsync(string key);
    public sealed virtual Task`1<String[]> SRandMembersAsync(string key, long count);
    public sealed virtual Task`1<Byte[][]> SRandMembersBytesAsync(string key, long count);
    public sealed virtual Task`1<long> SRemAsync(string key, Object[] members);
    public sealed virtual Task`1<String[]> SUnionAsync(String[] keys);
    public sealed virtual Task`1<Byte[][]> SUnionBytesAsync(String[] keys);
    public sealed virtual Task`1<long> SUnionStoreAsync(string destination, String[] keys);
    public sealed virtual Task`1<RedisScan`1<string>> SScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual Task`1<RedisScan`1<Byte[]>> SScanBytesAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public Task`1<Tuple`2[]> ZPopMaxAsync(string key, long count);
    public Task`1<Tuple`2[]> ZPopMaxBytesAsync(string key, long count);
    public Task`1<Tuple`2[]> ZPopMinAsync(string key, long count);
    public Task`1<Tuple`2[]> ZPopMinBytesAsync(string key, long count);
    public sealed virtual Task`1<long> ZAddAsync(string key, Tuple`2[] scoreMembers);
    public sealed virtual Task`1<long> ZAddAsync(string key, Object[] scoreMembers);
    public sealed virtual Task`1<long> ZCardAsync(string key);
    public sealed virtual Task`1<long> ZCountAsync(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public sealed virtual Task`1<long> ZCountAsync(string key, string min, string max);
    public sealed virtual Task`1<decimal> ZIncrByAsync(string key, decimal increment, object member);
    public sealed virtual Task`1<long> ZInterStoreAsync(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public sealed virtual Task`1<long> ZInterStoreAsync(string destination, String[] keys);
    public sealed virtual Task`1<String[]> ZRangeAsync(string key, long start, long stop, bool withScores);
    public sealed virtual Task`1<Byte[][]> ZRangeBytesAsync(string key, long start, long stop, bool withScores);
    public sealed virtual Task`1<Tuple`2[]> ZRangeWithScoresAsync(string key, long start, long stop);
    public sealed virtual Task`1<Tuple`2[]> ZRangeBytesWithScoresAsync(string key, long start, long stop);
    public sealed virtual Task`1<String[]> ZRangeByScoreAsync(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Byte[][]> ZRangeBytesByScoreAsync(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<String[]> ZRangeByScoreAsync(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Byte[][]> ZRangeBytesByScoreAsync(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Tuple`2[]> ZRangeByScoreWithScoresAsync(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Tuple`2[]> ZRangeBytesByScoreWithScoresAsync(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Tuple`2[]> ZRangeByScoreWithScoresAsync(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Tuple`2[]> ZRangeBytesByScoreWithScoresAsync(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Nullable`1<long>> ZRankAsync(string key, object member);
    public sealed virtual Task`1<long> ZRemAsync(string key, Object[] members);
    public sealed virtual Task`1<long> ZRemRangeByRankAsync(string key, long start, long stop);
    public sealed virtual Task`1<long> ZRemRangeByScoreAsync(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public sealed virtual Task`1<long> ZRemRangeByScoreAsync(string key, string min, string max);
    public sealed virtual Task`1<String[]> ZRevRangeAsync(string key, long start, long stop, bool withScores);
    public sealed virtual Task`1<Byte[][]> ZRevRangeBytesAsync(string key, long start, long stop, bool withScores);
    public sealed virtual Task`1<Tuple`2[]> ZRevRangeWithScoresAsync(string key, long start, long stop);
    public sealed virtual Task`1<Tuple`2[]> ZRevRangeBytesWithScoresAsync(string key, long start, long stop);
    public sealed virtual Task`1<String[]> ZRevRangeByScoreAsync(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Byte[][]> ZRevRangeBytesByScoreAsync(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<String[]> ZRevRangeByScoreAsync(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Byte[][]> ZRevRangeBytesByScoreAsync(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Tuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Tuple`2[]> ZRevRangeBytesByScoreWithScoresAsync(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Tuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Tuple`2[]> ZRevRangeBytesByScoreWithScoresAsync(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Nullable`1<long>> ZRevRankAsync(string key, object member);
    public sealed virtual Task`1<Nullable`1<decimal>> ZScoreAsync(string key, object member);
    public sealed virtual Task`1<long> ZUnionStoreAsync(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public sealed virtual Task`1<RedisScan`1<Tuple`2<string, decimal>>> ZScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual Task`1<RedisScan`1<Tuple`2<Byte[], decimal>>> ZScanBytesAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual Task`1<String[]> ZRangeByLexAsync(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<Byte[][]> ZRangeBytesByLexAsync(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Task`1<long> ZRemRangeByLexAsync(string key, string min, string max);
    public sealed virtual Task`1<long> ZLexCountAsync(string key, string min, string max);
    public sealed virtual Task`1<long> PublishAsync(string channel, string message);
    public sealed virtual Task`1<String[]> PubSubChannelsAsync(string pattern);
    public sealed virtual Task`1<Tuple`2[]> PubSubNumSubAsync(String[] channels);
    public sealed virtual Task`1<long> PubSubNumPatAsync();
    public sealed virtual Task`1<object> EvalAsync(string script, String[] keys, Object[] arguments);
    public sealed virtual Task`1<object> EvalSHAAsync(string sha1, String[] keys, Object[] arguments);
    public sealed virtual Task`1<Boolean[]> ScriptExistsAsync(String[] sha1s);
    public sealed virtual Task`1<string> ScriptFlushAsync();
    public sealed virtual Task`1<string> ScriptKillAsync();
    public sealed virtual Task`1<string> ScriptLoadAsync(string script);
    public sealed virtual Task`1<long> AppendAsync(string key, object value);
    public sealed virtual Task`1<long> BitCountAsync(string key, Nullable`1<long> start, Nullable`1<long> end);
    public sealed virtual Task`1<long> BitOpAsync(RedisBitOp operation, string destKey, String[] keys);
    public sealed virtual Task`1<long> BitPosAsync(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public sealed virtual Task`1<long> DecrAsync(string key);
    public sealed virtual Task`1<long> DecrByAsync(string key, long decrement);
    public sealed virtual Task`1<string> GetAsync(string key);
    public sealed virtual Task`1<Byte[]> GetBytesAsync(string key);
    public sealed virtual Task`1<bool> GetBitAsync(string key, UInt32 offset);
    public sealed virtual Task`1<string> GetRangeAsync(string key, long start, long end);
    public sealed virtual Task`1<Byte[]> GetRangeBytesAsync(string key, long start, long end);
    public sealed virtual Task`1<string> GetSetAsync(string key, object value);
    public sealed virtual Task`1<Byte[]> GetSetBytesAsync(string key, object value);
    public sealed virtual Task`1<long> IncrAsync(string key);
    public sealed virtual Task`1<long> IncrByAsync(string key, long increment);
    public sealed virtual Task`1<decimal> IncrByFloatAsync(string key, decimal increment);
    public sealed virtual Task`1<String[]> MGetAsync(String[] keys);
    public sealed virtual Task`1<Byte[][]> MGetBytesAsync(String[] keys);
    public sealed virtual Task`1<string> MSetAsync(Tuple`2[] keyValues);
    public sealed virtual Task`1<string> MSetAsync(Object[] keyValues);
    public sealed virtual Task`1<bool> MSetNxAsync(Tuple`2[] keyValues);
    public sealed virtual Task`1<bool> MSetNxAsync(Object[] keyValues);
    public sealed virtual Task`1<string> PSetExAsync(string key, long milliseconds, object value);
    public sealed virtual Task`1<string> SetAsync(string key, object value);
    public sealed virtual Task`1<string> SetAsync(string key, object value, TimeSpan expiration, Nullable`1<RedisExistence> condition);
    public sealed virtual Task`1<string> SetAsync(string key, object value, Nullable`1<int> expirationSeconds, Nullable`1<RedisExistence> condition);
    public sealed virtual Task`1<string> SetAsync(string key, object value, Nullable`1<long> expirationMilliseconds, Nullable`1<RedisExistence> condition);
    public sealed virtual Task`1<bool> SetBitAsync(string key, UInt32 offset, bool value);
    public sealed virtual Task`1<string> SetExAsync(string key, long seconds, object value);
    public sealed virtual Task`1<bool> SetNxAsync(string key, object value);
    public sealed virtual Task`1<long> SetRangeAsync(string key, UInt32 offset, object value);
    public sealed virtual Task`1<long> StrLenAsync(string key);
    public sealed virtual Task`1<string> BgRewriteAofAsync();
    public sealed virtual Task`1<string> BgSaveAsync();
    public sealed virtual Task`1<string> ClientGetNameAsync();
    public sealed virtual Task`1<string> ClientKillAsync(string ip, int port);
    public sealed virtual Task`1<long> ClientKillAsync(string addr, string id, string type, Nullable`1<bool> skipMe);
    public sealed virtual Task`1<string> ClientListAsync();
    public sealed virtual Task`1<string> ClientPauseAsync(int milliseconds);
    public sealed virtual Task`1<string> ClientPauseAsync(TimeSpan timeout);
    public sealed virtual Task`1<string> ClientSetNameAsync(string connectionName);
    public sealed virtual Task`1<Tuple`2[]> ConfigGetAsync(string parameter);
    public sealed virtual Task`1<string> ConfigResetStatAsync();
    public sealed virtual Task`1<string> ConfigRewriteAsync();
    public sealed virtual Task`1<string> ConfigSetAsync(string parameter, string value);
    public sealed virtual Task`1<long> DbSizeAsync();
    public sealed virtual Task`1<string> DebugSegFaultAsync();
    public sealed virtual Task`1<string> FlushAllAsync();
    public sealed virtual Task`1<string> FlushDbAsync();
    public sealed virtual Task`1<string> InfoAsync(string section);
    public sealed virtual Task`1<DateTime> LastSaveAsync();
    public sealed virtual Task`1<RedisRole> RoleAsync();
    public sealed virtual Task`1<string> SaveAsync();
    public sealed virtual Task`1<string> ShutdownAsync(Nullable`1<bool> save);
    public sealed virtual Task`1<string> SlaveOfAsync(string host, int port);
    public sealed virtual Task`1<string> SlaveOfNoOneAsync();
    public sealed virtual Task`1<RedisSlowLogEntry[]> SlowLogGetAsync(Nullable`1<long> count);
    public sealed virtual Task`1<long> SlowLogLenAsync();
    public sealed virtual Task`1<string> SlowLogResetAsync();
    public sealed virtual Task`1<Byte[]> SyncAsync();
    public sealed virtual Task`1<DateTime> TimeAsync();
    public sealed virtual Task`1<string> MultiAsync();
    public sealed virtual Task`1<string> DiscardAsync();
    public sealed virtual Task`1<Object[]> ExecAsync();
    public sealed virtual Task`1<string> UnwatchAsync();
    public sealed virtual Task`1<string> WatchAsync(String[] keys);
    public sealed virtual Task`1<bool> PfAddAsync(string key, Object[] elements);
    public sealed virtual Task`1<long> PfCountAsync(String[] keys);
    public sealed virtual Task`1<string> PfMergeAsync(string destKey, String[] sourceKeys);
    public sealed virtual Task`1<long> GeoAddAsync(string key, ValueTuple`3[] values);
    public sealed virtual Task`1<Nullable`1<decimal>> GeoDistAsync(string key, object member1, object member2, GeoUnit unit);
    public sealed virtual Task`1<String[]> GeoHashAsync(string key, Object[] members);
    [AsyncStateMachineAttribute("CSRedis.RedisClient/<GeoPosAsync>d__241")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Nullable`1[]> GeoPosAsync(string key, Object[] members);
    [AsyncStateMachineAttribute("CSRedis.RedisClient/<GeoRadiusAsync>d__242")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ValueTuple`5[]> GeoRadiusAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    [AsyncStateMachineAttribute("CSRedis.RedisClient/<GeoRadiusBytesAsync>d__243")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ValueTuple`5[]> GeoRadiusBytesAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    [AsyncStateMachineAttribute("CSRedis.RedisClient/<GeoRadiusByMemberAsync>d__244")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ValueTuple`5[]> GeoRadiusByMemberAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    [AsyncStateMachineAttribute("CSRedis.RedisClient/<GeoRadiusBytesByMemberAsync>d__245")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ValueTuple`5[]> GeoRadiusBytesByMemberAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    internal RedisReader get__reader();
    internal Socket get_Socket();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SubscriptionReceived(EventHandler`1<RedisSubscriptionReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SubscriptionReceived(EventHandler`1<RedisSubscriptionReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SubscriptionChanged(EventHandler`1<RedisSubscriptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SubscriptionChanged(EventHandler`1<RedisSubscriptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TransactionQueued(EventHandler`1<RedisTransactionQueuedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TransactionQueued(EventHandler`1<RedisTransactionQueuedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MonitorReceived(EventHandler`1<RedisMonitorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MonitorReceived(EventHandler`1<RedisMonitorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Connected(EventHandler value);
    public sealed virtual string get_Host();
    public sealed virtual int get_Port();
    public sealed virtual bool get_IsConnected();
    public sealed virtual Encoding get_Encoding();
    public sealed virtual void set_Encoding(Encoding value);
    public sealed virtual int get_ReceiveTimeout();
    public sealed virtual void set_ReceiveTimeout(int value);
    public sealed virtual int get_SendTimeout();
    public sealed virtual void set_SendTimeout(int value);
    public sealed virtual int get_ReconnectAttempts();
    public sealed virtual void set_ReconnectAttempts(int value);
    public sealed virtual int get_ReconnectWait();
    public sealed virtual void set_ReconnectWait(int value);
    public void StartPipe();
    public void StartPipeTransaction();
    public Object[] EndPipe();
    public void StreamTo(Stream destination, Func`2<IRedisClientSync, T> func);
    public void StreamTo(Stream destination, int bufferSize, Func`2<IRedisClientSync, T> func);
    public sealed virtual void Dispose();
    private void OnMonitorReceived(object sender, RedisMonitorEventArgs obj);
    private void OnSubscriptionReceived(object sender, RedisSubscriptionReceivedEventArgs args);
    private void OnSubscriptionChanged(object sender, RedisSubscriptionChangedEventArgs args);
    private void OnConnectionConnected(object sender, EventArgs args);
    private void OnTransactionQueued(object sender, RedisTransactionQueuedEventArgs args);
    private string GetHost();
    private int GetPort();
    public sealed virtual bool Connect(int timeout);
    public sealed virtual object Call(string command, String[] args);
    internal T Write(RedisCommand`1<T> command);
    internal void WriteNoneRead(RedisCommand command);
    public sealed virtual string Auth(string password);
    public string Auth(string user, string password);
    public sealed virtual string Echo(string message);
    public sealed virtual string Ping();
    public sealed virtual string Quit();
    public sealed virtual string Select(int index);
    public long Touch(String[] keys);
    public long UnLink(String[] keys);
    public sealed virtual long Del(String[] keys);
    public sealed virtual Byte[] Dump(string key);
    public sealed virtual bool Exists(string key);
    public long Exists(String[] keys);
    public sealed virtual bool Expire(string key, TimeSpan expiration);
    public sealed virtual bool Expire(string key, int seconds);
    public sealed virtual bool ExpireAt(string key, DateTime expirationDate);
    public sealed virtual bool ExpireAt(string key, int timestamp);
    public sealed virtual String[] Keys(string pattern);
    public sealed virtual string Migrate(string host, int port, string key, int destinationDb, int timeoutMilliseconds);
    public sealed virtual string Migrate(string host, int port, string key, int destinationDb, TimeSpan timeout);
    public sealed virtual bool Move(string key, int database);
    public sealed virtual string ObjectEncoding(String[] arguments);
    public sealed virtual Nullable`1<long> Object(RedisObjectSubCommand subCommand, String[] arguments);
    public sealed virtual bool Persist(string key);
    public sealed virtual bool PExpire(string key, TimeSpan expiration);
    public sealed virtual bool PExpire(string key, long milliseconds);
    public sealed virtual bool PExpireAt(string key, DateTime date);
    public sealed virtual bool PExpireAt(string key, long timestamp);
    public sealed virtual long PTtl(string key);
    public sealed virtual string RandomKey();
    public sealed virtual string Rename(string key, string newKey);
    public sealed virtual bool RenameNx(string key, string newKey);
    public sealed virtual string Restore(string key, long ttlMilliseconds, Byte[] serializedValue);
    public sealed virtual String[] Sort(string key, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public sealed virtual long SortAndStore(string key, string destination, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public sealed virtual long Ttl(string key);
    public sealed virtual string Type(string key);
    public sealed virtual RedisScan`1<string> Scan(long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual RedisScan`1<Byte[]> ScanBytes(long cursor, string pattern, Nullable`1<long> count);
    public long HStrLen(string key, string field);
    public sealed virtual long HDel(string key, String[] fields);
    public sealed virtual bool HExists(string key, string field);
    public sealed virtual string HGet(string key, string field);
    public sealed virtual Byte[] HGetBytes(string key, string field);
    public sealed virtual T HGetAll(string key);
    public sealed virtual Dictionary`2<string, string> HGetAll(string key);
    public sealed virtual Dictionary`2<string, Byte[]> HGetAllBytes(string key);
    public sealed virtual long HIncrBy(string key, string field, long increment);
    public sealed virtual decimal HIncrByFloat(string key, string field, decimal increment);
    public sealed virtual String[] HKeys(string key);
    public sealed virtual long HLen(string key);
    public sealed virtual String[] HMGet(string key, String[] fields);
    public sealed virtual Byte[][] HMGetBytes(string key, String[] fields);
    public sealed virtual string HMSet(string key, Dictionary`2<string, object> dict);
    public sealed virtual string HMSet(string key, T obj);
    public sealed virtual string HMSet(string key, Object[] keyValues);
    public sealed virtual bool HSet(string key, string field, object value);
    public sealed virtual bool HSetNx(string key, string field, object value);
    public sealed virtual String[] HVals(string key);
    public sealed virtual Byte[][] HValsBytes(string key);
    public sealed virtual RedisScan`1<Tuple`2<string, string>> HScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual RedisScan`1<Tuple`2<string, Byte[]>> HScanBytes(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual Tuple`2<string, string> BLPopWithKey(int timeout, String[] keys);
    public sealed virtual Tuple`2<string, Byte[]> BLPopBytesWithKey(int timeout, String[] keys);
    public sealed virtual Tuple`2<string, string> BLPopWithKey(TimeSpan timeout, String[] keys);
    public sealed virtual Tuple`2<string, Byte[]> BLPopBytesWithKey(TimeSpan timeout, String[] keys);
    public sealed virtual string BLPop(int timeout, String[] keys);
    public sealed virtual Byte[] BLPopBytes(int timeout, String[] keys);
    public sealed virtual string BLPop(TimeSpan timeout, String[] keys);
    public sealed virtual Byte[] BLPopBytes(TimeSpan timeout, String[] keys);
    public sealed virtual Tuple`2<string, string> BRPopWithKey(int timeout, String[] keys);
    public sealed virtual Tuple`2<string, Byte[]> BRPopBytesWithKey(int timeout, String[] keys);
    public sealed virtual Tuple`2<string, string> BRPopWithKey(TimeSpan timeout, String[] keys);
    public sealed virtual Tuple`2<string, Byte[]> BRPopBytesWithKey(TimeSpan timeout, String[] keys);
    public sealed virtual string BRPop(int timeout, String[] keys);
    public sealed virtual Byte[] BRPopBytes(int timeout, String[] keys);
    public sealed virtual string BRPop(TimeSpan timeout, String[] keys);
    public sealed virtual Byte[] BRPopBytes(TimeSpan timeout, String[] keys);
    public sealed virtual string BRPopLPush(string source, string destination, int timeout);
    public sealed virtual Byte[] BRPopBytesLPush(string source, string destination, int timeout);
    public sealed virtual string BRPopLPush(string source, string destination, TimeSpan timeout);
    public sealed virtual Byte[] BRPopBytesLPush(string source, string destination, TimeSpan timeout);
    public sealed virtual string LIndex(string key, long index);
    public sealed virtual Byte[] LIndexBytes(string key, long index);
    public sealed virtual long LInsert(string key, RedisInsert insertType, object pivot, object value);
    public sealed virtual long LLen(string key);
    public sealed virtual string LPop(string key);
    public sealed virtual Byte[] LPopBytes(string key);
    public sealed virtual long LPush(string key, Object[] values);
    public sealed virtual long LPushX(string key, object value);
    public sealed virtual String[] LRange(string key, long start, long stop);
    public sealed virtual Byte[][] LRangeBytes(string key, long start, long stop);
    public sealed virtual long LRem(string key, long count, object value);
    public sealed virtual string LSet(string key, long index, object value);
    public sealed virtual string LTrim(string key, long start, long stop);
    public sealed virtual string RPop(string key);
    public sealed virtual Byte[] RPopBytes(string key);
    public sealed virtual string RPopLPush(string source, string destination);
    public sealed virtual Byte[] RPopBytesLPush(string source, string destination);
    public sealed virtual long RPush(string key, Object[] values);
    public sealed virtual long RPushX(string key, object value);
    public sealed virtual long SAdd(string key, Object[] members);
    public sealed virtual long SCard(string key);
    public sealed virtual String[] SDiff(String[] keys);
    public sealed virtual Byte[][] SDiffBytes(String[] keys);
    public sealed virtual long SDiffStore(string destination, String[] keys);
    public sealed virtual String[] SInter(String[] keys);
    public sealed virtual Byte[][] SInterBytes(String[] keys);
    public sealed virtual long SInterStore(string destination, String[] keys);
    public sealed virtual bool SIsMember(string key, object member);
    public sealed virtual String[] SMembers(string key);
    public sealed virtual Byte[][] SMembersBytes(string key);
    public sealed virtual bool SMove(string source, string destination, object member);
    public sealed virtual string SPop(string key);
    public sealed virtual Byte[] SPopBytes(string key);
    public sealed virtual String[] SPop(string key, long count);
    public sealed virtual Byte[][] SPopBytes(string key, long count);
    public sealed virtual string SRandMember(string key);
    public sealed virtual Byte[] SRandMemberBytes(string key);
    public sealed virtual String[] SRandMembers(string key, long count);
    public sealed virtual Byte[][] SRandMembersBytes(string key, long count);
    public sealed virtual long SRem(string key, Object[] members);
    public sealed virtual String[] SUnion(String[] keys);
    public sealed virtual Byte[][] SUnionBytes(String[] keys);
    public sealed virtual long SUnionStore(string destination, String[] keys);
    public sealed virtual RedisScan`1<string> SScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual RedisScan`1<Byte[]> SScanBytes(string key, long cursor, string pattern, Nullable`1<long> count);
    public Tuple`2[] ZPopMax(string key, long count);
    public Tuple`2[] ZPopMaxBytes(string key, long count);
    public Tuple`2[] ZPopMin(string key, long count);
    public Tuple`2[] ZPopMinBytes(string key, long count);
    public sealed virtual long ZAdd(string key, Tuple`2[] scoreMembers);
    public sealed virtual long ZAdd(string key, Object[] scoreMembers);
    public sealed virtual long ZCard(string key);
    public sealed virtual long ZCount(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public sealed virtual long ZCount(string key, string min, string max);
    public sealed virtual decimal ZIncrBy(string key, decimal increment, object member);
    public sealed virtual long ZInterStore(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public sealed virtual long ZInterStore(string destination, String[] keys);
    public sealed virtual String[] ZRange(string key, long start, long stop, bool withScores);
    public sealed virtual Byte[][] ZRangeBytes(string key, long start, long stop, bool withScores);
    public sealed virtual Tuple`2[] ZRangeWithScores(string key, long start, long stop);
    public sealed virtual Tuple`2[] ZRangeBytesWithScores(string key, long start, long stop);
    public sealed virtual String[] ZRangeByScore(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Byte[][] ZRangeBytesByScore(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual String[] ZRangeByScore(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Byte[][] ZRangeBytesByScore(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Tuple`2[] ZRangeByScoreWithScores(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Tuple`2[] ZRangeBytesByScoreWithScores(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Tuple`2[] ZRangeByScoreWithScores(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Tuple`2[] ZRangeBytesByScoreWithScores(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Nullable`1<long> ZRank(string key, object member);
    public sealed virtual long ZRem(string key, Object[] members);
    public sealed virtual long ZRemRangeByRank(string key, long start, long stop);
    public sealed virtual long ZRemRangeByScore(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public sealed virtual long ZRemRangeByScore(string key, string min, string max);
    public sealed virtual String[] ZRevRange(string key, long start, long stop, bool withScores);
    public sealed virtual Byte[][] ZRevRangeBytes(string key, long start, long stop, bool withScores);
    public sealed virtual Tuple`2[] ZRevRangeWithScores(string key, long start, long stop);
    public sealed virtual Tuple`2[] ZRevRangeBytesWithScores(string key, long start, long stop);
    public sealed virtual String[] ZRevRangeByScore(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Byte[][] ZRevRangeBytesByScore(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual String[] ZRevRangeByScore(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Byte[][] ZRevRangeBytesByScore(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Tuple`2[] ZRevRangeByScoreWithScores(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Tuple`2[] ZRevRangeBytesByScoreWithScores(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Tuple`2[] ZRevRangeByScoreWithScores(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Tuple`2[] ZRevRangeBytesByScoreWithScores(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Nullable`1<long> ZRevRank(string key, object member);
    public sealed virtual Nullable`1<decimal> ZScore(string key, object member);
    public sealed virtual long ZUnionStore(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public sealed virtual long ZUnionStore(string destination, String[] keys);
    public sealed virtual RedisScan`1<Tuple`2<string, decimal>> ZScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual RedisScan`1<Tuple`2<Byte[], decimal>> ZScanBytes(string key, long cursor, string pattern, Nullable`1<long> count);
    public sealed virtual String[] ZRangeByLex(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual Byte[][] ZRangeBytesByLex(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public sealed virtual long ZRemRangeByLex(string key, string min, string max);
    public sealed virtual long ZLexCount(string key, string min, string max);
    public sealed virtual void PSubscribe(String[] channelPatterns);
    public sealed virtual long Publish(string channel, string message);
    public sealed virtual String[] PubSubChannels(string pattern);
    public sealed virtual Tuple`2[] PubSubNumSub(String[] channels);
    public sealed virtual long PubSubNumPat();
    public sealed virtual void PUnsubscribe(String[] channelPatterns);
    public sealed virtual void Subscribe(String[] channels);
    public sealed virtual void Unsubscribe(String[] channels);
    public sealed virtual object Eval(string script, String[] keys, Object[] arguments);
    public sealed virtual object EvalSHA(string sha1, String[] keys, Object[] arguments);
    public sealed virtual Boolean[] ScriptExists(String[] sha1s);
    public sealed virtual string ScriptFlush();
    public sealed virtual string ScriptKill();
    public sealed virtual string ScriptLoad(string script);
    public sealed virtual long Append(string key, object value);
    public sealed virtual long BitCount(string key, Nullable`1<long> start, Nullable`1<long> end);
    public sealed virtual long BitOp(RedisBitOp operation, string destKey, String[] keys);
    public sealed virtual long BitPos(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public sealed virtual long Decr(string key);
    public sealed virtual long DecrBy(string key, long decrement);
    public sealed virtual string Get(string key);
    public sealed virtual Byte[] GetBytes(string key);
    public sealed virtual bool GetBit(string key, UInt32 offset);
    public sealed virtual string GetRange(string key, long start, long end);
    public sealed virtual Byte[] GetRangeBytes(string key, long start, long end);
    public sealed virtual string GetSet(string key, object value);
    public sealed virtual Byte[] GetSetBytes(string key, object value);
    public sealed virtual long Incr(string key);
    public sealed virtual long IncrBy(string key, long increment);
    public sealed virtual decimal IncrByFloat(string key, decimal increment);
    public sealed virtual String[] MGet(String[] keys);
    public sealed virtual Byte[][] MGetBytes(String[] keys);
    public sealed virtual string MSet(Tuple`2[] keyValues);
    public sealed virtual string MSet(Object[] keyValues);
    public sealed virtual bool MSetNx(Tuple`2[] keyValues);
    public sealed virtual bool MSetNx(Object[] keyValues);
    public sealed virtual string PSetEx(string key, long milliseconds, object value);
    public sealed virtual string Set(string key, object value);
    public sealed virtual string Set(string key, object value, TimeSpan expiration, Nullable`1<RedisExistence> condition);
    public sealed virtual string Set(string key, object value, Nullable`1<int> expirationSeconds, Nullable`1<RedisExistence> condition);
    public sealed virtual string Set(string key, object value, Nullable`1<long> expirationMilliseconds, Nullable`1<RedisExistence> condition);
    public sealed virtual bool SetBit(string key, UInt32 offset, bool value);
    public sealed virtual string SetEx(string key, long seconds, object value);
    public sealed virtual bool SetNx(string key, object value);
    public sealed virtual long SetRange(string key, UInt32 offset, object value);
    public sealed virtual long StrLen(string key);
    public sealed virtual string BgRewriteAof();
    public sealed virtual string BgSave();
    public sealed virtual string ClientKill(string ip, int port);
    public sealed virtual long ClientKill(string addr, string id, string type, Nullable`1<bool> skipMe);
    public sealed virtual string ClientList();
    public sealed virtual string ClientPause(int milliseconds);
    public sealed virtual string ClientPause(TimeSpan timeout);
    public sealed virtual string ClientGetName();
    public sealed virtual string ClientSetName(string connectionName);
    public sealed virtual Tuple`2[] ConfigGet(string parameter);
    public sealed virtual string ConfigResetStat();
    public sealed virtual string ConfigRewrite();
    public sealed virtual string ConfigSet(string parameter, string value);
    public sealed virtual long DbSize();
    public sealed virtual string DebugSegFault();
    public sealed virtual string FlushAll();
    public sealed virtual string FlushDb();
    public sealed virtual string Info(string section);
    public sealed virtual DateTime LastSave();
    public sealed virtual string Monitor();
    public sealed virtual RedisRole Role();
    public sealed virtual string Save();
    public sealed virtual string Shutdown(Nullable`1<bool> save);
    public sealed virtual string SlaveOf(string host, int port);
    public sealed virtual string SlaveOfNoOne();
    public sealed virtual RedisSlowLogEntry[] SlowLogGet(Nullable`1<long> count);
    public sealed virtual long SlowLogLen();
    public sealed virtual string SlowLogReset();
    public sealed virtual Byte[] Sync();
    public sealed virtual DateTime Time();
    public sealed virtual string Discard();
    public sealed virtual Object[] Exec();
    public sealed virtual string Multi();
    public sealed virtual string Unwatch();
    public sealed virtual string Watch(String[] keys);
    public sealed virtual bool PfAdd(string key, Object[] elements);
    public sealed virtual long PfCount(String[] keys);
    public sealed virtual string PfMerge(string destKey, String[] sourceKeys);
    public sealed virtual long GeoAdd(string key, ValueTuple`3[] values);
    public sealed virtual Nullable`1<decimal> GeoDist(string key, object member1, object member2, GeoUnit unit);
    public sealed virtual String[] GeoHash(string key, Object[] members);
    public sealed virtual Nullable`1[] GeoPos(string key, Object[] members);
    public sealed virtual ValueTuple`5[] GeoRadius(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public sealed virtual ValueTuple`5[] GeoRadiusBytes(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public sealed virtual ValueTuple`5[] GeoRadiusByMember(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public sealed virtual ValueTuple`5[] GeoRadiusBytesByMember(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting, bool withCoord, bool withDist, bool withHash);
    public long XAck(string key, string group, String[] id);
    public string XAdd(string key, long maxLen, string id, ValueTuple`2[] fieldValues);
    public ValueTuple`2[] XClaim(string key, string group, string consumer, long minIdleTime, String[] id);
    public ValueTuple`2[] XClaim(string key, string group, string consumer, long minIdleTime, String[] id, long idle, long retryCount, bool force);
    public String[] XClaimJustId(string key, string group, string consumer, long minIdleTime, String[] id);
    public String[] XClaimJustId(string key, string group, string consumer, long minIdleTime, String[] id, long idle, long retryCount, bool force);
    public long XDel(string key, String[] id);
    public string XGroupCreate(string key, string group, string id, bool MkStream);
    public string XGroupSetId(string key, string group, string id);
    public bool XGroupDestroy(string key, string group);
    public bool XGroupDelConsumer(string key, string group, string consumer);
    public ValueTuple`7<long, long, long, long, string, ValueTuple`2<string, String[]>, ValueTuple`2<string, String[]>> XInfoStream(string key);
    public ValueTuple`4[] XInfoGroups(string key);
    public ValueTuple`3[] XInfoConsumers(string key, string group);
    public long XLen(string key);
    public ValueTuple`4<long, string, string, ValueTuple`2[]> XPending(string key, string group);
    public ValueTuple`4[] XPending(string key, string group, string start, string end, long count, string consumer);
    public ValueTuple`2[] XRange(string key, string start, string end, long count);
    public ValueTuple`2[] XRevRange(string key, string end, string start, long count);
    public ValueTuple`2[] XRead(long count, long block, ValueTuple`2[] streams);
    public ValueTuple`2[] XReadGroup(string group, string consumer, long count, long block, ValueTuple`2[] streams);
    public long XTrim(string key, long maxLen);
    [CompilerGeneratedAttribute]
private string <QuitAsync>b__7_0(Task`1<string> t);
}
public class CSRedis.RedisClientException : Exception {
    public RedisClientException(string message);
    public RedisClientException(string message, Exception inner);
}
public class CSRedis.RedisClientPool : ObjectPool`1<RedisClient> {
    internal RedisClientPoolPolicy _policy;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Encoding <Encoding>k__BackingField;
    public string Key { get; }
    public string Prefix { get; }
    public Encoding Encoding { get; public set; }
    public RedisClientPool(string connectionString, Action`1<RedisClient> onConnected);
    public void Return(Object`1<RedisClient> obj, Exception exception, bool isRecreate);
    internal bool CheckAvailable();
    public string get_Key();
    public string get_Prefix();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
}
public class CSRedis.RedisClientPoolPolicy : object {
    internal RedisClientPool _pool;
    internal int _port;
    internal int _database;
    internal int _tryit;
    internal int _connectTimeout;
    internal int _syncTimeout;
    internal string _ip;
    internal string _user;
    internal string _password;
    internal string _clientname;
    internal bool _ssl;
    internal bool _testCluster;
    internal bool _asyncPipeline;
    internal int _preheat;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Connected;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <SyncGetTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <AsyncGetCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsThrowGetTimeoutException>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoDisposeWithSystem>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CheckAvailableInterval>k__BackingField;
    private string _connectionString;
    internal string Key { get; }
    internal string Prefix { get; internal set; }
    public string Name { get; public set; }
    public int PoolSize { get; public set; }
    public TimeSpan SyncGetTimeout { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public int AsyncGetCapacity { get; public set; }
    public bool IsThrowGetTimeoutException { get; public set; }
    public bool IsAutoDisposeWithSystem { get; public set; }
    public int CheckAvailableInterval { get; public set; }
    public string ConnectionString { get; public set; }
    internal string get_Key();
    [CompilerGeneratedAttribute]
internal string get_Prefix();
    [CompilerGeneratedAttribute]
internal void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public void add_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Connected(EventHandler value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PoolSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PoolSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_SyncGetTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SyncGetTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_AsyncGetCapacity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AsyncGetCapacity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsThrowGetTimeoutException();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsThrowGetTimeoutException(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAutoDisposeWithSystem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsAutoDisposeWithSystem(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CheckAvailableInterval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CheckAvailableInterval(int value);
    internal string BuildConnectionString(string endpoint);
    internal void SetHost(string host);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public sealed virtual bool OnCheckAvailable(Object`1<RedisClient> obj);
    public sealed virtual RedisClient OnCreate();
    public sealed virtual void OnDestroy(RedisClient obj);
    public sealed virtual void OnGet(Object`1<RedisClient> obj);
    [AsyncStateMachineAttribute("CSRedis.RedisClientPoolPolicy/<OnGetAsync>d__64")]
[DebuggerStepThroughAttribute]
public sealed virtual Task OnGetAsync(Object`1<RedisClient> obj);
    public sealed virtual void OnGetTimeout();
    public sealed virtual void OnReturn(Object`1<RedisClient> obj);
    public sealed virtual void OnAvailable();
    public sealed virtual void OnUnavailable();
    public static void PrevReheatConnectionPool(ObjectPool`1<RedisClient> pool, int minPoolSize);
}
internal class CSRedis.RedisCommand : object {
    private string _command;
    private Object[] _args;
    public string Command { get; }
    public Object[] Arguments { get; }
    protected RedisCommand(string command, Object[] args);
    public string get_Command();
    public Object[] get_Arguments();
}
internal abstract class CSRedis.RedisCommand`1 : RedisCommand {
    protected RedisCommand`1(string command, Object[] args);
    public abstract virtual T Parse(RedisReader reader);
    public virtual string ToString();
}
internal static class CSRedis.RedisCommands : object {
    public static RedisStatus Auth(string user, string password);
    public static RedisString Echo(string message);
    public static RedisStatus Ping();
    public static RedisStatus Quit();
    public static RedisStatus Select(int index);
    public static RedisInt Touch(String[] keys);
    public static RedisInt UnLink(String[] keys);
    public static RedisInt Del(String[] keys);
    public static RedisBytes Dump(string key);
    public static RedisBool Exists(string key);
    public static RedisInt Exists(String[] keys);
    public static RedisBool Expire(string key, TimeSpan expiration);
    public static RedisBool Expire(string key, int seconds);
    public static RedisBool ExpireAt(string key, DateTime expirationDate);
    public static RedisBool ExpireAt(string key, int timestamp);
    public static Strings Keys(string pattern);
    public static RedisStatus Migrate(string host, int port, string key, int destinationDb, int timeoutMilliseconds);
    public static RedisStatus Migrate(string host, int port, string key, int destinationDb, TimeSpan timeout);
    public static RedisBool Move(string key, int database);
    public static RedisString ObjectEncoding(String[] arguments);
    public static Nullable Object(RedisObjectSubCommand subCommand, String[] arguments);
    public static RedisBool Persist(string key);
    public static RedisBool PExpire(string key, TimeSpan expiration);
    public static RedisBool PExpire(string key, long milliseconds);
    public static RedisBool PExpireAt(string key, DateTime date);
    public static RedisBool PExpireAt(string key, long timestamp);
    public static RedisInt PTtl(string key);
    public static RedisString RandomKey();
    public static RedisStatus Rename(string key, string newKey);
    public static RedisBool RenameNx(string key, string newKey);
    public static RedisStatus Restore(string key, long ttl, Byte[] serializedValue);
    public static Generic`1<Dictionary`2<string, string>> Sort(string key, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, Nullable`1<bool> isHash, String[] get);
    public static Strings Sort(string key, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public static RedisInt SortAndStore(string key, string destination, Nullable`1<long> offset, Nullable`1<long> count, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public static RedisInt Ttl(string key);
    public static RedisStatus Type(string key);
    public static RedisScanCommand`1<string> Scan(long cursor, string pattern, Nullable`1<long> count);
    public static RedisScanCommand`1<Byte[]> ScanBytes(long cursor, string pattern, Nullable`1<long> count);
    public static RedisInt HStrLen(string key, string field);
    public static RedisInt HDel(string key, String[] fields);
    public static RedisBool HExists(string key, string field);
    public static RedisString HGet(string key, string field);
    public static RedisBytes HGetBytes(string key, string field);
    public static Generic`1<T> HGetAll(string key);
    public static RedisHash HGetAll(string key);
    public static RedisHashBytes HGetAllBytes(string key);
    public static RedisInt HIncrBy(string key, string field, long increment);
    public static RedisFloat HIncrByFloat(string key, string field, decimal increment);
    public static Strings HKeys(string key);
    public static RedisInt HLen(string key);
    public static Strings HMGet(string key, String[] fields);
    public static Bytes HMGetBytes(string key, String[] fields);
    public static RedisStatus HMSet(string key, Dictionary`2<string, object> dict);
    public static RedisStatus HMSet(string key, T obj);
    public static RedisStatus HMSet(string key, Object[] keyValues);
    public static RedisBool HSet(string key, string field, object value);
    public static RedisBool HSetNx(string key, string field, object value);
    public static Strings HVals(string key);
    public static Bytes HValsBytes(string key);
    public static RedisScanCommand`1<Tuple`2<string, string>> HScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static RedisScanCommand`1<Tuple`2<string, Byte[]>> HScanBytes(string key, long cursor, string pattern, Nullable`1<long> count);
    public static RedisTuple BLPopWithKey(int timeout, String[] keys);
    public static Generic`2<string, Byte[]> BLPopBytesWithKey(int timeout, String[] keys);
    public static RedisTuple BLPopWithKey(TimeSpan timeout, String[] keys);
    public static Generic`2<string, Byte[]> BLPopBytesWithKey(TimeSpan timeout, String[] keys);
    public static IndexOf`1<string> BLPop(int timeout, String[] keys);
    public static IndexOf`1<Byte[]> BLPopBytes(int timeout, String[] keys);
    public static IndexOf`1<string> BLPop(TimeSpan timeout, String[] keys);
    public static IndexOf`1<Byte[]> BLPopBytes(TimeSpan timeout, String[] keys);
    public static RedisTuple BRPopWithKey(int timeout, String[] keys);
    public static Generic`2<string, Byte[]> BRPopBytesWithKey(int timeout, String[] keys);
    public static RedisTuple BRPopWithKey(TimeSpan timeout, String[] keys);
    public static Generic`2<string, Byte[]> BRPopBytesWithKey(TimeSpan timeout, String[] keys);
    public static IndexOf`1<string> BRPop(int timeout, String[] keys);
    public static IndexOf`1<Byte[]> BRPopBytes(int timeout, String[] keys);
    public static IndexOf`1<string> BRPop(TimeSpan timeout, String[] keys);
    public static IndexOf`1<Byte[]> BRPopBytes(TimeSpan timeout, String[] keys);
    public static Nullable BRPopLPush(string source, string destination, int timeout);
    public static RedisBytes BRPopBytesLPush(string source, string destination, int timeout);
    public static Nullable BRPopLPush(string source, string destination, TimeSpan timeout);
    public static RedisBytes BRPopBytesLPush(string source, string destination, TimeSpan timeout);
    public static RedisString LIndex(string key, long index);
    public static RedisBytes LIndexBytes(string key, long index);
    public static RedisInt LInsert(string key, RedisInsert insertType, object pivot, object value);
    public static RedisInt LLen(string key);
    public static RedisString LPop(string key);
    public static RedisBytes LPopBytes(string key);
    public static RedisInt LPush(string key, Object[] values);
    public static RedisInt LPushX(string key, object value);
    public static Strings LRange(string key, long start, long stop);
    public static Bytes LRangeBytes(string key, long start, long stop);
    public static RedisInt LRem(string key, long count, object value);
    public static RedisStatus LSet(string key, long index, object value);
    public static RedisStatus LTrim(string key, long start, long stop);
    public static RedisString RPop(string key);
    public static RedisBytes RPopBytes(string key);
    public static RedisString RPopLPush(string source, string destination);
    public static RedisBytes RPopBytesLPush(string source, string destination);
    public static RedisInt RPush(string key, Object[] values);
    public static RedisInt RPushX(string key, object value);
    public static RedisInt SAdd(string key, Object[] members);
    public static RedisInt SCard(string key);
    public static Strings SDiff(String[] keys);
    public static Bytes SDiffBytes(String[] keys);
    public static RedisInt SDiffStore(string destination, String[] keys);
    public static Strings SInter(String[] keys);
    public static Bytes SInterBytes(String[] keys);
    public static RedisInt SInterStore(string destination, String[] keys);
    public static RedisBool SIsMember(string key, object member);
    public static Strings SMembers(string key);
    public static Bytes SMembersBytes(string key);
    public static RedisBool SMove(string source, string destination, object member);
    public static RedisString SPop(string key);
    public static RedisBytes SPopBytes(string key);
    public static Strings SPop(string key, long count);
    public static Bytes SPopBytes(string key, long count);
    public static RedisString SRandMember(string key);
    public static RedisBytes SRandMemberBytes(string key);
    public static Strings SRandMembers(string key, long count);
    public static Bytes SRandMembersBytes(string key, long count);
    public static RedisInt SRem(string key, Object[] members);
    public static Strings SUnion(String[] keys);
    public static Bytes SUnionBytes(String[] keys);
    public static RedisInt SUnionStore(string destination, String[] keys);
    public static RedisScanCommand`1<string> SScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static RedisScanCommand`1<Byte[]> SScanBytes(string key, long cursor, string pattern, Nullable`1<long> count);
    public static WeakPairs`2<string, decimal> ZPopMax(string key, long count);
    public static StrongPairs`2<Byte[], decimal> ZPopMaxBytes(string key, long count);
    public static WeakPairs`2<string, decimal> ZPopMin(string key, long count);
    public static StrongPairs`2<Byte[], decimal> ZPopMinBytes(string key, long count);
    public static RedisInt ZAdd(string key, Tuple`2[] scoreMembers);
    public static RedisInt ZAdd(string key, Object[] scoreMembers);
    public static RedisInt ZCard(string key);
    public static RedisInt ZCount(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public static RedisInt ZCount(string key, string min, string max);
    public static RedisFloat ZIncrBy(string key, decimal increment, object member);
    public static RedisInt ZInterStore(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public static Strings ZRange(string key, long start, long stop, bool withScores);
    public static Bytes ZRangeBytes(string key, long start, long stop, bool withScores);
    public static WeakPairs`2<string, decimal> ZRangeWithScores(string key, long start, long stop);
    public static StrongPairs`2<Byte[], decimal> ZRangeBytesWithScores(string key, long start, long stop);
    public static Strings ZRangeByScore(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public static Bytes ZRangeBytesByScore(string key, decimal min, decimal max, bool withScores, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public static WeakPairs`2<string, decimal> ZRangeByScoreWithScores(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public static StrongPairs`2<Byte[], decimal> ZRangeBytesByScoreWithScores(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax, Nullable`1<long> offset, Nullable`1<long> count);
    public static Strings ZRangeByScore(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public static Bytes ZRangeBytesByScore(string key, string min, string max, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public static WeakPairs`2<string, decimal> ZRangeByScoreWithScores(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public static StrongPairs`2<Byte[], decimal> ZRangeBytesByScoreWithScores(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public static Nullable ZRank(string key, object member);
    public static RedisInt ZRem(string key, Object[] members);
    public static RedisInt ZRemRangeByRank(string key, long start, long stop);
    public static RedisInt ZRemRangeByScore(string key, decimal min, decimal max, bool exclusiveMin, bool exclusiveMax);
    public static RedisInt ZRemRangeByScore(string key, string min, string max);
    public static Strings ZRevRange(string key, long start, long stop, bool withScores);
    public static Bytes ZRevRangeBytes(string key, long start, long stop, bool withScores);
    public static WeakPairs`2<string, decimal> ZRevRangeWithScores(string key, long start, long stop);
    public static StrongPairs`2<Byte[], decimal> ZRevRangeBytesWithScores(string key, long start, long stop);
    public static Strings ZRevRangeByScore(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public static Bytes ZRevRangeBytesByScore(string key, decimal max, decimal min, bool withScores, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public static Strings ZRevRangeByScore(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public static Bytes ZRevRangeBytesByScore(string key, string max, string min, bool withScores, Nullable`1<long> offset, Nullable`1<long> count);
    public static WeakPairs`2<string, decimal> ZRevRangeByScoreWithScores(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public static StrongPairs`2<Byte[], decimal> ZRevRangeBytesByScoreWithScores(string key, decimal max, decimal min, bool exclusiveMax, bool exclusiveMin, Nullable`1<long> offset, Nullable`1<long> count);
    public static WeakPairs`2<string, decimal> ZRevRangeByScoreWithScores(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public static StrongPairs`2<Byte[], decimal> ZRevRangeBytesByScoreWithScores(string key, string max, string min, Nullable`1<long> offset, Nullable`1<long> count);
    public static Nullable ZRevRank(string key, object member);
    public static Nullable ZScore(string key, object member);
    public static RedisInt ZUnionStore(string destination, Decimal[] weights, Nullable`1<RedisAggregate> aggregate, String[] keys);
    public static RedisScanCommand`1<Tuple`2<string, decimal>> ZScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static RedisScanCommand`1<Tuple`2<Byte[], decimal>> ZScanBytes(string key, long cursor, string pattern, Nullable`1<long> count);
    public static Strings ZRangeByLex(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public static Bytes ZRangeBytesByLex(string key, string min, string max, Nullable`1<long> offset, Nullable`1<long> count);
    public static RedisInt ZRemRangeByLex(string key, string min, string max);
    public static RedisInt ZLexCount(string key, string min, string max);
    public static RedisSubscription PSubscribe(String[] channelPatterns);
    public static RedisInt Publish(string channel, string message);
    public static Strings PubSubChannels(string pattern);
    public static StrongPairs`2<string, long> PubSubNumSub(String[] channels);
    public static RedisInt PubSubNumPat();
    public static RedisSubscription PUnsubscribe(String[] channelPatterns);
    public static RedisSubscription Subscribe(String[] channels);
    public static RedisSubscription Unsubscribe(String[] channels);
    public static Strings Eval(string script, String[] keys, Object[] arguments);
    public static Strings EvalSHA(string sha1, String[] keys, Object[] arguments);
    public static Generic`1<bool> ScriptExists(String[] sha1s);
    public static RedisStatus ScriptFlush();
    public static RedisStatus ScriptKill();
    public static RedisString ScriptLoad(string script);
    public static RedisInt Append(string key, object value);
    public static RedisInt BitCount(string key, Nullable`1<long> start, Nullable`1<long> end);
    public static RedisInt BitOp(RedisBitOp operation, string destKey, String[] keys);
    public static RedisInt BitPos(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public static RedisInt Decr(string key);
    public static RedisInt DecrBy(string key, long decrement);
    public static RedisString Get(string key);
    public static RedisBytes GetBytes(string key);
    public static RedisBool GetBit(string key, UInt32 offset);
    public static RedisString GetRange(string key, long start, long end);
    public static RedisBytes GetRangeBytes(string key, long start, long end);
    public static RedisString GetSet(string key, object value);
    public static RedisBytes GetSetBytes(string key, object value);
    public static RedisInt Incr(string key);
    public static RedisInt IncrBy(string key, long increment);
    public static RedisFloat IncrByFloat(string key, decimal increment);
    public static Strings MGet(String[] keys);
    public static Bytes MGetBytes(String[] keys);
    public static RedisStatus MSet(Tuple`2[] keyValues);
    public static RedisStatus MSet(Object[] keyValues);
    public static RedisBool MSetNx(Tuple`2[] keyValues);
    public static RedisBool MSetNx(Object[] keyValues);
    public static RedisStatus PSetEx(string key, long milliseconds, object value);
    public static RedisStatus Set(string key, object value);
    public static Nullable Set(string key, object value, TimeSpan expiration, Nullable`1<RedisExistence> condition);
    public static Nullable Set(string key, object value, Nullable`1<int> expirationSeconds, Nullable`1<RedisExistence> condition);
    public static Nullable Set(string key, object value, Nullable`1<long> expirationMilliseconds, Nullable`1<RedisExistence> condition);
    private static Nullable Set(string key, object value, Nullable`1<int> expirationSeconds, Nullable`1<long> expirationMilliseconds, Nullable`1<RedisExistence> exists);
    public static RedisBool SetBit(string key, UInt32 offset, bool value);
    public static RedisStatus SetEx(string key, long seconds, object value);
    public static RedisBool SetNx(string key, object value);
    public static RedisInt SetRange(string key, UInt32 offset, object value);
    public static RedisInt StrLen(string key);
    public static RedisStatus BgRewriteAof();
    public static RedisStatus BgSave();
    public static RedisString ClientGetName();
    public static RedisStatus ClientKill(string ip, int port);
    public static RedisInt ClientKill(string addr, string id, string type, Nullable`1<bool> skipMe);
    public static RedisString ClientList();
    public static RedisStatus ClientPause(TimeSpan timeout);
    public static RedisStatus ClientPause(int milliseconds);
    public static RedisStatus ClientSetName(string connectionName);
    public static WeakPairs`2<string, string> ConfigGet(string parameter);
    public static RedisStatus ConfigResetStat();
    public static RedisStatus ConfigRewrite();
    public static RedisStatus ConfigSet(string parameter, string value);
    public static RedisInt DbSize();
    public static RedisStatus DebugSegFault();
    public static RedisStatus FlushAll();
    public static RedisStatus FlushDb();
    public static RedisString Info(string section);
    public static RedisDate LastSave();
    public static RedisStatus Monitor();
    public static RedisRoleCommand Role();
    public static RedisStatus Save();
    public static Empty Shutdown(Nullable`1<bool> save);
    public static RedisStatus SlaveOf(string host, int port);
    public static RedisStatus SlaveOfNoOne();
    public static Generic`1<RedisSlowLogEntry> SlowLogGet(Nullable`1<long> count);
    public static RedisInt SlowLogLen();
    public static RedisStatus SlowLogReset();
    public static RedisBytes Sync();
    public static Micro Time();
    public static RedisStatus Discard();
    public static RedisArray Exec();
    public static RedisStatus Multi();
    public static RedisStatus Unwatch();
    public static RedisStatus Watch(String[] keys);
    public static RedisBool PfAdd(string key, Object[] elements);
    public static RedisInt PfCount(String[] keys);
    public static RedisStatus PfMerge(string destKey, String[] sourceKeys);
    public static RedisInt XAck(string key, string group, String[] id);
    public static RedisString XAdd(string key, long maxLen, string id, ValueTuple`2[] fieldValues);
    public static RedisXRangeCommand XClaim(string key, string group, string consumer, long minIdleTime, String[] id);
    public static RedisXRangeCommand XClaim(string key, string group, string consumer, long minIdleTime, String[] id, long idle, long retryCount, bool force);
    public static Strings XClaimJustId(string key, string group, string consumer, long minIdleTime, String[] id);
    public static Strings XClaimJustId(string key, string group, string consumer, long minIdleTime, String[] id, long idle, long retryCount, bool force);
    public static RedisInt XDel(string key, String[] id);
    public static RedisXInfoStreamCommand XInfoStream(string key);
    public static RedisXInfoGroupsCommand XInfoGroups(string key);
    public static RedisXInfoConsumersCommand XInfoConsumers(string key, string group);
    public static RedisInt XLen(string key);
    public static RedisXPendingCommand XPending(string key, string group);
    public static RedisXPendingStartEndCountCommand XPending(string key, string group, string start, string end, long count, string consumer);
    public static RedisXRangeCommand XRange(string key, string start, string end, long count);
    public static RedisXRangeCommand XRevRange(string key, string end, string start, long count);
    public static RedisXReadCommand XRead(long count, long block, ValueTuple`2[] streams);
    public static RedisXReadCommand XReadGroup(string group, string consumer, long count, long block, ValueTuple`2[] streams);
    public static RedisInt XTrim(string key, long maxLen);
    public static RedisStatus BfReserve(string key, decimal errorRate, long capacity, int expansion, bool nonScaling);
    public static RedisBool BfAdd(string key, object item);
    public static Generic`1<bool> BfMAdd(string key, Object[] items);
    public static Generic`1<bool> BfInsert(string key, Object[] items, Nullable`1<long> capacity, string error, int expansion, bool noCreate, bool nonScaling);
    public static RedisBool BfExists(string key, object item);
    public static Generic`1<bool> BfMExists(string key, Object[] items);
    public static RedisScanCommand`1<Byte[]> BfScanDump(string key, long iter);
    public static RedisStatus BfLoadChunk(string key, long iter, Byte[] data);
    public static RedisBfInfoCommand BfInfo(string key);
    public static RedisStatus CfReserve(string key, long capacity, Nullable`1<long> bucketSize, Nullable`1<long> maxIterations, Nullable`1<int> expansion);
    public static RedisBool CfAdd(bool nx, string key, object item);
    public static Generic`1<bool> CfInsert(bool nx, string key, Object[] items, Nullable`1<long> capacity, bool noCreate);
    public static RedisBool CfExists(string key, object item);
    public static RedisBool CfDel(string key, object item);
    public static RedisInt CfCount(string key, object item);
    public static RedisScanCommand`1<Byte[]> CfScanDump(string key, long iter);
    public static RedisStatus CfLoadChunk(string key, long iter, Byte[] data);
    public static RedisCfInfoCommand CfInfo(string key);
    public static RedisStatus CmsInitByDim(string key, long width, long depth);
    public static RedisStatus CmsInitByProb(string key, decimal error, decimal probability);
    public static Generic`1<long> CmsIncrBy(string key, ValueTuple`2[] items);
    public static Generic`1<long> CmsQuery(string key, Object[] items);
    public static RedisStatus CmsMerge(string dest, long numKeys, String[] src, Int64[] weights);
    public static RedisCmsInfoCommand CmsInfo(string key);
    public static RedisStatus TopkReserve(string key, long topk, long width, long depth, decimal decay);
    public static Generic`1<string> TopkAdd(string key, Object[] items);
    public static Generic`1<string> TopkIncrBy(string key, ValueTuple`2[] items);
    public static Generic`1<bool> TopkQuery(string key, Object[] items);
    public static Generic`1<long> TopkCount(string key, Object[] items);
    public static Generic`1<string> TopkList(string key);
    public static RedisTopkInfoCommand TopkInfo(string key);
    public static RedisObject Call(string command, String[] args);
    public static RedisStatus AsTransaction(RedisCommand`1<T> command);
}
public class CSRedis.RedisException : RedisClientException {
    public RedisException(string message);
    public RedisException(string message, Exception inner);
}
public enum CSRedis.RedisExistence : Enum {
    public int value__;
    public static RedisExistence Nx;
    public static RedisExistence Xx;
}
public enum CSRedis.RedisInsert : Enum {
    public int value__;
    public static RedisInsert Before;
    public static RedisInsert After;
}
public class CSRedis.RedisMasterInfo : RedisMasterSlaveInfo {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <ConfigEpoch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <NumSlaves>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <NumOtherSentinels>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <Quorum>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <FailoverTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <ParallelSyncs>k__BackingField;
    public long ConfigEpoch { get; public set; }
    public long NumSlaves { get; public set; }
    public long NumOtherSentinels { get; public set; }
    public long Quorum { get; public set; }
    public long FailoverTimeout { get; public set; }
    public long ParallelSyncs { get; public set; }
    public RedisMasterInfo(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public long get_ConfigEpoch();
    [CompilerGeneratedAttribute]
public void set_ConfigEpoch(long value);
    [CompilerGeneratedAttribute]
public long get_NumSlaves();
    [CompilerGeneratedAttribute]
public void set_NumSlaves(long value);
    [CompilerGeneratedAttribute]
public long get_NumOtherSentinels();
    [CompilerGeneratedAttribute]
public void set_NumOtherSentinels(long value);
    [CompilerGeneratedAttribute]
public long get_Quorum();
    [CompilerGeneratedAttribute]
public void set_Quorum(long value);
    [CompilerGeneratedAttribute]
public long get_FailoverTimeout();
    [CompilerGeneratedAttribute]
public void set_FailoverTimeout(long value);
    [CompilerGeneratedAttribute]
public long get_ParallelSyncs();
    [CompilerGeneratedAttribute]
public void set_ParallelSyncs(long value);
}
public class CSRedis.RedisMasterRole : RedisRole {
    private long _replicationOffset;
    private Tuple`3[] _slaves;
    public long ReplicationOffset { get; }
    public Tuple`3[] Slaves { get; }
    internal RedisMasterRole(string role, long replicationOffset, Tuple`3[] slaves);
    public long get_ReplicationOffset();
    public Tuple`3[] get_Slaves();
}
public abstract class CSRedis.RedisMasterSlaveInfo : RedisServerInfo {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <InfoRefresh>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RoleReported>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <RoleReportedTime>k__BackingField;
    public long InfoRefresh { get; public set; }
    public string RoleReported { get; public set; }
    public long RoleReportedTime { get; public set; }
    public RedisMasterSlaveInfo(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public long get_InfoRefresh();
    [CompilerGeneratedAttribute]
public void set_InfoRefresh(long value);
    [CompilerGeneratedAttribute]
public string get_RoleReported();
    [CompilerGeneratedAttribute]
public void set_RoleReported(string value);
    [CompilerGeneratedAttribute]
public long get_RoleReportedTime();
    [CompilerGeneratedAttribute]
public void set_RoleReportedTime(long value);
}
public class CSRedis.RedisMasterState : object {
    private long _downState;
    private string _leader;
    private long _voteEpoch;
    public long DownState { get; }
    public string Leader { get; }
    public long VoteEpoch { get; }
    internal RedisMasterState(long downState, string leader, long voteEpoch);
    public long get_DownState();
    public string get_Leader();
    public long get_VoteEpoch();
}
public enum CSRedis.RedisMessage : Enum {
    public int value__;
    public static RedisMessage Error;
    public static RedisMessage Status;
    public static RedisMessage Bulk;
    public static RedisMessage MultiBulk;
    public static RedisMessage Int;
}
public class CSRedis.RedisMonitorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Message>k__BackingField;
    public object Message { get; private set; }
    internal RedisMonitorEventArgs(object message);
    [CompilerGeneratedAttribute]
public object get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(object value);
}
public enum CSRedis.RedisObjectSubCommand : Enum {
    public int value__;
    public static RedisObjectSubCommand RefCount;
    public static RedisObjectSubCommand IdleTime;
}
public class CSRedis.RedisProtocolException : RedisClientException {
    public RedisProtocolException(string message);
}
public abstract class CSRedis.RedisRole : object {
    private string _roleName;
    public string RoleName { get; }
    internal RedisRole(string roleName);
    public string get_RoleName();
}
public class CSRedis.RedisScan`1 : object {
    private long _cursor;
    private T[] _items;
    public long Cursor { get; }
    public T[] Items { get; }
    internal RedisScan`1(long cursor, T[] items);
    public long get_Cursor();
    public T[] get_Items();
}
public class CSRedis.RedisSentinelClient : object {
    private static int DefaultPort;
    private static bool DefaultSSL;
    private static int DefaultConcurrency;
    private static int DefaultBufferSize;
    private RedisConnector _connector;
    private SubscriptionListener _subscription;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisSubscriptionReceivedEventArgs> SubscriptionReceived;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<RedisSubscriptionChangedEventArgs> SubscriptionChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Reconnected;
    public string Host { get; }
    public int Port { get; }
    public bool Connected { get; }
    public Encoding Encoding { get; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public int ReconnectAttempts { get; public set; }
    public int ReconnectWait { get; public set; }
    public RedisSentinelClient(string host);
    public RedisSentinelClient(string host, int port);
    public RedisSentinelClient(string host, int port, bool ssl);
    internal RedisSentinelClient(IRedisSocket socket, EndPoint endpoint);
    internal RedisSentinelClient(IRedisSocket socket, EndPoint endpoint, int concurrency, int bufferSize);
    public Task`1<bool> ConnectAsync();
    public Task`1<object> CallAsync(string command, String[] args);
    private Task`1<T> WriteAsync(RedisCommand`1<T> command);
    public Task`1<string> PingAsync();
    public Task`1<RedisMasterInfo[]> MastersAsync();
    public Task`1<RedisMasterInfo> MasterAsync(string masterName);
    public Task`1<RedisSentinelInfo[]> SentinelsAsync(string masterName);
    public Task`1<RedisSlaveInfo[]> SlavesAsync(string masterName);
    public Task`1<Tuple`2<string, int>> GetMasterAddrByNameAsync(string masterName);
    public Task`1<RedisMasterState> IsMasterDownByAddrAsync(string ip, int port, long currentEpoch, string runId);
    public Task`1<long> ResetAsync(string pattern);
    public Task`1<string> FailoverAsync(string masterName);
    public Task`1<string> MonitorAsync(string name, int port, int quorum);
    public Task`1<string> RemoveAsync(string name);
    public Task`1<string> SetAsync(string masterName, string option, string value);
    [CompilerGeneratedAttribute]
public void add_SubscriptionReceived(EventHandler`1<RedisSubscriptionReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SubscriptionReceived(EventHandler`1<RedisSubscriptionReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SubscriptionChanged(EventHandler`1<RedisSubscriptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SubscriptionChanged(EventHandler`1<RedisSubscriptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Reconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Reconnected(EventHandler value);
    public string get_Host();
    public int get_Port();
    public bool get_Connected();
    public Encoding get_Encoding();
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public int get_ReconnectAttempts();
    public void set_ReconnectAttempts(int value);
    public int get_ReconnectWait();
    public void set_ReconnectWait(int value);
    public sealed virtual void Dispose();
    private void OnSubscriptionReceived(object sender, RedisSubscriptionReceivedEventArgs args);
    private void OnSubscriptionChanged(object sender, RedisSubscriptionChangedEventArgs args);
    private void OnConnectionReconnected(object sender, EventArgs args);
    private string GetHost();
    private int GetPort();
    public bool Connect(int timeout);
    public object Call(string command, String[] args);
    private T Write(RedisCommand`1<T> command);
    public string Ping();
    public RedisMasterInfo[] Masters();
    public RedisMasterInfo Master(string masterName);
    public RedisSentinelInfo[] Sentinels(string masterName);
    public RedisSlaveInfo[] Slaves(string masterName);
    public Tuple`2<string, int> GetMasterAddrByName(string masterName);
    public void Subscribe(String[] channels);
    public void Unsubscribe(String[] channels);
    public void PSubscribe(String[] channelPatterns);
    public void PUnsubscribe(String[] channelPatterns);
    public RedisMasterState IsMasterDownByAddr(string ip, int port, long currentEpoch, string runId);
    public long Reset(string pattern);
    public string Failover(string masterName);
    public string Monitor(string name, int port, int quorum);
    public string Remove(string name);
    public string Set(string masterName, string option, string value);
}
public class CSRedis.RedisSentinelInfo : RedisServerInfo {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <SDownTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <LastHelloMessage>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <VotedLeader>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <VotedLeaderEpoch>k__BackingField;
    public long SDownTime { get; public set; }
    public long LastHelloMessage { get; public set; }
    public string VotedLeader { get; public set; }
    public long VotedLeaderEpoch { get; public set; }
    public RedisSentinelInfo(SerializationInfo info, StreamingContext context);
    private T GetSerializationItemValue(SerializationInfo info, string key);
    [CompilerGeneratedAttribute]
public long get_SDownTime();
    [CompilerGeneratedAttribute]
public void set_SDownTime(long value);
    [CompilerGeneratedAttribute]
public long get_LastHelloMessage();
    [CompilerGeneratedAttribute]
public void set_LastHelloMessage(long value);
    [CompilerGeneratedAttribute]
public string get_VotedLeader();
    [CompilerGeneratedAttribute]
public void set_VotedLeader(string value);
    [CompilerGeneratedAttribute]
public long get_VotedLeaderEpoch();
    [CompilerGeneratedAttribute]
public void set_VotedLeaderEpoch(long value);
}
public class CSRedis.RedisSentinelManager : object {
    private static int DefaultPort;
    private LinkedList`1<Tuple`2<string, int>> _sentinels;
    private string _masterName;
    private int _connectTimeout;
    private RedisClient _redisClient;
    private bool _readOnly;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Connected;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SentinelMasterConverter <SentinelMasterConverter>k__BackingField;
    public SentinelMasterConverter SentinelMasterConverter { get; public set; }
    public RedisSentinelManager(bool readOnly, String[] sentinels);
    [CompilerGeneratedAttribute]
public void add_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Connected(EventHandler value);
    public void Add(string host);
    public void Add(string host, int port);
    public string Connect(string masterName, int timeout);
    public T Call(Func`2<RedisClient, T> redisAction);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public SentinelMasterConverter get_SentinelMasterConverter();
    [CompilerGeneratedAttribute]
public void set_SentinelMasterConverter(SentinelMasterConverter value);
    private string SetMaster(string name, int timeout);
    private string SetSlave(string name, int timeout);
    private RedisSentinelClient Current();
    private void Next();
    private void OnConnectionConnected(object sender, EventArgs args);
}
public class CSRedis.RedisSentinelRole : RedisRole {
    private String[] _masters;
    public String[] Masters { get; }
    internal RedisSentinelRole(string role, String[] masters);
    public String[] get_Masters();
}
public abstract class CSRedis.RedisServerInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Ip>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RunId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <PendingCommands>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <LastPingSent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <LastOkPingReply>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <LastPingReply>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <DownAfterMilliseconds>k__BackingField;
    public string Name { get; public set; }
    public string Ip { get; public set; }
    public int Port { get; public set; }
    public string RunId { get; public set; }
    public String[] Flags { get; public set; }
    public long PendingCommands { get; public set; }
    public long LastPingSent { get; public set; }
    public long LastOkPingReply { get; public set; }
    public long LastPingReply { get; public set; }
    public long DownAfterMilliseconds { get; public set; }
    public RedisServerInfo(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Ip();
    [CompilerGeneratedAttribute]
public void set_Ip(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_RunId();
    [CompilerGeneratedAttribute]
public void set_RunId(string value);
    [CompilerGeneratedAttribute]
public String[] get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(String[] value);
    [CompilerGeneratedAttribute]
public long get_PendingCommands();
    [CompilerGeneratedAttribute]
public void set_PendingCommands(long value);
    [CompilerGeneratedAttribute]
public long get_LastPingSent();
    [CompilerGeneratedAttribute]
public void set_LastPingSent(long value);
    [CompilerGeneratedAttribute]
public long get_LastOkPingReply();
    [CompilerGeneratedAttribute]
public void set_LastOkPingReply(long value);
    [CompilerGeneratedAttribute]
public long get_LastPingReply();
    [CompilerGeneratedAttribute]
public void set_LastPingReply(long value);
    [CompilerGeneratedAttribute]
public long get_DownAfterMilliseconds();
    [CompilerGeneratedAttribute]
public void set_DownAfterMilliseconds(long value);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class CSRedis.RedisSlaveInfo : RedisMasterSlaveInfo {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <MasterLinkDownTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MasterLinkStatus>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MasterHost>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MasterPort>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <SlavePriority>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <SlaveReplOffset>k__BackingField;
    public long MasterLinkDownTime { get; public set; }
    public string MasterLinkStatus { get; public set; }
    public string MasterHost { get; public set; }
    public int MasterPort { get; public set; }
    public long SlavePriority { get; public set; }
    public long SlaveReplOffset { get; public set; }
    public RedisSlaveInfo(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public long get_MasterLinkDownTime();
    [CompilerGeneratedAttribute]
public void set_MasterLinkDownTime(long value);
    [CompilerGeneratedAttribute]
public string get_MasterLinkStatus();
    [CompilerGeneratedAttribute]
public void set_MasterLinkStatus(string value);
    [CompilerGeneratedAttribute]
public string get_MasterHost();
    [CompilerGeneratedAttribute]
public void set_MasterHost(string value);
    [CompilerGeneratedAttribute]
public int get_MasterPort();
    [CompilerGeneratedAttribute]
public void set_MasterPort(int value);
    [CompilerGeneratedAttribute]
public long get_SlavePriority();
    [CompilerGeneratedAttribute]
public void set_SlavePriority(long value);
    [CompilerGeneratedAttribute]
public long get_SlaveReplOffset();
    [CompilerGeneratedAttribute]
public void set_SlaveReplOffset(long value);
}
public class CSRedis.RedisSlaveRole : RedisRole {
    private string _masterIp;
    private int _masterPort;
    private string _replicationState;
    private long _dataReceived;
    public string MasterIp { get; }
    public int MasterPort { get; }
    public string ReplicationState { get; }
    public long DataReceived { get; }
    internal RedisSlaveRole(string role, string masterIp, int masterPort, string replicationState, long dataReceived);
    public string get_MasterIp();
    public int get_MasterPort();
    public string get_ReplicationState();
    public long get_DataReceived();
}
public class CSRedis.RedisSlowLogEntry : object {
    private long _id;
    private DateTime _date;
    private TimeSpan _latency;
    private String[] _arguments;
    public long Id { get; }
    public DateTime Date { get; }
    public TimeSpan Latency { get; }
    public String[] Arguments { get; }
    internal RedisSlowLogEntry(long id, DateTime date, TimeSpan latency, String[] arguments);
    public long get_Id();
    public DateTime get_Date();
    public TimeSpan get_Latency();
    public String[] get_Arguments();
}
public enum CSRedis.RedisSortDir : Enum {
    public int value__;
    public static RedisSortDir Asc;
    public static RedisSortDir Desc;
}
public class CSRedis.RedisSubscriptionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RedisSubscriptionChannel <Response>k__BackingField;
    public RedisSubscriptionChannel Response { get; private set; }
    internal RedisSubscriptionChangedEventArgs(RedisSubscriptionChannel response);
    [CompilerGeneratedAttribute]
public RedisSubscriptionChannel get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(RedisSubscriptionChannel value);
}
public class CSRedis.RedisSubscriptionChannel : RedisSubscriptionResponse {
    private long _count;
    public long Count { get; }
    internal RedisSubscriptionChannel(string type, string channel, string pattern, long count);
    public long get_Count();
}
public class CSRedis.RedisSubscriptionMessage : RedisSubscriptionResponse {
    private string _body;
    public string Body { get; }
    internal RedisSubscriptionMessage(string type, string channel, string body);
    internal RedisSubscriptionMessage(string type, string pattern, string channel, string body);
    public string get_Body();
}
public class CSRedis.RedisSubscriptionReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RedisSubscriptionMessage <Message>k__BackingField;
    public RedisSubscriptionMessage Message { get; private set; }
    internal RedisSubscriptionReceivedEventArgs(RedisSubscriptionMessage message);
    [CompilerGeneratedAttribute]
public RedisSubscriptionMessage get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(RedisSubscriptionMessage value);
}
public class CSRedis.RedisSubscriptionResponse : object {
    private string _channel;
    private string _pattern;
    private string _type;
    public string Channel { get; }
    public string Pattern { get; }
    public string Type { get; }
    internal RedisSubscriptionResponse(string type, string channel, string pattern);
    public string get_Channel();
    public string get_Pattern();
    public string get_Type();
}
public enum CSRedis.RedisSubscriptionResponseType : Enum {
    public int value__;
    public static RedisSubscriptionResponseType Subscribe;
    public static RedisSubscriptionResponseType Message;
    public static RedisSubscriptionResponseType Unsubscribe;
    public static RedisSubscriptionResponseType PSubscribe;
    public static RedisSubscriptionResponseType PMessage;
    public static RedisSubscriptionResponseType PUnsubscribe;
}
public class CSRedis.RedisTransactionQueuedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Object[] <Arguments>k__BackingField;
    public string Status { get; private set; }
    public string Command { get; private set; }
    public Object[] Arguments { get; private set; }
    internal RedisTransactionQueuedEventArgs(string status, string command, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(string value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(string value);
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(Object[] value);
}
public class CSRedis.SentinelMasterConverter : MulticastDelegate {
    public SentinelMasterConverter(object object, IntPtr method);
    public virtual Tuple`2<string, int> Invoke(Tuple`2<string, int> master);
    public virtual IAsyncResult BeginInvoke(Tuple`2<string, int> master, AsyncCallback callback, object object);
    public virtual Tuple`2<string, int> EndInvoke(IAsyncResult result);
}
internal class CSRedis.TaskEx : object {
    public static Task`1<T> FromResult(T value);
    public static Task Run(Action action);
    public static Task`1<TResult> Run(Func`1<TResult> function);
    public static Task Delay(TimeSpan timeout);
}
public abstract class RedisHelper : RedisHelper`1<RedisHelper> {
}
public abstract class RedisHelper`1 : object {
    public static int NeverExpired;
    internal static ThreadLocal`1<Random> rnd;
    private static CSRedisClient _instance;
    public static CSRedisClient Instance { get; }
    public static ConcurrentDictionary`2<string, RedisClientPool> Nodes { get; }
    public static string Prefix { get; }
    public static NodesServerManagerProvider NodesServerManager { get; }
    private static RedisHelper`1();
    public static int RandomExpired(int minTimeoutSeconds, int maxTimeoutSeconds);
    public static CSRedisClient get_Instance();
    public static ConcurrentDictionary`2<string, RedisClientPool> get_Nodes();
    public static string get_Prefix();
    public static void Initialization(CSRedisClient csredis);
    public static T CacheShell(string key, int timeoutSeconds, Func`1<T> getData);
    public static T CacheShell(string key, string field, int timeoutSeconds, Func`1<T> getData);
    public static ValueTuple`2[] CacheShell(string key, String[] fields, int timeoutSeconds, Func`2<String[], ValueTuple`2[]> getData);
    public static Object[] StartPipe(Action`1<CSRedisClientPipe`1<string>> handler);
    public static CSRedisClientPipe`1<string> StartPipe();
    public static NodesServerManagerProvider get_NodesServerManager();
    public static NodeServerManagerProvider NodeServerManager(string node);
    public static string Echo(string nodeKey, string message);
    public static string Echo(string message);
    public static bool Ping(string nodeKey);
    public static bool Ping();
    public static object Eval(string script, string key, Object[] args);
    public static object EvalSHA(string sha1, string key, Object[] args);
    public static Boolean[] ScriptExists(String[] sha1);
    public static void ScriptFlush();
    public static void ScriptKill();
    public static string ScriptLoad(string script);
    public static long Publish(string channel, string message);
    public static long PublishNoneMessageId(string channel, string message);
    public static String[] PubSubChannels(string pattern);
    public static long PubSubNumPat();
    public static Dictionary`2<string, long> PubSubNumSub(String[] channels);
    public static SubscribeObject Subscribe(ValueTuple`2[] channels);
    public static PSubscribeObject PSubscribe(String[] channelPatterns, Action`1<PSubscribePMessageEventArgs> pmessage);
    public static SubscribeListBroadcastObject SubscribeListBroadcast(string listKey, string clientId, Action`1<string> onMessage);
    public static SubscribeListObject SubscribeList(string listKey, Action`1<string> onMessage);
    public static SubscribeListObject SubscribeList(String[] listKeys, Action`2<string, string> onMessage);
    public static bool PfAdd(string key, T[] elements);
    public static long PfCount(String[] keys);
    public static bool PfMerge(string destKey, String[] sourceKeys);
    public static long ZAdd(string key, ValueTuple`2[] scoreMembers);
    public static long ZCard(string key);
    public static long ZCount(string key, decimal min, decimal max);
    public static long ZCount(string key, string min, string max);
    public static decimal ZIncrBy(string key, string member, decimal increment);
    public static long ZInterStore(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    public static String[] ZRange(string key, long start, long stop);
    public static T[] ZRange(string key, long start, long stop);
    public static ValueTuple`2[] ZRangeWithScores(string key, long start, long stop);
    public static ValueTuple`2[] ZRangeWithScores(string key, long start, long stop);
    public static String[] ZRangeByScore(string key, decimal min, decimal max, Nullable`1<long> limit, long offset);
    public static T[] ZRangeByScore(string key, decimal min, decimal max, Nullable`1<long> limit, long offset);
    public static String[] ZRangeByScore(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static T[] ZRangeByScore(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static ValueTuple`2[] ZRangeByScoreWithScores(string key, decimal min, decimal max, Nullable`1<long> limit, long offset);
    public static ValueTuple`2[] ZRangeByScoreWithScores(string key, decimal min, decimal max, Nullable`1<long> limit, long offset);
    public static ValueTuple`2[] ZRangeByScoreWithScores(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static ValueTuple`2[] ZRangeByScoreWithScores(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static Nullable`1<long> ZRank(string key, object member);
    public static long ZRem(string key, T[] member);
    public static long ZRemRangeByRank(string key, long start, long stop);
    public static long ZRemRangeByScore(string key, decimal min, decimal max);
    public static long ZRemRangeByScore(string key, string min, string max);
    public static String[] ZRevRange(string key, long start, long stop);
    public static T[] ZRevRange(string key, long start, long stop);
    public static ValueTuple`2[] ZRevRangeWithScores(string key, long start, long stop);
    public static ValueTuple`2[] ZRevRangeWithScores(string key, long start, long stop);
    public static String[] ZRevRangeByScore(string key, decimal max, decimal min, Nullable`1<long> limit, Nullable`1<long> offset);
    public static T[] ZRevRangeByScore(string key, decimal max, decimal min, Nullable`1<long> limit, long offset);
    public static String[] ZRevRangeByScore(string key, string max, string min, Nullable`1<long> limit, Nullable`1<long> offset);
    public static T[] ZRevRangeByScore(string key, string max, string min, Nullable`1<long> limit, long offset);
    public static ValueTuple`2[] ZRevRangeByScoreWithScores(string key, decimal max, decimal min, Nullable`1<long> limit, long offset);
    public static ValueTuple`2[] ZRevRangeByScoreWithScores(string key, decimal max, decimal min, Nullable`1<long> limit, long offset);
    public static ValueTuple`2[] ZRevRangeByScoreWithScores(string key, string max, string min, Nullable`1<long> limit, long offset);
    public static ValueTuple`2[] ZRevRangeByScoreWithScores(string key, string max, string min, Nullable`1<long> limit, long offset);
    public static Nullable`1<long> ZRevRank(string key, object member);
    public static Nullable`1<decimal> ZScore(string key, object member);
    public static long ZUnionStore(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    public static RedisScan`1<ValueTuple`2<string, decimal>> ZScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static RedisScan`1<ValueTuple`2<T, decimal>> ZScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static String[] ZRangeByLex(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static T[] ZRangeByLex(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static long ZRemRangeByLex(string key, string min, string max);
    public static long ZLexCount(string key, string min, string max);
    public static ValueTuple`2[] ZPopMax(string key, long count);
    public static ValueTuple`2[] ZPopMax(string key, long count);
    public static ValueTuple`2[] ZPopMin(string key, long count);
    public static ValueTuple`2[] ZPopMin(string key, long count);
    public static long SAdd(string key, T[] members);
    public static long SCard(string key);
    public static String[] SDiff(String[] keys);
    public static T[] SDiff(String[] keys);
    public static long SDiffStore(string destination, String[] keys);
    public static String[] SInter(String[] keys);
    public static T[] SInter(String[] keys);
    public static long SInterStore(string destination, String[] keys);
    public static bool SIsMember(string key, object member);
    public static String[] SMembers(string key);
    public static T[] SMembers(string key);
    public static bool SMove(string source, string destination, object member);
    public static string SPop(string key);
    public static T SPop(string key);
    public static String[] SPop(string key, long count);
    public static T[] SPop(string key, long count);
    public static string SRandMember(string key);
    public static T SRandMember(string key);
    public static String[] SRandMembers(string key, int count);
    public static T[] SRandMembers(string key, int count);
    public static long SRem(string key, T[] members);
    public static String[] SUnion(String[] keys);
    public static T[] SUnion(String[] keys);
    public static long SUnionStore(string destination, String[] keys);
    public static RedisScan`1<string> SScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static RedisScan`1<T> SScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static Nullable`1<ValueTuple`2<string, string>> BLPopWithKey(int timeout, String[] keys);
    public static Nullable`1<ValueTuple`2<string, T>> BLPopWithKey(int timeout, String[] keys);
    public static string BLPop(int timeout, String[] keys);
    public static T BLPop(int timeout, String[] keys);
    public static Nullable`1<ValueTuple`2<string, string>> BRPopWithKey(int timeout, String[] keys);
    public static Nullable`1<ValueTuple`2<string, T>> BRPopWithKey(int timeout, String[] keys);
    public static string BRPop(int timeout, String[] keys);
    public static T BRPop(int timeout, String[] keys);
    public static string BRPopLPush(string source, string destination, int timeout);
    public static T BRPopLPush(string source, string destination, int timeout);
    public static string LIndex(string key, long index);
    public static T LIndex(string key, long index);
    public static long LInsertBefore(string key, object pivot, object value);
    public static long LInsertAfter(string key, object pivot, object value);
    public static long LLen(string key);
    public static string LPop(string key);
    public static T LPop(string key);
    public static long LPush(string key, T[] value);
    public static long LPushX(string key, object value);
    public static String[] LRange(string key, long start, long stop);
    public static T[] LRange(string key, long start, long stop);
    public static long LRem(string key, long count, object value);
    public static bool LSet(string key, long index, object value);
    public static bool LTrim(string key, long start, long stop);
    public static string RPop(string key);
    public static T RPop(string key);
    public static string RPopLPush(string source, string destination);
    public static T RPopLPush(string source, string destination);
    public static long RPush(string key, T[] value);
    public static long RPushX(string key, object value);
    public static long HDel(string key, String[] fields);
    public static bool HExists(string key, string field);
    public static string HGet(string key, string field);
    public static T HGet(string key, string field);
    public static Dictionary`2<string, string> HGetAll(string key);
    public static Dictionary`2<string, T> HGetAll(string key);
    public static long HIncrBy(string key, string field, long value);
    public static decimal HIncrByFloat(string key, string field, decimal value);
    public static String[] HKeys(string key);
    public static long HLen(string key);
    public static String[] HMGet(string key, String[] fields);
    public static T[] HMGet(string key, String[] fields);
    public static bool HMSet(string key, Object[] keyValues);
    public static bool HSet(string key, string field, object value);
    public static bool HSetNx(string key, string field, object value);
    public static String[] HVals(string key);
    public static T[] HVals(string key);
    public static RedisScan`1<ValueTuple`2<string, string>> HScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static RedisScan`1<ValueTuple`2<string, T>> HScan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static long Append(string key, object value);
    public static long BitCount(string key, long start, long end);
    public static long BitOp(RedisBitOp op, string destKey, String[] keys);
    public static long BitPos(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public static string Get(string key);
    public static T Get(string key);
    public static void Get(string key, Stream destination, int bufferSize);
    public static bool GetBit(string key, UInt32 offset);
    public static string GetRange(string key, long start, long end);
    public static T GetRange(string key, long start, long end);
    public static string GetSet(string key, object value);
    public static T GetSet(string key, object value);
    public static long IncrBy(string key, long value);
    public static decimal IncrByFloat(string key, decimal value);
    public static String[] MGet(String[] keys);
    public static T[] MGet(String[] keys);
    public static bool MSet(Object[] keyValues);
    public static bool MSetNx(Object[] keyValues);
    public static bool Set(string key, object value, int expireSeconds, Nullable`1<RedisExistence> exists);
    public static bool Set(string key, object value, TimeSpan expire, Nullable`1<RedisExistence> exists);
    public static bool SetBit(string key, UInt32 offset, bool value);
    public static bool SetNx(string key, object value);
    public static long SetRange(string key, UInt32 offset, object value);
    public static long StrLen(string key);
    public static long Del(String[] key);
    public static Byte[] Dump(string key);
    public static bool Exists(string key);
    public static long Exists(String[] keys);
    public static bool Expire(string key, int seconds);
    public static bool Expire(string key, TimeSpan expire);
    public static bool ExpireAt(string key, DateTime expire);
    public static String[] Keys(string pattern);
    public static bool Move(string key, int database);
    public static string ObjectEncoding(string key);
    public static Nullable`1<long> ObjectRefCount(string key);
    public static Nullable`1<long> ObjectIdleTime(string key);
    public static bool Persist(string key);
    public static bool PExpire(string key, int milliseconds);
    public static bool PExpire(string key, TimeSpan expire);
    public static bool PExpireAt(string key, DateTime expire);
    public static long PTtl(string key);
    public static string RandomKey();
    public static bool Rename(string key, string newKey);
    public static bool RenameNx(string key, string newKey);
    public static bool Restore(string key, Byte[] serializedValue);
    public static bool Restore(string key, long ttlMilliseconds, Byte[] serializedValue);
    public static String[] Sort(string key, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public static long SortAndStore(string key, string destination, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public static long Ttl(string key);
    public static KeyType Type(string key);
    public static RedisScan`1<string> Scan(long cursor, string pattern, Nullable`1<long> count);
    public static RedisScan`1<T> Scan(string key, long cursor, string pattern, Nullable`1<long> count);
    public static bool GeoAdd(string key, decimal longitude, decimal latitude, object member);
    public static long GeoAdd(string key, ValueTuple`3[] values);
    public static Nullable`1<decimal> GeoDist(string key, object member1, object member2, GeoUnit unit);
    public static String[] GeoHash(string key, Object[] members);
    public static Nullable`1[] GeoPos(string key, Object[] members);
    public static String[] GeoRadius(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static T[] GeoRadius(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static ValueTuple`2[] GeoRadiusWithDist(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static ValueTuple`2[] GeoRadiusWithDist(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static ValueTuple`4[] GeoRadiusWithDistAndCoord(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static ValueTuple`4[] GeoRadiusWithDistAndCoord(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static String[] GeoRadiusByMember(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static T[] GeoRadiusByMember(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static ValueTuple`2[] GeoRadiusByMemberWithDist(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static ValueTuple`2[] GeoRadiusByMemberWithDist(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static ValueTuple`4[] GeoRadiusByMemberWithDistAndCoord(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static ValueTuple`4[] GeoRadiusByMemberWithDistAndCoord(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static CSRedisClientLock Lock(string name, int timeoutSeconds, bool autoDelay);
    public static Task`1<T> CacheShellAsync(string key, int timeoutSeconds, Func`1<Task`1<T>> getDataAsync);
    public static Task`1<T> CacheShellAsync(string key, string field, int timeoutSeconds, Func`1<Task`1<T>> getDataAsync);
    public static Task`1<ValueTuple`2[]> CacheShellAsync(string key, String[] fields, int timeoutSeconds, Func`2<String[], Task`1<ValueTuple`2[]>> getDataAsync);
    public static Task`1<string> EchoAsync(string nodeKey, string message);
    public static Task`1<string> EchoAsync(string message);
    public static Task`1<bool> PingAsync(string nodeKey);
    public static Task`1<bool> PingAsync();
    public static Task`1<object> EvalAsync(string script, string key, Object[] args);
    public static Task`1<object> EvalSHAAsync(string sha1, string key, Object[] args);
    public static Task`1<Boolean[]> ScriptExistsAsync(String[] sha1);
    public static Task ScriptFlushAsync();
    public static Task ScriptKillAsync();
    public static Task`1<string> ScriptLoadAsync(string script);
    public static Task`1<long> PublishAsync(string channel, string message);
    public static Task`1<long> PublishNoneMessageIdAsync(string channel, string message);
    public static Task`1<String[]> PubSubChannelsAsync(string pattern);
    [ObsoleteAttribute("分区模式下，其他客户端的模糊订阅可能不会返回")]
public static Task`1<long> PubSubNumPatAsync();
    [ObsoleteAttribute("分区模式下，其他客户端的订阅可能不会返回")]
public static Task`1<Dictionary`2<string, long>> PubSubNumSubAsync(String[] channels);
    public static Task`1<bool> PfAddAsync(string key, T[] elements);
    [ObsoleteAttribute("分区模式下，若keys分散在多个分区节点时，将报错")]
public static Task`1<long> PfCountAsync(String[] keys);
    [ObsoleteAttribute("分区模式下，若keys分散在多个分区节点时，将报错")]
public static Task`1<bool> PfMergeAsync(string destKey, String[] sourceKeys);
    public static Task`1<long> ZAddAsync(string key, ValueTuple`2[] scoreMembers);
    public static Task`1<long> ZCardAsync(string key);
    public static Task`1<long> ZCountAsync(string key, decimal min, decimal max);
    public static Task`1<long> ZCountAsync(string key, string min, string max);
    public static Task`1<decimal> ZIncrByAsync(string key, string member, decimal increment);
    public static Task`1<long> ZInterStoreAsync(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    public static Task`1<String[]> ZRangeAsync(string key, long start, long stop);
    public static Task`1<T[]> ZRangeAsync(string key, long start, long stop);
    public static Task`1<ValueTuple`2[]> ZRangeWithScoresAsync(string key, long start, long stop);
    public static Task`1<ValueTuple`2[]> ZRangeWithScoresAsync(string key, long start, long stop);
    public static Task`1<String[]> ZRangeByScoreAsync(string key, decimal min, decimal max, Nullable`1<long> limit, long offset);
    public static Task`1<T[]> ZRangeByScoreAsync(string key, decimal min, decimal max, Nullable`1<long> limit, long offset);
    public static Task`1<String[]> ZRangeByScoreAsync(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static Task`1<T[]> ZRangeByScoreAsync(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static Task`1<ValueTuple`2[]> ZRangeByScoreWithScoresAsync(string key, decimal min, decimal max, Nullable`1<long> limit, long offset);
    public static Task`1<ValueTuple`2[]> ZRangeByScoreWithScoresAsync(string key, decimal min, decimal max, Nullable`1<long> limit, long offset);
    public static Task`1<ValueTuple`2[]> ZRangeByScoreWithScoresAsync(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static Task`1<ValueTuple`2[]> ZRangeByScoreWithScoresAsync(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static Task`1<Nullable`1<long>> ZRankAsync(string key, object member);
    public static Task`1<long> ZRemAsync(string key, T[] member);
    public static Task`1<long> ZRemRangeByRankAsync(string key, long start, long stop);
    public static Task`1<long> ZRemRangeByScoreAsync(string key, decimal min, decimal max);
    public static Task`1<long> ZRemRangeByScoreAsync(string key, string min, string max);
    public static Task`1<String[]> ZRevRangeAsync(string key, long start, long stop);
    public static Task`1<T[]> ZRevRangeAsync(string key, long start, long stop);
    public static Task`1<ValueTuple`2[]> ZRevRangeWithScoresAsync(string key, long start, long stop);
    public static Task`1<ValueTuple`2[]> ZRevRangeWithScoresAsync(string key, long start, long stop);
    public static Task`1<String[]> ZRevRangeByScoreAsync(string key, decimal max, decimal min, Nullable`1<long> limit, Nullable`1<long> offset);
    public static Task`1<T[]> ZRevRangeByScoreAsync(string key, decimal max, decimal min, Nullable`1<long> limit, long offset);
    public static Task`1<String[]> ZRevRangeByScoreAsync(string key, string max, string min, Nullable`1<long> limit, Nullable`1<long> offset);
    public static Task`1<T[]> ZRevRangeByScoreAsync(string key, string max, string min, Nullable`1<long> limit, long offset);
    public static Task`1<ValueTuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, decimal max, decimal min, Nullable`1<long> limit, long offset);
    public static Task`1<ValueTuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, decimal max, decimal min, Nullable`1<long> limit, long offset);
    public static Task`1<ValueTuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, string max, string min, Nullable`1<long> limit, long offset);
    public static Task`1<ValueTuple`2[]> ZRevRangeByScoreWithScoresAsync(string key, string max, string min, Nullable`1<long> limit, long offset);
    public static Task`1<Nullable`1<long>> ZRevRankAsync(string key, object member);
    public static Task`1<Nullable`1<decimal>> ZScoreAsync(string key, object member);
    public static Task`1<long> ZUnionStoreAsync(string destination, Decimal[] weights, RedisAggregate aggregate, String[] keys);
    public static Task`1<RedisScan`1<ValueTuple`2<string, decimal>>> ZScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public static Task`1<RedisScan`1<ValueTuple`2<T, decimal>>> ZScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public static Task`1<String[]> ZRangeByLexAsync(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static Task`1<T[]> ZRangeByLexAsync(string key, string min, string max, Nullable`1<long> limit, long offset);
    public static Task`1<long> ZRemRangeByLexAsync(string key, string min, string max);
    public static Task`1<long> ZLexCountAsync(string key, string min, string max);
    public static Task`1<long> SAddAsync(string key, T[] members);
    public static Task`1<long> SCardAsync(string key);
    public static Task`1<String[]> SDiffAsync(String[] keys);
    public static Task`1<T[]> SDiffAsync(String[] keys);
    public static Task`1<long> SDiffStoreAsync(string destination, String[] keys);
    public static Task`1<String[]> SInterAsync(String[] keys);
    public static Task`1<T[]> SInterAsync(String[] keys);
    public static Task`1<long> SInterStoreAsync(string destination, String[] keys);
    public static Task`1<bool> SIsMemberAsync(string key, object member);
    public static Task`1<String[]> SMembersAsync(string key);
    public static Task`1<T[]> SMembersAsync(string key);
    public static Task`1<bool> SMoveAsync(string source, string destination, object member);
    public static Task`1<string> SPopAsync(string key);
    public static Task`1<T> SPopAsync(string key);
    public static Task`1<String[]> SPopAsync(string key, long count);
    public static Task`1<T[]> SPopAsync(string key, long count);
    public static Task`1<string> SRandMemberAsync(string key);
    public static Task`1<T> SRandMemberAsync(string key);
    public static Task`1<String[]> SRandMembersAsync(string key, int count);
    public static Task`1<T[]> SRandMembersAsync(string key, int count);
    public static Task`1<long> SRemAsync(string key, T[] members);
    public static Task`1<String[]> SUnionAsync(String[] keys);
    public static Task`1<T[]> SUnionAsync(String[] keys);
    public static Task`1<long> SUnionStoreAsync(string destination, String[] keys);
    public static Task`1<RedisScan`1<string>> SScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public static Task`1<RedisScan`1<T>> SScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public static Task`1<string> LIndexAsync(string key, long index);
    public static Task`1<T> LIndexAsync(string key, long index);
    public static Task`1<long> LInsertBeforeAsync(string key, object pivot, object value);
    public static Task`1<long> LInsertAfterAsync(string key, object pivot, object value);
    public static Task`1<long> LLenAsync(string key);
    public static Task`1<string> LPopAsync(string key);
    public static Task`1<T> LPopAsync(string key);
    public static Task`1<long> LPushAsync(string key, T[] value);
    public static Task`1<long> LPushXAsync(string key, object value);
    public static Task`1<String[]> LRangeAsync(string key, long start, long stop);
    public static Task`1<T[]> LRangeAsync(string key, long start, long stop);
    public static Task`1<long> LRemAsync(string key, long count, object value);
    public static Task`1<bool> LSetAsync(string key, long index, object value);
    public static Task`1<bool> LTrimAsync(string key, long start, long stop);
    public static Task`1<string> RPopAsync(string key);
    public static Task`1<T> RPopAsync(string key);
    public static Task`1<string> RPopLPushAsync(string source, string destination);
    public static Task`1<T> RPopLPushAsync(string source, string destination);
    public static Task`1<long> RPushAsync(string key, T[] value);
    public static Task`1<long> RPushXAsync(string key, object value);
    public static Task`1<long> HDelAsync(string key, String[] fields);
    public static Task`1<bool> HExistsAsync(string key, string field);
    public static Task`1<string> HGetAsync(string key, string field);
    public static Task`1<T> HGetAsync(string key, string field);
    public static Task`1<Dictionary`2<string, string>> HGetAllAsync(string key);
    public static Task`1<Dictionary`2<string, T>> HGetAllAsync(string key);
    public static Task`1<long> HIncrByAsync(string key, string field, long value);
    public static Task`1<decimal> HIncrByFloatAsync(string key, string field, decimal value);
    public static Task`1<String[]> HKeysAsync(string key);
    public static Task`1<long> HLenAsync(string key);
    public static Task`1<String[]> HMGetAsync(string key, String[] fields);
    public static Task`1<T[]> HMGetAsync(string key, String[] fields);
    public static Task`1<bool> HMSetAsync(string key, Object[] keyValues);
    public static Task`1<bool> HSetAsync(string key, string field, object value);
    public static Task`1<bool> HSetNxAsync(string key, string field, object value);
    public static Task`1<String[]> HValsAsync(string key);
    public static Task`1<T[]> HValsAsync(string key);
    public static Task`1<RedisScan`1<ValueTuple`2<string, string>>> HScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public static Task`1<RedisScan`1<ValueTuple`2<string, T>>> HScanAsync(string key, long cursor, string pattern, Nullable`1<long> count);
    public static Task`1<ValueTuple`2[]> ZPopMaxAsync(string key, long count);
    public static Task`1<ValueTuple`2[]> ZPopMaxAsync(string key, long count);
    public static Task`1<ValueTuple`2[]> ZPopMinAsync(string key, long count);
    public static Task`1<ValueTuple`2[]> ZPopMinAsync(string key, long count);
    public static Task`1<long> AppendAsync(string key, object value);
    public static Task`1<long> BitCountAsync(string key, long start, long end);
    public static Task`1<long> BitOpAsync(RedisBitOp op, string destKey, String[] keys);
    public static Task`1<long> BitPosAsync(string key, bool bit, Nullable`1<long> start, Nullable`1<long> end);
    public static Task`1<string> GetAsync(string key);
    public static Task`1<T> GetAsync(string key);
    public static Task`1<bool> GetBitAsync(string key, UInt32 offset);
    public static Task`1<string> GetRangeAsync(string key, long start, long end);
    public static Task`1<T> GetRangeAsync(string key, long start, long end);
    public static Task`1<string> GetSetAsync(string key, object value);
    public static Task`1<T> GetSetAsync(string key, object value);
    public static Task`1<long> IncrByAsync(string key, long value);
    public static Task`1<decimal> IncrByFloatAsync(string key, decimal value);
    public static Task`1<String[]> MGetAsync(String[] keys);
    public static Task`1<T[]> MGetAsync(String[] keys);
    public static Task`1<bool> MSetAsync(Object[] keyValues);
    public static Task`1<bool> MSetNxAsync(Object[] keyValues);
    public static Task`1<bool> SetAsync(string key, object value, int expireSeconds, Nullable`1<RedisExistence> exists);
    public static Task`1<bool> SetAsync(string key, object value, TimeSpan expire, Nullable`1<RedisExistence> exists);
    public static Task`1<bool> SetBitAsync(string key, UInt32 offset, bool value);
    public static Task`1<bool> SetNxAsync(string key, object value);
    public static Task`1<long> SetRangeAsync(string key, UInt32 offset, object value);
    public static Task`1<long> StrLenAsync(string key);
    public static Task`1<long> DelAsync(String[] key);
    public static Task`1<Byte[]> DumpAsync(string key);
    public static Task`1<bool> ExistsAsync(string key);
    public static Task`1<long> ExistsAsync(String[] keys);
    public static Task`1<bool> ExpireAsync(string key, int seconds);
    public static Task`1<bool> ExpireAsync(string key, TimeSpan expire);
    public static Task`1<bool> ExpireAtAsync(string key, DateTime expire);
    public static Task`1<String[]> KeysAsync(string pattern);
    public static Task`1<bool> MoveAsync(string key, int database);
    public static Task`1<string> ObjectEncodingAsync(string key);
    public static Task`1<Nullable`1<long>> ObjectRefCountAsync(string key);
    public static Task`1<Nullable`1<long>> ObjectIdleTimeAsync(string key);
    public static Task`1<bool> PersistAsync(string key);
    public static Task`1<bool> PExpireAsync(string key, int milliseconds);
    public static Task`1<bool> PExpireAsync(string key, TimeSpan expire);
    public static Task`1<bool> PExpireAtAsync(string key, DateTime expire);
    public static Task`1<long> PTtlAsync(string key);
    public static Task`1<string> RandomKeyAsync();
    public static Task`1<bool> RenameAsync(string key, string newKey);
    public static Task`1<bool> RenameNxAsync(string key, string newKey);
    public static Task`1<bool> RestoreAsync(string key, Byte[] serializedValue);
    public static Task`1<bool> RestoreAsync(string key, long ttlMilliseconds, Byte[] serializedValue);
    public static Task`1<String[]> SortAsync(string key, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public static Task`1<long> SortAndStoreAsync(string key, string destination, Nullable`1<long> count, long offset, string by, Nullable`1<RedisSortDir> dir, Nullable`1<bool> isAlpha, String[] get);
    public static Task`1<long> TtlAsync(string key);
    public static Task`1<KeyType> TypeAsync(string key);
    public static Task`1<RedisScan`1<string>> ScanAsync(long cursor, string pattern, Nullable`1<long> count);
    public static Task`1<RedisScan`1<T>> ScanAsync(long cursor, string pattern, Nullable`1<long> count);
    public static Task`1<bool> GeoAddAsync(string key, decimal longitude, decimal latitude, object member);
    public static Task`1<long> GeoAddAsync(string key, ValueTuple`3[] values);
    public static Task`1<Nullable`1<decimal>> GeoDistAsync(string key, object member1, object member2, GeoUnit unit);
    public static Task`1<String[]> GeoHashAsync(string key, Object[] members);
    public static Task`1<Nullable`1[]> GeoPosAsync(string key, Object[] members);
    public static Task`1<String[]> GeoRadiusAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<T[]> GeoRadiusAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<ValueTuple`2[]> GeoRadiusWithDistAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<ValueTuple`2[]> GeoRadiusWithDistAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<ValueTuple`4[]> GeoRadiusWithDistAndCoordAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<ValueTuple`4[]> GeoRadiusWithDistAndCoordAsync(string key, decimal longitude, decimal latitude, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<String[]> GeoRadiusByMemberAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<T[]> GeoRadiusByMemberAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<ValueTuple`2[]> GeoRadiusByMemberWithDistAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<ValueTuple`2[]> GeoRadiusByMemberWithDistAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<ValueTuple`4[]> GeoRadiusByMemberWithDistAndCoordAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
    public static Task`1<ValueTuple`4[]> GeoRadiusByMemberWithDistAndCoordAsync(string key, object member, decimal radius, GeoUnit unit, Nullable`1<long> count, Nullable`1<GeoOrderBy> sorting);
}
