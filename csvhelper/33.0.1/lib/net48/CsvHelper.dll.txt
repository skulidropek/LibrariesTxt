[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class CsvHelper.ArrayHelper : object {
    public static void Trim(Char[] buffer, Int32& start, Int32& length, Char[] trimChars);
    public static bool Contains(Char[] array, Char& c);
}
[ExtensionAttribute]
internal static class CsvHelper.AsyncExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ValueTask DisposeAsync(TextWriter textWriter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.BadDataException : CsvHelperException {
    public string Field;
    public string RawRecord;
    public BadDataException(string field, string rawRecord, CsvContext context);
    public BadDataException(string field, string rawRecord, CsvContext context, string message);
    public BadDataException(string field, string rawRecord, CsvContext context, string message, Exception innerException);
}
public class CsvHelper.BadDataFound : MulticastDelegate {
    public BadDataFound(object object, IntPtr method);
    public virtual void Invoke(BadDataFoundArgs args);
    public virtual IAsyncResult BeginInvoke(BadDataFoundArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.BadDataFoundArgs : ValueType {
    public string Field;
    public string RawRecord;
    public CsvContext Context;
    public BadDataFoundArgs(string field, string rawRecord, CsvContext context);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.AllowCommentsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <AllowComments>k__BackingField;
    public bool AllowComments { get; private set; }
    public AllowCommentsAttribute(bool allowComments);
    [CompilerGeneratedAttribute]
public bool get_AllowComments();
    [CompilerGeneratedAttribute]
private void set_AllowComments(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <FalseValues>k__BackingField;
    public String[] FalseValues { get; private set; }
    public BooleanFalseValuesAttribute(string falseValue);
    public BooleanFalseValuesAttribute(String[] falseValues);
    [CompilerGeneratedAttribute]
public String[] get_FalseValues();
    [CompilerGeneratedAttribute]
private void set_FalseValues(String[] value);
    public sealed virtual void ApplyTo(MemberMap memberMap);
    public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <TrueValues>k__BackingField;
    public String[] TrueValues { get; private set; }
    public BooleanTrueValuesAttribute(string trueValue);
    public BooleanTrueValuesAttribute(String[] trueValues);
    [CompilerGeneratedAttribute]
public String[] get_TrueValues();
    [CompilerGeneratedAttribute]
private void set_TrueValues(String[] value);
    public sealed virtual void ApplyTo(MemberMap memberMap);
    public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.BufferSizeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    public int BufferSize { get; private set; }
    public BufferSizeAttribute(int bufferSize);
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
private void set_BufferSize(int value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.CacheFieldsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CacheFields>k__BackingField;
    public bool CacheFields { get; private set; }
    public CacheFieldsAttribute(bool cacheFields);
    [CompilerGeneratedAttribute]
public bool get_CacheFields();
    [CompilerGeneratedAttribute]
private void set_CacheFields(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.CommentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private char <Comment>k__BackingField;
    public char Comment { get; private set; }
    public CommentAttribute(char comment);
    [CompilerGeneratedAttribute]
public char get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(char value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.ConstantAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <Constant>k__BackingField;
    public object Constant { get; private set; }
    public ConstantAttribute(object constant);
    [CompilerGeneratedAttribute]
public object get_Constant();
    [CompilerGeneratedAttribute]
private void set_Constant(object value);
    public sealed virtual void ApplyTo(MemberMap memberMap);
    public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.CountBytesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CountBytes>k__BackingField;
    public bool CountBytes { get; private set; }
    public CountBytesAttribute(bool countBytes);
    [CompilerGeneratedAttribute]
public bool get_CountBytes();
    [CompilerGeneratedAttribute]
private void set_CountBytes(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2436")]
public class CsvHelper.Configuration.Attributes.CultureInfoAttribute : Attribute {
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    public CultureInfo CultureInfo { get; private set; }
    public CultureInfoAttribute(string name);
    [CompilerGeneratedAttribute]
public CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
private void set_CultureInfo(CultureInfo value);
    public sealed virtual void ApplyTo(CsvConfiguration configuration);
    public sealed virtual void ApplyTo(MemberMap memberMap);
    public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.DateTimeStylesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DateTimeStyles <DateTimeStyles>k__BackingField;
    public DateTimeStyles DateTimeStyles { get; private set; }
    public DateTimeStylesAttribute(DateTimeStyles dateTimeStyles);
    [CompilerGeneratedAttribute]
public DateTimeStyles get_DateTimeStyles();
    [CompilerGeneratedAttribute]
private void set_DateTimeStyles(DateTimeStyles value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(MemberMap memberMap);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.DefaultAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <Default>k__BackingField;
    public object Default { get; private set; }
    public DefaultAttribute(object defaultValue);
    [CompilerGeneratedAttribute]
public object get_Default();
    [CompilerGeneratedAttribute]
private void set_Default(object value);
    public sealed virtual void ApplyTo(MemberMap memberMap);
    public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.DelimiterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    public string Delimiter { get; private set; }
    public DelimiterAttribute(string delimiter);
    [CompilerGeneratedAttribute]
public string get_Delimiter();
    [CompilerGeneratedAttribute]
private void set_Delimiter(string value);
    public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.DetectColumnCountChangesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <DetectColumnCountChanges>k__BackingField;
    public bool DetectColumnCountChanges { get; private set; }
    public DetectColumnCountChangesAttribute(bool detectColumnCountChanges);
    [CompilerGeneratedAttribute]
public bool get_DetectColumnCountChanges();
    [CompilerGeneratedAttribute]
private void set_DetectColumnCountChanges(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.DetectDelimiterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <DetectDelimiter>k__BackingField;
    public bool DetectDelimiter { get; private set; }
    public DetectDelimiterAttribute(bool detectDelimiter);
    [CompilerGeneratedAttribute]
public bool get_DetectDelimiter();
    [CompilerGeneratedAttribute]
private void set_DetectDelimiter(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.DetectDelimiterValuesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <DetectDelimiterValues>k__BackingField;
    public String[] DetectDelimiterValues { get; private set; }
    public DetectDelimiterValuesAttribute(string detectDelimiterValues);
    [CompilerGeneratedAttribute]
public String[] get_DetectDelimiterValues();
    [CompilerGeneratedAttribute]
private void set_DetectDelimiterValues(String[] value);
    public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.EncodingAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; private set; }
    public EncodingAttribute(string name);
    public EncodingAttribute(int codepage);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.EnumIgnoreCaseAttribute : Attribute {
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(MemberMap memberMap);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(MemberReferenceMap referenceMap);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.EscapeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private char <Escape>k__BackingField;
    public char Escape { get; private set; }
    public EscapeAttribute(char escape);
    [CompilerGeneratedAttribute]
public char get_Escape();
    [CompilerGeneratedAttribute]
private void set_Escape(char value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.ExceptionMessagesContainRawDataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ExceptionMessagesContainRawData>k__BackingField;
    public bool ExceptionMessagesContainRawData { get; private set; }
    public ExceptionMessagesContainRawDataAttribute(bool exceptionMessagesContainRawData);
    [CompilerGeneratedAttribute]
public bool get_ExceptionMessagesContainRawData();
    [CompilerGeneratedAttribute]
private void set_ExceptionMessagesContainRawData(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.FormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Formats>k__BackingField;
    public String[] Formats { get; private set; }
    public FormatAttribute(string format);
    public FormatAttribute(String[] formats);
    [CompilerGeneratedAttribute]
public String[] get_Formats();
    [CompilerGeneratedAttribute]
private void set_Formats(String[] value);
    public sealed virtual void ApplyTo(MemberMap memberMap);
    public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.HasHeaderRecordAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <HasHeaderRecord>k__BackingField;
    public bool HasHeaderRecord { get; private set; }
    public HasHeaderRecordAttribute(bool hasHeaderRecord);
    [CompilerGeneratedAttribute]
public bool get_HasHeaderRecord();
    [CompilerGeneratedAttribute]
private void set_HasHeaderRecord(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.HeaderPrefixAttribute : Attribute {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherit>k__BackingField;
    [NullableAttribute("2")]
public string Prefix { get; private set; }
    public bool Inherit { get; private set; }
    public HeaderPrefixAttribute(string prefix);
    public HeaderPrefixAttribute(bool inherit);
    public HeaderPrefixAttribute(string prefix, bool inherit);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Prefix();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public bool get_Inherit();
    [CompilerGeneratedAttribute]
private void set_Inherit(bool value);
    public sealed virtual void ApplyTo(MemberReferenceMap referenceMap);
    public sealed virtual void ApplyTo(ParameterReferenceMap referenceMap);
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.Attributes.IClassMapper {
    public abstract virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.IgnoreAttribute : Attribute {
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(MemberMap memberMap);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(MemberReferenceMap referenceMap);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.IgnoreBaseAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.IgnoreBlankLinesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IgnoreBlankLines>k__BackingField;
    public bool IgnoreBlankLines { get; private set; }
    public IgnoreBlankLinesAttribute(bool ignoreBlankLines);
    [CompilerGeneratedAttribute]
public bool get_IgnoreBlankLines();
    [CompilerGeneratedAttribute]
private void set_IgnoreBlankLines(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.IgnoreReferencesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IgnoreReferences>k__BackingField;
    public bool IgnoreReferences { get; private set; }
    public IgnoreReferencesAttribute(bool ignoreReferences);
    [CompilerGeneratedAttribute]
public bool get_IgnoreReferences();
    [CompilerGeneratedAttribute]
private void set_IgnoreReferences(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.Attributes.IMemberMapper {
    public abstract virtual void ApplyTo(MemberMap memberMap);
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.Attributes.IMemberReferenceMapper {
    public abstract virtual void ApplyTo(MemberReferenceMap referenceMap);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.IncludePrivateMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IncludePrivateMembers>k__BackingField;
    public bool IncludePrivateMembers { get; private set; }
    public IncludePrivateMembersAttribute(bool includePrivateMembers);
    [CompilerGeneratedAttribute]
public bool get_IncludePrivateMembers();
    [CompilerGeneratedAttribute]
private void set_IncludePrivateMembers(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.IndexAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndexEnd>k__BackingField;
    public int Index { get; private set; }
    public int IndexEnd { get; private set; }
    public IndexAttribute(int index, int indexEnd);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_IndexEnd();
    [CompilerGeneratedAttribute]
private void set_IndexEnd(int value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(MemberMap memberMap);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.InjectionCharactersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Char[] <InjectionCharacters>k__BackingField;
    public Char[] InjectionCharacters { get; private set; }
    public InjectionCharactersAttribute(string injectionCharacters);
    [CompilerGeneratedAttribute]
public Char[] get_InjectionCharacters();
    [CompilerGeneratedAttribute]
private void set_InjectionCharacters(Char[] value);
    public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.InjectionEscapeCharacterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private char <InjectionEscapeCharacter>k__BackingField;
    public char InjectionEscapeCharacter { get; private set; }
    public InjectionEscapeCharacterAttribute(char injectionEscapeCharacter);
    [CompilerGeneratedAttribute]
public char get_InjectionEscapeCharacter();
    [CompilerGeneratedAttribute]
private void set_InjectionEscapeCharacter(char value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.InjectionOptionsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private InjectionOptions <InjectionOptions>k__BackingField;
    public InjectionOptions InjectionOptions { get; private set; }
    public InjectionOptionsAttribute(InjectionOptions injectionOptions);
    [CompilerGeneratedAttribute]
public InjectionOptions get_InjectionOptions();
    [CompilerGeneratedAttribute]
private void set_InjectionOptions(InjectionOptions value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.Attributes.IParameterMapper {
    public abstract virtual void ApplyTo(ParameterMap parameterMap);
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.Attributes.IParameterReferenceMapper {
    public abstract virtual void ApplyTo(ParameterReferenceMap referenceMap);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.LineBreakInQuotedFieldIsBadDataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <LineBreakInQuotedFieldIsBadData>k__BackingField;
    public bool LineBreakInQuotedFieldIsBadData { get; private set; }
    public LineBreakInQuotedFieldIsBadDataAttribute(bool lineBreakInQuotedFieldIsBadData);
    [CompilerGeneratedAttribute]
public bool get_LineBreakInQuotedFieldIsBadData();
    [CompilerGeneratedAttribute]
private void set_LineBreakInQuotedFieldIsBadData(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.MaxFieldSizeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private double <MaxFieldSize>k__BackingField;
    public double MaxFieldSize { get; private set; }
    public MaxFieldSizeAttribute(double maxFieldSize);
    [CompilerGeneratedAttribute]
public double get_MaxFieldSize();
    [CompilerGeneratedAttribute]
private void set_MaxFieldSize(double value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.MemberTypesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private MemberTypes <MemberTypes>k__BackingField;
    public MemberTypes MemberTypes { get; private set; }
    public MemberTypesAttribute(MemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public MemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
private void set_MemberTypes(MemberTypes value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.ModeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private CsvMode <Mode>k__BackingField;
    public CsvMode Mode { get; private set; }
    public ModeAttribute(CsvMode mode);
    [CompilerGeneratedAttribute]
public CsvMode get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(CsvMode value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.NameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    public String[] Names { get; private set; }
    public NameAttribute(string name);
    public NameAttribute(String[] names);
    [CompilerGeneratedAttribute]
public String[] get_Names();
    [CompilerGeneratedAttribute]
private void set_Names(String[] value);
    public sealed virtual void ApplyTo(MemberMap memberMap);
    public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.NameIndexAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <NameIndex>k__BackingField;
    public int NameIndex { get; private set; }
    public NameIndexAttribute(int nameIndex);
    [CompilerGeneratedAttribute]
public int get_NameIndex();
    [CompilerGeneratedAttribute]
private void set_NameIndex(int value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(MemberMap memberMap);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.NewLineAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <NewLine>k__BackingField;
    public string NewLine { get; private set; }
    public NewLineAttribute(string newLine);
    [CompilerGeneratedAttribute]
public string get_NewLine();
    [CompilerGeneratedAttribute]
private void set_NewLine(string value);
    public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.NullValuesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <NullValues>k__BackingField;
    public String[] NullValues { get; private set; }
    public NullValuesAttribute(string nullValue);
    public NullValuesAttribute(String[] nullValues);
    [CompilerGeneratedAttribute]
public String[] get_NullValues();
    [CompilerGeneratedAttribute]
private void set_NullValues(String[] value);
    public sealed virtual void ApplyTo(MemberMap memberMap);
    public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.NumberStylesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private NumberStyles <NumberStyles>k__BackingField;
    public NumberStyles NumberStyles { get; private set; }
    public NumberStylesAttribute(NumberStyles numberStyles);
    [CompilerGeneratedAttribute]
public NumberStyles get_NumberStyles();
    [CompilerGeneratedAttribute]
private void set_NumberStyles(NumberStyles value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(MemberMap memberMap);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.OptionalAttribute : Attribute {
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(MemberMap memberMap);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.ProcessFieldBufferSizeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <ProcessFieldBufferSize>k__BackingField;
    public int ProcessFieldBufferSize { get; private set; }
    public ProcessFieldBufferSizeAttribute(int processFieldBufferSize);
    [CompilerGeneratedAttribute]
public int get_ProcessFieldBufferSize();
    [CompilerGeneratedAttribute]
private void set_ProcessFieldBufferSize(int value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.QuoteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private char <Quote>k__BackingField;
    public char Quote { get; private set; }
    public QuoteAttribute(char quote);
    [CompilerGeneratedAttribute]
public char get_Quote();
    [CompilerGeneratedAttribute]
private void set_Quote(char value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.TrimOptionsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private TrimOptions <TrimOptions>k__BackingField;
    public TrimOptions TrimOptions { get; private set; }
    public TrimOptionsAttribute(TrimOptions trimOptions);
    [CompilerGeneratedAttribute]
public TrimOptions get_TrimOptions();
    [CompilerGeneratedAttribute]
private void set_TrimOptions(TrimOptions value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class CsvHelper.Configuration.Attributes.TypeConverterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ITypeConverter <TypeConverter>k__BackingField;
    public ITypeConverter TypeConverter { get; private set; }
    public TypeConverterAttribute(Type typeConverterType);
    public TypeConverterAttribute(Type typeConverterType, Object[] constructorArgs);
    [CompilerGeneratedAttribute]
public ITypeConverter get_TypeConverter();
    [CompilerGeneratedAttribute]
private void set_TypeConverter(ITypeConverter value);
    public sealed virtual void ApplyTo(MemberMap memberMap);
    public sealed virtual void ApplyTo(ParameterMap parameterMap);
}
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.UseNewObjectForNullReferenceMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <UseNewObjectForNullReferenceMembers>k__BackingField;
    public bool UseNewObjectForNullReferenceMembers { get; private set; }
    public UseNewObjectForNullReferenceMembersAttribute(bool useNewObjectForNullReferenceMembers);
    [CompilerGeneratedAttribute]
public bool get_UseNewObjectForNullReferenceMembers();
    [CompilerGeneratedAttribute]
private void set_UseNewObjectForNullReferenceMembers(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class CsvHelper.Configuration.Attributes.WhiteSpaceCharsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Char[] <WhiteSpaceChars>k__BackingField;
    public Char[] WhiteSpaceChars { get; private set; }
    public WhiteSpaceCharsAttribute(string whiteSpaceChars);
    [CompilerGeneratedAttribute]
public Char[] get_WhiteSpaceChars();
    [CompilerGeneratedAttribute]
private void set_WhiteSpaceChars(Char[] value);
    public sealed virtual void ApplyTo(CsvConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class CsvHelper.Configuration.ClassMap : object {
    private static List`1<Type> enumerableConverters;
    [CompilerGeneratedAttribute]
private Type <ClassType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ParameterMap> <ParameterMaps>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberMapCollection <MemberMaps>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberReferenceMapCollection <ReferenceMaps>k__BackingField;
    public Type ClassType { get; private set; }
    public List`1<ParameterMap> ParameterMaps { get; }
    public MemberMapCollection MemberMaps { get; }
    public MemberReferenceMapCollection ReferenceMaps { get; }
    internal ClassMap(Type classType);
    private static ClassMap();
    [CompilerGeneratedAttribute]
public virtual Type get_ClassType();
    [CompilerGeneratedAttribute]
private void set_ClassType(Type value);
    [CompilerGeneratedAttribute]
public virtual List`1<ParameterMap> get_ParameterMaps();
    [CompilerGeneratedAttribute]
public virtual MemberMapCollection get_MemberMaps();
    [CompilerGeneratedAttribute]
public virtual MemberReferenceMapCollection get_ReferenceMaps();
    public MemberMap Map(Type classType, MemberInfo member, bool useExistingMap);
    public virtual MemberMap`2<object, object> Map();
    public virtual MemberReferenceMap References(Type classMapType, MemberInfo member, Object[] constructorArgs);
    public virtual ParameterMap Parameter(string name);
    public virtual ParameterMap Parameter(Func`1<ConstructorInfo> getConstructor, string name);
    public virtual ParameterMap Parameter(ConstructorInfo constructor, ParameterInfo parameter);
    public virtual void AutoMap(CultureInfo culture);
    public virtual void AutoMap(CsvConfiguration configuration);
    public virtual void AutoMap(CsvContext context);
    public virtual int GetMaxIndex(bool isParameter);
    public virtual int ReIndex(int indexStart);
    protected virtual void AutoMapMembers(ClassMap map, CsvContext context, LinkedList`1<Type> mapParents, int indexStart);
    protected virtual void AutoMapConstructorParameters(ClassMap map, CsvContext context, LinkedList`1<Type> mapParents, int indexStart);
    protected virtual bool CheckForCircularReference(Type type, LinkedList`1<Type> mapParents);
    protected virtual Type GetGenericType();
    protected virtual void ApplyAttributes(ParameterMap parameterMap);
    protected virtual void ApplyAttributes(ParameterReferenceMap referenceMap);
    protected virtual void ApplyAttributes(MemberMap memberMap);
    protected virtual void ApplyAttributes(MemberReferenceMap referenceMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class CsvHelper.Configuration.ClassMap`1 : ClassMap {
    public virtual MemberMap`2<TClass, TMember> Map(Expression`1<Func`2<TClass, TMember>> expression, bool useExistingMap);
    public virtual MemberMap Map(Expression`1<Func`2<T, object>> expression, bool useExistingMap);
    public virtual MemberReferenceMap References(Expression`1<Func`2<TClass, object>> expression, Object[] constructorArgs);
    [NullableContextAttribute("2")]
private ValueTuple`2<ClassMap, MemberInfo> GetMemberMap(Expression`1<Func`2<TModel, TProperty>> expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class CsvHelper.Configuration.ClassMapBuilder`1 : object {
    private ClassMap`1<TClass> map;
    public sealed virtual IHasMapOptions`2<TClass, TMember> Map(Expression`1<Func`2<TClass, TMember>> expression, bool useExistingMap);
    public sealed virtual ClassMap`1<TClass> Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class CsvHelper.Configuration.ClassMapCollection : object {
    private Dictionary`2<Type, ClassMap> data;
    private CsvContext context;
    [NullableAttribute("2")]
public ClassMap Item { get; }
    public ClassMapCollection(CsvContext context);
    public virtual ClassMap get_Item(Type type);
    [NullableContextAttribute("2")]
public virtual ClassMap`1<T> Find();
    internal virtual void Add(ClassMap map);
    internal virtual void Remove(Type classMapType);
    internal virtual void Clear();
    private Type GetGenericCsvClassMapType(Type type);
    private void SetMapDefaults(ClassMap map);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Configuration.ConfigurationException : CsvHelperException {
    public ConfigurationException(string message);
    public ConfigurationException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class CsvHelper.Configuration.ConfigurationFunctions : object {
    private static Char[] lineEndingChars;
    private static ConfigurationFunctions();
    public static void HeaderValidated(HeaderValidatedArgs args);
    public static void MissingFieldFound(MissingFieldFoundArgs args);
    public static void BadDataFound(BadDataFoundArgs args);
    public static bool ReadingExceptionOccurred(ReadingExceptionOccurredArgs args);
    public static bool ShouldQuote(ShouldQuoteArgs args);
    public static string PrepareHeaderForMatch(PrepareHeaderForMatchArgs args);
    public static bool ShouldUseConstructorParameters(ShouldUseConstructorParametersArgs args);
    public static ConstructorInfo GetConstructor(GetConstructorArgs args);
    public static string GetDynamicPropertyName(GetDynamicPropertyNameArgs args);
    public static string GetDelimiter(GetDelimiterArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Configuration.CsvConfiguration : object {
    private string newLine;
    [CompilerGeneratedAttribute]
private bool <AllowComments>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BadDataFound <BadDataFound>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheFields>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CountBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DetectDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private GetDelimiter <GetDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DetectDelimiterValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DetectColumnCountChanges>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IComparer`1<string> <DynamicPropertySort>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Escape>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExceptionMessagesContainRawData>k__BackingField;
    [CompilerGeneratedAttribute]
private GetConstructor <GetConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private GetDynamicPropertyName <GetDynamicPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasHeaderRecord>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private HeaderValidated <HeaderValidated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreBlankLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePrivateMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <InjectionCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private char <InjectionEscapeCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private InjectionOptions <InjectionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNewLineSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LineBreakInQuotedFieldIsBadData>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxFieldSize>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberTypes <MemberTypes>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MissingFieldFound <MissingFieldFound>k__BackingField;
    [CompilerGeneratedAttribute]
private CsvMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private PrepareHeaderForMatch <PrepareHeaderForMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessFieldBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Quote>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ReadingExceptionOccurred <ReadingExceptionOccurred>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ReferenceHeaderPrefix <ReferenceHeaderPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private ShouldQuote <ShouldQuote>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ShouldSkipRecord <ShouldSkipRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private ShouldUseConstructorParameters <ShouldUseConstructorParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TrimOptions <TrimOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNewObjectForNullReferenceMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <WhiteSpaceChars>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool AllowComments { get; public set; }
    [NullableAttribute("2")]
public BadDataFound BadDataFound { get; public set; }
    public int BufferSize { get; public set; }
    public bool CacheFields { get; public set; }
    public char Comment { get; public set; }
    public bool CountBytes { get; public set; }
    public CultureInfo CultureInfo { get; protected internal set; }
    public string Delimiter { get; public set; }
    public bool DetectDelimiter { get; public set; }
    public GetDelimiter GetDelimiter { get; public set; }
    public String[] DetectDelimiterValues { get; public set; }
    public bool DetectColumnCountChanges { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IComparer`1<string> DynamicPropertySort { get; public set; }
    public Encoding Encoding { get; public set; }
    public char Escape { get; public set; }
    public bool ExceptionMessagesContainRawData { get; public set; }
    public GetConstructor GetConstructor { get; public set; }
    public GetDynamicPropertyName GetDynamicPropertyName { get; public set; }
    public bool HasHeaderRecord { get; public set; }
    [NullableAttribute("2")]
public HeaderValidated HeaderValidated { get; public set; }
    public bool IgnoreBlankLines { get; public set; }
    public bool IgnoreReferences { get; public set; }
    public bool IncludePrivateMembers { get; public set; }
    public Char[] InjectionCharacters { get; public set; }
    public char InjectionEscapeCharacter { get; public set; }
    public InjectionOptions InjectionOptions { get; public set; }
    public bool IsNewLineSet { get; private set; }
    public bool LineBreakInQuotedFieldIsBadData { get; public set; }
    public double MaxFieldSize { get; public set; }
    public MemberTypes MemberTypes { get; public set; }
    [NullableAttribute("2")]
public MissingFieldFound MissingFieldFound { get; public set; }
    public CsvMode Mode { get; public set; }
    public string NewLine { get; public set; }
    public PrepareHeaderForMatch PrepareHeaderForMatch { get; public set; }
    public int ProcessFieldBufferSize { get; public set; }
    public char Quote { get; public set; }
    [NullableAttribute("2")]
public ReadingExceptionOccurred ReadingExceptionOccurred { get; public set; }
    [NullableAttribute("2")]
public ReferenceHeaderPrefix ReferenceHeaderPrefix { get; public set; }
    public ShouldQuote ShouldQuote { get; public set; }
    [NullableAttribute("2")]
public ShouldSkipRecord ShouldSkipRecord { get; public set; }
    public ShouldUseConstructorParameters ShouldUseConstructorParameters { get; public set; }
    public TrimOptions TrimOptions { get; public set; }
    public bool UseNewObjectForNullReferenceMembers { get; public set; }
    public Char[] WhiteSpaceChars { get; public set; }
    public CsvConfiguration(CultureInfo cultureInfo);
    [ObsoleteAttribute("This constructor is deprecated and will be removed in the next major release. Use CsvConfiguration(CultureInfo) instead.", "False")]
public CsvConfiguration(CultureInfo cultureInfo, Type attributesType);
    [CompilerGeneratedAttribute]
protected CsvConfiguration(CsvConfiguration original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual bool get_AllowComments();
    [CompilerGeneratedAttribute]
public virtual void set_AllowComments(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual BadDataFound get_BadDataFound();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_BadDataFound(BadDataFound value);
    [CompilerGeneratedAttribute]
public virtual int get_BufferSize();
    [CompilerGeneratedAttribute]
public virtual void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_CacheFields();
    [CompilerGeneratedAttribute]
public virtual void set_CacheFields(bool value);
    [CompilerGeneratedAttribute]
public virtual char get_Comment();
    [CompilerGeneratedAttribute]
public virtual void set_Comment(char value);
    [CompilerGeneratedAttribute]
public virtual bool get_CountBytes();
    [CompilerGeneratedAttribute]
public virtual void set_CountBytes(bool value);
    [CompilerGeneratedAttribute]
public virtual CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
protected internal virtual void set_CultureInfo(CultureInfo value);
    [CompilerGeneratedAttribute]
public virtual string get_Delimiter();
    [CompilerGeneratedAttribute]
public virtual void set_Delimiter(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_DetectDelimiter();
    [CompilerGeneratedAttribute]
public virtual void set_DetectDelimiter(bool value);
    [CompilerGeneratedAttribute]
public virtual GetDelimiter get_GetDelimiter();
    [CompilerGeneratedAttribute]
public virtual void set_GetDelimiter(GetDelimiter value);
    [CompilerGeneratedAttribute]
public virtual String[] get_DetectDelimiterValues();
    [CompilerGeneratedAttribute]
public virtual void set_DetectDelimiterValues(String[] value);
    [CompilerGeneratedAttribute]
public virtual bool get_DetectColumnCountChanges();
    [CompilerGeneratedAttribute]
public virtual void set_DetectColumnCountChanges(bool value);
    [CompilerGeneratedAttribute]
public virtual IComparer`1<string> get_DynamicPropertySort();
    [CompilerGeneratedAttribute]
public virtual void set_DynamicPropertySort(IComparer`1<string> value);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public virtual void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public virtual char get_Escape();
    [CompilerGeneratedAttribute]
public virtual void set_Escape(char value);
    [CompilerGeneratedAttribute]
public virtual bool get_ExceptionMessagesContainRawData();
    [CompilerGeneratedAttribute]
public virtual void set_ExceptionMessagesContainRawData(bool value);
    [CompilerGeneratedAttribute]
public virtual GetConstructor get_GetConstructor();
    [CompilerGeneratedAttribute]
public virtual void set_GetConstructor(GetConstructor value);
    [CompilerGeneratedAttribute]
public virtual GetDynamicPropertyName get_GetDynamicPropertyName();
    [CompilerGeneratedAttribute]
public virtual void set_GetDynamicPropertyName(GetDynamicPropertyName value);
    [CompilerGeneratedAttribute]
public virtual bool get_HasHeaderRecord();
    [CompilerGeneratedAttribute]
public virtual void set_HasHeaderRecord(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual HeaderValidated get_HeaderValidated();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_HeaderValidated(HeaderValidated value);
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoreBlankLines();
    [CompilerGeneratedAttribute]
public virtual void set_IgnoreBlankLines(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoreReferences();
    [CompilerGeneratedAttribute]
public virtual void set_IgnoreReferences(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IncludePrivateMembers();
    [CompilerGeneratedAttribute]
public virtual void set_IncludePrivateMembers(bool value);
    [CompilerGeneratedAttribute]
public virtual Char[] get_InjectionCharacters();
    [CompilerGeneratedAttribute]
public virtual void set_InjectionCharacters(Char[] value);
    [CompilerGeneratedAttribute]
public virtual char get_InjectionEscapeCharacter();
    [CompilerGeneratedAttribute]
public virtual void set_InjectionEscapeCharacter(char value);
    [CompilerGeneratedAttribute]
public virtual InjectionOptions get_InjectionOptions();
    [CompilerGeneratedAttribute]
public virtual void set_InjectionOptions(InjectionOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNewLineSet();
    [CompilerGeneratedAttribute]
private void set_IsNewLineSet(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_LineBreakInQuotedFieldIsBadData();
    [CompilerGeneratedAttribute]
public virtual void set_LineBreakInQuotedFieldIsBadData(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_MaxFieldSize();
    [CompilerGeneratedAttribute]
public void set_MaxFieldSize(double value);
    [CompilerGeneratedAttribute]
public virtual MemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public virtual void set_MemberTypes(MemberTypes value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual MissingFieldFound get_MissingFieldFound();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_MissingFieldFound(MissingFieldFound value);
    [CompilerGeneratedAttribute]
public virtual CsvMode get_Mode();
    [CompilerGeneratedAttribute]
public virtual void set_Mode(CsvMode value);
    public virtual string get_NewLine();
    public virtual void set_NewLine(string value);
    [CompilerGeneratedAttribute]
public virtual PrepareHeaderForMatch get_PrepareHeaderForMatch();
    [CompilerGeneratedAttribute]
public virtual void set_PrepareHeaderForMatch(PrepareHeaderForMatch value);
    [CompilerGeneratedAttribute]
public virtual int get_ProcessFieldBufferSize();
    [CompilerGeneratedAttribute]
public virtual void set_ProcessFieldBufferSize(int value);
    [CompilerGeneratedAttribute]
public virtual char get_Quote();
    [CompilerGeneratedAttribute]
public virtual void set_Quote(char value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ReadingExceptionOccurred get_ReadingExceptionOccurred();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_ReadingExceptionOccurred(ReadingExceptionOccurred value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ReferenceHeaderPrefix get_ReferenceHeaderPrefix();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_ReferenceHeaderPrefix(ReferenceHeaderPrefix value);
    [CompilerGeneratedAttribute]
public sealed virtual ShouldQuote get_ShouldQuote();
    [CompilerGeneratedAttribute]
public void set_ShouldQuote(ShouldQuote value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ShouldSkipRecord get_ShouldSkipRecord();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_ShouldSkipRecord(ShouldSkipRecord value);
    [CompilerGeneratedAttribute]
public virtual ShouldUseConstructorParameters get_ShouldUseConstructorParameters();
    [CompilerGeneratedAttribute]
public virtual void set_ShouldUseConstructorParameters(ShouldUseConstructorParameters value);
    [CompilerGeneratedAttribute]
public virtual TrimOptions get_TrimOptions();
    [CompilerGeneratedAttribute]
public virtual void set_TrimOptions(TrimOptions value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseNewObjectForNullReferenceMembers();
    [CompilerGeneratedAttribute]
public virtual void set_UseNewObjectForNullReferenceMembers(bool value);
    [CompilerGeneratedAttribute]
public virtual Char[] get_WhiteSpaceChars();
    [CompilerGeneratedAttribute]
public virtual void set_WhiteSpaceChars(Char[] value);
    public sealed virtual void Validate();
    public CsvConfiguration ApplyAttributes();
    public CsvConfiguration ApplyAttributes(Type type);
    public static CsvConfiguration FromAttributes();
    public static CsvConfiguration FromAttributes(CultureInfo cultureInfo);
    public static CsvConfiguration FromAttributes(Type type);
    public static CsvConfiguration FromAttributes(Type type, CultureInfo cultureInfo);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CsvConfiguration left, CsvConfiguration right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CsvConfiguration left, CsvConfiguration right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CsvConfiguration other);
    [CompilerGeneratedAttribute]
public virtual CsvConfiguration <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class CsvHelper.Configuration.DefaultClassMap`1 : ClassMap`1<T> {
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.IBuildableClass`1 {
    public abstract virtual ClassMap`1<TClass> Build();
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasConstant`2 {
    [NullableContextAttribute("1")]
public abstract virtual IHasMap`1<TClass> Constant(TMember value);
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.IHasConvertUsing`2 {
    public abstract virtual IHasMap`1<TClass> ConvertUsing(ConvertFromString`1<TMember> convertExpression);
    public abstract virtual IHasMap`1<TClass> ConvertUsing(ConvertToString`1<TClass> convertExpression);
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.IHasDefault`2 {
    public abstract virtual IHasDefaultOptions`2<TClass, TMember> Default(TMember defaultValue);
    public abstract virtual IHasDefaultOptions`2<TClass, TMember> Default(string defaultValue);
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasDefaultOptions`2 {
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasIndex`2 {
    [NullableContextAttribute("1")]
public abstract virtual IHasIndexOptions`2<TClass, TMember> Index(int index, int indexEnd);
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasIndexOptions`2 {
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.IHasMap`1 {
    public abstract virtual IHasMapOptions`2<TClass, TMember> Map(Expression`1<Func`2<TClass, TMember>> expression, bool useExistingMap);
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasMapOptions`2 {
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasName`2 {
    [NullableContextAttribute("1")]
public abstract virtual IHasNameOptions`2<TClass, TMember> Name(String[] names);
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasNameIndex`2 {
    [NullableContextAttribute("1")]
public abstract virtual IHasNameIndexOptions`2<TClass, TMember> NameIndex(int index);
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasNameIndexOptions`2 {
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasNameOptions`2 {
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasOptional`2 {
    [NullableContextAttribute("1")]
public abstract virtual IHasOptionalOptions`2<TClass, TMember> Optional();
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasOptionalOptions`2 {
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.IHasTypeConverter`2 {
    public abstract virtual IHasTypeConverterOptions`2<TClass, TMember> TypeConverter(ITypeConverter typeConverter);
    public abstract virtual IHasTypeConverterOptions`2<TClass, TMember> TypeConverter();
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasTypeConverterOptions`2 {
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IHasValidate`2 {
    [NullableContextAttribute("1")]
public abstract virtual IHasMap`1<TClass> Validate(Validate validateExpression);
}
public enum CsvHelper.Configuration.InjectionOptions : Enum {
    public int value__;
    public static InjectionOptions None;
    public static InjectionOptions Escape;
    public static InjectionOptions Strip;
    public static InjectionOptions Exception;
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.IParserConfiguration {
    public CultureInfo CultureInfo { get; }
    public bool CacheFields { get; }
    public string NewLine { get; }
    public bool IsNewLineSet { get; }
    public CsvMode Mode { get; }
    public int BufferSize { get; }
    public int ProcessFieldBufferSize { get; }
    public bool CountBytes { get; }
    public Encoding Encoding { get; }
    [NullableAttribute("2")]
public BadDataFound BadDataFound { get; }
    public double MaxFieldSize { get; }
    public bool LineBreakInQuotedFieldIsBadData { get; }
    public char Comment { get; }
    public bool AllowComments { get; }
    public bool IgnoreBlankLines { get; }
    public char Quote { get; }
    public string Delimiter { get; }
    public bool DetectDelimiter { get; }
    public GetDelimiter GetDelimiter { get; }
    public String[] DetectDelimiterValues { get; }
    public char Escape { get; }
    public TrimOptions TrimOptions { get; }
    public Char[] WhiteSpaceChars { get; }
    public bool ExceptionMessagesContainRawData { get; }
    public abstract virtual CultureInfo get_CultureInfo();
    public abstract virtual bool get_CacheFields();
    public abstract virtual string get_NewLine();
    public abstract virtual bool get_IsNewLineSet();
    public abstract virtual CsvMode get_Mode();
    public abstract virtual int get_BufferSize();
    public abstract virtual int get_ProcessFieldBufferSize();
    public abstract virtual bool get_CountBytes();
    public abstract virtual Encoding get_Encoding();
    [NullableContextAttribute("2")]
public abstract virtual BadDataFound get_BadDataFound();
    public abstract virtual double get_MaxFieldSize();
    public abstract virtual bool get_LineBreakInQuotedFieldIsBadData();
    public abstract virtual char get_Comment();
    public abstract virtual bool get_AllowComments();
    public abstract virtual bool get_IgnoreBlankLines();
    public abstract virtual char get_Quote();
    public abstract virtual string get_Delimiter();
    public abstract virtual bool get_DetectDelimiter();
    public abstract virtual GetDelimiter get_GetDelimiter();
    public abstract virtual String[] get_DetectDelimiterValues();
    public abstract virtual char get_Escape();
    public abstract virtual TrimOptions get_TrimOptions();
    public abstract virtual Char[] get_WhiteSpaceChars();
    public abstract virtual bool get_ExceptionMessagesContainRawData();
    public abstract virtual void Validate();
}
[NullableContextAttribute("2")]
public interface CsvHelper.Configuration.IReaderConfiguration {
    public bool HasHeaderRecord { get; }
    public HeaderValidated HeaderValidated { get; }
    public MissingFieldFound MissingFieldFound { get; }
    public ReadingExceptionOccurred ReadingExceptionOccurred { get; }
    [NullableAttribute("1")]
public PrepareHeaderForMatch PrepareHeaderForMatch { get; }
    [NullableAttribute("1")]
public ShouldUseConstructorParameters ShouldUseConstructorParameters { get; }
    [NullableAttribute("1")]
public GetConstructor GetConstructor { get; }
    [NullableAttribute("1")]
public GetDynamicPropertyName GetDynamicPropertyName { get; }
    public bool IgnoreReferences { get; }
    public ShouldSkipRecord ShouldSkipRecord { get; }
    public bool IncludePrivateMembers { get; }
    public ReferenceHeaderPrefix ReferenceHeaderPrefix { get; }
    public bool DetectColumnCountChanges { get; }
    public MemberTypes MemberTypes { get; }
    public abstract virtual bool get_HasHeaderRecord();
    public abstract virtual HeaderValidated get_HeaderValidated();
    public abstract virtual MissingFieldFound get_MissingFieldFound();
    public abstract virtual ReadingExceptionOccurred get_ReadingExceptionOccurred();
    [NullableContextAttribute("1")]
public abstract virtual PrepareHeaderForMatch get_PrepareHeaderForMatch();
    [NullableContextAttribute("1")]
public abstract virtual ShouldUseConstructorParameters get_ShouldUseConstructorParameters();
    [NullableContextAttribute("1")]
public abstract virtual GetConstructor get_GetConstructor();
    [NullableContextAttribute("1")]
public abstract virtual GetDynamicPropertyName get_GetDynamicPropertyName();
    public abstract virtual bool get_IgnoreReferences();
    public abstract virtual ShouldSkipRecord get_ShouldSkipRecord();
    public abstract virtual bool get_IncludePrivateMembers();
    public abstract virtual ReferenceHeaderPrefix get_ReferenceHeaderPrefix();
    public abstract virtual bool get_DetectColumnCountChanges();
    public abstract virtual MemberTypes get_MemberTypes();
}
[NullableContextAttribute("1")]
public interface CsvHelper.Configuration.IWriterConfiguration {
    public int BufferSize { get; }
    public CsvMode Mode { get; }
    public string Delimiter { get; }
    public char Quote { get; }
    public char Escape { get; }
    public TrimOptions TrimOptions { get; }
    public InjectionOptions InjectionOptions { get; }
    public Char[] InjectionCharacters { get; }
    public char InjectionEscapeCharacter { get; }
    public string NewLine { get; }
    public bool IsNewLineSet { get; }
    public ShouldQuote ShouldQuote { get; }
    public CultureInfo CultureInfo { get; }
    public bool AllowComments { get; }
    public char Comment { get; }
    public bool HasHeaderRecord { get; }
    public bool IgnoreReferences { get; }
    public bool IncludePrivateMembers { get; }
    [NullableAttribute("2")]
public ReferenceHeaderPrefix ReferenceHeaderPrefix { get; }
    public MemberTypes MemberTypes { get; }
    public bool UseNewObjectForNullReferenceMembers { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IComparer`1<string> DynamicPropertySort { get; }
    public bool ExceptionMessagesContainRawData { get; }
    public abstract virtual int get_BufferSize();
    public abstract virtual CsvMode get_Mode();
    public abstract virtual string get_Delimiter();
    public abstract virtual char get_Quote();
    public abstract virtual char get_Escape();
    public abstract virtual TrimOptions get_TrimOptions();
    public abstract virtual InjectionOptions get_InjectionOptions();
    public abstract virtual Char[] get_InjectionCharacters();
    public abstract virtual char get_InjectionEscapeCharacter();
    public abstract virtual string get_NewLine();
    public abstract virtual bool get_IsNewLineSet();
    public abstract virtual ShouldQuote get_ShouldQuote();
    public abstract virtual CultureInfo get_CultureInfo();
    public abstract virtual bool get_AllowComments();
    public abstract virtual char get_Comment();
    public abstract virtual bool get_HasHeaderRecord();
    public abstract virtual bool get_IgnoreReferences();
    public abstract virtual bool get_IncludePrivateMembers();
    [NullableContextAttribute("2")]
public abstract virtual ReferenceHeaderPrefix get_ReferenceHeaderPrefix();
    public abstract virtual MemberTypes get_MemberTypes();
    public abstract virtual bool get_UseNewObjectForNullReferenceMembers();
    public abstract virtual IComparer`1<string> get_DynamicPropertySort();
    public abstract virtual bool get_ExceptionMessagesContainRawData();
    public abstract virtual void Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Member = {Data.Member}, Names = {string.Join(",", Data.Names)}, Index = {Data.Index}, Ignore = {Data.Ignore}, Member = {Data.Member}, TypeConverter = {Data.TypeConverter}")]
public abstract class CsvHelper.Configuration.MemberMap : object {
    [CompilerGeneratedAttribute]
private MemberMapData <Data>k__BackingField;
    public MemberMapData Data { get; protected set; }
    public MemberMapTypeConverterOption TypeConverterOption { get; }
    [CompilerGeneratedAttribute]
public virtual MemberMapData get_Data();
    [CompilerGeneratedAttribute]
protected virtual void set_Data(MemberMapData value);
    public abstract virtual MemberMapTypeConverterOption get_TypeConverterOption();
    public static MemberMap CreateGeneric(Type classType, MemberInfo member);
    public virtual MemberMap Name(String[] names);
    public virtual MemberMap NameIndex(int index);
    public virtual MemberMap Index(int index, int indexEnd);
    public virtual MemberMap Ignore();
    public virtual MemberMap Ignore(bool ignore);
    public virtual MemberMap Default(object defaultValue, bool useOnConversionFailure);
    public virtual MemberMap Constant(object constantValue);
    public virtual MemberMap TypeConverter(ITypeConverter typeConverter);
    public virtual MemberMap TypeConverter();
    public virtual MemberMap Optional();
    public virtual MemberMap Validate(Validate validateExpression);
    public virtual MemberMap Validate(Validate validateExpression, ValidateMessage validateMessageExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Configuration.MemberMap`2 : MemberMap {
    private MemberMapTypeConverterOption typeConverterOption;
    public MemberMapTypeConverterOption TypeConverterOption { get; }
    [NullableContextAttribute("2")]
public MemberMap`2(MemberInfo member);
    public virtual MemberMapTypeConverterOption get_TypeConverterOption();
    public virtual MemberMap`2<TClass, TMember> Name(String[] names);
    public virtual MemberMap`2<TClass, TMember> NameIndex(int index);
    public virtual MemberMap`2<TClass, TMember> Index(int index, int indexEnd);
    public virtual MemberMap`2<TClass, TMember> Ignore();
    public virtual MemberMap`2<TClass, TMember> Ignore(bool ignore);
    public virtual MemberMap`2<TClass, TMember> Default(TMember defaultValue, bool useOnConversionFailure);
    public virtual MemberMap`2<TClass, TMember> Default(string defaultValue, bool useOnConversionFailure);
    public virtual MemberMap`2<TClass, TMember> Constant(TMember constantValue);
    public virtual MemberMap`2<TClass, TMember> TypeConverter(ITypeConverter typeConverter);
    public virtual MemberMap`2<TClass, TMember> TypeConverter();
    public virtual MemberMap`2<TClass, TMember> Convert(ConvertFromString`1<TMember> convertFromStringFunction);
    public virtual MemberMap`2<TClass, TMember> Convert(ConvertToString`1<TClass> convertToStringFunction);
    public virtual MemberMap`2<TClass, TMember> Optional();
    public virtual MemberMap`2<TClass, TMember> Validate(Validate validateExpression);
    public virtual MemberMap`2<TClass, TMember> Validate(Validate validateExpression, ValidateMessage validateMessageExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class CsvHelper.Configuration.MemberMapBuilder`2 : object {
    private ClassMap`1<TClass> classMap;
    private MemberMap`2<TClass, TMember> memberMap;
    public MemberMapBuilder`2(ClassMap`1<TClass> classMap, MemberMap`2<TClass, TMember> memberMap);
    public sealed virtual IHasMapOptions`2<TClass, TMember> Map(Expression`1<Func`2<TClass, TMember>> expression, bool useExistingMap);
    public sealed virtual IHasMap`1<TClass> ConvertUsing(ConvertFromString`1<TMember> convertExpression);
    public sealed virtual IHasMap`1<TClass> ConvertUsing(ConvertToString`1<TClass> convertExpression);
    public sealed virtual IHasDefaultOptions`2<TClass, TMember> Default(TMember defaultValue);
    public sealed virtual IHasDefaultOptions`2<TClass, TMember> Default(string defaultValue);
    public sealed virtual IHasIndexOptions`2<TClass, TMember> Index(int index, int indexEnd);
    public sealed virtual IHasNameOptions`2<TClass, TMember> Name(String[] names);
    public sealed virtual IHasNameIndexOptions`2<TClass, TMember> NameIndex(int index);
    public sealed virtual IHasOptionalOptions`2<TClass, TMember> Optional();
    public sealed virtual IHasTypeConverterOptions`2<TClass, TMember> TypeConverter(ITypeConverter typeConverter);
    public sealed virtual IHasTypeConverterOptions`2<TClass, TMember> TypeConverter();
    public sealed virtual IHasMap`1<TClass> Constant(TMember value);
    public sealed virtual IHasMap`1<TClass> Validate(Validate validateExpression);
    public sealed virtual ClassMap`1<TClass> Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {list.Count}")]
public class CsvHelper.Configuration.MemberMapCollection : object {
    private List`1<MemberMap> list;
    private IComparer`1<MemberMap> comparer;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public MemberMap Item { get; public set; }
    public MemberMapCollection(IComparer`1<MemberMap> comparer);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual IEnumerator`1<MemberMap> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Add(MemberMap item);
    public virtual void AddRange(ICollection`1<MemberMap> collection);
    public virtual void Clear();
    public virtual bool Contains(MemberMap item);
    public virtual void CopyTo(MemberMap[] array, int arrayIndex);
    public virtual bool Remove(MemberMap item);
    public virtual int IndexOf(MemberMap item);
    public virtual void Insert(int index, MemberMap item);
    public virtual void RemoveAt(int index);
    public virtual MemberMap get_Item(int index);
    public virtual void set_Item(int index, MemberMap value);
    [NullableContextAttribute("2")]
public virtual MemberMap Find(Expression`1<Func`2<T, object>> expression);
    public virtual MemberMap Find(MemberInfo member);
    public virtual void AddMembers(ClassMap mapping);
}
internal class CsvHelper.Configuration.MemberMapComparer : object {
    [NullableContextAttribute("1")]
public virtual int Compare(object x, object y);
    [NullableContextAttribute("2")]
public virtual int Compare(MemberMap x, MemberMap y);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class CsvHelper.Configuration.MemberMapData : object {
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MemberNameCollection <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NameIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNameSet>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndexEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexSet>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeConverter <TypeConverter>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TypeConverterOptions <TypeConverterOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultOnConversionFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Constant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConstantSet>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ReadingConvertExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <WritingConvertExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ValidateExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ValidateMessageExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    [NullableAttribute("1")]
public Type Type { get; }
    public MemberInfo Member { get; private set; }
    [NullableAttribute("1")]
public MemberNameCollection Names { get; }
    public int NameIndex { get; public set; }
    public bool IsNameSet { get; public set; }
    public int Index { get; public set; }
    public int IndexEnd { get; public set; }
    public bool IsIndexSet { get; public set; }
    public ITypeConverter TypeConverter { get; public set; }
    [NullableAttribute("1")]
public TypeConverterOptions TypeConverterOptions { get; public set; }
    public bool Ignore { get; public set; }
    public object Default { get; public set; }
    public bool IsDefaultSet { get; public set; }
    public bool UseDefaultOnConversionFailure { get; public set; }
    public object Constant { get; public set; }
    public bool IsConstantSet { get; public set; }
    public Expression ReadingConvertExpression { get; public set; }
    public Expression WritingConvertExpression { get; public set; }
    public Expression ValidateExpression { get; public set; }
    public Expression ValidateMessageExpression { get; public set; }
    public bool IsOptional { get; public set; }
    public MemberMapData(MemberInfo member);
    [NullableContextAttribute("1")]
public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual MemberInfo get_Member();
    [CompilerGeneratedAttribute]
private void set_Member(MemberInfo value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual MemberNameCollection get_Names();
    [CompilerGeneratedAttribute]
public virtual int get_NameIndex();
    [CompilerGeneratedAttribute]
public virtual void set_NameIndex(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNameSet();
    [CompilerGeneratedAttribute]
public virtual void set_IsNameSet(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual int get_IndexEnd();
    [CompilerGeneratedAttribute]
public virtual void set_IndexEnd(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsIndexSet();
    [CompilerGeneratedAttribute]
public virtual void set_IsIndexSet(bool value);
    [CompilerGeneratedAttribute]
public virtual ITypeConverter get_TypeConverter();
    [CompilerGeneratedAttribute]
public virtual void set_TypeConverter(ITypeConverter value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual TypeConverterOptions get_TypeConverterOptions();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_TypeConverterOptions(TypeConverterOptions value);
    [CompilerGeneratedAttribute]
public virtual bool get_Ignore();
    [CompilerGeneratedAttribute]
public virtual void set_Ignore(bool value);
    [CompilerGeneratedAttribute]
public virtual object get_Default();
    [CompilerGeneratedAttribute]
public virtual void set_Default(object value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDefaultSet();
    [CompilerGeneratedAttribute]
public virtual void set_IsDefaultSet(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseDefaultOnConversionFailure();
    [CompilerGeneratedAttribute]
public virtual void set_UseDefaultOnConversionFailure(bool value);
    [CompilerGeneratedAttribute]
public virtual object get_Constant();
    [CompilerGeneratedAttribute]
public virtual void set_Constant(object value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsConstantSet();
    [CompilerGeneratedAttribute]
public virtual void set_IsConstantSet(bool value);
    [CompilerGeneratedAttribute]
public virtual Expression get_ReadingConvertExpression();
    [CompilerGeneratedAttribute]
public virtual void set_ReadingConvertExpression(Expression value);
    [CompilerGeneratedAttribute]
public virtual Expression get_WritingConvertExpression();
    [CompilerGeneratedAttribute]
public virtual void set_WritingConvertExpression(Expression value);
    [CompilerGeneratedAttribute]
public virtual Expression get_ValidateExpression();
    [CompilerGeneratedAttribute]
public virtual void set_ValidateExpression(Expression value);
    [CompilerGeneratedAttribute]
public virtual Expression get_ValidateMessageExpression();
    [CompilerGeneratedAttribute]
public virtual void set_ValidateMessageExpression(Expression value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsOptional();
    [CompilerGeneratedAttribute]
public virtual void set_IsOptional(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Configuration.MemberMapTypeConverterOption : object {
    private MemberMap memberMap;
    public MemberMapTypeConverterOption(MemberMap memberMap);
    public virtual MemberMap CultureInfo(CultureInfo cultureInfo);
    public virtual MemberMap DateTimeStyles(DateTimeStyles dateTimeStyle);
    public virtual MemberMap TimespanStyles(TimeSpanStyles timeSpanStyles);
    public virtual MemberMap NumberStyles(NumberStyles numberStyle);
    public virtual MemberMap Format(String[] formats);
    public virtual MemberMap UriKind(UriKind uriKind);
    public virtual MemberMap BooleanValues(bool isTrue, bool clearValues, String[] booleanValues);
    public virtual MemberMap NullValues(String[] nullValues);
    public virtual MemberMap NullValues(bool clearValues, String[] nullValues);
    public virtual MemberMap EnumIgnoreCase(bool ignoreCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class CsvHelper.Configuration.MemberNameCollection : object {
    private List`1<string> names;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Item { get; public set; }
    public string Prefix { get; public set; }
    public List`1<string> Names { get; }
    public int Count { get; }
    public string get_Item(int index);
    public void set_Item(int index, string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    public List`1<string> get_Names();
    public int get_Count();
    public void Add(string name);
    public void Clear();
    public void AddRange(IEnumerable`1<string> names);
    [IteratorStateMachineAttribute("CsvHelper.Configuration.MemberNameCollection/<GetEnumerator>d__15")]
public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Member = {Data.Member}, Prefix = {Data.Prefix}")]
public class CsvHelper.Configuration.MemberReferenceMap : object {
    private MemberReferenceMapData data;
    public MemberReferenceMapData Data { get; }
    public MemberReferenceMap(MemberInfo member, ClassMap mapping);
    public MemberReferenceMapData get_Data();
    public MemberReferenceMap Prefix(string prefix, bool inherit);
    internal int GetMaxIndex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {list.Count}")]
public class CsvHelper.Configuration.MemberReferenceMapCollection : object {
    private List`1<MemberReferenceMap> list;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public MemberReferenceMap Item { get; public set; }
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual MemberReferenceMap get_Item(int index);
    public virtual void set_Item(int index, MemberReferenceMap value);
    public virtual IEnumerator`1<MemberReferenceMap> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Add(MemberReferenceMap item);
    public virtual void Clear();
    public virtual bool Contains(MemberReferenceMap item);
    public virtual void CopyTo(MemberReferenceMap[] array, int arrayIndex);
    public virtual bool Remove(MemberReferenceMap item);
    public virtual int IndexOf(MemberReferenceMap item);
    public virtual void Insert(int index, MemberReferenceMap item);
    public virtual void RemoveAt(int index);
    [NullableContextAttribute("2")]
public virtual MemberReferenceMap Find(Expression`1<Func`2<T, object>> expression);
    public virtual MemberReferenceMap Find(MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Configuration.MemberReferenceMapData : object {
    private string prefix;
    [CompilerGeneratedAttribute]
private bool <Inherit>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private ClassMap <Mapping>k__BackingField;
    public string Prefix { get; public set; }
    public bool Inherit { get; public set; }
    public MemberInfo Member { get; private set; }
    public ClassMap Mapping { get; private set; }
    public MemberReferenceMapData(MemberInfo member, ClassMap mapping);
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_Inherit();
    [CompilerGeneratedAttribute]
public virtual void set_Inherit(bool value);
    [CompilerGeneratedAttribute]
public virtual MemberInfo get_Member();
    [CompilerGeneratedAttribute]
private void set_Member(MemberInfo value);
    [CompilerGeneratedAttribute]
public ClassMap get_Mapping();
    [CompilerGeneratedAttribute]
private void set_Mapping(ClassMap value);
}
[FlagsAttribute]
public enum CsvHelper.Configuration.MemberTypes : Enum {
    public int value__;
    public static MemberTypes None;
    public static MemberTypes Properties;
    public static MemberTypes Fields;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Data = {Data}")]
public class CsvHelper.Configuration.ParameterMap : object {
    [CompilerGeneratedAttribute]
private ParameterMapData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterMapTypeConverterOption <TypeConverterOption>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ClassMap <ConstructorTypeMap>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ParameterReferenceMap <ReferenceMap>k__BackingField;
    public ParameterMapData Data { get; protected set; }
    public ParameterMapTypeConverterOption TypeConverterOption { get; protected set; }
    [NullableAttribute("2")]
public ClassMap ConstructorTypeMap { get; public set; }
    [NullableAttribute("2")]
public ParameterReferenceMap ReferenceMap { get; public set; }
    public ParameterMap(ParameterInfo parameter);
    [CompilerGeneratedAttribute]
public virtual ParameterMapData get_Data();
    [CompilerGeneratedAttribute]
protected virtual void set_Data(ParameterMapData value);
    [CompilerGeneratedAttribute]
public virtual ParameterMapTypeConverterOption get_TypeConverterOption();
    [CompilerGeneratedAttribute]
protected virtual void set_TypeConverterOption(ParameterMapTypeConverterOption value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ClassMap get_ConstructorTypeMap();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_ConstructorTypeMap(ClassMap value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ParameterReferenceMap get_ReferenceMap();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_ReferenceMap(ParameterReferenceMap value);
    public virtual ParameterMap Name(String[] names);
    public virtual ParameterMap NameIndex(int index);
    public virtual ParameterMap Index(int index);
    public virtual ParameterMap Ignore();
    public virtual ParameterMap Ignore(bool ignore);
    public virtual ParameterMap Default(object defaultValue);
    public virtual ParameterMap Constant(object constantValue);
    public virtual ParameterMap Optional();
    public virtual ParameterMap TypeConverter(ITypeConverter typeConverter);
    public virtual ParameterMap TypeConverter();
    internal int GetMaxIndex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Index = {Index}, Names = {string.Join(", ", Names)}, Parameter = {Parameter}")]
public class CsvHelper.Configuration.ParameterMapData : object {
    [CompilerGeneratedAttribute]
private ParameterInfo <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberNameCollection <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NameIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNameSet>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexSet>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITypeConverter <TypeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeConverterOptions <TypeConverterOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultSet>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Constant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConstantSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public ParameterInfo Parameter { get; private set; }
    public MemberNameCollection Names { get; }
    public int NameIndex { get; public set; }
    public bool IsNameSet { get; public set; }
    public int Index { get; public set; }
    public bool IsIndexSet { get; public set; }
    [NullableAttribute("2")]
public ITypeConverter TypeConverter { get; public set; }
    public TypeConverterOptions TypeConverterOptions { get; public set; }
    public bool Ignore { get; public set; }
    [NullableAttribute("2")]
public object Default { get; public set; }
    public bool IsDefaultSet { get; public set; }
    [NullableAttribute("2")]
public object Constant { get; public set; }
    public bool IsConstantSet { get; public set; }
    public bool IsOptional { get; public set; }
    public ParameterMapData(ParameterInfo parameter);
    [CompilerGeneratedAttribute]
public virtual ParameterInfo get_Parameter();
    [CompilerGeneratedAttribute]
private void set_Parameter(ParameterInfo value);
    [CompilerGeneratedAttribute]
public virtual MemberNameCollection get_Names();
    [CompilerGeneratedAttribute]
public virtual int get_NameIndex();
    [CompilerGeneratedAttribute]
public virtual void set_NameIndex(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNameSet();
    [CompilerGeneratedAttribute]
public virtual void set_IsNameSet(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsIndexSet();
    [CompilerGeneratedAttribute]
public virtual void set_IsIndexSet(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ITypeConverter get_TypeConverter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_TypeConverter(ITypeConverter value);
    [CompilerGeneratedAttribute]
public virtual TypeConverterOptions get_TypeConverterOptions();
    [CompilerGeneratedAttribute]
public virtual void set_TypeConverterOptions(TypeConverterOptions value);
    [CompilerGeneratedAttribute]
public virtual bool get_Ignore();
    [CompilerGeneratedAttribute]
public virtual void set_Ignore(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_Default();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Default(object value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDefaultSet();
    [CompilerGeneratedAttribute]
public virtual void set_IsDefaultSet(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_Constant();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Constant(object value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsConstantSet();
    [CompilerGeneratedAttribute]
public virtual void set_IsConstantSet(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsOptional();
    [CompilerGeneratedAttribute]
public virtual void set_IsOptional(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Configuration.ParameterMapTypeConverterOption : object {
    private ParameterMap parameterMap;
    public ParameterMapTypeConverterOption(ParameterMap parameterMap);
    public virtual ParameterMap CultureInfo(CultureInfo cultureInfo);
    public virtual ParameterMap DateTimeStyles(DateTimeStyles dateTimeStyle);
    public virtual ParameterMap TimespanStyles(TimeSpanStyles timeSpanStyles);
    public virtual ParameterMap NumberStyles(NumberStyles numberStyle);
    public virtual ParameterMap Format(String[] formats);
    public virtual ParameterMap UriKind(UriKind uriKind);
    public virtual ParameterMap BooleanValues(bool isTrue, bool clearValues, String[] booleanValues);
    public virtual ParameterMap NullValues(String[] nullValues);
    public virtual ParameterMap NullValues(bool clearValues, String[] nullValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Configuration.ParameterReferenceMap : object {
    private ParameterReferenceMapData data;
    public ParameterReferenceMapData Data { get; }
    public ParameterReferenceMap(ParameterInfo parameter, ClassMap mapping);
    public ParameterReferenceMapData get_Data();
    public ParameterReferenceMap Prefix(string prefix, bool inherit);
    internal int GetMaxIndex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Prefix = {Prefix}, Parameter = {Parameter}")]
public class CsvHelper.Configuration.ParameterReferenceMapData : object {
    private string prefix;
    [CompilerGeneratedAttribute]
private bool <Inherit>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private ClassMap <Mapping>k__BackingField;
    public string Prefix { get; public set; }
    public bool Inherit { get; public set; }
    public ParameterInfo Parameter { get; private set; }
    public ClassMap Mapping { get; private set; }
    public ParameterReferenceMapData(ParameterInfo parameter, ClassMap mapping);
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_Inherit();
    [CompilerGeneratedAttribute]
public virtual void set_Inherit(bool value);
    [CompilerGeneratedAttribute]
public virtual ParameterInfo get_Parameter();
    [CompilerGeneratedAttribute]
private void set_Parameter(ParameterInfo value);
    [CompilerGeneratedAttribute]
public ClassMap get_Mapping();
    [CompilerGeneratedAttribute]
private void set_Mapping(ClassMap value);
}
[FlagsAttribute]
public enum CsvHelper.Configuration.TrimOptions : Enum {
    public int value__;
    public static TrimOptions None;
    public static TrimOptions Trim;
    public static TrimOptions InsideQuotes;
}
public class CsvHelper.ConvertFromString`1 : MulticastDelegate {
    public ConvertFromString`1(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual TMember Invoke(ConvertFromStringArgs args);
    public virtual IAsyncResult BeginInvoke(ConvertFromStringArgs args, AsyncCallback callback, object object);
    public virtual TMember EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.ConvertFromStringArgs : ValueType {
    public IReaderRow Row;
    public ConvertFromStringArgs(IReaderRow row);
}
public class CsvHelper.ConvertToString`1 : MulticastDelegate {
    public ConvertToString`1(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual string Invoke(ConvertToStringArgs`1<TClass> args);
    public virtual IAsyncResult BeginInvoke(ConvertToStringArgs`1<TClass> args, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.ConvertToStringArgs`1 : ValueType {
    public TClass Value;
    public ConvertToStringArgs`1(TClass value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.CsvContext : object {
    [CompilerGeneratedAttribute]
private TypeConverterOptionsCache <TypeConverterOptionsCache>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeConverterCache <TypeConverterCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ClassMapCollection <Maps>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IParser <Parser>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReader <Reader>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private CsvConfiguration <Configuration>k__BackingField;
    public TypeConverterOptionsCache TypeConverterOptionsCache { get; public set; }
    public TypeConverterCache TypeConverterCache { get; public set; }
    public ClassMapCollection Maps { get; private set; }
    [NullableAttribute("2")]
public IParser Parser { get; private set; }
    [NullableAttribute("2")]
public IReader Reader { get; internal set; }
    [NullableAttribute("2")]
public IWriter Writer { get; internal set; }
    public CsvConfiguration Configuration { get; private set; }
    public CsvContext(IReader reader);
    public CsvContext(IParser parser);
    public CsvContext(IWriter writer);
    public CsvContext(CsvConfiguration configuration);
    [CompilerGeneratedAttribute]
public virtual TypeConverterOptionsCache get_TypeConverterOptionsCache();
    [CompilerGeneratedAttribute]
public virtual void set_TypeConverterOptionsCache(TypeConverterOptionsCache value);
    [CompilerGeneratedAttribute]
public virtual TypeConverterCache get_TypeConverterCache();
    [CompilerGeneratedAttribute]
public virtual void set_TypeConverterCache(TypeConverterCache value);
    [CompilerGeneratedAttribute]
public virtual ClassMapCollection get_Maps();
    [CompilerGeneratedAttribute]
private void set_Maps(ClassMapCollection value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IParser get_Parser();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Parser(IParser value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IReader get_Reader();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Reader(IReader value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IWriter get_Writer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Writer(IWriter value);
    [CompilerGeneratedAttribute]
public CsvConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(CsvConfiguration value);
    public virtual TMap RegisterClassMap();
    public virtual ClassMap RegisterClassMap(Type classMapType);
    public virtual void RegisterClassMap(ClassMap map);
    [NullableContextAttribute("0")]
public virtual void UnregisterClassMap();
    public virtual void UnregisterClassMap(Type classMapType);
    public virtual void UnregisterClassMap();
    public virtual ClassMap`1<T> AutoMap();
    public virtual ClassMap AutoMap(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class CsvHelper.CsvDataReader : object {
    private CsvReader csv;
    private DataTable schemaTable;
    private bool skipNextRead;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public bool IsClosed { get; private set; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public CsvDataReader(CsvReader csv, DataTable schemaTable);
    public sealed virtual object get_Item(int i);
    public sealed virtual object get_Item(string name);
    public sealed virtual int get_Depth();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public sealed virtual int get_RecordsAffected();
    public sealed virtual int get_FieldCount();
    public sealed virtual void Close();
    public sealed virtual void Dispose();
    public sealed virtual bool GetBoolean(int i);
    public sealed virtual byte GetByte(int i);
    [NullableContextAttribute("2")]
public sealed virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public sealed virtual char GetChar(int i);
    [NullableContextAttribute("2")]
public sealed virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public sealed virtual IDataReader GetData(int i);
    public sealed virtual string GetDataTypeName(int i);
    public sealed virtual DateTime GetDateTime(int i);
    public sealed virtual decimal GetDecimal(int i);
    public sealed virtual double GetDouble(int i);
    public sealed virtual Type GetFieldType(int i);
    public sealed virtual float GetFloat(int i);
    public sealed virtual Guid GetGuid(int i);
    public sealed virtual short GetInt16(int i);
    public sealed virtual int GetInt32(int i);
    public sealed virtual long GetInt64(int i);
    public sealed virtual string GetName(int i);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual string GetString(int i);
    public sealed virtual object GetValue(int i);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual bool IsDBNull(int i);
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.CsvHelperException : Exception {
    [NullableAttribute("2")]
private CsvContext context;
    [NullableAttribute("2")]
public CsvContext Context { get; }
    protected internal CsvHelperException(string message);
    protected internal CsvHelperException(string message, Exception innerException);
    public CsvHelperException(CsvContext context);
    public CsvHelperException(CsvContext context, string message);
    public CsvHelperException(CsvContext context, string message, Exception innerException);
    [NullableContextAttribute("2")]
public CsvContext get_Context();
    private static string AddDetails(string message, CsvContext context);
}
public enum CsvHelper.CsvMode : Enum {
    public int value__;
    public static CsvMode RFC4180;
    public static CsvMode Escape;
    public static CsvMode NoEscape;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class CsvHelper.CsvParser : object {
    private IParserConfiguration configuration;
    private FieldCache fieldCache;
    private TextReader reader;
    private char quote;
    private char escape;
    private bool countBytes;
    private Encoding encoding;
    private bool ignoreBlankLines;
    private char comment;
    private bool allowComments;
    [NullableAttribute("2")]
private BadDataFound badDataFound;
    private bool lineBreakInQuotedFieldIsBadData;
    private TrimOptions trimOptions;
    private Char[] whiteSpaceChars;
    private bool leaveOpen;
    private CsvMode mode;
    private string newLine;
    private char newLineFirstChar;
    private bool isNewLineSet;
    private bool cacheFields;
    private String[] delimiterValues;
    private bool detectDelimiter;
    private double maxFieldSize;
    private string delimiter;
    private char delimiterFirstChar;
    private Char[] buffer;
    private int bufferSize;
    private int charsRead;
    private int bufferPosition;
    private int rowStartPosition;
    private int fieldStartPosition;
    private int row;
    private int rawRow;
    private long charCount;
    private long byteCount;
    private bool inQuotes;
    private bool inEscape;
    private Field[] fields;
    private String[] processedFields;
    private int fieldsPosition;
    private bool disposed;
    private int quoteCount;
    private Char[] processFieldBuffer;
    private int processFieldBufferSize;
    private ParserState state;
    private int delimiterPosition;
    private int newLinePosition;
    private bool fieldIsBadData;
    private bool fieldIsQuoted;
    private bool isProcessingField;
    private bool isRecordProcessed;
    private String[] record;
    [CompilerGeneratedAttribute]
private CsvContext <Context>k__BackingField;
    public long CharCount { get; }
    public long ByteCount { get; }
    public int Row { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Record { get; }
    public string RawRecord { get; }
    public int Count { get; }
    public int RawRow { get; }
    public string Delimiter { get; }
    public CsvContext Context { get; private set; }
    public IParserConfiguration Configuration { get; }
    public string Item { get; }
    public CsvParser(TextReader reader, CultureInfo culture, bool leaveOpen);
    public CsvParser(TextReader reader, IParserConfiguration configuration, bool leaveOpen);
    public sealed virtual long get_CharCount();
    public sealed virtual long get_ByteCount();
    public sealed virtual int get_Row();
    public sealed virtual String[] get_Record();
    public sealed virtual string get_RawRecord();
    public sealed virtual int get_Count();
    public sealed virtual int get_RawRow();
    public sealed virtual string get_Delimiter();
    [CompilerGeneratedAttribute]
public sealed virtual CsvContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(CsvContext value);
    public sealed virtual IParserConfiguration get_Configuration();
    public sealed virtual string get_Item(int index);
    public sealed virtual bool Read();
    [AsyncStateMachineAttribute("CsvHelper.CsvParser/<ReadAsync>d__79")]
public sealed virtual Task`1<bool> ReadAsync();
    private void DetectDelimiter();
    private ReadLineResult ReadLine(Char& c, Char& cPrev);
    private ReadLineResult ReadSpaces(Char& c);
    private ReadLineResult ReadBlankLine(Char& c);
    private ReadLineResult ReadDelimiter(Char& c);
    private ReadLineResult ReadLineEnding(Char& c);
    private ReadLineResult ReadNewLine(Char& c);
    private bool ReadEndOfFile();
    private void AddField(int start, int length);
    private bool FillBuffer();
    [AsyncStateMachineAttribute("CsvHelper.CsvParser/<FillBufferAsync>d__90")]
private Task`1<bool> FillBufferAsync();
    private string GetField(int index);
    protected ProcessedField ProcessRFC4180Field(int start, int length, int quoteCount);
    protected ProcessedField ProcessRFC4180BadField(int start, int length);
    protected ProcessedField ProcessEscapeField(int start, int length);
    protected ProcessedField ProcessNoEscapeField(int start, int length);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class CsvHelper.CsvReader : object {
    private Lazy`1<RecordManager> recordManager;
    private bool detectColumnCountChanges;
    private Dictionary`2<string, List`1<int>> namedIndexes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`2<string, int>> namedIndexCache;
    private Dictionary`2<Type, TypeConverterOptions> typeConverterOptionsCache;
    private MemberMapData reusableMemberMapData;
    private bool hasHeaderRecord;
    [NullableAttribute("2")]
private HeaderValidated headerValidated;
    [NullableAttribute("2")]
private ShouldSkipRecord shouldSkipRecord;
    [NullableAttribute("2")]
private ReadingExceptionOccurred readingExceptionOccurred;
    private CultureInfo cultureInfo;
    private bool ignoreBlankLines;
    [NullableAttribute("2")]
private MissingFieldFound missingFieldFound;
    private bool includePrivateMembers;
    private PrepareHeaderForMatch prepareHeaderForMatch;
    private CsvContext context;
    private bool disposed;
    private IParser parser;
    private int prevColumnCount;
    private int currentIndex;
    private bool hasBeenRead;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] headerRecord;
    [CompilerGeneratedAttribute]
private IReaderConfiguration <Configuration>k__BackingField;
    public int ColumnCount { get; }
    public int CurrentIndex { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] HeaderRecord { get; }
    public CsvContext Context { get; }
    public IReaderConfiguration Configuration { get; private set; }
    public IParser Parser { get; }
    [NullableAttribute("2")]
public string Item { get; }
    [NullableAttribute("2")]
public string Item { get; }
    [NullableAttribute("2")]
public string Item { get; }
    public CsvReader(TextReader reader, CultureInfo culture, bool leaveOpen);
    public CsvReader(TextReader reader, IReaderConfiguration configuration, bool leaveOpen);
    public CsvReader(IParser parser);
    public virtual int get_ColumnCount();
    public virtual int get_CurrentIndex();
    public virtual String[] get_HeaderRecord();
    public virtual CsvContext get_Context();
    [CompilerGeneratedAttribute]
public virtual IReaderConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(IReaderConfiguration value);
    public virtual IParser get_Parser();
    public virtual bool ReadHeader();
    [NullableContextAttribute("2")]
public virtual void ValidateHeader();
    public virtual void ValidateHeader(Type type);
    protected virtual void ValidateHeader(ClassMap map, List`1<InvalidHeader> invalidHeaders);
    public virtual bool Read();
    [AsyncStateMachineAttribute("CsvHelper.CsvReader/<ReadAsync>d__44")]
public virtual Task`1<bool> ReadAsync();
    [NullableContextAttribute("2")]
public virtual string get_Item(int index);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, int index);
    [NullableContextAttribute("2")]
public virtual string GetField(int index);
    public virtual string GetField(string name);
    public virtual string GetField(string name, int index);
    public virtual object GetField(Type type, int index);
    public virtual object GetField(Type type, string name);
    public virtual object GetField(Type type, string name, int index);
    public virtual object GetField(Type type, int index, ITypeConverter converter);
    public virtual object GetField(Type type, string name, ITypeConverter converter);
    public virtual object GetField(Type type, string name, int index, ITypeConverter converter);
    [NullableContextAttribute("2")]
public virtual T GetField(int index);
    [NullableContextAttribute("2")]
public virtual T GetField(string name);
    [NullableContextAttribute("2")]
public virtual T GetField(string name, int index);
    [NullableContextAttribute("2")]
public virtual T GetField(int index, ITypeConverter converter);
    public virtual T GetField(string name, ITypeConverter converter);
    public virtual T GetField(string name, int index, ITypeConverter converter);
    [NullableContextAttribute("2")]
public virtual T GetField(int index);
    public virtual T GetField(string name);
    public virtual T GetField(string name, int index);
    public virtual bool TryGetField(Type type, int index, Object& field);
    public virtual bool TryGetField(Type type, string name, Object& field);
    public virtual bool TryGetField(Type type, string name, int index, Object& field);
    public virtual bool TryGetField(Type type, int index, ITypeConverter converter, Object& field);
    public virtual bool TryGetField(Type type, string name, ITypeConverter converter, Object& field);
    public virtual bool TryGetField(Type type, string name, int index, ITypeConverter converter, Object& field);
    [NullableContextAttribute("2")]
public virtual bool TryGetField(int index, T& field);
    [NullableContextAttribute("2")]
public virtual bool TryGetField(string name, T& field);
    [NullableContextAttribute("2")]
public virtual bool TryGetField(string name, int index, T& field);
    [NullableContextAttribute("2")]
public virtual bool TryGetField(int index, ITypeConverter converter, T& field);
    public virtual bool TryGetField(string name, ITypeConverter converter, T& field);
    public virtual bool TryGetField(string name, int index, ITypeConverter converter, T& field);
    [NullableContextAttribute("2")]
public virtual bool TryGetField(int index, T& field);
    public virtual bool TryGetField(string name, T& field);
    public virtual bool TryGetField(string name, int index, T& field);
    public virtual T GetRecord();
    public virtual T GetRecord(T anonymousTypeDefinition);
    public virtual object GetRecord(Type type);
    [IteratorStateMachineAttribute("CsvHelper.CsvReader/<GetRecords>d__87`1")]
public virtual IEnumerable`1<T> GetRecords();
    public virtual IEnumerable`1<T> GetRecords(T anonymousTypeDefinition);
    [IteratorStateMachineAttribute("CsvHelper.CsvReader/<GetRecords>d__89")]
public virtual IEnumerable`1<object> GetRecords(Type type);
    [IteratorStateMachineAttribute("CsvHelper.CsvReader/<EnumerateRecords>d__90`1")]
public virtual IEnumerable`1<T> EnumerateRecords(T record);
    [AsyncIteratorStateMachineAttribute("CsvHelper.CsvReader/<GetRecordsAsync>d__91`1")]
public virtual IAsyncEnumerable`1<T> GetRecordsAsync(CancellationToken cancellationToken);
    public virtual IAsyncEnumerable`1<T> GetRecordsAsync(T anonymousTypeDefinition, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("CsvHelper.CsvReader/<GetRecordsAsync>d__93")]
public virtual IAsyncEnumerable`1<object> GetRecordsAsync(Type type, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("CsvHelper.CsvReader/<EnumerateRecordsAsync>d__94`1")]
public virtual IAsyncEnumerable`1<T> EnumerateRecordsAsync(T record, CancellationToken cancellationToken);
    public virtual int GetFieldIndex(string name, int index, bool isTryGet);
    public virtual int GetFieldIndex(IEnumerable`1<string> names, int index, bool isTryGet, bool isOptional);
    public virtual bool CanRead(MemberMap memberMap);
    public virtual bool CanRead(MemberReferenceMap memberReferenceMap);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void CheckHasBeenRead();
    protected virtual void ParseNamedIndexes();
    [CompilerGeneratedAttribute]
private RecordManager <.ctor>b__38_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.CsvWriter : object {
    private TextWriter writer;
    private CsvContext context;
    private Lazy`1<RecordManager> recordManager;
    private TypeConverterCache typeConverterCache;
    private TrimOptions trimOptions;
    private ShouldQuote shouldQuote;
    private MemberMapData reusableMemberMapData;
    private Dictionary`2<Type, TypeConverterOptions> typeConverterOptionsCache;
    private string quoteString;
    private char quote;
    private CultureInfo cultureInfo;
    private char comment;
    private bool hasHeaderRecord;
    private bool includePrivateMembers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IComparer`1<string> dynamicPropertySort;
    private string delimiter;
    private bool leaveOpen;
    private string newLine;
    private Char[] injectionCharacters;
    private char injectionEscapeCharacter;
    private InjectionOptions injectionOptions;
    private CsvMode mode;
    private string escapeString;
    private string escapeQuoteString;
    private string escapeDelimiterString;
    private string escapeNewlineString;
    private string escapeEscapeString;
    private bool disposed;
    private bool hasHeaderBeenWritten;
    private int row;
    private int index;
    private Char[] buffer;
    private int bufferSize;
    private int bufferPosition;
    [NullableAttribute("2")]
private Type fieldType;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private String[] <HeaderRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private IWriterConfiguration <Configuration>k__BackingField;
    [NullableAttribute("2")]
public String[] HeaderRecord { get; private set; }
    public int Row { get; }
    public int Index { get; }
    public CsvContext Context { get; }
    public IWriterConfiguration Configuration { get; private set; }
    public CsvWriter(TextWriter writer, CultureInfo culture, bool leaveOpen);
    public CsvWriter(TextWriter writer, IWriterConfiguration configuration, bool leaveOpen);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual String[] get_HeaderRecord();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_HeaderRecord(String[] value);
    public virtual int get_Row();
    public virtual int get_Index();
    public virtual CsvContext get_Context();
    [CompilerGeneratedAttribute]
public virtual IWriterConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(IWriterConfiguration value);
    public virtual void WriteConvertedField(string field, Type fieldType);
    [NullableContextAttribute("2")]
public virtual void WriteField(string field);
    [NullableContextAttribute("2")]
public virtual void WriteField(string field, bool shouldQuote);
    [NullableContextAttribute("2")]
public virtual void WriteField(T field);
    [NullableContextAttribute("2")]
public virtual void WriteField(T field, ITypeConverter converter);
    [NullableContextAttribute("2")]
public virtual void WriteField(T field);
    [NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    [NullableContextAttribute("2")]
public virtual void WriteHeader();
    public virtual void WriteHeader(Type type);
    [NullableContextAttribute("2")]
public virtual void WriteDynamicHeader(IDynamicMetaObjectProvider record);
    [NullableContextAttribute("2")]
public virtual void WriteRecord(T record);
    public virtual void WriteRecords(IEnumerable records);
    public virtual void WriteRecords(IEnumerable`1<T> records);
    [AsyncStateMachineAttribute("CsvHelper.CsvWriter/<WriteRecordsAsync>d__64")]
public virtual Task WriteRecordsAsync(IEnumerable records, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("CsvHelper.CsvWriter/<WriteRecordsAsync>d__65`1")]
public virtual Task WriteRecordsAsync(IEnumerable`1<T> records, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("CsvHelper.CsvWriter/<WriteRecordsAsync>d__66`1")]
public virtual Task WriteRecordsAsync(IAsyncEnumerable`1<T> records, CancellationToken cancellationToken);
    public virtual void NextRecord();
    [AsyncStateMachineAttribute("CsvHelper.CsvWriter/<NextRecordAsync>d__68")]
public virtual Task NextRecordAsync();
    public virtual void Flush();
    [AsyncStateMachineAttribute("CsvHelper.CsvWriter/<FlushAsync>d__70")]
public virtual Task FlushAsync();
    protected virtual void FlushBuffer();
    [AsyncStateMachineAttribute("CsvHelper.CsvWriter/<FlushBufferAsync>d__72")]
protected virtual Task FlushBufferAsync();
    public virtual bool CanWrite(MemberMap memberMap);
    [NullableContextAttribute("2")]
public virtual RecordTypeInfo GetTypeInfoForRecord(T record);
    [NullableContextAttribute("2")]
protected virtual string SanitizeForInjection(string field);
    [NullableContextAttribute("2")]
protected void WriteToBuffer(string value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("CsvHelper.CsvWriter/<DisposeAsync>d__79")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("CsvHelper.CsvWriter/<DisposeAsync>d__80")]
protected virtual ValueTask DisposeAsync(bool disposing);
    [NullableContextAttribute("2")]
private bool WriteHeaderFromType();
    [NullableContextAttribute("2")]
private bool WriteHeaderFromRecord(object record);
}
public class CsvHelper.Delegates.GetDelimiter : MulticastDelegate {
    public GetDelimiter(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(GetDelimiterArgs args);
    public virtual IAsyncResult BeginInvoke(GetDelimiterArgs args, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.Delegates.GetDelimiterArgs : ValueType {
    public string Text;
    public IParserConfiguration Configuration;
    public GetDelimiterArgs(string text, IParserConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.DynamicRecordCreator : RecordCreator {
    public DynamicRecordCreator(CsvReader reader);
    protected virtual Delegate CreateCreateRecordDelegate(Type recordType);
    protected virtual object CreateDynamicRecord();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.DynamicRecordWriter : RecordWriter {
    private Hashtable getters;
    public DynamicRecordWriter(CsvWriter writer);
    protected virtual Action`1<T> CreateWriteDelegate(Type type);
    private object GetValue(string name, IDynamicMetaObjectProvider target);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <CreateWriteDelegate>b__2_0(T r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.ExpandoObjectRecordWriter : RecordWriter {
    public ExpandoObjectRecordWriter(CsvWriter writer);
    protected virtual Action`1<T> CreateWriteDelegate(Type recordType);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <CreateWriteDelegate>b__1_0(T r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.ExpressionManager : object {
    [NullableAttribute("2")]
private CsvReader reader;
    [NullableAttribute("2")]
private CsvWriter writer;
    public ExpressionManager(CsvReader reader);
    public ExpressionManager(CsvWriter writer);
    public virtual void CreateConstructorArgumentExpressionsForMapping(ClassMap map, List`1<Expression> argumentExpressions);
    public virtual void CreateMemberAssignmentsForMapping(ClassMap mapping, List`1<MemberAssignment> assignments);
    public virtual Expression CreateGetFieldExpression(MemberMap memberMap);
    public virtual Expression CreateGetMemberExpression(Expression recordExpression, ClassMap mapping, MemberMap memberMap);
    public virtual BlockExpression CreateInstanceAndAssignMembers(Type recordType, List`1<MemberAssignment> assignments);
    public virtual Expression CreateTypeConverterExpression(MemberMap memberMap, Expression fieldExpression);
    public virtual Expression CreateTypeConverterExpression(ParameterMap parameterMap, Expression fieldExpression);
    public virtual Expression CreateDefaultExpression(MemberMap memberMap, Expression fieldExpression);
    public virtual Expression CreateDefaultExpression(ParameterMap parameterMap, Expression fieldExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.ObjectRecordCreator : RecordCreator {
    public ObjectRecordCreator(CsvReader reader);
    protected virtual Delegate CreateCreateRecordDelegate(Type recordType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.ObjectRecordWriter : RecordWriter {
    public ObjectRecordWriter(CsvWriter writer);
    protected virtual Action`1<T> CreateWriteDelegate(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.PrimitiveRecordCreator : RecordCreator {
    public PrimitiveRecordCreator(CsvReader reader);
    protected virtual Delegate CreateCreateRecordDelegate(Type recordType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.PrimitiveRecordWriter : RecordWriter {
    public PrimitiveRecordWriter(CsvWriter writer);
    protected virtual Action`1<T> CreateWriteDelegate(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class CsvHelper.Expressions.RecordCreator : object {
    private Dictionary`2<Type, Delegate> createRecordFuncs;
    [CompilerGeneratedAttribute]
private CsvReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionManager <ExpressionManager>k__BackingField;
    protected CsvReader Reader { get; private set; }
    protected ExpressionManager ExpressionManager { get; private set; }
    public RecordCreator(CsvReader reader);
    [CompilerGeneratedAttribute]
protected CsvReader get_Reader();
    [CompilerGeneratedAttribute]
private void set_Reader(CsvReader value);
    [CompilerGeneratedAttribute]
protected ExpressionManager get_ExpressionManager();
    [CompilerGeneratedAttribute]
private void set_ExpressionManager(ExpressionManager value);
    public virtual Func`1<T> GetCreateRecordDelegate(Type recordType);
    protected abstract virtual Delegate CreateCreateRecordDelegate(Type recordType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.RecordCreatorFactory : object {
    private DynamicRecordCreator dynamicRecordCreator;
    private PrimitiveRecordCreator primitiveRecordCreator;
    private ObjectRecordCreator objectRecordCreator;
    public RecordCreatorFactory(CsvReader reader);
    public virtual RecordCreator MakeRecordCreator(Type recordType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.RecordHydrator : object {
    private CsvReader reader;
    private ExpressionManager expressionManager;
    private Dictionary`2<Type, Delegate> hydrateRecordActions;
    public RecordHydrator(CsvReader reader);
    public void Hydrate(T record);
    protected virtual Action`1<T> GetHydrateRecordAction();
    protected virtual Action`1<T> CreateHydrateRecordAction();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.RecordManager : object {
    [NullableAttribute("2")]
private RecordCreatorFactory recordCreatorFactory;
    [NullableAttribute("2")]
private RecordHydrator recordHydrator;
    [NullableAttribute("2")]
private RecordWriterFactory recordWriterFactory;
    public RecordManager(CsvReader reader);
    public RecordManager(CsvWriter writer);
    public Func`1<T> GetReadDelegate(Type recordType);
    public void Hydrate(T record);
    public Action`1<T> GetWriteDelegate(RecordTypeInfo typeInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class CsvHelper.Expressions.RecordWriter : object {
    private Dictionary`2<int, Delegate> typeActions;
    private int objectHashCode;
    [CompilerGeneratedAttribute]
private CsvWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionManager <ExpressionManager>k__BackingField;
    protected CsvWriter Writer { get; private set; }
    protected ExpressionManager ExpressionManager { get; private set; }
    public RecordWriter(CsvWriter writer);
    [CompilerGeneratedAttribute]
protected CsvWriter get_Writer();
    [CompilerGeneratedAttribute]
private void set_Writer(CsvWriter value);
    [CompilerGeneratedAttribute]
protected ExpressionManager get_ExpressionManager();
    [CompilerGeneratedAttribute]
private void set_ExpressionManager(ExpressionManager value);
    public virtual Action`1<T> GetWriteDelegate(RecordTypeInfo typeInfo);
    protected virtual Action`1<T> CreateWriteDelegate(T record);
    protected abstract virtual Action`1<T> CreateWriteDelegate(Type recordType);
    protected virtual Action`1<T> CombineDelegates(IEnumerable`1<Action`1<T>> delegates);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Expressions.RecordWriterFactory : object {
    private ExpandoObjectRecordWriter expandoObjectRecordWriter;
    private DynamicRecordWriter dynamicRecordWriter;
    private PrimitiveRecordWriter primitiveRecordWriter;
    private ObjectRecordWriter objectRecordWriter;
    public RecordWriterFactory(CsvWriter writer);
    public virtual RecordWriter MakeRecordWriter(Type recordType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.Factory : object {
    public virtual IParser CreateParser(TextReader reader, CsvConfiguration configuration);
    public virtual IParser CreateParser(TextReader reader, CultureInfo cultureInfo);
    public virtual IReader CreateReader(TextReader reader, CsvConfiguration configuration);
    public virtual IReader CreateReader(TextReader reader, CultureInfo cultureInfo);
    public virtual IReader CreateReader(IParser parser);
    public virtual IWriter CreateWriter(TextWriter writer, CsvConfiguration configuration);
    public virtual IWriter CreateWriter(TextWriter writer, CultureInfo cultureInfo);
    public sealed virtual IHasMap`1<T> CreateClassMapBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class CsvHelper.FastDynamicObject : object {
    private Dictionary`2<string, object> dict;
    private object System.Collections.Generic.IDictionary<System.String,System.Object>.Item { get; private set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.Keys { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.Values { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    private sealed virtual override object System.Collections.Generic.IDictionary<System.String,System.Object>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.set_Item(string key, object value);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Keys();
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    private object SetValue(string key, object value);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string key, object value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(string key);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(string key, Object& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class CsvHelper.FieldCache : object {
    private int maxFieldSize;
    private int size;
    private Int32[] buckets;
    private Entry[] entries;
    private int count;
    public FieldCache(int initialSize, int maxFieldSize);
    public string GetField(Char[] buffer, int start, int length);
    private UInt32 GetHashCode(Char[] buffer, int start, int length);
    private Int32& GetBucket(UInt32 hashCode);
    private void Resize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.FieldValidationException : ValidationException {
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    public string Field { get; private set; }
    public FieldValidationException(CsvContext context, string field);
    public FieldValidationException(CsvContext context, string field, string message);
    public FieldValidationException(CsvContext context, string field, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
private void set_Field(string value);
}
public class CsvHelper.GetConstructor : MulticastDelegate {
    public GetConstructor(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ConstructorInfo Invoke(GetConstructorArgs args);
    public virtual IAsyncResult BeginInvoke(GetConstructorArgs args, AsyncCallback callback, object object);
    public virtual ConstructorInfo EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.GetConstructorArgs : ValueType {
    public Type ClassType;
    public GetConstructorArgs(Type classType);
}
public class CsvHelper.GetDynamicPropertyName : MulticastDelegate {
    public GetDynamicPropertyName(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(GetDynamicPropertyNameArgs args);
    public virtual IAsyncResult BeginInvoke(GetDynamicPropertyNameArgs args, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.GetDynamicPropertyNameArgs : ValueType {
    public int FieldIndex;
    public CsvContext Context;
    public GetDynamicPropertyNameArgs(int fieldIndex, CsvContext context);
}
public class CsvHelper.HeaderValidated : MulticastDelegate {
    public HeaderValidated(object object, IntPtr method);
    public virtual void Invoke(HeaderValidatedArgs args);
    public virtual IAsyncResult BeginInvoke(HeaderValidatedArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.HeaderValidatedArgs : ValueType {
    public InvalidHeader[] InvalidHeaders;
    public CsvContext Context;
    public HeaderValidatedArgs(InvalidHeader[] invalidHeaders, CsvContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.HeaderValidationException : ValidationException {
    [CompilerGeneratedAttribute]
private InvalidHeader[] <InvalidHeaders>k__BackingField;
    public InvalidHeader[] InvalidHeaders { get; private set; }
    public HeaderValidationException(CsvContext context, InvalidHeader[] invalidHeaders);
    public HeaderValidationException(CsvContext context, InvalidHeader[] invalidHeaders, string message);
    public HeaderValidationException(CsvContext context, InvalidHeader[] invalidHeaders, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public InvalidHeader[] get_InvalidHeaders();
    [CompilerGeneratedAttribute]
private void set_InvalidHeaders(InvalidHeader[] value);
}
[NullableContextAttribute("1")]
public interface CsvHelper.IFactory {
    public abstract virtual IParser CreateParser(TextReader reader, CsvConfiguration configuration);
    public abstract virtual IParser CreateParser(TextReader reader, CultureInfo cultureInfo);
    public abstract virtual IReader CreateReader(TextReader reader, CsvConfiguration configuration);
    public abstract virtual IReader CreateReader(TextReader reader, CultureInfo cultureInfo);
    public abstract virtual IReader CreateReader(IParser parser);
    public abstract virtual IWriter CreateWriter(TextWriter writer, CsvConfiguration configuration);
    public abstract virtual IWriter CreateWriter(TextWriter writer, CultureInfo cultureInfo);
    public abstract virtual IHasMap`1<T> CreateClassMapBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.InvalidHeader : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public List`1<string> Names { get; public set; }
    public int Index { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Names();
    [CompilerGeneratedAttribute]
public void set_Names(List`1<string> value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
}
[NullableContextAttribute("1")]
public interface CsvHelper.IObjectResolver {
    public bool UseFallback { get; }
    public Func`2<Type, bool> CanResolve { get; }
    public Func`3<Type, Object[], object> ResolveFunction { get; }
    public abstract virtual bool get_UseFallback();
    public abstract virtual Func`2<Type, bool> get_CanResolve();
    public abstract virtual Func`3<Type, Object[], object> get_ResolveFunction();
    public abstract virtual object Resolve(Type type, Object[] constructorArgs);
    public abstract virtual T Resolve(Object[] constructorArgs);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface CsvHelper.IParser {
    public long ByteCount { get; }
    public long CharCount { get; }
    public int Count { get; }
    public string Item { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Record { get; }
    public string RawRecord { get; }
    public int Row { get; }
    public int RawRow { get; }
    public string Delimiter { get; }
    public CsvContext Context { get; }
    public IParserConfiguration Configuration { get; }
    public abstract virtual long get_ByteCount();
    public abstract virtual long get_CharCount();
    public abstract virtual int get_Count();
    public abstract virtual string get_Item(int index);
    public abstract virtual String[] get_Record();
    public abstract virtual string get_RawRecord();
    public abstract virtual int get_Row();
    public abstract virtual int get_RawRow();
    public abstract virtual string get_Delimiter();
    public abstract virtual CsvContext get_Context();
    public abstract virtual IParserConfiguration get_Configuration();
    public abstract virtual bool Read();
    public abstract virtual Task`1<bool> ReadAsync();
}
[NullableContextAttribute("1")]
public interface CsvHelper.IReader {
    public abstract virtual bool ReadHeader();
    public abstract virtual bool Read();
    public abstract virtual Task`1<bool> ReadAsync();
    public abstract virtual IEnumerable`1<T> GetRecords();
    public abstract virtual IEnumerable`1<T> GetRecords(T anonymousTypeDefinition);
    public abstract virtual IEnumerable`1<object> GetRecords(Type type);
    public abstract virtual IEnumerable`1<T> EnumerateRecords(T record);
    public abstract virtual IAsyncEnumerable`1<T> GetRecordsAsync(CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<T> GetRecordsAsync(T anonymousTypeDefinition, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<object> GetRecordsAsync(Type type, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<T> EnumerateRecordsAsync(T record, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface CsvHelper.IReaderRow {
    public int ColumnCount { get; }
    public int CurrentIndex { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] HeaderRecord { get; }
    public IParser Parser { get; }
    public CsvContext Context { get; }
    public IReaderConfiguration Configuration { get; }
    [NullableAttribute("2")]
public string Item { get; }
    [NullableAttribute("2")]
public string Item { get; }
    [NullableAttribute("2")]
public string Item { get; }
    public abstract virtual int get_ColumnCount();
    public abstract virtual int get_CurrentIndex();
    public abstract virtual String[] get_HeaderRecord();
    public abstract virtual IParser get_Parser();
    public abstract virtual CsvContext get_Context();
    public abstract virtual IReaderConfiguration get_Configuration();
    [NullableContextAttribute("2")]
public abstract virtual string get_Item(int index);
    public abstract virtual string get_Item(string name);
    public abstract virtual string get_Item(string name, int index);
    [NullableContextAttribute("2")]
public abstract virtual string GetField(int index);
    public abstract virtual string GetField(string name);
    public abstract virtual string GetField(string name, int index);
    public abstract virtual object GetField(Type type, int index);
    public abstract virtual object GetField(Type type, string name);
    public abstract virtual object GetField(Type type, string name, int index);
    public abstract virtual object GetField(Type type, int index, ITypeConverter converter);
    public abstract virtual object GetField(Type type, string name, ITypeConverter converter);
    public abstract virtual object GetField(Type type, string name, int index, ITypeConverter converter);
    [NullableContextAttribute("2")]
public abstract virtual T GetField(int index);
    [NullableContextAttribute("2")]
public abstract virtual T GetField(string name);
    [NullableContextAttribute("2")]
public abstract virtual T GetField(string name, int index);
    [NullableContextAttribute("2")]
public abstract virtual T GetField(int index, ITypeConverter converter);
    public abstract virtual T GetField(string name, ITypeConverter converter);
    public abstract virtual T GetField(string name, int index, ITypeConverter converter);
    [NullableContextAttribute("2")]
public abstract virtual T GetField(int index);
    public abstract virtual T GetField(string name);
    public abstract virtual T GetField(string name, int index);
    public abstract virtual bool TryGetField(Type type, int index, Object& field);
    public abstract virtual bool TryGetField(Type type, string name, Object& field);
    public abstract virtual bool TryGetField(Type type, string name, int index, Object& field);
    public abstract virtual bool TryGetField(Type type, int index, ITypeConverter converter, Object& field);
    public abstract virtual bool TryGetField(Type type, string name, ITypeConverter converter, Object& field);
    public abstract virtual bool TryGetField(Type type, string name, int index, ITypeConverter converter, Object& field);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetField(int index, T& field);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetField(string name, T& field);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetField(string name, int index, T& field);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetField(int index, ITypeConverter converter, T& field);
    public abstract virtual bool TryGetField(string name, ITypeConverter converter, T& field);
    public abstract virtual bool TryGetField(string name, int index, ITypeConverter converter, T& field);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetField(int index, T& field);
    public abstract virtual bool TryGetField(string name, T& field);
    public abstract virtual bool TryGetField(string name, int index, T& field);
    public abstract virtual T GetRecord();
    public abstract virtual T GetRecord(T anonymousTypeDefinition);
    public abstract virtual object GetRecord(Type type);
}
[NullableContextAttribute("1")]
public interface CsvHelper.IWriter {
    public abstract virtual void Flush();
    public abstract virtual Task FlushAsync();
    public abstract virtual void NextRecord();
    public abstract virtual Task NextRecordAsync();
    public abstract virtual void WriteRecords(IEnumerable records);
    public abstract virtual void WriteRecords(IEnumerable`1<T> records);
    public abstract virtual Task WriteRecordsAsync(IEnumerable records, CancellationToken cancellationToken);
    public abstract virtual Task WriteRecordsAsync(IEnumerable`1<T> records, CancellationToken cancellationToken);
    public abstract virtual Task WriteRecordsAsync(IAsyncEnumerable`1<T> records, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface CsvHelper.IWriterRow {
    public String[] HeaderRecord { get; }
    public int Row { get; }
    public int Index { get; }
    [NullableAttribute("1")]
public CsvContext Context { get; }
    [NullableAttribute("1")]
public IWriterConfiguration Configuration { get; }
    public abstract virtual String[] get_HeaderRecord();
    public abstract virtual int get_Row();
    public abstract virtual int get_Index();
    [NullableContextAttribute("1")]
public abstract virtual CsvContext get_Context();
    [NullableContextAttribute("1")]
public abstract virtual IWriterConfiguration get_Configuration();
    [NullableContextAttribute("1")]
public abstract virtual void WriteConvertedField(string field, Type fieldType);
    public abstract virtual void WriteField(string field);
    public abstract virtual void WriteField(string field, bool shouldQuote);
    public abstract virtual void WriteField(T field);
    public abstract virtual void WriteField(T field, ITypeConverter converter);
    public abstract virtual void WriteField(T field);
    public abstract virtual void WriteComment(string comment);
    public abstract virtual void WriteHeader();
    [NullableContextAttribute("1")]
public abstract virtual void WriteHeader(Type type);
    [NullableContextAttribute("1")]
public abstract virtual void WriteRecord(T record);
}
[ExtensionAttribute]
internal static class CsvHelper.LinkedListExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void Drop(LinkedList`1<T> list, LinkedListNode`1<T> node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.MaxFieldSizeException : CsvHelperException {
    public MaxFieldSizeException(CsvContext context);
    public MaxFieldSizeException(CsvContext context, string message);
    public MaxFieldSizeException(CsvContext context, string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.MissingFieldException : ReaderException {
    public MissingFieldException(CsvContext context);
    public MissingFieldException(CsvContext context, string message);
    public MissingFieldException(CsvContext context, string message, Exception innerException);
}
public class CsvHelper.MissingFieldFound : MulticastDelegate {
    public MissingFieldFound(object object, IntPtr method);
    public virtual void Invoke(MissingFieldFoundArgs args);
    public virtual IAsyncResult BeginInvoke(MissingFieldFoundArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.MissingFieldFoundArgs : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] HeaderNames;
    public int Index;
    public CsvContext Context;
    public MissingFieldFoundArgs(String[] headerNames, int index, CsvContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.ObjectCreator : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<int, Func`2<Object[], object>> cache;
    public T CreateInstance(Object[] args);
    public object CreateInstance(Type type, Object[] args);
    private Func`2<Object[], object> GetFunc(Type type, Object[] args);
    private static Type[] GetArgTypes(Object[] args);
    private static int GetConstructorCacheKey(Type type, Type[] args);
    private static Func`2<Object[], object> CreateInstanceFunc(Type type, Type[] argTypes);
    private static ConstructorInfo GetConstructor(ConstructorInfo[] constructors, Type type, Type[] argTypes);
    private static MissingMethodException GetConstructorNotFoundException(Type type, Type[] argTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.ObjectResolver : object {
    private static IObjectResolver current;
    private ObjectCreator objectCreator;
    [CompilerGeneratedAttribute]
private bool <UseFallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <CanResolve>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<Type, Object[], object> <ResolveFunction>k__BackingField;
    public static IObjectResolver Current { get; public set; }
    public bool UseFallback { get; private set; }
    public Func`2<Type, bool> CanResolve { get; private set; }
    public Func`3<Type, Object[], object> ResolveFunction { get; private set; }
    private static ObjectResolver();
    public ObjectResolver(Func`2<Type, bool> canResolve, Func`3<Type, Object[], object> resolveFunction, bool useFallback);
    public static IObjectResolver get_Current();
    public static void set_Current(IObjectResolver value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseFallback();
    [CompilerGeneratedAttribute]
private void set_UseFallback(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, bool> get_CanResolve();
    [CompilerGeneratedAttribute]
private void set_CanResolve(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`3<Type, Object[], object> get_ResolveFunction();
    [CompilerGeneratedAttribute]
private void set_ResolveFunction(Func`3<Type, Object[], object> value);
    public sealed virtual object Resolve(Type type, Object[] constructorArgs);
    public sealed virtual T Resolve(Object[] constructorArgs);
    private object ResolveWithObjectCreator(Type type, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.ParserException : CsvHelperException {
    public ParserException(CsvContext context);
    public ParserException(CsvContext context, string message);
    public ParserException(CsvContext context, string message, Exception innerException);
}
public class CsvHelper.PrepareHeaderForMatch : MulticastDelegate {
    public PrepareHeaderForMatch(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(PrepareHeaderForMatchArgs args);
    public virtual IAsyncResult BeginInvoke(PrepareHeaderForMatchArgs args, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.PrepareHeaderForMatchArgs : ValueType {
    public string Header;
    public int FieldIndex;
    public PrepareHeaderForMatchArgs(string header, int fieldIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.ReaderException : CsvHelperException {
    public ReaderException(CsvContext context);
    public ReaderException(CsvContext context, string message);
    public ReaderException(CsvContext context, string message, Exception innerException);
}
public class CsvHelper.ReadingExceptionOccurred : MulticastDelegate {
    public ReadingExceptionOccurred(object object, IntPtr method);
    public virtual bool Invoke(ReadingExceptionOccurredArgs args);
    public virtual IAsyncResult BeginInvoke(ReadingExceptionOccurredArgs args, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class CsvHelper.ReadingExceptionOccurredArgs : ValueType {
    [CompilerGeneratedAttribute]
private object <Record>k__BackingField;
    [NullableAttribute("1")]
public CsvHelperException Exception;
    public object Record { get; public set; }
    [NullableContextAttribute("1")]
public ReadingExceptionOccurredArgs(CsvHelperException exception);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Record();
    [CompilerGeneratedAttribute]
public void set_Record(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.RecordTypeInfo : ValueType {
    [CompilerGeneratedAttribute]
private Type <RecordType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsObject>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HashCode>k__BackingField;
    public Type RecordType { get; }
    public bool IsObject { get; }
    public int HashCode { get; }
    public RecordTypeInfo(Type recordType, bool isObject);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_RecordType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsObject();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_HashCode();
}
public class CsvHelper.ReferenceHeaderPrefix : MulticastDelegate {
    public ReferenceHeaderPrefix(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(ReferenceHeaderPrefixArgs args);
    public virtual IAsyncResult BeginInvoke(ReferenceHeaderPrefixArgs args, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.ReferenceHeaderPrefixArgs : ValueType {
    public Type MemberType;
    public string MemberName;
    public ReferenceHeaderPrefixArgs(Type memberType, string memberName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class CsvHelper.ReflectionExtensions : object {
    [ExtensionAttribute]
public static Type MemberType(MemberInfo member);
    [ExtensionAttribute]
public static MemberExpression GetMemberExpression(MemberInfo member, Expression expression);
    [ExtensionAttribute]
public static bool IsAnonymous(Type type);
    [ExtensionAttribute]
public static bool HasParameterlessConstructor(Type type);
    [ExtensionAttribute]
public static bool HasConstructor(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetConstructorWithMostParameters(Type type);
    [ExtensionAttribute]
public static bool IsUserDefinedStruct(Type type);
    [ExtensionAttribute]
public static string GetDefinition(ConstructorInfo constructor);
    [ExtensionAttribute]
public static string GetDefinition(ParameterInfo parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class CsvHelper.ReflectionHelper : object {
    public static PropertyInfo GetDeclaringProperty(Type type, PropertyInfo property, BindingFlags flags);
    public static FieldInfo GetDeclaringField(Type type, FieldInfo field, BindingFlags flags);
    public static List`1<PropertyInfo> GetUniqueProperties(Type type, BindingFlags flags, bool overwrite);
    public static List`1<FieldInfo> GetUniqueFields(Type type, BindingFlags flags, bool overwrite);
    public static MemberInfo GetMember(Expression`1<Func`2<TModel, TProperty>> expression);
    [NullableContextAttribute("2")]
public static Stack`1<MemberInfo> GetMembers(Expression`1<Func`2<TModel, TProperty>> expression);
    private static MemberExpression GetMemberExpression(Expression expression);
}
public class CsvHelper.ShouldQuote : MulticastDelegate {
    public ShouldQuote(object object, IntPtr method);
    public virtual bool Invoke(ShouldQuoteArgs args);
    public virtual IAsyncResult BeginInvoke(ShouldQuoteArgs args, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.ShouldQuoteArgs : ValueType {
    [NullableAttribute("2")]
public string Field;
    public Type FieldType;
    public IWriterRow Row;
    public ShouldQuoteArgs(string field, Type fieldType, IWriterRow row);
}
public class CsvHelper.ShouldSkipRecord : MulticastDelegate {
    public ShouldSkipRecord(object object, IntPtr method);
    public virtual bool Invoke(ShouldSkipRecordArgs args);
    public virtual IAsyncResult BeginInvoke(ShouldSkipRecordArgs args, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.ShouldSkipRecordArgs : ValueType {
    public IReaderRow Row;
    public ShouldSkipRecordArgs(IReaderRow row);
}
public class CsvHelper.ShouldUseConstructorParameters : MulticastDelegate {
    public ShouldUseConstructorParameters(object object, IntPtr method);
    public virtual bool Invoke(ShouldUseConstructorParametersArgs args);
    public virtual IAsyncResult BeginInvoke(ShouldUseConstructorParametersArgs args, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.ShouldUseConstructorParametersArgs : ValueType {
    public Type ParameterType;
    public ShouldUseConstructorParametersArgs(Type parameterType);
}
public class CsvHelper.TypeConversion.ArrayConverter : IEnumerableConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.BigIntegerConverter : DefaultTypeConverter {
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.BooleanConverter : DefaultTypeConverter {
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.ByteArrayConverter : DefaultTypeConverter {
    private ByteArrayConverterOptions options;
    private string HexStringPrefix;
    private byte ByteLength;
    public ByteArrayConverter(ByteArrayConverterOptions options);
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    private string ByteArrayToHexString(Byte[] byteArray);
    private Byte[] HexStringToByteArray(string hex);
    private void ValidateOptions();
}
[FlagsAttribute]
public enum CsvHelper.TypeConversion.ByteArrayConverterOptions : Enum {
    public int value__;
    public static ByteArrayConverterOptions None;
    public static ByteArrayConverterOptions Hexadecimal;
    public static ByteArrayConverterOptions Base64;
    public static ByteArrayConverterOptions HexDashes;
    public static ByteArrayConverterOptions HexInclude0x;
}
public class CsvHelper.TypeConversion.ByteConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.CharConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.CollectionConverterFactory : object {
    private int dictionaryTypeHashCode;
    private List`1<int> enumerableTypeHashCodes;
    public sealed virtual bool CanCreate(Type type);
    public sealed virtual bool Create(Type type, TypeConverterCache cache, ITypeConverter& typeConverter);
}
public class CsvHelper.TypeConversion.CollectionGenericConverter : IEnumerableConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.DateTimeConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.DateTimeOffsetConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.DecimalConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.DefaultTypeConverter : object {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    [NullableContextAttribute("1")]
public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.DoubleConverter : DefaultTypeConverter {
    private Lazy`1<string> defaultFormat;
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.EnumConverter : DefaultTypeConverter {
    private Type type;
    private Dictionary`2<string, string> enumNamesByAttributeNames;
    private Dictionary`2<string, string> enumNamesByAttributeNamesIgnoreCase;
    private Dictionary`2<object, string> attributeNamesByEnumValues;
    public EnumConverter(Type type);
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.EnumConverterFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanCreate(Type type);
    [NullableContextAttribute("1")]
public sealed virtual bool Create(Type type, TypeConverterCache cache, ITypeConverter& typeConverter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.EnumerableConverter : DefaultTypeConverter {
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.GuidConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.IDictionaryConverter : DefaultTypeConverter {
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.IDictionaryGenericConverter : IDictionaryConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.IEnumerableConverter : DefaultTypeConverter {
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.IEnumerableGenericConverter : IEnumerableConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.Int16Converter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.Int32Converter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.Int64Converter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
public interface CsvHelper.TypeConversion.ITypeConverter {
    public abstract virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    public abstract virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
public interface CsvHelper.TypeConversion.ITypeConverterFactory {
    public abstract virtual bool CanCreate(Type type);
    public abstract virtual bool Create(Type type, TypeConverterCache cache, ITypeConverter& typeConverter);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class CsvHelper.TypeConversion.NotSupportedTypeConverter`1 : TypeConverter`1<T> {
    public virtual T ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    public virtual string ConvertToString(T value, IWriterRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.NullableConverter : DefaultTypeConverter {
    [CompilerGeneratedAttribute]
private Type <NullableType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeConverter <UnderlyingTypeConverter>k__BackingField;
    public Type NullableType { get; private set; }
    [NullableAttribute("2")]
public Type UnderlyingType { get; private set; }
    public ITypeConverter UnderlyingTypeConverter { get; private set; }
    public NullableConverter(Type type, TypeConverterCache typeConverterFactory);
    [CompilerGeneratedAttribute]
public Type get_NullableType();
    [CompilerGeneratedAttribute]
private void set_NullableType(Type value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_UnderlyingType(Type value);
    [CompilerGeneratedAttribute]
public ITypeConverter get_UnderlyingTypeConverter();
    [CompilerGeneratedAttribute]
private void set_UnderlyingTypeConverter(ITypeConverter value);
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.NullableConverterFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanCreate(Type type);
    [NullableContextAttribute("1")]
public sealed virtual bool Create(Type type, TypeConverterCache cache, ITypeConverter& typeConverter);
}
public class CsvHelper.TypeConversion.SByteConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.SingleConverter : DefaultTypeConverter {
    private Lazy`1<string> defaultFormat;
    public virtual string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
    public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.StringConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.TimeSpanConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class CsvHelper.TypeConversion.TypeConverter`1 : object {
    public abstract virtual T ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    public abstract virtual string ConvertToString(T value, IWriterRow row, MemberMapData memberMapData);
    private sealed virtual override object CsvHelper.TypeConversion.ITypeConverter.ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
    private sealed virtual override string CsvHelper.TypeConversion.ITypeConverter.ConvertToString(object value, IWriterRow row, MemberMapData memberMapData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.TypeConverterCache : object {
    private Dictionary`2<Type, ITypeConverter> typeConverters;
    private List`1<ITypeConverterFactory> defaultTypeConverterFactories;
    private List`1<ITypeConverterFactory> typeConverterFactories;
    private Dictionary`2<Type, ITypeConverterFactory> typeConverterFactoryCache;
    public bool Contains(Type type);
    public void AddConverterFactory(ITypeConverterFactory typeConverterFactory);
    public void AddConverter(Type type, ITypeConverter typeConverter);
    public void AddConverter(TypeConverter`1<T> typeConverter);
    public void AddConverter(ITypeConverter typeConverter);
    public void AddConverter(ITypeConverter typeConverter);
    public void RemoveConverter(Type type);
    [NullableContextAttribute("2")]
public void RemoveConverter();
    public void RemoveConverterFactory(ITypeConverterFactory typeConverterFactory);
    public ITypeConverter GetConverter(Type type);
    public ITypeConverter GetConverter(MemberInfo member);
    public ITypeConverter GetConverter();
    private void CreateDefaultConverters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.TypeConverterException : CsvHelperException {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeConverter <TypeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberMapData <MemberMapData>k__BackingField;
    [NullableAttribute("2")]
public string Text { get; private set; }
    [NullableAttribute("2")]
public object Value { get; private set; }
    public ITypeConverter TypeConverter { get; private set; }
    public MemberMapData MemberMapData { get; private set; }
    public TypeConverterException(ITypeConverter typeConverter, MemberMapData memberMapData, string text, CsvContext context);
    public TypeConverterException(ITypeConverter typeConverter, MemberMapData memberMapData, object value, CsvContext context);
    public TypeConverterException(ITypeConverter typeConverter, MemberMapData memberMapData, string text, CsvContext context, string message);
    public TypeConverterException(ITypeConverter typeConverter, MemberMapData memberMapData, object value, CsvContext context, string message);
    public TypeConverterException(ITypeConverter typeConverter, MemberMapData memberMapData, string text, CsvContext context, string message, Exception innerException);
    public TypeConverterException(ITypeConverter typeConverter, MemberMapData memberMapData, object value, CsvContext context, string message, Exception innerException);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Text();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Text(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Value(object value);
    [CompilerGeneratedAttribute]
public ITypeConverter get_TypeConverter();
    [CompilerGeneratedAttribute]
private void set_TypeConverter(ITypeConverter value);
    [CompilerGeneratedAttribute]
public MemberMapData get_MemberMapData();
    [CompilerGeneratedAttribute]
private void set_MemberMapData(MemberMapData value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.TypeConverterOptions : object {
    private static String[] defaultBooleanTrueValues;
    private static String[] defaultBooleanFalseValues;
    private static String[] defaultNullValues;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeStyles> <DateTimeStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpanStyles> <TimeSpanStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NumberStyles> <NumberStyles>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Formats>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UriKind> <UriKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnumIgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <BooleanTrueValues>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <BooleanFalseValues>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <NullValues>k__BackingField;
    [NullableAttribute("2")]
public CultureInfo CultureInfo { get; public set; }
    public Nullable`1<DateTimeStyles> DateTimeStyle { get; public set; }
    public Nullable`1<TimeSpanStyles> TimeSpanStyle { get; public set; }
    public Nullable`1<NumberStyles> NumberStyles { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Formats { get; public set; }
    public Nullable`1<UriKind> UriKind { get; public set; }
    public Nullable`1<bool> EnumIgnoreCase { get; public set; }
    public List`1<string> BooleanTrueValues { get; }
    public List`1<string> BooleanFalseValues { get; }
    public List`1<string> NullValues { get; }
    private static TypeConverterOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CultureInfo get_CultureInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CultureInfo(CultureInfo value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeStyles> get_DateTimeStyle();
    [CompilerGeneratedAttribute]
public void set_DateTimeStyle(Nullable`1<DateTimeStyles> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpanStyles> get_TimeSpanStyle();
    [CompilerGeneratedAttribute]
public void set_TimeSpanStyle(Nullable`1<TimeSpanStyles> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NumberStyles> get_NumberStyles();
    [CompilerGeneratedAttribute]
public void set_NumberStyles(Nullable`1<NumberStyles> value);
    [CompilerGeneratedAttribute]
public String[] get_Formats();
    [CompilerGeneratedAttribute]
public void set_Formats(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<UriKind> get_UriKind();
    [CompilerGeneratedAttribute]
public void set_UriKind(Nullable`1<UriKind> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnumIgnoreCase();
    [CompilerGeneratedAttribute]
public void set_EnumIgnoreCase(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_BooleanTrueValues();
    [CompilerGeneratedAttribute]
public List`1<string> get_BooleanFalseValues();
    [CompilerGeneratedAttribute]
public List`1<string> get_NullValues();
    public static TypeConverterOptions Merge(TypeConverterOptions[] sources);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.TypeConversion.TypeConverterOptionsCache : object {
    private Dictionary`2<Type, TypeConverterOptions> typeConverterOptions;
    public void AddOptions(Type type, TypeConverterOptions options);
    public void AddOptions(TypeConverterOptions options);
    public void AddOptions(TypeConverterOptions options);
    public void RemoveOptions(Type type);
    [NullableContextAttribute("2")]
public void RemoveOptions();
    public TypeConverterOptions GetOptions(Type type);
    public TypeConverterOptions GetOptions();
}
public class CsvHelper.TypeConversion.UInt16Converter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.UInt32Converter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.UInt64Converter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.TypeConversion.UriConverter : DefaultTypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData);
}
public class CsvHelper.Validate : MulticastDelegate {
    public Validate(object object, IntPtr method);
    public virtual bool Invoke(ValidateArgs args);
    public virtual IAsyncResult BeginInvoke(ValidateArgs args, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CsvHelper.ValidateArgs : ValueType {
    public string Field;
    public IReaderRow Row;
    public ValidateArgs(string field, IReaderRow row);
}
public class CsvHelper.ValidateMessage : MulticastDelegate {
    public ValidateMessage(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(ValidateArgs args);
    public virtual IAsyncResult BeginInvoke(ValidateArgs args, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class CsvHelper.ValidationException : CsvHelperException {
    public ValidationException(CsvContext context);
    public ValidationException(CsvContext context, string message);
    public ValidationException(CsvContext context, string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class CsvHelper.WriterException : CsvHelperException {
    public WriterException(CsvContext context);
    public WriterException(CsvContext context, string message);
    public WriterException(CsvContext context, string message, Exception innerException);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
