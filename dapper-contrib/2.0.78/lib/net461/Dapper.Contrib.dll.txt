[AttributeUsageAttribute("128")]
public class Dapper.Contrib.Extensions.ComputedAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Dapper.Contrib.Extensions.ExplicitKeyAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Dapper.Contrib.Extensions.KeyAttribute : Attribute {
}
[ExtensionAttribute]
public static class Dapper.Contrib.Extensions.SqlMapperExtensions : object {
    private static ConcurrentDictionary`2<RuntimeTypeHandle, IEnumerable`1<PropertyInfo>> KeyProperties;
    private static ConcurrentDictionary`2<RuntimeTypeHandle, IEnumerable`1<PropertyInfo>> ExplicitKeyProperties;
    private static ConcurrentDictionary`2<RuntimeTypeHandle, IEnumerable`1<PropertyInfo>> TypeProperties;
    private static ConcurrentDictionary`2<RuntimeTypeHandle, IEnumerable`1<PropertyInfo>> ComputedProperties;
    private static ConcurrentDictionary`2<RuntimeTypeHandle, string> GetQueries;
    private static ConcurrentDictionary`2<RuntimeTypeHandle, string> TypeTableName;
    private static ISqlAdapter DefaultAdapter;
    private static Dictionary`2<string, ISqlAdapter> AdapterDictionary;
    public static TableNameMapperDelegate TableNameMapper;
    public static GetDatabaseTypeDelegate GetDatabaseType;
    private static SqlMapperExtensions();
    [AsyncStateMachineAttribute("Dapper.Contrib.Extensions.SqlMapperExtensions/<GetAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<T> GetAsync(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetAllAsync(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("Dapper.Contrib.Extensions.SqlMapperExtensions/<GetAllAsyncImpl>d__2`1")]
private static Task`1<IEnumerable`1<T>> GetAllAsyncImpl(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string sql, Type type);
    [ExtensionAttribute]
public static Task`1<int> InsertAsync(IDbConnection connection, T entityToInsert, IDbTransaction transaction, Nullable`1<int> commandTimeout, ISqlAdapter sqlAdapter);
    [AsyncStateMachineAttribute("Dapper.Contrib.Extensions.SqlMapperExtensions/<UpdateAsync>d__4`1")]
[ExtensionAttribute]
public static Task`1<bool> UpdateAsync(IDbConnection connection, T entityToUpdate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("Dapper.Contrib.Extensions.SqlMapperExtensions/<DeleteAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<bool> DeleteAsync(IDbConnection connection, T entityToDelete, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("Dapper.Contrib.Extensions.SqlMapperExtensions/<DeleteAllAsync>d__6`1")]
[ExtensionAttribute]
public static Task`1<bool> DeleteAllAsync(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    private static List`1<PropertyInfo> ComputedPropertiesCache(Type type);
    private static List`1<PropertyInfo> ExplicitKeyPropertiesCache(Type type);
    private static List`1<PropertyInfo> KeyPropertiesCache(Type type);
    private static List`1<PropertyInfo> TypePropertiesCache(Type type);
    private static bool IsWriteable(PropertyInfo pi);
    private static PropertyInfo GetSingleKey(string method);
    [ExtensionAttribute]
public static T Get(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetAll(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    private static string GetTableName(Type type);
    [ExtensionAttribute]
public static long Insert(IDbConnection connection, T entityToInsert, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static bool Update(IDbConnection connection, T entityToUpdate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static bool Delete(IDbConnection connection, T entityToDelete, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static bool DeleteAll(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    private static ISqlAdapter GetFormatter(IDbConnection connection);
}
[AttributeUsageAttribute("4")]
public class Dapper.Contrib.Extensions.TableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public TableAttribute(string tableName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("128")]
public class Dapper.Contrib.Extensions.WriteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Write>k__BackingField;
    public bool Write { get; }
    public WriteAttribute(bool write);
    [CompilerGeneratedAttribute]
public bool get_Write();
}
public class FbAdapter : object {
    [AsyncStateMachineAttribute("FbAdapter/<InsertAsync>d__0")]
public sealed virtual Task`1<int> InsertAsync(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual int Insert(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual void AppendColumnName(StringBuilder sb, string columnName);
    public sealed virtual void AppendColumnNameEqualsValue(StringBuilder sb, string columnName);
}
public interface ISqlAdapter {
    public abstract virtual Task`1<int> InsertAsync(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public abstract virtual int Insert(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public abstract virtual void AppendColumnName(StringBuilder sb, string columnName);
    public abstract virtual void AppendColumnNameEqualsValue(StringBuilder sb, string columnName);
}
public class MySqlAdapter : object {
    [AsyncStateMachineAttribute("MySqlAdapter/<InsertAsync>d__0")]
public sealed virtual Task`1<int> InsertAsync(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual int Insert(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual void AppendColumnName(StringBuilder sb, string columnName);
    public sealed virtual void AppendColumnNameEqualsValue(StringBuilder sb, string columnName);
}
public class PostgresAdapter : object {
    [AsyncStateMachineAttribute("PostgresAdapter/<InsertAsync>d__0")]
public sealed virtual Task`1<int> InsertAsync(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual int Insert(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual void AppendColumnName(StringBuilder sb, string columnName);
    public sealed virtual void AppendColumnNameEqualsValue(StringBuilder sb, string columnName);
}
public class SqlCeServerAdapter : object {
    [AsyncStateMachineAttribute("SqlCeServerAdapter/<InsertAsync>d__0")]
public sealed virtual Task`1<int> InsertAsync(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual int Insert(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual void AppendColumnName(StringBuilder sb, string columnName);
    public sealed virtual void AppendColumnNameEqualsValue(StringBuilder sb, string columnName);
}
public class SQLiteAdapter : object {
    [AsyncStateMachineAttribute("SQLiteAdapter/<InsertAsync>d__0")]
public sealed virtual Task`1<int> InsertAsync(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual int Insert(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual void AppendColumnName(StringBuilder sb, string columnName);
    public sealed virtual void AppendColumnNameEqualsValue(StringBuilder sb, string columnName);
}
public class SqlServerAdapter : object {
    [AsyncStateMachineAttribute("SqlServerAdapter/<InsertAsync>d__0")]
public sealed virtual Task`1<int> InsertAsync(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual int Insert(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, string tableName, string columnList, string parameterList, IEnumerable`1<PropertyInfo> keyProperties, object entityToInsert);
    public sealed virtual void AppendColumnName(StringBuilder sb, string columnName);
    public sealed virtual void AppendColumnNameEqualsValue(StringBuilder sb, string columnName);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
