public class Dapper.FluentMap.Configuration.FluentConventionConfiguration : object {
    private Convention _convention;
    public FluentConventionConfiguration(Convention convention);
    public FluentConventionConfiguration ForEntity();
    public FluentConventionConfiguration ForEntitiesInCurrentAssembly(String[] namespaces);
    public FluentConventionConfiguration ForEntitiesInAssembly(Assembly assembly, String[] namespaces);
    private void MapProperties(Type type);
    private void AddConventionPropertyMap(PropertyInfo property, string columnName, bool caseSensitive);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class Dapper.FluentMap.Configuration.FluentMapConfiguration : object {
    public void AddMap(IEntityMap`1<TEntity> mapper);
    public FluentConventionConfiguration AddConvention();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public abstract class Dapper.FluentMap.Conventions.Convention : object {
    [CompilerGeneratedAttribute]
private IList`1<PropertyConventionConfiguration> <ConventionConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PropertyMap> <PropertyMaps>k__BackingField;
    public IList`1<PropertyConventionConfiguration> ConventionConfigurations { get; }
    public IList`1<PropertyMap> PropertyMaps { get; }
    [CompilerGeneratedAttribute]
public IList`1<PropertyConventionConfiguration> get_ConventionConfigurations();
    [CompilerGeneratedAttribute]
public IList`1<PropertyMap> get_PropertyMaps();
    protected PropertyConventionConfiguration Properties();
    protected PropertyConventionConfiguration Properties();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class Dapper.FluentMap.Conventions.ConventionPropertyConfiguration : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <PropertyTransformer>k__BackingField;
    internal string ColumnName { get; private set; }
    internal string Prefix { get; private set; }
    internal bool CaseSensitive { get; private set; }
    internal Func`2<string, string> PropertyTransformer { get; private set; }
    public ConventionPropertyConfiguration HasColumnName(string columnName);
    public ConventionPropertyConfiguration HasPrefix(string prefix);
    public ConventionPropertyConfiguration IsCaseInsensitive();
    public ConventionPropertyConfiguration Transform(Func`2<string, string> transformer);
    [CompilerGeneratedAttribute]
internal string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
internal string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
    [CompilerGeneratedAttribute]
internal bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
private void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
internal Func`2<string, string> get_PropertyTransformer();
    [CompilerGeneratedAttribute]
private void set_PropertyTransformer(Func`2<string, string> value);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class Dapper.FluentMap.Conventions.PropertyConventionConfiguration : object {
    [CompilerGeneratedAttribute]
private IList`1<Func`2<PropertyInfo, bool>> <PropertyPredicates>k__BackingField;
    [CompilerGeneratedAttribute]
private ConventionPropertyConfiguration <PropertyConfiguration>k__BackingField;
    internal IList`1<Func`2<PropertyInfo, bool>> PropertyPredicates { get; }
    internal ConventionPropertyConfiguration PropertyConfiguration { get; private set; }
    [CompilerGeneratedAttribute]
internal IList`1<Func`2<PropertyInfo, bool>> get_PropertyPredicates();
    [CompilerGeneratedAttribute]
internal ConventionPropertyConfiguration get_PropertyConfiguration();
    [CompilerGeneratedAttribute]
private void set_PropertyConfiguration(ConventionPropertyConfiguration value);
    public PropertyConventionConfiguration Where(Func`2<PropertyInfo, bool> predicate);
    public void Configure(Action`1<ConventionPropertyConfiguration> configure);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public static class Dapper.FluentMap.FluentMapper : object {
    private static FluentMapConfiguration _configuration;
    public static ConcurrentDictionary`2<Type, IEntityMap> EntityMaps;
    public static ConcurrentDictionary`2<Type, IList`1<Convention>> TypeConventions;
    private static FluentMapper();
    public static void Initialize(Action`1<FluentMapConfiguration> configure);
    internal static void AddTypeMap();
    internal static void AddTypeMap(Type entityType);
    internal static void AddConventionTypeMap();
    internal static void AddConventionTypeMap(Type entityType);
}
public abstract class Dapper.FluentMap.Mapping.EntityMap`1 : EntityMapBase`2<TEntity, PropertyMap> {
    protected virtual PropertyMap GetPropertyMap(PropertyInfo info);
}
public abstract class Dapper.FluentMap.Mapping.EntityMapBase`2 : object {
    [CompilerGeneratedAttribute]
private IList`1<IPropertyMap> <PropertyMaps>k__BackingField;
    public IList`1<IPropertyMap> PropertyMaps { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IPropertyMap> get_PropertyMaps();
    protected TPropertyMap Map(Expression`1<Func`2<TEntity, object>> expression);
    protected abstract virtual TPropertyMap GetPropertyMap(PropertyInfo info);
    private void ThrowIfDuplicateMapping(IPropertyMap map);
}
public interface Dapper.FluentMap.Mapping.IEntityMap {
    public IList`1<IPropertyMap> PropertyMaps { get; }
    public abstract virtual IList`1<IPropertyMap> get_PropertyMaps();
}
public interface Dapper.FluentMap.Mapping.IEntityMap`1 {
}
public interface Dapper.FluentMap.Mapping.IPropertyMap {
    public string ColumnName { get; }
    public PropertyInfo PropertyInfo { get; }
    public bool CaseSensitive { get; }
    public bool Ignored { get; }
    public abstract virtual string get_ColumnName();
    public abstract virtual PropertyInfo get_PropertyInfo();
    public abstract virtual bool get_CaseSensitive();
    public abstract virtual bool get_Ignored();
}
public class Dapper.FluentMap.Mapping.PropertyMap : PropertyMapBase`1<PropertyMap> {
    public PropertyMap(PropertyInfo info);
    public PropertyMap(PropertyInfo info, string columnName);
    public PropertyMap(PropertyInfo info, string columnName, bool caseSensitive);
}
public abstract class Dapper.FluentMap.Mapping.PropertyMapBase`1 : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public string ColumnName { get; private set; }
    public bool CaseSensitive { get; private set; }
    public bool Ignored { get; private set; }
    public PropertyInfo PropertyInfo { get; }
    protected PropertyMapBase`1(PropertyInfo info);
    internal PropertyMapBase`1(PropertyInfo info, string columnName);
    internal PropertyMapBase`1(PropertyInfo info, string columnName, bool caseSensitive);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
private void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Ignored();
    [CompilerGeneratedAttribute]
private void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PropertyInfo get_PropertyInfo();
    public TPropertyMap ToColumn(string columnName, bool caseSensitive);
    public TPropertyMap Ignore();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
public class Dapper.FluentMap.TypeMaps.FluentConventionTypeMap`1 : MultiTypeMap {
    private static PropertyInfo GetPropertyInfo(Type type, string columnName);
    private static bool MatchColumnNames(IPropertyMap map, string columnName);
}
public class Dapper.FluentMap.TypeMaps.FluentMapTypeMap`1 : MultiTypeMap {
    private static PropertyInfo GetPropertyInfo(Type type, string columnName);
    private static bool MatchColumnNames(IPropertyMap map, string columnName);
}
internal class Dapper.FluentMap.TypeMaps.IgnoredPropertyInfo : PropertyInfo {
    public Type PropertyType { get; }
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public virtual Type get_PropertyType();
    public virtual PropertyAttributes get_Attributes();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual ParameterInfo[] GetIndexParameters();
    public virtual Type get_ReflectedType();
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
}
public abstract class Dapper.FluentMap.TypeMaps.MultiTypeMap : object {
    private IEnumerable`1<ITypeMap> _mappers;
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, PropertyInfo> <TypePropertyMapCache>k__BackingField;
    protected static ConcurrentDictionary`2<string, PropertyInfo> TypePropertyMapCache { get; }
    protected MultiTypeMap(ITypeMap[] mappers);
    private static MultiTypeMap();
    public sealed virtual ConstructorInfo FindConstructor(String[] names, Type[] types);
    public sealed virtual ConstructorInfo FindExplicitConstructor();
    public sealed virtual IMemberMap GetConstructorParameter(ConstructorInfo constructor, string columnName);
    public sealed virtual IMemberMap GetMember(string columnName);
    [CompilerGeneratedAttribute]
protected static ConcurrentDictionary`2<string, PropertyInfo> get_TypePropertyMapCache();
}
[ExtensionAttribute]
internal static class Dapper.FluentMap.Utils.DictionaryExtensions : object {
    [ExtensionAttribute]
internal static void AddOrUpdate(IDictionary`2<TKey, IList`1<TValue>> dict, TKey key, TValue value);
}
public static class Dapper.FluentMap.Utils.ReflectionHelper : object {
    public static MemberInfo GetMemberInfo(LambdaExpression lambda);
}
