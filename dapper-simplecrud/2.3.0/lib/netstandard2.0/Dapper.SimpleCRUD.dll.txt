[AttributeUsageAttribute("128")]
public class Dapper.ColumnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public ColumnAttribute(string columnName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("128")]
public class Dapper.EditableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <AllowEdit>k__BackingField;
    public bool AllowEdit { get; private set; }
    public EditableAttribute(bool iseditable);
    [CompilerGeneratedAttribute]
public bool get_AllowEdit();
    [CompilerGeneratedAttribute]
private void set_AllowEdit(bool value);
}
[AttributeUsageAttribute("128")]
public class Dapper.IgnoreInsertAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Dapper.IgnoreSelectAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Dapper.IgnoreUpdateAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Dapper.KeyAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Dapper.NotMappedAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Dapper.ReadOnlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    public bool IsReadOnly { get; private set; }
    public ReadOnlyAttribute(bool isReadOnly);
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
private void set_IsReadOnly(bool value);
}
[AttributeUsageAttribute("128")]
public class Dapper.RequiredAttribute : Attribute {
}
[ExtensionAttribute]
public static class Dapper.SimpleCRUD : object {
    private static Dialect _dialect;
    private static string _encapsulation;
    private static string _getIdentitySql;
    private static string _getPagedListSql;
    private static ConcurrentDictionary`2<Type, string> TableNames;
    private static ConcurrentDictionary`2<string, string> ColumnNames;
    private static ConcurrentDictionary`2<string, string> StringBuilderCacheDict;
    private static bool StringBuilderCacheEnabled;
    private static ITableNameResolver _tableNameResolver;
    private static IColumnNameResolver _columnNameResolver;
    private static SimpleCRUD();
    private static void StringBuilderCache(StringBuilder sb, string cacheKey, Action`1<StringBuilder> stringBuilderAction);
    public static string GetDialect();
    public static void SetDialect(Dialect dialect);
    public static void SetTableNameResolver(ITableNameResolver resolver);
    public static void SetColumnNameResolver(IColumnNameResolver resolver);
    [ExtensionAttribute]
public static T Get(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetList(IDbConnection connection, object whereConditions, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetList(IDbConnection connection, string conditions, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetList(IDbConnection connection);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetListPaged(IDbConnection connection, int pageNumber, int rowsPerPage, string conditions, string orderby, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Nullable`1<int> Insert(IDbConnection connection, TEntity entityToInsert, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static TKey Insert(IDbConnection connection, TEntity entityToInsert, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static int Update(IDbConnection connection, TEntity entityToUpdate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static int Delete(IDbConnection connection, T entityToDelete, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static int Delete(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static int DeleteList(IDbConnection connection, object whereConditions, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static int DeleteList(IDbConnection connection, string conditions, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static int RecordCount(IDbConnection connection, string conditions, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static int RecordCount(IDbConnection connection, object whereConditions, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    private static void BuildUpdateSet(T entityToUpdate, StringBuilder masterSb);
    private static void BuildSelect(StringBuilder masterSb, IEnumerable`1<PropertyInfo> props);
    private static void BuildWhere(StringBuilder sb, IEnumerable`1<PropertyInfo> idProps, object whereConditions);
    private static void BuildInsertValues(StringBuilder masterSb);
    private static void BuildInsertParameters(StringBuilder masterSb);
    private static IEnumerable`1<PropertyInfo> GetAllProperties(T entity);
    private static IEnumerable`1<PropertyInfo> GetScaffoldableProperties();
    private static bool IsEditable(PropertyInfo pi);
    private static bool IsReadOnly(PropertyInfo pi);
    private static IEnumerable`1<PropertyInfo> GetUpdateableProperties(T entity);
    private static IEnumerable`1<PropertyInfo> GetIdProperties(object entity);
    private static IEnumerable`1<PropertyInfo> GetIdProperties(Type type);
    private static string GetTableName(object entity);
    private static string GetTableName(Type type);
    private static string GetColumnName(PropertyInfo propertyInfo);
    private static string Encapsulate(string databaseword);
    public static Guid SequentialGuid();
    [AsyncStateMachineAttribute("Dapper.SimpleCRUD/<GetAsync>d__52`1")]
[ExtensionAttribute]
public static Task`1<T> GetAsync(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetListAsync(IDbConnection connection, object whereConditions, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetListAsync(IDbConnection connection, string conditions, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetListAsync(IDbConnection connection);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetListPagedAsync(IDbConnection connection, int pageNumber, int rowsPerPage, string conditions, string orderby, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> InsertAsync(IDbConnection connection, TEntity entityToInsert, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("Dapper.SimpleCRUD/<InsertAsync>d__58`2")]
[ExtensionAttribute]
public static Task`1<TKey> InsertAsync(IDbConnection connection, TEntity entityToInsert, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("Dapper.SimpleCRUD/<UpdateAsync>d__59`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDbConnection connection, TEntity entityToUpdate, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CancellationToken> token);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection connection, T entityToDelete, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<int> DeleteListAsync(IDbConnection connection, object whereConditions, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<int> DeleteListAsync(IDbConnection connection, string conditions, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<int> RecordCountAsync(IDbConnection connection, string conditions, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<int> RecordCountAsync(IDbConnection connection, object whereConditions, IDbTransaction transaction, Nullable`1<int> commandTimeout);
}
[AttributeUsageAttribute("4")]
public class Dapper.TableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Name { get; private set; }
    public string Schema { get; public set; }
    public TableAttribute(string tableName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
}
[ExtensionAttribute]
internal static class TypeExtension : object {
    [ExtensionAttribute]
public static bool IsSimpleType(Type type);
    [ExtensionAttribute]
public static string CacheKey(IEnumerable`1<PropertyInfo> props);
}
