[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Dapper.CommandDefinition : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommandTimeout>k__BackingField;
    internal CommandType CommandTypeDirect;
    [CompilerGeneratedAttribute]
private CommandFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Link`2<Type, Action`1<IDbCommand>> commandInitCache;
    [NullableAttribute("1")]
public string CommandText { get; }
    public object Parameters { get; }
    public IDbTransaction Transaction { get; }
    public Nullable`1<int> CommandTimeout { get; }
    public Nullable`1<CommandType> CommandType { get; }
    public bool Buffered { get; }
    internal bool AddToCache { get; }
    public CommandFlags Flags { get; }
    public bool Pipelined { get; }
    public CancellationToken CancellationToken { get; }
    public CommandDefinition(string commandText, object parameters, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType, CommandFlags flags, CancellationToken cancellationToken);
    private CommandDefinition(object parameters);
    internal static CommandDefinition ForCallback(object parameters);
    internal void OnCompleted();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public object get_Parameters();
    [CompilerGeneratedAttribute]
public IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CommandTimeout();
    public Nullable`1<CommandType> get_CommandType();
    public bool get_Buffered();
    internal bool get_AddToCache();
    [CompilerGeneratedAttribute]
public CommandFlags get_Flags();
    public bool get_Pipelined();
    [NullableContextAttribute("1")]
internal static CommandType InferCommandType(string sql);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [NullableContextAttribute("1")]
internal IDbCommand SetupCommand(IDbConnection cnn, Action`2<IDbCommand, object> paramReader);
    internal static void ResetCommandInitCache();
    [NullableContextAttribute("1")]
private static Action`1<IDbCommand> GetInit(Type commandType);
    [NullableContextAttribute("1")]
private static MethodInfo GetBasicPropertySetter(Type declaringType, string name, Type expectedType);
}
[FlagsAttribute]
public enum Dapper.CommandFlags : Enum {
    public int value__;
    public static CommandFlags None;
    public static CommandFlags Buffered;
    public static CommandFlags Pipelined;
    public static CommandFlags NoCache;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Dapper.CompiledRegex : object {
    private static string WhitespaceOrReservedPattern;
    private static string LegacyParameterPattern;
    private static string LiteralTokensPattern;
    private static string PseudoPositionalPattern;
    [CompilerGeneratedAttribute]
private static Regex <LegacyParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Regex <LiteralTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private static Regex <PseudoPositional>k__BackingField;
    [CompilerGeneratedAttribute]
private static Regex <WhitespaceOrReserved>k__BackingField;
    internal static Regex LegacyParameter { get; }
    internal static Regex LiteralTokens { get; }
    internal static Regex PseudoPositional { get; }
    internal static Regex WhitespaceOrReserved { get; }
    private static CompiledRegex();
    [CompilerGeneratedAttribute]
internal static Regex get_LegacyParameter();
    [CompilerGeneratedAttribute]
internal static Regex get_LiteralTokens();
    [CompilerGeneratedAttribute]
internal static Regex get_PseudoPositional();
    [CompilerGeneratedAttribute]
internal static Regex get_WhitespaceOrReserved();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Dapper.CustomPropertyTypeMap : object {
    private Type _type;
    private Func`3<Type, string, PropertyInfo> _propertySelector;
    public CustomPropertyTypeMap(Type type, Func`3<Type, string, PropertyInfo> propertySelector);
    public sealed virtual ConstructorInfo FindConstructor(String[] names, Type[] types);
    [NullableContextAttribute("2")]
public sealed virtual ConstructorInfo FindExplicitConstructor();
    public sealed virtual IMemberMap GetConstructorParameter(ConstructorInfo constructor, string columnName);
    public sealed virtual IMemberMap GetMember(string columnName);
}
internal class Dapper.DataTableHandler : object {
    [NullableContextAttribute("1")]
public sealed virtual object Parse(Type destinationType, object value);
    [NullableContextAttribute("1")]
public sealed virtual void SetValue(IDbDataParameter parameter, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Dapper.DbString : object {
    [CompilerGeneratedAttribute]
private static bool <IsAnsiDefault>k__BackingField;
    public static int DefaultLength;
    [CompilerGeneratedAttribute]
private bool <IsAnsi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFixedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static bool IsAnsiDefault { get; public set; }
    public bool IsAnsi { get; public set; }
    public bool IsFixedLength { get; public set; }
    public int Length { get; public set; }
    public string Value { get; public set; }
    public DbString(string value, int length);
    [CompilerGeneratedAttribute]
public static bool get_IsAnsiDefault();
    [CompilerGeneratedAttribute]
public static void set_IsAnsiDefault(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAnsi();
    [CompilerGeneratedAttribute]
public void set_IsAnsi(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFixedLength();
    [CompilerGeneratedAttribute]
public void set_IsFixedLength(bool value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public sealed virtual void AddParameter(IDbCommand command, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Dapper.DbWrappedReader : DbDataReader {
    private DbDataReader _reader;
    private IDbCommand _cmd;
    private IDataReader Dapper.IWrappedDataReader.Reader { get; }
    private IDbCommand Dapper.IWrappedDataReader.Command { get; }
    public bool HasRows { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public int VisibleFieldCount { get; }
    public DbWrappedReader(IDbCommand cmd, DbDataReader reader);
    public static DbDataReader Create(IDbCommand cmd, DbDataReader reader);
    private sealed virtual override IDataReader Dapper.IWrappedDataReader.get_Reader();
    private sealed virtual override IDbCommand Dapper.IWrappedDataReader.get_Command();
    public virtual bool get_HasRows();
    public virtual void Close();
    [NullableContextAttribute("2")]
public virtual DataTable GetSchemaTable();
    [ObsoleteAttribute("This Remoting API is not supported and throws PlatformNotSupportedException.")]
public virtual object InitializeLifetimeService();
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual int get_RecordsAffected();
    protected virtual void Dispose(bool disposing);
    public virtual int get_FieldCount();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    [NullableContextAttribute("2")]
public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual object get_Item(string name);
    public virtual object get_Item(int i);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual Stream GetStream(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual int get_VisibleFieldCount();
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual Task CloseAsync();
    public virtual ValueTask DisposeAsync();
    public virtual Task`1<ReadOnlyCollection`1<DbColumn>> GetColumnSchemaAsync(CancellationToken cancellationToken);
    public virtual Task`1<DataTable> GetSchemaTableAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Dapper.DefaultTypeMap : object {
    private List`1<FieldInfo> _fields;
    private Type _type;
    [CompilerGeneratedAttribute]
private static bool <MatchNamesWithUnderscores>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PropertyInfo> <Properties>k__BackingField;
    public static bool MatchNamesWithUnderscores { get; public set; }
    public List`1<PropertyInfo> Properties { get; }
    public DefaultTypeMap(Type type);
    internal static MethodInfo GetPropertySetterOrThrow(PropertyInfo propertyInfo, Type type);
    internal static MethodInfo GetPropertySetter(PropertyInfo propertyInfo, Type type);
    internal static List`1<PropertyInfo> GetSettableProps(Type t);
    internal static List`1<FieldInfo> GetSettableFields(Type t);
    public sealed virtual ConstructorInfo FindConstructor(String[] names, Type[] types);
    [NullableContextAttribute("2")]
public sealed virtual ConstructorInfo FindExplicitConstructor();
    public sealed virtual IMemberMap GetConstructorParameter(ConstructorInfo constructor, string columnName);
    public sealed virtual IMemberMap GetMember(string columnName);
    [CompilerGeneratedAttribute]
public static bool get_MatchNamesWithUnderscores();
    [CompilerGeneratedAttribute]
public static void set_MatchNamesWithUnderscores(bool value);
    [NullableContextAttribute("2")]
private static T MatchFirstOrDefault(IList`1<T> members, string name, Func`2<T, string> selector);
    [NullableContextAttribute("2")]
internal static bool EqualsCI(string x, string y);
    [NullableContextAttribute("2")]
internal static bool EqualsCIU(string x, string y);
    [CompilerGeneratedAttribute]
public List`1<PropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal static MethodInfo <GetPropertySetterOrThrow>g__Throw|3_0(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
internal static ParameterInfo <GetConstructorParameter>g__Throw|9_1(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Dapper.DisposedReader : DbDataReader {
    internal static DisposedReader Instance;
    public int Depth { get; }
    public int FieldCount { get; }
    public bool IsClosed { get; }
    public bool HasRows { get; }
    public int RecordsAffected { get; }
    public int VisibleFieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    private static DisposedReader();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_IsClosed();
    public virtual bool get_HasRows();
    public virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    private static T ThrowDisposed();
    [AsyncStateMachineAttribute("Dapper.DisposedReader/<ThrowDisposedAsync>d__15`1")]
private static Task`1<T> ThrowDisposedAsync();
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    [ObsoleteAttribute("This Remoting API is not supported and throws PlatformNotSupportedException.")]
public virtual object InitializeLifetimeService();
    protected virtual void Dispose(bool disposing);
    public virtual bool GetBoolean(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual float GetFloat(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual Guid GetGuid(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual Stream GetStream(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Dapper.DynamicParameters : object {
    internal static DbType EnumerableMultiParameter;
    private static Dictionary`2<Identity, Action`2<IDbCommand, object>> paramReaderCache;
    private Dictionary`2<string, ParamInfo> parameters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<object> templates;
    [CompilerGeneratedAttribute]
private bool <RemoveUnused>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Action> outputCallbacks;
    [NullableAttribute("2")]
private object Dapper.SqlMapper.IParameterLookup.Item { get; }
    public bool RemoveUnused { get; public set; }
    public IEnumerable`1<string> ParameterNames { get; }
    [NullableContextAttribute("2")]
public DynamicParameters(object template);
    private static DynamicParameters();
    private sealed virtual override object Dapper.SqlMapper.IParameterLookup.get_Item(string name);
    [NullableContextAttribute("2")]
public void AddDynamicParams(object param);
    public void Add(string name, object value, Nullable`1<DbType> dbType, Nullable`1<ParameterDirection> direction, Nullable`1<int> size);
    public void Add(string name, object value, Nullable`1<DbType> dbType, Nullable`1<ParameterDirection> direction, Nullable`1<int> size, Nullable`1<byte> precision, Nullable`1<byte> scale);
    private static string Clean(string name);
    private sealed virtual override void Dapper.SqlMapper.IDynamicParameters.AddParameters(IDbCommand command, Identity identity);
    [CompilerGeneratedAttribute]
public bool get_RemoveUnused();
    [CompilerGeneratedAttribute]
public void set_RemoveUnused(bool value);
    internal static bool ShouldSetDbType(Nullable`1<DbType> dbType);
    internal static bool ShouldSetDbType(DbType dbType);
    protected void AddParameters(IDbCommand command, Identity identity);
    public IEnumerable`1<string> get_ParameterNames();
    public T Get(string name);
    public DynamicParameters Output(T target, Expression`1<Func`2<T, object>> expression, Nullable`1<DbType> dbType, Nullable`1<int> size);
    private sealed virtual override void Dapper.SqlMapper.IParameterCallbacks.OnCompleted();
    [CompilerGeneratedAttribute]
internal static void <Output>g__ThrowInvalidChain|24_0();
}
[AttributeUsageAttribute("96")]
public class Dapper.ExplicitConstructorAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Dapper.Extensions : object {
    [ExtensionAttribute]
internal static Task`1<TTo> CastResult(Task`1<TFrom> task);
    private static void OnTaskCompleted(Task`1<TFrom> completedTask, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Dapper.FeatureSupport : object {
    private static FeatureSupport Default;
    private static FeatureSupport Postgres;
    private static FeatureSupport ClickHouse;
    [CompilerGeneratedAttribute]
private bool <Arrays>k__BackingField;
    public bool Arrays { get; }
    private FeatureSupport(bool arrays);
    private static FeatureSupport();
    public static FeatureSupport Get(IDbConnection connection);
    [CompilerGeneratedAttribute]
public bool get_Arrays();
}
[NullableContextAttribute("1")]
public interface Dapper.IWrappedDataReader {
    public IDataReader Reader { get; }
    public IDbCommand Command { get; }
    public abstract virtual IDataReader get_Reader();
    public abstract virtual IDbCommand get_Command();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Dapper.SimpleMemberMap : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldInfo <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <Parameter>k__BackingField;
    [NullableAttribute("1")]
public string ColumnName { get; }
    [NullableAttribute("1")]
public Type MemberType { get; }
    public PropertyInfo Property { get; }
    public FieldInfo Field { get; }
    public ParameterInfo Parameter { get; }
    [NullableContextAttribute("1")]
public SimpleMemberMap(string columnName, PropertyInfo property);
    [NullableContextAttribute("1")]
public SimpleMemberMap(string columnName, FieldInfo field);
    [NullableContextAttribute("1")]
public SimpleMemberMap(string columnName, ParameterInfo parameter);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ColumnName();
    [NullableContextAttribute("1")]
public sealed virtual Type get_MemberType();
    [CompilerGeneratedAttribute]
public sealed virtual PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual FieldInfo get_Field();
    [CompilerGeneratedAttribute]
public sealed virtual ParameterInfo get_Parameter();
}
internal class Dapper.SqlDataRecordHandler`1 : object {
    [NullableContextAttribute("1")]
public sealed virtual object Parse(Type destinationType, object value);
    [NullableContextAttribute("1")]
public sealed virtual void SetValue(IDbDataParameter parameter, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Dapper.SqlDataRecordListTVPParameter`1 : object {
    private IEnumerable`1<T> data;
    private string typeName;
    public SqlDataRecordListTVPParameter`1(IEnumerable`1<T> data, string typeName);
    private sealed virtual override void Dapper.SqlMapper.ICustomQueryParameter.AddParameter(IDbCommand command, string name);
    internal static void Set(IDbDataParameter parameter, IEnumerable`1<T> data, string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Dapper.SqlMapper : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static EventHandler QueryCachePurged;
    private static ConcurrentDictionary`2<Identity, CacheInfo> _queryCache;
    private static int COLLECT_PER_ITEMS;
    private static int COLLECT_HIT_COUNT_MIN;
    private static int collect;
    private static Dictionary`2<Type, TypeMapEntry> typeMap;
    private static Dictionary`2<Type, ITypeHandler> typeHandlers;
    internal static string LinqBinary;
    private static string ObsoleteInternalUsageOnly;
    private static Int32[] ErrTwoRows;
    private static Int32[] ErrZeroRows;
    internal static MethodInfo format;
    private static Dictionary`2<TypeCode, MethodInfo> toStrings;
    private static MethodInfo StringReplace;
    private static MethodInfo InvariantCulture;
    private static Hashtable s_ReadViaGetFieldValueCache;
    private static MethodInfo enumParse;
    private static MethodInfo getItem;
    private static MethodInfo getFieldValueT;
    private static MethodInfo isDbNull;
    public static Func`2<Type, ITypeMap> TypeMapProvider;
    private static Hashtable _typeMaps;
    private static IEqualityComparer`1<string> connectionStringComparer;
    private static string DataTableTypeNameKey;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static StringBuilder perThreadStringBuilderCache;
    public static IEqualityComparer`1<string> ConnectionStringComparer { get; public set; }
    private static SqlMapper();
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> QueryAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> QueryAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstOrDefaultAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleOrDefaultAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<T> QueryFirstAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<T> QueryFirstOrDefaultAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<T> QuerySingleAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<T> QuerySingleOrDefaultAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstOrDefaultAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleOrDefaultAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> QueryAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstOrDefaultAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleOrDefaultAsync(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> QueryAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> QueryFirstAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QueryFirstOrDefaultAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> QueryFirstOrDefaultAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> QuerySingleAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<object> QuerySingleOrDefaultAsync(IDbConnection cnn, Type type, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> QuerySingleOrDefaultAsync(IDbConnection cnn, CommandDefinition command);
    private static Task`1<DbDataReader> ExecuteReaderWithFlagsFallbackAsync(DbCommand cmd, bool wasClosed, CommandBehavior behavior, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static Task TryOpenAsync(IDbConnection cnn, CancellationToken cancel);
    [ExtensionAttribute]
private static DbCommand TrySetupAsyncCommand(CommandDefinition command, IDbConnection cnn, Action`2<IDbCommand, object> paramReader);
    [AsyncStateMachineAttribute("Dapper.SqlMapper/<QueryAsync>d__33`1")]
[ExtensionAttribute]
private static Task`1<IEnumerable`1<T>> QueryAsync(IDbConnection cnn, Type effectiveType, CommandDefinition command);
    [AsyncStateMachineAttribute("Dapper.SqlMapper/<QueryRowAsync>d__34`1")]
[ExtensionAttribute]
private static Task`1<T> QueryRowAsync(IDbConnection cnn, Row row, Type effectiveType, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IDbConnection cnn, CommandDefinition command);
    [AsyncStateMachineAttribute("Dapper.SqlMapper/<ExecuteMultiImplAsync>d__38")]
private static Task`1<int> ExecuteMultiImplAsync(IDbConnection cnn, CommandDefinition command, IEnumerable multiExec);
    [AsyncStateMachineAttribute("Dapper.SqlMapper/<ExecuteImplAsync>d__39")]
private static Task`1<int> ExecuteImplAsync(IDbConnection cnn, CommandDefinition command, object param);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`3<TFirst, TSecond, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`3<TFirst, TSecond, TReturn> map, string splitOn);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`4<TFirst, TSecond, TThird, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`4<TFirst, TSecond, TThird, TReturn> map, string splitOn);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`5<TFirst, TSecond, TThird, TFourth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`5<TFirst, TSecond, TThird, TFourth, TReturn> map, string splitOn);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`6<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`6<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, string splitOn);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, string splitOn);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Func`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, CommandDefinition command, Func`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, string splitOn);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Dapper.SqlMapper/<MultiMapAsync>d__52`8")]
[ExtensionAttribute]
private static Task`1<IEnumerable`1<TReturn>> MultiMapAsync(IDbConnection cnn, CommandDefinition command, Delegate map, string splitOn);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<TReturn>> QueryAsync(IDbConnection cnn, string sql, Type[] types, Func`2<Object[], TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [AsyncStateMachineAttribute("Dapper.SqlMapper/<MultiMapAsync>d__54`1")]
[ExtensionAttribute]
private static Task`1<IEnumerable`1<TReturn>> MultiMapAsync(IDbConnection cnn, CommandDefinition command, Type[] types, Func`2<Object[], TReturn> map, string splitOn);
    [IteratorStateMachineAttribute("Dapper.SqlMapper/<ExecuteReaderSync>d__55`1")]
private static IEnumerable`1<T> ExecuteReaderSync(DbDataReader reader, Func`2<DbDataReader, object> func, object parameters);
    [ExtensionAttribute]
public static Task`1<GridReader> QueryMultipleAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [AsyncStateMachineAttribute("Dapper.SqlMapper/<QueryMultipleAsync>d__57")]
[ExtensionAttribute]
public static Task`1<GridReader> QueryMultipleAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<IDataReader> ExecuteReaderAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<IDataReader> ExecuteReaderAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<IDataReader> ExecuteReaderAsync(IDbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior);
    [ExtensionAttribute]
public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior);
    [AsyncStateMachineAttribute("Dapper.SqlMapper/<ExecuteWrappedReaderImplAsync>d__64")]
private static Task`1<DbDataReader> ExecuteWrappedReaderImplAsync(IDbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IDbConnection cnn, CommandDefinition command);
    [AsyncStateMachineAttribute("Dapper.SqlMapper/<ExecuteScalarImplAsync>d__69`1")]
private static Task`1<T> ExecuteScalarImplAsync(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<object> QueryUnbufferedAsync(DbConnection cnn, string sql, object param, DbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryUnbufferedAsync(DbConnection cnn, string sql, object param, DbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
private static IAsyncEnumerable`1<T> QueryUnbufferedAsync(IDbConnection cnn, Type effectiveType, CommandDefinition command);
    private static int GetColumnHash(DbDataReader reader, int startBound, int length);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void add_QueryCachePurged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void remove_QueryCachePurged(EventHandler value);
    private static void OnQueryCachePurged();
    private static void SetQueryCache(Identity key, CacheInfo value);
    private static void CollectCacheGarbage();
    private static bool TryGetQueryCache(Identity key, CacheInfo& value);
    public static void PurgeQueryCache();
    private static void PurgeQueryCacheByType(Type type);
    public static int GetCachedSQLCount();
    public static IEnumerable`1<Tuple`3<string, string, int>> GetCachedSQL(int ignoreHitCountAbove);
    public static IEnumerable`1<Tuple`2<int, int>> GetHashCollissions();
    public static void ResetTypeHandlers();
    [MemberNotNullAttribute("typeHandlers")]
private static void ResetTypeHandlers(bool clone);
    public static void AddTypeMap(Type type, DbType dbType);
    public static void AddTypeMap(Type type, DbType dbType, bool useGetFieldValue);
    private static void SetTypeMap(Dictionary`2<Type, TypeMapEntry> value);
    public static void RemoveTypeMap(Type type);
    public static void AddTypeHandler(Type type, ITypeHandler handler);
    public static bool HasTypeHandler(Type type);
    public static void AddTypeHandlerImpl(Type type, ITypeHandler handler, bool clone);
    public static void AddTypeHandler(TypeHandler`1<T> handler);
    [ObsoleteAttribute("This method is for internal use only", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static void SetDbType(IDataParameter parameter, object value);
    [ObsoleteAttribute("This method is for internal use only", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static Nullable`1<DbType> LookupDbType(Type type, string name, bool demand, ITypeHandler& handler);
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static int Execute(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static int Execute(IDbConnection cnn, CommandDefinition command);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object ExecuteScalar(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T ExecuteScalar(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object ExecuteScalar(IDbConnection cnn, CommandDefinition command);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T ExecuteScalar(IDbConnection cnn, CommandDefinition command);
    [NullableContextAttribute("2")]
private static IEnumerable GetMultiExec(object param);
    [ExtensionAttribute]
private static int ExecuteImpl(IDbConnection cnn, CommandDefinition& command);
    [ExtensionAttribute]
public static IDataReader ExecuteReader(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IDataReader ExecuteReader(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static IDataReader ExecuteReader(IDbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior);
    [ExtensionAttribute]
public static IEnumerable`1<object> Query(IDbConnection cnn, string sql, object param, IDbTransaction transaction, bool buffered, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QueryFirst(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object QueryFirstOrDefault(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QuerySingle(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object QuerySingleOrDefault(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(IDbConnection cnn, string sql, object param, IDbTransaction transaction, bool buffered, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static T QueryFirst(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T QueryFirstOrDefault(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static T QuerySingle(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T QuerySingleOrDefault(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<object> Query(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, bool buffered, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QueryFirst(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QueryFirstOrDefault(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QuerySingle(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static object QuerySingleOrDefault(IDbConnection cnn, Type type, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static T QueryFirst(IDbConnection cnn, CommandDefinition command);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T QueryFirstOrDefault(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static T QuerySingle(IDbConnection cnn, CommandDefinition command);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T QuerySingleOrDefault(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
public static GridReader QueryMultiple(IDbConnection cnn, string sql, object param, IDbTransaction transaction, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static GridReader QueryMultiple(IDbConnection cnn, CommandDefinition command);
    [ExtensionAttribute]
private static GridReader QueryMultipleImpl(IDbConnection cnn, CommandDefinition& command);
    private static DbDataReader ExecuteReaderWithFlagsFallback(IDbCommand cmd, bool wasClosed, CommandBehavior behavior);
    [IteratorStateMachineAttribute("Dapper.SqlMapper/<QueryImpl>d__147`1")]
[ExtensionAttribute]
private static IEnumerable`1<T> QueryImpl(IDbConnection cnn, CommandDefinition command, Type effectiveType);
    private static void ThrowMultipleRows(Row row);
    private static void ThrowZeroRows(Row row);
    private static T QueryRowImpl(IDbConnection cnn, Row row, CommandDefinition& command, Type effectiveType);
    private static T ReadRow(CacheInfo info, Identity identity, CommandDefinition& command, Type effectiveType, DbDataReader reader);
    private static T GetValue(DbDataReader reader, Type effectiveType, object val);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`3<TFirst, TSecond, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`4<TFirst, TSecond, TThird, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`5<TFirst, TSecond, TThird, TFourth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`6<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Func`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Query(IDbConnection cnn, string sql, Type[] types, Func`2<Object[], TReturn> map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static IEnumerable`1<TReturn> MultiMap(IDbConnection cnn, string sql, Delegate map, object param, IDbTransaction transaction, bool buffered, string splitOn, Nullable`1<int> commandTimeout, Nullable`1<CommandType> commandType);
    [NullableContextAttribute("2")]
[IteratorStateMachineAttribute("Dapper.SqlMapper/<MultiMapImpl>d__164`8")]
[ExtensionAttribute]
private static IEnumerable`1<TReturn> MultiMapImpl(IDbConnection cnn, CommandDefinition command, Delegate map, string splitOn, DbDataReader reader, Identity identity, bool finalize);
    private static CommandBehavior GetBehavior(bool close, CommandBehavior default);
    [IteratorStateMachineAttribute("Dapper.SqlMapper/<MultiMapImpl>d__166`1")]
[ExtensionAttribute]
private static IEnumerable`1<TReturn> MultiMapImpl(IDbConnection cnn, CommandDefinition command, Type[] types, Func`2<Object[], TReturn> map, string splitOn, DbDataReader reader, Identity identity, bool finalize);
    [NullableContextAttribute("2")]
private static Func`2<DbDataReader, TReturn> GenerateMapper(Func`2<DbDataReader, object> deserializer, Func`2[] otherDeserializers, object map);
    private static Func`2<DbDataReader, TReturn> GenerateMapper(int length, Func`2<DbDataReader, object> deserializer, Func`2[] otherDeserializers, Func`2<Object[], TReturn> map);
    private static Func`2[] GenerateDeserializers(Identity identity, string splitOn, DbDataReader reader);
    private static int GetNextSplitDynamic(int startIdx, string splitOn, DbDataReader reader);
    private static int GetNextSplit(int startIdx, string splitOn, DbDataReader reader);
    private static CacheInfo GetCacheInfo(Identity identity, object exampleParameters, bool addToCache);
    private static bool ShouldPassByPosition(string sql);
    private static void PassByPosition(IDbCommand cmd);
    private static DbDataReader GetDbDataReader(IDataReader reader);
    private static Func`2<DbDataReader, object> GetDeserializer(Type type, DbDataReader reader, int startBound, int length, bool returnNullIfFirstMissing);
    private static Func`2<DbDataReader, object> GetHandlerDeserializer(ITypeHandler handler, Type type, int startBound);
    private static Exception MultiMapException(IDataRecord reader, string splitOn);
    internal static Func`2<DbDataReader, object> GetDapperRowDeserializer(DbDataReader reader, int startBound, int length, bool returnNullIfFirstMissing);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is for internal use only", "False")]
public static char ReadChar(object value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is for internal use only", "False")]
public static Nullable`1<char> ReadNullableChar(object value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is for internal use only", "True")]
public static IDbDataParameter FindOrAddParameter(IDataParameterCollection parameters, IDbCommand command, string name);
    internal static int GetListPaddingExtraCount(int count);
    private static string GetInListRegex(string name, bool byPosition);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is for internal use only", "False")]
public static void PackListParameters(IDbCommand command, string namePrefix, object value);
    private static bool TryStringSplit(IEnumerable& list, int splitAt, string namePrefix, IDbCommand command, bool byPosition);
    private static bool TryStringSplit(IEnumerable`1& list, int splitAt, string namePrefix, IDbCommand command, string colType, bool byPosition, Action`2<StringBuilder, T> append);
    [ObsoleteAttribute("This method is for internal use only", "False")]
public static object SanitizeParameterValue(object value);
    private static IEnumerable`1<PropertyInfo> FilterParameters(IEnumerable`1<PropertyInfo> parameters, string sql);
    [ExtensionAttribute]
public static void ReplaceLiterals(IParameterLookup parameters, IDbCommand command);
    [ObsoleteAttribute("This method is for internal use only")]
public static string Format(object value);
    internal static void ReplaceLiterals(IParameterLookup parameters, IDbCommand command, IList`1<LiteralToken> tokens);
    internal static IList`1<LiteralToken> GetLiteralTokens(string sql);
    public static Action`2<IDbCommand, object> CreateParamInfoGenerator(Identity identity, bool checkForDuplicates, bool removeUnused);
    [NullableContextAttribute("2")]
private static bool IsValueTuple(Type type);
    internal static Action`2<IDbCommand, object> CreateParamInfoGenerator(Identity identity, bool checkForDuplicates, bool removeUnused, IList`1<LiteralToken> literals);
    [NullableContextAttribute("2")]
private static MethodInfo GetToString(TypeCode typeCode);
    private static int ExecuteCommand(IDbConnection cnn, CommandDefinition& command, Action`2<IDbCommand, object> paramReader);
    [NullableContextAttribute("2")]
private static T ExecuteScalarImpl(IDbConnection cnn, CommandDefinition& command);
    private static DbDataReader ExecuteReaderImpl(IDbConnection cnn, CommandDefinition& command, CommandBehavior commandBehavior, IDbCommand& cmd);
    private static Action`2<IDbCommand, object> GetParameterReader(IDbConnection cnn, CommandDefinition& command);
    private static Func`2<DbDataReader, object> GetSimpleValueDeserializer(Type type, Type effectiveType, int index, bool useGetFieldValue);
    private static Func`2<DbDataReader, object> ReadViaGetFieldValueFactory(Type type, int index);
    private static Func`2<DbDataReader, object> UnderlyingReadViaGetFieldValueFactory(int index);
    private static bool UseGetFieldValue(Type type);
    [NullableContextAttribute("2")]
private static T Parse(object value);
    public static ITypeMap GetTypeMap(Type type);
    public static void SetTypeMap(Type type, ITypeMap map);
    public static Func`2<IDataReader, object> GetTypeDeserializer(Type type, IDataReader reader, int startBound, int length, bool returnNullIfFirstMissing);
    private static Func`2<IDataReader, object> WrapObjectReader(Func`2<DbDataReader, object> dbReader);
    public static Func`2<DbDataReader, object> GetTypeDeserializer(Type type, DbDataReader reader, int startBound, int length, bool returnNullIfFirstMissing);
    private static LocalBuilder GetTempLocal(ILGenerator il, Dictionary`2& locals, Type type, bool initAndLoad);
    private static Func`2<DbDataReader, object> GetTypeDeserializerImpl(Type type, DbDataReader reader, int startBound, int length, bool returnNullIfFirstMissing);
    private static void GenerateValueTupleDeserializer(Type valueTupleType, DbDataReader reader, int startBound, int length, ILGenerator il);
    private static void GenerateDeserializerFromMap(Type type, DbDataReader reader, int startBound, int length, bool returnNullIfFirstMissing, ILGenerator il);
    private static void LoadDefaultValue(ILGenerator il, Type type);
    private static void LoadReaderValueViaGetFieldValue(ILGenerator il, int index, Type memberType, LocalBuilder valueCopyLocal, Label isDbNullLabel, Boolean& popWhenNull);
    private static void LoadReaderValueOrBranchToDBNullLabel(ILGenerator il, int index, LocalBuilder& stringEnumLocal, LocalBuilder valueCopyLocal, Type colType, Type memberType, Label& isDbNullLabel, Boolean& popWhenNull);
    private static void FlexibleConvertBoxedFromHeadOfStack(ILGenerator il, Type from, Type to, Type via);
    private static MethodInfo GetOperator(Type from, Type to);
    private static MethodInfo ResolveOperator(MethodInfo[] methods, Type from, Type to, string name);
    [ObsoleteAttribute("This method is for internal use only", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static void ThrowNullCustomQueryParameter(string name);
    [ObsoleteAttribute("This method is for internal use only", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static void ThrowDataException(Exception ex, int index, IDataReader reader, object value);
    private static void EmitInt32(ILGenerator il, int value);
    public static IEqualityComparer`1<string> get_ConnectionStringComparer();
    public static void set_ConnectionStringComparer(IEqualityComparer`1<string> value);
    [ExtensionAttribute]
public static ICustomQueryParameter AsTableValuedParameter(DataTable table, string typeName);
    [ExtensionAttribute]
public static void SetTypeName(DataTable table, string typeName);
    [ExtensionAttribute]
public static string GetTypeName(DataTable table);
    [ExtensionAttribute]
public static ICustomQueryParameter AsTableValuedParameter(IEnumerable`1<T> list, string typeName);
    private static StringBuilder GetStringBuilder();
    [ExtensionAttribute]
private static string ToStringRecycle(StringBuilder obj);
    [IteratorStateMachineAttribute("Dapper.SqlMapper/<Parse>d__255`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Parse(IDataReader reader);
    [IteratorStateMachineAttribute("Dapper.SqlMapper/<Parse>d__256")]
[ExtensionAttribute]
public static IEnumerable`1<object> Parse(IDataReader reader, Type type);
    [IteratorStateMachineAttribute("Dapper.SqlMapper/<Parse>d__257")]
[ExtensionAttribute]
public static IEnumerable`1<object> Parse(IDataReader reader);
    [ExtensionAttribute]
public static Func`2<IDataReader, object> GetRowParser(IDataReader reader, Type type, int startIndex, int length, bool returnNullIfFirstMissing);
    [ExtensionAttribute]
public static Func`2<DbDataReader, object> GetRowParser(DbDataReader reader, Type type, int startIndex, int length, bool returnNullIfFirstMissing);
    [ExtensionAttribute]
public static Func`2<IDataReader, T> GetRowParser(IDataReader reader, Type concreteType, int startIndex, int length, bool returnNullIfFirstMissing);
    [ExtensionAttribute]
public static Func`2<DbDataReader, T> GetRowParser(DbDataReader reader, Type concreteType, int startIndex, int length, bool returnNullIfFirstMissing);
    [AsyncIteratorStateMachineAttribute("Dapper.SqlMapper/<<QueryUnbufferedAsync>g__Impl|72_0>d`1")]
[CompilerGeneratedAttribute]
internal static IAsyncEnumerable`1<T> <QueryUnbufferedAsync>g__Impl|72_0(IDbConnection cnn, Type effectiveType, CommandDefinition command, CancellationToken cancel);
    [CompilerGeneratedAttribute]
internal static LocalBuilder <CreateParamInfoGenerator>g__GetSizeLocal|197_0(<>c__DisplayClass197_0& );
    [CompilerGeneratedAttribute]
internal static Func`2<DbDataReader, object> <GetSimpleValueDeserializer>g__ReadViaGetValue|206_5(int index);
    [CompilerGeneratedAttribute]
internal static Func`2<IDataReader, T> <GetRowParser>g__Wrap|260_0(Func`2<DbDataReader, object> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Dapper.StructuredHelper : object {
    private static Hashtable s_udt;
    private static Hashtable s_tvp;
    private static StructuredHelper();
    private static Action`2<IDbDataParameter, string> GetUDT(Type type);
    private static Action`2<IDbDataParameter, string> GetTVP(Type type);
    private static Action`2<IDbDataParameter, string> SlowGetHelper(Type type, Hashtable hashtable, string nameProperty, int sqlDbType);
    private static Action`2<IDbDataParameter, string> CreateFor(Type type, string nameProperty, int sqlDbType);
    internal static void ConfigureUDT(IDbDataParameter parameter, string typeName);
    internal static void ConfigureTVP(IDbDataParameter parameter, string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Dapper.TableValuedParameter : object {
    private DataTable table;
    [NullableAttribute("2")]
private string typeName;
    public TableValuedParameter(DataTable table);
    public TableValuedParameter(DataTable table, string typeName);
    private sealed virtual override void Dapper.SqlMapper.ICustomQueryParameter.AddParameter(IDbCommand command, string name);
    [NullableContextAttribute("2")]
internal static void Set(IDbDataParameter parameter, DataTable table, string typeName);
}
[ExtensionAttribute]
internal static class Dapper.TypeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static MethodInfo GetPublicInstanceMethod(Type type, string name, Type[] types);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Dapper.WrappedBasicReader : DbDataReader {
    private IDataReader _reader;
    public bool HasRows { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public int VisibleFieldCount { get; }
    public WrappedBasicReader(IDataReader reader);
    public virtual bool get_HasRows();
    public virtual void Close();
    [NullableContextAttribute("2")]
public virtual DataTable GetSchemaTable();
    [ObsoleteAttribute("This Remoting API is not supported and throws PlatformNotSupportedException.")]
public virtual object InitializeLifetimeService();
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual int get_RecordsAffected();
    protected virtual void Dispose(bool disposing);
    public virtual int get_FieldCount();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    [NullableContextAttribute("2")]
public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual object get_Item(string name);
    public virtual object get_Item(int i);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual Stream GetStream(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual int get_VisibleFieldCount();
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual Task CloseAsync();
    public virtual ValueTask DisposeAsync();
    public virtual Task`1<ReadOnlyCollection`1<DbColumn>> GetColumnSchemaAsync(CancellationToken cancellationToken);
    public virtual Task`1<DataTable> GetSchemaTableAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Dapper.XDocumentHandler : XmlTypeHandler`1<XDocument> {
    protected virtual XDocument Parse(string xml);
    protected virtual string Format(XDocument xml);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Dapper.XElementHandler : XmlTypeHandler`1<XElement> {
    protected virtual XElement Parse(string xml);
    protected virtual string Format(XElement xml);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Dapper.XmlDocumentHandler : XmlTypeHandler`1<XmlDocument> {
    protected virtual XmlDocument Parse(string xml);
    protected virtual string Format(XmlDocument xml);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class Dapper.XmlTypeHandler`1 : StringTypeHandler`1<T> {
    public virtual void SetValue(IDbDataParameter parameter, T value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
