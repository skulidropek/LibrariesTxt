public class DapperExtensions.AsyncDatabase : BaseDatabase {
    private IDapperAsyncImplementor _dapper;
    public AsyncDatabase(IDbConnection connection, ISqlGenerator sqlGenerator);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Get>d__2`1")]
public virtual Task`1<T> Get(object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Get>d__3`1")]
public virtual Task`1<T> Get(object id, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Insert>d__4`1")]
public virtual void Insert(IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Insert>d__5`1")]
public virtual void Insert(IEnumerable`1<T> entities, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Insert>d__6`1")]
public virtual Task`1<object> Insert(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Insert>d__7`1")]
public virtual Task`1<object> Insert(T entity, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Update>d__8`1")]
public virtual Task`1<bool> Update(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Update>d__9`1")]
public virtual Task`1<bool> Update(T entity, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Delete>d__10`1")]
public virtual Task`1<bool> Delete(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Delete>d__11`1")]
public virtual Task`1<bool> Delete(T entity, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Delete>d__12`1")]
public virtual Task`1<bool> Delete(object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Delete>d__13`1")]
public virtual Task`1<bool> Delete(object predicate, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetList>d__14`1")]
public virtual Task`1<IEnumerable`1<T>> GetList(object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetList>d__15`1")]
public virtual Task`1<IEnumerable`1<T>> GetList(object predicate, IList`1<ISort> sort, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetPage>d__16`1")]
public virtual Task`1<IEnumerable`1<T>> GetPage(object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetPage>d__17`1")]
public virtual Task`1<IEnumerable`1<T>> GetPage(object predicate, IList`1<ISort> sort, int page, int resultsPerPage, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetSet>d__18`1")]
public virtual Task`1<IEnumerable`1<T>> GetSet(object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetSet>d__19`1")]
public virtual Task`1<IEnumerable`1<T>> GetSet(object predicate, IList`1<ISort> sort, int firstResult, int maxResults, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Count>d__20`1")]
public virtual Task`1<int> Count(object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<Count>d__21`1")]
public virtual Task`1<int> Count(object predicate, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetMultiple>d__22")]
public virtual Task`1<IMultipleResultReader> GetMultiple(GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetMultiple>d__23")]
public virtual Task`1<IMultipleResultReader> GetMultiple(GetMultiplePredicate predicate, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetNextGuid>d__24")]
public virtual Task`1<Guid> GetNextGuid();
    [AsyncStateMachineAttribute("DapperExtensions.AsyncDatabase/<GetMap>d__25`1")]
public virtual Task`1<IClassMapper> GetMap();
    public virtual void ClearCache();
}
public abstract class DapperExtensions.BaseDatabase : object {
    protected IDbTransaction _transaction;
    [CompilerGeneratedAttribute]
private IDbConnection <Connection>k__BackingField;
    public bool HasActiveTransaction { get; }
    public IDbConnection Connection { get; }
    protected BaseDatabase(IDbConnection connection);
    public sealed virtual bool get_HasActiveTransaction();
    [CompilerGeneratedAttribute]
public sealed virtual IDbConnection get_Connection();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void BeginTransaction(IsolationLevel isolationLevel);
    public sealed virtual void Commit();
    public sealed virtual void Rollback();
    public sealed virtual void RunInTransaction(Action action);
    public sealed virtual T RunInTransaction(Func`1<T> func);
    protected virtual void ClearCache(IDapperImplementor dapper);
}
[ExtensionAttribute]
public static class DapperExtensions.DapperAsyncExtensions : object {
    private static object _lock;
    private static Func`2<IDapperExtensionsConfiguration, IDapperAsyncImplementor> _instanceFactory;
    private static IDapperAsyncImplementor _instance;
    private static IDapperExtensionsConfiguration _configuration;
    private static Dictionary`2<Type, IList`1<IProjection>> ColsBuffer;
    public static Type DefaultMapper { get; public set; }
    public static ISqlDialect SqlDialect { get; public set; }
    public static Func`2<IDapperExtensionsConfiguration, IDapperAsyncImplementor> InstanceFactory { get; public set; }
    private static IDapperAsyncImplementor Instance { get; }
    private static DapperAsyncExtensions();
    public static Type get_DefaultMapper();
    public static void set_DefaultMapper(Type value);
    public static ISqlDialect get_SqlDialect();
    public static void set_SqlDialect(ISqlDialect value);
    public static Func`2<IDapperExtensionsConfiguration, IDapperAsyncImplementor> get_InstanceFactory();
    public static void set_InstanceFactory(Func`2<IDapperExtensionsConfiguration, IDapperAsyncImplementor> value);
    private static IDapperAsyncImplementor get_Instance();
    private static IList`1<IProjection> GetBufferedCols();
    [ExtensionAttribute]
public static void SetMappingAssemblies(IList`1<Assembly> assemblies);
    [ExtensionAttribute]
public static IDapperExtensionsConfiguration Configure(IDapperExtensionsConfiguration configuration);
    [ExtensionAttribute]
public static IDapperExtensionsConfiguration Configure(Type defaultMapper, IList`1<Assembly> mappingAssemblies, ISqlDialect sqlDialect);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<CountAsync>d__21`1")]
[ExtensionAttribute]
public static Task`1<int> CountAsync(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetAsync>d__22`1")]
[ExtensionAttribute]
public static Task`1<T> GetAsync(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetPartialAsync>d__23`2")]
[ExtensionAttribute]
public static Task`1<TOut> GetPartialAsync(IDbConnection connection, object id, Expression`1<Func`2<TIn, TOut>> func, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetListAsync>d__24`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetListAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetPartialListAsync>d__25`2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TOut>> GetPartialListAsync(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetListAutoMapAsync>d__26`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetListAutoMapAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect);
    [ExtensionAttribute]
public static Task InsertAsync(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<object> InsertAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<bool> UpdateAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [ExtensionAttribute]
public static Task`1<bool> UpdatePartialAsync(IDbConnection connection, TIn entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [ExtensionAttribute]
public static Task`1<bool> DeleteAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static Task`1<bool> DeleteAsync(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetPageAsync>d__33`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetPageAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetPartialPageAsync>d__34`2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TOut>> GetPartialPageAsync(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetPageAutoMapAsync>d__35`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetPageAutoMapAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetSetAsync>d__36`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetSetAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetPartialSetAsync>d__37`2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TOut>> GetPartialSetAsync(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<LastExecutedCommandAsync>d__38")]
public static Task`1<string> LastExecutedCommandAsync();
    public static void ClearCache();
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetNextGuid>d__40")]
public static Task`1<Guid> GetNextGuid();
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncExtensions/<GetMap>d__41`1")]
public static Task`1<IClassMapper> GetMap();
}
public class DapperExtensions.DapperAsyncImplementor : DapperImplementor {
    public DapperAsyncImplementor(ISqlGenerator sqlGenerator);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InsertAsync>d__1`1")]
public sealed virtual Task InsertAsync(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InsertAsync>d__2`1")]
public sealed virtual Task`1<object> InsertAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<UpdateAsync>d__3`1")]
public sealed virtual Task`1<bool> UpdateAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties, IList`1<IProjection> colsToUpdate);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<DeleteAsync>d__4`1")]
public sealed virtual Task`1<bool> DeleteAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<DeleteAsync>d__5`1")]
public sealed virtual Task`1<bool> DeleteAsync(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetAsync>d__6`1")]
public sealed virtual Task`1<T> GetAsync(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetListAsync>d__7`1")]
public sealed virtual Task`1<IEnumerable`1<T>> GetListAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetListAutoMapAsync>d__8`1")]
public sealed virtual Task`1<IEnumerable`1<T>> GetListAutoMapAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetPageAsync>d__9`1")]
public sealed virtual Task`1<IEnumerable`1<T>> GetPageAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetPageAutoMapAsync>d__10`1")]
public sealed virtual Task`1<IEnumerable`1<T>> GetPageAutoMapAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetSetAsync>d__11`1")]
public sealed virtual Task`1<IEnumerable`1<T>> GetSetAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<CountAsync>d__12`1")]
public sealed virtual Task`1<int> CountAsync(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetMultipleAsync>d__13")]
public sealed virtual Task`1<IMultipleResultReader> GetMultipleAsync(IDbConnection connection, GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InternalInsertAsync>d__14`1")]
private Task`1<object> InternalInsertAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, IClassMapper classMap, IList`1<IMemberMap> nonIdentityKeyProperties, IMemberMap identityColumn, IMemberMap triggerIdentityColumn, IList`1<IMemberMap> sequenceIdentityColumn);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InternalUpdateAsync>d__15`1")]
private Task`1<bool> InternalUpdateAsync(IDbConnection connection, T entity, IClassMapper classMap, IPredicate predicate, IDbTransaction transaction, IList`1<IProjection> cols, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InternalUpdateAsync>d__16`1")]
private Task`1<bool> InternalUpdateAsync(IDbConnection connection, T entity, IDbTransaction transaction, IList`1<IProjection> cols, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InternalUpdateAsync>d__17`1")]
private void InternalUpdateAsync(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, IList`1<IProjection> cols, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InternalGetAsync>d__18`1")]
private Task`1<T> InternalGetAsync(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InternalGetListAutoMapAsync>d__19`1")]
private Task`1<IEnumerable`1<T>> InternalGetListAutoMapAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InternalGetPageAutoMapAsync>d__20`1")]
private Task`1<IEnumerable`1<T>> InternalGetPageAutoMapAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<InternalGetSetAsync>d__21`1")]
private Task`1<IEnumerable`1<T>> InternalGetSetAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetListAsync>d__22`1")]
protected Task`1<IEnumerable`1<T>> GetListAsync(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IProjection> colsToSelect);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetListAutoMapAsync>d__23`1")]
protected Task`1<IEnumerable`1<T>> GetListAutoMapAsync(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IProjection> colsToSelect);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetPageAsync>d__24`1")]
protected Task`1<IEnumerable`1<T>> GetPageAsync(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IProjection> colsToSelect);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetPageAutoMapAsync>d__25`1")]
protected Task`1<IEnumerable`1<T>> GetPageAutoMapAsync(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IProjection> colsToSelect);
    [AsyncStateMachineAttribute("DapperExtensions.DapperAsyncImplementor/<GetSetAsync>d__26`1")]
protected Task`1<IEnumerable`1<T>> GetSetAsync(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IProjection> colsToSelect);
}
[ExtensionAttribute]
public static class DapperExtensions.DapperExtensions : object {
    private static object _lock;
    private static Func`2<IDapperExtensionsConfiguration, IDapperImplementor> _instanceFactory;
    private static IDapperImplementor _instance;
    private static IDapperExtensionsConfiguration _configuration;
    [CompilerGeneratedAttribute]
private static List`1<IColumn> <AllMappedColumns>k__BackingField;
    public static Type DefaultMapper { get; public set; }
    public static ISqlDialect SqlDialect { get; public set; }
    public static Func`2<IDapperExtensionsConfiguration, IDapperImplementor> InstanceFactory { get; public set; }
    private static IDapperImplementor Instance { get; }
    public static IList`1<Assembly> MappingAssemblies { get; }
    public static List`1<IColumn> AllMappedColumns { get; }
    private static DapperExtensions();
    public static Type get_DefaultMapper();
    public static void set_DefaultMapper(Type value);
    public static ISqlDialect get_SqlDialect();
    public static void set_SqlDialect(ISqlDialect value);
    public static Func`2<IDapperExtensionsConfiguration, IDapperImplementor> get_InstanceFactory();
    public static void set_InstanceFactory(Func`2<IDapperExtensionsConfiguration, IDapperImplementor> value);
    [ExtensionAttribute]
public static SqlInjection GetOrSetSqlInjection(Type entityType, SqlInjection sqlInjection);
    private static IDapperImplementor get_Instance();
    [ExtensionAttribute]
public static void Configure(IDapperExtensionsConfiguration configuration);
    [ExtensionAttribute]
public static void SetMappingAssemblies(IList`1<Assembly> assemblies);
    [ExtensionAttribute]
public static void Configure(Type defaultMapper, IList`1<Assembly> mappingAssemblies, ISqlDialect sqlDialect);
    [ExtensionAttribute]
public static T Get(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static TOut GetPartial(IDbConnection connection, object id, Expression`1<Func`2<TIn, TOut>> func, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static void Insert(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static object Insert(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static bool Update(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [ExtensionAttribute]
public static void Update(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [ExtensionAttribute]
public static bool UpdatePartial(IDbConnection connection, TIn entity, Expression`1<Func`2<TIn, TOut>> func, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [ExtensionAttribute]
public static void UpdatePartial(IDbConnection connection, IEnumerable`1<TIn> entities, Expression`1<Func`2<TIn, TOut>> func, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    [ExtensionAttribute]
public static bool Delete(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static void Delete(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static bool Delete(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetList(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static IEnumerable`1<TOut> GetPartialList(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetListAutoMap(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static IEnumerable`1<TOut> GetPartialListAutoMap(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetPage(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static IEnumerable`1<TOut> GetPartialPage(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetPageAutoMap(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static IEnumerable`1<TOut> GetPartialPageAutoMap(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetSet(IDbConnection connection, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static IEnumerable`1<TOut> GetPartialSet(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    [ExtensionAttribute]
public static int Count(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static IMultipleResultReader GetMultiple(IDbConnection connection, GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public static IClassMapper GetMap();
    [ExtensionAttribute]
public static IClassMapper GetMap(Type entityType);
    public static IList`1<Assembly> get_MappingAssemblies();
    [ExtensionAttribute]
public static Type GetMapType(Type entityType);
    public static void ClearCache();
    public static Guid GetNextGuid();
    [CompilerGeneratedAttribute]
public static List`1<IColumn> get_AllMappedColumns();
    [IteratorStateMachineAttribute("DapperExtensions.DapperExtensions/<GetIdentifiers>d__53")]
[ExtensionAttribute]
public static IEnumerable`1<IMemberMap> GetIdentifiers(IClassMapper map);
    public static string GetTableName();
    public static string GetColumnName(string propertyName);
    public static string LastExecutedCommand();
}
public class DapperExtensions.DapperExtensionsConfiguration : object {
    private ConcurrentDictionary`2<Type, SqlInjection> _sqlInjections;
    private ConcurrentDictionary`2<Type, IClassMapper> _classMaps;
    [CompilerGeneratedAttribute]
private Type <DefaultMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Assembly> <MappingAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlDialect <Dialect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitiveSearchEnabled>k__BackingField;
    public Type DefaultMapper { get; }
    public IList`1<Assembly> MappingAssemblies { get; }
    public ISqlDialect Dialect { get; }
    public bool CaseSensitiveSearchEnabled { get; private set; }
    public DapperExtensionsConfiguration(Type defaultMapper, IList`1<Assembly> mappingAssemblies, ISqlDialect sqlDialect);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DefaultMapper();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Assembly> get_MappingAssemblies();
    [CompilerGeneratedAttribute]
public sealed virtual ISqlDialect get_Dialect();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CaseSensitiveSearchEnabled();
    [CompilerGeneratedAttribute]
private void set_CaseSensitiveSearchEnabled(bool value);
    public sealed virtual IClassMapper GetMap(Type entityType);
    public sealed virtual IClassMapper GetMap();
    [ExcludeFromCodeCoverageAttribute]
public sealed virtual void ClearCache();
    public sealed virtual Guid GetNextGuid();
    public virtual Type GetMapType(Type entityType);
    public sealed virtual SqlInjection GetOrSetSqlInjection(Type entityType, SqlInjection sqlInjection);
    public sealed virtual void SetCaseSensitiveSearch(bool value);
}
public class DapperExtensions.DapperImplementor : object {
    private static Dictionary`2<Type, IList`1<IProjection>> ColsBuffer;
    [CompilerGeneratedAttribute]
private ISqlGenerator <SqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastExecutedCommand>k__BackingField;
    public ISqlGenerator SqlGenerator { get; }
    public string LastExecutedCommand { get; protected set; }
    public DapperImplementor(ISqlGenerator sqlGenerator);
    private static DapperImplementor();
    [CompilerGeneratedAttribute]
public sealed virtual ISqlGenerator get_SqlGenerator();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LastExecutedCommand();
    [CompilerGeneratedAttribute]
protected void set_LastExecutedCommand(string value);
    public sealed virtual T Get(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    public sealed virtual TOut GetPartial(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    public sealed virtual void Insert(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public sealed virtual object Insert(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public sealed virtual bool Update(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public sealed virtual void Update(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public sealed virtual bool UpdatePartial(IDbConnection connection, TIn entity, Expression`1<Func`2<TIn, TOut>> func, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public sealed virtual void UpdatePartial(IDbConnection connection, IEnumerable`1<TIn> entities, Expression`1<Func`2<TIn, TOut>> func, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public sealed virtual bool Delete(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public sealed virtual void Delete(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public sealed virtual bool Delete(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public sealed virtual IEnumerable`1<T> GetList(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IEnumerable`1<TOut> GetPartialList(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IEnumerable`1<T> GetListAutoMap(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IEnumerable`1<TOut> GetPartialListAutoMap(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IEnumerable`1<T> GetPage(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IEnumerable`1<TOut> GetPartialPage(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IEnumerable`1<T> GetPageAutoMap(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IEnumerable`1<TOut> GetPartialPageAutoMap(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IEnumerable`1<T> GetSet(IDbConnection connection, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IEnumerable`1<TOut> GetPartialSet(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    private static object GetParameterValue(KeyValuePair`2<string, object> parameter);
    public sealed virtual int Count(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    public sealed virtual IMultipleResultReader GetMultiple(IDbConnection connection, GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    protected IEnumerable`1<T> GetList(IDbConnection connection, IList`1<IProjection> colsToSelect, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    protected IEnumerable`1<T> GetListAutoMap(IDbConnection connection, IList`1<IProjection> colsToSelect, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    protected IEnumerable`1<T> GetPageAutoMap(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    protected IEnumerable`1<T> GetPage(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    protected IEnumerable`1<T> GetSet(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    protected bool Delete(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    protected static IPredicate GetPredicate(IClassMapper classMap, object predicate);
    private static IPredicate ReturnPredicate(IList`1<IPredicate> predicates);
    protected static IPredicate GetIdPredicate(IClassMapper classMap, object id);
    protected static IPredicate GetKeyPredicate(IClassMapper classMap, T entity);
    protected static IPredicate GetEntityPredicate(IClassMapper classMap, object entity);
    protected GridReaderResultReader GetMultipleByBatch(IDbConnection connection, GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    protected SequenceReaderResultReader GetMultipleBySequence(IDbConnection connection, GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    protected void SetAutoMapperIdentifier(IList`1<Table> tables);
    protected string GetColumnAliasFromSimpleAlias(string simpleAlias);
    protected string GetSimpleAliasFromColumnAlias(string columnAlias);
    protected IEnumerable`1<T> MappColumns(IEnumerable`1<object> values);
    protected static DynamicParameters GetDynamicParameters(Dictionary`2<string, object> parameters);
    protected virtual DynamicParameters AddParameter(T entity, DynamicParameters parameters, IMemberMap prop, bool useColumnAlias);
    private DynamicParameters GetDynamicParameters(T entity, IClassMapper classMap, IList`1<IMemberMap> sequenceColumn, IList`1<MemberInfo> foreignKeys, IList`1<MemberInfo> ignoredColumns, bool useColumnAlias);
    public DynamicParameters GetDynamicParameters(IClassMapper classMap, T entity, bool useColumnAlias);
    public DynamicParameters GetDynamicParameters(T entity, DynamicParameters dynamicParameters, IMemberMap keyColumn, bool useColumnAlias);
    private static IList`1<IProjection> GetBufferedCols();
    private object InsertTriggered(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, string sql, IMemberMap key, DynamicParameters dynamicParameters);
    private object InsertIdentity(IDbConnection connection, IDbTransaction transaction, Nullable`1<int> commandTimeout, IClassMapper classMap, string sql, DynamicParameters dynamicParameters);
    private IDictionary`2<string, object> AddSequenceParameter(IDbConnection connection, T entity, IMemberMap key, DynamicParameters dynamicParameters, IDictionary`2<string, object> keyValues);
    private void AddKeyParameters(T entity, IList`1<IMemberMap> keyList, DynamicParameters dynamicParameters, bool useColumnAlias);
    protected object InternalInsert(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, IClassMapper classMap, IList`1<IMemberMap> nonIdentityKeyProperties, IMemberMap identityColumn, IMemberMap triggerIdentityColumn, IList`1<IMemberMap> sequenceIdentityColumn);
    protected bool InternalUpdate(IDbConnection connection, T entity, IClassMapper classMap, IPredicate predicate, IDbTransaction transaction, IList`1<IProjection> cols, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    protected bool InternalUpdate(IDbConnection connection, T entity, IDbTransaction transaction, IList`1<IProjection> cols, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    protected void InternalUpdate(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, IList`1<IProjection> cols, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    protected T InternalGet(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    protected IEnumerable`1<T> InternalGetListAutoMap(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    protected IEnumerable`1<T> InternalGetPageAutoMap(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    protected IEnumerable`1<T> InternalGetSet(IDbConnection connection, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    protected bool InternalDelete(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    protected virtual void GetMapAndPredicate(object predicateValue, IClassMapper& classMapper, IPredicate& wherePredicate, bool keyPredicate);
}
public class DapperExtensions.Database : BaseDatabase {
    private IDapperImplementor _dapper;
    public Database(IDbConnection connection, ISqlGenerator sqlGenerator);
    public virtual T Get(object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public virtual T Get(object id, Nullable`1<int> commandTimeout);
    public virtual void Insert(IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public virtual void Insert(IEnumerable`1<T> entities, Nullable`1<int> commandTimeout);
    public virtual object Insert(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public virtual object Insert(T entity, Nullable`1<int> commandTimeout);
    public virtual bool Update(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public virtual bool Update(T entity, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public virtual bool Delete(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public virtual bool Delete(T entity, Nullable`1<int> commandTimeout);
    public virtual bool Delete(object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public virtual bool Delete(object predicate, Nullable`1<int> commandTimeout);
    public virtual IEnumerable`1<T> GetList(object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    public virtual IEnumerable`1<T> GetList(object predicate, IList`1<ISort> sort, Nullable`1<int> commandTimeout, bool buffered);
    public virtual IEnumerable`1<T> GetPage(object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    public virtual IEnumerable`1<T> GetPage(object predicate, IList`1<ISort> sort, int page, int resultsPerPage, Nullable`1<int> commandTimeout, bool buffered);
    public virtual IEnumerable`1<T> GetSet(object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    public virtual IEnumerable`1<T> GetSet(object predicate, IList`1<ISort> sort, int firstResult, int maxResults, Nullable`1<int> commandTimeout, bool buffered);
    public virtual int Count(object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public virtual int Count(object predicate, Nullable`1<int> commandTimeout);
    public virtual IMultipleResultReader GetMultiple(GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public virtual IMultipleResultReader GetMultiple(GetMultiplePredicate predicate, Nullable`1<int> commandTimeout);
    public virtual void ClearCache();
    public virtual Guid GetNextGuid();
    public virtual IClassMapper GetMap();
}
public enum DapperExtensions.Enums.Comparator : Enum {
    public int value__;
    [DescriptionAttribute("=")]
public static Comparator Equal;
    [DescriptionAttribute("!=")]
public static Comparator NotEqual;
    [DescriptionAttribute("<")]
public static Comparator LessThan;
    [DescriptionAttribute(">")]
public static Comparator GreaterThan;
    [DescriptionAttribute("<=")]
public static Comparator LessThanOrEqual;
    [DescriptionAttribute(">=")]
public static Comparator GreaterThanOrEqual;
}
[ExtensionAttribute]
public static class DapperExtensions.Extensions.EnumExtensions : object {
    [ExtensionAttribute]
public static string Description(Enum value);
    [ExtensionAttribute]
public static string GetString(Operator op, bool not);
}
public class DapperExtensions.GridReaderResultReader : object {
    private GridReader _reader;
    public GridReaderResultReader(GridReader reader);
    public sealed virtual IEnumerable`1<T> Read();
}
public interface DapperExtensions.IAsyncDatabase {
    public abstract virtual Task`1<T> Get(object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<T> Get(object id, Nullable`1<int> commandTimeout);
    public abstract virtual void Insert(IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual void Insert(IEnumerable`1<T> entities, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<object> Insert(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<object> Insert(T entity, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<bool> Update(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public abstract virtual Task`1<bool> Update(T entity, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public abstract virtual Task`1<bool> Delete(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<bool> Delete(T entity, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<bool> Delete(object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<bool> Delete(object predicate, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<IEnumerable`1<T>> GetList(object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual Task`1<IEnumerable`1<T>> GetList(object predicate, IList`1<ISort> sort, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual Task`1<IEnumerable`1<T>> GetPage(object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual Task`1<IEnumerable`1<T>> GetPage(object predicate, IList`1<ISort> sort, int page, int resultsPerPage, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual Task`1<IEnumerable`1<T>> GetSet(object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual Task`1<IEnumerable`1<T>> GetSet(object predicate, IList`1<ISort> sort, int firstResult, int maxResults, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual Task`1<int> Count(object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<int> Count(object predicate, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<IMultipleResultReader> GetMultiple(GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<IMultipleResultReader> GetMultiple(GetMultiplePredicate predicate, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<Guid> GetNextGuid();
    public abstract virtual Task`1<IClassMapper> GetMap();
    public abstract virtual void ClearCache();
}
public interface DapperExtensions.IBaseDatabase {
    public bool HasActiveTransaction { get; }
    public IDbConnection Connection { get; }
    public abstract virtual bool get_HasActiveTransaction();
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual void BeginTransaction(IsolationLevel isolationLevel);
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
    public abstract virtual void RunInTransaction(Action action);
    public abstract virtual T RunInTransaction(Func`1<T> func);
}
public interface DapperExtensions.IDapperAsyncImplementor {
    public abstract virtual Task`1<T> GetAsync(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public abstract virtual Task`1<IEnumerable`1<T>> GetListAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public abstract virtual Task`1<IEnumerable`1<T>> GetListAutoMapAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public abstract virtual Task`1<IEnumerable`1<T>> GetPageAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public abstract virtual Task`1<IEnumerable`1<T>> GetPageAutoMapAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public abstract virtual Task`1<IEnumerable`1<T>> GetSetAsync(IDbConnection connection, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public abstract virtual Task`1<int> CountAsync(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    public abstract virtual Task InsertAsync(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<object> InsertAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<bool> UpdateAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties, IList`1<IProjection> colsToUpdate);
    public abstract virtual Task`1<bool> DeleteAsync(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<bool> DeleteAsync(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual Task`1<IMultipleResultReader> GetMultipleAsync(IDbConnection connection, GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
}
public interface DapperExtensions.IDapperExtensionsConfiguration {
    public Type DefaultMapper { get; }
    public IList`1<Assembly> MappingAssemblies { get; }
    public ISqlDialect Dialect { get; }
    public bool CaseSensitiveSearchEnabled { get; }
    public abstract virtual Type get_DefaultMapper();
    public abstract virtual IList`1<Assembly> get_MappingAssemblies();
    public abstract virtual ISqlDialect get_Dialect();
    public abstract virtual IClassMapper GetMap(Type entityType);
    public abstract virtual IClassMapper GetMap();
    public abstract virtual Type GetMapType(Type entityType);
    public abstract virtual void ClearCache();
    public abstract virtual Guid GetNextGuid();
    public abstract virtual SqlInjection GetOrSetSqlInjection(Type entityType, SqlInjection sqlInjection);
    public abstract virtual bool get_CaseSensitiveSearchEnabled();
    public abstract virtual void SetCaseSensitiveSearch(bool value);
}
public interface DapperExtensions.IDapperImplementor {
    public ISqlGenerator SqlGenerator { get; }
    public string LastExecutedCommand { get; }
    public abstract virtual ISqlGenerator get_SqlGenerator();
    public abstract virtual string get_LastExecutedCommand();
    public abstract virtual T Get(IDbConnection connection, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    public abstract virtual TOut GetPartial(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object id, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    public abstract virtual void Insert(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual object Insert(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual bool Update(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public abstract virtual void Update(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public abstract virtual bool UpdatePartial(IDbConnection connection, TIn entity, Expression`1<Func`2<TIn, TOut>> func, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public abstract virtual void UpdatePartial(IDbConnection connection, IEnumerable`1<TIn> entities, Expression`1<Func`2<TIn, TOut>> func, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public abstract virtual bool Delete(IDbConnection connection, T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual void Delete(IDbConnection connection, IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual bool Delete(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual IEnumerable`1<T> GetList(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IEnumerable`1<TOut> GetPartialList(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IEnumerable`1<T> GetListAutoMap(IDbConnection connection, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IEnumerable`1<TOut> GetPartialListAutoMap(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IEnumerable`1<T> GetPage(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IEnumerable`1<TOut> GetPartialPage(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IEnumerable`1<T> GetPageAutoMap(IDbConnection connection, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IEnumerable`1<TOut> GetPartialPageAutoMap(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IEnumerable`1<T> GetSet(IDbConnection connection, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IEnumerable`1<TOut> GetPartialSet(IDbConnection connection, Expression`1<Func`2<TIn, TOut>> func, object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered, IList`1<IReferenceMap> includedProperties);
    public abstract virtual int Count(IDbConnection connection, object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
    public abstract virtual IMultipleResultReader GetMultiple(IDbConnection connection, GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout, IList`1<IReferenceMap> includedProperties);
}
public interface DapperExtensions.IDatabase {
    public abstract virtual T Get(object id, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual T Get(object id, Nullable`1<int> commandTimeout);
    public abstract virtual void Insert(IEnumerable`1<T> entities, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual void Insert(IEnumerable`1<T> entities, Nullable`1<int> commandTimeout);
    public abstract virtual object Insert(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual object Insert(T entity, Nullable`1<int> commandTimeout);
    public abstract virtual bool Update(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public abstract virtual bool Update(T entity, Nullable`1<int> commandTimeout, bool ignoreAllKeyProperties);
    public abstract virtual bool Delete(T entity, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual bool Delete(T entity, Nullable`1<int> commandTimeout);
    public abstract virtual bool Delete(object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual bool Delete(object predicate, Nullable`1<int> commandTimeout);
    public abstract virtual IEnumerable`1<T> GetList(object predicate, IList`1<ISort> sort, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual IEnumerable`1<T> GetList(object predicate, IList`1<ISort> sort, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual IEnumerable`1<T> GetPage(object predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual IEnumerable`1<T> GetPage(object predicate, IList`1<ISort> sort, int page, int resultsPerPage, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual IEnumerable`1<T> GetSet(object predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual IEnumerable`1<T> GetSet(object predicate, IList`1<ISort> sort, int firstResult, int maxResults, Nullable`1<int> commandTimeout, bool buffered);
    public abstract virtual int Count(object predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual int Count(object predicate, Nullable`1<int> commandTimeout);
    public abstract virtual IMultipleResultReader GetMultiple(GetMultiplePredicate predicate, IDbTransaction transaction, Nullable`1<int> commandTimeout);
    public abstract virtual IMultipleResultReader GetMultiple(GetMultiplePredicate predicate, Nullable`1<int> commandTimeout);
    public abstract virtual Guid GetNextGuid();
    public abstract virtual IClassMapper GetMap();
    public abstract virtual void ClearCache();
}
public interface DapperExtensions.IMultipleResultReader {
    public abstract virtual IEnumerable`1<T> Read();
}
public class DapperExtensions.Mapper.AutoClassMapper`1 : ClassMapper`1<T> {
}
public class DapperExtensions.Mapper.ClassMapper`1 : object {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SimpleAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IMemberMap> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IReferenceMap> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, KeyType> <PropertyTypeKeyTypeMapping>k__BackingField;
    public string SchemaName { get; protected set; }
    public string TableName { get; protected set; }
    public string SimpleAlias { get; protected set; }
    public IList`1<IMemberMap> Properties { get; }
    public IList`1<IReferenceMap> References { get; }
    public Type EntityType { get; private set; }
    public Guid Identity { get; private set; }
    public Guid ParentIdentity { get; private set; }
    protected Dictionary`2<Type, KeyType> PropertyTypeKeyTypeMapping { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
protected void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TableName();
    [CompilerGeneratedAttribute]
protected void set_TableName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SimpleAlias();
    [CompilerGeneratedAttribute]
protected void set_SimpleAlias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IMemberMap> get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IReferenceMap> get_References();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ParentIdentity();
    [CompilerGeneratedAttribute]
private void set_ParentIdentity(Guid value);
    [CompilerGeneratedAttribute]
protected Dictionary`2<Type, KeyType> get_PropertyTypeKeyTypeMapping();
    public virtual void Schema(string schemaName);
    public virtual void Table(string tableName);
    protected virtual void AutoMap();
    protected virtual void AutoMap(Func`3<Type, PropertyInfo, bool> canMap);
    protected virtual IReferenceMap`1<T> ReferenceMap(Expression`1<Func`2<T, object>> expression);
    protected virtual MemberMap Map(Expression`1<Func`2<T, object>> expression);
    protected virtual MemberMap Map(PropertyInfo propertyInfo, MemberMap parent);
    protected virtual void UnMap(Expression`1<Func`2<T, object>> expression);
    private bool GuardForDuplicatePropertyMap(MemberMap result);
    private void GuardForDuplicateReferenceMap(ReferenceMap`1<T> result);
    public virtual void SetEntityType(Type type);
    public virtual void SetIdentity(Guid identity);
    public virtual void SetParentIdentity(Guid identity);
}
public class DapperExtensions.Mapper.Column : object {
    [CompilerGeneratedAttribute]
private Guid <TableIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SimpleAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private IClassMapper <ClassMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemberMap <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private Table <Table>k__BackingField;
    public Guid TableIdentity { get; public set; }
    public string Alias { get; public set; }
    public string SimpleAlias { get; public set; }
    public IClassMapper ClassMapper { get; public set; }
    public IMemberMap Property { get; public set; }
    public Table Table { get; public set; }
    public Column(string columnNameAlias, IMemberMap property, IClassMapper classMapper, Table table);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TableIdentity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TableIdentity(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Alias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SimpleAlias();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SimpleAlias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IClassMapper get_ClassMapper();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClassMapper(IClassMapper value);
    [CompilerGeneratedAttribute]
public sealed virtual IMemberMap get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Property(IMemberMap value);
    [CompilerGeneratedAttribute]
public sealed virtual Table get_Table();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Table(Table value);
}
public interface DapperExtensions.Mapper.IClassMapper {
    public string SchemaName { get; }
    public string TableName { get; }
    public string SimpleAlias { get; }
    public IList`1<IMemberMap> Properties { get; }
    public IList`1<IReferenceMap> References { get; }
    public Type EntityType { get; }
    public Guid Identity { get; }
    public Guid ParentIdentity { get; }
    public abstract virtual string get_SchemaName();
    public abstract virtual string get_TableName();
    public abstract virtual string get_SimpleAlias();
    public abstract virtual IList`1<IMemberMap> get_Properties();
    public abstract virtual IList`1<IReferenceMap> get_References();
    public abstract virtual Type get_EntityType();
    public abstract virtual Guid get_Identity();
    public abstract virtual Guid get_ParentIdentity();
    public abstract virtual void SetIdentity(Guid identity);
    public abstract virtual void SetParentIdentity(Guid identity);
}
public interface DapperExtensions.Mapper.IClassMapper`1 {
}
public interface DapperExtensions.Mapper.IColumn {
    public Guid TableIdentity { get; public set; }
    public string Alias { get; public set; }
    public string SimpleAlias { get; public set; }
    public IClassMapper ClassMapper { get; public set; }
    public IMemberMap Property { get; public set; }
    public Table Table { get; public set; }
    public abstract virtual Guid get_TableIdentity();
    public abstract virtual void set_TableIdentity(Guid value);
    public abstract virtual string get_Alias();
    public abstract virtual void set_Alias(string value);
    public abstract virtual string get_SimpleAlias();
    public abstract virtual void set_SimpleAlias(string value);
    public abstract virtual IClassMapper get_ClassMapper();
    public abstract virtual void set_ClassMapper(IClassMapper value);
    public abstract virtual IMemberMap get_Property();
    public abstract virtual void set_Property(IMemberMap value);
    public abstract virtual Table get_Table();
    public abstract virtual void set_Table(Table value);
}
public interface DapperExtensions.Mapper.IMemberMap {
    public string Name { get; }
    public string ColumnName { get; }
    public string SequenceName { get; }
    public bool Ignored { get; }
    public bool IsReadOnly { get; }
    public Nullable`1<DbType> DbType { get; }
    public Nullable`1<ParameterDirection> DbDirection { get; }
    public Nullable`1<int> DbSize { get; }
    public Nullable`1<byte> DbPrecision { get; }
    public Nullable`1<byte> DbScale { get; }
    public KeyType KeyType { get; }
    public MemberInfo MemberInfo { get; }
    public IClassMapper ClassMapper { get; }
    public IMemberMap ParentProperty { get; }
    public Type MemberType { get; }
    public bool UseEnumDescription { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_ColumnName();
    public abstract virtual string get_SequenceName();
    public abstract virtual bool get_Ignored();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual Nullable`1<DbType> get_DbType();
    public abstract virtual Nullable`1<ParameterDirection> get_DbDirection();
    public abstract virtual Nullable`1<int> get_DbSize();
    public abstract virtual Nullable`1<byte> get_DbPrecision();
    public abstract virtual Nullable`1<byte> get_DbScale();
    public abstract virtual KeyType get_KeyType();
    public abstract virtual MemberInfo get_MemberInfo();
    public abstract virtual IClassMapper get_ClassMapper();
    public abstract virtual IMemberMap get_ParentProperty();
    public abstract virtual object GetValue(object obj);
    public abstract virtual void SetValue(object obj, object value);
    public abstract virtual Type get_MemberType();
    public abstract virtual bool get_UseEnumDescription();
}
public interface DapperExtensions.Mapper.IReferenceMap {
    public Guid Identity { get; }
    public Guid ParentIdentity { get; }
    public string Name { get; }
    public PropertyInfo PropertyInfo { get; }
    public Type EntityType { get; }
    public Type ParentEntityType { get; }
    public IList`1<IReferenceProperty> ReferenceProperties { get; }
    public JoinType JoinType { get; }
    public IPredicateGroup JoinPredicate { get; }
    public abstract virtual Guid get_Identity();
    public abstract virtual Guid get_ParentIdentity();
    public abstract virtual string get_Name();
    public abstract virtual PropertyInfo get_PropertyInfo();
    public abstract virtual Type get_EntityType();
    public abstract virtual Type get_ParentEntityType();
    public abstract virtual IList`1<IReferenceProperty> get_ReferenceProperties();
    public abstract virtual JoinType get_JoinType();
    public abstract virtual IPredicateGroup get_JoinPredicate();
    public abstract virtual void SetParentIdentity(Guid parentIdentity);
    public abstract virtual void SetIdentity(Guid identity);
    public abstract virtual void SetJoinType(JoinType join);
    public abstract virtual void SetJoinPredicate(IPredicateGroup predicate);
}
public interface DapperExtensions.Mapper.IReferenceMap`1 {
    public abstract virtual void Reference(Expression`1<Func`3<TMany, T, object>> expression);
    public abstract virtual void Reference(Expression`1<Func`3<T, T, object>> expression);
}
public interface DapperExtensions.Mapper.IReferenceProperty {
    public string Name { get; }
    public Guid ParentIdentity { get; }
    public Guid Identity { get; }
    public PropertyInfo PropertyInfo { get; }
    public Type EntityType { get; }
    public Comparator Comparator { get; }
    public PropertyKey LeftProperty { get; }
    public PropertyKey RightProperty { get; }
    public string ComparatorSignal { get; }
    public abstract virtual string get_Name();
    public abstract virtual Guid get_ParentIdentity();
    public abstract virtual Guid get_Identity();
    public abstract virtual PropertyInfo get_PropertyInfo();
    public abstract virtual Type get_EntityType();
    public abstract virtual Comparator get_Comparator();
    public abstract virtual PropertyKey get_LeftProperty();
    public abstract virtual PropertyKey get_RightProperty();
    public abstract virtual string get_ComparatorSignal();
    public abstract virtual void SetIdentity(Guid identity);
    public abstract virtual void SetParentIdentity(Guid identity);
}
public interface DapperExtensions.Mapper.IReferenceProperty`1 {
}
public enum DapperExtensions.Mapper.JoinType : Enum {
    public int value__;
    public static JoinType Left;
    public static JoinType Right;
    public static JoinType Inner;
}
public enum DapperExtensions.Mapper.KeyType : Enum {
    public int value__;
    public static KeyType NotAKey;
    public static KeyType Identity;
    public static KeyType TriggerIdentity;
    public static KeyType Guid;
    public static KeyType Assigned;
    public static KeyType ForeignKey;
    public static KeyType SequenceIdentity;
    public static KeyType SlapperIdentifierKey;
}
public class DapperExtensions.Mapper.MemberMap : object {
    [CompilerGeneratedAttribute]
private IMemberMap <ParentProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SequenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyType <KeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DbType> <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ParameterDirection> <DbDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DbSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <DbPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <DbScale>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IClassMapper <ClassMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseEnumDescription>k__BackingField;
    public IMemberMap ParentProperty { get; }
    public string Name { get; }
    public string ColumnName { get; private set; }
    public string SequenceName { get; private set; }
    public KeyType KeyType { get; private set; }
    public bool Ignored { get; private set; }
    public bool IsReadOnly { get; private set; }
    public Nullable`1<DbType> DbType { get; private set; }
    public Nullable`1<ParameterDirection> DbDirection { get; private set; }
    public Nullable`1<int> DbSize { get; private set; }
    public Nullable`1<byte> DbPrecision { get; private set; }
    public Nullable`1<byte> DbScale { get; private set; }
    public MemberInfo MemberInfo { get; }
    public IClassMapper ClassMapper { get; }
    public Type MemberType { get; }
    public bool UseEnumDescription { get; private set; }
    public MemberMap(PropertyInfo memberInfo);
    public MemberMap(FieldInfo memberInfo);
    public MemberMap(MemberInfo memberInfo);
    public MemberMap(MemberInfo memberInfo, IClassMapper classMapper, bool isReference, IMemberMap parent);
    [CompilerGeneratedAttribute]
public sealed virtual IMemberMap get_ParentProperty();
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SequenceName();
    [CompilerGeneratedAttribute]
private void set_SequenceName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual KeyType get_KeyType();
    [CompilerGeneratedAttribute]
private void set_KeyType(KeyType value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Ignored();
    [CompilerGeneratedAttribute]
private void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
private void set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DbType> get_DbType();
    [CompilerGeneratedAttribute]
private void set_DbType(Nullable`1<DbType> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ParameterDirection> get_DbDirection();
    [CompilerGeneratedAttribute]
private void set_DbDirection(Nullable`1<ParameterDirection> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_DbSize();
    [CompilerGeneratedAttribute]
private void set_DbSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<byte> get_DbPrecision();
    [CompilerGeneratedAttribute]
private void set_DbPrecision(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<byte> get_DbScale();
    [CompilerGeneratedAttribute]
private void set_DbScale(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IClassMapper get_ClassMapper();
    public MemberMap Column(string columnName);
    public MemberMap Sequence(string sequenceName);
    public MemberMap Key(KeyType keyType);
    public MemberMap Ignore();
    public MemberMap ReadOnly();
    public MemberMap Size(int size);
    public MemberMap Type(DbType dbType);
    public MemberMap Direction(ParameterDirection direction);
    public MemberMap Precision(byte precision);
    public MemberMap Scale(byte scale);
    public sealed virtual object GetValue(object obj);
    public sealed virtual void SetValue(object obj, object value);
    public sealed virtual Type get_MemberType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseEnumDescription();
    [CompilerGeneratedAttribute]
private void set_UseEnumDescription(bool value);
    public MemberMap EnumDescription(bool value);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__3_0(IMemberMap x);
}
public class DapperExtensions.Mapper.Parameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DbType> <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ParameterDirection> <ParameterDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Scale>k__BackingField;
    public string Name { get; public set; }
    public string ColumnName { get; public set; }
    public object Value { get; public set; }
    public Nullable`1<DbType> DbType { get; public set; }
    public Nullable`1<ParameterDirection> ParameterDirection { get; public set; }
    public Nullable`1<int> Size { get; public set; }
    public Nullable`1<byte> Precision { get; public set; }
    public Nullable`1<byte> Scale { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<DbType> get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(Nullable`1<DbType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ParameterDirection> get_ParameterDirection();
    [CompilerGeneratedAttribute]
public void set_ParameterDirection(Nullable`1<ParameterDirection> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<byte> value);
}
public class DapperExtensions.Mapper.PluralizedAutoClassMapper`1 : AutoClassMapper`1<T> {
    public virtual void Table(string tableName);
}
public class DapperExtensions.Mapper.PropertyKey : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    public string Name { get; }
    public PropertyInfo PropertyInfo { get; }
    public Type EntityType { get; }
    public PropertyKey(PropertyInfo propertyInfo, Type entityType, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
public Type get_EntityType();
}
public class DapperExtensions.Mapper.ReferenceMap`1 : object {
    [CompilerGeneratedAttribute]
private Guid <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParentEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IReferenceProperty> <ReferenceProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JoinType <JoinType>k__BackingField;
    [CompilerGeneratedAttribute]
private IPredicateGroup <JoinPredicate>k__BackingField;
    public Guid Identity { get; private set; }
    public Guid ParentIdentity { get; private set; }
    public string Name { get; private set; }
    public PropertyInfo PropertyInfo { get; private set; }
    public Type EntityType { get; private set; }
    public Type ParentEntityType { get; private set; }
    public IList`1<IReferenceProperty> ReferenceProperties { get; private set; }
    public JoinType JoinType { get; private set; }
    public IPredicateGroup JoinPredicate { get; private set; }
    public ReferenceMap`1(PropertyInfo propertyInfo, Guid parentIdentity);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ParentIdentity();
    [CompilerGeneratedAttribute]
private void set_ParentIdentity(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
private void set_PropertyInfo(PropertyInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParentEntityType();
    [CompilerGeneratedAttribute]
private void set_ParentEntityType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IReferenceProperty> get_ReferenceProperties();
    [CompilerGeneratedAttribute]
private void set_ReferenceProperties(IList`1<IReferenceProperty> value);
    [CompilerGeneratedAttribute]
public sealed virtual JoinType get_JoinType();
    [CompilerGeneratedAttribute]
private void set_JoinType(JoinType value);
    [CompilerGeneratedAttribute]
public sealed virtual IPredicateGroup get_JoinPredicate();
    [CompilerGeneratedAttribute]
private void set_JoinPredicate(IPredicateGroup value);
    public sealed virtual void SetParentIdentity(Guid parentIdentity);
    public sealed virtual void SetIdentity(Guid identity);
    public sealed virtual void SetJoinType(JoinType join);
    private MemberInfo GetMemberInfo(Expression expression);
    protected void SetReferenceProperties(UnaryExpression expression);
    public sealed virtual void SetJoinPredicate(IPredicateGroup predicate);
    public sealed virtual void Reference(Expression`1<Func`3<T, T, object>> expression);
    public sealed virtual void Reference(Expression`1<Func`3<TMany, T, object>> expression);
}
public class DapperExtensions.Mapper.ReferenceProperty`1 : object {
    [CompilerGeneratedAttribute]
private Guid <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Comparator <Comparator>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyKey <LeftProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyKey <RightProperty>k__BackingField;
    public Guid Identity { get; public set; }
    public Guid ParentIdentity { get; public set; }
    public string Name { get; }
    public PropertyInfo PropertyInfo { get; }
    public Type EntityType { get; }
    public Comparator Comparator { get; private set; }
    public PropertyKey LeftProperty { get; private set; }
    public PropertyKey RightProperty { get; private set; }
    public string ComparatorSignal { get; }
    public ReferenceProperty`1(PropertyInfo propertyInfo, Guid parentIdentity, Guid identity);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ParentIdentity();
    [CompilerGeneratedAttribute]
public void set_ParentIdentity(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_EntityType();
    [CompilerGeneratedAttribute]
public sealed virtual Comparator get_Comparator();
    [CompilerGeneratedAttribute]
private void set_Comparator(Comparator value);
    [CompilerGeneratedAttribute]
public sealed virtual PropertyKey get_LeftProperty();
    [CompilerGeneratedAttribute]
private void set_LeftProperty(PropertyKey value);
    [CompilerGeneratedAttribute]
public sealed virtual PropertyKey get_RightProperty();
    [CompilerGeneratedAttribute]
private void set_RightProperty(PropertyKey value);
    public sealed virtual string get_ComparatorSignal();
    public sealed virtual void SetIdentity(Guid identity);
    public sealed virtual void SetParentIdentity(Guid identity);
    internal void Compare(PropertyKey leftProperty, PropertyKey rightProperty, Comparator comparator);
}
public class DapperExtensions.Mapper.Table : object {
    [CompilerGeneratedAttribute]
private Guid <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LastIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParentEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVirtual>k__BackingField;
    [CompilerGeneratedAttribute]
private IClassMapper <ClassMapper>k__BackingField;
    public Guid Identity { get; public set; }
    public Guid ParentIdentity { get; public set; }
    public Guid LastIdentity { get; public set; }
    public string Alias { get; public set; }
    public string ReferenceName { get; public set; }
    public string Name { get; public set; }
    public Type EntityType { get; public set; }
    public Type ParentEntityType { get; public set; }
    public PropertyInfo PropertyInfo { get; public set; }
    public bool IsVirtual { get; public set; }
    public IClassMapper ClassMapper { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ParentIdentity();
    [CompilerGeneratedAttribute]
public void set_ParentIdentity(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_LastIdentity();
    [CompilerGeneratedAttribute]
public void set_LastIdentity(Guid value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_ReferenceName();
    [CompilerGeneratedAttribute]
public void set_ReferenceName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ParentEntityType();
    [CompilerGeneratedAttribute]
public void set_ParentEntityType(Type value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
public void set_PropertyInfo(PropertyInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsVirtual();
    [CompilerGeneratedAttribute]
public void set_IsVirtual(bool value);
    [CompilerGeneratedAttribute]
public IClassMapper get_ClassMapper();
    [CompilerGeneratedAttribute]
public void set_ClassMapper(IClassMapper value);
}
public abstract class DapperExtensions.Predicate.BasePredicate : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; public set; }
    public abstract virtual string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, bool isDml);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PropertyName(string value);
    protected virtual string GetColumnName(Type entityType, ISqlGenerator sqlGenerator, string propertyName, bool isDml, bool includePrefix);
}
public class DapperExtensions.Predicate.BetweenPredicate`1 : BasePredicate {
    [CompilerGeneratedAttribute]
private BetweenValues <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Not>k__BackingField;
    public BetweenValues Value { get; public set; }
    public bool Not { get; public set; }
    public virtual string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, bool isDml);
    [CompilerGeneratedAttribute]
public sealed virtual BetweenValues get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(BetweenValues value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Not();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Not(bool value);
}
public class DapperExtensions.Predicate.BetweenValues : ValueType {
    [CompilerGeneratedAttribute]
private object <Value1>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value2>k__BackingField;
    public object Value1 { get; public set; }
    public object Value2 { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Value1();
    [CompilerGeneratedAttribute]
public void set_Value1(object value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Value2();
    [CompilerGeneratedAttribute]
public void set_Value2(object value);
}
public abstract class DapperExtensions.Predicate.ComparePredicate : BasePredicate {
    [CompilerGeneratedAttribute]
private Operator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Not>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTableAlias>k__BackingField;
    public Operator Operator { get; public set; }
    public bool Not { get; public set; }
    public bool UseTableAlias { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Operator get_Operator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Operator(Operator value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Not();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Not(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseTableAlias();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseTableAlias(bool value);
    public virtual string GetOperatorString();
}
public enum DapperExtensions.Predicate.DatabaseFunction : Enum {
    public int value__;
    public static DatabaseFunction None;
    public static DatabaseFunction Truncate;
    public static DatabaseFunction NullValue;
}
public class DapperExtensions.Predicate.ExistsPredicate`1 : object {
    [CompilerGeneratedAttribute]
private IPredicate <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Not>k__BackingField;
    public IPredicate Predicate { get; public set; }
    public bool Not { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IPredicate get_Predicate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Predicate(IPredicate value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Not();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Not(bool value);
    public sealed virtual string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, bool isDml);
    protected virtual IClassMapper GetClassMapper(Type type, IDapperExtensionsConfiguration configuration);
}
public class DapperExtensions.Predicate.FieldPredicate`1 : ComparePredicate {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseFunction <DatabaseFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseFunctionParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PropertyInfo> <Properties>k__BackingField;
    public object Value { get; public set; }
    public DatabaseFunction DatabaseFunction { get; public set; }
    public string DatabaseFunctionParameters { get; public set; }
    public IList`1<PropertyInfo> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
public sealed virtual DatabaseFunction get_DatabaseFunction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DatabaseFunction(DatabaseFunction value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DatabaseFunctionParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DatabaseFunctionParameters(string value);
    [CompilerGeneratedAttribute]
public IList`1<PropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IList`1<PropertyInfo> value);
    protected virtual string GetColumnName(Type entityType, ISqlGenerator sqlGenerator, string propertyName, bool isDml, bool includePrefix);
    private string GetColumnName(ISqlGenerator sqlGenerator, Type& parentType, String& parameterPropertyName, bool isDml);
    private string GetParameterName(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, object value);
    private string GetParameterName(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, string parameterPropertyName, Type parentType);
    private string GetParameterString(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, IEnumerable values);
    private string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, string columnName, string parameterPropertyName, Type parentType);
    public virtual string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, bool isDml);
    [CompilerGeneratedAttribute]
private bool <GetColumnName>b__18_0(PropertyInfo p);
}
public class DapperExtensions.Predicate.GetMultiplePredicate : object {
    private List`1<GetMultiplePredicateItem> _items;
    public IEnumerable`1<GetMultiplePredicateItem> Items { get; }
    public IEnumerable`1<GetMultiplePredicateItem> get_Items();
    public void Add(IPredicate predicate, IList`1<ISort> sort);
}
public enum DapperExtensions.Predicate.GroupOperator : Enum {
    public int value__;
    public static GroupOperator And;
    public static GroupOperator Or;
}
public interface DapperExtensions.Predicate.IBasePredicate {
    public string PropertyName { get; public set; }
    public abstract virtual string get_PropertyName();
    public abstract virtual void set_PropertyName(string value);
}
public interface DapperExtensions.Predicate.IBetweenPredicate {
    public string PropertyName { get; public set; }
    public BetweenValues Value { get; public set; }
    public bool Not { get; public set; }
    public abstract virtual string get_PropertyName();
    public abstract virtual void set_PropertyName(string value);
    public abstract virtual BetweenValues get_Value();
    public abstract virtual void set_Value(BetweenValues value);
    public abstract virtual bool get_Not();
    public abstract virtual void set_Not(bool value);
}
public interface DapperExtensions.Predicate.IComparePredicate {
    public Operator Operator { get; public set; }
    public bool Not { get; public set; }
    public bool UseTableAlias { get; public set; }
    public abstract virtual Operator get_Operator();
    public abstract virtual void set_Operator(Operator value);
    public abstract virtual bool get_Not();
    public abstract virtual void set_Not(bool value);
    public abstract virtual bool get_UseTableAlias();
    public abstract virtual void set_UseTableAlias(bool value);
}
public interface DapperExtensions.Predicate.IExistsPredicate {
    public IPredicate Predicate { get; public set; }
    public bool Not { get; public set; }
    public abstract virtual IPredicate get_Predicate();
    public abstract virtual void set_Predicate(IPredicate value);
    public abstract virtual bool get_Not();
    public abstract virtual void set_Not(bool value);
}
public interface DapperExtensions.Predicate.IFieldPredicate {
    public object Value { get; public set; }
    public DatabaseFunction DatabaseFunction { get; public set; }
    public string DatabaseFunctionParameters { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual DatabaseFunction get_DatabaseFunction();
    public abstract virtual void set_DatabaseFunction(DatabaseFunction value);
    public abstract virtual string get_DatabaseFunctionParameters();
    public abstract virtual void set_DatabaseFunctionParameters(string value);
}
public interface DapperExtensions.Predicate.IInPredicate {
    public ICollection Collection { get; }
    public bool Not { get; public set; }
    public abstract virtual ICollection get_Collection();
    public abstract virtual bool get_Not();
    public abstract virtual void set_Not(bool value);
}
public class DapperExtensions.Predicate.InPredicate`1 : BasePredicate {
    [CompilerGeneratedAttribute]
private ICollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Not>k__BackingField;
    public ICollection Collection { get; }
    public bool Not { get; public set; }
    public InPredicate`1(ICollection collection, string propertyName, bool isNot);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection get_Collection();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Not();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Not(bool value);
    public virtual string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, bool isDml);
    private static string GetIsNotStatement(bool not);
}
public interface DapperExtensions.Predicate.IPredicate {
    public abstract virtual string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, bool isDml);
}
public interface DapperExtensions.Predicate.IPredicateGroup {
    public GroupOperator Operator { get; public set; }
    public IList`1<IPredicate> Predicates { get; public set; }
    public abstract virtual GroupOperator get_Operator();
    public abstract virtual void set_Operator(GroupOperator value);
    public abstract virtual IList`1<IPredicate> get_Predicates();
    public abstract virtual void set_Predicates(IList`1<IPredicate> value);
}
public interface DapperExtensions.Predicate.IProjection {
    public string PropertyName { get; }
    public abstract virtual string get_PropertyName();
}
public interface DapperExtensions.Predicate.IPropertyPredicate {
    public string PropertyName2 { get; public set; }
    public bool UseRightTableAlias { get; public set; }
    public DatabaseFunction LeftDatabaseFunction { get; public set; }
    public string LeftDatabaseFunctionParameters { get; public set; }
    public DatabaseFunction RigthDatabaseFunction { get; public set; }
    public string RigthDatabaseFunctionParameters { get; public set; }
    public abstract virtual string get_PropertyName2();
    public abstract virtual void set_PropertyName2(string value);
    public abstract virtual bool get_UseRightTableAlias();
    public abstract virtual void set_UseRightTableAlias(bool value);
    public abstract virtual DatabaseFunction get_LeftDatabaseFunction();
    public abstract virtual void set_LeftDatabaseFunction(DatabaseFunction value);
    public abstract virtual string get_LeftDatabaseFunctionParameters();
    public abstract virtual void set_LeftDatabaseFunctionParameters(string value);
    public abstract virtual DatabaseFunction get_RigthDatabaseFunction();
    public abstract virtual void set_RigthDatabaseFunction(DatabaseFunction value);
    public abstract virtual string get_RigthDatabaseFunctionParameters();
    public abstract virtual void set_RigthDatabaseFunctionParameters(string value);
}
public interface DapperExtensions.Predicate.ISort {
    public string PropertyName { get; public set; }
    public bool Ascending { get; public set; }
    public IList`1<PropertyInfo> Properties { get; public set; }
    public abstract virtual string get_PropertyName();
    public abstract virtual void set_PropertyName(string value);
    public abstract virtual bool get_Ascending();
    public abstract virtual void set_Ascending(bool value);
    public abstract virtual IList`1<PropertyInfo> get_Properties();
    public abstract virtual void set_Properties(IList`1<PropertyInfo> value);
}
public interface DapperExtensions.Predicate.IVirtualPredicate {
    public Operator Operator { get; public set; }
    public bool Not { get; public set; }
    public string Comparable { get; public set; }
    public object Value { get; public set; }
    public abstract virtual Operator get_Operator();
    public abstract virtual void set_Operator(Operator value);
    public abstract virtual bool get_Not();
    public abstract virtual void set_Not(bool value);
    public abstract virtual string get_Comparable();
    public abstract virtual void set_Comparable(string value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
public enum DapperExtensions.Predicate.Operator : Enum {
    public int value__;
    public static Operator Eq;
    public static Operator Gt;
    public static Operator Ge;
    public static Operator Lt;
    public static Operator Le;
    public static Operator Like;
    public static Operator Contains;
}
public class DapperExtensions.Predicate.PredicateGroup : object {
    [CompilerGeneratedAttribute]
private GroupOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IPredicate> <Predicates>k__BackingField;
    public GroupOperator Operator { get; public set; }
    public IList`1<IPredicate> Predicates { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual GroupOperator get_Operator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Operator(GroupOperator value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IPredicate> get_Predicates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Predicates(IList`1<IPredicate> value);
    public sealed virtual string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, bool isDml);
}
public class DapperExtensions.Predicate.Projection : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public Projection(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
}
public class DapperExtensions.Predicate.PropertyPredicate`2 : ComparePredicate {
    [CompilerGeneratedAttribute]
private string <PropertyName2>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRightTableAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseFunction <LeftDatabaseFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeftDatabaseFunctionParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseFunction <RigthDatabaseFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RigthDatabaseFunctionParameters>k__BackingField;
    public string PropertyName2 { get; public set; }
    public bool UseRightTableAlias { get; public set; }
    public DatabaseFunction LeftDatabaseFunction { get; public set; }
    public string LeftDatabaseFunctionParameters { get; public set; }
    public DatabaseFunction RigthDatabaseFunction { get; public set; }
    public string RigthDatabaseFunctionParameters { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PropertyName2(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseRightTableAlias();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseRightTableAlias(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual DatabaseFunction get_LeftDatabaseFunction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LeftDatabaseFunction(DatabaseFunction value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LeftDatabaseFunctionParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LeftDatabaseFunctionParameters(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DatabaseFunction get_RigthDatabaseFunction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RigthDatabaseFunction(DatabaseFunction value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RigthDatabaseFunctionParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RigthDatabaseFunctionParameters(string value);
    public virtual string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, bool isDml);
}
public class DapperExtensions.Predicate.Sort : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ascending>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PropertyInfo> <Properties>k__BackingField;
    public string PropertyName { get; public set; }
    public bool Ascending { get; public set; }
    public IList`1<PropertyInfo> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Ascending();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Ascending(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<PropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Properties(IList`1<PropertyInfo> value);
}
public class DapperExtensions.Predicate.VirtualPredicate : object {
    [CompilerGeneratedAttribute]
private Operator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Not>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comparable>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public Operator Operator { get; public set; }
    public bool Not { get; public set; }
    public string Comparable { get; public set; }
    public object Value { get; public set; }
    public VirtualPredicate(string comparable, Operator op, object value, bool not);
    [CompilerGeneratedAttribute]
public sealed virtual Operator get_Operator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Operator(Operator value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Not();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Not(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Comparable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Comparable(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    public virtual string GetSql(ISqlGenerator sqlGenerator, IDictionary`2<string, object> parameters, bool isDml);
}
public static class DapperExtensions.Predicates : object {
    public static IFieldPredicate Field(Expression`1<Func`2<T, object>> expression, Operator op, object value, bool not, bool useColumPrefix, DatabaseFunction databaseFunction, string databaseFunctionParameters);
    public static IFieldPredicate Field(string propertyName, Operator op, object value, bool not, bool useColumPrefix, DatabaseFunction databaseFunction, string databaseFunctionParameters);
    public static IPropertyPredicate Property(Expression`1<Func`2<T, object>> expression, Operator op, Expression`1<Func`2<T2, object>> expression2, bool not, bool useLeftColumPrefix, bool useRightColumPrefix, DatabaseFunction leftDatabaseFunction, string leftDatabaseFunctionParameters, DatabaseFunction rigthDatabaseFunction, string rigthDatabaseFunctionParameters);
    public static IPredicateGroup Group(GroupOperator op, IPredicate[] predicate);
    public static IExistsPredicate Exists(IPredicate predicate, bool not);
    public static IBetweenPredicate Between(Expression`1<Func`2<T, object>> expression, BetweenValues values, bool not);
    public static ISort Sort(Expression`1<Func`2<T, object>> expression, bool ascending);
    public static ISort Sort(string propertyName, bool ascending);
    public static IInPredicate In(Expression`1<Func`2<T, object>> expression, ICollection collection, bool not);
    public static IVirtualPredicate VirtualPredicate(string comparable, Operator op, object value, bool not);
}
[ExtensionAttribute]
public static class DapperExtensions.ReflectionHelper : object {
    private static List`1<Type> _simpleTypes;
    private static ReflectionHelper();
    public static IList`1<PropertyInfo> GetNestedProperties(string nestedProperties, char delimiter, String& propertyInfoName);
    public static object GetProperty(Expression lambda, bool isMapping);
    public static IDictionary`2<string, Func`1<object>> GetObjectValues(object obj);
    [ExtensionAttribute]
public static string AppendStrings(IEnumerable`1<string> list, string seperator);
    public static bool IsSimpleType(Type type);
    [ExtensionAttribute]
public static string GetParameterName(IDictionary`2<string, object> parameters, string parameterName, char parameterPrefix);
    [ExtensionAttribute]
public static string SetParameterName(IDictionary`2<string, object> parameters, Parameter parameter, char parameterPrefix);
    public static void SetValue(Type type, string propertyName, object obj, object value);
    public static BinaryExpression GetBinaryExpressions(BinaryExpression expression, IList`1& binaries);
    public static IList`1<BinaryExpression> GetBinaryExpressionsFromUnary(UnaryExpression expression);
    public static Comparator GetRelacionalComparator(ExpressionType type, string name);
    private static AssemblyBuilder CreateAssemblyBuilder(AssemblyName assemblyName);
    public static AssemblyBuilder CreateAssemblyBuilder(string assemblyName);
    public static ModuleBuilder CreateModuleBuilder(AssemblyBuilder assemblyBuilder, string moduleName);
    public static TypeBuilder CreateTypeBuilder(ModuleBuilder moduleBuilder, string typeName, Type baseType);
    public static Type CreateVirtualType(TypeBuilder typeBuilder, Type entityType);
    public static Type CreateMapType(TypeBuilder typeBuilder, Type entityType, Type extendedType);
    public static Parameter GetParameter(Type entityType, ISqlGenerator sqlGenerator, string propertyName, object value);
    public static PropertyInfo GetPropertyInfo(Type type, string propertyName);
}
public class DapperExtensions.SequenceReaderResultReader : object {
    private Queue`1<GridReader> _items;
    public SequenceReaderResultReader(IEnumerable`1<GridReader> items);
    public sealed virtual IEnumerable`1<T> Read();
}
public class DapperExtensions.Sql.DB2Dialect : SqlDialectBase {
    public bool SupportsMultipleStatements { get; }
    public virtual string GetIdentitySql(string tableName);
    public virtual string GetPagingSql(string sql, int page, int resultsPerPage, IDictionary`2<string, object> parameters, string partitionBy);
    public virtual string GetSetSql(string sql, int firstResult, int maxResults, IDictionary`2<string, object> parameters);
    protected static string GetOrderByClause(string sql);
    protected static int GetFromStart(string sql);
    protected virtual int GetSelectEnd(string sql);
    protected virtual IList`1<string> GetColumnNames(string sql);
    public virtual string GetDatabaseFunctionString(DatabaseFunction databaseFunction, string columnName, string functionParameters);
    [ExcludeFromCodeCoverageAttribute]
public virtual void EnableCaseInsensitive(IDbConnection connection);
    public virtual bool get_SupportsMultipleStatements();
    [CompilerGeneratedAttribute]
private StringBuilder <GetSetSql>b__2_0(StringBuilder sb, string s);
}
public interface DapperExtensions.Sql.ISqlDialect {
    public char OpenQuote { get; }
    public char CloseQuote { get; }
    public string BatchSeperator { get; }
    public bool SupportsMultipleStatements { get; }
    public bool SupportsCountOfSubquery { get; }
    public char ParameterPrefix { get; }
    public string EmptyExpression { get; }
    public abstract virtual char get_OpenQuote();
    public abstract virtual char get_CloseQuote();
    public abstract virtual string get_BatchSeperator();
    public abstract virtual bool get_SupportsMultipleStatements();
    public abstract virtual bool get_SupportsCountOfSubquery();
    public abstract virtual char get_ParameterPrefix();
    public abstract virtual string get_EmptyExpression();
    public abstract virtual string GetTableName(string schemaName, string tableName, string alias);
    public abstract virtual string GetColumnName(string prefix, string columnName, string alias);
    public abstract virtual string GetIdentitySql(string tableName);
    public abstract virtual string GetPagingSql(string sql, int page, int resultsPerPage, IDictionary`2<string, object> parameters, string partitionBy);
    public abstract virtual string GetSetSql(string sql, int firstResult, int maxResults, IDictionary`2<string, object> parameters);
    public abstract virtual bool IsQuoted(string value);
    public abstract virtual string QuoteString(string value);
    public abstract virtual string GetDatabaseFunctionString(DatabaseFunction databaseFunction, string columnName, string functionParameters);
    public abstract virtual void EnableCaseInsensitive(IDbConnection connection);
    public abstract virtual string GetCountSql(string sql);
}
public interface DapperExtensions.Sql.ISqlGenerator {
    public IDapperExtensionsConfiguration Configuration { get; }
    public IList`1<IColumn> AllColumns { get; }
    public IList`1<Table> MappedTables { get; }
    public abstract virtual IDapperExtensionsConfiguration get_Configuration();
    public abstract virtual IList`1<IColumn> get_AllColumns();
    public abstract virtual IList`1<Table> get_MappedTables();
    public abstract virtual bool SupportsMultipleStatements();
    public abstract virtual string Select(IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, IDictionary`2<string, object> parameters, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public abstract virtual string SelectPaged(IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDictionary`2<string, object> parameters, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public abstract virtual string SelectSet(IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDictionary`2<string, object> parameters, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public abstract virtual string Count(IClassMapper classMap, IPredicate predicate, IDictionary`2<string, object> parameters, IList`1<IReferenceMap> includedProperties);
    public abstract virtual string Insert(IClassMapper classMap);
    public abstract virtual string Update(IClassMapper classMap, IPredicate predicate, IDictionary`2<string, object> parameters, bool ignoreAllKeyProperties, IList`1<IProjection> colsToUpdate);
    public abstract virtual string Delete(IClassMapper classMap, IPredicate predicate, IDictionary`2<string, object> parameters);
    public abstract virtual string IdentitySql(IClassMapper classMap);
    public abstract virtual string GetTableName(IClassMapper map, bool useAlias);
    public abstract virtual string GetColumnName(IClassMapper map, IMemberMap property, bool includeAlias, bool isDml, bool includePrefix);
    public abstract virtual string GetColumnName(IClassMapper map, string propertyName, bool includeAlias, bool includePrefix);
    public abstract virtual string GetColumnName(IColumn column, bool includeAlias, bool includePrefix);
}
public class DapperExtensions.Sql.MySqlDialect : SqlDialectBase {
    public char OpenQuote { get; }
    public char CloseQuote { get; }
    public virtual char get_OpenQuote();
    public virtual char get_CloseQuote();
    public virtual string GetIdentitySql(string tableName);
    public virtual string GetPagingSql(string sql, int page, int resultsPerPage, IDictionary`2<string, object> parameters, string partitionBy);
    public virtual string GetSetSql(string sql, int firstResult, int maxResults, IDictionary`2<string, object> parameters);
    public virtual string GetDatabaseFunctionString(DatabaseFunction databaseFunction, string columnName, string functionParameters);
    [ExcludeFromCodeCoverageAttribute]
public virtual void EnableCaseInsensitive(IDbConnection connection);
    public virtual string GetCountSql(string sql);
}
public class DapperExtensions.Sql.OracleDialect : SqlDialectBase {
    public bool SupportsMultipleStatements { get; }
    public char ParameterPrefix { get; }
    public char OpenQuote { get; }
    public char CloseQuote { get; }
    public virtual string GetIdentitySql(string tableName);
    public virtual bool get_SupportsMultipleStatements();
    public virtual string GetPagingSql(string sql, int page, int resultsPerPage, IDictionary`2<string, object> parameters, string partitionBy);
    public virtual string GetSetSql(string sql, int firstResult, int maxResults, IDictionary`2<string, object> parameters);
    public virtual string QuoteString(string value);
    public virtual char get_ParameterPrefix();
    public virtual char get_OpenQuote();
    public virtual char get_CloseQuote();
    public virtual string GetDatabaseFunctionString(DatabaseFunction databaseFunction, string columnName, string functionParameters);
    public virtual void EnableCaseInsensitive(IDbConnection connection);
    public virtual string GetTableName(string schemaName, string tableName, string alias);
    public virtual string GetColumnName(string prefix, string columnName, string alias);
    [CompilerGeneratedAttribute]
internal static string <GetPagingSql>g__setCompare|4_0(string src, string left, string right);
}
public class DapperExtensions.Sql.PostgreSqlDialect : SqlDialectBase {
    public virtual string GetIdentitySql(string tableName);
    public virtual string GetPagingSql(string sql, int page, int resultsPerPage, IDictionary`2<string, object> parameters, string partitionBy);
    public virtual string GetSetSql(string sql, int firstResult, int maxResults, IDictionary`2<string, object> parameters);
    public virtual string GetColumnName(string prefix, string columnName, string alias);
    public virtual string GetTableName(string schemaName, string tableName, string alias);
    public virtual string GetDatabaseFunctionString(DatabaseFunction databaseFunction, string columnName, string functionParameters);
    [ExcludeFromCodeCoverageAttribute]
public virtual void EnableCaseInsensitive(IDbConnection connection);
}
public class DapperExtensions.Sql.SqlCeDialect : SqlDialectBase {
    public char OpenQuote { get; }
    public char CloseQuote { get; }
    public bool SupportsMultipleStatements { get; }
    public bool SupportsCountOfSubquery { get; }
    public virtual char get_OpenQuote();
    public virtual char get_CloseQuote();
    public virtual bool get_SupportsMultipleStatements();
    public virtual bool get_SupportsCountOfSubquery();
    public virtual string GetTableName(string schemaName, string tableName, string alias);
    public virtual string GetIdentitySql(string tableName);
    public virtual string GetPagingSql(string sql, int page, int resultsPerPage, IDictionary`2<string, object> parameters, string partitionBy);
    public virtual string GetSetSql(string sql, int firstResult, int maxResults, IDictionary`2<string, object> parameters);
    public virtual string GetDatabaseFunctionString(DatabaseFunction databaseFunction, string columnName, string functionParameters);
    [ExcludeFromCodeCoverageAttribute]
public virtual void EnableCaseInsensitive(IDbConnection connection);
}
public abstract class DapperExtensions.Sql.SqlDialectBase : object {
    public char OpenQuote { get; }
    public char CloseQuote { get; }
    public string BatchSeperator { get; }
    public bool SupportsMultipleStatements { get; }
    public char ParameterPrefix { get; }
    public string EmptyExpression { get; }
    public bool SupportsCountOfSubquery { get; }
    public virtual char get_OpenQuote();
    public virtual char get_CloseQuote();
    public virtual string get_BatchSeperator();
    public virtual bool get_SupportsMultipleStatements();
    public virtual char get_ParameterPrefix();
    public virtual string get_EmptyExpression();
    public virtual bool get_SupportsCountOfSubquery();
    public virtual string GetTableName(string schemaName, string tableName, string alias);
    public virtual string GetColumnName(string prefix, string columnName, string alias);
    protected virtual int GetStartValue(int page, int resultsPerPage);
    public abstract virtual string GetIdentitySql(string tableName);
    public abstract virtual string GetPagingSql(string sql, int page, int resultsPerPage, IDictionary`2<string, object> parameters, string partitionBy);
    public abstract virtual string GetSetSql(string sql, int firstResult, int maxResults, IDictionary`2<string, object> parameters);
    public virtual bool IsQuoted(string value);
    public virtual string QuoteString(string value);
    public virtual string UnQuoteString(string value);
    public abstract virtual string GetDatabaseFunctionString(DatabaseFunction databaseFunction, string columnName, string functionParameters);
    public abstract virtual void EnableCaseInsensitive(IDbConnection connection);
    public virtual string GetCountSql(string sql);
    protected virtual bool IsSelectSql(string sql);
}
public class DapperExtensions.Sql.SqlGeneratorImpl : object {
    [CompilerGeneratedAttribute]
private IList`1<Table> <Tables>k__BackingField;
    private int TableCount;
    private IList`1<Table> TablesAdded;
    private IList`1<Table> TableReferencesAdded;
    [CompilerGeneratedAttribute]
private IDapperExtensionsConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IColumn> <AllColumns>k__BackingField;
    private IList`1<Table> Tables { get; private set; }
    public IList`1<Table> MappedTables { get; }
    public IDapperExtensionsConfiguration Configuration { get; }
    public IList`1<IColumn> AllColumns { get; private set; }
    public SqlGeneratorImpl(IDapperExtensionsConfiguration configuration);
    [CompilerGeneratedAttribute]
private IList`1<Table> get_Tables();
    [CompilerGeneratedAttribute]
private void set_Tables(IList`1<Table> value);
    public sealed virtual IList`1<Table> get_MappedTables();
    [CompilerGeneratedAttribute]
public sealed virtual IDapperExtensionsConfiguration get_Configuration();
    private string GetPartitionBy();
    public virtual string Select(IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, IDictionary`2<string, object> parameters, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public virtual string SelectPaged(IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int page, int resultsPerPage, IDictionary`2<string, object> parameters, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public virtual string SelectSet(IClassMapper classMap, IPredicate predicate, IList`1<ISort> sort, int firstResult, int maxResults, IDictionary`2<string, object> parameters, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    public virtual string Count(IClassMapper classMap, IPredicate predicate, IDictionary`2<string, object> parameters, IList`1<IReferenceMap> includedProperties);
    public virtual string Insert(IClassMapper classMap);
    public virtual string Update(IClassMapper classMap, IPredicate predicate, IDictionary`2<string, object> parameters, bool ignoreAllKeyProperties, IList`1<IProjection> colsToUpdate);
    public virtual string Delete(IClassMapper classMap, IPredicate predicate, IDictionary`2<string, object> parameters);
    public virtual string IdentitySql(IClassMapper classMap);
    public virtual string GetReferenceKey(IMemberMap map);
    private static IMemberMap GetPropertyMap(IClassMapper mainMap, MemberInfo propertyInfo);
    private string GetJointTables(IClassMapper mainMap, Table table, IDictionary`2<string, object> parameters, IList`1<IReferenceMap> includedProperties);
    public virtual string GetAllJointTables(IClassMapper mainMap, string mainTable, IDictionary`2<string, object> parameters, string referenceName, IList`1<IReferenceMap> includedProperties);
    private string GetJoinFromSqlInjection(SqlInjection sqlInjection);
    public virtual string GetTables(IClassMapper map, IDictionary`2<string, object> parameters, IList`1<IReferenceMap> includedProperties);
    public virtual string GetTableName(IClassMapper map, bool useAlias);
    public virtual string GetTableName(IClassMapper map, IColumn column);
    public virtual string GetColumnName(IColumn column, bool includeAlias, bool includePrefix);
    public virtual string GetColumnName(IClassMapper map, IMemberMap property, bool includeAlias, bool isDml, bool includePrefix);
    public virtual string GetColumnName(IClassMapper map, string propertyName, bool includeAlias, bool includePrefix);
    public virtual bool SupportsMultipleStatements();
    [CompilerGeneratedAttribute]
public virtual IList`1<IColumn> get_AllColumns();
    [CompilerGeneratedAttribute]
private void set_AllColumns(IList`1<IColumn> value);
    public Table GetMappedTables(Type entityType, Type parentEntityType);
    public Table GetMappedTables(Guid identity, Guid parentIdentity);
    private IClassMapper GetVirtualClassMapper(IClassMapper mapper);
    private IClassMapper CreateVirtualClassMap(Type entityType, Guid parentIdentity);
    private IReferenceMap GetIdentityFromIncludedProperties(IList`1<IReferenceMap> includedProperties, PropertyInfo property, Guid parentIdentity);
    private static void SetReferencePropertiesParentIdentity(IClassMapper mapper, Guid identity);
    private IClassMapper GetVirtualReferenceMap(Table& table, bool isVirtual, Guid parentIdentity, Type parentType, IList`1<IReferenceMap> includedProperties);
    private void ProcessRelationationalIdentities(IClassMapper& mapper, IClassMapper& parent, PropertyInfo propertyInfo, IList`1<IReferenceMap> includedProperties);
    private IList`1<Table> ProcessReference(IReferenceMap reference, IClassMapper mapper, IClassMapper parent, IClassMapper virtualReferenceMap, IList`1<IReferenceMap> includedProperties);
    private IList`1<Table> ProcessReferences(IClassMapper mapper, IClassMapper parent, IClassMapper virtualReferenceMap, IList`1<IReferenceMap> includedProperties);
    private IList`1<Table> GetAllMappedTables(IClassMapper parentClassMapper, IClassMapper topParentMap, PropertyInfo propertyInfo, bool isVirtualMap, IList`1<IReferenceMap> includedProperties);
    public void MapTables(IClassMapper classMap, IList`1<IReferenceMap> includedProperties);
    public virtual string BuildSelectColumns(IClassMapper classMap, IList`1<IProjection> colsToSelect, IList`1<IReferenceMap> includedProperties);
    private string GetAliasFromTableName(Guid identity);
    public string GetReference(Table table, string parentReference);
    private IEnumerable`1<IColumn> GetColumns(Table table);
    public IEnumerable`1<IColumn> GetColumns();
    public static IList`1<IReferenceProperty> GetReferenceProperties(IClassMapper map);
    [CompilerGeneratedAttribute]
internal static string <GetColumns>g__getParentReference|53_0(IMemberMap map);
}
public class DapperExtensions.Sql.SqlInjection : object {
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public Type EntityType { get; public set; }
    public string Property { get; public set; }
    public string Sql { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
}
public class DapperExtensions.Sql.SqliteDialect : SqlDialectBase {
    public virtual string GetIdentitySql(string tableName);
    public virtual string GetPagingSql(string sql, int page, int resultsPerPage, IDictionary`2<string, object> parameters, string partitionBy);
    public virtual string GetSetSql(string sql, int firstResult, int maxResults, IDictionary`2<string, object> parameters);
    public virtual string GetDatabaseFunctionString(DatabaseFunction databaseFunction, string columnName, string functionParameters);
    [ExcludeFromCodeCoverageAttribute]
public virtual void EnableCaseInsensitive(IDbConnection connection);
}
public class DapperExtensions.Sql.SqlServerDialect : SqlDialectBase {
    public char OpenQuote { get; }
    public char CloseQuote { get; }
    public virtual char get_OpenQuote();
    public virtual char get_CloseQuote();
    public virtual string GetIdentitySql(string tableName);
    public virtual string GetPagingSql(string sql, int page, int resultsPerPage, IDictionary`2<string, object> parameters, string partitionBy);
    public virtual string GetSetSql(string sql, int firstResult, int maxResults, IDictionary`2<string, object> parameters);
    protected static string GetOrderByClause(string sql);
    public virtual string GetDatabaseFunctionString(DatabaseFunction databaseFunction, string columnName, string functionParameters);
    [ExcludeFromCodeCoverageAttribute]
public virtual void EnableCaseInsensitive(IDbConnection connection);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
