public static class Datadog.Trace.OpenTracing.DatadogTags : object {
    public static string ServiceName;
    public static string ServiceVersion;
    public static string ResourceName;
    public static string SpanType;
}
internal class Datadog.Trace.OpenTracing.HttpHeadersCodec : object {
    private static CultureInfo InvariantCulture;
    private static SpanContextExtractor Extractor;
    private static SpanContextInjector Injector;
    private static HttpHeadersCodec();
    public sealed virtual ISpanContext Extract(object carrier);
    public sealed virtual void Inject(ISpanContext context, object carrier);
    [IteratorStateMachineAttribute("Datadog.Trace.OpenTracing.HttpHeadersCodec/<<Extract>g__GetValues|3_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <Extract>g__GetValues|3_0(ITextMap textMap, string name);
}
internal interface Datadog.Trace.OpenTracing.ICodec {
    public abstract virtual void Inject(ISpanContext spanContext, object carrier);
    public abstract virtual ISpanContext Extract(object carrier);
}
public class Datadog.Trace.OpenTracing.OpenTracingHttpHeadersCarrier : object {
    private HttpHeaders _headers;
    public OpenTracingHttpHeadersCarrier(HttpHeaders headers);
    public string Get(string key);
    [IteratorStateMachineAttribute("Datadog.Trace.OpenTracing.OpenTracingHttpHeadersCarrier/<GetEnumerator>d__3")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Set(string key, string value);
}
internal class Datadog.Trace.OpenTracing.OpenTracingSpan : object {
    [CompilerGeneratedAttribute]
private OpenTracingSpanContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ISpan <Span>k__BackingField;
    public OpenTracingSpanContext Context { get; }
    private ISpanContext global::OpenTracing.ISpan.Context { get; }
    internal ISpan Span { get; }
    internal ISpan DDSpan { get; }
    internal string OperationName { get; }
    internal OpenTracingSpan(ISpan span);
    [CompilerGeneratedAttribute]
public OpenTracingSpanContext get_Context();
    private sealed virtual override ISpanContext global::OpenTracing.ISpan.get_Context();
    [CompilerGeneratedAttribute]
internal ISpan get_Span();
    internal ISpan get_DDSpan();
    internal string get_OperationName();
    public sealed virtual string GetBaggageItem(string key);
    public sealed virtual ISpan Log(DateTimeOffset timestamp, IEnumerable`1<KeyValuePair`2<string, object>> fields);
    public sealed virtual ISpan Log(string eventName);
    public sealed virtual ISpan Log(DateTimeOffset timestamp, string eventName);
    public sealed virtual ISpan Log(IEnumerable`1<KeyValuePair`2<string, object>> fields);
    public sealed virtual ISpan SetBaggageItem(string key, string value);
    public sealed virtual ISpan SetOperationName(string operationName);
    public string GetTag(string key);
    public sealed virtual ISpan SetTag(string key, bool value);
    public sealed virtual ISpan SetTag(string key, double value);
    public sealed virtual ISpan SetTag(string key, int value);
    public sealed virtual ISpan SetTag(BooleanTag tag, bool value);
    public sealed virtual ISpan SetTag(IntOrStringTag tag, string value);
    public sealed virtual ISpan SetTag(IntTag tag, int value);
    public sealed virtual ISpan SetTag(StringTag tag, string value);
    public sealed virtual ISpan SetTag(string key, string value);
    public sealed virtual void Finish();
    public sealed virtual void Finish(DateTimeOffset finishTimestamp);
}
internal class Datadog.Trace.OpenTracing.OpenTracingSpanBuilder : object {
    private OpenTracingTracer _tracer;
    private object _lock;
    private string _operationName;
    private ISpanContext _parent;
    private Nullable`1<DateTimeOffset> _start;
    private Dictionary`2<string, string> _tags;
    private string _serviceName;
    private bool _ignoreActiveSpan;
    internal OpenTracingSpanBuilder(OpenTracingTracer tracer, string operationName);
    public sealed virtual ISpanBuilder AddReference(string referenceType, ISpanContext referencedContext);
    public sealed virtual ISpanBuilder AsChildOf(ISpan parent);
    public sealed virtual ISpanBuilder AsChildOf(ISpanContext parent);
    public sealed virtual ISpanBuilder IgnoreActiveSpan();
    public sealed virtual ISpan Start();
    public sealed virtual IScope StartActive();
    public sealed virtual IScope StartActive(bool finishSpanOnDispose);
    public sealed virtual ISpanBuilder WithStartTimestamp(DateTimeOffset startTimestamp);
    public sealed virtual ISpanBuilder WithTag(string key, bool value);
    public sealed virtual ISpanBuilder WithTag(string key, double value);
    public sealed virtual ISpanBuilder WithTag(string key, int value);
    public sealed virtual ISpanBuilder WithTag(BooleanTag tag, bool value);
    public sealed virtual ISpanBuilder WithTag(IntOrStringTag tag, string value);
    public sealed virtual ISpanBuilder WithTag(IntTag tag, int value);
    public sealed virtual ISpanBuilder WithTag(StringTag tag, string value);
    public sealed virtual ISpanBuilder WithTag(string key, string value);
    private ISpanContext GetParentContext();
}
internal class Datadog.Trace.OpenTracing.OpenTracingSpanContext : object {
    [CompilerGeneratedAttribute]
private ISpanContext <Context>k__BackingField;
    public string TraceId { get; }
    public string SpanId { get; }
    internal ISpanContext Context { get; }
    public OpenTracingSpanContext(ISpanContext context);
    public sealed virtual string get_TraceId();
    public sealed virtual string get_SpanId();
    [CompilerGeneratedAttribute]
internal ISpanContext get_Context();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> GetBaggageItems();
}
internal class Datadog.Trace.OpenTracing.OpenTracingTracer : object {
    private Dictionary`2<string, ICodec> _codecs;
    [CompilerGeneratedAttribute]
private IDatadogOpenTracingTracer <DatadogTracer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopeManager <ScopeManager>k__BackingField;
    public IDatadogOpenTracingTracer DatadogTracer { get; }
    public string DefaultServiceName { get; }
    public IScopeManager ScopeManager { get; }
    public OpenTracingSpan ActiveSpan { get; }
    private ISpan global::OpenTracing.ITracer.ActiveSpan { get; }
    internal OpenTracingTracer(IDatadogOpenTracingTracer datadogTracer, IScopeManager scopeManager, string defaultServiceName);
    [CompilerGeneratedAttribute]
public IDatadogOpenTracingTracer get_DatadogTracer();
    [CompilerGeneratedAttribute]
public string get_DefaultServiceName();
    [CompilerGeneratedAttribute]
public sealed virtual IScopeManager get_ScopeManager();
    public OpenTracingSpan get_ActiveSpan();
    private sealed virtual override ISpan global::OpenTracing.ITracer.get_ActiveSpan();
    public sealed virtual ISpanBuilder BuildSpan(string operationName);
    public sealed virtual ISpanContext Extract(IFormat`1<TCarrier> format, TCarrier carrier);
    public sealed virtual void Inject(ISpanContext spanContext, IFormat`1<TCarrier> format, TCarrier carrier);
    internal static IScopeManager CreateDefaultScopeManager();
}
public static class Datadog.Trace.OpenTracing.OpenTracingTracerFactory : object {
    private static string DeprecationMessage;
    [ObsoleteAttribute("OpenTracing support has been deprecated and will be removed in a future release. We recommend using OpenTelemetry instead.")]
[InstrumentedAttribute]
public static ITracer CreateTracer(Uri agentEndpoint, string defaultServiceName, bool isDebugEnabled);
    [ObsoleteAttribute("OpenTracing support has been deprecated and will be removed in a future release. We recommend using OpenTelemetry instead.")]
[InstrumentedAttribute]
public static ITracer WrapTracer(Tracer tracer);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
