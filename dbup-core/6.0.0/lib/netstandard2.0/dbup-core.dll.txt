public class DbUp.Builder.SupportedDatabases : object {
}
public class DbUp.Builder.UpgradeConfiguration : object {
    [CompilerGeneratedAttribute]
private IConnectionManager <ConnectionManager>k__BackingField;
    private IAggregateLog _log;
    [CompilerGeneratedAttribute]
private List`1<IScriptProvider> <ScriptProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IScriptPreprocessor> <ScriptPreprocessors>k__BackingField;
    [CompilerGeneratedAttribute]
private IJournal <Journal>k__BackingField;
    [CompilerGeneratedAttribute]
private IScriptExecutor <ScriptExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptNameComparer <ScriptNameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IScriptFilter <ScriptFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VariablesEnabled>k__BackingField;
    public IConnectionManager ConnectionManager { get; public set; }
    public IAggregateLog Log { get; internal set; }
    public List`1<IScriptProvider> ScriptProviders { get; }
    public List`1<IScriptPreprocessor> ScriptPreprocessors { get; }
    public IJournal Journal { get; public set; }
    public IScriptExecutor ScriptExecutor { get; public set; }
    public ScriptNameComparer ScriptNameComparer { get; public set; }
    public IScriptFilter ScriptFilter { get; public set; }
    public Dictionary`2<string, string> Variables { get; }
    public bool VariablesEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public IConnectionManager get_ConnectionManager();
    [CompilerGeneratedAttribute]
public void set_ConnectionManager(IConnectionManager value);
    public IAggregateLog get_Log();
    internal void set_Log(IAggregateLog value);
    public void AddLog(IUpgradeLog logger);
    [CompilerGeneratedAttribute]
public List`1<IScriptProvider> get_ScriptProviders();
    [CompilerGeneratedAttribute]
public List`1<IScriptPreprocessor> get_ScriptPreprocessors();
    [CompilerGeneratedAttribute]
public IJournal get_Journal();
    [CompilerGeneratedAttribute]
public void set_Journal(IJournal value);
    [CompilerGeneratedAttribute]
public IScriptExecutor get_ScriptExecutor();
    [CompilerGeneratedAttribute]
public void set_ScriptExecutor(IScriptExecutor value);
    [CompilerGeneratedAttribute]
public ScriptNameComparer get_ScriptNameComparer();
    [CompilerGeneratedAttribute]
public void set_ScriptNameComparer(ScriptNameComparer value);
    [CompilerGeneratedAttribute]
public IScriptFilter get_ScriptFilter();
    [CompilerGeneratedAttribute]
public void set_ScriptFilter(IScriptFilter value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Variables();
    [CompilerGeneratedAttribute]
public bool get_VariablesEnabled();
    [CompilerGeneratedAttribute]
public void set_VariablesEnabled(bool value);
    public void Validate();
    public void AddVariables(IDictionary`2<string, string> newVariables);
}
public class DbUp.Builder.UpgradeEngineBuilder : object {
    protected List`1<Action`1<UpgradeConfiguration>> callbacks;
    public virtual void Configure(Action`1<UpgradeConfiguration> configuration);
    public virtual UpgradeConfiguration BuildConfiguration();
    public virtual UpgradeEngine Build();
}
public static class DbUp.DbUpDefaults : object {
    public static Encoding DefaultEncoding;
    public static int DefaultRunGroupOrder;
    private static DbUpDefaults();
}
public static class DbUp.DeployChanges : object {
    [CompilerGeneratedAttribute]
private static SupportedDatabases <To>k__BackingField;
    public static SupportedDatabases To { get; }
    private static DeployChanges();
    [CompilerGeneratedAttribute]
public static SupportedDatabases get_To();
}
public static class DbUp.DropDatabase : object {
    [CompilerGeneratedAttribute]
private static SupportedDatabasesForDropDatabase <For>k__BackingField;
    public static SupportedDatabasesForDropDatabase For { get; }
    private static DropDatabase();
    [CompilerGeneratedAttribute]
public static SupportedDatabasesForDropDatabase get_For();
}
public class DbUp.Engine.DatabaseUpgradeResult : object {
    private List`1<SqlScript> scripts;
    private bool successful;
    private Exception error;
    private SqlScript errorScript;
    public IEnumerable`1<SqlScript> Scripts { get; }
    public bool Successful { get; }
    public Exception Error { get; }
    public SqlScript ErrorScript { get; }
    public DatabaseUpgradeResult(IEnumerable`1<SqlScript> scripts, bool successful, Exception error, SqlScript errorScript);
    public IEnumerable`1<SqlScript> get_Scripts();
    public bool get_Successful();
    public Exception get_Error();
    public SqlScript get_ErrorScript();
}
internal class DbUp.Engine.DelegateDisposable : object {
    private Action dispose;
    public DelegateDisposable(Action dispose);
    public sealed virtual void Dispose();
}
public class DbUp.Engine.Filters.DefaultScriptFilter : object {
    public sealed virtual IEnumerable`1<SqlScript> Filter(IEnumerable`1<SqlScript> sorted, HashSet`1<string> executedScriptNames, ScriptNameComparer comparer);
}
public interface DbUp.Engine.IJournal {
    public abstract virtual String[] GetExecutedScripts();
    public abstract virtual void StoreExecutedScript(SqlScript script, Func`1<IDbCommand> dbCommandFactory);
    public abstract virtual void EnsureTableExistsAndIsLatestVersion(Func`1<IDbCommand> dbCommandFactory);
}
public interface DbUp.Engine.IScript {
    public abstract virtual string ProvideScript(Func`1<IDbCommand> dbCommandFactory);
}
public interface DbUp.Engine.IScriptExecutor {
    public Nullable`1<int> ExecutionTimeoutSeconds { get; public set; }
    public abstract virtual void Execute(SqlScript script);
    public abstract virtual void Execute(SqlScript script, IDictionary`2<string, string> variables);
    public abstract virtual void VerifySchema();
    public abstract virtual Nullable`1<int> get_ExecutionTimeoutSeconds();
    public abstract virtual void set_ExecutionTimeoutSeconds(Nullable`1<int> value);
}
public interface DbUp.Engine.IScriptFilter {
    public abstract virtual IEnumerable`1<SqlScript> Filter(IEnumerable`1<SqlScript> sorted, HashSet`1<string> executedScriptNames, ScriptNameComparer comparer);
}
public interface DbUp.Engine.IScriptPreprocessor {
    public abstract virtual string Process(string contents);
}
public interface DbUp.Engine.IScriptProvider {
    public abstract virtual IEnumerable`1<SqlScript> GetScripts(IConnectionManager connectionManager);
}
public interface DbUp.Engine.ISqlObjectParser {
    public abstract virtual string QuoteIdentifier(string objectName);
    public abstract virtual string UnquoteIdentifier(string objectName);
    public abstract virtual string QuoteIdentifier(string objectName, ObjectNameOptions objectNameOptions);
}
public class DbUp.Engine.LazySqlScript : SqlScript {
    private Func`1<string> contentProvider;
    private string content;
    public string Contents { get; }
    public LazySqlScript(string name, Func`1<string> contentProvider);
    public LazySqlScript(string name, SqlScriptOptions sqlScriptOptions, Func`1<string> contentProvider);
    public virtual string get_Contents();
}
public class DbUp.Engine.Output.AggregateLog : object {
    private List`1<IUpgradeLog> _loggers;
    public int LoggerCount { get; }
    public bool HasLoggers { get; }
    public AggregateLog(IEnumerable`1<IUpgradeLog> loggers);
    public sealed virtual int get_LoggerCount();
    public sealed virtual bool get_HasLoggers();
    public sealed virtual void AddLogger(IUpgradeLog logger);
    public sealed virtual void LogTrace(string format, Object[] args);
    public sealed virtual void LogDebug(string format, Object[] args);
    public sealed virtual void LogInformation(string format, Object[] args);
    public sealed virtual void LogWarning(string format, Object[] args);
    public sealed virtual void LogError(string format, Object[] args);
    public sealed virtual void LogError(Exception ex, string format, Object[] args);
    private static void Log(IEnumerable`1<IUpgradeLog> loggers, Action`1<IUpgradeLog> writeTo);
}
public class DbUp.Engine.Output.ConsoleUpgradeLog : object {
    public sealed virtual void LogTrace(string format, Object[] args);
    public sealed virtual void LogDebug(string format, Object[] args);
    public sealed virtual void LogInformation(string format, Object[] args);
    public sealed virtual void LogWarning(string format, Object[] args);
    public sealed virtual void LogError(string format, Object[] args);
    public sealed virtual void LogError(Exception ex, string format, Object[] args);
    private static void Log(string level, ConsoleColor color, string format, Object[] args, Exception ex);
}
public class DbUp.Engine.Output.ExceptionFormatter : object {
    public static string Format(Exception ex);
    public static string Format(AggregateException ex);
    private static string GetMessageTree(Exception ex, string indent);
    private static string GetMessageTree(AggregateException ex, string indent);
}
public interface DbUp.Engine.Output.IAggregateLog {
    public int LoggerCount { get; }
    public bool HasLoggers { get; }
    public abstract virtual int get_LoggerCount();
    public abstract virtual bool get_HasLoggers();
    public abstract virtual void AddLogger(IUpgradeLog logger);
}
public interface DbUp.Engine.Output.IUpgradeLog {
    public abstract virtual void LogTrace(string format, Object[] args);
    public abstract virtual void LogDebug(string format, Object[] args);
    public abstract virtual void LogInformation(string format, Object[] args);
    public abstract virtual void LogWarning(string format, Object[] args);
    public abstract virtual void LogError(string format, Object[] args);
    public abstract virtual void LogError(Exception ex, string format, Object[] args);
}
internal class DbUp.Engine.Output.LoggingConstants : object {
    internal static string TraceLevel;
    internal static string DebugLevel;
    internal static string InfoLevel;
    internal static string WarnLevel;
    internal static string ErrorLevel;
    internal static string TimestampFormat;
}
public class DbUp.Engine.Output.MicrosoftUpgradeLog : object {
    private ILogger _logger;
    public MicrosoftUpgradeLog(ILoggerFactory loggerFactory);
    public MicrosoftUpgradeLog(ILogger logger);
    public sealed virtual void LogTrace(string message, Object[] args);
    public sealed virtual void LogDebug(string message, Object[] args);
    public sealed virtual void LogInformation(string message, Object[] args);
    public sealed virtual void LogWarning(string message, Object[] args);
    public sealed virtual void LogError(string message, Object[] args);
    public sealed virtual void LogError(Exception ex, string message, Object[] args);
}
public class DbUp.Engine.Output.NoOpUpgradeLog : MicrosoftUpgradeLog {
}
public class DbUp.Engine.Output.TraceUpgradeLog : object {
    public sealed virtual void LogTrace(string format, Object[] args);
    public sealed virtual void LogDebug(string format, Object[] args);
    public sealed virtual void LogInformation(string format, Object[] args);
    public sealed virtual void LogWarning(string format, Object[] args);
    public sealed virtual void LogError(string format, Object[] args);
    public sealed virtual void LogError(Exception ex, string format, Object[] args);
    private static void Log(string level, string format, Object[] args, Exception ex);
}
public class DbUp.Engine.Preprocessors.StripSchemaPreprocessor : object {
    public sealed virtual string Process(string contents);
}
public class DbUp.Engine.Preprocessors.VariableSubstitutionPreprocessor : object {
    private IDictionary`2<string, string> variables;
    public VariableSubstitutionPreprocessor(IDictionary`2<string, string> variables);
    public sealed virtual string Process(string contents);
}
public class DbUp.Engine.Preprocessors.VariableSubstitutionSqlParser : SqlParser {
    [CompilerGeneratedAttribute]
private Action`1<string> ReadVariableName;
    protected char VariableDelimiter { get; }
    protected bool IsCustomStatement { get; }
    public VariableSubstitutionSqlParser(string sqlText, string delimiter, bool delimiterRequiresWhitespace);
    protected virtual char get_VariableDelimiter();
    public string ReplaceVariables(IDictionary`2<string, string> variables);
    protected virtual bool get_IsCustomStatement();
    protected virtual bool ValidVariableNameCharacter(char c);
    protected virtual void ReadCustomStatement();
    [CompilerGeneratedAttribute]
private void add_ReadVariableName(Action`1<string> value);
    [CompilerGeneratedAttribute]
private void remove_ReadVariableName(Action`1<string> value);
}
public class DbUp.Engine.ScriptExecutedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IConnectionManager <ConnectionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScript <Script>k__BackingField;
    public IConnectionManager ConnectionManager { get; private set; }
    public SqlScript Script { get; private set; }
    public ScriptExecutedEventArgs(SqlScript script, IConnectionManager connectionManager);
    [CompilerGeneratedAttribute]
public IConnectionManager get_ConnectionManager();
    [CompilerGeneratedAttribute]
private void set_ConnectionManager(IConnectionManager value);
    [CompilerGeneratedAttribute]
public SqlScript get_Script();
    [CompilerGeneratedAttribute]
private void set_Script(SqlScript value);
}
[DebuggerDisplayAttribute("{Name}")]
public class DbUp.Engine.SqlScript : object {
    [CompilerGeneratedAttribute]
private string <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScriptOptions <SqlScriptOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Contents { get; }
    public SqlScriptOptions SqlScriptOptions { get; }
    public string Name { get; }
    public SqlScript(string name, string contents);
    public SqlScript(string name, string contents, SqlScriptOptions sqlScriptOptions);
    [CompilerGeneratedAttribute]
public virtual string get_Contents();
    [CompilerGeneratedAttribute]
public SqlScriptOptions get_SqlScriptOptions();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public static SqlScript FromFile(string path);
    public static SqlScript FromFile(string path, Encoding encoding);
    public static SqlScript FromFile(string basePath, string path, Encoding encoding);
    public static SqlScript FromFile(string basePath, string path, Encoding encoding, SqlScriptOptions sqlScriptOptions);
    public static SqlScript FromStream(string scriptName, Stream stream);
    public static SqlScript FromStream(string scriptName, Stream stream, Encoding encoding);
    public static SqlScript FromStream(string scriptName, Stream stream, Encoding encoding, SqlScriptOptions sqlScriptOptions);
}
public class DbUp.Engine.SqlScriptOptions : object {
    [CompilerGeneratedAttribute]
private ScriptType <ScriptType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RunGroupOrder>k__BackingField;
    public ScriptType ScriptType { get; public set; }
    public int RunGroupOrder { get; public set; }
    [CompilerGeneratedAttribute]
public ScriptType get_ScriptType();
    [CompilerGeneratedAttribute]
public void set_ScriptType(ScriptType value);
    [CompilerGeneratedAttribute]
public int get_RunGroupOrder();
    [CompilerGeneratedAttribute]
public void set_RunGroupOrder(int value);
}
[FlagsAttribute]
public enum DbUp.Engine.Transactions.AllowedTransactionMode : Enum {
    public int value__;
    public static AllowedTransactionMode None;
    public static AllowedTransactionMode SingleTransaction;
    public static AllowedTransactionMode TransactionPerScript;
    public static AllowedTransactionMode SingleTransactionAlwaysRollback;
    public static AllowedTransactionMode All;
}
public abstract class DbUp.Engine.Transactions.DatabaseConnectionManager : object {
    private IConnectionFactory connectionFactory;
    private ITransactionStrategy transactionStrategy;
    private Dictionary`2<TransactionMode, Func`1<ITransactionStrategy>> transactionStrategyFactory;
    private IDbConnection upgradeConnection;
    private IConnectionFactory connectionFactoryOverride;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExecutionTimeoutSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionMode <TransactionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScriptOutputLogged>k__BackingField;
    protected AllowedTransactionMode AllowedTransactionModes { get; }
    public Nullable`1<int> ExecutionTimeoutSeconds { get; public set; }
    public TransactionMode TransactionMode { get; public set; }
    public bool IsScriptOutputLogged { get; public set; }
    protected DatabaseConnectionManager(Func`2<IUpgradeLog, IDbConnection> connectionFactory);
    protected DatabaseConnectionManager(IConnectionFactory connectionFactory);
    protected virtual AllowedTransactionMode get_AllowedTransactionModes();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_ExecutionTimeoutSeconds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExecutionTimeoutSeconds(Nullable`1<int> value);
    public sealed virtual IDisposable OperationStarting(IUpgradeLog upgradeLog, List`1<SqlScript> executedScripts);
    private bool IsAllowed(TransactionMode mode);
    public sealed virtual bool TryConnect(IUpgradeLog upgradeLog, String& errorMessage);
    public sealed virtual void ExecuteCommandsWithManagedConnection(Action`1<Func`1<IDbCommand>> action);
    public sealed virtual T ExecuteCommandsWithManagedConnection(Func`2<Func`1<IDbCommand>, T> actionWithResult);
    [CompilerGeneratedAttribute]
public sealed virtual TransactionMode get_TransactionMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionMode(TransactionMode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsScriptOutputLogged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsScriptOutputLogged(bool value);
    public abstract virtual IEnumerable`1<string> SplitScriptIntoCommands(string scriptContents);
    public IDisposable OverrideFactoryForTest(IConnectionFactory connectionFactory);
    private IDbConnection CreateConnection(IUpgradeLog upgradeLog);
    [CompilerGeneratedAttribute]
private void <OperationStarting>b__13_0();
    [CompilerGeneratedAttribute]
private void <OverrideFactoryForTest>b__27_0();
}
public class DbUp.Engine.Transactions.DelegateConnectionFactory : object {
    private Func`3<IUpgradeLog, DatabaseConnectionManager, IDbConnection> createConnection;
    public DelegateConnectionFactory(Func`2<IUpgradeLog, IDbConnection> createConnection);
    public DelegateConnectionFactory(Func`3<IUpgradeLog, DatabaseConnectionManager, IDbConnection> createConnection);
    public sealed virtual IDbConnection CreateConnection(IUpgradeLog upgradeLog, DatabaseConnectionManager databaseConnectionManager);
}
public interface DbUp.Engine.Transactions.IConnectionFactory {
    public abstract virtual IDbConnection CreateConnection(IUpgradeLog upgradeLog, DatabaseConnectionManager databaseConnectionManager);
}
public interface DbUp.Engine.Transactions.IConnectionManager {
    public TransactionMode TransactionMode { get; public set; }
    public bool IsScriptOutputLogged { get; public set; }
    public Nullable`1<int> ExecutionTimeoutSeconds { get; public set; }
    public abstract virtual IDisposable OperationStarting(IUpgradeLog upgradeLog, List`1<SqlScript> executedScripts);
    public abstract virtual void ExecuteCommandsWithManagedConnection(Action`1<Func`1<IDbCommand>> action);
    public abstract virtual T ExecuteCommandsWithManagedConnection(Func`2<Func`1<IDbCommand>, T> actionWithResult);
    public abstract virtual TransactionMode get_TransactionMode();
    public abstract virtual void set_TransactionMode(TransactionMode value);
    public abstract virtual bool get_IsScriptOutputLogged();
    public abstract virtual void set_IsScriptOutputLogged(bool value);
    public abstract virtual IEnumerable`1<string> SplitScriptIntoCommands(string scriptContents);
    public abstract virtual bool TryConnect(IUpgradeLog upgradeLog, String& errorMessage);
    public abstract virtual Nullable`1<int> get_ExecutionTimeoutSeconds();
    public abstract virtual void set_ExecutionTimeoutSeconds(Nullable`1<int> value);
}
public interface DbUp.Engine.Transactions.ITransactionStrategy {
    public abstract virtual void Execute(Action`1<Func`1<IDbCommand>> action);
    public abstract virtual T Execute(Func`2<Func`1<IDbCommand>, T> actionWithResult);
    public abstract virtual void Initialise(IDbConnection dbConnection, IUpgradeLog upgradeLog, List`1<SqlScript> executedScripts, Nullable`1<int> executionTimeoutSeconds);
}
internal class DbUp.Engine.Transactions.NoTransactionStrategy : object {
    private IDbConnection connection;
    private Nullable`1<int> commandTimeout;
    public sealed virtual void Execute(Action`1<Func`1<IDbCommand>> action);
    public sealed virtual T Execute(Func`2<Func`1<IDbCommand>, T> actionWithResult);
    public sealed virtual void Initialise(IDbConnection dbConnection, IUpgradeLog upgradeLog, List`1<SqlScript> executedScripts, Nullable`1<int> executionTimeoutSeconds);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private IDbCommand <Execute>b__2_0();
    [CompilerGeneratedAttribute]
private IDbCommand <Execute>b__3_0();
}
internal class DbUp.Engine.Transactions.SingleTransactionAlwaysRollbackStrategy : object {
    private IDbConnection connection;
    private Nullable`1<int> commandTimeout;
    private IDbTransaction transaction;
    private bool errorOccured;
    private IUpgradeLog log;
    private SqlScript[] executedScriptsListBeforeExecution;
    private List`1<SqlScript> executedScriptsCollection;
    public sealed virtual void Execute(Action`1<Func`1<IDbCommand>> action);
    public sealed virtual T Execute(Func`2<Func`1<IDbCommand>, T> actionWithResult);
    public sealed virtual void Initialise(IDbConnection dbConnection, IUpgradeLog upgradeLog, List`1<SqlScript> executedScripts, Nullable`1<int> executionTimeoutSeconds);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private IDbCommand <Execute>b__7_0();
    [CompilerGeneratedAttribute]
private IDbCommand <Execute>b__8_0();
}
internal class DbUp.Engine.Transactions.SingleTransactionStrategy : object {
    private IDbConnection connection;
    private Nullable`1<int> commandTimeout;
    private IDbTransaction transaction;
    private bool errorOccured;
    private IUpgradeLog log;
    private SqlScript[] executedScriptsListBeforeExecution;
    private List`1<SqlScript> executedScriptsCollection;
    public sealed virtual void Execute(Action`1<Func`1<IDbCommand>> action);
    public sealed virtual T Execute(Func`2<Func`1<IDbCommand>, T> actionWithResult);
    public sealed virtual void Initialise(IDbConnection dbConnection, IUpgradeLog upgradeLog, List`1<SqlScript> executedScripts, Nullable`1<int> executionTimeoutSeconds);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private IDbCommand <Execute>b__7_0();
    [CompilerGeneratedAttribute]
private IDbCommand <Execute>b__8_0();
}
public enum DbUp.Engine.Transactions.TransactionMode : Enum {
    public int value__;
    public static TransactionMode NoTransaction;
    public static TransactionMode SingleTransaction;
    public static TransactionMode TransactionPerScript;
    public static TransactionMode SingleTransactionAlwaysRollback;
}
internal class DbUp.Engine.Transactions.TransactionPerScriptStrategy : object {
    private IDbConnection connection;
    private Nullable`1<int> commandTimeout;
    public sealed virtual void Execute(Action`1<Func`1<IDbCommand>> action);
    public sealed virtual T Execute(Func`2<Func`1<IDbCommand>, T> actionWithResult);
    public sealed virtual void Initialise(IDbConnection dbConnection, IUpgradeLog upgradeLog, List`1<SqlScript> executedScripts, Nullable`1<int> executionTimeoutSeconds);
    public sealed virtual void Dispose();
}
public class DbUp.Engine.UpgradeEngine : object {
    protected UpgradeConfiguration configuration;
    [CompilerGeneratedAttribute]
private EventHandler ScriptExecuted;
    public UpgradeEngine(UpgradeConfiguration configuration);
    [CompilerGeneratedAttribute]
public void add_ScriptExecuted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ScriptExecuted(EventHandler value);
    protected virtual void OnScriptExecuted(ScriptExecutedEventArgs e);
    public virtual bool IsUpgradeRequired();
    public virtual bool TryConnect(String& errorMessage);
    public virtual DatabaseUpgradeResult PerformUpgrade();
    public virtual List`1<SqlScript> GetScriptsToExecute();
    public virtual List`1<string> GetExecutedButNotDiscoveredScripts();
    public virtual List`1<SqlScript> GetDiscoveredScripts();
    private IEnumerable`1<SqlScript> GetDiscoveredScriptsAsEnumerable();
    private List`1<SqlScript> GetScriptsToExecuteInsideOperation();
    public virtual List`1<string> GetExecutedScripts();
    public virtual DatabaseUpgradeResult MarkAsExecuted();
    public virtual DatabaseUpgradeResult MarkAsExecuted(string latestScript);
    [CompilerGeneratedAttribute]
private IEnumerable`1<SqlScript> <GetDiscoveredScriptsAsEnumerable>b__12_0(IScriptProvider scriptProvider);
}
public static class DbUp.EnsureDatabase : object {
    [CompilerGeneratedAttribute]
private static SupportedDatabasesForEnsureDatabase <For>k__BackingField;
    public static SupportedDatabasesForEnsureDatabase For { get; }
    private static EnsureDatabase();
    [CompilerGeneratedAttribute]
public static SupportedDatabasesForEnsureDatabase get_For();
}
public static class DbUp.Filters : object {
    public static Func`2<string, bool> ExcludeScriptNamesInFile(string fileName);
    public static Func`2<string, bool> OnlyIncludeScriptNamesInFile(string fileName);
    public static Func`2<string, bool> ExcludeScripts(String[] scriptNames);
    public static Func`2<string, bool> OnlyIncludeScripts(String[] scriptNames);
}
public class DbUp.Helpers.AdHocSqlRunner : object {
    private IScriptPreprocessor[] additionalScriptPreprocessors;
    private Dictionary`2<string, string> variables;
    private Func`1<IDbCommand> commandFactory;
    private Func`1<bool> variablesEnabled;
    private ISqlObjectParser sqlObjectParser;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Schema { get; public set; }
    public AdHocSqlRunner(Func`1<IDbCommand> commandFactory, ISqlObjectParser sqlObjectParser, string schema, IScriptPreprocessor[] additionalScriptPreprocessors);
    public AdHocSqlRunner(Func`1<IDbCommand> commandFactory, ISqlObjectParser sqlObjectParser, string schema, Func`1<bool> variablesEnabled, IScriptPreprocessor[] additionalScriptPreprocessors);
    public AdHocSqlRunner WithVariable(string variableName, string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    public object ExecuteScalar(string query, Expression`1[] parameters);
    public int ExecuteNonQuery(string query, Expression`1[] parameters);
    public List`1<Dictionary`2<string, string>> ExecuteReader(string query, Expression`1[] parameters);
    private void Execute(string commandText, IEnumerable`1<Expression`1<Func`2<string, object>>> parameters, Action`1<IDbCommand> executor);
    private string Preprocess(string query);
}
public class DbUp.Helpers.NullJournal : object {
    public sealed virtual String[] GetExecutedScripts();
    public sealed virtual void StoreExecutedScript(SqlScript script, Func`1<IDbCommand> dbCommandFactory);
    public sealed virtual void EnsureTableExistsAndIsLatestVersion(Func`1<IDbCommand> dbCommandFactory);
}
[ExtensionAttribute]
public static class DbUp.Helpers.UpgradeEngineHtmlReport : object {
    [ExtensionAttribute]
public static void GenerateUpgradeHtmlReport(UpgradeEngine upgradeEngine, string fullPath);
    [ExtensionAttribute]
public static void GenerateUpgradeHtmlReport(UpgradeEngine upgradeEngine, string fullPath, string serverName, string databaseName);
    private static string GetHtmlHeader(string serverName, string databaseName);
    private static string GetHtmlForScript(SqlScript sqlScript, int counter);
    private static string GetHtmlFooter();
}
[ExtensionAttribute]
public static class DbUp.OctopusDeployExtensions : object {
    [ExtensionAttribute]
public static void WriteExecutedScriptsToOctopusTaskSummary(DatabaseUpgradeResult result);
}
public class DbUp.ScriptProviders.EmbeddedScriptAndCodeProvider : object {
    private EmbeddedScriptProvider embeddedScriptProvider;
    private Assembly assembly;
    private Func`2<string, bool> filter;
    private SqlScriptOptions sqlScriptOptions;
    public EmbeddedScriptAndCodeProvider(Assembly assembly, Func`2<string, bool> filter);
    public EmbeddedScriptAndCodeProvider(Assembly assembly, Func`2<string, bool> filter, Func`2<string, bool> codeScriptFilter);
    public EmbeddedScriptAndCodeProvider(Assembly assembly, Func`2<string, bool> filter, SqlScriptOptions sqlScriptOptions);
    public EmbeddedScriptAndCodeProvider(Assembly assembly, Func`2<string, bool> filter, Func`2<string, bool> codeScriptFilter, SqlScriptOptions sqlScriptOptions);
    private IEnumerable`1<SqlScript> ScriptsFromScriptClasses(IConnectionManager connectionManager);
    public sealed virtual IEnumerable`1<SqlScript> GetScripts(IConnectionManager connectionManager);
    [CompilerGeneratedAttribute]
private bool <GetScripts>b__9_1(SqlScript x);
}
public class DbUp.ScriptProviders.EmbeddedScriptProvider : EmbeddedScriptsProvider {
    public EmbeddedScriptProvider(Assembly assembly, Func`2<string, bool> filter);
    public EmbeddedScriptProvider(Assembly assembly, Func`2<string, bool> filter, Encoding encoding);
    public EmbeddedScriptProvider(Assembly assembly, Func`2<string, bool> filter, Encoding encoding, SqlScriptOptions sqlScriptOptions);
}
public class DbUp.ScriptProviders.EmbeddedScriptsProvider : object {
    private Assembly[] assemblies;
    private Encoding encoding;
    private Func`2<string, bool> filter;
    private SqlScriptOptions sqlScriptOptions;
    public EmbeddedScriptsProvider(Assembly[] assemblies, Func`2<string, bool> filter, Encoding encoding);
    public EmbeddedScriptsProvider(Assembly[] assemblies, Func`2<string, bool> filter, Encoding encoding, SqlScriptOptions sqlScriptOptions);
    public sealed virtual IEnumerable`1<SqlScript> GetScripts(IConnectionManager connectionManager);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<Assembly, String[]> <GetScripts>b__6_0(Assembly assembly);
    [CompilerGeneratedAttribute]
private IEnumerable`1<SqlScript> <GetScripts>b__6_1(<>f__AnonymousType0`2<Assembly, String[]> x);
}
public class DbUp.ScriptProviders.FileSystemScriptOptions : object {
    [CompilerGeneratedAttribute]
private bool <IncludeSubDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOnlyFilenameForScriptName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Extensions>k__BackingField;
    public bool IncludeSubDirectories { get; public set; }
    public bool UseOnlyFilenameForScriptName { get; public set; }
    public Func`2<string, bool> Filter { get; public set; }
    public Encoding Encoding { get; public set; }
    public String[] Extensions { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeSubDirectories();
    [CompilerGeneratedAttribute]
public void set_IncludeSubDirectories(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseOnlyFilenameForScriptName();
    [CompilerGeneratedAttribute]
public void set_UseOnlyFilenameForScriptName(bool value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public String[] get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(String[] value);
}
public class DbUp.ScriptProviders.FileSystemScriptProvider : object {
    private string directoryPath;
    private Func`2<string, bool> filter;
    private Encoding encoding;
    private FileSystemScriptOptions options;
    private SqlScriptOptions sqlScriptOptions;
    public FileSystemScriptProvider(string directoryPath);
    public FileSystemScriptProvider(string directoryPath, FileSystemScriptOptions options);
    public FileSystemScriptProvider(string directoryPath, FileSystemScriptOptions options, SqlScriptOptions sqlScriptOptions);
    public sealed virtual IEnumerable`1<SqlScript> GetScripts(IConnectionManager connectionManager);
    private SearchOption ShouldSearchSubDirectories();
    [CompilerGeneratedAttribute]
private SqlScript <GetScripts>b__8_0(string x);
    [CompilerGeneratedAttribute]
private bool <GetScripts>b__8_5(FileInfo x);
    [CompilerGeneratedAttribute]
private SqlScript <GetScripts>b__8_6(FileInfo x);
}
internal class DbUp.ScriptProviders.ScriptInstanceProvider : object {
    private IScript[] scripts;
    private Func`2<IScript, string> namer;
    private SqlScriptOptions sqlScriptOptions;
    public ScriptInstanceProvider(IScript[] scripts);
    public ScriptInstanceProvider(Func`2<IScript, string> namer, IScript[] scripts);
    public ScriptInstanceProvider(Func`2<IScript, string> namer, SqlScriptOptions sqlScriptOptions, IScript[] scripts);
    public sealed virtual IEnumerable`1<SqlScript> GetScripts(IConnectionManager connectionManager);
}
public class DbUp.ScriptProviders.StaticScriptProvider : object {
    private IEnumerable`1<SqlScript> scripts;
    public StaticScriptProvider(IEnumerable`1<SqlScript> scripts);
    public sealed virtual IEnumerable`1<SqlScript> GetScripts(IConnectionManager connectionManager);
}
public enum DbUp.Support.ObjectNameOptions : Enum {
    public int value__;
    public static ObjectNameOptions None;
    public static ObjectNameOptions Trim;
}
public abstract class DbUp.Support.ScriptExecutor : object {
    private Func`1<IConnectionManager> connectionManagerFactory;
    private IEnumerable`1<IScriptPreprocessor> scriptPreprocessors;
    private Func`1<IJournal> journalFactory;
    private Func`1<bool> variablesEnabled;
    private ISqlObjectParser sqlObjectParser;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExecutionTimeoutSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IUpgradeLog> <Log>k__BackingField;
    public Nullable`1<int> ExecutionTimeoutSeconds { get; public set; }
    public string Schema { get; public set; }
    protected bool UseTheSameTransactionForJournalTableAndScripts { get; }
    protected Func`1<IUpgradeLog> Log { get; private set; }
    public ScriptExecutor(Func`1<IConnectionManager> connectionManagerFactory, ISqlObjectParser sqlObjectParser, Func`1<IUpgradeLog> log, string schema, Func`1<bool> variablesEnabled, IEnumerable`1<IScriptPreprocessor> scriptPreprocessors, Func`1<IJournal> journalFactory);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_ExecutionTimeoutSeconds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExecutionTimeoutSeconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    public virtual void Execute(SqlScript script);
    public sealed virtual void VerifySchema();
    protected abstract virtual string GetVerifySchemaSql(string schema);
    protected virtual bool get_UseTheSameTransactionForJournalTableAndScripts();
    protected virtual string PreprocessScriptContents(SqlScript script, IDictionary`2<string, string> variables);
    public virtual void Execute(SqlScript script, IDictionary`2<string, string> variables);
    private bool ShouldJournalScript(SqlScript script);
    protected abstract virtual void ExecuteCommandsWithinExceptionHandler(int index, SqlScript script, Action executeCallback);
    protected virtual void ExecuteNonQuery(IDbCommand command);
    protected virtual void ExecuteAndLogOutput(IDbCommand command);
    protected string QuoteSqlObjectName(string objectName);
    protected virtual void WriteReaderToLog(IDataReader reader);
    [CompilerGeneratedAttribute]
protected Func`1<IUpgradeLog> get_Log();
    [CompilerGeneratedAttribute]
private void set_Log(Func`1<IUpgradeLog> value);
    [CompilerGeneratedAttribute]
private void <VerifySchema>b__15_0(Func`1<IDbCommand> dbCommandFactory);
}
public class DbUp.Support.ScriptNameComparer : object {
    private IComparer`1<string> comparer;
    public ScriptNameComparer(IComparer`1<string> comparer);
    public sealed virtual int Compare(string x, string y);
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string obj);
}
public enum DbUp.Support.ScriptType : Enum {
    public int value__;
    public static ScriptType RunOnce;
    public static ScriptType RunAlways;
}
public class DbUp.Support.SqlCommandReader : SqlParser {
    private StringBuilder commandScriptBuilder;
    public SqlCommandReader(string sqlText, string delimiter, bool delimiterRequiresWhitespace);
    public void ReadAllCommands(Action`1<string> handleCommand);
    private void ResetCommandBuffer();
    protected string GetCurrentCommandTextFromBuffer();
}
public class DbUp.Support.SqlCommandSplitter : object {
    public virtual IEnumerable`1<string> SplitScriptIntoCommands(string scriptContents);
}
public abstract class DbUp.Support.SqlObjectParser : object {
    private string quotePrefix;
    private string quoteSuffix;
    private Regex matchQuotes;
    protected SqlObjectParser(string quotePrefix, string quoteSuffix);
    public sealed virtual string QuoteIdentifier(string objectName);
    public virtual string QuoteIdentifier(string objectName, ObjectNameOptions objectNameOptions);
    public virtual string UnquoteIdentifier(string objectName);
}
public abstract class DbUp.Support.SqlParser : StringReader {
    private string sqlText;
    private int currentIndex;
    private static char NullChar;
    private static char EndOfLineChar;
    private static char CarriageReturn;
    private static char SingleQuoteChar;
    private static char DashChar;
    private static char SlashChar;
    private static char StarChar;
    private static char OpenBracketChar;
    private static char CloseBracketChar;
    protected static int FailedRead;
    [CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelimiterRequiresWhitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Action CommandEnded;
    [CompilerGeneratedAttribute]
private Action`2<CharacterType, char> ReadCharacter;
    [CompilerGeneratedAttribute]
private char <LastChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <CurrentChar>k__BackingField;
    protected string Delimiter { get; protected set; }
    protected bool DelimiterRequiresWhitespace { get; protected set; }
    protected int CurrentIndex { get; private set; }
    protected bool IsCustomStatement { get; }
    protected char LastChar { get; private set; }
    protected char CurrentChar { get; private set; }
    protected bool HasReachedEnd { get; }
    protected bool IsEndOfLine { get; }
    protected bool IsQuote { get; }
    protected bool IsWhiteSpace { get; }
    private bool IsBeginningOfBracketedText { get; }
    private bool IsEndOfBracketedText { get; }
    private bool IsBeginningOfDashDashComment { get; }
    private bool IsBeginningOfSlashStarComment { get; }
    private bool IsBeginningOfDelimiter { get; }
    private bool IsEndOfSlashStarComment { get; }
    public SqlParser(string sqlText, string delimiter, bool delimiterRequiresWhitespace);
    [CompilerGeneratedAttribute]
protected string get_Delimiter();
    [CompilerGeneratedAttribute]
protected void set_Delimiter(string value);
    [CompilerGeneratedAttribute]
protected bool get_DelimiterRequiresWhitespace();
    [CompilerGeneratedAttribute]
protected void set_DelimiterRequiresWhitespace(bool value);
    protected int get_CurrentIndex();
    private void set_CurrentIndex(int value);
    protected void Parse();
    [CompilerGeneratedAttribute]
protected void add_CommandEnded(Action value);
    [CompilerGeneratedAttribute]
protected void remove_CommandEnded(Action value);
    [CompilerGeneratedAttribute]
protected void add_ReadCharacter(Action`2<CharacterType, char> value);
    [CompilerGeneratedAttribute]
protected void remove_ReadCharacter(Action`2<CharacterType, char> value);
    protected void OnReadCharacter(CharacterType type, char c);
    protected virtual void ReadCustomStatement();
    protected virtual bool get_IsCustomStatement();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual int ReadBlock(Char[] buffer, int index, int count);
    public virtual string ReadLine();
    public virtual string ReadToEnd();
    [CompilerGeneratedAttribute]
protected char get_LastChar();
    [CompilerGeneratedAttribute]
private void set_LastChar(char value);
    [CompilerGeneratedAttribute]
protected char get_CurrentChar();
    [CompilerGeneratedAttribute]
private void set_CurrentChar(char value);
    protected bool get_HasReachedEnd();
    protected bool get_IsEndOfLine();
    protected bool IsCurrentCharEqualTo(char comparisonChar);
    protected bool IsLastCharEqualTo(char comparisonChar);
    protected bool IsCharEqualTo(char comparisonChar, char compareTo);
    protected bool get_IsQuote();
    protected bool get_IsWhiteSpace();
    protected char PeekChar();
    protected bool TryPeek(int numberOfCharacters, String& result);
    private bool get_IsBeginningOfBracketedText();
    private bool get_IsEndOfBracketedText();
    private bool get_IsBeginningOfDashDashComment();
    private bool get_IsBeginningOfSlashStarComment();
    private bool get_IsBeginningOfDelimiter();
    private bool get_IsEndOfSlashStarComment();
    private void ReadQuotedString();
    private void ReadBracketedText();
    private void ReadDashDashComment();
    private void ReadSlashStarComment();
    private bool ReadDelimiter();
}
public abstract class DbUp.Support.TableJournal : object {
    private ISqlObjectParser sqlObjectParser;
    private bool journalExists;
    [CompilerGeneratedAttribute]
private string <SchemaTableSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnquotedSchemaTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FqSchemaTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IConnectionManager> <ConnectionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IUpgradeLog> <Log>k__BackingField;
    protected string SchemaTableSchema { get; private set; }
    protected string UnquotedSchemaTableName { get; private set; }
    protected string FqSchemaTableName { get; private set; }
    protected Func`1<IConnectionManager> ConnectionManager { get; private set; }
    protected Func`1<IUpgradeLog> Log { get; private set; }
    protected TableJournal(Func`1<IConnectionManager> connectionManager, Func`1<IUpgradeLog> logger, ISqlObjectParser sqlObjectParser, string schema, string table);
    [CompilerGeneratedAttribute]
protected string get_SchemaTableSchema();
    [CompilerGeneratedAttribute]
private void set_SchemaTableSchema(string value);
    [CompilerGeneratedAttribute]
protected string get_UnquotedSchemaTableName();
    [CompilerGeneratedAttribute]
private void set_UnquotedSchemaTableName(string value);
    [CompilerGeneratedAttribute]
protected string get_FqSchemaTableName();
    [CompilerGeneratedAttribute]
private void set_FqSchemaTableName(string value);
    [CompilerGeneratedAttribute]
protected Func`1<IConnectionManager> get_ConnectionManager();
    [CompilerGeneratedAttribute]
private void set_ConnectionManager(Func`1<IConnectionManager> value);
    [CompilerGeneratedAttribute]
protected Func`1<IUpgradeLog> get_Log();
    [CompilerGeneratedAttribute]
private void set_Log(Func`1<IUpgradeLog> value);
    public sealed virtual String[] GetExecutedScripts();
    public virtual void StoreExecutedScript(SqlScript script, Func`1<IDbCommand> dbCommandFactory);
    protected virtual IDbCommand GetInsertScriptCommand(Func`1<IDbCommand> dbCommandFactory, SqlScript script);
    protected IDbCommand GetJournalEntriesCommand(Func`1<IDbCommand> dbCommandFactory);
    protected IDbCommand GetCreateTableCommand(Func`1<IDbCommand> dbCommandFactory);
    protected abstract virtual string GetInsertJournalEntrySql(string scriptName, string applied);
    protected abstract virtual string GetJournalEntriesSql();
    protected abstract virtual string CreateSchemaTableSql(string quotedPrimaryKeyName);
    protected string UnquoteSqlObjectName(string quotedIdentifier);
    protected virtual void OnTableCreated(Func`1<IDbCommand> dbCommandFactory);
    public virtual void EnsureTableExistsAndIsLatestVersion(Func`1<IDbCommand> dbCommandFactory);
    protected virtual bool DoesTableExist(Func`1<IDbCommand> dbCommandFactory);
    protected virtual string DoesTableExistSql();
    [CompilerGeneratedAttribute]
private String[] <GetExecutedScripts>b__23_0(Func`1<IDbCommand> dbCommandFactory);
}
public class DbUp.SupportedDatabasesForDropDatabase : object {
}
public class DbUp.SupportedDatabasesForEnsureDatabase : object {
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.AspChildControlTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ControlType>k__BackingField;
    public string TagName { get; private set; }
    public Type ControlType { get; private set; }
    public AspChildControlTypeAttribute(string tagName, Type controlType);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    [CompilerGeneratedAttribute]
public Type get_ControlType();
    [CompilerGeneratedAttribute]
private void set_ControlType(Type value);
}
[AttributeUsageAttribute("192")]
internal class JetBrains.Annotations.AspDataFieldAttribute : Attribute {
}
[AttributeUsageAttribute("192")]
internal class JetBrains.Annotations.AspDataFieldsAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.AspMethodPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcActionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    public string AnonymousProperty { get; private set; }
    public AspMvcActionAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("2176")]
internal class JetBrains.Annotations.AspMvcActionSelectorAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcAreaAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    public string AnonymousProperty { get; private set; }
    public AspMvcAreaAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; private set; }
    public AspMvcAreaMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; private set; }
    public AspMvcAreaPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; private set; }
    public AspMvcAreaViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcControllerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    public string AnonymousProperty { get; private set; }
    public AspMvcControllerAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcDisplayTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcEditorTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcMasterAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.AspMvcMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; private set; }
    public AspMvcMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcModelTypeAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcPartialViewAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; private set; }
    public AspMvcPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("68")]
internal class JetBrains.Annotations.AspMvcSuppressViewErrorAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcViewAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcViewComponentAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.AspMvcViewComponentViewAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.AspMvcViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; private set; }
    public AspMvcViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.AspRequiredAttributeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Attribute>k__BackingField;
    public string Attribute { get; private set; }
    public AspRequiredAttributeAttribute(string attribute);
    [CompilerGeneratedAttribute]
public string get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(string value);
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.AspTypePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CreateConstructorReferences>k__BackingField;
    public bool CreateConstructorReferences { get; private set; }
    public AspTypePropertyAttribute(bool createConstructorReferences);
    [CompilerGeneratedAttribute]
public bool get_CreateConstructorReferences();
    [CompilerGeneratedAttribute]
private void set_CreateConstructorReferences(bool value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AssertionConditionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private AssertionConditionType <ConditionType>k__BackingField;
    public AssertionConditionType ConditionType { get; private set; }
    public AssertionConditionAttribute(AssertionConditionType conditionType);
    [CompilerGeneratedAttribute]
public AssertionConditionType get_ConditionType();
    [CompilerGeneratedAttribute]
private void set_ConditionType(AssertionConditionType value);
}
internal enum JetBrains.Annotations.AssertionConditionType : Enum {
    public int value__;
    public static AssertionConditionType IS_TRUE;
    public static AssertionConditionType IS_FALSE;
    public static AssertionConditionType IS_NULL;
    public static AssertionConditionType IS_NOT_NULL;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.AssertionMethodAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("System.Attribute")]
internal class JetBrains.Annotations.BaseTypeRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    [NotNullAttribute]
public Type BaseType { get; private set; }
    public BaseTypeRequiredAttribute(Type baseType);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(Type value);
}
[AttributeUsageAttribute("7104")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("1036")]
internal class JetBrains.Annotations.CannotApplyEqualityOperatorAttribute : Attribute {
}
[AttributeUsageAttribute("224")]
internal class JetBrains.Annotations.CollectionAccessAttribute : Attribute {
    [CompilerGeneratedAttribute]
private CollectionAccessType <CollectionAccessType>k__BackingField;
    public CollectionAccessType CollectionAccessType { get; private set; }
    public CollectionAccessAttribute(CollectionAccessType collectionAccessType);
    [CompilerGeneratedAttribute]
public CollectionAccessType get_CollectionAccessType();
    [CompilerGeneratedAttribute]
private void set_CollectionAccessType(CollectionAccessType value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.CollectionAccessType : Enum {
    public int value__;
    public static CollectionAccessType None;
    public static CollectionAccessType Read;
    public static CollectionAccessType ModifyExistingContent;
    public static CollectionAccessType UpdatedContent;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.HtmlAttributeValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; private set; }
    public HtmlAttributeValueAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.HtmlElementAttributesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public HtmlElementAttributesAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InstantHandleAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemCanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemNotNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.LinqTunnelAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.LocalizationRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public bool Required { get; private set; }
    public LocalizationRequiredAttribute(bool required);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(bool value);
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.MacroAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public string Expression { get; public set; }
    public int Editable { get; public set; }
    public string Target { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public int get_Editable();
    [CompilerGeneratedAttribute]
public void set_Editable(int value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
}
[AttributeUsageAttribute("16388")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; private set; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.MustUseReturnValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    public string Justification { get; private set; }
    public MustUseReturnValueAttribute(string justification);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
private void set_Justification(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.NoReorder : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; private set; }
    public NotifyPropertyChangedInvocatorAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
}
[AttributeUsageAttribute("7104")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.PathReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    public string BasePath { get; private set; }
    public PathReferenceAttribute(string basePath);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
private void set_BasePath(string value);
}
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.ProvidesContextAttribute : Attribute {
}
[MeansImplicitUseAttribute("3")]
internal class JetBrains.Annotations.PublicAPIAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; private set; }
    public PublicAPIAttribute(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.PureAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorHelperCommonAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorImportNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public RazorImportNamespaceAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorInjectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    public string Type { get; private set; }
    public string FieldName { get; private set; }
    public RazorInjectionAttribute(string type, string fieldName);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.RazorLayoutAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.RazorSectionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorWriteLiteralMethodAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorWriteMethodAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.RazorWriteMethodParameterAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.RegexPatternAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.SourceTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.ValueProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; private set; }
    public ValueProviderAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.XamlItemsControlAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class StandardExtensions : object {
    [ExtensionAttribute]
public static UpgradeEngineBuilder LogTo(UpgradeEngineBuilder builder, IUpgradeLog log);
    [ExtensionAttribute]
public static UpgradeEngineBuilder LogTo(UpgradeEngineBuilder builder, ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static UpgradeEngineBuilder LogTo(UpgradeEngineBuilder builder, ILogger logger);
    [ExtensionAttribute]
public static UpgradeEngineBuilder LogToConsole(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder LogToNowhere(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder LogToTrace(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder LogScriptOutput(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder ResetConfiguredLoggers(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder JournalTo(UpgradeEngineBuilder builder, IJournal journal);
    [ExtensionAttribute]
public static UpgradeEngineBuilder JournalTo(UpgradeEngineBuilder builder, Func`3<Func`1<IConnectionManager>, Func`1<IUpgradeLog>, IJournal> createJournal);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScripts(UpgradeEngineBuilder builder, IScriptProvider scriptProvider);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScripts(UpgradeEngineBuilder builder, IEnumerable`1<SqlScript> scripts);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScripts(UpgradeEngineBuilder builder, SqlScript[] scripts);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScript(UpgradeEngineBuilder builder, SqlScript script);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScript(UpgradeEngineBuilder builder, string name, string contents);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScript(UpgradeEngineBuilder builder, string name, string contents, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScript(UpgradeEngineBuilder builder, string name, IScript script);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScript(UpgradeEngineBuilder builder, string name, IScript script, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScripts(UpgradeEngineBuilder builder, IScript[] scripts);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScripts(UpgradeEngineBuilder builder, Func`2<IScript, string> namer, IScript[] scripts);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScripts(UpgradeEngineBuilder builder, Func`2<IScript, string> namer, SqlScriptOptions sqlScriptOptions, IScript[] scripts);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path, Func`2<string, bool> filter);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path, Func`2<string, bool> filter, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path, Encoding encoding);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path, Encoding encoding, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path, Func`2<string, bool> filter, Encoding encoding);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path, Func`2<string, bool> filter, Encoding encoding, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path, FileSystemScriptOptions options);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsFromFileSystem(UpgradeEngineBuilder builder, string path, FileSystemScriptOptions options, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Encoding encoding);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Encoding encoding, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Func`2<string, bool> filter, Encoding encoding);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Func`2<string, bool> filter, Encoding encoding, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Func`2<string, bool> filter);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Func`2<string, bool> filter, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsAndCodeEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsAndCodeEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsAndCodeEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Func`2<string, bool> filter);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsAndCodeEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Func`2<string, bool> filter, Func`2<string, bool> codeScriptFilter);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsAndCodeEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Func`2<string, bool> filter, Func`2<string, bool> codeScriptFilter, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsAndCodeEmbeddedInAssembly(UpgradeEngineBuilder builder, Assembly assembly, Func`2<string, bool> filter, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptNameComparer(UpgradeEngineBuilder builder, IComparer`1<string> comparer);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithFilter(UpgradeEngineBuilder builder, IScriptFilter filter);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithPreprocessor(UpgradeEngineBuilder builder, IScriptPreprocessor preprocessor);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithVariables(UpgradeEngineBuilder builder, IDictionary`2<string, string> variables);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithVariable(UpgradeEngineBuilder builder, string variableName, string value);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithVariablesDisabled(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithVariablesEnabled(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithExecutionTimeout(UpgradeEngineBuilder builder, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithoutTransaction(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithTransaction(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithTransactionAlwaysRollback(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithTransactionPerScript(UpgradeEngineBuilder builder);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssemblies(UpgradeEngineBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssemblies(UpgradeEngineBuilder builder, Assembly[] assemblies, Func`2<string, bool> filter);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssemblies(UpgradeEngineBuilder builder, Assembly[] assemblies, Func`2<string, bool> filter, SqlScriptOptions sqlScriptOptions);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssemblies(UpgradeEngineBuilder builder, Assembly[] assemblies, Encoding encoding);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssemblies(UpgradeEngineBuilder builder, Assembly[] assemblies, Func`2<string, bool> filter, Encoding encoding);
    [ExtensionAttribute]
public static UpgradeEngineBuilder WithScriptsEmbeddedInAssemblies(UpgradeEngineBuilder builder, Assembly[] assemblies, Func`2<string, bool> filter, Encoding encoding, SqlScriptOptions sqlScriptOptions);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
