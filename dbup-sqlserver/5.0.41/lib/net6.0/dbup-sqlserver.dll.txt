[ExtensionAttribute]
public static class AzureSqlServerExtensions : object {
    [ExtensionAttribute]
public static UpgradeEngineBuilder AzureSqlDatabaseWithIntegratedSecurity(SupportedDatabases supported, string connectionString, string schema);
    [ExtensionAttribute]
public static UpgradeEngineBuilder AzureSqlDatabaseWithIntegratedSecurity(SupportedDatabases supported, string connectionString, string schema, string resource);
    [ExtensionAttribute]
public static UpgradeEngineBuilder AzureSqlDatabaseWithIntegratedSecurity(SupportedDatabases supported, string connectionString, string schema, string resource, string tenantId, string azureAdInstance);
}
public enum DbUp.SqlServer.AzureDatabaseEdition : Enum {
    public int value__;
    public static AzureDatabaseEdition None;
    public static AzureDatabaseEdition Basic;
    public static AzureDatabaseEdition Standard;
    public static AzureDatabaseEdition Premium;
}
public class DbUp.SqlServer.AzureSqlConnectionManager : DatabaseConnectionManager {
    public AzureSqlConnectionManager(string connectionString);
    public AzureSqlConnectionManager(string connectionString, string resource);
    public AzureSqlConnectionManager(string connectionString, string resource, string tenantId, string azureAdInstance);
    public virtual IEnumerable`1<string> SplitScriptIntoCommands(string scriptContents);
}
public class DbUp.SqlServer.Helpers.TemporarySqlDatabase : object {
    private static string localSqlInstance;
    private string databaseName;
    private AdHocSqlRunner master;
    private SqlConnection sqlConnection;
    private SqlConnection masterSqlConnection;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private AdHocSqlRunner <AdHoc>k__BackingField;
    public string ConnectionString { get; }
    public AdHocSqlRunner AdHoc { get; }
    public TemporarySqlDatabase(string name);
    public TemporarySqlDatabase(string name, string instanceName);
    public TemporarySqlDatabase(SqlConnectionStringBuilder connectionStringBuilder);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public AdHocSqlRunner get_AdHoc();
    public void Create();
    public sealed virtual void Dispose();
    public static TemporarySqlDatabase FromConnectionString(string connectionString);
    [CompilerGeneratedAttribute]
private IDbCommand <.ctor>b__7_1();
}
public class DbUp.SqlServer.SqlConnectionManager : DatabaseConnectionManager {
    public SqlConnectionManager(string connectionString);
    public virtual IEnumerable`1<string> SplitScriptIntoCommands(string scriptContents);
}
public class DbUp.SqlServer.SqlScriptExecutor : ScriptExecutor {
    public SqlScriptExecutor(Func`1<IConnectionManager> connectionManagerFactory, Func`1<IUpgradeLog> log, string schema, Func`1<bool> variablesEnabled, IEnumerable`1<IScriptPreprocessor> scriptPreprocessors, Func`1<IJournal> journalFactory);
    protected virtual string GetVerifySchemaSql(string schema);
    protected virtual void ExecuteCommandsWithinExceptionHandler(int index, SqlScript script, Action executeCommand);
}
public class DbUp.SqlServer.SqlServerObjectParser : SqlObjectParser {
    public virtual string QuoteIdentifier(string objectName, ObjectNameOptions objectNameOptions);
}
public class DbUp.SqlServer.SqlTableJournal : TableJournal {
    public SqlTableJournal(Func`1<IConnectionManager> connectionManager, Func`1<IUpgradeLog> logger, string schema, string table);
    protected virtual string GetInsertJournalEntrySql(string scriptName, string applied);
    protected virtual string GetJournalEntriesSql();
    protected virtual string CreateSchemaTableSql(string quotedPrimaryKeyName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class SqlServerExtensions : object {
    [ExtensionAttribute]
public static UpgradeEngineBuilder SqlDatabase(SupportedDatabases supported, string connectionString);
    [ExtensionAttribute]
public static UpgradeEngineBuilder SqlDatabase(SupportedDatabases supported, string connectionString, string schema);
    [ExtensionAttribute]
[ObsoleteAttribute("Use "AzureSqlDatabaseWithIntegratedSecurity(this SupportedDatabases, string, string)" if passing "true" to "useAzureSqlIntegratedSecurity".")]
public static UpgradeEngineBuilder SqlDatabase(SupportedDatabases supported, string connectionString, string schema, bool useAzureSqlIntegratedSecurity);
    [ExtensionAttribute]
public static UpgradeEngineBuilder SqlDatabase(SupportedDatabases supported, IConnectionManager connectionManager, string schema);
    private static UpgradeEngineBuilder SqlDatabase(IConnectionManager connectionManager, string schema);
    [ExtensionAttribute]
public static UpgradeEngineBuilder JournalToSqlTable(UpgradeEngineBuilder builder, string schema, string table);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForEnsureDatabase supported, string connectionString);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForEnsureDatabase supported, string connectionString, AzureDatabaseEdition azureDatabaseEdition);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForEnsureDatabase supported, string connectionString, int commandTimeout);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForEnsureDatabase supported, string connectionString, string collation);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForEnsureDatabase supported, string connectionString, int commandTimeout, AzureDatabaseEdition azureDatabaseEdition);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForEnsureDatabase supported, string connectionString, int commandTimeout, string collation);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForEnsureDatabase supported, string connectionString, AzureDatabaseEdition azureDatabaseEdition, string collation);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForEnsureDatabase supported, string connectionString, int commandTimeout, AzureDatabaseEdition azureDatabaseEdition, string collation);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForEnsureDatabase supported, string connectionString, IUpgradeLog logger, int timeout, AzureDatabaseEdition azureDatabaseEdition, string collation);
    private static bool DatabaseExistsIfConnectedToDirectly(IUpgradeLog logger, string connectionString, string databaseName);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForDropDatabase supported, string connectionString);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForDropDatabase supported, string connectionString, int commandTimeout);
    [ExtensionAttribute]
public static void SqlDatabase(SupportedDatabasesForDropDatabase supported, string connectionString, IUpgradeLog logger, int timeout);
    private static void GetMasterConnectionStringBuilder(string connectionString, IUpgradeLog logger, String& masterConnectionString, String& databaseName);
    private static bool DatabaseExists(SqlConnection connection, string databaseName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
