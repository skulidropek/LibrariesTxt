[ExtensionAttribute]
public static class Force.DeepCloner.DeepClonerExtensions : object {
    private static DeepClonerExtensions();
    [ExtensionAttribute]
public static T DeepClone(T obj);
    [ExtensionAttribute]
public static TTo DeepCloneTo(TFrom objFrom, TTo objTo);
    [ExtensionAttribute]
public static TTo ShallowCloneTo(TFrom objFrom, TTo objTo);
    [ExtensionAttribute]
public static T ShallowClone(T obj);
    private static bool PermissionCheck();
}
internal static class Force.DeepCloner.Helpers.ClonerToExprGenerator : object {
    internal static object GenerateClonerInternal(Type realType, bool isDeepClone);
    private static object GenerateProcessMethod(Type type, bool isDeepClone);
    private static object GenerateProcessArrayMethod(Type type, bool isDeep);
    internal static T[] ShallowClone1DimArraySafeInternal(T[] objFrom, T[] objTo);
    internal static T[] Clone1DimArraySafeInternal(T[] objFrom, T[] objTo, DeepCloneState state);
    internal static T[] Clone1DimArrayStructInternal(T[] objFrom, T[] objTo, DeepCloneState state);
    internal static T[] Clone1DimArrayClassInternal(T[] objFrom, T[] objTo, DeepCloneState state);
    internal static T[0...,0...] Clone2DimArrayInternal(T[0...,0...] objFrom, T[0...,0...] objTo, DeepCloneState state, bool isDeep);
    internal static Array CloneAbstractArrayInternal(Array objFrom, Array objTo, DeepCloneState state, bool isDeep);
}
internal static class Force.DeepCloner.Helpers.DeepClonerCache : object {
    private static ConcurrentDictionary`2<Type, object> _typeCache;
    private static ConcurrentDictionary`2<Type, object> _typeCacheDeepTo;
    private static ConcurrentDictionary`2<Type, object> _typeCacheShallowTo;
    private static ConcurrentDictionary`2<Type, object> _structAsObjectCache;
    private static ConcurrentDictionary`2<Tuple`2<Type, Type>, object> _typeConvertCache;
    private static DeepClonerCache();
    public static object GetOrAddClass(Type type, Func`2<Type, T> adder);
    public static object GetOrAddDeepClassTo(Type type, Func`2<Type, T> adder);
    public static object GetOrAddShallowClassTo(Type type, Func`2<Type, T> adder);
    public static object GetOrAddStructAsObject(Type type, Func`2<Type, T> adder);
    public static T GetOrAddConvertor(Type from, Type to, Func`3<Type, Type, T> adder);
    public static void ClearCache();
}
internal static class Force.DeepCloner.Helpers.DeepClonerExprGenerator : object {
    private static ConcurrentDictionary`2<FieldInfo, bool> _readonlyFields;
    private static bool _canFastCopyReadonlyFields;
    private static MethodInfo _fieldSetMethod;
    private static FieldInfo _attributesFieldInfo;
    private static DeepClonerExprGenerator();
    internal static object GenerateClonerInternal(Type realType, bool asObject);
    internal static void ForceSetField(FieldInfo field, object obj, object value);
    private static object GenerateProcessMethod(Type type, bool unboxStruct);
    private static object GenerateProcessArrayMethod(Type type);
    private static object GenerateProcessTupleMethod(Type type);
}
internal static class Force.DeepCloner.Helpers.DeepClonerGenerator : object {
    public static T CloneObject(T obj);
    private static object CloneClassRoot(object obj);
    internal static object CloneClassInternal(object obj, DeepCloneState state);
    private static T CloneStructInternal(T obj, DeepCloneState state);
    internal static T[] Clone1DimArraySafeInternal(T[] obj, DeepCloneState state);
    internal static T[] Clone1DimArrayStructInternal(T[] obj, DeepCloneState state);
    internal static T[] Clone1DimArrayClassInternal(T[] obj, DeepCloneState state);
    internal static T[0...,0...] Clone2DimArrayInternal(T[0...,0...] obj, DeepCloneState state);
    internal static Array CloneAbstractArrayInternal(Array obj, DeepCloneState state);
    internal static Func`3<T, DeepCloneState, T> GetClonerForValueType();
    private static object GenerateCloner(Type t, bool asObject);
    public static object CloneObjectTo(object objFrom, object objTo, bool isDeep);
}
internal static class Force.DeepCloner.Helpers.DeepClonerMsilGenerator : object {
    private static int _methodCounter;
    internal static object GenerateClonerInternal(Type realType, bool asObject);
    private static void GenerateProcessMethod(ILGenerator il, Type type, bool unboxStruct);
    private static void GenerateProcessArrayMethod(ILGenerator il, Type type);
    private static void GenerateProcessTupleMethod(ILGenerator il, Type type);
}
internal static class Force.DeepCloner.Helpers.DeepClonerMsilHelper : object {
    public static bool IsConstructorDoNothing(Type type, ConstructorInfo constructor);
}
internal static class Force.DeepCloner.Helpers.DeepClonerSafeTypes : object {
    internal static ConcurrentDictionary`2<Type, bool> KnownTypes;
    private static DeepClonerSafeTypes();
    private static bool CanReturnSameType(Type type, HashSet`1<Type> processingTypes);
    public static bool CanReturnSameObject(Type type);
}
internal class Force.DeepCloner.Helpers.DeepCloneState : object {
    private MiniDictionary _loops;
    private Object[] _baseFromTo;
    private int _idx;
    public object GetKnownRef(object from);
    public void AddKnownRef(object from, object to);
}
[ExtensionAttribute]
internal static class Force.DeepCloner.Helpers.ReflectionHelper : object {
    [ExtensionAttribute]
public static bool IsEnum(Type t);
    [ExtensionAttribute]
public static bool IsValueType(Type t);
    [ExtensionAttribute]
public static bool IsClass(Type t);
    [ExtensionAttribute]
public static Type BaseType(Type t);
    [ExtensionAttribute]
public static FieldInfo[] GetAllFields(Type t);
    [ExtensionAttribute]
public static PropertyInfo[] GetPublicProperties(Type t);
    [ExtensionAttribute]
public static FieldInfo[] GetDeclaredFields(Type t);
    [ExtensionAttribute]
public static ConstructorInfo[] GetPrivateConstructors(Type t);
    [ExtensionAttribute]
public static ConstructorInfo[] GetPublicConstructors(Type t);
    [ExtensionAttribute]
public static MethodInfo GetPrivateMethod(Type t, string methodName);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type t, string methodName);
    [ExtensionAttribute]
public static MethodInfo GetPrivateStaticMethod(Type t, string methodName);
    [ExtensionAttribute]
public static FieldInfo GetPrivateField(Type t, string fieldName);
    [ExtensionAttribute]
public static FieldInfo GetPrivateStaticField(Type t, string fieldName);
    [ExtensionAttribute]
public static Type[] GenericArguments(Type t);
}
internal static class Force.DeepCloner.Helpers.ShallowClonerGenerator : object {
    public static T CloneObject(T obj);
}
public abstract class Force.DeepCloner.Helpers.ShallowObjectCloner : object {
    private static ShallowObjectCloner _unsafeInstance;
    private static ShallowObjectCloner _instance;
    private static ShallowObjectCloner();
    protected abstract virtual object DoCloneObject(object obj);
    public static object CloneObject(object obj);
    internal static bool IsSafeVariant();
    internal static void SwitchTo(bool isSafe);
    private static ShallowObjectCloner GenerateUnsafeCloner();
}
internal static class Force.DeepCloner.Helpers.TypeCreationHelper : object {
    private static ModuleBuilder _moduleBuilder;
    internal static ModuleBuilder GetModuleBuilder();
}
