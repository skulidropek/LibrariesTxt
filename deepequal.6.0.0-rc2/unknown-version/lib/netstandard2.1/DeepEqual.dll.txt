[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DeepEqual.BasicDifference : Difference {
    [CompilerGeneratedAttribute]
private object <LeftValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RightValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeftChildProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RightChildProperty>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public object LeftValue { get; public set; }
    public object RightValue { get; public set; }
    public string LeftChildProperty { get; public set; }
    public string RightChildProperty { get; public set; }
    public BasicDifference(BreadcrumbPair Breadcrumb, object LeftValue, object RightValue, string LeftChildProperty, string RightChildProperty);
    [CompilerGeneratedAttribute]
protected BasicDifference(BasicDifference original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public object get_LeftValue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LeftValue(object value);
    [CompilerGeneratedAttribute]
public object get_RightValue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RightValue(object value);
    [CompilerGeneratedAttribute]
public string get_LeftChildProperty();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LeftChildProperty(string value);
    [CompilerGeneratedAttribute]
public string get_RightChildProperty();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RightChildProperty(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(BasicDifference left, BasicDifference right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(BasicDifference left, BasicDifference right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(Difference other);
    [CompilerGeneratedAttribute]
public virtual bool Equals(BasicDifference other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Difference <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BreadcrumbPair& Breadcrumb, Object& LeftValue, Object& RightValue, String& LeftChildProperty, String& RightChildProperty);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.BreadcrumbPair : object {
    [CompilerGeneratedAttribute]
private string <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Right>k__BackingField;
    public static BreadcrumbPair Empty;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Left { get; public set; }
    public string Right { get; public set; }
    public BreadcrumbPair(string Left, string Right);
    public BreadcrumbPair(string path);
    [CompilerGeneratedAttribute]
protected BreadcrumbPair(BreadcrumbPair original);
    private static BreadcrumbPair();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Left();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Left(string value);
    [CompilerGeneratedAttribute]
public string get_Right();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Right(string value);
    public BreadcrumbPair Dot(string property);
    [NullableContextAttribute("2")]
public BreadcrumbPair Dot(string left, string right);
    public BreadcrumbPair Index(string index);
    [NullableContextAttribute("2")]
public BreadcrumbPair Index(string left, string right);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BreadcrumbPair left, BreadcrumbPair right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BreadcrumbPair left, BreadcrumbPair right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BreadcrumbPair other);
    [CompilerGeneratedAttribute]
public virtual BreadcrumbPair <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Left, String& Right);
}
internal enum DeepEqual.CacheBehaviour : Enum {
    public int value__;
    public static CacheBehaviour PublicOnly;
    public static CacheBehaviour IncludePrivate;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.ComparisonBuilder : object {
    [CompilerGeneratedAttribute]
private IList`1<IComparison> <CustomComparisons>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, IDifferenceFormatter> <CustomFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DoubleTolerance>k__BackingField;
    [CompilerGeneratedAttribute]
private float <SingleTolerance>k__BackingField;
    private bool ignoreUnmatchedProperties;
    private bool ignoreCircularReferences;
    private List`1<Type> defaultSkippedTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Func`4<Type, Type, string, string>> mappedProperties;
    private List`1<Func`2<PropertyPair, bool>> ignoredProperties;
    private static Func`1<IComparisonBuilder`1<ComparisonBuilder>> DefaultGet;
    [CompilerGeneratedAttribute]
private static Func`1<IComparisonBuilder`1<ComparisonBuilder>> <Get>k__BackingField;
    internal IList`1<IComparison> CustomComparisons { get; internal set; }
    internal IDictionary`2<Type, IDifferenceFormatter> CustomFormatters { get; internal set; }
    internal double DoubleTolerance { get; internal set; }
    internal float SingleTolerance { get; internal set; }
    public static Func`1<IComparisonBuilder`1<ComparisonBuilder>> Get { get; public set; }
    private static ComparisonBuilder();
    [CompilerGeneratedAttribute]
internal IList`1<IComparison> get_CustomComparisons();
    [CompilerGeneratedAttribute]
internal void set_CustomComparisons(IList`1<IComparison> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<Type, IDifferenceFormatter> get_CustomFormatters();
    [CompilerGeneratedAttribute]
internal void set_CustomFormatters(IDictionary`2<Type, IDifferenceFormatter> value);
    [CompilerGeneratedAttribute]
internal double get_DoubleTolerance();
    [CompilerGeneratedAttribute]
internal void set_DoubleTolerance(double value);
    [CompilerGeneratedAttribute]
internal float get_SingleTolerance();
    [CompilerGeneratedAttribute]
internal void set_SingleTolerance(float value);
    [CompilerGeneratedAttribute]
public static Func`1<IComparisonBuilder`1<ComparisonBuilder>> get_Get();
    [CompilerGeneratedAttribute]
public static void set_Get(Func`1<IComparisonBuilder`1<ComparisonBuilder>> value);
    public static void Reset();
    public sealed virtual IComparison Create();
    public sealed virtual IDifferenceFormatterFactory GetFormatterFactory();
    public sealed virtual ComparisonBuilder IgnoreUnmatchedProperties();
    public sealed virtual ComparisonBuilder WithCustomComparison(IComparison comparison);
    public sealed virtual ComparisonBuilder WithCustomFormatter(IDifferenceFormatter formatter);
    [NullableContextAttribute("2")]
public sealed virtual ComparisonBuilder MapProperty(Expression`1<Func`2<A, object>> left, Expression`1<Func`2<B, object>> right);
    public sealed virtual ComparisonBuilder IgnoreProperty(Expression`1<Func`2<T, object>> property);
    public sealed virtual ComparisonBuilder IgnorePropertyIfMissing(Expression`1<Func`2<T, object>> property);
    private static string GetMemberName(Expression`1<Func`2<T, object>> property);
    private void IgnoreProperty(Type type, string propertyName);
    public sealed virtual ComparisonBuilder IgnoreProperty(Func`2<PropertyPair, bool> predicate);
    public sealed virtual ComparisonBuilder SkipDefault();
    public sealed virtual ComparisonBuilder ExposeInternalsOf();
    public sealed virtual ComparisonBuilder ExposeInternalsOf(Type[] types);
    public sealed virtual ComparisonBuilder WithFloatingPointTolerance(double doubleTolerance, float singleTolerance);
    public sealed virtual ComparisonBuilder IgnoreCircularReferences();
    [CompilerGeneratedAttribute]
internal static bool <IgnorePropertyIfMissing>g__Matches|35_1(PropertyReader reader, Type type, string name);
    [CompilerGeneratedAttribute]
internal static bool <IgnorePropertyIfMissing>g__AssertMissing|35_2(PropertyReader reader, string name);
    [CompilerGeneratedAttribute]
internal static bool <IgnoreProperty>g__Matches|37_1(PropertyReader reader, Type type, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.ComparisonContext : object {
    [CompilerGeneratedAttribute]
private ImmutableList`1<Difference> <Differences>k__BackingField;
    [CompilerGeneratedAttribute]
private BreadcrumbPair <Breadcrumb>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparison <RootComparison>k__BackingField;
    public ImmutableList`1<Difference> Differences { get; }
    public BreadcrumbPair Breadcrumb { get; }
    public IComparison RootComparison { get; }
    public ComparisonContext(IComparison rootComparison);
    public ComparisonContext(IComparison rootComparison, BreadcrumbPair breadcrumb);
    public ComparisonContext(IComparison rootComparison, ImmutableList`1<Difference> differences, BreadcrumbPair breadcrumb);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableList`1<Difference> get_Differences();
    [CompilerGeneratedAttribute]
public sealed virtual BreadcrumbPair get_Breadcrumb();
    [CompilerGeneratedAttribute]
public IComparison get_RootComparison();
    public sealed virtual IComparisonContext AddDifference(Difference difference);
    public sealed virtual IComparisonContext SetBreadcrumb(BreadcrumbPair breadcrumb);
    public sealed virtual IComparisonContext NewEmptyContext();
    public sealed virtual bool CanCompare(Type left, Type right);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(object left, object right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class DeepEqual.ComparisonContextExtensions : object {
    [ExtensionAttribute]
public static IComparisonContext AddDifference(IComparisonContext context, object value1, object value2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IComparisonContext AddDifference(IComparisonContext context, object value1, object value2, string leftChildProperty, string rightChildProperty);
    [ExtensionAttribute]
public static IComparisonContext VisitingProperty(IComparisonContext context, string propertyName);
    [ExtensionAttribute]
public static IComparisonContext VisitingProperty(IComparisonContext context, string leftPropertyName, string rightPropertyName);
    [ExtensionAttribute]
public static IComparisonContext VisitingIndex(IComparisonContext context, object index);
    [ExtensionAttribute]
public static IComparisonContext VisitingIndex(IComparisonContext context, object leftIndex, object rightIndex);
    [ExtensionAttribute]
public static IComparisonContext MergeDifferencesFrom(IComparisonContext context, IComparisonContext child);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class DeepEqual.ComparisonExtensions : object {
    [ExtensionAttribute]
public static T OfType(IComparison source);
    [ExtensionAttribute]
private static T OfTypeInternal(IComparison source);
}
public class DeepEqual.ComparisonNotFoundException : Exception {
    [NullableContextAttribute("1")]
public ComparisonNotFoundException(string message);
}
public enum DeepEqual.ComparisonResult : Enum {
    public int value__;
    public static ComparisonResult Inconclusive;
    public static ComparisonResult Pass;
    public static ComparisonResult Fail;
}
[ExtensionAttribute]
public static class DeepEqual.ComparisonResultExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ComparisonResult ToResult(IEnumerable`1<ComparisonResult> results);
    [ExtensionAttribute]
public static ComparisonResult Plus(ComparisonResult result, ComparisonResult other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.ComplexObjectComparer : object {
    private bool ignoreUnmatchedProperties;
    private IReadOnlyList`1<Func`2<PropertyPair, bool>> ignoredProperties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<Func`4<Type, Type, string, string>> mappedProperties;
    private List`1<ComparisonResult> results;
    public ComplexObjectComparer(bool ignoreUnmatchedProperties, IReadOnlyList`1<Func`2<PropertyPair, bool>> ignoredProperties, IReadOnlyList`1<Func`4<Type, Type, string, string>> mappedProperties);
    [NullableContextAttribute("2")]
public ValueTuple`2<ComparisonResult, IComparisonContext> CompareObjects(IComparisonContext context, object leftValue, object rightValue);
    private bool LeftAndRightPresent(PropertyPair pair);
    private List`1<PropertyPair> PreparePropertyInfo(object leftValue, object rightValue);
    private string GetMappedPropertyName(Type leftType, Type rightType, string leftPropName);
    private bool IsPropertyIgnored(PropertyPair pair);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.ComplexObjectComparison : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreUnmatchedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Func`2<PropertyPair, bool>> <IgnoredProperties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<Func`4<Type, Type, string, string>> <MappedProperties>k__BackingField;
    internal bool IgnoreUnmatchedProperties { get; }
    internal IReadOnlyList`1<Func`2<PropertyPair, bool>> IgnoredProperties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IReadOnlyList`1<Func`4<Type, Type, string, string>> MappedProperties { get; }
    public ComplexObjectComparison(bool ignoreUnmatchedProperties, List`1<Func`2<PropertyPair, bool>> ignoredProperties, List`1<Func`4<Type, Type, string, string>> mappedProperties);
    [CompilerGeneratedAttribute]
internal bool get_IgnoreUnmatchedProperties();
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<Func`2<PropertyPair, bool>> get_IgnoredProperties();
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<Func`4<Type, Type, string, string>> get_MappedProperties();
    public sealed virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.CompositeComparison : object {
    [CompilerGeneratedAttribute]
private List`1<IComparison> <Comparisons>k__BackingField;
    internal List`1<IComparison> Comparisons { get; }
    public CompositeComparison(IEnumerable`1<IComparison> comparisons);
    [CompilerGeneratedAttribute]
internal List`1<IComparison> get_Comparisons();
    public void Add(IComparison comparison);
    public void AddRange(IComparison[] comparisons);
    public sealed virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.CycleGuard : object {
    private ThreadLocal`1<Stack`1<ComparisonFrame>> framesByThread;
    private bool ignoreCircularReferences;
    [CompilerGeneratedAttribute]
private IComparison <Inner>k__BackingField;
    internal IComparison Inner { get; }
    public CycleGuard(bool ignoreCircularReferences, IComparison inner);
    [CompilerGeneratedAttribute]
internal IComparison get_Inner();
    public sealed virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
    [NullableContextAttribute("2")]
private static bool HasFoundCycle(ComparisonFrame comparison, object leftValue, object rightValue);
    [NullableContextAttribute("2")]
private ValueTuple`2<ComparisonResult, IComparisonContext> HandleCycle(ComparisonFrame frame, IComparisonContext context, object leftValue, object rightValue);
    [NullableContextAttribute("2")]
private static ValueTuple`2<ComparisonResult, IComparisonContext> ThrowCircularReferenceException(ComparisonFrame frame, IComparisonContext context, object leftValue, object rightValue);
    private Stack`1<ComparisonFrame> PreviousComparisonsForCurrentThread();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.DefaultComparison : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Type> <SkippedTypes>k__BackingField;
    internal IReadOnlyList`1<Type> SkippedTypes { get; }
    public DefaultComparison(List`1<Type> skippedTypes);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<Type> get_SkippedTypes();
    public sealed virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
    private bool IsSkipped(Type type);
    private static bool CoerceValues(Object& leftValue, Object& rightValue);
    private static bool CallImplicitOperator(Object& value, Type destType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.DictionaryComparison : object {
    [CompilerGeneratedAttribute]
private IComparison <KeyComparer>k__BackingField;
    internal IComparison KeyComparer { get; }
    public DictionaryComparison(IComparison keyComparer);
    [CompilerGeneratedAttribute]
internal IComparison get_KeyComparer();
    public sealed virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
    [IteratorStateMachineAttribute("DeepEqual.DictionaryComparison/<CastToDictionaryEntries>d__6")]
private static IEnumerable`1<DictionaryEntry> CastToDictionaryEntries(IDictionary source);
    private object FindKey(IDictionary`2<object, object> dictionary, object key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class DeepEqual.Difference : object {
    [CompilerGeneratedAttribute]
private BreadcrumbPair <Breadcrumb>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public BreadcrumbPair Breadcrumb { get; public set; }
    protected Difference(BreadcrumbPair Breadcrumb);
    [CompilerGeneratedAttribute]
protected Difference(Difference original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public BreadcrumbPair get_Breadcrumb();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Breadcrumb(BreadcrumbPair value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Difference left, Difference right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Difference left, Difference right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(Difference other);
    [CompilerGeneratedAttribute]
public abstract virtual Difference <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BreadcrumbPair& Breadcrumb);
}
public class DeepEqual.EnumComparison : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
    [NullableContextAttribute("1")]
private static bool CompareEnumWithConversion(object leftValue, object rightValue);
}
public class DeepEqual.ExpectedMissingProperty : Exception {
    [NullableContextAttribute("1")]
public ExpectedMissingProperty(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.FloatComparison : object {
    private double doubleTolerance;
    private float singleTolerance;
    public FloatComparison(double doubleTolerance, float singleTolerance);
    public sealed virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
    private ValueTuple`2<ComparisonResult, IComparisonContext> CompareSinglePrecision(IComparisonContext context, object leftValue, object rightValue);
    private ValueTuple`2<ComparisonResult, IComparisonContext> CompareDoublePrecision(IComparisonContext context, object leftValue, object rightValue);
    private static bool IsFloat(Type type);
    private static bool IsSinglePrecision(Type type);
    private static bool IsDoublePrecision(Type type);
    private static bool IsNumber(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.Formatting.BasicDifferenceFormatter : object {
    private static int InitialMaxLength;
    private static int HalfMaxLength;
    public sealed virtual string Format(Difference difference);
    private static ValueTuple`2<string, string> FixLongStringDifference(string leftValue, string rightValue);
    private static int FindIndexOfFirstDifferentChar(string leftValue, string rightValue);
}
public class DeepEqual.Formatting.BreadcrumbDifferenceFormatter : object {
    [NullableContextAttribute("1")]
public sealed virtual string Format(Difference difference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.Formatting.DeepEqualExceptionMessageBuilder : object {
    private IComparisonContext context;
    private IDifferenceFormatterFactory formatterFactory;
    public DeepEqualExceptionMessageBuilder(IComparisonContext context, IDifferenceFormatterFactory formatterFactory);
    public string GetMessage();
    private static string IndentLines(string differenceString);
    private string FormatDifference(Difference difference);
}
public class DeepEqual.Formatting.DifferenceFormatterFactory : object {
    [NullableAttribute("1")]
private IDictionary`2<Type, IDifferenceFormatter> customFormatters;
    public DifferenceFormatterFactory(IDictionary`2<Type, IDifferenceFormatter> customFormatters);
    [NullableContextAttribute("1")]
public sealed virtual IDifferenceFormatter GetFormatter(Difference difference);
}
internal static class DeepEqual.Formatting.FormatterHelper : object {
    [NullableContextAttribute("1")]
internal static string Prettify(object value);
}
[NullableContextAttribute("1")]
public interface DeepEqual.Formatting.IDifferenceFormatter {
    public abstract virtual string Format(Difference difference);
}
[NullableContextAttribute("1")]
public interface DeepEqual.Formatting.IDifferenceFormatterFactory {
    public abstract virtual IDifferenceFormatter GetFormatter(Difference difference);
}
public class DeepEqual.Formatting.MissingEntryDifferenceFormatter : object {
    [NullableContextAttribute("1")]
public sealed virtual string Format(Difference diff);
}
public class DeepEqual.Formatting.SetDifferenceFormatter : object {
    [NullableContextAttribute("1")]
public sealed virtual string Format(Difference difference);
}
[NullableContextAttribute("1")]
public interface DeepEqual.IComparison {
    public abstract virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public abstract virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
}
[NullableContextAttribute("1")]
public interface DeepEqual.IComparisonBuilder`1 {
    public abstract virtual IComparison Create();
    public abstract virtual IDifferenceFormatterFactory GetFormatterFactory();
    public abstract virtual TBuilder WithCustomComparison(IComparison comparison);
    public abstract virtual TBuilder WithCustomFormatter(IDifferenceFormatter formatter);
    [NullableContextAttribute("2")]
public abstract virtual TBuilder MapProperty(Expression`1<Func`2<A, object>> left, Expression`1<Func`2<B, object>> right);
    public abstract virtual TBuilder IgnoreProperty(Expression`1<Func`2<T, object>> property);
    public abstract virtual TBuilder IgnorePropertyIfMissing(Expression`1<Func`2<T, object>> property);
    public abstract virtual TBuilder IgnoreProperty(Func`2<PropertyPair, bool> func);
    public abstract virtual TBuilder IgnoreUnmatchedProperties();
    public abstract virtual TBuilder SkipDefault();
    public abstract virtual TBuilder ExposeInternalsOf();
    public abstract virtual TBuilder ExposeInternalsOf(Type[] types);
    public abstract virtual TBuilder WithFloatingPointTolerance(double doubleTolerance, float singleTolerance);
    public abstract virtual TBuilder IgnoreCircularReferences();
}
[NullableContextAttribute("1")]
public interface DeepEqual.IComparisonContext {
    public ImmutableList`1<Difference> Differences { get; }
    public BreadcrumbPair Breadcrumb { get; }
    public abstract virtual ImmutableList`1<Difference> get_Differences();
    public abstract virtual BreadcrumbPair get_Breadcrumb();
    public abstract virtual IComparisonContext AddDifference(Difference difference);
    public abstract virtual IComparisonContext SetBreadcrumb(BreadcrumbPair breadcrumb);
    public abstract virtual IComparisonContext NewEmptyContext();
    public abstract virtual bool CanCompare(Type left, Type right);
    [NullableContextAttribute("2")]
public abstract virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(object left, object right);
}
public class DeepEqual.ListComparison : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
    [CompilerGeneratedAttribute]
internal static bool <CanCompare>g__checkInnerCanCompare|0_0(<>c__DisplayClass0_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.MissingEntryDifference : Difference {
    [CompilerGeneratedAttribute]
private MissingSide <Side>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MissingSide Side { get; public set; }
    public object Key { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public MissingEntryDifference(BreadcrumbPair Breadcrumb, MissingSide Side, object Key, object Value);
    [CompilerGeneratedAttribute]
protected MissingEntryDifference(MissingEntryDifference original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public MissingSide get_Side();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Side(MissingSide value);
    [CompilerGeneratedAttribute]
public object get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(object value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(object value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MissingEntryDifference left, MissingEntryDifference right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MissingEntryDifference left, MissingEntryDifference right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Difference other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(MissingEntryDifference other);
    [CompilerGeneratedAttribute]
public virtual Difference <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BreadcrumbPair& Breadcrumb, MissingSide& Side, Object& Key, Object& Value);
}
public enum DeepEqual.MissingSide : Enum {
    public int value__;
    public static MissingSide Left;
    public static MissingSide Right;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DeepEqual.ObjectGraphCircularReferenceException : Exception {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private BreadcrumbPair <Breadcrumb>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Right>k__BackingField;
    [NullableAttribute("1")]
public BreadcrumbPair Breadcrumb { get; }
    public object Left { get; }
    public object Right { get; }
    [NullableContextAttribute("1")]
public ObjectGraphCircularReferenceException(string message, BreadcrumbPair breadcrumb, object left, object right);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public BreadcrumbPair get_Breadcrumb();
    [CompilerGeneratedAttribute]
public object get_Left();
    [CompilerGeneratedAttribute]
public object get_Right();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.PropertyPair : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyReader <Left>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyReader <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeftName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RightName>k__BackingField;
    [NullableAttribute("2")]
public PropertyReader Left { get; }
    [NullableAttribute("2")]
public PropertyReader Right { get; }
    public string LeftName { get; }
    public string RightName { get; }
    public PropertyPair(PropertyReader left, PropertyReader right, string leftName, string rightName);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PropertyReader get_Left();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PropertyReader get_Right();
    [CompilerGeneratedAttribute]
public string get_LeftName();
    [CompilerGeneratedAttribute]
public string get_RightName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.PropertyReader : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, object> <Read>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> Read { get; public set; }
    public Type DeclaringType { get; public set; }
    public PropertyReader(string Name, Func`2<object, object> Read, Type DeclaringType);
    [CompilerGeneratedAttribute]
protected PropertyReader(PropertyReader original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Read();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Read(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(PropertyReader left, PropertyReader right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(PropertyReader left, PropertyReader right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(PropertyReader other);
    [CompilerGeneratedAttribute]
public virtual PropertyReader <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, Func`2& Read, Type& DeclaringType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DeepEqual.ReflectionCache : object {
    private static ConcurrentDictionary`2<Type, Type> EnumerationTypeCache;
    private static ConcurrentDictionary`2<Type, bool> IsListCache;
    private static ConcurrentDictionary`2<Type, bool> IsSetCache;
    private static ConcurrentDictionary`2<Type, bool> IsDictionaryCache;
    private static ConcurrentDictionary`2<Type, PropertyReader[]> PropertyCache;
    private static ConcurrentDictionary`2<Type, bool> ValueTypeWithReferenceFieldsCache;
    private static ReflectionCache();
    public static void ClearCache();
    internal static Type GetEnumerationType(Type type);
    private static Type GetEnumerationTypeImpl(Type type);
    internal static bool IsListType(Type type);
    private static bool IsListTypeImpl(Type type);
    internal static bool IsSetType(Type type);
    private static bool IsSetTypeImpl(Type type);
    internal static bool IsDictionaryType(Type type);
    private static bool IsDictionaryTypeImpl(Type type);
    internal static bool IsValueType(Type type);
    internal static bool IsValueTypeWithReferenceFields(Type type);
    private static bool IsValueTypeWithReferenceFieldsImpl(Type type);
    public static void CachePrivatePropertiesOfTypes(IEnumerable`1<Type> types);
    public static PropertyReader[] GetProperties(object obj);
    private static PropertyReader[] GetDynamicProperties(IDynamicMetaObjectProvider provider);
    private static PropertyReader[] GetPropertiesAndFields(Type type, CacheBehaviour behaviour);
    private static IEnumerable`1<PropertyReader> GetProperties(Type type, CacheBehaviour behaviour);
    private static IEnumerable`1<PropertyInfo> RemoveHiddenProperties(IEnumerable`1<PropertyInfo> properties);
    private static IEnumerable`1<PropertyInfo> ExcludeIndexProperties(IEnumerable`1<PropertyInfo> properties);
    private static IEnumerable`1<PropertyInfo> ExcludeSetOnlyProperties(IEnumerable`1<PropertyInfo> properties);
    private static IEnumerable`1<PropertyReader> GetFields(Type type, CacheBehaviour behaviour);
    private static IEnumerable`1<FieldInfo> RemoveHiddenFields(IEnumerable`1<FieldInfo> properties);
    private static BindingFlags GetBindingFlags(CacheBehaviour behaviour);
    [CompilerGeneratedAttribute]
internal static bool <IsSetTypeImpl>g__isSet|12_0(Type t);
    [CompilerGeneratedAttribute]
internal static PropertyReader[] <CachePrivatePropertiesOfTypes>g__GetAllProperties|18_0(Type t);
    [CompilerGeneratedAttribute]
internal static PropertyReader[] <GetProperties>g__getPublicProperties|19_0(Type t);
}
public class DeepEqual.SetComparison : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanCompare(IComparisonContext context, Type leftType, Type rightType);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<ComparisonResult, IComparisonContext> Compare(IComparisonContext context, object leftValue, object rightValue);
    [NullableContextAttribute("1")]
private ValueTuple`2<ComparisonResult, IComparisonContext> SetsEqual(IComparisonContext context, Object[] leftSet, Object[] rightSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.SetDifference : Difference {
    [CompilerGeneratedAttribute]
private ImmutableList`1<object> <MissingInLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<object> <MissingInRight>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ImmutableList`1<object> MissingInLeft { get; public set; }
    public ImmutableList`1<object> MissingInRight { get; public set; }
    public SetDifference(BreadcrumbPair Breadcrumb, ImmutableList`1<object> MissingInLeft, ImmutableList`1<object> MissingInRight);
    public SetDifference(BreadcrumbPair breadcrumb, IEnumerable`1<object> missingInLeft, IEnumerable`1<object> missingInRight);
    [CompilerGeneratedAttribute]
protected SetDifference(SetDifference original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ImmutableList`1<object> get_MissingInLeft();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MissingInLeft(ImmutableList`1<object> value);
    [CompilerGeneratedAttribute]
public ImmutableList`1<object> get_MissingInRight();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MissingInRight(ImmutableList`1<object> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SetDifference left, SetDifference right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SetDifference left, SetDifference right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Difference other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SetDifference other);
    [CompilerGeneratedAttribute]
public virtual Difference <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BreadcrumbPair& Breadcrumb, ImmutableList`1& MissingInLeft, ImmutableList`1& MissingInRight);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.Syntax.CompareSyntax`2 : object {
    [CompilerGeneratedAttribute]
private TLeft <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private TRight <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparisonBuilder`1<ComparisonBuilder> <Builder>k__BackingField;
    public TLeft Left { get; public set; }
    public TRight Right { get; public set; }
    internal IComparisonBuilder`1<ComparisonBuilder> Builder { get; internal set; }
    public CompareSyntax`2(TLeft left, TRight right);
    [CompilerGeneratedAttribute]
public TLeft get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(TLeft value);
    [CompilerGeneratedAttribute]
public TRight get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(TRight value);
    [CompilerGeneratedAttribute]
internal IComparisonBuilder`1<ComparisonBuilder> get_Builder();
    [CompilerGeneratedAttribute]
internal void set_Builder(IComparisonBuilder`1<ComparisonBuilder> value);
    [NullableContextAttribute("2")]
public sealed virtual CompareSyntax`2<TLeft, TRight> MapProperty(Expression`1<Func`2<A, object>> left, Expression`1<Func`2<B, object>> right);
    public CompareSyntax`2<TLeft, TRight> IgnoreLeftProperty(Expression`1<Func`2<TLeft, object>> property);
    public CompareSyntax`2<TLeft, TRight> IgnoreRightProperty(Expression`1<Func`2<TRight, object>> property);
    public sealed virtual CompareSyntax`2<TLeft, TRight> IgnorePropertyIfMissing(Expression`1<Func`2<T, object>> property);
    public sealed virtual CompareSyntax`2<TLeft, TRight> IgnoreProperty(Expression`1<Func`2<T, object>> property);
    public sealed virtual CompareSyntax`2<TLeft, TRight> IgnoreProperty(Func`2<PropertyPair, bool> func);
    public sealed virtual CompareSyntax`2<TLeft, TRight> SkipDefault();
    public sealed virtual CompareSyntax`2<TLeft, TRight> WithCustomComparison(IComparison comparison);
    public sealed virtual CompareSyntax`2<TLeft, TRight> WithCustomFormatter(IDifferenceFormatter formatter);
    public sealed virtual CompareSyntax`2<TLeft, TRight> IgnoreUnmatchedProperties();
    public sealed virtual CompareSyntax`2<TLeft, TRight> ExposeInternalsOf();
    public sealed virtual CompareSyntax`2<TLeft, TRight> ExposeInternalsOf(Type[] types);
    public sealed virtual CompareSyntax`2<TLeft, TRight> WithFloatingPointTolerance(double doubleTolerance, float singleTolerance);
    public sealed virtual CompareSyntax`2<TLeft, TRight> IgnoreCircularReferences();
    public bool Compare();
    public void Assert();
    private sealed virtual override IComparison DeepEqual.IComparisonBuilder<DeepEqual.Syntax.CompareSyntax<TLeft,TRight>>.Create();
    private sealed virtual override IDifferenceFormatterFactory DeepEqual.IComparisonBuilder<DeepEqual.Syntax.CompareSyntax<TLeft,TRight>>.GetFormatterFactory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DeepEqual.Syntax.DeepEqualException : Exception {
    [CompilerGeneratedAttribute]
private IComparisonContext <Context>k__BackingField;
    public IComparisonContext Context { get; public set; }
    public DeepEqualException(string message, IComparisonContext context);
    [CompilerGeneratedAttribute]
public IComparisonContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(IComparisonContext value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class DeepEqual.Syntax.ObjectExtensions : object {
    [ExtensionAttribute]
public static bool IsDeepEqual(object actual, object expected);
    [ExtensionAttribute]
public static bool IsDeepEqual(object actual, object expected, IComparison comparison);
    [ExtensionAttribute]
public static void ShouldDeepEqual(object actual, object expected);
    [ExtensionAttribute]
public static void ShouldDeepEqual(object actual, object expected, IComparison comparison);
    [ExtensionAttribute]
public static void ShouldDeepEqual(object actual, object expected, IComparison comparison, IDifferenceFormatterFactory formatterFactory);
    [ExtensionAttribute]
public static CompareSyntax`2<TActual, TExpected> WithDeepEqual(TActual actual, TExpected expected);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
