internal class DelegateDecompiler.Address : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; public set; }
    public Type Type { get; }
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    public Type get_Type();
    public static Expression op_Implicit(Address address);
    public static Address op_Implicit(Expression expression);
    public Address Clone(IDictionary`2<Address, Address> map);
    public static Address Merge(Expression test, Address address1, Address address2, IDictionary`2<Tuple`2<Address, Address>, Address> map);
}
[AttributeUsageAttribute("192")]
public class DelegateDecompiler.ComputedAttribute : Attribute {
}
[ExtensionAttribute]
public static class DelegateDecompiler.ComputedExtension : object {
    [ExtensionAttribute]
public static T Computed(T t);
}
public abstract class DelegateDecompiler.Configuration : object {
    private static object locker;
    private static Configuration modreq(System.Runtime.CompilerServices.IsVolatile) instance;
    internal static Configuration Instance { get; }
    private static Configuration();
    internal static Configuration get_Instance();
    public static void Configure(Configuration cfg);
    public abstract virtual bool ShouldDecompile(MemberInfo memberInfo);
    public virtual void RegisterDecompileableMember(MemberInfo property);
}
[AttributeUsageAttribute("192")]
public class DelegateDecompiler.DecompileAttribute : Attribute {
}
public class DelegateDecompiler.DecompiledQueryable`1 : object {
    private IQueryable`1<T> inner;
    private IQueryProvider provider;
    public Expression Expression { get; }
    public Type ElementType { get; }
    public IQueryProvider Provider { get; }
    protected internal DecompiledQueryable`1(IQueryProvider provider, IQueryable`1<T> inner);
    public sealed virtual Expression get_Expression();
    public sealed virtual Type get_ElementType();
    public sealed virtual IQueryProvider get_Provider();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public virtual string ToString();
}
public class DelegateDecompiler.DecompiledQueryProvider : object {
    private static MethodInfo OpenGenericCreateQueryMethod;
    [CompilerGeneratedAttribute]
private IQueryProvider <Inner>k__BackingField;
    protected IQueryProvider Inner { get; }
    protected internal DecompiledQueryProvider(IQueryProvider inner);
    private static DecompiledQueryProvider();
    [CompilerGeneratedAttribute]
protected IQueryProvider get_Inner();
    public virtual IQueryable CreateQuery(Expression expression);
    public virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
}
public class DelegateDecompiler.DecompileExpressionVisitor : ExpressionVisitor {
    public static Expression Decompile(Expression expression);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual bool ShouldDecompile(MemberInfo methodInfo);
    private Expression Decompile(MethodInfo method, Expression instance, IList`1<Expression> arguments);
    private static Expression UnwrapUpcast(Expression instance);
}
[ExtensionAttribute]
public static class DelegateDecompiler.DecompileExtensions : object {
    private static ConcurrentDictionary`2<Tuple`2<Type, MethodInfo>, Lazy`1<LambdaExpression>> Cache;
    private static Func`2<Tuple`2<Type, MethodInfo>, Lazy`1<LambdaExpression>> DecompileDelegate;
    private static DecompileExtensions();
    [ExtensionAttribute]
public static LambdaExpression Decompile(Delegate delegate);
    [ExtensionAttribute]
public static LambdaExpression Decompile(MethodInfo method);
    [ExtensionAttribute]
public static LambdaExpression Decompile(MethodInfo method, Type declaringType);
    [ExtensionAttribute]
public static IQueryable`1<T> Decompile(IQueryable`1<T> self);
    [ExtensionAttribute]
public static IQueryable Decompile(IQueryable self);
}
public class DelegateDecompiler.DefaultConfiguration : Configuration {
    private HashSet`1<MemberInfo> computedMembers;
    public virtual bool ShouldDecompile(MemberInfo memberInfo);
    public virtual void RegisterDecompileableMember(MemberInfo property);
}
[ExtensionAttribute]
public static class DelegateDecompiler.ExpressionExtensions : object {
    [ExtensionAttribute]
public static Expression Decompile(Expression expression);
    [ExtensionAttribute]
public static Expression Optimize(Expression expression);
    [ExtensionAttribute]
public static T Evaluate(Expression expression);
}
public static class DelegateDecompiler.ExpressionHelper : object {
    public static Expression Default(Type type);
    public static object GetDefaultValue(Type type);
}
[ExtensionAttribute]
internal static class DelegateDecompiler.MemberExtensions : object {
    [ExtensionAttribute]
public static Type FieldOrPropertyType(MemberInfo member);
}
public static class DelegateDecompiler.MethodBodyDecompiler : object {
    public static LambdaExpression Decompile(MethodInfo method);
    public static LambdaExpression Decompile(MethodInfo method, Type declaringType);
    private static Expression DecompileConcrete(MethodInfo method, IList`1<Address> args);
    private static Expression DecompileConcrete(MethodInfo method, IList`1<Address> args, IDictionary`2<MethodInfo, Expression> cache);
    private static Expression DecompileOverridable(Type declaringType, MethodInfo method, IList`1<Address> args);
    private static bool IsAssignableFrom(Type p, Type c);
    private static IEnumerable`1<Type> SafeGetTypes(Assembly a);
    private static Expression GetDefaultImplementation(Type declaringType, MethodInfo method, IList`1<Address> args, IDictionary`2<MethodInfo, Expression> calls);
    private static MethodInfo GetDeclaredMethod(Type type, MethodInfo method);
}
internal class DelegateDecompiler.OptimizeExpressionVisitor : ExpressionVisitor {
    private Dictionary`2<Expression, Expression> expressionsCache;
    protected virtual Expression VisitNew(NewExpression node);
    public virtual Expression Visit(Expression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    private static bool TryConvert(ConstantExpression constant, BinaryExpression left, Expression right, BinaryExpression& result, bool isLeft);
    private static bool TryConvertOrElse(Expression hasValue, BinaryExpression getValueOrDefault, BinaryExpression& result);
    private static bool TryConvertAndAlso(Expression hasValue, BinaryExpression getValueOrDefault, BinaryExpression& result);
    private static bool TryConvert2(BinaryExpression hasValue, BinaryExpression getValueOrDefault, BinaryExpression& result);
    private static bool TryConvert1(Expression hasValue, BinaryExpression getValueOrDefault, BinaryExpression& result);
    private static Expression ConvertToNullable(Expression expression);
    private static Expression UnwrapConvertToNullable(Expression expression);
    private static bool ExtractNullableArgument(Expression hasValue, Expression getValueOrDefault, Expression& expression);
    private static bool IsCoalesce(Expression hasValue, Expression getValueOrDefault, Expression& expression);
    private static bool IsHasValue(Expression expression, MemberExpression& property);
    private static bool IsGetValueOrDefault(Expression expression, MethodCallExpression& method);
    private static bool IsGetValueOrDefault(MethodCallExpression method);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    private static bool Invert(BinaryExpression& expression);
    public static Expression Optimize(Expression expression);
}
internal class DelegateDecompiler.Processor : object {
    private static string cachedAnonymousMethodDelegate;
    private static string cachedAnonymousMethodDelegateRoslyn;
    private static MethodInfo StringConcat;
    private static ConcurrentDictionary`2<MethodInfo, LambdaExpression> AnonymousDelegatesCache;
    private Stack`1<ProcessorState> states;
    private static Processor();
    public static Expression Process(VariableInfo[] locals, IList`1<Address> args, Instruction instruction, Type returnType);
    private Expression Process();
    private static void LdFld(ProcessorState state, Address instance);
    private static LambdaExpression DecompileLambdaExpression(MethodInfo method, Func`1<Expression> this);
    private static Type[] GetDelegateParameterTypes(MethodInfo m);
    private static object GetRuntimeHandle(object operand);
    private static bool IsCachedAnonymousMethodDelegate(FieldInfo field);
    private static BinaryExpression MakeBinaryExpression(Address left, Address right, ExpressionType expressionType);
    private static UnaryExpression MakeUnaryExpression(Expression operand, ExpressionType expressionType);
    private static Expression Box(Expression expression, Type type);
    private static Expression ConvertEnumExpressionToUnderlyingType(Expression expression);
    private Instruction ConditionalBranch(ProcessorState state, Func`2<Expression, Expression> condition);
    private static Instruction GetJointPoint(Instruction instruction);
    private static Stack`1<Instruction> FollowGraph(Instruction instruction);
    private static Instruction GetNextInstruction(Instruction instruction);
    internal static Expression AdjustType(Expression expression, Type type);
    private static Expression AdjustBooleanConstant(Expression expression, Type type);
    private static void StElem(ProcessorState state);
    private static IEnumerable`1<Expression> CreateArrayInitExpressions(Type elementType, NewArrayExpression newArray, Expression valueExpression, Expression indexExpression);
    private static void LdC(ProcessorState state, int i);
    private static void LdC(ProcessorState state, long i);
    private static void LdC(ProcessorState state, float i);
    private static void LdC(ProcessorState state, double i);
    private static void Call(ProcessorState state, MethodInfo m);
    private static Expression BuildAssignment(Expression instance, MemberInfo member, Expression value, Boolean& push);
    private static Expression[] GetArguments(ProcessorState state, MethodBase m);
    private static Expression[] GetArguments(ProcessorState state, MethodBase m, Address[]& addresses);
    private static Expression BuildMethodCallExpression(MethodInfo m, Address instance, Expression[] arguments, Address[] addresses);
    private static bool TryParseOperator(MethodInfo m, ExpressionType& type);
    private static IList`1<Expression> GetExpressionsForStringConcat(Expression[] arguments);
    private static void LdLoc(ProcessorState state, int index);
    private static void StLoc(ProcessorState state, int index);
    private static void LdArg(ProcessorState state, int index);
}
public class DelegateDecompiler.ReplaceExpressionVisitor : ExpressionVisitor {
    private IDictionary`2<Expression, Expression> replacements;
    public ReplaceExpressionVisitor(IDictionary`2<Expression, Expression> replacements);
    public virtual Expression Visit(Expression node);
}
internal class DelegateDecompiler.TransparentIdentifierRemovingExpressionVisitor : ExpressionVisitor {
    public static Expression RemoveTransparentIdentifiers(Expression expression);
    protected virtual Expression VisitMember(MemberExpression node);
    private static IEnumerable`1<MemberAssignment> GetMemberBindingsCreatedByExpression(Expression expression);
    private static bool Match(MemberInfo a, MemberInfo b);
}
[ExtensionAttribute]
internal static class DelegateDecompiler.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> SelfAndBaseTypes(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> BaseTypes(Type type);
    [ExtensionAttribute]
public static Type SafeGetGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static Type MakeGenericTypeFromClosedParentArguments(Type type, Type[] genericArguments);
}
internal static class DelegateDecompiler.TypeHierarchy : object {
    public static IEnumerable`1<Type> Traverse(Type root, IEnumerable`1<Type> descendants);
    private static void Traverse(ICollection`1<Type> result, HashSet`1<Type> usher, Type type, ILookup`2<Type, Type> children);
    private static IEnumerable`1<Type> BuildChildren(Type type, ILookup`2<Type, Type> children);
    private static Type TryMakeGenericType(Type c, Type[] genericArguments);
}
internal class DelegateDecompiler.VariableInfo : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    public Type Type { get; public set; }
    public Address Address { get; public set; }
    public VariableInfo(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public Address get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Address value);
}
[CompilerGeneratedAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class GitVersionInformation : object {
    public static string Major;
    public static string Minor;
    public static string Patch;
    public static string PreReleaseTag;
    public static string PreReleaseTagWithDash;
    public static string PreReleaseLabel;
    public static string PreReleaseLabelWithDash;
    public static string PreReleaseNumber;
    public static string WeightedPreReleaseNumber;
    public static string BuildMetaData;
    public static string BuildMetaDataPadded;
    public static string FullBuildMetaData;
    public static string MajorMinorPatch;
    public static string SemVer;
    public static string LegacySemVer;
    public static string LegacySemVerPadded;
    public static string AssemblySemVer;
    public static string AssemblySemFileVer;
    public static string FullSemVer;
    public static string InformationalVersion;
    public static string BranchName;
    public static string EscapedBranchName;
    public static string Sha;
    public static string ShortSha;
    public static string NuGetVersionV2;
    public static string NuGetVersion;
    public static string NuGetPreReleaseTagV2;
    public static string NuGetPreReleaseTag;
    public static string VersionSourceSha;
    public static string CommitsSinceVersionSource;
    public static string CommitsSinceVersionSourcePadded;
    public static string UncommittedChanges;
    public static string CommitDate;
    private static GitVersionInformation();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
