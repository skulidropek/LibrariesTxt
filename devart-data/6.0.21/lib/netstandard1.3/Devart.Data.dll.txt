[CompilerGeneratedAttribute]
internal class a : object {
    internal static a a;
    internal static b b;
    internal static c c;
    internal static a d;
}
internal class Devart.Common.a : Token {
    private int a;
    private int b;
    public a(TokenType A_0, object A_1, int A_2, int A_3, int A_4, int A_5, int A_6, int A_7, int A_8);
    public virtual override int a();
    public virtual override int b();
    public virtual override int c();
}
[AttributeUsageAttribute("644")]
internal class Devart.Common.b : DescriptionAttribute {
    private static bool a;
    private static List`1<ResourceManager> b;
    private bool c;
    public b(string A_0);
    private static b();
    public virtual override string a();
}
internal static class Devart.Common.c : object {
    private static bool a;
    private static double b;
    private static double c;
    private static c();
    private static void b();
    public static long a();
    public static double a(long A_0);
    private static short b(Int64& A_0);
    private static short a(Int64& A_0);
    private static short QueryPerformanceCounter(Int64& A_0);
    private static short QueryPerformanceFrequency(Int64& A_0);
}
public class Devart.Common.CheckInlineCommentFollowedCharHandler : MulticastDelegate {
    public CheckInlineCommentFollowedCharHandler(object object, IntPtr method);
    public virtual bool Invoke(string inlineComment, char ch);
    public virtual IAsyncResult BeginInvoke(string inlineComment, char ch, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Devart.Common.CommonLexem : object {
    public static int StringQuote;
    public static int IdentQuote;
    public static int IdentQuoteBegin;
    public static int IdentQuoteEnd;
    public static int InlineComment;
    public static int CommentBegin;
    public static int CommentEnd;
    public static int IdentPrefix;
    public static int CommentExtBegin;
    public static Hashtable symbols;
    public static Hashtable keywords;
    private static CommonLexem();
}
public enum Devart.Common.ConnectionLostCause : Enum {
    public int value__;
    public static ConnectionLostCause Connect;
    public static ConnectionLostCause Execute;
    public static ConnectionLostCause Prepare;
    public static ConnectionLostCause StartTransaction;
    public static ConnectionLostCause Read;
}
public enum Devart.Common.ConnectionLostContext : Enum {
    public int value__;
    public static ConnectionLostContext None;
    public static ConnectionLostContext HasPrepared;
    public static ConnectionLostContext InTransaction;
    public static ConnectionLostContext InFetch;
}
public class Devart.Common.ConnectionLostEventArgs : EventArgs {
    private object a;
    private ConnectionLostCause b;
    private int c;
    private RetryMode d;
    private ConnectionLostContext e;
    public object Component { get; }
    public ConnectionLostCause Cause { get; }
    public int AttemptNumber { get; }
    public RetryMode RetryMode { get; public set; }
    public ConnectionLostContext Context { get; public set; }
    public ConnectionLostEventArgs(object component, ConnectionLostCause cause, ConnectionLostContext context, RetryMode retryMode, int attemptNumber);
    public object get_Component();
    public ConnectionLostCause get_Cause();
    public int get_AttemptNumber();
    public RetryMode get_RetryMode();
    public void set_RetryMode(RetryMode value);
    public ConnectionLostContext get_Context();
    public void set_Context(ConnectionLostContext value);
}
public class Devart.Common.ConnectionLostEventHandler : MulticastDelegate {
    public ConnectionLostEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectionLostEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectionLostEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Devart.Common.d : object {
    private p a;
    private Thread b;
    private AutoResetEvent c;
    private LinkedList`1<a> d;
    private bool e;
    private object f;
    private Stack`1<int> g;
    private string h;
    private int i;
    private int j;
    private int k;
    private string l;
    public sealed virtual override void b();
    public void a(o A_0, MonitorTracePoint A_1, bool A_2);
    private void a();
    internal int c();
    internal void a(int A_0);
    public string d();
    public void a(string A_0);
    public string e();
    public void b(string A_0);
    public int f();
    public void b(int A_0);
    public int g();
    public void c(int A_0);
}
public abstract class Devart.Common.DbCommandBase : DbCommand {
    private string a;
    private int b;
    private CommandType c;
    private UpdateRowSource d;
    private bool e;
    private bool f;
    private IDisposable g;
    private string h;
    protected WeakReference weakDataReader;
    public static int DefaultCommandTimeout;
    private a i;
    private a j;
    private static object k;
    [CompilerGeneratedAttribute]
private ISite l;
    [MergablePropertyAttribute("False")]
[b("DbCommand_CommandText")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Data")]
public string CommandText { get; public set; }
    [CategoryAttribute("Data")]
[b("DbCommand_CommandTimeout")]
public int CommandTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[CategoryAttribute("Data")]
[b("DbCommand_CommandType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandType CommandType { get; public set; }
    [DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool DesignTimeVisible { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Update")]
[b("DbCommand_UpdatedRowSource")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    protected ILocalFailoverManager LocalFailoverManager { get; }
    [b("DbCommand_ParameterCheck")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
[CategoryAttribute("Behavior")]
public bool ParameterCheck { get; public set; }
    protected internal string Sql { get; }
    protected internal IDisposable Stmt { get; }
    protected internal bool IsPrepared { get; }
    protected internal bool HasOpenReader { get; }
    protected internal DbDataReader DataReader { get; }
    public ISite Site { get; public set; }
    internal a Events { get; }
    protected DbCommandBase(DbCommandBase from);
    private static DbCommandBase();
    protected void SaveParameter(DbParameter result);
    public virtual void Cancel();
    public virtual int ExecuteNonQuery();
    protected virtual void PropertyChanging();
    [EditorBrowsableAttribute("2")]
public virtual void ResetCommandTimeout();
    protected virtual bool ShouldSerializeCommandTimeout();
    public int GetRecordCount();
    protected virtual string GetRecordCountSql(string commandText);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    protected virtual void Dispose(bool disposing);
    protected abstract virtual void ParseSqlParameters(string sql);
    protected abstract virtual void DescribeProcedure(string name);
    protected abstract virtual void ClearParameters();
    protected internal void SetParameterCheck(bool parameterCheck);
    protected internal void CreateParameters();
    protected internal void UpdateParameters();
    protected virtual string CreateSql();
    internal string a();
    protected abstract virtual string CreateStoredProcSql(string name);
    protected abstract virtual void AddCommand();
    protected abstract virtual void RemoveCommand();
    protected abstract virtual void AddDataReader(DbDataReader reader);
    public virtual void Prepare();
    public void PrepareCore();
    protected virtual bool IsReadOnlyOperation(IDisposable stmt);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior, bool nonQuery);
    protected abstract virtual ILocalFailoverManager get_LocalFailoverManager();
    public DbDataReader ExecutePageReader(CommandBehavior behavior, int startRecord, int maxRecords);
    protected virtual DbDataReader ExecutePageReaderInternal(CommandBehavior behavior, int startRecord, int maxRecords);
    public virtual object ExecuteScalar();
    protected abstract virtual IDisposable InternalPrepare(bool implicitPrepare, int startRecord, int maxRecords);
    protected abstract virtual DbDataReader InternalExecute(CommandBehavior behavior, IDisposable stmt, int startRecord, int maxRecords);
    protected virtual DbDataReader InternalExecute(CommandBehavior behavior, IDisposable stmt, int startRecord, int maxRecords, bool nonQuery);
    protected virtual void UseLoadBalancing(bool ignoreBalancing);
    protected virtual void Unprepare();
    internal void b();
    private object AsyncExecuteReader(CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader();
    public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior);
    public DbDataReader EndExecuteReader(IAsyncResult result);
    private object a(CommandBehavior A_0);
    public IAsyncResult BeginExecuteNonQuery();
    public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    public int EndExecuteNonQuery(IAsyncResult result);
    public bool get_ParameterCheck();
    public void set_ParameterCheck(bool value);
    protected internal string get_Sql();
    protected internal IDisposable get_Stmt();
    protected internal bool get_IsPrepared();
    protected internal bool get_HasOpenReader();
    protected internal DbDataReader get_DataReader();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public sealed virtual ISite get_Site();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Site(ISite value);
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    internal a c();
    private void a(bool A_0);
    public DbCommandBase Clone();
    protected abstract virtual DbCommandBase InternalClone();
}
public class Devart.Common.DbConnectionStringBuilder : DbConnectionStringBuilder {
    protected string initializationCommandInternal;
    protected string runOnceCommandInternal;
    [CategoryAttribute("Provider Behaviour")]
[b("DbConnectionString_InitializationCommand")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Initialization Command")]
public string InitializationCommand { get; public set; }
    [CategoryAttribute("Provider Behaviour")]
[b("DbConnectionString_RunOnceCommand")]
[DisplayNameAttribute("Run Once Command")]
[RefreshPropertiesAttribute("1")]
public string RunOnceCommand { get; public set; }
    public bool IsFixedSize { get; }
    public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder, bool loginOnly);
    protected internal void ClearPropertyDescriptors();
    protected void SetValue(string keyword, bool value);
    protected void SetValue(string keyword, int value);
    protected void SetValue(string keyword, long value);
    protected void SetValue(string keyword, string value);
    private void a(string A_0, string A_1);
    public string get_InitializationCommand();
    public void set_InitializationCommand(string value);
    public string get_RunOnceCommand();
    public void set_RunOnceCommand(string value);
    public virtual bool get_IsFixedSize();
}
[DefaultMemberAttribute("Item")]
public abstract class Devart.Common.DbDataReaderBase : DbDataReader {
    private CommandBehavior a;
    private Hashtable b;
    protected bool closed;
    protected internal CommandBehavior CommandBehavior { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public bool EndOfData { get; }
    protected bool IsValidRow { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    protected DbDataReaderBase(CommandBehavior behavior);
    protected void AssertReaderHasColumns();
    protected void AssertReaderHasData();
    protected void AssertReaderIsOpen(string methodName);
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public bool GetBoolean(string name);
    public byte GetByte(string name);
    public long GetBytes(string name, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public char GetChar(string name);
    public long GetChars(string name, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public string GetDataTypeName(string name);
    public DateTime GetDateTime(string name);
    public DateTimeOffset GetDateTimeOffset(string name);
    public decimal GetDecimal(string name);
    public double GetDouble(string name);
    public Type GetFieldType(string name);
    public float GetFloat(string name);
    public Guid GetGuid(string name);
    public short GetInt16(string name);
    public int GetInt32(string name);
    public long GetInt64(string name);
    public Type GetProviderSpecificFieldType(string name);
    public object GetProviderSpecificValue(string name);
    public string GetString(string name);
    public object GetValue(string name);
    public bool IsDBNull(string name);
    protected bool IsCommandBehavior(CommandBehavior condition);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool NextResult();
    public virtual bool Read();
    protected internal CommandBehavior get_CommandBehavior();
    protected internal void SetCommandBehavior(CommandBehavior commandBehavior);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public abstract virtual bool get_EndOfData();
    protected abstract virtual bool get_IsValidRow();
    public virtual object get_Item(string name);
    public virtual object get_Item(int ordinal);
    public virtual int get_RecordsAffected();
    internal void a();
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
}
public abstract class Devart.Common.DbDump : object {
    private DbConnection a;
    private string b;
    private StringCollection c;
    private bool d;
    private bool e;
    private DumpMode f;
    private bool g;
    private a h;
    private a i;
    private static object j;
    [CompilerGeneratedAttribute]
private ISite k;
    public DbConnection Connection { get; public set; }
    public string Tables { get; public set; }
    public string DumpText { get; public set; }
    [b("DbDump_QuoteIdentifier")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool QuoteIdentifier { get; public set; }
    [DefaultValueAttribute("False")]
[b("DbDump_IncludeDrop")]
[CategoryAttribute("Options")]
public bool IncludeDrop { get; public set; }
    [RefreshPropertiesAttribute("2")]
[CategoryAttribute("Options")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[b("DbDump_Mode")]
public DumpMode Mode { get; public set; }
    [CategoryAttribute("Options")]
[b("DbDump_GenerateHeader")]
[DefaultValueAttribute("False")]
public bool GenerateHeader { get; public set; }
    protected Encoding Encoding { get; }
    protected StringCollection InnerTables { get; }
    protected bool BackupData { get; }
    protected bool BackupSchema { get; }
    public ISite Site { get; public set; }
    internal a Events { get; }
    private static DbDump();
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public virtual string get_Tables();
    public virtual void set_Tables(string value);
    public virtual string get_DumpText();
    public virtual void set_DumpText(string value);
    public bool get_QuoteIdentifier();
    public void set_QuoteIdentifier(bool value);
    public bool get_IncludeDrop();
    public void set_IncludeDrop(bool value);
    public DumpMode get_Mode();
    public void set_Mode(DumpMode value);
    public bool get_GenerateHeader();
    public void set_GenerateHeader(bool value);
    protected abstract virtual Encoding get_Encoding();
    protected StringCollection get_InnerTables();
    protected bool get_BackupData();
    protected bool get_BackupSchema();
    public void Backup();
    public void Backup(string fileName);
    public void Backup(Stream stream);
    public void Backup(TextWriter writer);
    public IAsyncResult BeginBackup();
    public IAsyncResult BeginBackup(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackup(string fileName);
    public IAsyncResult BeginBackup(string fileName, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackup(Stream stream);
    public IAsyncResult BeginBackup(Stream stream, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackup(TextWriter writer);
    public IAsyncResult BeginBackup(TextWriter writer, AsyncCallback callback, object stateObject);
    public void EndBackup(IAsyncResult result);
    public void BackupQuery(string query);
    public void BackupQuery(string query, string fileName);
    public void BackupQuery(string query, Stream stream);
    public void BackupQuery(string query, TextWriter writer);
    public IAsyncResult BeginBackupQuery(string query);
    public IAsyncResult BeginBackupQuery(string query, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackupQuery(string query, string fileName);
    public IAsyncResult BeginBackupQuery(string query, string fileName, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackupQuery(string query, Stream stream);
    public IAsyncResult BeginBackupQuery(string query, Stream stream, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackupQuery(string query, TextWriter writer);
    public IAsyncResult BeginBackupQuery(string query, TextWriter writer, AsyncCallback callback, object stateObject);
    public void EndBackupQuery(IAsyncResult result);
    public void Restore();
    public void Restore(string fileName);
    public void Restore(Stream stream);
    public void Restore(TextReader reader);
    public IAsyncResult BeginRestore();
    public IAsyncResult BeginRestore(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginRestore(string fileName);
    public IAsyncResult BeginRestore(string fileName, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginRestore(Stream stream);
    public IAsyncResult BeginRestore(Stream stream, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginRestore(TextReader reader);
    public IAsyncResult BeginRestore(TextReader reader, AsyncCallback callback, object stateObject);
    public void EndRestore(IAsyncResult result);
    protected abstract virtual void InternalBackup(TextWriter writer);
    protected abstract virtual void InternalBackupQuery(TextWriter writer, string query);
    protected abstract virtual void InternalRestore(TextReader reader);
    private void c();
    private void d(string A_0);
    private void b(Stream A_0);
    private void a(TextWriter A_0);
    private void c(string A_0);
    private void a(string A_0, string A_1);
    private void a(string A_0, Stream A_1);
    private void a(string A_0, TextWriter A_1);
    private void b();
    private void b(string A_0);
    private void a(Stream A_0);
    private void a(TextReader A_0);
    protected void CheckConnection();
    private string a();
    private void a(string A_0);
    private bool ShouldSerializeConnection();
    private void a(b A_0, Object[] A_1);
    private void a(IAsyncResult A_0);
    private void a(string A_0, bool A_1);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public sealed virtual ISite get_Site();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Site(ISite value);
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    internal a d();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
public abstract class Devart.Common.DbLoader : object {
    private DbConnection a;
    private string b;
    private DbLoaderColumnCollection c;
    protected static object errorEventKey;
    protected static object rowsCopiedEventKey;
    protected bool isOpened;
    protected int loaderBufferSize;
    private a d;
    private static object e;
    [CompilerGeneratedAttribute]
private ISite f;
    [MergablePropertyAttribute("False")]
public DbConnection Connection { get; public set; }
    [CategoryAttribute("Options")]
[b("DbLoader_BufferSize")]
[DefaultValueAttribute("262144")]
public int BufferSize { get; public set; }
    [b("DbLoader_TableName")]
[MergablePropertyAttribute("False")]
[RefreshPropertiesAttribute("2")]
[CategoryAttribute("Data")]
public string TableName { get; public set; }
    [CategoryAttribute("Data")]
[b("DbLoader_Columns")]
[DesignerSerializationVisibilityAttribute("2")]
[MergablePropertyAttribute("False")]
public DbLoaderColumnCollection Columns { get; }
    unknown object Item {public set; }
    unknown object Item {public set; }
    public ISite Site { get; public set; }
    internal a Events { get; }
    public DbLoader(string tableName);
    public DbLoader(string tableName, DbConnection connection);
    private static DbLoader();
    internal void a();
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public virtual string get_TableName();
    public virtual void set_TableName(string value);
    public DbLoaderColumnCollection get_Columns();
    public void SetValue(string name, object value);
    public void SetNull(int i);
    public void SetNull(string name);
    protected void CheckOpen();
    protected void CheckConnection();
    protected void CheckTableName();
    protected int GetColumnIndex(string name);
    public void LoadTable(IDataReader reader);
    private void a(IDataReader A_0);
    protected virtual void LoadTableInternal(IDataReader reader);
    protected abstract virtual string QuoteIfNeed(string name);
    protected abstract virtual string UnQuote(string name);
    public abstract virtual void Open();
    public abstract virtual void Close(bool sendData);
    public void Close();
    public abstract virtual void NextRow();
    public abstract virtual void CreateColumns();
    public abstract virtual void SetValue(int i, object value);
    public void set_Item(string columnName, object value);
    public void set_Item(int columnIndex, object value);
    protected abstract virtual DbLoaderColumnCollection InitColumns();
    protected abstract virtual DbLoaderColumn CreateColumn(string name, Type type);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public sealed virtual ISite get_Site();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Site(ISite value);
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    internal a b();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Devart.Common.DbLoaderColumn : object {
    private string a;
    private int b;
    private int c;
    private int d;
    public string Name { get; public set; }
    [DefaultValueAttribute("0")]
public int Size { get; public set; }
    [DefaultValueAttribute("0")]
public int Precision { get; public set; }
    [DefaultValueAttribute("0")]
public int Scale { get; public set; }
    public DbLoaderColumn(string name, int size, int precision, int scale);
    public string get_Name();
    public void set_Name(string value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual int get_Precision();
    public virtual void set_Precision(int value);
    public int get_Scale();
    public void set_Scale(int value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Devart.Common.DbLoaderColumnCollection : CollectionBase {
    public DbLoaderColumn Item { get; public set; }
    public DbLoaderColumn Item { get; public set; }
    public DbLoaderColumn get_Item(int index);
    public void set_Item(int index, DbLoaderColumn value);
    public DbLoaderColumn get_Item(string name);
    public void set_Item(string name, DbLoaderColumn value);
    public int Add(DbLoaderColumn value);
    public void Insert(int index, DbLoaderColumn value);
    public int IndexOf(DbLoaderColumn value);
    public int IndexOf(string name);
    public bool Contains(DbLoaderColumn value);
    public bool Contains(string name);
    public void Remove(DbLoaderColumn value);
    public void CopyTo(DbLoaderColumn[] array, int index);
    protected virtual void OnInsert(int index, object value);
    private int a(string A_0);
    private int a();
}
public abstract class Devart.Common.DbMonitor : object {
    private bool a;
    private bool b;
    private string c;
    private bool d;
    private static Dictionary`2<int, long> e;
    private static d f;
    [CompilerGeneratedAttribute]
private MonitorEventHandler g;
    [CompilerGeneratedAttribute]
private MonitorEventFilter h;
    private static string i;
    private static string j;
    private static string k;
    private static string l;
    private static string m;
    private static string n;
    private static string o;
    private static string p;
    private static string q;
    private static string r;
    private static string s;
    private static string t;
    private static string u;
    private static string v;
    private static string w;
    private static string x;
    private static string y;
    private static string z;
    private static string aa;
    private static string ab;
    private a ac;
    private static object ad;
    [CompilerGeneratedAttribute]
private ISite ae;
    protected string ProductName { get; }
    [b("DbMonitor_IsActive")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool IsActive { get; public set; }
    [b("DbMonitor_UseIdeOutput")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool UseIdeOutput { get; public set; }
    [DefaultValueAttribute("localhost")]
[b("DbMonitor_Host")]
public string Host { get; public set; }
    [DefaultValueAttribute("1000")]
[b("DbMonitor_Port")]
public int Port { get; public set; }
    [b("DbMonitor_UseApp")]
[DefaultValueAttribute("True")]
public bool UseApp { get; public set; }
    [DefaultValueAttribute("1000")]
[b("DbMonitor_EventQueueLimit")]
public int EventQueueLimit { get; public set; }
    [CategoryAttribute("Behavior")]
[b("DbMonitor_Filter")]
public MonitorEventFilter Filter { get; public set; }
    [b("DbMonitor_SendCallStack")]
public bool SendCallStack { get; public set; }
    protected bool DbMonitorAppAvailable { get; }
    public ISite Site { get; public set; }
    internal a Events { get; }
    private static DbMonitor();
    private sealed virtual override void System.IDisposable.Dispose();
    private void b();
    protected abstract virtual string get_ProductName();
    internal void a(IDbDataParameter A_0, String& A_1, String& A_2, String& A_3, String& A_4);
    private static void a(DbMonitor A_0, object A_1, MonitorEventArgs A_2);
    private static void a(DbMonitor A_0, object A_1, MonitorEventArgs A_2, bool A_3);
    protected static void OnPoolManagerCreate(DbMonitor monitor, MonitorTracePoint tracePoint, object sender);
    protected static void OnPoolGroupCreate(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, string connectionString);
    protected static void OnConnect(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, string connectionString, bool pooled);
    protected internal static void OnDisconnect(DbMonitor monitor, MonitorTracePoint tracePoint, object sender);
    protected static void OnTakeFromPool(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender, string connectionString, object dbConnectionPool);
    private static void a(DbMonitor A_0, object A_1, object A_2, string A_3, string A_4);
    protected static void OnReturnToPool(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, object dbConnectionPool, string connectionString);
    protected static void OnActivate(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender, string connectionString);
    protected static void OnDeactivate(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, string connectionString);
    protected internal static void OnExecute(DbMonitor monitor, MonitorTracePoint tracePoint, IDbCommand sender, string sql, int rowsAffected);
    protected internal static void OnPrepare(DbMonitor monitor, MonitorTracePoint tracePoint, IDbCommand sender, string sql);
    protected internal static void OnBeginLocalTransaction(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnBeginDistributedTransaction(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnBeginTransactionScopeLocalTransaction(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnPrepareCommit(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnCommit(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnRollback(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnError(DbMonitor monitor, Exception e, object sender);
    protected internal static void OnCustomAction(DbMonitor monitor, MonitorTracePoint tracePoint, string description, object sender);
    protected static void OnCreate(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, bool isParentMessage);
    private string a(object A_0, String[] A_1);
    private String[] a();
    private static string a(MethodBase A_0);
    private static string a(Type A_0);
    private static void a(object A_0);
    private static double a(object A_0, MonitorTracePoint A_1);
    protected void OnTraceEvent(object sender, MonitorEventArgs e, bool parentMessage);
    internal void c();
    private o a(object A_0, MonitorEventArgs A_1);
    private void a(MonitorTracePoint A_0, o A_1, bool A_2);
    protected virtual object GetParentObject(object sender);
    protected abstract virtual string GetObjectName(object obj);
    protected abstract virtual int GetPoolGroupConnectionCount(object dbConnectionPool);
    protected virtual void GetParameterInfo(IDbDataParameter parameter, String& name, String& dbType, String& direction, String& value);
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
    protected void SetMonitorActive(bool value);
    public bool get_UseIdeOutput();
    public void set_UseIdeOutput(bool value);
    public string get_Host();
    public void set_Host(string value);
    public int get_Port();
    public void set_Port(int value);
    public bool get_UseApp();
    public void set_UseApp(bool value);
    public int get_EventQueueLimit();
    public void set_EventQueueLimit(int value);
    [CompilerGeneratedAttribute]
public void add_TraceEvent(MonitorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TraceEvent(MonitorEventHandler value);
    [CompilerGeneratedAttribute]
public MonitorEventFilter get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(MonitorEventFilter value);
    protected bool HasFilter(MonitorEventFilter filter);
    public bool get_SendCallStack();
    public void set_SendCallStack(bool value);
    protected abstract virtual bool get_DbMonitorAppAvailable();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public sealed virtual ISite get_Site();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Site(ISite value);
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    internal a d();
    public void Dispose();
    protected void Dispose(bool disposing);
}
public abstract class Devart.Common.DbParameterBase : DbParameter {
    private object a;
    private ParameterDirection b;
    private bool c;
    private string d;
    private object e;
    private int f;
    private string g;
    private bool h;
    private DataRowVersion i;
    private object j;
    protected object CoercedValue { get; protected set; }
    [CategoryAttribute("Data")]
[b("DataParameterdirection")]
[RefreshPropertiesAttribute("1")]
public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    [b("DataParameterparameterName")]
[CategoryAttribute("DataCategory_Data")]
public string ParameterName { get; public set; }
    [CategoryAttribute("DataCategory_Data")]
[b("DbDataParametersize")]
public int Size { get; public set; }
    [b("DataParametersourceColumn")]
[CategoryAttribute("DataCategory_Update")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [CategoryAttribute("DataCategory_Update")]
[b("DataParametersourceVersion")]
public DataRowVersion SourceVersion { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[b("DataParameter_Value")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("DataCategory_Data")]
public object Value { get; public set; }
    protected DbParameterBase(DbParameterBase source);
    internal object a(object A_0, object A_1);
    public void CopyTo(DbParameter destination);
    private void a(DbParameterBase A_0);
    protected virtual void PropertyChanging();
    internal void ResetParent();
    protected void ResetSize();
    protected bool ShouldSerializeSize();
    public virtual string ToString();
    protected virtual byte ValuePrecision(object value);
    protected virtual byte ValueScale(object value);
    protected virtual int ValueSize(object value);
    protected object get_CoercedValue();
    protected void set_CoercedValue(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public DataRowVersion get_SourceVersion();
    public void set_SourceVersion(DataRowVersion value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public DbParameterBase Clone();
    protected abstract virtual DbParameterBase InternalClone();
}
public abstract class Devart.Common.DbParameterBaseCollection : DbParameterCollection {
    private ArrayList a;
    public int Count { get; }
    private ArrayList InnerList { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    protected Type ItemType { get; }
    protected string ParameterNamePrefix { get; }
    public object SyncRoot { get; }
    protected DbCommandBase Parent { get; }
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    protected int CheckName(string parameterName);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual bool Contains(string value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string name);
    public virtual int IndexOf(object value);
    public virtual int IndexOf(string parameterName);
    protected internal static int IndexOf(IEnumerable items, string parameterName);
    public virtual void Insert(int index, object value);
    protected virtual void OnChange();
    private void b(int A_0);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    private void a(int A_0);
    private void a(int A_0, object A_1);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string name, DbParameter value);
    protected virtual void SetParameterInParameterCheckMode(int index, DbParameter value);
    protected virtual void Validate(int index, object value);
    protected virtual void ValidateType(object value);
    public virtual int get_Count();
    private ArrayList a();
    public bool get_IsFixedSize();
    public bool get_IsReadOnly();
    public bool get_IsSynchronized();
    protected abstract virtual Type get_ItemType();
    protected virtual string get_ParameterNamePrefix();
    public virtual object get_SyncRoot();
    protected abstract virtual DbCommandBase get_Parent();
}
public class Devart.Common.DbProviderException : Exception {
    protected DbProviderException(string message);
    protected DbProviderException(string message, Exception innerException);
    public virtual string ToString();
}
public abstract class Devart.Common.DbScript : object {
    protected Lexer lexer;
    private SqlStatementCollection a;
    private bool b;
    private IDbConnection c;
    private int d;
    internal UInt32 e;
    private StreamReader f;
    private int g;
    private static int h;
    protected bool commandTimeoutChanged;
    private IDbCommand i;
    [CompilerGeneratedAttribute]
private ScriptErrorEventHandler j;
    [CompilerGeneratedAttribute]
private ScriptProgressEventHandler k;
    private a l;
    private static object m;
    [CompilerGeneratedAttribute]
private ISite n;
    [MergablePropertyAttribute("False")]
public IDbConnection Connection { get; public set; }
    [MergablePropertyAttribute("False")]
public string ScriptText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlStatementCollection Statements { get; }
    [b("DbCommand_CommandTimeout")]
[CategoryAttribute("Data")]
[DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    public ISite Site { get; public set; }
    internal a Events { get; }
    protected DbScript(Lexer lexer);
    private static DbScript();
    private void a();
    public void Execute();
    public void Open(Stream stream);
    public void Open(string fileName);
    public void Open(TextReader reader);
    public bool ExecuteNext(IDataReader& reader);
    private bool a(bool A_0, IDataReader& A_1);
    public virtual void Reset();
    protected virtual void InternalReset();
    protected virtual bool CanExecuteStatement(SqlStatement sqlStatement);
    protected void CancelExecute();
    public virtual void Cancel();
    protected SqlStatement CreateSqlStatement(int offset, int length, int line, int position, string text, SqlStatementType statementType);
    internal IDataReader a(SqlStatement A_0, bool A_1);
    protected virtual IDataReader ExecuteSqlStatement(SqlStatement sqlStatement, bool forceExecute);
    protected virtual IDbCommand CreateCommand();
    protected virtual SqlStatementStatus OnSqlStatementExecute(SqlStatement stmt, IDataReader& reader);
    protected abstract virtual bool GetNextStatement(SqlStatement& stmt);
    protected virtual SqlStatementType GetStatementType(Token token);
    protected void OnProgress(SqlStatement stmt);
    private static void a(SqlStatement A_0, String& A_1, Int64& A_2, Int64& A_3, Int32& A_4, Int32& A_5, SqlStatementType& A_6);
    protected void OnError(ScriptErrorEventArgs e);
    public IDbConnection get_Connection();
    public void set_Connection(IDbConnection value);
    internal string a(SqlStatement A_0);
    protected virtual SqlStatementCollection CreateStatementCollection();
    protected virtual string GetStatementText(SqlStatement stmt);
    protected virtual void InitializeFromConnection();
    public virtual string get_ScriptText();
    public virtual void set_ScriptText(string value);
    public SqlStatementCollection get_Statements();
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    protected virtual int GetDefaultCommandTimeout();
    [CompilerGeneratedAttribute]
public void add_Error(ScriptErrorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Error(ScriptErrorEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Progress(ScriptProgressEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Progress(ScriptProgressEventHandler value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public sealed virtual ISite get_Site();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Site(ISite value);
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    internal a b();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class Devart.Common.DbTransactionBase : DbTransaction {
    protected IsolationLevel isolationLevel;
    protected bool isDisposed;
    private string a;
    [CompilerGeneratedAttribute]
private TransactionStateChangingEventHandler b;
    [CompilerGeneratedAttribute]
private TransactionStateChangedEventHandler c;
    private string AlreadyDisposedErrorMessage { get; }
    public IsolationLevel IsolationLevel { get; }
    protected void CheckDisposed();
    private string a();
    public virtual IsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void add_StateChanging(TransactionStateChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StateChanging(TransactionStateChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_StateChanged(TransactionStateChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StateChanged(TransactionStateChangedEventHandler value);
    protected void OnStateChanging(TransactionAction action, DbConnection connection);
    protected void OnStateChanged(TransactionAction action, DbConnection connection);
}
[FlagsAttribute]
public enum Devart.Common.DumpMode : Enum {
    public int value__;
    public static DumpMode All;
    public static DumpMode Schema;
    public static DumpMode Data;
}
internal enum Devart.Common.e : Enum {
    public int value__;
    public static e a;
    public static e b;
    public static e c;
    public static e d;
    public static e e;
    public static e f;
    public static e g;
    public static e h;
    public static e i;
    public static e j;
    public static e k;
    public static e l;
    public static e m;
    public static e n;
    public static e o;
    public static e p;
}
internal class Devart.Common.f : object {
    internal static bool d(object A_0);
    internal static int c(object A_0);
    internal static long b(object A_0);
    internal static string a(object A_0);
}
internal class Devart.Common.g : object {
    private static ResourceManager a;
    private static ResourceManager b;
    private static CultureInfo c;
    internal static string d;
    internal static string e;
    internal static string f;
    internal static string g;
    internal static string h;
    internal static string i;
    internal static string j;
    internal static string k;
    internal static string l;
    internal static string m;
    internal static string n;
    internal static string o;
    internal static string p;
    internal static string q;
    internal static string r;
    internal static string s;
    internal static string t;
    internal static string u;
    internal static string v;
    internal static string w;
    internal static string x;
    internal static string y;
    internal static string z;
    internal static string aa;
    internal static string ab;
    internal static string ac;
    internal static string ad;
    internal static string ae;
    internal static string af;
    internal static string ag;
    internal static string ah;
    internal static string ai;
    internal static string aj;
    internal static string ak;
    internal static string al;
    internal static string am;
    internal static string an;
    internal static string ao;
    internal static string ap;
    internal static string aq;
    internal static string ar;
    internal static string as;
    internal static string at;
    internal static string au;
    internal static string av;
    internal static string aw;
    internal static string ax;
    internal static string ay;
    internal static string az;
    internal static string a0;
    internal static string a1;
    internal static string a2;
    internal static string a3;
    internal static string a4;
    internal static string a5;
    internal static string a6;
    internal static string a7;
    internal static string a8;
    internal static string a9;
    internal static string ba;
    internal static string bb;
    internal static string bc;
    internal static string bd;
    internal static string be;
    internal static string bf;
    internal static string bg;
    internal static string bh;
    internal static string bi;
    internal static string bj;
    internal static string bk;
    internal static string bl;
    internal static string bm;
    internal static string bn;
    internal static string bo;
    internal static string bp;
    internal static string bq;
    internal static string br;
    internal static string bs;
    internal static string bt;
    internal static string bu;
    internal static string bv;
    internal static string bw;
    internal static string bx;
    internal static string by;
    internal static string bz;
    internal static string b0;
    internal static string b1;
    internal static string b2;
    internal static string b3;
    internal static string b4;
    internal static string b5;
    internal static string b6;
    internal static string b7;
    internal static string b8;
    internal static string b9;
    internal static string ca;
    internal static string cb;
    internal static string cc;
    internal static string cd;
    internal static string ce;
    internal static string cf;
    internal static string cg;
    internal static string ch;
    internal static string ci;
    internal static string cj;
    internal static string ck;
    internal static string cl;
    internal static string cm;
    internal static string cn;
    internal static string co;
    internal static string cp;
    internal static string cq;
    internal static string cr;
    internal static string cs;
    internal static string ct;
    internal static string cu;
    internal static string cv;
    private static g();
    internal static string a(string A_0);
    internal static string a(string A_0, object A_1);
    internal static string a(string A_0, object A_1, object A_2);
    internal static string a(string A_0, object A_1, object A_2, object A_3);
}
public class Devart.Common.GetSymbolsHandler : MulticastDelegate {
    public GetSymbolsHandler(object object, IntPtr method);
    public virtual object Invoke(string ch);
    public virtual IAsyncResult BeginInvoke(string ch, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Devart.Common.h : object {
    public static Hashtable a;
    public static Hashtable b;
    public static int c;
    public static int d;
    public static int e;
    public static int f;
    public static int g;
    public static int h;
    public static int i;
    public static int j;
    public static int k;
    public static int l;
    public static int m;
    public static int n;
    public static int o;
    public static int p;
    public static int q;
    public static int r;
    public static int s;
    public static int t;
    public static int u;
    public static int v;
    public static int w;
    public static int x;
    public static int y;
    public static int z;
    public static int aa;
    public static int ab;
    public static int ac;
    public static int ad;
    public static int ae;
    public static int af;
    public static int ag;
    public static int ah;
    public static int ai;
    public static int aj;
    public static int ak;
    public static int al;
    public static int am;
    public static int an;
    public static int ao;
    public static int ap;
    public static int aq;
    public static int ar;
    public static int as;
    public static int at;
    public static int au;
    private static h();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public interface Devart.Common.ILocalFailoverManager {
    public abstract virtual ILocalFailoverManager StartUse();
    public abstract virtual ILocalFailoverManager StartUse(bool fireConnErrorEvent);
    public abstract virtual RetryMode DoLocalFailoverEvent(object sender, ConnectionLostCause cause, RetryMode retryMode, Exception e);
}
public class Devart.Common.Lexer : object {
    private string a;
    private int b;
    private TextReader c;
    private int d;
    private int e;
    private int f;
    private int g;
    private int h;
    private StringBuilder i;
    private StringBuilder j;
    private LexerBehavior k;
    private Hashtable l;
    private Hashtable m;
    private Char[] n;
    private char o;
    private char p;
    private char q;
    private char r;
    private String[] s;
    private string t;
    private string u;
    private string v;
    private string w;
    private char x;
    private char y;
    private int z;
    private Token aa;
    private Token ab;
    private Token ac;
    private GetSymbolsHandler ad;
    private bool ae;
    private CheckInlineCommentFollowedCharHandler af;
    public static int DefaultMaxSymbolLength;
    private CompareInfo ag;
    private CultureInfo ah;
    private static int ai;
    private static char aj;
    public CultureInfo CultureInfo { get; public set; }
    public Token Current { get; }
    public bool IsEmpty { get; }
    public string Text { get; public set; }
    public TextReader TextReader { get; public set; }
    public string StringQuote { get; public set; }
    public int MaxSymbolLength { get; public set; }
    public Hashtable Keywords { get; }
    public Hashtable Symbols { get; }
    public GetSymbolsHandler GetSymbols { get; public set; }
    public CheckInlineCommentFollowedCharHandler CheckInlineCommentFollowedChar { get; public set; }
    public Char[] IdentChars { get; public set; }
    public string IdentQuote { get; public set; }
    public string IdentQuoteBegin { get; public set; }
    public string IdentQuoteEnd { get; public set; }
    public String[] InlineComments { get; public set; }
    public string CommentBegin { get; public set; }
    public string CommentEnd { get; public set; }
    public string DecimalSeparator { get; public set; }
    private Lexer(Hashtable A_0, Hashtable A_1, LexerBehavior A_2);
    public Lexer(TextReader reader, GetSymbolsHandler getSymbolId, Hashtable symbols, Hashtable keywords, LexerBehavior behavior);
    public Lexer(string text, LexerBehavior behavior);
    public Lexer(string text, Hashtable symbols, Hashtable keywords, LexerBehavior behavior);
    public Lexer(TextReader reader, LexerBehavior behavior);
    public Lexer(TextReader reader, Hashtable symbols, Hashtable keywords, LexerBehavior behavior);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public void Reset();
    public Token PeekPreviousToken();
    public Token GetNextToken();
    private void f();
    private char e();
    private char c(int A_0);
    private string b(int A_0);
    private char d();
    private void c();
    private bool b();
    private bool b(string A_0);
    private bool a(string A_0);
    private void a(int A_0);
    private string a();
    public void BeginBlock();
    public void CrearBlock();
    public string EndBlock(int lenEnd);
    public string EndBlock(Token to);
    private Token a(Token A_0);
    private bool a(Char& A_0);
    public Token LookForSymbols(String[] symbols);
    public Token PeekNextToken();
    public Token get_Current();
    public bool get_IsEmpty();
    public string get_Text();
    public void set_Text(string value);
    public TextReader get_TextReader();
    public void set_TextReader(TextReader value);
    public string get_StringQuote();
    public void set_StringQuote(string value);
    public int get_MaxSymbolLength();
    public void set_MaxSymbolLength(int value);
    public Hashtable get_Keywords();
    public Hashtable get_Symbols();
    public GetSymbolsHandler get_GetSymbols();
    public void set_GetSymbols(GetSymbolsHandler value);
    public CheckInlineCommentFollowedCharHandler get_CheckInlineCommentFollowedChar();
    public void set_CheckInlineCommentFollowedChar(CheckInlineCommentFollowedCharHandler value);
    public Char[] get_IdentChars();
    public void set_IdentChars(Char[] value);
    public string get_IdentQuote();
    public void set_IdentQuote(string value);
    public string get_IdentQuoteBegin();
    public void set_IdentQuoteBegin(string value);
    public string get_IdentQuoteEnd();
    public void set_IdentQuoteEnd(string value);
    public String[] get_InlineComments();
    public void set_InlineComments(String[] value);
    public string get_CommentBegin();
    public void set_CommentBegin(string value);
    public string get_CommentEnd();
    public void set_CommentEnd(string value);
    public string get_DecimalSeparator();
    public void set_DecimalSeparator(string value);
}
[FlagsAttribute]
public enum Devart.Common.LexerBehavior : Enum {
    public int value__;
    public static LexerBehavior OmitBlank;
    public static LexerBehavior OmitComment;
    public static LexerBehavior QuotedString;
    public static LexerBehavior QuotedIdent;
    public static LexerBehavior UpperedIdent;
    public static LexerBehavior LoweredIdent;
    public static LexerBehavior HandleEscaping;
    public static LexerBehavior OmitTokenValue;
    public static LexerBehavior IdentDoubleQuote;
    public static LexerBehavior StringDoubleQuote;
    public static LexerBehavior BreakBlank;
    public static LexerBehavior OmitTokenStringValue;
    public static LexerBehavior IdentifierHasMinus;
    public static LexerBehavior IdentifierHasFirstDigit;
    public static LexerBehavior AlternativeQuotedString;
}
public class Devart.Common.MonitorEventArgs : EventArgs {
    private e a;
    private MonitorEventType b;
    private string c;
    private MonitorTracePoint d;
    private string e;
    private String[] f;
    private double g;
    public MonitorEventType EventType { get; }
    internal e EventTypeInternal { get; }
    internal bool IsUserEvent { get; }
    public string Description { get; }
    public MonitorTracePoint TracePoint { get; }
    public string ExtraInfo { get; }
    public String[] CallStack { get; }
    public double Duration { get; }
    internal MonitorEventArgs(e A_0, string A_1, MonitorTracePoint A_2, string A_3, String[] A_4, double A_5);
    private MonitorEventType a(e A_0);
    public MonitorEventType get_EventType();
    internal e a();
    internal bool b();
    public string get_Description();
    public MonitorTracePoint get_TracePoint();
    public string get_ExtraInfo();
    public String[] get_CallStack();
    public double get_Duration();
}
[FlagsAttribute]
public enum Devart.Common.MonitorEventFilter : Enum {
    public int value__;
    public static MonitorEventFilter None;
    public static MonitorEventFilter OpenConnection;
    public static MonitorEventFilter Disconnect;
    public static MonitorEventFilter Prepare;
    public static MonitorEventFilter Execute;
    public static MonitorEventFilter BeginTransaction;
    public static MonitorEventFilter Commit;
    public static MonitorEventFilter Rollback;
    public static MonitorEventFilter Error;
    public static MonitorEventFilter Custom;
    public static MonitorEventFilter CreatePoolManager;
    public static MonitorEventFilter CreatePoolGroup;
    public static MonitorEventFilter ConnectPooled;
    public static MonitorEventFilter ConnectNonPooled;
    public static MonitorEventFilter ActivateInPool;
    public static MonitorEventFilter ReturnToPool;
    public static MonitorEventFilter CreateObject;
    public static MonitorEventFilter All;
}
public class Devart.Common.MonitorEventHandler : MulticastDelegate {
    public MonitorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MonitorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MonitorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Devart.Common.MonitorEventType : Enum {
    public int value__;
    public static MonitorEventType Connect;
    public static MonitorEventType Disconnect;
    public static MonitorEventType Prepare;
    public static MonitorEventType Execute;
    public static MonitorEventType BeginTransaction;
    public static MonitorEventType Commit;
    public static MonitorEventType Rollback;
    public static MonitorEventType Error;
    public static MonitorEventType ActivateInPool;
    public static MonitorEventType ReturnToPool;
    public static MonitorEventType Custom;
}
public enum Devart.Common.MonitorTracePoint : Enum {
    public int value__;
    public static MonitorTracePoint BeforeEvent;
    public static MonitorTracePoint AfterEvent;
}
public class Devart.Common.ProxyException : Exception {
    public ProxyException(string message);
    public ProxyException(Exception inner);
}
public class Devart.Common.ProxyOptions : object {
    private string a;
    private int b;
    private string c;
    private string d;
    [CompilerGeneratedAttribute]
private ProxyOptionsPropertyChanged e;
    public static int DefaultPort;
    public static string ProxyHostKeyword;
    public static string ProxyPortKeyword;
    public static string ProxyUserKeyword;
    public static string ProxyPasswordKeyword;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[b("ProxyOptions_Host")]
[RefreshPropertiesAttribute("2")]
public string Host { get; public set; }
    [RefreshPropertiesAttribute("2")]
[b("ProxyOptions_Port")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("3128")]
public int Port { get; public set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[b("ProxyOptions_User")]
[BrowsableAttribute("True")]
public string User { get; public set; }
    [RefreshPropertiesAttribute("2")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[b("ProxyOptions_Password")]
public string Password { get; public set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[b("ProxyOptions_ProxyAddress")]
[BrowsableAttribute("True")]
public Uri ProxyAddress { get; }
    public ProxyOptions(string host, int port, string user, string password);
    private static ProxyOptions();
    private void a(string A_0, object A_1);
    public virtual string ToString();
    public string get_Host();
    public void set_Host(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_User();
    public void set_User(string value);
    public string get_Password();
    public void set_Password(string value);
    public Uri get_ProxyAddress();
    public bool ShouldSerialize();
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(ProxyOptionsPropertyChanged value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(ProxyOptionsPropertyChanged value);
}
public class Devart.Common.ProxyOptionsPropertyChanged : MulticastDelegate {
    public ProxyOptionsPropertyChanged(object object, IntPtr method);
    public virtual void Invoke(string name, object value);
    public virtual IAsyncResult BeginInvoke(string name, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.QueryRecordCountException : Exception {
    internal QueryRecordCountException(string A_0);
    internal QueryRecordCountException(string A_0, Exception A_1);
}
public enum Devart.Common.RetryMode : Enum {
    public int value__;
    public static RetryMode Raise;
    public static RetryMode Reexecute;
}
public class Devart.Common.ScriptErrorEventArgs : EventArgs {
    private Exception a;
    private bool b;
    private long c;
    private int d;
    private int e;
    private long f;
    private string g;
    private SqlStatementType h;
    public Exception Exception { get; }
    public bool Ignore { get; public set; }
    public string Text { get; }
    public long Offset { get; }
    public long Length { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public SqlStatementType StatementType { get; }
    public ScriptErrorEventArgs(Exception e, string text, long offset, long length, int lineNumber, int linePosition, SqlStatementType statementType);
    public Exception get_Exception();
    public bool get_Ignore();
    public void set_Ignore(bool value);
    public string get_Text();
    public long get_Offset();
    public long get_Length();
    public int get_LineNumber();
    public int get_LinePosition();
    public SqlStatementType get_StatementType();
}
public class Devart.Common.ScriptErrorEventHandler : MulticastDelegate {
    public ScriptErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScriptErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScriptErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.ScriptProgressEventArgs : EventArgs {
    private string a;
    private long b;
    private long c;
    private int d;
    private int e;
    private SqlStatementType f;
    public string Text { get; }
    public long Offset { get; }
    public long Length { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public SqlStatementType StatementType { get; }
    internal ScriptProgressEventArgs(string A_0, long A_1, long A_2, int A_3, int A_4, SqlStatementType A_5);
    public string get_Text();
    public long get_Offset();
    public long get_Length();
    public int get_LineNumber();
    public int get_LinePosition();
    public SqlStatementType get_StatementType();
}
public class Devart.Common.ScriptProgressEventHandler : MulticastDelegate {
    public ScriptProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScriptProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScriptProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.SqlStatement : object {
    private DbScript a;
    private int b;
    private int c;
    private int d;
    private int e;
    private UInt32 f;
    private string g;
    private SqlStatementType h;
    public string Text { get; }
    public int Offset { get; }
    public int Length { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public SqlStatementType StatementType { get; }
    protected internal SqlStatement(DbScript script, int offset, int length, int line, int position, string text, SqlStatementType statementType);
    public IDataReader Execute();
    public void ExecuteNonQuery();
    private void a();
    public string get_Text();
    public int get_Offset();
    public int get_Length();
    public int get_LineNumber();
    public int get_LinePosition();
    public SqlStatementType get_StatementType();
}
[DefaultMemberAttribute("Item")]
public class Devart.Common.SqlStatementCollection : CollectionBase {
    public SqlStatement Item { get; public set; }
    public SqlStatement get_Item(int index);
    public void set_Item(int index, SqlStatement value);
    public int Add(SqlStatement value);
    public void Insert(int index, SqlStatement value);
    public int IndexOf(SqlStatement value);
    public bool Contains(SqlStatement value);
    public void Remove(SqlStatement value);
    public void CopyTo(SqlStatement[] array, int index);
}
public enum Devart.Common.SqlStatementStatus : Enum {
    public int value__;
    public static SqlStatementStatus Cancel;
    public static SqlStatementStatus Continue;
    public static SqlStatementStatus SkipStatement;
}
public enum Devart.Common.SqlStatementType : Enum {
    public int value__;
    public static SqlStatementType Unknown;
    public static SqlStatementType Select;
    public static SqlStatementType Insert;
    public static SqlStatementType Update;
    public static SqlStatementType Delete;
    public static SqlStatementType Truncate;
    public static SqlStatementType Batch;
    public static SqlStatementType Alter;
    public static SqlStatementType Create;
    public static SqlStatementType Drop;
    public static SqlStatementType Execute;
    public static SqlStatementType Commit;
    public static SqlStatementType Rollback;
    public static SqlStatementType With;
    public static SqlStatementType Extended;
}
public class Devart.Common.Token : object {
    public TokenType Type;
    public object Value;
    public int Id;
    public int StartPosition;
    public int EndPosition;
    public int LineBegin;
    public int LineNumber;
    public static Token Begin;
    public static Token Empty;
    public int LinePosition { get; }
    public int EndLineBegin { get; }
    public int EndLineNumber { get; }
    public int EndLinePosition { get; }
    public Token(TokenType type, object value, int id, int startPosition, int endPosition, int lineBegin, int lineNumber);
    private static Token();
    public virtual string ToString();
    public int get_LinePosition();
    public virtual int get_EndLineBegin();
    public virtual int get_EndLineNumber();
    public virtual int get_EndLinePosition();
}
public enum Devart.Common.TokenType : Enum {
    public int value__;
    public static TokenType Char;
    public static TokenType Symbol;
    public static TokenType Keyword;
    public static TokenType Identifier;
    public static TokenType Number;
    public static TokenType String;
    public static TokenType Blank;
    public static TokenType Comment;
    public static TokenType Begin;
    public static TokenType End;
    public static TokenType Undefined;
}
public enum Devart.Common.TransactionAction : Enum {
    public int value__;
    public static TransactionAction BeginTransaction;
    public static TransactionAction Commit;
    public static TransactionAction Rollback;
    public static TransactionAction Savepoint;
    public static TransactionAction ReleaseSavepoint;
    public static TransactionAction RollbackToSavepoint;
}
public class Devart.Common.TransactionStateChangedEventArgs : TransactionStateChangeEventArgs {
    public TransactionStateChangedEventArgs(TransactionAction action);
}
public class Devart.Common.TransactionStateChangedEventHandler : MulticastDelegate {
    public TransactionStateChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TransactionStateChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TransactionStateChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Devart.Common.TransactionStateChangeEventArgs : EventArgs {
    private TransactionAction a;
    public TransactionAction Action { get; }
    protected TransactionStateChangeEventArgs(TransactionAction action);
    public TransactionAction get_Action();
}
public class Devart.Common.TransactionStateChangingEventArgs : TransactionStateChangeEventArgs {
    public TransactionStateChangingEventArgs(TransactionAction action);
}
public class Devart.Common.TransactionStateChangingEventHandler : MulticastDelegate {
    public TransactionStateChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TransactionStateChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TransactionStateChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.Utils : object {
    public static bool DesignMode;
    private static Char[] a;
    private static Nullable`1<bool> b;
    private static Nullable`1<bool> c;
    public static bool MonoDetected { get; }
    public static bool IsWIntel { get; }
    private static Utils();
    public static bool Compare(string st1, string st2);
    public static bool CompareInvariant(string st1, string st2);
    public static bool Compare(string st1, string st2, bool ignoreCase);
    public static bool CompareInvariant(string st1, string st2, bool ignoreCase);
    public static bool CompareObjectNameSuffix(string source, string target, bool ignoreCase, String[] excludeStrings);
    public static bool CompareSuffix(string source, string suffix, bool ignoreCase);
    public static bool CompareSuffix(string source, string suffix, bool ignoreCase, String[] excludeStrings);
    public static void CheckArgumentNull(object value, string parameterName);
    public static void CheckArgumentNull(object value, string parameterName, string resMessage);
    public static void CheckConnectionOpen(IDbConnection connection);
    public static Hashtable CreateHashtable(bool ignoreCase);
    public static bool IsIpAddress(string hostname);
    public static bool IsEmpty(string st);
    public static bool IsEmpty(ICollection collection);
    public static bool IsNull(object val);
    public static bool IsNumber(string s);
    public static bool IsBasicLetter(char c);
    public static string ObjectToString(object obj);
    public static object Parse(string s, Type enumType);
    public static object Parse(string s, Type enumType, bool ignoreCase);
    public static bool TryParse(string s, Int32& i);
    public static bool TryParse(string s, Double& d);
    public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, Double& result);
    public static bool TryParse(string s, Boolean& b);
    public static bool TryParse(string s, Boolean& b, bool ignoreCase);
    public static bool TryParse(string s, Object& value, Type enumType);
    public static bool TryParse(string s, Object& value, Type enumType, bool ignoreCase);
    public static int ParseIntWith0(string s);
    public static int TryParseInt(string s, Int32& pos);
    public static bool TryGetValue(Hashtable dictionary, object key, Object& val);
    public static object GetWeakTarget(WeakReference weakReference);
    public static void SetWeakTarget(WeakReference& weakReference, object target);
    public static bool GetWeakIsAlive(WeakReference weakReference);
    public static Byte[] GetMaxBytes(Encoding encoding, string s, Int32& byteCount);
    public static String[] SplitItems(string names, Char[] quotes);
    public static bool WaitOne(WaitHandle waitHandle, TimeSpan timeout, bool exitContext);
    public static bool NeedQuote(string name, Hashtable keywords, Char[] prefixes, Char[] suffixes);
    public static bool NeedQuote(string name, Hashtable keywords, Char[] prefixes, Char[] suffixes, bool checkCase);
    public static string ToLowerInvariant(string value);
    public static string ToUpperInvariant(string value);
    public static char ToLowerInvariant(char value);
    public static char ToUpperInvariant(char value);
    public static bool ByteArrayEquals(Byte[] value1, Byte[] value2);
    public static string ByteArrayToHexString(Byte[] bytes);
    public static string TruncateVersion(string version, int count);
    public static bool get_MonoDetected();
    public static bool get_IsWIntel();
    public static a GetDllMachineType(string dllPath);
    public static Nullable`1<bool> UnmanagedDllIs64Bit(string dllPath);
}
public class Devart.Data.ProductInfo : object {
    public static string Version;
}
internal enum Devart.DbMonitor.a : Enum {
    public int value__;
    public static a a;
    public static a b;
    public static a c;
    public static a d;
    public static a e;
}
internal enum Devart.DbMonitor.b : Enum {
    public int value__;
    public static b a;
    public static b b;
    public static b c;
    public static b d;
    public static b e;
    public static b f;
}
internal interface Devart.DbMonitor.c {
    public abstract virtual void a(byte A_0);
    public abstract virtual void a(int A_0);
    public abstract virtual void a(string A_0);
}
internal interface Devart.DbMonitor.d {
    public abstract virtual byte a();
    public abstract virtual int b();
    public abstract virtual string c();
}
internal abstract class Devart.DbMonitor.e : object {
    private a a;
    private int b;
    public e(a A_0);
    public virtual void c(c A_0);
    public virtual void c(d A_0);
    internal a u();
    internal void a(a A_0);
    public int v();
    public void f(int A_0);
}
internal class Devart.DbMonitor.f : e {
    private n a;
    private string b;
    private DateTime c;
    private int d;
    public virtual override void b(c A_0);
    public virtual override void b(d A_0);
    internal n q();
    internal void a(n A_0);
    public string r();
    public void f(string A_0);
    public DateTime s();
    public void a(DateTime A_0);
    public int t();
    public void e(int A_0);
}
internal class Devart.DbMonitor.g : f {
    private string a;
    public virtual override void a(c A_0);
    public virtual override void a(d A_0);
    public string a();
    public void a(string A_0);
}
internal class Devart.DbMonitor.h : ValueType {
    private string a;
    private string b;
    private string c;
    private string d;
    public h(string A_0, string A_1, string A_2, string A_3);
    public string a();
    public void a(string A_0);
    public string b();
    public void b(string A_0);
    public string c();
    public void c(string A_0);
    public string d();
    public void d(string A_0);
}
internal class Devart.DbMonitor.i : object {
    private int a;
    private bool b;
    private string c;
    private b d;
    private string e;
    private i f;
    private bool g;
    public int a();
    public void a(int A_0);
    public bool b();
    public void a(bool A_0);
    public string c();
    public void a(string A_0);
    internal b d();
    internal void a(b A_0);
    public string e();
    public void b(string A_0);
    internal i f();
    internal void a(i A_0);
    public bool g();
    public void b(bool A_0);
}
internal class Devart.DbMonitor.j : object {
    private string a;
    private bool b;
    private bool c;
    private bool d;
    private j e;
    private List`1<j> f;
    public j a();
    public j b();
    public string c();
    public void a(string A_0);
    public bool d();
    public void a(bool A_0);
    public bool e();
    public void b(bool A_0);
    public bool f();
    public void c(bool A_0);
    internal j g();
    internal void a(j A_0);
    internal List`1<j> h();
    internal void a(List`1<j> A_0);
    public bool i();
}
internal class Devart.DbMonitor.k : f {
    private int a;
    private int b;
    private int c;
    private string d;
    private b e;
    private string f;
    private int g;
    private string h;
    private b i;
    private string j;
    private string k;
    private List`1<h> l;
    private List`1<string> m;
    private i n;
    private l o;
    private j p;
    public virtual override void a(c A_0);
    public virtual override void a(d A_0);
    public int a();
    public void a(int A_0);
    public int b();
    public void b(int A_0);
    public int c();
    public void c(int A_0);
    public string d();
    public void a(string A_0);
    internal b e();
    internal void a(b A_0);
    public string f();
    public void b(string A_0);
    public int g();
    public void d(int A_0);
    public string h();
    public void c(string A_0);
    internal b i();
    internal void b(b A_0);
    public string j();
    public void d(string A_0);
    public string k();
    public void e(string A_0);
    internal List`1<h> l();
    internal void a(List`1<h> A_0);
    public List`1<string> m();
    public void a(List`1<string> A_0);
    internal i n();
    internal void a(i A_0);
    internal l o();
    internal void a(l A_0);
    internal j p();
    internal void a(j A_0);
}
internal class Devart.DbMonitor.l : f {
    private int a;
    private int b;
    private int c;
    private string d;
    private List`1<h> e;
    private int f;
    public virtual override void a(c A_0);
    public virtual override void a(d A_0);
    public int a();
    public void a(int A_0);
    public int b();
    public void b(int A_0);
    public int c();
    public void c(int A_0);
    public string d();
    public void a(string A_0);
    internal List`1<h> e();
    internal void a(List`1<h> A_0);
    public int f();
    public void d(int A_0);
}
internal class Devart.DbMonitor.m : object {
    public static int a;
    public static int b;
    public static int c;
    private string d;
    private int e;
    private int f;
    private int g;
    private TcpClient h;
    private NetworkStream i;
    private int j;
    private bool k;
    public sealed virtual override void a();
    public bool b();
    public void c();
    public bool d();
    public bool e();
    public void a(e A_0);
    public sealed virtual void a(byte A_0);
    public sealed virtual void a(int A_0);
    public sealed virtual void a(string A_0);
    private static void a(Byte[] A_0);
    public string f();
    public void b(string A_0);
    public int g();
    public void b(int A_0);
    public int h();
    public void c(int A_0);
    public int i();
    public void d(int A_0);
}
internal enum Devart.DbMonitor.n : Enum {
    public int value__;
    public static n a;
    public static n b;
    public static n c;
    public static n d;
    public static n e;
    public static n f;
    public static n g;
    public static n h;
    public static n i;
    public static n j;
    public static n k;
    public static n l;
    public static n m;
    public static n n;
    public static n o;
    public static n p;
    public static n q;
}
internal class Devart.DbMonitor.o : object {
    private int a;
    private n b;
    private int c;
    private string d;
    private b e;
    private string f;
    private int g;
    private string h;
    private b i;
    private string j;
    private string k;
    private string l;
    private bool m;
    private string n;
    private int o;
    private List`1<h> p;
    private List`1<string> q;
    public int a();
    public void a(int A_0);
    internal n b();
    internal void a(n A_0);
    public int c();
    public void b(int A_0);
    public string d();
    public void a(string A_0);
    internal b e();
    internal void a(b A_0);
    public string f();
    public void b(string A_0);
    public int g();
    public void c(int A_0);
    public string h();
    public void c(string A_0);
    internal b i();
    internal void b(b A_0);
    public string j();
    public void d(string A_0);
    public string k();
    public void e(string A_0);
    public string l();
    public void f(string A_0);
    internal List`1<h> m();
    internal void a(List`1<h> A_0);
    public List`1<string> n();
    public void a(List`1<string> A_0);
    public bool o();
    public void a(bool A_0);
    public string p();
    public void g(string A_0);
    public int q();
    public void d(int A_0);
}
internal class Devart.DbMonitor.p : object {
    private static string a;
    private static string b;
    private static string c;
    private m d;
    private string e;
    private string f;
    private int g;
    private int h;
    private int i;
    private int j;
    public sealed virtual override void a();
    public void b();
    public void c();
    public bool d();
    public void a(o A_0);
    public void b(o A_0);
    public void c(o A_0);
    public string e();
    public void a(string A_0);
    public string f();
    public void b(string A_0);
    public int g();
    public void a(int A_0);
    public int h();
    public void b(int A_0);
    public int i();
    public void c(int A_0);
}
[ExtensionAttribute]
internal static class Microsoft.Win32.a : object {
    [ExtensionAttribute]
public static void a(RegistryKey A_0);
}
[ExtensionAttribute]
internal static class System.a : object {
    [ExtensionAttribute]
public static string a(bool A_0, CultureInfo A_1);
}
internal interface System.b {
    public abstract virtual object a();
}
[ExtensionAttribute]
internal static class System.c : object {
    [ExtensionAttribute]
public static string b(string A_0, CultureInfo A_1);
    [ExtensionAttribute]
public static string a(string A_0, CultureInfo A_1);
    public static int a(string A_0, string A_1, bool A_2, CultureInfo A_3);
}
[DefaultMemberAttribute("Item")]
internal class System.ComponentModel.a : object {
    private a a;
    public void a(object A_0, Delegate A_1);
    public void a(a A_0);
    public sealed virtual override void a();
    private a a(object A_0);
    public void b(object A_0, Delegate A_1);
    public Delegate b(object A_0);
    public void c(object A_0, Delegate A_1);
}
internal class System.d : object {
    private TimeZoneInfo a;
    private static d b;
    private d(TimeZoneInfo A_0);
    private static d();
    public static d a();
    public TimeSpan a(DateTime A_0);
    public TimeSpan a(DateTimeOffset A_0);
}
[ExtensionAttribute]
internal static class System.Data.Common.a : object {
    [ExtensionAttribute]
public static void a(DbDataReader A_0);
}
internal interface System.Data.SqlTypes.a {
    public abstract virtual bool a();
}
[ExtensionAttribute]
internal static class System.e : object {
    [ExtensionAttribute]
public static bool a(Type A_0, object A_1);
    [ExtensionAttribute]
public static bool a(Type A_0, Type A_1);
    [ExtensionAttribute]
public static MethodInfo a(Type A_0, string A_1, BindingFlags A_2, object A_3, Type[] A_4, object A_5);
    [ExtensionAttribute]
public static ConstructorInfo a(Type A_0, BindingFlags A_1, object A_2, Type[] A_3, object A_4);
    [IteratorStateMachineAttribute("System.e/c")]
private static IEnumerable`1<ConstructorInfo> a(Type A_0, BindingFlags A_1);
    [ExtensionAttribute]
public static Object[] a(Type A_0, Type A_1, bool A_2);
    public static TypeCode a(Type A_0);
}
[ExtensionAttribute]
internal static class System.IO.a : object {
    [ExtensionAttribute]
public static void a(FileStream A_0);
}
[ExtensionAttribute]
internal static class System.IO.b : object {
    [ExtensionAttribute]
public static void b(MemoryStream A_0);
    [ExtensionAttribute]
public static Byte[] a(MemoryStream A_0);
}
[ExtensionAttribute]
internal static class System.IO.c : object {
    [ExtensionAttribute]
public static void a(Stream A_0);
}
[ExtensionAttribute]
internal static class System.IO.d : object {
    [ExtensionAttribute]
public static void a(StreamReader A_0);
    public static StreamReader a(string A_0);
    public static StreamReader a(string A_0, Encoding A_1);
}
[ExtensionAttribute]
internal static class System.IO.e : object {
    [ExtensionAttribute]
public static void a(StreamWriter A_0);
    public static StreamWriter a(string A_0);
    public static StreamWriter a(string A_0, Encoding A_1);
    public static StreamWriter a(string A_0, bool A_1, Encoding A_2);
}
[ExtensionAttribute]
internal static class System.Net.Sockets.a : object {
    [ExtensionAttribute]
public static void a(NetworkStream A_0);
}
[ExtensionAttribute]
internal static class System.Net.Sockets.b : object {
    [ExtensionAttribute]
public static void a(Socket A_0);
}
[ExtensionAttribute]
internal static class System.Net.Sockets.c : object {
    [ExtensionAttribute]
public static void a(TcpClient A_0, IPAddress A_1, int A_2);
    [ExtensionAttribute]
public static void a(TcpClient A_0, string A_1, int A_2);
    [ExtensionAttribute]
public static void a(TcpClient A_0);
}
[ComVisibleAttribute("True")]
[AttributeUsageAttribute("1")]
internal class System.Reflection.a : Attribute {
    private bool a;
    private bool b;
    public a(bool A_0);
    public bool a();
    public bool b();
    public void a(bool A_0);
}
[ComVisibleAttribute("True")]
[AttributeUsageAttribute("8157")]
internal class System.Reflection.b : Attribute {
    private bool a;
    private bool b;
    private string c;
    private bool d;
    public bool a();
    public void a(bool A_0);
    public bool b();
    public void b(bool A_0);
    public string c();
    public void a(string A_0);
    public bool d();
    public void c(bool A_0);
}
[ComVisibleAttribute("True")]
internal class System.Runtime.InteropServices.a : ValueType {
    internal object a;
    internal IntPtr b;
    public a(object A_0, IntPtr A_1);
    public IntPtr a();
    public object b();
    public static IntPtr b(a A_0);
    public static IntPtr a(a A_0);
}
internal class System.Security.a : object {
    private static Char[] a;
    private static Char[] b;
    private static Char[] c;
    private static String[] d;
    private static Char[] e;
    private static string f;
    private static int g;
    private static int h;
    private static a();
    public static string a(string A_0);
    private static string a(char A_0);
}
[ExtensionAttribute]
internal static class System.Threading.a : object {
    [ExtensionAttribute]
public static void a(ManualResetEvent A_0);
}
[ExtensionAttribute]
internal static class System.Xml.a : object {
    private static UInt32 a;
    private static a();
    [ExtensionAttribute]
public static string c(XmlReader A_0);
    [ExtensionAttribute]
public static string b(XmlReader A_0);
    private static bool a(XmlNodeType A_0);
    [ExtensionAttribute]
public static void a(XmlReader A_0);
}
