internal static class  : object {
}
internal interface  {
    public abstract virtual      ();
}
internal interface  {
    public abstract virtual <>     ();
}
internal interface  {
    public abstract virtual void     ();
}
internal interface  {
    public abstract virtual bool     ();
    public abstract virtual object     ();
    public abstract virtual void     ();
}
internal interface  {
    public abstract virtual      ();
}
internal static class  : object {
}
internal class   : object {
    internal static  ;
}
internal class   : object {
    internal DataViewManager ;
    private ListChangedEventHandler ;
    private PropertyDescriptorCollection ;
    public  (DataViewManager );
    private sealed virtual override IEnumerator      ();
    private sealed virtual override void      (Array , int );
    private sealed virtual override int      ();
    private sealed virtual override bool      ();
    private sealed virtual override object       ();
    private sealed virtual override int      (object );
    private sealed virtual override void       ();
    private sealed virtual override bool      (object );
    private sealed virtual override int      (object );
    private sealed virtual override void      (int , object );
    private sealed virtual override void      (object );
    private sealed virtual override void      (int );
    private sealed virtual override bool      ();
    private sealed virtual override bool      ();
    private sealed virtual override object      (int );
    private sealed virtual override void      (int , object );
    private sealed virtual override bool      ();
    private sealed virtual override bool      ();
    private sealed virtual override bool       ();
    private sealed virtual override bool       ();
    private sealed virtual override ListSortDirection       ();
    private sealed virtual override PropertyDescriptor       ();
    private sealed virtual override bool       ();
    private sealed virtual override bool       ();
    private sealed virtual override bool       ();
    private sealed virtual override void      (PropertyDescriptor );
    private sealed virtual override object       ();
    private sealed virtual override void      (PropertyDescriptor , ListSortDirection );
    private sealed virtual override int      (PropertyDescriptor , object );
    private sealed virtual override void      (PropertyDescriptor );
    private sealed virtual override void       ();
    private sealed virtual override void      (ListChangedEventHandler );
    private sealed virtual override void      (ListChangedEventHandler );
    internal void (object , ListChangedEventArgs );
    private sealed virtual override PropertyDescriptorCollection      (PropertyDescriptor[] );
    private sealed virtual override string      (PropertyDescriptor[] );
}
internal enum   : Enum {
    public int value__;
}
internal abstract class   : object {
    private   ;
    private int ;
    public  (  );
    public virtual void      (  );
    public virtual void      (  );
    internal   ();
    internal void (  );
    public int ();
    public void (int );
}
internal enum   : Enum {
    public int value__;
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static string (bool , CultureInfo );
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (NetworkStream );
}
internal class   : WeakReference {
    public string ;
    public  (object , string );
}
internal class   : object {
    private   ;
    private Thread ;
    private AutoResetEvent ;
    private LinkedList`1<> ;
    private bool ;
    private object ;
    private Stack`1<int> ;
    private string  ;
    private int  ;
    private int  ;
    private int  ;
    private string  ;
    public sealed virtual void Dispose();
    public void (  , MonitorTracePoint , bool );
    private void ();
    internal int ();
    internal void (int );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public int ();
    public void (int );
}
internal class   : object {
    public DbDataTableView ;
    public Object[] ;
    public  (DbDataTableView , Object[] );
}
internal class   :   {
    private   ;
    private string ;
    private DateTime ;
    private int ;
    public virtual void      (  );
    public virtual void      (  );
    internal   ();
    internal void (  );
    public string ();
    public void (string );
    public DateTime ();
    public void (DateTime );
    public int ();
    public void (int );
}
internal class   : object {
    private int ;
    private   ;
    private int ;
    private string ;
    private   ;
    private string ;
    private int ;
    private string  ;
    private    ;
    private string  ;
    private string  ;
    private string  ;
    private bool  ;
    private string  ;
    private int  ;
    private List`1< >  ;
    private List`1<string>  ;
    public int ();
    public void (int );
    internal   ();
    internal void (  );
    public int ();
    public void (int );
    public string ();
    public void (string );
    internal    ();
    internal void (  );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public string  ();
    public void (string );
    internal    ();
    internal void (  );
    public string  ();
    public void (string );
    public string  ();
    public void (string );
    public string  ();
    public void (string );
    internal List`1< >  ();
    internal void (List`1< > );
    public List`1<string>  ();
    public void (List`1<string> );
    public bool  ();
    public void (bool );
    public string  ();
    public void (string );
    public int ();
    public void (int );
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (DbDataReader );
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (Socket );
}
internal class   : object {
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    private static  ();
    public static int (IntPtr , Int32& , IntPtr , Int32& );
    public static int (int , int , int , IntPtr , IntPtr& );
    public static int (IntPtr );
}
internal class   : object {
    public string ;
    public int ;
    public IList ;
}
internal class   : object {
    private static ResourceManager ;
    private static ResourceManager ;
    private static CultureInfo ;
    private static  ();
    internal static string (string );
    internal static string (string , object );
    internal static string (string , object , object );
    internal static string (string , object , object , object );
}
internal class   :   {
    private int ;
    private int ;
    private int ;
    private string ;
    private List`1< > ;
    private int ;
    public virtual void      (  );
    public virtual void      (  );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public string ();
    public void (string );
    internal List`1< > ();
    internal void (List`1< > );
    public int ();
    public void (int );
}
internal enum   : Enum {
    public int value__;
    public static   AppStarted;
    public static   AppFinished;
    public static   Connect;
    public static   Disconnect;
    public static   BeginTransaction;
    public static   Commit;
    public static   Rollback;
    public static   Savepoint;
    public static   Prepare;
    public static   Unprepare;
    public static   Execute;
    public static   Fetch;
    public static   Blob;
    public static   ObjectCreate;
    public static   ObjectDestroy;
    public static   ConnectionPool;
    public static   Misc;
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (FileStream );
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (TcpClient , IPAddress , int );
    [ExtensionAttribute]
public static void (TcpClient , string , int );
    [ExtensionAttribute]
public static void (TcpClient );
}
internal class   : PropertyDescriptor {
    private Type ;
    private Type ;
    private bool ;
    private bool ;
    private string ;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public string DisplayName { get; }
    public  (string , Type , Type , bool , Attribute[] );
    public virtual bool CanResetValue(object );
    public virtual object GetValue(object );
    public virtual void ResetValue(object );
    public virtual void SetValue(object , object );
    protected virtual void      (DbConnectionStringBuilder );
    public virtual bool ShouldSerializeValue(object );
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    internal bool ();
    internal void (bool );
    public virtual string get_DisplayName();
}
internal class   : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal  (string );
    public virtual bool CanResetValue(object );
    public virtual Type get_ComponentType();
    public virtual object GetValue(object );
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual void ResetValue(object );
    public virtual void SetValue(object , object );
    public virtual bool ShouldSerializeValue(object );
}
internal class   : object {
    public static Hashtable ;
    public static Hashtable ;
    private static  ();
}
internal class   :   {
    private int ;
    private int ;
    private int ;
    private string ;
    private   ;
    private string ;
    private int ;
    private string  ;
    private    ;
    private string  ;
    private string  ;
    private List`1< >  ;
    private List`1<string>  ;
    private    ;
    private    ;
    private    ;
    public virtual void      (  );
    public virtual void      (  );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public string ();
    public void (string );
    internal    ();
    internal void (  );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public string ();
    public void (string );
    internal    ();
    internal void (  );
    public string  ();
    public void (string );
    public string  ();
    public void (string );
    internal List`1< >  ();
    internal void (List`1< > );
    public List`1<string>  ();
    public void (List`1<string> );
    internal    ();
    internal void (  );
    internal    ();
    internal void (  );
    internal    ();
    internal void (  );
}
internal enum   : Enum {
    public int value__;
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (Stream );
}
internal static class   : object {
    public static int (string , string , bool , CultureInfo );
}
[DefaultMemberAttribute("Item")]
internal class   : PropertyDescriptorCollection {
    public PropertyDescriptor Item { get; }
    public PropertyDescriptor Item { get; }
    public  (PropertyDescriptor[] );
    public virtual PropertyDescriptor get_Item(int );
    public virtual PropertyDescriptor get_Item(string );
    public virtual PropertyDescriptor Find(string , bool );
    public virtual IEnumerator GetEnumerator();
    public virtual PropertyDescriptorCollection Sort();
    public virtual PropertyDescriptorCollection Sort(IComparer );
    public virtual PropertyDescriptorCollection Sort(String[] );
    public virtual PropertyDescriptorCollection Sort(String[] , IComparer );
}
internal static class   : object {
    private static bool ;
    private static double ;
    private static double ;
    private static  ();
    private static void ();
    public static long ();
    public static double (long );
    private static short (Int64& );
    private static short (Int64& );
    private static short (Int64& );
    private static short (Int64& );
}
[AttributeUsageAttribute("644")]
internal class   : DescriptionAttribute {
    private static bool ;
    private static List`1<ResourceManager> ;
    private bool ;
    public string Description { get; }
    public  (string );
    private static  ();
    public virtual string get_Description();
}
internal class   : object {
    private int ;
    private bool ;
    private string ;
    private   ;
    private string ;
    private   ;
    private bool ;
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public string ();
    public void (string );
    internal   ();
    internal void (  );
    public string ();
    public void (string );
    internal   ();
    internal void (  );
    public bool ();
    public void (bool );
}
internal class   : ValueType {
    private string ;
    private string ;
    private string ;
    private string ;
    public  (string , string , string , string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (MemoryStream );
    [ExtensionAttribute]
public static Byte[] (MemoryStream );
}
[AttributeUsageAttribute("1")]
[ComVisibleAttribute("True")]
internal class   : Attribute {
    private bool ;
    private bool ;
    public bool  { get; public set; }
    public  (bool );
    public bool ();
    public bool ();
    public void (bool );
}
internal class   : object {
    internal static bool (object );
    internal static int (object );
    internal static long (object );
    internal static string (object );
}
internal enum   : Enum {
    public int value__;
    public static   OpenConnection;
    public static   Disconnect;
    public static   Prepare;
    public static   Execute;
    public static   BeginTransaction;
    public static   Commit;
    public static   Rollback;
    public static   Error;
    public static   Custom;
    public static   CreatePoolManager;
    public static   CreatePoolGroup;
    public static   ConnectPooled;
    public static   ConnectNonPooled;
    public static   ActivateInPool;
    public static   ReturnToPool;
    public static   CreateObject;
}
internal class   : object {
    private string ;
    private bool ;
    private bool ;
    private bool ;
    private   ;
    private List`1< > ;
    public   ();
    public   ();
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal   ();
    internal void (  );
    internal List`1< >  ();
    internal void (List`1< > );
    public bool  ();
}
internal interface   {
    public abstract virtual void      (byte );
    public abstract virtual void      (int );
    public abstract virtual void      (string );
}
internal class   : object {
    private string ;
    private int ;
    private int ;
    private int ;
    private TcpClient ;
    private NetworkStream ;
    private int ;
    private bool  ;
    public sealed virtual void Dispose();
    public bool ();
    public void ();
    public bool ();
    public bool ();
    public void (  );
    public sealed virtual void      (byte );
    public sealed virtual void      (int );
    public sealed virtual void      (string );
    private static void (Byte[] );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int  ();
    public void (int );
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (StreamReader );
    public static StreamReader (string );
    public static StreamReader (string , Encoding );
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (ManualResetEvent );
}
internal class   : PropertyDescriptor {
    private DataColumn ;
    private DataRelation ;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public TypeConverter Converter { get; }
    public string DisplayName { get; }
    public  (DataColumn );
    public  (DataRelation );
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object );
    public virtual object GetValue(object );
    public virtual void ResetValue(object );
    public virtual void SetValue(object , object );
    public virtual bool ShouldSerializeValue(object );
    public virtual TypeConverter get_Converter();
    internal DataRelation ();
    internal DataColumn ();
    internal void (DataColumn );
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public virtual string get_DisplayName();
}
internal class   : Token {
    private int ;
    private int ;
    public int EndLineBegin { get; }
    public int EndLineNumber { get; }
    public int EndLinePosition { get; }
    public  (TokenType , object , int , int , int , int , int , int  , int  );
    public virtual int get_EndLineBegin();
    public virtual int get_EndLineNumber();
    public virtual int get_EndLinePosition();
}
internal class   : object {
    private   ;
    private string ;
    private string ;
    private int ;
    private int ;
    private int ;
    private int ;
    public sealed virtual void Dispose();
    public void ();
    public void ();
    public bool ();
    public void (  );
    public void (  );
    public void (  );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int  ();
    public void (int );
}
internal interface   {
    public abstract virtual byte      ();
    public abstract virtual int      ();
    public abstract virtual string      ();
}
internal class   :   {
    private string ;
    public virtual void      (  );
    public virtual void      (  );
    public string ();
    public void (string );
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static void (StreamWriter );
    public static StreamWriter (string );
    public static StreamWriter (string , Encoding );
    public static StreamWriter (string , bool , Encoding );
}
[ExtensionAttribute]
internal static class   : object {
    [ExtensionAttribute]
public static bool (Type , object );
    [ExtensionAttribute]
public static bool (Type , Type );
    [ExtensionAttribute]
public static MethodInfo (Type , string , BindingFlags , object , Type[] , object );
    [ExtensionAttribute]
public static ConstructorInfo (Type , BindingFlags , object , Type[] , object );
    [IteratorStateMachineAttribute(" /")]
private static IEnumerable`1<ConstructorInfo> (Type , BindingFlags );
    [ExtensionAttribute]
public static Object[] (Type , Type , bool );
    public static TypeCode (Type );
}
[ExtensionAttribute]
internal static class   : object {
    private static UInt32 ;
    private static  ();
    [ExtensionAttribute]
public static string (XmlReader );
    [ExtensionAttribute]
public static string (XmlReader );
    private static bool (XmlNodeType );
    [ExtensionAttribute]
public static void (XmlReader );
}
internal static class   : object {
    private static int ;
    private static int  ;
    private static Byte[] ;
    private static            ​    ​  ;
    private static                    ​    ;
    private static Byte[] ;
    private static int ;
    private static                            ;
    private static short ;
    private static  ();
    internal static string (int );
    private static string (int , bool );
    private static AssemblyName (Assembly );
    private static Byte[] (AssemblyName );
    private static bool (StackTrace , int );
    private static void (Byte[] , int , Byte[] );
}
internal static class   : object {
}
internal static class   : object {
    private static                    ;
    private static  ();
    internal static long ();
    private static bool ();
    private static bool ();
    private static int (Type );
}
public class Devart.Common.CheckInlineCommentFollowedCharHandler : MulticastDelegate {
    public CheckInlineCommentFollowedCharHandler(object object, IntPtr method);
    public virtual bool Invoke(string inlineComment, char ch);
    public virtual IAsyncResult BeginInvoke(string inlineComment, char ch, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Devart.Common.CommonLexem : object {
    public static int StringQuote;
    public static int IdentQuote;
    public static int IdentQuoteBegin;
    public static int IdentQuoteEnd;
    public static int InlineComment;
    public static int CommentBegin;
    public static int CommentEnd;
    public static int IdentPrefix;
    public static int CommentExtBegin;
    public static Hashtable symbols;
    public static Hashtable keywords;
    private static CommonLexem();
}
public class Devart.Common.ComponentAddedEventHandler : MulticastDelegate {
    public ComponentAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(IComponent component);
    public virtual IAsyncResult BeginInvoke(IComponent component, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.ComponentRemovedEventHandler : MulticastDelegate {
    public ComponentRemovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(IComponent component);
    public virtual IAsyncResult BeginInvoke(IComponent component, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Devart.Common.ConnectionLostCause : Enum {
    public int value__;
    public static ConnectionLostCause Connect;
    public static ConnectionLostCause Execute;
    public static ConnectionLostCause Prepare;
    public static ConnectionLostCause StartTransaction;
    public static ConnectionLostCause Read;
}
public enum Devart.Common.ConnectionLostContext : Enum {
    public int value__;
    public static ConnectionLostContext None;
    public static ConnectionLostContext HasPrepared;
    public static ConnectionLostContext InTransaction;
    public static ConnectionLostContext InFetch;
}
public class Devart.Common.ConnectionLostEventArgs : EventArgs {
    private object ;
    private ConnectionLostCause ;
    private int ;
    private RetryMode ;
    private ConnectionLostContext ;
    public object Component { get; }
    public ConnectionLostCause Cause { get; }
    public int AttemptNumber { get; }
    public RetryMode RetryMode { get; public set; }
    public ConnectionLostContext Context { get; public set; }
    public ConnectionLostEventArgs(object component, ConnectionLostCause cause, ConnectionLostContext context, RetryMode retryMode, int attemptNumber);
    public object get_Component();
    public ConnectionLostCause get_Cause();
    public int get_AttemptNumber();
    public RetryMode get_RetryMode();
    public void set_RetryMode(RetryMode value);
    public ConnectionLostContext get_Context();
    public void set_Context(ConnectionLostContext value);
}
public class Devart.Common.ConnectionLostEventHandler : MulticastDelegate {
    public ConnectionLostEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectionLostEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectionLostEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.DataViewManagerPropertyDescriptor : PropertyDescriptor {
    private PropertyDescriptor ;
    private DbDataTable ;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public TypeConverter Converter { get; }
    public DataViewManagerPropertyDescriptor(PropertyDescriptor originalDescriptor, DbDataTable dataTable);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual TypeConverter get_Converter();
    internal DbDataTable ();
}
public abstract class Devart.Common.DbCommandBase : DbCommand {
    private string ;
    private int ;
    private CommandType ;
    private UpdateRowSource ;
    private bool ;
    private bool ;
    private IDisposable ;
    private string  ;
    protected WeakReference weakDataReader;
    public static int DefaultCommandTimeout;
    private   ;
    [MergablePropertyAttribute("False")]
[RefreshPropertiesAttribute("1")]
[ ("DbCommand_CommandText")]
[CategoryAttribute("Data")]
[DefaultValueAttribute("")]
public string CommandText { get; public set; }
    [CategoryAttribute("Data")]
[ ("DbCommand_CommandTimeout")]
public int CommandTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[CategoryAttribute("Data")]
[ ("DbCommand_CommandType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandType CommandType { get; public set; }
    [EditorBrowsableAttribute("1")]
[DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
public bool DesignTimeVisible { get; public set; }
    [ ("DbCommand_UpdatedRowSource")]
[CategoryAttribute("Update")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    protected ILocalFailoverManager LocalFailoverManager { get; }
    [CategoryAttribute("Behavior")]
[ ("DbCommand_ParameterCheck")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
public bool ParameterCheck { get; public set; }
    protected internal string Sql { get; }
    protected internal IDisposable Stmt { get; }
    protected internal bool IsPrepared { get; }
    protected internal bool HasOpenReader { get; }
    protected internal DbDataReader DataReader { get; }
    protected DbCommandBase(DbCommandBase from);
    protected void SaveParameter(DbParameter result);
    public virtual void Cancel();
    public virtual int ExecuteNonQuery();
    protected virtual void PropertyChanging();
    [EditorBrowsableAttribute("2")]
public virtual void ResetCommandTimeout();
    protected virtual bool ShouldSerializeCommandTimeout();
    public int GetRecordCount();
    protected virtual string GetRecordCountSql(string commandText);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    protected virtual void Dispose(bool disposing);
    protected abstract virtual void ParseSqlParameters(string sql);
    protected abstract virtual void DescribeProcedure(string name);
    protected abstract virtual void ClearParameters();
    protected internal void SetParameterCheck(bool parameterCheck);
    protected internal void CreateParameters();
    protected internal void UpdateParameters();
    protected virtual string CreateSql();
    internal string ();
    protected abstract virtual string CreateStoredProcSql(string name);
    protected abstract virtual void AddCommand();
    protected abstract virtual void RemoveCommand();
    protected abstract virtual void AddDataReader(DbDataReader reader);
    public virtual void Prepare();
    public void PrepareCore();
    protected virtual bool IsReadOnlyOperation(IDisposable stmt);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior, bool nonQuery);
    protected abstract virtual ILocalFailoverManager get_LocalFailoverManager();
    public DbDataReader ExecutePageReader(CommandBehavior behavior, int startRecord, int maxRecords);
    protected virtual DbDataReader ExecutePageReaderInternal(CommandBehavior behavior, int startRecord, int maxRecords);
    public virtual object ExecuteScalar();
    protected abstract virtual IDisposable InternalPrepare(bool implicitPrepare, int startRecord, int maxRecords);
    protected abstract virtual DbDataReader InternalExecute(CommandBehavior behavior, IDisposable stmt, int startRecord, int maxRecords);
    protected virtual DbDataReader InternalExecute(CommandBehavior behavior, IDisposable stmt, int startRecord, int maxRecords, bool nonQuery);
    protected virtual void UseLoadBalancing(bool ignoreBalancing);
    protected virtual void Unprepare();
    internal void ();
    private object (CommandBehavior );
    public IAsyncResult BeginExecuteReader();
    public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior);
    public DbDataReader EndExecuteReader(IAsyncResult result);
    private object (CommandBehavior );
    public IAsyncResult BeginExecuteNonQuery();
    public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    public int EndExecuteNonQuery(IAsyncResult result);
    public bool get_ParameterCheck();
    public void set_ParameterCheck(bool value);
    protected internal string get_Sql();
    protected internal IDisposable get_Stmt();
    protected internal bool get_IsPrepared();
    protected internal bool get_HasOpenReader();
    protected internal DbDataReader get_DataReader();
}
public abstract class Devart.Common.DbCommandBuilder : DbCommandBuilderBase {
    private bool clearUniqueFieldsforSSISDestinations;
    protected String[] updatingFieldsList;
    private static bool ;
    internal static ArrayList ;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string QuotePrefix { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string QuoteSuffix { get; public set; }
    [MergablePropertyAttribute("False")]
[CategoryAttribute("Update")]
[ ("DbCommandBuilder_UpdatingFields")]
public string UpdatingFields { get; public set; }
    private static DbCommandBuilder();
    protected void BeforeCreatingCommand();
    protected void AfterCreatingCommand();
    public DbCommand GetInsertCommand();
    protected void CorrectParameterPrefixes(DbCommand command);
    public DbCommand GetInsertCommand(bool useColumnsForParameterNames);
    public DbCommand GetInsertCommand(String[] fields, bool useColumnsForParameterNames);
    protected void RowUpdatingHandler(object sender, RowUpdatingEventArgs ruevent);
    public DbCommand GetRefreshCommand();
    public DbCommand GetRefreshCommand(bool useColumnsForParameterNames);
    public DbCommand GetRefreshCommand(String[] fields, bool useColumnsForParameterNames);
    public DbCommand GetUpdateCommand();
    public DbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public DbCommand GetUpdateCommand(String[] fields, bool useColumnsForParameterNames);
    public DbCommand GetDeleteCommand();
    public DbCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual DataTable GetSchemaTable(DbCommand srcCommand);
    protected virtual DataTable GetUpdateSchemaTable(DataTable schemaTable);
    protected virtual void SetAlternativeKey(DataTable schemaTable);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    protected abstract virtual bool IsValidQuote(string quote, bool prefix);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public abstract virtual string get_UpdatingFields();
    public abstract virtual void set_UpdatingFields(string value);
}
public abstract class Devart.Common.DbCommandBuilderBase : DbCommandBuilder {
    private MissingMappingAction ;
    protected DataRow[] schemaRows;
    private bool ;
    protected DataRow[] keyRows;
    protected DataTable schemaTable;
    protected string tableName;
    private IDbCommand ;
    protected RefreshRowMode refreshRowMode;
    protected String[] refreshingFieldsList;
    private bool ;
    private bool ;
    private string ;
    protected String[] keyFieldsList;
    private bool ;
    [DefaultValueAttribute("")]
[ ("DbCommandBuilder_UpdatingTable")]
public string UpdatingTable { get; public set; }
    [ ("DbCommandBuilder_KeyFields")]
[DefaultValueAttribute("")]
public string KeyFields { get; public set; }
    [CategoryAttribute("Behavior")]
[ ("DbCommandBuilder_Quoted")]
[DefaultValueAttribute("False")]
public bool Quoted { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ ("DbCommandBuilder_RefreshMode")]
[CategoryAttribute("Update")]
public RefreshRowMode RefreshMode { get; public set; }
    protected Char[] QuoteSymbols { get; }
    [DefaultValueAttribute("")]
[ ("DbCommandBuilder_RefreshingFields")]
[CategoryAttribute("Update")]
public string RefreshingFields { get; public set; }
    [CategoryAttribute("Schema")]
[ ("DbCommandBuilder_UseSchema")]
[DefaultValueAttribute("True")]
public bool UseSchema { get; public set; }
    [ ("DbCommandBuilder_UseCatalog")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Schema")]
public bool UseCatalog { get; public set; }
    private void ();
    protected virtual string GetParameterPlaceholder(string parameterName);
    protected virtual IDbCommand BuildNewCommand(IDbCommand command);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    public IDbCommand GetRefreshCommand();
    public IDbCommand GetRefreshCommand(bool useColumnsForParameterNames);
    public IDbCommand GetRefreshCommand(String[] fields, bool useColumnsForParameterNames);
    internal IDbCommand (String[] , DataTableMapping , DataRow , bool , IDataParameterCollection );
    protected virtual string GetLastInsertIdKeyword();
    protected virtual string BuildAutoIncrementRefreshSql(DataTableMapping mappings, DataRow dataRow, bool useColumnsForParametersNames);
    protected virtual IDbCommand BuildRefreshSqlCommand(DataTableMapping mappings, DataRow dataRow, bool useColumnsForParametersNames, IDataParameterCollection mainCommandParameters);
    protected virtual void AddRefreshSql(IDbCommand command, StatementType statementType);
    protected virtual void AddRefreshSql(IDbCommand command, bool useColumnsForParameterNames, StatementType statementType);
    protected virtual void AddRefreshSql(IDbCommand command, String[] fields, bool useColumnsForParameterNames, StatementType statementType);
    public virtual void RefreshSchema();
    private void (IDbCommand , IDbCommand );
    private static string (string , IDataParameterCollection );
    private static bool (DataRowVersion , DataRowVersion );
    protected void BuildSchema(bool closeConnection);
    private void (bool );
    protected void ChangeSchema();
    protected string UnQuoteName(string name);
    private void ();
    protected virtual void InitSchemaRow(DataRow schemaRow);
    protected virtual bool ExcludeFromWhere(DataRow schemaRow);
    private DataColumn (string , DataTableMapping , DataRow );
    protected virtual string GetParameterName(string parameterName, IList parameters);
    private static IDbDataParameter (IDbCommand , int );
    private static void (IDbCommand , int );
    protected virtual string GetFullTableName(DataRow schemaRow);
    protected string GetFullTableName(string catalogName, string schemaName, string tableName);
    private void (StringBuilder , IDbCommand , int , DataTableMapping , DataRow , StatementType , bool , String[]  );
    private void (StringBuilder , IDbCommand , int , DataTableMapping , DataRow , StatementType , bool , IDataParameterCollection  , String[]  );
    private string (DataColumn , DataTableMapping , DataRow );
    internal IDbCommand (DataTableMapping , DataRow , bool );
    public string get_UpdatingTable();
    public void set_UpdatingTable(string value);
    public string get_KeyFields();
    public void set_KeyFields(string value);
    public virtual bool get_Quoted();
    public virtual void set_Quoted(bool value);
    public RefreshRowMode get_RefreshMode();
    public void set_RefreshMode(RefreshRowMode value);
    protected abstract virtual Char[] get_QuoteSymbols();
    public virtual string get_RefreshingFields();
    public virtual void set_RefreshingFields(string value);
    public virtual bool get_UseSchema();
    public virtual void set_UseSchema(bool value);
    public virtual bool get_UseCatalog();
    public virtual void set_UseCatalog(bool value);
}
public class Devart.Common.DbConnectionStringBuilder : DbConnectionStringBuilder {
    protected string initializationCommandInternal;
    protected string runOnceCommandInternal;
    [CategoryAttribute("Provider Behaviour")]
[ ("DbConnectionString_InitializationCommand")]
[DisplayNameAttribute("Initialization Command")]
[RefreshPropertiesAttribute("1")]
public string InitializationCommand { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ ("DbConnectionString_RunOnceCommand")]
[CategoryAttribute("Provider Behaviour")]
[DisplayNameAttribute("Run Once Command")]
public string RunOnceCommand { get; public set; }
    public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder, bool loginOnly);
    protected internal void ClearPropertyDescriptors();
    protected void SetValue(string keyword, bool value);
    protected void SetValue(string keyword, int value);
    protected void SetValue(string keyword, long value);
    protected void SetValue(string keyword, string value);
    private void (string , string );
    public string get_InitializationCommand();
    public void set_InitializationCommand(string value);
    public string get_RunOnceCommand();
    public void set_RunOnceCommand(string value);
}
public abstract class Devart.Common.DbDataAdapter : DbDataAdapter {
    internal int (DataTable , IDataReader );
    protected virtual int LoadTable(DataTable table, DbDataReader dataReader);
    public int FillPage(DataTable dataTable, int startRecord, int maxRecords);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDataReader dataReader);
    protected virtual void CustomizeDataTableColumns(DataTable[] tables);
    protected static bool CheckMissingSchemaAction(string fieldName, string tableName, MissingSchemaAction missingSchemaAction);
    protected static String[] GetIndexedFieldNames(ICollection`1<string> fieldNames);
    protected static String[] GetIndexedFieldNames(ICollection`1<string> fieldNames, bool firstColumnBugCompatibleMode);
    private static bool (ICollection`1<string> , string );
}
[DefaultMemberAttribute("Item")]
public abstract class Devart.Common.DbDataReaderBase : DbDataReader {
    private CommandBehavior ;
    private Hashtable ;
    protected bool closed;
    protected DataTable schemaTable;
    protected internal CommandBehavior CommandBehavior { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public bool EndOfData { get; }
    protected bool IsValidRow { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    protected DbDataReaderBase(CommandBehavior behavior);
    protected void AssertReaderHasColumns();
    protected void AssertReaderHasData();
    protected void AssertReaderIsOpen(string methodName);
    public virtual void Close();
    protected static DataTable CreateSchemaTable(int columnCount);
    protected virtual void FillSchemaTable(DataTable dataTable);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual DataTable GetSchemaTable();
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public bool GetBoolean(string name);
    public byte GetByte(string name);
    public long GetBytes(string name, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public char GetChar(string name);
    public long GetChars(string name, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public string GetDataTypeName(string name);
    public DateTime GetDateTime(string name);
    public DateTimeOffset GetDateTimeOffset(string name);
    public decimal GetDecimal(string name);
    public double GetDouble(string name);
    public Type GetFieldType(string name);
    public float GetFloat(string name);
    public Guid GetGuid(string name);
    public short GetInt16(string name);
    public int GetInt32(string name);
    public long GetInt64(string name);
    public Type GetProviderSpecificFieldType(string name);
    public object GetProviderSpecificValue(string name);
    public string GetString(string name);
    public object GetValue(string name);
    public bool IsDBNull(string name);
    protected bool IsCommandBehavior(CommandBehavior condition);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool NextResult();
    public virtual bool Read();
    protected internal CommandBehavior get_CommandBehavior();
    protected internal void SetCommandBehavior(CommandBehavior commandBehavior);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public abstract virtual bool get_EndOfData();
    protected abstract virtual bool get_IsValidRow();
    public virtual object get_Item(string name);
    public virtual object get_Item(int ordinal);
    public virtual int get_RecordsAffected();
    internal void ();
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
}
[DefaultMemberAttribute("Item")]
public class Devart.Common.DbDataRowView : object {
    private DataRowView ;
    private DataRow ;
    internal IList ;
    private int ;
    internal bool ;
    private bool ;
    private PropertyChangedEventHandler ;
    private bool  ;
    private Hashtable  ;
    public DataRow Row { get; public set; }
    public int Index { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public bool IsNew { get; }
    public bool IsEdit { get; }
    public string Error { get; }
    public DbDataTableView DataView { get; }
    internal DbDataRowView(DataRow , IList , DataRowView , int );
    private void (object , PropertyChangedEventArgs );
    private sealed virtual override AttributeCollection vfwrsvl95bbcf42dkssq24xlyx5bll4p    ();
    private sealed virtual override string vfwrsvl95bbcf42dkssq24xlyx5bll4p    ();
    private sealed virtual override string vfwrsvl95bbcf42dkssq24xlyx5bll4p    ();
    private sealed virtual override TypeConverter vfwrsvl95bbcf42dkssq24xlyx5bll4p    ();
    private sealed virtual override EventDescriptor vfwrsvl95bbcf42dkssq24xlyx5bll4p    ();
    private sealed virtual override PropertyDescriptor vfwrsvl95bbcf42dkssq24xlyx5bll4p    ();
    private sealed virtual override object vfwrsvl95bbcf42dkssq24xlyx5bll4p    (Type );
    private sealed virtual override EventDescriptorCollection vfwrsvl95bbcf42dkssq24xlyx5bll4p    ();
    private sealed virtual override EventDescriptorCollection vfwrsvl95bbcf42dkssq24xlyx5bll4p    (Attribute[] );
    private sealed virtual override object vfwrsvl95bbcf42dkssq24xlyx5bll4p    (PropertyDescriptor );
    private sealed virtual override PropertyDescriptorCollection vfwrsvl95bbcf42dkssq24xlyx5bll4p     ();
    private sealed virtual override PropertyDescriptorCollection vfwrsvl95bbcf42dkssq24xlyx5bll4p    (Attribute[] );
    internal object (DataColumn ,   );
    internal void (DataColumn , object , PropertyDescriptor );
    private bool  ();
    public sealed virtual void BeginEdit();
    public sealed virtual void CancelEdit();
    public sealed virtual void EndEdit();
    private sealed virtual override bool vfwrsvl95bbcf42dkssq24xlyx5bll4p     ();
    private sealed virtual override IList vfwrsvl95bbcf42dkssq24xlyx5bll4p     ();
    internal DataRowView  ();
    internal void (DataRowView );
    public DataRow get_Row();
    public void set_Row(DataRow value);
    internal bool  ();
    internal void (bool );
    public int get_Index();
    internal void (int );
    internal Hashtable  ();
    public DbDataTableView CreateChildView(string relationName);
    private Object[] (DataRelation );
    private bool (DataView , Object[] , DataView , Object[] );
    public DbDataTableView CreateChildView(DataRelation dataRelation);
    internal static Object[] (DataRow , DataRowVersion );
    internal static Object[] (DataRow , bool );
    public object get_Item(string columnName);
    public void set_Item(string columnName, object value);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public void Refresh();
    public void Delete();
    public bool get_IsNew();
    public bool get_IsEdit();
    public sealed virtual string get_Error();
    private sealed virtual override string vfwrsvl95bbcf42dkssq24xlyx5bll4p    (string );
    public DbDataTableView get_DataView();
    public void add_PropertyChanged(PropertyChangedEventHandler value);
    public void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public abstract class Devart.Common.DbDataSet : DataSet {
    private   ;
    private object ;
    private bool ;
    private CollectionChangeEventHandler ;
    private string ;
    private DbConnection ;
    private object ;
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public string Name { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public object Owner { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal bool Reloading { get; protected internal set; }
    [MergablePropertyAttribute("False")]
[BrowsableAttribute("False")]
public DbConnection Connection { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ ("DbDataSet_RomotingFormat")]
public SerializationFormat RemotingFormat { get; public set; }
    public DbDataSet(SerializationInfo info, StreamingContext context, bool ConstructSchema);
    protected virtual void Dispose(bool disposing);
    private void (object , CollectionChangeEventArgs );
    private sealed virtual override bool zt5ux7w2959jjdrvmdtv8gqhzwchgfq7    ();
    private sealed virtual override IList zt5ux7w2959jjdrvmdtv8gqhzwchgfq7    ();
    private void (object , CollectionChangeEventArgs );
    public void Fill();
    public void Clear();
    public void Update();
    public virtual DataSet Clone();
    internal DbDataTable (DbDataTable , PropertyDescriptor[] , int , Int32& );
    public XmlReadMode ReadXml(Stream stream);
    public XmlReadMode ReadXml(string fileName);
    public XmlReadMode ReadXml(TextReader reader);
    public XmlReadMode ReadXml(XmlReader reader);
    public XmlReadMode ReadXml(Stream stream, XmlReadMode mode);
    public XmlReadMode ReadXml(string fileName, XmlReadMode mode);
    public XmlReadMode ReadXml(TextReader reader, XmlReadMode mode);
    public XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode);
    private void ();
    public virtual DbDataTable CreateDataTable();
    public string get_Name();
    public void set_Name(string value);
    public object get_Owner();
    public void set_Owner(object value);
    protected internal bool get_Reloading();
    protected internal void set_Reloading(bool value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    protected virtual bool ShouldSerializeRelations();
    protected virtual bool ShouldSerializeTables();
    internal object ();
    private sealed virtual override void zt5ux7w2959jjdrvmdtv8gqhzwchgfq7    ();
    private sealed virtual override void zt5ux7w2959jjdrvmdtv8gqhzwchgfq7    ();
}
public abstract class Devart.Common.DbDataSourceEnumerator : DbDataSourceEnumerator {
    protected int port;
    private string ;
    private string ;
    private static  [] ;
    private static int ;
    protected DbDataSourceEnumerator(string factoryName, string serverPrefix, int port);
    private static DbDataSourceEnumerator();
    public virtual DataTable GetDataSources();
    protected virtual bool ProcessServer(string host, String& instanceName, String& isClustered, String& version);
    private IList (int );
    private static void ();
    private static bool (IList , IntPtr );
}
public abstract class Devart.Common.DbDataTable : DataTable {
    protected internal DataTable dataTable;
    private object ;
    private bool ;
    protected internal DbConnection connection;
    internal DbCommand ;
    protected DbCommand currenSelectCommand;
    internal DbCommand ;
    internal DbCommand ;
    internal DbCommand ;
    protected IDataReader reader;
    private bool ;
    private bool  ;
    private bool  ;
    private bool  ;
    private int  ;
    private int  ;
    private bool  ;
    private DbDataTableView  ;
    internal EventHandler  ;
    private   ;
    internal DataTableMapping  ;
    private bool  ;
    private bool  ;
    private object  ;
    private object  ;
    private int  ;
    private int  ;
    private bool  ;
    protected internal int disableEvents;
    protected internal int storeEvents;
    protected internal int disableUpdateEvents;
    internal bool  ;
    protected PropertyDescriptorCollection propertyDescriptorsCache;
    protected Hashtable readerMappings;
    private bool  ;
    private bool  ;
    private bool  ;
    private int  ;
    protected bool hasComplexFields;
    protected bool returnProviderSpecificTypesInternal;
    private bool  ;
    private bool  ;
    private bool  ;
    private static object  ;
    private static object  ;
    private static object  ;
    private static object  ;
    private static object  ;
    private bool  ;
    private bool  ;
    private MissingSchemaAction  ;
    private int  ;
    protected DataTable schemaTable;
    private static bool  ;
    private bool  ;
    protected int indexOfColumnOnlyOriginalValue;
    private int  ;
    private DataRow  ;
    protected DbDataAdapter dataAdapter;
    protected DbCommandBuilder commandBuilder;
    private string  ;
    private ArrayList  ;
    private bool  ;
    private int  ;
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    [DefaultValueAttribute("False")]
[ ("DbDataTable_QueryRecordCount")]
[CategoryAttribute("Live Data")]
public bool QueryRecordCount { get; public set; }
    protected bool UserDefinedColumns { get; protected set; }
    [BrowsableAttribute("False")]
public DataTable SchemaTable { get; }
    [BrowsableAttribute("False")]
public int RecordCount { get; }
    protected internal DbCommandBuilder CommandBuilderInternal { get; }
    protected internal DbDataAdapter DataAdapterInternal { get; }
    [ ("DbTable_Active")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Live Data")]
public bool Active { get; public set; }
    [CategoryAttribute("Live Data")]
[ ("DbTable_StartRecord")]
[DefaultValueAttribute("0")]
public int StartRecord { get; public set; }
    [DefaultValueAttribute("0")]
[ ("DbTable_MaxRecords")]
[CategoryAttribute("Live Data")]
public int MaxRecords { get; public set; }
    public DataTableMapping TableMapping { get; }
    [MergablePropertyAttribute("False")]
[BrowsableAttribute("False")]
public DbConnection Connection { get; public set; }
    [BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public DbCommand SelectCommand { get; public set; }
    [BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public DbCommand InsertCommand { get; public set; }
    [BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public DbCommand UpdateCommand { get; public set; }
    [MergablePropertyAttribute("False")]
[BrowsableAttribute("False")]
public DbCommand DeleteCommand { get; public set; }
    [ ("DbTable_CachedUpdates")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Update")]
public bool CachedUpdates { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Live Data")]
[ ("DbTable_FetchAll")]
public bool FetchAll { get; public set; }
    [CategoryAttribute("Live Data")]
[ ("DbTable_NonBlocking")]
[DefaultValueAttribute("False")]
public bool NonBlocking { get; public set; }
    protected EventHandlerList Events { get; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object Owner { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
public bool DesignTimeVisible { get; public set; }
    [MergablePropertyAttribute("False")]
public DataColumnCollection Columns { get; }
    [MergablePropertyAttribute("False")]
public ConstraintCollection Constraints { get; }
    [MergablePropertyAttribute("False")]
public DataColumn[] PrimaryKey { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
protected internal bool Reloading { get; protected internal set; }
    [ ("DbDataTable_KeyFields")]
[DefaultValueAttribute("")]
[CategoryAttribute("Update")]
public string UpdatingKeyFields { get; public set; }
    [MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
[CategoryAttribute("Update")]
[ ("DbDataTable_UpdatingFields")]
public string UpdatingFields { get; public set; }
    [MergablePropertyAttribute("False")]
public string UpdatingTable { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Update")]
[ ("DbDataTable_Quoted")]
public bool Quoted { get; public set; }
    [ ("DbDataTable_RefreshMode")]
[CategoryAttribute("Update")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public RefreshRowMode RefreshMode { get; public set; }
    [ ("DbDataTable_RefreshingFields")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
[CategoryAttribute("Update")]
public string RefreshingFields { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ ("DbDataTable_ConflictOption")]
[CategoryAttribute("Update")]
public ConflictOption ConflictOption { get; public set; }
    [DefaultValueAttribute("1")]
[ ("DbDataTable_UpdateBatchSize")]
[CategoryAttribute("Update")]
public int UpdateBatchSize { get; public set; }
    [CategoryAttribute("Fill")]
[ ("DbDataTable_ReturnProviderSpecificTypes")]
[DefaultValueAttribute("False")]
public bool ReturnProviderSpecificTypes { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("True")]
public bool RetrieveAutoIncrementSeed { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ ("DbDataTable_RemotingFormat")]
public SerializationFormat RemotingFormat { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ ("DbDataTable_MissingSchemaAction")]
public MissingSchemaAction MissingSchemaAction { get; public set; }
    protected CommandBehavior ExecuteCommBehavior { get; }
    public static bool DisableListChangedEvents { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CancelEditRowIfUpdateFailed { get; public set; }
    private static DbDataTable();
    protected DbDataTable(SerializationInfo info, StreamingContext context);
    protected virtual void Dispose(bool disposing);
    public void add_Disposed(EventHandler value);
    public void remove_Disposed(EventHandler value);
    public virtual void EndInit();
    private void ();
    private void ();
    internal void (bool );
    internal void ();
    internal void (object , EventArgs );
    private void ();
    private sealed virtual override void q3s5qtycx6s9q22e9fepkvse5y3pmpk9    (EventHandler );
    private sealed virtual override void q3s5qtycx6s9q22e9fepkvse5y3pmpk9    (EventHandler );
    private sealed virtual override bool q3s5qtycx6s9q22e9fepkvse5y3pmpk9     ();
    internal void (bool );
    private void ();
    public int Fill(Object[] parameterValues);
    public int Fill();
    private void (CultureInfo );
    private void (object , EventArgs );
    private void (object , EventArgs );
    public object get_SyncRoot();
    public bool get_QueryRecordCount();
    public void set_QueryRecordCount(bool value);
    public void add_RowFetched(EventHandler value);
    public void remove_RowFetched(EventHandler value);
    public void add_FetchFinished(EventHandler value);
    public void remove_FetchFinished(EventHandler value);
    protected void FetchToPosition(int index);
    protected virtual Object[] GetDataRow();
    protected static bool IsCatchableExceptionType(Exception e);
    private void (object , FillErrorEventArgs );
    protected bool RaiseFillError(Exception& e, Object[] dataValues);
    protected virtual void GetField(Object[] row, int rowInd, IDataReader reader, int readerInd);
    protected virtual void CheckReaderMappings();
    protected string GetColumnNameFromMapping(string sourceName);
    public bool Read();
    internal void (int , bool , bool );
    protected virtual void FetchCompleted(DataTable schemaTable);
    private void ();
    public IAsyncResult BeginFill(AsyncCallback callback, object stateObject);
    public void EndFill(IAsyncResult result);
    public void SuspendFill();
    public void SuspendFill(bool wait);
    protected DbConnection GetConnection();
    private sealed virtual override bool q3s5qtycx6s9q22e9fepkvse5y3pmpk9     ();
    protected virtual void AddPropertyDescriptor(PropertyDescriptorCollection propertyDescriptors, DataColumn dataColumn);
    private void (PropertyDescriptor[] );
    internal PropertyDescriptorCollection (PropertyDescriptor[] );
    protected virtual PropertyDescriptorCollection GetProperties(PropertyDescriptor[] listAccessors);
    internal PropertyDescriptorCollection (PropertyDescriptor[] );
    private sealed virtual override IList q3s5qtycx6s9q22e9fepkvse5y3pmpk9     ();
    public void Open();
    protected virtual void CacheGetSchemaTable();
    protected virtual void ClearSchemaTableCache();
    protected bool get_UserDefinedColumns();
    protected void set_UserDefinedColumns(bool value);
    private void (object , CollectionChangeEventArgs );
    private void (object , CollectionChangeEventArgs );
    protected virtual DataTable GetSchemaTable();
    public DataTable get_SchemaTable();
    protected virtual void CreateColumns();
    protected virtual void CreateColumnsInternal(bool throwOnEmptySchemaTable);
    protected static String[] GetIndexedFieldNames(ICollection`1<string> fieldNames);
    private static bool (ICollection`1<string> , string );
    protected virtual void ColumnAdded(DataColumn column, DataRow schemaRow, int index);
    protected virtual void CheckColumnsCreated(bool throwOnEmptySchemaTable);
    public void CancelFetch();
    protected virtual void CloseReader();
    public void Close();
    public void Clear();
    private void (bool );
    private void ();
    public int get_RecordCount();
    internal bool  ();
    internal DataRow (int );
    internal void (DataRow& , bool );
    private void (DataRow , DataRowAction );
    internal void (DataRow );
    private object  ();
    private void (object );
    private static bool (DataRow , DataRow );
    internal void (int );
    internal void (DataRow );
    protected virtual void CreateDataAdapter();
    protected void CheckDataAdapterCreated();
    protected internal DbCommandBuilder get_CommandBuilderInternal();
    protected internal DbDataAdapter get_DataAdapterInternal();
    public void FillSchema();
    private int (int , int );
    public void RefreshRow(DataRow row);
    public int FillPage(int startRecord, int maxRecords);
    public int FillPage(int startRecord, int maxRecords, Object[] parameterValues);
    protected void CheckSelectCommand();
    private void (Object[] );
    protected virtual void ExecuteCommand();
    protected void Prepare();
    private void  ();
    private bool  ();
    private void  ();
    protected int GetRecordCount();
    protected virtual char GetParameterPlaceholder();
    protected virtual string GetParameterName(string parameterName);
    private void  ();
    private void  ();
    private static IDataParameter (DbCommand , int );
    private void  ();
    private int (DataRow );
    protected virtual void BeforeUpdatingRow(DataRow row);
    protected virtual void AfterUpdatingRow(DataRow row);
    public virtual int Update();
    public int UpdateRows(DataRow[] datarows);
    protected virtual DbCommand CloneCommand(DbCommand command);
    internal DbDataTable (DbDataTable );
    public virtual DataTable Clone();
    public DataRow[] Select();
    public DataRow[] Select(string filterExpression);
    public DataRow[] Select(string filterExpression, string sort);
    public DataRow[] Select(string filterExpression, string sort, DataViewRowState recordStates);
    internal static void (DataTable , DbDataTable );
    private static ForeignKeyConstraint (ForeignKeyConstraint );
    private static UniqueConstraint (UniqueConstraint );
    private static DataColumn (DataColumn );
    public void add_FillError(FillErrorEventHandler value);
    public void remove_FillError(FillErrorEventHandler value);
    public bool get_Active();
    public void set_Active(bool value);
    public int get_StartRecord();
    public void set_StartRecord(int value);
    public int get_MaxRecords();
    public void set_MaxRecords(int value);
    public DataTableMapping get_TableMapping();
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public DbCommand get_SelectCommand();
    public void set_SelectCommand(DbCommand value);
    public DbCommand get_InsertCommand();
    public void set_InsertCommand(DbCommand value);
    public DbCommand get_UpdateCommand();
    public void set_UpdateCommand(DbCommand value);
    public DbCommand get_DeleteCommand();
    public void set_DeleteCommand(DbCommand value);
    public bool get_CachedUpdates();
    public void set_CachedUpdates(bool value);
    public virtual bool get_FetchAll();
    public virtual void set_FetchAll(bool value);
    public bool get_NonBlocking();
    public void set_NonBlocking(bool value);
    private void (object , EventArgs );
    protected virtual void OnTableClearing(DataTableClearEventArgs e);
    protected virtual void OnRowDeleting(DataRowChangeEventArgs e);
    protected virtual void OnTableNewRow(DataTableNewRowEventArgs e);
    protected EventHandlerList get_Events();
    protected void SetOwnerReal(object value);
    internal void (EventHandler );
    internal void (EventHandler );
    internal string  ();
    public string get_Name();
    public void set_Name(string value);
    public object get_Owner();
    public void set_Owner(object value);
    internal object (object , Type , IEditableObject , PropertyDescriptor );
    protected virtual object GetPropertyValue(object obj, Type objType, IEditableObject objectItemView, PropertyDescriptor propertyDescriptor);
    internal object (object , Type , IEditableObject , PropertyDescriptor );
    protected virtual object GetViewValue(object obj, Type objType, IEditableObject objectItemView, PropertyDescriptor propertyDescriptor);
    internal Type (Type );
    protected virtual Type GetPropertyType(Type objType);
    internal void (DataRow );
    protected virtual void InitNewRow(DataRow newRow);
    public bool get_DesignTimeVisible();
    public void set_DesignTimeVisible(bool value);
    internal static ITypedList (object , string , Object& );
    private static ITypedList (ITypedList , string , string , Object& , object );
    protected virtual void OnRowChanged(DataRowChangeEventArgs e);
    protected virtual void OnRowChanging(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleted(DataRowChangeEventArgs e);
    public void ReadComplete(DataRow row);
    public DataColumnCollection get_Columns();
    public ConstraintCollection get_Constraints();
    protected void SetPrimaryKey(DataColumn[] value);
    public DataColumn[] get_PrimaryKey();
    public void set_PrimaryKey(DataColumn[] value);
    private void  ();
    private bool  ();
    private bool  ();
    private bool  ();
    protected internal bool get_Reloading();
    protected internal void set_Reloading(bool value);
    public string get_UpdatingKeyFields();
    public void set_UpdatingKeyFields(string value);
    public string get_UpdatingFields();
    public void set_UpdatingFields(string value);
    public string get_UpdatingTable();
    public void set_UpdatingTable(string value);
    public bool get_Quoted();
    public void set_Quoted(bool value);
    public RefreshRowMode get_RefreshMode();
    public void set_RefreshMode(RefreshRowMode value);
    public string get_RefreshingFields();
    public void set_RefreshingFields(string value);
    public virtual ConflictOption get_ConflictOption();
    public virtual void set_ConflictOption(ConflictOption value);
    public int get_UpdateBatchSize();
    public void set_UpdateBatchSize(int value);
    public bool get_ReturnProviderSpecificTypes();
    public void set_ReturnProviderSpecificTypes(bool value);
    public bool get_RetrieveAutoIncrementSeed();
    public void set_RetrieveAutoIncrementSeed(bool value);
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    public MissingSchemaAction get_MissingSchemaAction();
    public void set_MissingSchemaAction(MissingSchemaAction value);
    protected virtual void SetOwner(object value);
    protected int FillPage(IDataReader reader, int startRecord, int maxRecords);
    protected virtual int FillPage(DbCommand command, int startRecord, int maxRecords);
    protected virtual string AddWhere(string commandText, string whereText);
    protected object MakeModifiedObjectTree(DbDataRowView dataRowView, object oldValue, PropertyDescriptor propertyDescriptor);
    protected virtual bool NeedCloneColumnValue(object oldValue);
    protected virtual object CloneValue(object oldValue, DataColumn column);
    internal object  ();
    internal void (DbDataTableView );
    internal void (ListChangedEventArgs );
    internal void  ();
    private void (DataRow , DataRow );
    protected virtual void Open(IDataReader reader);
    protected virtual void OpenInternal(IDataReader reader);
    protected virtual void DecrementAutoIncrementCurrent(DataRow row);
    internal void (DataRow );
    protected virtual CommandBehavior get_ExecuteCommBehavior();
    internal bool  ();
    internal void (bool );
    internal void  ();
    internal void  ();
    public static bool get_DisableListChangedEvents();
    public static void set_DisableListChangedEvents(bool value);
    public bool get_CancelEditRowIfUpdateFailed();
    public void set_CancelEditRowIfUpdateFailed(bool value);
}
public class Devart.Common.DbDataTableView : object {
    private bool ;
    private ListChangedEventHandler ;
    private DbDataRowView ;
    private DbDataRowView ;
    private int ;
    internal DbDataTable ;
    internal DataView ;
    internal DbDataRowView  ;
    private ArrayList  ;
    private ArrayList  ;
    internal int  ;
    private ArrayList  ;
    private EventHandlerList  ;
    private static object  ;
    private static object  ;
    private static object  ;
    private static object  ;
    private static object  ;
    private static object  ;
    internal ListChangedEventArgs  ;
    private MethodInfo  ;
    protected EventHandlerList Events { get; }
    public DbDataTable DataTable { get; }
    public DbDataTableView(DbDataTable table);
    public DbDataTableView(DbDataTable table, string RowFilter, string Sort, DataViewRowState RowState);
    internal DbDataTableView(DbDataTable , DataView );
    private static DbDataTableView();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override IEnumerator catczg2bqhd4klptjt9k6mve9fwtfpwy    ();
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (Array , int );
    private sealed virtual override int catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override object catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override int catczg2bqhd4klptjt9k6mve9fwtfpwy    (object );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy    (object );
    private sealed virtual override int catczg2bqhd4klptjt9k6mve9fwtfpwy    (object );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (int , object );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (object );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (int );
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override object catczg2bqhd4klptjt9k6mve9fwtfpwy    (int );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (int , object );
    private object (int , bool );
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override ListSortDirection catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override PropertyDescriptor catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (PropertyDescriptor );
    private sealed virtual override object catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (PropertyDescriptor , ListSortDirection );
    private sealed virtual override int catczg2bqhd4klptjt9k6mve9fwtfpwy    (PropertyDescriptor , object );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (PropertyDescriptor );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    ();
    internal void ();
    internal bool  ();
    internal void (int );
    internal void (int );
    internal void (int , int );
    internal void (object , ListChangedEventArgs );
    internal void (object , ListChangedEventArgs );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (ListChangedEventHandler );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (ListChangedEventHandler );
    protected EventHandlerList get_Events();
    private sealed virtual override PropertyDescriptorCollection catczg2bqhd4klptjt9k6mve9fwtfpwy    (PropertyDescriptor[] );
    private sealed virtual override string catczg2bqhd4klptjt9k6mve9fwtfpwy    (PropertyDescriptor[] );
    internal void ();
    internal void (DataRow );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (int );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (int );
    private int (DbDataRowView );
    internal bool  ();
    internal void (DbDataRowView );
    private static bool (DataRow , Object[] );
    internal DbDataRowView  ();
    internal void (DbDataRowView );
    public DbDataTable get_DataTable();
    internal void (DbDataRowView );
    internal int  ();
    internal DbDataRowView  ();
    private DbDataRowView (int );
    private ArrayList  ();
    private MethodInfo  ();
    internal bool (DataRow );
    internal void (DataRow , bool );
    internal void ();
    internal bool  ();
    public void RefreshRow(DbDataRowView rowView);
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (ListSortDescriptionCollection );
    private sealed virtual override string catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    (string );
    private sealed virtual override void catczg2bqhd4klptjt9k6mve9fwtfpwy    ();
    private sealed virtual override ListSortDescriptionCollection catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    private sealed virtual override bool catczg2bqhd4klptjt9k6mve9fwtfpwy     ();
    internal void (object , PropertyChangedEventArgs );
    public void add_PropertyChanged(PropertyChangedEventHandler value);
    public void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public abstract class Devart.Common.DbDump : Component {
    private DbConnection ;
    private string ;
    private StringCollection ;
    private bool ;
    private bool ;
    private DumpMode ;
    private bool ;
    private   ;
    public DbConnection Connection { get; public set; }
    public string Tables { get; public set; }
    public string DumpText { get; public set; }
    [CategoryAttribute("Options")]
[ ("DbDump_QuoteIdentifier")]
[DefaultValueAttribute("False")]
public bool QuoteIdentifier { get; public set; }
    [CategoryAttribute("Options")]
[DefaultValueAttribute("False")]
[ ("DbDump_IncludeDrop")]
public bool IncludeDrop { get; public set; }
    [CategoryAttribute("Options")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ ("DbDump_Mode")]
public DumpMode Mode { get; public set; }
    [ ("DbDump_GenerateHeader")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool GenerateHeader { get; public set; }
    protected Encoding Encoding { get; }
    protected StringCollection InnerTables { get; }
    protected bool BackupData { get; }
    protected bool BackupSchema { get; }
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public virtual string get_Tables();
    public virtual void set_Tables(string value);
    public virtual string get_DumpText();
    public virtual void set_DumpText(string value);
    public bool get_QuoteIdentifier();
    public void set_QuoteIdentifier(bool value);
    public bool get_IncludeDrop();
    public void set_IncludeDrop(bool value);
    public DumpMode get_Mode();
    public void set_Mode(DumpMode value);
    public bool get_GenerateHeader();
    public void set_GenerateHeader(bool value);
    protected abstract virtual Encoding get_Encoding();
    protected StringCollection get_InnerTables();
    protected bool get_BackupData();
    protected bool get_BackupSchema();
    public void Backup();
    public void Backup(string fileName);
    public void Backup(Stream stream);
    public void Backup(TextWriter writer);
    public IAsyncResult BeginBackup();
    public IAsyncResult BeginBackup(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackup(string fileName);
    public IAsyncResult BeginBackup(string fileName, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackup(Stream stream);
    public IAsyncResult BeginBackup(Stream stream, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackup(TextWriter writer);
    public IAsyncResult BeginBackup(TextWriter writer, AsyncCallback callback, object stateObject);
    public void EndBackup(IAsyncResult result);
    public void BackupQuery(string query);
    public void BackupQuery(string query, string fileName);
    public void BackupQuery(string query, Stream stream);
    public void BackupQuery(string query, TextWriter writer);
    public IAsyncResult BeginBackupQuery(string query);
    public IAsyncResult BeginBackupQuery(string query, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackupQuery(string query, string fileName);
    public IAsyncResult BeginBackupQuery(string query, string fileName, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackupQuery(string query, Stream stream);
    public IAsyncResult BeginBackupQuery(string query, Stream stream, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginBackupQuery(string query, TextWriter writer);
    public IAsyncResult BeginBackupQuery(string query, TextWriter writer, AsyncCallback callback, object stateObject);
    public void EndBackupQuery(IAsyncResult result);
    public void Restore();
    public void Restore(string fileName);
    public void Restore(Stream stream);
    public void Restore(TextReader reader);
    public IAsyncResult BeginRestore();
    public IAsyncResult BeginRestore(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginRestore(string fileName);
    public IAsyncResult BeginRestore(string fileName, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginRestore(Stream stream);
    public IAsyncResult BeginRestore(Stream stream, AsyncCallback callback, object stateObject);
    public IAsyncResult BeginRestore(TextReader reader);
    public IAsyncResult BeginRestore(TextReader reader, AsyncCallback callback, object stateObject);
    public void EndRestore(IAsyncResult result);
    protected abstract virtual void InternalBackup(TextWriter writer);
    protected abstract virtual void InternalBackupQuery(TextWriter writer, string query);
    protected abstract virtual void InternalRestore(TextReader reader);
    private void ();
    private void (string );
    private void (Stream );
    private void (TextWriter );
    private void (string );
    private void (string , string );
    private void (string , Stream );
    private void (string , TextWriter );
    private void ();
    private void (string );
    private void (Stream );
    private void (TextReader );
    protected void CheckConnection();
    private string ();
    private void (string );
    private bool ();
    private void ( , Object[] );
    private void (IAsyncResult );
    private void (string , bool );
}
[DefaultMemberAttribute("Item")]
public abstract class Devart.Common.DbLoader : Component {
    private DbConnection ;
    private string ;
    private DbLoaderColumnCollection ;
    protected static object errorEventKey;
    protected static object rowsCopiedEventKey;
    protected bool isOpened;
    protected int loaderBufferSize;
    [MergablePropertyAttribute("False")]
public DbConnection Connection { get; public set; }
    [CategoryAttribute("Options")]
[DefaultValueAttribute("262144")]
[ ("DbLoader_BufferSize")]
public int BufferSize { get; public set; }
    [MergablePropertyAttribute("False")]
[CategoryAttribute("Data")]
[ ("DbLoader_TableName")]
[RefreshPropertiesAttribute("2")]
public string TableName { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[CategoryAttribute("Data")]
[ ("DbLoader_Columns")]
[MergablePropertyAttribute("False")]
public DbLoaderColumnCollection Columns { get; }
    unknown object Item {public set; }
    unknown object Item {public set; }
    public DbLoader(string tableName);
    public DbLoader(string tableName, DbConnection connection);
    private static DbLoader();
    internal void ();
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public virtual string get_TableName();
    public virtual void set_TableName(string value);
    public DbLoaderColumnCollection get_Columns();
    public void SetValue(string name, object value);
    public void SetNull(int i);
    public void SetNull(string name);
    protected void CheckOpen();
    protected void CheckConnection();
    protected void CheckTableName();
    protected int GetColumnIndex(string name);
    public void LoadTable(DataTable table);
    public void LoadTable(DataTable table, DataRowState rowState);
    public void LoadTable(DataTable table, IColumnMappingCollection columnMappings);
    public void LoadTable(DataRow[] rows);
    public void LoadTable(IDataReader reader);
    private void (DataRow[] , IDataReader , DataColumnCollection , IColumnMappingCollection );
    protected virtual void LoadTableInternal(DataRow[] rows, IDataReader reader, DataColumnCollection tableColumns, IColumnMappingCollection columnMappings);
    protected abstract virtual string QuoteIfNeed(string name);
    protected abstract virtual string UnQuote(string name);
    public abstract virtual void Open();
    public abstract virtual void Close(bool sendData);
    public void Close();
    public abstract virtual void NextRow();
    public abstract virtual void CreateColumns();
    public abstract virtual void SetValue(int i, object value);
    public void set_Item(string columnName, object value);
    public void set_Item(int columnIndex, object value);
    protected abstract virtual DbLoaderColumnCollection InitColumns();
    protected abstract virtual DbLoaderColumn CreateColumn(string name, Type type);
}
public class Devart.Common.DbLoaderColumn : MarshalByRefObject {
    private string ;
    private int ;
    private int ;
    private int ;
    public string Name { get; public set; }
    [DefaultValueAttribute("0")]
public int Size { get; public set; }
    [DefaultValueAttribute("0")]
public int Precision { get; public set; }
    [DefaultValueAttribute("0")]
public int Scale { get; public set; }
    public DbLoaderColumn(string name, int size, int precision, int scale);
    public string get_Name();
    public void set_Name(string value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual int get_Precision();
    public virtual void set_Precision(int value);
    public int get_Scale();
    public void set_Scale(int value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Devart.Common.DbLoaderColumnCollection : CollectionBase {
    public DbLoaderColumn Item { get; public set; }
    public DbLoaderColumn Item { get; public set; }
    public DbLoaderColumn get_Item(int index);
    public void set_Item(int index, DbLoaderColumn value);
    public DbLoaderColumn get_Item(string name);
    public void set_Item(string name, DbLoaderColumn value);
    public int Add(DbLoaderColumn value);
    public void Insert(int index, DbLoaderColumn value);
    public int IndexOf(DbLoaderColumn value);
    public int IndexOf(string name);
    public bool Contains(DbLoaderColumn value);
    public bool Contains(string name);
    public void Remove(DbLoaderColumn value);
    public void CopyTo(DbLoaderColumn[] array, int index);
    protected virtual void OnInsert(int index, object value);
    private int (string );
    private int ();
}
public abstract class Devart.Common.DbMonitor : Component {
    private bool ;
    private bool ;
    private string ;
    private bool ;
    private static Dictionary`2<int, long> ;
    private static   ;
    private MonitorEventHandler ;
    private MonitorEventFilter  ;
    protected string ProductName { get; }
    [DefaultValueAttribute("False")]
[ ("DbMonitor_IsActive")]
[CategoryAttribute("Behavior")]
public bool IsActive { get; public set; }
    [ ("DbMonitor_UseIdeOutput")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool UseIdeOutput { get; public set; }
    [ ("DbMonitor_Host")]
[DefaultValueAttribute("localhost")]
public string Host { get; public set; }
    [DefaultValueAttribute("1000")]
[ ("DbMonitor_Port")]
public int Port { get; public set; }
    [ ("DbMonitor_UseApp")]
[DefaultValueAttribute("True")]
public bool UseApp { get; public set; }
    [DefaultValueAttribute("1000")]
[ ("DbMonitor_EventQueueLimit")]
public int EventQueueLimit { get; public set; }
    [ ("DbMonitor_Filter")]
[CategoryAttribute("Behavior")]
public MonitorEventFilter Filter { get; public set; }
    [ ("DbMonitor_SendCallStack")]
public bool SendCallStack { get; public set; }
    protected bool DbMonitorAppAvailable { get; }
    private static DbMonitor();
    private sealed virtual override void 33jfm3wpttpqvpdvdakafphake2mlnj2    ();
    protected virtual void Dispose(bool disposing);
    private void ();
    protected abstract virtual string get_ProductName();
    internal void (IDbDataParameter , String& , String& , String& , String& );
    private static void (DbMonitor , object , MonitorEventArgs );
    private static void (DbMonitor , object , MonitorEventArgs , bool );
    protected static void OnPoolManagerCreate(DbMonitor monitor, MonitorTracePoint tracePoint, object sender);
    protected static void OnPoolGroupCreate(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, string connectionString);
    protected static void OnConnect(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, string connectionString, bool pooled);
    protected internal static void OnDisconnect(DbMonitor monitor, MonitorTracePoint tracePoint, object sender);
    protected static void OnTakeFromPool(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender, string connectionString, object dbConnectionPool);
    private static void (DbMonitor , object , object , string , string );
    protected static void OnReturnToPool(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, object dbConnectionPool, string connectionString);
    protected static void OnActivate(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender, string connectionString);
    protected static void OnDeactivate(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, string connectionString);
    protected internal static void OnExecute(DbMonitor monitor, MonitorTracePoint tracePoint, IDbCommand sender, string sql, int rowsAffected);
    protected internal static void OnPrepare(DbMonitor monitor, MonitorTracePoint tracePoint, IDbCommand sender, string sql);
    protected internal static void OnBeginLocalTransaction(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnBeginDistributedTransaction(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnBeginTransactionScopeLocalTransaction(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnPrepareCommit(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnCommit(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnRollback(DbMonitor monitor, MonitorTracePoint tracePoint, IDbConnection sender);
    protected internal static void OnError(DbMonitor monitor, Exception e, object sender);
    protected internal static void OnCustomAction(DbMonitor monitor, MonitorTracePoint tracePoint, string description, object sender);
    protected static void OnCreate(DbMonitor monitor, MonitorTracePoint tracePoint, object sender, bool isParentMessage);
    private string (object , String[] );
    private String[] ();
    private static string (MethodBase );
    private static string (Type );
    private static void (object );
    private static double (object , MonitorTracePoint );
    protected void OnTraceEvent(object sender, MonitorEventArgs e, bool parentMessage);
    internal void ();
    private   (object , MonitorEventArgs );
    private void (MonitorTracePoint ,   , bool );
    protected virtual object GetParentObject(object sender);
    protected abstract virtual string GetObjectName(object obj);
    protected abstract virtual int GetPoolGroupConnectionCount(object dbConnectionPool);
    protected virtual void GetParameterInfo(IDbDataParameter parameter, String& name, String& dbType, String& direction, String& value);
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
    protected void SetMonitorActive(bool value);
    public bool get_UseIdeOutput();
    public void set_UseIdeOutput(bool value);
    public string get_Host();
    public void set_Host(string value);
    public int get_Port();
    public void set_Port(int value);
    public bool get_UseApp();
    public void set_UseApp(bool value);
    public int get_EventQueueLimit();
    public void set_EventQueueLimit(int value);
    [CompilerGeneratedAttribute]
public void add_TraceEvent(MonitorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TraceEvent(MonitorEventHandler value);
    [CompilerGeneratedAttribute]
public MonitorEventFilter get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(MonitorEventFilter value);
    protected bool HasFilter(MonitorEventFilter filter);
    public bool get_SendCallStack();
    public void set_SendCallStack(bool value);
    protected abstract virtual bool get_DbMonitorAppAvailable();
}
public abstract class Devart.Common.DbParameterBase : DbParameter {
    private object ;
    private ParameterDirection ;
    private bool ;
    private string ;
    private object ;
    private int ;
    private string ;
    private bool  ;
    private DataRowVersion  ;
    private object  ;
    protected object CoercedValue { get; protected set; }
    [RefreshPropertiesAttribute("1")]
[ ("DataParameterdirection")]
[CategoryAttribute("Data")]
public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    [CategoryAttribute("DataCategory_Data")]
[ ("DataParameterparameterName")]
public string ParameterName { get; public set; }
    [CategoryAttribute("DataCategory_Data")]
[ ("DbDataParametersize")]
public int Size { get; public set; }
    [ ("DataParametersourceColumn")]
[CategoryAttribute("DataCategory_Update")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [ ("DataParametersourceVersion")]
[CategoryAttribute("DataCategory_Update")]
public DataRowVersion SourceVersion { get; public set; }
    [ ("DataParameter_Value")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("DataCategory_Data")]
public object Value { get; public set; }
    protected DbParameterBase(DbParameterBase source);
    internal object (object , object );
    public void CopyTo(DbParameter destination);
    private void (DbParameterBase );
    protected virtual void PropertyChanging();
    internal void ();
    protected void ResetSize();
    protected bool ShouldSerializeSize();
    public virtual string ToString();
    protected virtual byte ValuePrecision(object value);
    protected virtual byte ValueScale(object value);
    protected virtual int ValueSize(object value);
    protected object get_CoercedValue();
    protected void set_CoercedValue(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
}
public abstract class Devart.Common.DbParameterBaseCollection : DbParameterCollection {
    private ArrayList ;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    protected Type ItemType { get; }
    protected string ParameterNamePrefix { get; }
    public object SyncRoot { get; }
    protected DbCommandBase Parent { get; }
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    protected int CheckName(string parameterName);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual bool Contains(string value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string name);
    public virtual int IndexOf(object value);
    public virtual int IndexOf(string parameterName);
    protected internal static int IndexOf(IEnumerable items, string parameterName);
    public virtual void Insert(int index, object value);
    protected virtual void OnChange();
    private void (int );
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    private void (int );
    private void (int , object );
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string name, DbParameter value);
    protected virtual void SetParameterInParameterCheckMode(int index, DbParameter value);
    protected virtual void Validate(int index, object value);
    protected virtual void ValidateType(object value);
    public virtual int get_Count();
    private ArrayList ();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    protected abstract virtual Type get_ItemType();
    protected virtual string get_ParameterNamePrefix();
    public virtual object get_SyncRoot();
    protected abstract virtual DbCommandBase get_Parent();
}
public class Devart.Common.DbProviderException : Exception {
    protected DbProviderException(string message);
    protected DbProviderException(string message, Exception innerException);
    public virtual string ToString();
}
public abstract class Devart.Common.DbScript : Component {
    protected Lexer lexer;
    private SqlStatementCollection ;
    private bool ;
    private IDbConnection ;
    private int ;
    internal UInt32 ;
    private StreamReader ;
    private int ;
    protected bool commandTimeoutChanged;
    private IDbCommand  ;
    private ScriptErrorEventHandler  ;
    private ScriptProgressEventHandler  ;
    [MergablePropertyAttribute("False")]
public IDbConnection Connection { get; public set; }
    [MergablePropertyAttribute("False")]
public string ScriptText { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public SqlStatementCollection Statements { get; }
    [DefaultValueAttribute("30")]
[ ("DbCommand_CommandTimeout")]
[CategoryAttribute("Data")]
public int CommandTimeout { get; public set; }
    protected DbScript(Lexer lexer);
    protected virtual void Dispose(bool disposing);
    private void ();
    public void Execute();
    public void Open(Stream stream);
    public void Open(string fileName);
    public void Open(TextReader reader);
    public bool ExecuteNext(IDataReader& reader);
    private bool (bool , IDataReader& );
    public virtual void Reset();
    protected virtual void InternalReset();
    protected virtual bool CanExecuteStatement(SqlStatement sqlStatement);
    protected void CancelExecute();
    public virtual void Cancel();
    protected SqlStatement CreateSqlStatement(int offset, int length, int line, int position, string text, SqlStatementType statementType);
    internal IDataReader (SqlStatement , bool );
    protected virtual IDataReader ExecuteSqlStatement(SqlStatement sqlStatement, bool forceExecute);
    protected virtual IDbCommand CreateCommand();
    protected virtual SqlStatementStatus OnSqlStatementExecute(SqlStatement stmt, IDataReader& reader);
    protected abstract virtual bool GetNextStatement(SqlStatement& stmt);
    protected virtual SqlStatementType GetStatementType(Token token);
    protected void OnProgress(SqlStatement stmt);
    private static void (SqlStatement , String& , Int64& , Int64& , Int32& , Int32& , SqlStatementType& );
    protected void OnError(ScriptErrorEventArgs e);
    public IDbConnection get_Connection();
    public void set_Connection(IDbConnection value);
    internal string (SqlStatement );
    protected virtual SqlStatementCollection CreateStatementCollection();
    protected virtual string GetStatementText(SqlStatement stmt);
    protected virtual void InitializeFromConnection();
    public virtual string get_ScriptText();
    public virtual void set_ScriptText(string value);
    public SqlStatementCollection get_Statements();
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    protected virtual int GetDefaultCommandTimeout();
    [CompilerGeneratedAttribute]
public void add_Error(ScriptErrorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Error(ScriptErrorEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Progress(ScriptProgressEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Progress(ScriptProgressEventHandler value);
}
public abstract class Devart.Common.DbTransactionBase : DbTransaction {
    protected IsolationLevel isolationLevel;
    protected bool isDisposed;
    private string ;
    private TransactionStateChangingEventHandler ;
    private TransactionStateChangedEventHandler ;
    public IsolationLevel IsolationLevel { get; }
    protected void CheckDisposed();
    private string ();
    public virtual IsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void add_StateChanging(TransactionStateChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StateChanging(TransactionStateChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_StateChanged(TransactionStateChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StateChanged(TransactionStateChangedEventHandler value);
    protected void OnStateChanging(TransactionAction action, DbConnection connection);
    protected void OnStateChanged(TransactionAction action, DbConnection connection);
}
[FlagsAttribute]
public enum Devart.Common.DumpMode : Enum {
    public int value__;
    public static DumpMode All;
    public static DumpMode Schema;
    public static DumpMode Data;
}
public class Devart.Common.GetSymbolsHandler : MulticastDelegate {
    public GetSymbolsHandler(object object, IntPtr method);
    public virtual object Invoke(string ch);
    public virtual IAsyncResult BeginInvoke(string ch, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class Devart.Common.GlobalComponentsCache : object {
    private static Hashtable ;
    private static ComponentAddedEventHandler ;
    private static ComponentRemovedEventHandler ;
    private static GlobalComponentsCache();
    public static void RemoveFromGlobalList(IComponent component);
    public static bool AddToGlobalList(IComponent component);
    public static void add_ComponentAdded(ComponentAddedEventHandler value);
    public static void remove_ComponentAdded(ComponentAddedEventHandler value);
    public static void add_ComponentRemoved(ComponentRemovedEventHandler value);
    public static void remove_ComponentRemoved(ComponentRemovedEventHandler value);
    public static bool AddToGlobalList(IComponent component, string groupName);
    public static IComponent GetObjectByName(string name);
    public static string GetKeyString(IComponent component);
    public static ArrayList GetObjects(Type objectType);
    public static ArrayList GetObjects(Type objectType, string groupName);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public interface Devart.Common.ILocalFailoverManager {
    public abstract virtual ILocalFailoverManager StartUse();
    public abstract virtual ILocalFailoverManager StartUse(bool fireConnErrorEvent);
    public abstract virtual RetryMode DoLocalFailoverEvent(object sender, ConnectionLostCause cause, RetryMode retryMode, Exception e);
}
public class Devart.Common.Lexer : object {
    private string ;
    private int ;
    private TextReader ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int  ;
    private StringBuilder  ;
    private StringBuilder  ;
    private LexerBehavior  ;
    private Hashtable  ;
    private Hashtable  ;
    private Char[]  ;
    private char  ;
    private char  ;
    private char  ;
    private char  ;
    private String[]  ;
    private string  ;
    private string  ;
    private string  ;
    private string  ;
    private char  ;
    private char  ;
    private int  ;
    private Token  ;
    private Token  ;
    private Token  ;
    private GetSymbolsHandler  ;
    private bool  ;
    private CheckInlineCommentFollowedCharHandler  ;
    public static int DefaultMaxSymbolLength;
    private CompareInfo  ;
    private CultureInfo  ;
    public CultureInfo CultureInfo { get; public set; }
    public Token Current { get; }
    public bool IsEmpty { get; }
    public string Text { get; public set; }
    public TextReader TextReader { get; public set; }
    public string StringQuote { get; public set; }
    public int MaxSymbolLength { get; public set; }
    public Hashtable Keywords { get; }
    public Hashtable Symbols { get; }
    public GetSymbolsHandler GetSymbols { get; public set; }
    public CheckInlineCommentFollowedCharHandler CheckInlineCommentFollowedChar { get; public set; }
    public Char[] IdentChars { get; public set; }
    public string IdentQuote { get; public set; }
    public string IdentQuoteBegin { get; public set; }
    public string IdentQuoteEnd { get; public set; }
    public String[] InlineComments { get; public set; }
    public string CommentBegin { get; public set; }
    public string CommentEnd { get; public set; }
    public string DecimalSeparator { get; public set; }
    private Lexer(Hashtable , Hashtable , LexerBehavior );
    public Lexer(TextReader reader, GetSymbolsHandler getSymbolId, Hashtable symbols, Hashtable keywords, LexerBehavior behavior);
    public Lexer(string text, LexerBehavior behavior);
    public Lexer(string text, Hashtable symbols, Hashtable keywords, LexerBehavior behavior);
    public Lexer(TextReader reader, LexerBehavior behavior);
    public Lexer(TextReader reader, Hashtable symbols, Hashtable keywords, LexerBehavior behavior);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public void Reset();
    public Token PeekPreviousToken();
    public Token GetNextToken();
    private void ();
    private char ();
    private char (int );
    private string (int );
    private char ();
    private void ();
    private bool ();
    private bool (string );
    private bool (string );
    private void (int );
    private string ();
    public void BeginBlock();
    public void CrearBlock();
    public string EndBlock(int lenEnd);
    public string EndBlock(Token to);
    private Token (Token );
    private bool (Char& );
    public Token LookForSymbols(String[] symbols);
    public Token PeekNextToken();
    public Token get_Current();
    public bool get_IsEmpty();
    public string get_Text();
    public void set_Text(string value);
    public TextReader get_TextReader();
    public void set_TextReader(TextReader value);
    public string get_StringQuote();
    public void set_StringQuote(string value);
    public int get_MaxSymbolLength();
    public void set_MaxSymbolLength(int value);
    public Hashtable get_Keywords();
    public Hashtable get_Symbols();
    public GetSymbolsHandler get_GetSymbols();
    public void set_GetSymbols(GetSymbolsHandler value);
    public CheckInlineCommentFollowedCharHandler get_CheckInlineCommentFollowedChar();
    public void set_CheckInlineCommentFollowedChar(CheckInlineCommentFollowedCharHandler value);
    public Char[] get_IdentChars();
    public void set_IdentChars(Char[] value);
    public string get_IdentQuote();
    public void set_IdentQuote(string value);
    public string get_IdentQuoteBegin();
    public void set_IdentQuoteBegin(string value);
    public string get_IdentQuoteEnd();
    public void set_IdentQuoteEnd(string value);
    public String[] get_InlineComments();
    public void set_InlineComments(String[] value);
    public string get_CommentBegin();
    public void set_CommentBegin(string value);
    public string get_CommentEnd();
    public void set_CommentEnd(string value);
    public string get_DecimalSeparator();
    public void set_DecimalSeparator(string value);
}
[FlagsAttribute]
public enum Devart.Common.LexerBehavior : Enum {
    public int value__;
    public static LexerBehavior OmitBlank;
    public static LexerBehavior OmitComment;
    public static LexerBehavior QuotedString;
    public static LexerBehavior QuotedIdent;
    public static LexerBehavior UpperedIdent;
    public static LexerBehavior LoweredIdent;
    public static LexerBehavior HandleEscaping;
    public static LexerBehavior OmitTokenValue;
    public static LexerBehavior IdentDoubleQuote;
    public static LexerBehavior StringDoubleQuote;
    public static LexerBehavior BreakBlank;
    public static LexerBehavior OmitTokenStringValue;
    public static LexerBehavior IdentifierHasMinus;
    public static LexerBehavior IdentifierHasFirstDigit;
    public static LexerBehavior AlternativeQuotedString;
}
public class Devart.Common.MonitorEventArgs : EventArgs {
    private   ;
    private MonitorEventType ;
    private string ;
    private MonitorTracePoint ;
    private string ;
    private String[] ;
    private double ;
    public MonitorEventType EventType { get; }
    public string Description { get; }
    public MonitorTracePoint TracePoint { get; }
    public string ExtraInfo { get; }
    public String[] CallStack { get; }
    public double Duration { get; }
    internal MonitorEventArgs(  , string , MonitorTracePoint , string , String[] , double );
    private MonitorEventType (  );
    public MonitorEventType get_EventType();
    internal   ();
    internal bool ();
    public string get_Description();
    public MonitorTracePoint get_TracePoint();
    public string get_ExtraInfo();
    public String[] get_CallStack();
    public double get_Duration();
}
[FlagsAttribute]
public enum Devart.Common.MonitorEventFilter : Enum {
    public int value__;
    public static MonitorEventFilter None;
    public static MonitorEventFilter OpenConnection;
    public static MonitorEventFilter Disconnect;
    public static MonitorEventFilter Prepare;
    public static MonitorEventFilter Execute;
    public static MonitorEventFilter BeginTransaction;
    public static MonitorEventFilter Commit;
    public static MonitorEventFilter Rollback;
    public static MonitorEventFilter Error;
    public static MonitorEventFilter Custom;
    public static MonitorEventFilter CreatePoolManager;
    public static MonitorEventFilter CreatePoolGroup;
    public static MonitorEventFilter ConnectPooled;
    public static MonitorEventFilter ConnectNonPooled;
    public static MonitorEventFilter ActivateInPool;
    public static MonitorEventFilter ReturnToPool;
    public static MonitorEventFilter CreateObject;
    public static MonitorEventFilter All;
}
public class Devart.Common.MonitorEventHandler : MulticastDelegate {
    public MonitorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MonitorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MonitorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Devart.Common.MonitorEventType : Enum {
    public int value__;
    public static MonitorEventType Connect;
    public static MonitorEventType Disconnect;
    public static MonitorEventType Prepare;
    public static MonitorEventType Execute;
    public static MonitorEventType BeginTransaction;
    public static MonitorEventType Commit;
    public static MonitorEventType Rollback;
    public static MonitorEventType Error;
    public static MonitorEventType ActivateInPool;
    public static MonitorEventType ReturnToPool;
    public static MonitorEventType Custom;
}
public enum Devart.Common.MonitorTracePoint : Enum {
    public int value__;
    public static MonitorTracePoint BeforeEvent;
    public static MonitorTracePoint AfterEvent;
}
public class Devart.Common.ProxyException : Exception {
    public ProxyException(string message);
    public ProxyException(Exception inner);
}
public class Devart.Common.ProxyOptions : object {
    private string ;
    private int ;
    private string ;
    private string ;
    private ProxyOptionsPropertyChanged ;
    public static int DefaultPort;
    public static string ProxyHostKeyword;
    public static string ProxyPortKeyword;
    public static string ProxyUserKeyword;
    public static string ProxyPasswordKeyword;
    [RefreshPropertiesAttribute("2")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[ ("ProxyOptions_Host")]
public string Host { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("3128")]
[RefreshPropertiesAttribute("2")]
[ ("ProxyOptions_Port")]
public int Port { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("True")]
[ ("ProxyOptions_User")]
[RefreshPropertiesAttribute("2")]
public string User { get; public set; }
    [DefaultValueAttribute("")]
[ ("ProxyOptions_Password")]
[RefreshPropertiesAttribute("2")]
[BrowsableAttribute("True")]
public string Password { get; public set; }
    [ ("ProxyOptions_ProxyAddress")]
[BrowsableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("")]
public Uri ProxyAddress { get; }
    public ProxyOptions(string host, int port, string user, string password);
    private static ProxyOptions();
    private void (string , object );
    public virtual string ToString();
    public string get_Host();
    public void set_Host(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_User();
    public void set_User(string value);
    public string get_Password();
    public void set_Password(string value);
    public Uri get_ProxyAddress();
    public bool ShouldSerialize();
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(ProxyOptionsPropertyChanged value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(ProxyOptionsPropertyChanged value);
}
public class Devart.Common.ProxyOptionsPropertyChanged : MulticastDelegate {
    public ProxyOptionsPropertyChanged(object object, IntPtr method);
    public virtual void Invoke(string name, object value);
    public virtual IAsyncResult BeginInvoke(string name, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.QueryRecordCountException : Exception {
    internal QueryRecordCountException(string );
    internal QueryRecordCountException(string , Exception );
}
public enum Devart.Common.RefreshRowMode : Enum {
    public int value__;
    public static RefreshRowMode None;
    public static RefreshRowMode AfterInsert;
    public static RefreshRowMode AfterUpdate;
    public static RefreshRowMode Both;
}
public enum Devart.Common.RetryMode : Enum {
    public int value__;
    public static RetryMode Raise;
    public static RetryMode Reexecute;
}
public class Devart.Common.ScriptErrorEventArgs : EventArgs {
    private Exception ;
    private bool ;
    private long ;
    private int ;
    private int ;
    private long ;
    private string ;
    private SqlStatementType  ;
    public Exception Exception { get; }
    public bool Ignore { get; public set; }
    public string Text { get; }
    public long Offset { get; }
    public long Length { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public SqlStatementType StatementType { get; }
    public ScriptErrorEventArgs(Exception e, string text, long offset, long length, int lineNumber, int linePosition, SqlStatementType statementType);
    public Exception get_Exception();
    public bool get_Ignore();
    public void set_Ignore(bool value);
    public string get_Text();
    public long get_Offset();
    public long get_Length();
    public int get_LineNumber();
    public int get_LinePosition();
    public SqlStatementType get_StatementType();
}
public class Devart.Common.ScriptErrorEventHandler : MulticastDelegate {
    public ScriptErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScriptErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScriptErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.ScriptProgressEventArgs : EventArgs {
    private string ;
    private long ;
    private long ;
    private int ;
    private int ;
    private SqlStatementType ;
    public string Text { get; }
    public long Offset { get; }
    public long Length { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public SqlStatementType StatementType { get; }
    internal ScriptProgressEventArgs(string , long , long , int , int , SqlStatementType );
    public string get_Text();
    public long get_Offset();
    public long get_Length();
    public int get_LineNumber();
    public int get_LinePosition();
    public SqlStatementType get_StatementType();
}
public class Devart.Common.ScriptProgressEventHandler : MulticastDelegate {
    public ScriptProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScriptProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScriptProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.SqlStatement : object {
    private DbScript ;
    private int ;
    private int ;
    private int ;
    private int ;
    private UInt32 ;
    private string ;
    private SqlStatementType  ;
    public string Text { get; }
    public int Offset { get; }
    public int Length { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public SqlStatementType StatementType { get; }
    protected internal SqlStatement(DbScript script, int offset, int length, int line, int position, string text, SqlStatementType statementType);
    public IDataReader Execute();
    public void ExecuteNonQuery();
    private void ();
    public string get_Text();
    public int get_Offset();
    public int get_Length();
    public int get_LineNumber();
    public int get_LinePosition();
    public SqlStatementType get_StatementType();
}
[DefaultMemberAttribute("Item")]
public class Devart.Common.SqlStatementCollection : CollectionBase {
    public SqlStatement Item { get; public set; }
    public SqlStatement get_Item(int index);
    public void set_Item(int index, SqlStatement value);
    public int Add(SqlStatement value);
    public void Insert(int index, SqlStatement value);
    public int IndexOf(SqlStatement value);
    public bool Contains(SqlStatement value);
    public void Remove(SqlStatement value);
    public void CopyTo(SqlStatement[] array, int index);
}
public enum Devart.Common.SqlStatementStatus : Enum {
    public int value__;
    public static SqlStatementStatus Cancel;
    public static SqlStatementStatus Continue;
    public static SqlStatementStatus SkipStatement;
}
public enum Devart.Common.SqlStatementType : Enum {
    public int value__;
    public static SqlStatementType Unknown;
    public static SqlStatementType Select;
    public static SqlStatementType Insert;
    public static SqlStatementType Update;
    public static SqlStatementType Delete;
    public static SqlStatementType Truncate;
    public static SqlStatementType Batch;
    public static SqlStatementType Alter;
    public static SqlStatementType Create;
    public static SqlStatementType Drop;
    public static SqlStatementType Execute;
    public static SqlStatementType Commit;
    public static SqlStatementType Rollback;
    public static SqlStatementType With;
    public static SqlStatementType Extended;
}
public class Devart.Common.Token : object {
    public TokenType Type;
    public object Value;
    public int Id;
    public int StartPosition;
    public int EndPosition;
    public int LineBegin;
    public int LineNumber;
    public static Token Begin;
    public static Token Empty;
    public int LinePosition { get; }
    public int EndLineBegin { get; }
    public int EndLineNumber { get; }
    public int EndLinePosition { get; }
    public Token(TokenType type, object value, int id, int startPosition, int endPosition, int lineBegin, int lineNumber);
    private static Token();
    public virtual string ToString();
    public int get_LinePosition();
    public virtual int get_EndLineBegin();
    public virtual int get_EndLineNumber();
    public virtual int get_EndLinePosition();
}
public enum Devart.Common.TokenType : Enum {
    public int value__;
    public static TokenType Char;
    public static TokenType Symbol;
    public static TokenType Keyword;
    public static TokenType Identifier;
    public static TokenType Number;
    public static TokenType String;
    public static TokenType Blank;
    public static TokenType Comment;
    public static TokenType Begin;
    public static TokenType End;
    public static TokenType Undefined;
}
public enum Devart.Common.TransactionAction : Enum {
    public int value__;
    public static TransactionAction BeginTransaction;
    public static TransactionAction Commit;
    public static TransactionAction Rollback;
    public static TransactionAction Savepoint;
    public static TransactionAction ReleaseSavepoint;
    public static TransactionAction RollbackToSavepoint;
}
public class Devart.Common.TransactionStateChangedEventArgs : TransactionStateChangeEventArgs {
    public TransactionStateChangedEventArgs(TransactionAction action);
}
public class Devart.Common.TransactionStateChangedEventHandler : MulticastDelegate {
    public TransactionStateChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TransactionStateChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TransactionStateChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Devart.Common.TransactionStateChangeEventArgs : EventArgs {
    private TransactionAction ;
    public TransactionAction Action { get; }
    protected TransactionStateChangeEventArgs(TransactionAction action);
    public TransactionAction get_Action();
}
public class Devart.Common.TransactionStateChangingEventArgs : TransactionStateChangeEventArgs {
    public TransactionStateChangingEventArgs(TransactionAction action);
}
public class Devart.Common.TransactionStateChangingEventHandler : MulticastDelegate {
    public TransactionStateChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TransactionStateChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TransactionStateChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Devart.Common.Utils : object {
    public static bool DesignMode;
    private static Char[] ;
    private static Nullable`1<bool> ;
    private static Nullable`1<bool> ;
    public static bool MonoDetected { get; }
    public static bool IsWIntel { get; }
    private static Utils();
    public static DataTable SortTable(DataTable table, string columnsName);
    public static void AddRowsToTable(DataTable destTable, ICollection srcRows);
    public static void FilterTable(DataTable& table, string filterExpr);
    public static bool Compare(string st1, string st2);
    public static bool CompareInvariant(string st1, string st2);
    public static bool Compare(string st1, string st2, bool ignoreCase);
    public static bool CompareInvariant(string st1, string st2, bool ignoreCase);
    public static bool CompareObjectNameSuffix(string source, string target, bool ignoreCase, String[] excludeStrings);
    public static bool CompareSuffix(string source, string suffix, bool ignoreCase);
    public static bool CompareSuffix(string source, string suffix, bool ignoreCase, String[] excludeStrings);
    public static void CheckArgumentNull(object value, string parameterName);
    public static void CheckArgumentNull(object value, string parameterName, string resMessage);
    public static void CheckConnectionOpen(IDbConnection connection);
    public static Hashtable CreateHashtable(bool ignoreCase);
    public static bool IsIpAddress(string hostname);
    public static bool IsEmpty(string st);
    public static bool IsEmpty(ICollection collection);
    public static bool IsNull(object val);
    public static bool IsNumber(string s);
    public static bool IsBasicLetter(char c);
    public static string ObjectToString(object obj);
    public static object Parse(string s, Type enumType);
    public static object Parse(string s, Type enumType, bool ignoreCase);
    public static bool TryParse(string s, Int32& i);
    public static bool TryParse(string s, Double& d);
    public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, Double& result);
    public static bool TryParse(string s, Boolean& b);
    public static bool TryParse(string s, Boolean& b, bool ignoreCase);
    public static bool TryParse(string s, Object& value, Type enumType);
    public static bool TryParse(string s, Object& value, Type enumType, bool ignoreCase);
    public static int ParseIntWith0(string s);
    public static int TryParseInt(string s, Int32& pos);
    public static bool TryGetValue(Hashtable dictionary, object key, Object& val);
    public static object GetWeakTarget(WeakReference weakReference);
    public static void SetWeakTarget(WeakReference& weakReference, object target);
    public static bool GetWeakIsAlive(WeakReference weakReference);
    public static Byte[] GetMaxBytes(Encoding encoding, string s, Int32& byteCount);
    public static String[] SplitItems(string names, Char[] quotes);
    public static bool WaitOne(WaitHandle waitHandle, TimeSpan timeout, bool exitContext);
    public static bool NeedQuote(string name, Hashtable keywords, Char[] prefixes, Char[] suffixes);
    public static bool NeedQuote(string name, Hashtable keywords, Char[] prefixes, Char[] suffixes, bool checkCase);
    public static string ToLowerInvariant(string value);
    public static string ToUpperInvariant(string value);
    public static char ToLowerInvariant(char value);
    public static char ToUpperInvariant(char value);
    public static bool ByteArrayEquals(Byte[] value1, Byte[] value2);
    public static string ByteArrayToHexString(Byte[] bytes);
    public static string TruncateVersion(string version, int count);
    public static bool get_MonoDetected();
    public static bool get_IsWIntel();
    public static MachineType GetDllMachineType(string dllPath);
    public static Nullable`1<bool> UnmanagedDllIs64Bit(string dllPath);
}
public class Devart.Data.ProductInfo : object {
    public static string Version;
}
