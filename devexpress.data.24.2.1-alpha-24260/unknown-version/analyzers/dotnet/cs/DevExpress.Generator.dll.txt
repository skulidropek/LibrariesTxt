internal static class DevExpress.Data.DiagnosticIds : object {
    public static string MissingLicenseDiagnosticId;
}
[GeneratorAttribute]
public class DevExpress.Data.Generator : object {
    private HashSet`1<string> references;
    private List`1<TypeLicenseInfo> types;
    private string tri;
    private static Generator();
    private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    private ITypeSymbol GetTypeSymbol(SyntaxNode node, SemanticModel semantic, CancellationToken token);
    private bool ShouldRefreshTypes(Compilation compilation);
    public sealed virtual void Execute(GeneratorExecutionContext context);
    private static Dictionary`2<AssemblyIdentity, List`1<ProductKind>> MapLicensesToAssembliesAndProducts(List`1<TypeLicenseInfo> missingLicenses);
    private string ComposeMissingProductsMessage(Dictionary`2<AssemblyIdentity, List`1<ProductKind>> assemblyToLicenseMap);
    private static string FormatAssemblyName(AssemblyIdentity assembly);
    private static string FormatProducts(List`1<ProductKind> products);
    private static string GetProductName(ProductKind kind);
    public sealed virtual void Initialize(GeneratorInitializationContext context);
}
public static class DevExpress.Data.MissingLicenseDiagnosticDescriptor : object {
    private static string DiagnosticId;
    private static string Category;
    private static string HelpLink;
    private static LocalizableString DiagnosticTitle;
    private static LocalizableString DiagnosticMessageFormat;
    private static LocalizableString DiagnosticMessageFormat2;
    private static LocalizableString DiagnosticDescription;
    public static DiagnosticDescriptor DiagnosticRule;
    public static DiagnosticDescriptor DiagnosticRule2;
    private static MissingLicenseDiagnosticDescriptor();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class DevExpress.Data.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AssemblyToProduct { get; }
    internal static string MissingLicenseDescription { get; }
    internal static string MissingLicenseMessageFormat { get; }
    internal static string MissingLicenseMessageFormat2 { get; }
    internal static string MissingLicenseTitle { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AssemblyToProduct();
    internal static string get_MissingLicenseDescription();
    internal static string get_MissingLicenseMessageFormat();
    internal static string get_MissingLicenseMessageFormat2();
    internal static string get_MissingLicenseTitle();
}
internal class DevExpress.Data.TypeLicenseInfo : object {
    [CompilerGeneratedAttribute]
private string <TypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductKind[] <ProductKinds>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyIdentity <Assembly>k__BackingField;
    public string TypeInfo { get; }
    public string LicenseProvider { get; }
    public ProductKind[] ProductKinds { get; }
    public AssemblyIdentity Assembly { get; }
    public TypeLicenseInfo(string typeInfo, string licenseProvider, AssemblyIdentity assembly, ProductKind[] kinds);
    [CompilerGeneratedAttribute]
public string get_TypeInfo();
    [CompilerGeneratedAttribute]
public string get_LicenseProvider();
    [CompilerGeneratedAttribute]
public ProductKind[] get_ProductKinds();
    [CompilerGeneratedAttribute]
public AssemblyIdentity get_Assembly();
}
internal class DevExpress.Data.Utils.LicenseUtils : object {
    public static DXLicense GetLicense(TypeLicenseInfo licenseInfo);
    public static DXLicense GetLicense(TypeLicenseInfo licenseInfo, LicenseContext context);
    public static bool GetTrial(TypeLicenseInfo licenseInfo, String& trial);
    public static TypeLicenseInfo GetTypeLicenseInfo(ITypeSymbol nt);
    private static ProductKind[] GetPredefinedProductKinds(string lictype);
    [CompilerGeneratedAttribute]
internal static object <GetTypeLicenseInfo>g__GetRawLicProvider|6_0(ITypeSymbol nt);
}
internal class DevExpress.Data.Utils.ReflectionUtils : object {
    private static string StrJetBrains;
    private static ConcurrentDictionary`2<string, Type> typesCache;
    private static ReflectionUtils();
    public static Type GetType(string assemblyName, string typeName);
    private static Type GetTypeFromLoadedAssemblies(string assemblyName, string typeName);
    private static Type GetTypeFromLoadedAssemblies(string assemblyName, Func`2<Assembly, Type> getTypeFromAssemblyFunc);
    private static Type TryGetTypeFromAssembly(Assembly assembly, string typeName);
    private static bool ShouldSkip(string codeBase);
    private static bool CheckAssembly(Assembly assembly, string assemblyName);
    public static PropertyInfo GetStaticProperty(Type type, string propertyName);
    public static object GetStaticPropertyValue(Type type, string propertyName);
    public static object CallMethod(object instance, string methodName, Object[] args);
    public static object CallGenericMethod(object instance, string methodName, Type arg1GenericType);
}
public static class DevExpress.Data.Utils.ResourcesUtils : object {
    public static LocalizableResourceString CreateLocalizableString(string nameOfLocalizableResourceString);
}
[ExtensionAttribute]
internal static class DevExpress.Data.Utils.RoslynExtensions : object {
    private static String[] dxAssembliesNamesPrefixes;
    private static RoslynExtensions();
    [ExtensionAttribute]
public static bool IsDevExpressAssembly(IAssemblySymbol assembly);
    [ExtensionAttribute]
public static bool IsDevExpressAssembly(MetadataReference reference);
    [ExtensionAttribute]
public static bool ShouldBeSkipped(Compilation compilation);
    [ExtensionAttribute]
public static List`1<INamedTypeSymbol> GetAssemblyLicenseTargetTypes(Compilation compilation);
    [ExtensionAttribute]
public static List`1<INamedTypeSymbol> GetTypesWithLicenseProvider(Compilation compilation);
    private static void CollectPublicTypesWithLicenseProviderAttribute(INamespaceSymbol namespaceSymbol, List`1<INamedTypeSymbol> publicTypes);
}
internal static class DevExpress.Internal.AssemblyInfo : object {
    public static string AssemblyCopyright;
    public static string AssemblyCompany;
    public static int VersionId;
    public static int VersionIdMinor;
    public static string VersionShort;
    public static string Version;
    public static string FileVersion;
    public static string MarketingVersion;
    public static string VirtDirSuffix;
    public static string PublicKeyToken;
    public static string PublicKey;
    public static string FullAssemblyVersionExtension;
    public static string TestsSuffix;
    public static string DesignSuffix;
    public static string DesignToolsSuffix;
    public static string DesignToolsVersion;
    public static string DesignToolsWithVersionSuffix;
    public static string SatelliteContractVersion;
    public static string VSuffixWithoutSeparator;
    public static string VSuffix;
    public static string VSuffixDesign;
    public static string VSuffixExport;
    public static string VSuffixLinq;
    public static string SRDocumentationLink;
    public static string SRNewDocumentationLink;
    public static string InstallationRegistryKeyBase;
    public static string InstallationRegistryKey;
    public static string InstallationDevExtremeRegistryKey;
    public static string InstallationRegistryRootPathValueName;
    public static string SRAssemblyXpfPrefix;
    public static string SRAssemblyPrefix;
    public static string ThemePrefixWithoutSeparator;
    public static string ThemePrefix;
    public static string SupportedOSPlatform;
}
internal static class DevExpress.Internal.DXRegistryUtils : object {
    internal static RegistryKey GetInstallationKey(InstallationKind kind);
    internal static string GetInstallationRootPath();
    internal static RegistryKey EnsureComponentsKey();
    private static RegistryKey GetCustomerExperienceProgramKey(bool writable);
    internal static bool IsCustomerExperienceProgramActive();
    internal static void DeactivateCustomerExperienceProgram();
    internal static Guid EnsureUAlgoProviderGuid();
    private static RegistryKey GetLicensesKey(Guid id);
    internal static string ReadVersionString(Guid id, int version);
    internal static int ReadVersionInt(Guid id, int version);
    internal static int ReadPlatformFlags(Guid id, string platform);
}
internal static class DevExpress.Internal.HashHelper : object {
    public static bool VerifyHash(string puk, Byte[] rgbHash, Byte[] rgbSignature);
    private static UInt32[] Parse(Byte[] value);
    private static Byte[] GetBytes(UInt32[] data);
    private static UInt32[] Multiply(UInt32[] a, UInt32[] b);
    private static UInt32[] Divide(UInt32[] a, UInt32[] b);
    private static void Normalize(UInt32[]& data);
}
internal enum DevExpress.Internal.InstallationKind : Enum {
    public int value__;
    public static InstallationKind Common;
    public static InstallationKind DevExtreme;
}
public class DevExpress.Internal.UserData : object {
    private string userName;
    private string uniqueId;
    internal long licensedProducts;
    internal long licensedSources;
    private int userNo;
    private int keyNumber;
    internal int version;
    internal bool isValid;
    internal DateTime expiration;
    private static UserData empty;
    public bool IsTrial { get; }
    public bool IsExpired { get; }
    public static UserData Empty { get; }
    public string UniqueId { get; }
    public bool IsValid { get; }
    public int UserNo { get; }
    public int KeyNumber { get; }
    public string UserName { get; }
    public int Version { get; }
    public string VersionText { get; }
    protected long LicensedProducts { get; }
    protected long LicensedSources { get; }
    internal UserData(DateTime date);
    public UserData(int userNo, int keyNumber, string userName, long licensedProducts, long licensedSources);
    public bool get_IsTrial();
    public bool get_IsExpired();
    public static UserData get_Empty();
    public string GetText(string securityId);
    public bool IsLicensed(ProductKind kind);
    public bool IsLicensedSource(ProductKind kind);
    internal void Parse(string text);
    internal void UpdateUserName();
    internal static string UpdateText(string text);
    internal void Clear();
    public string get_UniqueId();
    public bool get_IsValid();
    public int get_UserNo();
    public int get_KeyNumber();
    public string get_UserName();
    public int get_Version();
    public string get_VersionText();
    protected long get_LicensedProducts();
    protected long get_LicensedSources();
    internal string GetExp();
}
internal class DevExpress.Internal.UserInfoChecker : object {
    internal static int SignatureLength;
    private static string puk;
    private static string testkey;
    private static UserInfoChecker def;
    public static UserInfoChecker Default { get; }
    public static UserInfoChecker get_Default();
    private string BytesToString(Byte[] bytes, int position);
    protected bool IsValidCore(string key);
    private bool IsValidKey(string key);
    protected UserData ParseCore(string key);
    public int GetVersion(string key);
    public bool IsValid(string key);
    public UserData Parse(string key);
    private string GetInfo(string key);
    private string GetData(string key);
    private string GetSign(string key);
}
[AttributeUsageAttribute("1")]
public class DevExpress.Utils.About.AssemblyLicenseTargetAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Target>k__BackingField;
    public Type Target { get; private set; }
    public AssemblyLicenseTargetAttribute(Type target);
    [CompilerGeneratedAttribute]
public Type get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(Type value);
}
public class DevExpress.Utils.About.DXLicenceHelper : object {
    private Type type;
    private bool validated;
    public DXLicenceHelper(Type type);
    public bool Validate();
    private bool ValidateCore();
}
public class DevExpress.Utils.About.DXLicense : License {
    private DXLicenseType licType;
    private bool expired;
    private ProductKind productKind;
    public bool IsExpired { get; }
    public ProductKind Kind { get; }
    public DXLicenseType LicType { get; }
    public string LicenseKey { get; }
    internal DXLicense(DXLicenseType licType, bool exp, ProductKind kind);
    internal DXLicense(DXLicenseType licType, bool exp);
    public DXLicense(DXLicenseType licType);
    public bool get_IsExpired();
    public ProductKind get_Kind();
    public DXLicenseType get_LicType();
    public virtual string get_LicenseKey();
    public virtual void Dispose();
}
public abstract class DevExpress.Utils.About.DXLicenseProvider : LicenseProvider {
    private static Hashtable keys;
    protected ProductKind Kind { get; }
    protected bool IsMvcWizard { get; }
    protected ProductKind[] Kinds { get; }
    private static DXLicenseProvider();
    public virtual License GetLicense(LicenseContext context, Type type, object instance, bool allowExceptions);
    private static string GetSavedLicenseKeyCaseInvensitive(LicenseContext context, Type type, Assembly asm);
    private static string GetSavedLicenseKeyCore(LicenseContext context, Type type, Assembly asm);
    private string GetSavedLicenseKey(LicenseContext context, Type type);
    protected void SetSavedLicenseKey(LicenseContext context, Type type, string key);
    [EditorBrowsableAttribute("1")]
public static void SetTrial(string key, String[] types);
    protected virtual DXLicenseType ParseKey(string key, DateTime& date);
    protected virtual string EncodeKey(DXLicenseType licType, UserData user);
    protected abstract virtual ProductKind get_Kind();
    protected virtual bool get_IsMvcWizard();
    protected virtual ProductKind[] get_Kinds();
}
public enum DevExpress.Utils.About.DXLicenseType : Enum {
    public int value__;
    public static DXLicenseType Full;
    public static DXLicenseType Trial;
    public static DXLicenseType None;
}
public class DevExpress.Utils.About.Info : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTrial>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpired>k__BackingField;
    public string Text { get; public set; }
    public bool IsTrial { get; public set; }
    public bool IsExpired { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTrial();
    [CompilerGeneratedAttribute]
public void set_IsTrial(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExpired();
    [CompilerGeneratedAttribute]
public void set_IsExpired(bool value);
}
public class DevExpress.Utils.About.ProductInfoHelper : object {
    public static string PlatformFreeOffer;
    public static string PlatformWinForms;
    public static string PlatformDashboard;
    public static string PlatformUniversal;
    public static string WinGrid;
    public static string WinEditors;
    public static string WinDiagram;
    public static string WinVGrid;
    public static string WinRichEdit;
    public static string WinSpellChecker;
    public static string WinScheduler;
    public static string WinSnap;
    public static string WinCharts;
    public static string WinTreeList;
    public static string WinPivotGrid;
    public static string WinXtraBars;
    public static string WinMaps;
    public static string WinSpreadsheet;
    public static string WinNavBar;
    public static string WinLayoutControl;
    public static string WinPrinting;
    public static string WinGauge;
    public static string WinPdfViewer;
    public static string WinWizard;
    public static string WinReports;
    public static string WinXPO;
    public static string WinMVVM;
    public static string WinTreeMap;
    public static ProductStringInfo GetProductInfo(ProductKind kind);
}
internal enum DevExpress.Utils.About.ProductInfoStage : Enum {
    public int value__;
    public static ProductInfoStage Beta;
    public static ProductInfoStage Trial;
    public static ProductInfoStage Registered;
    public static ProductInfoStage Free;
}
[FlagsAttribute]
public enum DevExpress.Utils.About.ProductKind : Enum {
    public long value__;
    public static ProductKind Default;
    public static ProductKind DXperienceWin;
    public static ProductKind XtraReports;
    public static ProductKind DemoWin;
    public static ProductKind XPO;
    public static ProductKind DevExtremeAspNet;
    public static ProductKind DXperienceASP;
    public static ProductKind XAF;
    public static ProductKind Blazor;
    public static ProductKind DXperienceWPF;
    public static ProductKind DXperienceSliverlight;
    public static ProductKind LightSwitchReports;
    public static ProductKind Dashboard;
    public static ProductKind CodedUIWin;
    public static ProductKind Snap;
    public static ProductKind DevExtremeHtmlJs;
    public static ProductKind Docs;
    public static ProductKind XtraReportsWpf;
    public static ProductKind XtraReportsSL;
    public static ProductKind XtraReportsWeb;
    public static ProductKind XtraReportsWin;
    public static ProductKind XtraReportsBlazor;
    public static ProductKind FreeOffer;
    public static ProductKind DXperiencePro;
    public static ProductKind DXperienceEnt;
    public static ProductKind DXperienceUni;
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.About.ProductKindAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ProductKind <ProductKind>k__BackingField;
    public ProductKind ProductKind { get; private set; }
    public ProductKindAttribute(ProductKind productKind);
    [CompilerGeneratedAttribute]
public ProductKind get_ProductKind();
    [CompilerGeneratedAttribute]
private void set_ProductKind(ProductKind value);
}
public class DevExpress.Utils.About.ProductStringInfo : object {
    private string name;
    private string platform;
    public string ProductName { get; }
    public string ProductPlatform { get; }
    public ProductStringInfo(string name);
    public ProductStringInfo(string platform, string name);
    public string get_ProductName();
    public string get_ProductPlatform();
}
public class DevExpress.Utils.About.ProductStringInfoWin : ProductStringInfo {
    public ProductStringInfoWin(string productName);
}
internal class DevExpress.Utils.About.Utility : object {
    private static bool isDesignMode;
    private static Nullable`1<bool> isDebuggerAttached;
    internal static Nullable`1<bool> expiredCore;
    public static bool IsDesignMode { get; public set; }
    public static bool IsDebuggerAttached { get; }
    public static bool get_IsDesignMode();
    public static void set_IsDesignMode(bool value);
    public static bool get_IsDebuggerAttached();
    public static bool IsDebuggerAttachedAndControlsRegistered();
    public static ProductKind GetDXperienceKind();
    public static bool IsExpired();
    public static int DaysLeft();
    public static bool IsLic();
    public static UserData GetInfoEx();
    internal static DateTime GetTicks();
    public static UserData GetInfo();
    public static bool IsFreeOfferOnly(ProductKind kind, ProductInfoStage stage);
    public static string GetSerial(ProductKind kind, ProductInfoStage stage);
}
public class DevExpress.Utils.LocalizationHelper : object {
    public static bool IsJapanese { get; }
    public static bool get_IsJapanese();
}
internal static class DevExpress.Utils.SafeXml : object {
    internal static XmlTextReader CreateTextReader(StringReader reader);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
