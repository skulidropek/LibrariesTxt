public static class AssemblyInfo : object {
    public static string AssemblyCopyright;
    public static string AssemblyCompany;
    public static int VersionId;
    public static int VersionIdMinor;
    public static string VersionShort;
    public static string Version;
    public static string FileVersion;
    public static string MarketingVersion;
    public static string VirtDirSuffix;
    public static string PublicKeyToken;
    public static string PublicKey;
    public static string FullAssemblyVersionExtension;
    public static string TestsSuffix;
    public static string DesignSuffix;
    public static string DesignToolsSuffix;
    public static string DesignToolsVersion;
    public static string DesignToolsWithVersionSuffix;
    public static string SatelliteContractVersion;
    public static string VSuffixWithoutSeparator;
    public static string VSuffix;
    public static string VSuffixDesign;
    public static string VSuffixExport;
    public static string VSuffixLinq;
    public static string SRAssemblyAgScheduler;
    public static string SRAssemblyAssemblyLoader;
    public static string SRAssemblyXpfSpellChecker;
    public static string SRAssemblyXpfOffice;
    public static string SRAssemblyXpfRichEdit;
    public static string SRAssemblyXpfRichEditFull;
    public static string SRAssemblyXpfSpreadsheet;
    public static string SRAssemblyXpfSpreadsheetFull;
    public static string SRAssemblyXpfScheduler;
    public static string SRAssemblyXpfScheduling;
    public static string SRAssemblyXpfSchedulingFull;
    public static string SRAssemblyXpfSchedulingReportDesigner;
    public static string SRAssemblyXpfSchedulingDesign;
    public static string SRAssemblyXpfRichEditExtensions;
    public static string SRAssemblyXpfPrinting;
    public static string SRAssemblyXpfPrintingFull;
    public static string SRAssemblyXpfDataAccess;
    public static string SRAssemblyXpfExpressionEditor;
    public static string SRAssemblyXpfExpressionEditorFull;
    public static string SRAssemblyXpfReportDesigner;
    public static string SRAssemblyXpfReportDesignerFull;
    public static string SRAssemblyXpfCore;
    public static string SRAssemblyXpfCoreFull;
    public static string SRAssemblyXpfPdfViewer;
    public static string SRAssemblyXpfPdfViewerFull;
    public static string SRAssemblyXpfDocumentViewerCore;
    public static string SRAssemblyXpfMvvm;
    public static string SRAssemblyXpfMvvmFree;
    public static string SRAssemblyXpfMvvmUIFree;
    public static string SRAssemblyXpfRibbon;
    public static string SRAssemblyXpfRibbonFull;
    public static string SRAssemblyXpfNavBar;
    public static string SRAssemblyXpfCoreExtensions;
    public static string SRAssemblyXpfDemoBase;
    public static string SRAssemblyXpfGrid;
    public static string SRAssemblyXpfGridFull;
    public static string SRAssemblyXpfGridCore;
    public static string SRAssemblyXpfGridExtensions;
    public static string SRAssemblyXpfPivotGrid;
    public static string SRAssemblyXpfPivotGridFull;
    public static string SRAssemblyXpfPivotGridTests;
    public static string SRAssemblyXpfPropertyGrid;
    public static string SRAssemblyXpfPropertyGridFull;
    public static string SRAssemblyXpfDiagram;
    public static string SRAssemblyXpfDiagramFull;
    public static string SRAssemblyXpfDiagramTests;
    public static string SRAssemblyXpfGantt;
    public static string SRAssemblyXpfGanttFull;
    public static string SRAssemblyXpfGanttTests;
    public static string SRAssemblyXpfDialogs;
    public static string SRAssemblyXpfDialogsFull;
    public static string SRAssemblyXpfDialogsTests;
    public static string SRAssemblyXpfAccordion;
    public static string SRAssemblyXpfAccordionFull;
    public static string SRAssemblyXpfAccordionTests;
    public static string SRAssemblyXpfAccordionDesign;
    public static string SRAssemblyXpfDocking;
    public static string SRAssemblyXpfDockingFull;
    public static string SRAssemblyXpfControls;
    public static string SRAssemblyXpfControlsFull;
    public static string SRAssemblyXpfLayoutControl;
    public static string SRAssemblyXpfLayoutControlFull;
    public static string SRAssemblyImages;
    public static string SRAssemblyImagesFull;
    public static string SRAssemblyMvvm;
    public static string SRAssemblyMvvmFull;
    public static string SRAssemblyXpfDockingExtensions;
    public static string SRAssemblyXpfLayoutCore;
    public static string SRAssemblyDXCharts;
    public static string SRAssemblyDXChartsFull;
    public static string SRAssemblyChartDesigner;
    public static string SRAssemblyChartDesignerFull;
    public static string SRAssemblyDXGauges;
    public static string SRAssemblyDXGaugesFull;
    public static string SRAssemblyDXMap;
    public static string SRAssemblyDXMapTests;
    public static string SRAssemblyDXMapFull;
    public static string SRAssemblyDXTreeMap;
    public static string SRAssemblyDXTreeMapFull;
    public static string SRAssemblyData;
    public static string SRAssemblyDataFull;
    public static string SRAssemblyDataTests;
    public static string SRAssemblyDataDesktop;
    public static string SRAssemblyDataDesktopFull;
    public static string SRAssemblyDataDesktopTests;
    public static string SRAssemblyDemoData;
    public static string SRAssemblyPrintingCore;
    public static string SRAssemblyPrintingCoreFull;
    public static string SRAssemblyRichEditCore;
    public static string SRAssemblyRichEditCoreFull;
    public static string SRAssemblyRichEditCoreTests;
    public static string SRAssemblyOfficeCore;
    public static string SRAssemblyOfficeCoreFull;
    public static string SRAssemblyDocs;
    public static string SRAssemblySpreadsheetCore;
    public static string SRAssemblySchedulerCore;
    public static string SRAssemblySchedulerCoreDesktop;
    public static string SRAssemblyPrintingDesign;
    public static string SRAssemblyPrintingDesignFull;
    public static string SRAssemblyRichEditLayoutEngine;
    public static string SRAssemblyRichEditLayoutEngineTests;
    public static string SRDocumentationLink;
    public static string SRNewDocumentationLink;
    public static string InstallationRegistryKeyBase;
    public static string InstallationRegistryKey;
    public static string InstallationDevExtremeRegistryKey;
    public static string InstallationRegistryRootPathValueName;
    public static string SRAssemblyXpfPrefix;
    public static string SRAssemblyPrefix;
    public static string ThemePrefixWithoutSeparator;
    public static string ThemePrefix;
    public static string SupportedOSPlatform;
    public static string WinUINamespace;
    public static string SRAssemblyMvvmWinUI;
    public static string SRAssemblyMvvmWinUITests;
    public static string SRAssemblyCoreWinUI;
    public static string SRAssemblyCoreWinUITests;
    public static string SRAssemblyCoreWinUIDesign;
    public static string SRAssemblyPdfCoreWinUI;
    public static string SRAssemblyPdfCoreWinUITests;
    public static string SRAssemblyDrawingWinUI;
    public static string SRAssemblyDrawingWinUITests;
    public static string SRAssemblyControlsCoreWinUI;
    public static string SRAssemblyControlsCoreWinUITests;
    public static string SRAssemblyControlsCoreWinUIDesign;
    public static string SRAssemblyEditorsWinUI;
    public static string SRAssemblyEditorsWinUITests;
    public static string SRAssemblyEditorsWinUIDesign;
    public static string SRAssemblyLayoutWinUI;
    public static string SRAssemblyLayoutWinUITests;
    public static string SRAssemblyLayoutWinUIDesign;
    public static string SRAssemblyGridWinUI;
    public static string SRAssemblyGridWinUITests;
    public static string SRAssemblyGridWinUIDesign;
    public static string SRAssemblySpreadsheetWinUI;
    public static string SRAssemblySpreadsheetWinUITests;
    public static string SRAssemblyPdfViewerWinUI;
    public static string SRAssemblyPdfViewerWinUITests;
    public static string SRAssemblyControlsWinUI;
    public static string SRAssemblyControlsWinUITests;
    public static string SRAssemblyControlsWinUIDesign;
    public static string SRAssemblyRangeControlWinUI;
    public static string SRAssemblyRangeControlWinUITests;
    public static string SRAssemblyRangeControlWinUIDesign;
    public static string SRAssemblyBarCodeWinUI;
    public static string SRAssemblyBarCodeWinUITests;
    public static string SRAssemblyBarCodeWinUIDesign;
    public static string SRAssemblyChartsWinUI;
    public static string SRAssemblyChartsWinUITests;
    public static string SRAssemblyChartsWinUIDesign;
    public static string SRAssemblyGaugesWinUI;
    public static string SRAssemblyGaugesWinUITests;
    public static string SRAssemblyGaugesWinUIDesign;
    public static string SRAssemblyMapWinUI;
    public static string SRAssemblyMapWinUITests;
    public static string SRAssemblyMapWinUIDesign;
    public static string SRAssemblyRibbonWinUI;
    public static string SRAssemblyRibbonWinUITests;
    public static string SRAssemblyRibbonWinUIDesign;
    public static string SRAssemblyThemesWinUI;
    public static string SRAssemblyThemesWinUITests;
    public static string SRAssemblySchedulerWinUI;
    public static string SRAssemblySchedulerWinUITests;
    public static string SRAssemblySchedulerWinUIDesign;
    public static string SRAssemblyDocumentRendererWinUI;
    public static string SRAssemblyDocumentRendererWinUITests;
    public static string SRAssemblyDocumentViewerWinUI;
    public static string SRAssemblyDocumentViewerWinUITests;
    public static string SRAssemblyDocumentViewerWinUIDesign;
    public static string SRAssemblyPrintingWinUI;
    public static string SRAssemblyPrintingWinUITests;
    public static string SRAssemblyPrintingWinUIDesign;
    public static string SRAssemblyGridPrintingWinUI;
    public static string UINamespace;
    public static string SRAssemblyCoreUwp;
    public static string SRAssemblyCoreUwpTests;
    public static string SRAssemblyCoreUwpDesign;
    public static string SRAssemblyPdfCoreUwp;
    public static string SRAssemblyPdfCoreUwpTests;
    public static string SRAssemblyDrawingUwp;
    public static string SRAssemblyDrawingUwpTests;
    public static string SRAssemblyUIUwp;
    public static string SRAssemblyUIUwpTests;
    public static string SRAssemblyUIUwpDesign;
    public static string SRAssemblyEditorsUwp;
    public static string SRAssemblyEditorsUwpTests;
    public static string SRAssemblyEditorsUwpDesign;
    public static string SRAssemblyLayoutUwp;
    public static string SRAssemblyLayoutUwpTests;
    public static string SRAssemblyLayoutUwpDesign;
    public static string SRAssemblyGridUwp;
    public static string SRAssemblyGridUwpTests;
    public static string SRAssemblyGridUwpDesign;
    public static string SRAssemblyControlsUwp;
    public static string SRAssemblyControlsUwpTests;
    public static string SRAssemblyControlsUwpDesign;
    public static string SRAssemblyChartsUwp;
    public static string SRAssemblyChartsUwpTests;
    public static string SRAssemblyChartsUwpDesign;
    public static string SRAssemblyGaugesUwp;
    public static string SRAssemblyGaugesUwpTests;
    public static string SRAssemblyGaugesUwpDesign;
    public static string SRAssemblyMapUwp;
    public static string SRAssemblyMapUwpTests;
    public static string SRAssemblyMapUwpDesign;
    public static string SRAssemblyRibbonUwp;
    public static string SRAssemblyRibbonUwpTests;
    public static string SRAssemblyRibbonUwpDesign;
    public static string SRAssemblyColorSchemeManagerUwp;
    public static string SRAssemblyColorSchemeManagerUwpTests;
    public static string SRAssemblyThemesUwp;
    public static string SRAssemblyThemesUwpTests;
    public static string SRAssemblySchedulerUwp;
    public static string SRAssemblySchedulerUwpTests;
    public static string SRAssemblySchedulerUwpDesign;
    public static string SRAssemblyAspNetCore;
    public static string SRAssemblyAspNetCoreTests;
    public static string SRAssemblyAspNetCoreResources;
    public static string SRAssemblyAspNetCoreCommon;
    public static string SRAssemblyAspNetCoreSpreadsheet;
    public static string SRAssemblyAspNetCoreSpreadsheetTest;
    public static string SRAssemblyBlazorCommon;
    public static string SRAssemblyBlazorSpreadsheet;
    public static string SRAssemblyBlazorSpreadsheetUtils;
    public static string SRAssemblyBlazorRichEdit;
    public static string SRAssemblyBlazorRichEditTest;
    public static string SRAssemblyBlazorRichEditSeleniumTest;
    public static string SRAssemblyMVC;
    public static string SRAssemblyMVC5;
    public static string SRAssemblyMVCTests;
    public static string SRAssemblyMVCChartsTests;
    public static string SRAssemblyBootstrap;
    public static string SRAssemblyBootstrapDesign;
    public static string SRAssemblyBootstrapDesignFull;
    public static string SRAssemblyBootstrapTests;
    public static string SRAssemblyExpressApp;
    public static string SRAssemblyExpressAppWeb;
    public static string SRAssemblyExpressAppBlazor;
    public static string SRAssemblyExpressAppNotificationsWeb;
    public static string SRAssemblyExpressAppMapsWeb;
    public static string SRAssemblyExpressAppOfficeBlazor;
    public static string SRAssemblyExpressAppOfficeWeb;
    public static string SRAssemblyASPxThemes;
    public static string SRAssemblyASPxThemesFull;
    public static string SRAssemblyASPxThemesTests;
    public static string SRAssemblyASPxResources;
    public static string SRAssemblyASPxGridView;
    public static string SRAssemblyASPxPivotGrid;
    public static string SRAssemblyASPxPivotGridExport;
    public static string SRAssemblyASPxPivotGridTests;
    public static string SRAssemblyBonusSkins;
    public static string SRAssemblyBonusSkinsFull;
    public static string SRAssemblyDesign;
    public static string SRAssemblyDesignFull;
    public static string SRAssemblyDataLinq;
    public static string SRAssemblyUtils;
    public static string SRAssemblyUtilsFull;
    public static string SRAssemblyParser;
    public static string SRAssemblyPrinting;
    public static string SRAssemblyPrintingFull;
    public static string SRAssemblyEditors;
    public static string SRAssemblyEditorsFull;
    public static string SRAssemblyEditorsDesign;
    public static string SRAssemblyEditorsDesignFull;
    public static string SRAssemblyDiagramCore;
    public static string SRAssemblyDiagramCoreFull;
    public static string SRAssemblyDiagramCoreTests;
    public static string SRAssemblyDiagram;
    public static string SRAssemblyDiagramFull;
    public static string SRAssemblyDiagramTests;
    public static string SRAssemblyDiagramDesign;
    public static string SRAssemblyDiagramDesignFull;
    public static string SRAssemblyGanttCore;
    public static string SRAssemblyGanttCoreTests;
    public static string SRAssemblyGantt;
    public static string SRAssemblyGanttDesign;
    public static string SRAssemblyGanttDesignFull;
    public static string SRAssemblyDialogsCore;
    public static string SRAssemblyDialogs;
    public static string SRAssemblyDialogsDesign;
    public static string SRAssemblyDialogsDesignFull;
    public static string SRAssemblyDialogsCoreTests;
    public static string SRAssemblyDialogsTests;
    public static string SRAssemblyNavBar;
    public static string SRAssemblyNavBarFull;
    public static string SRAssemblyNavBarDesign;
    public static string SRAssemblyBars;
    public static string SRAssemblyBarsFull;
    public static string SRAssemblyBarsDesign;
    public static string SRAssemblyBarsDesignFull;
    public static string SRAssemblyGrid;
    public static string SRAssemblyGridFull;
    public static string SRAssemblyGaugesCore;
    public static string SRAssemblyGaugesCoreFull;
    public static string SRAssemblyGaugesPresets;
    public static string SRAssemblyGaugesPresetsFull;
    public static string SRAssemblyGaugesWin;
    public static string SRAssemblyGaugesWinFull;
    public static string SRAssemblyASPxGauges;
    public static string SRAssemblyASPxGaugesTests;
    public static string SRAssemblyGaugesDesignWin;
    public static string SRAssemblyGridDesign;
    public static string SRAssemblyGridDesignFull;
    public static string SRAssemblyPivotGrid;
    public static string SRAssemblyPivotGridFull;
    public static string SRAssemblyPivotGridCore;
    public static string SRAssemblyPivotGridCoreFull;
    public static string SRAssemblyPivotGridDesign;
    public static string SRAssemblyPivotGridDesignFull;
    public static string SRAssemblyTreeList;
    public static string SRAssemblyTreeListFull;
    public static string SRAssemblyTreeListDesign;
    public static string SRAssemblyTreeListDesignFull;
    public static string SRAssemblyVertGrid;
    public static string SRAssemblyVertGridFull;
    public static string SRAssemblyVertGridDesign;
    public static string SRAssemblyVertGridDesignFull;
    public static string SRAssemblyReports;
    public static string SRAssemblyReportsFull;
    public static string SRAssemblyReportsTests;
    public static string SRAssemblyReportsService;
    public static string SRAssemblyReportsDesign;
    public static string SRAssemblyReportsDesignFull;
    public static string SRAssemblyReportsDesignVSCore;
    public static string SRAssemblyReportsDesignVSCoreFull;
    public static string SRAssemblyReportsImport;
    public static string SRAssemblyReportsWeb;
    public static string SRAssemblyReportsWebForms;
    public static string SRAssemblyReportsWebTests;
    public static string SRAssemblyReportsWebCommonServices;
    public static string SRAssemblyReportsAspNetCore;
    public static string SRAssemblyReportsAspNetCoreTests;
    public static string SRAssemblyReportsBlazor;
    public static string SRAssemblyReportsBlazorWebAssembly;
    public static string SRAssemblyReportsBlazorTests;
    public static string SRAssemblyReportsBlazorViewer;
    public static string SRAssemblyReportsExtensions;
    public static string SRAssemblyReportsDesignTool;
    public static string SRAssemblyReportsExtensionsFull;
    public static string SRAssemblyReportsExtensionsTests;
    public static string SRAssemblyReportsNReportTest;
    public static string SRAssemblyReportServerDesigner;
    public static string SRAssemblyReportServerWeb;
    public static string SRAssemblyReportServerDataAccess;
    public static string SRAssemblyReportsCodeCompletion;
    public static string SRAssemblyReportsCodeCompletionFull;
    public static string SRAssemblyReportsCodeCompletionTests;
    public static string SRAssemblyOfficeSkiaRenderer;
    public static string SRAssemblyOfficeSkiaRendererFull;
    public static string SRAssemblyRichEdit;
    public static string SRAssemblyRichEditFull;
    public static string SRAssemblyRichEditDesign;
    public static string SRAssemblyRichEditDesignFull;
    public static string SRAssemblyRichEditExport;
    public static string SRAssemblyRichEditExportFull;
    public static string SRAssemblySpreadsheet;
    public static string SRAssemblySpreadsheetDesign;
    public static string SRAssemblyScheduler;
    public static string SRAssemblySchedulerDesign;
    public static string SRAssemblySchedulerDesignFull;
    public static string SRAssemblySchedulerWeb;
    public static string SRAssemblySchedulerWebDesign;
    public static string SRAssemblySchedulerWebDesignFull;
    public static string SRAssemblySchedulerExtensions;
    public static string SRAssemblySchedulerSynchronizationGoogle;
    public static string SRAssemblySchedulerSynchronizationGoogleFull;
    public static string SRAssemblySchedulerSynchronizationMicrosoft365Calendar;
    public static string SRAssemblySchedulerSynchronizationMicrosoft365CalendarFull;
    public static string SRAssemblySchedulerReporting;
    public static string SRAssemblySchedulerCoreReporting;
    public static string SRAssemblySchedulerReportingTests;
    public static string SRAssemblySchedulerReportingExtensions;
    public static string SRAssemblyChartsCore;
    public static string SRAssemblyChartsCoreFull;
    public static string SRAssemblySparklineCore;
    public static string SRAssemblySparklineCoreFull;
    public static string SRAssemblyCharts;
    public static string SRAssemblyChartsFull;
    public static string SRAssemblyChartsExtensions;
    public static string SRAssemblyChartsExtensionsFull;
    public static string SRAssemblyChartsWizard;
    public static string SRAssemblyChartsWizardShort;
    public static string SRAssemblyChartsDesign;
    public static string SRAssemblyChartsWebDesign;
    public static string SRAssemblyChartsUI;
    public static string SRAssemblyChartsWeb;
    public static string SRAssemblyWizard;
    public static string SRAssemblyWizardDesign;
    public static string SRAssemblyXpo;
    public static string SRAssemblyXpoFull;
    public static string SRAssemblyXpoUI;
    public static string SRAssemblyXpoUIFull;
    public static string SRAssemblyXpoDesign;
    public static string SRAssemblyXpoDesignFull;
    public static string SRAssemblyLayoutControl;
    public static string SRAssemblyLayoutControlFull;
    public static string SRAssemblyLayoutControlDesign;
    public static string SRAssemblyLayoutControlDesignFull;
    public static string SRAssemblySpellCheckerCore;
    public static string SRAssemblySpellChecker;
    public static string SRAssemblySpellCheckerDesign;
    public static string SRAssemblySpellCheckerDesignFull;
    public static string SRAssemblySpellCheckerWeb;
    public static string SRAssemblySpellCheckerWebTests;
    public static string SRAssemblyWeb;
    public static string SRAssemblyWebDesign;
    public static string SRAssemblyWebTests;
    public static string SRAssemblyWebDemoData;
    public static string SRAssemblyWebDemoDataTests;
    public static string SRAssemblyWebDesignFull;
    public static string SRAssemblyWebDesignTests;
    public static string SRAssemblyWebLinq;
    public static string SRAssemblyWebProjectsWizardCoreTests;
    public static string SRAssemblyWebProjectsWizardAspNetTests;
    public static string SRAssemblyWebProjectsWizardNetCoreTests;
    public static string SRAssemblyWebProjectsMvcWizardTests;
    public static string SRAssemblyANCSpreadsheet;
    public static string SRAssemblyWebSpreadsheet;
    public static string SRAssemblyWebSpreadsheetFull;
    public static string SRAssemblyWebSpreadsheetTests;
    public static string SRAssemblyWebRichEdit;
    public static string SRAssemblyWebRichEditFull;
    public static string SRAssemblyWebRichEditTests;
    public static string SRAssemblyHtmlEditorWeb;
    public static string SRAssemblyWebHtmlEditorTests;
    public static string SRAssemblyEditorsWeb;
    public static string SRAssemblyTreeListWeb;
    public static string SRAssemblyDiagramWeb;
    public static string SRAssemblyDiagramWebTests;
    public static string SRAssemblyGanttWeb;
    public static string SRAssemblyGanttWebTests;
    public static string SRAssemblyTreeListWebTests;
    public static string SRAssemblyDXPivotGrid;
    public static string SRAssemblyDXThemeEditorUIWithoutVSuffix;
    public static string SRAssemblyDXThemeEditorUI;
    public static string SRAssemblySnap;
    public static string SRAssemblySnapCore;
    public static string SRAssemblySnapExtensions;
    public static string SRAssemblySnapDesign;
    public static string SRAssemblySnapDesignFull;
    public static string SRAssemblyUtilsUI;
    public static string SRAssemblyUtilsUIFull;
    public static string SRAssemblyDashboardCore;
    public static string SRAssemblyDashboardWin;
    public static string SRAssemblyDashboardWinFull;
    public static string SRAssemblyDashboardXpf;
    public static string SRAssemblyDashboardWpf;
    public static string SRAssemblyDashboardWpfFull;
    public static string SRAssemblyDashboardWeb;
    public static string SRAssemblyDashboardWebWebForms;
    public static string SRAssemblyDashboardWebWebFormsTests;
    public static string SRAssemblyDashboardWebMVC;
    public static string SRAssemblyDashboardWebMVC5;
    public static string SRAssemblyDashboardAspNetCore;
    public static string SRAssemblyDashboardAspNetCoreTests;
    public static string SRAssemblyDashboardWpfDesign;
    public static string SRAssemblyDashboardWinDesign;
    public static string SRAssemblyDashboardWinDesignFull;
    public static string SRAssemblyDashboardWebDesign;
    public static string SRAssemblyDashboardWebDesignFull;
    public static string SRAssemblyMapCore;
    public static string SRAssemblyMapCoreTests;
    public static string SRAssemblyMap;
    public static string SRAssemblyMapFull;
    public static string SRAssemblyMapTests;
    public static string SRAssemblyMapDesign;
    public static string SRAssemblyMapDesignFull;
    public static string SRAssemblyTreeMapCore;
    public static string SRAssemblyTreeMap;
    public static string SRAssemblyTreeMapDesign;
    public static string SRAssemblyTreeMapUI;
    public static string SRAssemblyDataVisualizationCore;
    public static string SRAssemblyDataAccess;
    public static string SRAssemblyDataAccessFull;
    public static string SRAssemblyDataAccessUI;
    public static string SRAssemblyDataAccessUIFull;
    public static string SRAssemblyDataAccessDesign;
    public static string SRAssemblyDataAccessDesignFull;
    public static string SRAssemblyCodeParser;
    public static string SRAssemblyCodeParserFull;
    public static string SRAssemblyDrawing;
    public static string SRAssemblyDrawingFull;
    public static string SRAssemblyDrawingTests;
    public static string SRAssemblyDrawingSkiaRenderer;
    public static string SRAssemblyDrawingSkiaRendererFull;
    public static string SRAssemblyDrawingSkiaRendererTests;
    public static string SRAssemblyPdfCore;
    public static string SRAssemblyPdfCoreFull;
    public static string SRAssemblyPdfDrawing;
    public static string SRAssemblyPdfDrawingFull;
    public static string SRAssemblyPdfSkiaRenderer;
    public static string SRAssemblyPdfSkiaRendererFull;
    public static string SRAssemblyXtraPdfViewer;
    public static string SRAssemblyXtraPdfViewerDesign;
    public static string SRAssemblyXtraPdfViewerDesignFull;
    public static string SRAssemblySpreadsheetCoreTestsRangeCopy;
    public static string SRAssemblySpreadsheetCoreTestsNotification;
    public static string SRAssemblySpreadsheetCoreTestsFunctions;
    public static string SRAssemblyMauiCore;
    public static string SRAssemblyMauiCoreFull;
    public static string SRAssemblyAIIntegration;
    public static string SRAssemblyAIIntegrationFull;
    public static string SRAssemblyAIIntegrationDesktop;
    public static string SRAssemblyAIIntegrationDesktopFull;
    public static string SRAssemblyAIIntegrationWinForms;
    public static string SRAssemblyAIIntegrationWinFormsFull;
    public static string SRAssemblyAIIntegrationWpf;
    public static string SRAssemblyAIIntegrationWpfFull;
    public static string SRAssemblyAIIntegrationNetCoreReporting;
    public static string SRAssemblyAIIntegrationBlazorReportingViewer;
    public static string SRNuGetPackageVersion;
    public static string DXTabNameComponents;
    public static string DXTabNameNavigationAndLayout;
    public static string DXTabNameOrmComponents;
    public static string DXTabNameReporting;
    public static string DXTabNameReportControls;
    public static string DXTabNameDataUwp;
    public static string DXTabNameDataWinUI;
    public static string DXTabNameDashboardItems;
    public static string DXTabNameData;
    public static string DXTabNameVisualization;
    public static string DXTabNameScheduling;
    public static string DXTabNameSchedulerReporting;
    public static string DXTabNameRichEdit;
    public static string DXTabNameSpreadsheet;
    public static string DXTabNameCommon;
    public static string DXTabNameBootstrap;
    public static string DXTabNameLayoutContainers;
    public static string DXTabNameLayoutControl;
    public static string DXTabPrefix;
    public static string DXTabFree;
    public static string DXTabComponents;
    public static string DXTabNavigation;
    public static string DXTabLayoutControl;
    public static string DXTabLayoutContainers;
    public static string DXTabReporting;
    public static string DXTabReportControls;
    public static string DXTabDataUwp;
    public static string DXTabDataWinUI;
    public static string DXTabDashboardItems;
    public static string DXTabData;
    public static string DXTabVisualization;
    public static string DXTabOrmComponents;
    public static string DXTabScheduling;
    public static string DXTabSchedulerReporting;
    public static string DXTabRichEdit;
    public static string DXTabSpreadsheet;
    public static string DXTabCommon;
    public static string DXTabBootstrap;
    public static string DXTabNameXPOProfiler;
    public static string DXTabWpfNavigation;
    public static string DXTabWpfReporting;
    public static string DXTabWpfData;
    public static string DXTabWpfVisualization;
    public static string DXTabWpfCommon;
    public static string DXTabWpfScheduling;
    public static string DXTabWpfSchedulingOld;
    public static string DXTabWpfRichEdit;
    public static string DXTabWpfSpreadsheet;
    public static string DXLinkCompetitiveDiscounts;
    public static string DXLinkCompare;
    public static string DXLinkTrial;
    public static string DXLinkChat;
    public static string DXLinkHelp;
    public static string DXLinkBuyNow;
    public static string DXLinkBuyNowASP;
    public static string DXLinkWhatsNew;
    public static string DXLinkGetSupport;
    public static string DXLinkGetStarted;
    public static string DXLinkRegisterKB;
    public static string DXLinkGetStartedWinGrid;
    public static string DXLinkTrialASPNETCore;
    public static string DXLinkTrialDashboards;
    public static string DXLinkTrialDevExtreme;
    public static string DXLinkTrialReporting;
    public static string DXLinkTrialOffice;
    public static string DXLinkTrialBlazor;
    public static string DXLinkTrialXAF;
    public static string DXLinkTrialCommon;
    public static string DXEmailInfo;
    public static string DXLinkEmailInfo;
    public static string VisualStudio2019InteropAssembly;
    public static string VisualStudio2022InteropAssembly;
}
public class DevExpress.AspNetCore.Reporting.ParametersPanel.Native.DataContracts.ParametersPanelClientSideEvents : WebDocumentViewerClientSideEventsBase {
    public ParametersPanelClientSideEvents(string eventSenderCreated);
}
[DataContractAttribute]
public class DevExpress.AspNetCore.Reporting.ReportDesigner.Native.DataContracts.ReportDesignerClientSideEvents : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private string <SaveCommandExecute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeMenuActions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeParameterEditors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeParameterProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeParameterLookUpSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExitDesigner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportSaving>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportSaved>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportOpening>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportTabClosing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportTabClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TabChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnServerError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComponentAdded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeElements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeSaveDialog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeSaveAsDialog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeOpenDialog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeToolbox>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeFieldListActions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeLocalization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnInitializing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeforeRender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeWizard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewDocumentReady>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewOnExport>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewParametersInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewEditingFieldChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewCustomizeElements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewCustomizeMenuActions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewClick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewParametersReset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewParametersSubmitted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewCustomizeExportOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventSenderCreated>k__BackingField;
    [DataMemberAttribute]
public string SaveCommandExecute { get; public set; }
    [DataMemberAttribute]
public string CustomizeMenuActions { get; public set; }
    [DataMemberAttribute]
public string CustomizeParameterEditors { get; public set; }
    [DataMemberAttribute]
public string CustomizeParameterProperties { get; public set; }
    [DataMemberAttribute]
public string CustomizeParameterLookUpSource { get; public set; }
    [DataMemberAttribute]
public string ExitDesigner { get; public set; }
    [DataMemberAttribute]
public string ReportSaving { get; public set; }
    [DataMemberAttribute]
public string ReportSaved { get; public set; }
    [DataMemberAttribute]
public string ReportOpening { get; public set; }
    [DataMemberAttribute]
public string ReportOpened { get; public set; }
    [DataMemberAttribute]
public string ReportTabClosing { get; public set; }
    [DataMemberAttribute]
public string ReportTabClosed { get; public set; }
    [DataMemberAttribute]
public string TabChanged { get; public set; }
    [DataMemberAttribute]
public string OnServerError { get; public set; }
    [DataMemberAttribute]
public string ComponentAdded { get; public set; }
    [DataMemberAttribute]
public string CustomizeElements { get; public set; }
    [DataMemberAttribute]
public string CustomizeSaveDialog { get; public set; }
    [DataMemberAttribute]
public string CustomizeSaveAsDialog { get; public set; }
    [DataMemberAttribute]
public string CustomizeOpenDialog { get; public set; }
    [DataMemberAttribute]
public string CustomizeToolbox { get; public set; }
    [DataMemberAttribute]
public string CustomizeFieldListActions { get; public set; }
    [DataMemberAttribute]
public string CustomizeLocalization { get; public set; }
    [DataMemberAttribute]
public string OnInitializing { get; public set; }
    [DataMemberAttribute]
public string BeforeRender { get; public set; }
    [DataMemberAttribute]
public string CustomizeWizard { get; public set; }
    [DataMemberAttribute]
public string PreviewDocumentReady { get; public set; }
    [DataMemberAttribute]
public string PreviewOnExport { get; public set; }
    [DataMemberAttribute]
public string PreviewParametersInitialized { get; public set; }
    [DataMemberAttribute]
public string PreviewEditingFieldChanged { get; public set; }
    [DataMemberAttribute]
public string PreviewCustomizeElements { get; public set; }
    [DataMemberAttribute]
public string PreviewCustomizeMenuActions { get; public set; }
    [DataMemberAttribute]
public string PreviewClick { get; public set; }
    [DataMemberAttribute]
public string PreviewParametersReset { get; public set; }
    [DataMemberAttribute]
public string PreviewParametersSubmitted { get; public set; }
    [DataMemberAttribute]
public string PreviewCustomizeExportOptions { get; public set; }
    [DataMemberAttribute]
public string EventSenderCreated { get; internal set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    public ReportDesignerClientSideEvents(string eventSenderCreated);
    [CompilerGeneratedAttribute]
public string get_SaveCommandExecute();
    [CompilerGeneratedAttribute]
public void set_SaveCommandExecute(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeMenuActions();
    [CompilerGeneratedAttribute]
public void set_CustomizeMenuActions(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeParameterEditors();
    [CompilerGeneratedAttribute]
public void set_CustomizeParameterEditors(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeParameterProperties();
    [CompilerGeneratedAttribute]
public void set_CustomizeParameterProperties(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeParameterLookUpSource();
    [CompilerGeneratedAttribute]
public void set_CustomizeParameterLookUpSource(string value);
    [CompilerGeneratedAttribute]
public string get_ExitDesigner();
    [CompilerGeneratedAttribute]
public void set_ExitDesigner(string value);
    [CompilerGeneratedAttribute]
public string get_ReportSaving();
    [CompilerGeneratedAttribute]
public void set_ReportSaving(string value);
    [CompilerGeneratedAttribute]
public string get_ReportSaved();
    [CompilerGeneratedAttribute]
public void set_ReportSaved(string value);
    [CompilerGeneratedAttribute]
public string get_ReportOpening();
    [CompilerGeneratedAttribute]
public void set_ReportOpening(string value);
    [CompilerGeneratedAttribute]
public string get_ReportOpened();
    [CompilerGeneratedAttribute]
public void set_ReportOpened(string value);
    [CompilerGeneratedAttribute]
public string get_ReportTabClosing();
    [CompilerGeneratedAttribute]
public void set_ReportTabClosing(string value);
    [CompilerGeneratedAttribute]
public string get_ReportTabClosed();
    [CompilerGeneratedAttribute]
public void set_ReportTabClosed(string value);
    [CompilerGeneratedAttribute]
public string get_TabChanged();
    [CompilerGeneratedAttribute]
public void set_TabChanged(string value);
    [CompilerGeneratedAttribute]
public string get_OnServerError();
    [CompilerGeneratedAttribute]
public void set_OnServerError(string value);
    [CompilerGeneratedAttribute]
public string get_ComponentAdded();
    [CompilerGeneratedAttribute]
public void set_ComponentAdded(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeElements();
    [CompilerGeneratedAttribute]
public void set_CustomizeElements(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeSaveDialog();
    [CompilerGeneratedAttribute]
public void set_CustomizeSaveDialog(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeSaveAsDialog();
    [CompilerGeneratedAttribute]
public void set_CustomizeSaveAsDialog(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeOpenDialog();
    [CompilerGeneratedAttribute]
public void set_CustomizeOpenDialog(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeToolbox();
    [CompilerGeneratedAttribute]
public void set_CustomizeToolbox(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeFieldListActions();
    [CompilerGeneratedAttribute]
public void set_CustomizeFieldListActions(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeLocalization();
    [CompilerGeneratedAttribute]
public void set_CustomizeLocalization(string value);
    [CompilerGeneratedAttribute]
public string get_OnInitializing();
    [CompilerGeneratedAttribute]
public void set_OnInitializing(string value);
    [CompilerGeneratedAttribute]
public string get_BeforeRender();
    [CompilerGeneratedAttribute]
public void set_BeforeRender(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeWizard();
    [CompilerGeneratedAttribute]
public void set_CustomizeWizard(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewDocumentReady();
    [CompilerGeneratedAttribute]
public void set_PreviewDocumentReady(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewOnExport();
    [CompilerGeneratedAttribute]
public void set_PreviewOnExport(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewParametersInitialized();
    [CompilerGeneratedAttribute]
public void set_PreviewParametersInitialized(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewEditingFieldChanged();
    [CompilerGeneratedAttribute]
public void set_PreviewEditingFieldChanged(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewCustomizeElements();
    [CompilerGeneratedAttribute]
public void set_PreviewCustomizeElements(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewCustomizeMenuActions();
    [CompilerGeneratedAttribute]
public void set_PreviewCustomizeMenuActions(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewClick();
    [CompilerGeneratedAttribute]
public void set_PreviewClick(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewParametersReset();
    [CompilerGeneratedAttribute]
public void set_PreviewParametersReset(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewParametersSubmitted();
    [CompilerGeneratedAttribute]
public void set_PreviewParametersSubmitted(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewCustomizeExportOptions();
    [CompilerGeneratedAttribute]
public void set_PreviewCustomizeExportOptions(string value);
    [CompilerGeneratedAttribute]
public string get_EventSenderCreated();
    [CompilerGeneratedAttribute]
internal void set_EventSenderCreated(string value);
    public void Assign(ReportDesignerClientSideEvents events);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.AspNetCore.Reporting.WebDocumentViewer.Native.DataContracts.WebDocumentViewerClientSideEvents : WebDocumentViewerClientSideEventsBase {
    [CompilerGeneratedAttribute]
private string <DocumentReady>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EditingFieldChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewClick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeElements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeMenuActions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeExportOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParametersSubmitted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnExport>k__BackingField;
    [DataMemberAttribute]
public string DocumentReady { get; public set; }
    [DataMemberAttribute]
public string EditingFieldChanged { get; public set; }
    [DataMemberAttribute]
public string PreviewClick { get; public set; }
    [DataMemberAttribute]
public string CustomizeElements { get; public set; }
    [DataMemberAttribute]
public string CustomizeMenuActions { get; public set; }
    [DataMemberAttribute]
public string CustomizeExportOptions { get; public set; }
    [DataMemberAttribute]
public string ParametersSubmitted { get; public set; }
    [DataMemberAttribute]
public string OnExport { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    public WebDocumentViewerClientSideEvents(string eventSenderCreated);
    [CompilerGeneratedAttribute]
public string get_DocumentReady();
    [CompilerGeneratedAttribute]
public void set_DocumentReady(string value);
    [CompilerGeneratedAttribute]
public string get_EditingFieldChanged();
    [CompilerGeneratedAttribute]
public void set_EditingFieldChanged(string value);
    [CompilerGeneratedAttribute]
public string get_PreviewClick();
    [CompilerGeneratedAttribute]
public void set_PreviewClick(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeElements();
    [CompilerGeneratedAttribute]
public void set_CustomizeElements(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeMenuActions();
    [CompilerGeneratedAttribute]
public void set_CustomizeMenuActions(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeExportOptions();
    [CompilerGeneratedAttribute]
public void set_CustomizeExportOptions(string value);
    [CompilerGeneratedAttribute]
public string get_ParametersSubmitted();
    [CompilerGeneratedAttribute]
public void set_ParametersSubmitted(string value);
    [CompilerGeneratedAttribute]
public string get_OnExport();
    [CompilerGeneratedAttribute]
public void set_OnExport(string value);
    public void Assign(WebDocumentViewerClientSideEvents events);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public abstract class DevExpress.AspNetCore.Reporting.WebDocumentViewer.Native.DataContracts.WebDocumentViewerClientSideEventsBase : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private string <ParametersReset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeParameterEditors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeParameterLookUpSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomizeLocalization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnInitializing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeforeRender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnServerError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParametersInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventSenderCreated>k__BackingField;
    [DataMemberAttribute]
public string ParametersReset { get; public set; }
    [DataMemberAttribute]
public string CustomizeParameterEditors { get; public set; }
    [DataMemberAttribute]
public string CustomizeParameterLookUpSource { get; public set; }
    [DataMemberAttribute]
public string CustomizeLocalization { get; public set; }
    [DataMemberAttribute]
public string OnInitializing { get; public set; }
    [DataMemberAttribute]
public string BeforeRender { get; public set; }
    [DataMemberAttribute]
public string OnServerError { get; public set; }
    [DataMemberAttribute]
public string ParametersInitialized { get; public set; }
    [DataMemberAttribute]
public string EventSenderCreated { get; internal set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    public WebDocumentViewerClientSideEventsBase(string eventSenderCreated);
    [CompilerGeneratedAttribute]
public string get_ParametersReset();
    [CompilerGeneratedAttribute]
public void set_ParametersReset(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeParameterEditors();
    [CompilerGeneratedAttribute]
public void set_CustomizeParameterEditors(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeParameterLookUpSource();
    [CompilerGeneratedAttribute]
public void set_CustomizeParameterLookUpSource(string value);
    [CompilerGeneratedAttribute]
public string get_CustomizeLocalization();
    [CompilerGeneratedAttribute]
public void set_CustomizeLocalization(string value);
    [CompilerGeneratedAttribute]
public string get_OnInitializing();
    [CompilerGeneratedAttribute]
public void set_OnInitializing(string value);
    [CompilerGeneratedAttribute]
public string get_BeforeRender();
    [CompilerGeneratedAttribute]
public void set_BeforeRender(string value);
    [CompilerGeneratedAttribute]
public string get_OnServerError();
    [CompilerGeneratedAttribute]
public void set_OnServerError(string value);
    [CompilerGeneratedAttribute]
public string get_ParametersInitialized();
    [CompilerGeneratedAttribute]
public void set_ParametersInitialized(string value);
    [CompilerGeneratedAttribute]
public string get_EventSenderCreated();
    [CompilerGeneratedAttribute]
internal void set_EventSenderCreated(string value);
    public void Assign(WebDocumentViewerClientSideEventsBase events);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public enum DevExpress.Charts.Native.DateTimeMeasureUnitNative : Enum {
    public int value__;
    public static DateTimeMeasureUnitNative Millisecond;
    public static DateTimeMeasureUnitNative Second;
    public static DateTimeMeasureUnitNative Minute;
    public static DateTimeMeasureUnitNative Hour;
    public static DateTimeMeasureUnitNative Day;
    public static DateTimeMeasureUnitNative Week;
    public static DateTimeMeasureUnitNative Month;
    public static DateTimeMeasureUnitNative Quarter;
    public static DateTimeMeasureUnitNative Year;
}
public interface DevExpress.CodeParser.IToken {
    public int StartPosition { get; }
    public int EndPosition { get; }
    public int Length { get; }
    public abstract virtual int get_StartPosition();
    public abstract virtual int get_EndPosition();
    public abstract virtual int get_Length();
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.CodeParser.ITokenCollection {
    public IToken Item { get; }
    public int Count { get; }
    public abstract virtual IToken get_Item(int index);
    public abstract virtual int get_Count();
}
internal static class DevExpress.Compatibility.System.Windows.Forms.ListBindingHelper : object {
    private static Attribute[] browsableAttribute;
    private static Attribute[] BrowsableAttributeList { get; }
    private static Attribute[] get_BrowsableAttributeList();
    public static object GetList(object list);
    public static object GetList(object dataSource, string dataMember);
    public static string GetListName(object list, PropertyDescriptor[] listAccessors);
    public static PropertyDescriptorCollection GetListItemProperties(object list);
    public static PropertyDescriptorCollection GetListItemProperties(object list, PropertyDescriptor[] listAccessors);
    public static PropertyDescriptorCollection GetListItemProperties(object dataSource, string dataMember, PropertyDescriptor[] listAccessors);
    public static Type GetListItemType(object list);
    public static Type GetListItemType(object dataSource, string dataMember);
    private static object CreateInstanceOfType(Type type);
    private static string GetListNameFromType(Type type);
    private static PropertyDescriptorCollection GetListItemPropertiesByType(Type type);
    private static PropertyDescriptorCollection GetListItemPropertiesByType(Type type, PropertyDescriptor[] listAccessors);
    private static PropertyDescriptorCollection GetListItemPropertiesByType(Type type, PropertyDescriptor[] listAccessors, int startIndex);
    private static PropertyDescriptorCollection GetListItemPropertiesByEnumerable(IEnumerable enumerable);
    private static PropertyDescriptorCollection GetListItemPropertiesByEnumerable(IEnumerable iEnumerable, PropertyDescriptor[] listAccessors, int startIndex);
    private static PropertyDescriptorCollection GetListItemPropertiesByEnumerable(IEnumerable enumerable, PropertyDescriptor[] listAccessors);
    private static Type GetListItemTypeByEnumerable(IEnumerable iEnumerable);
    private static PropertyDescriptorCollection GetListItemPropertiesByInstance(object target, PropertyDescriptor[] listAccessors, int startIndex);
    private static bool IsListBasedType(Type type);
    private static PropertyInfo GetTypedIndexer(Type type);
    private static object GetFirstItemByEnumerable(IEnumerable enumerable);
}
public enum DevExpress.DashboardCommon.ChartExportSizeMode : Enum {
    public int value__;
    public static ChartExportSizeMode None;
    public static ChartExportSizeMode Stretch;
    public static ChartExportSizeMode Zoom;
}
public enum DevExpress.DashboardCommon.DashboardExportDocumentScaleMode : Enum {
    public int value__;
    public static DashboardExportDocumentScaleMode None;
    public static DashboardExportDocumentScaleMode UseScaleFactor;
    public static DashboardExportDocumentScaleMode AutoFitToPagesWidth;
}
public enum DevExpress.DashboardCommon.DashboardExportImageFormat : Enum {
    public int value__;
    public static DashboardExportImageFormat Png;
    public static DashboardExportImageFormat Jpeg;
    public static DashboardExportImageFormat Gif;
}
public enum DevExpress.DashboardCommon.DashboardExportPageLayout : Enum {
    public int value__;
    public static DashboardExportPageLayout Portrait;
    public static DashboardExportPageLayout Landscape;
}
public enum DevExpress.DashboardCommon.DashboardStateExcelExportPosition : Enum {
    public int value__;
    public static DashboardStateExcelExportPosition Below;
    public static DashboardStateExcelExportPosition SeparateSheet;
}
public enum DevExpress.DashboardCommon.DashboardStateExportPosition : Enum {
    public int value__;
    public static DashboardStateExportPosition Below;
    public static DashboardStateExportPosition SeparatePage;
}
[DXHelpExcludeAttribute("True")]
[EventSourceAttribute]
public class DevExpress.DashboardCommon.Diagnostics.DashboardEventSource : EventSource {
    public static DashboardEventSource Instance;
    private static DashboardEventSource();
    public void EnterScope(string Name, int Id);
    public void LeaveScope(string Name, int Id);
    public void TraceData(int EventType, string Data, int Id);
}
public class DevExpress.DashboardCommon.Diagnostics.DashboardTelemetry : object {
    private string Name;
    public DashboardTelemetry(string name);
    public static void TraceInformation(object Data);
    public static void TraceError(object Data);
    public static void TraceWarning(object Data);
    public sealed virtual void Dispose();
    public static T Log(string functionName, Func`1<T> function);
    public static void Log(string functionName, Action action);
    private static void Trace(object Data, TraceEventType EventType);
}
public enum DevExpress.DashboardCommon.ExcelFormat : Enum {
    public int value__;
    public static ExcelFormat Csv;
    public static ExcelFormat Xls;
    public static ExcelFormat Xlsx;
}
public enum DevExpress.DashboardCommon.MapExportSizeMode : Enum {
    public int value__;
    public static MapExportSizeMode None;
    public static MapExportSizeMode Zoom;
}
[ProductKindAttribute("140737488355328")]
public class DevExpress.DashboardCommon.Native.DXDashboardLicenseProvider : DXLicenseProvider {
    protected ProductKind Kind { get; }
    protected virtual ProductKind get_Kind();
}
public interface DevExpress.DashboardCommon.Native.IDashboardExcelExportOptions {
    public ExcelFormat Format { get; public set; }
    public string CsvValueSeparator { get; public set; }
    public DashboardStateExcelExportPosition DashboardStatePosition { get; public set; }
    public bool ExportFilters { get; public set; }
    public bool ExportParameters { get; public set; }
    public bool IncludeHiddenParameters { get; public set; }
    public abstract virtual ExcelFormat get_Format();
    public abstract virtual void set_Format(ExcelFormat value);
    public abstract virtual string get_CsvValueSeparator();
    public abstract virtual void set_CsvValueSeparator(string value);
    public abstract virtual DashboardStateExcelExportPosition get_DashboardStatePosition();
    public abstract virtual void set_DashboardStatePosition(DashboardStateExcelExportPosition value);
    public abstract virtual bool get_ExportFilters();
    public abstract virtual void set_ExportFilters(bool value);
    public abstract virtual bool get_ExportParameters();
    public abstract virtual void set_ExportParameters(bool value);
    public abstract virtual bool get_IncludeHiddenParameters();
    public abstract virtual void set_IncludeHiddenParameters(bool value);
}
public interface DevExpress.DashboardCommon.Native.IDashboardImageExportOptions {
    public DefaultBoolean ShowTitle { get; public set; }
    public int Resolution { get; public set; }
    public DashboardExportImageFormat Format { get; public set; }
    public float ScaleFactor { get; public set; }
    public bool ExportFilters { get; public set; }
    public bool ExportParameters { get; public set; }
    public bool IncludeHiddenParameters { get; public set; }
    public IExportFontInfo FontInfo { get; }
    public abstract virtual DefaultBoolean get_ShowTitle();
    public abstract virtual void set_ShowTitle(DefaultBoolean value);
    public abstract virtual int get_Resolution();
    public abstract virtual void set_Resolution(int value);
    public abstract virtual DashboardExportImageFormat get_Format();
    public abstract virtual void set_Format(DashboardExportImageFormat value);
    public abstract virtual float get_ScaleFactor();
    public abstract virtual void set_ScaleFactor(float value);
    public abstract virtual bool get_ExportFilters();
    public abstract virtual void set_ExportFilters(bool value);
    public abstract virtual bool get_ExportParameters();
    public abstract virtual void set_ExportParameters(bool value);
    public abstract virtual bool get_IncludeHiddenParameters();
    public abstract virtual void set_IncludeHiddenParameters(bool value);
    public abstract virtual IExportFontInfo get_FontInfo();
}
public interface DevExpress.DashboardCommon.Native.IDashboardPdfExportOptions {
    public int PaperKindId { get; public set; }
    public DashboardExportPageLayout PageLayout { get; public set; }
    public DashboardExportDocumentScaleMode DocumentScaleMode { get; public set; }
    public float ScaleFactor { get; public set; }
    public int AutoFitPageCount { get; public set; }
    public DefaultBoolean ShowTitle { get; public set; }
    public DashboardStateExportPosition DashboardStatePosition { get; public set; }
    public bool CardAutoArrangeContent { get; public set; }
    public ChartExportSizeMode ChartSizeMode { get; public set; }
    public bool ChartAutomaticPageLayout { get; public set; }
    public bool GaugeAutoArrangeContent { get; public set; }
    public bool GridFitToPageWidth { get; public set; }
    public bool GridPrintHeadersOnEveryPage { get; public set; }
    public MapExportSizeMode MapSizeMode { get; public set; }
    public bool MapAutomaticPageLayout { get; public set; }
    public bool PieAutoArrangeContent { get; public set; }
    public bool PivotPrintHeadersOnEveryPage { get; public set; }
    public RangeFilterExportSizeMode RangeFilterSizeMode { get; public set; }
    public bool RangeFilterAutomaticPageLayout { get; public set; }
    public TreemapExportSizeMode TreemapSizeMode { get; public set; }
    public bool TreemapAutomaticPageLayout { get; public set; }
    public bool ExportFilters { get; public set; }
    public bool ExportParameters { get; public set; }
    public bool IncludeHiddenParameters { get; public set; }
    public IExportFontInfo FontInfo { get; }
    public bool DashboardAutomaticPageLayout { get; public set; }
    public abstract virtual int get_PaperKindId();
    public abstract virtual void set_PaperKindId(int value);
    public abstract virtual DashboardExportPageLayout get_PageLayout();
    public abstract virtual void set_PageLayout(DashboardExportPageLayout value);
    public abstract virtual DashboardExportDocumentScaleMode get_DocumentScaleMode();
    public abstract virtual void set_DocumentScaleMode(DashboardExportDocumentScaleMode value);
    public abstract virtual float get_ScaleFactor();
    public abstract virtual void set_ScaleFactor(float value);
    public abstract virtual int get_AutoFitPageCount();
    public abstract virtual void set_AutoFitPageCount(int value);
    public abstract virtual DefaultBoolean get_ShowTitle();
    public abstract virtual void set_ShowTitle(DefaultBoolean value);
    public abstract virtual DashboardStateExportPosition get_DashboardStatePosition();
    public abstract virtual void set_DashboardStatePosition(DashboardStateExportPosition value);
    public abstract virtual bool get_CardAutoArrangeContent();
    public abstract virtual void set_CardAutoArrangeContent(bool value);
    public abstract virtual ChartExportSizeMode get_ChartSizeMode();
    public abstract virtual void set_ChartSizeMode(ChartExportSizeMode value);
    public abstract virtual bool get_ChartAutomaticPageLayout();
    public abstract virtual void set_ChartAutomaticPageLayout(bool value);
    public abstract virtual bool get_GaugeAutoArrangeContent();
    public abstract virtual void set_GaugeAutoArrangeContent(bool value);
    public abstract virtual bool get_GridFitToPageWidth();
    public abstract virtual void set_GridFitToPageWidth(bool value);
    public abstract virtual bool get_GridPrintHeadersOnEveryPage();
    public abstract virtual void set_GridPrintHeadersOnEveryPage(bool value);
    public abstract virtual MapExportSizeMode get_MapSizeMode();
    public abstract virtual void set_MapSizeMode(MapExportSizeMode value);
    public abstract virtual bool get_MapAutomaticPageLayout();
    public abstract virtual void set_MapAutomaticPageLayout(bool value);
    public abstract virtual bool get_PieAutoArrangeContent();
    public abstract virtual void set_PieAutoArrangeContent(bool value);
    public abstract virtual bool get_PivotPrintHeadersOnEveryPage();
    public abstract virtual void set_PivotPrintHeadersOnEveryPage(bool value);
    public abstract virtual RangeFilterExportSizeMode get_RangeFilterSizeMode();
    public abstract virtual void set_RangeFilterSizeMode(RangeFilterExportSizeMode value);
    public abstract virtual bool get_RangeFilterAutomaticPageLayout();
    public abstract virtual void set_RangeFilterAutomaticPageLayout(bool value);
    public abstract virtual TreemapExportSizeMode get_TreemapSizeMode();
    public abstract virtual void set_TreemapSizeMode(TreemapExportSizeMode value);
    public abstract virtual bool get_TreemapAutomaticPageLayout();
    public abstract virtual void set_TreemapAutomaticPageLayout(bool value);
    public abstract virtual bool get_ExportFilters();
    public abstract virtual void set_ExportFilters(bool value);
    public abstract virtual bool get_ExportParameters();
    public abstract virtual void set_ExportParameters(bool value);
    public abstract virtual bool get_IncludeHiddenParameters();
    public abstract virtual void set_IncludeHiddenParameters(bool value);
    public abstract virtual IExportFontInfo get_FontInfo();
    public abstract virtual bool get_DashboardAutomaticPageLayout();
    public abstract virtual void set_DashboardAutomaticPageLayout(bool value);
}
public interface DevExpress.DashboardCommon.Native.IExportFontInfo {
    public string Name { get; public set; }
    public byte GdiCharSet { get; public set; }
    public bool UseCustomFontInfo { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual byte get_GdiCharSet();
    public abstract virtual void set_GdiCharSet(byte value);
    public abstract virtual bool get_UseCustomFontInfo();
    public abstract virtual void set_UseCustomFontInfo(bool value);
}
public enum DevExpress.DashboardCommon.RangeFilterExportSizeMode : Enum {
    public int value__;
    public static RangeFilterExportSizeMode None;
    public static RangeFilterExportSizeMode Stretch;
    public static RangeFilterExportSizeMode Zoom;
}
public enum DevExpress.DashboardCommon.TreemapExportSizeMode : Enum {
    public int value__;
    public static TreemapExportSizeMode None;
    public static TreemapExportSizeMode Zoom;
}
public class DevExpress.DashboardWeb.DataRequestOptions : object {
    [CompilerGeneratedAttribute]
private ItemDataRequestMode <ItemDataRequestMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemDataLoadingMode <ItemDataLoadingMode>k__BackingField;
    public ItemDataRequestMode ItemDataRequestMode { get; public set; }
    public ItemDataLoadingMode ItemDataLoadingMode { get; public set; }
    [CompilerGeneratedAttribute]
public ItemDataRequestMode get_ItemDataRequestMode();
    [CompilerGeneratedAttribute]
public void set_ItemDataRequestMode(ItemDataRequestMode value);
    [CompilerGeneratedAttribute]
public ItemDataLoadingMode get_ItemDataLoadingMode();
    [CompilerGeneratedAttribute]
public void set_ItemDataLoadingMode(ItemDataLoadingMode value);
    internal void Assign(DataRequestOptions options);
}
public interface DevExpress.DashboardWeb.IDashboardLocalizationProvider {
    public abstract virtual Task`1<Dictionary`2<string, string>> GetLocalizationMessagesAsync();
}
public enum DevExpress.DashboardWeb.ItemDataLoadingMode : Enum {
    public int value__;
    public static ItemDataLoadingMode Always;
    public static ItemDataLoadingMode OnDemand;
}
public enum DevExpress.DashboardWeb.ItemDataRequestMode : Enum {
    public int value__;
    public static ItemDataRequestMode Auto;
    public static ItemDataRequestMode SeparateRequests;
    public static ItemDataRequestMode BatchRequests;
}
public enum DevExpress.DashboardWeb.LimitVisibleDataMode : Enum {
    public int value__;
    public static LimitVisibleDataMode Designer;
    public static LimitVisibleDataMode DesignerAndViewer;
    public static LimitVisibleDataMode None;
}
public enum DevExpress.DashboardWeb.MobileLayoutMode : Enum {
    public int value__;
    public static MobileLayoutMode Auto;
    public static MobileLayoutMode Always;
    public static MobileLayoutMode Never;
}
public class DevExpress.DashboardWeb.Native.DashboardControlOptionsDTO : DashboardSerializableOptionsBase {
    public static bool DefaultAllowMaximizeItems;
    [CompilerGeneratedAttribute]
private bool <AllowMaximizeItems>k__BackingField;
    public static bool DefaultEncodeHtml;
    [CompilerGeneratedAttribute]
private bool <EncodeHtml>k__BackingField;
    public static string DefaultEndpoint;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    public static string DefaultDashboardId;
    [CompilerGeneratedAttribute]
private string <DashboardId>k__BackingField;
    public static string DefaultInitialDashboardId;
    [CompilerGeneratedAttribute]
private string <InitialDashboardId>k__BackingField;
    public static string DefaultInitialDashboardState;
    [CompilerGeneratedAttribute]
private string <InitialDashboardState>k__BackingField;
    public static LimitVisibleDataMode DefaultLimitVisibleDataMode;
    [CompilerGeneratedAttribute]
private LimitVisibleDataMode <LimitVisibleDataMode>k__BackingField;
    public static bool DefaultLoadDefaultDashboard;
    [CompilerGeneratedAttribute]
private bool <LoadDefaultDashboard>k__BackingField;
    public static bool DefaultResizeByTimer;
    [CompilerGeneratedAttribute]
private bool <ResizeByTimer>k__BackingField;
    public static bool DefaultShowConfirmationOnBrowserClosing;
    [CompilerGeneratedAttribute]
private bool <ShowConfirmationOnBrowserClosing>k__BackingField;
    public static bool DefaultUseCardLegacyLayout;
    [CompilerGeneratedAttribute]
private bool <UseCardLegacyLayout>k__BackingField;
    public static bool DefaultUseNeutralFilterMode;
    [CompilerGeneratedAttribute]
private bool <UseNeutralFilterMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    public static WorkingMode DefaultWorkingMode;
    [CompilerGeneratedAttribute]
private WorkingMode <WorkingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnDashboardBeginUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnDashboardEndUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnDashboardInitializing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnDashboardInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnDashboardStateChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnInitializing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemBeginUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemEndUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private FetchRemoteServiceOptionsDTO <FetchRemoteService>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionsOptionsDTO <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRequestOptionsDTO <DataRequestOptions>k__BackingField;
    public bool AllowMaximizeItems { get; public set; }
    public bool EncodeHtml { get; public set; }
    public string Endpoint { get; public set; }
    public string DashboardId { get; public set; }
    public string InitialDashboardId { get; public set; }
    public string InitialDashboardState { get; public set; }
    public LimitVisibleDataMode LimitVisibleDataMode { get; public set; }
    public bool LoadDefaultDashboard { get; public set; }
    public bool ResizeByTimer { get; public set; }
    public bool ShowConfirmationOnBrowserClosing { get; public set; }
    public bool UseCardLegacyLayout { get; public set; }
    public bool UseNeutralFilterMode { get; public set; }
    public string Nonce { get; public set; }
    public WorkingMode WorkingMode { get; public set; }
    public string OnDashboardBeginUpdate { get; public set; }
    public string OnDashboardEndUpdate { get; public set; }
    public string OnDashboardInitializing { get; public set; }
    public string OnDashboardInitialized { get; public set; }
    public string OnDashboardStateChanged { get; public set; }
    public string OnInitializing { get; public set; }
    public string OnItemBeginUpdate { get; public set; }
    public string OnItemEndUpdate { get; public set; }
    public FetchRemoteServiceOptionsDTO FetchRemoteService { get; }
    public ExtensionsOptionsDTO Extensions { get; }
    public DataRequestOptionsDTO DataRequestOptions { get; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_AllowMaximizeItems();
    [CompilerGeneratedAttribute]
public void set_AllowMaximizeItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_EncodeHtml();
    [CompilerGeneratedAttribute]
public void set_EncodeHtml(bool value);
    [CompilerGeneratedAttribute]
public string get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(string value);
    [CompilerGeneratedAttribute]
public string get_DashboardId();
    [CompilerGeneratedAttribute]
public void set_DashboardId(string value);
    [CompilerGeneratedAttribute]
public string get_InitialDashboardId();
    [CompilerGeneratedAttribute]
public void set_InitialDashboardId(string value);
    [CompilerGeneratedAttribute]
public string get_InitialDashboardState();
    [CompilerGeneratedAttribute]
public void set_InitialDashboardState(string value);
    [CompilerGeneratedAttribute]
public LimitVisibleDataMode get_LimitVisibleDataMode();
    [CompilerGeneratedAttribute]
public void set_LimitVisibleDataMode(LimitVisibleDataMode value);
    [CompilerGeneratedAttribute]
public bool get_LoadDefaultDashboard();
    [CompilerGeneratedAttribute]
public void set_LoadDefaultDashboard(bool value);
    [CompilerGeneratedAttribute]
public bool get_ResizeByTimer();
    [CompilerGeneratedAttribute]
public void set_ResizeByTimer(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowConfirmationOnBrowserClosing();
    [CompilerGeneratedAttribute]
public void set_ShowConfirmationOnBrowserClosing(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCardLegacyLayout();
    [CompilerGeneratedAttribute]
public void set_UseCardLegacyLayout(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNeutralFilterMode();
    [CompilerGeneratedAttribute]
public void set_UseNeutralFilterMode(bool value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public WorkingMode get_WorkingMode();
    [CompilerGeneratedAttribute]
public void set_WorkingMode(WorkingMode value);
    [CompilerGeneratedAttribute]
public string get_OnDashboardBeginUpdate();
    [CompilerGeneratedAttribute]
public void set_OnDashboardBeginUpdate(string value);
    [CompilerGeneratedAttribute]
public string get_OnDashboardEndUpdate();
    [CompilerGeneratedAttribute]
public void set_OnDashboardEndUpdate(string value);
    [CompilerGeneratedAttribute]
public string get_OnDashboardInitializing();
    [CompilerGeneratedAttribute]
public void set_OnDashboardInitializing(string value);
    [CompilerGeneratedAttribute]
public string get_OnDashboardInitialized();
    [CompilerGeneratedAttribute]
public void set_OnDashboardInitialized(string value);
    [CompilerGeneratedAttribute]
public string get_OnDashboardStateChanged();
    [CompilerGeneratedAttribute]
public void set_OnDashboardStateChanged(string value);
    [CompilerGeneratedAttribute]
public string get_OnInitializing();
    [CompilerGeneratedAttribute]
public void set_OnInitializing(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemBeginUpdate();
    [CompilerGeneratedAttribute]
public void set_OnItemBeginUpdate(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemEndUpdate();
    [CompilerGeneratedAttribute]
public void set_OnItemEndUpdate(string value);
    [CompilerGeneratedAttribute]
public FetchRemoteServiceOptionsDTO get_FetchRemoteService();
    [CompilerGeneratedAttribute]
public ExtensionsOptionsDTO get_Extensions();
    [CompilerGeneratedAttribute]
public DataRequestOptionsDTO get_DataRequestOptions();
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.DashboardDataSourceWizardSettingsDTO : DashboardSerializableOptionsBase {
    public static bool DefaultEnableSqlDataSource;
    [CompilerGeneratedAttribute]
private bool <EnableSqlDataSource>k__BackingField;
    public static bool DefaultEnableJsonDataSource;
    [CompilerGeneratedAttribute]
private bool <EnableJsonDataSource>k__BackingField;
    public static bool DefaultEnableOlapDataSource;
    [CompilerGeneratedAttribute]
private bool <EnableOlapDataSource>k__BackingField;
    public static bool DefaultEnableFederationDataSource;
    [CompilerGeneratedAttribute]
private bool <EnableFederationDataSource>k__BackingField;
    public bool EnableSqlDataSource { get; public set; }
    public bool EnableJsonDataSource { get; public set; }
    public bool EnableOlapDataSource { get; public set; }
    public bool EnableFederationDataSource { get; public set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_EnableSqlDataSource();
    [CompilerGeneratedAttribute]
public void set_EnableSqlDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableJsonDataSource();
    [CompilerGeneratedAttribute]
public void set_EnableJsonDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableOlapDataSource();
    [CompilerGeneratedAttribute]
public void set_EnableOlapDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableFederationDataSource();
    [CompilerGeneratedAttribute]
public void set_EnableFederationDataSource(bool value);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.DashboardExcelExportOptionsDTO : DashboardSerializableOptionsBase {
    public static ExcelFormat DefaultExcelFormat;
    [CompilerGeneratedAttribute]
private ExcelFormat <Format>k__BackingField;
    public static string DefaultCsvValueSeparator;
    [CompilerGeneratedAttribute]
private string <CsvValueSeparator>k__BackingField;
    public static DashboardStateExcelExportPosition DefaultDashboardStatePosition;
    [CompilerGeneratedAttribute]
private DashboardStateExcelExportPosition <DashboardStatePosition>k__BackingField;
    public static bool DefaultExportFilters;
    [CompilerGeneratedAttribute]
private bool <ExportFilters>k__BackingField;
    public static bool DefaultExportParameters;
    [CompilerGeneratedAttribute]
private bool <ExportParameters>k__BackingField;
    public static bool DefaultIncludeHiddenParameters;
    [CompilerGeneratedAttribute]
private bool <IncludeHiddenParameters>k__BackingField;
    public ExcelFormat Format { get; public set; }
    public string CsvValueSeparator { get; public set; }
    public DashboardStateExcelExportPosition DashboardStatePosition { get; public set; }
    public bool ExportFilters { get; public set; }
    public bool ExportParameters { get; public set; }
    public bool IncludeHiddenParameters { get; public set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    private static DashboardExcelExportOptionsDTO();
    [CompilerGeneratedAttribute]
public sealed virtual ExcelFormat get_Format();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Format(ExcelFormat value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CsvValueSeparator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CsvValueSeparator(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DashboardStateExcelExportPosition get_DashboardStatePosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DashboardStatePosition(DashboardStateExcelExportPosition value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExportFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExportFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExportParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExportParameters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeHiddenParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeHiddenParameters(bool value);
    public void Assign(IDashboardExcelExportOptions srcOptions);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.DashboardExportExtensionOptionsDTO : ExtensionOptionsDTO {
    public static bool DefaultAllowExportDashboard;
    [CompilerGeneratedAttribute]
private bool <AllowExportDashboard>k__BackingField;
    public static bool DefaultAllowExportDashboardItems;
    [CompilerGeneratedAttribute]
private bool <AllowExportDashboardItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnExportDialogHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnExportDialogShowing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnExportDialogShown>k__BackingField;
    [CompilerGeneratedAttribute]
private DashboardExcelExportOptionsDTO <ExcelExportOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DashboardImageExportOptionsDTO <ImageExportOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DashboardPdfExportOptionsDTO <PdfExportOptions>k__BackingField;
    public bool AllowExportDashboard { get; public set; }
    public bool AllowExportDashboardItems { get; public set; }
    public string OnExportDialogHidden { get; public set; }
    public string OnExportDialogShowing { get; public set; }
    public string OnExportDialogShown { get; public set; }
    public DashboardExcelExportOptionsDTO ExcelExportOptions { get; protected set; }
    public DashboardImageExportOptionsDTO ImageExportOptions { get; protected set; }
    public DashboardPdfExportOptionsDTO PdfExportOptions { get; protected set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_AllowExportDashboard();
    [CompilerGeneratedAttribute]
public void set_AllowExportDashboard(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowExportDashboardItems();
    [CompilerGeneratedAttribute]
public void set_AllowExportDashboardItems(bool value);
    [CompilerGeneratedAttribute]
public string get_OnExportDialogHidden();
    [CompilerGeneratedAttribute]
public void set_OnExportDialogHidden(string value);
    [CompilerGeneratedAttribute]
public string get_OnExportDialogShowing();
    [CompilerGeneratedAttribute]
public void set_OnExportDialogShowing(string value);
    [CompilerGeneratedAttribute]
public string get_OnExportDialogShown();
    [CompilerGeneratedAttribute]
public void set_OnExportDialogShown(string value);
    [CompilerGeneratedAttribute]
public DashboardExcelExportOptionsDTO get_ExcelExportOptions();
    [CompilerGeneratedAttribute]
protected void set_ExcelExportOptions(DashboardExcelExportOptionsDTO value);
    [CompilerGeneratedAttribute]
public DashboardImageExportOptionsDTO get_ImageExportOptions();
    [CompilerGeneratedAttribute]
protected void set_ImageExportOptions(DashboardImageExportOptionsDTO value);
    [CompilerGeneratedAttribute]
public DashboardPdfExportOptionsDTO get_PdfExportOptions();
    [CompilerGeneratedAttribute]
protected void set_PdfExportOptions(DashboardPdfExportOptionsDTO value);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.DashboardImageExportOptionsDTO : DashboardSerializableOptionsBase {
    public static DefaultBoolean DefaultShowTitle;
    [CompilerGeneratedAttribute]
private DefaultBoolean <ShowTitle>k__BackingField;
    public static int DefaultResolution;
    [CompilerGeneratedAttribute]
private int <Resolution>k__BackingField;
    public static DashboardExportImageFormat DefaultFormat;
    [CompilerGeneratedAttribute]
private DashboardExportImageFormat <Format>k__BackingField;
    public static float DefaultScaleFactor;
    [CompilerGeneratedAttribute]
private float <ScaleFactor>k__BackingField;
    public static bool DefaultExportFilters;
    [CompilerGeneratedAttribute]
private bool <ExportFilters>k__BackingField;
    public static bool DefaultExportParameters;
    [CompilerGeneratedAttribute]
private bool <ExportParameters>k__BackingField;
    public static bool DefaultIncludeHiddenParameters;
    [CompilerGeneratedAttribute]
private bool <IncludeHiddenParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IExportFontInfo <FontInfo>k__BackingField;
    public DefaultBoolean ShowTitle { get; public set; }
    public int Resolution { get; public set; }
    public DashboardExportImageFormat Format { get; public set; }
    public float ScaleFactor { get; public set; }
    public bool ExportFilters { get; public set; }
    public bool ExportParameters { get; public set; }
    public bool IncludeHiddenParameters { get; public set; }
    public IExportFontInfo FontInfo { get; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public sealed virtual DefaultBoolean get_ShowTitle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowTitle(DefaultBoolean value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Resolution();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Resolution(int value);
    [CompilerGeneratedAttribute]
public sealed virtual DashboardExportImageFormat get_Format();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Format(DashboardExportImageFormat value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_ScaleFactor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScaleFactor(float value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExportFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExportFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExportParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExportParameters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeHiddenParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeHiddenParameters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IExportFontInfo get_FontInfo();
    public void Assign(IDashboardImageExportOptions srcOptions);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.DashboardParameterDialogExtensionOptionsDTO : ExtensionOptionsDTO {
    [CompilerGeneratedAttribute]
private string <OnDynamicLookUpValuesLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnShowing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnShown>k__BackingField;
    public string OnDynamicLookUpValuesLoaded { get; public set; }
    public string OnHidden { get; public set; }
    public string OnShowing { get; public set; }
    public string OnShown { get; public set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_OnDynamicLookUpValuesLoaded();
    [CompilerGeneratedAttribute]
public void set_OnDynamicLookUpValuesLoaded(string value);
    [CompilerGeneratedAttribute]
public string get_OnHidden();
    [CompilerGeneratedAttribute]
public void set_OnHidden(string value);
    [CompilerGeneratedAttribute]
public string get_OnShowing();
    [CompilerGeneratedAttribute]
public void set_OnShowing(string value);
    [CompilerGeneratedAttribute]
public string get_OnShown();
    [CompilerGeneratedAttribute]
public void set_OnShown(string value);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.DashboardPdfExportOptionsDTO : DashboardSerializableOptionsBase {
    public static int DefaultPaperKind;
    [CompilerGeneratedAttribute]
private int <PaperKindId>k__BackingField;
    public static DashboardExportPageLayout DefaultPageLayout;
    [CompilerGeneratedAttribute]
private DashboardExportPageLayout <PageLayout>k__BackingField;
    public static DashboardExportDocumentScaleMode DefaultDocumentScaleMode;
    [CompilerGeneratedAttribute]
private DashboardExportDocumentScaleMode <DocumentScaleMode>k__BackingField;
    public static float DefaultScaleFactor;
    [CompilerGeneratedAttribute]
private float <ScaleFactor>k__BackingField;
    public static int DefaultAutoFitPageCount;
    [CompilerGeneratedAttribute]
private int <AutoFitPageCount>k__BackingField;
    public static DefaultBoolean DefaultShowTitle;
    [CompilerGeneratedAttribute]
private DefaultBoolean <ShowTitle>k__BackingField;
    public static DashboardStateExportPosition DefaultDashboardStatePosition;
    [CompilerGeneratedAttribute]
private DashboardStateExportPosition <DashboardStatePosition>k__BackingField;
    public static bool DefaultCardAutoArrangeContent;
    [CompilerGeneratedAttribute]
private bool <CardAutoArrangeContent>k__BackingField;
    public static ChartExportSizeMode DefaultChartSizeMode;
    [CompilerGeneratedAttribute]
private ChartExportSizeMode <ChartSizeMode>k__BackingField;
    public static bool DefaultChartAutomaticPageLayout;
    [CompilerGeneratedAttribute]
private bool <ChartAutomaticPageLayout>k__BackingField;
    public static bool DefaultGaugeAutoArrangeContent;
    [CompilerGeneratedAttribute]
private bool <GaugeAutoArrangeContent>k__BackingField;
    public static bool DefaultGridFitToPageWidth;
    [CompilerGeneratedAttribute]
private bool <GridFitToPageWidth>k__BackingField;
    public static bool DefaultGridPrintHeadersOnEveryPage;
    [CompilerGeneratedAttribute]
private bool <GridPrintHeadersOnEveryPage>k__BackingField;
    public static MapExportSizeMode DefaultMapSizeMode;
    [CompilerGeneratedAttribute]
private MapExportSizeMode <MapSizeMode>k__BackingField;
    public static bool DefaultMapAutomaticPageLayout;
    [CompilerGeneratedAttribute]
private bool <MapAutomaticPageLayout>k__BackingField;
    public static bool DefaultPieAutoArrangeContent;
    [CompilerGeneratedAttribute]
private bool <PieAutoArrangeContent>k__BackingField;
    public static bool DefaultPivotPrintHeadersOnEveryPage;
    [CompilerGeneratedAttribute]
private bool <PivotPrintHeadersOnEveryPage>k__BackingField;
    public static RangeFilterExportSizeMode DefaultRangeFilterSizeMode;
    [CompilerGeneratedAttribute]
private RangeFilterExportSizeMode <RangeFilterSizeMode>k__BackingField;
    public static bool DefaultRangeFilterAutomaticPageLayout;
    [CompilerGeneratedAttribute]
private bool <RangeFilterAutomaticPageLayout>k__BackingField;
    public static TreemapExportSizeMode DefaultTreemapSizeMode;
    [CompilerGeneratedAttribute]
private TreemapExportSizeMode <TreemapSizeMode>k__BackingField;
    public static bool DefaultTreemapAutomaticPageLayout;
    [CompilerGeneratedAttribute]
private bool <TreemapAutomaticPageLayout>k__BackingField;
    public static bool DefaultExportFilters;
    [CompilerGeneratedAttribute]
private bool <ExportFilters>k__BackingField;
    public static bool DefaultExportParameters;
    [CompilerGeneratedAttribute]
private bool <ExportParameters>k__BackingField;
    public static bool DefaultIncludeHiddenParameters;
    [CompilerGeneratedAttribute]
private bool <IncludeHiddenParameters>k__BackingField;
    public static bool DefaultDashboardAutomaticPageLayout;
    [CompilerGeneratedAttribute]
private bool <DashboardAutomaticPageLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private IExportFontInfo <FontInfo>k__BackingField;
    public int PaperKindId { get; public set; }
    public DashboardExportPageLayout PageLayout { get; public set; }
    public DashboardExportDocumentScaleMode DocumentScaleMode { get; public set; }
    public float ScaleFactor { get; public set; }
    public int AutoFitPageCount { get; public set; }
    public DefaultBoolean ShowTitle { get; public set; }
    public DashboardStateExportPosition DashboardStatePosition { get; public set; }
    public bool CardAutoArrangeContent { get; public set; }
    public ChartExportSizeMode ChartSizeMode { get; public set; }
    public bool ChartAutomaticPageLayout { get; public set; }
    public bool GaugeAutoArrangeContent { get; public set; }
    public bool GridFitToPageWidth { get; public set; }
    public bool GridPrintHeadersOnEveryPage { get; public set; }
    public MapExportSizeMode MapSizeMode { get; public set; }
    public bool MapAutomaticPageLayout { get; public set; }
    public bool PieAutoArrangeContent { get; public set; }
    public bool PivotPrintHeadersOnEveryPage { get; public set; }
    public RangeFilterExportSizeMode RangeFilterSizeMode { get; public set; }
    public bool RangeFilterAutomaticPageLayout { get; public set; }
    public TreemapExportSizeMode TreemapSizeMode { get; public set; }
    public bool TreemapAutomaticPageLayout { get; public set; }
    public bool ExportFilters { get; public set; }
    public bool ExportParameters { get; public set; }
    public bool IncludeHiddenParameters { get; public set; }
    public bool DashboardAutomaticPageLayout { get; public set; }
    public IExportFontInfo FontInfo { get; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_PaperKindId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PaperKindId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual DashboardExportPageLayout get_PageLayout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PageLayout(DashboardExportPageLayout value);
    [CompilerGeneratedAttribute]
public sealed virtual DashboardExportDocumentScaleMode get_DocumentScaleMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DocumentScaleMode(DashboardExportDocumentScaleMode value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_ScaleFactor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScaleFactor(float value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_AutoFitPageCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoFitPageCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual DefaultBoolean get_ShowTitle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowTitle(DefaultBoolean value);
    [CompilerGeneratedAttribute]
public sealed virtual DashboardStateExportPosition get_DashboardStatePosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DashboardStatePosition(DashboardStateExportPosition value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CardAutoArrangeContent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CardAutoArrangeContent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ChartExportSizeMode get_ChartSizeMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChartSizeMode(ChartExportSizeMode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ChartAutomaticPageLayout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChartAutomaticPageLayout(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_GaugeAutoArrangeContent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GaugeAutoArrangeContent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_GridFitToPageWidth();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GridFitToPageWidth(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_GridPrintHeadersOnEveryPage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GridPrintHeadersOnEveryPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual MapExportSizeMode get_MapSizeMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MapSizeMode(MapExportSizeMode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MapAutomaticPageLayout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MapAutomaticPageLayout(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PieAutoArrangeContent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PieAutoArrangeContent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PivotPrintHeadersOnEveryPage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PivotPrintHeadersOnEveryPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual RangeFilterExportSizeMode get_RangeFilterSizeMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RangeFilterSizeMode(RangeFilterExportSizeMode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RangeFilterAutomaticPageLayout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RangeFilterAutomaticPageLayout(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TreemapExportSizeMode get_TreemapSizeMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TreemapSizeMode(TreemapExportSizeMode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TreemapAutomaticPageLayout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TreemapAutomaticPageLayout(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExportFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExportFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExportParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExportParameters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeHiddenParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeHiddenParameters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DashboardAutomaticPageLayout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DashboardAutomaticPageLayout(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IExportFontInfo get_FontInfo();
    public void Assign(IDashboardPdfExportOptions srcOptions);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public abstract class DevExpress.DashboardWeb.Native.DashboardSerializableOptionsBase : OptionsSerializerBase {
    protected string ProjectName { get; }
    protected BindingFlags SearchedProperties { get; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    protected virtual string get_ProjectName();
    protected virtual BindingFlags get_SearchedProperties();
    protected abstract virtual Dictionary`2<string, string> get_ClientToServerApiMap();
    private sealed virtual override object DevExpress.DashboardWeb.Native.IDashboardSerializableOptions.Serialize();
    protected virtual bool TrySerializeAsValue(Object& serialized);
    internal virtual object SerializeCore(object dto);
    internal virtual bool ShouldSerialize(object dto);
    public static void Clone(T srcOptions, T dstOptions);
}
public class DevExpress.DashboardWeb.Native.DataInspectorExtensionOptionsDTO : ExtensionOptionsDTO {
    public static bool DefaultAllowInspectAggregatedData;
    [CompilerGeneratedAttribute]
private bool <AllowInspectAggregatedData>k__BackingField;
    public static bool DefaultAllowInspectRawData;
    [CompilerGeneratedAttribute]
private bool <AllowInspectRawData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnDialogShowing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnDialogShown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnDialogHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnGridInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnGridContentReady>k__BackingField;
    public bool AllowInspectAggregatedData { get; public set; }
    public bool AllowInspectRawData { get; public set; }
    public string OnDialogShowing { get; public set; }
    public string OnDialogShown { get; public set; }
    public string OnDialogHidden { get; public set; }
    public string OnGridInitialized { get; public set; }
    public string OnGridContentReady { get; public set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_AllowInspectAggregatedData();
    [CompilerGeneratedAttribute]
public void set_AllowInspectAggregatedData(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowInspectRawData();
    [CompilerGeneratedAttribute]
public void set_AllowInspectRawData(bool value);
    [CompilerGeneratedAttribute]
public string get_OnDialogShowing();
    [CompilerGeneratedAttribute]
public void set_OnDialogShowing(string value);
    [CompilerGeneratedAttribute]
public string get_OnDialogShown();
    [CompilerGeneratedAttribute]
public void set_OnDialogShown(string value);
    [CompilerGeneratedAttribute]
public string get_OnDialogHidden();
    [CompilerGeneratedAttribute]
public void set_OnDialogHidden(string value);
    [CompilerGeneratedAttribute]
public string get_OnGridInitialized();
    [CompilerGeneratedAttribute]
public void set_OnGridInitialized(string value);
    [CompilerGeneratedAttribute]
public string get_OnGridContentReady();
    [CompilerGeneratedAttribute]
public void set_OnGridContentReady(string value);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.DataRequestOptionsDTO : DashboardSerializableOptionsBase {
    public static ItemDataRequestMode DefaultItemDataRequestMode;
    [CompilerGeneratedAttribute]
private ItemDataRequestMode <ItemDataRequestMode>k__BackingField;
    public static ItemDataLoadingMode DefaultItemDataLoadingMode;
    [CompilerGeneratedAttribute]
private ItemDataLoadingMode <ItemDataLoadingMode>k__BackingField;
    public ItemDataRequestMode ItemDataRequestMode { get; public set; }
    public ItemDataLoadingMode ItemDataLoadingMode { get; public set; }
    public ItemDataRequestMode ItemDataRequestModeSerializable { get; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public ItemDataRequestMode get_ItemDataRequestMode();
    [CompilerGeneratedAttribute]
public void set_ItemDataRequestMode(ItemDataRequestMode value);
    [CompilerGeneratedAttribute]
public ItemDataLoadingMode get_ItemDataLoadingMode();
    [CompilerGeneratedAttribute]
public void set_ItemDataLoadingMode(ItemDataLoadingMode value);
    public ItemDataRequestMode get_ItemDataRequestModeSerializable();
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.DataSourceWizardExtensionOptionsDTO : ExtensionOptionsDTO {
    public static bool DefaultEnableCustomSql;
    [CompilerGeneratedAttribute]
private bool <EnableCustomSql>k__BackingField;
    public static bool DefaultAllowCreateNewJsonConnection;
    [CompilerGeneratedAttribute]
private bool <AllowCreateNewJsonConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnCustomizeDataSourceWizard>k__BackingField;
    [CompilerGeneratedAttribute]
private DashboardDataSourceWizardSettingsDTO <WizardSettings>k__BackingField;
    public bool EnableCustomSql { get; public set; }
    public bool AllowCreateNewJsonConnection { get; public set; }
    public string OnCustomizeDataSourceWizard { get; public set; }
    public DashboardDataSourceWizardSettingsDTO WizardSettings { get; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_EnableCustomSql();
    [CompilerGeneratedAttribute]
public void set_EnableCustomSql(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowCreateNewJsonConnection();
    [CompilerGeneratedAttribute]
public void set_AllowCreateNewJsonConnection(bool value);
    [CompilerGeneratedAttribute]
public string get_OnCustomizeDataSourceWizard();
    [CompilerGeneratedAttribute]
public void set_OnCustomizeDataSourceWizard(string value);
    [CompilerGeneratedAttribute]
public DashboardDataSourceWizardSettingsDTO get_WizardSettings();
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.DesignerToolbarExtensionOptionsDTO : ExtensionOptionsDTO {
    [CompilerGeneratedAttribute]
private string <OnPreparing>k__BackingField;
    public string OnPreparing { get; public set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_OnPreparing();
    [CompilerGeneratedAttribute]
public void set_OnPreparing(string value);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.ExportFontInfoDTO : DashboardSerializableOptionsBase {
    public static string DefaultName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static byte DefaultGdiCharSet;
    [CompilerGeneratedAttribute]
private byte <GdiCharSet>k__BackingField;
    public static bool DefaultUseCustomFontInfo;
    [CompilerGeneratedAttribute]
private bool <UseCustomFontInfo>k__BackingField;
    public string Name { get; public set; }
    public byte GdiCharSet { get; public set; }
    public bool UseCustomFontInfo { get; public set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_GdiCharSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GdiCharSet(byte value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCustomFontInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseCustomFontInfo(bool value);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public abstract class DevExpress.DashboardWeb.Native.ExtensionOptionsDTO : DashboardSerializableOptionsBase {
    public static bool DefaultUnregister;
    [CompilerGeneratedAttribute]
private bool <Unregister>k__BackingField;
    public bool Unregister { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Unregister();
    [CompilerGeneratedAttribute]
public void set_Unregister(bool value);
    protected virtual bool TrySerializeAsValue(Object& serialized);
}
public class DevExpress.DashboardWeb.Native.ExtensionsOptionsDTO : DashboardSerializableOptionsBase {
    [CompilerGeneratedAttribute]
private DashboardExportExtensionOptionsDTO <DashboardExport>k__BackingField;
    [CompilerGeneratedAttribute]
private DataSourceWizardExtensionOptionsDTO <DataSourceWizard>k__BackingField;
    [CompilerGeneratedAttribute]
private DashboardParameterDialogExtensionOptionsDTO <ParameterDialog>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlStateExtensionOptionsDTO <UrlState>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewerApiExtensionOptionsDTO <ViewerApi>k__BackingField;
    [CompilerGeneratedAttribute]
private MobileLayoutExtensionOptionsDTO <MobileLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private DataInspectorExtensionOptionsDTO <DataInspector>k__BackingField;
    [CompilerGeneratedAttribute]
private DesignerToolbarExtensionOptionsDTO <DesignerToolbar>k__BackingField;
    public DashboardExportExtensionOptionsDTO DashboardExport { get; }
    public DataSourceWizardExtensionOptionsDTO DataSourceWizard { get; }
    public DashboardParameterDialogExtensionOptionsDTO ParameterDialog { get; }
    public UrlStateExtensionOptionsDTO UrlState { get; }
    public ViewerApiExtensionOptionsDTO ViewerApi { get; }
    public MobileLayoutExtensionOptionsDTO MobileLayout { get; }
    public DataInspectorExtensionOptionsDTO DataInspector { get; }
    public DesignerToolbarExtensionOptionsDTO DesignerToolbar { get; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public DashboardExportExtensionOptionsDTO get_DashboardExport();
    [CompilerGeneratedAttribute]
public DataSourceWizardExtensionOptionsDTO get_DataSourceWizard();
    [CompilerGeneratedAttribute]
public DashboardParameterDialogExtensionOptionsDTO get_ParameterDialog();
    [CompilerGeneratedAttribute]
public UrlStateExtensionOptionsDTO get_UrlState();
    [CompilerGeneratedAttribute]
public ViewerApiExtensionOptionsDTO get_ViewerApi();
    [CompilerGeneratedAttribute]
public MobileLayoutExtensionOptionsDTO get_MobileLayout();
    [CompilerGeneratedAttribute]
public DataInspectorExtensionOptionsDTO get_DataInspector();
    [CompilerGeneratedAttribute]
public DesignerToolbarExtensionOptionsDTO get_DesignerToolbar();
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.FetchRemoteServiceOptionsDTO : DashboardSerializableOptionsBase {
    [CompilerGeneratedAttribute]
private string <AuthToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    public string AuthToken { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_AuthToken();
    [CompilerGeneratedAttribute]
public void set_AuthToken(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
    protected virtual void PrepareOptions();
}
public interface DevExpress.DashboardWeb.Native.IDashboardSerializableOptions {
    public abstract virtual object Serialize();
}
public class DevExpress.DashboardWeb.Native.MobileLayoutExtensionOptionsDTO : ExtensionOptionsDTO {
    public static MobileLayoutMode DefaultMobileLayoutEnabled;
    [CompilerGeneratedAttribute]
private MobileLayoutMode <MobileLayoutEnabled>k__BackingField;
    public MobileLayoutMode MobileLayoutEnabled { get; public set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public MobileLayoutMode get_MobileLayoutEnabled();
    [CompilerGeneratedAttribute]
public void set_MobileLayoutEnabled(MobileLayoutMode value);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.UrlStateExtensionOptionsDTO : ExtensionOptionsDTO {
    public static bool DefaultIncludeDashboardIdToUrl;
    [CompilerGeneratedAttribute]
private bool <IncludeDashboardIdToUrl>k__BackingField;
    public static bool DefaultIncludeDashboardStateToUrl;
    [CompilerGeneratedAttribute]
private bool <IncludeDashboardStateToUrl>k__BackingField;
    public bool IncludeDashboardIdToUrl { get; public set; }
    public bool IncludeDashboardStateToUrl { get; public set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_IncludeDashboardIdToUrl();
    [CompilerGeneratedAttribute]
public void set_IncludeDashboardIdToUrl(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDashboardStateToUrl();
    [CompilerGeneratedAttribute]
public void set_IncludeDashboardStateToUrl(bool value);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.DashboardWeb.Native.ViewerApiExtensionOptionsDTO : ExtensionOptionsDTO {
    [CompilerGeneratedAttribute]
private string <OnDashboardTitleToolbarUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemActionAvailabilityChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemCaptionToolbarUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemClick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemDrillDownStateChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemElementCustomColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemMasterFilterStateChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemSelectionChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemVisualInteractivity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemWidgetCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemWidgetUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemWidgetUpdating>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnItemWidgetOptionsPrepared>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnSelectedTabPageChanged>k__BackingField;
    public string OnDashboardTitleToolbarUpdated { get; public set; }
    public string OnItemActionAvailabilityChanged { get; public set; }
    public string OnItemCaptionToolbarUpdated { get; public set; }
    public string OnItemClick { get; public set; }
    public string OnItemDrillDownStateChanged { get; public set; }
    public string OnItemElementCustomColor { get; public set; }
    public string OnItemMasterFilterStateChanged { get; public set; }
    public string OnItemSelectionChanged { get; public set; }
    public string OnItemVisualInteractivity { get; public set; }
    public string OnItemWidgetCreated { get; public set; }
    public string OnItemWidgetUpdated { get; public set; }
    public string OnItemWidgetUpdating { get; public set; }
    public string OnItemWidgetOptionsPrepared { get; public set; }
    public string OnSelectedTabPageChanged { get; public set; }
    protected Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_OnDashboardTitleToolbarUpdated();
    [CompilerGeneratedAttribute]
public void set_OnDashboardTitleToolbarUpdated(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemActionAvailabilityChanged();
    [CompilerGeneratedAttribute]
public void set_OnItemActionAvailabilityChanged(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemCaptionToolbarUpdated();
    [CompilerGeneratedAttribute]
public void set_OnItemCaptionToolbarUpdated(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemClick();
    [CompilerGeneratedAttribute]
public void set_OnItemClick(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemDrillDownStateChanged();
    [CompilerGeneratedAttribute]
public void set_OnItemDrillDownStateChanged(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemElementCustomColor();
    [CompilerGeneratedAttribute]
public void set_OnItemElementCustomColor(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemMasterFilterStateChanged();
    [CompilerGeneratedAttribute]
public void set_OnItemMasterFilterStateChanged(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemSelectionChanged();
    [CompilerGeneratedAttribute]
public void set_OnItemSelectionChanged(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemVisualInteractivity();
    [CompilerGeneratedAttribute]
public void set_OnItemVisualInteractivity(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemWidgetCreated();
    [CompilerGeneratedAttribute]
public void set_OnItemWidgetCreated(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemWidgetUpdated();
    [CompilerGeneratedAttribute]
public void set_OnItemWidgetUpdated(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemWidgetUpdating();
    [CompilerGeneratedAttribute]
public void set_OnItemWidgetUpdating(string value);
    [CompilerGeneratedAttribute]
public string get_OnItemWidgetOptionsPrepared();
    [CompilerGeneratedAttribute]
public void set_OnItemWidgetOptionsPrepared(string value);
    [CompilerGeneratedAttribute]
public string get_OnSelectedTabPageChanged();
    [CompilerGeneratedAttribute]
public void set_OnSelectedTabPageChanged(string value);
    protected virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public enum DevExpress.DashboardWeb.WorkingMode : Enum {
    public int value__;
    public static WorkingMode Designer;
    public static WorkingMode Viewer;
    public static WorkingMode ViewerOnly;
}
public abstract class DevExpress.Data.Access.ComplexPropertyDescriptor : PropertyDescriptor {
    protected DataControllerBase controller;
    protected string path;
    private bool isReady;
    protected String[] split;
    protected object sourceObject;
    private static Char[] splitChars;
    protected bool IsReady { get; protected set; }
    public string Category { get; }
    public ComplexPropertyDescriptor(DataControllerBase controller, string path);
    public ComplexPropertyDescriptor(object sourceObject, string path);
    private static ComplexPropertyDescriptor();
    protected virtual void Prepare();
    protected void PrepareSplit();
    protected bool get_IsReady();
    protected void set_IsReady(bool value);
    public virtual string get_Category();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public abstract virtual object GetOwnerOfLast(object component);
}
public class DevExpress.Data.Access.ComplexPropertyDescriptorLinq : ComplexPropertyDescriptor {
    private PropertyInfo[] descriptors;
    public Func`2<object, object> Func;
    private ComplexPropertyDescriptorReflection internalSet;
    private PropertyInfo Last { get; }
    private PropertyInfo Root { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public ComplexPropertyDescriptorLinq(DataControllerBase controller, string path);
    public ComplexPropertyDescriptorLinq(object sourceObject, string path);
    protected virtual void Prepare();
    private void Compile();
    private PropertyInfo GetDescriptor(string name, object obj, Type type);
    private Expression GenerateTree(ParameterExpression result, Expression propertyResult, int c);
    private PropertyInfo get_Last();
    private PropertyInfo get_Root();
    protected virtual AttributeCollection CreateAttributeCollection();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual object GetOwnerOfLast(object component);
}
public class DevExpress.Data.Access.ComplexPropertyDescriptorReflection : ComplexPropertyDescriptor {
    private PropertyDescriptor[] descriptors;
    protected PropertyDescriptor Root { get; }
    protected PropertyDescriptor Last { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public ComplexPropertyDescriptorReflection(DataControllerBase controller, string path);
    public ComplexPropertyDescriptorReflection(object sourceObject, string path);
    protected PropertyDescriptor get_Root();
    protected PropertyDescriptor get_Last();
    protected virtual AttributeCollection CreateAttributeCollection();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    protected virtual void Prepare();
    protected virtual PropertyDescriptor GetDescriptor(string name, object obj, Type type);
    public virtual object GetOwnerOfLast(object component);
}
public class DevExpress.Data.Access.DataListDescriptor : object {
    public static bool SkipSetNullToValueProps;
    public static int NullDisagreeDiagExceptionLevel;
    private static ConcurrentDictionary`2<Tuple`2<Type, string>, Tuple`2<Func`2<object, object>, Action`2<object, object>>> accessorsCache;
    private static DataListDescriptor();
    public static PropertyDescriptorCollection GetFastProperties(Type type);
    public static PropertyDescriptorCollection GetFastProperties(PropertyDescriptorCollection sourceCollection);
    public static PropertyDescriptor GetFastProperty(PropertyDescriptor source);
    private static Tuple`2<Func`2<object, object>, Action`2<object, object>> TryCreateAccessors(Type rowType, string propertyName);
    private static Action`2<object, object> TryCreateSecureSetter(PropertyInfo property, Func`2<object, object> diagGetter);
    private static Func`2<object, object> TryCreateSecureGetter(PropertyInfo property);
    private static Action`2<object, object> TryCreateFastSetter(PropertyInfo property, Func`2<object, object> diagGetter);
    private static Action`2<object, object> WrapNullAssignementForValueTypes(Action`2<object, object> assignment, PropertyInfo pi, Func`2<object, object> diagGetter);
    private static Func`2<object, object> TryCreateFastGetter(PropertyInfo property);
    private static FastPropertyDescriptor TryCreateFastProperty(PropertyDescriptor source);
}
[AttributeUsageAttribute("4")]
public class DevExpress.Data.Access.DataPrimitiveAttribute : Attribute {
}
public class DevExpress.Data.Access.DisplayTextPropertyDescriptor : PropertyDescriptor {
    private DataColumnInfo info;
    private DataController controller;
    private IDataControllerSort sortClient;
    private object dataTag;
    public static string DxFtsPropertyPrefix;
    public DataController Controller { get; }
    public DataColumnInfo Info { get; }
    public bool IsReadOnly { get; }
    public string Category { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    protected bool IsTryGetThreadSafeFuncValid { get; }
    internal DisplayTextPropertyDescriptor(DataController controller, DataColumnInfo info);
    protected internal DisplayTextPropertyDescriptor(DataController controller, DataColumnInfo info, string name, object dataTag);
    public DataController get_Controller();
    public DataColumnInfo get_Info();
    public virtual bool get_IsReadOnly();
    public virtual string get_Category();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    protected virtual bool get_IsTryGetThreadSafeFuncValid();
    internal virtual ThreadSafeGetDisplayTextFuncInfo TryGetThreadSafeGetDisplayTextFunc(Type argumentType);
    public virtual string GetDisplayText(int listRowIndex, object value);
    public object GetValue(int listRowIndex, object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.Data.Access.ExpandoPropertyDescriptor : PropertyDescriptor {
    private Type propertyType;
    public bool IsReadOnly { get; }
    public string Category { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public ExpandoPropertyDescriptor(DataControllerBase controller, string name, Type propertyType);
    public static bool IsDynamicType(Type propertyType, object source);
    public static bool IsDynamicType(Type type);
    public virtual bool get_IsReadOnly();
    public virtual string get_Category();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual string get_DisplayName();
    public static PropertyDescriptor GetProperty(string name, object obj);
}
internal interface DevExpress.Data.Access.IHasDefaultValue {
    public bool HasDefaultValue { get; }
    public object DefaultValue { get; }
    public abstract virtual bool get_HasDefaultValue();
    public abstract virtual object get_DefaultValue();
}
public interface DevExpress.Data.Access.IReferenceAsCollectionPropertyDescriptorMarker {
    public bool IsReferenceAsCollectionPropertyDescriptor { get; }
    public abstract virtual bool get_IsReferenceAsCollectionPropertyDescriptor();
}
[ExtensionAttribute]
public static class DevExpress.Data.Access.PropertyDescriptorExt : object {
    [ExtensionAttribute]
public static T GetAttribute(PropertyDescriptor prop);
}
public class DevExpress.Data.Access.ReferenceAsCollectionPropertyDescriptor : PropertyDescriptor {
    public PropertyDescriptor CollectionDescriptor;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public ReferenceAsCollectionPropertyDescriptor(PropertyDescriptor originalDescriptor);
    public virtual bool CanResetValue(object component);
    public virtual Type get_ComponentType();
    public virtual object GetValue(object component);
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.Data.Access.SimpleListPropertyDescriptor : PropertyDescriptor {
    public bool IsReadOnly { get; }
    public string Category { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public virtual bool get_IsReadOnly();
    public virtual string get_Category();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.Data.Access.UnboundPropertyDescriptor : PropertyDescriptor {
    private DataColumnInfo info;
    private UnboundColumnInfo unboundInfo;
    private DataControllerBase controller;
    private IDataControllerData data;
    private ExpressionEvaluator evaluator;
    private bool evaluatorCreated;
    private Type dataType;
    private Type dataTypeNullable;
    private Exception evaluatorCreateException;
    private int inEvaluatorGet;
    protected ExpressionEvaluator Evaluator { get; }
    protected DataControllerBase Controller { get; }
    public UnboundColumnInfo UnboundInfo { get; }
    public IDataControllerData Data { get; }
    public DataColumnInfo Info { get; }
    private bool RequireValueConversion { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public string Category { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    protected internal UnboundPropertyDescriptor(DataControllerBase controller, UnboundColumnInfo unboundInfo);
    private void CreateEvaluator();
    protected ExpressionEvaluator get_Evaluator();
    protected DataControllerBase get_Controller();
    public UnboundColumnInfo get_UnboundInfo();
    public IDataControllerData get_Data();
    public DataColumnInfo get_Info();
    private bool get_RequireValueConversion();
    internal void SetInfo(DataColumnInfo info);
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual string get_Category();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public sealed virtual object GetValue(object component);
    public object GetValueFromRowNumber(int rowNumber);
    public static bool IsErrorValue(object value);
    protected virtual object GetEvaluatorValue(int row);
    protected object Convert(object toConvertValue);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public abstract class DevExpress.Data.Async.Command : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _canceled;
    private Dictionary`2<object, object> _tags;
    private Exception _exception;
    private bool _IsResultDispatched;
    public bool IsCanceled { get; }
    public Exception Exception { get; }
    public bool IsResultDispatched { get; }
    protected Command(DictionaryEntry[] tags);
    public abstract virtual void Accept(IAsyncCommandVisitor visitor);
    public bool get_IsCanceled();
    public virtual void Cancel();
    public void Cancel(Exception exception);
    public Exception get_Exception();
    public bool TryGetTag(object token, T& tag);
    public bool get_IsResultDispatched();
    public void MarkResultDispatched();
}
public class DevExpress.Data.Async.CommandApply : Command {
    public CriteriaOperator FilterCriteria;
    public ICollection`1<ServerModeOrderDescriptor[]> SortInfo;
    public int GroupCount;
    public ICollection`1<ServerModeSummaryDescriptor> GroupSummaryInfo;
    public ICollection`1<ServerModeSummaryDescriptor> TotalSummaryInfo;
    public CommandApply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo, DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.CommandFindIncremental : Command {
    public CriteriaOperator Expression;
    public string Value;
    public int StartIndex;
    public bool SearchUp;
    public bool IgnoreStartRow;
    public bool AllowLoop;
    public int RowIndex;
    public CommandFindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop, DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.CommandGetAllFilteredAndSortedRows : Command {
    public IList RowsInfo;
    public IList Rows;
    public CommandGetAllFilteredAndSortedRows(DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.CommandGetGroupInfo : Command {
    public ListSourceGroupInfo ParentGroup;
    public List`1<ListSourceGroupInfo> ChildrenGroups;
    public CommandGetGroupInfo(ListSourceGroupInfo parentGroup, DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.CommandGetRow : Command {
    public int Index;
    public object RowKey;
    public object RowInfo;
    public object Row;
    public CommandGetRow(int index, DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.CommandGetRowIndexByKey : Command {
    public object Key;
    public int Index;
    public List`1<CommandGetGroupInfo> Groups;
    public CommandGetRowIndexByKey(object key, DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.CommandGetTotals : Command {
    public int Count;
    public List`1<object> TotalSummary;
    public CommandGetTotals(DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.CommandGetUniqueColumnValues : Command {
    public CriteriaOperator ValuesExpression;
    public int MaxCount;
    public CriteriaOperator FilterExpression;
    public bool IgnoreAppliedFilter;
    public object Values;
    public CommandGetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter, DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.CommandLocateByValue : Command {
    public CriteriaOperator Expression;
    public object Value;
    public int StartIndex;
    public bool SearchUp;
    public int RowIndex;
    public CommandLocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp, DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.CommandPrefetchRows : Command {
    public ListSourceGroupInfo[] GroupsToPrefetch;
    public bool Successful;
    internal CancellationTokenSource CancellationTokenSource;
    public CommandPrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
    public virtual void Cancel();
}
public class DevExpress.Data.Async.CommandRefresh : Command {
    public CommandRefresh(DictionaryEntry[] tags);
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Async.Helpers.AsyncListServer2DatacontrollerProxy : object {
    protected IAsyncListServer Nested;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private bool DevExpress.Data.Helpers.IListServerWithExpandoObjectProxy.UseExpandoObjectProxiesForNonThreadSafeRows { get; private set; }
    private bool DevExpress.Data.Helpers.IXtraRefreshable.RefreshSupported { get; }
    private bool DevExpress.Data.IServerModeSourceFilterController.AllowInvalidFilterCriteria { get; }
    public AsyncListServer2DatacontrollerProxy(IAsyncListServer nested);
    public virtual void Dispose();
    public virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public virtual string GetListName(PropertyDescriptor[] listAccessors);
    public virtual int Add(object value);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual IEnumerator GetEnumerator();
    public virtual CommandGetTotals GetTotals(DictionaryEntry[] tags);
    public virtual CommandGetRow GetRow(int index, DictionaryEntry[] tags);
    public virtual CommandGetGroupInfo GetGroupInfo(ListSourceGroupInfo parentGroup, DictionaryEntry[] tags);
    public virtual CommandGetRowIndexByKey GetRowIndexByKey(object key, DictionaryEntry[] tags);
    public virtual CommandGetUniqueColumnValues GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter, DictionaryEntry[] tags);
    public virtual CommandFindIncremental FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop, DictionaryEntry[] tags);
    public virtual CommandLocateByValue LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp, DictionaryEntry[] tags);
    public virtual CommandApply Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo, DictionaryEntry[] tags);
    public virtual CommandRefresh Refresh(DictionaryEntry[] tags);
    public virtual CommandGetAllFilteredAndSortedRows GetAllFilteredAndSortedRows(DictionaryEntry[] tags);
    public virtual CommandPrefetchRows PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, DictionaryEntry[] tags);
    public virtual void Cancel(Command command);
    public virtual void Cancel();
    public virtual void WeakCancel();
    public virtual void SetReceiver(IAsyncResultReceiver receiver);
    public virtual T PullNext();
    public virtual bool WaitFor(Command waitForCommand);
    private sealed virtual override bool DevExpress.Data.Helpers.IListServerWithExpandoObjectProxy.get_UseExpandoObjectProxiesForNonThreadSafeRows();
    private sealed virtual override void DevExpress.Data.Helpers.IListServerWithExpandoObjectProxy.set_UseExpandoObjectProxiesForNonThreadSafeRows(bool value);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraRefreshable.Refresh();
    private sealed virtual override bool DevExpress.Data.Helpers.IXtraRefreshable.get_RefreshSupported();
    private sealed virtual override bool DevExpress.Data.IServerModeSourceFilterController.get_AllowInvalidFilterCriteria();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual AsyncListServer2DatacontrollerProxy DXClone();
}
public class DevExpress.Data.Async.Helpers.AsyncListServerCore : object {
    private bool isDisposed;
    public SynchronizationContext SynchronizationContext;
    public EventHandler`1<ListServerGetOrFreeEventArgs> ListServerGet;
    public EventHandler`1<ListServerGetOrFreeEventArgs> ListServerFree;
    public EventHandler`1<GetTypeInfoEventArgs> GetTypeInfo;
    public EventHandler`1<GetWorkerThreadRowInfoEventArgs> GetWorkerThreadRowInfo;
    public EventHandler`1<GetPropertyDescriptorsEventArgs> GetPropertyDescriptors;
    public EventHandler`1<GetUIThreadRowEventArgs> GetUIThreadRow;
    private IAsyncResultReceiver ResultsReceiver;
    private CommandQueue _Worker;
    private static int __debugTagSrc;
    private int __debugTag;
    private int __WithinDispatch;
    private bool isBusy;
    public static int TypeInfoObtainedWaitDuration;
    private bool useExpandoObjectProxiesForNonThreadSafeRows;
    private CommandQueue Worker { get; }
    private bool DevExpress.Data.Helpers.IXtraRefreshable.RefreshSupported { get; }
    private bool DevExpress.Data.Helpers.IListServerWithExpandoObjectProxy.UseExpandoObjectProxiesForNonThreadSafeRows { get; private set; }
    protected bool AllowInvalidFilterCriteria { get; }
    private bool DevExpress.Data.IServerModeSourceFilterController.AllowInvalidFilterCriteria { get; }
    public AsyncListServerCore(SynchronizationContext context);
    public AsyncListServerCore(SynchronizationContext context, EventHandler`1<ListServerGetOrFreeEventArgs> listServerGet);
    public AsyncListServerCore(SynchronizationContext context, IAsyncResultReceiver resultsReceiver, EventHandler`1<ListServerGetOrFreeEventArgs> listServerCreation);
    private static AsyncListServerCore();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual AsyncListServerCore DXClone();
    protected virtual AsyncListServerCore CreateDXClone();
    private CommandQueue get_Worker();
    public virtual string ToString();
    protected virtual CommandQueue CreateCommandQueue(SynchronizationContext context, SendOrPostCallback somethingInTheOutputQueueCallback, EventHandler`1<ListServerGetOrFreeEventArgs> listServerGet, EventHandler`1<ListServerGetOrFreeEventArgs> listServerFree, EventHandler`1<GetTypeInfoEventArgs> getTypeInfo, EventHandler`1<GetWorkerThreadRowInfoEventArgs> getWorkerThreadRowInfo);
    public sealed virtual void SetReceiver(IAsyncResultReceiver receiver);
    private void ShutDown();
    private void somethingInTheOutputQueueCallback(object arg);
    private void CheckDescriptorsRenew();
    private void DispatchOutputQueue();
    private bool IsDoAfterDispatchRequired(Command nextCommand);
    private void DoAfterDispatch(Command result);
    private void DoBeforeDispatch(Command result);
    private object ExtractUIRowFromRowInfo(object rowInfo);
    public sealed virtual T PullNext();
    public sealed virtual bool WaitFor(Command command);
    private void ProcessNewBusy(bool newBusy);
    public virtual void Dispose();
    private T PostCommand(T command);
    public sealed virtual CommandGetTotals GetTotals(DictionaryEntry[] tags);
    public sealed virtual CommandGetRow GetRow(int index, DictionaryEntry[] tags);
    public sealed virtual CommandGetGroupInfo GetGroupInfo(ListSourceGroupInfo parentGroup, DictionaryEntry[] tags);
    public sealed virtual CommandGetRowIndexByKey GetRowIndexByKey(object key, DictionaryEntry[] tags);
    public sealed virtual CommandGetUniqueColumnValues GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter, DictionaryEntry[] tags);
    public sealed virtual CommandFindIncremental FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop, DictionaryEntry[] tags);
    public sealed virtual CommandLocateByValue LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp, DictionaryEntry[] tags);
    public sealed virtual CommandApply Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo, DictionaryEntry[] tags);
    public sealed virtual CommandRefresh Refresh(DictionaryEntry[] tags);
    public sealed virtual CommandGetAllFilteredAndSortedRows GetAllFilteredAndSortedRows(DictionaryEntry[] tags);
    public sealed virtual CommandPrefetchRows PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, DictionaryEntry[] tags);
    public sealed virtual void Cancel(Command command);
    public sealed virtual void Cancel();
    public sealed virtual void WeakCancel();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraRefreshable.Refresh();
    private sealed virtual override bool DevExpress.Data.Helpers.IXtraRefreshable.get_RefreshSupported();
    private sealed virtual override bool DevExpress.Data.Helpers.IListServerWithExpandoObjectProxy.get_UseExpandoObjectProxiesForNonThreadSafeRows();
    private sealed virtual override void DevExpress.Data.Helpers.IListServerWithExpandoObjectProxy.set_UseExpandoObjectProxiesForNonThreadSafeRows(bool value);
    protected virtual bool get_AllowInvalidFilterCriteria();
    private sealed virtual override bool DevExpress.Data.IServerModeSourceFilterController.get_AllowInvalidFilterCriteria();
}
public class DevExpress.Data.Async.Helpers.CommandQueue : object {
    public ManualResetEvent MessageWaiter;
    private Queue`1<Command> inputQueueNormalPriority;
    private Queue`1<Command> inputQueueLoweredPriority;
    private Queue`1<Command> outQueue;
    protected IListServer ListServer;
    public object TypeInfo;
    public PropertyDescriptorCollection PropertyDescriptors;
    public ManualResetEvent TypeInfoObtained;
    public bool PropertyDescriptorsNeedReset;
    private Command CurrentCommand;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) skipPosts;
    private bool useExpandoObjectProxiesForNonThreadSafeRows;
    private static int __debugTagSrc;
    private int __debugTag;
    private SynchronizationContext SynchronizationContext;
    private SendOrPostCallback SomethingInTheOutputQueueCallback;
    private EventHandler`1<ListServerGetOrFreeEventArgs> ListServerGet;
    private EventHandler`1<ListServerGetOrFreeEventArgs> ListServerFree;
    private EventHandler`1<GetTypeInfoEventArgs> GetTypeInfo;
    private EventHandler`1<GetWorkerThreadRowInfoEventArgs> GetWorkerThreadRowInfo;
    private static object LowPriorityToken;
    private static object LowPriorityTag;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _Terminate;
    private BagOfTricks _bagOfTricks;
    public static Nullable`1<bool> ForceThrottleInconsistency;
    private List`1<DateTime> inconsistenciesWindow;
    public object SyncRoot { get; }
    private int CountInputCommand { get; }
    public int CountOutputCommand { get; }
    public bool IsSomethingInQueue { get; }
    private BagOfTricks Tricks { get; }
    private bool HasTricks { get; }
    public CommandQueue(SynchronizationContext context, SendOrPostCallback somethingInTheOutputQueueCallback, EventHandler`1<ListServerGetOrFreeEventArgs> listServerGet, EventHandler`1<ListServerGetOrFreeEventArgs> listServerFree, EventHandler`1<GetTypeInfoEventArgs> getTypeInfo, EventHandler`1<GetWorkerThreadRowInfoEventArgs> getWorkerThreadRowInfo);
    public CommandQueue(SynchronizationContext context, SendOrPostCallback somethingInTheOutputQueueCallback, EventHandler`1<ListServerGetOrFreeEventArgs> listServerGet, EventHandler`1<ListServerGetOrFreeEventArgs> listServerFree, EventHandler`1<GetTypeInfoEventArgs> getTypeInfo, EventHandler`1<GetWorkerThreadRowInfoEventArgs> getWorkerThreadRowInfo, bool useExpandoObjectProxiesForNonThreadSafeRows);
    private static CommandQueue();
    public virtual string ToString();
    public object get_SyncRoot();
    public void AskForPosts();
    public void InputEnqueue(Command command);
    public static DictionaryEntry GetLowPriorityTag();
    private static bool IsLowPriority(Command command);
    private void EstablishNormalPriority();
    [IteratorStateMachineAttribute("DevExpress.Data.Async.Helpers.CommandQueue/<GetAllCommands>d__32")]
private IEnumerable`1<Command> GetAllCommands();
    private void InputDequeue();
    private void OutputEnqueue();
    public Command OutputDequeue();
    public Command PeekOutput();
    private int get_CountInputCommand();
    public int get_CountOutputCommand();
    public bool get_IsSomethingInQueue();
    public void CancelAll();
    public void CancelAllButApply();
    public void CancelAllButRefresh();
    private void OutputEnqueueNotification(Command notification);
    public void Cancel();
    public void WeakCancel();
    private void Run();
    private static IListServer ExtractListServer(ListServerGetOrFreeEventArgs args);
    public void AskForTermination();
    private BagOfTricks get_Tricks();
    private void ClearTricksCache();
    private bool get_HasTricks();
    private void DoTricks();
    private void DoLoop();
    private void DoLoop_Core();
    private void AskUIToDispatchOutputQueue();
    private void ListServer_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private void ListServer_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    private void ThrottleInconsistency();
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Canceled(Command canceled);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetTotals result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetRow result);
    private object GetRowInfoFromRow(object row);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandApply result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandRefresh result);
    protected virtual void Visit(CommandRefresh result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetRowIndexByKey result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetGroupInfo result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetUniqueColumnValues result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandFindIncremental result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandLocateByValue result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetAllFilteredAndSortedRows command);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandPrefetchRows command);
}
public class DevExpress.Data.Async.Helpers.GetPropertyDescriptorsEventArgs : EventArgs {
    public object TypeInfo;
    public PropertyDescriptorCollection PropertyDescriptors;
    public GetPropertyDescriptorsEventArgs(object typeInfo);
}
public class DevExpress.Data.Async.Helpers.GetTypeInfoEventArgs : EventArgs {
    public object ListServerSource;
    public object Tag;
    public object TypeInfo;
    public bool UseExpandoObjectProxiesForNonThreadSafeRows;
    public GetTypeInfoEventArgs(object listServerSource, object tag);
    public GetTypeInfoEventArgs(object listServerSource, object tag, bool useExpandoObjectProxiesForNonThreadSafeRows);
}
public class DevExpress.Data.Async.Helpers.GetUIThreadRowEventArgs : EventArgs {
    public object TypeInfo;
    public PropertyDescriptorCollection PropertyDescriptors;
    public object RowInfo;
    public object UIThreadRow;
    public GetUIThreadRowEventArgs(object typeInfo, PropertyDescriptorCollection propertyDescriptors, object rowInfo);
}
public class DevExpress.Data.Async.Helpers.GetWorkerThreadRowInfoEventArgs : EventArgs {
    public object TypeInfo;
    public object WorkerThreadRow;
    public object RowInfo;
    public GetWorkerThreadRowInfoEventArgs(object typeInfo, object workerThreadRow);
}
public class DevExpress.Data.Async.Helpers.ListServerGetOrFreeEventArgs : EventArgs {
    public object ListServerSource;
    public object Tag;
}
public class DevExpress.Data.Async.Helpers.ReadonlyThreadSafeProxyForObjectFromAnotherThread : object {
    public Object[] Content;
    public object OriginalRow;
    public ReadonlyThreadSafeProxyForObjectFromAnotherThread(object original, Object[] content);
    public static object ExtractOriginalRow(object uiThreadRow);
}
public class DevExpress.Data.Async.Helpers.ReadonlyThreadSafeProxyForObjectFromAnotherThreadPropertyDescriptor : PropertyDescriptor {
    private Type Type;
    private int Index;
    private string displayName;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public string DisplayName { get; }
    public ReadonlyThreadSafeProxyForObjectFromAnotherThreadPropertyDescriptor(PropertyDescriptor proto, int index);
    public virtual bool CanResetValue(object component);
    public virtual Type get_ComponentType();
    public virtual object GetValue(object component);
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual string get_DisplayName();
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public interface DevExpress.Data.Async.IAsyncCommandVisitor {
    public abstract virtual void Canceled(Command command);
    public abstract virtual void Visit(CommandGetTotals command);
    public abstract virtual void Visit(CommandGetRow command);
    public abstract virtual void Visit(CommandApply command);
    public abstract virtual void Visit(CommandRefresh command);
    public abstract virtual void Visit(CommandGetRowIndexByKey command);
    public abstract virtual void Visit(CommandGetGroupInfo command);
    public abstract virtual void Visit(CommandGetUniqueColumnValues command);
    public abstract virtual void Visit(CommandFindIncremental command);
    public abstract virtual void Visit(CommandLocateByValue command);
    public abstract virtual void Visit(CommandGetAllFilteredAndSortedRows command);
    public abstract virtual void Visit(CommandPrefetchRows command);
}
public interface DevExpress.Data.Async.IAsyncListServer {
    public abstract virtual CommandGetTotals GetTotals(DictionaryEntry[] tags);
    public abstract virtual CommandGetRow GetRow(int index, DictionaryEntry[] tags);
    public abstract virtual CommandGetGroupInfo GetGroupInfo(ListSourceGroupInfo parentGroup, DictionaryEntry[] tags);
    public abstract virtual CommandGetRowIndexByKey GetRowIndexByKey(object key, DictionaryEntry[] tags);
    public abstract virtual CommandGetUniqueColumnValues GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter, DictionaryEntry[] tags);
    public abstract virtual CommandFindIncremental FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop, DictionaryEntry[] tags);
    public abstract virtual CommandLocateByValue LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp, DictionaryEntry[] tags);
    public abstract virtual CommandApply Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo, DictionaryEntry[] tags);
    public abstract virtual CommandRefresh Refresh(DictionaryEntry[] tags);
    public abstract virtual CommandGetAllFilteredAndSortedRows GetAllFilteredAndSortedRows(DictionaryEntry[] tags);
    public abstract virtual CommandPrefetchRows PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, DictionaryEntry[] tags);
    public abstract virtual void Cancel(Command command);
    public abstract virtual void Cancel();
    public abstract virtual void WeakCancel();
    public abstract virtual void SetReceiver(IAsyncResultReceiver receiver);
    public abstract virtual T PullNext();
    public abstract virtual bool WaitFor(Command command);
}
public interface DevExpress.Data.Async.IAsyncResultReceiver {
    public abstract virtual void Notification(NotificationInconsistencyDetected notification);
    public abstract virtual void Notification(NotificationExceptionThrown exception);
    public abstract virtual void BusyChanged(bool busy);
    public abstract virtual void Refreshing(CommandRefresh refreshCommand);
    public abstract virtual void PropertyDescriptorsRenewed();
}
public class DevExpress.Data.Async.NotificationExceptionThrown : Command {
    private Exception exception;
    public Exception Notification { get; }
    public NotificationExceptionThrown(Exception exceptionMessage, DictionaryEntry[] tags);
    public Exception get_Notification();
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public class DevExpress.Data.Async.NotificationInconsistencyDetected : Command {
    public bool Handled;
    private Exception notification;
    public Exception Notification { get; }
    public NotificationInconsistencyDetected(Exception notificationMessage, DictionaryEntry[] tags);
    public Exception get_Notification();
    public virtual void Accept(IAsyncCommandVisitor visitor);
}
public static class DevExpress.Data.AsyncDownloadPolicy : object {
    [EditorBrowsableAttribute("2")]
public static int DefaultResponseContentBufferSizeForHttpClient;
    [EditorBrowsableAttribute("2")]
public static int DefaultBufferSizeForContentCopy;
    private static int suppressionCounter;
    private static Lazy`1<AsyncDownloadTrustedContext> registrations;
    internal static object syncObj;
    [EditorBrowsableAttribute("1")]
public static bool IsThrowAlwaysMode { get; }
    internal static bool IsAsyncDownloadSuppressed { get; }
    private static AsyncDownloadTrustedContext Registrations { get; }
    private static AsyncDownloadPolicy();
    public static void ThrowAlways();
    public static void SuppressAll();
    public static bool get_IsThrowAlwaysMode();
    [EditorBrowsableAttribute("2")]
public static bool IsTrustedUri(Uri uri, AccessSettings accessContext);
    public static void RegisterTrustedUri(Uri uri);
    public static void add_Probing(WeakEventHandler`1<ProbingEventArgs> value);
    public static void remove_Probing(WeakEventHandler`1<ProbingEventArgs> value);
    public static void add_Downloading(WeakEventHandler`1<DownloadingEventArgs> value);
    public static void remove_Downloading(WeakEventHandler`1<DownloadingEventArgs> value);
    public static void add_Downloaded(WeakEventHandler`1<DownloadedEventArgs> value);
    public static void remove_Downloaded(WeakEventHandler`1<DownloadedEventArgs> value);
    public static void add_Failed(WeakEventHandler`1<FailedEventArgs> value);
    public static void remove_Failed(WeakEventHandler`1<FailedEventArgs> value);
    public static void add_ConfigureHttpClient(WeakEventHandler`1<ConfigureHttpClientEventArgs> value);
    public static void remove_ConfigureHttpClient(WeakEventHandler`1<ConfigureHttpClientEventArgs> value);
    internal static bool get_IsAsyncDownloadSuppressed();
    internal static bool RaiseProbing(Uri uri, Predicate`1<Uri> accessContext, Nullable`1& traceLevel);
    internal static bool RaiseDownloading(Uri uri, Predicate`1<Uri> accessContext, HttpMethod method, Nullable`1& traceLevel);
    internal static TValue RaiseDownloaded(Uri uri, TValue value);
    internal static bool RaiseFailed(Uri uri, ExceptionDispatchInfo exceptionInfo, Stream& content);
    internal static HttpClient RaiseConfigure(HttpClient client, Type valueType);
    private static AsyncDownloadTrustedContext get_Registrations();
    private static AsyncDownloadTrustedContext CreateRegistrations();
}
public class DevExpress.Data.AsyncListDataControllerHelper : ListDataControllerHelper {
    public AsyncListDataControllerHelper(AsyncServerModeDataController controller);
    public virtual object GetRowValue(int listSourceRow, DataColumnInfo columnInfo, OperationCompleted completed, bool userHandler);
    public virtual object GetRowValueDetail(int listSourceRow, DataColumnInfo detailColumn);
    protected virtual Delegate GetGetRowValueCore(DataColumnInfo columnInfo, Type expectedReturnType);
    public virtual object GetRow(int listSourceRow, OperationCompleted completed, bool userHandler);
    public virtual object GetRowKey(int listSourceRow);
}
public class DevExpress.Data.AsyncServerModeDataController : ServerModeDataControllerBase {
    public static object NoValue;
    private object currentControllerRowObjectEx;
    private int groupedColumnCount;
    internal bool requireExpandAll;
    private bool asyncStatusIsBusy;
    private int maxListGroupCount;
    private static object Tag_PGroup_ServerModeGroupRowInfo;
    private static object Tag_ExpandChildren_bool;
    private int logCounter;
    private bool rootGroupInfoRequested;
    protected bool AllowToSetInvalidFilterCriteria { get; }
    public AsyncServerModeGroupRowInfoCollection GroupInfo { get; }
    protected IClassicRowKeeperAsync RowsKeeperAsync { get; }
    public bool AllowNew { get; }
    public bool IsReady { get; }
    protected internal AsyncListWrapper Wrapper { get; }
    public IAsyncListServer Server { get; }
    internal object CurrentControllerRowObjectEx { get; }
    public bool IsBusy { get; }
    private static AsyncServerModeDataController();
    public static bool IsNoValue(object value);
    public virtual void Dispose();
    protected virtual bool get_AllowToSetInvalidFilterCriteria();
    public AsyncServerModeGroupRowInfoCollection get_GroupInfo();
    protected IClassicRowKeeperAsync get_RowsKeeperAsync();
    protected virtual BaseDataControllerHelper CreateHelper();
    protected virtual VisibleIndexCollection CreateVisibleIndexCollection();
    protected virtual GroupRowInfoCollection CreateGroupRowInfoCollection();
    public virtual bool get_AllowNew();
    protected virtual void SetListSourceCore(IList value);
    protected void DisposeWrapper();
    public virtual bool get_IsReady();
    protected virtual IClassicRowKeeper CreateControllerRowsKeeperCore();
    public virtual IClassicRowKeeper CreateControllerRowsKeeperClassic();
    protected virtual FilterHelper CreateFilterHelper();
    protected virtual IList GetListSource();
    protected internal AsyncListWrapper get_Wrapper();
    public IAsyncListServer get_Server();
    internal object GetLoadedRowKey(int controllerRow);
    internal object GetLoadedRowKey(int controllerRow, bool allowGroupRow);
    protected virtual void CheckCurrentControllerRowObjectOnRefresh();
    public virtual int FindRowByValue(string columnName, object value, OperationCompleted[] completed);
    protected virtual object GetCurrentControllerRowObject();
    public virtual int FindRowByRowValue(object value, int tryListSourceIndex);
    public virtual int FindRowByBeginWith(string columnName, string text);
    public virtual int FindIncremental(string text, int columnHandle, int startRowHandle, bool down, bool ignoreStartRow, bool allowLoop, CompareIncrementalValue compareValue, OperationCompleted[] completed);
    protected virtual void DoSortRows();
    protected virtual void OnCurrentControllerRowObjectChanging(object oldObject, object newObject, int level, int sourceIndex);
    private int GetAdditionalCurrentRow();
    internal object get_CurrentControllerRowObjectEx();
    protected virtual void OnPostRefresh(bool useRowsKeeper);
    public virtual void LoadRows(int startFrom, int count);
    public virtual void ClearInvalidRowsCache();
    public virtual void CancelWeakFindIncremental();
    public virtual void CancelFindIncremental();
    public virtual void ScrollingCheckRowLoaded(int rowHandle);
    public virtual void ScrollingCancelAllGetRows();
    protected void BaseClearVisibleInfo();
    protected virtual void ClearVisibleInfoOnRefresh();
    protected virtual void DoGroupRowsCore();
    protected virtual void ChangeExpandedLevel(int groupLevel, bool expanded, bool recursive);
    protected virtual void ChangeExpanded(int groupRowHandle, bool expanded, bool recursive);
    protected virtual void Reset();
    protected virtual void ChangeAllExpanded(bool expanded);
    private void DoExpandAll();
    protected bool CheckIsAllGroupsReady();
    public virtual void EnsureRowLoaded(int controllerRow, OperationCompleted completed, bool userHandler);
    public virtual bool IsRowLoaded(int controllerRow);
    protected internal virtual void RestoreGroupExpanded(GroupRowInfo group);
    protected internal virtual void MakeGroupRowVisible(GroupRowInfo group);
    protected virtual void CheckRaiseVisibleCountChanged(int prevVCount);
    protected virtual void DoRefresh(bool useRowsKeeper);
    protected virtual void CalcTotalSummary();
    public virtual bool PrefetchAllData(Function`1<bool> callBackMethod, bool clonedVersion);
    private bool PreloadDataRows(Function`1<bool> callBackMethod);
    public void PreloadGroups(ServerModeGroupRowInfo[] sgroups);
    public virtual IList GetAllFilteredAndSortedRows(Function`1<bool> callBackMethod);
    protected virtual GroupRowInfo RequestSummary(GroupRowInfo group);
    public virtual void UpdateGroupSummary(List`1<SummaryItem> changedItems, bool selectionChanged);
    public virtual bool get_IsBusy();
    internal void OnAsyncRowReceived(int rowIndex);
    internal void OnAsyncBusyChanged(bool busy);
    internal void OnAsyncTotalsReceived(CommandGetTotals result);
    internal void OnTotalsRequested();
    protected virtual void OnTotalsReceived();
    protected virtual void OnRootGroupReceived();
    public virtual void LoadRowHierarchy(int rowHandle, OperationCompleted completed);
    private bool LoadRowHierarchyCore(AsyncRowInfo info, OperationCompleted completed);
    internal void RestoreGroupHierarchy(CommandGetRowIndexByKey result, bool expandGroups, OperationCompleted completed);
    private ListSourceGroupInfo FindMatchedGroup(Int32& groupStartIndex, int index, List`1<ListSourceGroupInfo> list);
    internal void OnAsyncGroupInfoReceived(List`1<CommandGetGroupInfo> results);
    internal void OnAfterAsyncGroupInfoReceived(bool isRootGroup);
    private List`1<ListSourceGroupInfo> CheckLimitServerGroupResult(List`1<ListSourceGroupInfo> childList);
    internal void OnAsyncGroupInfoReceivedCore(CommandGetGroupInfo result);
    protected virtual void OnAsyncInvalidGroupInfoReceived();
    private void RequestChildren(ServerModeGroupRowInfo sgroup, bool expandChildren);
    internal bool IsAllowRequestMoreAutoExpandGroups();
    private void CreateGroupInfo(List`1<ListSourceGroupInfo> list, IList destination, ServerModeGroupRowInfo parentGroup, bool expandChildren);
    internal void Log(string text, Object[] args);
    private bool IsAllowAutoExpandGroupInfo(List`1<ListSourceGroupInfo> childList);
    private void GetServerGroupInfo(ServerModeGroupRowInfo groupInfo, bool expandChildren);
    private void CreateChildren(IList destination, byte level, int startIndex, ListSourceGroupInfo linfo, ServerModeGroupRowInfo group, bool expandChildren);
    internal void UpdateTotalSummaryResult(List`1<object> summaryResults);
}
public class DevExpress.Data.AsyncServerModeDataControllerVisibleIndexCollection : DataControllerVisibleIndexCollection {
    public AsyncServerModeDataControllerVisibleIndexCollection(DataController controller);
    protected virtual int GetMaxCount();
    protected virtual List`1<GroupRowInfo> GetRootGroups();
}
public class DevExpress.Data.AsyncServerModeGroupRowInfoCollection : ServerDataControllerGroupRowInfoCollection {
    private List`1<GroupRowInfo> rootGroups;
    public int RootGroupCount { get; }
    internal List`1<GroupRowInfo> RootGroups { get; }
    public AsyncServerModeGroupRowInfoCollection(AsyncServerModeDataController controller);
    protected virtual void ClearItems();
    public virtual int get_RootGroupCount();
    internal List`1<GroupRowInfo> get_RootGroups();
    internal void UpdateRootGroups();
    internal ServerModeGroupRowInfo FindGroup(ListSourceGroupInfo sourceGroupInfo);
}
public class DevExpress.Data.AsyncServerModeListSourceRowsKeeperEx : ListSourceRowsKeeper {
    protected AsyncServerModeDataController Controller { get; }
    public AsyncServerModeListSourceRowsKeeperEx(AsyncServerModeDataController controller, SelectedRowsKeeper rowsKeeper);
    protected virtual GroupedRowsKeeperEx CreateGroupRowsKeeper();
    protected AsyncServerModeDataController get_Controller();
    protected virtual void RestoreSelectionCore(int count);
    protected virtual void RestoreRegularRowsSelection();
    protected virtual object ExGetGroupRowKeyCore(GroupRowInfo group);
}
public abstract class DevExpress.Data.BaseGridController : BaseListSourceDataController {
    [CompilerGeneratedAttribute]
private InternalExceptionEventHandler CatchException;
    private ControllerRowValuesKeeper valuesKeeper;
    internal int lastGroupedColumnCount;
    private bool keepFocusedRowOnUpdate;
    private bool allowCurrentControllerRow;
    private bool allowCurrentRowObjectForGroupRow;
    internal bool currentRowEditing;
    private int currentControllerRow;
    private RowObjectInfo currentControllerRowInfo;
    private int currentControllerRowObjectLevel;
    private CacheRowValuesMode valuesCacheMode;
    private IDataControllerValidationSupport validationClient;
    private IDataControllerCurrentSupport currentClient;
    internal object dataSource;
    internal string dataMember;
    [CompilerGeneratedAttribute]
private static bool <EnableCollectionViewSupport>k__BackingField;
    internal static string CrossThreadExceptionMessage;
    internal static bool _DisableThreadingProblemsDetection;
    private DataControllerVirtualQuery virtualQuery;
    private int _lockEndEdit;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public static bool EnableCollectionViewSupport { get; public set; }
    public bool AllowCurrentControllerRow { get; public set; }
    protected ControllerRowValuesKeeper ValuesKeeper { get; }
    public int LastGroupedColumnCount { get; }
    public CacheRowValuesMode ValuesCacheMode { get; public set; }
    public IDataControllerValidationSupport ValidationClient { get; public set; }
    protected internal DataControllerVirtualQuery VirtualQuery { get; protected internal set; }
    public bool IsVirtualQuery { get; }
    public bool CanGroup { get; }
    public bool CanSort { get; }
    public bool CanFilter { get; }
    public bool IsBusy { get; }
    protected bool ValidationClientIsAllowBeginInvoke { get; }
    public IDataControllerCurrentSupport CurrentClient { get; public set; }
    public bool KeepFocusedRowOnUpdate { get; public set; }
    public int CurrentListSourceIndex { get; public set; }
    public object CurrentControllerRowObject { get; }
    internal RowObjectInfo CurrentControllerRowInfo { get; internal set; }
    public int CurrentControllerRow { get; public set; }
    protected object BindingContext { get; protected set; }
    public object DataSource { get; public set; }
    public string DataMember { get; public set; }
    public bool AllowCurrentRowObjectForGroupRow { get; public set; }
    public bool IsCurrentRowModified { get; }
    public bool IsCurrentRowEditing { get; }
    protected bool RequireEndEditOnGroupRows { get; }
    protected bool IsLockEndEdit { get; }
    [CompilerGeneratedAttribute]
public void add_CatchException(InternalExceptionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CatchException(InternalExceptionEventHandler value);
    [CompilerGeneratedAttribute]
public static bool get_EnableCollectionViewSupport();
    [CompilerGeneratedAttribute]
public static void set_EnableCollectionViewSupport(bool value);
    public virtual void Dispose();
    protected virtual void RaiseOnCatchException(InternalExceptionEventArgs e);
    protected virtual void VisibleListSourceRowMove(int oldControllerRow, Int32& newControllerRow, DataControllerChangedItemCollection changedItems, bool isAdding);
    protected virtual void OnRefreshed();
    protected virtual void CheckCurrentControllerRowObjectOnRefresh();
    public bool get_AllowCurrentControllerRow();
    public void set_AllowCurrentControllerRow(bool value);
    protected ControllerRowValuesKeeper get_ValuesKeeper();
    public virtual IClassicRowKeeper CreateControllerRowsKeeperClassic();
    protected virtual IClassicRowKeeper CreateControllerRowsKeeperCore();
    protected virtual void DoGroupRowsCore();
    public int get_LastGroupedColumnCount();
    public CacheRowValuesMode get_ValuesCacheMode();
    public void set_ValuesCacheMode(CacheRowValuesMode value);
    public virtual IDataControllerValidationSupport get_ValidationClient();
    public virtual void set_ValidationClient(IDataControllerValidationSupport value);
    protected internal virtual void VisualClientRequestSynchronization();
    protected virtual void OnListSourceChangeClear();
    internal void ThrowCrossThreadExceptionToTheUIThreadIfPossible();
    protected virtual DataControllerVirtualQuery CreateVirtualQuery();
    protected internal DataControllerVirtualQuery get_VirtualQuery();
    protected internal void set_VirtualQuery(DataControllerVirtualQuery value);
    public virtual void RefreshData();
    public virtual bool get_IsVirtualQuery();
    protected virtual FilterHelper CreateFilterHelper();
    public virtual bool get_CanGroup();
    public virtual bool get_CanSort();
    public virtual bool get_CanFilter();
    protected virtual void DoRefreshDataOperations();
    public virtual void UpdateTotalSummary(List`1<SummaryItem> changedItems, bool selectionChanged);
    public virtual bool get_IsBusy();
    protected virtual void OnVisibleClient_VisibleRangeChanged(object sender, EventArgs e);
    public virtual void QueryMoreRows(int suggestedRowCount);
    internal bool CheckCrossThread(Action`1<object> method, bool ignoreThreadWarning);
    protected bool get_ValidationClientIsAllowBeginInvoke();
    public virtual IDataControllerCurrentSupport get_CurrentClient();
    public virtual void set_CurrentClient(IDataControllerCurrentSupport value);
    protected virtual void BeginInvoke(Delegate method);
    protected virtual void OnPostRowCellException(int controllerRow, int column, object row, Exception exception);
    protected virtual ExceptionAction OnPostRowException(Exception exception);
    public virtual void ResetCurrentPosition();
    public bool get_KeepFocusedRowOnUpdate();
    public void set_KeepFocusedRowOnUpdate(bool value);
    public int get_CurrentListSourceIndex();
    public void set_CurrentListSourceIndex(int value);
    public object get_CurrentControllerRowObject();
    internal RowObjectInfo get_CurrentControllerRowInfo();
    internal void set_CurrentControllerRowInfo(RowObjectInfo value);
    public virtual int get_CurrentControllerRow();
    public virtual void set_CurrentControllerRow(int value);
    protected virtual object get_BindingContext();
    protected virtual void set_BindingContext(object value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DataMember();
    public void set_DataMember(string value);
    protected virtual void Reset();
    public virtual void SetDataSource(object dataSource);
    protected virtual bool CompareDataSource(object dataSource, string dataMember);
    public virtual void SetDataSource(object context, object dataSource, string dataMember);
    protected bool CheckNeedRestoreDataSourceState(DataSourceInfo currentSourceInfo);
    protected bool SetDataSourceCore(object context, object dataSource, string dataMember);
    protected virtual bool CompareBindingContext(object context);
    protected virtual void CheckResetCurrentPositionOnDataSourceChange(bool requiresReset);
    protected virtual void SetBindingContextCore(object context);
    protected abstract virtual void OnDataSourceChanged(DataSourceInfo currentSourceInfo);
    protected virtual void OnCurrentControllerRowChanging(int oldControllerRow, int newControllerRow);
    internal void InternalSetControllerRow(int newCurrentRow);
    protected virtual void OnCurrentControllerRowChanged();
    protected virtual void OnCurrentControllerRowObjectChanging(object oldObject, object newObject, int level, int sourceIndex);
    protected internal void CheckCurrentControllerRowObject();
    protected virtual void CheckCurrentControllerRowObject(ListChangedEventArgs e);
    public virtual bool get_AllowCurrentRowObjectForGroupRow();
    public virtual void set_AllowCurrentRowObjectForGroupRow(bool value);
    protected virtual object GetCurrentControllerRowObject();
    protected virtual void SetCurrentControllerRowObject(object value, int level, int sourceIndex);
    protected virtual void OnBindingListChangedCore(ListChangedEventArgs e);
    internal void SyncCurrentRowObject(ListChangedEventArgs e);
    protected int FindRowLevel(int controllerDataRow, int requiredLevel);
    private ListChangedEventArgs ConvertListArgsToControllerArgs(ListChangedEventArgs e);
    public object GetCurrentRowValue(DataColumnInfo column);
    public object GetCurrentRowValue(int column);
    public object GetCurrentRowValue(string columnName);
    public void SetCurrentRowValue(DataColumnInfo column, object val);
    public void SetCurrentRowValue(int column, object val);
    public void SetCurrentRowValue(string columnName, object val);
    public virtual void SyncCurrentRow();
    protected virtual void SetRowValueCore(int controllerRow, int column, object val);
    public virtual void CancelCurrentRowEdit();
    public virtual void BeginCurrentRowEdit();
    public virtual int GetControllerRow(int listSourceRow);
    public virtual bool IsGroupRowHandle(int controllerRowHandle);
    public bool get_IsCurrentRowModified();
    public virtual bool get_IsCurrentRowEditing();
    public bool EndCurrentRowEdit();
    protected virtual bool get_RequireEndEditOnGroupRows();
    protected bool get_IsLockEndEdit();
    protected void BeginLockEndEdit();
    protected void EndLockEndEdit();
    public virtual bool EndCurrentRowEdit(bool force);
    protected virtual void CheckInvalidCurrentRow();
    protected void RaiseCurrentRowChanged();
    protected virtual void RaiseCurrentRowChanged(bool prevEditing);
    protected virtual void StopCurrentRowEditCore();
    protected virtual bool OnCurrentRowValidating();
    protected virtual bool OnCurrentRowUpdated(bool prevEditing, int controllerRow, object row);
    private sealed virtual override bool DevExpress.Data.Helpers.IColumnsServerActions.AllowAction(string fieldName, ColumnServerActionType action);
    protected virtual bool AllowServerAction(string fieldName, ColumnServerActionType action);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool SetAutoSuggestDataSource(ICollection suggestions, CriteriaOperator filter, object bindingContext);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool SetAutoSearchDataSource(object dataSource, CriteriaOperator filter, object bindingContext);
    protected virtual IList GetList(object dataSource);
    protected virtual IList GetListSource(object dataSource);
    protected IList GetListSource(object dataSource, string dataMember);
}
public abstract class DevExpress.Data.BaseGridControllerEx : BaseGridController {
    protected virtual void OnItemChanged(ListChangedEventArgs e, DataControllerChangedItemCollection changedItems);
    public virtual int EndNewRowEdit();
    public virtual void CancelNewRowEdit();
    public virtual void AddNewRow();
    protected virtual void StopCurrentRowEditCore();
    protected internal virtual void OnStartNewItemRow();
    protected internal virtual void OnEndNewItemRow();
    public virtual bool IsControllerRowValid(int controllerRow);
    public virtual int GetListSourceRowIndex(int controllerRow);
}
public abstract class DevExpress.Data.BaseListSourceDataController : DataController {
    public static int FilterRow;
    public static int NewItemRow;
    protected bool newItemRowEditing;
    public bool IsNewItemRowEditing { get; }
    public bool get_IsNewItemRowEditing();
    public abstract virtual void AddNewRow();
    public virtual object GetRow(int controllerRow, OperationCompleted completed, bool userHandler);
    protected virtual void Reset();
    protected virtual object GetRowValueDetail(int controllerRow, DataColumnInfo column);
    public virtual object GetRowValue(int controllerRow, int column, OperationCompleted completed, bool userHandler);
    protected virtual void SetRowValueCore(int controllerRow, int column, object val);
    protected IEditableObject GetEditableObject(int controllerRow);
    protected void BeginRowEdit(int controllerRow);
    protected void CancelRowEdit(int controllerRow);
    protected void EndRowEdit(int controllerRow);
    public virtual bool IsGroupRowHandle(int controllerRowHandle);
    protected internal virtual void OnStartNewItemRow();
    protected internal virtual void OnEndNewItemRow();
    public virtual void SetDataSource(object dataSource);
}
public abstract class DevExpress.Data.BaseRowStub : object {
    private Func`2<int, object> GetRowFunc;
    private Action AdditionalCleanUp;
    private int _RowIndex;
    private object _Row;
    private bool RowGot;
    public int RowIndex { get; }
    public object Row { get; }
    protected BaseRowStub(Func`2<int, object> getRowFunc, Action additionalCleanUp);
    public int get_RowIndex();
    protected void GoTo(int rowIndex);
    public sealed virtual void Reset();
    protected static object GetRowFromDC(DataControllerBase _DC, int rowIndex);
    public object get_Row();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.BoundPropertyList : object {
    private List`1<IBoundProperty> properties;
    public IBoundProperty Item { get; }
    protected List`1<IBoundProperty> Properties { get; }
    public BoundPropertyList(List`1<IBoundProperty> properties);
    private IBoundProperty FindProperty(string name, bool isDisplayName);
    public IBoundProperty get_Item(string fieldName);
    public IBoundProperty GetBoundPropertyByDisplayName(string displayName);
    protected List`1<IBoundProperty> get_Properties();
    protected static bool ResolveByDisplayName(IBoundProperty property, string displayName);
    protected static bool ResolveByName(IBoundProperty property, string name);
}
[ObsoleteAttribute("There is no need to use it")]
public class DevExpress.Data.Browsing.BindingListReadOnlyAttribute : Attribute {
    public static BindingListReadOnlyAttribute Instance;
    private static BindingListReadOnlyAttribute();
}
public class DevExpress.Data.Browsing.CalculatedEvaluatorContextDescriptor : XREvaluatorContextDescriptor {
    private FieldType propertyType;
    public CalculatedEvaluatorContextDescriptor(IEnumerable`1<IParameter> parameters, ICalculatedField calculatedField, DataContext dataContext);
    public CalculatedEvaluatorContextDescriptor(IEnumerable`1<IParameter> parameters, ICalculatedField calculatedField, DataContext dataContext, IDictionary`2<string, IEvaluatorPropertyHandler> handlers);
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    private object GetCastedResult(int result);
}
internal class DevExpress.Data.Browsing.CalculatedExpressionEvaluator : ExpressionEvaluator {
    private ExpressionEvaluatorCoreBase evaluatorCore;
    protected ExpressionEvaluatorCoreBase EvaluatorCore { get; }
    internal Func`2<FunctionOperatorType, object> VisitFunctionCallback { get; internal set; }
    public CalculatedExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    protected virtual ExpressionEvaluatorCoreBase get_EvaluatorCore();
    internal Func`2<FunctionOperatorType, object> get_VisitFunctionCallback();
    internal void set_VisitFunctionCallback(Func`2<FunctionOperatorType, object> value);
}
internal class DevExpress.Data.Browsing.CalculatedExpressionEvaluatorCore : ExpressionEvaluatorCore {
    internal Func`2<FunctionOperatorType, object> VisitFunctionCallback;
    public CalculatedExpressionEvaluatorCore(bool caseSensitive, EvaluateCustomFunctionHandler evaluateCustomFunction, CustomAggregateResolveHandler resolveCustomAggregate);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(InOperator theOperator);
    [IteratorStateMachineAttribute("DevExpress.Data.Browsing.CalculatedExpressionEvaluatorCore/<GetOperandValues>d__2")]
private IEnumerable GetOperandValues(CriteriaOperatorCollection operands);
    public virtual object Visit(OperandValue theOperand);
    public virtual object Visit(FunctionOperator theOperator);
}
public class DevExpress.Data.Browsing.CalculatedPropertyDescriptorBase : PropertyDescriptor {
    private Type propertyType;
    private string displayName;
    private string expression;
    private EvaluatorContextDescriptor contextDescriptor;
    private ExpressionEvaluator evaluator;
    private bool isEvaluated;
    [CompilerGeneratedAttribute]
private ICalculatedField <CalculatedField>k__BackingField;
    protected ICalculatedField CalculatedField { get; private set; }
    public Type PropertyType { get; }
    public TypeConverter Converter { get; }
    public Type ComponentType { get; }
    public string DisplayName { get; }
    protected ExpressionEvaluator Evaluator { get; }
    public bool IsReadOnly { get; }
    private object DevExpress.Services.Internal.IContainerComponent.Component { get; }
    public CalculatedPropertyDescriptorBase(ICalculatedField calculatedField, IEnumerable`1<IParameter> parameters, DataContext dataContext);
    public CalculatedPropertyDescriptorBase(ICalculatedField calculatedField, IEnumerable`1<IParameter> parameters);
    public CalculatedPropertyDescriptorBase(ICalculatedField calculatedField, DataContext dataContext);
    public CalculatedPropertyDescriptorBase(ICalculatedField calculatedField);
    protected CalculatedPropertyDescriptorBase(ICalculatedField calculatedField, EvaluatorContextDescriptor descriptor);
    [CompilerGeneratedAttribute]
protected ICalculatedField get_CalculatedField();
    [CompilerGeneratedAttribute]
private void set_CalculatedField(ICalculatedField value);
    public virtual Type get_PropertyType();
    public virtual TypeConverter get_Converter();
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    protected ExpressionEvaluator get_Evaluator();
    protected virtual ExpressionEvaluator CreateExpressionEvaluator(EvaluatorContextDescriptor contextDescriptor, CriteriaOperator criteriaOperator);
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual bool get_IsReadOnly();
    public virtual object GetValue(object component);
    private static object ConvertToType(object value, Type type);
    private sealed virtual override object DevExpress.Services.Internal.IContainerComponent.get_Component();
}
public class DevExpress.Data.Browsing.CalculatedPropertyException : Exception {
    public CalculatedPropertyException(string message);
}
public class DevExpress.Data.Browsing.DataBrowser : object {
    private static object notSet;
    private bool isClosed;
    private object dataSource;
    private bool isValidDataSource;
    protected bool suppressListFilling;
    protected EventHandler onCurrentChangedHandler;
    protected EventHandler onPositionChangedHandler;
    public bool IsValidDataSource { get; }
    public object DataSource { get; }
    protected bool DataSourceIsSet { get; }
    public object Current { get; }
    public int Position { get; public set; }
    public int Count { get; }
    public Type DataSourceType { get; }
    public bool IsClosed { get; }
    public bool HasLastPosition { get; }
    public DataBrowser Parent { get; }
    protected DataBrowser(bool suppressListFilling);
    internal DataBrowser(object dataSource, bool suppressListFilling);
    internal DataBrowser(object dataSource);
    private static DataBrowser();
    public bool get_IsValidDataSource();
    public virtual object get_DataSource();
    protected bool get_DataSourceIsSet();
    public virtual object get_Current();
    public virtual int get_Position();
    public virtual void set_Position(int value);
    public virtual int get_Count();
    public virtual Type get_DataSourceType();
    public bool get_IsClosed();
    public bool get_HasLastPosition();
    public virtual DataBrowser get_Parent();
    public void add_CurrentChanged(EventHandler value);
    public void remove_CurrentChanged(EventHandler value);
    public void add_PositionChanged(EventHandler value);
    public void remove_PositionChanged(EventHandler value);
    public virtual object SaveState();
    public virtual void LoadState(object state);
    protected virtual object RetrieveDataSource();
    protected virtual void InvalidateDataSource();
    protected internal virtual void Close();
    public virtual object GetValue();
    public virtual string GetListName();
    protected internal virtual string GetListName(PropertyDescriptorCollection listAccessors);
    public virtual PropertyDescriptorCollection GetItemProperties();
    public PropertyDescriptor[] GetPropertyPath(string path);
    internal virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public PropertyDescriptor FindItemProperty(string name, bool ignoreCase);
    protected virtual void SetDataSource(object value);
    protected virtual void OnCurrentChanged(EventArgs e);
    public void RaiseCurrentChanged();
    protected virtual bool IsStandardType(Type propType);
    protected object GetPropertyValue(PropertyDescriptor prop, object obj);
    [IteratorStateMachineAttribute("DevExpress.Data.Browsing.DataBrowser/<AllParents>d__55")]
public IEnumerable`1<DataBrowser> AllParents();
    public DataBrowser GetRootBrowser();
}
public class DevExpress.Data.Browsing.DataBrowserHelper : DataBrowserHelperBase {
    private static Attribute[] browsableAttributes;
    private bool suppressListFilling;
    public DataBrowserHelper(bool suppressListFilling);
    private static DataBrowserHelper();
    public virtual PropertyDescriptorCollection GetListItemProperties(object list, PropertyDescriptor[] listAccessors);
    private PropertyDescriptor[] ApplyNameToArray(object component, string name, PropertyDescriptor[] listAccessors);
    protected virtual object GetList(object list);
    protected virtual bool IsCustomType(Type type);
    protected virtual PropertyDescriptorCollection GetProperties(object component);
    protected virtual PropertyDescriptorCollection GetProperties(Type componentType);
    private List`1<PropertyDescriptor> GetInterfaceProperties(Type componentType);
}
public abstract class DevExpress.Data.Browsing.DataBrowserHelperBase : object {
    public virtual PropertyDescriptorCollection GetListItemProperties(object list, PropertyDescriptor[] listAccessors);
    public PropertyDescriptorCollection GetListItemProperties(object list);
    private PropertyDescriptorCollection GetListItemPropertiesByEnumerable(IEnumerable enumerable);
    protected abstract virtual bool IsCustomType(Type type);
    protected abstract virtual PropertyDescriptorCollection GetProperties(object component);
    protected abstract virtual PropertyDescriptorCollection GetProperties(Type componentType);
    private static object GetFirstItemByEnumerable(IEnumerable enumerable);
    private static object GetFirstItemByEnumerator(IEnumerator enumerator);
    private static IList ForceList(object enumerable);
    private static PropertyInfo GetTypedIndexer(Type type);
    private PropertyDescriptorCollection GetListItemPropertiesByType(Type type);
    public static Type GetListItemType(object list);
    private static Type GetListItemTypeByEnumerable(IEnumerable iEnumerable);
    public PropertyDescriptorCollection GetListItemPropertiesByType(Type type, PropertyDescriptor[] listAccessors);
    private PropertyDescriptorCollection GetListItemPropertiesByType(Type type, PropertyDescriptor[] listAccessors, int startIndex);
    private PropertyDescriptorCollection GetListItemPropertiesByEnumerable(IEnumerable enumerable, PropertyDescriptor[] listAccessors);
    private PropertyDescriptorCollection GetListItemPropertiesByEnumerable(IEnumerable iEnumerable, PropertyDescriptor[] listAccessors, int startIndex);
    private PropertyDescriptorCollection GetListItemPropertiesByInstance(object target, PropertyDescriptor[] listAccessors, int startIndex);
    protected virtual object GetList(object list);
}
public class DevExpress.Data.Browsing.DataBrowserSR : object {
    public static string UntypedDataSource;
}
public class DevExpress.Data.Browsing.DataContext : DataContextBase {
    private static HashSet`1<Type> standardTypes;
    private static HashSet`1<string> standardTypeNames;
    public DataContext(bool suppressListFilling);
    private static DataContext();
    public static bool IsStandardType(Type type);
    public static bool IsComplexType(Type type);
    internal static bool IsImageType(Type type);
    public PropertyDescriptor[] GetItemProperties(object dataSource, string dataMember, bool forceList);
    public string GetCustomDataSourceDisplayName(object dataSource);
    public virtual string GetDataSourceDisplayName(object dataSource, string dataMember);
    private Type GetDataSourceType(object dataSource);
    private static string GetDisplayDataSourceTypeName(Type dataSourceType);
    public string GetDataMemberDisplayName(object dataSource, string dataMemberPrefix, string dataMember);
    public bool TryGetDataMemberDisplayName(object dataSource, string dataMemberPrefix, string dataMember, String& dataMemberName);
    public bool TryGetDataMemberDisplayName(object dataSource, string dataMember, String& result);
    public string GetDataMemberDisplayName(object dataSource, string dataMember);
    private IRelatedDataBrowser[] GetDataBrowserAccessors(IRelatedDataBrowser startBrowser);
    private String[] GetFieldAccessors(IRelatedDataBrowser startBrowser);
    private string GetDisplayDataMemberCore(IDisplayNameProvider dataDictionary, IRelatedDataBrowser dataBrowser);
    protected virtual bool IsIDisplayNameProviderSupported(PropertyDescriptor property);
    protected virtual bool ShouldExpand(DataBrowser dataBrowser);
    internal string GetPropertyDisplayName(object dataSource, string dataMember, PropertyDescriptor property);
    private static string GetDisplayName(PropertyDescriptor property);
    private static string GetDisplayNameFromDisplayAttribute(PropertyDescriptor descriptor, string defaultValue);
    private static string GetFullName(string dataMember, string name);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Browsing.DataContextBase : object {
    private Dictionary`2<HashObj, DataBrowser> browserDictionary;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressListFilling>k__BackingField;
    public bool IsDisposed { get; private set; }
    public DataBrowser Item { get; }
    public DataBrowser Item { get; }
    protected DataBrowser Item { get; }
    protected bool SuppressListFilling { get; private set; }
    public DataContextBase(bool suppressListFilling);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public DataBrowser get_Item(object dataSource, string dataMember);
    public DataBrowser get_Item(object dataSource);
    protected DataBrowser get_Item(HashObj hashObj);
    [CompilerGeneratedAttribute]
protected bool get_SuppressListFilling();
    [CompilerGeneratedAttribute]
private void set_SuppressListFilling(bool value);
    protected virtual ListControllerBase CreateListCotroller();
    public sealed virtual void Dispose();
    protected IDictionaryEnumerator GetEnumerator();
    public object SaveState();
    public void LoadState(object state);
    public virtual void Clear();
    private void ClearCore();
    public string GetListName(object dataSource);
    public string GetListName(object dataSource, string dataMember);
    protected static string GetNameFromTypedList(ITypedList dataSource);
    protected static object ForceList(object dataSource);
    public PropertyDescriptorCollection GetListItemProperties(object dataSource, string dataMember);
    public PropertyDescriptorCollection GetItemProperties(object dataSource, string dataMember, Predicate`1<Type> match);
    public PropertyDescriptorCollection GetItemProperties(object dataSource, string dataMember, Type[] types);
    public Type GetPropertyType(object dataSource, string dataMember);
    public DataBrowser GetDataBrowser(object dataSource, string dataMember, bool suppressException);
    public PropertyDescriptorCollection GetItemProperties(object dataSource, string dataMember);
    public string GetColumnName(object dataSource, string dataMember);
    public string GetColumnName(object dataSource, string dataMember, bool suppressException);
    private PropertyDescriptor GetProperty(object dataSource, string dataMember, bool suppressException);
    private DataBrowser GetDataBrowserRecurcive(object dataSource, string dataMember);
    private DataBrowser GetDataBrowserRecurcive(object dataSource, string parentDataMember, string dataMember, DataBrowser parentBrowser, Int32& maxCheckedBrowser);
    private static bool AnyPropertyStartsWith(PropertyDescriptorCollection properties, string propName);
    [IteratorStateMachineAttribute("DevExpress.Data.Browsing.DataContextBase/<ToEnumerable>d__42")]
private static IEnumerable`1<PropertyDescriptor> ToEnumerable(PropertyDescriptorCollection properties);
    private static string Join(string prefix, string dataMember);
    protected DataBrowser GetBrowser(object dataSource, string dataMember, bool suppressException);
    protected virtual DataBrowser GetBrowserBase(object dataSource, string dataMember, bool suppressException);
    protected virtual void EnsureCalculatedFields();
    protected DataBrowser GetBrowserCore(object dataSource, string dataMember, bool suppressException);
    protected virtual void AddToHashtable(HashObj key, DataBrowser dataBrowser);
    private DataBrowser CreateDataBrowser(DataPair data);
    protected virtual ListBrowser CreateListBrowser(DataPair data, ListControllerBase listController);
    protected virtual DataBrowser CreateDataBrowserInternal(DataPair data);
    private DataBrowser CreateDataBrowser(DataPair data, DataBrowser parent, PropertyDescriptor prop);
    protected virtual RelatedListBrowser CreateRelatedListBrowser(DataPair data, DataBrowser parent, PropertyDescriptor prop, ListControllerBase listController);
    protected virtual bool ShouldExpand(DataBrowser dataBrowser);
}
public class DevExpress.Data.Browsing.DataContextOptions : ValueType {
    private bool showInnerLists;
    private bool useCalculatedFields;
    public bool ShowInnerLists { get; }
    public bool UseCalculatedFields { get; }
    public DataContextOptions(bool showInnerLists, bool useCalculatedFields);
    public bool get_ShowInnerLists();
    public bool get_UseCalculatedFields();
    public sealed virtual bool Equals(DataContextOptions options);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Data.Browsing.DataContextUtils : object {
    private DataContext dataContext;
    public DataContextUtils(DataContext dataContext);
    public PropertyDescriptor[] GetDisplayedProperties(object dataSource, string dataMember, Func`2<PropertyDescriptor, bool> predicate);
    protected virtual PropertyDescriptor[] FilterProperties(PropertyDescriptorCollection properties, object dataSource, string dataMember, Func`2<PropertyDescriptor, bool> predicate);
}
public class DevExpress.Data.Browsing.DataInfo : DataPair {
    private string displayName;
    public string DisplayName { get; }
    public DataInfo(object source, string member, string displayName);
    public string get_DisplayName();
}
public class DevExpress.Data.Browsing.DataPair : object {
    private object source;
    private string member;
    public object Source { get; }
    public string Member { get; }
    public bool IsEmpty { get; }
    public DataPair(object source, string member);
    public object get_Source();
    public string get_Member();
    public bool get_IsEmpty();
}
public class DevExpress.Data.Browsing.DataPairComparer : object {
    public sealed virtual bool Equals(DataPair x, DataPair y);
    public sealed virtual int GetHashCode(DataPair obj);
}
public class DevExpress.Data.Browsing.DataSourcePropertyEvaluatorPropertyHandler : object {
    public static string Name;
    public static string RowCount;
    public static string CurrentRowIndex;
    public static string IsFirstRow;
    public static string IsLastRow;
    public static string CurrentRowHierarchyLevel;
    private static String[] knownNames;
    private DataContext dataContext;
    private object dataSource;
    private string dataMember;
    public DataSourcePropertyEvaluatorPropertyHandler(DataContext dataContext, object dataSource, string dataMember);
    private static DataSourcePropertyEvaluatorPropertyHandler();
    public static bool IsKnownName(string name);
    public static bool IsKnownPostfix(string bindingPath);
    public sealed virtual object GetValue(EvaluatorProperty property);
    private object GetValueCore(string name);
    protected virtual int GetRowIndex(DataBrowser browser);
    protected virtual int GetRowCount(DataBrowser browser);
    protected virtual bool GetIsFirst(DataBrowser browser);
    protected virtual bool GetIsLast(DataBrowser browser);
}
public class DevExpress.Data.Browsing.Design.ActionExecutor : object {
    private Queue`1<Action`1<IEnumerator>> actions;
    public void AddAction(Action`1<IEnumerator> action);
    public void AddAction(Action action);
    private bool RunAction();
    private bool RunNextAction();
}
public class DevExpress.Data.Browsing.Design.DataContextFilterPropertiesEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IList`1<PropertyDescriptor> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataMember>k__BackingField;
    [CompilerGeneratedAttribute]
private DataContext <DataContext>k__BackingField;
    public IList`1<PropertyDescriptor> Properties { get; private set; }
    public object DataSource { get; private set; }
    public string DataMember { get; private set; }
    public DataContext DataContext { get; private set; }
    public DataContextFilterPropertiesEventArgs(IList`1<PropertyDescriptor> properties, object dataSource, string dataMember, DataContext dataContext);
    [CompilerGeneratedAttribute]
public IList`1<PropertyDescriptor> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IList`1<PropertyDescriptor> value);
    [CompilerGeneratedAttribute]
public object get_DataSource();
    [CompilerGeneratedAttribute]
private void set_DataSource(object value);
    [CompilerGeneratedAttribute]
public string get_DataMember();
    [CompilerGeneratedAttribute]
private void set_DataMember(string value);
    [CompilerGeneratedAttribute]
public DataContext get_DataContext();
    [CompilerGeneratedAttribute]
private void set_DataContext(DataContext value);
}
public static class DevExpress.Data.Browsing.Design.DataContextHelper : object {
    public static void DataContextAction(IDataContextService dataContextService, DataContextOptions options, Action`1<DataContext> action);
}
public class DevExpress.Data.Browsing.Design.DataSortedPropertiesNativeProvider : PropertiesProvider {
    private IDataContextService serv;
    public DataSortedPropertiesNativeProvider(DataContext dataContext, IDataContextService serv, TypeSpecificsService typeSpecificsService);
    public DataSortedPropertiesNativeProvider(IDataContextService serv, DataContextOptions dataContextOptions, TypeSpecificsService typeSpecificsService);
    protected virtual void SortProperties(IPropertyDescriptor[] properties);
    protected virtual PropertyDescriptor[] FilterProperties(ICollection properties, object dataSource, string dataMember);
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Data.Browsing.Design.DataSourceMemberResolutionMap : object {
    private static object syncObj;
    private static IDictionary`2<Type, Func`3<object, string, object>> cache;
    private static DataSourceMemberResolutionMap();
    private static object ResolveDataTableFromDataSet(object dataSource, string dataMember);
    [EditorBrowsableAttribute("1")]
public static void Register(Func`3<T, string, object> resolve);
    [EditorBrowsableAttribute("1")]
public static object GetDataSource(object dataSource, string dataMember);
}
[EditorAttribute("DevExpress.XtraReports.Design.DesignBindingEditor,DevExpress.Utils.v24.2.UI, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Data.Browsing.Design.DesignBindingConverterBase")]
public class DevExpress.Data.Browsing.Design.DesignBinding : object {
    public static DesignBinding Null;
    private object dataSource;
    private string dataMember;
    [BrowsableAttribute("False")]
public object DataSource { get; }
    [BrowsableAttribute("False")]
public string DataMember { get; }
    [BrowsableAttribute("False")]
public bool IsNull { get; }
    public DesignBinding(object dataSource, string dataMember);
    private static DesignBinding();
    public object get_DataSource();
    public string get_DataMember();
    public bool get_IsNull();
    protected void Assign(object dataSource, string dataMember);
    private bool Equals(object dataSource, string dataMember);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public string GetDisplayName(IServiceProvider serviceProvider);
    public string GetDataSourceDisplayName(IServiceProvider serviceProvider);
}
public class DevExpress.Data.Browsing.Design.DesignBindingConverterBase : TypeConverter {
    protected string NoneString { get; }
    protected string UntypedDataSourceName { get; }
    protected virtual string get_NoneString();
    protected virtual string get_UntypedDataSourceName();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Data.Browsing.Design.FakedPropertyDescriptor : object {
    private bool isComplex;
    private string displayName;
    private TypeSpecifics specific;
    private PropertyDescriptor propertyDescriptor;
    public PropertyDescriptor RealProperty { get; }
    public TypeSpecifics Specifics { get; }
    public bool IsComplex { get; }
    public bool IsListType { get; }
    public string Name { get; }
    public string DisplayName { get; }
    public FakedPropertyDescriptor(PropertyDescriptor propertyDescriptor, TypeSpecifics kind);
    public FakedPropertyDescriptor(PropertyDescriptor propertyDescriptor, string displayName, TypeSpecifics kind);
    public FakedPropertyDescriptor(PropertyDescriptor propertyDescriptor, string displayName, bool isComplex, TypeSpecifics specific);
    public static FakedPropertyDescriptor[] ToFakedProperties(IList properties, ITypeSpecificsService serv);
    public PropertyDescriptor get_RealProperty();
    public sealed virtual TypeSpecifics get_Specifics();
    public sealed virtual bool get_IsComplex();
    public sealed virtual bool get_IsListType();
    public sealed virtual string get_Name();
    public sealed virtual string get_DisplayName();
}
public class DevExpress.Data.Browsing.Design.GetDataSourceDisplayNameEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <DataSourceDisplayName>k__BackingField;
    public string DataSourceDisplayName { get; private set; }
    public GetDataSourceDisplayNameEventArgs(string dataSourceDisplayName);
    [CompilerGeneratedAttribute]
public string get_DataSourceDisplayName();
    [CompilerGeneratedAttribute]
private void set_DataSourceDisplayName(string value);
}
public class DevExpress.Data.Browsing.Design.GetPropertiesEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IPropertyDescriptor[] <Properties>k__BackingField;
    public IPropertyDescriptor[] Properties { get; private set; }
    public GetPropertiesEventArgs(IPropertyDescriptor[] properties);
    [CompilerGeneratedAttribute]
public IPropertyDescriptor[] get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IPropertyDescriptor[] value);
}
public interface DevExpress.Data.Browsing.Design.IDataContextService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_PrefilterProperties(EventHandler`1<DataContextFilterPropertiesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PrefilterProperties(EventHandler`1<DataContextFilterPropertiesEventArgs> value);
    public abstract virtual DataContext CreateDataContext(DataContextOptions options);
    public abstract virtual DataContext CreateDataContext(DataContextOptions options, bool useDictionary);
    public abstract virtual void SortProperties(IPropertyDescriptor[] properties);
    public abstract virtual PropertyDescriptor[] FilterProperties(PropertyDescriptor[] properties, object dataSource, string dataMember, DataContext dataContext);
}
public interface DevExpress.Data.Browsing.Design.IDataSourceCollectionProvider {
    public abstract virtual Object[] GetDataSourceCollection(IServiceProvider serviceProvider);
}
public interface DevExpress.Data.Browsing.Design.INode {
    public bool IsDummyNode { get; }
    public bool IsDataMemberNode { get; }
    public bool IsDataSourceNode { get; }
    public bool IsEmpty { get; }
    public bool IsList { get; }
    public bool IsComplex { get; }
    public IList ChildNodes { get; }
    public object Parent { get; }
    public string DataMember { get; }
    public abstract virtual bool get_IsDummyNode();
    public abstract virtual bool get_IsDataMemberNode();
    public abstract virtual bool get_IsDataSourceNode();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool get_IsList();
    public abstract virtual bool get_IsComplex();
    public abstract virtual IList get_ChildNodes();
    public abstract virtual object get_Parent();
    public abstract virtual string get_DataMember();
    public abstract virtual void Expand(EventHandler callback);
    public abstract virtual bool HasDataSource(object dataSource);
}
public interface DevExpress.Data.Browsing.Design.IPropertiesProvider {
    public abstract virtual void GetItemProperties(object dataSource, string dataMember, EventHandler`1<GetPropertiesEventArgs> callback);
    public abstract virtual void GetListItemProperties(object dataSource, string dataMember, EventHandler`1<GetPropertiesEventArgs> callback);
    public abstract virtual void GetDataSourceDisplayName(object dataSource, string dataMember, EventHandler`1<GetDataSourceDisplayNameEventArgs> callback);
}
public interface DevExpress.Data.Browsing.Design.IPropertyDescriptor {
    public TypeSpecifics Specifics { get; }
    public bool IsComplex { get; }
    public bool IsListType { get; }
    public string Name { get; }
    public string DisplayName { get; }
    public abstract virtual TypeSpecifics get_Specifics();
    public abstract virtual bool get_IsComplex();
    public abstract virtual bool get_IsListType();
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
}
public interface DevExpress.Data.Browsing.Design.ITypeSpecificsService {
    public abstract virtual TypeSpecifics GetPropertyTypeSpecifics(PropertyDescriptor property);
    public abstract virtual TypeSpecifics GetTypeSpecifics(Type type);
}
public abstract class DevExpress.Data.Browsing.Design.PickManager : PickManagerBase {
    private Func`1<IPropertiesProvider> providerCreator;
    public Func`1<IPropertiesProvider> ProviderCreator { get; public set; }
    public Func`1<IPropertiesProvider> get_ProviderCreator();
    public void set_ProviderCreator(Func`1<IPropertiesProvider> value);
    public DataInfo[] GetData(object dataSource, string dataMember, Predicate`1<IPropertyDescriptor> shouldCreateDataInfo);
    public DataInfo[] GetData(object dataSource, string dataMember);
    protected virtual bool ShouldCreateDataInfo(IPropertyDescriptor propertyDescriptor);
    protected virtual IPropertiesProvider CreateProvider();
    protected static Type GetPropertyType(IPropertyDescriptor property);
}
public abstract class DevExpress.Data.Browsing.Design.PickManagerBase : object {
    private ActionExecutor executor;
    public ActionExecutor Executor { get; }
    public ActionExecutor get_Executor();
    public virtual void FillNodes(object dataSource, string dataMember, IList nodes);
    protected static void DisposeObject(object obj);
    protected virtual void AddChildNodes(IList`1<IPropertyDescriptor> properties, object dataSource, string dataMember, IList nodes);
    protected string GetFullName(string dataMember, string name);
    private static bool IsListSource(object obj);
    private INode CreateChildNode(object dataSource, string dataMember, string displayName, object owner, IPropertyDescriptor property);
    protected virtual bool ShouldAddDummyNode(IPropertyDescriptor property);
    public static bool ContainsDummyNode(IList list);
    public bool AreContainDummyNode(IList nodes);
    public void OnNodeExpand(object dataSource, INode node);
    public virtual void GetDataSourceName(object dataSource, string dataMember, IPropertiesProvider provider, EventHandler`1<GetDataSourceDisplayNameEventArgs> callback);
    public virtual void FillContent(IList nodes, Collection`1<Pair`2<object, string>> dataSources, bool addNoneNode);
    public void FillContent(IList nodes, IList dataSources, bool addNoneNode);
    private void FillContentCore(IList nodes, object dataSource, string dataMember);
    protected virtual Collection`1<Pair`2<object, string>> FilterDataSources(Collection`1<Pair`2<object, string>> dataSources);
    public INode FindSourceNode(IList nodes, object dataSource);
    public INode GetDataSourceNode(INode node);
    public object FindNoneNode(IList nodes);
    public object FindDataMemberNode(IList nodes, object dataSource, string dataMember);
    public virtual INode FindDataMemberNode(IList nodes, string dataMember);
    public virtual void FindDataMemberNode(IList nodes, string dataMember, Action`1<INode> callback);
    protected void FindDataMemberNodeCore(IList nodes, string dataMember, int i, Action`1<INode> callback, bool joinItems);
    private static void InvokeCallback(Action`1<INode> callback, INode node);
    protected INode FindNode(IList nodes, string dataMember);
    protected virtual string GetDataMember(INode node);
    protected abstract virtual IPropertiesProvider CreateProvider();
    protected abstract virtual INode CreateDataSourceNode(object dataSource, string dataMember, string name, object owner);
    protected abstract virtual INode CreateDataMemberNode(object dataSource, string dataMember, string displayName, bool isList, object owner, IPropertyDescriptor property);
    protected abstract virtual INode CreateDummyNode(object owner);
    protected abstract virtual object CreateNoneNode(object owner);
    protected abstract virtual bool NodeIsEmpty(INode node);
}
public class DevExpress.Data.Browsing.Design.PropertiesProvider : object {
    private DataContext dataContext;
    private bool disposeDataContext;
    private ITypeSpecificsService serv;
    private ITypeSpecificsService Service { get; }
    public DataContext DataContext { get; }
    public PropertiesProvider(DataContext dataContext, ITypeSpecificsService serv);
    private ITypeSpecificsService get_Service();
    public DataContext get_DataContext();
    public virtual void Dispose();
    public virtual void GetItemProperties(object dataSource, string dataMember, EventHandler`1<GetPropertiesEventArgs> action);
    public void GetItemProperties(object dataSource, string dataMember, Predicate`1<Type> match, EventHandler`1<GetPropertiesEventArgs> action);
    protected virtual GetPropertiesEventArgs CreatePropertiesEventArgs(IPropertyDescriptor[] args);
    private IPropertyDescriptor[] ProcessProperties(PropertyDescriptorCollection properties, object dataSource, string dataMember);
    public static string GetFullName(string dataMember, string name);
    public virtual void GetDataSourceDisplayName(object dataSource, string dataMember, EventHandler`1<GetDataSourceDisplayNameEventArgs> callback);
    public virtual void GetListItemProperties(object dataSource, string dataMember, EventHandler`1<GetPropertiesEventArgs> action);
    public FakedPropertyDescriptor[] ToFakedProperties(object dataSource, string dataMember, PropertyDescriptor[] properties);
    private bool IsComplexProperty(PropertyDescriptor property, object dataSource, string dataMember);
    private string GetPropertyDisplayName(object dataSource, string dataMember, PropertyDescriptor property);
    protected virtual void SortProperties(IPropertyDescriptor[] properties);
    protected virtual PropertyDescriptor[] FilterProperties(ICollection properties, object dataSource, string dataMember);
    protected List`1<IPropertyDescriptor> PostFilterProperties(ICollection`1<IPropertyDescriptor> properties);
    protected virtual bool CanProcessProperty(IPropertyDescriptor property);
    private static string ToString(IPropertyDescriptor property);
    protected static Type GetPropertyType(IPropertyDescriptor property);
    protected static PropertyDescriptor GetProperty(IPropertyDescriptor property);
}
[ExtensionAttribute]
public static class DevExpress.Data.Browsing.Design.PropertiesProviderExtensions : object {
    [ExtensionAttribute]
public static Task`1<IPropertyDescriptor[]> GetItemPropertiesAsync(IPropertiesProvider propertiesProvider, object dataSource, string dataMember);
    [ExtensionAttribute]
public static IPropertyDescriptor[] GetItemPropertiesSync(IPropertiesProvider propertiesProvider, object dataSource, string dataMember);
    [ExtensionAttribute]
public static Task`1<IPropertyDescriptor[]> GetListItemPropertiesAsync(IPropertiesProvider propertiesProvider, object dataSource, string dataMember);
    [ExtensionAttribute]
public static IPropertyDescriptor[] GetListItemPropertiesSync(IPropertiesProvider propertiesProvider, object dataSource, string dataMember);
    [ExtensionAttribute]
public static Task`1<string> GetDataSourceDisplayNameAsync(IPropertiesProvider propertiesProvider, object dataSource, string dataMember);
    [ExtensionAttribute]
public static string GetDataSourceDisplayNameSync(IPropertiesProvider propertiesProvider, object dataSource, string dataMember);
}
public enum DevExpress.Data.Browsing.Design.TypeSpecifics : Enum {
    public int value__;
    public static TypeSpecifics None;
    public static TypeSpecifics List;
    public static TypeSpecifics ListSource;
    public static TypeSpecifics ListOfParameters;
    public static TypeSpecifics Default;
    public static TypeSpecifics String;
    public static TypeSpecifics Integer;
    public static TypeSpecifics Float;
    public static TypeSpecifics Date;
    public static TypeSpecifics Bool;
    public static TypeSpecifics Guid;
    public static TypeSpecifics Array;
    public static TypeSpecifics Enum;
    public static TypeSpecifics CalcDefault;
    public static TypeSpecifics CalcString;
    public static TypeSpecifics CalcInteger;
    public static TypeSpecifics CalcFloat;
    public static TypeSpecifics CalcDate;
    public static TypeSpecifics CalcBool;
    public static TypeSpecifics CalcGuid;
    public static TypeSpecifics Range;
}
public class DevExpress.Data.Browsing.Design.TypeSpecificsService : object {
    public virtual TypeSpecifics GetPropertyTypeSpecifics(PropertyDescriptor property);
    public virtual TypeSpecifics GetTypeSpecifics(Type type);
    protected static Type ValidateType(Type value);
}
public class DevExpress.Data.Browsing.DisplayPropertyDescriptor : PropertyDescriptorWrapper {
    private string displayName;
    public string DisplayName { get; }
    public DisplayPropertyDescriptor(PropertyDescriptor descr, string displayName);
    public virtual string get_DisplayName();
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Data.Browsing.FakedList`1 : object {
    private IList`1<T> items;
    private object syncRoot;
    public T Item { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public FakedList`1(IList`1<T> items);
    public FakedList`1(IEnumerable`1<T> enumerable);
    public T get_Item(int index);
    public void set_Item(int index, T value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class DevExpress.Data.Browsing.FakedListCreator : object {
    public static IList CreateFakedList(object genericList);
    public static IList CreateGenericList(object listSource);
    private static IList CreateGenericListCore(object listSource, Func`2<Type, IList> create);
}
public static class DevExpress.Data.Browsing.FieldTypeConverter : object {
    public static Type ToType(FieldType fieldType);
}
internal interface DevExpress.Data.Browsing.HierarchicalData.IHierarchicalListBrowser {
    public IList`1<int> Levels { get; }
    public int CurrentLevel { get; }
    public abstract virtual IList`1<int> get_Levels();
    public abstract virtual int get_CurrentLevel();
}
public interface DevExpress.Data.Browsing.IDataContextContainer {
    public DataContext DataContext { get; }
    public abstract virtual DataContext get_DataContext();
}
public interface DevExpress.Data.Browsing.IDataInfoContainer {
    public abstract virtual DataInfo[] GetData();
}
public interface DevExpress.Data.Browsing.IEvaluatorPropertyHandler {
    public abstract virtual object GetValue(EvaluatorProperty property);
}
public interface DevExpress.Data.Browsing.IFilteredListController {
    public CriteriaOperator FilterCriteria { get; public set; }
    public abstract virtual CriteriaOperator get_FilterCriteria();
    public abstract virtual void set_FilterCriteria(CriteriaOperator value);
}
public interface DevExpress.Data.Browsing.IListBrowser {
    public int Count { get; }
    public int Position { get; }
    public abstract virtual int get_Count();
    public abstract virtual int get_Position();
}
public interface DevExpress.Data.Browsing.IListController {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual object GetItem(int index);
    public abstract virtual object GetColumnValue(int position, string columnName);
    public abstract virtual void SetList(IList list);
}
public interface DevExpress.Data.Browsing.IRelatedDataBrowser {
    public PropertyDescriptor RelatedProperty { get; }
    public IRelatedDataBrowser Parent { get; }
    public abstract virtual PropertyDescriptor get_RelatedProperty();
    public abstract virtual IRelatedDataBrowser get_Parent();
}
public class DevExpress.Data.Browsing.ListBrowser : DataBrowser {
    private static object nullObject;
    private IList list;
    private int position;
    private object current;
    private IListController listController;
    public int Position { get; public set; }
    public int Count { get; }
    public object Current { get; }
    public IList List { get; }
    public IListController ListController { get; }
    protected ListBrowser(IListController listController, bool suppressListFilling);
    public ListBrowser(object dataSource, IListController listController, bool suppressListFilling);
    private static ListBrowser();
    public virtual int get_Position();
    public virtual void set_Position(int value);
    public virtual int get_Count();
    public virtual object get_Current();
    public IList get_List();
    public IListController get_ListController();
    protected void SetPositionCore(int value);
    private int ValidatePosition(int value);
    protected internal virtual void Close();
    protected virtual void SetDataSource(object value);
    public void ResetList();
    protected virtual void InvalidateDataSource();
    private void NullifyList();
    protected virtual void SetList(IList list);
    public virtual object SaveState();
    public virtual void LoadState(object state);
    public virtual string GetListName();
    protected internal virtual string GetListName(PropertyDescriptorCollection listAccessors);
    private PropertyDescriptor[] ToArray(PropertyDescriptorCollection propCollection);
    protected virtual void OnPositionChanged(EventArgs e);
    public object GetColumnValue(int position, string columnName);
    public object GetRow(int position);
}
public class DevExpress.Data.Browsing.ListControllerBase : object {
    protected IList list;
    public int Count { get; }
    public virtual int get_Count();
    public virtual object GetColumnValue(int position, string columnName);
    public virtual object GetItem(int index);
    public virtual void SetList(IList list);
}
public static class DevExpress.Data.Browsing.ListTypeHelper : object {
    private static ConcurrentDictionary`2<Type, bool> genericTypes;
    private static ListTypeHelper();
    public static bool IsListType(Type type);
    public static Type FindTypeDefinition(Type type, Predicate`1<Type> match);
    public static Type[] FindGenericArguments(Type type, Predicate`1<Type> match);
    private static bool IsGenericType(Type type);
    private static bool IsGenericTypeCore(Type type);
}
internal class DevExpress.Data.Browsing.ParametersEvaluatorPropertyHandler : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IParameter> <Parameters>k__BackingField;
    protected IEnumerable`1<IParameter> Parameters { get; }
    public ParametersEvaluatorPropertyHandler(IEnumerable`1<IParameter> parameters);
    public static ParametersEvaluatorPropertyHandler Find(IDictionary`2<string, IEvaluatorPropertyHandler> handlers);
    [CompilerGeneratedAttribute]
protected IEnumerable`1<IParameter> get_Parameters();
    public sealed virtual object GetValue(EvaluatorProperty property);
    public object GetValue(string parameterName);
}
public class DevExpress.Data.Browsing.RelatedDataBrowser : DataBrowser {
    private PropertyDescriptor prop;
    private DataBrowser parent;
    public DataBrowser Parent { get; }
    public Type DataSourceType { get; }
    private PropertyDescriptor DevExpress.Data.Browsing.IRelatedDataBrowser.RelatedProperty { get; }
    private IRelatedDataBrowser DevExpress.Data.Browsing.IRelatedDataBrowser.Parent { get; }
    internal RelatedDataBrowser(DataBrowser parent, PropertyDescriptor prop, bool suppressListFilling);
    public virtual DataBrowser get_Parent();
    public virtual Type get_DataSourceType();
    private sealed virtual override PropertyDescriptor DevExpress.Data.Browsing.IRelatedDataBrowser.get_RelatedProperty();
    private sealed virtual override IRelatedDataBrowser DevExpress.Data.Browsing.IRelatedDataBrowser.get_Parent();
    public virtual object SaveState();
    public virtual void LoadState(object state);
    public virtual object GetValue();
    protected virtual object RetrieveDataSource();
    private static PropertyDescriptor FindProperty(object component, string name);
    protected internal virtual void Close();
    internal virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public virtual string GetListName();
    protected internal virtual string GetListName(PropertyDescriptorCollection listAccessors);
    private void OnParentStateChanged(object sender, EventArgs e);
}
public class DevExpress.Data.Browsing.RelatedListBrowser : ListBrowser {
    private IDisposable disposableListItem;
    private DataBrowser parent;
    private PropertyDescriptor listAccessor;
    public DataBrowser Parent { get; }
    public Type DataSourceType { get; }
    private PropertyDescriptor DevExpress.Data.Browsing.IRelatedDataBrowser.RelatedProperty { get; }
    private IRelatedDataBrowser DevExpress.Data.Browsing.IRelatedDataBrowser.Parent { get; }
    public object DataSource { get; }
    public RelatedListBrowser(DataBrowser parent, PropertyDescriptor listAccessor, IListController listController, bool suppressListFilling);
    protected RelatedListBrowser(IListController listController, bool suppressListFilling);
    public virtual DataBrowser get_Parent();
    public virtual Type get_DataSourceType();
    private sealed virtual override PropertyDescriptor DevExpress.Data.Browsing.IRelatedDataBrowser.get_RelatedProperty();
    private sealed virtual override IRelatedDataBrowser DevExpress.Data.Browsing.IRelatedDataBrowser.get_Parent();
    public virtual object get_DataSource();
    protected void Initialize(DataBrowser parent, PropertyDescriptor listAccessor);
    public virtual object SaveState();
    public virtual void LoadState(object state);
    private void InitializeDataSource(ListBrowser parentBrowser);
    private object AddNewItemIfEmpty(IBindingList list);
    protected internal virtual void Close();
    public virtual object GetValue();
    protected virtual object RetrieveDataSource();
    public virtual string GetListName();
    protected internal virtual string GetListName(PropertyDescriptorCollection listAccessors);
    internal virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    private void OnParentStateChanged(object sender, EventArgs e);
}
public class DevExpress.Data.Browsing.SimpleDataContextContainer : object {
    [CompilerGeneratedAttribute]
private DataContext <DataContext>k__BackingField;
    public DataContext DataContext { get; private set; }
    public SimpleDataContextContainer(DataContext dataContext);
    [CompilerGeneratedAttribute]
public sealed virtual DataContext get_DataContext();
    [CompilerGeneratedAttribute]
private void set_DataContext(DataContext value);
}
public class DevExpress.Data.Browsing.XREvaluatorContextDescriptor : EvaluatorContextDescriptor {
    private ParametersEvaluatorPropertyHandler parametersEvaluatorPropertyHandler;
    [CompilerGeneratedAttribute]
private object <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataMember>k__BackingField;
    protected DataContext dataContext;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IParameter> <Parameters>k__BackingField;
    private Dictionary`2<string, PropertyDescriptor> propertyDescriptors;
    private Dictionary`2<string, EvaluatorContextDescriptor> contextDescriptors;
    private Dictionary`2<string, IEvaluatorPropertyHandler> handlers;
    private IEvaluatorPropertyHandler fallbackHandler;
    private ParametersEvaluatorPropertyHandler ParametersEvaluatorPropertyHandler { get; }
    protected object DataSource { get; private set; }
    protected string DataMember { get; private set; }
    internal IEnumerable`1<IParameter> Parameters { get; private set; }
    internal DataContext DataContext { get; }
    private IEvaluatorPropertyHandler FallbackHandler { get; }
    public bool IsTopLevelCollectionSource { get; }
    public XREvaluatorContextDescriptor(IEnumerable`1<IParameter> parameters, DataContext dataContext, object dataSource, string dataMember);
    public XREvaluatorContextDescriptor(IEnumerable`1<IParameter> parameters, DataContext dataContext, object dataSource, string dataMember, IDictionary`2<string, IEvaluatorPropertyHandler> handlers);
    protected XREvaluatorContextDescriptor(DataContext dataContext, object dataSource, string dataMember);
    private ParametersEvaluatorPropertyHandler get_ParametersEvaluatorPropertyHandler();
    [CompilerGeneratedAttribute]
protected object get_DataSource();
    [CompilerGeneratedAttribute]
private void set_DataSource(object value);
    [CompilerGeneratedAttribute]
protected string get_DataMember();
    [CompilerGeneratedAttribute]
private void set_DataMember(string value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<IParameter> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(IEnumerable`1<IParameter> value);
    internal DataContext get_DataContext();
    private IEvaluatorPropertyHandler get_FallbackHandler();
    protected virtual IEvaluatorPropertyHandler CreateDataSourcePropertyHandler();
    public virtual bool get_IsTopLevelCollectionSource();
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    private object GetPropertyValue(object source, string propertyName);
    private PropertyDescriptor GetPropertyDescriptor(object source, string propertyName);
    private object GetValueByName(EvaluatorProperty propertyPath);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyName);
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    private EvaluatorContextDescriptor GetContextDescriptor(string propertyName);
    private static object GetFirstItemForCollection(object nestedSource);
    private static IEnumerable GetCollection(object nestedSource);
    private static object GetFirstItemForEnumerable(IEnumerable enumerable);
    internal object GetParameterValue(string name);
    protected void SetDataSource(object dataSource, string dataMember);
}
public enum DevExpress.Data.CacheRowValuesMode : Enum {
    public int value__;
    public static CacheRowValuesMode CacheAll;
    public static CacheRowValuesMode Disabled;
    public static CacheRowValuesMode Default;
}
public class DevExpress.Data.ChartDataSources.DataChangedEventArgs : EventArgs {
    private DataChangedType dataChangedType;
    public DataChangedType DataChangedType { get; }
    public DataChangedEventArgs(DataChangedType dataChangedType);
    public DataChangedType get_DataChangedType();
}
public class DevExpress.Data.ChartDataSources.DataChangedEventHandler : MulticastDelegate {
    public DataChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum DevExpress.Data.ChartDataSources.DataChangedType : Enum {
    public int value__;
    public static DataChangedType ItemsChanged;
    public static DataChangedType Reset;
}
public interface DevExpress.Data.ChartDataSources.IChartDataSource {
    public string SeriesDataMember { get; }
    public string ArgumentDataMember { get; }
    public string ValueDataMember { get; }
    public Nullable`1<DateTimeMeasureUnitNative> DateTimeArgumentMeasureUnit { get; }
    public abstract virtual string get_SeriesDataMember();
    public abstract virtual string get_ArgumentDataMember();
    public abstract virtual string get_ValueDataMember();
    public abstract virtual Nullable`1<DateTimeMeasureUnitNative> get_DateTimeArgumentMeasureUnit();
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataChanged(DataChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataChanged(DataChangedEventHandler value);
}
public interface DevExpress.Data.ChartDataSources.IControlRowSourceComponent {
}
public interface DevExpress.Data.ChartDataSources.IPivotGrid {
    public IList`1<string> ArgumentColumnNames { get; }
    public IList`1<string> ValueColumnNames { get; }
    public bool RetrieveDataByColumns { get; public set; }
    public bool RetrieveEmptyCells { get; public set; }
    public DefaultBoolean RetrieveFieldValuesAsText { get; public set; }
    public bool SelectionSupported { get; }
    public bool SelectionOnly { get; public set; }
    public bool SinglePageSupported { get; }
    public bool SinglePageOnly { get; public set; }
    public bool RetrieveColumnTotals { get; public set; }
    public bool RetrieveColumnGrandTotals { get; public set; }
    public bool RetrieveColumnCustomTotals { get; public set; }
    public bool RetrieveRowTotals { get; public set; }
    public bool RetrieveRowGrandTotals { get; public set; }
    public bool RetrieveRowCustomTotals { get; public set; }
    public bool RetrieveDateTimeValuesAsMiddleValues { get; public set; }
    public int MaxAllowedSeriesCount { get; public set; }
    public int MaxAllowedPointCountInSeries { get; public set; }
    public int UpdateDelay { get; public set; }
    public int AvailableSeriesCount { get; }
    public IDictionary`2<object, int> AvailablePointCountInSeries { get; }
    public IDictionary`2<DateTime, DateTimeMeasureUnitNative> DateTimeMeasureUnitByArgument { get; }
    public abstract virtual IList`1<string> get_ArgumentColumnNames();
    public abstract virtual IList`1<string> get_ValueColumnNames();
    public abstract virtual bool get_RetrieveDataByColumns();
    public abstract virtual void set_RetrieveDataByColumns(bool value);
    public abstract virtual bool get_RetrieveEmptyCells();
    public abstract virtual void set_RetrieveEmptyCells(bool value);
    public abstract virtual DefaultBoolean get_RetrieveFieldValuesAsText();
    public abstract virtual void set_RetrieveFieldValuesAsText(DefaultBoolean value);
    public abstract virtual bool get_SelectionSupported();
    public abstract virtual bool get_SelectionOnly();
    public abstract virtual void set_SelectionOnly(bool value);
    public abstract virtual bool get_SinglePageSupported();
    public abstract virtual bool get_SinglePageOnly();
    public abstract virtual void set_SinglePageOnly(bool value);
    public abstract virtual bool get_RetrieveColumnTotals();
    public abstract virtual void set_RetrieveColumnTotals(bool value);
    public abstract virtual bool get_RetrieveColumnGrandTotals();
    public abstract virtual void set_RetrieveColumnGrandTotals(bool value);
    public abstract virtual bool get_RetrieveColumnCustomTotals();
    public abstract virtual void set_RetrieveColumnCustomTotals(bool value);
    public abstract virtual bool get_RetrieveRowTotals();
    public abstract virtual void set_RetrieveRowTotals(bool value);
    public abstract virtual bool get_RetrieveRowGrandTotals();
    public abstract virtual void set_RetrieveRowGrandTotals(bool value);
    public abstract virtual bool get_RetrieveRowCustomTotals();
    public abstract virtual void set_RetrieveRowCustomTotals(bool value);
    public abstract virtual bool get_RetrieveDateTimeValuesAsMiddleValues();
    public abstract virtual void set_RetrieveDateTimeValuesAsMiddleValues(bool value);
    public abstract virtual int get_MaxAllowedSeriesCount();
    public abstract virtual void set_MaxAllowedSeriesCount(int value);
    public abstract virtual int get_MaxAllowedPointCountInSeries();
    public abstract virtual void set_MaxAllowedPointCountInSeries(int value);
    public abstract virtual int get_UpdateDelay();
    public abstract virtual void set_UpdateDelay(int value);
    public abstract virtual int get_AvailableSeriesCount();
    public abstract virtual IDictionary`2<object, int> get_AvailablePointCountInSeries();
    public abstract virtual IDictionary`2<DateTime, DateTimeMeasureUnitNative> get_DateTimeMeasureUnitByArgument();
    public abstract virtual void LockListChanged();
    public abstract virtual void UnlockListChanged();
}
public class DevExpress.Data.CollectionViewFilterSortGroupInfoChangedEventArgs : EventArgs {
    private int groupCount;
    private bool filterChanged;
    private List`1<ListSortInfo> sortInfo;
    private bool needRefresh;
    public List`1<ListSortInfo> SortInfo { get; private set; }
    public int GroupCount { get; private set; }
    public bool FilterChanged { get; private set; }
    public bool NeedRefresh { get; private set; }
    public CollectionViewFilterSortGroupInfoChangedEventArgs(List`1<ListSortInfo> sortInfo, int groupCount, bool filterChanged, bool needRefresh);
    public List`1<ListSortInfo> get_SortInfo();
    private void set_SortInfo(List`1<ListSortInfo> value);
    public int get_GroupCount();
    private void set_GroupCount(int value);
    public bool get_FilterChanged();
    private void set_FilterChanged(bool value);
    public bool get_NeedRefresh();
    private void set_NeedRefresh(bool value);
}
public class DevExpress.Data.CollectionViewFilterSortGroupInfoChangedEventHandler : MulticastDelegate {
    public CollectionViewFilterSortGroupInfoChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CollectionViewFilterSortGroupInfoChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CollectionViewFilterSortGroupInfoChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Data.ColumnInfoNotificationCollection`1 : NotificationCollectionBase {
    private DataControllerBase controller;
    public T Item { get; }
    public DataControllerBase Controller { get; }
    protected ColumnInfoNotificationCollection`1(DataControllerBase controller, CollectionChangeEventHandler collectionChanged);
    public T get_Item(int index);
    public DataControllerBase get_Controller();
    [IteratorStateMachineAttribute("DevExpress.Data.ColumnInfoNotificationCollection`1/<System-Collections-Generic-IEnumerable<T>-GetEnumerator>d__6")]
private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    protected abstract virtual bool IsColumnInfoUsed(int index, IList`1<DataColumnInfo> unusedColumns);
    protected internal bool RemoveUnusedColumns(IList`1<DataColumnInfo> unusedColumns);
}
[TypeConverterAttribute("DevExpress.Data.Design.ColumnSortOrderTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.Data.ColumnSortOrder : Enum {
    public int value__;
    public static ColumnSortOrder None;
    public static ColumnSortOrder Ascending;
    public static ColumnSortOrder Descending;
}
public class DevExpress.Data.CompareIncrementalValue : MulticastDelegate {
    public CompareIncrementalValue(object object, IntPtr method);
    public virtual bool Invoke(int controllerRow, object value, string text);
    public virtual IAsyncResult BeginInvoke(int controllerRow, object value, string text, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.ComplexColumnInfo : object {
    private string name;
    public string Name { get; }
    public ComplexColumnInfo(string name);
    public string get_Name();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.ComplexColumnInfoCollection : CollectionBase {
    [CompilerGeneratedAttribute]
private CollectionChangeEventHandler CollectionChanged;
    public ComplexColumnInfo Item { get; }
    [CompilerGeneratedAttribute]
public void add_CollectionChanged(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public int Add(string name);
    public int IndexOf(string name);
    public ComplexColumnInfo get_Item(int index);
    public void Remove(string name);
    protected virtual void OnInsertComplete(int index, object item);
    protected virtual void OnRemoveComplete(int index, object item);
    protected virtual void RaiseCollectionChanged(CollectionChangeEventArgs e);
}
public class DevExpress.Data.ControllerRowCellExceptionEventArgs : ControllerRowExceptionEventArgs {
    private int column;
    public int Column { get; }
    public ControllerRowCellExceptionEventArgs(int controllerRow, int column, object row, Exception exception);
    public int get_Column();
}
public class DevExpress.Data.ControllerRowEventArgs : EventArgs {
    private int rowHandle;
    private object row;
    public int RowHandle { get; }
    public object Row { get; }
    public ControllerRowEventArgs(int rowHandle, object row);
    public int get_RowHandle();
    public object get_Row();
}
public class DevExpress.Data.ControllerRowExceptionEventArgs : ControllerRowEventArgs {
    private Exception exception;
    private ExceptionAction action;
    public ExceptionAction Action { get; public set; }
    public Exception Exception { get; }
    public ControllerRowExceptionEventArgs(int controllerRow, object row, Exception exception);
    public ExceptionAction get_Action();
    public void set_Action(ExceptionAction value);
    public Exception get_Exception();
}
public class DevExpress.Data.ControllerRowValuesKeeper : object {
    private BaseGridController controller;
    private Object[] values;
    protected int ControllerRow { get; }
    protected bool CanSave { get; }
    protected bool CanRestore { get; }
    protected Object[] Values { get; }
    protected BaseGridController Controller { get; }
    public ControllerRowValuesKeeper(BaseGridController controller);
    public sealed virtual void Dispose();
    protected virtual int get_ControllerRow();
    protected bool get_CanSave();
    protected bool get_CanRestore();
    protected Object[] get_Values();
    protected BaseGridController get_Controller();
    public void Clear();
    public void SaveValues();
    public void RestoreValues();
}
public class DevExpress.Data.Controls.ExpressionEditor.AutoCompleteItem : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoCompleteItemKind <ItemKind>k__BackingField;
    public string Value { get; public set; }
    public string Description { get; public set; }
    public AutoCompleteItemKind ItemKind { get; }
    public AutoCompleteItem(string value, string description, AutoCompleteItemKind itemKind);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public AutoCompleteItemKind get_ItemKind();
}
public enum DevExpress.Data.Controls.ExpressionEditor.AutoCompleteItemKind : Enum {
    public int value__;
    public static AutoCompleteItemKind Column;
    public static AutoCompleteItemKind Parameter;
    public static AutoCompleteItemKind Function;
    public static AutoCompleteItemKind Operator;
}
public class DevExpress.Data.Controls.ExpressionEditor.ColumnDynamicArguments : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CaretPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsertingColumnName>k__BackingField;
    public string ColumnName { get; }
    public string Expression { get; }
    public int CaretPosition { get; }
    internal bool InsertingColumnName { get; }
    public ColumnDynamicArguments(string columnName, string expression, int caretPosition);
    internal ColumnDynamicArguments(string columnName, string expression, int caretPosition, bool insertingColumnName);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public int get_CaretPosition();
    [CompilerGeneratedAttribute]
internal bool get_InsertingColumnName();
}
public class DevExpress.Data.Controls.ExpressionEditor.ColumnInfo : ItemInfoBase {
    private List`1<ColumnInfo> children;
    internal static string DefaultCategoryName;
    private ColumnInfo other;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnInfo <Parent>k__BackingField;
    public Type Type { get; public set; }
    public ColumnInfo Parent { get; public set; }
    public List`1<ColumnInfo> Children { get; }
    public ColumnInfo(string category);
    public ColumnInfo(ColumnInfo other);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public ColumnInfo get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(ColumnInfo value);
    public virtual List`1<ColumnInfo> get_Children();
    internal string GetFullName();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Data.Controls.ExpressionEditor.ConstantInfo : ItemInfoBase {
    internal static string DefaultCategoryName;
    public ConstantInfo(string category);
    public ConstantInfo(ConstantInfo other);
}
public class DevExpress.Data.Controls.ExpressionEditor.CreateTableFunction : object {
    private static string description;
    [CompilerGeneratedAttribute]
private static ICustomFunctionOperatorBrowsable <Instance>k__BackingField;
    private static int minOperandCount;
    private static int maxOperandCount;
    internal static string Name;
    internal static ICustomFunctionOperatorBrowsable Instance { get; }
    private string DevExpress.Data.Filtering.ICustomFunctionOperator.Name { get; }
    private int DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.MinOperandCount { get; }
    private int DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.MaxOperandCount { get; }
    private string DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.Description { get; }
    private FunctionCategory DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.Category { get; }
    private static CreateTableFunction();
    [CompilerGeneratedAttribute]
internal static ICustomFunctionOperatorBrowsable get_Instance();
    internal static void Register();
    internal static void Unregister();
    private sealed virtual override string DevExpress.Data.Filtering.ICustomFunctionOperator.get_Name();
    private sealed virtual override Type DevExpress.Data.Filtering.ICustomFunctionOperator.ResultType(Type[] operands);
    private sealed virtual override object DevExpress.Data.Filtering.ICustomFunctionOperator.Evaluate(Object[] operands);
    private sealed virtual override int DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.get_MinOperandCount();
    private sealed virtual override int DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.get_MaxOperandCount();
    private sealed virtual override bool DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.IsValidOperandCount(int count);
    private sealed virtual override string DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.get_Description();
    private sealed virtual override bool DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.IsValidOperandType(int operandIndex, int operandCount, Type type);
    private sealed virtual override FunctionCategory DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.get_Category();
}
public class DevExpress.Data.Controls.ExpressionEditor.ExpressionEditorContext : object {
    [CompilerGeneratedAttribute]
private static bool <UseRichDocumentation>k__BackingField;
    private static ExpressionEditorContext defaultContext;
    [CompilerGeneratedAttribute]
private ExpressionEditorOptionsBehavior <OptionsBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ColumnInfo> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ParameterInfo> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FunctionInfo> <Functions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<OperatorInfo> <Operators>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ConstantInfo> <Constants>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpressionEditorColorProvider <ColorProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ICriteriaOperatorValidatorProvider <CriteriaOperatorValidatorProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAutoCompleteItemsProvider <AutoCompleteItemsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IColumnDynamicProvider <ColumnDynamicProvider>k__BackingField;
    public static bool UseRichDocumentation { get; public set; }
    public static ExpressionEditorContext Default { get; }
    public ExpressionEditorOptionsBehavior OptionsBehavior { get; private set; }
    public List`1<ColumnInfo> Columns { get; private set; }
    public List`1<ParameterInfo> Parameters { get; private set; }
    public List`1<FunctionInfo> Functions { get; private set; }
    public List`1<OperatorInfo> Operators { get; private set; }
    public List`1<ConstantInfo> Constants { get; private set; }
    public IExpressionEditorColorProvider ColorProvider { get; public set; }
    public ICriteriaOperatorValidatorProvider CriteriaOperatorValidatorProvider { get; public set; }
    public IAutoCompleteItemsProvider AutoCompleteItemsProvider { get; public set; }
    public IColumnDynamicProvider ColumnDynamicProvider { get; public set; }
    private static ExpressionEditorContext();
    [CompilerGeneratedAttribute]
public static bool get_UseRichDocumentation();
    [CompilerGeneratedAttribute]
public static void set_UseRichDocumentation(bool value);
    public static ExpressionEditorContext get_Default();
    [CompilerGeneratedAttribute]
public ExpressionEditorOptionsBehavior get_OptionsBehavior();
    [CompilerGeneratedAttribute]
private void set_OptionsBehavior(ExpressionEditorOptionsBehavior value);
    [CompilerGeneratedAttribute]
public List`1<ColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(List`1<ColumnInfo> value);
    [CompilerGeneratedAttribute]
public List`1<ParameterInfo> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(List`1<ParameterInfo> value);
    [CompilerGeneratedAttribute]
public List`1<FunctionInfo> get_Functions();
    [CompilerGeneratedAttribute]
private void set_Functions(List`1<FunctionInfo> value);
    [CompilerGeneratedAttribute]
public List`1<OperatorInfo> get_Operators();
    [CompilerGeneratedAttribute]
private void set_Operators(List`1<OperatorInfo> value);
    [CompilerGeneratedAttribute]
public List`1<ConstantInfo> get_Constants();
    [CompilerGeneratedAttribute]
private void set_Constants(List`1<ConstantInfo> value);
    [CompilerGeneratedAttribute]
public IExpressionEditorColorProvider get_ColorProvider();
    [CompilerGeneratedAttribute]
public void set_ColorProvider(IExpressionEditorColorProvider value);
    [CompilerGeneratedAttribute]
public ICriteriaOperatorValidatorProvider get_CriteriaOperatorValidatorProvider();
    [CompilerGeneratedAttribute]
public void set_CriteriaOperatorValidatorProvider(ICriteriaOperatorValidatorProvider value);
    [CompilerGeneratedAttribute]
public IAutoCompleteItemsProvider get_AutoCompleteItemsProvider();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteItemsProvider(IAutoCompleteItemsProvider value);
    [CompilerGeneratedAttribute]
public IColumnDynamicProvider get_ColumnDynamicProvider();
    [CompilerGeneratedAttribute]
public void set_ColumnDynamicProvider(IColumnDynamicProvider value);
}
public class DevExpress.Data.Controls.ExpressionEditor.ExpressionEditorModel : object {
    [CompilerGeneratedAttribute]
private string <ExpressionString>k__BackingField;
    public string ExpressionString { get; public set; }
    public ExpressionEditorModel(string expressionString);
    [CompilerGeneratedAttribute]
public string get_ExpressionString();
    [CompilerGeneratedAttribute]
public void set_ExpressionString(string value);
}
public class DevExpress.Data.Controls.ExpressionEditor.ExpressionEditorOptionsBehavior : object {
    [CompilerGeneratedAttribute]
private bool <CapitalizeFunctionNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSelectFocusedItem>k__BackingField;
    public bool CapitalizeFunctionNames { get; public set; }
    public bool AutoSelectFocusedItem { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CapitalizeFunctionNames();
    [CompilerGeneratedAttribute]
public void set_CapitalizeFunctionNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoSelectFocusedItem();
    [CompilerGeneratedAttribute]
public void set_AutoSelectFocusedItem(bool value);
}
public class DevExpress.Data.Controls.ExpressionEditor.ExpressionEditorPresenter : PresenterBase`3<ExpressionEditorModel, IExpressionEditorView, ExpressionEditorPresenter> {
    private Func`2<string, string> validate;
    [CompilerGeneratedAttribute]
private ExpressionEditorContext <Context>k__BackingField;
    public ExpressionEditorContext Context { get; private set; }
    public ExpressionEditorPresenter(ExpressionEditorModel model, IExpressionEditorView view, Func`2<string, string> validate, ExpressionEditorContext context);
    public ExpressionEditorPresenter(ExpressionEditorModel model, IExpressionEditorView view, ExpressionEditorContext context, Func`2<string, string> validate);
    protected virtual void InitViewCore();
    protected virtual string Validate();
    protected virtual void Commit();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionEditorContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ExpressionEditorContext value);
}
public static class DevExpress.Data.Controls.ExpressionEditor.ExpressionEditorUIHelper : object {
    public static bool RunExpressionEditor(String& expressionString, IExpressionEditorView view, ExpressionEditorContext context);
    public static bool RunExpressionEditor(String& expressionString, IExpressionEditorView view, ExpressionEditorContext context, Func`2<string, string> validate);
}
public enum DevExpress.Data.Controls.ExpressionEditor.ExpressionElementKind : Enum {
    public int value__;
    public static ExpressionElementKind Column;
    public static ExpressionElementKind Constant;
    public static ExpressionElementKind Function;
    public static ExpressionElementKind Operator;
    public static ExpressionElementKind Group;
    public static ExpressionElementKind Error;
    public static ExpressionElementKind Parenthesis;
}
public class DevExpress.Data.Controls.ExpressionEditor.FunctionInfo : ItemInfoBase {
    internal static string DefaultCategoryName;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ArgumentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsageSample>k__BackingField;
    [CompilerGeneratedAttribute]
private ICustomFunctionOperator <CustomFunctionOperator>k__BackingField;
    public string DisplayName { get; public set; }
    public int CaretOffset { get; public set; }
    public string FunctionCategory { get; public set; }
    public Type[] ArgumentTypes { get; public set; }
    public string UsageSample { get; public set; }
    public ICustomFunctionOperator CustomFunctionOperator { get; public set; }
    public FunctionInfo(string category);
    public FunctionInfo(ICustomFunctionOperator functionOperator);
    public FunctionInfo(ICustomFunctionOperator functionOperator, string category);
    public FunctionInfo(FunctionInfo other);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public int get_CaretOffset();
    [CompilerGeneratedAttribute]
public void set_CaretOffset(int value);
    [CompilerGeneratedAttribute]
public string get_FunctionCategory();
    [CompilerGeneratedAttribute]
public void set_FunctionCategory(string value);
    [CompilerGeneratedAttribute]
public Type[] get_ArgumentTypes();
    [CompilerGeneratedAttribute]
public void set_ArgumentTypes(Type[] value);
    [CompilerGeneratedAttribute]
public string get_UsageSample();
    [CompilerGeneratedAttribute]
public void set_UsageSample(string value);
    [CompilerGeneratedAttribute]
public ICustomFunctionOperator get_CustomFunctionOperator();
    [CompilerGeneratedAttribute]
public void set_CustomFunctionOperator(ICustomFunctionOperator value);
}
public interface DevExpress.Data.Controls.ExpressionEditor.IAutoCompleteItemsProvider {
    public abstract virtual IEnumerable`1<AutoCompleteItem> GetAutoCompleteItems(string expression, int caretPosition);
}
public interface DevExpress.Data.Controls.ExpressionEditor.IColumnDynamicProvider {
    public abstract virtual ColumnInfo GetColumnInfo(ColumnDynamicArguments arguments);
}
public interface DevExpress.Data.Controls.ExpressionEditor.ICriteriaOperatorValidatorProvider {
    public abstract virtual ErrorsEvaluatorCriteriaValidator GetCriteriaOperatorValidator(ExpressionEditorContext context);
}
public interface DevExpress.Data.Controls.ExpressionEditor.IExpressionEditorColorProvider {
    public abstract virtual Color GetColorForElement(ExpressionElementKind elementKind);
}
public interface DevExpress.Data.Controls.ExpressionEditor.IExpressionEditorPresenter {
    public ExpressionEditorContext Context { get; }
    public abstract virtual ExpressionEditorContext get_Context();
}
public interface DevExpress.Data.Controls.ExpressionEditor.IExpressionEditorView {
    public string ExpressionString { get; public set; }
    public abstract virtual string get_ExpressionString();
    public abstract virtual void set_ExpressionString(string value);
}
public interface DevExpress.Data.Controls.ExpressionEditor.IInvalidCriteriaHandler {
    public abstract virtual bool RaiseInvalidCriteriaException(CriteriaOperator criteria);
    public abstract virtual bool RaiseInvalidCriteriaError(CriteriaOperator criteria);
}
public class DevExpress.Data.Controls.ExpressionEditor.ItemInfoBase : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string Category { get; public set; }
    public ItemInfoBase(string category);
    public ItemInfoBase(ItemInfoBase other);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Data.Controls.ExpressionEditor.JoinFunction : object {
    [CompilerGeneratedAttribute]
private static ICustomFunctionOperatorBrowsable <Instance>k__BackingField;
    public static string Name;
    internal static ICustomFunctionOperatorBrowsable Instance { get; }
    private FunctionCategory DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.Category { get; }
    private string DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.Description { get; }
    private int DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.MaxOperandCount { get; }
    private int DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.MinOperandCount { get; }
    private string DevExpress.Data.Filtering.ICustomFunctionOperator.Name { get; }
    private static JoinFunction();
    [CompilerGeneratedAttribute]
internal static ICustomFunctionOperatorBrowsable get_Instance();
    internal static void Register();
    internal static void Unregister();
    private sealed virtual override FunctionCategory DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.get_Category();
    private sealed virtual override string DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.get_Description();
    private sealed virtual override int DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.get_MaxOperandCount();
    private sealed virtual override int DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.get_MinOperandCount();
    private sealed virtual override string DevExpress.Data.Filtering.ICustomFunctionOperator.get_Name();
    private sealed virtual override object DevExpress.Data.Filtering.ICustomFunctionOperator.Evaluate(Object[] operands);
    private sealed virtual override bool DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.IsValidOperandCount(int count);
    private sealed virtual override bool DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable.IsValidOperandType(int operandIndex, int operandCount, Type type);
    private sealed virtual override Type DevExpress.Data.Filtering.ICustomFunctionOperator.ResultType(Type[] operands);
}
public class DevExpress.Data.Controls.ExpressionEditor.Native.BoundPropertyWrapper : ColumnInfo {
    private IBoundProperty boundProperty;
    public string DisplayName { get; }
    public bool HasChildren { get; }
    public List`1<ColumnInfo> Children { get; }
    private List`1<IBoundProperty> DevExpress.Data.IBoundProperty.Children { get; }
    public bool IsAggregate { get; }
    public bool IsList { get; }
    private IBoundProperty DevExpress.Data.IBoundProperty.Parent { get; }
    public BoundPropertyWrapper(IBoundProperty boundProperty);
    public sealed virtual string get_DisplayName();
    public sealed virtual bool get_HasChildren();
    public virtual List`1<ColumnInfo> get_Children();
    private sealed virtual override List`1<IBoundProperty> DevExpress.Data.IBoundProperty.get_Children();
    public sealed virtual bool get_IsAggregate();
    public sealed virtual bool get_IsList();
    private sealed virtual override IBoundProperty DevExpress.Data.IBoundProperty.get_Parent();
}
public class DevExpress.Data.Controls.ExpressionEditor.Native.ExpressionEditorPickManager : PickManagerBase {
    [CompilerGeneratedAttribute]
private IPropertiesProvider <PropertiesProvider>k__BackingField;
    public IPropertiesProvider PropertiesProvider { get; }
    public ExpressionEditorPickManager(IPropertiesProvider propertiesProvider);
    private IBoundProperty CreateProperty(object dataSource, string dataMember, string displayName, bool isList, PropertyDescriptor property);
    private static bool IsAggregate(PropertyDescriptor property);
    private static Type GetDataType(Type propertyType);
    [CompilerGeneratedAttribute]
public IPropertiesProvider get_PropertiesProvider();
    public List`1<IBoundProperty> PickProperties(object dataSource, string dataMember, Type dataMemberType);
    protected virtual IPropertiesProvider CreateProvider();
    protected virtual INode CreateDataMemberNode(object dataSource, string dataMember, string displayName, bool isList, object owner, IPropertyDescriptor property);
    protected virtual INode CreateDataSourceNode(object dataSource, string dataMember, string name, object owner);
    protected virtual INode CreateDummyNode(object owner);
    protected virtual object CreateNoneNode(object owner);
    protected virtual bool NodeIsEmpty(INode node);
}
public class DevExpress.Data.Controls.ExpressionEditor.Native.ExpressionEditorPropertyNode : object {
    [CompilerGeneratedAttribute]
private IBoundProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private IList <ChildNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDataSourceNode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDummyNode>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    public IBoundProperty Property { get; }
    public IList ChildNodes { get; }
    public string DataMember { get; }
    public bool IsDataMemberNode { get; }
    public bool IsDataSourceNode { get; }
    public bool IsDummyNode { get; }
    public bool IsEmpty { get; }
    public bool IsList { get; }
    public bool IsComplex { get; }
    public object Parent { get; }
    public ExpressionEditorPropertyNode(bool isDataSource, bool isDummy);
    public ExpressionEditorPropertyNode(IBoundProperty property);
    public ExpressionEditorPropertyNode(IBoundProperty property, FilterModelPropertyNode parent);
    [CompilerGeneratedAttribute]
public IBoundProperty get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual IList get_ChildNodes();
    public sealed virtual string get_DataMember();
    public sealed virtual bool get_IsDataMemberNode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDataSourceNode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDummyNode();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual bool get_IsList();
    public sealed virtual bool get_IsComplex();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Parent();
    public sealed virtual void Expand(EventHandler callback);
    public sealed virtual bool HasDataSource(object dataSource);
}
public interface DevExpress.Data.Controls.ExpressionEditor.Native.ISupportContextCustomization {
    public ExpressionEditorContext Context { get; }
    public abstract virtual ExpressionEditorContext get_Context();
}
public class DevExpress.Data.Controls.ExpressionEditor.OperatorInfo : ItemInfoBase {
    internal static string DefaultCategoryName;
    public OperatorInfo(string category);
    public OperatorInfo(OperatorInfo other);
}
public class DevExpress.Data.Controls.ExpressionEditor.ParameterInfo : ItemInfoBase {
    internal static string DefaultCategoryName;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    public ParameterInfo(string category);
    public ParameterInfo(IParameter parameter);
    public ParameterInfo(ParameterInfo other);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
public class DevExpress.Data.CurrentRowChangedEventArgs : EventArgs {
    private object currentRow;
    private object previousRow;
    public object CurrentRow { get; }
    public object PreviousRow { get; }
    public CurrentRowChangedEventArgs(object previousRow, object currentRow);
    public object get_CurrentRow();
    public object get_PreviousRow();
}
public class DevExpress.Data.CurrentRowEventArgs : EventArgs {
}
public class DevExpress.Data.CustomSummaryEventArgs : EventArgs {
    private CustomSummaryProcess summaryProcess;
    private SummaryMode mode;
    private object totalValue;
    private object fieldValue;
    private int controllerRow;
    private int groupRowHandle;
    private int groupLevel;
    private object item;
    internal DataController controller;
    private bool totalValueReady;
    public object TotalValue { get; public set; }
    public SummaryMode Mode { get; public set; }
    public bool TotalValueReady { get; public set; }
    public int GroupLevel { get; }
    public object Item { get; }
    public CustomSummaryProcess SummaryProcess { get; }
    public int GroupRowHandle { get; }
    public object FieldValue { get; }
    public int RowHandle { get; }
    public bool IsGroupSummary { get; }
    public bool IsTotalSummary { get; }
    public object Row { get; }
    public CustomSummaryEventArgs(int controllerRow, object totalValue, object fieldValue, int groupRowHandle, CustomSummaryProcess summaryProcess, object item, int groupLevel);
    public object get_TotalValue();
    public void set_TotalValue(object value);
    public SummaryMode get_Mode();
    public void set_Mode(SummaryMode value);
    public bool get_TotalValueReady();
    public void set_TotalValueReady(bool value);
    public int get_GroupLevel();
    public object get_Item();
    public CustomSummaryProcess get_SummaryProcess();
    public int get_GroupRowHandle();
    public object get_FieldValue();
    public int get_RowHandle();
    public virtual bool get_IsGroupSummary();
    public virtual bool get_IsTotalSummary();
    protected internal void SetupSummaryProcess(CustomSummaryProcess summaryProcess);
    protected internal void SetupCell(int controllerRow, object fieldValue);
    protected internal void Setup(int controllerRow, object totalValue, object fieldValue, GroupRowInfo groupRow, CustomSummaryProcess summaryProcess, object item, SummaryMode mode);
    public object get_Row();
    public object GetValue(string fieldName);
    public object GetGroupSummary(int groupRowHandle, object summaryItem);
}
public class DevExpress.Data.CustomSummaryEventHandler : MulticastDelegate {
    public CustomSummaryEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CustomSummaryEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CustomSummaryEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.CustomSummaryExistEventArgs : EventArgs {
    private bool exists;
    private int groupRowHandle;
    private int groupLevel;
    private object item;
    public object Item { get; }
    public bool Exists { get; public set; }
    public int GroupLevel { get; }
    public int GroupRowHandle { get; }
    public bool IsGroupSummary { get; }
    public bool IsTotalSummary { get; }
    public CustomSummaryExistEventArgs(int groupRowHandle, int groupLevel, object item);
    protected internal CustomSummaryExistEventArgs(GroupRowInfo groupRow, object item);
    public object get_Item();
    public virtual bool get_Exists();
    public virtual void set_Exists(bool value);
    public int get_GroupLevel();
    public virtual int get_GroupRowHandle();
    public virtual bool get_IsGroupSummary();
    public virtual bool get_IsTotalSummary();
}
public class DevExpress.Data.CustomSummaryExistEventHandler : MulticastDelegate {
    public CustomSummaryExistEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CustomSummaryExistEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CustomSummaryExistEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum DevExpress.Data.CustomSummaryProcess : Enum {
    public int value__;
    public static CustomSummaryProcess Start;
    public static CustomSummaryProcess Calculate;
    public static CustomSummaryProcess Finalize;
}
public class DevExpress.Data.DataColumnInfo : object {
    private Type type;
    private string name;
    private bool allowSort;
    private PropertyDescriptor propertyDescriptor;
    private bool autoSplitCasing;
    private int columnIndex;
    private int dataIndex;
    private bool visible;
    private bool unbound;
    private bool allowErrorInfo;
    private object tag;
    internal DataColumnInfoCollection owner;
    private IComparer customComparer;
    private string caption;
    private bool isDataViewDescriptorCore;
    public IComparer CustomComparer { get; public set; }
    public bool Visible { get; public set; }
    public int DataIndex { get; public set; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public string Caption { get; }
    public string Name { get; }
    public Type Type { get; }
    public bool ReadOnly { get; }
    public bool Browsable { get; }
    public bool AllowSort { get; public set; }
    public bool Unbound { get; }
    public bool UnboundWithExpression { get; }
    public string UnboundExpression { get; }
    public bool IsDataViewDescriptor { get; }
    public object Tag { get; public set; }
    protected internal int ColumnIndex { get; protected internal set; }
    public int Index { get; }
    protected internal bool AllowErrorInfo { get; }
    private UnboundPropertyDescriptor UnboundDescriptor { get; }
    private List`1<IDataColumnInfo> DevExpress.Data.IDataColumnInfo.Columns { get; }
    private string DevExpress.Data.IDataColumnInfo.UnboundExpression { get; }
    private string DevExpress.Data.IDataColumnInfo.Caption { get; }
    private string DevExpress.Data.IDataColumnInfo.FieldName { get; }
    private string DevExpress.Data.IDataColumnInfo.Name { get; }
    private DataControllerBase DevExpress.Data.IDataColumnInfo.Controller { get; }
    private Type DevExpress.Data.IDataColumnInfo.FieldType { get; }
    public DataColumnInfo(PropertyDescriptor descriptor, bool autoSplitCasing);
    public virtual IComparer get_CustomComparer();
    public virtual void set_CustomComparer(IComparer value);
    internal void SetOwner(DataColumnInfoCollection owner);
    public Type GetDataType();
    public object ConvertValue(object val);
    public object ConvertValue(object val, bool useCurrentCulture);
    public object ConvertValue(object val, bool useCurrentCulture, DataControllerBase controller);
    public bool get_Visible();
    public void set_Visible(bool value);
    public int get_DataIndex();
    public void set_DataIndex(int value);
    public PropertyDescriptor get_PropertyDescriptor();
    public string get_Caption();
    public string get_Name();
    public Type get_Type();
    public bool get_ReadOnly();
    public bool get_Browsable();
    public bool get_AllowSort();
    public void set_AllowSort(bool value);
    public bool get_Unbound();
    public bool get_UnboundWithExpression();
    public string get_UnboundExpression();
    public bool get_IsDataViewDescriptor();
    public object get_Tag();
    public void set_Tag(object value);
    protected internal int get_ColumnIndex();
    protected internal void set_ColumnIndex(int value);
    public int get_Index();
    protected void SetAsUnbound();
    protected internal bool get_AllowErrorInfo();
    protected internal virtual void SetPropertyDescriptor(PropertyDescriptor descriptor);
    private UnboundPropertyDescriptor get_UnboundDescriptor();
    protected virtual string GetCaption();
    public virtual string ToString();
    private sealed virtual override List`1<IDataColumnInfo> DevExpress.Data.IDataColumnInfo.get_Columns();
    private sealed virtual override string DevExpress.Data.IDataColumnInfo.get_UnboundExpression();
    private sealed virtual override string DevExpress.Data.IDataColumnInfo.get_Caption();
    private sealed virtual override string DevExpress.Data.IDataColumnInfo.get_FieldName();
    private sealed virtual override string DevExpress.Data.IDataColumnInfo.get_Name();
    private sealed virtual override DataControllerBase DevExpress.Data.IDataColumnInfo.get_Controller();
    private sealed virtual override Type DevExpress.Data.IDataColumnInfo.get_FieldType();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.DataColumnInfoCollection : CollectionBase {
    private Dictionary`2<string, DataColumnInfo> nameHash;
    public bool HasUnboundColumns { get; }
    public DataColumnInfo Item { get; }
    public DataColumnInfo Item { get; }
    protected Dictionary`2<string, DataColumnInfo> NameHash { get; }
    private DataColumnInfo System.Collections.Generic.IList<DevExpress.Data.DataColumnInfo>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<DevExpress.Data.DataColumnInfo>.IsReadOnly { get; }
    public bool get_HasUnboundColumns();
    public DataColumnInfo[] ToArray();
    public int GetColumnIndex(string fieldName);
    public DataColumnInfo get_Item(int index);
    public DataColumnInfo get_Item(string name);
    public void Add(DataColumnInfo columnInfo);
    public DataColumnInfo Add(PropertyDescriptor descriptor);
    public Dictionary`2<DataColumnInfo, object> ConvertValues(Dictionary`2<string, object> columnValues);
    protected virtual void OnInsertComplete(int position, object item);
    protected virtual void OnRemoveComplete(int position, object item);
    protected virtual void OnClearComplete();
    protected Dictionary`2<string, DataColumnInfo> get_NameHash();
    private void UpdateColumnIndexes();
    internal void ValidateColumnInfo(DataColumnInfo columnInfo);
    private sealed virtual override int System.Collections.Generic.IList<DevExpress.Data.DataColumnInfo>.IndexOf(DataColumnInfo item);
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Data.DataColumnInfo>.Insert(int index, DataColumnInfo item);
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Data.DataColumnInfo>.RemoveAt(int index);
    private sealed virtual override DataColumnInfo System.Collections.Generic.IList<DevExpress.Data.DataColumnInfo>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Data.DataColumnInfo>.set_Item(int index, DataColumnInfo value);
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Data.DataColumnInfo>.Add(DataColumnInfo item);
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Data.DataColumnInfo>.Contains(DataColumnInfo item);
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Data.DataColumnInfo>.CopyTo(DataColumnInfo[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Data.DataColumnInfo>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Data.DataColumnInfo>.Remove(DataColumnInfo item);
    private sealed virtual override IEnumerator`1<DataColumnInfo> System.Collections.Generic.IEnumerable<DevExpress.Data.DataColumnInfo>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Data.DataController : DataControllerBase {
    [CompilerGeneratedAttribute]
private SelectionChangingEventHandler SelectionChanging;
    [CompilerGeneratedAttribute]
private SelectionChangedEventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private EventHandler Refreshed;
    [CompilerGeneratedAttribute]
private RowDeletedEventHandler RowDeleted;
    [CompilerGeneratedAttribute]
private RowDeletingEventHandler RowDeleting;
    private Dictionary`2<int, bool> detailEmptyHash;
    private FilterHelper filterHelper;
    private bool allowRestoreSelection;
    private bool notifyClientOnNextChange;
    private string lastErrorText;
    private IClassicRowKeeper rowsKeeper;
    private SelectionController selection;
    private IDataControllerVisualClient visualClient;
    private IDataControllerRelationSupport relationSupport;
    private DataColumnSortInfoCollection sortInfo;
    private VisibleListSourceRowCollection visibleListSourceRows;
    private VisibleListSourceRowCollection visibleListSourceRowsFilterCache;
    private VisibleIndexCollection visibleIndexes;
    private GroupRowInfoCollection groupInfo;
    private SummaryItemCollection groupSummary;
    private TotalSummaryItemCollection totalSummary;
    private MasterRowInfoCollection expandedMasterRowCollection;
    private SummarySortInfoCollection summarySortInfo;
    private CriteriaOperator filterCriteria;
    private bool autoUpdateTotalSummary;
    private bool immediateUpdateRowPosition;
    private IFilterRowStub _FilterStub;
    public static int InvalidRow;
    public static int OperationInProgress;
    [CompilerGeneratedAttribute]
private CustomSummaryEventHandler CustomSummary;
    [CompilerGeneratedAttribute]
private CustomSummaryExistEventHandler CustomSummaryExists;
    [CompilerGeneratedAttribute]
private bool <MaintainVisibleRowBindingOnFilterChange>k__BackingField;
    private CustomSummaryEventArgs summaryCalculateArgs;
    [CompilerGeneratedAttribute]
private bool <AllowSmartDataSourceChange>k__BackingField;
    private bool isEndUpdate;
    private static bool __MustSubstituteProvidedFilterNotChangeIt_DoNotFireAnymore;
    [CompilerGeneratedAttribute]
private bool <ForceAllowToSetInvalidFilterCriteria>k__BackingField;
    private bool collapsingRows;
    private IFindRowByValueCache findRowByValueCache;
    private Nullable`1<bool> forceRowValueComparison;
    [CompilerGeneratedAttribute]
private bool <EnforceSortedBehavior>k__BackingField;
    private bool dataSyncInProgress;
    private int refreshInProgress;
    private int prevSelectionCount;
    private bool prevGrouped;
    private int sortGroupUpdate;
    internal int dataErrorHookCounter;
    internal long DataErrorCounter;
    [CompilerGeneratedAttribute]
private bool <CollapseDetailRowsOnReset>k__BackingField;
    [BrowsableAttribute("False")]
public bool ByPassFilter;
    private SubstituteSortInfoEventArgs sortInfoInterceptor;
    private String[] lastGroupDescriptors;
    private int summaryCalculateCounter;
    private SummarySelectionInfo summarySelectionInfo;
    public bool MaintainVisibleRowBindingOnFilterChange { get; public set; }
    protected internal CustomSummaryEventArgs SummaryCalculateArgs { get; }
    public bool AllowSmartDataSourceChange { get; public set; }
    public Dictionary`2<int, bool> DetailEmptyHash { get; }
    public FilterHelper FilterHelper { get; }
    public IDataControllerRelationSupport RelationSupport { get; public set; }
    public bool AutoExpandAllGroups { get; public set; }
    public bool AllowPartialGrouping { get; public set; }
    public bool AutoUpdateTotalSummary { get; public set; }
    public bool ImmediateUpdateRowPosition { get; public set; }
    public bool IsImmediateUpdateRowPosition { get; }
    public IDataControllerVisualClient2 VisualClient2 { get; }
    public IDataControllerVisualClient3 VisualClient3 { get; }
    public IDataControllerVisualClient VisualClient { get; public set; }
    public IDataControllerDetailClient DetailClient { get; }
    public bool AllowRestoreSelection { get; public set; }
    public bool IsInitializing { get; }
    public SelectionController Selection { get; }
    protected internal IClassicRowKeeper RowsKeeper { get; }
    protected IFilterRowStub FilterStub { get; }
    [ObsoleteAttribute("Use FilterDelegate instead", "True")]
protected ExpressionEvaluator FilterExpressionEvaluator { get; }
    protected bool HasUserFilter { get; }
    public bool IsFiltered { get; }
    public CriteriaOperator FilterCriteria { get; public set; }
    public bool ForceAllowToSetInvalidFilterCriteria { get; public set; }
    protected bool AllowToSetInvalidFilterCriteria { get; }
    public string FilterExpression { get; public set; }
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool IsSupportMasterDetail { get; }
    public DataColumnSortInfoCollection SortInfo { get; }
    public SummaryItemCollection GroupSummary { get; }
    public SummarySortInfoCollection SummarySortInfo { get; }
    public TotalSummaryItemCollection TotalSummary { get; }
    public int VisibleListSourceRowCount { get; }
    public int GroupRowCount { get; }
    public int RelationCount { get; }
    public bool CanSort { get; }
    public bool CanGroup { get; }
    public bool CanFilter { get; }
    public int GroupedColumnCount { get; }
    public bool EnforceSortedBehavior { get; public set; }
    public bool IsSorted { get; }
    public bool IsGrouped { get; }
    protected bool IsDataSyncInProgress { get; }
    protected bool IsRefreshInProgress { get; }
    public GroupRowInfoCollection GroupInfo { get; }
    protected bool AllowRebuildVisubleIndexesOnRefresh { get; }
    private bool InSortGroupUpdate { get; }
    public string LastErrorText { get; }
    protected internal bool AllowDataErrorReThrow { get; }
    public int VisibleCount { get; }
    public MasterRowInfoCollection ExpandedMasterRowCollection { get; }
    protected internal VisibleListSourceRowCollection VisibleListSourceRows { get; }
    protected internal VisibleIndexCollection VisibleIndexes { get; }
    public bool CollapseDetailRowsOnReset { get; public set; }
    protected bool NotifyClientOnNextChange { get; protected set; }
    public bool IsVirtualQuery { get; }
    protected internal String[] LastGroupDescriptors { get; }
    protected bool IsSortBySummary { get; }
    public bool AllowSummaryBySelection { get; }
    public bool UseClassicRowKeeper { get; }
    [CompilerGeneratedAttribute]
public void add_SelectionChanging(SelectionChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanging(SelectionChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(SelectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(SelectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Refreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Refreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowDeleted(RowDeletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowDeleted(RowDeletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowDeleting(RowDeletingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowDeleting(RowDeletingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_CustomSummary(CustomSummaryEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CustomSummary(CustomSummaryEventHandler value);
    [CompilerGeneratedAttribute]
public void add_CustomSummaryExists(CustomSummaryExistEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CustomSummaryExists(CustomSummaryExistEventHandler value);
    [CompilerGeneratedAttribute]
public bool get_MaintainVisibleRowBindingOnFilterChange();
    [CompilerGeneratedAttribute]
public void set_MaintainVisibleRowBindingOnFilterChange(bool value);
    protected internal CustomSummaryEventArgs get_SummaryCalculateArgs();
    public virtual void Dispose();
    protected virtual DataSourceInfo CreateSourceInfoStorage();
    [CompilerGeneratedAttribute]
public virtual bool get_AllowSmartDataSourceChange();
    [CompilerGeneratedAttribute]
public virtual void set_AllowSmartDataSourceChange(bool value);
    protected virtual DataControllerChangedItemCollection CreateDataControllerChangedItemCollection();
    protected virtual DataSourceInfo CreateSourceInfo(bool storeRowsData);
    protected virtual void RestoreState(DataSourceInfo currentSource);
    protected virtual void OnRestoreState();
    protected virtual void ClearClients();
    protected internal virtual bool RaiseRowDeleting(int listSourceRowIndex);
    protected internal virtual void RaiseRowDeleted(int controllerRow, int listSourceRowIndex, object row);
    protected virtual CustomSummaryExistEventArgs CreateCustomSummaryExistEventArgs(GroupRowInfo groupRow, object item);
    protected virtual CustomSummaryEventArgs CreateCustomSummaryEventArgs();
    protected virtual MasterRowInfoCollection CreateMasterRowCollection();
    protected virtual FilterHelper CreateFilterHelper();
    protected virtual GroupRowInfoCollection CreateGroupRowInfoCollection();
    protected virtual SelectionController CreateSelectionController();
    protected virtual VisibleIndexCollection CreateVisibleIndexCollection();
    public void BeginSortUpdate();
    public void EndSortUpdate();
    public virtual void BeginUpdate();
    protected virtual void EndUpdateCore(bool sortUpdate);
    public virtual CriteriaOperator CalcColumnFilterCriteriaByValue(string fieldName, object columnValue, bool equal, bool roundDateTime, IFormatProvider provider);
    public Object[] GetUniqueColumnValues(string fieldName, ColumnValuesArguments args, OperationCompleted completed);
    public Object[] GetUniqueColumnValues(string fieldName, int maxCount, bool includeFilteredOut, bool roundDataTime, OperationCompleted completed);
    public Object[] GetUniqueColumnValues(string fieldName, int maxCount, bool includeFilteredOut, bool roundDataTime, OperationCompleted completed, bool implyNullLikeEmptyStringWhenFiltering);
    public Object[] GetUniqueColumnValues(string fieldName, int maxCount, CriteriaOperator filter, bool ignoreAppliedFilter, bool roundDataTime, OperationCompleted completed, bool implyNullLikeEmptyStringWhenFiltering);
    [IteratorStateMachineAttribute("DevExpress.Data.DataController/<FilterRows>d__84")]
protected internal IEnumerable`1<int> FilterRows(CriteriaOperator filter, IEnumerable`1<int> rowsToFit);
    public virtual void LoadRows(int startFrom, int count);
    public virtual void ClearInvalidRowsCache();
    public virtual void CancelWeakFindIncremental();
    public virtual void CancelFindIncremental();
    public virtual void ScrollingCancelAllGetRows();
    public virtual void ScrollingCheckRowLoaded(int rowHandle);
    public virtual void UpdateSortGroup(DataColumnSortInfo[] sortInfo, int groupCount, SummarySortInfo[] summaryInfo);
    public Dictionary`2<int, bool> get_DetailEmptyHash();
    public FilterHelper get_FilterHelper();
    public IDataControllerRelationSupport get_RelationSupport();
    public void set_RelationSupport(IDataControllerRelationSupport value);
    public bool get_AutoExpandAllGroups();
    public void set_AutoExpandAllGroups(bool value);
    public virtual bool get_AllowPartialGrouping();
    public virtual void set_AllowPartialGrouping(bool value);
    public virtual bool get_AutoUpdateTotalSummary();
    public virtual void set_AutoUpdateTotalSummary(bool value);
    public virtual bool get_ImmediateUpdateRowPosition();
    public virtual void set_ImmediateUpdateRowPosition(bool value);
    public bool get_IsImmediateUpdateRowPosition();
    public IDataControllerVisualClient2 get_VisualClient2();
    public IDataControllerVisualClient3 get_VisualClient3();
    public IDataControllerVisualClient get_VisualClient();
    public void set_VisualClient(IDataControllerVisualClient value);
    public IDataControllerDetailClient get_DetailClient();
    public bool get_AllowRestoreSelection();
    public void set_AllowRestoreSelection(bool value);
    public bool get_IsInitializing();
    public SelectionController get_Selection();
    public void SaveRowState(Stream stream);
    public void RestoreRowState(Stream stream);
    public void SaveRowState(ITypedWriter writer);
    public void RestoreRowState(ITypedReader reader);
    public void SaveRowState();
    public void SaveRowState(IClassicRowKeeper keeper);
    public void RestoreRowState();
    public void RestoreRowState(IClassicRowKeeper keeper);
    private void CheckUpdateSelectionSummary();
    [EditorBrowsableAttribute("1")]
public void ResetRowsKeeper();
    protected void ResetRowsKeeperEx();
    protected internal IClassicRowKeeper get_RowsKeeper();
    private void ResetFilterStub();
    private void CreateNewFilterStub();
    protected virtual void OnVisibleClient_VisibleRangeChanged(object sender, EventArgs e);
    protected IFilterRowStub get_FilterStub();
    protected ExpressionEvaluator get_FilterExpressionEvaluator();
    private static int CalcCriterionHashCodeSafe(CriteriaOperator cop);
    public CriteriaOperator ClientUserSubstituteFilter(CriteriaOperator criterion);
    protected virtual IFilterRowStub CreateFilterRowStub(Exception& exception);
    protected bool get_HasUserFilter();
    public bool get_IsFiltered();
    public CriteriaOperator get_FilterCriteria();
    public void set_FilterCriteria(CriteriaOperator value);
    [CompilerGeneratedAttribute]
public bool get_ForceAllowToSetInvalidFilterCriteria();
    [CompilerGeneratedAttribute]
public void set_ForceAllowToSetInvalidFilterCriteria(bool value);
    protected virtual bool get_AllowToSetInvalidFilterCriteria();
    public string get_FilterExpression();
    public void set_FilterExpression(string value);
    public virtual bool get_AllowNew();
    public bool get_AllowEdit();
    public bool get_AllowRemove();
    public bool get_IsSupportMasterDetail();
    public DataColumnSortInfoCollection get_SortInfo();
    public SummaryItemCollection get_GroupSummary();
    public SummarySortInfoCollection get_SummarySortInfo();
    public TotalSummaryItemCollection get_TotalSummary();
    public int get_VisibleListSourceRowCount();
    public int get_GroupRowCount();
    public int get_RelationCount();
    public int GetRelationCount(int controllerRow);
    public int GetRelationIndex(int controllerRow, string relationName);
    public string GetRelationName(int controllerRow, int relationIndex);
    public string GetRelationDisplayName(int controllerRow, int relationIndex);
    public int GetPrevSibling(int controllerRow);
    public int GetNextSibling(int controllerRow);
    public int GetParentRowHandle(int controllerRow);
    public GroupRowInfo GetParentGroupRow(int controllerRow);
    public virtual void DeleteRow(int controllerRow);
    public virtual void DeleteSelectedRows();
    public virtual void DeleteRows(Int32[] controllerRows);
    private Int32[] GetListSourceRows(Int32[] controllerRows);
    private void AddControllerRowToDeletedHashtable(Dictionary`2<int, int> list, int controllerRow);
    public DetailInfo ExpandDetailRow(int controllerRow, int relationIndex);
    public IList GetDetailList(int controllerRow, int relationIndex);
    public void CollapseDetailRow(int controllerRow, int relationIndex);
    public void CollapseDetail(DetailInfo detail);
    public virtual void CollapseDetailRows();
    protected virtual void OnMasterDetailChanged();
    public Hashtable GetGroupSummary(int groupRowHandle);
    protected virtual Hashtable GetGroupSummaryCore(GroupRowInfo group);
    public void CollapseDetailRow(int controllerRow);
    public void CollapseDetailRowByKey(object rowKey);
    public void CollapseDetailRowByOwner(object detailOwner);
    public MasterRowInfo FindRowDetailInfo(object rowKey);
    public MasterRowInfo GetRowDetailInfo(int controllerRow);
    public bool IsDetailRowExpanded(int controllerRow);
    public bool IsDetailRowExpanded(int controllerRow, int relationIndex);
    public bool IsDetailRowEmptyCached(int controllerRow);
    public bool IsDetailRowEmptyCached(int controllerRow, int relationIndex);
    public bool IsDetailRowEmpty(int controllerRow, int relationIndex);
    public bool IsDetailRow(int controllerRow);
    public object GetRowKey(int controllerRow);
    public virtual Object[] GetGroupRowValues(GroupRowInfo group);
    public object GetGroupRowValue(int controllerRow);
    public object GetGroupRowValue(int controllerRow, DataColumnInfo column);
    private int GetColumnByGroupLevel(GroupRowInfo group, int column);
    public virtual object GetGroupRowValue(GroupRowInfo group);
    protected virtual object GetGroupRowValue(GroupRowInfo group, int column);
    protected internal virtual object GetGroupRowKeyValueInternal(GroupRowInfo group);
    public int GetRowLevel(int controllerRow);
    public object GetRow(int controllerRow);
    public virtual object GetRow(int controllerRow, OperationCompleted completed, bool userHandler);
    public object GetListSourceRow(int controllerRow);
    public object GetRowByListSourceIndex(int listSourceRow);
    public string GetRowDisplayText(int controllerRow, int column);
    public virtual int FindIncremental(string text, int columnHandle, int startRowHandle, bool down, bool ignoreStartRow, bool allowLoop, CompareIncrementalValue compareValue, OperationCompleted[] completed);
    private bool CompareValueDefault(int controllerRow, object val, string text);
    public static bool StringStartsWith(string source, string part);
    public virtual int FindRowByBeginWith(string columnName, string text);
    public virtual int FindRowByValue(string columnName, object value, OperationCompleted[] completed);
    private int FindRowByValueCore(object value, DataColumnInfo column, int startIndex, int count);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void EnsureFindRowByValueCache(DataColumnInfo column, int capacity);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void DestroyFindRowByValueCache();
    public int FindRowByValues(Dictionary`2<string, object> columnValues);
    public virtual int FindRowByValues(Dictionary`2<DataColumnInfo, object> values);
    private bool IsRowEquals(Dictionary`2<DataColumnInfo, object> values, int listSourceIndex);
    public virtual int FindControllerRowByRowReference(object value, int prevControllerRowIndex);
    internal void CheckForValueType(object val);
    public bool CompareRowReferences(object val1, object val2);
    internal bool CompareRowReferencesCore(object val1, object val2);
    public virtual int FindRowByRowValue(object value, int tryListSourceIndex);
    public virtual bool IsRowLoaded(int controllerRow);
    public virtual void EnsureRowLoaded(int controllerRow, OperationCompleted completed, bool userHandler);
    public virtual void LoadRowHierarchy(int rowHandle, OperationCompleted completed);
    public virtual void LoadRow(int controllerRow);
    public object GetRowValue(int controllerRow, int column);
    public object GetRowValue(int controllerRow, string columnName);
    public virtual object GetRowValue(int controllerRow, int column, OperationCompleted completed, bool userHandler);
    public Func`1<object> GetThreadSafeRowValueGetter(int controllerRow, int column);
    public object GetRowValue(int controllerRow, string columnName, OperationCompleted completed);
    protected virtual object GetRowValueDetail(int controllerRow, DataColumnInfo column);
    private object GetListSourceRowValueDetail(int listSourceRowIndex, DataColumnInfo column);
    public object GetRowValue(int controllerRow, DataColumnInfo column);
    public object GetRowValue(int controllerRow, DataColumnInfo column, OperationCompleted completed);
    public object GetListSourceRowValue(int listSourceRowIndex, string columnName);
    public object GetListSourceRowValue(int listSourceRowIndex, DataColumnInfo column);
    public object GetListSourceRowValue(int listSourceRowIndex, int column);
    public void SetRowValue(int controllerRow, int column, object val);
    public void RefreshRow(int rowHandle, string columnName);
    public void RefreshRow(int rowHandle, DataColumnInfo column);
    public void RefreshListSourceRow(int listSourceRowIndex, string columnName);
    public void RefreshListSourceRow(int listSourceRowIndex, DataColumnInfo column);
    public object GetValueEx(int controllerRow, string columnName);
    public virtual object GetValueEx(int controllerRow, string columnName, OperationCompleted completed);
    protected virtual void SetRowValueCore(int controllerRow, int column, object val);
    public void SetRowValue(int controllerRow, string columnName, object val);
    public void SetRowValue(int controllerRow, DataColumnInfo column, object val);
    public virtual bool get_CanSort();
    public virtual bool get_CanGroup();
    public virtual bool get_CanFilter();
    public bool CanSortColumn(string fieldName);
    public bool CanSortColumn(int column);
    public bool CanSortColumn(DataColumnInfo column);
    protected virtual bool CanSortColumnCore(DataColumnInfo column);
    protected virtual bool CanFindUnboundColumn(DataColumnInfo column);
    public virtual bool CanFindColumn(DataColumnInfo column);
    public int get_GroupedColumnCount();
    [CompilerGeneratedAttribute]
public bool get_EnforceSortedBehavior();
    [CompilerGeneratedAttribute]
public void set_EnforceSortedBehavior(bool value);
    public bool get_IsSorted();
    public bool get_IsGrouped();
    public int GetControllerRowByGroupRow(int controllerRow);
    public virtual int GetListSourceRowIndex(int controllerRow);
    public virtual bool IsControllerRowValid(int controllerRow);
    public bool IsControllerCellValid(int controllerRow, int column);
    public int UnsafeGetListSourceRowIndex(int controllerRow);
    protected virtual void RequestDataSyncInitialize();
    protected virtual void SubscribeDataSync();
    protected virtual void UnsubscribeDataSync();
    protected virtual bool get_IsDataSyncInProgress();
    protected virtual void OnDataSync_FilterSortGroupInfoChanged(object sender, CollectionViewFilterSortGroupInfoChangedEventArgs e);
    public virtual void RePopulateColumns(bool allowRefresh);
    protected bool get_IsRefreshInProgress();
    public GroupRowInfoCollection get_GroupInfo();
    protected virtual void RaiseOnBeforeListChanged(ListChangedEventArgs e);
    protected void DoRefreshCore(bool useRowsKeeper);
    protected virtual void OnPreRefresh(bool useRowsKeeper);
    protected virtual bool get_AllowRebuildVisubleIndexesOnRefresh();
    protected virtual void ClearVisibleInfoOnRefresh();
    protected virtual void OnRefresh(bool useRowsKeeper);
    protected virtual void DoRefreshDataOperations();
    protected virtual void OnPostRefresh(bool useRowsKeeper);
    protected void OnPostRefreshUpdateSelection();
    protected virtual void BeginInvoke(Delegate method);
    protected virtual void OnListSourceChangeClear();
    protected virtual void DoRefresh(bool useRowsKeeper);
    protected virtual void CheckRaiseVisibleCountChanged(int prevVCount);
    protected virtual void OnRefreshed();
    public virtual void DoSortGroupRefresh();
    private bool get_InSortGroupUpdate();
    public void ResetLastErrorText();
    public string get_LastErrorText();
    private void SetLastErrorText(string value);
    protected internal void BeginDataErrorCheck();
    protected internal void EndDataErrorCheck();
    protected internal bool get_AllowDataErrorReThrow();
    public void NotifyDataError(DataControllerErrorEventArgs e);
    public virtual bool PrefetchAllData(Function`1<bool> callbackMethod, bool clonedVersion);
    public IList GetAllFilteredAndSortedRows();
    public virtual IList GetAllFilteredAndSortedRows(Function`1<bool> callbackMethod);
    protected virtual void ClearFilterCache();
    protected virtual void SaveFilterCache();
    protected virtual void VisualClientNotifyTotalSummary();
    protected internal virtual void VisualClientUpdateLayout();
    public void ChangeGroupSorting(int groupLevel);
    public VisibleIndexCollection GetVisibleIndexes();
    public int get_VisibleCount();
    public virtual int GetControllerRow(int listSourceRow);
    public int GetControllerRowHandle(int visibleIndex, int visibleCount);
    public int GetControllerRowHandle(int visibleIndex);
    public int GetVisibleIndex(int controllerRowHandle);
    public int GetVisibleIndexChecked(int controllerRowHandle);
    public virtual bool IsValidControllerRowHandle(int controllerRowHandle);
    public void MakeRowVisible(int controllerRowHandle);
    public bool IsRowVisible(int controllerRowHandle);
    public void ExpandAll();
    public bool IsRowExpanded(int groupRowHandle);
    public void CollapseAll();
    public void ExpandRow(int groupRowHandle);
    public void ExpandLevel(int groupLevel, bool recursive);
    public void CollapseLevel(int groupLevel, bool recursive);
    public void ExpandRow(int groupRowHandle, bool recursive);
    public void CollapseRow(int groupRowHandle);
    public void CollapseRow(int groupRowHandle, bool recursive);
    protected virtual IDataErrorInfo GetRowErrorInfo(int controllerRow);
    protected virtual IDXDataErrorInfo GetRowDXErrorInfo(int controllerRow);
    public string GetErrorText(int controllerRow, string columnName);
    public string GetErrorText(int controllerRow, DataColumnInfo column);
    public virtual string GetErrorText(int controllerRow);
    public ErrorType GetErrorType(int controllerRow);
    public virtual bool HasErrors(int controllerRow, ErrorType& errorType);
    public bool HasCellError(int controllerRow, int column);
    public virtual bool HasCellError(int controllerRow, DataColumnInfo column);
    public virtual ErrorInfo GetErrorInfo(int controllerRow);
    public virtual string GetErrorText(int controllerRow, int column);
    public virtual ErrorType GetErrorType(int controllerRow, int column);
    public virtual ErrorInfo GetErrorInfo(int controllerRow, int column);
    public MasterRowInfoCollection get_ExpandedMasterRowCollection();
    protected internal VisibleListSourceRowCollection get_VisibleListSourceRows();
    protected internal VisibleIndexCollection get_VisibleIndexes();
    protected virtual void ChangeExpandedLevel(int groupLevel, bool expanded, bool recursive);
    protected virtual void ChangeExpanded(int groupRowHandle, bool expanded, bool recursive);
    protected virtual void ChangeAllExpanded(bool expanded);
    protected virtual void BuildVisibleIndexes();
    protected virtual void OnFilterExpressionChanged();
    protected internal virtual void OnGroupDeleted(GroupRowInfo groupInfo);
    protected internal virtual void OnGroupsDeleted(List`1<GroupRowInfo> groups, bool addedToSameGroup);
    protected internal virtual bool RaiseSelectionChanging(SelectionChangingEventArgs e);
    protected internal virtual void RaiseSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void OnBindingListChanged(ListChangedEventArgs e);
    protected virtual void OnBindingListChangedCore(ListChangedEventArgs e);
    protected virtual void OnVisibleIndexesUpdated();
    [CompilerGeneratedAttribute]
public virtual bool get_CollapseDetailRowsOnReset();
    [CompilerGeneratedAttribute]
public virtual void set_CollapseDetailRowsOnReset(bool value);
    protected bool get_NotifyClientOnNextChange();
    protected void set_NotifyClientOnNextChange(bool value);
    protected virtual void OnBindingListChangingEnd();
    protected virtual void OnBindingListChangingStart();
    protected virtual void OnItemMoved(ListChangedEventArgs e, DataControllerChangedItemCollection changedItems);
    protected virtual void OnActionItemMoved(int oldIndex, int newIndex);
    protected virtual void OnActionItemDeleted(int index, bool filterChange);
    protected virtual void OnActionItemAdded(int index);
    private bool OnFilteredItemChanged(int listSourceRow, DataControllerChangedItemCollection changedItems);
    protected virtual void UpdateTotalSummaryOnItemFilteredOut(int listSourceRow);
    protected virtual void OnItemChanged(ListChangedEventArgs e, DataControllerChangedItemCollection changedItems);
    private DataColumnInfo GetColumn(ListChangedEventArgs e);
    protected virtual void UpdateTotalSummaryOnItemChanged(int listSourceRow, string propertName);
    protected internal virtual bool CheckImmediateUpdateRowPosition(ListChangedEventArgs e);
    protected virtual void VisibleListSourceRowMove(int oldControllerRow, Int32& newControllerRow, DataControllerChangedItemCollection changedItems, bool isAdding);
    private static void MakeVisibleIndexesDirty(VisibleIndexCollection visibleIndexes);
    private void OnItemDeleted(ListChangedEventArgs e, DataControllerChangedItemCollection changedItems);
    protected virtual void OnItemDeletedCore(int controllerRow, DataControllerChangedItemCollection changedItems);
    protected virtual void UpdateTotalSummaryOnItemDeleted(int controllerRow);
    private void OnItemAdded(ListChangedEventArgs e, DataControllerChangedItemCollection changedItems);
    protected virtual bool CanFilterAddedRow(int listSourceRow);
    protected virtual void OnItemAddedCore(int listSourceRow, DataControllerChangedItemCollection changedItems, bool rowInserted);
    protected virtual void UpdateTotalSummaryOnItemAdded(int listSourceRow);
    private int ShowRow(int dataIndex, DataControllerChangedItemCollection changedItems, bool rowInserted);
    private int FindControllerRowForInsert(int listSourceRow, Nullable`1<int> oldControllerRow);
    private Nullable`1<bool> IsRowUserFit(int listSourceRow, bool fit);
    protected virtual bool IsRowFit(int listSourceRow);
    protected virtual void DoFilterRows();
    private void DoFilterSafe();
    private static OnceEnumerableCollection`1<int> DoFilterSafe1(int rowCount, IFilterRowStub stub, Func`3<int, bool, bool> fin);
    private void DoFilterLegacy2019();
    private Int32[] DoFilterLegacy2019Core(Int32& fitCount);
    public virtual bool get_IsVirtualQuery();
    protected internal virtual PropertyDescriptorCollection GetFilterDescriptorCollection();
    private PropertyDescriptorCollection GetFilterDescriptorCollection2(IDataControllerSort2 sortClient);
    private void AddPropertyDescriptorToDictionary(Dictionary`2<string, PropertyDescriptor> dictionary, PropertyDescriptor pd);
    private DataColumnSortInfo[] GetExpandedAndInterceptedSortInfo();
    internal DataColumnSortInfo[] GetInterceptSortInfo();
    private void ValidateSortInfosAfterIntercept(DataColumnSortInfo[] patched);
    private void ValidateSortInfosBeforeIntercept(DataColumnSortInfo[] rv);
    private void ValidateSortInfos(DataColumnSortInfo[] infos);
    protected virtual void DoSortRows();
    protected internal String[] GetGroupDescriptors();
    protected internal String[] get_LastGroupDescriptors();
    protected void DoGroupRows();
    protected virtual void DoGroupRowsCore();
    protected virtual bool get_IsSortBySummary();
    protected virtual void DoSortSummary();
    private void RebuildVisibleListSourceRows(GroupRowInfoCollection groupInfo);
    protected virtual void DoSortSummary(GroupRowInfoCollection groups, GroupRowInfo parentGroup);
    protected virtual GroupRowInfo RequestSummary(GroupRowInfo rowInfo);
    protected void CheckUpdateTotalSummary();
    public virtual bool get_AllowSummaryBySelection();
    public virtual void UpdateTotalSummary(List`1<SummaryItem> changedItems, bool selectionChanged);
    private bool CheckRequireSummarySelectionRefresh(SummaryItemCollection summary, IList`1<SummaryItem> changedItems);
    private bool CheckIsSameSelection(Int32[] lastSummarySelectedRows, Int32[] summarySelectedRows);
    protected virtual void CalcTotalSummaryItem(SummaryItem summary);
    public virtual bool get_UseClassicRowKeeper();
    public IClassicRowKeeper CreateControllerRowsKeeper();
    protected virtual IClassicRowKeeper CreateControllerRowsKeeperCore();
    public virtual IClassicRowKeeper CreateControllerRowsKeeperClassic();
    protected virtual void Reset();
    protected internal virtual void VisualClientRequestSynchronization();
    protected void OnSortSummaryCollectionChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void OnGroupSummaryCollectionChanged(object sender, CollectionChangeEventArgs e);
    protected void OnSortInfoCollectionChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void OnTotalSummaryCollectionChanged(object sender, CollectionChangeEventArgs e);
    public void CalcSummary();
    protected void BeginSummaryCalculate();
    protected void EndSummaryCalculate();
    protected virtual void OnBeginSummaryCalculate();
    public int GetGroupIndex(int position, int level);
    public int GetRowIndexInGroup(int position);
    private SummarySelectionInfo NormalizeSummarySelection(Int32[] selection);
    protected virtual void CalcTotalSummary();
    protected virtual void CalcGroupSummary();
    public void UpdateGroupSummary();
    public virtual void UpdateGroupSummary(List`1<SummaryItem> changedItems, bool selectionChanged);
    protected virtual void CalcGroupSummaryItem(SummaryItem summary);
    [ObsoleteAttribute("Use GetCalcGroupSummaryItemAction instead")]
[EditorBrowsableAttribute("1")]
protected void CalcGroupSummaryItem(SummaryItem summary, GroupRowInfo groupRow);
    protected virtual Action`1<GroupRowInfo> GetCalcGroupSummaryItemAction(SummaryItem summary);
    public virtual void UpdateGroupSummary(GroupRowInfo groupRow, DataControllerChangedItemCollection changedItems);
    [ObsoleteAttribute("Use GetCalcSummaryValueFunc instead")]
[EditorBrowsableAttribute("1")]
protected object CalcSummaryValue(SummaryItem summaryItem, GroupRowInfo groupRow, SummaryMode mode);
    protected virtual Func`2<GroupRowInfo, object> GetCalcSummaryValueFunc(SummaryItem summaryItem, SummaryMode mode);
    protected virtual IEnumerable`1<int> GetRowHandlesForSummary(SummaryItem summaryItem, GroupRowInfo groupRow, SummaryMode mode);
    [ObsoleteAttribute("Use GetCalcSummaryValueFunc instead", "True")]
[EditorBrowsableAttribute("1")]
protected virtual object CalcSummaryValue(SummaryItem summaryItem, SummaryItemType summaryType, bool ignoreNullValues, Type valueType, IEnumerable valuesEnumerable, Func`1<String[]> exceptionAuxInfoGetter, GroupRowInfo groupRow);
    protected virtual Func`3<GroupRowInfo, IEnumerable, object> GetCalcSummaryValueWiredFunc(SummaryItem summaryItem, SummaryItemType summaryType, bool ignoreNullValues, Type valueType);
    protected virtual Func`2<IEnumerable, object> GetCalcSummaryValueFunc(SummaryItemType summaryType, bool ignoreNullValues, Type valueType, IComparer customComparer);
    protected virtual bool IsAssociativeSummary(SummaryItemType summaryType);
    protected virtual bool IsSummaryShortcutable(SummaryItemType summaryType);
    [IteratorStateMachineAttribute("DevExpress.Data.DataController/<FindMatchingGroupSummaries>d__520")]
private IEnumerable`1<SummaryItem> FindMatchingGroupSummaries(SummaryItem summaryItem);
    protected virtual bool ExtendedSummaryEquals(SummaryItem groupSummary, SummaryItem totalSummary);
    private IEnumerable`1<object> GetShortcutSummaryEnumerable(SummaryItem summaryItem, GroupRowInfo groupRow, SummaryMode mode);
    protected virtual object GetSummaryShortcut(GroupRowInfo groupRowInfo, SummaryItem summaryItem, Boolean& isValid);
    protected bool IsSummaryExists(GroupRowInfo groupRow, SummaryItem summaryItem);
    [ObsoleteAttribute("Use GetCalcSummaryInfoAction instead")]
[EditorBrowsableAttribute("1")]
protected void CalcSummaryInfo(SummaryItem summary, GroupRowInfo groupRow);
    protected virtual Action`1<GroupRowInfo> GetCalcSummaryInfoAction(SummaryItem summary);
    [ObsoleteAttribute("Use GetCalcSummaryInfoFunc instead")]
[EditorBrowsableAttribute("1")]
protected object CalcSummaryInfo(GroupRowInfo groupRow, SummaryItem summaryItem, Boolean& validResult, SummaryMode mode);
    protected virtual Func`2<GroupRowInfo, Tuple`2<object, bool>> GetCalcSummaryInfoFunc(SummaryItem summaryItem, SummaryMode mode);
    protected virtual Int32[] SummaryGetSelectedItems(GroupRowInfo groupRow, SummaryItem item, Int32[] selectedRows);
    protected virtual int SummaryGetSelectedCount(GroupRowInfo groupRow, SummaryItem item, Int32[] selectedRows);
    protected virtual object CalcSummaryCountValue(GroupRowInfo groupRow, SummaryItem summaryItem, SummaryMode mode);
    protected virtual void CalcListBasedSummary(SummaryItem summaryItem, CustomSummaryEventArgs e, SummaryMode mode);
    private List`1<object> ProcessListBasedSummary(VisibleListSourceRowCollection list, SummaryItem summaryItem);
    private List`1<object> ProcessListBasedSummaryDupUni(VisibleListSourceRowCollection list, SummaryItem summaryItem);
    protected internal virtual void RestoreGroupExpanded(GroupRowInfo group);
    protected internal virtual bool CompareRowKeys(object key1, object key2);
    [CompilerGeneratedAttribute]
private bool <DoFilterSafe>b__449_0(int ind, bool stubResult);
    [CompilerGeneratedAttribute]
private Action`1<GroupRowInfo> <UpdateGroupSummary>b__511_0(SummaryItem s);
}
public class DevExpress.Data.DataControllerBase : object {
    [CompilerGeneratedAttribute]
private EventHandler ListSourceChanged;
    [CompilerGeneratedAttribute]
private EventHandler VisibleRowCountChanged;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler BeforeListChanged;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    [CompilerGeneratedAttribute]
private EventHandler BeforePopulateColumns;
    private DataControllerNotificationProviders notificationProviders;
    private bool disposed;
    private bool allowNotifications;
    private bool allowDetailDescriptors;
    private bool summariesIgnoreNullValues;
    private bool keepGroupRowsExpandedOnRefresh;
    private int prevVisibleCount;
    private BaseDataControllerHelper helper;
    private DataColumnInfoCollection columns;
    private DataColumnInfoCollection detailColumns;
    private ValueComparer valueComparer;
    private IDataControllerThreadClient threadClient;
    private IList listSource;
    private IDataControllerData dataClient;
    protected IDataControllerSort fSortClient;
    private Type forcedDataRowType;
    private int lockUpdate;
    private int listSourceChanging;
    [CompilerGeneratedAttribute]
private CriteriaCompilerAuxSettings <CriteriaCompilerSettings>k__BackingField;
    private int suspedVCount;
    private ListChangedEventArgs ___PrevChangedEventArgs;
    private int ___PrevCount;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) __ValidateBindingListChangedConsistencyThrownGlobal;
    private bool __ValidateBindingListChangedConsistencyThrownLocal;
    private static int DefaultValidateBindingListChangedConsistencyDiagnosticLevel;
    public static int ValidateBindingListChangedConsistencyDiagnosticLevel;
    [CompilerGeneratedAttribute]
private bool <AllowIEnumerableDetails>k__BackingField;
    public static bool AllowFindNonStringTypesServerMode;
    public static bool CatchRowUpdatedExceptions;
    private bool ignoreNextReset;
    [CompilerGeneratedAttribute]
private bool <ComplexUseLinqDescriptors>k__BackingField;
    public CriteriaCompilerAuxSettings CriteriaCompilerSettings { get; public set; }
    public DataControllerNotificationProviders NotificationProviders { get; public set; }
    public bool AllowPartialGrouping { get; public set; }
    public bool KeepGroupRowsExpandedOnRefresh { get; public set; }
    public Type ForcedDataRowType { get; public set; }
    public bool IsDisposed { get; }
    public bool SummariesIgnoreNullValues { get; public set; }
    public bool AllowNotifications { get; public set; }
    public bool AllowDetailDescriptors { get; public set; }
    protected internal bool IsDetailDescriptorAllow { get; }
    public IList ListSource { get; }
    public IDataControllerData DataClient { get; public set; }
    public IDataControllerData2 DataClient2 { get; }
    public IDataControllerData3 DataClient3 { get; }
    public IDataControllerSort SortClient { get; public set; }
    public DataColumnInfoCollection Columns { get; protected set; }
    public DataColumnInfoCollection DetailColumns { get; }
    public int ListSourceRowCount { get; }
    public IDataControllerThreadClient ThreadClient { get; public set; }
    public int LockUpdate { get; }
    public bool IsUpdateLocked { get; }
    public bool IsReady { get; }
    public bool AlwaysUsePrimitiveDataSource { get; }
    public ValueComparer ValueComparer { get; }
    public bool IsServerMode { get; }
    protected internal IDataSync DataSync { get; }
    public BaseDataControllerHelper Helper { get; }
    protected bool IsListSourceChanging { get; }
    protected int PrevVisibleCount { get; }
    protected internal bool DoGroupRowsProcessingPivotCompatible { get; }
    public bool AllowIEnumerableDetails { get; public set; }
    public bool ComplexUseLinqDescriptors { get; public set; }
    private static DataControllerBase();
    [CompilerGeneratedAttribute]
public void add_ListSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ListSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_VisibleRowCountChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_VisibleRowCountChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforePopulateColumns(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforePopulateColumns(EventHandler value);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
public CriteriaCompilerAuxSettings get_CriteriaCompilerSettings();
    [CompilerGeneratedAttribute]
public void set_CriteriaCompilerSettings(CriteriaCompilerAuxSettings value);
    public void AddCustomFunction(ICustomFunctionOperator function);
    public void AddCustomAggregate(ICustomAggregate aggregate);
    protected virtual void ClearClients();
    public DataControllerNotificationProviders get_NotificationProviders();
    public void set_NotificationProviders(DataControllerNotificationProviders value);
    public DataControllerNotificationProviders GetNotificationProviders();
    public virtual bool get_AllowPartialGrouping();
    public virtual void set_AllowPartialGrouping(bool value);
    protected internal virtual bool UseFirstRowTypeWhenPopulatingColumns(Type rowType);
    public bool get_KeepGroupRowsExpandedOnRefresh();
    public void set_KeepGroupRowsExpandedOnRefresh(bool value);
    public Type get_ForcedDataRowType();
    public void set_ForcedDataRowType(Type value);
    public bool get_IsDisposed();
    public bool get_SummariesIgnoreNullValues();
    public void set_SummariesIgnoreNullValues(bool value);
    public bool get_AllowNotifications();
    public void set_AllowNotifications(bool value);
    public bool get_AllowDetailDescriptors();
    public void set_AllowDetailDescriptors(bool value);
    protected internal virtual bool get_IsDetailDescriptorAllow();
    public IList get_ListSource();
    public IDataControllerData get_DataClient();
    public void set_DataClient(IDataControllerData value);
    public IDataControllerData2 get_DataClient2();
    public IDataControllerData3 get_DataClient3();
    public IDataControllerSort get_SortClient();
    public void set_SortClient(IDataControllerSort value);
    public DataColumnInfoCollection get_Columns();
    protected void set_Columns(DataColumnInfoCollection value);
    public DataColumnInfoCollection get_DetailColumns();
    public bool ContainsColumn(string fieldName);
    public DataColumnInfo FindColumn(string fieldName);
    public int get_ListSourceRowCount();
    public virtual void ValidateExpression(CriteriaOperator op);
    public virtual ExpressionEvaluator CreateExpressionEvaluator(CriteriaOperator criteriaOperator, bool setDataAccess, Exception& e);
    public virtual IEvalRowStub CreateEvalRowStub(CriteriaOperator expression, Exception& ex);
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    public void CancelUpdate();
    protected virtual void EndUpdateCore(bool sortUpdate);
    public void AddThreadClient(IDataControllerThreadClient client);
    public void RemoveThreadClient(IDataControllerThreadClient client);
    public virtual void WaitForAsyncEnd();
    public virtual IDataControllerThreadClient get_ThreadClient();
    public virtual void set_ThreadClient(IDataControllerThreadClient value);
    protected internal virtual PropertyDescriptorCollection GetFilterDescriptorCollection();
    private sealed virtual override object DevExpress.Data.Filtering.Helpers.IEvaluatorDataAccess.GetValue(PropertyDescriptor descriptor, object theObject);
    public int get_LockUpdate();
    public virtual bool get_IsUpdateLocked();
    public virtual bool get_IsReady();
    public virtual bool IsColumnValid(int column);
    public virtual bool IsDetailColumnValid(int column);
    public virtual void RefreshData();
    public void RePopulateColumns();
    public virtual void RePopulateColumns(bool allowRefresh);
    [EditorBrowsableAttribute("1")]
public bool EnsureColumnsPopulated(IReadOnlyCollection`1<DataColumnInfo> dataColumns);
    public virtual void PopulateColumns();
    public void DoRefresh();
    protected virtual void DoRefresh(bool useRowsKeeper);
    public virtual void CollapseDetailRows();
    public virtual bool get_AlwaysUsePrimitiveDataSource();
    public ValueComparer get_ValueComparer();
    public virtual bool IsGroupRowHandle(int controllerRowHandle);
    public virtual bool get_IsServerMode();
    protected virtual void SetListSourceCore(IList value);
    protected virtual void SubscribeEvents();
    protected virtual void UnsubscribeEvents();
    protected internal virtual IDataSync get_DataSync();
    protected virtual void RequestDataSyncInitialize();
    protected virtual void SubscribeDataSync();
    protected virtual void UnsubscribeDataSync();
    protected virtual void SetListSource(IList value);
    public BaseDataControllerHelper get_Helper();
    protected virtual BaseDataControllerHelper CreateHelper();
    protected virtual ValueComparer CreateValueComparer();
    protected virtual void Reset();
    protected virtual void OnListSourceChangeClear();
    protected virtual void OnListSourceChanged();
    protected bool get_IsListSourceChanging();
    protected virtual void RaiseListSourceChanged();
    protected void SuspendVisibleRowCountChanged();
    protected void ResumeVisibleRowCountChanged();
    protected internal virtual void RaiseVisibleRowCountChanged();
    protected int get_PrevVisibleCount();
    protected virtual bool StorePrevVisibleCount(int visibleCount);
    protected virtual void VisualClientNotifyTotalSummary();
    protected internal virtual void VisualClientRequestSynchronization();
    protected internal virtual void VisualClientUpdateLayout();
    protected internal virtual void OnStartNewItemRow();
    protected internal virtual void OnEndNewItemRow();
    protected internal virtual void OnItemDeleting(int listSourceRow);
    protected internal virtual void OnItemDeleted(int listSourceRow);
    protected internal virtual void OnGroupDeleted(GroupRowInfo groupRow);
    protected internal virtual void OnGroupsDeleted(List`1<GroupRowInfo> groups, bool addedToSameGroup);
    protected internal virtual void RaiseOnBindingListChanged(ListChangedEventArgs e);
    protected void RaiseOnListChanged(ListChangedEventArgs e);
    protected virtual void RaiseOnBeforeListChanged(ListChangedEventArgs e);
    protected virtual void OnBindingListChanged(ListChangedEventArgs e);
    protected virtual bool ValidateBindingListChangedConsistencyCanNotify();
    private static string ListChangedEventArgsToString(ListChangedEventArgs ea);
    private void ValidateBindingListChangedConsistency(ListChangedEventArgs e);
    protected void ResetValidateBindingListChangedConsistency(bool isSubscribe);
    internal void RaiseBeforePopulateColumns(EventArgs e);
    protected int GetChangedListSourceRow(ListChangedEventArgs e);
    protected int GetColumnIndex(DataColumnInfo column);
    protected int GetListSourceFromVisibleListSourceRowCollection(VisibleListSourceRowCollection visibleListSourceRowCollection, int controllerRow);
    protected void SetVisibleListSourceCollectionCore(VisibleListSourceRowCollection visibleListSourceRowCollection, Int32[] list, int count);
    protected void ResetSortInfoCollectionCore(DataColumnSortInfoCollection sortInfo);
    public int GetListSourceRowIndex(GroupRowInfoCollection groupInfo, int controllerRow);
    public virtual bool IsControllerRowValid(VisibleListSourceRowCollection visibleListSourceRows, int controllerRow);
    public int GetVisibleListSourceRowCount(VisibleListSourceRowCollection visibleListSourceRows);
    private static int FindFirstSureInvalid(int _firstMayBeValid, int _firstSureInvalid, Func`2<int, bool> testIndexForValid);
    [IteratorStateMachineAttribute("DevExpress.Data.DataControllerBase/<GetGroupsBoundaries>d__189")]
private IEnumerable`1<KeyValuePair`2<int, int>> GetGroupsBoundaries(int handlesCount, Func`2<int, int> handleToSourceIndex, Func`3<int, int, bool> areEquals);
    protected void DoGroupColumn(DataColumnSortInfoCollection sortInfo, GroupRowInfoCollection groupInfo, int controllerRow, int rowCount, GroupRowInfo parentGroup);
    protected internal virtual bool get_DoGroupRowsProcessingPivotCompatible();
    private Func`3<int, int, bool> MakeMergedGroupRowsEqualizerFromSingleColumnsEqualizers(DataColumnSortInfo[] dataColumnSortInfoS, Func`2<DataColumnInfo, Func`3<int, int, bool>> singleColumnEqualizerMaker);
    private Func`3<int, int, bool> GetGroupRowsPivotCompatibleEqualizer(DataColumnInfo dataColumnInfo);
    private Func`3<int, int, bool> GetGroupRowsAreEquals(int level, DataColumnSortInfo columnInfoMono, List`1<Func`3<int, int, bool>> areEqualsCache);
    private void DoGroupColumn(DataColumnSortInfoCollection sortInfo, GroupRowInfoCollection groupInfo, int controllerRow, int rowCount, GroupRowInfo parentGroup, List`1<Func`3<int, int, bool>> areEqualsCache);
    private static DataColumnSortInfo[] ExtractReallyGroupingSortInfos(DataColumnSortInfo colSortInfoMono);
    protected internal virtual int CompareGroupColumnRows(DataColumnSortInfoCollection sortInfo, GroupRowInfoCollection groupInfo, int controllerRow1, int controllerRow2);
    protected internal virtual bool IsEqualGroupValues(object val1, object val2, int listSourceRow1, int listSourceRow2, DataColumnInfo columnInfo);
    public bool IsEqualGroupValues(object val1, object val2);
    protected virtual bool IsEqualNonNullValues(object val1, object val2);
    public virtual void UpdateTotalSummary(List`1<SummaryItem> changedItems, bool selectionChanged);
    public void UpdateTotalSummary();
    public virtual void UpdateGroupSummary(GroupRowInfo groupRow, DataControllerChangedItemCollection changedItems);
    [CompilerGeneratedAttribute]
public bool get_AllowIEnumerableDetails();
    [CompilerGeneratedAttribute]
public void set_AllowIEnumerableDetails(bool value);
    protected internal virtual void MakeGroupRowVisible(GroupRowInfo groupRow);
    protected internal virtual void OnColumnPopulated(DataColumnInfo info);
    protected internal virtual void SubscribeListChanged(INotificationProvider provider, object list);
    protected internal virtual void UnsubscribeListChanged(INotificationProvider provider, object list);
    protected void OnBindingListChanged(object sender, ListChangedEventArgs e);
    protected virtual void CheckInvalidCurrentRow();
    protected internal virtual object GetGroupRowKeyValueInternal(GroupRowInfo group);
    protected internal virtual bool RaiseRowDeleting(int listSourceRowIndex);
    protected internal virtual void RaiseRowDeleted(int controllerRow, int listSourceRowIndex, object row);
    public virtual int GetControllerRow(int listSourceRow);
    [CompilerGeneratedAttribute]
public bool get_ComplexUseLinqDescriptors();
    [CompilerGeneratedAttribute]
public void set_ComplexUseLinqDescriptors(bool value);
    protected internal virtual TypeConverter GetActualTypeConverter(TypeConverter converter, PropertyDescriptor property);
    protected internal virtual bool IsFinishingNewItemRowEdit();
    [CompilerGeneratedAttribute]
private Func`3<int, int, bool> <GetGroupRowsAreEquals>b__195_0(DataColumnInfo columnInfo);
}
public abstract class DevExpress.Data.DataControllerCriteriaCompilerDescriptorBase`1 : CriteriaCompilerDescriptor {
    private Func`1<PropertyDescriptorCollection> PropertyDescriptorsSource;
    private PropertyDescriptorCollection _Props;
    private CriteriaCompilerDescriptor _WorkHorseContext;
    protected PropertyDescriptorCollection Props { get; }
    protected CriteriaCompilerDescriptor WorkHorseContext { get; }
    public Type ObjectType { get; }
    protected DataControllerCriteriaCompilerDescriptorBase`1(DataControllerBase dc);
    protected DataControllerCriteriaCompilerDescriptorBase`1(Func`1<PropertyDescriptorCollection> propertyDescriptorsSource);
    protected PropertyDescriptorCollection get_Props();
    protected CriteriaCompilerDescriptor get_WorkHorseContext();
    public virtual Type get_ObjectType();
    protected abstract virtual Func`2<ActualStubType, int> GetRowIndexFromStub();
    protected abstract virtual Func`2<ActualStubType, object> GetRowFromStub();
    private Expression MakePropertyAccessUnboundCore(Expression baseExpression, UnboundPropertyDescriptor upd);
    protected Func`2<ActualStubType, object> MakeJustValueAccessDisplayTextCore(DisplayTextPropertyDescriptor dtpd);
    private Expression MakePropertyAccessDisplayTextCore(Expression baseExpression, DisplayTextPropertyDescriptor dtpd);
    private Expression MakePropertyAccessVanillaCore(Expression baseExpression, string propertyPath);
    public virtual Expression MakePropertyAccess(Expression baseExpression, string propertyPath);
    public virtual Type ResolvePropertyType(Expression baseExpression, string propertyPath);
    public virtual CriteriaCompilerRefResult DiveIntoCollectionProperty(Expression baseExpression, string collectionPropertyPath);
}
public class DevExpress.Data.DataControllerErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <DataException>k__BackingField;
    public Exception DataException { get; public set; }
    [CompilerGeneratedAttribute]
public Exception get_DataException();
    [CompilerGeneratedAttribute]
public void set_DataException(Exception value);
}
public class DevExpress.Data.DataControllerFilterHelper : FilterHelper {
    public VisibleListSourceRowCollection VisibleListSourceRows { get; }
    public DataController Controller { get; }
    public DataControllerFilterHelper(DataController controller);
    public virtual VisibleListSourceRowCollection get_VisibleListSourceRows();
    public DataController get_Controller();
}
public class DevExpress.Data.DataControllerGroupRowInfoCollection : GroupRowInfoCollection {
    protected DataColumnSortInfoCollection SortInfo { get; }
    public VisibleListSourceRowCollection VisibleListSourceRows { get; }
    protected DataController Controller { get; }
    public DataControllerGroupRowInfoCollection(DataController controller);
    protected virtual DataColumnSortInfoCollection get_SortInfo();
    public virtual VisibleListSourceRowCollection get_VisibleListSourceRows();
    protected DataController get_Controller();
}
public class DevExpress.Data.DataControllerSortCellEventArgs : DataControllerSortRowEventArgs {
    internal DataColumnInfo sortColumn;
    internal object value1;
    internal object value2;
    public DataColumnInfo SortColumn { get; }
    public object Value1 { get; }
    public object Value2 { get; }
    public DataControllerSortCellEventArgs(int listSourceRow1, int listSourceRow2, object value1, object value2, DataColumnInfo sortColumn);
    public DataColumnInfo get_SortColumn();
    public object get_Value1();
    public object get_Value2();
    internal void Setup(int listSourceRow1, int listSourceRow2, object value1, object value2, DataColumnInfo sortColumn);
}
public class DevExpress.Data.DataControllerSortCellEventHandler : MulticastDelegate {
    public DataControllerSortCellEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataControllerSortCellEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataControllerSortCellEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.DataControllerSortRowEventArgs : EventArgs {
    private int listSourceRow1;
    private int listSourceRow2;
    private int result;
    private bool handled;
    public int ListSourceRow1 { get; }
    public int ListSourceRow2 { get; }
    public int Result { get; public set; }
    public bool Handled { get; public set; }
    public DataControllerSortRowEventArgs(int listSourceRow1, int listSourceRow2);
    public int get_ListSourceRow1();
    public int get_ListSourceRow2();
    public int get_Result();
    public void set_Result(int value);
    public bool get_Handled();
    public void set_Handled(bool value);
    internal void Setup(int listSourceRow1, int listSourceRow2);
}
public class DevExpress.Data.DataControllerSortRowEventHandler : MulticastDelegate {
    public DataControllerSortRowEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataControllerSortRowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataControllerSortRowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.DataControllerVisibleIndexCollection : VisibleIndexCollection {
    protected DataController Controller { get; }
    protected internal GroupRowInfoCollection GroupInfo { get; }
    public DataControllerVisibleIndexCollection(DataController controller);
    protected DataController get_Controller();
    protected internal virtual GroupRowInfoCollection get_GroupInfo();
}
public static class DevExpress.Data.Db.AccessFormatterHelper : object {
    private static string NullString;
    public static string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public static string FormatColumn(string columnName);
    public static string FormatColumn(string columnName, string tableAlias);
    public static string FormatConstraint(string constraintName);
    public static string FormatDelete(string tableName, string whereClause);
    public static string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    private static string FnPadRight(String[] operands);
    private static string FnPadLeft(String[] operands);
    private static string FnCharIndex(String[] operands);
    private static string FnSubstring(String[] operands);
    private static string FnRemove(String[] operands);
    private static string FnConcat(String[] operands);
    public static string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private static string FnUtcNow(ProcessParameter processParameter);
    public static string FormatInsert(string tableName, string fields, string values);
    public static string FormatInsertDefaultValues(string tableName);
    public static string FormatTable(string schema, string tableName);
    public static string FormatTable(string schema, string tableName, string tableAlias);
    public static string FormatUpdate(string tableName, string sets, string whereClause);
    public static string FormatConstant(object value);
    private static string AsString(object value);
    private static string FixNonFixedText(string toFix);
}
public static class DevExpress.Data.Db.BaseFormatterHelper : object {
    public static string TheIifFunctionOperatorRequiresThreeOrMoreArgumentMessage;
    public static string DefaultFormatFunction(FunctionOperatorType operatorType, String[] operands);
    public static string DefaultFormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public static string DefaultFormatUnary(UnaryOperatorType operatorType, string operand);
}
public static class DevExpress.Data.Db.DataSetFormatterHelper : object {
    public static string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public static string FormatColumn(string columnName);
    public static string FormatColumn(string columnName, string tableAlias);
    public static string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public static string FormatTable(string schema, string tableName);
    public static string FormatTable(string schema, string tableName, string tableAlias);
    public static string TrimForLike(string str);
    public static string EscapeStringForLike(string str);
}
public static class DevExpress.Data.Db.DynamicLinqFormatterHelper : object {
    public static string FormatUnary(UnaryOperatorType operatorType, string operand);
    public static string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public static string FormatColumn(string columnName);
    public static string FormatColumn(string columnName, string tableAlias);
    public static string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public static string FormatTable(string schema, string tableName);
    public static string FormatTable(string schema, string tableName, string tableAlias);
}
public static class DevExpress.Data.Db.MsSqlFormatterHelper : object {
    public static string NullString;
    private static Char[] achtungChars;
    private static MsSqlFormatterHelper();
    public static string FormatColumn(string columnName);
    public static string FormatColumn(string columnName, string tableAlias);
    public static string FormatInsertDefaultValues(string tableName);
    public static string FormatInsert(string tableName, string fields, string values);
    public static string FormatUpdate(string tableName, string sets, string whereClause);
    public static string FormatDelete(string tableName, string whereClause);
    public static string FormatFunction(FunctionOperatorType operatorType, MSSqlServerVersion sqlServerVersion, String[] operands);
    private static string GetVarCharMaxTypeName(MSSqlServerVersion sqlServerVersion);
    public static string FormatConstant(object value, MSSqlServerVersion sqlServerVersion);
    private static string FormatFunctionForDateOnlyOrTimeOnly(ProcessParameter processParameter, FunctionOperatorType operatorType, MSSqlServerVersion sqlServerVersion, Object[] operands);
    public static string FormatFunction(ProcessParameter processParameter, Func`2<CriteriaOperator, Type> resolveOperandType, FunctionOperatorType operatorType, MSSqlServerVersion sqlServerVersion, Object[] operands);
    public static string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, MSSqlServerVersion sqlServerVersion, Object[] operands);
    private static string AsString(object value);
    private static string FixNonFixedText(string toFix);
    private static string FnConcat(String[] operands);
    public static string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public static string FormatConstraint(string constraintName);
}
public static class DevExpress.Data.Db.OracleFormatterHelper : object {
    private static string NullString;
    private static Char[] achtungChars;
    private static OracleFormatterHelper();
    public static string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public static string FormatColumn(string columnName);
    public static string FormatColumn(string columnName, string tableAlias);
    public static string FormatConstraint(string constraintName);
    public static string FormatDelete(string tableName, string whereClause);
    public static string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    private static string FormatFunctionForDateOnlyOrTimeOnly(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private static string FormatDateAddForTimeOnly(string timeOperand, string numberOperand, long partOfDay);
    public static string FormatFunction(ProcessParameter processParameter, Func`2<CriteriaOperator, Type> resolveOperandType, FunctionOperatorType operatorType, Object[] operands);
    public static string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    public static string FormatInsert(string tableName, string fields, string values);
    public static string FormatInsertDefaultValues(string tableName);
    public static string FormatOrder(string sortProperty, SortingDirection direction);
    public static string FormatConstant(object value);
    private static string FixNonFixedText(string toFix);
    private static string AsString(object value);
}
public class DevExpress.Data.Design.ColumnSortOrderTypeConverter : EnumTypeConverter {
}
public class DevExpress.Data.Design.DataSourceConverter : ReferenceConverter {
    private ReferenceConverter listConverter;
    public static bool IsListBindable(object obj);
    public static bool IsListBindable(Type type);
    private static List`1<IComponent> ConvertToActualDataSources(ICollection lists, IDataContainerService svc, IDataContainerBase dataContainer);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public interface DevExpress.Data.Design.IDataContainerService {
    public abstract virtual bool AreAppropriate(IDataContainerBase dataContainer, object dataSource);
}
public interface DevExpress.Data.Design.IDataSourceCollectorService {
    public abstract virtual Object[] GetDataSources();
}
public class DevExpress.Data.Design.SummaryItemTypeConverter : EnumTypeConverter {
}
public class DevExpress.Data.DetailDataColumnInfo : DataColumnInfo {
    private AnnotationAttributes columnAnnotationAttributes;
    protected AnnotationAttributes ColumnAnnotationAttributes { get; }
    protected internal bool AutoGenerateField { get; }
    public DetailDataColumnInfo(PropertyDescriptor descriptor, bool autoSplitCasing);
    protected AnnotationAttributes get_ColumnAnnotationAttributes();
    protected internal bool get_AutoGenerateField();
    protected virtual string GetCaption();
}
public class DevExpress.Data.Details.DetailInfo : object {
    private MasterRowInfo masterRow;
    private IDisposable detailOwner;
    private IList detailList;
    private int relationIndex;
    public MasterRowInfo MasterRow { get; }
    public IDisposable DetailOwner { get; public set; }
    public IList DetailList { get; }
    public int RelationIndex { get; }
    public DetailInfo(MasterRowInfo masterRow, IList detailList, int relationIndex);
    public MasterRowInfo get_MasterRow();
    public IDisposable get_DetailOwner();
    public void set_DetailOwner(IDisposable value);
    public IList get_DetailList();
    public int get_RelationIndex();
    public virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Details.MasterRowInfo : CollectionBase {
    private int parentListSourceRow;
    private DataController parentController;
    private object parentRowKey;
    public object ParentRowKey { get; }
    public DataController ParentController { get; }
    public int ParentControllerRow { get; }
    public object ParentRow { get; }
    public int ParentListSourceRow { get; }
    public DetailInfo Item { get; }
    public MasterRowInfo(DataController parentController, int parentListSourceRow, object parentRowKey);
    public DetailInfo CreateDetail(IList list, int relationIndex);
    public object get_ParentRowKey();
    public DataController get_ParentController();
    public int get_ParentControllerRow();
    public object get_ParentRow();
    public int get_ParentListSourceRow();
    protected internal void SetParentListSourceRow(int value);
    public void MakeDetailVisible(int relationIndex);
    public virtual void MakeDetailVisible(DetailInfo info);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClear();
    public DetailInfo get_Item(int index);
    public void Remove(DetailInfo info);
    public int IndexOf(DetailInfo info);
    public DetailInfo FindDetail(object detailOwner);
    public DetailInfo FindDetail(int relationIndex);
    private void MoveToUp(DetailInfo info);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Details.MasterRowInfoCollection : CollectionBase {
    private List`1<MasterRowInfo> fastIndex;
    private DataController controller;
    private bool fastIndexDirty;
    protected DataController Controller { get; }
    public MasterRowInfo Item { get; }
    public MasterRowInfoCollection(DataController controller);
    protected DataController get_Controller();
    public MasterRowInfo get_Item(int index);
    public MasterRowInfo CreateRow(DataController parentController, int parentListSourceRow, object parentRowKey);
    public MasterRowInfo GetByCachedIndex(int listSourceRow);
    private void SetFastIndexDirty();
    private void RebuildFastIndex();
    public virtual void Remove(MasterRowInfo row);
    public virtual MasterRowInfo Find(int listSourceRow);
    public MasterRowInfo FindByKey(object rowKey);
    public DetailInfo FindOwner(object detailOwner);
    private void RenumberIndexes(int listSourceRow, bool increment);
    protected internal void OnItemMoved(int oldListSourceRow, int newListSourceRow);
    protected internal void OnItemAdded(int listSourceRow);
    protected internal void OnItemDeleted(int listSourceRow, bool filterChange);
    private sealed virtual override int DevExpress.Data.Helpers.IIndexRenumber.GetCount();
    private sealed virtual override int DevExpress.Data.Helpers.IIndexRenumber.GetValue(int pos);
    private sealed virtual override void DevExpress.Data.Helpers.IIndexRenumber.SetValue(int pos, int val);
}
public enum DevExpress.Data.Diagnostics.AsyncDownloadDiagnosticsLevel : Enum {
    public int value__;
    public static AsyncDownloadDiagnosticsLevel Default;
    public static AsyncDownloadDiagnosticsLevel Trace;
    public static AsyncDownloadDiagnosticsLevel Throw;
    public static AsyncDownloadDiagnosticsLevel Disable;
}
public class DevExpress.Data.Diagnostics.AsyncDownloadTraceLevelResolver : MulticastDelegate {
    public AsyncDownloadTraceLevelResolver(object object, IntPtr method);
    public virtual AsyncDownloadDiagnosticsLevel Invoke(Uri uri, AsyncDownloadDiagnosticsLevel traceLevel);
    public virtual IAsyncResult BeginInvoke(Uri uri, AsyncDownloadDiagnosticsLevel traceLevel, AsyncCallback callback, object object);
    public virtual AsyncDownloadDiagnosticsLevel EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Diagnostics.AsyncDownloadTrustedContext : object {
    private Nullable`1<AsyncDownloadDiagnosticsLevel> initialDiagnosticsLevel;
    private AsyncDownloadTraceLevelResolver initialResolver;
    private HashSet`1<string> uriStrings;
    private HashSet`1<string> scopeUriStrings;
    internal AsyncDownloadTrustedContext(Action`1<AsyncDownloadTrustedContext> setup);
    private sealed virtual override void System.IDisposable.Dispose();
    public AsyncDownloadTrustedContext Trusted(Uri uri);
    internal void AddScope(string uriString);
    internal void ResetScope(string uriString);
    internal AsyncDownloadDiagnosticsLevel Resolve(Uri uri, AsyncDownloadDiagnosticsLevel traceLevel);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Diagnostics.EnvironmentAllowedContext : object {
    private Nullable`1<EnvironmentDiagnosticsLevel> initialDiagnosticsLevel;
    private EnvironmentTraceLevelResolver initialResolver;
    private ConcurrentDictionary`2<EnvironmentAllowedData, bool> allowed;
    internal EnvironmentAllowedContext(Action`1<EnvironmentAllowedContext> setup);
    private sealed virtual override void System.IDisposable.Dispose();
    public EnvironmentAllowedContext Allowed(EnvironmentOperation operation);
    public EnvironmentAllowedContext Allowed(SpecialFolder folder);
    internal EnvironmentDiagnosticsLevel Resolve(EnvironmentOperation operation, Nullable`1<SpecialFolder> folder, EnvironmentDiagnosticsLevel traceLevel);
}
public enum DevExpress.Data.Diagnostics.EnvironmentDiagnosticsLevel : Enum {
    public int value__;
    public static EnvironmentDiagnosticsLevel Default;
    public static EnvironmentDiagnosticsLevel Trace;
    public static EnvironmentDiagnosticsLevel Throw;
    public static EnvironmentDiagnosticsLevel Disable;
}
public class DevExpress.Data.Diagnostics.EnvironmentTraceLevelResolver : MulticastDelegate {
    public EnvironmentTraceLevelResolver(object object, IntPtr method);
    public virtual EnvironmentDiagnosticsLevel Invoke(EnvironmentOperation operation, Nullable`1<SpecialFolder> folder, EnvironmentDiagnosticsLevel traceLevel);
    public virtual IAsyncResult BeginInvoke(EnvironmentOperation operation, Nullable`1<SpecialFolder> folder, EnvironmentDiagnosticsLevel traceLevel, AsyncCallback callback, object object);
    public virtual EnvironmentDiagnosticsLevel EndInvoke(IAsyncResult result);
}
public enum DevExpress.Data.Diagnostics.XtraSerializationSecurityDiagnosticsLevel : Enum {
    public int value__;
    public static XtraSerializationSecurityDiagnosticsLevel Default;
    public static XtraSerializationSecurityDiagnosticsLevel Trace;
    public static XtraSerializationSecurityDiagnosticsLevel Throw;
    public static XtraSerializationSecurityDiagnosticsLevel Disable;
}
public class DevExpress.Data.Diagnostics.XtraSerializationSecurityTraceLevelResolver : MulticastDelegate {
    public XtraSerializationSecurityTraceLevelResolver(object object, IntPtr method);
    public virtual XtraSerializationSecurityDiagnosticsLevel Invoke(string assembly, string type, XtraSerializationSecurityDiagnosticsLevel traceLevel);
    public virtual IAsyncResult BeginInvoke(string assembly, string type, XtraSerializationSecurityDiagnosticsLevel traceLevel, AsyncCallback callback, object object);
    public virtual XtraSerializationSecurityDiagnosticsLevel EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Diagnostics.XtraSerializationTrustedContext : object {
    private Nullable`1<XtraSerializationSecurityDiagnosticsLevel> initialDiagnosticsLevel;
    private XtraSerializationSecurityTraceLevelResolver initialResolver;
    private ConcurrentDictionary`2<string, bool> assemblies;
    private ConcurrentDictionary`2<string, bool> types;
    private ConcurrentDictionary`2<string, bool> typesFromAssemblies;
    private ConcurrentDictionary`2<string, bool> scopeTypes;
    internal XtraSerializationTrustedContext(Action`1<XtraSerializationTrustedContext> setup);
    private sealed virtual override void System.IDisposable.Dispose();
    public XtraSerializationTrustedContext Trusted(Assembly assembly);
    public XtraSerializationTrustedContext Trusted(Type type);
    [EditorBrowsableAttribute("1")]
public XtraSerializationTrustedContext TrustedAssembly(string assembly);
    public XtraSerializationTrustedContext TrustedType(string assembly, string type);
    [EditorBrowsableAttribute("1")]
public XtraSerializationTrustedContext TrustedType(string type);
    [EditorBrowsableAttribute("1")]
public void Reset(Type type);
    [EditorBrowsableAttribute("1")]
public void Reset(Assembly assembly);
    internal void AddScope(string qualifiedTypeName);
    internal bool ResetScope(string qualifiedTypeName);
    internal XtraSerializationSecurityDiagnosticsLevel Resolve(string assembly, string type, XtraSerializationSecurityDiagnosticsLevel traceLevel);
}
public static class DevExpress.Data.Diagram.Core.DiagramNotify : object {
    public static void RaiseCanExecuteChanged(object obj, Expression`1<Action> expression);
}
public class DevExpress.Data.DisplayTextHighlightRange : ValueType {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Start { get; private set; }
    public int Length { get; private set; }
    public DisplayTextHighlightRange(int start, int length);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    internal void SetStart(int value);
    internal void SetLength(int value);
}
public class DevExpress.Data.Entity.ConnectionStringInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunTimeConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    public string Name { get; public set; }
    public string RunTimeConnectionString { get; public set; }
    public DataConnectionLocation Location { get; }
    public string ProviderName { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RunTimeConnectionString();
    [CompilerGeneratedAttribute]
public void set_RunTimeConnectionString(string value);
    public sealed virtual DataConnectionLocation get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
}
public enum DevExpress.Data.Entity.DataConnectionLocation : Enum {
    public int value__;
    public static DataConnectionLocation None;
    public static DataConnectionLocation ServerExplorer;
    public static DataConnectionLocation SettingsFile;
    public static DataConnectionLocation Both;
}
public interface DevExpress.Data.Entity.IConnectionConfigProvider {
    public abstract virtual string GetConnectionConfigPath();
}
public interface DevExpress.Data.Entity.IConnectionStringInfo {
    public string Name { get; }
    public string RunTimeConnectionString { get; }
    public DataConnectionLocation Location { get; }
    public string ProviderName { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_RunTimeConnectionString();
    public abstract virtual DataConnectionLocation get_Location();
    public abstract virtual string get_ProviderName();
}
public interface DevExpress.Data.Entity.IConnectionStringsProvider {
    public abstract virtual IConnectionStringInfo[] GetConnections();
    public abstract virtual IConnectionStringInfo[] GetConfigFileConnections();
    public abstract virtual IConnectionStringInfo GetConnectionStringInfo(string connectionStringName);
    public abstract virtual string GetConnectionString(string connectionStringName);
}
public interface DevExpress.Data.Entity.ICriteriaToEFExpressionConverter {
    public abstract virtual bool IsInMemory();
    public abstract virtual bool IsTimeOnlyRoundingSupported();
}
public interface DevExpress.Data.Entity.IEFContextProvider {
    public abstract virtual object GetContext(string connectionName, Type contextType);
}
public static class DevExpress.Data.Entity.TypesFilterHelper : object {
    private static String[] ExcludedAssemblyPrefixes;
    private static String[] MustIncludeAssemblyPrefixes;
    private static TypesFilterHelper();
    public static bool ShouldIncludeTypesFromAssembly(string assemblyName);
}
public enum DevExpress.Data.ExceptionAction : Enum {
    public int value__;
    public static ExceptionAction CancelAction;
    public static ExceptionAction RetryAction;
}
public enum DevExpress.Data.Export.ExportSparklineType : Enum {
    public int value__;
    public static ExportSparklineType Line;
    public static ExportSparklineType Column;
    public static ExportSparklineType WinLoss;
}
public interface DevExpress.Data.Export.IAreaSparklineInfo {
    public byte AreaOpacity { get; }
    public abstract virtual byte get_AreaOpacity();
}
public interface DevExpress.Data.Export.IBarSparklineInfo {
    public int BarDistance { get; }
    public abstract virtual int get_BarDistance();
}
public interface DevExpress.Data.Export.ILineSparklineAdditionalInfo {
    public int MarkerSize { get; }
    public int MinPointMarkerSize { get; }
    public int EndPointMarkerSize { get; }
    public int MaxPointMarkerSize { get; }
    public int NegativePointMarkerSize { get; }
    public int StartPointMarkerSize { get; }
    public bool EnableAntialiasing { get; }
    public abstract virtual int get_MarkerSize();
    public abstract virtual int get_MinPointMarkerSize();
    public abstract virtual int get_EndPointMarkerSize();
    public abstract virtual int get_MaxPointMarkerSize();
    public abstract virtual int get_NegativePointMarkerSize();
    public abstract virtual int get_StartPointMarkerSize();
    public abstract virtual bool get_EnableAntialiasing();
}
public interface DevExpress.Data.Export.ISparklineInfo {
    public ExportSparklineType SparklineType { get; }
    public Color ColorSeries { get; }
    public Color ColorNegative { get; }
    public Color ColorMarker { get; }
    public Color ColorFirst { get; }
    public Color ColorLast { get; }
    public Color ColorHigh { get; }
    public Color ColorLow { get; }
    public double LineWeight { get; }
    public bool HighlightNegative { get; }
    public bool HighlightFirst { get; }
    public bool HighlightLast { get; }
    public bool HighlightHighest { get; }
    public bool HighlightLowest { get; }
    public bool DisplayMarkers { get; }
    public bool SpecificSparklineType { get; }
    public abstract virtual ExportSparklineType get_SparklineType();
    public abstract virtual Color get_ColorSeries();
    public abstract virtual Color get_ColorNegative();
    public abstract virtual Color get_ColorMarker();
    public abstract virtual Color get_ColorFirst();
    public abstract virtual Color get_ColorLast();
    public abstract virtual Color get_ColorHigh();
    public abstract virtual Color get_ColorLow();
    public abstract virtual double get_LineWeight();
    public abstract virtual bool get_HighlightNegative();
    public abstract virtual bool get_HighlightFirst();
    public abstract virtual bool get_HighlightLast();
    public abstract virtual bool get_HighlightHighest();
    public abstract virtual bool get_HighlightLowest();
    public abstract virtual bool get_DisplayMarkers();
    public abstract virtual bool get_SpecificSparklineType();
}
public interface DevExpress.Data.Export.ISparklineInfoContainer {
    public ISparklineInfo SparklineInfo { get; }
    public abstract virtual ISparklineInfo get_SparklineInfo();
}
public class DevExpress.Data.Export.MsoCrc32Compute : object {
    private static UInt32[] crcCache;
    private UInt32 crcValue;
    public int CrcValue { get; public set; }
    private static MsoCrc32Compute();
    public int get_CrcValue();
    public void set_CrcValue(int value);
    public void Add(byte data);
    public void Add(Byte[] data);
    public void Add(Byte[] data, int start, int count);
    public void Add(short data);
    public void Add(int data);
    private void AddCore(Byte[] data);
    private void AddCore(Byte[] data, int start, int count);
}
internal class DevExpress.Data.ExpressionEditor.ConstantsClickHelper : ItemClickHelper {
    public ConstantsClickHelper(IExpressionEditor editor);
    protected virtual void FillItemsTable();
}
public abstract class DevExpress.Data.ExpressionEditor.ExpressionEditorLogic : object {
    protected IExpressionEditor editor;
    protected object contextInstance;
    private ItemClickHelper itemClickHelper;
    private FunctionEditorCategory availableCategories;
    protected IMemoEdit ExpressionMemoEdit { get; }
    private ISelector ListOfInputTypes { get; }
    private ISelector ListOfInputParameters { get; }
    private ISelector FunctionsTypes { get; }
    internal FunctionEditorCategory AvailableCategories { get; }
    protected ExpressionEditorLogic(IExpressionEditor editor, object contextInstance);
    private static string GetFunctionType(IExpressionEditor editor, string functionType);
    protected IMemoEdit get_ExpressionMemoEdit();
    private ISelector get_ListOfInputTypes();
    private ISelector get_ListOfInputParameters();
    private ISelector get_FunctionsTypes();
    internal FunctionEditorCategory get_AvailableCategories();
    public void Initialize();
    public string GetExpression();
    public void ResetMemoText();
    public void OnInputTypeChanged();
    public void OnFunctionTypeChanged();
    public void OnInputParametersChanged();
    public bool CanCloseWithOKResult();
    public void OnLoad();
    public void OnInsertInputParameter();
    public void OnWrapExpression();
    public void OnInsertOperation(string operation);
    protected internal abstract virtual void FillParametersTable(Dictionary`2<string, string> itemsTable);
    protected internal abstract virtual void FillFieldsTable(Dictionary`2<string, string> itemsTable);
    protected abstract virtual Object[] GetListOfInputTypesObjects();
    protected abstract virtual string GetExpressionMemoEditText();
    protected virtual bool ValidateExpression();
    protected virtual void ValidateExpressionEx(string expression);
    protected virtual void ShowError(Exception exception);
    public virtual string ConvertToFields(string expression);
    protected virtual string ConvertToCaption(string expression);
    public void InsertTextInExpressionMemo(string text);
    protected virtual ItemClickHelper GetItemClickHelper(string selectedItemText, IExpressionEditor editor);
    protected virtual void RefreshInputParameters();
    private FunctionTypeItem[] GetFunctionTypes();
    protected virtual IList`1<FunctionEditorCategory> GetFunctionsTypeNames();
}
public class DevExpress.Data.ExpressionEditor.ExpressionEditorLogicEx : ExpressionEditorLogic {
    private IDataColumnInfo ColumnInfo { get; }
    public ExpressionEditorLogicEx(IExpressionEditor editor, IDataColumnInfo columnInfo);
    private IDataColumnInfo get_ColumnInfo();
    protected virtual Object[] GetListOfInputTypesObjects();
    protected virtual string GetExpressionMemoEditText();
    protected virtual string ConvertToCaption(string expression);
    protected virtual void ValidateExpressionEx(string expression);
    public virtual string ConvertToFields(string expression);
    protected internal virtual void FillFieldsTable(Dictionary`2<string, string> itemsTable);
    private static string EscapeFieldName(string fieldName);
    protected internal virtual void FillParametersTable(Dictionary`2<string, string> itemsTable);
}
internal class DevExpress.Data.ExpressionEditor.FieldsClickHelper : ItemClickHelper {
    public ColumnSortOrder ParametersSortOrder { get; }
    public FieldsClickHelper(IExpressionEditor editor);
    public virtual ColumnSortOrder get_ParametersSortOrder();
    protected virtual void FillItemsTable();
}
public enum DevExpress.Data.ExpressionEditor.FunctionEditorCategory : Enum {
    public int value__;
    public static FunctionEditorCategory DateTime;
    public static FunctionEditorCategory Logical;
    public static FunctionEditorCategory Math;
    public static FunctionEditorCategory String;
    public static FunctionEditorCategory Aggregate;
    public static FunctionEditorCategory All;
}
public interface DevExpress.Data.ExpressionEditor.IExpressionEditor {
    public ExpressionEditorLogic EditorLogic { get; }
    public IMemoEdit ExpressionMemoEdit { get; }
    public ISelector ListOfInputTypes { get; }
    public ISelector ListOfInputParameters { get; }
    public ISelector FunctionsTypes { get; }
    public string FilterCriteriaInvalidExpressionMessage { get; }
    public string FilterCriteriaInvalidExpressionExMessage { get; }
    public abstract virtual string GetResourceString(string stringId);
    public abstract virtual void ShowFunctionsTypes();
    public abstract virtual void HideFunctionsTypes();
    public abstract virtual ExpressionEditorLogic get_EditorLogic();
    public abstract virtual IMemoEdit get_ExpressionMemoEdit();
    public abstract virtual ISelector get_ListOfInputTypes();
    public abstract virtual ISelector get_ListOfInputParameters();
    public abstract virtual ISelector get_FunctionsTypes();
    public abstract virtual string get_FilterCriteriaInvalidExpressionMessage();
    public abstract virtual string get_FilterCriteriaInvalidExpressionExMessage();
    public abstract virtual void ShowError(string error);
    public abstract virtual string GetFunctionTypeStringID(string functionType);
    public abstract virtual void SetDescription(string description);
}
public interface DevExpress.Data.ExpressionEditor.IMemoEdit {
    public int SelectionStart { get; public set; }
    public int SelectionLength { get; public set; }
    public string Text { get; public set; }
    public string SelectedText { get; }
    public abstract virtual int get_SelectionStart();
    public abstract virtual void set_SelectionStart(int value);
    public abstract virtual int get_SelectionLength();
    public abstract virtual void set_SelectionLength(int value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual string get_SelectedText();
    public abstract virtual int GetLineLength(int lineIndex);
    public abstract virtual void Paste(string text);
    public abstract virtual void Focus();
}
public interface DevExpress.Data.ExpressionEditor.ISelector {
    public int ItemCount { get; }
    public object SelectedItem { get; }
    public int SelectedIndex { get; public set; }
    public abstract virtual void SetItemsSource(Object[] items, ColumnSortOrder sortOrder);
    public abstract virtual int get_ItemCount();
    public abstract virtual object get_SelectedItem();
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
}
public class DevExpress.Data.ExpressionEditor.ItemClickHelper : object {
    protected IExpressionEditor editor;
    protected Dictionary`2<string, string> itemsTable;
    public ColumnSortOrder ParametersSortOrder { get; }
    public ItemClickHelper(IExpressionEditor editor);
    public static ItemClickHelper Instance(string clickedText, IExpressionEditor editor);
    public virtual ColumnSortOrder get_ParametersSortOrder();
    public void FillItems();
    protected virtual void FillItemsTable();
    protected virtual void AddItemTable(string key, string description, int offset);
    public Object[] GetItems();
    public virtual int GetCursorOffset(string item);
    public string GetDescription(string name);
    public virtual string GetSpecificItem(string textItem);
}
internal class DevExpress.Data.ExpressionEditor.OperatorsClickHelper : ItemClickHelper {
    public OperatorsClickHelper(IExpressionEditor editor);
    protected virtual void FillItemsTable();
}
internal class DevExpress.Data.ExpressionEditor.ParametersClickHelper : ItemClickHelper {
    public ParametersClickHelper(IExpressionEditor editor);
    protected virtual void FillItemsTable();
}
public class DevExpress.Data.ExpressionEditor.StandardOperations : object {
    public static string Plus;
    public static string Minus;
    public static string Multiply;
    public static string Divide;
    public static string Modulo;
    public static string Equal;
    public static string NotEqual;
    public static string Less;
    public static string LessOrEqual;
    public static string LargerOrEqual;
    public static string Larger;
    public static string And;
    public static string Or;
    public static string Not;
}
public static class DevExpress.Data.ExpressionEditor.UnboundExpressionConvertHelper : object {
    private static string ConvertString(IDataColumnInfo columnInfo, string expression, bool fromEditor);
    public static string ConvertToCaption(IDataColumnInfo columnInfo, string expression);
    public static string ConvertToFields(IDataColumnInfo columnInfo, string expression);
    private static CriteriaOperator ConvertCriteria(IDataColumnInfo columnInfo, string expression, bool fromEditor);
    public static void ValidateExpressionFields(IDataColumnInfo columnInfo, string expression);
}
internal class DevExpress.Data.ExpressionEditor.VariablesClickHelper : ItemClickHelper {
    public VariablesClickHelper(IExpressionEditor editor);
    protected virtual void FillItemsTable();
}
[ExtensionAttribute]
public static class DevExpress.Data.Extensions.IListExtensions : object {
    [ExtensionAttribute]
public static int FindIndex(IList`1<T> list, Predicate`1<T> predicate);
    [ExtensionAttribute]
public static bool IsValidIndex(IList`1<T> array, int index);
    [ExtensionAttribute]
public static int GetValidIndex(IList`1<T> array, int index);
    [ExtensionAttribute]
public static bool TryGetValue(IList`1<T> array, int index, T& value);
}
public enum DevExpress.Data.Filtering.Aggregate : Enum {
    public int value__;
    public static Aggregate Exists;
    public static Aggregate Count;
    public static Aggregate Max;
    public static Aggregate Min;
    public static Aggregate Avg;
    public static Aggregate Sum;
    public static Aggregate Single;
    public static Aggregate Custom;
}
[XmlIncludeAttribute("DevExpress.Data.Filtering.ContainsOperator")]
public class DevExpress.Data.Filtering.AggregateOperand : CriteriaOperator {
    private CriteriaOperator condition;
    private OperandProperty property;
    private CriteriaOperator aggregatedExpression;
    private Aggregate type;
    private string customAggregateName;
    private CriteriaOperatorCollection customAggregateOperands;
    public CriteriaOperator Condition { get; public set; }
    public OperandProperty CollectionProperty { get; public set; }
    public CriteriaOperator AggregatedExpression { get; public set; }
    public Aggregate AggregateType { get; public set; }
    public string CustomAggregateName { get; public set; }
    public CriteriaOperatorCollection CustomAggregateOperands { get; }
    public bool IsTopLevel { get; }
    private CriteriaOperator DevExpress.Data.Filtering.Helpers.IAggregateOperand.Condition { get; private set; }
    private object DevExpress.Data.Filtering.Helpers.IAggregateOperand.AggregationObject { get; private set; }
    private CriteriaOperator DevExpress.Data.Filtering.Helpers.IAggregateOperand.AggregatedExpression { get; private set; }
    private Aggregate DevExpress.Data.Filtering.Helpers.IAggregateOperand.AggregateType { get; private set; }
    public AggregateOperand(OperandProperty collectionProperty, IEnumerable`1<CriteriaOperator> aggregatedExpressions, string customAggregateName, CriteriaOperator condition);
    public AggregateOperand(OperandProperty collectionProperty, CriteriaOperator aggregatedExpression, Aggregate type, CriteriaOperator condition);
    public AggregateOperand(string collectionProperty, string aggregatedExpression, Aggregate type, CriteriaOperator condition);
    public AggregateOperand(string collectionProperty, Aggregate type, CriteriaOperator condition);
    public AggregateOperand(string collectionProperty, string aggregatedExpression, Aggregate type);
    public AggregateOperand(string collectionProperty, Aggregate type);
    public AggregateOperand(string collectionProperty, string customAggregateName);
    public AggregateOperand(string collectionProperty, string customAggregateName, CriteriaOperator condition);
    private static OperandProperty GetPropertyByName(string propertyName);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public static AggregateOperand TopLevel(Aggregate type, CriteriaOperator aggregatedExpression);
    public static AggregateOperand TopLevel(string customAggregateName, IEnumerable`1<CriteriaOperator> aggregatedExpressions);
    public CriteriaOperator get_Condition();
    public void set_Condition(CriteriaOperator value);
    public OperandProperty get_CollectionProperty();
    public void set_CollectionProperty(OperandProperty value);
    public CriteriaOperator get_AggregatedExpression();
    public void set_AggregatedExpression(CriteriaOperator value);
    public Aggregate get_AggregateType();
    public void set_AggregateType(Aggregate value);
    public sealed virtual string get_CustomAggregateName();
    public sealed virtual void set_CustomAggregateName(string value);
    public sealed virtual CriteriaOperatorCollection get_CustomAggregateOperands();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool get_IsTopLevel();
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.Helpers.IAggregateOperand.get_Condition();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IAggregateOperand.set_Condition(CriteriaOperator value);
    private sealed virtual override object DevExpress.Data.Filtering.Helpers.IAggregateOperand.get_AggregationObject();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IAggregateOperand.set_AggregationObject(object value);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.Helpers.IAggregateOperand.get_AggregatedExpression();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IAggregateOperand.set_AggregatedExpression(CriteriaOperator value);
    private sealed virtual override Aggregate DevExpress.Data.Filtering.Helpers.IAggregateOperand.get_AggregateType();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IAggregateOperand.set_AggregateType(Aggregate value);
    public AggregateOperand Exists(CriteriaOperator aggregatedExpression);
    public AggregateOperand Exists();
    public AggregateOperand Count(CriteriaOperator aggregatedExpression);
    public AggregateOperand Count();
    public AggregateOperand Avg(CriteriaOperator aggregatedExpression);
    public AggregateOperand Max(CriteriaOperator aggregatedExpression);
    public AggregateOperand Min(CriteriaOperator aggregatedExpression);
    public AggregateOperand Sum(CriteriaOperator aggregatedExpression);
    public AggregateOperand Single(CriteriaOperator aggregatedExpression);
    public AggregateOperand Custom(string customAggregateName, IEnumerable`1<CriteriaOperator> aggregatedExpressions);
    protected virtual CriteriaOperator CloneCommon();
    public AggregateOperand Clone();
}
public class DevExpress.Data.Filtering.BaseNodeEventArgs : EventArgs {
    private string propertyName;
    private Type propertyType;
    public string PropertyName { get; }
    public Type PropertyType { get; }
    public BaseNodeEventArgs(string propertyName, Type propertyType);
    public string get_PropertyName();
    public Type get_PropertyType();
}
public class DevExpress.Data.Filtering.BetweenOperator : CriteriaOperator {
    private CriteriaOperator testExpression;
    private CriteriaOperator beginExpression;
    private CriteriaOperator endExpression;
    public CriteriaOperator BeginExpression { get; public set; }
    public CriteriaOperator EndExpression { get; public set; }
    public CriteriaOperator TestExpression { get; public set; }
    [ObsoleteAttribute("Use BeginExpression property instead")]
public CriteriaOperator LeftOperand { get; public set; }
    [ObsoleteAttribute("Use EndExpression property instead")]
public CriteriaOperator RightOperand { get; public set; }
    [ObsoleteAttribute("Use TestExpression property instead")]
public CriteriaOperator Property { get; public set; }
    public BetweenOperator(string testPropertyName, object beginValue, object endValue);
    public BetweenOperator(CriteriaOperator testExpression, CriteriaOperator beginExpression, CriteriaOperator endExpression);
    public BetweenOperator(string testPropertyName, CriteriaOperator beginExpression, CriteriaOperator endExpression);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public CriteriaOperator get_BeginExpression();
    public void set_BeginExpression(CriteriaOperator value);
    public CriteriaOperator get_EndExpression();
    public void set_EndExpression(CriteriaOperator value);
    public CriteriaOperator get_TestExpression();
    public void set_TestExpression(CriteriaOperator value);
    public CriteriaOperator get_LeftOperand();
    public void set_LeftOperand(CriteriaOperator value);
    public CriteriaOperator get_RightOperand();
    public void set_RightOperand(CriteriaOperator value);
    public CriteriaOperator get_Property();
    public void set_Property(CriteriaOperator value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual CriteriaOperator CloneCommon();
    public BetweenOperator Clone();
}
public class DevExpress.Data.Filtering.BinaryOperator : CriteriaOperator {
    [XmlAttributeAttribute]
public BinaryOperatorType OperatorType;
    public CriteriaOperator LeftOperand;
    public CriteriaOperator RightOperand;
    public BinaryOperator(CriteriaOperator opLeft, CriteriaOperator opRight, BinaryOperatorType type);
    public BinaryOperator(string propertyName, bool value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, byte value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, char value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, decimal value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, double value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, float value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, int value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, long value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, short value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, Guid value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, string value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, DateTime value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, DateOnly value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, TimeSpan value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, TimeOnly value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, Byte[] value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, object value, BinaryOperatorType type);
    public BinaryOperator(string propertyName, bool value);
    public BinaryOperator(string propertyName, byte value);
    public BinaryOperator(string propertyName, char value);
    public BinaryOperator(string propertyName, decimal value);
    public BinaryOperator(string propertyName, double value);
    public BinaryOperator(string propertyName, float value);
    public BinaryOperator(string propertyName, int value);
    public BinaryOperator(string propertyName, long value);
    public BinaryOperator(string propertyName, short value);
    public BinaryOperator(string propertyName, Guid value);
    public BinaryOperator(string propertyName, string value);
    public BinaryOperator(string propertyName, DateTime value);
    public BinaryOperator(string propertyName, DateOnly value);
    public BinaryOperator(string propertyName, TimeSpan value);
    public BinaryOperator(string propertyName, TimeOnly value);
    public BinaryOperator(string propertyName, Byte[] value);
    public BinaryOperator(string propertyName, object value);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual CriteriaOperator CloneCommon();
    public BinaryOperator Clone();
}
public enum DevExpress.Data.Filtering.BinaryOperatorType : Enum {
    public int value__;
    public static BinaryOperatorType Equal;
    public static BinaryOperatorType NotEqual;
    public static BinaryOperatorType Greater;
    public static BinaryOperatorType Less;
    public static BinaryOperatorType LessOrEqual;
    public static BinaryOperatorType GreaterOrEqual;
    [ObsoleteAttribute("Use StartsWith, EndsWith, Contains functions or Like custom function instead. See https://supportcenter.devexpress.com/ticket/details/t313960/ for details.")]
public static BinaryOperatorType Like;
    public static BinaryOperatorType BitwiseAnd;
    public static BinaryOperatorType BitwiseOr;
    public static BinaryOperatorType BitwiseXor;
    public static BinaryOperatorType Divide;
    public static BinaryOperatorType Modulo;
    public static BinaryOperatorType Multiply;
    public static BinaryOperatorType Plus;
    public static BinaryOperatorType Minus;
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Filtering.BindingListFilterProxyBase : object {
    private IBindingList dataSource;
    private EventHandler filterChanged;
    private EventHandler propertiesChanged;
    public IBindingList DataSource { get; }
    private CriteriaOperator DevExpress.Data.Filtering.IFilteredComponentBase.RowCriteria { get; private set; }
    public BindingListFilterProxyBase(IBindingList dataSource);
    public IBindingList get_DataSource();
    private void DS_ListChanged(object sender, ListChangedEventArgs e);
    private void OnFilterChanged();
    private void OnPropertiesChanged();
    private void BeforeAddEvent();
    private void AfterRemoveEvent();
    private sealed virtual override void DevExpress.Data.Filtering.IFilteredComponentBase.add_RowFilterChanged(EventHandler value);
    private sealed virtual override void DevExpress.Data.Filtering.IFilteredComponentBase.remove_RowFilterChanged(EventHandler value);
    private sealed virtual override void DevExpress.Data.Filtering.IFilteredComponentBase.add_PropertiesChanged(EventHandler value);
    private sealed virtual override void DevExpress.Data.Filtering.IFilteredComponentBase.remove_PropertiesChanged(EventHandler value);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IFilteredComponentBase.get_RowCriteria();
    private sealed virtual override void DevExpress.Data.Filtering.IFilteredComponentBase.set_RowCriteria(CriteriaOperator value);
}
public class DevExpress.Data.Filtering.ConstantValue : OperandValue {
    public ConstantValue(object value);
    protected virtual CriteriaOperator CloneCommon();
    public ConstantValue Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Data.Filtering.ContainsOperator : AggregateOperand {
    public ContainsOperator(OperandProperty collectionProperty, CriteriaOperator condition);
    public ContainsOperator(string collectionProperty, CriteriaOperator condition);
}
public abstract class DevExpress.Data.Filtering.ControlFilterColumnsProvider : object {
    private sealed virtual override PropertyDescriptorCollection DevExpress.Data.Filtering.IControlFilterColumnsProvider.GetColumnDescriptors();
    protected PropertyDescriptorCollection GetFilterColumnDescriptors();
    protected PropertyDescriptorCollection GetFilterColumnDescriptors(IControlFilterColumn[] columns, bool skipFindDescriptors);
    protected abstract virtual bool GetIsFindFilterActive();
    protected abstract virtual IEnumerable`1<IControlFilterColumn> GetColumns();
    protected abstract virtual PropertyDescriptor CreatePropertyDescriptor(IControlFilterColumn column);
    protected abstract virtual PropertyDescriptor CreateFindPropertyDescriptor(IControlFilterColumn column);
}
public abstract class DevExpress.Data.Filtering.ControlFilterHelper : ControlFilterHelper`1<object> {
    protected sealed virtual Func`2<object, bool> CreateFilterFitPredicate(CriteriaOperator criteria);
    protected abstract virtual IControlFilterColumnsProvider GetFilterColumnsProvider();
}
public abstract class DevExpress.Data.Filtering.ControlFilterHelper`1 : object {
    private Func`2<T, bool> filterFitPredicate;
    private SubstituteFilterEventArgs substituteFilterArgs;
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> ErrorOccurred;
    protected Func`2<T, bool> FilterFitPredicate { get; }
    protected abstract virtual CriteriaOperator GetFilterCriteria();
    protected Func`2<T, bool> get_FilterFitPredicate();
    protected void ResetFilterFitPredicate();
    public bool IsFit(T dataObject);
    protected virtual Func`2<T, bool> CreateFilterFitPredicate(CriteriaOperator criteria);
    protected CriteriaOperator RaiseSubstituteFilter(CriteriaOperator criteria);
    protected virtual void RaiseSubstituteFilter(SubstituteFilterEventArgs args);
    [CompilerGeneratedAttribute]
public void add_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    protected void RaiseErrorOccurred(Exception error);
}
public static class DevExpress.Data.Filtering.CriteriaColumnAffinityResolver : object {
    public static bool UseLegacyResolver;
    public static OperandProperty GetAffinityColumnWithOptionalLegacyFallback(CriteriaOperator op);
    public static IDictionary`2<OperandProperty, CriteriaOperator> SplitByColumnsWithOptionalLegacyFallback(CriteriaOperator op);
    public static IDictionary`2<OperandProperty, CriteriaOperator> SplitByColumns(CriteriaOperator op);
    public static OperandProperty GetAffinityColumnLegacy(CriteriaOperator op);
    public static IDictionary`2<OperandProperty, CriteriaOperator> SplitByColumnsLegacy(CriteriaOperator op);
    [IteratorStateMachineAttribute("DevExpress.Data.Filtering.CriteriaColumnAffinityResolver/<Chop>d__9")]
private static IEnumerable`1<CriteriaOperator> Chop(IEnumerable`1<CriteriaOperator> andGroupCriteria);
    [IteratorStateMachineAttribute("DevExpress.Data.Filtering.CriteriaColumnAffinityResolver/<Chop>d__10")]
private static IEnumerable`1<CriteriaOperator> Chop(CriteriaOperator choppable);
    private static OperandProperty GetAffinityColumn(CriteriaOperator op, IEqualityComparer`1<string> _PropEqualityComparer);
    public static string GetAffinityColumnName(CriteriaOperator op, IEqualityComparer`1<string> _PropEqualityComparer);
    public static Tuple`2<CriteriaOperator, IDictionary`2<string, CriteriaOperator>> SplitByColumnNames(CriteriaOperator op, IEqualityComparer`1<string> _PropEqualityComparer);
    private static IDictionary`2<OperandProperty, CriteriaOperator> SplitByColumnsNew(CriteriaOperator op, IEqualityComparer`1<string> _PropEqualityComparer);
    internal static bool TryGetPropertyNameSimple(CriteriaOperator criterion, String& propertyName);
}
public static class DevExpress.Data.Filtering.CriteriaCompiler : object {
    public static LambdaExpression ToLambda(CriteriaOperator expression, CriteriaCompilerDescriptor descriptor, CriteriaCompilerAuxSettings settings);
    public static LambdaExpression ToLambda(CriteriaOperator expression, CriteriaCompilerDescriptor descriptor);
    public static Func`2<object, bool> ToUntypedPredicate(CriteriaOperator expression, CriteriaCompilerDescriptor descriptor, CriteriaCompilerAuxSettings settings);
    public static Func`2<object, bool> ToUntypedPredicate(CriteriaOperator expression, CriteriaCompilerDescriptor descriptor);
    public static Func`2<T, bool> ToPredicate(CriteriaOperator expression, CriteriaCompilerDescriptor descriptor, CriteriaCompilerAuxSettings settings);
    public static Func`2<T, bool> ToPredicate(CriteriaOperator expression, CriteriaCompilerDescriptor descriptor);
    public static Func`2<object, object> ToUntypedDelegate(CriteriaOperator expression, CriteriaCompilerDescriptor descriptor, CriteriaCompilerAuxSettings settings);
    public static Func`2<object, object> ToUntypedDelegate(CriteriaOperator expression, CriteriaCompilerDescriptor descriptor);
}
public class DevExpress.Data.Filtering.CriteriaCompilerAuxSettings : object {
    internal static CriteriaCompilerAuxSettings DefaultInstance;
    public bool CaseSensitive;
    public CustomFunctionCollection AdditionalFunctions;
    public CustomAggregateCollection AdditionalAggregates;
    public Nullable`1<bool> CheckedMath;
    public static bool DefaultCheckedMath;
    public Nullable`1<bool> Is3ValuedLogic;
    public static bool DefaultIs3ValuedLogic;
    public CriteriaCompilerAuxSettings(bool caseSensitive);
    public CriteriaCompilerAuxSettings(bool caseSensitive, CustomFunctionCollection additionalFunctions);
    public CriteriaCompilerAuxSettings(bool caseSensitive, CustomFunctionCollection additionalFunctions, CustomAggregateCollection additionalAggregates);
    private static CriteriaCompilerAuxSettings();
    internal bool GetActiveCheckedMath();
    internal bool GetActiveIs3ValuedLogic();
}
public abstract class DevExpress.Data.Filtering.CriteriaCompilerDescriptor : object {
    public Type ObjectType { get; }
    public static CriteriaCompilerDescriptor Get();
    public static CriteriaCompilerDescriptor Get(Type rowType, Func`3<Expression, string, Expression> propertyAccessFunc);
    public static CriteriaCompilerDescriptor Get(Func`2<string, Expression> propertyAccessFunc);
    public static CriteriaCompilerDescriptor GetExpando();
    public static CriteriaCompilerDescriptor Get(Type t);
    public static CriteriaCompilerDescriptor Get();
    public static CriteriaCompilerDescriptor Get(PropertyDescriptorCollection pds);
    public abstract virtual Type get_ObjectType();
    public abstract virtual Expression MakePropertyAccess(Expression baseExpression, string propertyPath);
    public virtual Type ResolvePropertyType(Expression baseExpression, string propertyPath);
    public virtual CriteriaCompilerRefResult DiveIntoCollectionProperty(Expression baseExpression, string collectionPropertyPath);
    public virtual LambdaExpression MakeFreeJoinLambda(string joinTypeName, CriteriaOperator condition, OperandParameter[] conditionParameters, Aggregate aggregateType, CriteriaOperator aggregateExpression, OperandParameter[] aggregateExpresssionParameters, Type[] invokeTypes);
    public virtual LambdaExpression MakeFreeJoinLambda(string joinTypeName, CriteriaOperator condition, OperandParameter[] conditionParameters, string customAggregateName, IEnumerable`1<CriteriaOperator> aggregateExpressions, OperandParameter[] aggregateExpresssionsParameters, Type[] invokeTypes);
}
public class DevExpress.Data.Filtering.CriteriaCompilerException : InvalidOperationException {
    public CriteriaCompilerException(string message, Exception innerException);
    public CriteriaCompilerException(CriteriaOperator wholeCriteria, CriteriaOperator exceptionCauseCriteria, Exception innerException);
    private static string MakeExceptionText(CriteriaOperator wholeCriteria, CriteriaOperator exceptionCauseCriteria, Exception innerException);
}
public class DevExpress.Data.Filtering.CriteriaCompilerLocalContext : object {
    public Expression Expression;
    public CriteriaCompilerDescriptor Descriptor;
    public CriteriaCompilerLocalContext(Expression expression, CriteriaCompilerDescriptor descriptor);
}
public class DevExpress.Data.Filtering.CriteriaCompilerRefResult : object {
    public CriteriaCompilerLocalContext LocalContext;
    public string SubProperty;
    public bool IsCollection { get; }
    public CriteriaCompilerRefResult(CriteriaCompilerLocalContext _LocalContext, string _SubProperty);
    public bool get_IsCollection();
}
[XmlIncludeAttribute("DevExpress.Xpo.DB.ParameterValue")]
[XmlIncludeAttribute("DevExpress.Xpo.DB.QueryOperand")]
[XmlIncludeAttribute("DevExpress.Xpo.DB.QuerySubQueryContainer")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.ContainsOperator")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.BetweenOperator")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.BinaryOperator")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.UnaryOperator")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.InOperator")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.GroupOperator")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.OperandValue")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.ConstantValue")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.OperandProperty")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.AggregateOperand")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.JoinOperand")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.FunctionOperator")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.NotOperator")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.NullOperator")]
[XmlIncludeAttribute("DevExpress.Xpo.DB.QueryOperand")]
public abstract class DevExpress.Data.Filtering.CriteriaOperator : object {
    private static string operatorTrueFalseObsoleteText;
    private static CustomFunctionCollection commonCustomFunctionCollection;
    private static CustomAggregateCollection commonAggregateCollection;
    private static EventHandler`1<UserValueProcessingEventArgs> UserValueToStringCore;
    private static EventHandler`1<UserValueProcessingEventArgs> UserValueParseCore;
    private static EventHandler`1<CustomFunctionEventArgs> QueryCustomFunctionsCore;
    internal static string TagToString;
    internal static string TagEnum;
    public static int CustomFunctionCount { get; }
    public static int CustomAggregateCount { get; }
    private static CriteriaOperator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public abstract virtual void Accept(ICriteriaVisitor visitor);
    public abstract virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public static CriteriaOperator Parse(string stringCriteria, OperandValue[]& criteriaParametersList);
    public static CriteriaOperator Parse(string criteria, Object[] parameters);
    public static CriteriaOperator TryParse(string criteria, Object[] parameters);
    public static CriteriaOperator[] ParseList(string criteriaList, OperandValue[]& criteriaParametersList);
    public static CriteriaOperator[] ParseList(string criteriaList, Object[] parameters);
    public static string ToBasicStyleString(CriteriaOperator criteria);
    public static string ToCStyleString(CriteriaOperator criteria);
    public static string ToBasicStyleString(CriteriaOperator criteria, OperandValue[]& criteriaParametersList);
    public static string ToCStyleString(CriteriaOperator criteria, OperandValue[]& criteriaParametersList);
    public static string LegacyToString(CriteriaOperator criteria);
    public static string ToString(CriteriaOperator criteria);
    public static string ToString(CriteriaOperator criteria, OperandValue[]& criteriaParametersList);
    public virtual string ToString();
    public string LegacyToString();
    public static string FormatConstantValue(object value);
    public static string FormatPropertyName(string propertyName);
    public static CriteriaOperator And(CriteriaOperator left, CriteriaOperator right);
    public static CriteriaOperator Or(CriteriaOperator left, CriteriaOperator right);
    public static CriteriaOperator And(CriteriaOperator[] operands);
    public static CriteriaOperator And(IEnumerable`1<CriteriaOperator> operands);
    public static CriteriaOperator Or(CriteriaOperator[] operands);
    public static CriteriaOperator Or(IEnumerable`1<CriteriaOperator> operands);
    [ObsoleteAttribute("Please replace == operator with ReferenceEquals, != with !ReferenceEquals (or use | and & operators instead of || and && in the simplified criteria syntax)")]
public static bool op_True(CriteriaOperator operand);
    [ObsoleteAttribute("Please replace == operator with ReferenceEquals, != with !ReferenceEquals (or use | and & operators instead of || and && in the simplified criteria syntax)", "True")]
public static bool op_False(CriteriaOperator operand);
    private static bool operatorTrueFalseCore(CriteriaOperator operand);
    public static BinaryOperator op_Equality(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_Inequality(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_GreaterThan(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_LessThan(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_GreaterThanOrEqual(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_LessThanOrEqual(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_Addition(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_Subtraction(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_Multiply(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_Division(CriteriaOperator left, CriteriaOperator right);
    public static BinaryOperator op_Modulus(CriteriaOperator left, CriteriaOperator right);
    public static CriteriaOperator op_BitwiseAnd(CriteriaOperator left, CriteriaOperator right);
    public static CriteriaOperator op_BitwiseOr(CriteriaOperator left, CriteriaOperator right);
    public static UnaryOperator op_UnaryPlus(CriteriaOperator operand);
    public static UnaryOperator op_UnaryNegation(CriteriaOperator operand);
    public static UnaryOperator op_LogicalNot(CriteriaOperator operand);
    public UnaryOperator IsNull();
    public UnaryOperator IsNotNull();
    public UnaryOperator Not();
    public static CriteriaOperator op_Explicit(bool val);
    public static CriteriaOperator op_Implicit(byte val);
    public static CriteriaOperator op_Implicit(char val);
    public static CriteriaOperator op_Implicit(decimal val);
    public static CriteriaOperator op_Implicit(double val);
    public static CriteriaOperator op_Implicit(float val);
    public static CriteriaOperator op_Implicit(short val);
    public static CriteriaOperator op_Implicit(int val);
    public static CriteriaOperator op_Implicit(long val);
    public static CriteriaOperator op_Implicit(Guid val);
    public static CriteriaOperator op_Implicit(string val);
    public static CriteriaOperator op_Implicit(DateTime val);
    public static CriteriaOperator op_Implicit(DateOnly val);
    public static CriteriaOperator op_Implicit(DateTimeOffset val);
    public static CriteriaOperator op_Implicit(TimeSpan val);
    public static CriteriaOperator op_Implicit(TimeOnly val);
    public static CriteriaOperator op_Implicit(Byte[] val);
    private sealed virtual override object System.ICloneable.Clone();
    protected abstract virtual CriteriaOperator CloneCommon();
    public static CriteriaOperator Clone(CriteriaOperator origin);
    public static OperandProperty Clone(OperandProperty origin);
    protected static ICollection`1<CriteriaOperator> Clone(ICollection origins);
    protected static CriteriaOperator ObjectToCriteriaSafe(object o);
    public static void RegisterCustomFunction(ICustomFunctionOperator customFunction);
    public static void RegisterCustomFunctions(IEnumerable`1<ICustomFunctionOperator> customFunctions);
    public static bool UnregisterCustomFunction(string functionName);
    public static bool UnregisterCustomFunction(ICustomFunctionOperator customFunction);
    public static int get_CustomFunctionCount();
    public static ICustomFunctionOperator GetCustomFunction(string functionName);
    public static CustomFunctionCollection GetCustomFunctions();
    public static void RegisterCustomAggregate(ICustomAggregate customAggregate);
    public static void RegisterCustomAggregates(IEnumerable`1<ICustomAggregate> customAggregates);
    public static bool UnregisterCustomAggregate(string aggregateName);
    public static bool UnregisterCustomAggregate(ICustomAggregate customAggregate);
    public static int get_CustomAggregateCount();
    public static ICustomAggregate GetCustomAggregate(string aggregateName);
    public static CustomAggregateCollection GetCustomAggregates();
    public static void add_UserValueToString(EventHandler`1<UserValueProcessingEventArgs> value);
    public static void remove_UserValueToString(EventHandler`1<UserValueProcessingEventArgs> value);
    public static void add_UserValueParse(EventHandler`1<UserValueProcessingEventArgs> value);
    public static void remove_UserValueParse(EventHandler`1<UserValueProcessingEventArgs> value);
    public static void add_QueryCustomFunctions(EventHandler`1<CustomFunctionEventArgs> value);
    public static void remove_QueryCustomFunctions(EventHandler`1<CustomFunctionEventArgs> value);
    internal static UserValueProcessingEventArgs DoUserValueToString(object value);
    internal static UserValueProcessingEventArgs DoUserValueParse(string tag, string data);
    internal static CustomFunctionEventArgs DoQueryCustomFunctions(CustomFunctionEventArgs e);
    public static bool CriterionEquals(CriteriaOperator left, CriteriaOperator right);
    public static CriteriaOperator FromLambda(Expression`1<Func`2<TModel, TResult>> lambda);
    public static CriteriaOperator FromLambda(Expression`1<Func`2<TModel, bool>> lambda);
}
public class DevExpress.Data.Filtering.CriteriaOperatorCollection : List`1<CriteriaOperator> {
    private static int HashSeed;
    public CriteriaOperatorCollection(int capacity);
    public CriteriaOperatorCollection(IEnumerable`1<CriteriaOperator> collection);
    private static CriteriaOperatorCollection();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class DevExpress.Data.Filtering.CriteriaToWhereClauseHelper : object {
    public static string GetAccessWhere(CriteriaOperator op);
    public static string GetMsSqlWhere(CriteriaOperator op, MSSqlServerVersion sqlServerVersion, Func`2<OperandProperty, string> propertyFormatter);
    public static string GetMsSqlWhere(CriteriaOperator op, MSSqlServerVersion sqlServerVersion, bool setQuotedIdentifiersOff);
    public static string GetMsSqlWhere(CriteriaOperator op, Func`2<OperandProperty, string> propertyFormatter);
    public static string GetMsSqlWhere(CriteriaOperator op, bool setQuotedIdentifiersOff);
    public static string GetMsSqlWhere(CriteriaOperator op);
    public static string GetOracleWhere(CriteriaOperator op);
    public static string GetOracleWhere(CriteriaOperator op, bool forceQuotesOnOperandProperties);
    public static string GetOracleWhere(CriteriaOperator op, Func`2<OperandProperty, string> propertyFormatter);
    public static string GetDynamicLinqWhere(CriteriaOperator op);
    public static string GetDataSetWhere(CriteriaOperator op);
}
public class DevExpress.Data.Filtering.CustomAggregateCollection : object {
    private Dictionary`2<string, ICustomAggregate> customAggregateByName;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual void Add(ICustomAggregate customAggregate);
    public void Add(IEnumerable`1<ICustomAggregate> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ICustomAggregate item);
    public sealed virtual void CopyTo(ICustomAggregate[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ICustomAggregate item);
    public sealed virtual IEnumerator`1<ICustomAggregate> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ICustomAggregate GetCustomAggregate(string aggregateName);
}
public class DevExpress.Data.Filtering.CustomAggregateEvaluationContext`1 : object {
    private T valueHolder;
    public T Value { get; public set; }
    public T get_Value();
    public void set_Value(T value);
    public T ProcessValue(Func`2<T, T> processFunction);
}
internal class DevExpress.Data.Filtering.CustomAggregatesHelper : object {
    public static bool IsValidCustomAggregateArgumentsCount(string customAggregateName, int argumentsCount);
    public static ICustomAggregate GetCustomAggregate(string name);
    public static ICustomAggregateConvertibleToExpression GetCustomAggregateConvertibleToExpression(string name);
    public static ICustomAggregateFormattable GetCustomAggregateFormattable(string name);
    public static void ThrowAggregateNotFound(string name);
    public static void ThrowCustomAggregateNotFormattable(string name);
    public static void ValidateCustomAggregateName(string name);
}
public abstract class DevExpress.Data.Filtering.CustomDictionaryCollection`2 : object {
    private Dictionary`2<K, T> items;
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected CustomDictionaryCollection`2(IEqualityComparer`1<K> customComparer);
    protected abstract virtual K GetKey(T item);
    public sealed virtual void Add(T item);
    public void Add(IEnumerable`1<T> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T GetItem(K key);
}
[AttributeUsageAttribute("128")]
public class DevExpress.Data.Filtering.CustomFunctionAttribute : Attribute {
    private string functionName;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    public string FunctionName { get; }
    public string Image { get; public set; }
    public object TypeId { get; }
    public CustomFunctionAttribute(string functionName);
    public string get_FunctionName();
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    public virtual object get_TypeId();
}
public class DevExpress.Data.Filtering.CustomFunctionCollection : object {
    private Dictionary`2<string, ICustomFunctionOperator> customFunctionByName;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual void Add(ICustomFunctionOperator item);
    public void Add(IEnumerable`1<ICustomFunctionOperator> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ICustomFunctionOperator item);
    public sealed virtual void CopyTo(ICustomFunctionOperator[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ICustomFunctionOperator item);
    public sealed virtual IEnumerator`1<ICustomFunctionOperator> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ICustomFunctionOperator GetCustomFunction(string functionName);
}
public class DevExpress.Data.Filtering.CustomFunctionEventArgs : BaseNodeEventArgs {
    protected internal HashSet`1<string> customFunctions;
    private Lazy`1<IReadOnlyCollection`1<string>> availableFunctions;
    protected internal bool onlyUnary;
    public CustomFunctionEventArgs(string propertyName, Type propertyType, bool onlyUnary);
    public IReadOnlyCollection`1<string> GetFunctions();
    public void Add(String[] functionNames);
    private void ExcludeUnsupportedFunctions();
}
public abstract class DevExpress.Data.Filtering.CustomMultiKeyDictionaryCollection`2 : object {
    private Dictionary`2<K, T> items;
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected CustomMultiKeyDictionaryCollection`2(IEqualityComparer`1<K> customComparer);
    protected abstract virtual K[] GetKey(T item);
    public sealed virtual void Add(T item);
    public void Add(IEnumerable`1<T> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T GetItem(K key);
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Data.Filtering.DxFtsContainsHelper : object {
    public static string DxFtsPropertyPrefix;
    public static string DxFtsContainsCustomFunctionName;
    public static string DxFtsLikeCustomFunctionName;
    public static CriteriaOperator Expand(CriteriaOperator criteria, CriteriaOperator[] columns);
    public static CriteriaOperator BuildContains(CriteriaOperator value);
    public static CriteriaOperator BuildLike(CriteriaOperator value);
    public static CriteriaOperator Create(String[] columns, FindSearchParserResults parseResult);
    public static CriteriaOperator Create(String[] columns, FindSearchParserResults parseResult, FilterCondition filterCondition);
    private static CriteriaOperator CreateFilter(String[] values, CriteriaOperator[] properties, FilterCondition filterCondition);
    private static CriteriaOperator DoFilterCondition(CriteriaOperator value, CriteriaOperator[] columns, FilterCondition filterCondition);
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Data.Filtering.DxFtsContainsHelperAlt : object {
    public static CriteriaOperator Create(FindSearchParserResults parseResult, FilterCondition defaultCondition, bool isCapriciousSource);
    public static CriteriaOperator CreateExact(string exactText, FindColumnInfo[] properties, FilterCondition defaultCondition, bool isCapriciousSource);
    private static CriteriaOperator CreateFilter(String[] values, FindColumnInfo[] properties, FilterCondition filterCondition, bool isServerMode);
    private static CriteriaOperator DoFilterCondition(string originalValue, FindColumnInfo[] columns, FilterCondition defaultCondition, bool isCapriciousSource);
    private static bool AllowColumn(FindColumnInfo column, Object& value, FilterCondition& filterCondition);
}
internal class DevExpress.Data.Filtering.DxFtsContainsProcessor : AggregatesAsIsBase {
    private CriteriaOperator[] Columns;
    private DxFtsContainsProcessor(CriteriaOperator[] columns);
    public virtual CriteriaOperator Visit(FunctionOperator theOperator);
    private CriteriaOperator DoLike(CriteriaOperator value);
    private CriteriaOperator DoContains(CriteriaOperator value);
    public static CriteriaOperator Convert(CriteriaOperator criteria, CriteriaOperator[] ftsColumns);
}
public static class DevExpress.Data.Filtering.EnumProcessingHelper : object {
    private static ReaderWriterLockSlim _RWL;
    private static Dictionary`2<string, Type> stringsToEnumType;
    private static Dictionary`2<Type, string> enumsToToStringName;
    private static EnumProcessingHelper();
    internal static void ToStringEnumIfNeeded(UserValueProcessingEventArgs e);
    internal static void ExtractEnumIfNeeded(UserValueProcessingEventArgs e);
    private static Type GetEnumTypeFromName(string typeName);
    private static string GetNameForEnumType(Type enumType);
    public static void RegisterEnum(Type enumType);
    public static void RegisterEnum();
    public static void RegisterEnum(Type enumType, string toStringName);
    public static void RegisterEnums(Assembly assembly);
    public static void RegisterEnums(Assembly assembly, bool suppressReferencesProcessing);
    public static void RegisterEnums();
    public static void RegisterEnums(Assembly[] assemblies);
    public static void RegisterEnums(Assembly[] assemblies, bool suppressReferencesProcessing);
    private static void ProcessRegistering(Assembly currentAssembly, IDictionary`2<Assembly, object> passedAssemblies, bool suppressReferencesProcessing);
    private static IDisposable LockForRead();
    private static IDisposable LockForChange();
}
public class DevExpress.Data.Filtering.Exceptions.CriteriaParserException : Exception {
    private int line;
    private int column;
    public int Line { get; public set; }
    public int Column { get; public set; }
    public CriteriaParserException(string explanation);
    public CriteriaParserException(string explanation, int line, int column);
    protected CriteriaParserException(SerializationInfo info, StreamingContext context);
    public int get_Line();
    public void set_Line(int value);
    public int get_Column();
    public void set_Column(int value);
}
public class DevExpress.Data.Filtering.Exceptions.FilteringExceptionsText : object {
    public static string LexerInvalidInputCharacter;
    public static string LexerNonClosedElement;
    public static string LexerInvalidElement;
    public static string LexerElementPropertyName;
    public static string LexerElementStringLiteral;
    public static string LexerElementDateTimeLiteral;
    public static string LexerElementDateTimeOrUserTypeLiteral;
    public static string LexerElementGuidLiteral;
    public static string LexerElementNumberLiteral;
    public static string LexerElementComment;
    public static string GrammarCatchAllErrorMessage;
    public static string ErrorPointer;
    public static string ExpressionEvaluatorOperatorSubtypeNotImplemented;
    public static string ExpressionEvaluatorAnalyzePatternInvalidPattern;
    public static string ExpressionEvaluatorInvalidPropertyPath;
    public static string ExpressionEvaluatorOperatorSubtypeNotSupportedForSpecificOperandType;
    public static string ExpressionEvaluatorNotACollectionPath;
    public static string ExpressionEvaluatorJoinOperandNotSupported;
}
public class DevExpress.Data.Filtering.Exceptions.InvalidPropertyPathException : Exception {
    public InvalidPropertyPathException(string messageText);
    protected InvalidPropertyPathException(SerializationInfo info, StreamingContext context);
}
public enum DevExpress.Data.Filtering.FilterCondition : Enum {
    public int value__;
    public static FilterCondition Contains;
    public static FilterCondition StartsWith;
    public static FilterCondition Like;
    public static FilterCondition Default;
    public static FilterCondition Equals;
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Filtering.FilterModelPickManager : PickManagerBase {
    private IIBoundPropertyCreator propertyCreator;
    public FilterModelPickManager(IIBoundPropertyCreator propertyCreator);
    protected virtual INode CreateDataMemberNode(object dataSource, string dataMember, string displayName, bool isList, object owner, IPropertyDescriptor property);
    protected virtual INode CreateDataSourceNode(object dataSource, string dataMember, string name, object owner);
    protected virtual INode CreateDummyNode(object owner);
    protected virtual object CreateNoneNode(object owner);
    protected virtual IPropertiesProvider CreateProvider();
    protected virtual bool NodeIsEmpty(INode node);
    public List`1<IBoundProperty> PickProperties(object dataSource, string dataMember, Type dataMemberType);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Filtering.FilterModelPropertyNode : object {
    private FilterModelPropertyNode parent;
    private IBoundProperty property;
    private List`1<FilterModelPropertyNode> children;
    private bool isDataSource;
    private bool isDummy;
    public IBoundProperty Property { get; }
    public IList ChildNodes { get; }
    public string DataMember { get; }
    public bool IsDataMemberNode { get; }
    public bool IsDataSourceNode { get; }
    public bool IsDummyNode { get; }
    public bool IsEmpty { get; }
    public bool IsList { get; }
    public bool IsComplex { get; }
    public object Parent { get; }
    public FilterModelPropertyNode(bool isDataSource, bool isDummy);
    public FilterModelPropertyNode(IBoundProperty property);
    public FilterModelPropertyNode(IBoundProperty property, FilterModelPropertyNode parent);
    public IBoundProperty get_Property();
    public sealed virtual IList get_ChildNodes();
    public sealed virtual string get_DataMember();
    public sealed virtual void Expand(EventHandler callback);
    public sealed virtual bool HasDataSource(object dataSource);
    public sealed virtual bool get_IsDataMemberNode();
    public sealed virtual bool get_IsDataSourceNode();
    public sealed virtual bool get_IsDummyNode();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual bool get_IsList();
    public sealed virtual bool get_IsComplex();
    public sealed virtual object get_Parent();
}
public enum DevExpress.Data.Filtering.FindPanelParserKind : Enum {
    public int value__;
    public static FindPanelParserKind Default;
    public static FindPanelParserKind Mixed;
    public static FindPanelParserKind Exact;
    public static FindPanelParserKind And;
    public static FindPanelParserKind Or;
    public static FindPanelParserKind Custom;
}
public static class DevExpress.Data.Filtering.FromLambdaFunctions : object {
    public static object CustomFunction(string name, Object[] args);
    public static TResult CustomFunction(string name, Object[] args);
    public static object CustomFunctionNonDeterministic(string name, Object[] args);
    public static TResult CustomFunctionNonDeterministic(string name, Object[] args);
    public static IQueryable`1<TModel> TopLevelAggregate();
    public static IQueryable`1<TModel> TopLevelAggregate(Expression`1<Func`2<TModel, bool>> condition);
    public static IQueryable`1<TModel> FreeJoin();
    public static IQueryable`1<TModel> FreeJoin(Expression`1<Func`2<TModel, bool>> condition);
}
public enum DevExpress.Data.Filtering.FunctionCategory : Enum {
    public int value__;
    public static FunctionCategory DateTime;
    public static FunctionCategory Logical;
    public static FunctionCategory Math;
    public static FunctionCategory Text;
    public static FunctionCategory All;
}
public class DevExpress.Data.Filtering.FunctionOperator : CriteriaOperator {
    private CriteriaOperatorCollection operands;
    [XmlAttributeAttribute]
public FunctionOperatorType OperatorType;
    [XmlArrayItemAttribute("DevExpress.Data.Filtering.CriteriaOperator")]
public CriteriaOperatorCollection Operands { get; }
    public FunctionOperator(FunctionOperatorType type, CriteriaOperator[] operands);
    public FunctionOperator(string customFunctionName, CriteriaOperator[] operands);
    public FunctionOperator(string customFunctionName, IEnumerable`1<CriteriaOperator> operands);
    public FunctionOperator(FunctionOperatorType type, IEnumerable`1<CriteriaOperator> operands);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public CriteriaOperatorCollection get_Operands();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool GuessIsLogicalCustomFunction(FunctionOperator theOperator);
    protected virtual CriteriaOperator CloneCommon();
    public FunctionOperator Clone();
    internal static CriteriaOperator CreateNormalized(FunctionOperatorType opType, IEnumerable`1<CriteriaOperator> operands);
    private static CriteriaOperator CreateNormalizedIifCore(IList`1<CriteriaOperator> operands);
    internal static CriteriaOperator NormalizeConditional(FunctionOperator fop);
}
public enum DevExpress.Data.Filtering.FunctionOperatorType : Enum {
    public int value__;
    public static FunctionOperatorType None;
    public static FunctionOperatorType Custom;
    public static FunctionOperatorType CustomNonDeterministic;
    public static FunctionOperatorType Iif;
    public static FunctionOperatorType IsNull;
    public static FunctionOperatorType IsNullOrEmpty;
    public static FunctionOperatorType Trim;
    public static FunctionOperatorType Len;
    public static FunctionOperatorType Substring;
    public static FunctionOperatorType Upper;
    public static FunctionOperatorType Lower;
    public static FunctionOperatorType Concat;
    public static FunctionOperatorType Ascii;
    public static FunctionOperatorType Char;
    public static FunctionOperatorType ToStr;
    public static FunctionOperatorType Replace;
    public static FunctionOperatorType Reverse;
    public static FunctionOperatorType Insert;
    public static FunctionOperatorType CharIndex;
    public static FunctionOperatorType Remove;
    public static FunctionOperatorType Abs;
    public static FunctionOperatorType Sqr;
    public static FunctionOperatorType Cos;
    public static FunctionOperatorType Sin;
    public static FunctionOperatorType Atn;
    public static FunctionOperatorType Exp;
    public static FunctionOperatorType Log;
    public static FunctionOperatorType Rnd;
    public static FunctionOperatorType Tan;
    public static FunctionOperatorType Power;
    public static FunctionOperatorType Sign;
    public static FunctionOperatorType Round;
    public static FunctionOperatorType Ceiling;
    public static FunctionOperatorType Floor;
    public static FunctionOperatorType Max;
    public static FunctionOperatorType Min;
    public static FunctionOperatorType Acos;
    public static FunctionOperatorType Asin;
    public static FunctionOperatorType Atn2;
    public static FunctionOperatorType BigMul;
    public static FunctionOperatorType Cosh;
    public static FunctionOperatorType Log10;
    public static FunctionOperatorType Sinh;
    public static FunctionOperatorType Tanh;
    public static FunctionOperatorType PadLeft;
    public static FunctionOperatorType PadRight;
    public static FunctionOperatorType StartsWith;
    public static FunctionOperatorType EndsWith;
    public static FunctionOperatorType Contains;
    public static FunctionOperatorType ToInt;
    public static FunctionOperatorType ToLong;
    public static FunctionOperatorType ToFloat;
    public static FunctionOperatorType ToDouble;
    public static FunctionOperatorType ToDecimal;
    public static FunctionOperatorType LocalDateTimeThisYear;
    public static FunctionOperatorType LocalDateTimeThisMonth;
    public static FunctionOperatorType LocalDateTimeLastWeek;
    public static FunctionOperatorType LocalDateTimeThisWeek;
    public static FunctionOperatorType LocalDateTimeYesterday;
    public static FunctionOperatorType LocalDateTimeToday;
    public static FunctionOperatorType LocalDateTimeNow;
    public static FunctionOperatorType LocalDateTimeTomorrow;
    public static FunctionOperatorType LocalDateTimeDayAfterTomorrow;
    public static FunctionOperatorType LocalDateTimeNextWeek;
    public static FunctionOperatorType LocalDateTimeTwoWeeksAway;
    public static FunctionOperatorType LocalDateTimeNextMonth;
    public static FunctionOperatorType LocalDateTimeNextYear;
    public static FunctionOperatorType LocalDateTimeTwoMonthsAway;
    public static FunctionOperatorType LocalDateTimeTwoYearsAway;
    public static FunctionOperatorType LocalDateTimeLastMonth;
    public static FunctionOperatorType LocalDateTimeLastYear;
    public static FunctionOperatorType LocalDateTimeYearBeforeToday;
    public static FunctionOperatorType IsOutlookIntervalBeyondThisYear;
    public static FunctionOperatorType IsOutlookIntervalLaterThisYear;
    public static FunctionOperatorType IsOutlookIntervalLaterThisMonth;
    public static FunctionOperatorType IsOutlookIntervalNextWeek;
    public static FunctionOperatorType IsOutlookIntervalLaterThisWeek;
    public static FunctionOperatorType IsOutlookIntervalTomorrow;
    public static FunctionOperatorType IsOutlookIntervalToday;
    public static FunctionOperatorType IsOutlookIntervalYesterday;
    public static FunctionOperatorType IsOutlookIntervalEarlierThisWeek;
    public static FunctionOperatorType IsOutlookIntervalLastWeek;
    public static FunctionOperatorType IsOutlookIntervalEarlierThisMonth;
    public static FunctionOperatorType IsOutlookIntervalEarlierThisYear;
    public static FunctionOperatorType IsOutlookIntervalPriorThisYear;
    public static FunctionOperatorType IsThisWeek;
    public static FunctionOperatorType IsThisMonth;
    public static FunctionOperatorType IsThisYear;
    public static FunctionOperatorType IsNextMonth;
    public static FunctionOperatorType IsNextYear;
    public static FunctionOperatorType IsLastMonth;
    public static FunctionOperatorType IsLastYear;
    public static FunctionOperatorType IsYearToDate;
    public static FunctionOperatorType IsSameDay;
    public static FunctionOperatorType InRange;
    public static FunctionOperatorType InDateRange;
    public static FunctionOperatorType IsJanuary;
    public static FunctionOperatorType IsFebruary;
    public static FunctionOperatorType IsMarch;
    public static FunctionOperatorType IsApril;
    public static FunctionOperatorType IsMay;
    public static FunctionOperatorType IsJune;
    public static FunctionOperatorType IsJuly;
    public static FunctionOperatorType IsAugust;
    public static FunctionOperatorType IsSeptember;
    public static FunctionOperatorType IsOctober;
    public static FunctionOperatorType IsNovember;
    public static FunctionOperatorType IsDecember;
    public static FunctionOperatorType DateDiffTick;
    public static FunctionOperatorType DateDiffSecond;
    public static FunctionOperatorType DateDiffMilliSecond;
    public static FunctionOperatorType DateDiffMinute;
    public static FunctionOperatorType DateDiffHour;
    public static FunctionOperatorType DateDiffDay;
    public static FunctionOperatorType DateDiffMonth;
    public static FunctionOperatorType DateDiffYear;
    public static FunctionOperatorType GetDate;
    public static FunctionOperatorType GetMilliSecond;
    public static FunctionOperatorType GetSecond;
    public static FunctionOperatorType GetMinute;
    public static FunctionOperatorType GetHour;
    public static FunctionOperatorType GetDay;
    public static FunctionOperatorType GetMonth;
    public static FunctionOperatorType GetYear;
    public static FunctionOperatorType GetDayOfWeek;
    public static FunctionOperatorType GetDayOfYear;
    public static FunctionOperatorType GetTimeOfDay;
    public static FunctionOperatorType Now;
    public static FunctionOperatorType UtcNow;
    public static FunctionOperatorType Today;
    public static FunctionOperatorType TruncateToMinute;
    public static FunctionOperatorType IsSameHour;
    public static FunctionOperatorType IsSameTime;
    public static FunctionOperatorType BeforeMidday;
    public static FunctionOperatorType AfterMidday;
    public static FunctionOperatorType IsNight;
    public static FunctionOperatorType IsMorning;
    public static FunctionOperatorType IsAfternoon;
    public static FunctionOperatorType IsEvening;
    public static FunctionOperatorType IsLastHour;
    public static FunctionOperatorType IsThisHour;
    public static FunctionOperatorType IsNextHour;
    public static FunctionOperatorType IsWorkTime;
    public static FunctionOperatorType IsFreeTime;
    public static FunctionOperatorType IsLunchTime;
    public static FunctionOperatorType AddTimeSpan;
    public static FunctionOperatorType AddTicks;
    public static FunctionOperatorType AddMilliSeconds;
    public static FunctionOperatorType AddSeconds;
    public static FunctionOperatorType AddMinutes;
    public static FunctionOperatorType AddHours;
    public static FunctionOperatorType AddDays;
    public static FunctionOperatorType AddMonths;
    public static FunctionOperatorType AddYears;
    public static FunctionOperatorType DateTimeFromParts;
    public static FunctionOperatorType DateOnlyFromParts;
    public static FunctionOperatorType TimeOnlyFromParts;
}
public class DevExpress.Data.Filtering.GroupOperator : CriteriaOperator {
    private CriteriaOperatorCollection operands;
    [XmlAttributeAttribute]
public GroupOperatorType OperatorType;
    [XmlArrayItemAttribute("DevExpress.Data.Filtering.CriteriaOperator")]
public CriteriaOperatorCollection Operands { get; }
    public GroupOperator(GroupOperatorType type, CriteriaOperator[] operands);
    public GroupOperator(GroupOperatorType type, IEnumerable`1<CriteriaOperator> operands);
    public GroupOperator(CriteriaOperator[] operands);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public CriteriaOperatorCollection get_Operands();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static CriteriaOperator Combine(GroupOperatorType opType, CriteriaOperator left, CriteriaOperator right);
    public static CriteriaOperator Combine(GroupOperatorType opType, CriteriaOperator[] operands);
    public static CriteriaOperator Combine(GroupOperatorType opType, IEnumerable`1<CriteriaOperator> operands);
    [IteratorStateMachineAttribute("DevExpress.Data.Filtering.GroupOperator/<CombineCore>d__15")]
private static IEnumerable`1<CriteriaOperator> CombineCore(GroupOperatorType opType, IEnumerable`1<CriteriaOperator> operands);
    protected virtual CriteriaOperator CloneCommon();
    public GroupOperator Clone();
}
public enum DevExpress.Data.Filtering.GroupOperatorType : Enum {
    public int value__;
    public static GroupOperatorType And;
    public static GroupOperatorType Or;
}
public class DevExpress.Data.Filtering.Helpers.AccessWhereGenerator : BaseWhereGenerator {
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BinaryOperator theOperator);
    protected virtual string VisitInternal(FunctionOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(OperandValue theOperand);
    protected virtual string FormatOperandProperty(OperandProperty operand);
    [CompilerGeneratedAttribute]
private string <VisitInternal>b__1_0(object obj);
}
public abstract class DevExpress.Data.Filtering.Helpers.BaseWhereGenerator : object {
    public string Process(CriteriaOperator operand);
    private sealed virtual override string DevExpress.Data.Filtering.IClientCriteriaVisitor<System.String>.Visit(OperandProperty theOperand);
    protected abstract virtual string FormatOperandProperty(OperandProperty operand);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(OperandValue theOperand);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BetweenOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(InOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(GroupOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(UnaryOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BinaryOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(FunctionOperator theOperator);
    protected virtual string VisitInternal(FunctionOperator theOperator);
    private string FormatCustomFunction(FunctionOperator customOperator);
    private sealed virtual override string DevExpress.Data.Filtering.IClientCriteriaVisitor<System.String>.Visit(AggregateOperand theOperand);
    private sealed virtual override string DevExpress.Data.Filtering.IClientCriteriaVisitor<System.String>.Visit(JoinOperand theOperand);
    [CompilerGeneratedAttribute]
private string <FormatCustomFunction>b__11_0(CriteriaOperator x);
}
public class DevExpress.Data.Filtering.Helpers.BinaryOperatorsCollectorHelper : object {
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(AggregateOperand theOperand);
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(OperandProperty theOperand);
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(JoinOperand theOperand);
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.ICriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(BetweenOperator theOperator);
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.ICriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(BinaryOperator theOperator);
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.ICriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(UnaryOperator theOperator);
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.ICriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(InOperator theOperator);
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.ICriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(GroupOperator theOperator);
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.ICriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(OperandValue theOperand);
    private sealed virtual override IEnumerable`1<BinaryOperator> DevExpress.Data.Filtering.ICriteriaVisitor<System.Collections.Generic.IEnumerable<DevExpress.Data.Filtering.BinaryOperator>>.Visit(FunctionOperator theOperator);
    private IEnumerable`1<BinaryOperator> Process(CriteriaOperator op);
    private IEnumerable`1<BinaryOperator> Process(IEnumerable`1<CriteriaOperator> ops);
    public static BinaryOperator[] Collect(CriteriaOperator criteria);
    [CompilerGeneratedAttribute]
private IEnumerable`1<BinaryOperator> <Process>b__12_0(CriteriaOperator x);
}
public class DevExpress.Data.Filtering.Helpers.BooleanComplianceChecker : object {
    private static string MustBeArithmetical;
    private static string MustBeLogical;
    public static BooleanComplianceChecker Instance;
    private static BooleanComplianceChecker();
    public sealed virtual BooleanCriteriaState Visit(QueryOperand theOperand);
    public sealed virtual BooleanCriteriaState Visit(QuerySubQueryContainer theOperand);
    public sealed virtual BooleanCriteriaState Visit(AggregateOperand theOperand);
    public sealed virtual BooleanCriteriaState Visit(JoinOperand theOperand);
    public sealed virtual BooleanCriteriaState Visit(OperandProperty theOperand);
    public sealed virtual BooleanCriteriaState Visit(BetweenOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(BinaryOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(UnaryOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(InOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(GroupOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(OperandValue theOperand);
    public sealed virtual BooleanCriteriaState Visit(FunctionOperator theOperator);
    public BooleanCriteriaState Process(CriteriaOperator operand);
    public void Process(CriteriaOperator operand, bool mustBeLogical);
}
public enum DevExpress.Data.Filtering.Helpers.BooleanCriteriaState : Enum {
    public int value__;
    public static BooleanCriteriaState Logical;
    public static BooleanCriteriaState Value;
    public static BooleanCriteriaState Undefined;
}
public enum DevExpress.Data.Filtering.Helpers.ClauseType : Enum {
    public int value__;
    public static ClauseType Equals;
    public static ClauseType DoesNotEqual;
    public static ClauseType Greater;
    public static ClauseType GreaterOrEqual;
    public static ClauseType Less;
    public static ClauseType LessOrEqual;
    public static ClauseType InRange;
    public static ClauseType NotInRange;
    public static ClauseType Between;
    public static ClauseType NotBetween;
    public static ClauseType Contains;
    public static ClauseType DoesNotContain;
    public static ClauseType BeginsWith;
    public static ClauseType EndsWith;
    public static ClauseType Like;
    public static ClauseType NotLike;
    public static ClauseType IsNull;
    public static ClauseType IsNotNull;
    public static ClauseType AnyOf;
    public static ClauseType NoneOf;
    public static ClauseType IsNullOrEmpty;
    public static ClauseType IsNotNullOrEmpty;
    public static ClauseType InDateRange;
    public static ClauseType NotInDateRange;
    public static ClauseType IsBeyondThisYear;
    public static ClauseType IsLaterThisYear;
    public static ClauseType IsLaterThisMonth;
    public static ClauseType IsNextWeek;
    public static ClauseType IsLaterThisWeek;
    public static ClauseType IsTomorrow;
    public static ClauseType IsToday;
    public static ClauseType IsYesterday;
    public static ClauseType IsEarlierThisWeek;
    public static ClauseType IsLastWeek;
    public static ClauseType IsEarlierThisMonth;
    public static ClauseType IsEarlierThisYear;
    public static ClauseType IsPriorThisYear;
    public static ClauseType Function;
}
public abstract class DevExpress.Data.Filtering.Helpers.ClientCriteriaActionBase : object {
    public abstract virtual void Visit(AggregateOperand theOperand);
    public virtual void Visit(OperandProperty theOperand);
    public abstract virtual void Visit(JoinOperand theOperand);
    public virtual void Visit(BetweenOperator theOperator);
    public virtual void Visit(BinaryOperator theOperator);
    public virtual void Visit(UnaryOperator theOperator);
    public virtual void Visit(InOperator theOperator);
    public virtual void Visit(GroupOperator theOperator);
    public virtual void Visit(OperandValue theOperand);
    public virtual void Visit(FunctionOperator theOperator);
    public void Process(CriteriaOperator op);
    protected void Process(IEnumerable`1<CriteriaOperator> ops);
}
public abstract class DevExpress.Data.Filtering.Helpers.ClientCriteriaClonerBase : object {
    protected virtual OperandProperty ProcessCollectionProperty(OperandProperty collectionProperty);
    public virtual CriteriaOperator Visit(AggregateOperand theOperand);
    public virtual CriteriaOperator Visit(OperandProperty theOperand);
    public virtual CriteriaOperator Visit(JoinOperand theOperand);
    public virtual CriteriaOperator Visit(BetweenOperator theOperator);
    public virtual CriteriaOperator Visit(BinaryOperator theOperator);
    public virtual CriteriaOperator Visit(UnaryOperator theOperator);
    public virtual CriteriaOperator Visit(InOperator theOperator);
    public virtual CriteriaOperator Visit(GroupOperator theOperator);
    public abstract virtual CriteriaOperator Visit(OperandValue theOperand);
    public virtual CriteriaOperator Visit(FunctionOperator theOperator);
    public CriteriaOperator Process(CriteriaOperator op);
    protected IEnumerable`1<CriteriaOperator> Process(IEnumerable`1<CriteriaOperator> ops);
    [CompilerGeneratedAttribute]
private CriteriaOperator <Process>b__14_0(CriteriaOperator o);
}
public abstract class DevExpress.Data.Filtering.Helpers.ClientCriteriaLazyPatcherBase : object {
    public abstract virtual CriteriaOperator Visit(AggregateOperand theOperand);
    public virtual CriteriaOperator Visit(OperandProperty theOperand);
    public abstract virtual CriteriaOperator Visit(JoinOperand theOperand);
    public virtual CriteriaOperator Visit(BetweenOperator theOperator);
    public virtual CriteriaOperator Visit(BinaryOperator theOperator);
    public virtual CriteriaOperator Visit(UnaryOperator theOperator);
    public virtual CriteriaOperator Visit(InOperator theOperator);
    public virtual CriteriaOperator Visit(GroupOperator theOperator);
    public virtual CriteriaOperator Visit(OperandValue theOperand);
    public virtual CriteriaOperator Visit(FunctionOperator theOperator);
    public static AggregateOperand NewIfDifferent(AggregateOperand theOperand, OperandProperty processedProperty, CriteriaOperator processedExpression, CriteriaOperator processedCondition);
    public static AggregateOperand NewIfDifferent(AggregateOperand theOperand, OperandProperty processedProperty, IEnumerable`1<CriteriaOperator> processedCustomAggregateOperands, CriteriaOperator processedCondition);
    public static JoinOperand NewIfDifferent(JoinOperand theOperand, CriteriaOperator processedCondition, CriteriaOperator processedExpression);
    public static JoinOperand NewIfDifferent(JoinOperand theOperand, CriteriaOperator processedCondition, IEnumerable`1<CriteriaOperator> processedCustomAggregateOperands);
    public static BetweenOperator NewIfDifferent(BetweenOperator theOperator, CriteriaOperator processedTest, CriteriaOperator processedBegin, CriteriaOperator processedEnd);
    public static BinaryOperator NewIfDifferent(BinaryOperator theOperator, CriteriaOperator processedLeft, CriteriaOperator processedRight);
    public static UnaryOperator NewIfDifferent(UnaryOperator theOperator, CriteriaOperator processedOperand);
    public static InOperator NewIfDifferent(InOperator theOperator, CriteriaOperator processedLeft, IEnumerable`1<CriteriaOperator> processedOperands);
    public static CriteriaOperator NewIfDifferent(GroupOperator theOperator, IEnumerable`1<CriteriaOperator> processedOperands);
    [DXHelpExcludeAttribute("True")]
public static CriteriaOperator CreateFunctionOperatorNormalized(FunctionOperatorType opType, IEnumerable`1<CriteriaOperator> operands);
    public static CriteriaOperator NewIfDifferent(FunctionOperator theOperator, IEnumerable`1<CriteriaOperator> processedOperands);
    protected static bool AreSequenceReferenceEqual(IList`1<O> first, IList`1<O> second);
    public CriteriaOperator Process(CriteriaOperator op);
    protected IEnumerable`1<CriteriaOperator> Process(IEnumerable`1<CriteriaOperator> ops);
    [CompilerGeneratedAttribute]
private CriteriaOperator <Process>b__25_0(CriteriaOperator o);
}
public class DevExpress.Data.Filtering.Helpers.ClientCriteriaVisitorBase : object {
    protected virtual CriteriaOperator Visit(OperandProperty theOperand);
    protected virtual CriteriaOperator Visit(AggregateOperand theOperand, bool processCollectionProperty);
    protected virtual CriteriaOperator Visit(JoinOperand theOperand);
    protected virtual CriteriaOperator Visit(FunctionOperator theOperator);
    protected virtual CriteriaOperator Visit(OperandValue theOperand);
    protected virtual CriteriaOperator Visit(GroupOperator theOperator);
    protected virtual CriteriaOperator Visit(InOperator theOperator);
    protected virtual CriteriaOperator Visit(UnaryOperator theOperator);
    protected virtual CriteriaOperator Visit(BinaryOperator theOperator);
    protected virtual CriteriaOperator Visit(BetweenOperator theOperator);
    protected CriteriaOperator Process(CriteriaOperator input);
    protected CriteriaOperatorCollection ProcessCollection(CriteriaOperatorCollection operands, Boolean& modified);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(JoinOperand theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandProperty theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(AggregateOperand theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(FunctionOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandValue theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(GroupOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(InOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(UnaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BinaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BetweenOperator theOperator);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Filtering.Helpers.CollectFirstLevelPropertiesHelper : object {
    private Dictionary`2<OperandProperty, object> _Dictionary;
    public static IEnumerable`1<OperandProperty> Collect(CriteriaOperator opa);
    public static IEnumerable`1<OperandProperty> Collect(IEnumerable`1<CriteriaOperator> ops);
    public static IEnumerable`1<OperandProperty> Collect(CriteriaOperator[] ops);
    private sealed virtual override void DevExpress.Data.Filtering.IClientCriteriaVisitor.Visit(AggregateOperand theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.IClientCriteriaVisitor.Visit(OperandProperty theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.IClientCriteriaVisitor.Visit(JoinOperand theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BetweenOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BinaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(UnaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(InOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(GroupOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(OperandValue theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(FunctionOperator theOperator);
    private void Process(CriteriaOperator opa);
    private void Process(IEnumerable`1<CriteriaOperator> ops);
}
public class DevExpress.Data.Filtering.Helpers.CollectionContexts : object {
    public EvaluatorContextDescriptor Descriptor;
    public IEnumerable DataSource;
    public CollectionContexts(EvaluatorContextDescriptor descriptor, IEnumerable dataSource);
    public virtual IEnumerator GetEnumerator();
}
public class DevExpress.Data.Filtering.Helpers.CollectionContextsEnumerator : object {
    public EvaluatorContextDescriptor Descriptor;
    public IEnumerator DataSource;
    public object Current { get; }
    public CollectionContextsEnumerator(EvaluatorContextDescriptor descriptor, IEnumerator dataSource);
    public virtual object get_Current();
    public virtual bool MoveNext();
    public virtual void Reset();
}
public class DevExpress.Data.Filtering.Helpers.ConvertConstantDelegate : MulticastDelegate {
    public ConvertConstantDelegate(object object, IntPtr method);
    public virtual string Invoke(string listName, string propertyName, string constValue, CriteriaLexerToken constToken);
    public virtual IAsyncResult BeginInvoke(string listName, string propertyName, string constValue, CriteriaLexerToken constToken, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.Filtering.Helpers.ConvertPropertyDelegate : MulticastDelegate {
    public ConvertPropertyDelegate(object object, IntPtr method);
    public virtual string Invoke(string listName, string name);
    public virtual IAsyncResult BeginInvoke(string listName, string name, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal abstract class DevExpress.Data.Filtering.Helpers.CreateAggregateHelper : object {
    private static CreateAggregateHelper FromPredicate;
    private static CreateAggregateHelper FromSelector;
    private static CreateAggregateHelper();
    public static CriteriaOperator CreateFromPredicate(CriteriaOperator source, CriteriaOperator argument, Aggregate aggregateType);
    public static CriteriaOperator CreateFromSelector(CriteriaOperator source, CriteriaOperator argument, Aggregate aggregateType);
    private CriteriaOperator Create(CriteriaOperator source, CriteriaOperator argument, Aggregate aggregateType);
    protected abstract virtual AggregateOperand CreateCore(OperandProperty collectionProperty, Aggregate aggregateType, CriteriaOperator argument);
    protected abstract virtual void UpdateCore(IAggregateOperand source, Aggregate aggregateType, CriteriaOperator argument);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompiledContextDescriptorDescripted : CriteriaCompilerContextDescriptorDefaultBase {
    private PropertyDescriptorCollection PDs;
    public Type ObjectType { get; }
    public CriteriaCompiledContextDescriptorDescripted(PropertyDescriptorCollection pds);
    public static Expression MakeAccessFromDescriptor(Expression baseExpression, PropertyDescriptor pd);
    protected virtual Expression MakePropertyAccessCore(Expression baseExpression, string property);
    public virtual Type ResolvePropertyType(Expression baseExpression, string propertyPath);
    private Expression CoreAccess(Expression baseExpression, string propertyPath);
    protected virtual Expression MakePathAccess(Expression baseExpression, string propertyPath);
    public virtual Type get_ObjectType();
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompiledContextDescriptorFlatTyped : CriteriaCompiledContextDescriptorTyped {
    public CriteriaCompiledContextDescriptorFlatTyped(Type typeWithFlatProperties);
    protected virtual Expression MakePathAccess(Expression baseExpression, string propertyPath);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompiledContextDescriptorTyped : CriteriaCompilerContextDescriptorDefaultBase {
    private Type Type;
    public Type ObjectType { get; }
    public CriteriaCompiledContextDescriptorTyped(Type type);
    protected virtual Expression MakePropertyAccessCore(Expression baseExpression, string property);
    public virtual Type ResolvePropertyType(Expression baseExpression, string propertyPath);
    public virtual Type get_ObjectType();
}
public abstract class DevExpress.Data.Filtering.Helpers.CriteriaCompilerContext : object {
    public CriteriaCompilerAuxSettings AuxSettings { get; }
    public abstract virtual CriteriaCompilerAuxSettings get_AuxSettings();
    public abstract virtual CriteriaCompilerLocalContext GetLocalContext(int upLevels);
    public Expression MakePropertyAccess(string propertyPath);
    public Type ResolvePropertyType(string propertyPath);
    public CriteriaCompilerRefResult DiveIntoCollectionProperty(string collectionPath);
    public LambdaExpression MakeFreeJoinLambda(string joinTypeName, CriteriaOperator condition, OperandParameter[] conditionParameters, Aggregate aggregateType, CriteriaOperator aggregateExpression, OperandParameter[] aggregateExpresssionParameters, Type[] invokeTypes);
    public LambdaExpression MakeFreeJoinLambda(string joinTypeName, CriteriaOperator condition, OperandParameter[] conditionParameters, string customAggregateName, IEnumerable`1<CriteriaOperator> aggregateExpressions, OperandParameter[] aggregateExpresssionsParameters, Type[] invokeTypes);
}
public abstract class DevExpress.Data.Filtering.Helpers.CriteriaCompilerContextDescriptorDefaultBase : CriteriaCompilerDescriptor {
    private static IEnumerable ToCollection(object o);
    [IteratorStateMachineAttribute("DevExpress.Data.Filtering.Helpers.CriteriaCompilerContextDescriptorDefaultBase/<WrapTypedCollection>d__1")]
private static IEnumerable WrapTypedCollection(ITypedList tl, IEnumerable e);
    public virtual CriteriaCompilerRefResult DiveIntoCollectionProperty(Expression baseExpression, string collectionPropertyPath);
    public virtual Expression MakePropertyAccess(Expression baseExpression, string propertyPath);
    private static object MayBeRefAsCollectionExtractor(object mayBeRefAsCollection, string propertyPathForException);
    private Expression LeafProcessing(Expression ex, string propertyPathForException);
    protected Expression MakePropertyAccessCoreChecked(Expression baseExpression, string property);
    protected abstract virtual Expression MakePropertyAccessCore(Expression baseExpression, string property);
    protected virtual Expression MakePathAccess(Expression baseExpression, string propertyPath);
    protected virtual Expression MakeThisAccess(Expression baseExpression);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompilerContextDescriptorExpando : CriteriaCompilerContextDescriptorDefaultBase {
    public static CriteriaCompilerContextDescriptorExpando Instance;
    public Type ObjectType { get; }
    private static CriteriaCompilerContextDescriptorExpando();
    protected virtual Expression MakePropertyAccessCore(Expression baseExpression, string property);
    public virtual Type ResolvePropertyType(Expression baseExpression, string propertyPath);
    public virtual Type get_ObjectType();
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompilerContextDescriptorFunc : CriteriaCompilerContextDescriptorDefaultBase {
    private Func`3<Expression, string, Expression> Func;
    private Type RowType;
    public Type ObjectType { get; }
    public CriteriaCompilerContextDescriptorFunc(Type _RowType, Func`3<Expression, string, Expression> _Func);
    protected virtual Expression MakePropertyAccessCore(Expression baseExpression, string property);
    public virtual Type ResolvePropertyType(Expression baseExpression, string property);
    public virtual Type get_ObjectType();
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompilerContextDescriptorReflective : CriteriaCompilerContextDescriptorDefaultBase {
    public static CriteriaCompilerContextDescriptorReflective Instance;
    public Type ObjectType { get; }
    private static CriteriaCompilerContextDescriptorReflective();
    protected virtual Expression MakePropertyAccessCore(Expression baseExpression, string propertyPath);
    public virtual Type ResolvePropertyType(Expression baseExpression, string propertyPath);
    public virtual Type get_ObjectType();
    private static object GetThis(object obj);
    protected virtual Expression MakeThisAccess(Expression baseExpression);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompilerCore : object {
    public CriteriaCompilerContext Context;
    private static MethodInfo evalHelpersDoCustomAggregagteMethodInfo;
    private static Dictionary`2<Type, MethodInfo> evalHelpersDoCustomAggregagteMethodInfoCache;
    private static Dictionary`2<Type, Type> getGenericOperandDelegateTypeCache;
    private Stack`1<Type> implicitTypesForLocalValues;
    protected CriteriaCompilerCore(CriteriaCompilerContext context);
    private static CriteriaCompilerCore();
    private static void GuardNull(object arg, Func`1<string> getParameterName);
    private static void GuardNulls(IEnumerable arg, Func`2<int, string> getParameterName);
    private sealed virtual override Expression DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Linq.Expressions.Expression>.Visit(AggregateOperand theOperand);
    private static Expression DoSubAggregate(CriteriaCompilerContext outerContext, string propertyPath, CriteriaOperator filter, Aggregate aggregateType, CriteriaOperator aggregateExpression);
    private Expression DoSubAggregate(CriteriaCompilerContext outerContext, string propertyPath, CriteriaOperator filter, string customAggregateName, IEnumerable`1<CriteriaOperator> aggregateExpressions);
    private static Expression PrepareCollectionExpressionForAggregate(CriteriaCompilerContext collectionContext, CriteriaOperator filter, Type& targetCollectionType, CriteriaCompilerDescriptor& rowDescriptor);
    private static Expression DoFinalAggregate(CriteriaCompilerContext collectionContext, CriteriaOperator filter, Aggregate aggregateType, CriteriaOperator aggregateExpression);
    private Expression DoFinalAggregate(CriteriaCompilerContext collectionContext, CriteriaOperator filter, string customAggregateName, IEnumerable`1<CriteriaOperator> aggregateExpressions);
    private static Expression MakeAggregate(Aggregate aggregate, Expression collectionArg, LambdaExpression argLambda, Type rowType, CriteriaCompilerAuxSettings settings);
    private Expression MakeCustomAggregate(string customAggregateName, Expression collectionArg, LambdaExpression[] argLambdas, Type rowType, CriteriaCompilerAuxSettings settings);
    private static MethodInfo GetGenericMethodForExecuteAggregate(Type collectionElementType);
    private Type GetGenericOperandSelectorDelegateType(Type collectionElementType);
    private static LambdaExpression MakeInsideAggregateLambda(CriteriaCompilerDescriptor collectionAccessDescriptor, CriteriaCompilerContext donorContext, CriteriaOperator toCompile, bool needBoolRetType);
    private static LambdaExpression[] MakeInsideAggregateLambdas(CriteriaCompilerDescriptor collectionAccessDescriptor, CriteriaCompilerContext donorContext, IEnumerable`1<CriteriaOperator> toCompile);
    private sealed virtual override Expression DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Linq.Expressions.Expression>.Visit(OperandProperty theOperand);
    private sealed virtual override Expression DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Linq.Expressions.Expression>.Visit(JoinOperand theOperand);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICriteriaVisitor<System.Linq.Expressions.Expression>.Visit(BetweenOperator theOperator);
    private Expression MakeBetweenOrInRange(CriteriaOperator testExpression, CriteriaOperator beginExpression, CriteriaOperator endExpression, bool isInRange);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICriteriaVisitor<System.Linq.Expressions.Expression>.Visit(BinaryOperator theOperator);
    private static Expression MakeCompare(Expression left, Expression right, bool isEqualsCompare, Func`2<int, bool> postCmpLambda, Func`3<Expression, Expression, Expression> directCmp, CriteriaCompilerAuxSettings auxSettings);
    private static Expression MakeBinaryMath(Expression left, Expression right, Expression`1<Func`3<object, object, object>> objectsCombinator, Func`3<Expression, Expression, Expression> typedCombinator);
    private static bool IsConstantUntypedNull(Expression e);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICriteriaVisitor<System.Linq.Expressions.Expression>.Visit(UnaryOperator theOperator);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICriteriaVisitor<System.Linq.Expressions.Expression>.Visit(InOperator theOperator);
    private static Expression MakeInSmart(Expression leftParam, IList`1<CriteriaOperator> operands, NestedLambdaCompiler nestedLambdaCompiler, Type implicitType);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICriteriaVisitor<System.Linq.Expressions.Expression>.Visit(GroupOperator theOperator);
    private static Expression MakeGroupCore(GroupOperatorType opType, Expression[] operands, int start, int count);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICriteriaVisitor<System.Linq.Expressions.Expression>.Visit(OperandValue theOperand);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICriteriaVisitor<System.Linq.Expressions.Expression>.Visit(FunctionOperator theOperator);
    private Type EnsureImplicitTypeForDateOrTimeFunctions(FunctionOperator theOperator, Type[] invokeTypes);
    private static bool IsDateTimeFunc(FunctionOperatorType type);
    private static bool IsTimeFunction(FunctionOperatorType type);
    private Expression MakeIsSameDay(FunctionOperator theOperator);
    private Expression MakeIsSameTime(FunctionOperator theOperator);
    private Expression MakeIsSameHour(FunctionOperator theOperator);
    private Expression MakeConcat(IList`1<CriteriaOperator> operands);
    private Expression MakeConcatNullable(IList`1<CriteriaOperator> operands);
    private Expression MakeConcatNonNullable(IEnumerable`1<CriteriaOperator> operands);
    private Expression MakeCustom(FunctionOperator fn);
    private Expression MakeCustomMain(ICustomFunctionOperatorCompileable compileable, Expression[] processedArgs);
    private Expression MakeCustomMainCore(ICustomFunctionOperatorCompileable compileable, Expression[] processedArgs);
    private Expression MakeIif(FunctionOperator theOperator);
    private static Expression MakeElementaryConditional(Expression conditionExpression, Expression trueExpression, Expression falseExpression);
    internal static void ResolveElementaryConditionalType(Expression& left, Expression& right);
    private Expression MakeIsNull(FunctionOperator theOperator);
    private static Expression MakeSimpleIsNull(Expression operand);
    protected Expression Process(CriteriaOperator criteria);
    protected Expression Process(CriteriaOperator criteria, Type implicitType);
    [IteratorStateMachineAttribute("DevExpress.Data.Filtering.Helpers.CriteriaCompilerCore/<Process>d__56")]
private IEnumerable`1<Expression> Process(IEnumerable`1<CriteriaOperator> ops);
    public static LambdaExpression Compile(CriteriaCompilerDescriptor descriptor, CriteriaCompilerAuxSettings settings, CriteriaOperator op);
    [CompilerGeneratedAttribute]
private Expression <DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Linq.Expressions.Expression>.Visit>b__20_0(OperandParameter op);
    [CompilerGeneratedAttribute]
private Expression <DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Linq.Expressions.Expression>.Visit>b__20_2(OperandParameter op);
    [CompilerGeneratedAttribute]
private Expression <MakeConcatNonNullable>b__44_0(CriteriaOperator op);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompilerDescriptorITypedListComplete : CriteriaCompilerDescriptor {
    private ITypedList Root;
    private PropertyDescriptor[] ListAccessors;
    public Type ObjectType { get; }
    public CriteriaCompilerDescriptorITypedListComplete(ITypedList _Root, PropertyDescriptor[] _ListAccessors);
    public virtual Type get_ObjectType();
    public virtual CriteriaCompilerRefResult DiveIntoCollectionProperty(Expression baseExpression, string collectionPropertyPath);
    public virtual Expression MakePropertyAccess(Expression baseExpression, string propertyPath);
    public virtual Type ResolvePropertyType(Expression baseExpression, string propertyPath);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompilerFreeJoinCriteriaReprocessor : ClientCriteriaLazyPatcherBase {
    private int CutOffDepth;
    private IList`1<OperandParameter> Map;
    private CriteriaCompilerFreeJoinCriteriaReprocessor(int cutOffDepth, IList`1<OperandParameter> map);
    private CriteriaOperator ProcessProperty(OperandProperty prop);
    private CriteriaOperator SubProcess(int cutOffDepth, CriteriaOperator criteriaOperator);
    public virtual CriteriaOperator Visit(AggregateOperand theOperand);
    public virtual CriteriaOperator Visit(OperandProperty theOperand);
    public virtual CriteriaOperator Visit(JoinOperand theOperand);
    private static CriteriaOperator Process(int depth, CriteriaOperator op, IList`1<OperandParameter> mappings);
    public static CriteriaOperator Process(CriteriaOperator op, OperandParameter[]& tbdValues);
    [CompilerGeneratedAttribute]
private CriteriaOperator <Visit>b__7_0(CriteriaOperator t);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompilerLocalException : Exception {
    public CriteriaOperator Cause;
    public CriteriaCompilerLocalException(Exception innerException, CriteriaOperator cause);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaCompilerRootContext : CriteriaCompilerContext {
    private CriteriaCompilerAuxSettings _AuxSettings;
    public CriteriaCompilerDescriptor Descriptor;
    public ParameterExpression ThisExpression;
    public CriteriaCompilerAuxSettings AuxSettings { get; }
    public CriteriaCompilerRootContext(CriteriaCompilerDescriptor descriptor, CriteriaCompilerAuxSettings auxSettings);
    public virtual CriteriaCompilerLocalContext GetLocalContext(int upLevels);
    public virtual CriteriaCompilerAuxSettings get_AuxSettings();
}
public static class DevExpress.Data.Filtering.Helpers.CriteriaEqualityComparer : object {
    private static Func`3<CriteriaOperator, CriteriaOperator, bool> DefEq;
    public static IEqualityComparer`1<CriteriaOperator> Default;
    public static IEqualityComparer`1<CriteriaOperator> OperandValueInvariant;
    private static CriteriaEqualityComparer();
    public static IEqualityComparer`1<CriteriaOperator> BuildEqualityComparerWithOverrides(Func`3<CriteriaOperator, CriteriaOperator, Nullable`1<bool>> comparerOverride, Func`2<CriteriaOperator, Nullable`1<int>> hashCodeOverride);
    public static bool CompareEqualsOperandValueInvariant(CriteriaOperator x, CriteriaOperator y);
    internal static bool DefaultEqualsOperandValue(OperandValue a, OperandValue b);
    internal static bool DefaultEqualsOperandProperty(OperandProperty a, OperandProperty b);
    internal static bool DefaultEqualsOperandParameter(OperandParameter a, OperandParameter b);
    internal static bool DefaultEquals(AggregateOperand a, AggregateOperand b, Func`3<CriteriaOperator, CriteriaOperator, bool> nestedEquals);
    internal static bool DefaultEquals(JoinOperand a, JoinOperand b, Func`3<CriteriaOperator, CriteriaOperator, bool> nestedEquals);
    internal static bool DefaultEquals(BetweenOperator a, BetweenOperator b, Func`3<CriteriaOperator, CriteriaOperator, bool> nestedEquals);
    internal static bool DefaultEquals(InOperator a, InOperator b, Func`3<CriteriaOperator, CriteriaOperator, bool> nestedEquals);
    internal static bool DefaultEquals(BinaryOperator a, BinaryOperator b, Func`3<CriteriaOperator, CriteriaOperator, bool> nestedEquals);
    internal static bool DefaultEquals(GroupOperator a, GroupOperator b, Func`3<CriteriaOperator, CriteriaOperator, bool> nestedEquals);
    internal static bool DefaultEquals(UnaryOperator a, UnaryOperator b, Func`3<CriteriaOperator, CriteriaOperator, bool> nestedEquals);
    internal static bool DefaultEquals(FunctionOperator a, FunctionOperator b, Func`3<CriteriaOperator, CriteriaOperator, bool> nestedEquals);
    private static bool AreEquals(IList`1<CriteriaOperator> a, IList`1<CriteriaOperator> b, Func`3<CriteriaOperator, CriteriaOperator, bool> nestedEquals);
    public static Func`3<CriteriaOperator, CriteriaOperator, bool> BuildEqualityComparisonWithOverrides(Func`3<CriteriaOperator, CriteriaOperator, Nullable`1<bool>> overrides);
    public static Func`2<CriteriaOperator, int> BuildHashCodeCalculatorWithOverrides(Func`2<CriteriaOperator, Nullable`1<int>> overrides);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaLexer : object {
    internal bool RecogniseSortings;
    private TextReader InputReader;
    public int CurrentToken;
    public object CurrentValue;
    private bool isAfterColumn;
    private int _line;
    private int _col;
    private int _currentLine;
    private int _currentCol;
    private int _pos;
    private int _currentTokenPos;
    private char wasChar;
    private bool preread;
    private int valuepreread;
    private StringBuilder _stringBuilder;
    public static bool DisableNativeDateTimeOffsetSupport { get; public set; }
    public static bool DisableNativeDateTimeOnlySupport { get; public set; }
    public static bool ParseVeryWideIntegerToDoubleInsteadOfDecimalCompatibilityFallback { get; public set; }
    protected bool SkipCommentTokens { get; }
    public int Line { get; }
    public int Col { get; }
    public int Position { get; }
    public int CurrentTokenPosition { get; }
    public CriteriaLexer(TextReader inputReader);
    public static bool CanStartColumn(char value);
    public static bool CanContinueColumn(char value);
    public static bool IsGoodUnescapedName(string fnName);
    public static bool get_DisableNativeDateTimeOffsetSupport();
    public static void set_DisableNativeDateTimeOffsetSupport(bool value);
    public static bool get_DisableNativeDateTimeOnlySupport();
    public static void set_DisableNativeDateTimeOnlySupport(bool value);
    public static bool get_ParseVeryWideIntegerToDoubleInsteadOfDecimalCompatibilityFallback();
    public static void set_ParseVeryWideIntegerToDoubleInsteadOfDecimalCompatibilityFallback(bool value);
    protected virtual bool get_SkipCommentTokens();
    public int get_Line();
    public int get_Col();
    public int get_Position();
    public int get_CurrentTokenPosition();
    private sealed virtual override bool DevExpress.Data.Filtering.Helpers.yyInput.advance();
    private sealed virtual override int DevExpress.Data.Filtering.Helpers.yyInput.token();
    private sealed virtual override object DevExpress.Data.Filtering.Helpers.yyInput.value();
    public bool Advance();
    protected int ReadNextChar();
    protected int PeekNextChar();
    protected int PeekNext2Char();
    private void DoSkipCommentsCore();
    public void SkipBlanks();
    private void DoAtColumn();
    private void DoParam();
    private void DoEnclosedColumn();
    private void DoString();
    private void DoUserObject();
    private void DoConstGuid();
    private void DoDateTimeConst();
    private void CatchAll(char firstChar);
    private void DoNumber(char firstSymbol);
    private string GetNumericCode();
    private void DoDotOrNumber();
    private StringBuilder GetStringBuilder();
    private string ReadToLoneSharp();
    private string DoneWithStringBuilder(StringBuilder sb);
    protected virtual object ExtractUserValue(string tag, string data);
    protected virtual void ExtractUserValueLastChance(UserValueProcessingEventArgs e);
    public virtual void YYError(string message, Object[] args);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaLexerToken : object {
    private CriteriaOperator criteriaOperator;
    private int token;
    private int position;
    private int length;
    [EditorBrowsableAttribute("1")]
public string ListName;
    public CriteriaOperator CriteriaOperator { get; }
    public int Token { get; }
    public int Position { get; }
    public int Length { get; }
    public int PositionEnd { get; }
    public TokenType TokenType { get; }
    public CriteriaLexerToken(CriteriaOperator criteriaOperator, int token, int pos, int len);
    public CriteriaOperator get_CriteriaOperator();
    public int get_Token();
    public int get_Position();
    public int get_Length();
    public int get_PositionEnd();
    public TokenType get_TokenType();
    public static TokenType GetNextTokenType(TokenType previousToken);
    protected virtual TokenType ToTokenType();
}
public class DevExpress.Data.Filtering.Helpers.CriteriaLexerTokenHelper : object {
    private string data;
    private List`1<CriteriaLexerToken> tokenList;
    public List`1<CriteriaLexerToken> TokenList { get; }
    protected string Data { get; }
    public CriteriaLexerTokenHelper(string data);
    public List`1<CriteriaLexerToken> get_TokenList();
    protected string get_Data();
    public CriteriaLexerToken FindToken(int position);
    public bool IsAggregate(int position);
    public TokenType GetTokenType(int position);
    public string GetTokenText(int position);
    public object GetTokenValue(int position);
    public void GetTokenPositionLength(int position, Int32& startPosition, Int32& length);
    public CriteriaLexerToken GetNeighborToken(int position, bool leftNeighbor);
    public TokenType GetNextTokenType(int position);
    public void GetNeighborTokenRange(int position, bool leftNeighbor, Int32& startPosition, Int32& length);
    public TokenType GetNeighborTokenType(int position, bool leftNeighbor);
    public string ConvertProperties(ConvertPropertyDelegate convertMethod);
    public string ConvertProperties(bool forceBrackets, ConvertPropertyDelegate convertMethod);
    public string ConvertParameters(bool propertyToParameter, Dictionary`2<string, string> renamingMap);
    private string ConvertTokens(bool forceBrackets, Func`3<CriteriaLexerToken, string, string> convertTokenFunc);
    public string ConvertConstants(ConvertConstantDelegate convertMethod);
    public void UpdateListProperty(bool forceBrackets);
    internal string GetPropertyName(CriteriaLexerToken token);
    private string ConvertPropertyToken(bool forceBrackets, ConvertPropertyDelegate convertMethod, CriteriaLexerToken token, string listName);
    private string ConvertParameterToken(bool propertyToParameter, Dictionary`2<string, string> renamingMap, CriteriaLexerToken token, string listName);
    private string ConvertConstantToken(ConvertConstantDelegate convertMethod, CriteriaLexerToken propertyToken, CriteriaLexerToken token, string listName);
    protected int FindTokenIndex(int position);
    protected string GetTokenText(CriteriaLexerToken token);
    private List`1<CriteriaLexerToken> Analyze();
}
public class DevExpress.Data.Filtering.Helpers.CriteriaParser : object {
    private CriteriaOperator[] result;
    private List`1<OperandValue> resultParameters;
    private int yyMax;
    private static Int16[] yyLhs;
    private static Int16[] yyLen;
    private static Int16[] yyDefRed;
    protected static Int16[] yyDgoto;
    protected static int yyFinal;
    protected static Int16[] yySindex;
    protected static Int16[] yyRindex;
    protected static Int16[] yyGindex;
    protected static Int16[] yyTable;
    protected static Int16[] yyCheck;
    public CriteriaOperator[] Result { get; }
    public List`1<OperandValue> ResultParameters { get; }
    private static CriteriaParser();
    public CriteriaOperator[] get_Result();
    public List`1<OperandValue> get_ResultParameters();
    private object yyparse(yyInput yyLex);
    public void yyerror(string message);
    public void yyerror(string message, String[] expected);
    public static CriteriaOperator[] Parse(CriteriaLexer _lexer, OperandValue[]& criteriaParametersList);
    public static string AugmentExceptionText(string exceptionMessage, string failedQuery, int failedLine, int failedCol);
    private static CriteriaOperator[] ParseCore(string query, OperandValue[]& criteriaParametersList, bool allowSorting);
    public static CriteriaOperator[] ParseSortings(string sorting);
    public static CriteriaOperator[] ParseList(string criteriaList, OperandValue[]& criteriaParametersList);
    public static CriteriaOperator Parse(string stringCriteria, OperandValue[]& criteriaParametersList);
    private static void CheckFunctionArgumentsCount(FunctionOperator theOperator, bool isImplicitCustomFunction);
    private static AggregateOperand MakeCustomAggregate(IList`1<CriteriaOperator> args, CriteriaOperator condition);
    private static CriteriaOperator MakeJoinOrCustomAggregate(OperandProperty collectionProperty, CriteriaOperator condition, string customAggregateName, IList`1<CriteriaOperator> args);
    private static void ThrowInvalidAggregateArgumentsCount(string aggregateName, int argumentsCount);
}
public enum DevExpress.Data.Filtering.Helpers.CriteriaPriorityClass : Enum {
    public int value__;
    public static CriteriaPriorityClass Atom;
    public static CriteriaPriorityClass Neg;
    public static CriteriaPriorityClass Mul;
    public static CriteriaPriorityClass Add;
    public static CriteriaPriorityClass BinaryNot;
    public static CriteriaPriorityClass BinaryAnd;
    public static CriteriaPriorityClass BinaryXor;
    public static CriteriaPriorityClass BinaryOr;
    public static CriteriaPriorityClass InBetween;
    public static CriteriaPriorityClass CmpGt;
    public static CriteriaPriorityClass CmpEq;
    public static CriteriaPriorityClass IsNull;
    public static CriteriaPriorityClass Not;
    public static CriteriaPriorityClass And;
    public static CriteriaPriorityClass Or;
    public static CriteriaPriorityClass Coalesce;
}
[ExtensionAttribute]
public static class DevExpress.Data.Filtering.Helpers.CriteriaProcessingExtensions : object {
    [ExtensionAttribute]
public static bool ReferenceEqualsNull(CriteriaOperator criterion);
    [ExtensionAttribute]
public static bool Is(CriteriaOperator criterion);
    [ExtensionAttribute]
public static bool Is(CriteriaOperator criterion, T& t);
    [ExtensionAttribute]
public static bool Is(CriteriaOperator criterion, Predicate`1<T> condition);
    [ExtensionAttribute]
public static bool Is(CriteriaOperator criterion, Predicate`1<T> condition, T& t);
    [ExtensionAttribute]
public static void Execute(CriteriaOperator criterion, Action`1<T> action);
    [ExtensionAttribute]
public static void Execute(CriteriaOperator criterion, Action`1<T> action, Action`1<CriteriaOperator> otherwise);
    [ExtensionAttribute]
public static void Execute(CriteriaOperator criterion, Predicate`1<T> condition, Action`1<T> action);
    [ExtensionAttribute]
public static void Execute(CriteriaOperator criterion, Predicate`1<T> condition, Action`1<T> action, Action`1<CriteriaOperator> otherwise);
    [ExtensionAttribute]
public static R Transform(CriteriaOperator criterion, Func`2<T, R> func, Func`2<CriteriaOperator, R> otherwise);
    [ExtensionAttribute]
public static R Transform(CriteriaOperator criterion, Predicate`1<T> condition, Func`2<T, R> func, Func`2<CriteriaOperator, R> otherwise);
    [ExtensionAttribute]
public static CriteriaOperator Transform(CriteriaOperator criterion, Func`2<T, CriteriaOperator> func);
    [ExtensionAttribute]
public static CriteriaOperator Transform(CriteriaOperator criterion, Predicate`1<T> condition, Func`2<T, CriteriaOperator> func);
    [ExtensionAttribute]
public static CriteriaOperator Transform(CriteriaOperator criterion, Predicate`1<T> condition, Func`2<T, CriteriaOperator> func, Func`2<CriteriaOperator, CriteriaOperator> otherwise);
    [ExtensionAttribute]
public static int GetHashCodeNullSafe(CriteriaOperator criterion);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaToBasicStyleParameterlessProcessor : CriteriaToStringParameterlessProcessor {
    protected static CriteriaToBasicStyleParameterlessProcessor Instance;
    private static CriteriaToBasicStyleParameterlessProcessor();
    public static string GetBasicOperatorString(BinaryOperatorType opType);
    public static string GetBasicOperatorString(UnaryOperatorType opType);
    public static string GetBasicOperatorString(GroupOperatorType opType);
    public virtual string GetOperatorString(UnaryOperatorType opType);
    public virtual string GetOperatorString(BinaryOperatorType opType);
    public virtual string GetOperatorString(GroupOperatorType opType);
    public static string ToString(CriteriaOperator operand);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaToBasicStyleWithParametersProcessor : CriteriaToStringWithParametersProcessor {
    public virtual string GetOperatorString(UnaryOperatorType opType);
    public virtual string GetOperatorString(BinaryOperatorType opType);
    public virtual string GetOperatorString(GroupOperatorType opType);
    public static string ToString(CriteriaOperator criteria, OperandValue[]& parameters);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaToCStyleParameterlessProcessor : CriteriaToStringParameterlessProcessor {
    protected static CriteriaToCStyleParameterlessProcessor Instance;
    private static CriteriaToCStyleParameterlessProcessor();
    public static string GetCOperatorString(BinaryOperatorType opType);
    public static string GetCOperatorString(UnaryOperatorType opType);
    public static string GetCOperatorString(GroupOperatorType opType);
    public virtual string GetOperatorString(UnaryOperatorType opType);
    public virtual string GetOperatorString(BinaryOperatorType opType);
    public virtual string GetOperatorString(GroupOperatorType opType);
    public static string ToString(CriteriaOperator operand);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaToCStyleWithParametersProcessor : CriteriaToStringWithParametersProcessor {
    public virtual string GetOperatorString(UnaryOperatorType opType);
    public virtual string GetOperatorString(BinaryOperatorType opType);
    public virtual string GetOperatorString(GroupOperatorType opType);
    public static string ToString(CriteriaOperator criteria, OperandValue[]& parameters);
}
public abstract class DevExpress.Data.Filtering.Helpers.CriteriaToStringBase : object {
    public static bool SuppressFuncNormalization;
    public static bool SuppressIsNullFuncSpecialProcessing;
    public virtual CriteriaToStringVisitResult Visit(QueryOperand operand);
    public virtual CriteriaToStringVisitResult Visit(QuerySubQueryContainer operand);
    protected string ProcessToCommaDelimitedList(IEnumerable`1<CriteriaOperator> operands);
    protected virtual string GetBetweenText();
    public virtual CriteriaToStringVisitResult Visit(BetweenOperator operand);
    public abstract virtual string GetOperatorString(BinaryOperatorType opType);
    public virtual CriteriaToStringVisitResult Visit(BinaryOperator operand);
    public abstract virtual string GetOperatorString(UnaryOperatorType opType);
    protected virtual string GetIsNotNullText();
    private CriteriaToStringVisitResult CreateIsNotNull(CriteriaOperator arg);
    protected virtual string GetNotLikeText();
    private CriteriaToStringVisitResult CreateNotLike(CriteriaOperator left, CriteriaOperator right);
    protected virtual string GetLikeText();
    private CriteriaToStringVisitResult CreateLike(CriteriaOperator left, CriteriaOperator right);
    public virtual CriteriaToStringVisitResult Visit(UnaryOperator operand);
    protected virtual string GetIsNullText();
    protected virtual string GetInText();
    public virtual CriteriaToStringVisitResult Visit(InOperator operand);
    public abstract virtual string GetOperatorString(GroupOperatorType opType);
    public virtual CriteriaToStringVisitResult Visit(GroupOperator operand);
    public abstract virtual CriteriaToStringVisitResult Visit(OperandValue operand);
    protected virtual string GetFunctionText(FunctionOperatorType operandType);
    public virtual CriteriaToStringVisitResult Visit(FunctionOperator operand);
    protected virtual string GetCustomFunctionText(string p);
    protected virtual string GetOperatorString(Aggregate operandType);
    public virtual CriteriaToStringVisitResult Visit(AggregateOperand operand);
    public virtual CriteriaToStringVisitResult Visit(JoinOperand operand);
    private string AggregateToString(Aggregate aggregateType, CriteriaOperator aggregatedExpression);
    private string AggregateToString(string customAggregateName, CriteriaOperatorCollection operands, bool isTopLevel);
    public static string PropertyNameToString(string propertyName);
    public virtual CriteriaToStringVisitResult Visit(OperandProperty operand);
    protected CriteriaToStringVisitResult Process(CriteriaOperator operand);
    [CompilerGeneratedAttribute]
private string <ProcessToCommaDelimitedList>b__2_0(CriteriaOperator op);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaToStringLegacyProcessor : CriteriaToBasicStyleParameterlessProcessor {
    protected static CriteriaToStringLegacyProcessor Instance;
    private static CriteriaToStringLegacyProcessor();
    public virtual CriteriaToStringVisitResult Visit(OperandValue operand);
    public static string ToString(CriteriaOperator operand);
}
public abstract class DevExpress.Data.Filtering.Helpers.CriteriaToStringParameterlessProcessor : CriteriaToStringBase {
    private static string nullString;
    private static bool toStringInfoThrown;
    public static string ValueToString(object value);
    public static string ValueToString(object value, bool isLegacy);
    private static string StandardOrUserTypeToString(object value, bool isLegacy);
    private static string UserTypeToString(object value, bool isLegacy);
    internal static TypeConverter GetTypeConverter(Type type);
    internal static TypeConverter GetTypeConverter(object value);
    public static string OperandValueOrParameterToString(OperandValue val, bool isLegacy);
    private static bool GuessIsNormalParseableNumber(string numberStr);
    private static string FinishFractionalNumberToString(object value, string numberToString, bool isLegacy, TypeCode tc);
    private static string GetSuffix(TypeCode tc);
    public static CriteriaToStringVisitResult ValueToCriteriaToStringVisitResult(OperandValue operand);
    public virtual CriteriaToStringVisitResult Visit(OperandValue operand);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaToStringVisitResult : object {
    private static string NullCriteriaResult;
    public string Result;
    public CriteriaPriorityClass Priority;
    public static CriteriaToStringVisitResult Null;
    public bool IsNull { get; }
    public CriteriaToStringVisitResult(string result, CriteriaPriorityClass priorityClass);
    public CriteriaToStringVisitResult(string result);
    private static CriteriaToStringVisitResult();
    public bool get_IsNull();
    public string GetEnclosedResult();
    public string GetEnclosedResultOnGreaterOrEqual(CriteriaPriorityClass basePriority);
    public string GetEnclosedResultOnGreater(CriteriaPriorityClass basePriority);
}
public abstract class DevExpress.Data.Filtering.Helpers.CriteriaToStringWithParametersProcessor : CriteriaToStringBase {
    public static string ParameterPrefix;
    protected List`1<OperandValue> Parameters;
    public virtual CriteriaToStringVisitResult Visit(OperandValue operand);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaToTreeProcessor : object {
    protected INodesFactory Factory;
    protected INodesFactoryEx FactoryEx;
    protected IExpressionNodeFactory ExpressionFactory;
    private bool supportFunctions;
    private bool supportExpressions;
    public IList`1<CriteriaOperator> Skipped;
    private CriteriaOperator[] NoOperands;
    protected CriteriaToTreeProcessor(INodesFactory nodesFactory, IList`1<CriteriaOperator> skippedHolder);
    protected CriteriaToTreeProcessor(INodesFactory nodesFactory, IList`1<CriteriaOperator> skippedHolder, bool supportFunctions, bool supportExpressions);
    protected IClauseNode Skip(CriteriaOperator skip);
    protected IClauseNode CreateClauseNode(CriteriaOperator original, ClauseType type, CriteriaOperator firstOperand, ICollection`1<CriteriaOperator> operands);
    private sealed virtual override INode DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(OperandProperty theOperand);
    private sealed virtual override INode DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(AggregateOperand theOperand);
    private sealed virtual override INode DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(JoinOperand theOperand);
    private INode CreateNodeForUnaryClause(FunctionOperator theOperator, ClauseType clauseType);
    private INode TryCreateNodeForFunctionClause(FunctionOperator theOperator, CriteriaOperator operandProperty, CriteriaOperator additionalOperand);
    private INode TryCreateNodeForFunctionWithOperandsClause(FunctionOperator theOperator);
    private sealed virtual override INode DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(FunctionOperator theOperator);
    private INode DoStartsEndsContains(FunctionOperator opa);
    private sealed virtual override INode DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(OperandValue theOperand);
    private sealed virtual override INode DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(GroupOperator theOperator);
    private sealed virtual override INode DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(InOperator theOperator);
    private sealed virtual override INode DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(UnaryOperator theOperator);
    private static ClauseType GetInvertedOperation(IClauseNode subNode);
    private sealed virtual override INode DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(BinaryOperator theOperator);
    private sealed virtual override INode DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.INode>.Visit(BetweenOperator theOperator);
    private INode Process(CriteriaOperator op);
    public static INode GetTree(INodesFactory nodesFactory, CriteriaOperator op, IList`1<CriteriaOperator> skippedCriteria, bool supportFunctions, bool supportExpressions);
    public static bool IsConvertibleOperator(CriteriaOperator opa, bool supportFunctions, bool supportExpressions);
    protected IExpressionNode CreateExpressionOrSkip(BinaryOperator operand);
    protected IExpressionNode CreateExpressionOrSkip(UnaryOperator operand);
    protected IExpressionNode CreateExpressionOrSkip(BetweenOperator operand);
    protected IExpressionNode CreateExpressionOrSkip(InOperator operand);
    protected IExpressionNode CreateExpressionOrSkip(JoinOperand join);
    protected IExpressionNode CreateExpressionOrSkip(OperandValue value);
    protected IExpressionNode CreateExpressionOrSkip(FunctionOperator function);
    protected IExpressionNode CreateExpressionOrSkip(AggregateOperand aggregate);
    private static bool IsGoodForAdditionalOperands(CriteriaOperator operand);
    private static bool IsGoodForReverse(CriteriaOperator operand, OperandProperty& property);
    private static bool IsGoodForReverse(CriteriaOperator first);
    private static bool IsDateTimeOrUnaryCustomFunction(CriteriaOperator first);
    private static ClauseType Reverse(ClauseType type);
}
public abstract class DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverBase : object {
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(BetweenOperator theOperator);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(BinaryOperator theOperator);
    private static Type GetBinaryPromotionType(Type left, Type right, BinaryOperatorType exceptionType);
    public static Type GetTypeFromCode(TypeCode typeCode);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(UnaryOperator theOperator);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(InOperator theOperator);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(GroupOperator theOperator);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(OperandValue theOperand);
    protected virtual CriteriaTypeResolverResult Visit(OperandValue theOperand);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(FunctionOperator theOperator);
    private static Type GetMaxMinPromotionType(Type left, Type right, FunctionOperatorType operatorType);
    public CriteriaTypeResolverResult FnIif(FunctionOperator theOperator);
    private Type FnIifProcess(CriteriaOperator operand);
    private Type FnCustom(FunctionOperator theOperator);
    protected virtual Type GetCustomFunctionType(string functionName, Type[] operands);
    protected virtual Type GetCustomAggregateType(string customAggregateName, Type[] operands);
    protected CriteriaTypeResolverResult Process(CriteriaOperator criteria);
}
public class DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult : ValueType {
    private Type type;
    private object tag;
    public Type Type { get; }
    public object Tag { get; }
    public CriteriaTypeResolverResult(Type type);
    public CriteriaTypeResolverResult(Type type, object tag);
    public Type get_Type();
    public object get_Tag();
}
public class DevExpress.Data.Filtering.Helpers.CriteriaValidatorError : object {
    private string text;
    public string Text { get; }
    public CriteriaValidatorError(string text);
    public string get_Text();
}
public class DevExpress.Data.Filtering.Helpers.CustomAggregateResolveHandler : MulticastDelegate {
    public CustomAggregateResolveHandler(object object, IntPtr method);
    public virtual ICustomAggregate Invoke(string customAggregateName);
    public virtual IAsyncResult BeginInvoke(string customAggregateName, AsyncCallback callback, object object);
    public virtual ICustomAggregate EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.Filtering.Helpers.DataSetWhereGenerator : BaseWhereGenerator {
    private static string nullString;
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BinaryOperator theOperator);
    protected virtual string VisitInternal(FunctionOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(OperandValue theOperand);
    private static string AsString(object value);
    private static string FixNonFixedText(string toFix);
    protected virtual string FormatOperandProperty(OperandProperty operand);
}
internal static class DevExpress.Data.Filtering.Helpers.DateOnlyConvertHelper : object {
    private static PropertyInfo pInfoDateOnlyYear;
    private static PropertyInfo pInfoDateOnlyMonth;
    private static PropertyInfo pInfoDateOnlyDay;
    private static MethodInfo FromDateOnlyMethod;
    private static MethodInfo FromDateTimeMethod;
    private static DateOnlyConvertHelper();
    public static Expression TryConvertDateTimeToDateOnly(Expression expr, bool nullable);
    public static Expression TruncateDateTimeToDateOnly(Expression expr, bool nullable);
    private static ConstantExpression CreateDateOnlyConstant(DateTime dateTime, bool nullable);
    public static Expression ConvertDateOnlyToDateTime(Expression expr, bool nullable);
    public static Expression ConvertDateOnlyToDateTime(ICriteriaToEFExpressionConverter ownerEfConverter, EntityQueryTypeInfo queryTypeInfo, Expression expr, bool nullable);
    public static Expression ConvertDateOnlyToDateTime(EntityQueryTypeInfo queryTypeInfo, Expression expr, bool nullable);
    private static Expression DateOnlyToDateFromParts(Expression expr, bool nullable, object efCoreFunctions, MethodInfo efFunctionsDateFromPartsMi);
}
internal static class DevExpress.Data.Filtering.Helpers.DateTimeConvertHelper : object {
    internal static bool TryExtractConstantDateTime(Expression expr, Nullable`1& value);
    internal static Expression WrapWithNullableCheck(Expression expr, Func`2<Expression, Expression> translator);
}
public class DevExpress.Data.Filtering.Helpers.DefaultTopLevelCriteriaCompilerContextDescriptor : CriteriaCompilerDescriptor {
    private CriteriaCompilerDescriptor RowDescriptor;
    public Type ObjectType { get; }
    public DefaultTopLevelCriteriaCompilerContextDescriptor(CriteriaCompilerDescriptor rowDescriptor);
    public virtual Type get_ObjectType();
    public virtual Expression MakePropertyAccess(Expression baseExpression, string propertyPath);
    public virtual CriteriaCompilerRefResult DiveIntoCollectionProperty(Expression baseExpression, string collectionName);
}
public class DevExpress.Data.Filtering.Helpers.DefaultTopLevelCriteriaCompilerContextDescriptor`1 : CriteriaCompilerDescriptor {
    public Type ObjectType { get; }
    public virtual Type get_ObjectType();
    public virtual Expression MakePropertyAccess(Expression baseExpression, string propertyPath);
    public virtual Type ResolvePropertyType(Expression baseExpression, string propertyPath);
    public virtual CriteriaCompilerRefResult DiveIntoCollectionProperty(Expression baseExpression, string collectionName);
}
public class DevExpress.Data.Filtering.Helpers.DisplayCriteriaGenerator : object {
    public IDisplayCriteriaGeneratorNamesSource NamesSource;
    protected DisplayCriteriaGenerator(IDisplayCriteriaGeneratorNamesSource namesSource);
    protected virtual CriteriaOperator ProcessPossibleValue(CriteriaOperator possibleProperty, CriteriaOperator possibleValue);
    protected virtual CriteriaOperator ProcessPossibleValue(CriteriaOperator possibleProperty, CriteriaOperator possibleValue, string customFunctionName);
    protected virtual OperandProperty Convert(OperandProperty theOperand);
    protected virtual object ProcessValue(OperandProperty originalProperty, object originalValue);
    protected virtual object ProcessValue(OperandProperty originalProperty, object originalValue, string customFunctionName);
    public virtual CriteriaOperator Visit(OperandProperty theOperand);
    public virtual CriteriaOperator Visit(AggregateOperand theOperand);
    public virtual CriteriaOperator Visit(JoinOperand theOperand);
    public virtual CriteriaOperator Visit(FunctionOperator theOperator);
    public virtual CriteriaOperator Visit(OperandValue theOperand);
    public virtual CriteriaOperator Visit(GroupOperator theOperator);
    public virtual CriteriaOperator Visit(InOperator theOperator);
    public virtual CriteriaOperator Visit(UnaryOperator theOperator);
    public virtual CriteriaOperator Visit(BinaryOperator theOperator);
    public virtual CriteriaOperator Visit(BetweenOperator theOperator);
    protected virtual CriteriaOperator Process(CriteriaOperator inputValue);
    public static CriteriaOperator Process(IDisplayCriteriaGeneratorNamesSource namesSource, CriteriaOperator op);
}
public static class DevExpress.Data.Filtering.Helpers.DisplayCriteriaGeneratorPathed : object {
    public static CriteriaOperator Process(IDisplayCriteriaGeneratorNamesSourcePathed namesSource, CriteriaOperator op);
    public static CriteriaOperator ProcessOnlyPaths(IDisplayCriteriaGeneratorNamesSourcePathed namesSource, CriteriaOperator op);
    public static CriteriaOperator ProcessVisual(IDisplayCriteriaGeneratorNamesSourcePathed namesSource, CriteriaOperator op);
}
public class DevExpress.Data.Filtering.Helpers.DisplayNameVisitor : object {
    private Stack`1<string> listPath;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IBoundProperty> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromEditor>k__BackingField;
    internal bool DryRun;
    internal IBoundProperty LastFoundProperty;
    public IEnumerable`1<IBoundProperty> Columns { get; public set; }
    public bool FromEditor { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<IBoundProperty> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IEnumerable`1<IBoundProperty> value);
    [CompilerGeneratedAttribute]
public bool get_FromEditor();
    [CompilerGeneratedAttribute]
public void set_FromEditor(bool value);
    public virtual void Visit(InOperator theOperator);
    public virtual void Visit(BinaryOperator theOperator);
    private string GetCurrentPath();
    protected IBoundProperty GetCurrentProperty(string lastPropertyName);
    private IBoundProperty SearchColumn(IEnumerable`1<IBoundProperty> columns, Func`2<IBoundProperty, string> nameSelector, String& columnName);
    private List`1<List`1<IBoundProperty>> GetListPathColumns(IBoundProperty child);
    private IBoundProperty GetColumnByMixedPath(IBoundProperty root, string columnName, bool toFields, String& patchedPath);
    private IBoundProperty CreateUnknownBoundProperty(List`1<string> path, IBoundProperty property, string columnName, String& patchedPath);
    protected void SafeAccept(CriteriaOperator criteria);
    public virtual void Visit(UnaryOperator theOperator);
    public virtual void Visit(BetweenOperator theOperator);
    public virtual void Visit(JoinOperand theOperand);
    public virtual void Visit(FunctionOperator theOperator);
    public virtual void Visit(OperandValue theOperand);
    public virtual void Visit(GroupOperator theOperator);
    public virtual void Visit(AggregateOperand theOperand);
    public virtual void Visit(OperandProperty theOperand);
}
public class DevExpress.Data.Filtering.Helpers.DynamicLinqWhereGenerator : BaseWhereGenerator {
    public static bool ThrowOnInvalidNames;
    private static bool unhandledInvalidNameWarningThrown;
    [CompilerGeneratedAttribute]
private static EventHandler`1<OperandPropertyToDynamicLinqIdentifierEventArgs> OperandPropertyToDynamicLinqIdentifier;
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(OperandValue theOperand);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BinaryOperator theOperator);
    protected virtual string VisitInternal(FunctionOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(UnaryOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(InOperator theOperator);
    [CompilerGeneratedAttribute]
public static void add_OperandPropertyToDynamicLinqIdentifier(EventHandler`1<OperandPropertyToDynamicLinqIdentifierEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OperandPropertyToDynamicLinqIdentifier(EventHandler`1<OperandPropertyToDynamicLinqIdentifierEventArgs> value);
    private static string GetValidNameDefault(string propertyName);
    private static bool isNeedAt(string validName);
    protected virtual string FormatOperandProperty(OperandProperty operand);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Filtering.Helpers.EmptyEnumerable`1 : object {
    public static EmptyEnumerable`1<T> Instance;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    private static EmptyEnumerable`1();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual T get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Filtering.Helpers.ErrorsEvaluatorCriteriaValidator : BoundPropertyList {
    protected List`1<CriteriaValidatorError> errors;
    private static string IncorrectDataAssignedToProperty;
    public CriteriaValidatorError Item { get; }
    public int Count { get; }
    protected string InvalidPropertyMessage { get; }
    public ErrorsEvaluatorCriteriaValidator(List`1<IBoundProperty> properties);
    public CriteriaValidatorError get_Item(int index);
    public int get_Count();
    public virtual void Visit(BetweenOperator theOperator);
    public virtual void Visit(BinaryOperator theOperator);
    public virtual void Visit(UnaryOperator theOperator);
    public virtual void Visit(InOperator theOperator);
    public virtual void Visit(GroupOperator theOperator);
    public virtual void Visit(OperandValue theOperand);
    public virtual void Visit(FunctionOperator theOperator);
    public virtual void Visit(OperandProperty theOperand);
    protected bool IsListProperty(IBoundProperty property);
    public virtual void Visit(AggregateOperand theOperand);
    public virtual void Visit(JoinOperand theOperand);
    public void Clear();
    public void Validate(string filter);
    public void Validate(IList operands);
    public virtual void Validate(CriteriaOperator criteria);
    protected void ValidateOperandType(CriteriaOperator op1, CriteriaOperator op2);
    protected virtual bool verifyOperandType(CriteriaOperator op1, CriteriaOperator op2, IBoundProperty& filterProperty);
    protected virtual object GetFilterColumnValueForValidation(IBoundProperty filterProperty, object value);
    protected virtual object GetCorrectFiltereColumnValue(IBoundProperty filterProperty, object value);
    protected virtual Type GetFilterColumnType(IBoundProperty filterProperty);
    protected bool verifyOperandType(CriteriaOperator op, Type type);
    protected IBoundProperty GetFilterPropertyByPropertyName(OperandProperty property);
    protected virtual string get_InvalidPropertyMessage();
}
public static class DevExpress.Data.Filtering.Helpers.EvalHelpers : object {
    private static HashSet`1<FunctionOperatorType> timeOnlyFunctions;
    private static HashSet`1<FunctionOperatorType> advancedOutlookIntervalFunctions;
    private static Dictionary`2<TypeCode, Dictionary`2<TypeCode, TypeCode>> BinaryNumericPromotions;
    private static Type stringType;
    private static bool _useConcatInsteadOfPlusWithStringOperandsWarningThrown;
    public static bool ConcatNullYieldsNull;
    private static EvalHelpers();
    public static bool IsLocalDateTime(FunctionOperatorType type);
    public static bool IsDateTime(FunctionOperatorType type);
    public static DateTime EvaluateLocalDateTime(FunctionOperatorType type);
    internal static bool IsDateOnlyFunc(Type[] invokeTypes);
    private static bool IsDateOnlyFunc(Type[] invokeTypes, Type implicitType);
    internal static bool IsTimeOnlyFunc(Type[] invokeTypes);
    private static bool IsTimeOnlyFunc(Type[] invokeTypes, Type implicitType);
    internal static bool IsDateTime(Type type);
    internal static bool IsDateOnly(Type type);
    internal static bool IsTimeOnly(Type type);
    internal static bool IsDate(Type type);
    internal static bool IsDateExact(Type type);
    public static DateTime GetWeekStart(DateTime now);
    public static DateTime GetWeekStart(DateTime now, DateTimeFormatInfo dtfi);
    internal static HashSet`1<FunctionOperatorType> GetTimeOnlyFunctions();
    private static void PopulateTimeOnlyFunctions();
    public static bool IsTimeOnlyFunction(FunctionOperatorType functionOperatorType);
    internal static HashSet`1<FunctionOperatorType> GetAdvancedOutlookIntervalFunctions();
    private static void PopulateAdvancedOutlookIntervalFunctions();
    public static bool IsAdvancedOutlookInterval(FunctionOperatorType functionOperatorType);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use IsExpandableLogicalIntrinsicFunction instead")]
public static bool IsOutlookInterval(FunctionOperatorType functionOperatorType);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use ExpandLogicalIntrinsicFunction instead")]
public static CriteriaOperator ExpandIsOutlookInterval(FunctionOperator theOperator);
    public static bool IsExpandableLogicalIntrinsicFunction(FunctionOperatorType functionOperatorType);
    public static int CompareObjects(object left, object right, bool isEqualityCompare, bool caseSensitive, IComparer customComparer);
    private static object ConvertValue(object value, Type valType, Type type);
    public static object DoObjectsPlus(object left, object right);
    public static object DoObjectsPlusChecked(object left, object right);
    public static object DoObjectsMinus(object left, object right);
    public static object DoObjectsMinusChecked(object left, object right);
    public static object DoObjectsMultiply(object left, object right);
    public static object DoObjectsMultiplyChecked(object left, object right);
    public static object DoObjectsDivide(object left, object right);
    public static object DoObjectsModulo(object left, object right);
    public static object DoObjectsBitwiseAnd(object left, object right);
    public static object DoObjectsBitwiseOr(object left, object right);
    public static object DoObjectsBitwiseXor(object left, object right);
    public static Type GetBinaryNumericPromotionType(Type leftType, Type rightType);
    public static TypeCode GetBinaryNumericPromotionCode(Type left, Type right, BinaryOperatorType exceptionType, bool raiseException);
    public static TypeCode GetBinaryNumericPromotionCode(Type left, Type right, string operatorName, string operatorTypeName, bool raiseException);
    internal static void BinaryOperatorPlusWithStringOperandsNotification();
    private static TypeCode GetBinaryNumericPromotionCode(object left, object right, BinaryOperatorType exceptionType);
    private static double FnRnd();
    private static object FnAbsObject(object op);
    private static Nullable`1<int> FnSignObject(object op);
    private static object FnRoundObject(object op, Nullable`1<int> precision);
    private static object FnCeilingObject(object op);
    private static object FnFloorObject(object op);
    private static object FnMinMaxObjectCore(object a, object b, bool isMin, bool isCaseSensitive);
    private static object ThrowExpressionEvaluatorOperatorSubtypeNotSupported(FunctionOperatorType type, object op);
    private static T ThrowExpressionEvaluatorOperatorSubtypeNotSupported(FunctionOperatorType type, object op);
    public static Expression LinqSafeToString(Expression e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use LinqSafeToString (produces clean, linq-compatible expression) or SafeToString(Expression e, bool captureContext) (for compilation) instead")]
public static Expression SafeToString(Expression e);
    public static Expression SafeToString(Expression e, bool captureContext);
    private static char LatinToLower(char ch);
    public static string CaseInsensitiveReplaceBody(string sourceString, string oldValue, string newValue, CompareInfo compareInfo);
    public static object KillDBNull(object nullableSomethig);
    public static LambdaExpression MakeFnLambda(FunctionOperatorType functionOperatorType, Type[] invokeTypes, bool captureContext, bool caseSensitive, bool is3ValuedLogic, Type implicitType);
    private static LambdaExpression MakeFnGetDate(Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeFnTruncateToMinute(Type[] invokeTypes, bool captureContext);
    public static bool TryExpandAndEvaluateIntrinsics(FunctionOperator theOperator, CriteriaOperator& expanded);
    public static bool TryExpandLogicalIntrinsicFunction(FunctionOperator theOperator, CriteriaOperator& expanded);
    public static CriteriaOperator ExpandLogicalIntrinsicFunction(FunctionOperator theOperator);
    private static CriteriaOperator MakeCurrentHourComparison(CriteriaOperator op, Nullable`1<int> hourDiff);
    private static CriteriaOperator MakeInDateRangeCriteria(CriteriaOperator test, CriteriaOperator begin, CriteriaOperator end);
    private static CriteriaOperator MakeIsSameDayInterval(CriteriaOperator op, DateTime lowerBound, DateTime upperBound);
    private static CriteriaOperator MakeIsSameDayCriteria(FunctionOperator theOperator);
    private static CriteriaOperator MakeIsSameTimeCriteria(FunctionOperator theOperator, FunctionOperatorType diffLevel);
    private static BinaryOperator MakeMonthCriteria(CriteriaOperator op, int month);
    private static CriteriaOperator MakeTypicalOutlookInterval(CriteriaOperator op, FunctionOperatorType lowerBound, FunctionOperatorType upperBound);
    internal static bool TryMakeDateTimeFromPartsIntrinsic(FunctionOperator op, CriteriaOperator& expanded);
    internal static bool TryMakeDateOnlyFromPartsIntrinsic(FunctionOperator op, CriteriaOperator& expanded);
    internal static bool TryMakeTimeOnlyFromPartsIntrinsic(FunctionOperator op, CriteriaOperator& expanded);
    internal static bool TryMakeTruncateTimeToMinuteIntrinsic(FunctionOperator op, CriteriaOperator& expanded);
    private static LambdaExpression MakeMinMax(Type[] invokeTypes, bool isMin, bool captureContext, bool caseSensitive);
    private static LambdaExpression MakeRoundCore(Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeLambdaFromSimpleFunc(Func`1<T> baseLambda, Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeLambdaFromSimpleFunc(Func`2<X, T> baseLambda, Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeLambdaFromSimpleFunc(Func`3<X, Y, T> baseLambda, Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeLambdaFromSimpleFunc(Func`4<X, Y, Z, T> baseLambda, Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeLambdaFromSimpleFunc(Func`5<W, X, Y, Z, T> baseLambda, Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeLambdaFromSimpleFunc(Func`6<V, W, X, Y, Z, T> baseLambda, Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeLambdaFromSimpleFunc(Func`7<U, V, W, X, Y, Z, T> baseLambda, Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeLambdaFromSimpleFunc(Func`8<S, U, V, W, X, Y, Z, T> baseLambda, Type[] invokeTypes, bool captureContext);
    private static LambdaExpression MakeLambdaFromSimpleFuncCore(Delegate baseFunc, Type[] invokeTypes, bool captureContext);
    private static Expression SafeObjectToType(Expression arg, Type destinationType, bool captureContext);
    private static Expression MakeIsNull(Expression expr);
    private static Expression MakeIsNotNull(Expression expr);
    public static object DoCustomAggregate(ICustomAggregate customAggregate, IEnumerable`1<T> collection, Func`2[] operandSelectors);
    public static Expression MakeConvert(Expression expr, Type destinationType);
}
public class DevExpress.Data.Filtering.Helpers.EvaluateCustomFunctionHandler : MulticastDelegate {
    public EvaluateCustomFunctionHandler(object object, IntPtr method);
    public virtual object Invoke(string functionName, Object[] operands);
    public virtual IAsyncResult BeginInvoke(string functionName, Object[] operands, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.Filtering.Helpers.EvaluatorContext : object {
    public EvaluatorContextDescriptor Descriptor;
    public object Source;
    public EvaluatorContext(EvaluatorContextDescriptor descriptor, object source);
    public object GetPropertyValue(EvaluatorProperty propertyPath);
    public EvaluatorContext GetNestedContext(string propertyPath);
    public IEnumerable GetCollectionContexts(string collectionName);
    public IEnumerable GetQueryContexts(string queryTypeName, CriteriaOperator condition, int top);
}
public abstract class DevExpress.Data.Filtering.Helpers.EvaluatorContextDescriptor : object {
    public bool IsTopLevelCollectionSource { get; }
    public abstract virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public abstract virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public abstract virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual IEnumerable GetQueryContexts(object source, string queryTypeName, CriteriaOperator condition, int top);
    public virtual bool get_IsTopLevelCollectionSource();
}
public class DevExpress.Data.Filtering.Helpers.EvaluatorContextDescriptorDefault : EvaluatorContextDescriptor {
    private Type ReflectionType;
    private PropertyDescriptorCollection Properties;
    public IEvaluatorDataAccess DataAccess;
    private static object noResult;
    public EvaluatorContextDescriptorDefault(PropertyDescriptorCollection properties, Type reflectionType);
    public EvaluatorContextDescriptorDefault(PropertyDescriptorCollection properties);
    public EvaluatorContextDescriptorDefault(Type reflectionType);
    private static EvaluatorContextDescriptorDefault();
    private object GetPropertyValue(object source, string property, bool isPath);
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual IEnumerable GetQueryContexts(object source, string collectionTypeName, CriteriaOperator condition, int top);
}
public class DevExpress.Data.Filtering.Helpers.EvaluatorCriteriaValidator : object {
    private PropertyDescriptorCollection Properties;
    public EvaluatorCriteriaValidator(PropertyDescriptorCollection properties);
    public virtual void Visit(BetweenOperator theOperator);
    public virtual void Visit(BinaryOperator theOperator);
    public virtual void Visit(UnaryOperator theOperator);
    public virtual void Visit(InOperator theOperator);
    public virtual void Visit(GroupOperator theOperator);
    public virtual void Visit(OperandValue theOperand);
    public virtual void Visit(FunctionOperator theOperator);
    public virtual void Visit(OperandProperty theOperand);
    public virtual void Visit(AggregateOperand theOperand);
    public virtual void Visit(JoinOperand theOperand);
    public void Validate(CriteriaOperator criteria);
    public void Validate(IList operands);
}
public class DevExpress.Data.Filtering.Helpers.EvaluatorProperty : object {
    private EvaluatorProperty subProperty;
    public int UpDepth;
    public string PropertyPath;
    private String[] tokenized;
    public EvaluatorProperty SubProperty { get; }
    public String[] PropertyPathTokenized { get; }
    protected EvaluatorProperty(string sourcePath);
    public static int GetPropertySeparatorDotPos(string property);
    public static int GetPropertySeparatorDotPos(string property, int startPos);
    public static int CalcCollectionPropertyDepth(string prop);
    public static String[] Split(string prop);
    public EvaluatorProperty get_SubProperty();
    public String[] get_PropertyPathTokenized();
    public static EvaluatorProperty Create(OperandProperty property);
    public static bool GetIsThisProperty(string propertyName);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Filtering.Helpers.EvaluatorPropertyCache : object {
    private Dictionary`2<OperandProperty, EvaluatorProperty> store;
    public EvaluatorProperty Item { get; }
    public EvaluatorProperty get_Item(OperandProperty property);
}
public class DevExpress.Data.Filtering.Helpers.ExpressionEvaluator : object {
    protected internal EvaluatorContextDescriptor DefaultDescriptor;
    protected CriteriaOperator evaluatorCriteria;
    private ExpressionEvaluatorCoreBase evaluatorCore;
    private bool throwExceptionIfNotFoundCustomFunction;
    private CustomFunctionCollection customFunctionCollection;
    private CustomAggregateCollection customAggregateCollection;
    protected ExpressionEvaluatorCoreBase EvaluatorCore { get; }
    unknown IEvaluatorDataAccess DataAccess {public set; }
    public bool ThrowExceptionIfNotFoundCustomFunction { get; public set; }
    protected ExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, bool doCreateEvaluatorCore);
    public ExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive);
    public ExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria);
    public ExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, bool doCreateEvaluatorCore, ICollection`1<ICustomFunctionOperator> customFunctions);
    public ExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, bool doCreateEvaluatorCore, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public ExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public ExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public ExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, ICollection`1<ICustomFunctionOperator> customFunctions);
    public ExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    protected ExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, bool caseSensitive, bool doCreateEvaluatorCore);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, bool caseSensitive);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, string criteria, bool caseSensitive);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, string criteria);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, bool caseSensitive, bool doCreateEvaluatorCore, ICollection`1<ICustomFunctionOperator> customFunctions);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, bool caseSensitive, bool doCreateEvaluatorCore, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, ICollection`1<ICustomFunctionOperator> customFunctions);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, string criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public ExpressionEvaluator(PropertyDescriptorCollection properties, string criteria, ICollection`1<ICustomFunctionOperator> customFunctions);
    protected virtual ExpressionEvaluatorCoreBase get_EvaluatorCore();
    public void set_DataAccess(IEvaluatorDataAccess value);
    protected virtual EvaluatorContext PrepareContext(object valuesSource);
    public object Evaluate(object theObject);
    public object Evaluate(object theObject, IComparer customComparer);
    public Object[] EvaluateOnObjects(IEnumerable objects);
    public Object[] EvaluateOnObjects(IEnumerable objects, IComparer customComparer);
    public bool Fit(object theObject);
    public ICollection Filter(IEnumerable objects);
    public bool get_ThrowExceptionIfNotFoundCustomFunction();
    public void set_ThrowExceptionIfNotFoundCustomFunction(bool value);
    private void RegisterCustomFunctions(ICollection`1<ICustomFunctionOperator> customFunctions);
    private void RegisterCustomAggregates(ICollection`1<ICustomAggregate> customAggregates);
    protected virtual object EvaluateCustomFunction(string functionName, Object[] operands);
    protected virtual ICustomAggregate ResolveCustomAggregate(string customAggregateName);
}
public class DevExpress.Data.Filtering.Helpers.ExpressionEvaluatorCore : ExpressionEvaluatorCoreBase {
    private EvaluatorContext[] contexts;
    private JoinEvaluationContextCache JoinCache;
    protected EvaluatorPropertyCache PropertyCache;
    protected bool HasContext { get; }
    public ExpressionEvaluatorCore(bool caseSensitive);
    public ExpressionEvaluatorCore(bool caseSensitive, EvaluateCustomFunctionHandler evaluateCustomFunction, CustomAggregateResolveHandler resolveCustomAggregate);
    protected sealed virtual void SetContext(EvaluatorContext context);
    protected sealed virtual void ClearContext();
    protected sealed virtual bool get_HasContext();
    protected sealed virtual EvaluatorContext GetContext();
    protected sealed virtual EvaluatorContext GetContext(int upDepth);
    protected sealed virtual void PushCollectionContext(IEnumerable context);
    protected sealed virtual IEnumerable PopCollectionContext();
    private IEnumerable CreateNestedJoinContext(string joinTypeName, CriteriaOperator condition, int top, Boolean& filtered);
    private IEnumerable CreateNestedContext(EvaluatorProperty collectionProperty);
    public virtual object Visit(AggregateOperand theOperand);
    public virtual object Visit(JoinOperand theOperand);
    public virtual object Visit(OperandProperty theOperand);
}
public abstract class DevExpress.Data.Filtering.Helpers.ExpressionEvaluatorCoreBase : object {
    private EvaluateCustomFunctionHandler evaluateCustomFunction;
    private CustomAggregateResolveHandler resolveCustomAggregate;
    private IComparer customComparer;
    private bool caseSensitive;
    private static object TrueValue;
    private static object FalseValue;
    private static Dictionary`2<FnFuncKey, Func`2<Object[], object>> FnFuncs;
    protected IComparer CustomComparer { get; }
    protected internal bool CaseSensitive { get; }
    protected internal bool Is3ValuedLogic { get; }
    protected bool HasContext { get; }
    protected ExpressionEvaluatorCoreBase(bool caseSensitive, EvaluateCustomFunctionHandler evaluateCustomFunction);
    protected ExpressionEvaluatorCoreBase(bool caseSensitive, EvaluateCustomFunctionHandler evaluateCustomFunction, CustomAggregateResolveHandler resolveCustomAggregate);
    private static ExpressionEvaluatorCoreBase();
    protected IComparer get_CustomComparer();
    protected internal bool get_CaseSensitive();
    private object FixValue(object value);
    protected Object[] Process(CriteriaOperatorCollection collection);
    protected object Process(CriteriaOperator operand);
    public virtual object Visit(BetweenOperator theOperator);
    protected int Compare(object left, object right, bool isEqualityCompare);
    protected int Compare(object left, object right);
    public static object BoxBool(bool value);
    public static object BoxBool2VL(Nullable`1<bool> value);
    public static object BoxBool3VL(Nullable`1<bool> value);
    protected internal virtual bool get_Is3ValuedLogic();
    protected bool IsUnknownResult(object value);
    protected bool IsUnknownResult(object value1, object value2);
    public virtual object Visit(BinaryOperator theOperator);
    public virtual object Visit(InOperator theOperator);
    public virtual object Visit(GroupOperator theOperator);
    public virtual object Visit(FunctionOperator theOperator);
    private object FnIsSameDay(FunctionOperator theOperator);
    private object FnIif(FunctionOperator theOperator);
    private object FnCustom(FunctionOperator theOperator);
    private object FnIsNull(FunctionOperator theOperator);
    private static object EvaluateLambdableFunction(FunctionOperatorType fnType, bool caseSensitive, bool is3ValuedLogic, Object[] args);
    public virtual object Visit(OperandValue theOperand);
    private object UnaryNumericPromotions(object operand);
    public virtual object Visit(UnaryOperator theOperator);
    private void DoAggregate(AggregateProcessingParam param, IEnumerable contextsCollection, CriteriaOperator filterExpression, CriteriaOperator expression);
    private void DoCustomAggregate(CustomAggregateProcessingParam param, IEnumerable contextsCollection, CriteriaOperator filterExpression, CriteriaOperatorCollection aggregatedExpressions);
    protected object DoCustomAggregate(string customAggregateName, IEnumerable contextsCollection, CriteriaOperator filterExpression, CriteriaOperatorCollection aggregatedExpressions);
    protected object DoAggregate(Aggregate aggregateType, IEnumerable contextsCollection, CriteriaOperator filterExpression, CriteriaOperator expression);
    public object Evaluate(EvaluatorContext evaluationContext, CriteriaOperator evaluatorCriteria);
    public object Evaluate(EvaluatorContext evaluationContext, CriteriaOperator evaluatorCriteria, IComparer customComparer);
    public Object[] EvaluateOnObjects(IEnumerable evaluatorContextCollection, CriteriaOperator filterCriteria);
    public Object[] EvaluateOnObjects(IEnumerable evaluatorContextCollection, CriteriaOperator filterCriteria, IComparer customComparer);
    protected abstract virtual bool get_HasContext();
    protected abstract virtual void SetContext(EvaluatorContext context);
    protected abstract virtual void ClearContext();
    protected abstract virtual EvaluatorContext GetContext();
    protected abstract virtual EvaluatorContext GetContext(int upDepth);
    protected virtual void PushCollectionContext(IEnumerable context);
    protected virtual IEnumerable PopCollectionContext();
    public ICollection`1<EvaluatorContext> Filter(ICollection`1<EvaluatorContext> evaluatorContextCollection, CriteriaOperator filterCriteria);
    public bool Fit(EvaluatorContext evaluationContext, CriteriaOperator filterCriteria);
    protected bool Fit(CriteriaOperator filterCriteria);
    [CompilerGeneratedAttribute]
private string <Visit>b__28_0(CriteriaOperator op);
    [CompilerGeneratedAttribute]
private object <Visit>b__28_1(CriteriaOperator o);
}
public enum DevExpress.Data.Filtering.Helpers.FilterColumnClauseClass : Enum {
    public int value__;
    public static FilterColumnClauseClass Generic;
    public static FilterColumnClauseClass DateTime;
    public static FilterColumnClauseClass String;
    public static FilterColumnClauseClass Lookup;
    public static FilterColumnClauseClass Blob;
}
public static class DevExpress.Data.Filtering.Helpers.FilterControlHelpers : object {
    private static Type[] ConvertibleTypes;
    private static FilterControlHelpers();
    public static CriteriaOperator ToCriteria(INode node);
    public static int GetLastElementIndex(INode node);
    public static INode GetNextNodeAfter(IGroupNode currentNode, INode node);
    public static INode GetNextNode(INode currentNode);
    public static INode GetLastNode(INode currentNode);
    public static void ForceAdditionalParamsCount(IList`1<CriteriaOperator> additionalOperands, int expectedCount, bool trim);
    public static void ForceAdditionalParamsCount(IList`1<CriteriaOperator> additionalOperands, int p);
    public static void ValidateAdditionalOperands(ClauseType operation, IList`1<CriteriaOperator> additionalOperands);
    public static void ValidateAdditionalOperands(string functionType, IList`1<CriteriaOperator> additionalOperands);
    public static void ValidateAdditionalOperands(FunctionOperatorType functionType, IList`1<CriteriaOperator> additionalOperands);
    public static bool IsValidClause(ClauseType clause, FilterColumnClauseClass clauseClass);
    public static bool IsValidClause(ClauseType clause, FilterColumnClauseClass clauseClass, bool showIsNullOperatorsForStrings);
    public static bool IsValidFunction(FunctionOperatorType functionType, FilterColumnClauseClass clauseClass);
    public static bool IsValidFunction(ICustomFunctionOperator function, Type propertyType, bool onlyUnary);
    public static bool IsValidFunction(string functionName, Type propertyType, bool onlyUnary);
    public static bool TryGetFunctionType(FunctionOperator functionOp, Object& functionType);
    public static bool TryGetCustomFunctionOperandType(string functionName, int index, Type& operandType);
    public static bool TryGetCustomFunctionOperandType(string functionName, int index, Type valueType, Type& operandType);
    private static bool IsValidCustomFunctionType(FunctionOperator functionOp);
    private static bool IsValidCustomFunctionType(ICustomFunctionOperator function, bool onlyUnary);
    private static bool IsValidResultType(ICustomFunctionOperator function);
    internal static bool IsUnaryCustomFunction(FunctionOperator functionOp);
    private static bool IsUnaryCustomFunction(ICustomFunctionOperator function);
    private static bool IsUnaryCustomFunction(string functionName);
    internal static bool IsBinaryCustomFunction(FunctionOperator functionOp);
    private static bool IsBinaryCustomFunction(ICustomFunctionOperator function);
    private static bool IsValidPropertyOperand(ICustomFunctionOperator function, Type propertyType, bool onlyUnary);
    public static bool TryGetCustomFunctionsFromAttributes(ClauseNode node, IReadOnlyCollection`1& functionNames);
    public static bool TryGetCustomFunctionsFromAttributes(AnnotationAttributes annotationAttributes, Type propertyType, IReadOnlyCollection`1& functionNames, bool onlyUnary);
    private static bool TryGetCustomFunctionsFromAttributes(IEnumerable`1<CustomFunctionAttribute> attributes, Type propertyType, IReadOnlyCollection`1& names, bool onlyUnary);
    public static bool TryGetFunctionImageFromAttribute(ClauseNode node, string functionName, String& image);
    public static bool TryGetFunctionImage(string functionType, Object& image);
    public static bool TryGetDisplayName(string functionType, String& displayName);
    private static bool TryGetFunctionParameter(string functionType, Func`2<ICustomFunctionDisplayAttributes, T> getParameter, T& parameter);
    private static bool TryGetFunctionParameterFromAttribute(ClauseNode node, string functionName, Func`2<CustomFunctionAttribute, string> getParameter, String& parameter);
    public static IReadOnlyCollection`1<string> GetAvailableGlobalCustomFunctions(ClauseNode node);
    public static IReadOnlyCollection`1<string> GetAvailableGlobalCustomFunctions(ClauseNode node, CustomFunctionEventArgs args);
    public static IReadOnlyCollection`1<string> GetAvailableGlobalCustomFunctions(AnnotationAttributes annotationAttributes, CustomFunctionEventArgs args);
    public static IReadOnlyCollection`1<string> GetAvailableCustomFunctions(Type propertyType, bool onlyUnary);
    public static bool TryGetClauseTypeByFunctionOperatorType(FunctionOperatorType functionType, ClauseType& type);
    public static string GetCustomFunctionDisplayValue(string functionType, object value, string displayText);
}
internal class DevExpress.Data.Filtering.Helpers.FilterEditorCriteriaLexer : CriteriaLexer {
    public FilterEditorCriteriaLexer(TextReader reader);
    public virtual void YYError(string message, Object[] args);
}
public static class DevExpress.Data.Filtering.Helpers.FilterTreeCloner : object {
    public static IGroupNode Clone(IGroupNode source, INodesFactory factory);
    private static ICollection`1<INode> Clone(ICollection`1<INode> source, INodesFactory factory);
    private static INode Clone(INode node, INodesFactory factory);
    private static ICollection`1<CriteriaOperator> Clone(ICollection`1<CriteriaOperator> source);
    private static IClauseNode Clone(IClauseNode source, INodesFactory factory);
    private static IExpressionNode Clone(IExpressionNode source, INodesFactory factory);
    public static void Serialize(IGroupNode source, Stream stream);
    public static IGroupNode Deserialize(Stream stream, INodesFactory factory);
    private static void SerializeNode(INode node, TypedBinaryWriter writer);
    private static INode DeserializeNode(TypedBinaryReader reader, INodesFactory factory);
    private static void SerializeGroupNode(IGroupNode source, TypedBinaryWriter writer);
    private static IGroupNode DeserializeGroupNode(TypedBinaryReader reader, INodesFactory factory);
    private static void SerializeClauseNode(IClauseNode source, TypedBinaryWriter writer);
    private static void SerializeExpressionNode(IExpressionNode source, TypedBinaryWriter writer);
    private static void SerializeAggregateNode(IAggregateNode source, TypedBinaryWriter writer);
    private static void DeserializeClauseNode(TypedBinaryReader reader, ClauseType& clauseType, CriteriaOperator& firstOperand, Collection`1<CriteriaOperator> operands, INodesFactory factory);
    private static IClauseNode DeserializeClauseNode(TypedBinaryReader reader, INodesFactory factory);
    private static IExpressionNode DeserializeExpressionNode(TypedBinaryReader reader, INodesFactory factory);
    private static IAggregateNode DeserializeAggregateNode(TypedBinaryReader reader, INodesFactory factory);
    private static CriteriaOperator CriteriaParse(string criteria, INodesFactory factory);
    public static string ToString(IGroupNode source);
    public static IGroupNode FromString(string str, INodesFactory factory);
}
public class DevExpress.Data.Filtering.Helpers.FunctionOperatorHelper : object {
    private static Dictionary`2<FunctionOperatorType, Dictionary`2<int, FunctionInfo>> functionInfoStaticDict;
    private static List`1<FunctionInfo> aggregateFunctionInfo;
    private static FunctionOperatorHelper();
    public static FunctionInfo GetFunctionInfo(IExpressionEditor editor, FunctionOperatorType functionType, int argumentsCount);
    private static FunctionInfo GetLocalizedFunctionInfo(IExpressionEditor editor, FunctionInfo functionInfo);
    public static void GetAllCustomFunctionInfo(IExpressionEditor editor, List`1<FunctionInfo> result);
    public static void GetAllCustomAggregateInfo(IExpressionEditor editor, List`1<FunctionInfo> result);
    private static void GenerateArgumentVariants(List`1<FunctionInfo> result, Func`3<int, int, bool> predicate, int minArgs, int maxArgs, string description, string name, FunctionEditorCategory category);
    private static FunctionEditorCategory ToFunctionEditorCategory(FunctionCategory category, string name);
    public static FunctionInfo[] GetAllFunctionInfo(IExpressionEditor editor);
    public static bool IsValidCustomFunctionArgumentsCount(string functionName, int argumentsCount);
    public static Int32[] GetFunctionArgumentsCount(FunctionOperatorType functionType);
}
public class DevExpress.Data.Filtering.Helpers.GetBoundPropertyByFieldName : MulticastDelegate {
    public GetBoundPropertyByFieldName(object object, IntPtr method);
    public virtual IBoundProperty Invoke(string fieldName);
    public virtual IAsyncResult BeginInvoke(string fieldName, AsyncCallback callback, object object);
    public virtual IBoundProperty EndInvoke(IAsyncResult result);
}
public enum DevExpress.Data.Filtering.Helpers.GroupType : Enum {
    public int value__;
    public static GroupType And;
    public static GroupType Or;
    public static GroupType NotAnd;
    public static GroupType NotOr;
}
public interface DevExpress.Data.Filtering.Helpers.IAggregateNode {
    public Aggregate Aggregate { get; }
    public OperandProperty AggregateOperand { get; }
    public INode AggregateCondition { get; public set; }
    public abstract virtual Aggregate get_Aggregate();
    public abstract virtual OperandProperty get_AggregateOperand();
    public abstract virtual INode get_AggregateCondition();
    public abstract virtual void set_AggregateCondition(INode value);
}
public interface DevExpress.Data.Filtering.Helpers.IAggregateOperand {
    public CriteriaOperator Condition { get; public set; }
    public object AggregationObject { get; public set; }
    public CriteriaOperator AggregatedExpression { get; public set; }
    public Aggregate AggregateType { get; public set; }
    public abstract virtual CriteriaOperator get_Condition();
    public abstract virtual void set_Condition(CriteriaOperator value);
    public abstract virtual object get_AggregationObject();
    public abstract virtual void set_AggregationObject(object value);
    public abstract virtual CriteriaOperator get_AggregatedExpression();
    public abstract virtual void set_AggregatedExpression(CriteriaOperator value);
    public abstract virtual Aggregate get_AggregateType();
    public abstract virtual void set_AggregateType(Aggregate value);
}
public interface DevExpress.Data.Filtering.Helpers.IClauseNode {
    public OperandProperty FirstOperand { get; }
    public ClauseType Operation { get; }
    public IList`1<CriteriaOperator> AdditionalOperands { get; }
    public abstract virtual OperandProperty get_FirstOperand();
    public abstract virtual ClauseType get_Operation();
    public abstract virtual IList`1<CriteriaOperator> get_AdditionalOperands();
}
public interface DevExpress.Data.Filtering.Helpers.IClauseNodeEx {
    public object FunctionType { get; public set; }
    public abstract virtual object get_FunctionType();
    public abstract virtual void set_FunctionType(object value);
}
public interface DevExpress.Data.Filtering.Helpers.IDisplayCriteriaGeneratorNamesSource {
    public abstract virtual string GetDisplayPropertyName(OperandProperty property);
    public abstract virtual string GetValueScreenText(OperandProperty property, object value);
}
public interface DevExpress.Data.Filtering.Helpers.IDisplayCriteriaGeneratorNamesSourcePathed {
    public abstract virtual string GetDisplayPropertyName(OperandProperty property, string fullPath);
    public abstract virtual string GetValueScreenText(OperandProperty property, object value);
}
public interface DevExpress.Data.Filtering.Helpers.IEvaluatorDataAccess {
    public abstract virtual object GetValue(PropertyDescriptor descriptor, object theObject);
}
public interface DevExpress.Data.Filtering.Helpers.IExpressionNode {
    public CriteriaOperator Expression { get; }
    public abstract virtual CriteriaOperator get_Expression();
}
[EditorBrowsableAttribute("1")]
public interface DevExpress.Data.Filtering.Helpers.IExpressionNodeEditable {
    public abstract virtual void SetExpression(CriteriaOperator expression);
}
public interface DevExpress.Data.Filtering.Helpers.IExpressionNodeFactory {
    public abstract virtual IExpressionNode Create(CriteriaOperator expression);
}
public interface DevExpress.Data.Filtering.Helpers.IExpressionNodeVisitor {
    public abstract virtual object Visit(IExpressionNode expression);
}
public interface DevExpress.Data.Filtering.Helpers.IFilteredDataSource {
    public CriteriaOperator Filter { get; public set; }
    public abstract virtual CriteriaOperator get_Filter();
    public abstract virtual void set_Filter(CriteriaOperator value);
}
public interface DevExpress.Data.Filtering.Helpers.IFilteredXtraBindingList {
}
public interface DevExpress.Data.Filtering.Helpers.IGroupNode {
    public GroupType NodeType { get; }
    public IList`1<INode> SubNodes { get; }
    public abstract virtual GroupType get_NodeType();
    public abstract virtual IList`1<INode> get_SubNodes();
}
public interface DevExpress.Data.Filtering.Helpers.ILocalaizableCriteriaToStringProcessorOpNamesSource {
    public abstract virtual string GetString(GroupOperatorType opType);
    public abstract virtual string GetString(UnaryOperatorType opType);
    public abstract virtual string GetString(BinaryOperatorType opType);
    public abstract virtual string GetString(FunctionOperatorType opType);
    public abstract virtual string GetString(Aggregate opType);
    public abstract virtual string GetIsNullString();
    public abstract virtual string GetIsNotNullString();
    public abstract virtual string GetBetweenString();
    public abstract virtual string GetInString();
    public abstract virtual string GetNotLikeString();
}
public interface DevExpress.Data.Filtering.Helpers.INode {
    public IGroupNode ParentNode { get; }
    public abstract virtual IGroupNode get_ParentNode();
    public abstract virtual void SetParentNode(IGroupNode parentNode);
    public abstract virtual object Accept(INodeVisitor visitor);
}
public interface DevExpress.Data.Filtering.Helpers.INodesFactory {
    public abstract virtual IGroupNode Create(GroupType type, ICollection`1<INode> subNodes);
    public abstract virtual IClauseNode Create(ClauseType type, OperandProperty firstOperand, ICollection`1<CriteriaOperator> operands);
}
public interface DevExpress.Data.Filtering.Helpers.INodesFactoryEx {
    public abstract virtual IAggregateNode Create(OperandProperty firstOperand, Aggregate aggregate, OperandProperty aggregateOperand, ClauseType operation, ICollection`1<CriteriaOperator> operands, INode conditionNode);
}
public interface DevExpress.Data.Filtering.Helpers.INodeVisitor {
    public abstract virtual object Visit(IGroupNode group);
    public abstract virtual object Visit(IClauseNode clause);
    public abstract virtual object Visit(IAggregateNode aggregate);
}
public interface DevExpress.Data.Filtering.Helpers.IOperatorDescriptionService {
    public abstract virtual string GetDescription(object operator);
}
public interface DevExpress.Data.Filtering.Helpers.IProxyTypeEnumConverter {
}
public class DevExpress.Data.Filtering.Helpers.IsExactTypeFunction : object {
    public static string FunctionName;
    public static Func`3<object, string, Nullable`1<bool>> EvaluateExternal;
    private static IsExactTypeFunction instance;
    private static MethodInfo objectGetTypeMethod;
    public string Name { get; }
    public FunctionCategory Category { get; }
    public string Description { get; }
    public int MaxOperandCount { get; }
    public int MinOperandCount { get; }
    public string DisplayName { get; }
    public object Image { get; }
    private static IsExactTypeFunction();
    public static void Register();
    public sealed virtual object Evaluate(Object[] operands);
    private static bool Evaluate(object obj, string typeString);
    public sealed virtual string get_Name();
    public sealed virtual Type ResultType(Type[] operands);
    public static bool IsExactType(object obj, Type type);
    public sealed virtual FunctionCategory get_Category();
    public sealed virtual string get_Description();
    public sealed virtual bool IsValidOperandCount(int count);
    public sealed virtual bool IsValidOperandType(int operandIndex, int operandCount, Type type);
    public sealed virtual int get_MaxOperandCount();
    public sealed virtual int get_MinOperandCount();
    public sealed virtual string get_DisplayName();
    public sealed virtual object get_Image();
    public sealed virtual Expression Convert(ICriteriaToExpressionConverter converter, Expression[] operands);
    private Expression CreateTypeEqualExpression(Expression obj, Type targetType);
    public sealed virtual Expression Create(Expression[] operands);
}
public class DevExpress.Data.Filtering.Helpers.IsInstanceOfTypeFunction : object {
    public static string FunctionName;
    public static Func`3<object, string, Nullable`1<bool>> EvaluateExternal;
    private static IsInstanceOfTypeFunction instance;
    public string Name { get; }
    public FunctionCategory Category { get; }
    public string Description { get; }
    public int MaxOperandCount { get; }
    public int MinOperandCount { get; }
    public string DisplayName { get; }
    public object Image { get; }
    private static IsInstanceOfTypeFunction();
    public static void Register();
    public sealed virtual object Evaluate(Object[] operands);
    private static bool Evaluate(object obj, string typeString);
    public sealed virtual string get_Name();
    public sealed virtual Type ResultType(Type[] operands);
    public static bool IsInstanceOfType(object obj, Type type);
    public sealed virtual FunctionCategory get_Category();
    public sealed virtual string get_Description();
    public sealed virtual bool IsValidOperandCount(int count);
    public sealed virtual bool IsValidOperandType(int operandIndex, int operandCount, Type type);
    public sealed virtual int get_MaxOperandCount();
    public sealed virtual int get_MinOperandCount();
    public sealed virtual string get_DisplayName();
    public sealed virtual object get_Image();
    public sealed virtual Expression Convert(ICriteriaToExpressionConverter converter, Expression[] operands);
    public sealed virtual Expression Create(Expression[] operands);
}
public static class DevExpress.Data.Filtering.Helpers.IsInstanceOfTypeFunctionHelper : object {
    private static ConcurrentDictionary`2<string, Type> foundTypes;
    private static IsInstanceOfTypeFunctionHelper();
    public static Expression ConvertToExpression(string customFunctionName, ICriteriaToExpressionConverter converter, Func`3<Expression, Type, Expression> createExpression, Expression[] operands);
    private static Type GetTypeByName(string typeName, Assembly preferredAssembly);
    public static bool EqualsType(string typeString, string objectTypeString);
    public static bool IsInstanceOfType(string typeString, Type objectType);
    public static Type GetNonProxyType(object obj);
}
public class DevExpress.Data.Filtering.Helpers.IsLogicalCriteriaChecker : object {
    public static IsLogicalCriteriaChecker Instance;
    private static IsLogicalCriteriaChecker();
    public sealed virtual BooleanCriteriaState Visit(QueryOperand theOperand);
    public sealed virtual BooleanCriteriaState Visit(QuerySubQueryContainer theOperand);
    public static BooleanCriteriaState GetBooleanState(CriteriaOperator operand);
    public sealed virtual BooleanCriteriaState Visit(AggregateOperand theOperand);
    public sealed virtual BooleanCriteriaState Visit(JoinOperand theOperand);
    public sealed virtual BooleanCriteriaState Visit(OperandProperty theOperand);
    public sealed virtual BooleanCriteriaState Visit(BetweenOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(BinaryOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(UnaryOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(InOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(GroupOperator theOperator);
    public sealed virtual BooleanCriteriaState Visit(OperandValue theOperand);
    public sealed virtual BooleanCriteriaState Visit(FunctionOperator theOperator);
    public BooleanCriteriaState Process(CriteriaOperator operand);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Filtering.Helpers.IsNullOrEmptyEliminator : object {
    private bool found;
    private string FieldName;
    private IsNullOrEmptyEliminator(string fieldName);
    public sealed virtual CriteriaOperator Visit(AggregateOperand theOperand);
    public sealed virtual CriteriaOperator Visit(OperandProperty theOperand);
    public sealed virtual CriteriaOperator Visit(JoinOperand theOperand);
    public sealed virtual CriteriaOperator Visit(BetweenOperator theOperator);
    public sealed virtual CriteriaOperator Visit(BinaryOperator theOperator);
    public sealed virtual CriteriaOperator Visit(UnaryOperator theOperator);
    public sealed virtual CriteriaOperator Visit(InOperator theOperator);
    public sealed virtual CriteriaOperator Visit(GroupOperator theOperator);
    public sealed virtual CriteriaOperator Visit(OperandValue theOperand);
    public sealed virtual CriteriaOperator Visit(FunctionOperator theOperator);
    public static bool Eliminate(CriteriaOperator op, string fieldName, CriteriaOperator& patched);
    private CriteriaOperator Process(CriteriaOperator op);
    private IEnumerable`1<CriteriaOperator> Process(IEnumerable`1<CriteriaOperator> ops);
    [CompilerGeneratedAttribute]
private CriteriaOperator <Process>b__15_0(CriteriaOperator op);
}
public class DevExpress.Data.Filtering.Helpers.JoinContextCriteriaCreator : ClientCriteriaVisitorBase {
    private int level;
    private bool zeroLevelLeave;
    private EvaluatorContext[] contexts;
    private Dictionary`2<JoinContextPropertyInfo, bool> zeroLevelProperies;
    private Dictionary`2<string, EvaluatorProperty> propertyCache;
    public JoinContextCriteriaCreator(EvaluatorContext[] contexts);
    public JoinContextCriteriaCreator(EvaluatorContext[] contexts, bool zeroLevelLeave);
    public static CriteriaOperator ProcessZeroLevelLeave(EvaluatorContext[] contexts, CriteriaOperator criteria, JoinContextPropertyInfoSet& zeroLevelProperties);
    public static CriteriaOperator Process(EvaluatorContext[] contexts, CriteriaOperator criteria);
    private EvaluatorProperty GetProperty(string propertyPath);
    protected virtual CriteriaOperator Visit(AggregateOperand theOperand, bool processCollectionProperty);
    protected virtual CriteriaOperator Visit(OperandProperty theOperand);
    protected virtual CriteriaOperator Visit(JoinOperand theOperand);
}
public class DevExpress.Data.Filtering.Helpers.JoinContextCriteriaPatcher : ClientCriteriaVisitorBase {
    private JoinContextValueInfoSet valueInfoSet;
    public JoinContextCriteriaPatcher(JoinContextValueInfoSet valueInfoSet);
    public static CriteriaOperator Process(JoinContextValueInfoSet valueInfoSet, CriteriaOperator criteria);
    protected virtual CriteriaOperator Visit(OperandProperty theOperand);
    protected virtual CriteriaOperator Visit(AggregateOperand theOperand, bool processCollectionProperty);
}
public class DevExpress.Data.Filtering.Helpers.JoinContextPropertyInfo : object {
    public EvaluatorProperty Property;
    public string PropertyNameInCriteria;
    public JoinContextPropertyInfo(EvaluatorProperty property, string propertyNameInCriteria);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class DevExpress.Data.Filtering.Helpers.JoinContextPropertyInfoSet : object {
    private Dictionary`2<JoinContextPropertyInfo, bool> properties;
    public int Count { get; }
    public JoinContextPropertyInfoSet(Dictionary`2<JoinContextPropertyInfo, bool> properties);
    public int get_Count();
    public JoinContextValueInfoSet GetJoinContextValueInfoSet(EvaluatorContext context);
}
public class DevExpress.Data.Filtering.Helpers.JoinContextValueInfoSet : object {
    public Dictionary`2<string, object> Properties;
    public JoinContextValueInfoSet(Dictionary`2<string, object> properties);
}
internal class DevExpress.Data.Filtering.Helpers.JoinEvaluationContextCache : object {
    private Stack`1<IEnumerable> collectionContextStack;
    private Stack`1<Dictionary`2<JoinEvaluationContextCacheKey, JoinEvaluationCacheInfo>> cacheStack;
    private Dictionary`2<JoinEvaluationContextCacheKey, JoinEvaluationCacheInfo> cacheDict;
    public void PushCollectionContext(IEnumerable context);
    public IEnumerable PopCollectionContext();
    public IEnumerable GetQueryContexts(EvaluatorContext[] contexts, string queryTypeName, CriteriaOperator condition, int top, Boolean& filtered);
}
public class DevExpress.Data.Filtering.Helpers.LambdaToCriteriaConverter : object {
    private Stack`1<ParameterExpression> Parameters;
    public static CriteriaOperator ParseExpression(Expression node);
    private CriteriaOperator Convert(Expression node);
    private CriteriaOperator ConvertBinary(BinaryExpression node);
    private CriteriaOperator ConvertLogical(BinaryExpression node);
    private CriteriaOperator ConvertCoalesce(BinaryExpression node);
    private CriteriaOperator ConvertMethodCall(MethodCallExpression node);
    private CriteriaOperator ProcessContainsMethod(MethodInfo method, CriteriaOperator argument, object collection);
    private CriteriaOperator ProcessToStringMethod(MethodInfo method, CriteriaOperatorCollection arguments);
    private CriteriaOperator ConvertConditional(ConditionalExpression node);
    private CriteriaOperator ConvertConstant(ConstantExpression node);
    private CriteriaOperator ConvertUnary(UnaryExpression node);
    private CriteriaOperator ConvertUpcasting(UnaryExpression node);
    private CriteriaOperator ConvertDecrement(UnaryExpression node);
    private CriteriaOperator ConvertIncrement(UnaryExpression node);
    private CriteriaOperator ConvertIsFalse(UnaryExpression node);
    private CriteriaOperator ConvertIsTrue(UnaryExpression node);
    private CriteriaOperator ConvertInvocation(InvocationExpression node);
    private CriteriaOperator ConvertLambda(LambdaExpression node);
    private CriteriaOperator ConvertMember(MemberExpression node);
    private CriteriaOperator ConvertParameter(ParameterExpression node);
    private CriteriaOperator ConvertPower(BinaryExpression node);
    private CriteriaOperator ConvertQuote(UnaryExpression node);
    private CriteriaOperator ConvertTypeEqual(TypeBinaryExpression node);
    private CriteriaOperator ConvertTypeIs(TypeBinaryExpression node);
    private CriteriaOperator ConvertUnbox(UnaryExpression node);
    private CriteriaOperator ConvertNew(NewExpression node);
    private CriteriaOperatorCollection ConvertArguments(Expression obj, ReadOnlyCollection`1<Expression> arguments);
    [IteratorStateMachineAttribute("DevExpress.Data.Filtering.Helpers.LambdaToCriteriaConverter/<ConvertParamsArray>d__28")]
private IEnumerable`1<CriteriaOperator> ConvertParamsArray(NewArrayExpression newArray);
    private static CriteriaOperator ProcessQueryableMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessStringMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessConvertMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessMathMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessDateTimeMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessDateOnlyMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessTimeOnlyMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessTimeSpanMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessFromLambdaMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessCollectionMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessUnknownMethod(MethodInfo method, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessDateTimeMember(MemberInfo member, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessTimeOnlyMember(MemberInfo member, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessTimeSpanMember(MemberInfo member, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessDateOnlyMember(MemberInfo member, CriteriaOperatorCollection operands);
    private static CriteriaOperator ProcessEquality(CriteriaOperator left, CriteriaOperator right, bool needsNegation);
    private static FunctionOperator CreateCustomFunction(CriteriaOperatorCollection operands, bool isDeterministic);
    private static AggregateOperand CreateTopLevelAggregate(CriteriaOperatorCollection operands);
    private static JoinOperand CreateJoinOperand(string joinTypeName, CriteriaOperatorCollection operands);
    private static BinaryOperatorType GetBinaryOperatorType(ExpressionType nodeType);
    private static UnaryOperatorType GetUnaryOperatorType(ExpressionType nodeType);
    private static NotSupportedException GetMethodNotSupportedException(MethodInfo method);
    private static NotSupportedException GetMemberNotSupportedException(MemberInfo member);
    private static bool IsSimpleType(Type type);
    private static bool IsNullConstant(CriteriaOperator theOperator);
    private static object InvokeAndUnwrapException(Func`1<object> fn);
    private static object GetMemberValue(MemberInfo member, object target);
    private static bool IsCollectionType(Type type);
}
public class DevExpress.Data.Filtering.Helpers.LikeCustomFunction : object {
    public static string Name;
    private static ConcurrentDictionary`2<Type, TypeItem> TypeInformationCache;
    private string DevExpress.Data.Filtering.ICustomFunctionOperator.Name { get; }
    private static LikeCustomFunction();
    public static FunctionOperator Create(CriteriaOperator value, CriteriaOperator pattern);
    public static bool IsName(string nm);
    public static FunctionOperator Convert(BinaryOperator like);
    public static BinaryOperator Convert(FunctionOperator like);
    public static bool IsBinaryCompatibleLikeFunction(CriteriaOperator op);
    private static Expression MakeLinq(ICriteriaToExpressionConverter converter, Expression vExpr, Expression pExpr);
    private Expression MakeEf(ICriteriaToExpressionConverter converter, Expression valueExpression, Expression patternExpression, EntityQueryTypeInfo queryTypeInfo);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICustomFunctionOperatorConvertibleToExpression.Convert(ICriteriaToExpressionConverter converter, Expression[] operands);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICustomFunctionOperatorCompileableWithSettings.Create(CriteriaCompilerAuxSettings settings, Expression[] operands);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICustomFunctionOperatorCompileableWithCaseSensitivity.Create(bool caseSensitive, Expression[] operands);
    private sealed virtual override Expression DevExpress.Data.Filtering.ICustomFunctionOperatorCompileable.Create(Expression[] operands);
    private static Expression MakeCompile(bool caseSensitive, bool is3ValuedLogic, Expression[] operands);
    private sealed virtual override string DevExpress.Data.Filtering.ICustomFunctionOperator.get_Name();
    private sealed virtual override Type DevExpress.Data.Filtering.ICustomFunctionOperator.ResultType(Type[] operands);
    private sealed virtual override object DevExpress.Data.Filtering.ICustomFunctionOperator.Evaluate(Object[] operands);
    private sealed virtual override object DevExpress.Data.Filtering.ICustomFunctionOperatorEvaluatableWithCaseSensitivity.Evaluate(bool caseSensitive, Object[] operands);
    private sealed virtual override object DevExpress.Data.Filtering.ICustomFunctionOperatorEvaluatableWithCaseSensitivityAnd3ValuedLogic.Evaluate(bool caseSensitive, bool is3VL, Object[] operands);
    private static object EvaluateCore(bool caseSensitive, bool is3ValLogic, Object[] operands);
    private static TypeItem GetTypeInformationCore(Type type);
    private static TypeItem GetTypeInformation(Type type);
    private sealed virtual override string DevExpress.Data.Filtering.ICustomFunctionOperatorFormattable.Format(Type providerType, String[] operands);
}
public static class DevExpress.Data.Filtering.Helpers.LikeData : object {
    private static Char[] chars;
    private static LikeData();
    [ObsoleteAttribute("Use FunctionOperatorType.StartsWith, .EndsWith, .Contains instead")]
public static string Escape(string autoFilterText);
    [ObsoleteAttribute("Use FunctionOperatorType.StartsWith instead")]
public static string CreateStartsWithPattern(string autoFilterText);
    [ObsoleteAttribute("Use FunctionOperatorType.Contains instead")]
public static string CreateContainsPattern(string autoFilterText);
    public static string ConvertToRegEx(string originalPattern);
    internal static Func`2<string, Nullable`1<bool>> CreatePredicate(string pat, bool caseSensitive);
    [ObsoleteAttribute("Use FunctionOperatorType.StartsWith, .EndsWith, .Contains instead")]
public static string UnEscape(string likePattern);
}
public static class DevExpress.Data.Filtering.Helpers.LikeDataCache : object {
    private static ConcurrentDictionary`2<string, Lazy`1<Func`2<string, Nullable`1<bool>>>> sensetiveStore;
    private static ConcurrentDictionary`2<string, Lazy`1<Func`2<string, Nullable`1<bool>>>> insensetiveStore;
    private static LikeDataCache();
    public static Func`2<string, Nullable`1<bool>> Get(string pattern);
    public static Func`2<string, Nullable`1<bool>> Get(string pattern, bool caseSensitive);
}
public class DevExpress.Data.Filtering.Helpers.LocalaizableCriteriaToStringProcessorCore : CriteriaToStringBase {
    public ILocalaizableCriteriaToStringProcessorOpNamesSource OpNamesSource;
    protected LocalaizableCriteriaToStringProcessorCore(ILocalaizableCriteriaToStringProcessorOpNamesSource opNamesSource);
    public virtual string GetOperatorString(GroupOperatorType opType);
    protected virtual string GetIsNullText();
    public virtual string GetOperatorString(UnaryOperatorType opType);
    public virtual string GetOperatorString(BinaryOperatorType opType);
    public virtual CriteriaToStringVisitResult Visit(OperandValue operand);
    protected virtual string GetBetweenText();
    protected virtual string GetFunctionText(FunctionOperatorType operandType);
    protected virtual string GetInText();
    protected virtual string GetIsNotNullText();
    protected virtual string GetNotLikeText();
    protected virtual string GetOperatorString(Aggregate operandType);
    public static string Process(ILocalaizableCriteriaToStringProcessorOpNamesSource opNamesSource, CriteriaOperator op);
}
public class DevExpress.Data.Filtering.Helpers.MsSqlWhereGenerator : BaseWhereGenerator {
    private MSSqlServerVersion sqlServerVersion;
    private Func`2<OperandProperty, string> propertyFormatter;
    public MsSqlWhereGenerator(MSSqlServerVersion sqlServerVersion, Func`2<OperandProperty, string> propertyFormatter);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(OperandValue theOperand);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BinaryOperator theOperator);
    protected virtual string VisitInternal(FunctionOperator theOperator);
    protected virtual string FormatOperandProperty(OperandProperty operand);
    public static string DefaultFormatOperandProperty(OperandProperty operand, bool squareBrackets);
    [CompilerGeneratedAttribute]
private string <VisitInternal>b__5_0(object obj);
}
public class DevExpress.Data.Filtering.Helpers.NodeToCriteriaProcessor : object {
    public virtual object Visit(IExpressionNode expressionNode);
    public virtual object Visit(IGroupNode ign);
    public virtual object Visit(IClauseNode icn);
    public virtual object Visit(IAggregateNode ign);
    public CriteriaOperator Process(INode node);
    public virtual object Visit(ClauseType clauseType, CriteriaOperator firstOperand, IList`1<CriteriaOperator> additionalOperands);
    public virtual object Visit(CriteriaOperator firstOperand, object functionType, CriteriaOperator additionalOperand);
    public virtual object Visit(CriteriaOperator firstOperand, FunctionOperatorType functionOperatorType, IList`1<CriteriaOperator> additionalOperands);
}
public class DevExpress.Data.Filtering.Helpers.OracleWhereGenerator : BaseWhereGenerator {
    private Func`2<OperandProperty, string> propertyFormatter;
    public OracleWhereGenerator(Func`2<OperandProperty, string> propertyFormatter);
    public OracleWhereGenerator(bool forceQuotesOnOperandProperties);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(OperandValue theOperand);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BinaryOperator theOperator);
    protected virtual string VisitInternal(FunctionOperator theOperator);
    private static bool isValidUnescapedName(string nm);
    protected virtual string FormatOperandProperty(OperandProperty operand);
    public static string DefaultFormatOperandProperty(OperandProperty operand, bool forceQuotesOnOperandProperties);
    [CompilerGeneratedAttribute]
private string <VisitInternal>b__5_0(object obj);
}
public static class DevExpress.Data.Filtering.Helpers.PropertyDescriptorCriteriaCompilationSupport : object {
    private static string ReflectPropertyDescriptorTypeName;
    private static Dictionary`2<Tuple`2<Type, string>, Tuple`3<Delegate, Type, Type>> fastReflects;
    private static PropertyDescriptorCriteriaCompilationSupport();
    public static bool IsReflectPropertyDescriptor(PropertyDescriptor pd);
    private static Tuple`3<Delegate, Type, Type> TryMakeFastAccessCore(Type t, string memberName);
    private static Tuple`3<Delegate, Type, Type> MakeFastAccessorCoreCore(PropertyInfo member);
    private static Delegate TryMakeFastAccessForReflectPD(PropertyDescriptor pd, Type& rowType, Type& valueType);
    public static Expression TryMakeFastAccessFromDescriptor(Expression baseExpression, PropertyDescriptor pd);
    public static Delegate TryGetFastGetter(PropertyDescriptor pd, Type& rowType, Type& valueType);
}
public class DevExpress.Data.Filtering.Helpers.SerializableTreeAggregateNode : SerializableTreeClauseNode {
    private OperandProperty _AggregateOperand;
    private INode _AggregateCondition;
    private Aggregate _Aggregate;
    public OperandProperty AggregateOperand { get; public set; }
    [XmlAttributeAttribute]
public Aggregate Aggregate { get; public set; }
    [XmlAttributeAttribute]
public INode AggregateCondition { get; public set; }
    public sealed virtual OperandProperty get_AggregateOperand();
    public void set_AggregateOperand(OperandProperty value);
    public sealed virtual Aggregate get_Aggregate();
    public void set_Aggregate(Aggregate value);
    public sealed virtual INode get_AggregateCondition();
    public sealed virtual void set_AggregateCondition(INode value);
    protected virtual object Accept(INodeVisitor visitor);
}
public class DevExpress.Data.Filtering.Helpers.SerializableTreeClauseNode : SerializableTreeNode {
    private OperandProperty firstOperandCore;
    private ClauseType operationCore;
    private List`1<CriteriaOperator> additionalOperandsCore;
    public OperandProperty FirstOperand { get; public set; }
    [XmlAttributeAttribute]
public ClauseType Operation { get; public set; }
    [XmlArrayItemAttribute("DevExpress.Data.Filtering.CriteriaOperator")]
public List`1<CriteriaOperator> AdditionalOperands { get; }
    private IList`1<CriteriaOperator> DevExpress.Data.Filtering.Helpers.IClauseNode.AdditionalOperands { get; }
    public sealed virtual OperandProperty get_FirstOperand();
    public void set_FirstOperand(OperandProperty value);
    public sealed virtual ClauseType get_Operation();
    public void set_Operation(ClauseType value);
    public List`1<CriteriaOperator> get_AdditionalOperands();
    private sealed virtual override IList`1<CriteriaOperator> DevExpress.Data.Filtering.Helpers.IClauseNode.get_AdditionalOperands();
    protected virtual object Accept(INodeVisitor visitor);
}
public class DevExpress.Data.Filtering.Helpers.SerializableTreeExpressionNode : SerializableTreeNode {
    [CompilerGeneratedAttribute]
private CriteriaOperator <Expression>k__BackingField;
    public CriteriaOperator Expression { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual CriteriaOperator get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(CriteriaOperator value);
    protected virtual object Accept(INodeVisitor visitor);
}
public class DevExpress.Data.Filtering.Helpers.SerializableTreeFactory : object {
    public sealed virtual IGroupNode Create(GroupType type, ICollection`1<INode> subNodes);
    public sealed virtual IClauseNode Create(ClauseType type, OperandProperty firstOperand, ICollection`1<CriteriaOperator> operands);
    private sealed virtual override IExpressionNode DevExpress.Data.Filtering.Helpers.IExpressionNodeFactory.Create(CriteriaOperator expression);
}
public class DevExpress.Data.Filtering.Helpers.SerializableTreeFactoryEx : SerializableTreeFactory {
    private sealed virtual override IAggregateNode DevExpress.Data.Filtering.Helpers.INodesFactoryEx.Create(OperandProperty firstOperand, Aggregate aggregate, OperandProperty aggregateOperand, ClauseType operation, ICollection`1<CriteriaOperator> operands, INode conditionNode);
}
public class DevExpress.Data.Filtering.Helpers.SerializableTreeGroupNode : SerializableTreeNode {
    private GroupType nodeTypeCore;
    private List`1<SerializableTreeNode> subNodesCore;
    [XmlAttributeAttribute]
public GroupType NodeType { get; public set; }
    [XmlArrayItemAttribute("DevExpress.Data.Filtering.Helpers.SerializableTreeNode")]
public List`1<SerializableTreeNode> SubNodes { get; }
    private IList`1<INode> DevExpress.Data.Filtering.Helpers.IGroupNode.SubNodes { get; }
    public sealed virtual GroupType get_NodeType();
    public void set_NodeType(GroupType value);
    public List`1<SerializableTreeNode> get_SubNodes();
    private sealed virtual override IList`1<INode> DevExpress.Data.Filtering.Helpers.IGroupNode.get_SubNodes();
    protected virtual object Accept(INodeVisitor visitor);
}
[XmlIncludeAttribute("DevExpress.Data.Filtering.Helpers.SerializableTreeGroupNode")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.Helpers.SerializableTreeClauseNode")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.Helpers.SerializableTreeExpressionNode")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.Helpers.SerializableTreeAggregateNode")]
public abstract class DevExpress.Data.Filtering.Helpers.SerializableTreeNode : object {
    [XmlIgnoreAttribute]
public IGroupNode ParentNode { get; public set; }
    public void set_ParentNode(IGroupNode value);
    public sealed virtual IGroupNode get_ParentNode();
    public sealed virtual void SetParentNode(IGroupNode parentNode);
    private sealed virtual override object DevExpress.Data.Filtering.Helpers.INode.Accept(INodeVisitor visitor);
    protected abstract virtual object Accept(INodeVisitor visitor);
}
public static class DevExpress.Data.Filtering.Helpers.SubExprHelper : object {
    [IteratorStateMachineAttribute("DevExpress.Data.Filtering.Helpers.SubExprHelper/<ProperOrdererCore>d__0")]
private static IEnumerable`1<int> ProperOrdererCore(int next, Func`2<int, IEnumerable`1<int>> subExprsGetter, Boolean[] processed);
    private static Int32[] ProperOrderer(int count, Func`2<int, IEnumerable`1<int>> subExprsGetter);
    private static LambdaExpression[] BuildLambdasSingleThread(IList`1<BaseToken> roots, DataController _DC, CriteriaCompilerAuxSettings settings);
    public static IFilterRowStub Do(CriteriaOperator op, DataController _DC, bool makesSenceToMultithread);
    internal static ValueClass GetValueClass(Type t);
}
internal static class DevExpress.Data.Filtering.Helpers.TimeOnlyConvertHelper : object {
    private static MethodInfo FromDateTimeMethod;
    private static MethodInfo FromTimeSpanMethod;
    private static TimeOnlyConvertHelper();
    public static Expression TryConvertDateTimeToTimeOnly(Expression expr, bool nullable);
    public static Expression TruncateDateTimeToTimeOnly(Expression expr, bool nullable);
    private static ConstantExpression CreateTimeOnlyConstant(DateTime dateTime, bool nullable);
}
internal class DevExpress.Data.Filtering.Helpers.Token : object {
    public static int CONST;
    public static int MINVALUECONST;
    public static int AGG_EXISTS;
    public static int AGG_COUNT;
    public static int AGG_MIN;
    public static int AGG_MAX;
    public static int AGG_AVG;
    public static int AGG_SUM;
    public static int AGG_SINGLE;
    public static int PARAM;
    public static int COL;
    public static int FN_ISNULL;
    public static int FN_IIF;
    public static int FUNCTION;
    public static int SORT_ASC;
    public static int SORT_DESC;
    public static int OP_COALESCE;
    public static int OR;
    public static int AND;
    public static int NOT;
    public static int IS;
    public static int NULL;
    public static int OP_EQ;
    public static int OP_NE;
    public static int OP_LIKE;
    public static int OP_GT;
    public static int OP_LT;
    public static int OP_GE;
    public static int OP_LE;
    public static int OP_IN;
    public static int OP_BETWEEN;
    public static int NEG;
    public static int COMMENT;
    public static int yyErrorCode;
}
public enum DevExpress.Data.Filtering.Helpers.TokenType : Enum {
    public int value__;
    public static TokenType Property;
    public static TokenType Constant;
    public static TokenType Group;
    public static TokenType Aggregate;
    public static TokenType CompareOperator;
    public static TokenType MathOperator;
    public static TokenType Function;
    public static TokenType Predicate;
    public static TokenType Not;
    public static TokenType OpenParenthesis;
    public static TokenType CloseParenthesis;
    public static TokenType Dot;
    public static TokenType Unknown;
}
public class DevExpress.Data.Filtering.Helpers.TypeConvertionValidator : object {
    public static bool TryConvert(object objValue, Type destinationType, Object& result);
    private static object EnumParse(Type type, string value, bool ignoreCase);
    public static bool CanConvert(object objValue, Type destinationType);
    public static bool CanConvertType(Type sourceType, Type destinationType);
}
internal interface DevExpress.Data.Filtering.Helpers.yyInput {
    public abstract virtual bool advance();
    public abstract virtual int token();
    public abstract virtual object value();
}
public interface DevExpress.Data.Filtering.IClientCriteriaVisitor {
    public abstract virtual void Visit(AggregateOperand theOperand);
    public abstract virtual void Visit(OperandProperty theOperand);
    public abstract virtual void Visit(JoinOperand theOperand);
}
public interface DevExpress.Data.Filtering.IClientCriteriaVisitor`1 {
    public abstract virtual T Visit(AggregateOperand theOperand);
    public abstract virtual T Visit(OperandProperty theOperand);
    public abstract virtual T Visit(JoinOperand theOperand);
}
public interface DevExpress.Data.Filtering.IControlFilterColumn {
    public Type Type { get; }
    public string Name { get; }
    public string Caption { get; }
    public abstract virtual Type get_Type();
    public abstract virtual string get_Name();
    public abstract virtual string get_Caption();
}
public interface DevExpress.Data.Filtering.IControlFilterColumnsProvider {
    public abstract virtual PropertyDescriptorCollection GetColumnDescriptors();
}
public interface DevExpress.Data.Filtering.ICriteriaVisitor {
    public abstract virtual void Visit(BetweenOperator theOperator);
    public abstract virtual void Visit(BinaryOperator theOperator);
    public abstract virtual void Visit(UnaryOperator theOperator);
    public abstract virtual void Visit(InOperator theOperator);
    public abstract virtual void Visit(GroupOperator theOperator);
    public abstract virtual void Visit(OperandValue theOperand);
    public abstract virtual void Visit(FunctionOperator theOperator);
}
public interface DevExpress.Data.Filtering.ICriteriaVisitor`1 {
    public abstract virtual T Visit(BetweenOperator theOperator);
    public abstract virtual T Visit(BinaryOperator theOperator);
    public abstract virtual T Visit(UnaryOperator theOperator);
    public abstract virtual T Visit(InOperator theOperator);
    public abstract virtual T Visit(GroupOperator theOperator);
    public abstract virtual T Visit(OperandValue theOperand);
    public abstract virtual T Visit(FunctionOperator theOperator);
}
public interface DevExpress.Data.Filtering.ICustomAggregate {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Type ResultType(Type[] operands);
    public abstract virtual object CreateEvaluationContext();
    public abstract virtual object GetResult(object context);
    public abstract virtual bool Process(object context, Object[] operands);
}
public interface DevExpress.Data.Filtering.ICustomAggregateBrowsable {
    public int MinOperandCount { get; }
    public int MaxOperandCount { get; }
    public string Description { get; }
    public abstract virtual int get_MinOperandCount();
    public abstract virtual int get_MaxOperandCount();
    public abstract virtual bool IsValidOperandCount(int count);
    public abstract virtual string get_Description();
    public abstract virtual bool IsValidOperandType(int operandIndex, int operandCount, Type type);
}
public interface DevExpress.Data.Filtering.ICustomAggregateConvertibleToExpression {
    public abstract virtual Expression Convert(ICriteriaToExpressionConverter converter, Expression collectionProperty, ParameterExpression elementParameter, Expression[] operands);
}
public interface DevExpress.Data.Filtering.ICustomAggregateFormattable {
    public abstract virtual string Format(Type providerType, String[] operands);
}
public interface DevExpress.Data.Filtering.ICustomAggregateOperand {
    public string CustomAggregateName { get; public set; }
    public CriteriaOperatorCollection CustomAggregateOperands { get; }
    public abstract virtual string get_CustomAggregateName();
    public abstract virtual void set_CustomAggregateName(string value);
    public abstract virtual CriteriaOperatorCollection get_CustomAggregateOperands();
}
public interface DevExpress.Data.Filtering.ICustomFunctionDisplayAttributes {
    public string DisplayName { get; }
    public object Image { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual object get_Image();
}
public interface DevExpress.Data.Filtering.ICustomFunctionDisplayAttributesEx {
    public abstract virtual string GetOperandDisplayValue(object value, string displayText);
}
public interface DevExpress.Data.Filtering.ICustomFunctionOperator {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Type ResultType(Type[] operands);
    public abstract virtual object Evaluate(Object[] operands);
}
public interface DevExpress.Data.Filtering.ICustomFunctionOperatorBrowsable {
    public int MinOperandCount { get; }
    public int MaxOperandCount { get; }
    public string Description { get; }
    public FunctionCategory Category { get; }
    public abstract virtual int get_MinOperandCount();
    public abstract virtual int get_MaxOperandCount();
    public abstract virtual bool IsValidOperandCount(int count);
    public abstract virtual string get_Description();
    public abstract virtual bool IsValidOperandType(int operandIndex, int operandCount, Type type);
    public abstract virtual FunctionCategory get_Category();
}
public interface DevExpress.Data.Filtering.ICustomFunctionOperatorCompileable {
    public abstract virtual Expression Create(Expression[] operands);
}
public interface DevExpress.Data.Filtering.ICustomFunctionOperatorCompileableWithCaseSensitivity {
    public abstract virtual Expression Create(bool caseSensitive, Expression[] operands);
}
[DXHelpExcludeAttribute("True")]
public interface DevExpress.Data.Filtering.ICustomFunctionOperatorCompileableWithSettings {
    public abstract virtual Expression Create(CriteriaCompilerAuxSettings settings, Expression[] operands);
}
public interface DevExpress.Data.Filtering.ICustomFunctionOperatorConvertibleToExpression {
    public abstract virtual Expression Convert(ICriteriaToExpressionConverter converter, Expression[] operands);
}
public interface DevExpress.Data.Filtering.ICustomFunctionOperatorEvaluatableWithCaseSensitivity {
    public abstract virtual object Evaluate(bool caseSensitive, Object[] operands);
}
[DXHelpExcludeAttribute("True")]
internal interface DevExpress.Data.Filtering.ICustomFunctionOperatorEvaluatableWithCaseSensitivityAnd3ValuedLogic {
    public abstract virtual object Evaluate(bool caseSensitive, bool is3ValuedLogic, Object[] operands);
}
public interface DevExpress.Data.Filtering.ICustomFunctionOperatorFormattable {
    public abstract virtual string Format(Type providerType, String[] operands);
}
public interface DevExpress.Data.Filtering.IFilteredComponentBase {
    public CriteriaOperator RowCriteria { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_RowFilterChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RowFilterChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropertiesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropertiesChanged(EventHandler value);
    public abstract virtual CriteriaOperator get_RowCriteria();
    public abstract virtual void set_RowCriteria(CriteriaOperator value);
}
[EditorBrowsableAttribute("1")]
public interface DevExpress.Data.Filtering.IFunctionOperatorPatcher {
    public abstract virtual CriteriaOperator Patch(FunctionOperator theOperator);
}
[EditorBrowsableAttribute("1")]
public interface DevExpress.Data.Filtering.IIBoundPropertyCreator {
    public abstract virtual IBoundProperty CreateProperty(object dataSource, string dataMember, string displayName, bool isList, PropertyDescriptor property);
    public abstract virtual void SetParent(IBoundProperty property, IBoundProperty parent);
}
public class DevExpress.Data.Filtering.InOperator : CriteriaOperator {
    private CriteriaOperator leftOperand;
    private CriteriaOperatorCollection operands;
    public CriteriaOperator LeftOperand { get; public set; }
    [XmlArrayItemAttribute("DevExpress.Data.Filtering.CriteriaOperator")]
public CriteriaOperatorCollection Operands { get; }
    public InOperator(string propertyName, IEnumerable values);
    public InOperator(string propertyName, CriteriaOperator[] operands);
    public InOperator(CriteriaOperator leftOperand, CriteriaOperator[] operands);
    public InOperator(CriteriaOperator leftOperand, IEnumerable`1<CriteriaOperator> operands);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public CriteriaOperator get_LeftOperand();
    public void set_LeftOperand(CriteriaOperator value);
    public virtual CriteriaOperatorCollection get_Operands();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual CriteriaOperator CloneCommon();
    public InOperator Clone();
}
public interface DevExpress.Data.Filtering.IQueryCriteriaVisitor {
    public abstract virtual void Visit(QueryOperand theOperand);
    public abstract virtual void Visit(QuerySubQueryContainer theOperand);
}
public interface DevExpress.Data.Filtering.IQueryCriteriaVisitor`1 {
    public abstract virtual T Visit(QueryOperand theOperand);
    public abstract virtual T Visit(QuerySubQueryContainer theOperand);
}
public class DevExpress.Data.Filtering.JoinOperand : CriteriaOperator {
    private string joinTypeName;
    private CriteriaOperator condition;
    private CriteriaOperator aggregatedExpression;
    private Aggregate type;
    private string customAggregateName;
    private CriteriaOperatorCollection customAggregateOperands;
    public CriteriaOperator Condition { get; public set; }
    public string JoinTypeName { get; public set; }
    public CriteriaOperator AggregatedExpression { get; public set; }
    public Aggregate AggregateType { get; public set; }
    public string CustomAggregateName { get; public set; }
    public CriteriaOperatorCollection CustomAggregateOperands { get; }
    private CriteriaOperator DevExpress.Data.Filtering.Helpers.IAggregateOperand.Condition { get; private set; }
    private object DevExpress.Data.Filtering.Helpers.IAggregateOperand.AggregationObject { get; private set; }
    private CriteriaOperator DevExpress.Data.Filtering.Helpers.IAggregateOperand.AggregatedExpression { get; private set; }
    private Aggregate DevExpress.Data.Filtering.Helpers.IAggregateOperand.AggregateType { get; private set; }
    public JoinOperand(string joinTypeName, CriteriaOperator condition, string customAggregateName, IEnumerable`1<CriteriaOperator> aggregatedExpressions);
    public JoinOperand(string joinTypeName, CriteriaOperator condition, Aggregate type, CriteriaOperator aggregatedExpression);
    public JoinOperand(string joinTypeName, CriteriaOperator condition);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public CriteriaOperator get_Condition();
    public void set_Condition(CriteriaOperator value);
    public string get_JoinTypeName();
    public void set_JoinTypeName(string value);
    public CriteriaOperator get_AggregatedExpression();
    public void set_AggregatedExpression(CriteriaOperator value);
    public Aggregate get_AggregateType();
    public void set_AggregateType(Aggregate value);
    public sealed virtual string get_CustomAggregateName();
    public sealed virtual void set_CustomAggregateName(string value);
    public sealed virtual CriteriaOperatorCollection get_CustomAggregateOperands();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.Helpers.IAggregateOperand.get_Condition();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IAggregateOperand.set_Condition(CriteriaOperator value);
    private sealed virtual override object DevExpress.Data.Filtering.Helpers.IAggregateOperand.get_AggregationObject();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IAggregateOperand.set_AggregationObject(object value);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.Helpers.IAggregateOperand.get_AggregatedExpression();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IAggregateOperand.set_AggregatedExpression(CriteriaOperator value);
    private sealed virtual override Aggregate DevExpress.Data.Filtering.Helpers.IAggregateOperand.get_AggregateType();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IAggregateOperand.set_AggregateType(Aggregate value);
    public JoinOperand Exists(CriteriaOperator aggregatedExpression);
    public JoinOperand Exists();
    public JoinOperand Count(CriteriaOperator aggregatedExpression);
    public JoinOperand Count();
    public JoinOperand Avg(CriteriaOperator aggregatedExpression);
    public JoinOperand Max(CriteriaOperator aggregatedExpression);
    public JoinOperand Min(CriteriaOperator aggregatedExpression);
    public JoinOperand Sum(CriteriaOperator aggregatedExpression);
    public JoinOperand Custom(string customAggregateName, IEnumerable`1<CriteriaOperator> aggregatedExpressions);
    protected virtual CriteriaOperator CloneCommon();
    public JoinOperand Clone();
    internal static CriteriaOperator JoinOrAggreagate(OperandProperty collectionProperty, CriteriaOperator condition, Aggregate type, CriteriaOperator aggregated);
    internal static CriteriaOperator JoinOrAggreagate(OperandProperty collectionProperty, CriteriaOperator condition, string customAggregateName, IEnumerable`1<CriteriaOperator> aggregated);
}
public class DevExpress.Data.Filtering.NotOperator : UnaryOperator {
    public NotOperator(CriteriaOperator operand);
}
public class DevExpress.Data.Filtering.NullOperator : UnaryOperator {
    public NullOperator(CriteriaOperator operand);
    public NullOperator(string operand);
}
[XmlTypeAttribute("DBNull")]
public class DevExpress.Data.Filtering.NullValue : object {
    public static NullValue Value;
    private static NullValue();
}
public class DevExpress.Data.Filtering.OperandParameter : OperandValue {
    private string parameterName;
    [XmlAttributeAttribute]
public string ParameterName { get; public set; }
    public OperandParameter(string parameterName, object value);
    public OperandParameter(string parameterName);
    public string get_ParameterName();
    public void set_ParameterName(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual CriteriaOperator CloneCommon();
    public OperandParameter Clone();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Filtering.OperandProperty : CriteriaOperator {
    private string propertyName;
    [XmlAttributeAttribute]
public string PropertyName { get; public set; }
    public AggregateOperand Item { get; }
    public OperandProperty(string propertyName);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public AggregateOperand get_Item(CriteriaOperator condition);
    protected virtual CriteriaOperator CloneCommon();
    public OperandProperty Clone();
}
public class DevExpress.Data.Filtering.OperandValue : CriteriaOperator {
    private object value;
    [XmlElementAttribute("System.Boolean")]
[XmlElementAttribute("System.Byte")]
[XmlElementAttribute("System.SByte")]
[XmlElementAttribute("System.Char")]
[XmlElementAttribute("System.Decimal")]
[XmlElementAttribute("System.Double")]
[XmlElementAttribute("System.Single")]
[XmlElementAttribute("System.Int32")]
[XmlElementAttribute("System.UInt32")]
[XmlElementAttribute("System.Int64")]
[XmlElementAttribute("System.UInt64")]
[XmlElementAttribute("System.Int16")]
[XmlElementAttribute("System.UInt16")]
[XmlElementAttribute("System.Guid")]
[XmlElementAttribute("System.String")]
[XmlElementAttribute("System.DateTime")]
[XmlElementAttribute("System.DateOnly")]
[XmlElementAttribute("System.DateTimeOffset")]
[XmlElementAttribute("System.TimeSpan")]
[XmlElementAttribute("System.TimeOnly")]
[XmlElementAttribute("DevExpress.Data.Filtering.NullValue")]
[XmlElementAttribute("System.Byte[]")]
public object XmlValue { get; public set; }
    [XmlIgnoreAttribute]
public object Value { get; public set; }
    public OperandValue(object value);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    internal static string FormatString(string value);
    internal static string ReformatString(string value);
    public virtual object get_XmlValue();
    public virtual void set_XmlValue(object value);
    protected virtual object GetXmlValue();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static OperandValue op_Explicit(bool val);
    public static OperandValue op_Implicit(byte val);
    public static OperandValue op_Implicit(char val);
    public static OperandValue op_Implicit(decimal val);
    public static OperandValue op_Implicit(double val);
    public static OperandValue op_Implicit(float val);
    public static OperandValue op_Implicit(short val);
    public static OperandValue op_Implicit(int val);
    public static OperandValue op_Implicit(long val);
    public static OperandValue op_Implicit(Guid val);
    public static OperandValue op_Implicit(string val);
    public static OperandValue op_Implicit(DateTime val);
    public static OperandValue op_Implicit(DateOnly val);
    public static OperandValue op_Implicit(DateTimeOffset val);
    public static OperandValue op_Implicit(TimeSpan val);
    public static OperandValue op_Implicit(TimeOnly val);
    public static OperandValue op_Implicit(Byte[] val);
    protected virtual CriteriaOperator CloneCommon();
    public OperandValue Clone();
}
internal class DevExpress.Data.Filtering.SourceControlNotifier : object {
    private object sourceControl;
    [CompilerGeneratedAttribute]
private PropertyChangedDelegate OnPropertiesChanged;
    public object SourceControl { get; public set; }
    public object get_SourceControl();
    public void set_SourceControl(object value);
    public sealed virtual void Dispose();
    private void Subscribe();
    private void Unsubscribe();
    private void OnSourceControlPropertiesChanged(object sender, EventArgs e);
    private void RaiseOnPropertiesChanged();
    [CompilerGeneratedAttribute]
public void add_OnPropertiesChanged(PropertyChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_OnPropertiesChanged(PropertyChangedDelegate value);
}
public static class DevExpress.Data.Filtering.TimeOnlyConstants : object {
    public static TimeOnly Midday;
    public static TimeOnly Morning;
    public static TimeOnly Evening;
    public static TimeOnly Night;
    public static TimeOnly WorkingHoursStart;
    public static TimeOnly WorkingHoursEnd;
    public static TimeOnly LunchStart;
    public static TimeOnly LunchEnd;
    private static TimeOnlyConstants();
}
public class DevExpress.Data.Filtering.UnaryOperator : CriteriaOperator {
    public CriteriaOperator Operand;
    [XmlAttributeAttribute]
public UnaryOperatorType OperatorType;
    public UnaryOperator(UnaryOperatorType operatorType, string propertyName);
    public UnaryOperator(UnaryOperatorType operatorType, CriteriaOperator operand);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual CriteriaOperator CloneCommon();
    public UnaryOperator Clone();
}
public enum DevExpress.Data.Filtering.UnaryOperatorType : Enum {
    public int value__;
    public static UnaryOperatorType BitwiseNot;
    public static UnaryOperatorType Plus;
    public static UnaryOperatorType Minus;
    public static UnaryOperatorType Not;
    public static UnaryOperatorType IsNull;
}
public class DevExpress.Data.Filtering.UserValueProcessingEventArgs : HandledEventArgs {
    public object Value;
    public string Tag;
    public string Data;
}
public class DevExpress.Data.GridDataController : BaseGridControllerEx {
    protected virtual void OnDataSourceChanged(DataSourceInfo currentSourceInfo);
    protected virtual IList GetListSource();
}
public class DevExpress.Data.GridDataControllerFilterHelper : DataControllerFilterHelper {
    public BaseGridController Controller { get; }
    public GridDataControllerFilterHelper(DataController controller);
    public BaseGridController get_Controller();
    public virtual Object[] GetUniqueColumnValues(DataColumnInfo columnInfo, ColumnValuesArguments args, OperationCompleted completed);
}
public class DevExpress.Data.GridLookupDataController : GridDataController {
    public virtual int FindRowByValue(string columnName, object value, OperationCompleted[] completed);
    protected virtual IList GetList(object dataSource);
}
public class DevExpress.Data.GroupRowInfo : object {
    public byte Level;
    public bool Expanded;
    public GroupRowInfo ParentGroup;
    public int ChildControllerRow;
    public int ChildControllerRowCount;
    public int Index;
    public int GroupIndex;
    private Hashtable summary;
    private int childIndex;
    [CompilerGeneratedAttribute]
private object <GroupValue>k__BackingField;
    public GroupRowInfo RootGroup { get; }
    public int Handle { get; }
    public bool IsVisible { get; }
    protected internal Hashtable Summary { get; }
    public object GroupValue { get; public set; }
    public GroupRowInfo(byte level, int childControllerRow, GroupRowInfo parentGroup);
    public GroupRowInfo get_RootGroup();
    public virtual string ToString();
    public int get_Handle();
    public bool get_IsVisible();
    public int GetVisibleIndexOfControllerRow(int controllerRow);
    public bool ContainsControllerRow(int controllerRow);
    public static bool IsGroupRowHandle(int controllerRowHandle);
    public static int GroupIndexToHandle(int groupIndex);
    public static int HandleToGroupIndex(int handle);
    protected internal Hashtable get_Summary();
    public object GetSummaryValue(SummaryItemBase item);
    internal object GetSummaryValue(SummaryItemBase item, Boolean& isValid);
    public void SetSummaryValue(SummaryItemBase item, object value);
    protected void SetSummaryValueCore(object key, object value);
    public void ClearSummaryItem(SummaryItemBase item);
    public virtual void ClearSummary();
    internal GroupRowInfo GetParentGroupAtLevel(int level);
    private int GetNextChildIndex();
    [CompilerGeneratedAttribute]
public virtual object get_GroupValue();
    [CompilerGeneratedAttribute]
public virtual void set_GroupValue(object value);
}
public class DevExpress.Data.GroupRowInfoCollection : Collection`1<GroupRowInfo> {
    private DataControllerBase controller;
    private bool autoExpandAllGroups;
    private int lastExpandableLevel;
    private DataColumnSortInfoCollection sortInfo;
    private VisibleListSourceRowCollection visibleListSourceRows;
    private int alwaysVisibleLevelIndex;
    private int currentIndex;
    [CompilerGeneratedAttribute]
private bool <AllowPartialGrouping>k__BackingField;
    private List`1<GroupRowInfo> delayedDeleteGroups;
    protected List`1<GroupRowInfo> ListCore { get; }
    protected DataControllerBase Controller { get; }
    protected DataColumnSortInfoCollection SortInfo { get; }
    public VisibleListSourceRowCollection VisibleListSourceRows { get; }
    public bool AutoExpandAllGroups { get; public set; }
    public bool AllowPartialGrouping { get; public set; }
    public int LastExpandableLevel { get; public set; }
    public bool IsGrouped { get; }
    public int LevelCount { get; }
    public int AlwaysVisibleLevelIndex { get; public set; }
    public int RootGroupCount { get; }
    public GroupRowInfoCollection(DataControllerBase controller, DataColumnSortInfoCollection sortInfo, VisibleListSourceRowCollection visibleListSourceRows);
    protected List`1<GroupRowInfo> get_ListCore();
    public virtual void Dispose();
    protected DataControllerBase get_Controller();
    protected virtual DataColumnSortInfoCollection get_SortInfo();
    protected virtual GroupRowInfo CreateGroupRowInfo(byte level, int childControllerRow, GroupRowInfo parentGroupRow);
    public bool MakeVisible(GroupRowInfo groupRow, bool showChildren);
    public virtual VisibleListSourceRowCollection get_VisibleListSourceRows();
    public bool get_AutoExpandAllGroups();
    public void set_AutoExpandAllGroups(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowPartialGrouping();
    [CompilerGeneratedAttribute]
public void set_AllowPartialGrouping(bool value);
    public int get_LastExpandableLevel();
    public void set_LastExpandableLevel(int value);
    public bool get_IsGrouped();
    public int get_LevelCount();
    public int get_AlwaysVisibleLevelIndex();
    public void set_AlwaysVisibleLevelIndex(int value);
    public virtual GroupRowInfo Add(byte level, int ChildControllerRow, GroupRowInfo parentGroup);
    public void ClearSummary();
    public void MoveFromEndToMiddle(int startIndex, int count, int moveTo);
    public bool IsLastLevel(GroupRowInfo groupRow);
    public int GetChildCount(int groupRowHandle);
    public int GetChildCount(GroupRowInfo groupRow);
    public int GetChildRow(int groupRowHandle, int childIndex);
    public int GetChildRow(GroupRowInfo groupRow, int childIndex);
    public int GetParentRow(int groupRowHandle);
    public int GetParentRow(GroupRowInfo groupRow);
    public virtual int get_RootGroupCount();
    public GroupRowInfo GetRootGroup(int index);
    public void GetChildrenGroups(GroupRowInfo groupRow, IList`1<GroupRowInfo> list);
    public void GetChildrenGroups(GroupRowInfo groupRow, IList`1<GroupRowInfo> list, int level);
    public int GetVisibleRowsCount(GroupRowInfo groupRow);
    public int GetTotalGroupsCountByLevel(int level);
    public int GetTotalChildrenGroupCount(GroupRowInfo groupRow);
    public int GetChildrenGroupCount(GroupRowInfo groupRow);
    public bool ChangeExpandedLevel(int groupLevel, bool expanded, bool recursive);
    public bool ChangeExpanded(int groupRowHandle, bool expanded, bool recursive);
    public bool ChangeAllExpanded(bool expanded);
    public bool ChangeLevelExpanded(int level, bool expanded);
    public bool ChangeChildExpanded(GroupRowInfo groupRow, bool expanded);
    protected bool ChangeGroupRowExpanded(GroupRowInfo groupRow, bool expanded);
    public void UpdateIndexes();
    public void UpdateIndexes(int startFrom);
    public GroupRowInfo GetGroupRowInfoByControllerRowHandle(int controllerRowHandle);
    public GroupRowInfo GetGroupRowInfoByControllerRowHandleBinary(int controllerRowHandle);
    public GroupRowInfo GetGroupRowInfoByHandle(int groupRowHandle);
    public virtual void ReverseLevel(int level);
    protected bool ReverseLevelCore(int level);
    private void ReverseGroups(int level);
    private int ReverseParentGroup(GroupRowInfo parentGroupRow, List`1<GroupRowInfo> list);
    private void AddReverseGroup(GroupRowInfo groupRow, List`1<GroupRowInfo> list);
    private void AddReverceGroupChildren(GroupRowInfo groupRow, List`1<GroupRowInfo> list);
    private void UpdateVisibleListSourceRowCollection();
    private void UpdateChildControllerRows();
    protected virtual void RemoveItem(int index);
    public GroupRowInfo DoRowAdded(int controllerRow, DataControllerChangedItemCollection changedItems);
    private GroupRowInfo DoRowAddedCore(int controllerRow, DataControllerChangedItemCollection changedItems);
    public void DoRowDeleted(int controllerRow, DataControllerChangedItemCollection changedItems);
    protected void DoRowDeleted(int controllerRow, GroupRowInfo groupRow, DataControllerChangedItemCollection changedItems, GroupRowInfo& summaryUpdateRequired);
    public void DoRowChanged(VisibleIndexCollection visibleIndexes, int oldControllerRow, int newControllerRow, DataControllerChangedItemCollection changedItems);
    private bool IsSameGroup(GroupRowInfo oldGroup, GroupRowInfo newGroup);
    private void RenumIndexes(int controllerRow, bool increment);
    private void IncrementChildControllerRowCount(GroupRowInfo groupRow, DataControllerChangedItemCollection changedItems);
    private void IncrementChildControllerRowCount(GroupRowInfo groupRow, DataControllerChangedItemCollection changedItems, bool addItemAtCurrentGroup);
    private void IncrementChildControllerRowCount(int controllerRow, GroupRowInfo groupRow, DataControllerChangedItemCollection changedItems, bool decrementChildVisibleRow, bool addItemAtCurrentGroup);
    private GroupRowInfo CreateNewGroup(int controllerRow, GroupRowInfo prevGroup, GroupRowInfo nextGroup, int groupLevelNext, int groupLevelPrev, DataControllerChangedItemCollection changedItems);
    private GroupRowInfo CreateNewGroup(int controllerRow, GroupRowInfo parent, int groupLevel, int newGroupIndex, DataControllerChangedItemCollection changedItems);
    private int GetNewGroupIndex(GroupRowInfo parent, int controllerRow);
}
public class DevExpress.Data.GroupSummaryComparer : object {
    private DataController controller;
    private SummarySortInfo sortInfo;
    protected DataController Controller { get; }
    protected ValueComparer ValueComparer { get; }
    public GroupSummaryComparer(DataController controller, SummarySortInfo sortInfo);
    protected DataController get_Controller();
    protected ValueComparer get_ValueComparer();
    public sealed virtual int Compare(object x, object y);
    public sealed virtual int Compare(GroupRowInfo x, GroupRowInfo y);
    public int Compare(GroupRowInfo groupRow1, GroupRowInfo groupRow2, SummaryItem item);
    private int CompareCore(GroupRowInfo groupRow1, GroupRowInfo groupRow2);
}
public class DevExpress.Data.Helpers.AsyncListWrapper : object {
    private IAsyncListServer server;
    private int count;
    private AsyncRowsInfo rows;
    private AsyncState state;
    private AsyncServerModeDataController controller;
    private int lastCount;
    private Nullable`1<bool> isGroupExpandInProgress;
    public AsyncServerModeDataController Controller { get; }
    public IAsyncListServer Server { get; }
    public bool IsValidState { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    protected IDataControllerVisualClient VisualClient { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public AsyncListWrapper(AsyncServerModeDataController controller, IAsyncListServer server);
    public virtual void Dispose();
    public AsyncServerModeDataController get_Controller();
    public IAsyncListServer get_Server();
    public virtual void Invalidate();
    public virtual bool get_IsValidState();
    public virtual void ResetValidate();
    private void SetInvalidState();
    internal void CancelAllGetRows();
    public bool IsRowLoaded(int index);
    private AsyncRowInfo GetRowInfo(int index);
    internal object GetLoadedRowKey(int index);
    internal AsyncRowInfo GetLoadedValidRowInfo(int index);
    internal object GetRowInfo(int index, OperationCompleted completed);
    internal object GetRow(int index, OperationCompleted completed, bool userHandler);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    internal void ClearInvalidRowsCache();
    public virtual int get_Count();
    protected IDataControllerVisualClient get_VisualClient();
    protected virtual void NotifyRowReceived(int rowIndex);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.add_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetTotals result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetRow result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandApply result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandRefresh result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetRowIndexByKey result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetGroupInfo result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetUniqueColumnValues result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandFindIncremental result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandLocateByValue result);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Canceled(Command canceled);
    private sealed virtual override void DevExpress.Data.Async.IAsyncResultReceiver.Notification(NotificationInconsistencyDetected notification);
    private sealed virtual override void DevExpress.Data.Async.IAsyncResultReceiver.Notification(NotificationExceptionThrown exception);
    public static string ExtractErrorText(Exception e);
    private sealed virtual override void DevExpress.Data.Async.IAsyncResultReceiver.BusyChanged(bool busy);
    private sealed virtual override void DevExpress.Data.Async.IAsyncResultReceiver.Refreshing(CommandRefresh refreshCommand);
    private sealed virtual override void DevExpress.Data.Async.IAsyncResultReceiver.PropertyDescriptorsRenewed();
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandGetAllFilteredAndSortedRows command);
    private sealed virtual override void DevExpress.Data.Async.IAsyncCommandVisitor.Visit(CommandPrefetchRows command);
    internal void ApplySort();
    internal void FindIncremental(CriteriaOperator expression, string text, int startRow, bool searchUp, bool ignoreStartRow, bool allowLoop, OperationCompleted completed);
    internal int FindRowByValue(DataColumnInfo colInfo, object value);
}
public class DevExpress.Data.Helpers.AsyncLockHelper : object {
    private AsyncOperationIdentifier currentAsyncOperationId;
    private int threadId;
    private int recursionDepth;
    private SemaphoreSlim lockSemaphore;
    public IDisposable Lock();
    [AsyncStateMachineAttribute("DevExpress.Data.Helpers.AsyncLockHelper/<LockAsync>d__5")]
public Task`1<IDisposable> LockAsync(AsyncOperationIdentifier asyncOperationId);
    private void Free();
    public sealed virtual void Dispose();
}
public class DevExpress.Data.Helpers.AsyncManualResetEvent : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) state;
    private ManualResetEventSlim stateEvent;
    private SpinLock syncLock;
    private Queue`1<TaskCompletionSource`1<object>> waitingTasks;
    public AsyncManualResetEvent(bool initialState);
    public void Set();
    private void SetTaskCompleted(object taskCompletionSource);
    public void Reset();
    public void WaitOne();
    public bool WaitOne(int milliseconds);
    public Task WaitOneAsync(CancellationToken cancellationToken);
}
public class DevExpress.Data.Helpers.AsyncNewServerModeRowKeeper : NewListSourceRowKeeper {
    private bool totalsReceived;
    private bool restoreRequested;
    protected AsyncServerModeDataController Controller { get; }
    protected AsyncServerModeSelectionAndCurrentKeeper Selection { get; }
    private bool DevExpress.Data.Helpers.IClassicRowKeeperAsync.IsRestoreAllExpanded { get; }
    public AsyncNewServerModeRowKeeper(AsyncServerModeDataController controller, ExpandedGroupKeeper groupsKeeper, SelectionKeeper selectionKeeper);
    protected AsyncServerModeDataController get_Controller();
    protected AsyncServerModeSelectionAndCurrentKeeper get_Selection();
    private sealed virtual override bool DevExpress.Data.Helpers.IClassicRowKeeperAsync.get_IsRestoreAllExpanded();
    private sealed virtual override bool DevExpress.Data.Helpers.IClassicRowKeeperAsync.IsRestoredAsExpanded(GroupRowInfo group);
    protected virtual void RestoreClear();
    protected virtual void SaveCore();
    protected virtual void ClearCore();
    protected virtual bool RestoreIncrementalCore();
    protected virtual bool RestoreCore();
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeperAsync.OnTotalsReceived();
}
public class DevExpress.Data.Helpers.AsyncOperationCompletedHelper : object {
    private OperationCompleted completed;
    private bool userHandler;
    private static object Token;
    public bool UserHandler { get; }
    private AsyncOperationCompletedHelper(OperationCompleted completed, bool userHandler);
    private static AsyncOperationCompletedHelper();
    public bool get_UserHandler();
    public static DictionaryEntry GetCommandParameter(OperationCompleted completed, bool userHandler);
    public static DictionaryEntry GetCommandParameter(OperationCompleted[] completed, bool userHandler);
    private static OperationCompleted Combine(OperationCompleted[] delegates);
    public static OperationCompleted GetCompletedDelegate(Command command, Boolean& isUserHandler);
    public static OperationCompleted GetCompletedDelegate(Command command);
    public static void AppendCompletedDelegate(Command command, OperationCompleted next, bool isUserHandler);
}
public class DevExpress.Data.Helpers.AsyncOperationIdentifier : ValueType {
    private static int counter;
    private int operationId;
    private bool isFromThread;
    public static AsyncOperationIdentifier Empty;
    public bool IsEmpty { get; }
    private static AsyncOperationIdentifier();
    public static AsyncOperationIdentifier New();
    public static AsyncOperationIdentifier FromCurrentThread();
    public sealed virtual bool Equals(AsyncOperationIdentifier identifier);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(AsyncOperationIdentifier obj1, AsyncOperationIdentifier obj2);
    public static bool op_Inequality(AsyncOperationIdentifier obj1, AsyncOperationIdentifier obj2);
    public bool get_IsEmpty();
}
public class DevExpress.Data.Helpers.AsyncReaderWriterLock : object {
    private AsyncOperationIdentifier writeLockOwnerId;
    private AsyncOperationIdentifier upgradeableReadLockOwherId;
    private HashSet`1<AsyncOperationIdentifier> readerIds;
    private int readWaitersCount;
    private int writeWaitersCount;
    private int writeAfterUpgradeWaitersCount;
    private int upgradeableReadWaitersCount;
    private SemaphoreSlim readLockSemaphore;
    private SemaphoreSlim writeLockSemaphore;
    private SemaphoreSlim writeAfterUpgradeLockSemaphore;
    private SemaphoreSlim upgradeableReadLockSemaphore;
    private SpinLock spinLock;
    public IDisposable EnterReadLock();
    [AsyncStateMachineAttribute("DevExpress.Data.Helpers.AsyncReaderWriterLock/<EnterReadLockAsync>d__13")]
public Task`1<IDisposable> EnterReadLockAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private IDisposable ContinueEnterReadLock(AsyncOperationIdentifier asyncOperationId);
    public IDisposable EnterUpgradeableReadLock();
    [AsyncStateMachineAttribute("DevExpress.Data.Helpers.AsyncReaderWriterLock/<EnterUpgradeableReadLockAsync>d__16")]
public Task`1<IDisposable> EnterUpgradeableReadLockAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private IDisposable ContinueEnterUpgradeableReadLock(AsyncOperationIdentifier asyncOperationId);
    public IDisposable EnterWriteLock();
    [AsyncStateMachineAttribute("DevExpress.Data.Helpers.AsyncReaderWriterLock/<EnterWriteLockAsync>d__19")]
public Task`1<IDisposable> EnterWriteLockAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private IDisposable TryEnterReadLockSimple(AsyncOperationIdentifier asyncOperationId);
    private IDisposable TryEnterUpgradeableReadLockSimple(AsyncOperationIdentifier asyncOperationId);
    private IDisposable TryEnterWriteLockSimple(AsyncOperationIdentifier asyncOperationId);
    private void ExitReadLock(AsyncOperationIdentifier asyncOperationId);
    private void ExitUpgradeableReadLock(AsyncOperationIdentifier asyncOperationId);
    private void ExitWriteLock(AsyncOperationIdentifier asyncOperationId);
    public sealed virtual void Dispose();
}
public class DevExpress.Data.Helpers.AsyncRowInfo : object {
    private bool isValid;
    private Command loadingCommand;
    private object row;
    private object key;
    public object Row { get; public set; }
    public object Key { get; }
    public Command LoadingCommand { get; }
    public bool IsLoading { get; }
    public bool IsValid { get; }
    public bool IsLoaded { get; }
    public AsyncRowInfo(Command loadingCommand);
    public AsyncRowInfo(object row, object key);
    public object get_Row();
    public void set_Row(object value);
    public object get_Key();
    public void MakeLoading(Command loading);
    public Command get_LoadingCommand();
    public bool get_IsLoading();
    public bool get_IsValid();
    public bool get_IsLoaded();
    public void MakeInvalid();
}
public class DevExpress.Data.Helpers.AsyncRowsInfo : object {
    private int invalidRowCount;
    private Nullable`1<DateTime> rowsClearTime;
    private Dictionary`2<int, AsyncRowInfo> rows;
    public int Count { get; }
    protected internal Dictionary`2<int, AsyncRowInfo> Rows { get; }
    public int get_Count();
    public void MakeAllRowsInvalid();
    public void CheckRemoveInvalidRows(bool force);
    protected internal Dictionary`2<int, AsyncRowInfo> get_Rows();
    public AsyncRowInfo GetRow(int index);
    public bool IsRowLoaded(int index);
    public void Add(int index, AsyncRowInfo info);
    public void Remove(int index);
    public void OnLoaded(int index, object rowObject, object key);
    public List`1<KeyValuePair`2<int, AsyncRowInfo>> GetLoadingRows();
}
public class DevExpress.Data.Helpers.AsyncServerModeCurrentAndSelectedRowsKeeper : CurrentAndSelectedRowsKeeper {
    protected AsyncServerModeDataController Controller { get; }
    protected bool IsAllowSaveCurrentControllerRow { get; }
    public AsyncServerModeCurrentAndSelectedRowsKeeper(AsyncServerModeDataController controller);
    protected AsyncServerModeDataController get_Controller();
    protected virtual bool get_IsAllowSaveCurrentControllerRow();
    protected virtual void RestoreCurrentRow();
    protected virtual void SaveCurrentRow();
}
public class DevExpress.Data.Helpers.AsyncServerModeDataControllerFilterHelper : DataControllerFilterHelper {
    public AsyncServerModeDataController Controller { get; }
    public AsyncServerModeDataControllerFilterHelper(AsyncServerModeDataController controller);
    public AsyncServerModeDataController get_Controller();
    public virtual Object[] GetUniqueColumnValues(DataColumnInfo columnInfo, ColumnValuesArguments args, OperationCompleted completed);
    internal static void PrepareUniqueVales(DataController controller, DataColumnInfo columnInfo, ColumnValuesArguments args, OperationCompleted completed, OperationCompleted& patchedCompleted, CriteriaOperator& valueExpression, CriteriaOperator& filterExpression, Int32& maxCount);
}
public class DevExpress.Data.Helpers.AsyncServerModeGroupedRowsKeeperEx : GroupedRowsKeeperEx {
    public bool AllExpanded { get; }
    public AsyncServerModeGroupedRowsKeeperEx(DataController controller);
    public virtual bool get_AllExpanded();
    protected virtual bool GetAllRecordsSelected();
}
public class DevExpress.Data.Helpers.AsyncServerModeListSourceRowsKeeper : ListSourceRowsKeeper {
    private bool needRestoreGrouping;
    private int maxRestoreGroupLevel;
    private List`1<RowInfo> currentRowInfo;
    protected internal AsyncServerModeGroupedRowsKeeperEx GroupHashEx { get; }
    protected AsyncServerModeDataController Controller { get; }
    protected internal bool AllowRestoreGrouping { get; }
    private bool DevExpress.Data.Helpers.IClassicRowKeeperAsync.IsRestoreAllExpanded { get; }
    public AsyncServerModeListSourceRowsKeeper(AsyncServerModeDataController controller, SelectedRowsKeeper rowsKeeper);
    protected virtual GroupedRowsKeeperEx CreateGroupRowsKeeper();
    protected internal AsyncServerModeGroupedRowsKeeperEx get_GroupHashEx();
    protected AsyncServerModeDataController get_Controller();
    protected internal bool get_AllowRestoreGrouping();
    public virtual void SaveIncremental();
    public virtual void SaveOnRefresh(bool isEndUpdate);
    public virtual void Save();
    private void SaveCurrentRow();
    protected RowInfo GetCurrentRowKey(int index);
    protected RowInfo GetRowKey(int controllerRow);
    protected virtual bool RestoreCore(bool clear);
    public virtual bool IsExpandGroup(GroupRowInfo group);
    public virtual bool TryRestoreCurrentControllerRow(int index);
    protected internal virtual void OnTotalsReceived();
    private bool TryRestoreGroupedCurrentControllerRow(int index);
    public virtual void Clear();
    private sealed virtual override bool DevExpress.Data.Helpers.IClassicRowKeeperAsync.IsRestoredAsExpanded(GroupRowInfo group);
    private sealed virtual override bool DevExpress.Data.Helpers.IClassicRowKeeperAsync.get_IsRestoreAllExpanded();
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeperAsync.OnTotalsReceived();
}
public class DevExpress.Data.Helpers.AsyncServerModeSelectionAndCurrentKeeper : ServerModeSelectionAndCurrentKeeper {
    private bool allowResetControllerRow;
    public AsyncServerModeDataController Controller { get; }
    protected bool IsAllowIndexOfSearch { get; }
    protected bool AllowResetControllerRow { get; }
    public AsyncServerModeSelectionAndCurrentKeeper(AsyncServerModeDataController controller);
    public AsyncServerModeDataController get_Controller();
    protected virtual bool get_IsAllowIndexOfSearch();
    protected virtual bool RestoreDataRow(SelectedRowInfo& info, bool allowIndexOf);
    protected virtual bool get_AllowResetControllerRow();
    protected virtual void SaveDataRow(SelectedRowInfo& info, int listIndex, object selectedObject);
    protected virtual void RestoreCurrentDataRow(SelectedRowInfo& currentRow, bool allowIndexOf);
    [CompilerGeneratedAttribute]
private void <RestoreCurrentDataRow>b__10_0(object args);
}
public enum DevExpress.Data.Helpers.AsyncState : Enum {
    public int value__;
    public static AsyncState Invalid;
    public static AsyncState Requested;
    public static AsyncState Valid;
}
public class DevExpress.Data.Helpers.BaseDataControllerHelper : object {
    private int detachedListSourceRow;
    private DataControllerBase controller;
    private Dictionary`2<string, DataColumnInfo> savedColumns;
    private PropertyDescriptorCollection descriptorCollection;
    private bool newItemRowAdding;
    private bool addNewRowProcess;
    private INotificationProvider notificationProvider;
    private bool allowIndexOf;
    internal int lastPropertyDescriptorCount;
    private bool isSubscribedToEvents;
    protected internal int DetachedListSourceRow { get; protected internal set; }
    public bool IsAddNewRowProcess { get; }
    public bool CaseSensitive { get; }
    public int DetachedCount { get; }
    public int Count { get; }
    public DataControllerBase Controller { get; }
    public IList List { get; }
    public INotificationProvider NotificationProvider { get; }
    public ITypedList TypedList { get; }
    public ICancelAddNew CancelAddNew { get; }
    public IBindingList BindingList { get; }
    public bool IsEditableCollectionView { get; }
    internal bool EditableCollectionViewCanAddNew { get; }
    internal object EditableCollectionViewCurrentAddItem { get; }
    public DataColumnInfoCollection Columns { get; }
    public DataColumnInfoCollection DetailColumns { get; }
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public PropertyDescriptorCollection DescriptorCollection { get; }
    protected bool IsSubscribedToEvents { get; protected set; }
    public bool SupportsNotification { get; }
    public IRelationList RelationList { get; }
    public IRelationListEx RelationListEx { get; }
    private int DevExpress.Data.IRelationList.RelationCount { get; }
    public BaseDataControllerHelper(DataControllerBase controller);
    public virtual void Dispose();
    protected internal virtual int get_DetachedListSourceRow();
    protected internal virtual void set_DetachedListSourceRow(int value);
    public object AddNewRow();
    protected virtual object AddNewRowCore();
    public bool get_IsAddNewRowProcess();
    public virtual bool get_CaseSensitive();
    public int get_DetachedCount();
    public virtual int get_Count();
    public DataControllerBase get_Controller();
    public IList get_List();
    public INotificationProvider get_NotificationProvider();
    public ITypedList get_TypedList();
    public ICancelAddNew get_CancelAddNew();
    public IBindingList get_BindingList();
    public bool get_IsEditableCollectionView();
    internal bool get_EditableCollectionViewCanAddNew();
    internal object get_EditableCollectionViewCurrentAddItem();
    internal void EditableCollectionViewCommitNew();
    internal void EditableCollectionViewCancelNew();
    internal object EditableCollectionViewAddNew();
    public DataColumnInfoCollection get_Columns();
    public DataColumnInfoCollection get_DetailColumns();
    public virtual int FindRowByKey(object rowKey);
    protected virtual int TryIndexOf(object rowKey);
    public virtual object GetRowKey(int listSourceRow);
    public virtual IDataErrorInfo GetRowErrorInfo(int listSourceRow);
    public virtual IDXDataErrorInfo GetRowDXErrorInfo(int listSourceRow);
    public object GetRow(int listSourceRow);
    public virtual object GetRow(int listSourceRow, OperationCompleted completed, bool userHandler);
    public object GetNewRowValue(DataColumnInfo columnInfo);
    public virtual object GetRowValue(object row, DataColumnInfo columnInfo);
    protected void SetNewRowValue(object rowObject, DataColumnInfo columnInfo, object val);
    public object GetNewRowDetailValue(DataColumnInfo info);
    public object GetNewRow();
    public int GetNewItemRowIndex();
    public void SetNewRowValue(int column, object val);
    public Delegate GetGetRowValue(DataColumnInfo columnInfo, Type expectedReturnType);
    protected virtual Delegate GetGetRowValueCore(DataColumnInfo columnInfo, Type expectedReturnType);
    public object GetRowValue(int listSourceRow, DataColumnInfo columnInfo);
    public virtual object GetRowValue(int listSourceRow, DataColumnInfo columnInfo, OperationCompleted completed, bool userHandler);
    public virtual void SetRowValue(int listSourceRow, int column, object val);
    public virtual IList`1<DataColumnInfo> RePopulateColumns();
    public bool get_AllowNew();
    public bool get_AllowEdit();
    public bool get_AllowRemove();
    public void DeleteRow(int listSourceRow);
    public PropertyDescriptorCollection get_DescriptorCollection();
    public virtual void PopulateColumns();
    protected virtual PropertyDescriptor CreateComplexDescriptor(ComplexColumnInfo complexColumn);
    protected virtual UnboundPropertyDescriptor CreateUnboundPropertyDescriptor(UnboundColumnInfo info);
    public virtual UnboundColumnInfoCollection GetUnboundColumns();
    public virtual ComplexColumnInfoCollection GetComplexColumns();
    protected bool get_IsSubscribedToEvents();
    protected void set_IsSubscribedToEvents(bool value);
    public virtual void SubscribeEvents();
    public virtual void UnsubscribeEvents();
    protected void SubscribeEventsCore();
    protected void UnsubscribeEventsCore();
    protected virtual bool CanPopulate(PropertyDescriptor descriptor);
    protected virtual bool CanPopulateDetailDescriptor(PropertyDescriptor descriptor);
    protected internal virtual void PopulateColumn(DataColumnInfo column);
    protected virtual void PopulateColumn(PropertyDescriptor descriptor);
    protected virtual DataColumnInfo CreateDataColumn(PropertyDescriptor descriptor);
    protected virtual DetailDataColumnInfo CreateDetailDataColumn(PropertyDescriptor descriptor);
    protected virtual bool IsDetailDescriptor(PropertyDescriptor descriptor);
    protected virtual PropertyDescriptorCollection GetPropertyDescriptorCollection();
    protected void OnBindingListChanged(object sender, ListChangedEventArgs e);
    protected internal virtual void OnBindingListChanged(ListChangedEventArgs e);
    public bool get_SupportsNotification();
    public virtual IRelationList get_RelationList();
    public virtual IRelationListEx get_RelationListEx();
    protected internal virtual void SetDetachedListSourceRow(int listSourceRow);
    protected internal virtual void RaiseOnStartNewItemRow();
    protected internal virtual void RaiseOnEndNewItemRow();
    protected virtual void OnEndNewItemRow();
    private sealed virtual override string DevExpress.Data.IRelationListEx.GetRelationDisplayName(int listSourceRow, int relationIndex);
    private sealed virtual override int DevExpress.Data.IRelationList.get_RelationCount();
    private sealed virtual override string DevExpress.Data.IRelationList.GetRelationName(int listSourceRow, int relationIndex);
    private sealed virtual override bool DevExpress.Data.IRelationList.IsMasterRowEmpty(int listSourceRow, int relationIndex);
    private sealed virtual override IList DevExpress.Data.IRelationList.GetDetailList(int listSourceRow, int relationIndex);
    private sealed virtual override int DevExpress.Data.IRelationListEx.GetRelationCount(int listSourceRow);
    public virtual object GetRowValueDetail(int listSourceRow, DataColumnInfo detailColumn);
    protected internal virtual void UpdateDetachedIndex(object addedRow);
    protected internal virtual void CancelNewItemRow();
}
public abstract class DevExpress.Data.Helpers.BaseDataViewControllerHelper : ListDataControllerHelper {
    private DataRow detachedRow;
    public bool CaseSensitive { get; }
    public DataView View { get; }
    public BaseDataViewControllerHelper(DataControllerBase controller);
    public virtual void SetRowValue(int listSourceRow, int column, object val);
    protected virtual object AddNewRowCore();
    public virtual bool get_CaseSensitive();
    protected virtual int TryIndexOf(object rowKey);
    public abstract virtual DataView get_View();
    public virtual object GetRowKey(int listSourceRow);
    protected virtual void PopulateColumn(PropertyDescriptor descriptor);
    protected virtual DataRow GetDataRow(int listSourceRow);
    private DataRow GetDataRowCore(int listSourceRow);
    public virtual IDataErrorInfo GetRowErrorInfo(int listSourceRow);
    protected internal virtual void SetDetachedListSourceRow(int listSourceRow);
    protected internal virtual void RaiseOnStartNewItemRow();
    protected internal virtual void RaiseOnEndNewItemRow();
    private bool CanIgnoreMoveEvent();
    private bool CanIgnoreItemChanged();
    protected internal virtual void OnBindingListChanged(ListChangedEventArgs e);
    private bool IsValidRelation(int relationIndex);
    private DataRelation GetDataRelation(int relationIndex);
    private sealed virtual override string DevExpress.Data.IRelationList.GetRelationName(int listSourceRow, int relationIndex);
    private sealed virtual override int DevExpress.Data.IRelationListEx.GetRelationCount(int listSourceRow);
    private sealed virtual override bool DevExpress.Data.IRelationList.IsMasterRowEmpty(int listSourceRow, int relationIndex);
    private DataColumnInfo GetDetailInfo(int relationIndex);
    private sealed virtual override IList DevExpress.Data.IRelationList.GetDetailList(int listSourceRow, int relationIndex);
}
public abstract class DevExpress.Data.Helpers.BaseFilterData : object {
    private Dictionary`2<object, BaseGridColumnInfo> columns;
    private String[] outlookNames;
    private CultureInfo culture;
    private DateTime sortStartTime;
    private DateTime sortStartWeek;
    private DateTime sortZeroTime;
    protected Dictionary`2<object, BaseGridColumnInfo> Columns { get; }
    public DateTime SortStartTime { get; public set; }
    public DateTime SortZeroTime { get; }
    public DateTime SortStartWeek { get; }
    public CultureInfo Culture { get; }
    public DateTimeFormatInfo DateTimeFormat { get; }
    public int SortCount { get; }
    public int GroupCount { get; }
    public virtual void Dispose();
    protected Dictionary`2<object, BaseGridColumnInfo> get_Columns();
    public void OnStart();
    public DateTime get_SortStartTime();
    public void set_SortStartTime(DateTime value);
    public DateTime get_SortZeroTime();
    public DateTime get_SortStartWeek();
    public CultureInfo get_Culture();
    public DateTimeFormatInfo get_DateTimeFormat();
    protected abstract virtual void OnFillColumns();
    public virtual bool IsRequired(DataColumnInfo column);
    public virtual BaseGridColumnInfo GetInfo(DataColumnInfo info);
    protected virtual BaseGridColumnInfo GetInfoCore(object key);
    protected virtual object GetKey(DataColumnInfo column);
    public string GetDisplayText(int listSourceIndex, DataColumnInfo info, object value);
    public string GetOutlookLocaizedString(int id);
    protected virtual String[] GetOutlookLocalizedStrings();
    public abstract virtual int get_SortCount();
    public abstract virtual int get_GroupCount();
    public abstract virtual int GetSortIndex(object column);
}
public abstract class DevExpress.Data.Helpers.BaseGridColumnInfo : object {
    private FilterDataOutlookDateHelper outlookHelper;
    private BaseFilterData data;
    private bool required;
    private object column;
    private bool isLastSortColumn;
    private bool isGrouped;
    public ColumnSortMode SortMode;
    public ColumnGroupInterval GroupInterval;
    private static FormatInfo[] defaultFormats;
    public object Column { get; }
    public bool Required { get; public set; }
    public BaseFilterData Data { get; }
    protected bool IsGrouped { get; }
    protected bool IsLastSortColumn { get; }
    public bool AllowImageGroup { get; }
    protected BaseGridColumnInfo(BaseFilterData data, object column);
    private static BaseGridColumnInfo();
    public virtual void Dispose();
    public object get_Column();
    public virtual bool get_Required();
    public virtual void set_Required(bool value);
    public BaseFilterData get_Data();
    public abstract virtual string GetDisplayText(int listSourceIndex, object val);
    protected bool get_IsGrouped();
    protected bool get_IsLastSortColumn();
    public object UpdateGroupDisplayValue(object val);
    public bool get_AllowImageGroup();
    public string GetGroupDisplayText(object val, string text);
    public string GetOutlookDisplayText(object val);
    private string GetDayName(int day);
    private Nullable`1<int> GetDateMonthInt(Nullable`1<DateTime> ndt);
    private Nullable`1<int> GetDateYearInt(Nullable`1<DateTime> ndt);
    private Nullable`1<int> GetDateInt(Nullable`1<DateTime> ndt);
    public Nullable`1<DateTime> GetDateMonth(Nullable`1<DateTime> ndt);
    public Nullable`1<DateTime> GetDateYear(Nullable`1<DateTime> ndt);
    public Nullable`1<DateTime> GetDateTime(object val);
    public Nullable`1<DateTime> GetDate(Nullable`1<DateTime> ndt);
    public string GetAlpha(object val);
    public Nullable`1<OutlookInterval> GetOutlookInterval(Nullable`1<DateTime> ndt);
    public Cell GetCompareSortValuesInfo(Type basicExtractorType, ColumnSortOrder sortOrder);
    private static int CompareNullableComparables(Nullable`1<T> v1, Nullable`1<T> v2);
    public Nullable`1<int> CompareSortValues(int listSourceRow1, int listSourceRow2, object value1, object value2, ColumnSortOrder sortOrder);
    protected abstract virtual Nullable`1<int> RaiseCustomSort(int listSourceRow1, int listSourceRow2, object value1, object value2, ColumnSortOrder sortOrder);
    protected abstract virtual Nullable`1<int> RaiseCustomGroup(int listSourceRow1, int listSourceRow2, object value1, object value2, ColumnSortOrder columnSortOrder);
    public Cell GetCompareGroupValuesInfo(Type basicExtractorType);
    private Cell MakeDateRangeExtractorUndComparerInfo(Func`2<Nullable`1<DateTime>, Nullable`1<int>> transformator, Type basicExtractorType);
    public Nullable`1<int> CompareGroupValues(int listSourceRow1, int listSourceRow2, object value1, object value2);
    private static FormatInfo CreateFormat(FormatType type, string format);
    public virtual FormatInfo GetColumnGroupFormat();
    public FormatInfo GetDefaultFormat();
    [CompilerGeneratedAttribute]
private Nullable`1<int> <GetCompareGroupValuesInfo>b__42_0(int si1, int si2, object value1, object value2);
    [CompilerGeneratedAttribute]
private string <GetCompareGroupValuesInfo>b__42_1(int si, object boxedValue);
    [CompilerGeneratedAttribute]
private string <GetCompareGroupValuesInfo>b__42_3(int si, object boxedValue);
    [CompilerGeneratedAttribute]
private string <GetCompareGroupValuesInfo>b__42_6(object boxedValue);
    [CompilerGeneratedAttribute]
private Nullable`1<int> <GetCompareGroupValuesInfo>b__42_5(Nullable`1<DateTime> v);
}
public class DevExpress.Data.Helpers.BaseListDataControllerHelper : BaseDataControllerHelper {
    public BaseListDataControllerHelper(DataControllerBase controller);
    public virtual object GetRow(int listSourceRow, OperationCompleted completed, bool userHandler);
    public virtual object GetRowValue(int listSourceRow, DataColumnInfo columnInfo, OperationCompleted completed, bool userHandler);
    protected static object KillDBNull(object nullableSomethig);
    protected static Func`1<String[]> GetExceptionAuxInfoGetter(DataColumnInfo columnInfo, Type expectedReturnType);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.BaseListDataControllerHelper/<GetColumnAuxInfo>d__5")]
internal static IEnumerable`1<string> GetColumnAuxInfo(DataColumnInfo columnInfo);
    protected virtual Delegate GetGetRowValueCore(DataColumnInfo columnInfo, Type expectedReturnType);
    public virtual object GetRowValueDetail(int listSourceRow, DataColumnInfo detailColumn);
    public virtual void SetRowValue(int listSourceRow, int column, object val);
}
public abstract class DevExpress.Data.Helpers.BaseRowsKeeper : object {
    public static int DataRowsLevel;
    private DataController controller;
    private Dictionary`2<int, Dictionary`2<object, object>> hash;
    private KeyValuePair`2[] levels;
    private bool allRecordsSelected;
    public static object NullObject;
    public bool AnyGroupRows { get; }
    public bool AnyDataRows { get; }
    protected bool AllRecordsSelected { get; protected set; }
    protected Dictionary`2<int, Dictionary`2<object, object>> Hash { get; }
    protected DataController Controller { get; }
    protected BaseDataControllerHelper Helper { get; }
    public bool IsEmpty { get; }
    public int Count { get; }
    protected internal KeyValuePair`2[] Levels { get; }
    protected BaseRowsKeeper(DataController controller);
    private static BaseRowsKeeper();
    public sealed virtual void Dispose();
    public bool get_AnyGroupRows();
    public bool get_AnyDataRows();
    protected bool get_AllRecordsSelected();
    protected void set_AllRecordsSelected(bool value);
    protected Dictionary`2<int, Dictionary`2<object, object>> get_Hash();
    protected DataController get_Controller();
    protected BaseDataControllerHelper get_Helper();
    protected virtual bool GetAllRecordsSelected();
    public bool get_IsEmpty();
    public int get_Count();
    public void Clear();
    public void Save(ITypedWriter writer);
    protected virtual bool SaveLevelObject(ITypedWriter writer, object obj);
    protected virtual object RestoreLevelObject(ITypedReader reader);
    public void Restore(ITypedReader reader);
    public abstract virtual void Save();
    protected internal abstract virtual void RestoreCore(object row, int level, object value);
    public bool Restore(object rowKey, object row);
    public bool Contains(object rowKey, int level);
    protected internal void RemoveSelected(object rowKey, int level);
    protected void SetSelected(object rowKey, int level, object value);
    protected internal KeyValuePair`2[] get_Levels();
    protected GroupRowInfo GetGroupRow(int listSourceRow, int level);
    public object GetRowKey(GroupRowInfo group);
    public object GetRowKey(int listSourceRow);
    protected int GetControllerRow(int listSourceRow);
    protected int GetListSourceRow(int controllerRow);
    protected int GetListSourceRow(GroupRowInfo group);
    public object GetGroupRowKeyEx(GroupRowInfo group);
    private object GetValue(GroupRowInfo group);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Helpers.BindingListAdapterBase : object {
    private ItemPropertyNotificationMode itemPropertyNotificationMode;
    protected IList source;
    private PropertyChangedWeakEventHandler`1<BindingListAdapterBase> propertyChangedHandler;
    private CollectionChangedWeakEventHandler`1<BindingListAdapterBase> collectionChangedHandler;
    [CompilerGeneratedAttribute]
private bool <RaisesItemChangedEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<object> <AddingNew>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<bool> <CanAddingNew>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Type> <GetRowTypeCustom>k__BackingField;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    private int lastChangedItemIndex;
    private PropertyDescriptorCollection itemProperties;
    private bool ShouldSubscribePropertyChanged { get; }
    protected bool ShouldSubscribePropertiesChanged { get; }
    private INotifyCollectionChanged NotifyCollectionChanged { get; }
    private PropertyChangedWeakEventHandler`1<BindingListAdapterBase> PropertyChangedHandler { get; }
    private CollectionChangedWeakEventHandler`1<BindingListAdapterBase> CollectionChangedHandler { get; }
    public bool RaisesItemChangedEvents { get; public set; }
    public object OriginalDataSource { get; public set; }
    public bool SupportsSearching { get; }
    public Func`1<object> AddingNew { get; public set; }
    public Func`1<bool> CanAddingNew { get; public set; }
    public Func`1<Type> GetRowTypeCustom { get; public set; }
    public bool AllowNew { get; }
    public bool SupportsSorting { get; }
    public bool IsSorted { get; }
    public ListSortDirection SortDirection { get; }
    public PropertyDescriptor SortProperty { get; }
    public bool AllowRemove { get; }
    public bool AllowEdit { get; }
    public bool SupportsChangeNotification { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    protected bool CanRaiseListChanged { get; }
    public BindingListAdapterBase(IList source);
    public BindingListAdapterBase(IList source, ItemPropertyNotificationMode itemPropertyNotificationMode);
    protected BindingListAdapterBase(IList source, ItemPropertyNotificationMode itemPropertyNotificationMode, bool doSubsribe);
    public static BindingListAdapterBase CreateFromList(IList list);
    public static BindingListAdapterBase CreateFromList(IList list, ItemPropertyNotificationMode itemPropertyNotificationMode);
    private bool get_ShouldSubscribePropertyChanged();
    protected virtual bool get_ShouldSubscribePropertiesChanged();
    private INotifyCollectionChanged get_NotifyCollectionChanged();
    private PropertyChangedWeakEventHandler`1<BindingListAdapterBase> get_PropertyChangedHandler();
    private CollectionChangedWeakEventHandler`1<BindingListAdapterBase> get_CollectionChangedHandler();
    [CompilerGeneratedAttribute]
public bool get_RaisesItemChangedEvents();
    [CompilerGeneratedAttribute]
public void set_RaisesItemChangedEvents(bool value);
    [CompilerGeneratedAttribute]
public object get_OriginalDataSource();
    [CompilerGeneratedAttribute]
public void set_OriginalDataSource(object value);
    protected void SubscribeAll(IList source);
    public sealed virtual bool get_SupportsSearching();
    public sealed virtual int Find(PropertyDescriptor property, object key);
    [CompilerGeneratedAttribute]
public Func`1<object> get_AddingNew();
    [CompilerGeneratedAttribute]
public void set_AddingNew(Func`1<object> value);
    [CompilerGeneratedAttribute]
public Func`1<bool> get_CanAddingNew();
    [CompilerGeneratedAttribute]
public void set_CanAddingNew(Func`1<bool> value);
    [CompilerGeneratedAttribute]
public Func`1<Type> get_GetRowTypeCustom();
    [CompilerGeneratedAttribute]
public void set_GetRowTypeCustom(Func`1<Type> value);
    public virtual bool get_AllowNew();
    public sealed virtual object AddNew();
    private Type GetRowType();
    protected internal virtual void AddNewInternal();
    protected virtual void RemovingAtInternal(int index);
    protected virtual void RemoveAtInternal(int index);
    protected virtual void ClearInternal();
    protected virtual void AddInternal(object obj);
    protected virtual void InsertInternal(int index, object obj);
    protected virtual void RemoveInternal(object obj);
    public sealed virtual bool get_SupportsSorting();
    public sealed virtual bool get_IsSorted();
    public sealed virtual void RemoveSort();
    public sealed virtual ListSortDirection get_SortDirection();
    public sealed virtual PropertyDescriptor get_SortProperty();
    public sealed virtual void ApplySort(PropertyDescriptor property, ListSortDirection direction);
    public sealed virtual void AddIndex(PropertyDescriptor property);
    public sealed virtual void RemoveIndex(PropertyDescriptor property);
    public virtual bool get_AllowRemove();
    public virtual bool get_AllowEdit();
    public virtual bool get_SupportsChangeNotification();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    protected virtual void OnIndexAccessed(int index);
    private void SubscribeAllItemsPropertyChangedEvent();
    private void SubscribeNewItemsPropertyChangedEvent(NotifyCollectionChangedEventArgs e, int startingIndex);
    private void SubscribeItemsPropertyChangedEvent(int startIndex, Func`1<int> getCount);
    protected virtual bool IsItemLoaded(int index);
    protected virtual void SubscribeItemPropertyChangedEvent(object item);
    private void AddListener(INotifyPropertyChanged notifyPropertyChanged);
    private void RemoveListener(INotifyPropertyChanged notifyPropertyChanged);
    private void UnsubscribeItemsPropertyChangedEvent(IList oldItems, bool needCheckItemLoading);
    protected virtual void UnsubscribeItemPropertyChangedEvent(object item);
    protected virtual void OnObjectPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnObjectPropertyChangedCore(object sender, PropertyChangedEventArgs e);
    protected void RaiseChangedIfNeeded(object sender, string propertyName, Action`2<int, PropertyDescriptor> raiseEvent, Action unsubscribe);
    private bool IsChangedItem(object item, int offset);
    protected virtual void OnSourceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void NotifyOnItemRemove(int oldIndex, int newIndex, object item);
    protected virtual void NotifyOnItemReplace(int startingIndex, object oldItem);
    protected virtual void NotifyChanged(ListChangedEventArgs e);
    protected bool get_CanRaiseListChanged();
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
private int <SubscribeAllItemsPropertyChangedEvent>b__98_0();
}
public class DevExpress.Data.Helpers.BindingListNotificationProvider : object {
    private IBindingList list;
    private sealed virtual override bool DevExpress.Data.Helpers.INotificationProvider.IsSupportNotifications(object list);
    private sealed virtual override void DevExpress.Data.Helpers.INotificationProvider.SubscribeNotifications(ListChangedEventHandler handler);
    private sealed virtual override void DevExpress.Data.Helpers.INotificationProvider.UnsubscribeNotifications(ListChangedEventHandler handler);
    public virtual void Dispose();
    public sealed virtual INotificationProvider Clone(object list);
}
public class DevExpress.Data.Helpers.BindingSourceDataControllerHelper : BaseDataViewControllerHelper {
    public DataView View { get; }
    public BindingSourceDataControllerHelper(DataControllerBase controller);
    public virtual DataView get_View();
}
public static class DevExpress.Data.Helpers.ByIntDictionary : object {
    public static IByIntDictionary CreateForType(Type keyType);
}
public class DevExpress.Data.Helpers.ByIntDictionary`1 : object {
    protected ByIntDictionaryPage`1[] Pages;
    protected static int PageSize;
    private static int ShiftToDivMulPageSize;
    private void SplitToPage(int index, Int32& pageIndex, Int32& indexWithinPage);
    private int ComposeFromPageIndex(int pageIndex, int indexWithinPage);
    public sealed virtual bool TryGetValue(int index, Object& value);
    public sealed virtual bool TryGetKeyByValue(object value, Int32& index, int minIndex, int maxIndex);
    public sealed virtual bool ContainsKey(int index);
    public sealed virtual bool ContainsValue(object value);
    public sealed virtual void Add(int index, object value);
    public sealed virtual int GetFirstFilledIndex(int startIndex, bool isBackward);
    private int GetFirstFilledIndexForward(int startIndex);
    private int GetFirstFilledIndexBackward(int startIndex);
}
public abstract class DevExpress.Data.Helpers.ByIntDictionaryPage`1 : object {
    public abstract virtual void Add(int index, T value);
    public abstract virtual bool ContainsKey(int index);
    public abstract virtual bool TryGetValue(int index, T& value);
    public abstract virtual bool TryGetKeyByValue(T value, Int32& index);
}
public class DevExpress.Data.Helpers.ByIntDictionaryPageForRefTypes`1 : ByIntDictionaryPage`1<T> {
    protected T[] Data;
    public ByIntDictionaryPageForRefTypes`1(int dataSize);
    public virtual void Add(int index, T value);
    public virtual bool ContainsKey(int index);
    public virtual bool TryGetValue(int index, T& value);
    public virtual bool TryGetKeyByValue(T value, Int32& index);
}
public class DevExpress.Data.Helpers.ByIntDictionaryPageForValueTypes`1 : ByIntDictionaryPage`1<T> {
    protected Nullable`1[] Data;
    public ByIntDictionaryPageForValueTypes`1(int dataSize);
    public virtual void Add(int index, T value);
    public virtual bool ContainsKey(int index);
    public virtual bool TryGetValue(int index, T& value);
    public virtual bool TryGetKeyByValue(T value, Int32& index);
}
internal static class DevExpress.Data.Helpers.CanThreadsHelper : object {
    public static bool CanThreads { get; }
    public static bool get_CanThreads();
}
public class DevExpress.Data.Helpers.ColumnGroupSortInfo : object {
    private int columnHandle;
    private int groupIndex;
    private string fieldName;
    private ColumnSortOrder order;
    public string FieldName { get; }
    public int ColumnHandle { get; }
    public ColumnSortOrder Order { get; }
    public int GroupIndex { get; }
    public ColumnGroupSortInfo(int columnHandle, int groupIndex, ColumnSortOrder order, string fieldName);
    public string get_FieldName();
    public int get_ColumnHandle();
    public ColumnSortOrder get_Order();
    public int get_GroupIndex();
    public virtual bool IsEquals(DataColumnSortInfo si);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute]
public class DevExpress.Data.Helpers.ColumnGroupSortInfoCollection : CollectionBase {
    public ColumnGroupSortInfo Item { get; }
    public int GroupCount { get; }
    public ColumnGroupSortInfo get_Item(int index);
    public virtual void Add(ColumnGroupSortInfo sInfo);
    public virtual void Remove(ColumnGroupSortInfo sInfo);
    public int get_GroupCount();
    public virtual bool IsEquals(DataColumnSortInfoCollection sortInfo);
}
public enum DevExpress.Data.Helpers.ColumnServerActionType : Enum {
    public int value__;
    public static ColumnServerActionType Sort;
    public static ColumnServerActionType Group;
    public static ColumnServerActionType Filter;
    public static ColumnServerActionType Summary;
}
public class DevExpress.Data.Helpers.ColumnValuesArguments : object {
    [CompilerGeneratedAttribute]
private bool <RoundDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxCount>k__BackingField;
    [CompilerGeneratedAttribute]
private CriteriaOperator <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreAppliedFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplyNullLikeEmptyStringWhenFiltering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsReferenceValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer <ValuesComparer>k__BackingField;
    internal bool DoNotRequireIComparable;
    public bool RoundDateTime { get; public set; }
    public int MaxCount { get; public set; }
    public CriteriaOperator Filter { get; public set; }
    public bool IgnoreAppliedFilter { get; public set; }
    public bool ImplyNullLikeEmptyStringWhenFiltering { get; public set; }
    public bool ContainsReferenceValues { get; public set; }
    public IComparer ValuesComparer { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RoundDateTime();
    [CompilerGeneratedAttribute]
public void set_RoundDateTime(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxCount();
    [CompilerGeneratedAttribute]
public void set_MaxCount(int value);
    [CompilerGeneratedAttribute]
public CriteriaOperator get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(CriteriaOperator value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreAppliedFilter();
    [CompilerGeneratedAttribute]
public void set_IgnoreAppliedFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImplyNullLikeEmptyStringWhenFiltering();
    [CompilerGeneratedAttribute]
public void set_ImplyNullLikeEmptyStringWhenFiltering(bool value);
    [CompilerGeneratedAttribute]
public bool get_ContainsReferenceValues();
    [CompilerGeneratedAttribute]
public void set_ContainsReferenceValues(bool value);
    [CompilerGeneratedAttribute]
public IComparer get_ValuesComparer();
    [CompilerGeneratedAttribute]
public void set_ValuesComparer(IComparer value);
}
public static class DevExpress.Data.Helpers.CompileHelper : object {
    [ThreadStaticAttribute]
private static Nullable`1<bool> canUseDynamicMethodWithSkipVisibilityCore;
    [ThreadStaticAttribute]
private static Nullable`1<bool> canAccessRestrictedMembersViaEmitCore;
    [ThreadStaticAttribute]
private static Nullable`1<bool> isNonPublicMethodsAccessAllowedCore;
    private static ConcurrentDictionary`2<Type, bool> _isPublicCache;
    public static bool CanAccessRestrictedMembersViaEmit { get; }
    public static bool CanAccessNonPublicMethods { get; }
    private static CompileHelper();
    public static bool CanUseDynamicMethodsWithSkipVisibilityChecks();
    private static bool CalcIsEmitAllowed();
    public static bool get_CanAccessRestrictedMembersViaEmit();
    private static bool RequestRestrictedMemberAccessForEmit();
    public static bool get_CanAccessNonPublicMethods();
    private static bool IsPoisonousTypeBuilder(Type type);
    public static bool IsPublicExposable(Type t);
    private static bool DecideIsPublicExposable(Type t);
    private static bool DecideIsPublicExposableCore(Type t);
    private static bool DecideIsPublicExposableGeneric(Type t, Dictionary`2<Type, object> visited);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.CompileHelper/<FromDescendatsToRoots>d__16")]
private static IEnumerable`1<Type> FromDescendatsToRoots(Type t);
    private static MemberInfo GetMebers_GetField_DiagWorkaround(Type t, string memberName, BindingFlags flags);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.CompileHelper/<GetMembers>d__18")]
private static IEnumerable`1<MemberInfo> GetMembers(Type t, string memberName, BindingFlags flags);
    public static MemberInfo FindPropertyOrField(Type typeToSearchFrom, string property, bool includeNonPublic, bool ignoreCase);
}
public class DevExpress.Data.Helpers.crtp_ReadOnlyBindingListCreatorImpl`1 : object {
    [PreserveAttribute]
public sealed virtual Func`1<IBindingList> CreateInvoker();
}
public class DevExpress.Data.Helpers.CurrentAndSelectedRowsKeeper : SelectedRowsKeeper {
    private int groupCount;
    private int foundCurrentRow;
    protected BaseGridController Controller { get; }
    protected bool IsAllowSaveCurrentControllerRow { get; }
    public CurrentAndSelectedRowsKeeper(DataController controller, bool allowKeepSelection);
    protected BaseGridController get_Controller();
    public virtual void Save();
    protected virtual void SaveCurrentRow();
    protected virtual bool get_IsAllowSaveCurrentControllerRow();
    protected virtual void RestoreCurrentRow();
    public virtual void OnRestoreEnd();
    protected internal virtual void RestoreCore(object row, int level, object value);
}
public class DevExpress.Data.Helpers.CustomFetchKeysEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Result>k__BackingField;
    private CriteriaOperator where;
    private ServerModeOrderDescriptor[] order;
    private int skip;
    private int take;
    public bool Handled { get; public set; }
    public Object[] Result { get; public set; }
    public CriteriaOperator Where { get; }
    public ServerModeOrderDescriptor[] Order { get; }
    public int Skip { get; }
    public int Take { get; }
    public CustomFetchKeysEventArgs(CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public Object[] get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(Object[] value);
    public CriteriaOperator get_Where();
    public ServerModeOrderDescriptor[] get_Order();
    public int get_Skip();
    public int get_Take();
}
public class DevExpress.Data.Helpers.CustomGetCountEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Result>k__BackingField;
    private CriteriaOperator where;
    public bool Handled { get; public set; }
    public int Result { get; public set; }
    public CriteriaOperator Where { get; }
    public CustomGetCountEventArgs(CriteriaOperator where);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public int get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(int value);
    public CriteriaOperator get_Where();
}
public class DevExpress.Data.Helpers.CustomGetUniqueValuesEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Result>k__BackingField;
    private CriteriaOperator expression;
    private int maxCount;
    private CriteriaOperator where;
    public bool Handled { get; public set; }
    public Object[] Result { get; public set; }
    public CriteriaOperator Expression { get; }
    public int MaxCount { get; }
    public CriteriaOperator Where { get; }
    public CustomGetUniqueValuesEventArgs(CriteriaOperator expression, int maxCount, CriteriaOperator where);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public Object[] get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(Object[] value);
    public CriteriaOperator get_Expression();
    public int get_MaxCount();
    public CriteriaOperator get_Where();
}
public class DevExpress.Data.Helpers.CustomPrepareChildrenEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerModeGroupInfoData[] <Result>k__BackingField;
    private CriteriaOperator groupWhere;
    private ServerModeOrderDescriptor groupByDescriptor;
    private ServerModeSummaryDescriptor[] summaries;
    public bool Handled { get; public set; }
    public ServerModeGroupInfoData[] Result { get; public set; }
    public CriteriaOperator GroupWhere { get; }
    public ServerModeOrderDescriptor GroupByDescriptor { get; }
    public ServerModeSummaryDescriptor[] Summaries { get; }
    public CustomPrepareChildrenEventArgs(CriteriaOperator groupWhere, ServerModeOrderDescriptor groupByDescriptor, ServerModeSummaryDescriptor[] summaries);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public ServerModeGroupInfoData[] get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(ServerModeGroupInfoData[] value);
    public CriteriaOperator get_GroupWhere();
    public ServerModeOrderDescriptor get_GroupByDescriptor();
    public ServerModeSummaryDescriptor[] get_Summaries();
}
public class DevExpress.Data.Helpers.CustomPrepareTopGroupInfoEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerModeGroupInfoData <Result>k__BackingField;
    private CriteriaOperator where;
    private ServerModeSummaryDescriptor[] summaries;
    public bool Handled { get; public set; }
    public ServerModeGroupInfoData Result { get; public set; }
    public CriteriaOperator Where { get; }
    public ServerModeSummaryDescriptor[] Summaries { get; }
    public CustomPrepareTopGroupInfoEventArgs(CriteriaOperator where, ServerModeSummaryDescriptor[] summaries);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public ServerModeGroupInfoData get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(ServerModeGroupInfoData value);
    public CriteriaOperator get_Where();
    public ServerModeSummaryDescriptor[] get_Summaries();
}
public class DevExpress.Data.Helpers.DataColumnSortInfo : object {
    private DataColumnInfo columnInfo;
    private ColumnSortOrder sortOrder;
    private DefaultBoolean requireOnCellCompare;
    private ColumnGroupInterval groupInterval;
    private bool runningSummary;
    private bool crossGroupRunningSummary;
    private DataColumnInfo auxColumnInfo;
    public string ColumnGroupData { get; }
    public ColumnGroupInterval GroupInterval { get; public set; }
    public DataColumnInfo ColumnInfo { get; }
    public DataColumnInfo AuxColumnInfo { get; public set; }
    public ColumnSortOrder SortOrder { get; }
    public DefaultBoolean RequireOnCellCompare { get; public set; }
    public bool RunningSummary { get; public set; }
    public bool CrossGroupRunningSummary { get; public set; }
    public DataColumnSortInfo(DataColumnInfo columnInfo);
    public DataColumnSortInfo(DataColumnInfo columnInfo, ColumnSortOrder sortOrder);
    public DataColumnSortInfo(DataColumnInfo columnInfo, ColumnSortOrder sortOrder, ColumnGroupInterval groupInterval);
    public virtual string get_ColumnGroupData();
    public ColumnGroupInterval get_GroupInterval();
    public void set_GroupInterval(ColumnGroupInterval value);
    public DataColumnInfo get_ColumnInfo();
    public DataColumnInfo get_AuxColumnInfo();
    public void set_AuxColumnInfo(DataColumnInfo value);
    public ColumnSortOrder get_SortOrder();
    public DefaultBoolean get_RequireOnCellCompare();
    public void set_RequireOnCellCompare(DefaultBoolean value);
    public bool get_RunningSummary();
    public void set_RunningSummary(bool value);
    public bool get_CrossGroupRunningSummary();
    public void set_CrossGroupRunningSummary(bool value);
    public virtual bool IsEquals(DataColumnSortInfo info);
    protected internal virtual bool ContainsColumn(string columnName);
    protected internal virtual bool ContainsColumnInfo(DataColumnInfo info);
}
public class DevExpress.Data.Helpers.DataColumnSortInfoCollection : ColumnInfoNotificationCollection`1<DataColumnSortInfo> {
    private int groupCount;
    public int GroupCount { get; public set; }
    public DataColumnSortInfoCollection(DataControllerBase controller);
    public DataColumnSortInfoCollection(DataControllerBase controller, CollectionChangeEventHandler collectionChanged);
    public void ClearAndAddRange(int groupCount, DataColumnSortInfo[] sortInfos);
    public void ClearAndAddRange(DataColumnSortInfo[] sortInfos);
    public void ClearAndAddRange(DataColumnSortInfo[] sortInfos, int groupCount);
    public DataColumnSortInfo[] ToArray();
    public int GetGroupIndex(DataColumnInfo info);
    public int GetSortIndex(DataColumnInfo info);
    protected internal bool Contains(string columnName);
    public void AddRange(int groupCount, DataColumnSortInfo[] sortInfos);
    public void AddRange(DataColumnSortInfo[] sortInfos);
    public void AddRange(DataColumnSortInfo[] sortInfos, int groupCount);
    [ObsoleteAttribute]
public void Assign(ColumnGroupSortInfoCollection oldSort);
    private DataColumnSortInfo Add(DataColumnSortInfo info);
    public DataColumnSortInfo Add(DataColumnInfo columnInfo, ColumnSortOrder sortOrder, ColumnGroupInterval groupInterval, bool runningSummary, bool crossGroupRunningSummary);
    public DataColumnSortInfo Add(DataColumnInfo columnInfo, ColumnSortOrder sortOrder);
    public int get_GroupCount();
    public void set_GroupCount(int value);
    public bool IsEquals(DataColumnSortInfoCollection collection);
    public void ChangeGroupSorting(int index);
    protected virtual bool IsColumnInfoUsed(int index, IList`1<DataColumnInfo> unusedColumns);
    public virtual DataColumnSortInfoCollection Clone();
}
public class DevExpress.Data.Helpers.DataControllerChangedItem : object {
    private int controllerRowHandle;
    private NotifyChangeType changedType;
    private bool visible;
    private int visibleIndex;
    private bool groupSimpleChange;
    private DataColumnInfo changedColumn;
    public bool IsCellChange { get; }
    public DataColumnInfo ChangedColumn { get; }
    public bool GroupSimpleChange { get; }
    public int ControllerRowHandle { get; }
    public NotifyChangeType ChangedType { get; }
    public bool Visible { get; }
    public int VisibleIndex { get; public set; }
    public DataControllerChangedItem(int controllerRowHandle, NotifyChangeType changedType, GroupRowInfo parentGroupRow, bool groupSimpleChange, DataColumnInfo changedColumn);
    public bool get_IsCellChange();
    public DataColumnInfo get_ChangedColumn();
    public bool get_GroupSimpleChange();
    public int get_ControllerRowHandle();
    public NotifyChangeType get_ChangedType();
    public bool get_Visible();
    public int get_VisibleIndex();
    public void set_VisibleIndex(int value);
    public bool IsEqual(int controllerRowHandle, NotifyChangeType changedType);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Helpers.DataControllerChangedItemCollection : object {
    private DataController controller;
    private IDataControllerVisualClient visualClient;
    private int previousVisibleCount;
    private List`1<DataControllerChangedItem> innerList;
    public bool AlwaysNotifyVisualClient;
    public int PreviousVisibleCount { get; }
    public int Count { get; }
    public DataControllerChangedItem Item { get; }
    public bool IsVisibleRowCountChanged { get; }
    public DataControllerChangedItemCollection(DataController controller, IDataControllerVisualClient visualClient);
    public int get_PreviousVisibleCount();
    public int get_Count();
    private void EnsureInnerList();
    public DataControllerChangedItem get_Item(int index);
    public void AddItem(int controllerRowHandle, NotifyChangeType changedType, GroupRowInfo parentGroupRow);
    public void AddItem(int controllerRowHandle, NotifyChangeType changedType, GroupRowInfo parentGroupRow, bool groupSimpleChange, DataColumnInfo changedColumn);
    public void RemoveAt(int index);
    public void UpdateVisibleIndexes(VisibleIndexCollection visibleIndexes, bool isAdded);
    public virtual void NotifyVisualClient();
    protected virtual void UpdateRows(int topRowIndexDelta);
    public virtual int CalculateTopRowDelta();
    public virtual void RemoveNonVisibleItems();
    public virtual bool IsChangedOnly();
    private void NotifyChanges();
    public bool IsVisibleRangeChanged();
    public virtual bool get_IsVisibleRowCountChanged();
    private bool HasItem(int visibleRow, NotifyChangeType changedType);
    private sealed virtual override IEnumerator`1<DataControllerChangedItem> System.Collections.Generic.IEnumerable<DevExpress.Data.Helpers.DataControllerChangedItem>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Data.Helpers.DataControllerNotificationProviders : object {
    private static DataControllerNotificationProviders _default;
    private List`1<INotificationProvider> providers;
    public static DataControllerNotificationProviders Default { get; }
    public static DataControllerNotificationProviders get_Default();
    public void AddProvider(INotificationProvider provider);
    public void RemoveProvider(INotificationProvider provider);
    public INotificationProvider FindProvider(object list);
}
internal class DevExpress.Data.Helpers.DataControllerRaisedListChangedEventArgs : ListChangedEventArgs {
    public static DataControllerRaisedListChangedEventArgs Reset;
    public DataControllerRaisedListChangedEventArgs(ListChangedType listChangedType, int newIndex, int oldIndex);
    public DataControllerRaisedListChangedEventArgs(ListChangedType listChangedType, int newIndex, PropertyDescriptor descriptor);
    private static DataControllerRaisedListChangedEventArgs();
}
public class DevExpress.Data.Helpers.DataControllerVirtualQuery : object {
    private object source;
    private BaseGridController controller;
    private int lastRowCount;
    private OperationCompleted lastGetUniqueValuesCompleted;
    protected bool AllowUnsafeThreading { get; }
    public bool IsSupportUniqueValues { get; }
    public bool IsSupportSummary { get; }
    public bool CanReset { get; }
    public bool CanFilter { get; }
    public bool CanSort { get; }
    public bool CanGroup { get; }
    protected BaseGridController Controller { get; }
    public bool IsSupported { get; }
    protected IXtraRefreshable RefreshableSource { get; }
    protected IXtraSourceError SourceError { get; }
    protected IXtraMoreRows MoreRowsSource { get; }
    protected IXtraBusySupport BusySource { get; }
    private IXtraSeizableSource SeizableSource { get; }
    protected IVirtualListServer ServerSource { get; }
    protected IXtraGetUniqueValues UniqueValuesSource { get; }
    protected IVirtualListServerWithTotalSummary ServerSourceSummary { get; }
    public bool IsBusy { get; }
    public DataControllerVirtualQuery(BaseGridController controller);
    private void SubscribeNotifications();
    public virtual void Dispose();
    private void OnUniqueValuesReady(object sender, UniqueValuesReadyEventArgs e);
    private void OnTotalSummaryReady(object sender, VirtualServerModeTotalSummaryReadyEventArgs e);
    private void OnErrorOccurred(object sender, ErrorEventArgs e);
    private void OnBusyChanged(object sender, EventArgs e);
    protected virtual bool get_AllowUnsafeThreading();
    private void OnRowsLoaded(object sender, EventArgs e);
    protected virtual void OnRowsLoadedCore();
    public virtual bool get_IsSupportUniqueValues();
    public virtual bool get_IsSupportSummary();
    public virtual bool get_CanReset();
    public virtual bool get_CanFilter();
    public virtual bool get_CanSort();
    public virtual bool get_CanGroup();
    protected BaseGridController get_Controller();
    public bool get_IsSupported();
    protected IXtraRefreshable get_RefreshableSource();
    protected IXtraSourceError get_SourceError();
    protected IXtraMoreRows get_MoreRowsSource();
    protected IXtraBusySupport get_BusySource();
    private IXtraSeizableSource get_SeizableSource();
    protected IVirtualListServer get_ServerSource();
    protected IXtraGetUniqueValues get_UniqueValuesSource();
    protected IVirtualListServerWithTotalSummary get_ServerSourceSummary();
    public void RequestMoreData(int suggestedRowCount);
    protected virtual void RequestMoreDataCore(int suggestedRowCount);
    public void CalcTotalSummary();
    public bool get_IsBusy();
    public bool HasMoreData();
    public void Refresh();
    protected virtual void RefreshCore();
    protected internal void CheckLoadMore();
    protected internal bool ApplySortGroup();
    protected virtual bool ApplySortGroupCore();
    public virtual Object[] GetUniqueColumnValues(DataColumnInfo columnInfo, ColumnValuesArguments args, OperationCompleted completed);
    protected virtual ServerModeSummaryDescriptor[] GetTotalSummary();
    private void UpdateTotalSummaryResults(VirtualServerModeTotalSummaryReadyEventArgs e);
    private ServerModeOrderDescriptor[] GetSortDescriptors();
}
public class DevExpress.Data.Helpers.DataMergedColumnSortInfo : DataColumnSortInfo {
    public static int InfosLengthThreshold;
    private DataColumnSortInfo[] infos;
    public DataColumnSortInfo[] Infos { get; }
    public string ColumnGroupData { get; }
    public DataMergedColumnSortInfo(DataColumnSortInfo[] infos);
    private static DataMergedColumnSortInfo();
    public DataColumnSortInfo[] get_Infos();
    protected internal virtual bool ContainsColumn(string columnName);
    protected internal virtual bool ContainsColumnInfo(DataColumnInfo info);
    public virtual bool IsEquals(DataColumnSortInfo info);
    public virtual string get_ColumnGroupData();
    public int GetColumnIndex(int column);
}
public class DevExpress.Data.Helpers.DataSourceInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsReady>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IClassicRowKeeper <RowsKeeper>k__BackingField;
    public bool IsReady { get; public set; }
    public string Columns { get; public set; }
    public IClassicRowKeeper RowsKeeper { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_IsReady();
    [CompilerGeneratedAttribute]
public void set_IsReady(bool value);
    [CompilerGeneratedAttribute]
public string get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(string value);
    [CompilerGeneratedAttribute]
public IClassicRowKeeper get_RowsKeeper();
    [CompilerGeneratedAttribute]
internal void set_RowsKeeper(IClassicRowKeeper value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual void Dispose();
}
public class DevExpress.Data.Helpers.DataViewDataControllerHelper : BaseDataViewControllerHelper {
    private FakeGetRow getRowDelegate;
    public DataView View { get; }
    public DataViewDataControllerHelper(DataControllerBase controller);
    public virtual void Dispose();
    protected virtual PropertyDescriptorCollection GetPropertyDescriptorCollection();
    protected internal virtual void CancelNewItemRow();
    private DataRow dummy(int row);
    private void InitFastGetRow();
    public virtual DataView get_View();
    protected virtual DataRow GetDataRow(int listSourceRow);
    public virtual object GetRowValue(int listSourceRow, DataColumnInfo columnInfo, OperationCompleted completed, bool userHandler);
    protected virtual Delegate GetGetRowValueCore(DataColumnInfo columnInfo, Type expectedReturnType);
}
public static class DevExpress.Data.Helpers.DefaultColumnAlignmentHelper : object {
    public static bool IsColumnCenterAlignedByDefault(Type columnType);
    public static bool IsColumnFarAlignedByDefault(Type columnType);
}
public class DevExpress.Data.Helpers.DetailNodeInfo : object {
    private string caption;
    private object list;
    private DataColumnInfo[] columns;
    private DetailNodeInfo[] nodes;
    public string Caption { get; public set; }
    public DataColumnInfo[] Columns { get; public set; }
    public DetailNodeInfo[] Nodes { get; public set; }
    public bool HasChildren { get; }
    public object List { get; public set; }
    public DetailNodeInfo(string caption);
    public string get_Caption();
    public void set_Caption(string value);
    public DataColumnInfo[] get_Columns();
    public void set_Columns(DataColumnInfo[] value);
    public DetailNodeInfo[] get_Nodes();
    public void set_Nodes(DetailNodeInfo[] value);
    public bool get_HasChildren();
    public object get_List();
    public void set_List(object value);
    public DetailNodeInfo Find(string name);
    public static DetailNodeInfo Find(DetailNodeInfo[] nodes, string name);
}
public class DevExpress.Data.Helpers.DictionaryListAdapterBase : BindingListAdapterBase {
    private PropertyDescriptorCollection properties;
    public DictionaryListAdapterBase(IList source);
    public DictionaryListAdapterBase(IList source, IDictionary`2<string, Type> types);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
}
public static class DevExpress.Data.Helpers.DisposableHelper : object {
    public static IDisposable Wrap(Action disposeAction);
    public static void DisposeAndForget(T& disposable);
    public static void ForgetAndDisposeIfDisposable(T& maybeDisposable);
}
public class DevExpress.Data.Helpers.EmptyNotificationProvider : object {
    private sealed virtual override bool DevExpress.Data.Helpers.INotificationProvider.IsSupportNotifications(object list);
    private sealed virtual override void DevExpress.Data.Helpers.INotificationProvider.SubscribeNotifications(ListChangedEventHandler handler);
    private sealed virtual override void DevExpress.Data.Helpers.INotificationProvider.UnsubscribeNotifications(ListChangedEventHandler handler);
    public virtual void Dispose();
    public sealed virtual INotificationProvider Clone(object list);
}
public class DevExpress.Data.Helpers.ErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public Exception Error { get; public set; }
    public ErrorEventArgs(Exception error);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
}
public class DevExpress.Data.Helpers.ExpandedGroupKeeper : GroupKeeperBase`1<IEnumerable`1<GroupRowInfo>> {
    public ExpandedGroupKeeper(DataController controller);
    protected virtual IEnumerable`1<GroupRowInfo> GetSelectedGroups();
    protected virtual bool IsAllSelected();
    protected virtual void OnRestoreAllSelected();
    protected virtual void OnRestoreGroup(GroupRowInfo group, object selection);
    internal void RemoveExpanded();
}
public static class DevExpress.Data.Helpers.ExpressionHelpers`1 : object {
    public static IQueryable`1<object> GetUniqueValues(IQueryable`1<T> source, string propertyName);
    public static Expression`1<Func`2<T, TTarget>> CreatePropertyExpression(string name);
    public static Expression`1<Func`2<T, object>> CreatePropertyExpression(string name);
    public static object GetSummary(IQueryable`1<T> source, string propertyName, Aggregate aggregate);
}
public static class DevExpress.Data.Helpers.ExpressiveGroupHelpers : object {
    public static Func`3<int, int, bool> GetGroupRowsEqualizer(IDataControllerSort expressiveSortClient, BaseDataControllerHelper getValueSource, DataColumnInfo dataColumnInfo);
    private static GroupEqualizerResult GetGroupRowsEqualizerFromCellCompareInfo(Cell clientMethodInfo, IComparer customComparer);
}
public static class DevExpress.Data.Helpers.ExpressiveSortHelpers : object {
    private static bool GuessIsThreadSafeTypeAndDefaultComparer();
    private static bool IsGenericComparable();
    internal static bool IsGenericEquatable();
    private static Comparison`1<int> MakeRowsCompareCore(IDataControllerSort expressiveSortClient, IEnumerable`1<DataColumnSortInfo> sortInfos, Func`3<DataColumnSortInfo, Type, Delegate> getterGetter, Func`2<int, int> handles2SourceIndicesMapper, Func`5<Type, Delegate, bool, int, Tuple`3<Delegate, Action`1<IEnumerable`1<int>>, Action>> finalCompareValueGetterCacher, Boolean& isPlinqAble, Action`1& prepareCaches, Action& disposeCachesAfterUse);
    private static Comparison`1<int> MapNonFinalRowsComparerToHandles(Func`2<int, int> handles2SourceIndicesMapper, Comparison`1<int> comp, Func`3<int, int, Nullable`1<int>> rowsComparer);
    private static Comparison`1<int> BeadNextCellComparer(Comparison`1<int> existingChain, Comparison`1<int> nextBead);
    private static Comparison`1<int> MapRowsComparerToHandles(Func`2<int, int> handles2SourceIndicesMapper, Func`3<int, int, int> typedComparer);
    private static Comparison`1<int> CreateBySourceRowIndexComparison(Func`2<int, int> handles2SourceIndicesMapper, bool isDesc);
    public static Comparison`1<int> MakeRowsCompare(IDataControllerSort expressiveSortClient, DataColumnSortInfo[] sortInfos, BaseDataControllerHelper getValueSource, Func`2<int, int> handles2SourceIndicesMapper, Func`5<Type, Delegate, bool, int, Tuple`3<Delegate, Action`1<IEnumerable`1<int>>, Action>> finalCompareValueGetterCacher, Boolean& isPlinqAble, Action`1& prepareCaches, Action& disposeCachesAfterUse);
    public static Type GetGetGetRowValueType(DataColumnInfo dci);
    private static CellCompareLarvae[] PrepareCells(IDataControllerSort expressiveSortClient, IEnumerable`1<DataColumnSortInfo> sortInfos, Func`3<DataColumnSortInfo, Type, Delegate> getterGetter, Boolean& isThreadSafe);
    private static CellCompareLarvae Transform(DataColumnSortInfo sortInfo, Cell cellMethodInfo, Func`3<DataColumnSortInfo, Type, Delegate> getterGetter);
    private static Cell GetCompareRowsCellInfo(IDataControllerSort expressiveSortClient, DataColumnInfo dataColumnInfo, Type baseExtractorType, ColumnSortOrder order);
    private static Cell MakeFinalCellComparerFromNonFinal(Cell sortedByClientMethodInfo, IComparer customComparer);
}
public class DevExpress.Data.Helpers.ExpressiveSortInfo : object {
}
public class DevExpress.Data.Helpers.FilterDataOutlookDateHelper : OutlookDateHelper {
    private BaseFilterData data;
    protected DateTime SortZeroTime { get; }
    protected DateTime SortStartWeek { get; }
    public FilterDataOutlookDateHelper(BaseFilterData data);
    protected virtual DateTime get_SortZeroTime();
    protected virtual DateTime get_SortStartWeek();
}
public class DevExpress.Data.Helpers.FilterHelper : FilterHelperBase {
    public DataController Controller { get; }
    public FilterHelper(DataController controller, VisibleListSourceRowCollection visibleListSourceRows);
    public DataController get_Controller();
    protected virtual IEnumerable`1<int> GetRowIndices(CriteriaOperator filter, bool ignoreAppliedFilter);
}
public class DevExpress.Data.Helpers.FilterHelperBase : object {
    private DataControllerBase controller;
    private VisibleListSourceRowCollection visibleListSourceRows;
    public static Nullable`1<bool> AvoidInvalidColumnFilterCriteriaBasedOnFilterValueType;
    public DataControllerBase Controller { get; }
    public VisibleListSourceRowCollection VisibleListSourceRows { get; }
    public FilterHelperBase(DataControllerBase controller, VisibleListSourceRowCollection visibleListSourceRows);
    public DataControllerBase get_Controller();
    protected bool IsRequiredDisplayText(int column);
    protected bool IsRequiredDisplayText(DataColumnInfo column);
    public virtual VisibleListSourceRowCollection get_VisibleListSourceRows();
    protected IEnumerable`1<object> GetColumnValues(DataColumnInfo columnInfo, int maxCount, bool ignoreAppliedFilter, bool roundDateTime, bool displayText, bool implyNullLikeEmptyStringWhenFiltering);
    protected virtual Object[] GetFilteredColumnValues(int column, ColumnValuesArguments args, bool displayText);
    protected virtual IEnumerable`1<int> GetRowIndices(CriteriaOperator filter, bool ignoreAppliedFilter);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.FilterHelperBase/<GetColumnValues>d__12")]
protected virtual IEnumerable`1<object> GetColumnValues(DataColumnInfo columnInfo, ColumnValuesArguments args, bool displayText);
    protected virtual bool YieldColumnValue(bool implyNullLikeEmptyString, bool useDateTimeColumnRounding, Object& value);
    protected IEnumerable`1<object> GetColumnValues(DataColumnInfo columnInfo, int maxCount, bool ignoreAppliedFilter, bool roundDateTime, bool displayText);
    public Object[] GetUniqueColumnValues(DataColumnInfo columnInfo, int maxCount, bool ignoreAppliedFilter, bool roundDataTime, OperationCompleted completed);
    public Object[] GetUniqueColumnValues(DataColumnInfo columnInfo, int maxCount, bool ignoreAppliedFilter, bool roundDataTime, OperationCompleted completed, bool implyNullLikeEmptyStringWhenFiltering);
    public Object[] GetUniqueColumnValues(DataColumnInfo columnInfo, int maxCount, CriteriaOperator filter, bool ignoreAppliedFilter, bool roundDataTime, OperationCompleted completed, bool implyNullLikeEmptyStringWhenFiltering);
    public virtual Object[] GetUniqueColumnValues(DataColumnInfo columnInfo, ColumnValuesArguments args, OperationCompleted completed);
    private Object[] SortByValueWithDefaultValueComparer(IEnumerable`1<object> values);
    protected virtual Object[] GetUniqueColumnReferenceValues(DataColumnInfo columnInfo, ColumnValuesArguments args, Type columnType);
    private Object[] SortByObjectReferenceOrDataSourceIndex(ColumnValuesArguments args, IEnumerable`1<object> values);
    public virtual CriteriaOperator CalcColumnFilterCriteriaByValue(DataColumnInfo columnInfo, object columnValue, bool equal, bool roundDateTime, IFormatProvider provider);
    public string CalcColumnFilterStringByValue(DataColumnInfo columnInfo, object columnValue, bool equal, bool roundDateTime, IFormatProvider provider);
    public static CriteriaOperator CalcColumnFilterCriteriaByValue(string columnName, Type columnFilteredType, object value, bool roundDateTime, IFormatProvider provider);
    public static CriteriaOperator CalcColumnFilterCriteriaByValue(string columnName, Type columnFilteredType, object value, bool roundDateTime, IFormatProvider provider, bool isServerMode);
    public static object CorrectFilterValueType(Type columnFilteredType, object filteredValue);
    public static object CorrectFilterValueType(Type columnType, object filteredValue, IFormatProvider provider);
    public static bool TryCorrectFilterValueType(Type columnType, object filteredValue, IFormatProvider provider, Object& value);
    public static DateTime ConvertToDate(object val, IFormatProvider provider);
    public static string ConvertDateToString(object val, IFormatProvider provider);
    public static TimeOnly ConvertToTime(object val, IFormatProvider provider);
    [CompilerGeneratedAttribute]
private int <SortByValueWithDefaultValueComparer>b__19_0(object x, object y);
}
public class DevExpress.Data.Helpers.FindColumnInfo : object {
    [CompilerGeneratedAttribute]
private IDataColumnInfo <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public IDataColumnInfo Column { get; public set; }
    public string PropertyName { get; public set; }
    [CompilerGeneratedAttribute]
public IDataColumnInfo get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(IDataColumnInfo value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public virtual string ToString();
}
public class DevExpress.Data.Helpers.FindSearchField : object {
    private FindColumnInfo column;
    private String[] _values;
    public FindColumnInfo Column { get; public set; }
    public IDataColumnInfo ColumnInfo { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public String[] Values { get; public set; }
    public FindSearchField(string name, string value);
    public FindSearchField(string name, String[] values);
    private void UpdateCase();
    public FindColumnInfo get_Column();
    public void set_Column(FindColumnInfo value);
    public IDataColumnInfo get_ColumnInfo();
    public void set_ColumnInfo(IDataColumnInfo value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public String[] get_Values();
    public void set_Values(String[] value);
    internal void AddValue(string value);
}
public class DevExpress.Data.Helpers.FindSearchFieldResolveDelegate : MulticastDelegate {
    public FindSearchFieldResolveDelegate(object object, IntPtr method);
    public virtual string Invoke(FindSearchField field);
    public virtual IAsyncResult BeginInvoke(FindSearchField field, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.Helpers.FindSearchParser : object {
    public static string IDPrefix;
    private static Regex parser;
    private static Regex queryParser;
    private static Regex quotedGroups;
    protected static Regex SParser { get; }
    private static Regex QuotedGroup { get; }
    protected static Regex SQueryParser { get; }
    protected Regex Parser { get; }
    protected Regex QueryParser { get; }
    protected static Regex get_SParser();
    private static Regex get_QuotedGroup();
    protected static Regex get_SQueryParser();
    protected Regex get_Parser();
    protected Regex get_QueryParser();
    public FindSearchParserResults Parse(string sourceText);
    public virtual FindSearchParserResults Parse(string sourceText, IEnumerable`1<IDataColumnInfo> columns);
    public virtual FindSearchParserResults Parse(string sourceText, FindSearchFieldResolveDelegate fieldResolver);
    private bool IsMatchInsideQuotedGroups(Match m, MatchCollection quotedGroups);
    private List`1<Match> UpdateFieldMatches(MatchCollection fields, MatchCollection quotedGroups);
    private String[] ParseSearchText(string searchText);
    protected virtual List`1<FindSearchField> ParseFields(List`1<Match> matches, FindSearchFieldResolveDelegate fieldResolver);
    private string ExtractField(string field);
    private string ExtractValue(string text);
    private string RemoveQuotes(string text);
    public static string GetWordFirstLetters(string text);
    public static void AppendColumnPrefixes(String[] columns);
    public static string AppendColumnPrefix(string field);
    private string DefaultOnFindResolveColumnName(FindSearchField field, IEnumerable`1<IDataColumnInfo> columns);
    public static IDataColumnInfo ColumnByCaption(IEnumerable`1<IDataColumnInfo> columns, string caption);
    private static IDataColumnInfo ColumnByCaption(IEnumerable`1<IDataColumnInfo> columns, string caption, bool toLower, bool firstLetters, bool useStartWith);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Helpers.FindSearchParserResults : object {
    private FindColumnInfo[] columnNames;
    private string sourceText;
    private String[] searchText;
    private List`1<FindSearchField> fields;
    private Dictionary`2<string, String[]> cache;
    public FindColumnInfo[] ColumnNames { get; public set; }
    public FindSearchField Item { get; }
    public List`1<FindSearchField> Fields { get; }
    public String[] SearchTexts { get; }
    public string SearchText { get; }
    public string SourceText { get; }
    public int FieldCount { get; }
    public FindSearchParserResults(string sourceText, String[] searchText, List`1<FindSearchField> fields);
    public FindColumnInfo[] get_ColumnNames();
    public void set_ColumnNames(FindColumnInfo[] value);
    public void AppendColumnFieldPrefixes();
    public FindSearchField get_Item(int index);
    public List`1<FindSearchField> get_Fields();
    public String[] get_SearchTexts();
    public string get_SearchText();
    public string get_SourceText();
    public int get_FieldCount();
    public string GetMatchedText(string field, string text);
    private string GetMatchedSearchText(string text);
    private String[] GetFieldCache(string field);
    public bool ContainsField(string field);
    public String[] RemoveFieldColumns(String[] columns);
    public bool IsAllowHighlight(string field, string text);
    private string GetFieldMatchedText(string text, String[] cachedInfo);
    public DisplayTextHighlightRange[] GetMatchedRanges(string displayText, string fieldName);
    private IEnumerable`1<DisplayTextHighlightRange> GetMatchedRangesCore(string displayText, string fieldName);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.FindSearchParserResults/<GetMatchedRangesCoreCore>d__30")]
private IEnumerable`1<DisplayTextHighlightRange> GetMatchedRangesCoreCore(string text, IEnumerable`1<string> strings);
    private void EnsureFieldsCache();
}
public static class DevExpress.Data.Helpers.FindSearchRichParser : object {
    public static char OpEqualsSymbol;
    public static char OpStartsWithSymbol;
    public static char OpContainsSymbol;
    public static char OpLikeSymbol;
    public static char GroupAndSymbol;
    public static char GroupOrSymbol;
    public static char GroupNotSymbol;
    public static char DefaultGroupSymbol;
    public static char DefaultOpSymbol;
    private static bool PeekEofOrChar(TextReader reader, Char& peekedChar);
    private static bool IsBlank(char ch);
    private static void SkipBlanks(TextReader reader);
    private static bool IsGroupSymbol(char ch);
    private static bool IsOperationSymbol(char ch);
    private static void ProcessQuoted(TextReader reader, StringBuilder builder);
    private static void ProcessEtc(TextReader reader, bool dontAcceptColon, StringBuilder builder);
    private static void ProcessSqBrFieldName(TextReader reader, StringBuilder builder);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.FindSearchRichParser/<Parse>d__19")]
public static IEnumerable`1<RawToken> Parse(TextReader reader, char defaultGroupSymbol, char defaultOperationSymbol);
    private static FilterCondition FilterConditionFromChar(char opChar);
    private static char CharFromFilterCondition(FilterCondition operation);
    public static Token[] Parse(string findPanelText, IEnumerable`1<IDataColumnInfo> columns, char defaultGroupSymbol, FilterCondition defaultOperation);
}
public static class DevExpress.Data.Helpers.FindSearchTools : object {
    private static Nullable`1<DisplayTextHighlightRange> SpecificContains(string displayText, string highlightText);
    private static Nullable`1<DisplayTextHighlightRange> SpecificStartsWith(string displayText, string highlightText);
    private static Nullable`1<DisplayTextHighlightRange> SpecificGuessLength(string displayText, string highlightText, int start);
    private static Nullable`1<DisplayTextHighlightRange> SpecificEquals(string displayText, string highlightText);
    private static void GetFindCriteriaAndHighlightedTextGetter(string findPanelText, IEnumerable`1<IDataColumnInfo> columns, char defaultGroupSymbol, FilterCondition defaultOperation, bool clientMode, CriteriaOperator& _findCriteria, Func`3& _highlightedTextGetter);
    private static Func`2<string, Nullable`1<DisplayTextHighlightRange>> CreatePrimitiveHighlighter(FilterCondition operation, string text);
    private static Func`2<string, Nullable`1<DisplayTextHighlightRange>> CreatePrimitiveHighlighterContains(string specificText);
    private static Func`2<string, Nullable`1<DisplayTextHighlightRange>> CreatePrimitiveHighlighterStartsWith(string specificText);
    private static Func`2<string, Nullable`1<DisplayTextHighlightRange>> CreatePrimitiveHighlighterEquals(string specificText);
    private static Func`2<string, Nullable`1<DisplayTextHighlightRange>> CreatePrimitiveHighlighterLike(string specificText);
    public static void Extract(ParseFindPanelTextEventArgs args, CriteriaOperator& findCriteria, Func`3& highlighter);
    private static bool IsFineAsIs(DisplayTextHighlightRange[] input, int displayTextLength);
    private static DisplayTextHighlightRange[] SanitizeCore(DisplayTextHighlightRange[] input, int displayTextLength);
    public static DisplayTextHighlightRange[] Sanitize(DisplayTextHighlightRange[] input, int displayTextLength);
    public static void GetFindCriteriaAndHighlightedTextGetterKindAnd(string findPanelText, IEnumerable`1<IDataColumnInfo> columns, FilterCondition defaultOperation, bool clientMode, CriteriaOperator& _findCriteria, Func`3& _highlightedTextGetter);
    public static void GetFindCriteriaAndHighlightedTextGetterKindOr(string findPanelText, IEnumerable`1<IDataColumnInfo> columns, FilterCondition defaultOperation, bool clientMode, CriteriaOperator& _findCriteria, Func`3& _highlightedTextGetter);
    public static void GetFindCriteriaAndHighlightedTextGetterKindMixed(string findPanelText, IEnumerable`1<IDataColumnInfo> columns, FilterCondition defaultOperation, bool clientMode, CriteriaOperator& _findCriteria, Func`3& _highlightedTextGetter);
    public static void GetFindCriteriaAndHighlightedTextGetterKindExact(string findPanelText, IEnumerable`1<IDataColumnInfo> columns, FilterCondition defaultOperation, bool clientMode, CriteriaOperator& _findCriteria, Func`3& _highlightedTextGetter);
    public static void GetFindCriteriaAndHighlightedTextGetter(FindPanelParserKind parserKind, string findPanelText, IEnumerable`1<IDataColumnInfo> columns, FilterCondition defaultOperation, bool clientMode, CriteriaOperator& _findCriteria, Func`3& _highlightedTextGetter);
    public static void WinFormsGetFindCriteriaAndHighlightedTextGetter(FindPanelParserKind parserKind, string findPanelText, IEnumerable`1<IDataColumnInfo> columns, FilterCondition defaultOperation, bool clientMode, CriteriaOperator& _findCriteria, Func`3& _highlightedTextGetter);
    public static void WinFormsGetFindCriteriaAndHighlightedTextGetter(FindPanelParserKind parserKind, string findPanelText, IEnumerable`1<string> columns, FilterCondition defaultOperation, CriteriaOperator& _findCriteria, Func`3& _highlightedTextGetter);
    public static void WpfGetFindCriteria(FindPanelParserKind parserKind, string findPanelText, IEnumerable`1<IDataColumnInfo> columns, FilterCondition defaultOperation, bool clientMode, CriteriaOperator& _findCriteria);
    public static void WpfGetFindCriteria(FindPanelParserKind parserKind, string findPanelText, IEnumerable`1<string> columns, FilterCondition defaultOperation, CriteriaOperator& _findCriteria);
}
[ExtensionAttribute]
public static class DevExpress.Data.Helpers.GenericDelegateHelper : object {
    private static ConcurrentDictionary`2<TypesDuple, Delegate> Conversions;
    private static GenericDelegateHelper();
    private static Delegate GetCastFuncCore(Type from, Type to);
    private static Delegate CreateConversion(Type from, Type to);
    public static Delegate GetCastFunc(Type from, Type to, Func`1<String[]> exceptionAuxInfoGetter);
    public static Func`2<From, To> GetCastFunc(Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Delegate ConvertFuncArgument(Delegate func, Type currentArgumentType, Type resultType, Type expectedArgumentType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Delegate ConvertFuncArgument(Func`2<A, R> func, Type expectedArgumentType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Func`2<A, R> ConvertFuncArgument(Delegate func, Type currentArgumentType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Delegate ConvertFuncResult(Delegate func, Type argumentType, Type currentResultType, Type expectedResultType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Delegate ConvertFuncResult(Func`2<A, R> func, Type expectedResultType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Func`2<A, R> ConvertFuncResult(Delegate func, Type currentResultType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Delegate ConvertFunc(Delegate func, Type currentArgumentType, Type currentResultType, Type expectedArgumentType, Type expectedResultType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Func`2<A, R> ConvertFunc(Delegate func, Type currentArgumentType, Type currentResultType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Delegate ConvertFunc(Func`2<A, R> func, Type expectedArgumentType, Type expectedResultType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static Delegate ApplyChain(Delegate nested, Delegate wrapper, Type nestedArgType, Type intermediateType, Type wrapperResultType);
    [ExtensionAttribute]
public static Delegate ApplyChain(Func`2<A, I> nested, Delegate wrapper, Type wrapperResultType);
    [ExtensionAttribute]
public static Delegate ApplyChain(Delegate nested, Func`2<I, R> wrapper, Type nestedArgType);
    [ExtensionAttribute]
public static Func`2<A, R> ApplyChain(Delegate nested, Delegate wrapper, Type intermediateType);
    public static Delegate HedgeNullArg(Delegate dlg, Type mayBeNullArgumentType, Type resultType);
    public static Delegate MakeNullCheck(Type argType, bool isNotCheck);
    public static Delegate MakeNullCheck(Type argType);
    public static Func`2<T, bool> MakeNullCheck(bool isNotCheck);
    public static Func`2<T, bool> MakeNullCheck();
}
[ExtensionAttribute]
public static class DevExpress.Data.Helpers.GenericEnumerableHelper : object {
    [ExtensionAttribute]
public static IEnumerable ApplySelect(IEnumerable src, Type srcGenericArgument, Delegate selector, Type selectorResultType);
    [ExtensionAttribute]
public static IEnumerable ApplySelect(IEnumerable`1<TSource> src, Delegate selector, Type selectorResultType);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ApplySelect(IEnumerable src, Type srcGenericArgument, Delegate selector);
    [ExtensionAttribute]
public static IEnumerable ApplyCast(IEnumerable src, Type srcGenericArgument, Type castToType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static IEnumerable ApplyCast(IEnumerable`1<T> src, Type castToType, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static IEnumerable`1<T> ApplyCast(IEnumerable src, Type srcGenericArgument, Func`1<String[]> exceptionAuxInfoGetter);
    [ExtensionAttribute]
public static int ApplyCount(IEnumerable src, Type srcGenericArgument);
    [ExtensionAttribute]
public static Array ApplyToArray(IEnumerable src, Type srcGenericArgument);
    [ExtensionAttribute]
public static IEnumerable ApplyWhere(IEnumerable src, Delegate predicate, Type srcGenericArgument);
    [ExtensionAttribute]
public static IEnumerable ApplyWhereNotNull(IEnumerable src, Type srcGenericArgument);
}
internal static class DevExpress.Data.Helpers.GenericHelpersParts : object {
}
public abstract class DevExpress.Data.Helpers.GenericInvoker`2 : object {
    private static object _Store;
    private static GenericInvoker`2();
    public static Signature GetInvoker(Type genericArg);
    public static Signature GetInvoker(Type genericArg1, Type genericArg2);
    public static Signature GetInvoker(Type genericArg1, Type genericArg2, Type genericArg3);
    public static Signature GetInvoker(Type[] genericArgs);
}
public static class DevExpress.Data.Helpers.GenericTypeHelper : object {
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<Type, Type>> _SingleArgGenericTypeDefinitions;
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<Type[], Type>> _ManyArgsGenericTypeDefinitions;
    private static GenericTypeHelper();
    public static Type GetGenericIListTypeArgument(Type elementType);
    public static Type GetGenericTypeArgument(Type elementType, Type genericType);
    public static Type GetGenericIListType(Type listType);
    private static ConcurrentDictionary`2<Type, Type> GetSingleArgGenericTypeDefinition(Type genericTypeDefinition);
    private static Type MakeSingleArgGenericTypeCore(ConcurrentDictionary`2<Type, Type> dict, Type gt, Type arg);
    private static ConcurrentDictionary`2<Type[], Type> GetManyArgsGenericTypeDefinition(Type genericTypeDefinition);
    private static Type MakeManyArgsGenericTypeCore(ConcurrentDictionary`2<Type[], Type> dict, Type gt, Type[] args);
    public static Type MakeGenericType(Type typeArgument);
    public static Type MakeGenericType(Type[] typeArguments);
    public static Type MakeGenericType(Type genericTypeDefinition, Type typeArgument);
    public static Type MakeGenericType(Type genericTypeDefinition, Type[] typeArguments);
    public static Func`2<Type, Type> MakeGenericTypeMakerSingleArg(Type genericTypeDefinition);
    public static Func`3<Type, Type, Type> MakeGenericTypeMakerTwoArgs(Type genericTypeDefinition);
    public static Func`4<Type, Type, Type, Type> MakeGenericTypeMakerThreeArgs(Type genericTypeDefinition);
    public static Func`2<Type[], Type> MakeGenericTypeMakerManyArgs(Type genericTypeDefinition);
    public static Func`2<Type[], Type> MakeGenericTypeMakerUnknownArgs(Type genericTypeDefinition);
}
public class DevExpress.Data.Helpers.GetUniqueValuesEventArgs : HandledEventArgs {
    public CriteriaOperator ValuesExpression;
    public int MaxCount;
    public CriteriaOperator FilterExpression;
    public string ValuesPropertyName { get; }
    public GetUniqueValuesEventArgs(CriteriaOperator valuesExpression, CriteriaOperator filterExpression, int maxCount);
    public string get_ValuesPropertyName();
}
public class DevExpress.Data.Helpers.GroupDataInfo : object {
    private Object[] values;
    private int level;
    private Nullable`1<int> hashcode;
    public int Level { get; }
    public Object[] Values { get; }
    public GroupDataInfo(Object[] values, int level);
    public int get_Level();
    public Object[] get_Values();
    public virtual int GetHashCode();
    private static int GetHashCode(object value);
    public virtual bool Equals(object obj);
    private bool Compare(object v1, object v2);
}
public class DevExpress.Data.Helpers.GroupedRowsKeeperEx : BaseRowsKeeper {
    [CompilerGeneratedAttribute]
private int <RecordsCount>k__BackingField;
    public int RecordsCount { get; public set; }
    public bool AllExpanded { get; }
    public GroupedRowsKeeperEx(DataController controller);
    [CompilerGeneratedAttribute]
public int get_RecordsCount();
    [CompilerGeneratedAttribute]
public void set_RecordsCount(int value);
    public virtual void Save();
    public virtual bool get_AllExpanded();
    protected internal virtual void RestoreCore(object row, int level, object value);
    protected virtual bool GetAllRecordsSelected();
    protected virtual int GetExpandedDataCount();
    protected virtual bool SaveLevelObject(ITypedWriter writer, object obj);
    protected virtual object RestoreLevelObject(ITypedReader reader);
}
public abstract class DevExpress.Data.Helpers.GroupKeeperBase`1 : object {
    private DataController controller;
    private String[] groupDescriptors;
    private Nullable`1<bool> storeAllSelected;
    private Dictionary`2<GroupDataInfo, object> groupsData;
    public String[] GroupDescriptors { get; }
    public bool HasSelection { get; }
    protected DataController Controller { get; }
    protected Dictionary`2<GroupDataInfo, object> GroupsData { get; }
    protected internal bool IsRestoreAllSelected { get; }
    protected int SelectionCount { get; }
    public GroupKeeperBase`1(DataController controller);
    public String[] get_GroupDescriptors();
    public virtual bool get_HasSelection();
    protected DataController get_Controller();
    protected Dictionary`2<GroupDataInfo, object> get_GroupsData();
    protected abstract virtual T GetSelectedGroups();
    protected virtual bool IsAllSelected();
    public virtual void Save();
    protected virtual void SaveGroups();
    public virtual bool IsRestoreSelected(GroupRowInfo group, bool removeAfterRestore);
    protected internal bool get_IsRestoreAllSelected();
    protected internal virtual void SaveGroup(GroupRowInfo group, object selectionObject);
    protected virtual void OnSaveGroup(GroupRowInfo group, GroupDataInfo groupData, object selectionObject);
    protected GroupDataInfo GetGroupData(GroupRowInfo group);
    public virtual void Clear();
    protected internal virtual int GetMaxRestoreLevel();
    protected internal String[] GetGroupDescriptors();
    protected internal virtual void SaveGroupDescriptors();
    public virtual bool Restore();
    protected virtual int get_SelectionCount();
    protected virtual bool RestoreGroups();
    protected virtual int TryRestoreData(GroupRowInfo group, GroupDataInfo data);
    protected abstract virtual void OnRestoreGroup(GroupRowInfo group, object selection);
    protected abstract virtual void OnRestoreAllSelected();
    internal void Save(ITypedWriter writer);
    internal bool Restore(ITypedReader reader);
    internal void RestoreCore(ITypedReader reader);
}
public class DevExpress.Data.Helpers.GroupKeeperSelection : GroupKeeperBase`1<IDictionary`2<GroupRowInfo, object>> {
    private SelectionKeeper keeper;
    private GroupDataInfo currentRowData;
    protected SelectionKeeper Keeper { get; }
    protected int SelectionCount { get; }
    public GroupKeeperSelection(SelectionKeeper keeper);
    protected SelectionKeeper get_Keeper();
    public virtual void Clear();
    protected virtual int get_SelectionCount();
    protected virtual IDictionary`2<GroupRowInfo, object> GetSelectedGroups();
    protected virtual void OnRestoreAllSelected();
    protected virtual void OnSaveGroup(GroupRowInfo group, GroupDataInfo groupData, object selectionObject);
    protected bool IsCurrentRow(object selectionObject);
    protected virtual void OnRestoreGroup(GroupRowInfo group, object selection);
    protected virtual int TryRestoreData(GroupRowInfo group, GroupDataInfo data);
    protected virtual void OnRestoreCurrentGroup(GroupRowInfo group);
    public bool IsRestoreSelectedCurrent(GroupRowInfo group);
}
public class DevExpress.Data.Helpers.GroupObjectKeyInfo : object {
    private Object[] values;
    private Nullable`1<int> combinedHashCode;
    public Object[] Values { get; }
    public GroupObjectKeyInfo(Object[] values);
    public Object[] get_Values();
    public virtual int GetHashCode();
    private int UpdateHashCode();
    public virtual bool Equals(object obj);
}
public interface DevExpress.Data.Helpers.IByIntDictionary {
    public abstract virtual bool TryGetValue(int index, Object& value);
    public abstract virtual bool TryGetKeyByValue(object value, Int32& index, int minIndex, int maxIndex);
    public abstract virtual bool ContainsKey(int index);
    public abstract virtual bool ContainsValue(object value);
    public abstract virtual void Add(int index, object value);
    public abstract virtual int GetFirstFilledIndex(int startIndex, bool isBackward);
}
public interface DevExpress.Data.Helpers.IClassicRowKeeper {
    public abstract virtual void SaveOnFilter();
    public abstract virtual void SaveOnRefresh(bool isEndUpdate);
    public abstract virtual void Save();
    public abstract virtual void Clear();
    public abstract virtual void ClearSelection();
    public abstract virtual bool RestoreStream();
    public abstract virtual bool Restore();
    public abstract virtual bool RestoreIncremental();
    public abstract virtual void SaveGroups(ITypedWriter writer);
    public abstract virtual bool RestoreGroups(ITypedReader reader);
}
public interface DevExpress.Data.Helpers.IClassicRowKeeperAsync {
    public bool IsRestoreAllExpanded { get; }
    public abstract virtual bool IsRestoredAsExpanded(GroupRowInfo group);
    public abstract virtual void OnTotalsReceived();
    public abstract virtual bool get_IsRestoreAllExpanded();
}
public interface DevExpress.Data.Helpers.IColumnsServerActions {
    public abstract virtual bool AllowAction(string fieldName, ColumnServerActionType action);
}
public interface DevExpress.Data.Helpers.IDXCloneable {
    public abstract virtual object DXClone();
}
public interface DevExpress.Data.Helpers.IGenericInvokerFactory`1 {
    public abstract virtual Signature CreateInvoker();
}
public interface DevExpress.Data.Helpers.IIndexRenumber {
    public abstract virtual int GetCount();
    public abstract virtual int GetValue(int pos);
    public abstract virtual void SetValue(int pos, int val);
}
public interface DevExpress.Data.Helpers.IListServerHints {
    public abstract virtual void HintGridIsPaged(int pageSize);
    public abstract virtual void HintMaxVisibleRowsInGrid(int rowsInGrid);
}
public interface DevExpress.Data.Helpers.IListServerWithExpandoObjectProxy {
    public bool UseExpandoObjectProxiesForNonThreadSafeRows { get; public set; }
    public abstract virtual bool get_UseExpandoObjectProxiesForNonThreadSafeRows();
    public abstract virtual void set_UseExpandoObjectProxiesForNonThreadSafeRows(bool value);
}
public class DevExpress.Data.Helpers.InconsistencyDetectedException : ApplicationException {
    public InconsistencyDetectedException(string message);
}
public static class DevExpress.Data.Helpers.InconsistentHelper : object {
    public static void PostponedInconsistent(MyMethodInvoker refreshMethod, MyMethodInvoker failMethod);
    private static void DoPostponedReload(object state);
    private static void FailUnderAspOrAnotherNonPostEnvironment(MyMethodInvoker failMethod);
    private static bool IsGoodContext(SynchronizationContext context);
}
public class DevExpress.Data.Helpers.IndexRenumber : object {
    public static void RenumberIndexes(IIndexRenumber list, int listSourceRow, bool increment, int maxIndex);
    public static void RenumberIndexes(IIndexRenumber list, int listSourceRow, bool increment);
    public static void RenumberIndexes(IIndexRenumber list, int oldListSourceRow, int newListSourceRow);
}
public interface DevExpress.Data.Helpers.INotificationProvider {
    public abstract virtual bool IsSupportNotifications(object list);
    public abstract virtual void SubscribeNotifications(ListChangedEventHandler handler);
    public abstract virtual void UnsubscribeNotifications(ListChangedEventHandler handler);
    public abstract virtual INotificationProvider Clone(object list);
}
public interface DevExpress.Data.Helpers.IRefreshable {
    public abstract virtual void Refresh();
}
public static class DevExpress.Data.Helpers.IsDesignModeHelper : object {
    private static bool _BypassDesignModeAlterationDetection;
    [ObsoleteAttribute("It is not recommended to use this option in your code. Refer to the www.devexpress.com/issue=T121952 KB Article for more details.")]
public static bool BypassDesignModeAlterationDetection { get; public set; }
    public static bool get_BypassDesignModeAlterationDetection();
    public static void set_BypassDesignModeAlterationDetection(bool value);
    public static bool GetCurrentBypassDesignModeAlterationDetection();
    private static bool GetCurrentDesignMode(Component component);
    public static void Validate(Component component, Nullable`1& isDesignTime);
    public static bool GetIsDesignMode(Component component, Nullable`1& isDesignTime);
    public static bool GetIsDesignModeBypassable(Component component, Nullable`1& isDesignTime);
}
public interface DevExpress.Data.Helpers.IStreamSupport {
    public abstract virtual void Save(TypedBinaryWriter writer);
}
[FlagsAttribute]
public enum DevExpress.Data.Helpers.ItemPropertyNotificationMode : Enum {
    public int value__;
    public static ItemPropertyNotificationMode None;
    public static ItemPropertyNotificationMode PropertyChanged;
}
public static class DevExpress.Data.Helpers.ItemsMovesSwapHelper : object {
    public static void SwapMovesJustSecond(int from1, int to1, int from2, int to2, Int32& newFrom1, Int32& newTo1);
    private static void SwapMoves(int from1, int to1, int from2, int to2, Int32& newFrom1, Int32& newTo1, Int32& newFrom2, Int32& newTo2);
    public static void SwapMoves(Int32& from1, Int32& to1, Int32& from2, Int32& to2);
}
public interface DevExpress.Data.Helpers.IVirtualListServerCaps {
    public bool SortByDataController { get; }
    public bool GroupByDataController { get; }
    public abstract virtual bool get_SortByDataController();
    public abstract virtual bool get_GroupByDataController();
}
public interface DevExpress.Data.Helpers.IXtraBusySupport {
    public bool IsBusySupported { get; }
    public bool IsBusy { get; }
    public abstract virtual bool get_IsBusySupported();
    public abstract virtual bool get_IsBusy();
    [CompilerGeneratedAttribute]
public abstract virtual void add_IsBusyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_IsBusyChanged(EventHandler value);
}
public interface DevExpress.Data.Helpers.IXtraGetUniqueValues {
    public bool UniqueValuesSupported { get; }
    public abstract virtual bool get_UniqueValuesSupported();
    public abstract virtual void GetUniqueValues(GetUniqueValuesEventArgs e);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UniqueValuesReady(EventHandler`1<UniqueValuesReadyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UniqueValuesReady(EventHandler`1<UniqueValuesReadyEventArgs> value);
    public abstract virtual void CancelGetUniqueValues();
}
public interface DevExpress.Data.Helpers.IXtraMoreRows {
    public bool IsMoreRowsSupported { get; }
    public bool IsMoreRowsAvailable { get; }
    public abstract virtual bool get_IsMoreRowsSupported();
    public abstract virtual bool get_IsMoreRowsAvailable();
    public abstract virtual void MoreRows();
    [CompilerGeneratedAttribute]
public abstract virtual void add_RowsLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RowsLoaded(EventHandler value);
}
public interface DevExpress.Data.Helpers.IXtraRefreshable {
    public bool RefreshSupported { get; }
    public abstract virtual bool get_RefreshSupported();
    public abstract virtual void Refresh();
}
internal interface DevExpress.Data.Helpers.IXtraSeizableSource {
    public abstract virtual void Seize(object newOwner);
    public abstract virtual void LetGo(object formerOwner);
}
public interface DevExpress.Data.Helpers.IXtraSourceError {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
}
public abstract class DevExpress.Data.Helpers.ListAdapterBase`1 : object {
    private TSource source;
    private IEnumerator lazyIndexIterator;
    public TSource Source { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    protected ListAdapterBase`1(TSource source);
    public TSource get_Source();
    public virtual int GetHashCode();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int Add(object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected static bool IsEmpty(IList`1<object> list, IEnumerable source);
    protected object EnsureListItem(List`1& list, int index, int count);
    protected int EnsureListCount(List`1& list);
}
public class DevExpress.Data.Helpers.ListChangedCoreDelegate : MulticastDelegate {
    public ListChangedCoreDelegate(object object, IntPtr method);
    public virtual void Invoke(object sender, RealTimeEventBase command);
    public virtual IAsyncResult BeginInvoke(object sender, RealTimeEventBase command, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.Helpers.ListDataControllerHelper : BaseListDataControllerHelper {
    public static string UseFirstRowTypeWhenPopulatingColumnsTypeName;
    private static string DefaultUseFirstRowTypeWhenPopulatingColumnsTypeName;
    private int beforeAddRowCount;
    private int detachedRowPosition;
    private int DevExpress.Data.IRelationList.RelationCount { get; }
    public ListDataControllerHelper(DataControllerBase controller);
    private static ListDataControllerHelper();
    public static PropertyDescriptorCollection GetExpandoObjectProperties(DataControllerBase controller, object row);
    public static Type GetIndexerPropertyType(Type listType);
    public static Type GetRowType(Type listType, Boolean& isGenericIListRowType);
    private static Type GetRowTypeCore(Type listSourceType, IList listSource, Boolean& isGenericIListRowType);
    public static Type GetListType(object dataSource);
    protected virtual object AddNewRowCore();
    private PropertyDescriptorCollection GetPropertyDescriptorCollectionCore();
    public static bool IsSimpleColumnType(Type type);
    public static bool CanUseAsPrimitiveDataSourceType(Type type);
    protected virtual PropertyDescriptorCollection GetTypeProperties(Type rowType);
    protected virtual PropertyDescriptorCollection TryGetItemProperties();
    private object GetFirstRow();
    protected virtual PropertyDescriptorCollection GetPropertyDescriptorCollection();
    public Type GetRowType(Boolean& isGenericIListRowType);
    public static Type GetRowType(IList listSource, Boolean& isGenericIListRowType);
    public Type GetIndexerPropertyType();
    protected virtual PropertyDescriptorCollection CreateSimplePropertyDescriptor();
    protected internal virtual void OnBindingListChanged(ListChangedEventArgs e);
    protected virtual void OnEndNewItemRow();
    protected internal virtual void RaiseOnStartNewItemRow();
    private bool IsValidRelationIndex(int relationIndex);
    private DataColumnInfo GetDetailInfo(int relationIndex);
    private sealed virtual override string DevExpress.Data.IRelationListEx.GetRelationDisplayName(int listSourceRow, int relationIndex);
    private sealed virtual override int DevExpress.Data.IRelationList.get_RelationCount();
    private sealed virtual override string DevExpress.Data.IRelationList.GetRelationName(int listSourceRow, int relationIndex);
    private sealed virtual override bool DevExpress.Data.IRelationList.IsMasterRowEmpty(int listSourceRow, int relationIndex);
    private bool IsEmptyDetail(IList list);
    private sealed virtual override IList DevExpress.Data.IRelationList.GetDetailList(int listSourceRow, int relationIndex);
    private sealed virtual override int DevExpress.Data.IRelationListEx.GetRelationCount(int listSourceRow);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Helpers.ListIDateOnlyIntervalsHashTree : ListIHashTree`1<IDateIntervalsHashTree`1<DateOnly>> {
    public object Item { get; public set; }
    public int Count { get; }
    public ListIDateOnlyIntervalsHashTree(Object[] source, IDateIntervalsHashTree`1<DateOnly> hashTree, Nullable`1<bool> rootVisible);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Helpers.ListIDateOnlyRangeSelectorHashTree : ListIHashTree`1<IDateIntervalsHashTree`1<DateOnly>> {
    public object Item { get; public set; }
    public int Count { get; }
    public ListIDateOnlyRangeSelectorHashTree(Object[] source, IDateIntervalsHashTree`1<DateOnly> hashTree);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Helpers.ListIDateTimeIntervalsHashTree : ListIHashTree`1<IDateIntervalsHashTree`1<DateTime>> {
    public object Item { get; public set; }
    public int Count { get; }
    public ListIDateTimeIntervalsHashTree(Object[] source, IDateIntervalsHashTree`1<DateTime> hashTree, Nullable`1<bool> rootVisible);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Helpers.ListIDateTimeRangeSelectorHashTree : ListIHashTree`1<IDateIntervalsHashTree`1<DateTime>> {
    public object Item { get; public set; }
    public int Count { get; }
    public ListIDateTimeRangeSelectorHashTree(Object[] source, IDateIntervalsHashTree`1<DateTime> hashTree);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual int get_Count();
}
public class DevExpress.Data.Helpers.ListIDictionary : ListAdapterBase`1<IDictionary> {
    private Object[] array;
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ListIDictionary(IDictionary source);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    internal bool IsEmpty();
    protected void EnsureArray(Object[]& array, int count);
}
public class DevExpress.Data.Helpers.ListIEnumerable : ListAdapterBase`1<IEnumerable> {
    private List`1<object> list;
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ListIEnumerable(IEnumerable source);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    internal bool IsEmpty();
}
public class DevExpress.Data.Helpers.ListIGroupValues : ListAdapterBase`1<IGroupValues> {
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ListIGroupValues(IGroupValues source);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public abstract class DevExpress.Data.Helpers.ListIHashTree`1 : ListAdapterBase`1<IEnumerable`1<object>> {
    protected THashTree hashTreeCore;
    public THashTree HashTree { get; }
    public object Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ListIHashTree`1(Object[] source, THashTree hashTree);
    public THashTree get_HashTree();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public abstract virtual object get_Item(int index);
    public abstract virtual void set_Item(int index, object value);
    public abstract virtual int get_Count();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class DevExpress.Data.Helpers.ListSourceRowsKeeper : object {
    private SelectedRowsKeeper selectionHash;
    private GroupedRowsKeeperEx groupHashEx;
    internal PropertyDescriptor[] groupColumnsInfo;
    private DataController controller;
    public static bool SuppressRestoreSelection;
    public static bool SuppressRestoreGrouping;
    protected SelectedRowsKeeper SelectionHash { get; }
    protected internal GroupedRowsKeeperEx GroupHashEx { get; }
    protected DataController Controller { get; }
    protected BaseDataControllerHelper Helper { get; }
    protected bool HasSaved { get; }
    public ListSourceRowsKeeper(DataController controller, SelectedRowsKeeper rowsKeeper);
    protected virtual GroupedRowsKeeperEx CreateGroupRowsKeeper();
    public sealed virtual void Dispose();
    protected SelectedRowsKeeper get_SelectionHash();
    protected internal GroupedRowsKeeperEx get_GroupHashEx();
    protected DataController get_Controller();
    protected BaseDataControllerHelper get_Helper();
    protected bool get_HasSaved();
    public virtual void SaveIncremental();
    private void RemoveCollapsedGroupsFromHash();
    public sealed virtual bool RestoreIncremental();
    public virtual void Save();
    public sealed virtual bool RestoreStream();
    public sealed virtual bool Restore();
    protected virtual bool RestoreCore(bool clear);
    public virtual void Clear();
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeper.ClearSelection();
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeper.SaveOnFilter();
    protected PropertyDescriptor[] GetGroupedColumns();
    protected int GetMaxAllowedGroupLevel();
    internal bool CheckGroupedColumns();
    protected bool RestoreCore();
    private void RestoreSelection(int count);
    protected virtual void RestoreSelectionCore(int count);
    protected virtual bool RestoreGrouping();
    protected virtual object ExGetGroupRowKeyCore(GroupRowInfo group);
    public virtual void SaveOnRefresh(bool isEndUpdate);
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeper.SaveGroups(ITypedWriter writer);
    private sealed virtual override bool DevExpress.Data.Helpers.IClassicRowKeeper.RestoreGroups(ITypedReader reader);
}
public static class DevExpress.Data.Helpers.LohPooled : object {
    public static int GetCreateFixedSizeListTerminalSizeBetweenOrdinaryAndChunkedImpl();
    public static FixedSizeList`1<T> CreateFixedSizeList(int sizeOfNewEmptyFixedSizeList);
    public static FixedSizeList`1<T> ToListForMultipleReads(IEnumerable`1<T> source, Nullable`1<int> hintSize);
    public static FixedSizeList`1<T> ToListForMultipleReads(IEnumerator`1<T> source, Nullable`1<int> hintSize);
    public static FixedSizeList`1<T> ToListForMultipleReads(EnumeratorWithHintCount`1<T> source);
    public static FixedSizeList`1<T> ToListForDispose(IEnumerable`1<T> source, Nullable`1<int> hintCount);
    public static FixedSizeList`1<T> ToListForDispose(IEnumerator`1<T> source, Nullable`1<int> hintSize);
    public static FixedSizeList`1<T> ToListForDispose(EnumeratorWithHintCount`1<T> source);
    public static T[] ToArray(IEnumerable`1<T> source, Nullable`1<int> hintCount);
    public static T[] ToArray(IEnumerator`1<T> source, Nullable`1<int> hintCount);
    public static T[] ToArray(EnumeratorWithHintCount`1<T> source);
    public static EnumeratorWithCount`1<T> ToListAndDisposeToEnumeratorWithCount(IEnumerable`1<T> source);
    public static EnumeratorWithCount`1<T> ToListAndDisposeToEnumeratorWithCount(IEnumerator`1<T> source, Nullable`1<int> hintSize);
    public static EnumeratorWithCount`1<T> ToListAndDisposeToEnumeratorWithCount(EnumeratorWithHintCount`1<T> source);
    public static ICollection`1<T> ToListAndDisposeToOnceEnumerableCollection(IEnumerable`1<T> source);
    public static OnceEnumerableCollection`1<T> ToListAndDisposeToOnceEnumerableCollection(IEnumerator`1<T> source, Nullable`1<int> hintSize);
    public static OnceEnumerableCollection`1<T> ToListAndDisposeToOnceEnumerableCollection(EnumeratorWithHintCount`1<T> source);
    private static FixedSizeList`1<T> _CreateList(IEnumerable`1<T> source, Nullable`1<int> hintCount, bool longLiving);
    private static FixedSizeList`1<T> _CreateList(IEnumerator`1<T> source, Nullable`1<int> hintSize, bool longLiving);
    private static FixedSizeList`1<T> _CreateListFromChunkedIfLarge(ChunkedList`1<T> innerList, bool longLiving);
}
public static class DevExpress.Data.Helpers.LookupUtils : object {
    private static object InvalidKeyValue;
    private static Func`2<object, object> defaultAccessor;
    private static Func`2<Type, bool> IsDictionaryDataSourceTypePredicate;
    private static ConcurrentDictionary`2<Type, bool> dictionaryDataSourceTypes;
    private static ConcurrentDictionary`2<Type, bool> dictionaryKeyValueTypes;
    private static Func`2<Type, bool> IsDictionaryKeyValueTypePredicate;
    private static Type DictionaryEntryType;
    private static Type KeyValuePairType;
    private static Func`2<Type, bool> IsDictionaryTypePredicate;
    private static Type IDictionaryType;
    private static Type IReadOnlyDictionaryType;
    private static LookupUtils();
    public static bool IsInvalidKeyValue(object keyValue);
    public static object GetKeyValue(object entity, string keyMember);
    private static object UnwrapAsyncServerModeProxy(object entity);
    private static object GetDataRowColumnValue(DataRow dataRow, string keyMember);
    public static Object[] GetKeyValues(object entity, String[] keyMembers);
    public static object CheckDictionaryKeyValue(object keyValue, object dataSource, String& valueMember);
    public static object CheckDictionaryKeyValue(object keyValue, object dataSource, String& valueMember, String& displayMember);
    public static object CheckDictionaryDisplayValue(object displayValue, String& displayMember);
    private static object CheckKeyValueAndValueMemberCore(object keyValue, object dataSource, String& valueMember, String& displayMember, bool isDictionaryKeyValue);
    private static object CheckDisplayValueAndDisplayMemberCore(object displayValue, String& displayMember);
    public static bool IsDictionary(object dataSource);
    private static bool IsDictionaryDataSourceType(Type dataSourceType);
    private static bool GetIsDictionaryOrCache(Type dataSourceType, Func`2<Type, bool> checkDataSourceType);
    public static bool IsDictionaryKeyMember(string memberName, Type memberType);
    public static bool IsDictionaryKeyValue(object keyValue);
    private static bool GetIsDictionaryKeyValueOrCache(object keyValue, Func`2<Type, bool> checkKeyValueType);
    private static bool GetIsDictionaryKeyValueTypeOrCache(Type keyValueType, Func`2<Type, bool> checkKeyValueType);
    private static bool IsDictionaryKeyValueType(Type keyValueType);
    private static bool IsKeyValuePair(Type type);
    private static bool IsDictionaryKey(object keyValue, object dataSource);
    private static bool IsDictionaryType(Type type);
    private static bool IsDictionaryGenericType(Type gType);
    public static String[] GuessValueMembers(PropertyDescriptorCollection properties);
    public static String[] GuessDisplayMembers(PropertyDescriptorCollection properties);
    public static string GuessKeyMember(PropertyDescriptorCollection properties);
    public static String[] GuessCascadingMembers(PropertyDescriptorCollection ownerProperties, PropertyDescriptorCollection properties);
    public static void Reset(Type entityType, string keyMember);
}
public class DevExpress.Data.Helpers.MasterDetailHelper : object {
    private static FieldInfo columnField;
    private static Type dataColumnPropertyDescriptorType;
    public static Type DataColumnPropertyDescriptorType { get; }
    public static Type get_DataColumnPropertyDescriptorType();
    public static string GetDisplayName(PropertyDescriptor descriptor);
    public static bool HasDisplayAttribute(PropertyDescriptor descriptor);
    public static string GetDisplayNameCore(PropertyDescriptor descriptor);
    public static string GetDisplayNameCore(PropertyDescriptor descriptor, bool useSplitCasing);
    public static bool TryGetDataTableDataColumnCaption(PropertyDescriptor descriptor, String& caption);
    public static string SplitPascalCaseString(string value);
    protected DataColumnInfo[] GetDetailColumnsInfo(IList list);
    protected DataColumnInfo[] GetDetailColumnsInfo(ITypedList list, PropertyDescriptor[] accessors);
    protected DataColumnInfo[] GetDataColumnInfo(ITypedList list, PropertyDescriptor[] accessors);
    protected virtual void PopulateTypedListRelations(DetailNodeInfo parent, ITypedList list, int level, Int32& callCount, PropertyDescriptor[] accessors);
    protected virtual void PopulateListRelations(DetailNodeInfo parent, IList list, int level, Int32& callCount);
    protected virtual void PopulateRelations(DetailNodeInfo parent, IRelationList list, int level, Int32& callCount);
    protected virtual void PopulateRelations(DetailNodeInfo parent, DataTable table, int level);
    private bool CheckRecursive(DataTable table, DataTable childTable, int level);
    public DataColumnInfo[] GetDataColumnInfo(object context, object dataSource, string dataMember);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DataColumnInfo[] GetDataColumnInfo(object context, object dataSource, string dataMember, IList listSource);
    public DataColumnInfo[] GetDataColumnInfo(object context, object dataSource, string dataMember, bool skipException);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DataColumnInfo[] GetDataColumnInfo(object context, object dataSource, string dataMember, bool skipException, IList listSource);
    public DataColumnInfo[] GetDataColumnInfo(object data);
    public DetailNodeInfo[] GetDetailInfo(object context, object dataSource, string dataMember);
    public DetailNodeInfo[] GetDetailInfo(object context, object dataSource, string dataMember, bool allowExceptions);
    public static bool IsDataSourceReady(object context, object dataSource, string dataMember);
    public static IList GetDataSource(object dataSource, string dataMember);
    public static IList GetDataSource(object context, object dataSource, string dataMember);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static IList GetDataSource(object context, object dataSource, string dataMember, IList existingListSource);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static IList GetDataSource(object context, object dataSource, string dataMember, ExceptionDispatchInfo& exceptionInfo);
    private static IList GetDataSourceCore(object context, object dataSource, string dataMember, IList existingListSource);
    private static IList GetTypedDataSource(Type type);
}
public static class DevExpress.Data.Helpers.MessageLoop : object {
    public static bool IsAvailable { get; }
    public static bool get_IsAvailable();
}
public static class DevExpress.Data.Helpers.MultiselectRoundedDateTimeFilterHelper : object {
    public static CriteriaOperator DatesToCriteria(string columnName, IEnumerable`1<DateTime> dates, bool isDateOnly);
    public static CriteriaOperator TimesToCriteria(string columnName, IEnumerable`1<TimeOnly> dates);
    private static CriteriaOperator GetValue(DateTime value, bool isDateOnly);
    public static IEnumerable`1<DateTime> GetCheckedDates(CriteriaOperator criteria, string dateTimePropertyName, IEnumerable`1<DateTime> dates);
}
public class DevExpress.Data.Helpers.MultiThreadClient : object {
    private List`1<IDataControllerThreadClient> listeners;
    public List`1<IDataControllerThreadClient> Listeners { get; }
    public List`1<IDataControllerThreadClient> get_Listeners();
    private sealed virtual override void DevExpress.Data.IDataControllerThreadClient.OnAsyncBegin();
    private sealed virtual override void DevExpress.Data.IDataControllerThreadClient.OnAsyncEnd();
    private sealed virtual override void DevExpress.Data.IDataControllerThreadClient.OnRowLoaded(int controllerRowHandle);
    private sealed virtual override void DevExpress.Data.IDataControllerThreadClient.OnTotalsReceived();
    public void Add(IDataControllerThreadClient client);
    public void Remove(IDataControllerThreadClient client);
}
public class DevExpress.Data.Helpers.NewListSourceRowKeeper : object {
    private bool hasData;
    private SelectionKeeper selection;
    private ExpandedGroupKeeper expandedGroups;
    private DataController controller;
    protected ExpandedGroupKeeper ExpandedGroups { get; }
    protected SelectionKeeper Selection { get; }
    protected bool HasData { get; }
    protected DataController Controller { get; }
    protected bool HasSelection { get; }
    public NewListSourceRowKeeper(DataController controller, ExpandedGroupKeeper groupsKeeper, SelectionKeeper selectionKeeper);
    protected ExpandedGroupKeeper get_ExpandedGroups();
    protected SelectionKeeper get_Selection();
    protected bool get_HasData();
    protected DataController get_Controller();
    protected virtual SelectionKeeper CreateSelectionKeeper();
    protected virtual ExpandedGroupKeeper CreateExpandedGroupsKeeper();
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeper.ClearSelection();
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeper.Clear();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override bool DevExpress.Data.Helpers.IClassicRowKeeper.RestoreGroups(ITypedReader reader);
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeper.SaveGroups(ITypedWriter writer);
    private sealed virtual override bool DevExpress.Data.Helpers.IClassicRowKeeper.Restore();
    private sealed virtual override bool DevExpress.Data.Helpers.IClassicRowKeeper.RestoreIncremental();
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeper.Save();
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeper.SaveOnFilter();
    protected virtual void ClearCore();
    protected virtual bool RestoreCore();
    protected virtual void RestoreSelection();
    protected virtual void RestoreClear();
    protected virtual bool RestoreIncrementalCore();
    private sealed virtual override bool DevExpress.Data.Helpers.IClassicRowKeeper.RestoreStream();
    protected virtual void SaveCore();
    protected virtual bool get_HasSelection();
    protected virtual void SaveSelection();
    protected virtual void ClearSelection();
    protected virtual void SaveOnFilterCore();
    private sealed virtual override void DevExpress.Data.Helpers.IClassicRowKeeper.SaveOnRefresh(bool isEndUpdate);
    protected void ResetHasData();
}
public enum DevExpress.Data.Helpers.NotifyChangeType : Enum {
    public int value__;
    public static NotifyChangeType ItemAdded;
    public static NotifyChangeType ItemChanged;
    public static NotifyChangeType ItemDeleted;
}
public class DevExpress.Data.Helpers.NotifyCollectionChangedProvider : object {
    private IList list;
    private bool supportPropertiesChanged;
    private List`1<EventInfo> events;
    private int lastChangedIndex;
    private PropertyDescriptorCollection itemTypeProperties;
    public bool SupportPropertiesChanged { get; public set; }
    private sealed virtual override bool DevExpress.Data.Helpers.INotificationProvider.IsSupportNotifications(object list);
    private sealed virtual override void DevExpress.Data.Helpers.INotificationProvider.SubscribeNotifications(ListChangedEventHandler handler);
    private void SubscribePropertiesChanged(IList items, bool unsubscribeOnly);
    private void SubscribePropertiesChanged(NotifyCollectionChangedEventArgs e, IList items);
    private void OnItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private ListChangedType ConvertType(NotifyCollectionChangedAction action);
    private sealed virtual override void DevExpress.Data.Helpers.INotificationProvider.UnsubscribeNotifications(ListChangedEventHandler handler);
    private sealed virtual override INotificationProvider DevExpress.Data.Helpers.INotificationProvider.Clone(object list);
    public bool get_SupportPropertiesChanged();
    public void set_SupportPropertiesChanged(bool value);
    private sealed virtual override void System.IDisposable.Dispose();
}
public static class DevExpress.Data.Helpers.NullableHelpers : object {
    private static ConcurrentDictionary`2<Type, Type> _NullablesDict;
    private static ConcurrentDictionary`2<Type, Type> _UnderlyingDict;
    private static NullableHelpers();
    public static Type GetBoxedType(Type t);
    public static Type GetUnBoxedType(Type t);
    public static bool CanAcceptNull(Type t);
    public static Type MakeNullableType(Type unnullableStructType);
    public static Type GetUnderlyingType(Type maybeNullableType);
    private static Type _GetUnderlyingTypeCore(Type maybeNullableType);
    public static bool IsNullableValueType(Type maybeNullableType);
}
public abstract class DevExpress.Data.Helpers.OutlookDateHelper : object {
    protected DateTime SortZeroTime { get; }
    protected DateTime SortStartWeek { get; }
    protected abstract virtual DateTime get_SortZeroTime();
    protected abstract virtual DateTime get_SortStartWeek();
    public Nullable`1<OutlookInterval> GetOutlookInterval(Nullable`1<DateTime> ndate);
    private int GetMonthDelta(DateTime d1, DateTime d2);
    public int GetWeekNumber(TimeSpan weekSpan, bool alwaysAdd);
    public static DateTime GetWeekStart(DateTime sortTime);
    public static DateTime GetWeekStart(DateTime sortTime, DateTimeFormatInfo dateFormatInfo);
}
public enum DevExpress.Data.Helpers.OutlookInterval : Enum {
    public int value__;
    public static OutlookInterval Older;
    public static OutlookInterval LastMonth;
    public static OutlookInterval EarlierThisMonth;
    public static OutlookInterval ThreeWeeksAgo;
    public static OutlookInterval TwoWeeksAgo;
    public static OutlookInterval LastWeek;
    public static OutlookInterval PD0;
    public static OutlookInterval PD1;
    public static OutlookInterval PD2;
    public static OutlookInterval PD3;
    public static OutlookInterval PD4;
    public static OutlookInterval PD5;
    public static OutlookInterval PD6;
    public static OutlookInterval Yesterday;
    public static OutlookInterval Today;
    public static OutlookInterval Tomorrow;
    public static OutlookInterval D0;
    public static OutlookInterval D1;
    public static OutlookInterval D2;
    public static OutlookInterval D3;
    public static OutlookInterval D4;
    public static OutlookInterval D5;
    public static OutlookInterval D6;
    public static OutlookInterval NextWeek;
    public static OutlookInterval TwoWeeksAway;
    public static OutlookInterval ThreeWeeksAway;
    public static OutlookInterval LaterThisMonth;
    public static OutlookInterval NextMonth;
    public static OutlookInterval BeyondNextMonth;
}
public class DevExpress.Data.Helpers.PermissionChecker : object {
    private Nullable`1<bool> isPermissionGranted;
    private IPermission permission;
    public IPermission Permission { get; }
    public bool IsPermissionGranted { get; }
    public PermissionChecker(IPermission permission);
    public IPermission get_Permission();
    public bool get_IsPermissionGranted();
    private bool IsPermissionGrantedCore(IPermission permission);
}
internal class DevExpress.Data.Helpers.PermissionCheckerSet : object {
    private List`1<PermissionChecker> checkers;
    public bool IsGranted(IPermission permission);
    private PermissionChecker GetChecker(IPermission permission);
}
public abstract class DevExpress.Data.Helpers.ReadOnlyBindingListCreator : GenericInvoker`2<Func`1<IBindingList>, crtp_ReadOnlyBindingListCreatorImpl`1<object>> {
}
public abstract class DevExpress.Data.Helpers.RealTimeEventBase : object {
    private DateTime _Created;
    private RealTimeEventBase modreq(System.Runtime.CompilerServices.IsVolatile) _Before;
    public RealTimeEventBase After;
    public int Locks;
    public RealTimeEventBase Before { get; public set; }
    public RealTimeEventBase get_Before();
    public void set_Before(RealTimeEventBase value);
    public virtual void PostProcess(IRealTimeListChangeProcessor realTimeSourceCore);
    public abstract virtual void Push(RealTimeEventsQueue queue);
}
public class DevExpress.Data.Helpers.RealTimeEventsQueue : object {
    private int InQueueLock;
    private int BufferLock;
    private int UiLock;
    private RealTimeEventBase First;
    private RealTimeEventBase Last;
    private Queue`1<RealTimeRowEvent> Buffer;
    private int BufferedProcessing;
    private Action SomethingInTheQueueAction;
    public RealTimeEventsQueue(Action _SomethingInTheQueueAction);
    private static void SureLock(Int32& location, int lockedValue);
    private static void UnLock(Int32& location, int lockedValue);
    public RealTimeEventBase PullEvent();
    public bool IsSomethingToPull();
    public bool IsEmpty();
    private RealTimeEventBase PullEventCore();
    public IEnumerable`1<RealTimeEventBase> PullAllEvents();
    private static bool IsEmptyEvent(RealTimeEventBase ev);
    public void PushEvent(RealTimePropertyDescriptorsChangedEvent pdcEvent);
    public void PushEvent(RealTimeResetEvent resetEvent);
    public void PushEvent(RealTimeRowEvent rowEvent);
    private void StartBufferProcessingIfNeeded();
    private void _BufferProcessing();
    private bool ProcessBufferStep();
    private void PushEventCore(RealTimeRowEvent rowEvent);
    private bool ProcessRowInQueueIfExists(RealTimeRowEvent rowEvent);
    private RealTimeRowEvent FindRowInQueue(int from, int to, Boolean& noMoves);
    private void SomethingReadyForPull();
    [CompilerGeneratedAttribute]
private void <StartBufferProcessingIfNeeded>b__20_0(object x);
}
public class DevExpress.Data.Helpers.RealTimePropertyDescriptorsChangedEvent : RealTimeResetEvent {
    public RealTimePropertyDescriptorCollection properties;
    public RealTimePropertyDescriptorsChangedEvent(RealTimePropertyDescriptorCollection properties, RealTimeProxyForObject[] allValues);
    public virtual void PostProcess(IRealTimeListChangeProcessor realTimeSourceCore);
}
public class DevExpress.Data.Helpers.RealTimeQueue : object {
    private SynchronizationContext syncContext;
    private RealTimeEventsQueue outputQuery;
    private ListChangedCoreDelegate listChangedCore;
    private IBindingList source;
    private RealTimePropertyDescriptorCollection sourcePropertyDescriptorCollection;
    private bool useWeakEventHandler;
    private bool needReset;
    private bool isDisposed;
    private QueueState state;
    private object syncObject;
    private ListChangedWeakEventHandler`1<RealTimeQueue> listChangedHandler;
    private string displayableProperties;
    private int posted;
    private ListChangedWeakEventHandler`1<RealTimeQueue> ListChangedHandler { get; }
    public string DisplayableProperties { get; public set; }
    internal bool IsQueueEmpty { get; }
    internal RealTimeQueue(SynchronizationContext syncContext, IBindingList source, RealTimePropertyDescriptorCollection propertyDescriptorCollection, ListChangedCoreDelegate listChanged, bool useWeakEventHandler, string displayableProperties);
    private ListChangedWeakEventHandler`1<RealTimeQueue> get_ListChangedHandler();
    public string get_DisplayableProperties();
    public void set_DisplayableProperties(string value);
    private void somethingInTheQueue();
    private void SomethingInTheQueueUI();
    internal bool get_IsQueueEmpty();
    private void SourceListChanged(object sender, ListChangedEventArgs e);
    private void PushPropertyDescriptorChanged();
    private RealTimeProxyForObject[] GetAllRows(RealTimePropertyDescriptorCollection pdc);
    private void EnqueueOutputItem(RealTimeEventBase command);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <somethingInTheQueue>b__20_0(object o);
}
public class DevExpress.Data.Helpers.RealTimeResetEvent : RealTimeEventBase {
    public RealTimeProxyForObject[] AllRowsData;
    public RealTimeResetEvent(RealTimeProxyForObject[] allValues);
    public virtual void PostProcess(IRealTimeListChangeProcessor realTimeSourceCore);
    public virtual void Push(RealTimeEventsQueue queue);
}
public class DevExpress.Data.Helpers.RealTimeRowEvent : RealTimeEventBase {
    internal int _From;
    internal int _To;
    public RealTimeProxyForObject FieldsChangeData;
    public RealTimeRowEvent(Nullable`1<int> from, Nullable`1<int> to, RealTimeProxyForObject value);
    public virtual void PostProcess(IRealTimeListChangeProcessor realTimeSourceCore);
    public virtual void Push(RealTimeEventsQueue queue);
}
public class DevExpress.Data.Helpers.RealTimeSourceThrottler : object {
    private SynchronizationContext Context;
    private Action Action;
    private Timer Timer;
    private EventInfo[] IdleEvents;
    private int Disposed;
    private RealTimeSourceThrottler(SynchronizationContext context, int throttleTime, Action action);
    public static void Throttle(SynchronizationContext context, int throttleTime, Action action);
    private static EventInfo[] GetIdleEvents();
    private void OnIdle(object sender, EventArgs e);
    private void Do();
    private void DoCore();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(object x);
    [CompilerGeneratedAttribute]
private void <Do>b__9_0(object d);
}
public static class DevExpress.Data.Helpers.RowKeeperFactory : object {
    public static IClassicRowKeeper CreateRowKeeper(T controller, ExpandedGroupKeeper groupsKeeper, SelectionKeeper selectionKeeper);
    public static IClassicRowKeeper CreateListSourceRowsKeeper(DataController controller);
    public static IClassicRowKeeper CreateCurrentRowsKeeper(BaseGridController controller);
    public static IClassicRowKeeper CreateServerModeRowsKeeper(ServerModeDataControllerBase controller);
    public static IClassicRowKeeper CreateAsyncRowsKeeperKeeper(AsyncServerModeDataController controller);
}
public static class DevExpress.Data.Helpers.SecurityHelper : object {
    [CompilerGeneratedAttribute]
private static bool <DisableReflectionEmit>k__BackingField;
    [ThreadStaticAttribute]
private static PermissionCheckerSet permissionCheckerSet;
    public static bool DisableReflectionEmit { get; public set; }
    public static bool IsEmitAllowed { get; }
    public static bool IsWeakRefAvailable { get; }
    public static bool IsMemberAccessGranted { get; }
    public static bool IsRestrictedMemberAccessGranted { get; }
    public static bool IsControlAppDomainGranted { get; }
    public static bool IsConfigurationPermissionGranted { get; }
    public static bool IsUnrestrictedGranted { get; }
    [CompilerGeneratedAttribute]
public static bool get_DisableReflectionEmit();
    [CompilerGeneratedAttribute]
public static void set_DisableReflectionEmit(bool value);
    public static bool get_IsEmitAllowed();
    public static bool get_IsWeakRefAvailable();
    public static bool get_IsMemberAccessGranted();
    public static bool get_IsRestrictedMemberAccessGranted();
    public static bool get_IsControlAppDomainGranted();
    public static bool get_IsConfigurationPermissionGranted();
    public static bool get_IsUnrestrictedGranted();
    public static bool IsPermissionGranted(IPermission permission);
    public static void ForceRecheckPermissions();
    private static IPermission GetMemberAccessPermission();
    private static IPermission GetRestrictedMemberAccessPermission();
    private static IPermission GetUnrestrictedPermission();
    private static IPermission GetControlAppDomainPermission();
    private static IPermission GetConfigurationPermission();
}
public class DevExpress.Data.Helpers.SelectedRowInfo : ValueType {
    public int ListSourceRow;
    public object ListSourceRowKey;
    public object SelectionObject;
    public bool IsRestored;
}
public class DevExpress.Data.Helpers.SelectedRowsKeeper : BaseRowsKeeper {
    private bool allowKeepSelection;
    public bool AllowKeepSelection { get; }
    public SelectedRowsKeeper(DataController controller, bool allowKeepSelection);
    protected virtual void SaveGroupInfo(GroupRowInfo group, object selectedObject);
    protected virtual void SaveDataRow(int controllerRow, object selectedObject);
    protected virtual void SaveRowCore(int selectedHandle, object selectedObject);
    public bool get_AllowKeepSelection();
    public virtual void Save();
    public virtual void OnRestoreEnd();
    protected internal virtual void RestoreCore(object row, int level, object value);
}
public class DevExpress.Data.Helpers.SelectionAndCurrentKeeper : SelectionKeeper {
    internal static object CurrentObject;
    private SelectedRowInfo currentRow;
    public BaseGridController Controller { get; }
    public bool HasSelection { get; }
    protected bool IsAllowCurrentRow { get; }
    protected bool IsCurrentRowGroupRow { get; }
    protected bool HasCurrentRowSelection { get; }
    protected bool IsCurrentRowRestored { get; }
    protected bool AllowResetControllerRow { get; }
    public SelectionAndCurrentKeeper(BaseGridController controller);
    private static SelectionAndCurrentKeeper();
    public BaseGridController get_Controller();
    public virtual bool get_HasSelection();
    protected bool get_IsAllowCurrentRow();
    protected bool get_IsCurrentRowGroupRow();
    protected bool get_HasCurrentRowSelection();
    public virtual void Clear();
    public virtual void Save();
    protected virtual bool get_IsCurrentRowRestored();
    protected virtual void ResetRestoredFlag();
    protected virtual bool IsAllowRestoreCurrentRow();
    protected virtual bool get_AllowResetControllerRow();
    protected virtual void OnRestoreEnd();
    protected virtual bool TrySmartRestoreDataRows();
    protected virtual void RestoreCurrentDataRow(SelectedRowInfo& currentRow, bool allowIndexOf);
    protected virtual void OnRestoreDataRow(SelectedRowInfo& info, int listIndex);
    protected virtual void OnRestoreCurrentRow(SelectedRowInfo& info, int listIndex);
    protected internal virtual void OnRestoreCurrentGroup(GroupRowInfo group);
}
public class DevExpress.Data.Helpers.SelectionKeeper : SelectionKeeperBase {
    private GroupKeeperSelection groupSelection;
    protected internal GroupKeeperSelection GroupSelection { get; }
    public bool HasSelection { get; }
    public SelectionKeeper(DataController controller);
    protected virtual GroupKeeperSelection CreateGroupSelectionKeeper();
    protected internal GroupKeeperSelection get_GroupSelection();
    public virtual void Save();
    public virtual bool get_HasSelection();
    protected virtual void OnRestoreSelection();
    public virtual void Clear();
}
public class DevExpress.Data.Helpers.SelectionKeeperBase : object {
    private SelectedRowInfo[] dataRowsInfo;
    private DataController controller;
    public DataController Controller { get; }
    public bool AllowKeepSelection { get; }
    protected SelectedRowsCollection SelectedRows { get; }
    protected int SelectionCount { get; }
    public bool HasSelection { get; }
    protected bool IsAllowIndexOfSearch { get; }
    public SelectionKeeperBase(DataController controller);
    public DataController get_Controller();
    public virtual bool get_AllowKeepSelection();
    protected virtual SelectedRowsCollection get_SelectedRows();
    protected virtual int get_SelectionCount();
    public virtual void Save();
    public virtual bool get_HasSelection();
    protected virtual object GetDataRowKey(int listSourceRow);
    protected virtual void SaveDataRows(Dictionary`2<Nullable`1<int>, object> dataRows);
    protected virtual void SaveDataRow(SelectedRowInfo& info, int listIndex, object selectedObject);
    protected virtual void ResetRestoredFlag();
    public virtual void Restore();
    protected virtual void OnRestoreSelection();
    protected virtual void OnRestoreEnd();
    protected virtual void RestoreDataRows();
    protected virtual Dictionary`2<object, int> GetRestoreDictionary();
    protected virtual bool get_IsAllowIndexOfSearch();
    protected virtual bool TrySmartRestoreDataRows();
    protected virtual void RestoreDataRowsAlt();
    protected virtual void OnRestoreDataRowAlt(int index, int listIndex);
    protected bool IsValidListSourceIndex(int listIndex);
    protected virtual bool RestoreDataRow(SelectedRowInfo& info, bool allowIndexOf);
    protected virtual void OnRestoreDataRow(SelectedRowInfo& info, int listIndex);
    protected virtual void RestoreDataRowCore(int controllerRow, int listIndex, object selectionObject);
    private bool CompareRowKeys(object key1, object key2);
    public virtual void Clear();
    protected internal virtual void OnRestoreCurrentGroup(GroupRowInfo group);
}
public abstract class DevExpress.Data.Helpers.ServerModeCache : object {
    public CriteriaOperator[] KeysCriteria;
    public ServerModeOrderDescriptor[][] SortDescription;
    public int GroupByCount;
    public ServerModeSummaryDescriptor[] SummaryInfo;
    public ServerModeSummaryDescriptor[] TotalSummaryInfo;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    public Dictionary`2<object, object> SomethingCache;
    private static int __debugTagSrc;
    private int __debugTag;
    private bool _landed;
    private bool _DeathProof;
    private ServerModeGroupInfo _topGroupInfo;
    private static bool dontThrowNotImplementedAnymore;
    public static bool DefaultForceStaSafeForReentryProtected;
    private ReentrancyAndThreadsWatch _ReenterancyUndThreadsWatch;
    private Func`2[][] _GetSortExpressionValueFromRowCache;
    private static CriteriaOperator FalseMarker;
    protected bool IsLanded { get; }
    protected ServerModeGroupInfo TotalGroupInfo { get; }
    protected bool ForceStaSafeForReentryProtected { get; }
    protected ServerModeCache(CriteriaOperator[] keyCriteria, ServerModeOrderDescriptor[][] sortInfo, int groupCount, ServerModeSummaryDescriptor[] summary, ServerModeSummaryDescriptor[] totalSummary);
    private static ServerModeCache();
    [CompilerGeneratedAttribute]
public void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public virtual string ToString();
    protected virtual bool get_IsLanded();
    public void CanResetCache();
    private void PerformDeathProofAction(Action action);
    protected virtual void Fatal(Exception e);
    protected void RaiseInconsistencyDetected(string format, Object[] args);
    protected void RaiseInconsistencyDetected(string message);
    protected void RaiseInconsistencyDetected(IEnumerable`1<string> messages);
    protected ServerModeGroupInfo get_TotalGroupInfo();
    public abstract virtual object Indexer(int index);
    public abstract virtual int GetRowIndexByKey(object key);
    public abstract virtual int IndexOf(object value);
    public abstract virtual bool Contains(object value);
    public int Count();
    public abstract virtual object GetRowKey(int index);
    public List`1<object> GetTotalSummary();
    public List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    private void FillChildrenIfNeeded(ServerModeGroupInfo myGroupInfo);
    protected virtual ServerModeGroupInfoData[] PrepareChildren(CriteriaOperator groupWhere, CriteriaOperator[] groupByCriteria, CriteriaOperator[] orderByCriteria, Boolean[] isDescOrder, ServerModeSummaryDescriptor[] summaries);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.ServerModeCache/<PrepareChildrenFallback>d__41")]
private IEnumerable`1<ServerModeGroupInfoData> PrepareChildrenFallback(int currentLvlIndex, CriteriaOperator currentGroupWhere, CriteriaOperator[] groupByCriteria, CriteriaOperator[] orderByCriteria, Boolean[] isDescOrder, ServerModeSummaryDescriptor[] summaries);
    protected virtual ServerModeGroupInfoData[] PrepareChildren(CriteriaOperator groupWhere, CriteriaOperator groupByCriterion, CriteriaOperator orderByCriterion, bool isDesc, ServerModeSummaryDescriptor[] summaries);
    protected abstract virtual ServerModeGroupInfoData PrepareTopGroupInfo(ServerModeSummaryDescriptor[] summaries);
    protected virtual int PrepareTopGroupCount();
    private ServerModeGroupInfoData PrepareTopGroupInfoWithTrick(ServerModeSummaryDescriptor[] summaries);
    private ServerModeGroupInfo CreateTopGroupInfo();
    private bool CanTrickCreateTopGroupFromNextGroups();
    public static bool IsNothingButCount(ServerModeSummaryDescriptor[] summaries);
    protected CriteriaOperator GetGroupWhere(ServerModeGroupInfo myGroupInfo);
    protected virtual bool get_ForceStaSafeForReentryProtected();
    protected internal T WithReentryProtection(Func`1<T> action);
    internal void FillFromOldCacheWhateverMakesSence(ServerModeCache oldCache);
    private static void CloneFromOldCache(ServerModeGroupInfo newGroupInfo, ServerModeGroupInfo oldGroupInfo, ServerModeOrderDescriptor[][] newDescriptors, ServerModeOrderDescriptor[][] oldDescriptors, int currentDepth, int maxCloneDepth);
    public abstract virtual bool PrefetchRows(IEnumerable`1<ListSourceGroupInfo> groupsToPrefetch, CancellationToken cancellationToken);
    protected abstract virtual Func`2<object, object> GetOnInstanceEvaluator(CriteriaOperator toEvaluate);
    internal Func`2<object, object> _GetOnInstanceEvaluator(CriteriaOperator toEvaluate);
    protected object GetSortExpressionValueFromRow(object row, int sortIndex, int sortSubIndex);
    protected abstract virtual object FindFirstKeyByCriteriaOperator(CriteriaOperator filterCriteria, bool isReversed);
    private CriteriaOperator LimitSearchByRow(object startRow, bool searchUp, bool ignoreStartRow);
    public int FindIncremental(CriteriaOperator columnExpression, string value, int startIndex, bool searchUp, bool ignoreStartRow, Func`2<object, string> stringValueExtractor, Nullable`1& useToLower);
    internal static int ValidateIncrementalSearchRowIndex(int rowFound, int startRow, bool searchUp);
    public int LocateByExpressionCore(CriteriaOperator extractedExpression, int startIndex, bool searchUp);
    [CompilerGeneratedAttribute]
private ServerModeGroupInfoData <CreateTopGroupInfo>b__46_0();
}
public static class DevExpress.Data.Helpers.ServerModeCommonParameters : object {
    private static Nullable`1<int> complexGroupingOperationTimeout;
    private static Nullable`1<int> complexGroupingOperationEtcTimeout;
    private static Nullable`1<bool> useEtcTimeoutForGroupingOperation;
    public static int ComplexGroupingOperationTimeout { get; public set; }
    public static TimeSpan ComplexGroupingOperationTimeoutTimeSpan { get; }
    public static int ComplexGroupingOperationEtcTimeout { get; public set; }
    public static TimeSpan ComplexGroupingOperationEtcTimeoutTimeSpan { get; }
    public static bool UseEtcTimeoutForGroupingOperation { get; public set; }
    public static int get_ComplexGroupingOperationTimeout();
    public static void set_ComplexGroupingOperationTimeout(int value);
    public static TimeSpan get_ComplexGroupingOperationTimeoutTimeSpan();
    public static int get_ComplexGroupingOperationEtcTimeout();
    public static void set_ComplexGroupingOperationEtcTimeout(int value);
    public static TimeSpan get_ComplexGroupingOperationEtcTimeoutTimeSpan();
    public static bool get_UseEtcTimeoutForGroupingOperation();
    public static void set_UseEtcTimeoutForGroupingOperation(bool value);
    public static BinaryOperator FixServerModeEtcValue(BinaryOperator theOperator);
}
public class DevExpress.Data.Helpers.ServerModeCompoundKey : object {
    public Object[] SubKeys;
    public ServerModeCompoundKey(Object[] subKeys);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Data.Helpers.ServerModeCore : object {
    protected CriteriaOperator[] KeysCriteria;
    protected CriteriaOperator FilterClause;
    protected ServerModeOrderDescriptor[][] SortInfo;
    protected int GroupCount;
    protected ServerModeSummaryDescriptor[] SummaryInfo;
    protected ServerModeSummaryDescriptor[] TotalSummaryInfo;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    public string DefaultSorting;
    public static Nullable`1<bool> DefaultForceCaseInsensitiveForAnySource;
    public bool ForceCaseInsensitiveForAnySource;
    private static int __debugTagSrc;
    private int __debugTag;
    private ServerModeCache _cache;
    protected static CriteriaOperator LogicalFalseStub;
    protected static CriteriaOperator ValueFalseStub;
    internal static string OrderDescToken;
    private Nullable`1<bool> useToLower;
    private Tuple`3<CriteriaOperator, CriteriaOperator, Func`2<object, object>> _OnInstanceEvaluatorCache;
    private int _hintGridIsPagedPageSize;
    private int _hintMaxVisibleRowsInGrid;
    protected ServerModeCache Cache { get; }
    public bool RefreshSupported { get; }
    public int Count { get; }
    public object Item { get; public set; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool AllowInvalidFilterCriteria { get; }
    protected ServerModeCore(CriteriaOperator[] key);
    private static ServerModeCore();
    [CompilerGeneratedAttribute]
public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public virtual string ToString();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected abstract virtual ServerModeCore DXCloneCreate();
    protected virtual ServerModeCore DXClone();
    protected ServerModeCache get_Cache();
    private ServerModeCache CreateCache();
    private void _cache_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    protected virtual void RaiseExceptionThrown(ServerModeExceptionThrownEventArgs e);
    private void _cache_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    protected virtual void RaiseInconsistencyDetected(ServerModeInconsistencyDetectedEventArgs e);
    protected virtual void SoftReset();
    public virtual void Refresh();
    public virtual bool get_RefreshSupported();
    protected abstract virtual ServerModeCache CreateCacheCore();
    protected T WithReentryProtection(Func`1<T> action);
    private CriteriaOperator ExtractExpression(CriteriaOperator d, Int32& exceptionsThrown, CriteriaOperator onExceptionValue);
    public CriteriaOperator ExtractExpressionLogical(CriteriaOperator d, Int32& exceptionsThrown);
    public CriteriaOperator ExtractExpressionValue(CriteriaOperator d, Int32& exceptionsThrown);
    protected virtual CriteriaOperator ExtractExpressionCore(CriteriaOperator d);
    private ServerModeOrderDescriptor[][] Convert(ICollection`1<ServerModeOrderDescriptor[]> original, int groupCount, Int32& exceptionsThrown);
    public static ServerModeOrderDescriptor[] GetSortingDescriptors(string sortingsString);
    private static ServerModeOrderDescriptor ExtractSorting(CriteriaOperator op);
    private ServerModeSummaryDescriptor[] Convert(ICollection`1<ServerModeSummaryDescriptor> original, Int32& exceptionsThrown);
    public static bool AreEqualsOrder(ServerModeOrderDescriptor[][] a, ServerModeOrderDescriptor[][] b);
    internal static bool AreEqualsOrderCore(ServerModeOrderDescriptor[] a, ServerModeOrderDescriptor[] b);
    public static bool AreEqualsSummary(ServerModeSummaryDescriptor[] a, ServerModeSummaryDescriptor[] b);
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    private void RefreshCacheOnApply(bool sameFilter);
    public sealed virtual int get_Count();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    private bool IsIndexFit(int index, CriteriaOperator dirtyExpression, CriteriaOperator extractedExpression);
    protected object EvaluateOnInstance(object row, CriteriaOperator dirtyExpression, CriteriaOperator extractedExpression);
    protected virtual Func`2<object, object> GetOnInstanceEvaluator(CriteriaOperator dirtyExpression, CriteriaOperator extractedExpression);
    private bool EvaluateOnInstanceLogical(object row, CriteriaOperator dirtyExpression, CriteriaOperator extractedExpression);
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual Object[] GetUniqueColumnValuesCore(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    protected abstract virtual Object[] GetUniqueValues(CriteriaOperator expression, int maxCount, CriteriaOperator filter);
    public abstract virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool get_AllowInvalidFilterCriteria();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual void Insert(int index, object value);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
    private void ApplyHints();
}
public abstract class DevExpress.Data.Helpers.ServerModeCoreExtendable : ServerModeCore {
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomGetUniqueValuesEventArgs> CustomGetUniqueValues;
    protected ServerModeCoreExtender Extender;
    protected ServerModeCoreExtendable(CriteriaOperator[] key, ServerModeCoreExtender extender);
    [CompilerGeneratedAttribute]
public void add_CustomGetUniqueValues(EventHandler`1<CustomGetUniqueValuesEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomGetUniqueValues(EventHandler`1<CustomGetUniqueValuesEventArgs> value);
    protected sealed virtual ServerModeCache CreateCacheCore();
    protected sealed virtual Object[] GetUniqueValues(CriteriaOperator expression, int maxCount, CriteriaOperator filter);
    protected abstract virtual Object[] GetUniqueValuesInternal(CriteriaOperator expression, int maxCount, CriteriaOperator filter);
    protected abstract virtual ServerModeKeyedCacheExtendable CreateCacheCoreExtendable();
}
public class DevExpress.Data.Helpers.ServerModeCoreExtender : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomGetCountEventArgs> CustomGetCount;
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomPrepareChildrenEventArgs> CustomPrepareChildren;
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomPrepareTopGroupInfoEventArgs> CustomPrepareTopGroupInfo;
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomFetchKeysEventArgs> CustomFetchKeys;
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomGetUniqueValuesEventArgs> CustomGetUniqueValues;
    private static ICriteriaToExpressionConverter Converter;
    private static ServerModeCoreExtender();
    [CompilerGeneratedAttribute]
public void add_CustomGetCount(EventHandler`1<CustomGetCountEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomGetCount(EventHandler`1<CustomGetCountEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CustomPrepareChildren(EventHandler`1<CustomPrepareChildrenEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomPrepareChildren(EventHandler`1<CustomPrepareChildrenEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CustomPrepareTopGroupInfo(EventHandler`1<CustomPrepareTopGroupInfoEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomPrepareTopGroupInfo(EventHandler`1<CustomPrepareTopGroupInfoEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CustomFetchKeys(EventHandler`1<CustomFetchKeysEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomFetchKeys(EventHandler`1<CustomFetchKeysEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CustomGetUniqueValues(EventHandler`1<CustomGetUniqueValuesEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomGetUniqueValues(EventHandler`1<CustomGetUniqueValuesEventArgs> value);
    public static ServerModeGroupInfoData PrepareTopGroupInfo(IQueryable q, CriteriaOperator where, ServerModeSummaryDescriptor[] summaries);
    public static ServerModeGroupInfoData PrepareTopGroupInfo(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator where, ServerModeSummaryDescriptor[] summaries);
    public static ServerModeGroupInfoData[] PrepareChildren(IQueryable q, CriteriaOperator groupWhere, ServerModeOrderDescriptor groupByDescriptor, ServerModeSummaryDescriptor[] summaries);
    public static ServerModeGroupInfoData[] PrepareChildren(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator groupWhere, ServerModeOrderDescriptor groupByDescriptor, ServerModeSummaryDescriptor[] summaries);
    public static Object[] FetchKeys(IQueryable q, CriteriaOperator[] keysCriteria, CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    public static Object[] FetchKeys(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator[] keysCriteria, CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    public static int GetCount(IQueryable q, CriteriaOperator where);
    public static int GetCount(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator where);
    public static Object[] GetUniqueValues(IQueryable q, CriteriaOperator expression, int maxCount, CriteriaOperator where);
    public static Object[] GetUniqueValues(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator expression, int maxCount, CriteriaOperator where);
    protected virtual void OnCustomPrepareTopGroupInfo(object sender, CustomPrepareTopGroupInfoEventArgs e);
    private void OnCustomPrepareChildren(object sender, CustomPrepareChildrenEventArgs e);
    private void OnCustomGetCount(object sender, CustomGetCountEventArgs e);
    private void OnCustomFetchKeys(object sender, CustomFetchKeysEventArgs e);
    private void OnCustomGetUniqueValues(object sender, CustomGetUniqueValuesEventArgs e);
    internal void Subscribe(ServerModeKeyedCacheExtendable serverModeCache);
    internal void Subscribe(ServerModeCoreExtendable serverModeCore);
}
public class DevExpress.Data.Helpers.ServerModeCurrentAndSelectedRowsKeeper : CurrentAndSelectedRowsKeeper {
    protected bool IsAllowSaveCurrentControllerRow { get; }
    public ServerModeCurrentAndSelectedRowsKeeper(ServerModeDataController controller, bool allowKeepSelection);
    protected virtual bool get_IsAllowSaveCurrentControllerRow();
}
public class DevExpress.Data.Helpers.ServerModeEtcValue : object {
    private object value;
    private bool isDesc;
    public object Value { get; }
    public bool IsDesc { get; }
    public ServerModeEtcValue(object value, bool isDesc);
    public object get_Value();
    public bool get_IsDesc();
    public virtual string ToString();
}
public class DevExpress.Data.Helpers.ServerModeExpandedGroupKeeper : ExpandedGroupKeeper {
    public ServerModeExpandedGroupKeeper(ServerModeDataControllerBase controller);
    protected virtual bool IsAllSelected();
}
public abstract class DevExpress.Data.Helpers.ServerModeFlatBase : object {
    private ConfigurationInfo _CurrentConfiguration;
    private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> _InconsistencyDetected;
    private EventHandler`1<ServerModeExceptionThrownEventArgs> _ExceptionThrown;
    public ConfigurationInfo CurrentConfiguration { get; }
    public bool RefreshSupported { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ConfigurationInfo get_CurrentConfiguration();
    protected virtual void OnCurrentConfigurationChanging(ConfigurationInfo newInfo);
    protected abstract virtual void OnCurrentConfigurationChanged();
    private sealed virtual override void DevExpress.Data.IListServer.Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> groupSummaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    private sealed virtual override List`1<ListSourceGroupInfo> DevExpress.Data.IListServer.GetGroupInfo(ListSourceGroupInfo parentGroup);
    protected virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    private sealed virtual override Object[] DevExpress.Data.IListServer.GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    protected virtual IDictionary`2<ServerModeSummaryDescriptor, object> GetTotalSummary();
    private sealed virtual override List`1<object> DevExpress.Data.IListServer.GetTotalSummary();
    protected virtual object GetRowKey(int index);
    private sealed virtual override object DevExpress.Data.IListServer.GetRowKey(int index);
    protected virtual Nullable`1<int> GetRowIndexByKey(object key);
    private sealed virtual override int DevExpress.Data.IListServer.GetRowIndexByKey(object key);
    protected virtual Nullable`1<int> FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    private sealed virtual override int DevExpress.Data.IListServer.FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    protected virtual Nullable`1<int> LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    private sealed virtual override int DevExpress.Data.IListServer.LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    protected virtual Nullable`1<int> LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    private sealed virtual override int DevExpress.Data.IListServer.LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    private sealed virtual override IList DevExpress.Data.IListServer.GetAllFilteredAndSortedRows();
    protected virtual bool PrefetchRows(CancellationToken cancellationToken);
    private sealed virtual override bool DevExpress.Data.IListServer.PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    private sealed virtual override void DevExpress.Data.IListServer.add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    private sealed virtual override void DevExpress.Data.IListServer.remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public void RaiseInconsistencyDetected(string message);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void RaiseInconsistencyDetected(Exception exception);
    protected virtual void OnInconsistencyDetected(ServerModeInconsistencyDetectedEventArgs e);
    private sealed virtual override void DevExpress.Data.IListServer.add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    private sealed virtual override void DevExpress.Data.IListServer.remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public void RaiseExceptionThrown(Exception exception);
    protected virtual void OnExceptionThrown(ServerModeExceptionThrownEventArgs e);
    public virtual void Refresh();
    public virtual bool get_RefreshSupported();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public abstract virtual int GetCount();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Data.Helpers.ServerModeGroupInfoData : object {
    public int ChildDataRowCount;
    public Object[] GroupValues;
    public Object[] Summary;
    public ServerModeGroupInfoData(Object[] groupValues, int childDataRowCount, Object[] summary);
    public ServerModeGroupInfoData(object groupValue, int childDataRowCount, Object[] summary);
}
public abstract class DevExpress.Data.Helpers.ServerModeKeyedCache : ServerModeCache {
    public static BooleanSwitch ExplainSkipTake;
    private IByIntDictionary _RowsByIndex;
    private IByIntDictionary _KeysByIndex;
    private Func`2<object, object> keyFromRowGetter;
    public static int DefaultMagicNumberFetchRowsInSize;
    public static int DefaultMagicNumberMaxPageSizeForFillKeysToFetchListWeb;
    public static int DefaultMagicNumberFetchRowsAllThreshold;
    public static int DefaultMagicNumberFetchKeysAllThreshold;
    public static int DefaultMagicNumberFetchRowsTopThreshold;
    public static int DefaultMagicNumberFetchRowsTop;
    public static int DefaultMagicNumberFetchKeysModulo;
    public static int DefaultMagicNumberScanKeysBase;
    public static int DefaultMagicNumberTakeKeysUpperLimitAfterSkip;
    public static double DefaultMagicNumberTakeIncreaseStepMultiplier;
    public static bool WebPagingPrefetchNeighbourPage;
    public static Nullable`1<bool> FetchRowsIsGood;
    private Nullable`1<bool> ActualFetchRowsIsGood;
    public CriteriaOperator IsFetchRowsGoodIdeaForSureHint_FullestPossibleCriteria;
    private static ServerModeServerAndChannelModel SafeModel;
    private Nullable`1<bool> UseTakeEnforcer;
    public static bool MinimiseSingleRequestTransferSizeInsteadOfOverallOptimisation;
    public static Nullable`1<bool> ForceTake;
    private ServerModeServerAndChannelModelBuilder regressor;
    public static bool SuppressInconsistencyCheckForIncreasedGroupRowCountInFetchRowsAll;
    private static CriteriaOperator FalseMarker;
    private int _hintPageSize;
    private int _hintMaxVisibleRows;
    protected IByIntDictionary RowsByIndex { get; }
    protected IByIntDictionary KeysByIndex { get; }
    public IEqualityComparer`1<object> KeysComparer { get; }
    protected int MaxInSize { get; }
    protected int MagicNumberFetchRowsInSize { get; }
    protected int MagicNumberMaxPageSizeForFillKeysToFetchListWeb { get; }
    protected int MagicNumberFetchRowsAllThreshold { get; }
    protected int MagicNumberFetchKeysAllThreshold { get; }
    protected int MagicNumberFetchRowsTopThreshold { get; }
    protected int MagicNumberFetchRowsTop { get; }
    protected int MagicNumberFetchKeysTopPenaltyGap { get; }
    protected int MagicNumberFetchKeysModulo { get; }
    protected int MagicNumberTakeKeysBase { get; }
    protected int MagicNumberScanKeysBase { get; }
    protected int MagicNumberTakeKeysUpperLimitAfterSkip { get; }
    protected double MagicNumberAllowedSlowerThenBase { get; }
    protected double MagicNumberAllowedSlowerThenBaseVariance { get; }
    protected double MagicNumberTakeIncreaseStepMultiplier { get; }
    [ObsoleteAttribute("Not needed anymore. If you want to force Take, use ForceTake instead. If you want to chop server responses to smallest possible chunks use MinimiseSingleRequestTransferSizeInsteadOfOverallOptimisation instead")]
public static Nullable`1<bool> ForceSkip { get; public set; }
    protected ServerModeKeyedCache(CriteriaOperator[] keyCriteria, ServerModeOrderDescriptor[][] sortInfo, int groupCount, ServerModeSummaryDescriptor[] summary, ServerModeSummaryDescriptor[] totalSummary);
    private static ServerModeKeyedCache();
    protected IByIntDictionary get_RowsByIndex();
    protected IByIntDictionary get_KeysByIndex();
    protected abstract virtual Type ResolveKeyType(CriteriaOperator singleKeyToResolve);
    protected abstract virtual Type ResolveRowType();
    public virtual bool Contains(object value);
    public virtual int IndexOf(object value);
    public bool KeyGroupEquals(object a, object b);
    public bool KeyEquals(object a, object b);
    public virtual IEqualityComparer`1<object> get_KeysComparer();
    protected virtual Func`2<object, object> GetKeyComponentFromRowGetter(CriteriaOperator keyComponent);
    [ObsoleteAttribute("Override and use GetOnInstanceEvaluator instead")]
protected virtual object EvaluateOnInstance(object row, CriteriaOperator criteriaOperator);
    protected object GetKeyFromRow(object row);
    protected virtual int get_MaxInSize();
    public virtual object Indexer(int index);
    private object FetchInIndexerCore(int index);
    private void FillKeysToFetchList(int index, IList`1<string> inconsistencies, IList`1& keysToFetch, IDictionary`2& indicesByKeys);
    private void FillKeysToFetchListWeb(int index, IList`1<string> inconsistencies, IList`1& keysToFetch, IDictionary`2& indicesByKeys);
    protected virtual Object[] FetchRowsByKeys(Object[] keys);
    protected virtual int get_MagicNumberFetchRowsInSize();
    protected virtual int get_MagicNumberMaxPageSizeForFillKeysToFetchListWeb();
    protected virtual int get_MagicNumberFetchRowsAllThreshold();
    protected virtual int get_MagicNumberFetchKeysAllThreshold();
    protected virtual int get_MagicNumberFetchRowsTopThreshold();
    protected virtual int get_MagicNumberFetchRowsTop();
    protected virtual int get_MagicNumberFetchKeysTopPenaltyGap();
    protected virtual int get_MagicNumberFetchKeysModulo();
    protected virtual int get_MagicNumberTakeKeysBase();
    protected virtual int get_MagicNumberScanKeysBase();
    protected virtual int get_MagicNumberTakeKeysUpperLimitAfterSkip();
    protected virtual double get_MagicNumberAllowedSlowerThenBase();
    protected virtual double get_MagicNumberAllowedSlowerThenBaseVariance();
    protected virtual double get_MagicNumberTakeIncreaseStepMultiplier();
    protected bool IsFetchRowsGoodIdeaForSure();
    protected virtual bool DecideIsFetchRowsGoodIdeaForSure();
    private static bool DecideIsFetchRowsGoodIdea(ServerModeOrderDescriptor[][] order, CriteriaOperator criteria);
    public virtual object GetRowKey(int index);
    private SkipTakeParamsSkip CalculateSkipTakeParams(ServerModeGroupInfo gi, int index);
    private SkipTakeParamsTake CalculateTakeParams(ServerModeGroupInfo gi, bool isFromBottom, int fetchCount);
    protected sealed virtual object FindFirstKeyByCriteriaOperator(CriteriaOperator filterCriteria, bool isReversed);
    protected abstract virtual Object[] FetchKeys(CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    private void FillKeys(ServerModeGroupInfo gi, bool isFromBottom, int skip, int take, Object[] keys);
    private void DoFetchKeys(ServerModeGroupInfo gi, bool isFromBottom, int skip, int take);
    private void DoFetchKeysSkipWithTakeBackup(ServerModeGroupInfo gi, bool skipIsFromBottom, int skipSkip, int skipTake, bool pureTakeIsFromBottom, int pureTake);
    private Object[] FetchKeysTimed(CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    public static Nullable`1<bool> get_ForceSkip();
    public static void set_ForceSkip(Nullable`1<bool> value);
    private static int GetGlobalIndex(ServerModeGroupInfo gi, int pos, bool isReversed);
    private ServerModeGroupInfo GetGroupForKeysFetchingAround(int index);
    private void FetchRowsAll(ServerModeGroupInfo gi);
    private ServerModeOrderDescriptor[] GetOrder(bool isReversed);
    private static ServerModeOrderDescriptor[] GetOrder(ServerModeOrderDescriptor[][] src, bool isReversed);
    private void FetchRowsTop(ServerModeGroupInfo gi, bool isFromBottom, int top);
    private void FetchRows(CriteriaOperator where, int take, int validateCount, int firstRecord, bool isFromBottom);
    protected abstract virtual Object[] FetchRows(CriteriaOperator where, ServerModeOrderDescriptor[] order, int take);
    public virtual int GetRowIndexByKey(object key);
    protected abstract virtual int GetCount(CriteriaOperator criteriaOperator);
    protected virtual int PrepareTopGroupCount();
    private static CriteriaOperator MakeEqClause(ServerModeOrderDescriptor od, OperandValue ov);
    private static CriteriaOperator MakeStrongClause(ServerModeOrderDescriptor od, OperandValue ov);
    protected CriteriaOperator GetFetchRowsByKeysCondition(Object[] keys);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
    public virtual bool PrefetchRows(IEnumerable`1<ListSourceGroupInfo> groupsToPrefetch, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.ServerModeKeyedCache/<FlattenGroups>d__112")]
private IEnumerable`1<ServerModeGroupInfo> FlattenGroups(IEnumerable`1<ListSourceGroupInfo> groupsToPrefetch, CancellationToken cancellationToken);
    private void PrefetchRows(ServerModeGroupInfo gri);
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetKeyFromRow>b__19_0(CriteriaOperator keyComponent);
}
public abstract class DevExpress.Data.Helpers.ServerModeKeyedCacheExtendable : ServerModeKeyedCache {
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomGetCountEventArgs> CustomGetCount;
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomPrepareChildrenEventArgs> CustomPrepareChildren;
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomPrepareTopGroupInfoEventArgs> CustomPrepareTopGroupInfo;
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomFetchKeysEventArgs> CustomFetchKeys;
    private Nullable`1<int> fetchRowsSize;
    private Dictionary`2<object, object> keyObjectCache;
    private int maxInSize;
    protected CriteriaOperator ExternalCriteria { get; }
    protected int MagicNumberTakeKeysUpperLimitAfterSkip { get; }
    protected int MaxInSize { get; }
    protected bool ForceStaSafeForReentryProtected { get; }
    protected ServerModeKeyedCacheExtendable(CriteriaOperator[] keysCriteria, ServerModeOrderDescriptor[][] sortInfo, int groupCount, ServerModeSummaryDescriptor[] summary, ServerModeSummaryDescriptor[] totalSummary);
    protected virtual CriteriaOperator get_ExternalCriteria();
    [CompilerGeneratedAttribute]
public void add_CustomGetCount(EventHandler`1<CustomGetCountEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomGetCount(EventHandler`1<CustomGetCountEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CustomPrepareChildren(EventHandler`1<CustomPrepareChildrenEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomPrepareChildren(EventHandler`1<CustomPrepareChildrenEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CustomPrepareTopGroupInfo(EventHandler`1<CustomPrepareTopGroupInfoEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomPrepareTopGroupInfo(EventHandler`1<CustomPrepareTopGroupInfoEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CustomFetchKeys(EventHandler`1<CustomFetchKeysEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomFetchKeys(EventHandler`1<CustomFetchKeysEventArgs> value);
    protected sealed virtual int GetCount(CriteriaOperator criteriaOperator);
    protected virtual int get_MagicNumberTakeKeysUpperLimitAfterSkip();
    private int GetCurrentTake(int take, int position);
    private bool ProcessException(int take);
    private static bool NeedBreak(int currentTake, int currentCounter);
    protected sealed virtual Object[] FetchKeys(CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    protected sealed virtual Object[] FetchRows(CriteriaOperator where, ServerModeOrderDescriptor[] order, int take);
    protected virtual int get_MaxInSize();
    protected sealed virtual Object[] FetchRowsByKeys(Object[] keys);
    protected sealed virtual ServerModeGroupInfoData[] PrepareChildren(CriteriaOperator groupWhere, CriteriaOperator groupByCriterion, CriteriaOperator orderByCriterion, bool isDesc, ServerModeSummaryDescriptor[] summaries);
    protected sealed virtual ServerModeGroupInfoData PrepareTopGroupInfo(ServerModeSummaryDescriptor[] summaries);
    protected abstract virtual object FetchPrepare(CriteriaOperator where, ServerModeOrderDescriptor[] order);
    protected abstract virtual void FetchKeysCore(object source, int skip, int take, IEnumerable& keys, IEnumerable& rows);
    protected abstract virtual IEnumerable FetchRowsCore(object source, int skip, int take);
    protected abstract virtual IEnumerable FetchRowsByKeysCore(Object[] keys);
    protected abstract virtual int GetCountInternal(CriteriaOperator criteriaOperator);
    protected abstract virtual ServerModeGroupInfoData[] PrepareChildrenInternal(CriteriaOperator groupWhere, ServerModeOrderDescriptor groupByDescriptor, ServerModeSummaryDescriptor[] summaries);
    protected abstract virtual ServerModeGroupInfoData PrepareTopGroupInfoInternal(ServerModeSummaryDescriptor[] summaries);
    protected virtual bool get_ForceStaSafeForReentryProtected();
}
public static class DevExpress.Data.Helpers.ServerModeOptimalFetchHelper : object {
    public static ServerModeOptimalFetchResult CalculateOptimalFetchResult(ServerModeOptimalFetchParam resParam);
    private static InvalidOperationException CreateGeneralException(ServerModeOptimalFetchParam resParam, Exception e);
    private static Solution OptimalResultCore(ServerModeOptimalFetchParam p);
    private static Nullable`1<int> CalculateTakeFromFixedTimeAndSkip(ServerModeServerAndChannelModel model, double targetTime, int skip);
    private static Nullable`1<int> CalculateTakeFromFixedTimeAndScan(ServerModeServerAndChannelModel model, double targetTime, int scan);
}
public class DevExpress.Data.Helpers.ServerModeOptimalFetchParam : object {
    public ServerModeServerAndChannelModel Model;
    public int Index;
    public int MinIndex;
    public int MaxIndex;
    public int TotalCount;
    public int BaseCountTakeData;
    public int MaxAllowedTake;
    public double FillTimeMultiplier;
    public double EdgeTimeMultiplier;
    public double MiddleTimeMultiplier;
    public ServerModeOptimalFetchParam(ServerModeServerAndChannelModel model, int index, int minIndex, int maxIndex, int totalCount, int baseCountTakeData, int maxAllowedTake, double fillTimeMultiplier, double edgeTimeMultiplier, double middleTimeMultiplier);
    public int SkipFromTop(int firstIndexToFetch);
    public int ScanFromTop(int lastIndexToFetch);
    public int SkipFromBottom(int firstIndexToFetch);
    public int ScanFromBottom(int lastIndexToFetch);
    public virtual string ToString();
}
public class DevExpress.Data.Helpers.ServerModeOptimalFetchResult : object {
    public int Skip;
    public int Take;
    public bool IsFromEnd;
    public ServerModeOptimalFetchResult(bool isFromEnd, int skip, int take);
}
public class DevExpress.Data.Helpers.ServerModeSelectionAndCurrentKeeper : SelectionAndCurrentKeeper {
    public ServerModeDataControllerBase Controller { get; }
    protected bool IsAllowIndexOfSearch { get; }
    public ServerModeSelectionAndCurrentKeeper(ServerModeDataControllerBase controller);
    public ServerModeDataControllerBase get_Controller();
    protected virtual bool IsAllowRestoreCurrentRow();
    protected virtual bool get_IsAllowIndexOfSearch();
    protected virtual void RestoreDataRowsAlt();
}
public class DevExpress.Data.Helpers.ServerModeServerAndChannelModel : object {
    public double ConstantPart;
    public double TakeCoeff;
    public double ScanCoeff;
    public ServerModeServerAndChannelModel(double constPart, double takeCoeff, double scanCoeff);
    public virtual string ToString();
}
public class DevExpress.Data.Helpers.ServerModeServerAndChannelModelBuilder : object {
    public static bool TraceWriteLines;
    public static int MaxSamples;
    protected IList`1<Sample> Samples;
    private static String[] Combinations;
    private static ServerModeServerAndChannelModelBuilder();
    public static Double[] Linear(int unknowns, Double[0...,0...] data);
    public static Double[] LinearLeastSquares(LinearLeastSquaresArgs args);
    public void RegisterSample(int take, int scan, double time);
    private static Double[] PackSample(Sample sample, string combination);
    private static ServerModeServerAndChannelModel UnpackSolution(Double[] llsResults, string combination);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.ServerModeServerAndChannelModelBuilder/<PackSamples>d__11")]
private static IEnumerable`1<Double[]> PackSamples(IEnumerable`1<Sample> samples, string combination);
    private static ServerModeServerAndChannelModel Resolve(IEnumerable`1<Sample> samples, string combination);
    private static double Weight(IEnumerable`1<Sample> samples, ServerModeServerAndChannelModel solution);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.ServerModeServerAndChannelModelBuilder/<Join>d__14`1")]
private static IEnumerable`1<T> Join(IEnumerable`1<T> first, IEnumerable`1<T> second);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.ServerModeServerAndChannelModelBuilder/<Get2OfEvery3>d__15`1")]
private static IEnumerable`1<T> Get2OfEvery3(IEnumerable`1<T> src);
    [IteratorStateMachineAttribute("DevExpress.Data.Helpers.ServerModeServerAndChannelModelBuilder/<Get1And3OfEvery3>d__16`1")]
private static IEnumerable`1<T> Get1And3OfEvery3(IEnumerable`1<T> src);
    public ServerModeServerAndChannelModel Resolve();
    private static bool IsInvalid(ServerModeServerAndChannelModel s);
    public Nullable`1<int> GetMaxObservableTake();
}
public static class DevExpress.Data.Helpers.SplitStringHelper : object {
    private static Regex reg1;
    private static Regex reg2;
    private static SplitStringHelper();
    public static string SplitPascalCaseString(string value);
}
public static class DevExpress.Data.Helpers.StaSafeHelper : object {
    public static Nullable`1<bool> DontTouchStackTrace;
    private static bool IsStaCurrentThread { get; }
    private static bool get_IsStaCurrentThread();
    public static void Wait(T arg, Func`2<T, bool> predicate);
    public static void Wait(Func`1<bool> predicate);
    public static T Invoke(Func`1<T> worker);
    public static void Invoke(Action worker);
}
public class DevExpress.Data.Helpers.StringsTolowerCloningHelper : DeepValuesCloneBase {
    private static StringsTolowerCloningHelper Instance;
    private static StringsTolowerCloningHelper();
    private CriteriaOperator LiftToToLowerIfNeeded(CriteriaOperator processed);
    public virtual CriteriaOperator Visit(BinaryOperator theOperator);
    private CriteriaOperator ProcessLike(CriteriaOperator left, CriteriaOperator right);
    public virtual CriteriaOperator Visit(FunctionOperator theOperator);
    public static CriteriaOperator Process(CriteriaOperator op);
}
public class DevExpress.Data.Helpers.SummarySortInfo : object {
    private SummaryItem summaryItem;
    private ColumnSortOrder sortOrder;
    private int groupLevel;
    public SummaryItem SummaryItem { get; }
    public ColumnSortOrder SortOrder { get; }
    public int GroupLevel { get; }
    public SummarySortInfo(SummaryItem summaryItem);
    public SummarySortInfo(SummaryItem summaryItem, int groupLevel, ColumnSortOrder sortOrder);
    public SummaryItem get_SummaryItem();
    public ColumnSortOrder get_SortOrder();
    public int get_GroupLevel();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Helpers.SummarySortInfoCollection : NotificationCollectionBase {
    public SummarySortInfo Item { get; }
    public SummarySortInfoCollection(CollectionChangeEventHandler collectionChanged);
    public SummarySortInfo get_Item(int index);
    public SummarySortInfo GetByLevel(int groupLevel);
    public void ClearAndAddRange(SummarySortInfo[] sortInfos);
    public void AddRange(SummarySortInfo[] sortInfos);
    public SummarySortInfo Add(SummaryItem summaryItem, int groupLevel, ColumnSortOrder sortOrder);
    public void Remove(SummarySortInfo sortInfo);
    internal bool CheckSummaryCollection(SummaryItemCollection summaryCollection);
}
public static class DevExpress.Data.Helpers.SummaryValueExpressiveCalculator : object {
    [ObsoleteAttribute("Removed @ 2022.1", "True")]
[EditorBrowsableAttribute("1")]
public static bool ForceV17_2NullsInTypedSumBehavior_WouldBeRemovedAt18_2;
    public static object Calculate(SummaryItemType summaryItemType, IEnumerable valuesEnumerable, Type valuesType, bool ignoreNulls, IComparer customComparer);
    public static Func`2<IEnumerable, object> GetCalculateFunc(SummaryItemType summaryItemType, Type valuesType, bool ignoreNulls, IComparer customComparer);
    private static Func`2<IEnumerable, object> GetDoTypedAverageFunc(Type valuesType);
    private static object SumInt32AndAlike(IEnumerable`1<Nullable`1<long>> src);
    private static object SumUInt32AndAlike(IEnumerable`1<Nullable`1<long>> src);
    private static object SumInt64AndALike(IEnumerable`1<Nullable`1<long>> e);
    private static object SumUInt64AndALike(IEnumerable`1<Nullable`1<ulong>> e);
    private static Func`2<IEnumerable, object> GetDoTypedSumFunc(Type valuesType);
    private static object ProcessUntypedCalculationWithTypedFallback(SummaryItemType summaryItemType, IEnumerable iEnumerable, bool ignoreNulls, IComparer customComparer);
    private static object ProcessUntypedCalculation(SummaryItemType summaryItemType, IEnumerable values, bool ignoreNulls, IComparer customComparer);
    private static object DoUntypedSumWithCount(IEnumerable`1<object> preparedEnumerable, Int32& counter);
    private static object DoUntypedMinMax(bool isMax, IEnumerable`1<object> preparedEnumerable, IComparer customComparer);
    private static Type TryDetermineUntypedType(IList`1<object> values);
}
public static class DevExpress.Data.Helpers.SyncHelper : object {
    private static int warningThrown;
    public static SynchronizationContext CaptureSynchronizationContextOrFail();
    public static SynchronizationContext TryCaptureSynchronizationContext();
    public static SynchronizationContext FailIfContextWasNotCaptured(SynchronizationContext capturedContext);
    public static bool CanCaptureContext();
    private static SynchronizationContext TryCaptureSynchronizationContextCore();
    private static void ThrowUnableToCaptureSynchronizationContext();
    private static void MuteUnableToCaptureSynchronizationContext();
    public static TaskScheduler CaptureUITaskScheduler(bool throwOnError);
}
internal static class DevExpress.Data.Helpers.TinyThreadPool : object {
    private static ConcurrentQueue`1<Action> Q;
    private static AutoResetEvent SomethingInQ;
    private static int spareThreads;
    private static int theThreadRun;
    private static TinyThreadPool();
    private static void TheThread();
    private static void TryRunTheThread();
    private static void PooledThread(object useless);
    private static void Core();
    private static void RunThreadPoolThread();
    public static void Enqueue(Action action);
}
public class DevExpress.Data.Helpers.TypedListBindingListAdapterBase : BindingListAdapterBase {
    private ITypedList TypedList { get; }
    public TypedListBindingListAdapterBase(IList source);
    public TypedListBindingListAdapterBase(IList source, ItemPropertyNotificationMode itemPropertyNotificationMode);
    private ITypedList get_TypedList();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
}
public class DevExpress.Data.Helpers.UnboundSourceCore : object {
    public static bool SuppressValueNeededTypeValidation;
    private List`1<Row> InnerList;
    private PropertyDescriptorCollection pdc;
    public bool AllowEdit;
    public bool AllowNew;
    public bool AllowRemove;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnboundSourceListChangedEventArgs> UnboundSourceListChanging;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnboundSourceListChangedEventArgs> UnboundSourceListChanged;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnboundSourceValueNeededEventArgs> ValueNeeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnboundSourceValuePushedEventArgs> ValuePushed;
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public UnboundSourceCore(IEnumerable`1<PropertyDescriptorDescriptor> descriptorsDescriptors);
    private PropertyDescriptor Create(PropertyDescriptorDescriptor src, int propertyIndex);
    private PropertyDescriptorCollection CreatePropertyDescriptors(IEnumerable`1<PropertyDescriptorDescriptor> descriptorsDescriptors);
    public void Reconfigure(bool isTriggeredByComponentApi, IEnumerable`1<PropertyDescriptorDescriptor> newDescriptorsDescriptors, int rowsAfterReconfigure);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    [CompilerGeneratedAttribute]
public void add_UnboundSourceListChanging(EventHandler`1<UnboundSourceListChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnboundSourceListChanging(EventHandler`1<UnboundSourceListChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UnboundSourceListChanged(EventHandler`1<UnboundSourceListChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnboundSourceListChanged(EventHandler`1<UnboundSourceListChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    public void Clear(bool isTriggeredByComponentApi);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private int IndexOf(Row value);
    private int IndexOfObject(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public void RemoveAt(bool isTriggeredByComponentApi, int index);
    internal object Indexer(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    private void Renumber(int firstToRenumber, Nullable`1<int> whereToStopRenumber);
    private UnboundSourceListChangedEventArgs RaiseChanging(bool isTriggeredByComponentApi, ListChangedType lct, int newIndex, int oldIndex);
    private void RaiseChanging(UnboundSourceListChangedEventArgs e);
    private void RaiseChanged(UnboundSourceListChangedEventArgs e);
    public void Reset(bool isTriggeredByComponentApi, int countAfterReset);
    public void SetRowCount(bool isTriggeredByComponentApi, int count);
    private void ResizeCore(int newCount);
    public void InsertAt(bool isTriggeredByComponentApi, int position);
    public int Add(bool isTriggeredByComponentApi);
    public void Move(bool isTriggeredByComponentApi, int from, int to);
    public PropertyDescriptor FindPropertyDescriptorByName(string propertyName);
    public void Change(bool isTriggeredByComponentApi, int row, string propertyName);
    [CompilerGeneratedAttribute]
public void add_ValueNeeded(EventHandler`1<UnboundSourceValueNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValueNeeded(EventHandler`1<UnboundSourceValueNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ValuePushed(EventHandler`1<UnboundSourceValuePushedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValuePushed(EventHandler`1<UnboundSourceValuePushedEventArgs> value);
    [CompilerGeneratedAttribute]
private PropertyDescriptor <CreatePropertyDescriptors>b__9_0(PropertyDescriptorDescriptor dd, int ii);
}
public class DevExpress.Data.Helpers.UniqueValuesReadyEventArgs : EventArgs {
    public Object[] UniqueValues;
    public UniqueValuesReadyEventArgs(Object[] result);
}
public class DevExpress.Data.Helpers.VirtualServerModeConfigurationChangedEventArgs : EventArgs {
    private VirtualServerModeConfigurationInfo _ConfigurationInfo;
    public VirtualServerModeConfigurationInfo ConfigurationInfo { get; }
    public VirtualServerModeConfigurationChangedEventArgs(VirtualServerModeConfigurationInfo configurationInfo);
    public VirtualServerModeConfigurationInfo get_ConfigurationInfo();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Helpers.VirtualServerModeCore : object {
    private IBindingList _ActiveBindingList;
    private IList _ActiveActualList;
    private Action DeactivateAction;
    private IList _PendingList;
    private bool _MoreRowsAvailable;
    private bool _PendingMoreRowsAvailable;
    private int _CanForwardListChanged;
    private int _insideApply;
    [CompilerGeneratedAttribute]
private EventHandler`1<VirtualServerModeConfigurationChangedEventArgs> ConfigurationChanged;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    private int _busy;
    [CompilerGeneratedAttribute]
private EventHandler IsBusyChanged;
    [CompilerGeneratedAttribute]
private EventHandler RowsLoaded;
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> ErrorOccurred;
    [CompilerGeneratedAttribute]
private EventHandler MoreRowsRequested;
    [CompilerGeneratedAttribute]
private EventHandler RefreshRequested;
    [CompilerGeneratedAttribute]
private bool <TotalSummarySupported>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VirtualServerModeTotalSummaryReadyEventArgs> TotalSummaryReady;
    [CompilerGeneratedAttribute]
private bool <UniqueValuesSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetUniqueValuesEventArgs> GetUniqueValuesRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<UniqueValuesReadyEventArgs> UniqueValuesReady;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> CancelGetUniqueValuesRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<VirtualServerModeCanPerformColumnServerActionEventArgs> CanPerformColumnServerAction;
    private int seized;
    private static bool ownershipWarningThrown;
    public bool CanForwardListChanged { get; }
    public IBindingList ActiveBindingList { get; }
    public IList ActiveActualList { get; }
    protected bool InsideApply { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool AllowEdit { get; }
    public bool AllowNew { get; }
    public bool AllowRemove { get; }
    public bool IsSorted { get; }
    public ListSortDirection SortDirection { get; }
    public PropertyDescriptor SortProperty { get; }
    public bool SupportsChangeNotification { get; }
    public bool SupportsSearching { get; }
    public bool SupportsSorting { get; }
    public bool IsBusy { get; }
    public bool IsBusySupported { get; }
    public bool IsMoreRowsSupported { get; }
    public bool IsMoreRowsAvailable { get; public set; }
    public bool RefreshSupported { get; }
    public bool TotalSummarySupported { get; public set; }
    public bool UniqueValuesSupported { get; public set; }
    public VirtualServerModeCore(Type t);
    public void AssignList(IList newDataSource, bool moreRowsAvailable, bool isReset);
    private void ActivatePending(bool isReset, bool propsAreCompatible);
    private void ActivateAndNotify(IList list, bool moreRowsAvailable, bool forceReset, bool propsAreCompatible);
    private void ActivateCore(IList list, bool moreRowsAvailable);
    private static bool AreCompatiblePropsDefault(IList list1, IList list2);
    private void BindingListListChanged(object sender, ListChangedEventArgs e);
    protected virtual void RaiseListChanged(ListChangedEventArgs e);
    public bool get_CanForwardListChanged();
    public void ListChangedForwardingDisable();
    public void ListChangedForwardingEnable();
    public IBindingList get_ActiveBindingList();
    public IList get_ActiveActualList();
    private void CheckCanAcceptSourceModification();
    protected bool get_InsideApply();
    private sealed virtual override void DevExpress.Data.IVirtualListServer.ChangeConfiguration(VirtualServerModeConfigurationInfo configuration);
    protected virtual void RaiseConfigurationChanged(VirtualServerModeConfigurationChangedEventArgs configuration);
    [CompilerGeneratedAttribute]
public void add_ConfigurationChanged(EventHandler`1<VirtualServerModeConfigurationChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ConfigurationChanged(EventHandler`1<VirtualServerModeConfigurationChangedEventArgs> value);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void AddIndex(PropertyDescriptor property);
    public sealed virtual object AddNew();
    public sealed virtual bool get_AllowEdit();
    public sealed virtual bool get_AllowNew();
    public sealed virtual bool get_AllowRemove();
    public sealed virtual void ApplySort(PropertyDescriptor property, ListSortDirection direction);
    public sealed virtual int Find(PropertyDescriptor property, object key);
    public sealed virtual bool get_IsSorted();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public sealed virtual void RemoveIndex(PropertyDescriptor property);
    public sealed virtual void RemoveSort();
    public sealed virtual ListSortDirection get_SortDirection();
    public sealed virtual PropertyDescriptor get_SortProperty();
    public sealed virtual bool get_SupportsChangeNotification();
    public sealed virtual bool get_SupportsSearching();
    public sealed virtual bool get_SupportsSorting();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    public sealed virtual bool get_IsBusy();
    public void BusyOn();
    public void BusyOff();
    public sealed virtual bool get_IsBusySupported();
    protected virtual void RaiseIsBusyChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_IsBusyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_IsBusyChanged(EventHandler value);
    public sealed virtual bool get_IsMoreRowsSupported();
    public sealed virtual bool get_IsMoreRowsAvailable();
    public void set_IsMoreRowsAvailable(bool value);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraMoreRows.MoreRows();
    public void NotifyRowsLoaded();
    protected virtual void RaiseRowsLoaded(EventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RowsLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RowsLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    protected virtual void RaiseErrorOccurred(ErrorEventArgs e);
    public void NotifyError(Exception ex);
    protected virtual void RaiseMoreRowsRequested();
    [CompilerGeneratedAttribute]
public void add_MoreRowsRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MoreRowsRequested(EventHandler value);
    public sealed virtual bool get_RefreshSupported();
    public sealed virtual void Refresh();
    protected virtual void RaiseRefreshRequested();
    [CompilerGeneratedAttribute]
public void add_RefreshRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RefreshRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TotalSummarySupported();
    [CompilerGeneratedAttribute]
public void set_TotalSummarySupported(bool value);
    public sealed virtual bool CanCalculateTotalSummary(ServerModeSummaryDescriptor totalSummary);
    public virtual void NotifyTotalSummaryReady(VirtualServerModeTotalSummaryReadyEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TotalSummaryReady(EventHandler`1<VirtualServerModeTotalSummaryReadyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TotalSummaryReady(EventHandler`1<VirtualServerModeTotalSummaryReadyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UniqueValuesSupported();
    [CompilerGeneratedAttribute]
public void set_UniqueValuesSupported(bool value);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraGetUniqueValues.GetUniqueValues(GetUniqueValuesEventArgs e);
    protected virtual void RaiseGetUniqueValuesRequested(GetUniqueValuesEventArgs e);
    [CompilerGeneratedAttribute]
public void add_GetUniqueValuesRequested(EventHandler`1<GetUniqueValuesEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GetUniqueValuesRequested(EventHandler`1<GetUniqueValuesEventArgs> value);
    public virtual void NotifyUniqueValuesReady(UniqueValuesReadyEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_UniqueValuesReady(EventHandler`1<UniqueValuesReadyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UniqueValuesReady(EventHandler`1<UniqueValuesReadyEventArgs> value);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraGetUniqueValues.CancelGetUniqueValues();
    protected virtual void RaiseCancelGetUniqueValuesRequested(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_CancelGetUniqueValuesRequested(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CancelGetUniqueValuesRequested(EventHandler`1<EventArgs> value);
    private sealed virtual override bool DevExpress.Data.Helpers.IColumnsServerActions.AllowAction(string fieldName, ColumnServerActionType action);
    protected virtual void RaiseCanPerformColumnServerAction(VirtualServerModeCanPerformColumnServerActionEventArgs e);
    [CompilerGeneratedAttribute]
public void add_CanPerformColumnServerAction(EventHandler`1<VirtualServerModeCanPerformColumnServerActionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CanPerformColumnServerAction(EventHandler`1<VirtualServerModeCanPerformColumnServerActionEventArgs> value);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSeizableSource.Seize(object newOwner);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSeizableSource.LetGo(object formerOwner);
    [CompilerGeneratedAttribute]
private void <ActivateCore>b__11_0();
}
public class DevExpress.Data.Helpers.VisibleToSourceRowsDoubleCheckMapper : VisibleToSourceRowsMapper {
    public VisibleToSourceRowsListMapper ListMapper;
    public VisibleToSourceRowsSmartMapper SmartMapper;
    public bool IsReadOnly { get; }
    public int VisibleRowCount { get; }
    public VisibleToSourceRowsDoubleCheckMapper(VisibleToSourceRowsMapper parentMapper);
    internal static bool IsUse();
    private void Do(Action`1<VisibleToSourceRowsMapper> a);
    private R Do(Func`2<VisibleToSourceRowsMapper, R> f);
    public virtual bool get_IsReadOnly();
    public virtual int GetListSourceIndex(int visibleIndex);
    public virtual Nullable`1<int> GetVisibleIndex(int listSourceIndex);
    public virtual int get_VisibleRowCount();
    public virtual Nullable`1<int> HideRow(int sourceIndex);
    public virtual void ShowRow(int sourceIndex, int visibleIndex);
    public virtual void InsertRow(int sourceIndex, Nullable`1<int> visibleIndex);
    public virtual Nullable`1<int> RemoveRow(int sourceIndex);
    public virtual void MoveVisiblePosition(int oldVisibleIndex, int newVisibleIndex);
    public virtual void MoveSourcePosition(int oldSourcePosition, int newSourcePosition);
    public virtual Int32[] ToArray();
    public virtual IEnumerable`1<int> ToEnumerable();
    public virtual void Dispose();
}
public class DevExpress.Data.Helpers.VisibleToSourceRowsFixedIdentityMapper : VisibleToSourceRowsReadOnlyMapperBase {
    private int _Count;
    public int VisibleRowCount { get; }
    public VisibleToSourceRowsFixedIdentityMapper(int count);
    public virtual int GetListSourceIndex(int visibleIndex);
    public virtual Nullable`1<int> GetVisibleIndex(int listSourceIndex);
    public virtual int get_VisibleRowCount();
    public virtual Int32[] ToArray();
    public virtual IEnumerable`1<int> ToEnumerable();
}
public class DevExpress.Data.Helpers.VisibleToSourceRowsListMapper : VisibleToSourceRowsMapper {
    private OrdinaryList`1<int> Map;
    private OrdinaryDictionary`2<int, int> ReverseMap;
    private List`1<int> InvalidValidInvalidValidInvalidMapPoints;
    private int _IsChangedEnoughForSmartCounter;
    public int VisibleRowCount { get; }
    public bool IsSetRangeAble { get; }
    public bool IsReadOnly { get; }
    public bool IsChangedEnoughForSmart { get; }
    public VisibleToSourceRowsListMapper(IEnumerable`1<int> initialVisibleState, int hintCount);
    public VisibleToSourceRowsListMapper(VisibleToSourceRowsMapper mapper);
    public virtual int GetListSourceIndex(int visibleIndex);
    public virtual int get_VisibleRowCount();
    private Nullable`1<int> HideRowAndClearReverseCache(int sourceIndex, bool asFullyValid);
    public virtual Nullable`1<int> HideRow(int sourceIndex);
    public virtual void ShowRow(int sourceIndex, int visibleIndex);
    public virtual void InsertRow(int sourceIndex, Nullable`1<int> visibleIndex);
    public virtual Nullable`1<int> RemoveRow(int sourceIndex);
    public virtual void MoveVisiblePosition(int oldVisibleIndex, int newVisibleIndex);
    public virtual void MoveSourcePosition(int oldSourcePosition, int newSourcePosition);
    private void ClearReverseCache(bool asFullyValid);
    private Nullable`1<int> GetVisibleIndexAndClearReverseCache(int listSourceIndex, bool asFullyValid);
    public virtual Nullable`1<int> GetVisibleIndex(int listSourceIndex);
    public virtual void SetRange(int startPos, Int32[] newValues);
    public virtual void SetValue(int visibleIndex, int sourceIndex);
    public virtual bool get_IsSetRangeAble();
    public virtual Int32[] ToArray();
    public virtual IEnumerable`1<int> ToEnumerable();
    public virtual bool get_IsReadOnly();
    public bool get_IsChangedEnoughForSmart();
    private void InvalidateReverseMap(int firstInvalid, int lastInvalidPlusOne);
    private void ExtendInvalidBucketStartingAtPosTo(int invalidBucketPos, int lastInvalidPlusOne);
    private void ValidateReverseMap(int firstValid, int lastValidPlusOne);
    public virtual void Dispose();
}
public abstract class DevExpress.Data.Helpers.VisibleToSourceRowsMapper : object {
    public bool IsReadOnly { get; }
    public int VisibleRowCount { get; }
    public bool IsSetRangeAble { get; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual int GetListSourceIndex(int visibleIndex);
    public abstract virtual Nullable`1<int> GetVisibleIndex(int listSourceIndex);
    public abstract virtual int get_VisibleRowCount();
    public abstract virtual Nullable`1<int> HideRow(int sourceIndex);
    public abstract virtual void ShowRow(int sourceIndex, int visibleIndex);
    public abstract virtual void InsertRow(int sourceIndex, Nullable`1<int> visibleIndex);
    public abstract virtual Nullable`1<int> RemoveRow(int sourceIndex);
    public abstract virtual void MoveVisiblePosition(int oldVisibleIndex, int newVisibleIndex);
    public abstract virtual void MoveSourcePosition(int oldSourcePosition, int newSourcePosition);
    public virtual bool get_IsSetRangeAble();
    public virtual void SetRange(int startPos, Int32[] newValues);
    public virtual void SetValue(int visibleIndex, int sourceIndex);
    public abstract virtual Int32[] ToArray();
    public abstract virtual IEnumerable`1<int> ToEnumerable();
    public virtual bool Contains(int listSourceIndex);
    public virtual void Dispose();
}
public abstract class DevExpress.Data.Helpers.VisibleToSourceRowsReadOnlyMapperBase : VisibleToSourceRowsMapper {
    public bool IsReadOnly { get; }
    public virtual Nullable`1<int> HideRow(int sourceIndex);
    public virtual void ShowRow(int sourceIndex, int visibleIndex);
    public virtual void InsertRow(int sourceIndex, Nullable`1<int> visibleIndex);
    public virtual Nullable`1<int> RemoveRow(int sourceIndex);
    public virtual void MoveVisiblePosition(int oldVisibleIndex, int newVisibleIndex);
    public virtual void MoveSourcePosition(int oldSourcePosition, int newSourcePosition);
    public virtual bool get_IsReadOnly();
}
public class DevExpress.Data.Helpers.VisibleToSourceRowsReadOnlyProxyMapper : VisibleToSourceRowsReadOnlyMapperBase {
    private VisibleToSourceRowsMapper Target;
    public int VisibleRowCount { get; }
    public VisibleToSourceRowsReadOnlyProxyMapper(VisibleToSourceRowsMapper _Target);
    public virtual int GetListSourceIndex(int visibleIndex);
    public virtual Nullable`1<int> GetVisibleIndex(int listSourceIndex);
    public virtual int get_VisibleRowCount();
    public virtual Int32[] ToArray();
    public virtual IEnumerable`1<int> ToEnumerable();
}
public class DevExpress.Data.Helpers.VisibleToSourceRowsSmartMapper : VisibleToSourceRowsMapper {
    private Catalog VisibleCatalog;
    private Catalog SourceCatalog;
    public int VisibleRowCount { get; }
    public bool IsReadOnly { get; }
    private VisibleToSourceRowsSmartMapper(IEnumerable`1<int> visibleSourceIndices, int count);
    public VisibleToSourceRowsSmartMapper(VisibleToSourceRowsMapper parentMapper);
    public virtual int GetListSourceIndex(int visibleIndex);
    public virtual Nullable`1<int> GetVisibleIndex(int listSourceIndex);
    public virtual int get_VisibleRowCount();
    [ConditionalAttribute("DEBUGTEST")]
private void ValidateCatalogs();
    public virtual Nullable`1<int> HideRow(int sourceIndex);
    public virtual void ShowRow(int sourceIndex, int visibleIndex);
    private void InsertHiddenRow(int sourceIndex);
    public virtual void InsertRow(int sourceIndex, Nullable`1<int> visibleIndex);
    public virtual Nullable`1<int> RemoveRow(int sourceIndex);
    public virtual void MoveVisiblePosition(int oldVisibleIndex, int newVisibleIndex);
    public virtual void MoveSourcePosition(int oldSourcePosition, int newSourcePosition);
    public virtual Int32[] ToArray();
    public virtual IEnumerable`1<int> ToEnumerable();
    public virtual bool get_IsReadOnly();
    public virtual void Dispose();
}
internal class DevExpress.Data.Helpers.WeakReferencePermission : object {
    public sealed virtual IPermission Copy();
    public sealed virtual void Demand();
    public sealed virtual IPermission Intersect(IPermission target);
    public sealed virtual bool IsSubsetOf(IPermission target);
    public sealed virtual IPermission Union(IPermission target);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual SecurityElement ToXml();
}
public interface DevExpress.Data.IBaseRowStub {
    public abstract virtual void Reset();
}
public interface DevExpress.Data.IBoundControl {
    public bool IsHandleCreated { get; }
    public bool InvokeRequired { get; }
    public abstract virtual bool get_IsHandleCreated();
    public abstract virtual IAsyncResult BeginInvoke(Delegate method, Object[] arguments);
    public abstract virtual bool get_InvokeRequired();
}
public interface DevExpress.Data.IBoundProperty {
    public string Name { get; }
    public string DisplayName { get; }
    public Type Type { get; }
    public bool HasChildren { get; }
    public List`1<IBoundProperty> Children { get; }
    public bool IsAggregate { get; }
    public bool IsList { get; }
    public IBoundProperty Parent { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
    public abstract virtual Type get_Type();
    public abstract virtual bool get_HasChildren();
    public abstract virtual List`1<IBoundProperty> get_Children();
    public abstract virtual bool get_IsAggregate();
    public abstract virtual bool get_IsList();
    public abstract virtual IBoundProperty get_Parent();
}
public interface DevExpress.Data.IBoundPropertyEx {
    public PropertyDescriptor Descriptor { get; }
    public abstract virtual PropertyDescriptor get_Descriptor();
}
public interface DevExpress.Data.IDataColumnInfo {
    public List`1<IDataColumnInfo> Columns { get; }
    public string UnboundExpression { get; }
    public string Caption { get; }
    public string FieldName { get; }
    public string Name { get; }
    public Type FieldType { get; }
    public DataControllerBase Controller { get; }
    public abstract virtual List`1<IDataColumnInfo> get_Columns();
    public abstract virtual string get_UnboundExpression();
    public abstract virtual string get_Caption();
    public abstract virtual string get_FieldName();
    public abstract virtual string get_Name();
    public abstract virtual Type get_FieldType();
    public abstract virtual DataControllerBase get_Controller();
}
public interface DevExpress.Data.IDataColumnInfoProvider {
    public abstract virtual IDataColumnInfo GetInfo(object arguments);
}
public interface DevExpress.Data.IDataContainerBase {
    public string DataMember { get; public set; }
    public object DataSource { get; public set; }
    public abstract virtual string get_DataMember();
    public abstract virtual void set_DataMember(string value);
    public abstract virtual object get_DataSource();
    public abstract virtual void set_DataSource(object value);
}
public interface DevExpress.Data.IDataControllerCurrentSupport {
    public abstract virtual void OnCurrentControllerRowChanged(CurrentRowEventArgs e);
    public abstract virtual void OnCurrentControllerRowObjectChanged(CurrentRowChangedEventArgs e);
}
public interface DevExpress.Data.IDataControllerData {
    public abstract virtual object GetUnboundData(int listSourceRow1, DataColumnInfo column, object value);
    public abstract virtual void SetUnboundData(int listSourceRow1, DataColumnInfo column, object value);
    public abstract virtual UnboundColumnInfoCollection GetUnboundColumns();
}
public interface DevExpress.Data.IDataControllerData2 {
    public bool HasUserFilter { get; }
    public bool CanUseFastProperties { get; }
    public abstract virtual void SubstituteFilter(SubstituteFilterEventArgs args);
    public abstract virtual Nullable`1<bool> IsRowFit(int listSourceRow, bool fit);
    public abstract virtual bool get_HasUserFilter();
    public abstract virtual PropertyDescriptorCollection PatchPropertyDescriptorCollection(PropertyDescriptorCollection collection);
    public abstract virtual bool get_CanUseFastProperties();
    public abstract virtual ComplexColumnInfoCollection GetComplexColumns();
}
public interface DevExpress.Data.IDataControllerData3 {
    public abstract virtual void ClearFilterCache();
}
public interface DevExpress.Data.IDataControllerDetailClient {
    public abstract virtual void DetailsChanged();
}
public interface DevExpress.Data.IDataControllerDisplayTextInfo {
    public abstract virtual ThreadSafeGetDisplayTextFuncInfo TryGetThreadSafeGetDisplayTextFunc(DataColumnInfo info, string columnName, Type columnValueType);
}
public interface DevExpress.Data.IDataControllerRelationSupport {
    public abstract virtual string GetRelationName(string name, int controllerRow, int relationIndex);
    public abstract virtual string GetRelationDisplayName(string displayName, int controllerRow, int relationIndex);
    public abstract virtual bool IsMasterRowEmpty(bool isEmpty, int controllerRow, int relationIndex);
    public abstract virtual IList GetDetailList(int controllerRow, int relationIndex);
    public abstract virtual int GetRelationCount(int relationCount, int controllerRow);
}
public interface DevExpress.Data.IDataControllerSort {
    public abstract virtual bool RequireDisplayText(DataColumnInfo column);
    public abstract virtual string GetDisplayText(int listSourceRow, DataColumnInfo info, object value, string columnName);
    public abstract virtual void BeforeSorting();
    public abstract virtual void AfterSorting();
    public abstract virtual void BeforeGrouping();
    public abstract virtual void AfterGrouping();
    public abstract virtual String[] GetFindByPropertyNames();
    public abstract virtual Nullable`1<bool> IsEqualGroupValues(int listSourceRow1, int listSourceRow2, object value1, object value2, DataColumnInfo sortColumn);
    public abstract virtual Row GetCompareRowsMethodInfo();
    public abstract virtual Cell GetSortCellMethodInfo(DataColumnInfo dataColumnInfo, Type baseExtractorType, ColumnSortOrder order);
    public abstract virtual Cell GetSortGroupCellMethodInfo(DataColumnInfo dataColumnInfo, Type baseExtractorType);
    public abstract virtual void SubstituteSortInfo(SubstituteSortInfoEventArgs args);
}
public interface DevExpress.Data.IDataControllerSort2 {
    public abstract virtual SortClientColumnData[] GetFindByProperties();
    public abstract virtual SortClientColumnData CheckRequireDisplayText(DataColumnInfo column);
}
public interface DevExpress.Data.IDataControllerThreadClient {
    public abstract virtual void OnAsyncBegin();
    public abstract virtual void OnAsyncEnd();
    public abstract virtual void OnRowLoaded(int controllerRowHandle);
    public abstract virtual void OnTotalsReceived();
}
public interface DevExpress.Data.IDataControllerValidationSupport {
    public IBoundControl BoundControl { get; }
    public abstract virtual IBoundControl get_BoundControl();
    public abstract virtual void OnStartNewItemRow();
    public abstract virtual void OnEndNewItemRow();
    public abstract virtual void OnBeginCurrentRowEdit();
    public abstract virtual void OnCurrentRowUpdated(ControllerRowEventArgs e);
    public abstract virtual void OnValidatingCurrentRow(ValidateControllerRowEventArgs e);
    public abstract virtual void OnPostRowException(ControllerRowExceptionEventArgs e);
    public abstract virtual void OnPostCellException(ControllerRowCellExceptionEventArgs e);
    public abstract virtual void OnControllerItemChanged(ListChangedEventArgs e);
}
public interface DevExpress.Data.IDataControllerVisualClient {
    public int VisibleRowCount { get; }
    public int TopRowIndex { get; }
    public int PageRowCount { get; }
    public bool IsInitializing { get; }
    public abstract virtual int get_VisibleRowCount();
    public abstract virtual int get_TopRowIndex();
    public abstract virtual int get_PageRowCount();
    public abstract virtual void UpdateColumns();
    public abstract virtual void UpdateRows(int topRowIndexDelta);
    public abstract virtual void UpdateLayout();
    public abstract virtual void UpdateRow(int controllerRowHandle);
    public abstract virtual void UpdateRowIndexes(int newTopRowIndex);
    public abstract virtual void UpdateTotalSummary();
    public abstract virtual void UpdateScrollBar();
    public abstract virtual void RequestSynchronization();
    public abstract virtual bool get_IsInitializing();
    public abstract virtual void ColumnsRenewed();
    public abstract virtual void RequireSynchronization(IDataSync dataSync);
}
public interface DevExpress.Data.IDataControllerVisualClient2 {
    public bool UseRegularNotifyMessages { get; }
    public abstract virtual Int32[] GetSelectedRows(Boolean& clientSelectionMode);
    public abstract virtual void TotalSummaryCalculated();
    [CompilerGeneratedAttribute]
public abstract virtual void add_VisibleRangeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_VisibleRangeChanged(EventHandler value);
    public abstract virtual void UpdateVisibleRange();
    public abstract virtual bool get_UseRegularNotifyMessages();
    public abstract virtual void Notify(DataControllerChangedItemCollection items);
    public abstract virtual void NotifyDataRefresh();
}
public interface DevExpress.Data.IDataControllerVisualClient3 {
    public abstract virtual bool ResetDataError();
    public abstract virtual bool NotifyDataError(DataControllerErrorEventArgs e);
}
public interface DevExpress.Data.IDataSync {
    public List`1<ListSortInfo> Sort { get; }
    public int GroupCount { get; }
    public bool AllowSyncSortingAndGrouping { get; public set; }
    public bool HasFilter { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_FilterSortGroupInfoChanged(CollectionViewFilterSortGroupInfoChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FilterSortGroupInfoChanged(CollectionViewFilterSortGroupInfoChangedEventHandler value);
    public abstract virtual List`1<ListSortInfo> get_Sort();
    public abstract virtual int get_GroupCount();
    public abstract virtual bool get_AllowSyncSortingAndGrouping();
    public abstract virtual void set_AllowSyncSortingAndGrouping(bool value);
    public abstract virtual bool ResetCache();
    public abstract virtual void Initialize();
    public abstract virtual bool get_HasFilter();
}
public interface DevExpress.Data.IDisplayNameProvider {
    public abstract virtual string GetFieldDisplayName(String[] fieldAccessors);
    public abstract virtual string GetDataSourceDisplayName();
}
public interface DevExpress.Data.IEvalRowStub {
    public Type ResultType { get; }
    public abstract virtual object Evaluate(int forRow);
    public abstract virtual Type get_ResultType();
}
public interface DevExpress.Data.IFederationListAdapter {
}
public interface DevExpress.Data.IFilterRowStub {
    public abstract virtual bool Filter(int row);
}
public interface DevExpress.Data.IFilterStringContainer {
    public string FilterString { get; public set; }
    public abstract virtual string get_FilterString();
    public abstract virtual void set_FilterString(string value);
}
public interface DevExpress.Data.IListAdapter {
    public bool IsFilled { get; }
    public bool ShouldRefill { get; }
    public abstract virtual bool get_IsFilled();
    public abstract virtual bool get_ShouldRefill();
    public abstract virtual void FillList(IServiceProvider servProvider);
}
public interface DevExpress.Data.IListAdapter2 {
    public abstract virtual void FillList(IServiceProvider servProvider, String[] queriesToFill);
    public abstract virtual bool ShouldRefillQuery(string query);
}
public interface DevExpress.Data.IListAdapterAsync {
    public abstract virtual IAsyncResult BeginFillList(IServiceProvider servProvider, CancellationToken token);
    public abstract virtual void EndFillList(IAsyncResult result, CancellationToken token);
    public abstract virtual Task FillAsync(IServiceProvider serviceProvider, CancellationToken token);
}
public interface DevExpress.Data.IListAdapterAsync2 {
    public abstract virtual IAsyncResult BeginFillList(IServiceProvider servProvider, CancellationToken token, String[] queriesToFill);
    public abstract virtual Task FillAsync(IServiceProvider serviceProvider, CancellationToken token, String[] queriesToFill);
}
public interface DevExpress.Data.IListServer {
    public abstract virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> groupSummaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public abstract virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public abstract virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public abstract virtual List`1<object> GetTotalSummary();
    public abstract virtual object GetRowKey(int index);
    public abstract virtual int GetRowIndexByKey(object key);
    public abstract virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public abstract virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public abstract virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public abstract virtual IList GetAllFilteredAndSortedRows();
    public abstract virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public abstract virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public abstract virtual void Refresh();
}
public interface DevExpress.Data.IListServerCaps {
    public bool CanFilter { get; }
    public bool CanGroup { get; }
    public bool CanSort { get; }
    public abstract virtual bool get_CanFilter();
    public abstract virtual bool get_CanGroup();
    public abstract virtual bool get_CanSort();
}
public interface DevExpress.Data.IListWrapper {
    public Type WrappedListType { get; }
    public abstract virtual Type get_WrappedListType();
}
public interface DevExpress.Data.IMultiValueParameter {
    public bool MultiValue { get; public set; }
    public abstract virtual bool get_MultiValue();
    public abstract virtual void set_MultiValue(bool value);
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Data.Internal.AsyncDownloadTrace : object {
    internal static Nullable`1<AsyncDownloadDiagnosticsLevel> diagnosticsLevel;
    internal static AsyncDownloadTraceLevelResolver diagnosticsLevelResolver;
    private static TraceSource traceSource;
    internal static void SetLevel(AsyncDownloadDiagnosticsLevel level, AsyncDownloadTraceLevelResolver resolver);
    internal static IDisposable Enter(AsyncDownloadDiagnosticsLevel level, Action`1<AsyncDownloadTrustedContext> setup);
    internal static IDisposable CreateScope(String[] uriStrings);
    [EditorBrowsableAttribute("1")]
public static void Trusted(Action trustedAction, Action`1<AsyncDownloadTrustedContext> setup);
    [EditorBrowsableAttribute("1")]
public static void Trusted(Action trustedAction, Uri uri);
    internal static void Assert(Uri uri, Nullable`1<AsyncDownloadDiagnosticsLevel> traceLevel);
    private static void AssertCore(Uri uri, AsyncDownloadDiagnosticsLevel actualTraceLevel);
    internal static AsyncDownloadDiagnosticsLevel ResolveTraceLevel(Uri uri);
    private static void Trace(Uri uri, TraceEventType eventType);
}
internal static class DevExpress.Data.Internal.DXUris : object {
    private static HashSet`1<string> uriStrings;
    private static DXUris();
    public static bool IsDXUri(Uri uri);
}
public enum DevExpress.Data.Internal.EnvironmentOperation : Enum {
    public int value__;
    public static EnvironmentOperation ReadEnvironmentVariables;
    public static EnvironmentOperation SetEnvironmentVariables;
    public static EnvironmentOperation ReadCurrentProcessData;
    public static EnvironmentOperation SetCurrentDirectory;
    public static EnvironmentOperation ExitProcess;
    public static EnvironmentOperation GetFolderPath;
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Data.Internal.EnvironmentTrace : object {
    internal static Nullable`1<EnvironmentDiagnosticsLevel> diagnosticsLevel;
    internal static EnvironmentTraceLevelResolver diagnosticsLevelResolver;
    private static string TraceSourceName;
    private static TraceSource traceSource;
    [EditorBrowsableAttribute("1")]
internal static void SetLevel(EnvironmentDiagnosticsLevel level, EnvironmentTraceLevelResolver resolver);
    internal static IDisposable Enter(EnvironmentDiagnosticsLevel level, Action`1<EnvironmentAllowedContext> setup);
    [EditorBrowsableAttribute("1")]
internal static bool ShouldThrowAlways();
    [EditorBrowsableAttribute("1")]
public static void InvokeTrusted(Action trustedAction, Action`1<EnvironmentAllowedContext> setup);
    [EditorBrowsableAttribute("1")]
public static void InvokeTrusted(Action trustedAction, EnvironmentOperation operation);
    [EditorBrowsableAttribute("1")]
public static T InvokeTrusted(Func`1<T> trustedFunc, Action`1<EnvironmentAllowedContext> setup);
    [EditorBrowsableAttribute("1")]
public static T InvokeTrusted(Func`1<T> trustedFunc, EnvironmentOperation operation);
    internal static void Assert(EnvironmentOperation operation);
    internal static void Assert(EnvironmentOperation operation, EnvironmentDiagnosticsLevel actualTraceLevel);
    internal static void Assert(EnvironmentOperation operation, string variableName);
    internal static void Assert(EnvironmentOperation operation, string variableName, EnvironmentDiagnosticsLevel actualTraceLevel);
    internal static void Assert(SpecialFolder folder);
    internal static void Assert(SpecialFolder folder, EnvironmentDiagnosticsLevel actualTraceLevel);
    internal static EnvironmentDiagnosticsLevel ResolveTraceLevel(EnvironmentOperation operation, Nullable`1<SpecialFolder> folder);
    private static void Trace(TraceEventType eventType, EnvironmentOperation operation);
    private static void Trace(TraceEventType eventType, EnvironmentOperation operation, string variableName);
    private static void Trace(TraceEventType eventType, SpecialFolder folder);
}
public static class DevExpress.Data.Internal.SafeSerializationBinder : object {
    private static AssemblyQualifiedTypeNameParser ParseAssemblyName(string assemblyName);
    private static AssemblyQualifiedTypeNameParser ParseAssemblyQualifiedName(string assemblyQualifiedTypeName);
    private static void ParseCore(string name, AssemblyQualifiedTypeNameParser parser);
    internal static IEnumerable`1<KeyValuePair`2<string, string>> EnsureGenericParameters(string assemblyName, string typeName);
    internal static TFormatter Initialize(TFormatter formatter);
    internal static IFormatter CreateFormatter(IFormatter& formatter);
    private static IFormatter CreateBinaryFormatter();
    private static IFormatter CreateDXBinaryFormatter();
    public static void Ensure(string assemblyName, string typeName);
    public static void Ensure(string assemblyName, string typeName, bool knownTypeDescendant);
    private static void EnsureKnownOrNonTrustedType(string assemblyName, string typeName, bool knownTypeDescendant);
    internal static bool EnsureTrustedType(string assemblyName, string typeName);
    public static void RegisterKnownType(Type type);
    public static void RegisterKnownType(string assembly, string type);
    internal static bool EnsureAssemblyQualifiedTypeName(String& assemblyName, String& typeName);
    internal static string EnsureAssemblyShortName(string assemblyFullName);
    internal static string EnsureAssemblyShortName(string assemblyFullName, Dictionary`2<string, string> attributes);
    internal static string EnsureTypeName(string typeName, String& assemblyShortName, String& assemblyFullName, Nullable`1<bool> patchDXVersion);
}
public static class DevExpress.Data.Internal.SafeTypeResolver : object {
    private static ConcurrentDictionary`2<string, Type> trustedTypesCore;
    private static ConcurrentDictionary`2<string, Type> basicTypesCore;
    private static string mscollibAsmName;
    private static ConcurrentDictionary`2<string, Assembly> loadedAssembliesCore;
    private static ConcurrentDictionary`2<string, AssemblyLoaderBase> loadersCore;
    [EditorBrowsableAttribute("1")]
internal static ConcurrentDictionary`2<string, Type> TrustedTypes { get; }
    private static ConcurrentDictionary`2<string, Type> BasicTypes { get; }
    private static ConcurrentDictionary`2<string, Assembly> LoadedAssemblies { get; }
    private static ConcurrentDictionary`2<string, AssemblyLoaderBase> Loaders { get; }
    internal static ConcurrentDictionary`2<string, Type> get_TrustedTypes();
    private static ConcurrentDictionary`2<string, Type> get_BasicTypes();
    private static KeyValuePair`2[] GetBasicTypes();
    private static ConcurrentDictionary`2<string, Type> EnsureBasicTypes();
    public static Type GetPrimitiveOrTrustedType(string typeName, IDictionary`2<string, Type> additionalTrustedTypes, Nullable`1<bool> throwOnError);
    [EditorBrowsableAttribute("2")]
public static Type GetType(string typeName, Nullable`1<bool> throwOnError, Nullable`1<bool> ignoreCase);
    [EditorBrowsableAttribute("2")]
public static Type GetKnownType(Assembly assembly, string typeName, bool throwOnError, Nullable`1<bool> ignoreCase);
    [EditorBrowsableAttribute("2")]
public static Type GetUnknownType(Assembly assembly, string typeName, bool throwOnError, Nullable`1<bool> ignoreCase);
    [EditorBrowsableAttribute("1")]
public static Type GetKnownUserType(string typeName, bool throwOnError);
    [EditorBrowsableAttribute("1")]
internal static Type GetTypeFromAssemblyInternal(Assembly assembly, string typeName, Nullable`1<bool> throwOnError);
    private static void ThrowAssemblyIsNullOrTypeNameIsEmpty(Assembly assembly, bool throwOnError);
    [EditorBrowsableAttribute("1")]
internal static bool EnsurePropertyValueType(string propertyName, Type valueType, Type typeConverterType);
    [EditorBrowsableAttribute("2")]
public static Type GetTypeFromCurrentAppDomain(string assemblyQualifiedTypeName, Nullable`1<bool> throwOnError);
    [EditorBrowsableAttribute("2")]
public static bool Validate(Type type, Nullable`1<bool> throwOnError, Nullable`1<bool> isKnownTypeDescendant);
    [EditorBrowsableAttribute("2")]
public static bool IsTypeAvailable(string qualifiedTypeName, Type& type, Predicate`1<Type> typeFilter, bool tryLoadAssemblyIfNotLoaded);
    [EditorBrowsableAttribute("2")]
public static bool IsTypeAvailable(Assembly assembly, string typeFullName, Type& type, Predicate`1<Type> typeFilter);
    private static Nullable`1<bool> IsTypeAvailable(Assembly assembly, string typeName, Predicate`1<Type> typeFilter, Type& type);
    private static Type TryGetTypeFromLoadedAssemblies(string typeName, bool throwOnError);
    private static bool TryGetBasicOrTrustedType(string typeName, Type& basicOrTrustedType, Assembly context);
    private static bool TryGetPredefinedType(string typeName, IDictionary`2<string, Type> predefinedTypes, Type& predefinedType);
    private static Type GetTypeFromAssembly(Assembly assembly, string typeName, bool throwOnError);
    private static bool TryGetEnumType(Assembly assembly, string enumTypeName, Type& enumType);
    private static Type TryGetPrimitiveOrTrustedTypeOrThrow(string typeName, bool throwOnError);
    private static Type GetBasicOrTrustedType(string assemblyQualifiedTypeName);
    private static Type GetAssemblyTypeCore(Assembly assembly, string typeName, bool throwOnError, bool ignoreCase, Type& resolvedAssemblyType);
    [EditorBrowsableAttribute("1")]
internal static Type GetAssemblyTypeCore(Assembly assembly, string typeName, bool throwOnError, bool ignoreCase);
    private static Type GetTypeCore(string assemblyQualifiedName, string assemblyName, string typeName, bool throwOnError, bool ignoreCase);
    [EditorBrowsableAttribute("1")]
internal static Type GetTypeCore(string typeName, Func`2<AssemblyName, Assembly> assemblyResolver, Func`4<Assembly, string, bool, Type> typeResolver);
    private static string EnsureBasicAssemblyName();
    private static Assembly EnsureBasicAssembly();
    private static bool QueryQualifiedBindToType(string assemblyName, string typeName, bool throwOnError, Type& resolvedType);
    private static bool QueryQualifiedBindToType(Type assemblyType, bool throwOnError, Type& resolvedType);
    private static Type EnsureTypeIsPrimitiveOrEnum(string typeName, Type type, bool isTypeTrusted, bool throwOnError);
    private static bool EnsureTypeIsTrustedOrKnownOrSafe(string assemblyName, string typeName, Nullable`1<bool> throwOnError);
    private static bool EnsureTypeIsNotUnsafe(string assemblyName, string typeName, bool throwOnError);
    [EditorBrowsableAttribute("1")]
internal static string GetQualifiedName(Assembly assembly, string typeFullName);
    [EditorBrowsableAttribute("1")]
internal static string GetQualifiedName(string assemblyName, string typeName);
    [EditorBrowsableAttribute("1")]
internal static string GetAssemblyName(string assemblyShortName, string assemblyFullName);
    [EditorBrowsableAttribute("1")]
internal static string GetAssemblyShortName(Assembly assembly);
    private static bool MatchAssemblyByVersionAndCultureName(Assembly assembly, AssemblyName name);
    private static ConcurrentDictionary`2<string, Assembly> get_LoadedAssemblies();
    private static ConcurrentDictionary`2<string, Assembly> CreateLoadedAssembliesCache();
    private static ConcurrentDictionary`2<string, AssemblyLoaderBase> CreateLoadersCache();
    private static bool IsRegisteredAsLoadedAssembly(string assemblyName, string fullName, string shortName);
    [EditorBrowsableAttribute("1")]
internal static void ResetLoadedAssemblies();
    [EditorBrowsableAttribute("1")]
internal static bool TryGetLoadedAssembly(string assemblyName, Assembly& assembly);
    private static Assembly RegisterLoadedAssembly(Assembly assembly);
    private static bool RegisterLoadedAssembly(Assembly assembly, string assemblyName);
    [EditorBrowsableAttribute("1")]
internal static Assembly LoadByAssemblyName(AssemblyName assemblyName, bool throwOnError);
    [EditorBrowsableAttribute("1")]
internal static Assembly LoadWithPartialName(string partialName);
    [EditorBrowsableAttribute("1")]
internal static Assembly LoadWithPartialNameInternal(string partialName, bool throwOnError);
    [EditorBrowsableAttribute("1")]
public static Assembly GetOrLoadAssembly(AssemblyName assemblyName, bool throwOnError);
    [EditorBrowsableAttribute("1")]
public static Assembly GetOrLoadAssembly(string assemblyShortName, string assemblyFullName, bool throwOnError);
    public static Assembly GetOrLoadAssembly(string assemblyFullName, bool throwOnError);
    [EditorBrowsableAttribute("1")]
public static Assembly GetOrLoadAssemblyFrom(string assemblyPath, bool throwOnError);
    [EditorBrowsableAttribute("1")]
public static Assembly GetOrLoadAssemblyFile(string assemblyPath, bool throwOnError);
    [EditorBrowsableAttribute("1")]
public static Assembly GetOrLoadAssemblyBytes(Byte[] rawBytes, bool throwOnError);
    private static Assembly LoadAssembly(string assemblyFullName, bool throwOnError);
    private static ConcurrentDictionary`2<string, AssemblyLoaderBase> get_Loaders();
    public static IDisposable CreateScope(string assemblyName, string typeName);
    public static IDisposable CreateScope(String[] assemblyNames, String[] typeNames);
    public static IDisposable CreateScope(Type type);
    public static IDisposable CreateScope(HashSet`1<Type> types);
    public static bool IsSerializable(Type type);
}
[EditorBrowsableAttribute("1")]
[SecuritySafeCriticalAttribute]
public static class DevExpress.Data.Internal.XtraSerializationSecurityTrace : object {
    internal static Nullable`1<XtraSerializationSecurityDiagnosticsLevel> diagnosticsLevel;
    internal static XtraSerializationSecurityTraceLevelResolver diagnosticsLevelResolver;
    private static TraceSource traceSource;
    [EditorBrowsableAttribute("1")]
public static XtraSerializationSecurityDiagnosticsLevel UnsafeType(string assembly, string type);
    [EditorBrowsableAttribute("1")]
public static XtraSerializationSecurityDiagnosticsLevel KnownTypeDescendant(string assembly, string type);
    [EditorBrowsableAttribute("1")]
public static XtraSerializationSecurityDiagnosticsLevel NonTrustedType(string assembly, string type);
    [EditorBrowsableAttribute("1")]
public static XtraSerializationSecurityDiagnosticsLevel TrustedType(string assembly, string type);
    [EditorBrowsableAttribute("1")]
public static XtraSerializationSecurityDiagnosticsLevel TypeOrAssemblyNameMalformedOrCorrupted(string assembly, string type);
    internal static void SetLevel(XtraSerializationSecurityDiagnosticsLevel level, XtraSerializationSecurityTraceLevelResolver resolver);
    internal static IDisposable CreateScope(String[] assemblies, String[] types);
    internal static IDisposable CreateScope(String[] assemblyQualifiedTypeNames);
    internal static IDisposable Enter(XtraSerializationSecurityDiagnosticsLevel level, XtraSerializationSecurityTraceLevelResolver resolver);
    internal static IDisposable Enter(XtraSerializationSecurityDiagnosticsLevel level, Action`1<XtraSerializationTrustedContext> setup);
    internal static XtraSerializationSecurityDiagnosticsLevel RestrictIfNotInTrustedContext();
    [EditorBrowsableAttribute("1")]
public static void Trusted(Action trustedAction, XtraSerializationSecurityTraceLevelResolver trustedResolver);
    [EditorBrowsableAttribute("1")]
public static void Trusted(Action trustedAction, Action`1<XtraSerializationTrustedContext> setup);
    [EditorBrowsableAttribute("1")]
public static T Trusted(Func`1<T> trustedFunction, XtraSerializationSecurityTraceLevelResolver trustedResolver);
    private static XtraSerializationSecurityDiagnosticsLevel Assert(ApiLevel apiLevel, string assembly, string type);
    internal static XtraSerializationSecurityDiagnosticsLevel ResolveTraceLevel(string assembly, string type);
    private static TraceSource EnsureTraceSource();
    private static TraceSource CreateTraceSource();
    private static void Trace(ApiLevel level, string assembly, string type, TraceEventType eventType);
    internal static bool ShouldThrow(XtraSerializationSecurityException exception);
}
public class DevExpress.Data.InternalExceptionEventArgs : EventArgs {
    private Exception exception;
    public Exception Exception { get; }
    public InternalExceptionEventArgs(Exception e);
    public Exception get_Exception();
}
public class DevExpress.Data.InternalExceptionEventHandler : MulticastDelegate {
    public InternalExceptionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InternalExceptionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InternalExceptionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface DevExpress.Data.INullableParameter {
    public bool AllowNull { get; public set; }
    public abstract virtual bool get_AllowNull();
    public abstract virtual void set_AllowNull(bool value);
}
internal static class DevExpress.Data.IO.DecimalBinaryWriterHelper : object {
    [DecimalConstantAttribute("0", "0", "0", "2147483647", "4294967295")]
public static decimal MaxInt64Value;
    [DecimalConstantAttribute("0", "128", "0", "2147483648", "0")]
public static decimal MinInt64Value;
    private static DecimalBinaryWriterHelper();
    public static bool CanConvertToInt64(decimal value);
}
public interface DevExpress.Data.IO.ITypedReader {
    public abstract virtual T ReadObject();
    public abstract virtual object ReadTypedObject();
}
public interface DevExpress.Data.IO.ITypedWriter {
    public abstract virtual void WriteObject(object value);
    public abstract virtual void WriteTypedObject(object value);
}
internal class DevExpress.Data.IO.SmartReadWriteConverter : object {
    public static Type GetTypeByByte(byte value);
    public static byte GetByteByType(Type type);
}
internal class DevExpress.Data.IO.StreamNumericType : object {
    public static byte Decimal;
    public static byte Int64;
    public static byte Int32;
    public static byte Int16;
    public static byte Byte;
    public static byte Float;
}
internal class DevExpress.Data.IO.StreamValueType : object {
    public static byte Null;
    public static byte DBNull;
    public static byte NotNull;
}
internal enum DevExpress.Data.IO.StringType : Enum {
    public int value__;
    public static StringType Null;
    public static StringType Empty;
    public static StringType NonEmpty;
}
public class DevExpress.Data.IO.TypedBinaryReader : BinaryReader {
    public TypedBinaryReader(Stream input);
    public TypedBinaryReader(Stream input, Encoding encoding);
    public TypedBinaryReader(Stream input, Encoding encoding, bool leaveOpen);
    public static TypedBinaryReader CreateReader(Stream input, Encoding encoding, ICustomObjectConverter customConverter, bool leaveOpen);
    public static TypedBinaryReader CreateReader(Stream input, Encoding encoding, ICustomObjectConverter customConverter);
    public static TypedBinaryReader CreateReader(Stream input, ICustomObjectConverter customConverter);
    public sealed virtual object ReadTypedObject();
    public object ReadTypedObject(Func`2<string, Type> typeResolver);
    public sealed virtual T ReadObject();
    public virtual object ReadObject(Type type);
    private object ReadEnum(Type type, byte emptyValue);
    protected virtual object ReadSerializableObject(Type type);
    public Type ReadType(Func`2<string, Type> typeResolver);
    public Type ReadType();
    [EditorBrowsableAttribute("1")]
public Type ReadTypeByAssemblyQualifiedName(Func`2<string, Type> typeResolver);
    [EditorBrowsableAttribute("1")]
public Type ReadTypeByAssemblyQualifiedName();
    protected virtual Type ResolveType(string typeAssemblyQualifiedName);
    private decimal ReadDecimalOptimized(byte decimalType);
    private long ReadInt64Optimized(byte intType);
    private int ReadInt32Optimized(byte intType);
    private short ReadInt16Optimized(byte intType);
    private DateTime ReadDateTime();
    private DateTimeOffset ReadDateTimeOffset();
    private DateOnly ReadDateOnly();
    private TimeOnly ReadTimeOnly();
    private TimeSpan ReadTimeSpan();
    private Guid ReadGuid();
    public string ReadNullableString();
}
internal class DevExpress.Data.IO.TypedBinaryReaderEx2 : TypedBinaryReader {
    private ICustomObjectConverter customConverter;
    public TypedBinaryReaderEx2(Stream input, Encoding encoding, ICustomObjectConverter customConverter, bool leaveOpen);
    public TypedBinaryReaderEx2(Stream input, Encoding encoding, ICustomObjectConverter customConverter);
    public TypedBinaryReaderEx2(Stream input, ICustomObjectConverter customConverter);
    protected virtual Type ResolveType(string typeAssemblyQualifiedName);
    public virtual object ReadObject(Type type);
}
public class DevExpress.Data.IO.TypedBinaryWriter : BinaryWriter {
    public TypedBinaryWriter(Stream input);
    public TypedBinaryWriter(Stream input, Encoding encoding);
    public TypedBinaryWriter(Stream input, Encoding encoding, bool leaveOpen);
    public static TypedBinaryWriter CreateWriter(Stream input, Encoding encoding, ICustomObjectConverter customConverter, bool leaveOpen);
    public static TypedBinaryWriter CreateWriter(Stream input, Encoding encoding, ICustomObjectConverter customConverter);
    public static TypedBinaryWriter CreateWriter(Stream input, ICustomObjectConverter customConverter);
    public sealed virtual void WriteTypedObject(object value);
    public virtual void WriteObject(object value);
    public void WriteNullableString(string str);
    private void WriteEnum(Type type, object value);
    internal static bool IsRequireSerializableWriter(Type type);
    protected virtual void WriteSerializableObject(Type type, object value);
    public void WriteType(Type type);
    public void WriteType(object value);
    private bool IsSmartWrittingType(Type type);
    private void WriteInt16(short value);
    private void WriteInt32(int value);
    private void WriteInt64(long value);
    private void WriteDecimal(decimal value);
    private void WriteFloat(float value);
    private void WriteGuid(Guid guid);
    private void WriteDateTime(DateTime dateTime);
    private void WriteDateTimeOffset(DateTimeOffset dateTimeOffset);
    private void WriteDateOnly(DateOnly dateOnly);
    private void WriteTimeOnly(TimeOnly timeOnly);
    private void WriteTimeSpan(TimeSpan timeSpan);
}
internal class DevExpress.Data.IO.TypedBinaryWriterEx2 : TypedBinaryWriter {
    private ICustomObjectConverter customConverter;
    public TypedBinaryWriterEx2(Stream input, Encoding encoding, ICustomObjectConverter customConverter, bool leaveOpen);
    public TypedBinaryWriterEx2(Stream input, Encoding encoding, ICustomObjectConverter customConverter);
    public TypedBinaryWriterEx2(Stream input, ICustomObjectConverter customConverter);
    public virtual void WriteObject(object value);
}
public interface DevExpress.Data.IParameter {
    public object Value { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
public interface DevExpress.Data.IParametersRenamer {
    public abstract virtual void RenameParameters(IDictionary`2<string, string> renamingMap);
    public abstract virtual void RenameParameter(string oldName, string newName);
}
public interface DevExpress.Data.IParameterSupplierBase {
    public abstract virtual IEnumerable`1<IParameter> GetIParameters();
}
public interface DevExpress.Data.IRangeBoundaryParameter {
}
public interface DevExpress.Data.IRangeRootParameter {
    public bool IsRange { get; }
    public IRangeBoundaryParameter StartParameter { get; }
    public IRangeBoundaryParameter EndParameter { get; }
    public abstract virtual bool get_IsRange();
    public abstract virtual IRangeBoundaryParameter get_StartParameter();
    public abstract virtual IRangeBoundaryParameter get_EndParameter();
}
public interface DevExpress.Data.IRealTimeListChangeProcessor {
    public List`1<RealTimeProxyForObject> Cache { get; public set; }
    public ListChangedEventHandler ListChanged { get; }
    public RealTimePropertyDescriptorCollection PropertyDescriptorsCollection { get; public set; }
    public bool IsCatchUp { get; public set; }
    public abstract virtual List`1<RealTimeProxyForObject> get_Cache();
    public abstract virtual void set_Cache(List`1<RealTimeProxyForObject> value);
    public abstract virtual ListChangedEventHandler get_ListChanged();
    public abstract virtual RealTimePropertyDescriptorCollection get_PropertyDescriptorsCollection();
    public abstract virtual void set_PropertyDescriptorsCollection(RealTimePropertyDescriptorCollection value);
    public abstract virtual void NotifyLastProcessedCommandCreationTime(DateTime sent);
    public abstract virtual bool get_IsCatchUp();
    public abstract virtual void set_IsCatchUp(bool value);
}
public interface DevExpress.Data.IRelationList {
    public int RelationCount { get; }
    public abstract virtual string GetRelationName(int index, int relationIndex);
    public abstract virtual int get_RelationCount();
    public abstract virtual bool IsMasterRowEmpty(int index, int relationIndex);
    public abstract virtual IList GetDetailList(int index, int relationIndex);
}
public interface DevExpress.Data.IRelationListEx {
    public abstract virtual int GetRelationCount(int index);
    public abstract virtual string GetRelationDisplayName(int index, int relationIndex);
}
public interface DevExpress.Data.IReportMultiValueParameter {
    public bool SelectAllValues { get; public set; }
    public abstract virtual bool get_SelectAllValues();
    public abstract virtual void set_SelectAllValues(bool value);
}
public interface DevExpress.Data.IServerModeSourceFilterController {
    public bool AllowInvalidFilterCriteria { get; }
    public abstract virtual bool get_AllowInvalidFilterCriteria();
}
public interface DevExpress.Data.ITreeSelectableItem {
    public ITreeSelectableItem Parent { get; }
    public List`1<ITreeSelectableItem> Children { get; }
    public bool AllowSelect { get; }
    public string Text { get; }
    public abstract virtual ITreeSelectableItem get_Parent();
    public abstract virtual List`1<ITreeSelectableItem> get_Children();
    public abstract virtual bool get_AllowSelect();
    public abstract virtual string get_Text();
}
[EditorBrowsableAttribute("1")]
public interface DevExpress.Data.IUnboundColumnTypeProvider {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public UnboundColumnType UnboundType { get; }
    public abstract virtual UnboundColumnType get_UnboundType();
}
public interface DevExpress.Data.IVirtualListServer {
    public abstract virtual void ChangeConfiguration(VirtualServerModeConfigurationInfo configuration);
}
public interface DevExpress.Data.IVirtualListServerWithTotalSummary {
    public bool TotalSummarySupported { get; }
    public abstract virtual bool get_TotalSummarySupported();
    public abstract virtual bool CanCalculateTotalSummary(ServerModeSummaryDescriptor totalSummary);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TotalSummaryReady(EventHandler`1<VirtualServerModeTotalSummaryReadyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TotalSummaryReady(EventHandler`1<VirtualServerModeTotalSummaryReadyEventArgs> value);
}
public class DevExpress.Data.Linq.CriteriaToEFExpressionConverter : object {
    public static Type EntityFunctionsType;
    public static Type SqlFunctionsType;
    private Type queryProviderType;
    private Lazy`1<object> contextRef;
    private Lazy`1<Version> efVersionRef;
    private string dbProviderName;
    internal static ConcurrentDictionary`2<Type, EntityQueryTypeInfo> queryTypeInfoDictionary;
    public CriteriaToEFExpressionConverter(Type queryProviderType);
    public CriteriaToEFExpressionConverter(IQueryable q);
    private static CriteriaToEFExpressionConverter();
    private bool IsInMemoryDatabase();
    private bool IsEFCoreVersionSupportsTimeOnlyFromDateTime();
    private sealed virtual override bool DevExpress.Data.Entity.ICriteriaToEFExpressionConverter.IsInMemory();
    private sealed virtual override bool DevExpress.Data.Entity.ICriteriaToEFExpressionConverter.IsTimeOnlyRoundingSupported();
    public sealed virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op);
    public sealed virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op, CriteriaToExpressionConverterEventsHelper eventsHelper);
    public static void RegisterCustomQueryProviderType(Type customProviderType, Type originalEFProviderType);
    internal EntityQueryTypeInfo GetQueryTypeInfo();
    internal static EntityQueryTypeInfo GetQueryTypeInfo(Type queryProviderType);
}
public class DevExpress.Data.Linq.CriteriaToExpressionConverter : object {
    public sealed virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op);
    public sealed virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op, CriteriaToExpressionConverterEventsHelper eventsHelper);
    private CriteriaToExpressionConverterInternal GetConverter(ParameterExpression thisExpression);
}
public class DevExpress.Data.Linq.CriteriaToExpressionConverterForObjects : object {
    public sealed virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op);
    public sealed virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op, CriteriaToExpressionConverterEventsHelper eventsHelper);
    private CriteriaToExpressionConverterForObjectsInternal GetConverter(ParameterExpression thisExpression);
}
public class DevExpress.Data.Linq.CriteriaToODataExpressionConverter : object {
    public sealed virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op);
    public sealed virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op, CriteriaToExpressionConverterEventsHelper eventsHelper);
}
[DXToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.EntityInstantFeedbackSource.bmp")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to Entity Framework model classes in Instant Feedback Mode.")]
[DefaultEventAttribute("GetQueryable")]
[DesignerAttribute("DevExpress.Design.InstantFeedbackSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class DevExpress.Data.Linq.EntityInstantFeedbackSource : Component {
    private Type _ElementType;
    private string _KeyExpression;
    private string _DefaultSorting;
    private bool _AreSourceRowsThreadSafe;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetQueryableEventArgs> GetQueryable;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetQueryableEventArgs> DismissQueryable;
    private AsyncListServer2DatacontrollerProxy _AsyncListServer;
    private AsyncListDesignTimeWrapper _DTWrapper;
    private IList _List;
    private Nullable`1<bool> _isDesignMode;
    private bool IsDisposed;
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Data.Linq.Helpers.LinqServerModeSourceObjectTypeConverter")]
[CategoryAttribute("Design")]
[DescriptionAttribute("Specifies the type of objects that will be retrieved from a data source, at design time.")]
public Type DesignTimeElementType { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the name of the key property.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceKeyExpressionEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string KeyExpression { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default, when the sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies whether elements retrieved by the EntityInstantFeedbackSource‘s queryable source are thread-safe.")]
public bool AreSourceRowsThreadSafe { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public EntityInstantFeedbackSource(EventHandler`1<GetQueryableEventArgs> getQueryable);
    public EntityInstantFeedbackSource(EventHandler`1<GetQueryableEventArgs> getQueryable, EventHandler`1<GetQueryableEventArgs> freeQueryable);
    public EntityInstantFeedbackSource(Action`1<GetQueryableEventArgs> getQueryable);
    public EntityInstantFeedbackSource(Action`1<GetQueryableEventArgs> getQueryable, Action`1<GetQueryableEventArgs> freeQueryable);
    private static EventHandler`1<T> ToEventHandler(Action`1<T> action);
    public Type get_DesignTimeElementType();
    public void set_DesignTimeElementType(Type value);
    private void FillKeyExpression();
    public string get_KeyExpression();
    public void set_KeyExpression(string value);
    public string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    public bool get_AreSourceRowsThreadSafe();
    public void set_AreSourceRowsThreadSafe(bool value);
    private void TestCanChangeProperties();
    private void ForceCatchUp();
    [CompilerGeneratedAttribute]
public void add_GetQueryable(EventHandler`1<GetQueryableEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GetQueryable(EventHandler`1<GetQueryableEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DismissQueryable(EventHandler`1<GetQueryableEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DismissQueryable(EventHandler`1<GetQueryableEventArgs> value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private AsyncListDesignTimeWrapper CreateDesignTimeWrapper();
    private AsyncListServer2DatacontrollerProxy CreateRunTimeProxy();
    private AsyncListServerCore CreateAsyncListServerCore();
    private void listServerGet(object sender, ListServerGetOrFreeEventArgs e);
    private void listServerFree(object sender, ListServerGetOrFreeEventArgs e);
    private void getTypeInfo(object sender, GetTypeInfoEventArgs e);
    protected virtual EntityServerModeSource CreateEntityServerModeSource();
    protected virtual PropertyDescriptorCollection GetListItemProperties(object list, PropertyDescriptor[] listAccessors);
    private void getPropertyDescriptors(object sender, GetPropertyDescriptorsEventArgs e);
    private void getWorkerRowInfo(object sender, GetWorkerThreadRowInfoEventArgs e);
    private void getUIRow(object sender, GetUIThreadRowEventArgs e);
    protected virtual void Dispose(bool disposing);
    public void Refresh();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual EntityInstantFeedbackSource DXCloneCreate();
}
public class DevExpress.Data.Linq.EntityServerModeCache : LinqServerModeCache {
    private Func`2<IQueryable, ICriteriaToExpressionConverter> criteriaToExpressionConverterFactory;
    private ICriteriaToExpressionConverter converter;
    protected ICriteriaToExpressionConverter Converter { get; }
    public EntityServerModeCache(IQueryable q, CriteriaOperator[] keysCriteria, ServerModeOrderDescriptor[][] sortInfo, int groupCount, ServerModeSummaryDescriptor[] summary, ServerModeSummaryDescriptor[] totalSummary, Func`2<IQueryable, ICriteriaToExpressionConverter> criteriaToExpressionConverterFactory);
    [DebuggerStepThroughAttribute]
protected virtual ICriteriaToExpressionConverter get_Converter();
    protected virtual ICriteriaToExpressionConverter CreateCriteriaToExpressionConverter();
}
public class DevExpress.Data.Linq.EntityServerModeCore : LinqServerModeCore {
    private Func`2<IQueryable, ICriteriaToExpressionConverter> criteriaToExpressionConverterFactory;
    private ICriteriaToExpressionConverter converter;
    protected ICriteriaToExpressionConverter Converter { get; }
    public EntityServerModeCore(IQueryable queryable, CriteriaOperator[] keys, Func`2<IQueryable, ICriteriaToExpressionConverter> criteriaToExpressionConverterFactory);
    protected virtual ServerModeCore DXCloneCreate();
    protected virtual ServerModeCache CreateCacheCore();
    [DebuggerStepThroughAttribute]
protected virtual ICriteriaToExpressionConverter get_Converter();
    protected virtual ICriteriaToExpressionConverter CreateCriteriaToExpressionConverter();
    protected virtual Object[] GetUniqueValues(CriteriaOperator expression, int maxCount, CriteriaOperator filter);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Linq.EntityServerModeFrontEnd : object {
    public ILinqServerModeFrontEndOwner Owner;
    private IListServer _Wrapper;
    private Type _Type;
    private string _KeyExpression;
    private IQueryable _DataSource;
    private bool _IsReadyForTakeOff;
    private string _DefaultSorting;
    private Func`2<IQueryable, ICriteriaToExpressionConverter> _CriteriaToExpressionConverterFactory;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    private CriteriaOperator _Successful_FilterCriteria;
    private ICollection`1<ServerModeOrderDescriptor[]> _Successful_sortInfo;
    private int _Successful_groupCount;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_summaryInfo;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_totalSummaryInfo;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler _ListChanged;
    public bool RefreshSupported { get; }
    protected IListServer Wrapper { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public EntityServerModeFrontEnd(ILinqServerModeFrontEndOwner owner, Func`2<IQueryable, ICriteriaToExpressionConverter> criteriaToExpressionConverterFactory);
    public void CatchUp();
    public sealed virtual void Refresh();
    public virtual bool get_RefreshSupported();
    [CompilerGeneratedAttribute]
public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual EntityServerModeFrontEnd DXClone();
    protected virtual EntityServerModeFrontEnd CreateDXClone();
    protected IListServer get_Wrapper();
    protected void KillWrapper();
    private void _Wrapper_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    private void _Wrapper_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private IListServer CreateWrapper();
    protected virtual IListServer CreateRuntimeWrapper();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    [CompilerGeneratedAttribute]
private void add__ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ListChanged(ListChangedEventHandler value);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
}
[DXToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.EntityServerModeSource.bmp")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to Entity Framework model classes in server mode.")]
[DesignerAttribute("DevExpress.Design.ServerModeSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class DevExpress.Data.Linq.EntityServerModeSource : Component {
    private EventHandler`1<ErrorEventArgs> ErrorOccurred;
    private EntityServerModeFrontEnd _List;
    private Type _ElementType;
    private string _KeyExpression;
    private string _DefaultSorting;
    private IQueryable _QueryableSource;
    private int _initCount;
    [CompilerGeneratedAttribute]
private LinqServerModeExceptionThrownEventHandler ExceptionThrown;
    [CompilerGeneratedAttribute]
private LinqServerModeInconsistencyDetectedEventHandler InconsistencyDetected;
    private Nullable`1<bool> _IsDesignMode;
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private EntityServerModeFrontEnd List { get; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the type of objects retrieved from a data source.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Data.Linq.Helpers.LinqServerModeSourceObjectTypeConverter")]
public Type ElementType { get; public set; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("Gets or sets the key expression.")]
[DefaultValueAttribute("")]
[EditorAttribute("DevExpress.Design.ServerModeSourceKeyExpressionEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string KeyExpression { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default, when the sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.ServerModeSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("Gets or sets the queryable data source.")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public IQueryable QueryableSource { get; public set; }
    private Type DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.ElementType { get; }
    private IQueryable DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.QueryableSource { get; }
    private string DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.KeyExpression { get; }
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.add_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.remove_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual EntityServerModeSource DXCloneCreate();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private EntityServerModeFrontEnd get_List();
    public void Reload();
    protected virtual EntityServerModeFrontEnd CreateList();
    private void ForceCatchUp();
    public Type get_ElementType();
    public void set_ElementType(Type value);
    private void FillKeyExpression();
    public string get_KeyExpression();
    public void set_KeyExpression(string value);
    public sealed virtual string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    public IQueryable get_QueryableSource();
    public void set_QueryableSource(IQueryable value);
    private bool IsInitialized();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private void _List_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private void _List_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    private void DoPostponedReload(object state);
    private void FailUnderAspOrAnotherNonPostEnvironment();
    protected virtual bool IsGoodContext(SynchronizationContext context);
    [CompilerGeneratedAttribute]
public void add_ExceptionThrown(LinqServerModeExceptionThrownEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionThrown(LinqServerModeExceptionThrownEventHandler value);
    [CompilerGeneratedAttribute]
public void add_InconsistencyDetected(LinqServerModeInconsistencyDetectedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_InconsistencyDetected(LinqServerModeInconsistencyDetectedEventHandler value);
    protected virtual void OnExceptionThrown(LinqServerModeExceptionThrownEventArgs e);
    protected virtual void OnInconsistencyDetected(LinqServerModeInconsistencyDetectedEventArgs e);
    private sealed virtual override Type DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.get_ElementType();
    private sealed virtual override IQueryable DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.get_QueryableSource();
    private sealed virtual override bool DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.IsReadyForTakeOff();
    private sealed virtual override string DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.get_KeyExpression();
}
public class DevExpress.Data.Linq.GetQueryableEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IQueryable <QueryableSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreSourceRowsThreadSafe>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public IQueryable QueryableSource { get; public set; }
    public string KeyExpression { get; public set; }
    public bool AreSourceRowsThreadSafe { get; public set; }
    public object Tag { get; public set; }
    [CompilerGeneratedAttribute]
public IQueryable get_QueryableSource();
    [CompilerGeneratedAttribute]
public void set_QueryableSource(IQueryable value);
    [CompilerGeneratedAttribute]
public string get_KeyExpression();
    [CompilerGeneratedAttribute]
public void set_KeyExpression(string value);
    [CompilerGeneratedAttribute]
public bool get_AreSourceRowsThreadSafe();
    [CompilerGeneratedAttribute]
public void set_AreSourceRowsThreadSafe(bool value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
}
public class DevExpress.Data.Linq.Helpers.AsyncListDesignTimeWrapper : object {
    private Type _ElementType;
    private bool _AreThreadSafe;
    private PropertyDescriptorCollection _Descriptors;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    public Type ElementType { get; public set; }
    public bool AreThreadSafe { get; public set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public Type get_ElementType();
    public void set_ElementType(Type value);
    public bool get_AreThreadSafe();
    public void set_AreThreadSafe(bool value);
    private PropertyDescriptorCollection GetDescriptors();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Data.Linq.Helpers.CMax`252 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T2 P2 { get; public set; }
    public T3 P3 { get; public set; }
    public T4 P4 { get; public set; }
    public T5 P5 { get; public set; }
    public T6 P6 { get; public set; }
    public T7 P7 { get; public set; }
    public T8 P8 { get; public set; }
    public T9 P9 { get; public set; }
    public T10 P10 { get; public set; }
    public T11 P11 { get; public set; }
    public T12 P12 { get; public set; }
    public T13 P13 { get; public set; }
    public T14 P14 { get; public set; }
    public T15 P15 { get; public set; }
    public T16 P16 { get; public set; }
    public T17 P17 { get; public set; }
    public T18 P18 { get; public set; }
    public T19 P19 { get; public set; }
    public T20 P20 { get; public set; }
    public T21 P21 { get; public set; }
    public T22 P22 { get; public set; }
    public T23 P23 { get; public set; }
    public T24 P24 { get; public set; }
    public T25 P25 { get; public set; }
    public T26 P26 { get; public set; }
    public T27 P27 { get; public set; }
    public T28 P28 { get; public set; }
    public T29 P29 { get; public set; }
    public T30 P30 { get; public set; }
    public T31 P31 { get; public set; }
    public T32 P32 { get; public set; }
    public T33 P33 { get; public set; }
    public T34 P34 { get; public set; }
    public T35 P35 { get; public set; }
    public T36 P36 { get; public set; }
    public T37 P37 { get; public set; }
    public T38 P38 { get; public set; }
    public T39 P39 { get; public set; }
    public T40 P40 { get; public set; }
    public T41 P41 { get; public set; }
    public T42 P42 { get; public set; }
    public T43 P43 { get; public set; }
    public T44 P44 { get; public set; }
    public T45 P45 { get; public set; }
    public T46 P46 { get; public set; }
    public T47 P47 { get; public set; }
    public T48 P48 { get; public set; }
    public T49 P49 { get; public set; }
    public T50 P50 { get; public set; }
    public T51 P51 { get; public set; }
    public T52 P52 { get; public set; }
    public T53 P53 { get; public set; }
    public T54 P54 { get; public set; }
    public T55 P55 { get; public set; }
    public T56 P56 { get; public set; }
    public T57 P57 { get; public set; }
    public T58 P58 { get; public set; }
    public T59 P59 { get; public set; }
    public T60 P60 { get; public set; }
    public T61 P61 { get; public set; }
    public T62 P62 { get; public set; }
    public T63 P63 { get; public set; }
    public T64 P64 { get; public set; }
    public T65 P65 { get; public set; }
    public T66 P66 { get; public set; }
    public T67 P67 { get; public set; }
    public T68 P68 { get; public set; }
    public T69 P69 { get; public set; }
    public T70 P70 { get; public set; }
    public T71 P71 { get; public set; }
    public T72 P72 { get; public set; }
    public T73 P73 { get; public set; }
    public T74 P74 { get; public set; }
    public T75 P75 { get; public set; }
    public T76 P76 { get; public set; }
    public T77 P77 { get; public set; }
    public T78 P78 { get; public set; }
    public T79 P79 { get; public set; }
    public T80 P80 { get; public set; }
    public T81 P81 { get; public set; }
    public T82 P82 { get; public set; }
    public T83 P83 { get; public set; }
    public T84 P84 { get; public set; }
    public T85 P85 { get; public set; }
    public T86 P86 { get; public set; }
    public T87 P87 { get; public set; }
    public T88 P88 { get; public set; }
    public T89 P89 { get; public set; }
    public T90 P90 { get; public set; }
    public T91 P91 { get; public set; }
    public T92 P92 { get; public set; }
    public T93 P93 { get; public set; }
    public T94 P94 { get; public set; }
    public T95 P95 { get; public set; }
    public T96 P96 { get; public set; }
    public T97 P97 { get; public set; }
    public T98 P98 { get; public set; }
    public T99 P99 { get; public set; }
    public T100 P100 { get; public set; }
    public T101 P101 { get; public set; }
    public T102 P102 { get; public set; }
    public T103 P103 { get; public set; }
    public T104 P104 { get; public set; }
    public T105 P105 { get; public set; }
    public T106 P106 { get; public set; }
    public T107 P107 { get; public set; }
    public T108 P108 { get; public set; }
    public T109 P109 { get; public set; }
    public T110 P110 { get; public set; }
    public T111 P111 { get; public set; }
    public T112 P112 { get; public set; }
    public T113 P113 { get; public set; }
    public T114 P114 { get; public set; }
    public T115 P115 { get; public set; }
    public T116 P116 { get; public set; }
    public T117 P117 { get; public set; }
    public T118 P118 { get; public set; }
    public T119 P119 { get; public set; }
    public T120 P120 { get; public set; }
    public T121 P121 { get; public set; }
    public T122 P122 { get; public set; }
    public T123 P123 { get; public set; }
    public T124 P124 { get; public set; }
    public T125 P125 { get; public set; }
    public T126 P126 { get; public set; }
    public T127 P127 { get; public set; }
    public T128 P128 { get; public set; }
    public T129 P129 { get; public set; }
    public T130 P130 { get; public set; }
    public T131 P131 { get; public set; }
    public T132 P132 { get; public set; }
    public T133 P133 { get; public set; }
    public T134 P134 { get; public set; }
    public T135 P135 { get; public set; }
    public T136 P136 { get; public set; }
    public T137 P137 { get; public set; }
    public T138 P138 { get; public set; }
    public T139 P139 { get; public set; }
    public T140 P140 { get; public set; }
    public T141 P141 { get; public set; }
    public T142 P142 { get; public set; }
    public T143 P143 { get; public set; }
    public T144 P144 { get; public set; }
    public T145 P145 { get; public set; }
    public T146 P146 { get; public set; }
    public T147 P147 { get; public set; }
    public T148 P148 { get; public set; }
    public T149 P149 { get; public set; }
    public T150 P150 { get; public set; }
    public T151 P151 { get; public set; }
    public T152 P152 { get; public set; }
    public T153 P153 { get; public set; }
    public T154 P154 { get; public set; }
    public T155 P155 { get; public set; }
    public T156 P156 { get; public set; }
    public T157 P157 { get; public set; }
    public T158 P158 { get; public set; }
    public T159 P159 { get; public set; }
    public T160 P160 { get; public set; }
    public T161 P161 { get; public set; }
    public T162 P162 { get; public set; }
    public T163 P163 { get; public set; }
    public T164 P164 { get; public set; }
    public T165 P165 { get; public set; }
    public T166 P166 { get; public set; }
    public T167 P167 { get; public set; }
    public T168 P168 { get; public set; }
    public T169 P169 { get; public set; }
    public T170 P170 { get; public set; }
    public T171 P171 { get; public set; }
    public T172 P172 { get; public set; }
    public T173 P173 { get; public set; }
    public T174 P174 { get; public set; }
    public T175 P175 { get; public set; }
    public T176 P176 { get; public set; }
    public T177 P177 { get; public set; }
    public T178 P178 { get; public set; }
    public T179 P179 { get; public set; }
    public T180 P180 { get; public set; }
    public T181 P181 { get; public set; }
    public T182 P182 { get; public set; }
    public T183 P183 { get; public set; }
    public T184 P184 { get; public set; }
    public T185 P185 { get; public set; }
    public T186 P186 { get; public set; }
    public T187 P187 { get; public set; }
    public T188 P188 { get; public set; }
    public T189 P189 { get; public set; }
    public T190 P190 { get; public set; }
    public T191 P191 { get; public set; }
    public T192 P192 { get; public set; }
    public T193 P193 { get; public set; }
    public T194 P194 { get; public set; }
    public T195 P195 { get; public set; }
    public T196 P196 { get; public set; }
    public T197 P197 { get; public set; }
    public T198 P198 { get; public set; }
    public T199 P199 { get; public set; }
    public T200 P200 { get; public set; }
    public T201 P201 { get; public set; }
    public T202 P202 { get; public set; }
    public T203 P203 { get; public set; }
    public T204 P204 { get; public set; }
    public T205 P205 { get; public set; }
    public T206 P206 { get; public set; }
    public T207 P207 { get; public set; }
    public T208 P208 { get; public set; }
    public T209 P209 { get; public set; }
    public T210 P210 { get; public set; }
    public T211 P211 { get; public set; }
    public T212 P212 { get; public set; }
    public T213 P213 { get; public set; }
    public T214 P214 { get; public set; }
    public T215 P215 { get; public set; }
    public T216 P216 { get; public set; }
    public T217 P217 { get; public set; }
    public T218 P218 { get; public set; }
    public T219 P219 { get; public set; }
    public T220 P220 { get; public set; }
    public T221 P221 { get; public set; }
    public T222 P222 { get; public set; }
    public T223 P223 { get; public set; }
    public T224 P224 { get; public set; }
    public T225 P225 { get; public set; }
    public T226 P226 { get; public set; }
    public T227 P227 { get; public set; }
    public T228 P228 { get; public set; }
    public T229 P229 { get; public set; }
    public T230 P230 { get; public set; }
    public T231 P231 { get; public set; }
    public T232 P232 { get; public set; }
    public T233 P233 { get; public set; }
    public T234 P234 { get; public set; }
    public T235 P235 { get; public set; }
    public T236 P236 { get; public set; }
    public T237 P237 { get; public set; }
    public T238 P238 { get; public set; }
    public T239 P239 { get; public set; }
    public T240 P240 { get; public set; }
    public T241 P241 { get; public set; }
    public T242 P242 { get; public set; }
    public T243 P243 { get; public set; }
    public T244 P244 { get; public set; }
    public T245 P245 { get; public set; }
    public T246 P246 { get; public set; }
    public T247 P247 { get; public set; }
    public T248 P248 { get; public set; }
    public T249 P249 { get; public set; }
    public T250 P250 { get; public set; }
    public T251 P251 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
    public T2 get_P2();
    public void set_P2(T2 value);
    public T3 get_P3();
    public void set_P3(T3 value);
    public T4 get_P4();
    public void set_P4(T4 value);
    public T5 get_P5();
    public void set_P5(T5 value);
    public T6 get_P6();
    public void set_P6(T6 value);
    public T7 get_P7();
    public void set_P7(T7 value);
    public T8 get_P8();
    public void set_P8(T8 value);
    public T9 get_P9();
    public void set_P9(T9 value);
    public T10 get_P10();
    public void set_P10(T10 value);
    public T11 get_P11();
    public void set_P11(T11 value);
    public T12 get_P12();
    public void set_P12(T12 value);
    public T13 get_P13();
    public void set_P13(T13 value);
    public T14 get_P14();
    public void set_P14(T14 value);
    public T15 get_P15();
    public void set_P15(T15 value);
    public T16 get_P16();
    public void set_P16(T16 value);
    public T17 get_P17();
    public void set_P17(T17 value);
    public T18 get_P18();
    public void set_P18(T18 value);
    public T19 get_P19();
    public void set_P19(T19 value);
    public T20 get_P20();
    public void set_P20(T20 value);
    public T21 get_P21();
    public void set_P21(T21 value);
    public T22 get_P22();
    public void set_P22(T22 value);
    public T23 get_P23();
    public void set_P23(T23 value);
    public T24 get_P24();
    public void set_P24(T24 value);
    public T25 get_P25();
    public void set_P25(T25 value);
    public T26 get_P26();
    public void set_P26(T26 value);
    public T27 get_P27();
    public void set_P27(T27 value);
    public T28 get_P28();
    public void set_P28(T28 value);
    public T29 get_P29();
    public void set_P29(T29 value);
    public T30 get_P30();
    public void set_P30(T30 value);
    public T31 get_P31();
    public void set_P31(T31 value);
    public T32 get_P32();
    public void set_P32(T32 value);
    public T33 get_P33();
    public void set_P33(T33 value);
    public T34 get_P34();
    public void set_P34(T34 value);
    public T35 get_P35();
    public void set_P35(T35 value);
    public T36 get_P36();
    public void set_P36(T36 value);
    public T37 get_P37();
    public void set_P37(T37 value);
    public T38 get_P38();
    public void set_P38(T38 value);
    public T39 get_P39();
    public void set_P39(T39 value);
    public T40 get_P40();
    public void set_P40(T40 value);
    public T41 get_P41();
    public void set_P41(T41 value);
    public T42 get_P42();
    public void set_P42(T42 value);
    public T43 get_P43();
    public void set_P43(T43 value);
    public T44 get_P44();
    public void set_P44(T44 value);
    public T45 get_P45();
    public void set_P45(T45 value);
    public T46 get_P46();
    public void set_P46(T46 value);
    public T47 get_P47();
    public void set_P47(T47 value);
    public T48 get_P48();
    public void set_P48(T48 value);
    public T49 get_P49();
    public void set_P49(T49 value);
    public T50 get_P50();
    public void set_P50(T50 value);
    public T51 get_P51();
    public void set_P51(T51 value);
    public T52 get_P52();
    public void set_P52(T52 value);
    public T53 get_P53();
    public void set_P53(T53 value);
    public T54 get_P54();
    public void set_P54(T54 value);
    public T55 get_P55();
    public void set_P55(T55 value);
    public T56 get_P56();
    public void set_P56(T56 value);
    public T57 get_P57();
    public void set_P57(T57 value);
    public T58 get_P58();
    public void set_P58(T58 value);
    public T59 get_P59();
    public void set_P59(T59 value);
    public T60 get_P60();
    public void set_P60(T60 value);
    public T61 get_P61();
    public void set_P61(T61 value);
    public T62 get_P62();
    public void set_P62(T62 value);
    public T63 get_P63();
    public void set_P63(T63 value);
    public T64 get_P64();
    public void set_P64(T64 value);
    public T65 get_P65();
    public void set_P65(T65 value);
    public T66 get_P66();
    public void set_P66(T66 value);
    public T67 get_P67();
    public void set_P67(T67 value);
    public T68 get_P68();
    public void set_P68(T68 value);
    public T69 get_P69();
    public void set_P69(T69 value);
    public T70 get_P70();
    public void set_P70(T70 value);
    public T71 get_P71();
    public void set_P71(T71 value);
    public T72 get_P72();
    public void set_P72(T72 value);
    public T73 get_P73();
    public void set_P73(T73 value);
    public T74 get_P74();
    public void set_P74(T74 value);
    public T75 get_P75();
    public void set_P75(T75 value);
    public T76 get_P76();
    public void set_P76(T76 value);
    public T77 get_P77();
    public void set_P77(T77 value);
    public T78 get_P78();
    public void set_P78(T78 value);
    public T79 get_P79();
    public void set_P79(T79 value);
    public T80 get_P80();
    public void set_P80(T80 value);
    public T81 get_P81();
    public void set_P81(T81 value);
    public T82 get_P82();
    public void set_P82(T82 value);
    public T83 get_P83();
    public void set_P83(T83 value);
    public T84 get_P84();
    public void set_P84(T84 value);
    public T85 get_P85();
    public void set_P85(T85 value);
    public T86 get_P86();
    public void set_P86(T86 value);
    public T87 get_P87();
    public void set_P87(T87 value);
    public T88 get_P88();
    public void set_P88(T88 value);
    public T89 get_P89();
    public void set_P89(T89 value);
    public T90 get_P90();
    public void set_P90(T90 value);
    public T91 get_P91();
    public void set_P91(T91 value);
    public T92 get_P92();
    public void set_P92(T92 value);
    public T93 get_P93();
    public void set_P93(T93 value);
    public T94 get_P94();
    public void set_P94(T94 value);
    public T95 get_P95();
    public void set_P95(T95 value);
    public T96 get_P96();
    public void set_P96(T96 value);
    public T97 get_P97();
    public void set_P97(T97 value);
    public T98 get_P98();
    public void set_P98(T98 value);
    public T99 get_P99();
    public void set_P99(T99 value);
    public T100 get_P100();
    public void set_P100(T100 value);
    public T101 get_P101();
    public void set_P101(T101 value);
    public T102 get_P102();
    public void set_P102(T102 value);
    public T103 get_P103();
    public void set_P103(T103 value);
    public T104 get_P104();
    public void set_P104(T104 value);
    public T105 get_P105();
    public void set_P105(T105 value);
    public T106 get_P106();
    public void set_P106(T106 value);
    public T107 get_P107();
    public void set_P107(T107 value);
    public T108 get_P108();
    public void set_P108(T108 value);
    public T109 get_P109();
    public void set_P109(T109 value);
    public T110 get_P110();
    public void set_P110(T110 value);
    public T111 get_P111();
    public void set_P111(T111 value);
    public T112 get_P112();
    public void set_P112(T112 value);
    public T113 get_P113();
    public void set_P113(T113 value);
    public T114 get_P114();
    public void set_P114(T114 value);
    public T115 get_P115();
    public void set_P115(T115 value);
    public T116 get_P116();
    public void set_P116(T116 value);
    public T117 get_P117();
    public void set_P117(T117 value);
    public T118 get_P118();
    public void set_P118(T118 value);
    public T119 get_P119();
    public void set_P119(T119 value);
    public T120 get_P120();
    public void set_P120(T120 value);
    public T121 get_P121();
    public void set_P121(T121 value);
    public T122 get_P122();
    public void set_P122(T122 value);
    public T123 get_P123();
    public void set_P123(T123 value);
    public T124 get_P124();
    public void set_P124(T124 value);
    public T125 get_P125();
    public void set_P125(T125 value);
    public T126 get_P126();
    public void set_P126(T126 value);
    public T127 get_P127();
    public void set_P127(T127 value);
    public T128 get_P128();
    public void set_P128(T128 value);
    public T129 get_P129();
    public void set_P129(T129 value);
    public T130 get_P130();
    public void set_P130(T130 value);
    public T131 get_P131();
    public void set_P131(T131 value);
    public T132 get_P132();
    public void set_P132(T132 value);
    public T133 get_P133();
    public void set_P133(T133 value);
    public T134 get_P134();
    public void set_P134(T134 value);
    public T135 get_P135();
    public void set_P135(T135 value);
    public T136 get_P136();
    public void set_P136(T136 value);
    public T137 get_P137();
    public void set_P137(T137 value);
    public T138 get_P138();
    public void set_P138(T138 value);
    public T139 get_P139();
    public void set_P139(T139 value);
    public T140 get_P140();
    public void set_P140(T140 value);
    public T141 get_P141();
    public void set_P141(T141 value);
    public T142 get_P142();
    public void set_P142(T142 value);
    public T143 get_P143();
    public void set_P143(T143 value);
    public T144 get_P144();
    public void set_P144(T144 value);
    public T145 get_P145();
    public void set_P145(T145 value);
    public T146 get_P146();
    public void set_P146(T146 value);
    public T147 get_P147();
    public void set_P147(T147 value);
    public T148 get_P148();
    public void set_P148(T148 value);
    public T149 get_P149();
    public void set_P149(T149 value);
    public T150 get_P150();
    public void set_P150(T150 value);
    public T151 get_P151();
    public void set_P151(T151 value);
    public T152 get_P152();
    public void set_P152(T152 value);
    public T153 get_P153();
    public void set_P153(T153 value);
    public T154 get_P154();
    public void set_P154(T154 value);
    public T155 get_P155();
    public void set_P155(T155 value);
    public T156 get_P156();
    public void set_P156(T156 value);
    public T157 get_P157();
    public void set_P157(T157 value);
    public T158 get_P158();
    public void set_P158(T158 value);
    public T159 get_P159();
    public void set_P159(T159 value);
    public T160 get_P160();
    public void set_P160(T160 value);
    public T161 get_P161();
    public void set_P161(T161 value);
    public T162 get_P162();
    public void set_P162(T162 value);
    public T163 get_P163();
    public void set_P163(T163 value);
    public T164 get_P164();
    public void set_P164(T164 value);
    public T165 get_P165();
    public void set_P165(T165 value);
    public T166 get_P166();
    public void set_P166(T166 value);
    public T167 get_P167();
    public void set_P167(T167 value);
    public T168 get_P168();
    public void set_P168(T168 value);
    public T169 get_P169();
    public void set_P169(T169 value);
    public T170 get_P170();
    public void set_P170(T170 value);
    public T171 get_P171();
    public void set_P171(T171 value);
    public T172 get_P172();
    public void set_P172(T172 value);
    public T173 get_P173();
    public void set_P173(T173 value);
    public T174 get_P174();
    public void set_P174(T174 value);
    public T175 get_P175();
    public void set_P175(T175 value);
    public T176 get_P176();
    public void set_P176(T176 value);
    public T177 get_P177();
    public void set_P177(T177 value);
    public T178 get_P178();
    public void set_P178(T178 value);
    public T179 get_P179();
    public void set_P179(T179 value);
    public T180 get_P180();
    public void set_P180(T180 value);
    public T181 get_P181();
    public void set_P181(T181 value);
    public T182 get_P182();
    public void set_P182(T182 value);
    public T183 get_P183();
    public void set_P183(T183 value);
    public T184 get_P184();
    public void set_P184(T184 value);
    public T185 get_P185();
    public void set_P185(T185 value);
    public T186 get_P186();
    public void set_P186(T186 value);
    public T187 get_P187();
    public void set_P187(T187 value);
    public T188 get_P188();
    public void set_P188(T188 value);
    public T189 get_P189();
    public void set_P189(T189 value);
    public T190 get_P190();
    public void set_P190(T190 value);
    public T191 get_P191();
    public void set_P191(T191 value);
    public T192 get_P192();
    public void set_P192(T192 value);
    public T193 get_P193();
    public void set_P193(T193 value);
    public T194 get_P194();
    public void set_P194(T194 value);
    public T195 get_P195();
    public void set_P195(T195 value);
    public T196 get_P196();
    public void set_P196(T196 value);
    public T197 get_P197();
    public void set_P197(T197 value);
    public T198 get_P198();
    public void set_P198(T198 value);
    public T199 get_P199();
    public void set_P199(T199 value);
    public T200 get_P200();
    public void set_P200(T200 value);
    public T201 get_P201();
    public void set_P201(T201 value);
    public T202 get_P202();
    public void set_P202(T202 value);
    public T203 get_P203();
    public void set_P203(T203 value);
    public T204 get_P204();
    public void set_P204(T204 value);
    public T205 get_P205();
    public void set_P205(T205 value);
    public T206 get_P206();
    public void set_P206(T206 value);
    public T207 get_P207();
    public void set_P207(T207 value);
    public T208 get_P208();
    public void set_P208(T208 value);
    public T209 get_P209();
    public void set_P209(T209 value);
    public T210 get_P210();
    public void set_P210(T210 value);
    public T211 get_P211();
    public void set_P211(T211 value);
    public T212 get_P212();
    public void set_P212(T212 value);
    public T213 get_P213();
    public void set_P213(T213 value);
    public T214 get_P214();
    public void set_P214(T214 value);
    public T215 get_P215();
    public void set_P215(T215 value);
    public T216 get_P216();
    public void set_P216(T216 value);
    public T217 get_P217();
    public void set_P217(T217 value);
    public T218 get_P218();
    public void set_P218(T218 value);
    public T219 get_P219();
    public void set_P219(T219 value);
    public T220 get_P220();
    public void set_P220(T220 value);
    public T221 get_P221();
    public void set_P221(T221 value);
    public T222 get_P222();
    public void set_P222(T222 value);
    public T223 get_P223();
    public void set_P223(T223 value);
    public T224 get_P224();
    public void set_P224(T224 value);
    public T225 get_P225();
    public void set_P225(T225 value);
    public T226 get_P226();
    public void set_P226(T226 value);
    public T227 get_P227();
    public void set_P227(T227 value);
    public T228 get_P228();
    public void set_P228(T228 value);
    public T229 get_P229();
    public void set_P229(T229 value);
    public T230 get_P230();
    public void set_P230(T230 value);
    public T231 get_P231();
    public void set_P231(T231 value);
    public T232 get_P232();
    public void set_P232(T232 value);
    public T233 get_P233();
    public void set_P233(T233 value);
    public T234 get_P234();
    public void set_P234(T234 value);
    public T235 get_P235();
    public void set_P235(T235 value);
    public T236 get_P236();
    public void set_P236(T236 value);
    public T237 get_P237();
    public void set_P237(T237 value);
    public T238 get_P238();
    public void set_P238(T238 value);
    public T239 get_P239();
    public void set_P239(T239 value);
    public T240 get_P240();
    public void set_P240(T240 value);
    public T241 get_P241();
    public void set_P241(T241 value);
    public T242 get_P242();
    public void set_P242(T242 value);
    public T243 get_P243();
    public void set_P243(T243 value);
    public T244 get_P244();
    public void set_P244(T244 value);
    public T245 get_P245();
    public void set_P245(T245 value);
    public T246 get_P246();
    public void set_P246(T246 value);
    public T247 get_P247();
    public void set_P247(T247 value);
    public T248 get_P248();
    public void set_P248(T248 value);
    public T249 get_P249();
    public void set_P249(T249 value);
    public T250 get_P250();
    public void set_P250(T250 value);
    public T251 get_P251();
    public void set_P251(T251 value);
}
public class DevExpress.Data.Linq.Helpers.CriteriaToEFExpressionConverterInternal : CriteriaToExpressionConverterInternal {
    private static MethodInfo toStringMi;
    private static MethodInfo trimMi;
    private MethodInfo doubleConvertMi;
    private MethodInfo decimalConvertMi;
    private EntityQueryTypeInfo queryTypeInfo;
    private static Type[] DateFromParts_ArgTypes;
    protected int FnConcatMaxArgs { get; }
    public CriteriaToEFExpressionConverterInternal(ICriteriaToExpressionConverter owner, ParameterExpression thisExpression);
    public CriteriaToEFExpressionConverterInternal(ICriteriaToExpressionConverter owner, ParameterExpression thisExpression, Type queryProviderType);
    private static CriteriaToEFExpressionConverterInternal();
    protected virtual int get_FnConcatMaxArgs();
    protected virtual Expression VisitInternal(UnaryOperator theOperator);
    protected virtual Expression ConvertToType(Expression instanceExpr, Type type);
    public Expression FnToStr(FunctionOperator theOperator);
    protected virtual Expression VisitInternal(FunctionOperator theOperator);
    private Expression VisitFunctionalOperatorEFCore(FunctionOperator theOperator);
    private Expression VisitFunctionalOperatorFullEF(FunctionOperator theOperator);
    public Expression FnGetDate(FunctionOperator theOperator);
    protected virtual Expression MakeDateOnlyToDateTimeConversion(Expression dateOnlyArg, bool nullable);
    private Expression FnDateTimeFromPartsEFCore(FunctionOperator theOperator);
    private Expression FnDateOnlyFromPartsEFCore(FunctionOperator theOperator);
    private Expression FnTimeOnlyFromPartsEFCore(FunctionOperator theOperator);
    private Expression FnTruncateToMinuteEFCore(FunctionOperator theOperator);
}
public class DevExpress.Data.Linq.Helpers.CriteriaToExpressionConverterEventsHelper : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<CriteriaToExpressionConverterOnCriteriaArgs> OnFunctionOperator;
    [CompilerGeneratedAttribute]
public void add_OnFunctionOperator(EventHandler`1<CriteriaToExpressionConverterOnCriteriaArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnFunctionOperator(EventHandler`1<CriteriaToExpressionConverterOnCriteriaArgs> value);
    public void Subscribe(CriteriaToExpressionConverterInternal converter);
    protected virtual void SubscribeInternal(CriteriaToExpressionConverterInternal converter);
    private void FunctionOperatorHandler(object sender, CriteriaToExpressionConverterOnCriteriaArgs e);
}
public class DevExpress.Data.Linq.Helpers.CriteriaToExpressionConverterForObjectsInternal : CriteriaToExpressionConverterInternal {
    public bool ForceIifForInstance { get; }
    public CriteriaToExpressionConverterForObjectsInternal(ICriteriaToExpressionConverter owner, ParameterExpression thisExpression);
    public virtual bool get_ForceIifForInstance();
    protected virtual Expression VisitInternal(FunctionOperator theOperator);
    public static int DateDiffYear(DateTime startDate, DateTime endDate);
    public static int DateDiffYear(DateTime startDate, DateOnly endDate);
    public static int DateDiffYear(DateOnly startDate, DateTime endDate);
    public static int DateDiffYear(DateOnly startDate, DateOnly endDate);
    public static Nullable`1<int> DateDiffYear(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffYear(Nullable`1<DateTime> startDate, Nullable`1<DateOnly> endDate);
    public static Nullable`1<int> DateDiffYear(Nullable`1<DateOnly> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffYear(Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    public static int DateDiffMonth(DateTime startDate, DateTime endDate);
    public static int DateDiffMonth(DateTime startDate, DateOnly endDate);
    public static int DateDiffMonth(DateOnly startDate, DateTime endDate);
    public static int DateDiffMonth(DateOnly startDate, DateOnly endDate);
    public static Nullable`1<int> DateDiffMonth(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffMonth(Nullable`1<DateTime> startDate, Nullable`1<DateOnly> endDate);
    public static Nullable`1<int> DateDiffMonth(Nullable`1<DateOnly> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffMonth(Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    public static int DateDiffDay(DateTime startDate, DateTime endDate);
    public static int DateDiffDay(DateTime startDate, DateOnly endDate);
    public static int DateDiffDay(DateOnly startDate, DateTime endDate);
    public static int DateDiffDay(DateOnly startDate, DateOnly endDate);
    public static Nullable`1<int> DateDiffDay(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffDay(Nullable`1<DateTime> startDate, Nullable`1<DateOnly> endDate);
    public static Nullable`1<int> DateDiffDay(Nullable`1<DateOnly> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffDay(Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    public static int DateDiffHour(DateTime startDate, DateTime endDate);
    public static int DateDiffHour(DateTime startDate, DateOnly endDate);
    public static int DateDiffHour(DateOnly startDate, DateTime endDate);
    public static int DateDiffHour(TimeOnly startDate, TimeOnly endDate);
    public static Nullable`1<int> DateDiffHour(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffHour(Nullable`1<DateTime> startDate, Nullable`1<DateOnly> endDate);
    public static Nullable`1<int> DateDiffHour(Nullable`1<DateOnly> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffHour(Nullable`1<TimeOnly> startDate, Nullable`1<TimeOnly> endDate);
    public static int DateDiffMinute(DateTime startDate, DateTime endDate);
    public static int DateDiffMinute(DateTime startDate, DateOnly endDate);
    public static int DateDiffMinute(DateOnly startDate, DateTime endDate);
    public static int DateDiffMinute(TimeOnly startDate, TimeOnly endDate);
    public static Nullable`1<int> DateDiffMinute(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffMinute(Nullable`1<DateTime> startDate, Nullable`1<DateOnly> endDate);
    public static Nullable`1<int> DateDiffMinute(Nullable`1<DateOnly> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffMinute(Nullable`1<TimeOnly> startDate, Nullable`1<TimeOnly> endDate);
    public static int DateDiffSecond(DateTime startDate, DateTime endDate);
    public static int DateDiffSecond(DateTime startDate, DateOnly endDate);
    public static int DateDiffSecond(DateOnly startDate, DateTime endDate);
    public static int DateDiffSecond(TimeOnly startDate, TimeOnly endDate);
    public static Nullable`1<int> DateDiffSecond(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffSecond(Nullable`1<DateTime> startDate, Nullable`1<DateOnly> endDate);
    public static Nullable`1<int> DateDiffSecond(Nullable`1<DateOnly> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffSecond(Nullable`1<TimeOnly> startDate, Nullable`1<TimeOnly> endDate);
    public static int DateDiffMillisecond(DateTime startDate, DateTime endDate);
    public static int DateDiffMillisecond(DateTime startDate, DateOnly endDate);
    public static int DateDiffMillisecond(DateOnly startDate, DateTime endDate);
    public static int DateDiffMillisecond(TimeOnly startDate, TimeOnly endDate);
    public static Nullable`1<int> DateDiffMillisecond(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffMillisecond(Nullable`1<DateTime> startDate, Nullable`1<DateOnly> endDate);
    public static Nullable`1<int> DateDiffMillisecond(Nullable`1<DateOnly> startDate, Nullable`1<DateTime> endDate);
    public static Nullable`1<int> DateDiffMillisecond(Nullable`1<TimeOnly> startDate, Nullable`1<TimeOnly> endDate);
}
public class DevExpress.Data.Linq.Helpers.CriteriaToExpressionConverterInternal : object {
    private static Dictionary`2<Type, bool> CompareToTypes;
    private static Dictionary`2<Type, HashSet`1<Type>> CompatibleTypes;
    [CompilerGeneratedAttribute]
private EventHandler`1<CriteriaToExpressionConverterOnCriteriaArgs> OnFunctionOperator;
    protected ICriteriaToExpressionConverter Owner;
    protected Stack`1<Expression> ExpressionStack;
    protected ParameterExpression ThisExpression;
    protected Expression BaseExpression;
    public bool ForceIifForInstance { get; }
    protected int FnConcatMaxArgs { get; }
    private static CriteriaToExpressionConverterInternal();
    public CriteriaToExpressionConverterInternal(ICriteriaToExpressionConverter owner, ParameterExpression thisExpression);
    public static void RemoveCompareType(Type t);
    public static void SetCompareType(Type t, bool v);
    [CompilerGeneratedAttribute]
public void add_OnFunctionOperator(EventHandler`1<CriteriaToExpressionConverterOnCriteriaArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnFunctionOperator(EventHandler`1<CriteriaToExpressionConverterOnCriteriaArgs> value);
    protected static bool IsCompareToExpressions(Type leftType, Type rightType);
    protected static bool CanBeApplied(Type targetType, Type sourceType);
    public virtual bool get_ForceIifForInstance();
    public sealed virtual Expression Visit(OperandProperty theOperand);
    protected Expression MakePropertyAccess(Expression expression, string propertyName);
    protected virtual Expression TryMakeCustomPropertyAccess(Expression expression, string propertyName);
    protected Expression MakeUpcasting(Expression expression, String& propertyName);
    protected virtual Expression VisitInternal(OperandProperty theOperand);
    private void TryAssignThisExpression();
    public sealed virtual Expression Visit(AggregateOperand theOperand);
    protected virtual Expression ProcessInContext(OperandProperty contextProperty, ParameterExpression thisExpression, CriteriaOperator op);
    private Expression[] RolloutPropertyExpressions(OperandProperty contextProperty, Int32& upLevels);
    protected virtual Expression VisitInternal(AggregateOperand theOperand);
    private Expression AggregateBasic(AggregateOperand theOperand, Type rowType, Expression collectionProperty, ParameterExpression elementParameter);
    protected virtual Expression AggregateSingle(Expression collectionProperty, Type rowType, LambdaExpression argExpr);
    private Expression AggregateCustom(AggregateOperand theOperand, Type rowType, Expression collectionProperty, ParameterExpression elementParameter);
    public sealed virtual Expression Visit(JoinOperand theOperand);
    protected virtual Expression VisitInternal(JoinOperand theOperand);
    public sealed virtual Expression Visit(FunctionOperator theOperator);
    protected virtual Expression VisitInternal(FunctionOperator theOperator);
    protected Type GetDateTimeArgType(FunctionOperator theOperator, bool nullable);
    public Expression FnToType(FunctionOperator theOperator, Type type);
    private Expression FnCustom(FunctionOperator theOperator);
    private Expression FnCustomCore(string name, IEnumerable`1<CriteriaOperator> operands);
    private Expression FnIif(FunctionOperator theOperator);
    private Expression FnIif(Expression[] args, int index);
    protected virtual int get_FnConcatMaxArgs();
    private Expression FnConcat(IEnumerable`1<Expression> args);
    private static Expression SafeToStringAsWasBefore(Expression concatArg);
    private static Expression FnConcatCore(Expression[] args, int maxArgs);
    private static Expression FnConcatRealConcat(Expression[] args);
    private static MethodInfo GetStringConcatMethod(Type[] parameters);
    private Expression FnIsNull(FunctionOperator theOperator);
    private Expression FnIsNullOrEmpty(FunctionOperator theOperator);
    protected static bool IsNotNullType(Type type);
    public Expression MakeInstanceMemberAccess(string memberName, Type type, FunctionOperator theOperator);
    public Expression MakeInstanceMemberAccess(string memberName, Type type, FunctionOperator theOperator, bool forceIifForInstance);
    protected virtual Expression MakeDateOnlyToDateTimeConversion(Expression dateOnlyArg, bool nullable);
    public MemberExpression MakeInstanceMemberAccessCore(string memberName, Type type, Expression arg);
    public MemberExpression MakeStaticMemberAccess(string memberName, Type type);
    private MethodCallExpression FnCharIndex(FunctionOperator theOperator);
    public Expression MakeInstanceCall(string methodName, Type type, FunctionOperator theOperator, Type[] argTypes);
    protected virtual Expression ConvertToType(Expression instanceExpr, Type type);
    public Expression MakeInstanceCall(string methodName, Type type, FunctionOperator theOperator, bool forceIifForInstance, Type[] argTypes);
    public Expression MakeAddDaysCall(FunctionOperator theOperator, bool forceIifForInstance);
    private Expression MakeInstanceExpression(FunctionOperator theOperator, bool forceIifForInstance, List`1<Expression> nullableExpressions);
    private Expression[] MakeCallArgs(FunctionOperator theOperator, Type[] argTypes, List`1<Expression> nullableExpressions);
    public Expression MakeStaticSqlCall(string methodName, FunctionOperator theOperator, Type[] argTypes);
    public Expression MakeStaticCallSqlCore(string methodName, FunctionOperator theOperator, bool useArgTypesOnlyIfDifferenct, object thisArgument, Type[] argTypes);
    public Expression MakeStaticCall(string methodName, Type type, FunctionOperator theOperator, Type[] argTypes);
    public Expression MakeStaticCall(string methodName, Type type, FunctionOperator theOperator, bool useArgTypesOnlyIfDifferenct, Type[] argTypes);
    public Expression MakeStaticExtensionCall(string methodName, Type type, FunctionOperator theOperator, object thisArgument, Type[] argTypes);
    public Expression MakeStaticCallCore(string methodName, Type type, FunctionOperator theOperator, bool useArgTypesOnlyIfDifferenct, object thisArgument, Type[] argTypes);
    protected void BuildArgumentsForMethodCall(CriteriaOperatorCollection operands, bool useArgTypesOnlyIfDifferent, Type[] argTypes, List`1& args, List`1& nullableExpressions);
    public sealed virtual Expression Visit(OperandValue theOperand);
    protected virtual Expression VisitInternal(OperandValue theOperand);
    public sealed virtual Expression Visit(GroupOperator theOperator);
    protected virtual Expression VisitInternal(GroupOperator theOperator);
    private static Expression MakeGroupCore(GroupOperatorType opType, Expression[] operands, int start, int count);
    public sealed virtual Expression Visit(InOperator theOperator);
    protected virtual Expression VisitInternal(InOperator theOperator);
    public sealed virtual Expression Visit(UnaryOperator theOperator);
    protected virtual Expression VisitInternal(UnaryOperator theOperator);
    private void Nullabler(Expression& left, Expression& right);
    public sealed virtual Expression Visit(BinaryOperator theOperator);
    private static Type GetBinaryNumericPromotionType(Type leftType, Type rightType, BinaryOperatorType exceptionType);
    private void PrepareParametersForBinaryOperator(Expression& left, Expression& right, BinaryOperatorType binaryOperatorType);
    private Expression ProcessBinaryOperatorWithConstants(Expression left, Expression right, BinaryOperatorType operatorType);
    protected virtual Expression VisitInternal(BinaryOperator theOperator);
    private Expression BitwiseOperator(Expression left, Expression right, BinaryOperatorType binaryOperatorType);
    private static MethodCallExpression MakeStringCompareCallExpression(Expression left, Expression right);
    private Expression MakeComparerCallExpression(Expression left, Expression right);
    public sealed virtual Expression Visit(BetweenOperator theOperator);
    protected virtual Expression VisitInternal(BetweenOperator theOperator);
    public Expression Process(CriteriaOperator op);
    private static bool IsConstantNull(CriteriaOperator op);
    private static bool IsConstantNull(Expression expression);
    public static bool IsNullable(Expression exp);
    public Expression ConvertToNullable(Expression exp);
    public Expression ConvertFromNullable(Expression exp);
    public Expression ConvertIfArgumentsAreNull(IList`1<Expression> expression, Expression result);
    [CompilerGeneratedAttribute]
private Expression <VisitInternal>b__33_2(CriteriaOperator o);
    [CompilerGeneratedAttribute]
private Expression <VisitInternal>b__33_5(CriteriaOperator o);
    [CompilerGeneratedAttribute]
private Expression <VisitInternal>b__33_8(CriteriaOperator o);
    [CompilerGeneratedAttribute]
private Expression <VisitInternal>b__33_1(CriteriaOperator op);
    [CompilerGeneratedAttribute]
private Expression <FnCustomCore>b__37_0(CriteriaOperator p);
    [CompilerGeneratedAttribute]
private Expression <VisitInternal>b__72_0(CriteriaOperator c);
}
public class DevExpress.Data.Linq.Helpers.CriteriaToExpressionConverterOnCriteriaArgs : EventArgs {
    private CriteriaOperator criteria;
    private Func`2<CriteriaOperator, Expression> processHandler;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Result>k__BackingField;
    public CriteriaOperator Criteria { get; }
    public Func`2<CriteriaOperator, Expression> ProcessHandler { get; }
    public bool Handled { get; public set; }
    public Expression Result { get; public set; }
    public CriteriaToExpressionConverterOnCriteriaArgs(CriteriaOperator criteria, Func`2<CriteriaOperator, Expression> processHandler);
    public CriteriaOperator get_Criteria();
    public Func`2<CriteriaOperator, Expression> get_ProcessHandler();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public Expression get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(Expression value);
}
public class DevExpress.Data.Linq.Helpers.CriteriaToODataExpressionConverterInternal : CriteriaToExpressionConverterInternal {
    public CriteriaToODataExpressionConverterInternal(ICriteriaToExpressionConverter owner, ParameterExpression thisExpression);
    protected virtual Expression VisitInternal(BinaryOperator theOperator);
}
[ExtensionAttribute]
public static class DevExpress.Data.Linq.Helpers.CriteriaToQueryableExtender : object {
    private static ICriteriaToExpressionConverter onInstanceConverter;
    public static Nullable`1<bool> UseMS362794Workaround;
    private static CriteriaToQueryableExtender();
    public static Func`2<object, object> GetOnInstanceEvaluator(Type instanceType, CriteriaOperator subj);
    public static object EvaluateOnInstance(Type instanceType, object instance, CriteriaOperator subj);
    [ExtensionAttribute]
public static IQueryable MakeSelect(IQueryable src, ICriteriaToExpressionConverter converter, CriteriaOperator subj);
    [ExtensionAttribute]
public static IEnumerable`1<Object[]> DoSelectSeveral(IQueryable src, ICriteriaToExpressionConverter converter, CriteriaOperator[] subjs);
    [ExtensionAttribute]
public static IQueryable MakeSelectThis(IQueryable src);
    [ExtensionAttribute]
public static IQueryable AppendWhere(IQueryable src, ICriteriaToExpressionConverter converter, CriteriaOperator op);
    [ExtensionAttribute]
public static IQueryable Take(IQueryable src, int count);
    [ExtensionAttribute]
public static IQueryable Skip(IQueryable src, int count);
    [ExtensionAttribute]
public static IQueryable Cast(IQueryable src, Type t);
    [ExtensionAttribute]
public static IQueryable MakeDistinct(IQueryable src);
    [ExtensionAttribute]
public static IQueryable MakeOrderBy(IQueryable src, ICriteriaToExpressionConverter converter, ServerModeOrderDescriptor[] orders);
    [ExtensionAttribute]
public static IQueryable MakeOrderBy(IQueryable src, ICriteriaToExpressionConverter converter, OperandProperty subj);
    [ExtensionAttribute]
public static IQueryable MakeOrderBy(IQueryable src, ICriteriaToExpressionConverter converter, IEnumerable`1<ServerModeOrderDescriptor> orders);
    [ExtensionAttribute]
public static IQueryable MakeGroupBy(IQueryable src, ICriteriaToExpressionConverter converter, CriteriaOperator subj);
    [ExtensionAttribute]
public static IQueryable MakeSelectFirstOrDefaultFromGrouping(IQueryable groups, ICriteriaToExpressionConverter converter, CriteriaOperator groupByProperty, Type sourceType, Type targetType);
    [ExtensionAttribute]
internal static IEnumerable`1<Object[]> DoSelectSummary(IQueryable grouped, ICriteriaToExpressionConverter converter, Type rowType, IList`1<ServerModeSummaryDescriptor> summary);
    private static IEnumerable`1<Object[]> DoSelectSeveral(IQueryable queryable, ParameterExpression parameter, IList`1<Expression> selectList);
    private static IEnumerable`1<Object[]> DoSelectSeveralArrayTail(IQueryable queryable, ParameterExpression parameter, IList`1<Expression> selectList);
    private static IEnumerable`1<Object[]> DoSelectSeveralMS362794Tail(IQueryable queryable, ParameterExpression parameter, IList`1<Expression> selectList);
    private static IQueryable DoSelectSeveralMakeQuery(IQueryable queryable, ParameterExpression parameter, Expression selectList);
    [ExtensionAttribute]
public static int Count(IQueryable src);
}
internal static class DevExpress.Data.Linq.Helpers.DataAccessTypeValidationHelper : object {
    public static bool IsValidForDataAccessComponents(Type type);
    private static bool IsNestedNotPublic(Type type);
    private static bool IsStatic(Type type);
    private static bool IsRelatedToAttributes(Type type);
    private static bool IsRelatedToEvents(Type type);
    private static bool IsCompilerGenerated(Type type);
    private static bool IsRelatedToUI(Type type);
}
internal static class DevExpress.Data.Linq.Helpers.DBContextHelper : object {
    private static FieldInfo fInfo_Context;
    public static object GetDBContext(IQueryable q);
    public static string GetDatabaseProviderName(object context);
    public static Version GetEFVersion(Type queryProviderType);
}
[FlagsAttribute]
internal enum DevExpress.Data.Linq.Helpers.EntityQueryTypeCaps : Enum {
    public int value__;
    public static EntityQueryTypeCaps None;
    public static EntityQueryTypeCaps EntityFunctions;
    public static EntityQueryTypeCaps ObjectToString;
}
internal class DevExpress.Data.Linq.Helpers.EntityQueryTypeInfo : object {
    public static string EntityFrameworkNotFoundMessage;
    public static string EntityFrameworkVersionMistmatchMessage;
    private bool isEntityFunctionsChecked;
    private bool isSqlFunctionsChecked;
    private Type entityFunctionType;
    private Type sqlFunctionType;
    public Type ProviderType;
    public bool IsEntityFramework;
    public bool IsEntityFrameworkCore;
    public object EFCoreFunctionsInstance;
    public EntityQueryTypeCaps ProviderCaps;
    public Type ExpectedFunctionsType;
    public Type ExpectedDBFunctionsType;
    public Type ExpectedSqlFunctionsType;
    public int FnConcatMaxArgs;
    public Type EntityFunctionsType { get; }
    public Type SqlFunctionsType { get; }
    public EntityQueryTypeInfo(Type providerType, bool isEntityFramework, bool isEntityFrameworkCore, object efCoreFunctionsInstance, EntityQueryTypeCaps providerCaps, Type expectedFunctionsType, Type expectedDBFunctionsType, Type expectedSqlFynctionsType, int fnConcatMaxArgs);
    public Type get_EntityFunctionsType();
    public Type get_SqlFunctionsType();
    public void CheckEntityFunctions();
    public void CheckSqlFunctions();
    public bool IsCapabilitySupported(EntityQueryTypeCaps caps);
}
internal class DevExpress.Data.Linq.Helpers.GetQueryableNotHandledEntityMessenger : object {
    public static string MessageText;
    public string Message { get; }
    private static GetQueryableNotHandledEntityMessenger();
    public string get_Message();
}
internal class DevExpress.Data.Linq.Helpers.GetQueryableNotHandledMessenger : object {
    public static string MessageText;
    public string Message { get; }
    private static GetQueryableNotHandledMessenger();
    public string get_Message();
}
public interface DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner {
    public Type ElementType { get; }
    public IQueryable QueryableSource { get; }
    public string KeyExpression { get; }
    public string DefaultSorting { get; }
    public abstract virtual Type get_ElementType();
    public abstract virtual IQueryable get_QueryableSource();
    public abstract virtual bool IsReadyForTakeOff();
    public abstract virtual string get_KeyExpression();
    public abstract virtual string get_DefaultSorting();
}
public class DevExpress.Data.Linq.Helpers.LinqServerModeCache : ServerModeKeyedCache {
    public IQueryable Q;
    private ICriteriaToExpressionConverter converter;
    public static object PrepareTopGroupGroupByConstant;
    protected ICriteriaToExpressionConverter Converter { get; }
    public LinqServerModeCache(IQueryable q, CriteriaOperator[] keyCriteria, ServerModeOrderDescriptor[][] sortInfo, int groupCount, ServerModeSummaryDescriptor[] summary, ServerModeSummaryDescriptor[] totalSummary);
    private static LinqServerModeCache();
    public static bool StaticKeyEquals(object a, object b);
    protected virtual Func`2<object, object> GetOnInstanceEvaluator(CriteriaOperator subj);
    [DebuggerStepThroughAttribute]
protected virtual ICriteriaToExpressionConverter get_Converter();
    internal static ServerModeGroupInfoData PrepareTopGroupInfoStatic(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator where, ServerModeSummaryDescriptor[] summaries);
    protected virtual ServerModeGroupInfoData PrepareTopGroupInfo(ServerModeSummaryDescriptor[] summaries);
    internal static ServerModeGroupInfoData[] PrepareChildrenStatic(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator groupWhere, CriteriaOperator groupByCriterion, CriteriaOperator orderByCriterion, bool isDesc, ServerModeSummaryDescriptor[] summaries);
    protected virtual ServerModeGroupInfoData[] PrepareChildren(CriteriaOperator groupWhere, CriteriaOperator groupByCriterion, CriteriaOperator orderByCriterion, bool isDesc, ServerModeSummaryDescriptor[] summaries);
    protected virtual Object[] FetchRows(CriteriaOperator where, ServerModeOrderDescriptor[] order, int take);
    internal static Object[] FetchKeysStatic(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator[] keysCriteria, CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    protected virtual Object[] FetchKeys(CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    protected virtual Type ResolveKeyType(CriteriaOperator singleKeyToResolve);
    protected virtual Type ResolveRowType();
    internal static int GetCountStatic(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator criteriaOperator);
    protected virtual int GetCount(CriteriaOperator criteriaOperator);
}
public class DevExpress.Data.Linq.Helpers.LinqServerModeCore : ServerModeCore {
    protected IQueryable Q;
    private ICriteriaToExpressionConverter converter;
    protected ICriteriaToExpressionConverter Converter { get; }
    public LinqServerModeCore(IQueryable queryable, CriteriaOperator[] keys);
    protected virtual ServerModeCore DXCloneCreate();
    [DebuggerStepThroughAttribute]
protected virtual ICriteriaToExpressionConverter get_Converter();
    protected virtual ServerModeCache CreateCacheCore();
    internal static Object[] GetUniqueValuesStatic(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator expression, int maxCount, CriteriaOperator filter);
    private static Object[] TakeValues(IQueryable q, int maxCount);
    protected virtual Object[] GetUniqueValues(CriteriaOperator expression, int maxCount, CriteriaOperator filter);
    public static string GuessKeyExpression(Type objectType);
    private static string GuessKeyExpressionInternal(Type objectType);
    public virtual IList GetAllFilteredAndSortedRows();
    internal static Object[] GetUniqueValuesStaticEx(IQueryable q, ICriteriaToExpressionConverter converter, CriteriaOperator expression, int maxCount, CriteriaOperator filter);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Linq.Helpers.LinqServerModeDesignTimeWrapper : object {
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual void Refresh();
    public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public object FindKeyByBeginWith(PropertyDescriptor column, string value);
    public object FindKeyByValue(PropertyDescriptor column, object value);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Linq.Helpers.LinqServerModeFrontEnd : object {
    public ILinqServerModeFrontEndOwner Owner;
    private IListServer _Wrapper;
    private Type _Type;
    private string _KeyExpression;
    private IQueryable _DataSource;
    private bool _IsReadyForTakeOff;
    private string _DefaultSorting;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    private CriteriaOperator _Successful_FilterCriteria;
    private ICollection`1<ServerModeOrderDescriptor[]> _Successful_sortInfo;
    private int _Successful_groupCount;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_summaryInfo;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_totalSummaryInfo;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler _ListChanged;
    public bool RefreshSupported { get; }
    protected IListServer Wrapper { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public LinqServerModeFrontEnd(ILinqServerModeFrontEndOwner owner);
    public void CatchUp();
    public sealed virtual void Refresh();
    public virtual bool get_RefreshSupported();
    [CompilerGeneratedAttribute]
public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual LinqServerModeFrontEnd DXClone();
    protected virtual LinqServerModeFrontEnd CreateDXClone();
    protected IListServer get_Wrapper();
    private void _Wrapper_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    private void _Wrapper_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private IListServer CreateWrapper();
    protected virtual IListServer CreateRuntimeWrapper();
    protected void KillWrapper();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    [CompilerGeneratedAttribute]
private void add__ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ListChanged(ListChangedEventHandler value);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
}
public class DevExpress.Data.Linq.Helpers.LinqServerModeSourceObjectTypeConverter : TypeListConverter {
    protected SortedList`2<string, Type> typesCache;
    public static string None;
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object val);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destType);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
public abstract class DevExpress.Data.Linq.Helpers.MS362794 : object {
    public Object[] Container;
    protected MS362794(int size);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C1`1 : MS362794 {
    public T0 P0 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C10`10 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T2 P2 { get; public set; }
    public T3 P3 { get; public set; }
    public T4 P4 { get; public set; }
    public T5 P5 { get; public set; }
    public T6 P6 { get; public set; }
    public T7 P7 { get; public set; }
    public T8 P8 { get; public set; }
    public T9 P9 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
    public T2 get_P2();
    public void set_P2(T2 value);
    public T3 get_P3();
    public void set_P3(T3 value);
    public T4 get_P4();
    public void set_P4(T4 value);
    public T5 get_P5();
    public void set_P5(T5 value);
    public T6 get_P6();
    public void set_P6(T6 value);
    public T7 get_P7();
    public void set_P7(T7 value);
    public T8 get_P8();
    public void set_P8(T8 value);
    public T9 get_P9();
    public void set_P9(T9 value);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C2`2 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C3`3 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T2 P2 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
    public T2 get_P2();
    public void set_P2(T2 value);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C4`4 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T2 P2 { get; public set; }
    public T3 P3 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
    public T2 get_P2();
    public void set_P2(T2 value);
    public T3 get_P3();
    public void set_P3(T3 value);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C5`5 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T2 P2 { get; public set; }
    public T3 P3 { get; public set; }
    public T4 P4 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
    public T2 get_P2();
    public void set_P2(T2 value);
    public T3 get_P3();
    public void set_P3(T3 value);
    public T4 get_P4();
    public void set_P4(T4 value);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C6`6 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T2 P2 { get; public set; }
    public T3 P3 { get; public set; }
    public T4 P4 { get; public set; }
    public T5 P5 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
    public T2 get_P2();
    public void set_P2(T2 value);
    public T3 get_P3();
    public void set_P3(T3 value);
    public T4 get_P4();
    public void set_P4(T4 value);
    public T5 get_P5();
    public void set_P5(T5 value);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C7`7 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T2 P2 { get; public set; }
    public T3 P3 { get; public set; }
    public T4 P4 { get; public set; }
    public T5 P5 { get; public set; }
    public T6 P6 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
    public T2 get_P2();
    public void set_P2(T2 value);
    public T3 get_P3();
    public void set_P3(T3 value);
    public T4 get_P4();
    public void set_P4(T4 value);
    public T5 get_P5();
    public void set_P5(T5 value);
    public T6 get_P6();
    public void set_P6(T6 value);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C8`8 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T2 P2 { get; public set; }
    public T3 P3 { get; public set; }
    public T4 P4 { get; public set; }
    public T5 P5 { get; public set; }
    public T6 P6 { get; public set; }
    public T7 P7 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
    public T2 get_P2();
    public void set_P2(T2 value);
    public T3 get_P3();
    public void set_P3(T3 value);
    public T4 get_P4();
    public void set_P4(T4 value);
    public T5 get_P5();
    public void set_P5(T5 value);
    public T6 get_P6();
    public void set_P6(T6 value);
    public T7 get_P7();
    public void set_P7(T7 value);
}
public class DevExpress.Data.Linq.Helpers.MS362794_C9`9 : MS362794 {
    public T0 P0 { get; public set; }
    public T1 P1 { get; public set; }
    public T2 P2 { get; public set; }
    public T3 P3 { get; public set; }
    public T4 P4 { get; public set; }
    public T5 P5 { get; public set; }
    public T6 P6 { get; public set; }
    public T7 P7 { get; public set; }
    public T8 P8 { get; public set; }
    public T0 get_P0();
    public void set_P0(T0 value);
    public T1 get_P1();
    public void set_P1(T1 value);
    public T2 get_P2();
    public void set_P2(T2 value);
    public T3 get_P3();
    public void set_P3(T3 value);
    public T4 get_P4();
    public void set_P4(T4 value);
    public T5 get_P5();
    public void set_P5(T5 value);
    public T6 get_P6();
    public void set_P6(T6 value);
    public T7 get_P7();
    public void set_P7(T7 value);
    public T8 get_P8();
    public void set_P8(T8 value);
}
public static class DevExpress.Data.Linq.Helpers.SummaryWorkaroundForMS362794 : object {
    public static int MAX_Size;
    private static Type[] TypesArray;
    private static SummaryWorkaroundForMS362794();
    public static bool CanWorkaround(int genericArgsCount);
    public static Type MakeWorkaroundType(Type[] genericArgs);
}
public class DevExpress.Data.Linq.Helpers.TypeDiscoveryServiceForUpcasting : object {
    private static TypeDiscoveryServiceForUpcasting modreq(System.Runtime.CompilerServices.IsVolatile) Instance;
    private static object instanceLock;
    private Assembly[] assemblies;
    private ConcurrentDictionary`2<Type, Type[]> cache;
    private object fullyScannedLock;
    private HashSet`1<Type> fullyScanned;
    public TypeDiscoveryServiceForUpcasting(Assembly[] assemblies);
    private static TypeDiscoveryServiceForUpcasting();
    public static void SetInstance(TypeDiscoveryServiceForUpcasting instance);
    public static Type FindDescendant(Type baseType, string descendantTypeName);
    private static TypeDiscoveryServiceForUpcasting GetInstance();
    private static TypeDiscoveryServiceForUpcasting CreateDefault();
    public Type FindDescendantCore(Type baseType, string descendantTypeName);
    private void CollectDescendants(Assembly assembly, Type baseType);
    private Type FindInCache(Type baseType, string descendantTypeName);
}
public abstract class DevExpress.Data.Linq.Helpers.TypeInfoBase : object {
    public PropertyDescriptorCollection UIDescriptors { get; }
    public abstract virtual PropertyDescriptorCollection get_UIDescriptors();
    public abstract virtual object GetWorkerThreadRowInfo(object workerRow);
    public abstract virtual object GetUIThreadRow(object rowInfo);
}
internal class DevExpress.Data.Linq.Helpers.TypeInfoNoQueryable : TypeInfoBase {
    private PropertyDescriptorCollection uiDescriptors;
    public PropertyDescriptorCollection UIDescriptors { get; }
    public TypeInfoNoQueryable(Type designTimeType);
    public virtual PropertyDescriptorCollection get_UIDescriptors();
    public virtual object GetWorkerThreadRowInfo(object workerRow);
    public virtual object GetUIThreadRow(object rowInfo);
}
internal class DevExpress.Data.Linq.Helpers.TypeInfoNoQueryableEntity : TypeInfoBase {
    private PropertyDescriptorCollection uiDescriptors;
    public PropertyDescriptorCollection UIDescriptors { get; }
    public TypeInfoNoQueryableEntity(Type designTimeType);
    public virtual PropertyDescriptorCollection get_UIDescriptors();
    public virtual object GetWorkerThreadRowInfo(object workerRow);
    public virtual object GetUIThreadRow(object rowInfo);
}
public class DevExpress.Data.Linq.Helpers.TypeInfoProxied : TypeInfoBase {
    private PropertyDescriptorCollection uiDescriptors;
    private PropertyDescriptor[] workerDescriptors;
    private bool useExpandoObjectProxies;
    public PropertyDescriptorCollection UIDescriptors { get; }
    public TypeInfoProxied(PropertyDescriptorCollection workerThreadDescriptors, Type designTimeType);
    public TypeInfoProxied(PropertyDescriptorCollection workerThreadDescriptors, Type designTimeType, bool useExpandoObjectProxies);
    public static bool IsNotThreadSafe(Type type);
    public virtual PropertyDescriptorCollection get_UIDescriptors();
    public virtual object GetWorkerThreadRowInfo(object workerRow);
    public virtual object GetUIThreadRow(object rowInfo);
}
public class DevExpress.Data.Linq.Helpers.TypeInfoThreadSafe : TypeInfoBase {
    private PropertyDescriptorCollection PropertyDescriptors;
    public PropertyDescriptorCollection UIDescriptors { get; }
    public TypeInfoThreadSafe(PropertyDescriptorCollection propertyDescriptors);
    public virtual PropertyDescriptorCollection get_UIDescriptors();
    public virtual object GetWorkerThreadRowInfo(object workerRow);
    public virtual object GetUIThreadRow(object rowInfo);
}
public interface DevExpress.Data.Linq.ICriteriaToExpressionConverter {
    public abstract virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op);
}
public interface DevExpress.Data.Linq.ICriteriaToExpressionConverterCustomizable {
    public abstract virtual Expression Convert(ParameterExpression thisExpression, CriteriaOperator op, CriteriaToExpressionConverterEventsHelper eventsHelper);
}
public interface DevExpress.Data.Linq.IQueryableProvider {
    public IQueryable Queryable { get; }
    public abstract virtual IQueryable get_Queryable();
    [CompilerGeneratedAttribute]
public abstract virtual void add_QueryableChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_QueryableChanged(EventHandler value);
}
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to any queryable source ('LINQ to SQL Classes') in Instant Feedback Mode.")]
[DefaultEventAttribute("GetQueryable")]
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.LinqInstantFeedbackSource.bmp")]
[DesignerAttribute("DevExpress.Design.InstantFeedbackSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class DevExpress.Data.Linq.LinqInstantFeedbackSource : Component {
    private Type _ElementType;
    private string _KeyExpression;
    private string _DefaultSorting;
    private bool _AreSourceRowsThreadSafe;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetQueryableEventArgs> GetQueryable;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetQueryableEventArgs> DismissQueryable;
    private AsyncListServer2DatacontrollerProxy _AsyncListServer;
    private AsyncListDesignTimeWrapper _DTWrapper;
    private IList _List;
    private Nullable`1<bool> _isDesignMode;
    private bool IsDisposed;
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Data.Linq.Helpers.LinqServerModeSourceObjectTypeConverter")]
[CategoryAttribute("Design")]
[DescriptionAttribute("Specifies the type of objects that will be retrieved from a data source, at design time.")]
public Type DesignTimeElementType { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the name of the key property.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceKeyExpressionEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string KeyExpression { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default, when sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies whether elements retrieved by the LinqInstantFeedbackSource‘s queryable source are thread-safe.")]
public bool AreSourceRowsThreadSafe { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public LinqInstantFeedbackSource(EventHandler`1<GetQueryableEventArgs> getQueryable);
    public LinqInstantFeedbackSource(EventHandler`1<GetQueryableEventArgs> getQueryable, EventHandler`1<GetQueryableEventArgs> freeQueryable);
    public LinqInstantFeedbackSource(Action`1<GetQueryableEventArgs> getQueryable);
    public LinqInstantFeedbackSource(Action`1<GetQueryableEventArgs> getQueryable, Action`1<GetQueryableEventArgs> freeQueryable);
    private static EventHandler`1<T> ToEventHandler(Action`1<T> action);
    public Type get_DesignTimeElementType();
    public void set_DesignTimeElementType(Type value);
    private void FillKeyExpression();
    public string get_KeyExpression();
    public void set_KeyExpression(string value);
    public string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    public bool get_AreSourceRowsThreadSafe();
    public void set_AreSourceRowsThreadSafe(bool value);
    private void TestCanChangeProperties();
    private void ForceCatchUp();
    [CompilerGeneratedAttribute]
public void add_GetQueryable(EventHandler`1<GetQueryableEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GetQueryable(EventHandler`1<GetQueryableEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DismissQueryable(EventHandler`1<GetQueryableEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DismissQueryable(EventHandler`1<GetQueryableEventArgs> value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private AsyncListDesignTimeWrapper CreateDesignTimeWrapper();
    private AsyncListServer2DatacontrollerProxy CreateRunTimeProxy();
    private AsyncListServerCore CreateAsyncListServerCore();
    private void listServerGet(object sender, ListServerGetOrFreeEventArgs e);
    private void listServerFree(object sender, ListServerGetOrFreeEventArgs e);
    private void getTypeInfo(object sender, GetTypeInfoEventArgs e);
    private void getPropertyDescriptors(object sender, GetPropertyDescriptorsEventArgs e);
    private void getWorkerRowInfo(object sender, GetWorkerThreadRowInfoEventArgs e);
    private void getUIRow(object sender, GetUIThreadRowEventArgs e);
    protected virtual void Dispose(bool disposing);
    public void Refresh();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual LinqInstantFeedbackSource DXCloneCreate();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object ExtractOriginalRow(object uiThreadRow);
}
public class DevExpress.Data.Linq.LinqServerModeExceptionThrownEventArgs : EventArgs {
    private Exception _Exception;
    public Exception Exception { get; }
    public LinqServerModeExceptionThrownEventArgs(Exception exception);
    public Exception get_Exception();
}
public class DevExpress.Data.Linq.LinqServerModeExceptionThrownEventHandler : MulticastDelegate {
    public LinqServerModeExceptionThrownEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LinqServerModeExceptionThrownEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LinqServerModeExceptionThrownEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.Linq.LinqServerModeInconsistencyDetectedEventArgs : EventArgs {
    private bool _handled;
    public bool Handled { get; public set; }
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class DevExpress.Data.Linq.LinqServerModeInconsistencyDetectedEventHandler : MulticastDelegate {
    public LinqServerModeInconsistencyDetectedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LinqServerModeInconsistencyDetectedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LinqServerModeInconsistencyDetectedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.LinqServerModeSource.bmp")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to any IQueryable query provider in server mode.")]
[DesignerAttribute("DevExpress.Design.ServerModeSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class DevExpress.Data.Linq.LinqServerModeSource : Component {
    private EventHandler`1<ErrorEventArgs> ErrorOccurred;
    private LinqServerModeFrontEnd _List;
    private Type _ElementType;
    private string _KeyExpression;
    private string _DefaultSorting;
    private IQueryable _QueryableSource;
    private int _initCount;
    [CompilerGeneratedAttribute]
private LinqServerModeExceptionThrownEventHandler ExceptionThrown;
    [CompilerGeneratedAttribute]
private LinqServerModeInconsistencyDetectedEventHandler InconsistencyDetected;
    private Nullable`1<bool> _isDesignMode;
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private LinqServerModeFrontEnd List { get; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the type of objects retrieved from a data source.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Data.Linq.Helpers.LinqServerModeSourceObjectTypeConverter")]
public Type ElementType { get; public set; }
    [DescriptionAttribute("Gets or sets the key expression.")]
[CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[EditorAttribute("DevExpress.Design.ServerModeSourceKeyExpressionEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string KeyExpression { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default, when sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.ServerModeSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    [DescriptionAttribute("Gets or sets the queryable data source.")]
[CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public IQueryable QueryableSource { get; public set; }
    private Type DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.ElementType { get; }
    private IQueryable DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.QueryableSource { get; }
    private string DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.KeyExpression { get; }
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.add_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.remove_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual LinqServerModeSource DXCloneCreate();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private LinqServerModeFrontEnd get_List();
    public void Reload();
    protected virtual LinqServerModeFrontEnd CreateList();
    private void ForceCatchUp();
    public Type get_ElementType();
    public void set_ElementType(Type value);
    private void FillKeyExpression();
    public string get_KeyExpression();
    public void set_KeyExpression(string value);
    public sealed virtual string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    public IQueryable get_QueryableSource();
    public void set_QueryableSource(IQueryable value);
    private bool IsInitialized();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private void _List_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private void _List_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ExceptionThrown(LinqServerModeExceptionThrownEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionThrown(LinqServerModeExceptionThrownEventHandler value);
    [CompilerGeneratedAttribute]
public void add_InconsistencyDetected(LinqServerModeInconsistencyDetectedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_InconsistencyDetected(LinqServerModeInconsistencyDetectedEventHandler value);
    protected virtual void OnExceptionThrown(LinqServerModeExceptionThrownEventArgs e);
    protected virtual void OnInconsistencyDetected(LinqServerModeInconsistencyDetectedEventArgs e);
    private sealed virtual override Type DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.get_ElementType();
    private sealed virtual override IQueryable DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.get_QueryableSource();
    private sealed virtual override bool DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.IsReadyForTakeOff();
    private sealed virtual override string DevExpress.Data.Linq.Helpers.ILinqServerModeFrontEndOwner.get_KeyExpression();
    [CompilerGeneratedAttribute]
private void <_List_InconsistencyDetected>b__38_0();
}
public class DevExpress.Data.ListSortInfo : object {
    private string propertyName;
    private ListSortDirection sortDirection;
    public string PropertyName { get; }
    public ListSortDirection SortDirection { get; }
    public ListSortInfo(string propertyName, ListSortDirection sortDirection);
    public string get_PropertyName();
    public ListSortDirection get_SortDirection();
}
public class DevExpress.Data.ListSourceDataController : BaseListSourceDataController {
    public IList ListSource { get; public set; }
    public IList get_ListSource();
    public void set_ListSource(IList value);
    public void SetListSource(object context, object dataSource, string dataMember);
    public virtual int EndNewRowEdit();
    public virtual void CancelNewRowEdit();
    public virtual void AddNewRow();
}
public class DevExpress.Data.ListSourceGroupInfo : object {
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildDataRowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private object <GroupValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <AuxValue>k__BackingField;
    public int Level { get; public set; }
    public int ChildDataRowCount { get; public set; }
    public object GroupValue { get; public set; }
    public object AuxValue { get; public set; }
    public List`1<object> Summary { get; }
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public int get_ChildDataRowCount();
    [CompilerGeneratedAttribute]
public void set_ChildDataRowCount(int value);
    [CompilerGeneratedAttribute]
public object get_GroupValue();
    [CompilerGeneratedAttribute]
public void set_GroupValue(object value);
    [CompilerGeneratedAttribute]
public object get_AuxValue();
    [CompilerGeneratedAttribute]
public void set_AuxValue(object value);
    public virtual List`1<object> get_Summary();
}
public class DevExpress.Data.ListSourceSummaryItem : object {
    private SummaryItemType summaryType;
    private DataColumnInfo info;
    private SummaryItem item;
    internal SummaryItem Item { get; internal set; }
    public SummaryItemType SummaryType { get; public set; }
    public DataColumnInfo Info { get; public set; }
    internal ListSourceSummaryItem(SummaryItem item);
    public ListSourceSummaryItem(DataColumnInfo info, SummaryItemType summaryType);
    internal SummaryItem get_Item();
    internal void set_Item(SummaryItem value);
    public SummaryItemType get_SummaryType();
    public void set_SummaryType(SummaryItemType value);
    public DataColumnInfo get_Info();
    public void set_Info(DataColumnInfo value);
}
[ToolboxItemAttribute("False")]
public class DevExpress.Data.Localization.CommonLocalizer : XtraLocalizer`1<CommonStringId> {
    internal static CommonLocalizer Default;
    public static XtraLocalizer`1<CommonStringId> Active { get; public set; }
    private static CommonLocalizer();
    public static XtraLocalizer`1<CommonStringId> get_Active();
    public static void set_Active(XtraLocalizer`1<CommonStringId> value);
    public static XtraLocalizer`1<CommonStringId> CreateDefaultLocalizer();
    public static string GetString(CommonStringId id);
    public virtual XtraLocalizer`1<CommonStringId> CreateResXLocalizer();
    protected virtual void PopulateStringTable();
    private void AddStrings();
}
[ToolboxItemAttribute("False")]
public class DevExpress.Data.Localization.CommonResLocalizer : XtraResXLocalizer`1<CommonStringId> {
    protected virtual ResourceManager CreateResourceManagerCore();
}
public enum DevExpress.Data.Localization.CommonStringId : Enum {
    public int value__;
    public static CommonStringId UriSecurityAccessExceptionMessage;
    public static CommonStringId UriSecurityAccessExceptionMessageShort;
    public static CommonStringId InvalidUriExceptionMessage;
    public static CommonStringId ConnectionNotFoundInConfig_ExceptionMessage;
    [ObsoleteAttribute("This value is no longer used. Use the PropertyGridDesignCategoryName value from the DataAccessStringId enumeration instead.")]
[DXHelpExcludeAttribute("True")]
public static CommonStringId PropertyGridDesignCategoryName;
}
public class DevExpress.Data.MailMergeFieldInfo : object {
    public static char FormatStringDelimiter;
    public static char OpeningBracket;
    public static char ClosingBracket;
    private int startPosition;
    private int endPosition;
    private string fieldName;
    private string displayName;
    private string rawFormatString;
    private string dataMember;
    public int StartPosition { get; public set; }
    public int EndPosition { get; public set; }
    public string FieldName { get; public set; }
    public string TrimmedFieldName { get; }
    public string DisplayName { get; public set; }
    public string FormatString { get; }
    public string DataMember { get; public set; }
    public bool HasFormatStringInfo { get; }
    public MailMergeFieldInfo(MailMergeFieldInfo mailMergeFieldInfo);
    public static string MakeFormatString(string str);
    public static string WrapColumnInfoInBrackets(string columnName);
    public static string WrapColumnInfoInBrackets(string columnName, string formatString);
    public int get_StartPosition();
    public void set_StartPosition(int value);
    public int get_EndPosition();
    public void set_EndPosition(int value);
    public string get_FieldName();
    public void set_FieldName(string value);
    public string get_TrimmedFieldName();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_FormatString();
    public string get_DataMember();
    public void set_DataMember(string value);
    public bool get_HasFormatStringInfo();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Data.MailMergeFieldInfoCollection : Collection`1<MailMergeFieldInfo> {
}
[ObsoleteAttribute("Use the MailMergeFieldInfo class instead")]
public class DevExpress.Data.MailMergeFieldInfoValue : MailMergeFieldInfo {
    public MailMergeFieldInfoValue(MailMergeFieldInfo mailMergeFieldInfoValue);
}
public abstract class DevExpress.Data.Mask.CompositeMaskManager`1 : MaskManager {
    protected MaskManager[] Parts;
    protected int Index;
    protected MaskManager ActivePart { get; }
    public string DisplayText { get; }
    protected int ActiveDisplayOffset { get; }
    public int DisplayCursorPosition { get; }
    public int DisplaySelectionAnchor { get; }
    public bool CanUndo { get; }
    protected CompositeMaskManager`1(CultureInfo cultureInfo);
    protected abstract virtual MaskManager[] CreateParts(CultureInfo cultureInfo);
    protected abstract virtual string GetPartsSeparator(int partIndex);
    protected abstract virtual TMaskedValue CombinePartsValue();
    protected abstract virtual int SetPartsInitialEditValue(TMaskedValue value);
    protected abstract virtual int SetPartsInitialEmptyValue();
    private void Part_LocalEditAction(object sender, CancelEventArgs e);
    private void Part_EditTextChanging(object sender, MaskChangingEventArgs e);
    private void Part_EditTextChanged(object sender, EventArgs e);
    protected MaskManager get_ActivePart();
    public virtual string GetCurrentEditText();
    public virtual object GetCurrentEditValue();
    public virtual void SetInitialEditText(string initialEditText);
    public virtual void SetInitialEditValue(object initialEditValue);
    public virtual string get_DisplayText();
    protected int get_ActiveDisplayOffset();
    public virtual int get_DisplayCursorPosition();
    public virtual int get_DisplaySelectionAnchor();
    public virtual bool get_CanUndo();
    public virtual bool Backspace();
    public virtual bool CursorEnd(bool forceSelection);
    public virtual bool CursorHome(bool forceSelection);
    public virtual bool CursorMoveNear(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorMoveFar(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorToDisplayPosition(int newPosition, bool forceSelection);
    public virtual bool Delete();
    public virtual bool Insert(string insertion);
    public virtual void SelectAll();
    public virtual bool FlushPendingEditActions();
    public virtual bool SpinDown();
    public virtual bool SpinUp();
    public virtual bool Undo();
}
public enum DevExpress.Data.Mask.CustomTextMaskInputAction : Enum {
    public int value__;
    public static CustomTextMaskInputAction Init;
    public static CustomTextMaskInputAction Insert;
    public static CustomTextMaskInputAction Delete;
    public static CustomTextMaskInputAction Backspace;
    public static CustomTextMaskInputAction SpinUp;
    public static CustomTextMaskInputAction SpinDown;
}
public class DevExpress.Data.Mask.CustomTextMaskInputArgs : EventArgs {
    private object fTag;
    private string fResultEditText;
    private int fResultCursorPosition;
    private Nullable`1<int> fResultSelectionAnchor;
    private bool fIsCanceled;
    private string head;
    private string selectedText;
    private string tail;
    private MaskManagerTextState State;
    private CustomTextMaskInputAction fAction;
    private string fInsertedText;
    public object Tag { get; }
    public CustomTextMaskInputAction ActionType { get; }
    public string ResultEditText { get; }
    public int ResultCursorPosition { get; }
    public Nullable`1<int> ResultSelectionAnchor { get; }
    public bool IsCanceled { get; }
    public string CurrentEditText { get; }
    public int CurrentCursorPosition { get; }
    public int CurrentSelectionAnchor { get; }
    public int CurrentSelectionStart { get; }
    public int CurrentSelectionEnd { get; }
    public bool IsSelection { get; }
    public string InsertedText { get; }
    public string CurrentHead { get; }
    public string CurrentSelectedText { get; }
    public string CurrentTail { get; }
    protected internal CustomTextMaskInputArgs(object tag, MaskManagerTextState state, CustomTextMaskInputAction action, string insertedText);
    public object get_Tag();
    public CustomTextMaskInputAction get_ActionType();
    public string get_ResultEditText();
    public int get_ResultCursorPosition();
    public Nullable`1<int> get_ResultSelectionAnchor();
    public bool get_IsCanceled();
    public string get_CurrentEditText();
    public int get_CurrentCursorPosition();
    public int get_CurrentSelectionAnchor();
    public int get_CurrentSelectionStart();
    public int get_CurrentSelectionEnd();
    public bool get_IsSelection();
    private void CheckSplittedTexts();
    public string get_InsertedText();
    public string get_CurrentHead();
    public string get_CurrentSelectedText();
    public string get_CurrentTail();
    private void SetResult(bool isCanceled, string editText, int cursorPosition, Nullable`1<int> selectionAnchor);
    public void SetResult(string editText, int cursorPosition, Nullable`1<int> selectionAnchor);
    public void Cancel();
    public void SetResult(string newHead, string newTail);
    public virtual string ToString();
}
[AutoInstallAttribute]
public class DevExpress.Data.Mask.CustomTextMaskManager : TextMaskManagerCore {
    protected object Tag;
    private EventHandler`1<CustomTextMaskInputArgs> Handler;
    public bool IsEditValueAssignedAsFormattedText { get; }
    [EditorBrowsableAttribute("1")]
[ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.CustomTextMaskManager", "Mask for custom text input")]
public CustomTextMaskManager(EventHandler`1<CustomTextMaskInputArgs> handler, object tag);
    protected CustomTextMaskManager(object tag);
    private CustomTextMaskInputArgs CreateEventArgs(CustomTextMaskInputAction actionType, string insertedText);
    protected virtual void ProcessCustomTextMaskInput(CustomTextMaskInputArgs ea);
    private bool DoCore(CustomTextMaskInputArgs ea, MaskManagerStateChangeType changeType);
    public virtual bool Backspace();
    public virtual bool Delete();
    public virtual bool Insert(string insertedText);
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    protected virtual MaskLogicResult GetInitialStateFromText(string editTextAssigned);
    public virtual bool get_IsEditValueAssignedAsFormattedText();
}
public class DevExpress.Data.Mask.DateOnlyMaskManager : BaseDateTimeMaskManager {
    [IgnoreAttribute]
public DateOnlyMaskManager(Configuration config, bool allowNull);
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.DateOnlyMaskManager", "DateOnly", "allowNull", "Mono.Cecil.CustomAttributeArgument")]
public DateOnlyMaskManager(string mask, Nullable`1<bool> useAdvancingCaret, CultureInfo culture, bool allowNull, Nullable`1<bool> spinWithCarry);
}
public class DevExpress.Data.Mask.DateTimeMaskManager : BaseDateTimeMaskManager {
    [IgnoreAttribute]
public DateTimeMaskManager(Configuration config, bool allowNull);
    [IgnoreAttribute]
[ObsoleteAttribute("Use DateTimeMaskManager(Configuration config, bool allowNull) instead", "True")]
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DateTimeMaskManager(bool isOffsetMask, Configuration config, bool allowNull);
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.DateTimeMaskManager", "DateTime", "allowNull", "Mono.Cecil.CustomAttributeArgument")]
public DateTimeMaskManager(string mask, Nullable`1<bool> useAdvancingCaret, CultureInfo culture, bool allowNull, Nullable`1<bool> spinWithCarry, Nullable`1<DateTime> defaultDateTime);
}
public class DevExpress.Data.Mask.DateTimeOffsetMaskManager : BaseDateTimeMaskManager {
    [IgnoreAttribute]
public DateTimeOffsetMaskManager(Configuration config, bool allowNull);
    [IgnoreAttribute]
[ObsoleteAttribute("Use DateTimeOffsetMaskManager(Configuration config, bool allowNull) instead", "True")]
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DateTimeOffsetMaskManager(bool isOffsetMask, Configuration config, bool allowNull);
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.DateTimeOffsetMaskManager", "DateTime with Offset", "allowNull", "Mono.Cecil.CustomAttributeArgument")]
public DateTimeOffsetMaskManager(string mask, Nullable`1<bool> useAdvancingCaret, CultureInfo culture, bool allowNull, Nullable`1<bool> spinWithCarry);
}
public class DevExpress.Data.Mask.Internal.AnySymbolTransition : Transition {
    private AnySymbolTransition(State target);
    public virtual bool IsMatch(char input);
    public virtual Transition Copy(State target);
    public virtual string ToString();
    public virtual char GetSampleChar();
}
public class DevExpress.Data.Mask.Internal.AutoCompleteInfo : object {
    private NfaAutoCompleteType autoCompleteType;
    private char autoCompleteChar;
    public NfaAutoCompleteType NfaAutoCompleteType { get; }
    public char AutoCompleteChar { get; }
    public AutoCompleteInfo(NfaAutoCompleteType autoCompleteType, char autoCompleteChar);
    public NfaAutoCompleteType get_NfaAutoCompleteType();
    public char get_AutoCompleteChar();
}
public abstract class DevExpress.Data.Mask.Internal.BaseDateTimeMaskManager : MaskManagerSelectAllEnhancer`1<DateTimeMaskManagerCore> {
    public static bool DoNotClearValueOnInsertAfterSelectAll;
    protected bool IsNestedCanSelectAll { get; }
    protected BaseDateTimeMaskManager(DateTimeMaskManagerCore coreManager);
    protected BaseDateTimeMaskManager(DateTimeMaskValueKind maskValueKind, Configuration config, bool allowNull);
    protected virtual bool get_IsNestedCanSelectAll();
    protected virtual bool MakeChange(Func`1<bool> changeWithTrueWhenSuccessfull);
    protected virtual bool MakeCursorOp(Func`1<bool> cursorOpWithTrueWhenSuccessfull);
    private static bool IsGoodCalendar(Calendar calendar);
    public static DateTimeFormatInfo GetGoodCalendarDateTimeFormatInfo(CultureInfo inputCulture);
    public virtual bool Backspace();
    public virtual bool Delete();
}
public class DevExpress.Data.Mask.Internal.BracketTransition : Transition {
    private bool notMatch;
    private BracketTransitionRange[] ranges;
    public bool IsExact { get; }
    private BracketTransition(State target, bool notMatch, BracketTransitionRange[] ranges);
    public BracketTransition(bool notMatch, BracketTransitionRange[] ranges);
    public virtual bool IsMatch(char input);
    public virtual Transition Copy(State target);
    public virtual string ToString();
    public virtual bool get_IsExact();
    public virtual char GetSampleChar();
}
public class DevExpress.Data.Mask.Internal.BracketTransitionRange : ValueType {
    public char From;
    public char To;
    public BracketTransitionRange(char from, char to);
}
public abstract class DevExpress.Data.Mask.Internal.DateTimeElementEditor : object {
    public string DisplayText { get; }
    public bool FinalOperatorInsert { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual bool Insert(string inserted);
    public abstract virtual bool Delete();
    public abstract virtual int GetResult();
    public abstract virtual bool SpinUp();
    public abstract virtual bool SpinDown();
    public abstract virtual bool get_FinalOperatorInsert();
}
public class DevExpress.Data.Mask.Internal.DateTimeElementEditorAmPm : DateTimeElementEditor {
    public static int AMValue;
    public static int PMValue;
    protected string AMDesignator;
    protected string PMDesignator;
    protected string AMShort;
    protected string PMShort;
    private int fResult;
    private string fMask;
    public string DisplayText { get; }
    public bool FinalOperatorInsert { get; }
    public DateTimeElementEditorAmPm(string mask, int initialValue, string am, string pm);
    public virtual string get_DisplayText();
    public virtual bool Insert(string inserted);
    public virtual bool get_FinalOperatorInsert();
    public virtual bool Delete();
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    public virtual int GetResult();
}
public class DevExpress.Data.Mask.Internal.DateTimeElementEditorOffsetSignAndHour : DateTimeElementEditor {
    private DateTimeNumericRangeElementEditor Nested;
    private Nullable`1<bool> currentNegativeSign;
    private bool doNotResetSign;
    public bool FinalOperatorInsert { get; }
    public string DisplayText { get; }
    public DateTimeElementEditorOffsetSignAndHour(Tuple`2<bool, int> initialValue, int minDigits);
    private bool SetCurrentSigns(Nullable`1<bool> negativeSign, bool doNotReset);
    public virtual bool Delete();
    public virtual bool get_FinalOperatorInsert();
    public static int PackResult(Tuple`2<bool, int> result);
    public static Tuple`2<bool, int> UnpackResult(int packedResult);
    public virtual int GetResult();
    public virtual string get_DisplayText();
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    public virtual bool Insert(string inserted);
}
public static class DevExpress.Data.Mask.Internal.DateTimeFormatHelper : object {
    public static string GetDateSeparator(CultureInfo culture);
    public static string GetTimeSeparator(CultureInfo culture);
}
public abstract class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement : object {
    protected DateTimeFormatInfo DateTimeFormatInfo;
    public DateTimePart DateTimePart { get; }
    public bool Editable { get; }
    protected DateTimeMaskFormatElement(DateTimeFormatInfo dateTimeFormatInfo);
    public abstract virtual DateTimePart get_DateTimePart();
    public abstract virtual string Format(DateTimeMaskValueEnvelope formattedDateTime);
    public abstract virtual bool get_Editable();
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_AmPm : DateTimeMaskFormatElementEditableTime {
    protected long TicksPerPart { get; }
    protected int MaxParts { get; }
    public DateTimeMaskFormatElement_AmPm(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    protected virtual long get_TicksPerPart();
    protected virtual int get_MaxParts();
    public virtual DateTimeElementEditor CreateElementEditor(DateTimeMaskValueEnvelope editedDateTime);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_d : DateTimeMaskFormatElementEditable {
    private DateTimeMaskFormatElementContext context;
    public static bool EnforceStrictMonthPriority;
    public static bool EnforceStrictMonthAndYearPriority;
    public static Nullable`1<DateAdjustmentStrategy> InvalidDateAdjustmentStrategy;
    public DateTimePart DateTimePart { get; }
    public DateTimeMaskFormatElement_d(string mask, DateTimeFormatInfo dateTimeFormatInfo, DateTimeMaskFormatElementContext context);
    public virtual DateTimePart get_DateTimePart();
    public virtual DateTimeElementEditor CreateElementEditor(DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope ApplyElement(int result, DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope FixSpecificPart(DateTimeMaskValueEnvelope src);
    public virtual DateTimeMaskValueEnvelope SpinWithCarryCore(DateTimeMaskValueEnvelope src, bool isDown);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_h12 : DateTimeMaskFormatElementEditableTime {
    protected long TicksPerPart { get; }
    protected int MaxParts { get; }
    protected int MinEditorValue { get; }
    public DateTimeMaskFormatElement_h12(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    protected virtual long get_TicksPerPart();
    protected virtual int get_MaxParts();
    protected virtual int get_MinEditorValue();
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_H24 : DateTimeMaskFormatElementEditableTime {
    protected long TicksPerPart { get; }
    protected int MaxParts { get; }
    public DateTimeMaskFormatElement_H24(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    protected virtual long get_TicksPerPart();
    protected virtual int get_MaxParts();
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_Millisecond : DateTimeMaskFormatElementEditableTime {
    protected int ElementLength { get; }
    protected long TicksPerPart { get; }
    protected int MaxParts { get; }
    protected int MinLength { get; }
    protected int MaxLength { get; }
    public DateTimeMaskFormatElement_Millisecond(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    private static int Pow10(int power);
    protected int get_ElementLength();
    protected virtual long get_TicksPerPart();
    protected virtual int get_MaxParts();
    protected virtual int get_MinLength();
    protected virtual int get_MaxLength();
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_Min : DateTimeMaskFormatElementEditableTime {
    protected long TicksPerPart { get; }
    protected int MaxParts { get; }
    public DateTimeMaskFormatElement_Min(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    protected virtual long get_TicksPerPart();
    protected virtual int get_MaxParts();
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_Month : DateTimeMaskFormatElementEditable {
    private DateTimeMaskFormatElementContext context;
    private DateTimeMaskFormatGlobalContext monthNamesDeterminator;
    private String[] _MonthNames;
    protected String[] MonthNames { get; }
    public DateTimePart DateTimePart { get; }
    public DateTimeMaskFormatElement_Month(string mask, DateTimeFormatInfo dateTimeFormatInfo, DateTimeMaskFormatGlobalContext globalContext);
    protected String[] get_MonthNames();
    public virtual DateTimePart get_DateTimePart();
    public virtual string Format(DateTimeMaskValueEnvelope formattedDateTime);
    public virtual DateTimeElementEditor CreateElementEditor(DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope ApplyElement(int result, DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope FixSpecificPart(DateTimeMaskValueEnvelope src);
    public virtual DateTimeMaskValueEnvelope SpinWithCarryCore(DateTimeMaskValueEnvelope src, bool isDown);
    public virtual bool WouldApplyElementCorruptLesserElementsForSpinCarry(int result, DateTimeMaskValueEnvelope editedDateTime);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_OffsetMin : DateTimeMaskFormatElementEditable {
    public DateTimePart DateTimePart { get; }
    public DateTimeMaskFormatElement_OffsetMin(DateTimeFormatInfo dateTimeFormatInfo);
    public virtual DateTimePart get_DateTimePart();
    public virtual string Format(DateTimeMaskValueEnvelope formattedDateTime);
    public virtual DateTimeElementEditor CreateElementEditor(DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope ApplyElement(int result, DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope FixSpecificPart(DateTimeMaskValueEnvelope src);
    public virtual DateTimeMaskValueEnvelope SpinWithCarryCore(DateTimeMaskValueEnvelope src, bool isDown);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_OffsetSignedHour : DateTimeMaskFormatElementEditable {
    public DateTimePart DateTimePart { get; }
    public DateTimeMaskFormatElement_OffsetSignedHour(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    public virtual DateTimePart get_DateTimePart();
    public virtual string Format(DateTimeMaskValueEnvelope formattedDateTime);
    public virtual DateTimeElementEditor CreateElementEditor(DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope ApplyElement(int result, DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope FixSpecificPart(DateTimeMaskValueEnvelope src);
    public virtual DateTimeMaskValueEnvelope SpinWithCarryCore(DateTimeMaskValueEnvelope src, bool isDown);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_s : DateTimeMaskFormatElementEditableTime {
    protected long TicksPerPart { get; }
    protected int MaxParts { get; }
    public DateTimeMaskFormatElement_s(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    protected virtual long get_TicksPerPart();
    protected virtual int get_MaxParts();
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement_Year : DateTimeMaskFormatElementEditable {
    public DateTimePart DateTimePart { get; }
    public DateTimeMaskFormatElement_Year(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    public virtual DateTimePart get_DateTimePart();
    public virtual DateTimeElementEditor CreateElementEditor(DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope ApplyElement(int result, DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope FixSpecificPart(DateTimeMaskValueEnvelope src);
    public virtual DateTimeMaskValueEnvelope SpinWithCarryCore(DateTimeMaskValueEnvelope src, bool isDown);
    public virtual bool WouldApplyElementCorruptLesserElementsForSpinCarry(int result, DateTimeMaskValueEnvelope editedDateTime);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElementContext : ValueType {
    public bool YearProcessed;
    public bool MonthProcessed;
    public bool DayProcessed;
}
public abstract class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElementEditable : DateTimeMaskFormatElementFormattableByMask {
    public bool Editable { get; }
    protected DateTimeMaskFormatElementEditable(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    public sealed virtual bool get_Editable();
    public abstract virtual DateTimeElementEditor CreateElementEditor(DateTimeMaskValueEnvelope editedDateTime);
    public abstract virtual DateTimeMaskValueEnvelope ApplyElement(int result, DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope FixSpecificPart(DateTimeMaskValueEnvelope src);
    public virtual DateTimeMaskValueEnvelope SpinWithCarryCore(DateTimeMaskValueEnvelope src, bool isDown);
    public virtual bool WouldApplyElementCorruptLesserElementsForSpinCarry(int result, DateTimeMaskValueEnvelope editedDateTime);
}
public abstract class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElementEditableTime : DateTimeMaskFormatElementEditable {
    public DateTimePart DateTimePart { get; }
    protected long TicksPerPart { get; }
    protected int MaxParts { get; }
    protected int MinEditorValue { get; }
    protected int MaxLength { get; }
    protected int MinLength { get; }
    public DateTimeMaskFormatElementEditableTime(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    public sealed virtual DateTimePart get_DateTimePart();
    protected abstract virtual long get_TicksPerPart();
    protected abstract virtual int get_MaxParts();
    protected virtual int PartToEditorValue(int partValue);
    protected virtual int EditorResultToPart(int editorResult);
    protected virtual int get_MinEditorValue();
    protected virtual int get_MaxLength();
    protected virtual int get_MinLength();
    public virtual DateTimeElementEditor CreateElementEditor(DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope ApplyElement(int result, DateTimeMaskValueEnvelope editedDateTime);
    public virtual DateTimeMaskValueEnvelope FixSpecificPart(DateTimeMaskValueEnvelope src);
    public virtual DateTimeMaskValueEnvelope SpinWithCarryCore(DateTimeMaskValueEnvelope src, bool isDown);
}
public abstract class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElementFormattableByMask : DateTimeMaskFormatElement {
    private string fMask;
    public string Mask { get; }
    public DateTimeMaskFormatElementFormattableByMask(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    public string get_Mask();
    public virtual string Format(DateTimeMaskValueEnvelope formattedDateTime);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElementLiteral : DateTimeMaskFormatElement {
    protected string fLiteral;
    public DateTimePart DateTimePart { get; }
    public bool Editable { get; }
    public string Literal { get; }
    public DateTimeMaskFormatElementLiteral(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    public virtual DateTimePart get_DateTimePart();
    public virtual bool get_Editable();
    public string get_Literal();
    public virtual string Format(DateTimeMaskValueEnvelope formattedDateTime);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatElementNonEditable : DateTimeMaskFormatElementFormattableByMask {
    private DateTimePart dateTimePart;
    public DateTimePart DateTimePart { get; }
    public bool Editable { get; }
    public DateTimeMaskFormatElementNonEditable(string mask, DateTimeFormatInfo dateTimeFormatInfo, DateTimePart dateTimePart);
    public virtual DateTimePart get_DateTimePart();
    public sealed virtual bool get_Editable();
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatGlobalContext : object {
    public DateTimeMaskFormatElementContext Value;
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Mask.Internal.DateTimeMaskFormatInfo : object {
    protected IList`1<DateTimeMaskFormatElement> innerList;
    private static bool warning_thrown_yyyymmdd;
    public int Count { get; }
    public DateTimeMaskFormatElement Item { get; }
    public DateTimePart DateTimeParts { get; }
    [ObsoleteAttribute("Use non-obsolete overload(s)", "True")]
public DateTimeMaskFormatInfo(string mask, DateTimeFormatInfo dateTimeFormatInfo);
    public DateTimeMaskFormatInfo(DateTimeMaskValueKind maskValueKind, string mask, DateTimeFormatInfo dateTimeFormatInfo);
    protected DateTimeMaskFormatInfo(DateTimeMaskValueKind maskValueKind, string mask, DateTimeFormatInfo dateTimeFormatInfo, object parameter);
    public int get_Count();
    private sealed virtual override IEnumerator`1<DateTimeMaskFormatElement> System.Collections.Generic.IEnumerable<DevExpress.Data.Mask.Internal.DateTimeMaskFormatElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public DateTimeMaskFormatElement get_Item(int index);
    private static int GetGroupLength(string mask);
    [IteratorStateMachineAttribute("DevExpress.Data.Mask.Internal.DateTimeMaskFormatInfo/<ParseFormatString>d__8")]
private static IEnumerable`1<DateTimeMaskFormatElement> ParseFormatString(DateTimeMaskValueKind maskValueKind, string mask, DateTimeFormatInfo dateTimeFormatInfo);
    public static string GetDefaultFormatForKind(DateTimeMaskValueKind maskValueKind, DateTimeFormatInfo info);
    private static string ExpandFormat(DateTimeMaskValueKind maskValueKind, string format, DateTimeFormatInfo info);
    protected virtual IList`1<DateTimeMaskFormatElement> ParseFormatStringCore(DateTimeMaskValueKind maskValueKind, string mask, DateTimeFormatInfo dateTimeFormatInfo, object parameter);
    private static void WarnTypicalProblems(IEnumerable`1<DateTimeMaskFormatElement> formatElements, string mask);
    public string Format(DateTimeMaskValueEnvelope formatted);
    public string Format(DateTimeMaskValueEnvelope formatted, int startFormatIndex, int endFormatIndex);
    public DateTimePart get_DateTimeParts();
    public static string RemoveTimePartFromTheMask(string patchedMask, IFormatProvider formatProvider);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskManagerCore : MaskManager {
    protected bool IsOperatorMask;
    protected bool SpinWithCarry;
    protected Nullable`1<DateTimeMaskValueEnvelope> fCurrentValue;
    protected Nullable`1<DateTimeMaskValueEnvelope> fUndoValue;
    protected Nullable`1<DateTimeMaskValueEnvelope> fInitialEditValue;
    protected DateTimeMaskFormatInfo fFormatInfo;
    protected int fSelectedFormatInfoIndex;
    protected DateTimeElementEditor fCurrentElementEditor;
    protected string fInitialMask;
    protected DateTimeFormatInfo fInitialDateTimeFormatInfo;
    protected bool AllowNull;
    protected Func`1<object> fGetClearEditValue;
    protected DateTimeMaskValueKind MaskValueKind;
    protected DateTime DefaultDateTime;
    private DateTimeMaskValueEnvelope cachedValue;
    private int cachedIndex;
    private int cachedDCP;
    private int cachedDSA;
    private string cachedDT;
    public static bool AlwaysTodayOnClearSelectAll;
    protected Nullable`1<DateTimeMaskValueEnvelope> CurrentValue { get; }
    protected Nullable`1<DateTimeMaskValueEnvelope> UndoValue { get; }
    protected DateTimeMaskValueEnvelope NonEmptyCurrentValue { get; }
    protected internal DateTimeMaskFormatInfo FormatInfo { get; }
    protected int SelectedFormatInfoIndex { get; }
    protected DateTimeMaskFormatElementEditable SelectedElement { get; }
    protected bool IsElementEdited { get; }
    public string DisplayText { get; }
    public int DisplayCursorPosition { get; }
    public int DisplaySelectionAnchor { get; }
    public bool CanUndo { get; }
    public DateTimeMaskManagerCore(DateTimeMaskValueKind maskValueKind, string mask, bool isOperatorMask, CultureInfo culture, bool allowNull, bool spinWithCarry, Func`1<object> getClearEditValue, Nullable`1<DateTime> defaultDateTime);
    protected Nullable`1<DateTimeMaskValueEnvelope> get_CurrentValue();
    protected Nullable`1<DateTimeMaskValueEnvelope> get_UndoValue();
    protected DateTimeMaskValueEnvelope get_NonEmptyCurrentValue();
    protected internal DateTimeMaskFormatInfo get_FormatInfo();
    protected int get_SelectedFormatInfoIndex();
    protected DateTimeMaskFormatElementEditable get_SelectedElement();
    protected bool get_IsElementEdited();
    protected DateTimeElementEditor GetCurrentElementEditor();
    protected void KillCurrentElementEditor();
    protected bool ApplyCurrentElementEditor();
    protected void ApplyCore(DateTimeMaskValueEnvelope newValue);
    protected bool RaiseEditValueChangingEnveloped(Nullable`1<DateTimeMaskValueEnvelope> envelope);
    public virtual string GetCurrentEditText();
    private void VerifyCache();
    public virtual string get_DisplayText();
    public virtual int get_DisplayCursorPosition();
    public virtual int get_DisplaySelectionAnchor();
    protected virtual DateTimeMaskValueEnvelope CorrectInsertValue(DateTimeMaskValueEnvelope inserted);
    private Nullable`1<DateTimeMaskValueEnvelope> TryParseExactInserted(string insertedText);
    public virtual bool Insert(string insertedText);
    private bool IsNextSeparatorSkipInput(string insertedText);
    public virtual bool Delete();
    public virtual bool Backspace();
    private bool BackspaceOrDelete();
    public virtual bool get_CanUndo();
    public virtual bool Undo();
    private int GetFormatIndexFromPosition(int position);
    public virtual bool CursorToDisplayPosition(int newPosition, bool forceSelection);
    public virtual bool CursorMoveNear(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorMoveFar(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorHome(bool forceSelection);
    public virtual bool CursorEnd(bool forceSelection);
    private bool SpinNoCarry(bool isDown);
    private bool CanSpinOneToAnother(DateTimeMaskValueEnvelope baseValue, DateTimeMaskValueEnvelope result);
    private bool SpinCarry(bool isDown);
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    public virtual bool FlushPendingEditActions();
    public virtual object GetCurrentEditValue();
    protected void SetInitialEditValueCore(Nullable`1<DateTimeMaskValueEnvelope> initialEditValue);
    protected virtual Nullable`1<DateTimeMaskValueEnvelope> CreateEnvelopeFromEditValue(object editValue);
    protected virtual Nullable`1<DateTimeMaskValueEnvelope> CreateEnvelopeFromEditText(string editText);
    public virtual void SetInitialEditValue(object initialEditValue);
    public virtual void SetInitialEditText(string initialEditText);
    public virtual void SelectAll();
    public void ClearFromSelectAll();
    protected virtual DateTimeMaskValueEnvelope GetClearValue();
}
public static class DevExpress.Data.Mask.Internal.DateTimeMaskManagerHelper : object {
    private static Func`2<object, object> dateTimeOffsetPatternAccessor;
    public static DateTimeMaskFormatInfo GetFormatInfo(DateTimeMaskManagerCore manager);
    public static DateTimeMaskFormatInfo GetFormatInfo(DateTimeMaskManager manager);
    public static string GetDateTimeOffsetPattern(DateTimeFormatInfo formatInfo);
}
public class DevExpress.Data.Mask.Internal.DateTimeMaskValueEnvelope : ValueType {
    private static int PositiveOffsetOffsetValue;
    private long ticks;
    private ushort aux;
    private DateTimeMaskValueKind valueKind;
    public static long TicksPerMillisecond;
    public static long TicksPerSecond;
    public static long TicksPerMinute;
    public static long TicksPerHour;
    public static long TicksPerDay;
    public int Millisecond { get; }
    public int Fractional { get; }
    public int Second { get; }
    public int Minute { get; }
    public int Hour { get; }
    public int AmPm { get; }
    public int AmPmHour { get; }
    public int Day { get; }
    public int Month { get; }
    public int Year { get; }
    public long TimeOfDayInTicks { get; }
    private DateTimeMaskValueEnvelope(long ticks, ushort aux, DateTimeMaskValueKind valueKind);
    private TimeSpan GetOffset();
    private DateTimeKind GetKind();
    public IFormattable Unpack();
    public bool IsValid();
    public static DateTimeMaskValueEnvelope CreateFromDateTime(DateTime value);
    private static ushort OffsetToAux(TimeSpan offset);
    public static DateTimeMaskValueEnvelope CreateFromDateTimeOffset(DateTimeOffset value);
    public static DateTimeMaskValueEnvelope CreateFromDateOnlyOrAnalog(object value);
    public static DateTimeMaskValueEnvelope CreateFromTimeOnlyOrAnalog(object value);
    private static DateTimeMaskValueEnvelope Create(long ticks, ushort aux, DateTimeMaskValueKind valueKind);
    public DateTimeMaskValueEnvelope MakeTodayWithPreservedKindOrOffset();
    public DateTimeMaskValueEnvelope MakeDateWithPreservedKindOrOffset(DateTime date);
    public sealed virtual bool Equals(DateTimeMaskValueEnvelope other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(DateTimeMaskValueEnvelope a, DateTimeMaskValueEnvelope b);
    public static bool op_Inequality(DateTimeMaskValueEnvelope a, DateTimeMaskValueEnvelope b);
    public string ToString(string fmt, IFormatProvider provider);
    public static long ExtractDayPartFromTicks(long ticks, long ticksPerPart, long maxParts);
    public static int ExtractDayPartFromTicks(long ticks, long ticksPerPart, int maxParts);
    public long ExtractDayPart(long ticksPerPart, long maxParts);
    public int ExtractDayPart(long ticksPerPart, int maxParts);
    public DateTimeMaskValueEnvelope ReplacePart(long ticksPerPart, int maxParts, int newPartValue);
    public int get_Millisecond();
    public DateTimeMaskValueEnvelope ReplaceMilliseconds(int newPartValue);
    public int get_Fractional();
    public DateTimeMaskValueEnvelope ReplaceFractional(int newPartValue);
    public int get_Second();
    public DateTimeMaskValueEnvelope ReplaceSeconds(int newPartValue);
    public int get_Minute();
    public DateTimeMaskValueEnvelope ReplaceMinutes(int newPartValue);
    public int get_Hour();
    public DateTimeMaskValueEnvelope ReplaceHours(int newPartValue);
    public int get_AmPm();
    public DateTimeMaskValueEnvelope ReplaceAmPm(int newPartValue);
    public int get_AmPmHour();
    public DateTimeMaskValueEnvelope ReplaceAmPmHours(int newPartValue);
    public int get_Day();
    public DateTimeMaskValueEnvelope ReplaceDaysWithCarry(int newPartValue);
    public int get_Month();
    public DateTimeMaskValueEnvelope ReplaceMonthsWithCarry(int newPartValue);
    public DateTimeMaskValueEnvelope AddMonths(int monthsToAdd);
    public int get_Year();
    public DateTimeMaskValueEnvelope ReplaceYears(int newPartValue);
    public long get_TimeOfDayInTicks();
    public DateTimeMaskValueEnvelope ReplaceTimeOfDayInTicks(long newPartValue);
    public DateTimeMaskValueEnvelope AddTicks(long ticksToAdd);
    public int GetOffsetMinutes();
    public DateTimeMaskValueEnvelope ReplaceOffsetMinutes(int newPartValue);
    public DateTimeMaskValueEnvelope AddOffsetMinutes(int minutesToAdd);
    public Tuple`2<bool, int> GetOffsetSignedHour();
    public DateTimeMaskValueEnvelope ReplaceOffsetSignedHours(Tuple`2<bool, int> newPartValue);
    public DateTimeMaskValueEnvelope ToLeapYear();
}
public enum DevExpress.Data.Mask.Internal.DateTimeMaskValueKind : Enum {
    public int value__;
    public static DateTimeMaskValueKind DateTime;
    public static DateTimeMaskValueKind DateTimeOffset;
    public static DateTimeMaskValueKind DateOnly;
    public static DateTimeMaskValueKind TimeOnly;
}
public class DevExpress.Data.Mask.Internal.DateTimeMonthElementEditor : DateTimeNumericRangeElementEditor {
    private String[] monthsKeys;
    public string DisplayText { get; }
    public DateTimeMonthElementEditor(int initialValue, int minDigits, String[] monthsNames);
    public virtual string get_DisplayText();
    public virtual bool Insert(string inserted);
}
public class DevExpress.Data.Mask.Internal.DateTimeNumericRangeElementEditor : DateTimeElementEditor {
    private int fMinValue;
    private int fMaxValue;
    private int fMinDigits;
    private int fMaxDigits;
    private int fCurrentValue;
    protected int digitsEntered;
    protected bool Touched { get; }
    public int MinValue { get; }
    public int MaxValue { get; }
    public int MinDigits { get; }
    public int MaxDigits { get; }
    public int CurrentValue { get; }
    public string DisplayText { get; }
    public bool FinalOperatorInsert { get; }
    public DateTimeNumericRangeElementEditor(int initialValue, int minValue, int maxValue, int minDigits, int maxDigits);
    public DateTimeNumericRangeElementEditor(int minValue, int maxValue, int minDigits, int maxDigits);
    protected bool get_Touched();
    public int get_MinValue();
    public int get_MaxValue();
    public virtual int get_MinDigits();
    public int get_MaxDigits();
    public int get_CurrentValue();
    protected void SetUntouchedValue(int newValue);
    public virtual string get_DisplayText();
    public virtual bool Insert(string inserted);
    public virtual bool Delete();
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    public virtual int GetResult();
    public virtual bool get_FinalOperatorInsert();
}
public static class DevExpress.Data.Mask.Internal.DateTimeOnlyMaskHelper : object {
    private static Core Instance;
    private static DateTimeOnlyMaskHelper();
    private static Core CreateCore();
    public static IFormattable ToDateOnlyOrAnalog(DateTime src);
    public static IFormattable ToTimeOnlyOrAnalog(DateTime src);
    public static DateTime FromDateOnlyOrAnalog(object src);
    public static DateTime FromTimeOnlyOrAnalog(object src);
    public static IFormattable TryParseExactDateOnly(string src, string format, IFormatProvider formatProvider);
    public static IFormattable TryParseExactTimeOnly(string src, string format, IFormatProvider formatProvider);
    public static IFormattable TryParseDateOnly(string src);
    public static IFormattable TryParseTimeOnly(string src);
    public static bool IsDateOnlyOrAnalog(object src);
    public static bool IsTimeOnlyOrAnalog(object src);
}
[FlagsAttribute]
public enum DevExpress.Data.Mask.Internal.DateTimePart : Enum {
    public int value__;
    public static DateTimePart None;
    public static DateTimePart Date;
    public static DateTimePart Time;
    public static DateTimePart Offset;
}
public class DevExpress.Data.Mask.Internal.DateTimeYearElementEditor : DateTimeNumericRangeElementEditor {
    private int maskLength;
    private DateTimeFormatInfo dateTimeFormatInfo;
    public int MinDigits { get; }
    public DateTimeYearElementEditor(int initialYear, int maskLength, DateTimeFormatInfo dateTimeFormatInfo);
    private static int GetYearShift(Calendar calendar);
    public virtual int GetResult();
    public virtual int get_MinDigits();
}
public class DevExpress.Data.Mask.Internal.DecimalDigitTransition : Transition {
    private bool notMatch;
    private DecimalDigitTransition(State target, bool notMatch);
    public DecimalDigitTransition(bool notMatch);
    public virtual bool IsMatch(char input);
    public virtual Transition Copy(State target);
    public virtual char GetSampleChar();
    public virtual string ToString();
}
public class DevExpress.Data.Mask.Internal.EmptyTransition : Transition {
    public bool IsEmpty { get; }
    public EmptyTransition(State target);
    public virtual bool get_IsEmpty();
    public virtual bool IsMatch(char input);
    public virtual Transition Copy(State target);
    public virtual string ToString();
    public virtual char GetSampleChar();
}
public interface DevExpress.Data.Mask.Internal.IRegExpMaskLogicCore {
    public abstract virtual bool IsValidStart(string txt);
    public abstract virtual bool IsMatch(string txt);
    public abstract virtual bool IsFinal(string txt);
    public abstract virtual AutoCompleteInfo GetAutoCompleteInfo(string txt);
    public abstract virtual Nullable`1[] GetPlaceHoldersInfo(string txt);
    public abstract virtual string GetOptimisticHint(string txt);
}
public interface DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser {
    public abstract virtual object MkEmpty();
    public abstract virtual object MkAnd(object v1, object v2);
    public abstract virtual object MkAnySymbolTransition();
    public abstract virtual object MkBracketTransition(bool v, Tuple`2[] bracketTransitionRanges);
    public abstract virtual object MkDecimalDigitTransition(bool v);
    public abstract virtual object MkOneSymbolTransition(char v);
    public abstract virtual object MkOr(object v1, object v2);
    public abstract virtual object MkUnicodeCategoryTransition(bool isExclude, UnicodeCategory[] categories, string categoryNameAsInRegEx);
    public abstract virtual object MkWhiteSpaceTransition(bool v);
    public abstract virtual object MkWordTransition(bool v);
    public abstract virtual object MkPower(object v, int item1, Nullable`1<int> item2);
}
public class DevExpress.Data.Mask.Internal.LegacyMaskChar : LegacyMaskPrimitive {
    private string capturing;
    private int minMatches;
    private int maxMatches;
    public bool IsLiteral { get; }
    public string CapturingExpression { get; }
    public int MinMatches { get; }
    public int MaxMatches { get; }
    public LegacyMaskChar(string capturing, char caseConversion, int minMatches, int maxMatches);
    public virtual bool get_IsLiteral();
    public virtual string get_CapturingExpression();
    public virtual int get_MinMatches();
    public virtual int get_MaxMatches();
    public virtual string GetDisplayText(string elementValue, char blank);
    public virtual string GetEditText(string elementValue, char blank, bool saveLiteral);
    public void PatchMatches(int min, int max);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Mask.Internal.LegacyMaskInfo : object {
    private List`1<LegacyMaskPrimitive> container;
    public int Count { get; }
    public LegacyMaskPrimitive Item { get; }
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static void PatchZeroLengthMaskInfo(LegacyMaskInfo info, char caseConversion);
    public static LegacyMaskInfo GetSimpleMaskInfo(string mask, CultureInfo maskCulture);
    public static LegacyMaskInfo GetRegularMaskInfo(string mask, CultureInfo maskCulture);
    public int get_Count();
    public LegacyMaskPrimitive get_Item(int primitiveIndex);
    public string GetDisplayText(String[] elements, char blank);
    public string GetEditText(String[] elements, char blank, bool saveLiteral);
    public int GetPosition(String[] elements, int element, int insideElement);
    public int GetNextEditableElement(int current);
    public int GetFirstEditableIndex();
    public int GetPrevEditableElement(int current);
    public int GetLastEditableIndex();
    public bool GetIsEditable();
    public void PatchQuantifier(int min, int max);
    public String[] GetElementsEmpty();
    private string BuildExtruderRegExp(char blank, bool saveLiteral);
    public String[] GetElementsFromEditText(string editText, char blank, bool saveLiteral);
}
public class DevExpress.Data.Mask.Internal.LegacyMaskLiteral : LegacyMaskPrimitive {
    private char literal;
    public bool IsLiteral { get; }
    public string CapturingExpression { get; }
    public int MinMatches { get; }
    public int MaxMatches { get; }
    public LegacyMaskLiteral(char literal);
    public virtual bool get_IsLiteral();
    public virtual string get_CapturingExpression();
    public virtual int get_MinMatches();
    public virtual int get_MaxMatches();
    public virtual string GetDisplayText(string elementValue, char blank);
    public virtual string GetEditText(string elementValue, char blank, bool saveLiteral);
}
public abstract class DevExpress.Data.Mask.Internal.LegacyMaskManager : MaskManagerSelectAllEnhancer`1<LegacyMaskManagerCore> {
    public static Nullable`1<bool> DisableSpin;
    private static bool DefaultDisableSpin;
    internal static string SaveLiteralsDisplayName;
    internal static string AllowBlankInputDisplayName;
    [IgnoreAttribute]
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
protected LegacyMaskManager(LegacyMaskInfo info, char placeHolder, bool saveLiteral, bool ignoreMaskBlank);
    internal static bool IsDisableSpin();
}
public class DevExpress.Data.Mask.Internal.LegacyMaskManagerCore : MaskManagerStated`1<LegacyMaskManagerState> {
    private LegacyMaskInfo info;
    private bool saveLiteral;
    private char blank;
    private bool ignoreMaskBlank;
    public bool IsMatch { get; }
    public bool IsFinal { get; }
    public bool IsEditValueAssignedAsFormattedText { get; }
    public LegacyMaskManagerCore(LegacyMaskInfo info, char blank, bool saveLiteral, bool ignoreMaskBlank);
    public virtual bool Insert(string insertedText);
    public virtual bool Delete();
    public virtual bool Backspace();
    public virtual bool CursorToDisplayPosition(int newPosition, bool forceSelection);
    public virtual bool CursorHome(bool forceSelection);
    public virtual bool CursorEnd(bool forceSelection);
    public virtual void SelectAll();
    public virtual void SetInitialEditText(string initialEditText);
    public virtual bool CursorMoveNear(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorMoveFar(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool get_IsMatch();
    public virtual bool get_IsFinal();
    protected virtual string GetEditText(LegacyMaskManagerState state);
    protected virtual string GetDisplayText(LegacyMaskManagerState state);
    protected virtual object GetEditValue(LegacyMaskManagerState state);
    public virtual void SetInitialEditValue(object initialEditValue);
    public virtual bool get_IsEditValueAssignedAsFormattedText();
    protected virtual int GetDisplayCursorPosition(LegacyMaskManagerState state);
    protected virtual int GetDisplaySelectionAnchor(LegacyMaskManagerState state);
    public virtual bool SpinUp();
    public virtual bool SpinDown();
}
public class DevExpress.Data.Mask.Internal.LegacyMaskManagerState : object {
    public String[] Elements;
    public int CursorPositionElement;
    public int CursorPositionInsideElement;
    public int SelectionAnchorElement;
    public int SelectionAnchorInsideElement;
    public LegacyMaskInfo Info;
    public int DisplayCursorPosition { get; }
    public int DisplaySelectionAnchor { get; }
    public LegacyMaskManagerState(LegacyMaskInfo info, String[] elements, int cursorPositionElement, int cursorPositionInsideElement, int selectionAnchorElement, int selectionAnchorInsideElement);
    public LegacyMaskManagerState(LegacyMaskInfo info);
    private LegacyMaskManagerState(LegacyMaskManagerState source);
    public sealed virtual bool Equals(LegacyMaskManagerState comparedState);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string GetDisplayText(char blank);
    public string GetEditText(char blank, bool saveLiteral);
    public int get_DisplayCursorPosition();
    public int get_DisplaySelectionAnchor();
    public LegacyMaskManagerState Clone();
    public bool CursorTo(int newPosition, bool forceSelection);
    private void SetPositions(int element, int insideElement);
    private bool SetCaretTo(int element, int insideElement);
    public bool CursorHome(bool forceSelection);
    public bool CursorEnd(bool forceSelection);
    public void SelectAll();
    public bool CursorLeft();
    public bool CursorRight();
    public bool IsFinal(char blank);
    public bool IsMatch(char blank);
    private bool Insert(char inp);
    public bool Insert(string insertedText);
    private bool Erase();
    public bool Delete();
    public bool Backspace();
    public bool IsEmpty();
}
public abstract class DevExpress.Data.Mask.Internal.LegacyMaskPrimitive : object {
    private char CaseConversion;
    public bool IsLiteral { get; }
    public string CapturingExpression { get; }
    public int MinMatches { get; }
    public int MaxMatches { get; }
    protected LegacyMaskPrimitive(char caseConversion);
    public abstract virtual bool get_IsLiteral();
    public abstract virtual string get_CapturingExpression();
    public abstract virtual int get_MinMatches();
    public abstract virtual int get_MaxMatches();
    public abstract virtual string GetDisplayText(string elementValue, char blank);
    public abstract virtual string GetEditText(string elementValue, char blank, bool saveLiteral);
    public bool IsAcceptableStrong(char input);
    public bool IsAcceptable(char input);
    public char GetAcceptableChar(char input);
}
public class DevExpress.Data.Mask.Internal.MaskAttributes : object {
    private static Func`2<PropertyDescriptor, MaskAttributesProvider> propertyDescriptorAttributesProviderInitializer;
    private static Func`2<AttributeCollection, MaskAttributesProvider> attributeCollectionAttributesProviderInitializer;
    private MaskAttributesProvider provider;
    private Type propertyType;
    internal static IEnumerable`1<Tuple`3<string, Type, object>> NoParameters;
    private static ConcurrentDictionary`2<AnnotationAttributesKey, MaskAttributes> cache;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Type PropertyType { get; }
    public bool HasEditMask { get; }
    protected internal Type MaskManagerType { get; }
    protected internal IEnumerable`1<Tuple`3<string, Type, object>> Parameters { get; }
    private static MaskAttributes();
    private MaskAttributes(MaskAttributesProvider provider, Type propertyType);
    public MaskAttributes(PropertyDescriptor property);
    public MaskAttributes(AttributeCollection attributes, Type propertyType);
    public MaskAttributes(IEnumerable`1<Attribute> attributes, Type propertyType);
    public MaskAttributes(AnnotationAttributes annotationAttributes, Type propertyType);
    public Type get_PropertyType();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Any();
    public bool get_HasEditMask();
    protected internal TValue GetEditMaskPropertyValue(Func`2<TEditMask, TValue> getValue, TValue defaultValue);
    protected internal Type get_MaskManagerType();
    protected internal IEnumerable`1<Tuple`3<string, Type, object>> get_Parameters();
    public static TValue GetMaskProperty(AnnotationAttributes annotationAttributes, Func`2<TEditMask, TValue> getValue, TValue defaultValue);
    public static void Reset();
    internal static Type GetDataType(AnnotationAttributes annotationAttributes);
    internal static MaskAttributes Ensure(AnnotationAttributes annotationAttributes, Type dataType);
}
public class DevExpress.Data.Mask.Internal.MaskExceptionsTexts : object {
    public static string IncorrectMaskNonclosedQuotaWithMaskPattern;
    public static string IncorrectMaskBackslashBeforeEndOfMaskWithMaskPattern;
    public static string IncorrectMaskBackslashBeforeEndOfMask;
    public static string IncorrectMaskUnknownNamedMask;
    public static string IncorrectNumericMaskSignedMaskNotMatchMaxDigitsBeforeDecimalSeparator;
    public static string IncorrectNumericMaskSignedMaskNotMatchMaxDigitsAfterDecimalSeparator;
    public static string IncorrectNumericMaskSignedMaskNotMatchMinDigitsBeforeDecimalSeparator;
    public static string IncorrectNumericMaskSignedMaskNotMatchMinDigitsAfterDecimalSeparator;
    public static string IncorrectNumericMaskSignedMaskNotMatchIs100Multiplied;
    public static string IncorrectMaskInvalidUnicodeCategory;
    public static string IncorrectMaskCurveBracketAfterPpExpected;
    public static string IncorrectMaskClosingBracketAfterPpExpected;
    public static string IncorrectMaskBackslashRBeforeEndOfMask;
    public static string IncorrectMaskInvalidCharAfterBackslashR;
    public static string IncorrectMaskClosingBracketAfterRExpected;
    public static string IncorrectMaskClosingSquareBracketExpected;
    public static string IncorrectMaskClosingCurveBracketExpected;
    public static string IncorrectMaskInvalidQuantifierFormat;
    public static string CreateManagerReturnsNull;
    public static string InternalErrorNonCoveredCase;
    public static string InternalErrorGetSampleCharForEmpty;
    public static string InternalErrorNonSpecific;
}
public abstract class DevExpress.Data.Mask.Internal.MaskManagerSelectAllEnhancer`1 : MaskManager {
    public TNestedMaskManager Nested;
    private bool _isForcedSelectAll;
    protected bool IsSelectAllEnforced { get; }
    protected bool IsNestedCanSelectAll { get; }
    public bool IsEditValueAssignedAsFormattedText { get; }
    public string DisplayText { get; }
    public int DisplayCursorPosition { get; }
    public int DisplaySelectionAnchor { get; }
    public bool CanUndo { get; }
    public bool IsFinal { get; }
    public bool IsMatch { get; }
    protected MaskManagerSelectAllEnhancer`1(TNestedMaskManager nested);
    protected bool get_IsSelectAllEnforced();
    protected virtual bool get_IsNestedCanSelectAll();
    public virtual void SelectAll();
    protected void ClearSelectAllFlag();
    protected virtual bool MakeChange(Func`1<bool> changeWithTrueWhenSuccessfull);
    protected virtual bool MakeCursorOp(Func`1<bool> cursorOpWithTrueWhenSuccessfull);
    protected virtual bool MakeSpinOrUndoOp(Func`1<bool> spinOrUndoOpWithTrueWhenSuccessfull);
    private void Nested_LocalEditAction(object sender, CancelEventArgs e);
    private void Nested_EditTextChanging(object sender, MaskChangingEventArgs e);
    private void Nested_EditTextChanged(object sender, EventArgs e);
    public virtual string GetCurrentEditText();
    public virtual object GetCurrentEditValue();
    public virtual void SetInitialEditText(string initialEditText);
    public virtual void SetInitialEditValue(object initialEditValue);
    public virtual bool get_IsEditValueAssignedAsFormattedText();
    public virtual string get_DisplayText();
    public virtual int get_DisplayCursorPosition();
    public virtual int get_DisplaySelectionAnchor();
    public virtual bool Insert(string insertedText);
    public virtual bool Delete();
    public virtual bool Backspace();
    public virtual bool get_CanUndo();
    public virtual bool Undo();
    public virtual bool CursorToDisplayPosition(int newPosition, bool forceSelection);
    public virtual bool CursorMoveNear(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorMoveFar(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorHome(bool forceSelection);
    public virtual bool CursorEnd(bool forceSelection);
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    public virtual bool FlushPendingEditActions();
    public virtual bool get_IsFinal();
    public virtual bool get_IsMatch();
    [CompilerGeneratedAttribute]
private bool <Delete>b__28_0();
    [CompilerGeneratedAttribute]
private bool <Backspace>b__29_0();
    [CompilerGeneratedAttribute]
private bool <Undo>b__32_0();
    [CompilerGeneratedAttribute]
private bool <SpinUp>b__38_0();
    [CompilerGeneratedAttribute]
private bool <SpinDown>b__39_0();
}
public static class DevExpress.Data.Mask.Internal.NamedMasks : object {
    [ObsoleteAttribute("Use methods with explicit culture instead")]
[EditorBrowsableAttribute("1")]
public static CultureInfo DefaultCultureOverride;
    [ObsoleteAttribute("Use methods with explicit culture instead")]
[EditorBrowsableAttribute("1")]
public static CultureInfo DefaultCulture { get; }
    [ObsoleteAttribute("Use the GetDateSeparator method instead")]
[EditorBrowsableAttribute("1")]
public static string DateSeparator { get; }
    [ObsoleteAttribute("Use the GetTimeSeparator method instead")]
[EditorBrowsableAttribute("1")]
public static string TimeSeparator { get; }
    [ObsoleteAttribute("Use the GetAbbreviatedDayNames method instead")]
[EditorBrowsableAttribute("1")]
public static string AbbreviatedDayNames { get; }
    [ObsoleteAttribute("Use the GetAbbreviatedMonthNames method instead")]
[EditorBrowsableAttribute("1")]
public static string AbbreviatedMonthNames { get; }
    [ObsoleteAttribute("Use the GetAMDesignator method instead")]
[EditorBrowsableAttribute("1")]
public static string AMDesignator { get; }
    [ObsoleteAttribute("Use the GetDayNames method instead")]
[EditorBrowsableAttribute("1")]
public static string DayNames { get; }
    [ObsoleteAttribute("Use the GetMonthNames method instead")]
[EditorBrowsableAttribute("1")]
public static string MonthNames { get; }
    [ObsoleteAttribute("Use the GetPMDesignator method instead")]
[EditorBrowsableAttribute("1")]
public static string PMDesignator { get; }
    [ObsoleteAttribute("Use the GetNumberDecimalSeparator method instead")]
[EditorBrowsableAttribute("1")]
public static string NumberDecimalSeparator { get; }
    [ObsoleteAttribute("Use the GetCurrencyDecimalSeparator method instead")]
[EditorBrowsableAttribute("1")]
public static string CurrencyDecimalSeparator { get; }
    [ObsoleteAttribute("Use the GetCurrencySymbol method instead")]
[EditorBrowsableAttribute("1")]
public static string CurrencySymbol { get; }
    [ObsoleteAttribute("Use the GetNumberPattern method instead")]
[EditorBrowsableAttribute("1")]
public static string NumberPattern { get; }
    [ObsoleteAttribute("Use GetCurrencyPattern method instead")]
[EditorBrowsableAttribute("1")]
public static string CurrencyPattern { get; }
    public static CultureInfo get_DefaultCulture();
    public static string Escape(string input);
    public static string Escape(String[] inputStrings, bool ignoreZeros);
    public static string GetDateSeparator(CultureInfo culture);
    public static string GetTimeSeparator(CultureInfo culture);
    public static string GetAbbreviatedDayNames(CultureInfo culture);
    public static string GetAbbreviatedMonthNames(CultureInfo culture);
    public static string GetAMDesignator(CultureInfo culture);
    public static string GetDayNames(CultureInfo culture);
    public static string GetMonthNames(CultureInfo culture);
    public static string GetPMDesignator(CultureInfo culture);
    public static string GetNumberDecimalSeparator(CultureInfo culture);
    public static string GetCurrencyDecimalSeparator(CultureInfo culture);
    public static string GetCurrencySymbol(CultureInfo culture);
    public static string GetNumberPattern(CultureInfo culture);
    public static string GetCurrencyPattern(CultureInfo culture);
    public static string get_DateSeparator();
    public static string get_TimeSeparator();
    public static string get_AbbreviatedDayNames();
    public static string get_AbbreviatedMonthNames();
    public static string get_AMDesignator();
    public static string get_DayNames();
    public static string get_MonthNames();
    public static string get_PMDesignator();
    public static string get_NumberDecimalSeparator();
    public static string get_CurrencyDecimalSeparator();
    public static string get_CurrencySymbol();
    public static string get_NumberPattern();
    public static string get_CurrencyPattern();
    public static string GetNamedMask(string maskName, CultureInfo culture);
    [ObsoleteAttribute("Use the GetNamedMask overload with explicit culture instead")]
[EditorBrowsableAttribute("1")]
public static string GetNamedMask(string maskName);
}
public class DevExpress.Data.Mask.Internal.Nfa : object {
    internal State initialState;
    internal State finalState;
    private Dictionary`2<NfaWave, NfaWave> statesCache;
    private StringKeyTable stringsToStatesCache;
    private StringKey lastState;
    private string lastText;
    public static Nfa Empty { get; }
    public static Nfa EmptyTransitionNfa { get; }
    public Nfa(Transition initialTransition);
    private Nfa(Nfa source);
    public static Nfa get_Empty();
    public static Nfa get_EmptyTransitionNfa();
    private bool CanReturnFromFinalState();
    private bool CanReturnToInitialState();
    internal static Nfa HardAnd(Nfa head, Nfa tail);
    public static Nfa op_BitwiseAnd(Nfa left, Nfa right);
    internal static Nfa HardOr(Nfa one, Nfa merged);
    public static Nfa op_BitwiseOr(Nfa left, Nfa right);
    private static Nfa Power0Unlimited(Nfa operand);
    private static Nfa Power1Unlimited(Nfa operand);
    private static Nfa PowerExact(Nfa operand, int power);
    private static Nfa PowerOptional(Nfa operand, int count);
    public static Nfa Power(Nfa operand, int minMatches, int maxMatches);
    public ICollection`1<State> GetAllStates();
    public sealed virtual bool IsMatch(string input);
    public sealed virtual bool IsFinal(string input);
    public sealed virtual bool IsValidStart(string start);
    public static Nfa Parse(string pattern, CultureInfo cultureInfo);
    public static Nfa Parse(string pattern, bool reverseAutomate, CultureInfo cultureInfo);
    public static bool IsMatch(string input, string pattern, CultureInfo cultureInfo);
    private string ToString(NfaWave wave);
    public virtual string ToString();
    private NfaWave GetInitialStates();
    public sealed virtual Nullable`1[] GetPlaceHoldersInfo(string displayText);
    public sealed virtual string GetOptimisticHint(string displayText);
    private StringKey CacheWave(StringKey next, char symbol, NfaWave candidateWave);
    internal NfaWave GetWave(string text);
    public sealed virtual AutoCompleteInfo GetAutoCompleteInfo(string text);
}
public enum DevExpress.Data.Mask.Internal.NfaAutoCompleteType : Enum {
    public int value__;
    public static NfaAutoCompleteType NonExacts;
    public static NfaAutoCompleteType ExactCharFromNonFinal;
    public static NfaAutoCompleteType FinalStop;
    public static NfaAutoCompleteType FinalWithExactsBeforeNonExact;
    public static NfaAutoCompleteType FinalWithExactsToFinalWithoutNonExacts;
    public static NfaAutoCompleteType FinalWithExactsToFinalWithNonExacts;
}
public class DevExpress.Data.Mask.Internal.NfaWave : object {
    internal Dictionary`2<State, bool> states;
    internal State finalState;
    internal Nullable`1[] placeHoldersInfo;
    private string sample;
    internal bool hashCodeCalculated;
    private int hashCode;
    internal AutoCompleteInfo autoCompleteInfo;
    public int Count { get; }
    public NfaWave(State finalState);
    public int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
    public bool Contains(State state);
    internal void Add(State state);
    public void AddStateWithEmptyTransitionsTargets(State state);
    public NfaWave GetNextWave(char input);
    private ICollection`1<PlaceHoldersPredictAssociation> PlaceHoldersPredictGetNextHolders(ICollection`1<PlaceHoldersPredictAssociation> completeHolders, ICollection`1<PlaceHoldersPredictAssociation> currentHolders);
    internal static Nullable`1[] MergeMasks(Nullable`1[] firstMask, Nullable`1[] secondMask);
    private void CalculatePlaceHoldersInfo();
    public Nullable`1[] GetPlaceHoldersInfo();
    public string GetOptimisticHint();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private GetAutoCompleteInfoTransitionsProcessingResult GetAutoCompleteInfoTransitionsProcessing();
    public AutoCompleteInfo GetAutoCompleteInfo();
}
public class DevExpress.Data.Mask.Internal.NumericFormatter : object {
    private Int32[] groupSizes;
    private string groupSeparator;
    private string decimalSeparator;
    private List`1<string> formatMask;
    private int maxDigitsBeforeDecimalSeparator;
    private int maxDigitsAfterDecimalSeparator;
    private int minDigitsBeforeDecimalSeparator;
    private int minDigitsAfterDecimalSeparator;
    public bool Is100Multiplied;
    public static Nullable`1<bool> ForceCanRemoveSignByDeleteAndBackspace;
    public int MaxDigitsBeforeDecimalSeparator { get; }
    public int MinDigitsBeforeDecimalSeparator { get; }
    public int MaxDigitsAfterDecimalSeparator { get; }
    public int MinDigitsAfterDecimalSeparator { get; }
    public NumericFormatter(string formatString, CultureInfo formattingCulture);
    private string GetSeparator(int positionFromDecimalSeparator);
    public string Format(string source);
    private string Format(string source, int sourcePositionForTerminate);
    public int GetPositionFormatted(string source, int sourcePosition);
    public int GetPositionSource(string source, int formattedPosition);
    public int get_MaxDigitsBeforeDecimalSeparator();
    public int get_MinDigitsBeforeDecimalSeparator();
    public int get_MaxDigitsAfterDecimalSeparator();
    public int get_MinDigitsAfterDecimalSeparator();
    private static string GetNegativeSymbolPattern(CultureInfo culture);
    private static string CreateCurrencyFormat(int precision, CultureInfo culture);
    private static string CreateFullNumberFormatFromPositiveFormat(string numberFormat, CultureInfo culture);
    private static string CreateNumberFormat(int precision, CultureInfo culture);
    private static string CreateDecimalFormat(int precision, CultureInfo culture);
    private static string CreateFixedPointFormat(int precision, CultureInfo culture);
    private static string CreatePercentFormat(int precision, CultureInfo culture, string percentSymbol);
    public static string Expand(string formatString, CultureInfo culture);
    public static void GuessCanRemoveSignByDeleteAndBackspace(NumericFormatter a, NumericFormatter b, Boolean& canRemoveSignByDelete, Boolean& canRemoveSignByBackspace);
}
public class DevExpress.Data.Mask.Internal.NumericMaskLogic : object {
    private int maxDigitsBeforeDecimalSeparator;
    private int maxDigitsAfterDecimalSeparator;
    private int minDigitsBeforeDecimalSeparator;
    private int minDigitsAfterDecimalSeparator;
    private CultureInfo culture;
    private bool allowHideDecimalSeparatorWhenPossibleWithoutMeaningChange;
    private bool allowConfusingNoDigitsFormats;
    private static Char[] allDigits;
    public NumericMaskLogic(int maxDigitsBeforeDecimalSeparator, int minDigitsBeforeDecimalSeparator, int minDigitsAfterDecimalSeparator, int maxDigitsAfterDecimalSeparator, CultureInfo culture, bool allowHideDecimalSeparatorWhenPossibleWithoutMeaningChange, bool allowConfusingNoDigitsFormats);
    private static NumericMaskLogic();
    private static string RefineInput(string dirtyInput, CultureInfo refineCulture);
    private string PatchTailIfEmpty(string tail);
    public MaskLogicResult GetEditResult(string head, string replaced, string tail, string inserted);
    private MaskLogicResult CreateResult(string resultCandidate, int cursorBase);
    private static string Increment(string number);
    private static string Decrement(string number);
    private static string SubtractWithCarry(string number);
    private MaskLogicResult GetClimbModuloResult(string head, string tail);
    private MaskLogicResult GetDiveModuloResult(string head, string tail, bool canChSign, Boolean& chSign);
    public MaskLogicResult GetSpinResult(string head, string tail, bool isModuloDecrement, bool canChSign, Boolean& chSign);
    private static string Mul10(string input);
    public static string Mul100(string input);
    public static string Div100(string input);
}
public class DevExpress.Data.Mask.Internal.NumericMaskManagerState : MaskManagerTextStateCore`1<NumericMaskManagerState> {
    private bool fIsNull;
    private bool fIsNegative;
    private bool fIsSelectAll;
    public static NumericMaskManagerState NullInstance;
    public bool IsNegative { get; }
    public bool IsNull { get; }
    public bool IsSelectAll { get; }
    private NumericMaskManagerState(string editText, int cursorPosition, int selectionAnchor, bool isNegative, bool isSelectAll);
    public NumericMaskManagerState(string editText, int cursorPosition, int selectionAnchor, bool isNegative);
    public NumericMaskManagerState(string editText, bool isNegative);
    private static NumericMaskManagerState();
    public bool get_IsNegative();
    public bool get_IsNull();
    public bool get_IsSelectAll();
    public virtual bool Equals(NumericMaskManagerState comparedState);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Data.Mask.Internal.OneSymbolTransition : Transition {
    private char input;
    public bool IsExact { get; }
    private OneSymbolTransition(State target, char input);
    public OneSymbolTransition(char input);
    public virtual bool IsMatch(char input);
    public virtual Transition Copy(State target);
    public virtual string ToString();
    public virtual bool get_IsExact();
    public virtual char GetSampleChar();
}
public abstract class DevExpress.Data.Mask.Internal.ParseAdapterRegExBase`2 : object {
    public abstract virtual TWrk MkAnd(TWrk v1, TWrk v2);
    public abstract virtual TWrk MkAnySymbolTransition();
    public abstract virtual TWrk MkBracketTransition(bool notMatch, Tuple`2[] bracketTransitionRanges);
    public abstract virtual TWrk MkDecimalDigitTransition(bool notMatch);
    public abstract virtual TWrk MkEmpty();
    public abstract virtual TWrk MkOneSymbolTransition(char v);
    public abstract virtual TWrk MkOr(TWrk v1, TWrk v2);
    public abstract virtual TWrk MkPower(TWrk v, int min, Nullable`1<int> max);
    public abstract virtual TWrk MkUnicodeCategoryTransition(bool isExclude, UnicodeCategory[] categories, string categoryNameAsInRegEx);
    public abstract virtual TWrk MkWhiteSpaceTransition(bool notMatch);
    public abstract virtual TWrk MkWordTransition(bool notMatch);
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkAnd(object v1, object v2);
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkAnySymbolTransition();
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkBracketTransition(bool v, Tuple`2[] bracketTransitionRanges);
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkDecimalDigitTransition(bool v);
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkEmpty();
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkOneSymbolTransition(char v);
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkOr(object v1, object v2);
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkPower(object v, int item1, Nullable`1<int> item2);
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkUnicodeCategoryTransition(bool isExclude, UnicodeCategory[] categories, string categoryNameAsInRegEx);
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkWhiteSpaceTransition(bool v);
    private sealed virtual override object DevExpress.Data.Mask.Internal.IUniversalRegExAdapterForParser.MkWordTransition(bool v);
    public TWrk RawParse(string regEx, CultureInfo c);
    protected abstract virtual TRes ExtractResult(TWrk wrkResult);
    public TRes Parse(string regEx, CultureInfo c);
}
internal class DevExpress.Data.Mask.Internal.ParseAdapterRegExNfa : ParseAdapterRegExBase`2<Nfa, Nfa> {
    public static ParseAdapterRegExNfa Instance { get; }
    public static ParseAdapterRegExNfa get_Instance();
    public virtual Nfa MkAnd(Nfa v1, Nfa v2);
    public virtual Nfa MkAnySymbolTransition();
    public virtual Nfa MkBracketTransition(bool notMatch, Tuple`2[] bracketTransitionRanges);
    public virtual Nfa MkDecimalDigitTransition(bool notMatch);
    public virtual Nfa MkEmpty();
    public virtual Nfa MkOneSymbolTransition(char ch);
    public virtual Nfa MkOr(Nfa v1, Nfa v2);
    public virtual Nfa MkPower(Nfa v, int min, Nullable`1<int> max);
    public virtual Nfa MkUnicodeCategoryTransition(bool isExclude, UnicodeCategory[] categories, string categoryNameAsInRegEx);
    public virtual Nfa MkWhiteSpaceTransition(bool notMatch);
    public virtual Nfa MkWordTransition(bool notMatch);
    protected virtual Nfa ExtractResult(Nfa wrkResult);
}
internal class DevExpress.Data.Mask.Internal.PokeableReader : object {
    private List`1<TextReader> readers;
    public PokeableReader(TextReader firstReader);
    public void PokeReader(TextReader reader);
    public void Poke(string nextInput);
    public int Read();
    public int Peek();
}
public static class DevExpress.Data.Mask.Internal.RegExMaskMath : object {
    public static Nullable`1<int> MaxThreadsThreshold;
    public static void MoveNextExpected(IEnumerator`1<Something> e, bool expected);
    public static void Do(TWorkerArg seed, Func`2<TWorkerArg, TWorkerRes> threadSafeWorker, Func`2<TWorkerRes, IEnumerable`1<TWorkerArg>> spawner, bool isSpawnerThreadSafe);
}
public class DevExpress.Data.Mask.Internal.RegExpMaskLogic : object {
    internal IRegExpMaskLogicCore regExp;
    internal bool IsAutoComplete;
    public static Nullable`1<bool> UseOldLogic;
    public RegExpMaskLogic(IRegExpMaskLogicCore regExp, bool isAutoComplete);
    public RegExpMaskLogic(string regExp, bool reverseDfa, CultureInfo culture, bool isAutoComplete);
    public RegExpMaskLogic(string regExp, CultureInfo culture, bool isAutoComplete);
    private static RegExpMaskLogic();
    public bool IsValidStart(string text);
    internal static IRegExpMaskLogicCore Parse(string regExp, bool reverseDfa, CultureInfo culture);
    private string AutoCompleteResultProcessing(string origin);
    private string AutoCompleteTailPreprocessing(string head, string tail);
    private MaskLogicResult CreateResult(string result, string cursorBase);
    internal string SmartAutoComplete(string before);
    internal string SmartAppend(string before, char input);
    private static string StringWithoutLastChar(string str);
    internal string ExactsTruncate(string before);
    internal string ExactsAppend(string before);
    internal string RemoveExacts(string stringBefore, string stringWithExacts);
    internal string RestoreExacts(string stringBefore, string stringWithoutExacts);
    public string GetMaskedText(string text, char anySymbolHolder);
    public bool IsMatch(string text);
    public bool IsFinal(string text);
    private string GetTail(string oldHead, string oldTail, string head);
    private MaskLogicResult InsertCaseTailPlain(string appended, string tail);
    private MaskLogicResult InsertCaseTailNonExacts(string appended, string tailNonexacts);
    private bool InsertCaseByOneCharBody(String& nextHead, String& nextFull, bool isSmart, string head, string replaced, char input, string tail);
    private MaskLogicResult InsertCaseByOneChar(bool isSmart, string head, string replaced, string inserted, string tail);
    private MaskLogicResult InsertCaseByOneChar(bool isSmart, string head, string replaced, string inserted, string tail, bool isLastChance);
    public MaskLogicResult GetReplaceResult(string head, string replaced, string tail, string inserted);
    public MaskLogicResult GetBackspaceResult(string head, string tail);
    public MaskLogicResult GetDeleteResult(string head, string tail);
    public bool IsValidCursorPosition(string text, int testedPositionInEditText);
    public string OptimisticallyExpand(string baseText);
}
public class DevExpress.Data.Mask.Internal.RegExpMaskManagerCore : TextMaskManager {
    internal RegExpMaskLogic logic;
    private bool showPlaceHolders;
    private char anySymbolPlaceHolder;
    private bool isOptimistic;
    public bool IsEditValueAssignedAsFormattedText { get; }
    public bool IsMatch { get; }
    public bool IsFinal { get; }
    public RegExpMaskManagerCore(string regExp, bool reverseDfa, bool isAutoComplete, bool isOptimistic, bool showPlaceHolders, char anySymbolPlaceHolder, CultureInfo managerCultureInfo);
    public virtual bool get_IsEditValueAssignedAsFormattedText();
    protected virtual string GetDisplayText(string editText);
    protected virtual int DisplayToEditTextPosition(string editText, int displayPosition);
    protected virtual MaskLogicResult InsertLogic(string head, string selectedText, string tail, string insertedText);
    protected virtual MaskLogicResult DeleteLogic(string head, string selectedText, string tail);
    protected virtual MaskLogicResult BackspaceLogic(string head, string selectedText, string tail);
    public virtual bool get_IsMatch();
    public virtual bool get_IsFinal();
    protected virtual bool IsValidCursorStopPosition(string editText, int position);
    protected virtual MaskLogicResult GetInitialStateFromText(string editTextAssigned);
    public virtual bool SpinUp();
    public virtual bool SpinDown();
}
internal class DevExpress.Data.Mask.Internal.RegExpParser : object {
    private int yyMax;
    private static Int16[] yyLhs;
    private static Int16[] yyLen;
    private static Int16[] yyDefRed;
    protected static Int16[] yyDgoto;
    protected static int yyFinal;
    protected static Int16[] yySindex;
    protected static Int16[] yyRindex;
    protected static Int16[] yyGindex;
    protected static Int16[] yyTable;
    protected static Int16[] yyCheck;
    private IUniversalRegExAdapterForParser Adapter;
    private object result;
    private Yylex lexer;
    private bool reverseAutomate;
    public object Result { get; }
    private RegExpParser(IUniversalRegExAdapterForParser adapter);
    private static RegExpParser();
    private object yyparse(yyInput yyLex);
    public object get_Result();
    private void yyerror(string message);
    private void yyerror(string message, String[] expected);
    private object Parse(TextReader reader, bool reverseAutomate, CultureInfo parseCulture);
    public static object Parse(IUniversalRegExAdapterForParser adapter, string regExp, bool reverseAutomate, CultureInfo parseCulture);
    public static Nfa Parse(string regExp, bool reverseAutomate, CultureInfo parseCulture);
}
internal class DevExpress.Data.Mask.Internal.SpinActionResult : object {
    public bool SpinParent;
    public bool SpinResult;
}
public class DevExpress.Data.Mask.Internal.State : object {
    private List`1<Transition> transitions;
    private IDictionary`2<State, bool> reachableStatesDictionary;
    public ICollection Transitions { get; }
    private IDictionary`2<State, bool> ReachableStatesDictionary { get; }
    public ICollection get_Transitions();
    public void AddTransition(Transition transition);
    private IDictionary`2<State, bool> get_ReachableStatesDictionary();
    private static void CollectReachableStates(State nextState, IDictionary`2<State, bool> states);
    public ICollection`1<State> GetReachableStates();
    public bool CanReach(State state);
}
internal class DevExpress.Data.Mask.Internal.StringKey : object {
    private int Hash;
    public int Length;
    public StringKey Next;
    public char Symbol;
    public NfaWave Wave;
    public static int HashSeed;
    public StringKey(StringKey next, char symbol, NfaWave wave);
    public virtual int GetHashCode();
    public static int GetNextHash(int prevHash, char nextChar);
    public virtual bool Equals(object obj);
    private static bool IsEqual(StringKey item, StringKey key);
    internal static bool IsEqual(string str, int length, StringKey key);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Data.Mask.Internal.StringKeyTable : object {
    private Dictionary`2<object, StringKey> inner;
    public StringKey Item { get; }
    public void Add(StringKey key);
    public StringKey get_Item(SubstringWithHash index);
}
internal class DevExpress.Data.Mask.Internal.SubstringWithHash : object {
    public string Str;
    public int Length;
    public int Hash;
    public SubstringWithHash(string str, int length, int hash);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Data.Mask.Internal.TimeSpanElementDayEditor : TimeSpanElementEditor {
    private long value;
    private string mask;
    private int digitsEntered;
    [CompilerGeneratedAttribute]
private int <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDigits>k__BackingField;
    private int MaxValue { get; }
    private int MaxDigits { get; }
    private bool Touched { get; }
    public string DisplayText { get; }
    public bool FinalOperatorInsert { get; }
    public TimeSpanElementDayEditor(string mask, int lengthLimit, long value);
    [CompilerGeneratedAttribute]
private int get_MaxValue();
    [CompilerGeneratedAttribute]
private int get_MaxDigits();
    private bool get_Touched();
    public virtual string get_DisplayText();
    public virtual bool Insert(string inserted);
    public virtual bool Delete();
    public virtual bool SpinUp(Boolean& spinNext);
    public virtual bool SpinDown(Boolean& spinNext);
    public virtual long GetResult();
    public virtual bool get_FinalOperatorInsert();
}
public abstract class DevExpress.Data.Mask.Internal.TimeSpanElementEditor : object {
    public string DisplayText { get; }
    public bool FinalOperatorInsert { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual bool Insert(string inserted);
    public abstract virtual bool Delete();
    public abstract virtual bool SpinUp(Boolean& spinNext);
    public abstract virtual bool SpinDown(Boolean& spinNext);
    public abstract virtual long GetResult();
    public abstract virtual bool get_FinalOperatorInsert();
}
public class DevExpress.Data.Mask.Internal.TimeSpanElementTimeEditor : TimeSpanElementEditor {
    private long value;
    private long maxValue;
    private long minValue;
    private string mask;
    private bool allowCustomInput;
    private int digitsEntered;
    [CompilerGeneratedAttribute]
private int <MaxDigits>k__BackingField;
    private int MaxDigits { get; }
    protected bool Touched { get; }
    public string DisplayText { get; }
    public bool FinalOperatorInsert { get; }
    public TimeSpanElementTimeEditor(string mask, long minValue, long maxValue, int lengthLimit, long value, bool allowCustomInput);
    [CompilerGeneratedAttribute]
private int get_MaxDigits();
    protected bool get_Touched();
    public virtual string get_DisplayText();
    public virtual bool Insert(string inserted);
    public virtual bool Delete();
    public virtual bool SpinUp(Boolean& spinNext);
    public virtual bool SpinDown(Boolean& spinNext);
    public virtual long GetResult();
    public virtual bool get_FinalOperatorInsert();
    protected void SetUntouchedValue(long newValue);
}
[ExtensionAttribute]
internal static class DevExpress.Data.Mask.Internal.TimeSpanHelper : object {
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, Predicate`1<T> predicate);
    [ExtensionAttribute]
public static int LastIndexOf(IList`1<T> source, Predicate`1<T> predicate);
    [ExtensionAttribute]
public static TimeSpan ReplaceDays(TimeSpan timeSpan, long newValue);
    [ExtensionAttribute]
public static TimeSpan ReplaceHours(TimeSpan timeSpan, long newValue);
    [ExtensionAttribute]
public static TimeSpan ReplaceMinutes(TimeSpan timeSpan, long newValue);
    [ExtensionAttribute]
public static TimeSpan ReplaceSeconds(TimeSpan timeSpan, long newValue);
    [ExtensionAttribute]
public static TimeSpan ReplaceMilliseconds(TimeSpan timeSpan, long newValue);
    [ExtensionAttribute]
public static TimeSpan ReplaceFractional(TimeSpan timeSpan, long newValue);
    [ExtensionAttribute]
public static TimeSpan ReplaceDaysWithDayDuration(TimeSpan timeSpan, TimeSpan dayDuration);
    [ExtensionAttribute]
public static TimeSpan ReplaceBackDaysWithDayDuration(TimeSpan timeSpan, TimeSpan dayDuration);
    private static TimeSpan Replace(TimeSpan timeSpan, long newValue, Func`2<TimeSpan, long> getValue, Func`2<TimeSpan, double> getTotalValue, long valueTicks);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskException : Exception {
    public TimeSpanMaskException(string exception);
}
public abstract class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElement : object {
    [CompilerGeneratedAttribute]
private bool <HideOnNull>k__BackingField;
    public bool Editable { get; }
    public bool HideOnNull { get; }
    protected TimeSpanMaskFormatElement(bool hideOnNull);
    public virtual bool get_Editable();
    public abstract virtual string Format(TimeSpanMaskManagerValue formatted);
    [CompilerGeneratedAttribute]
public bool get_HideOnNull();
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementDay : TimeSpanMaskFormatElementEditable {
    public TimeSpanMaskPart Part { get; }
    public TimeSpanMaskFormatElementDay(string mask, int lengthLimit, bool hideOnNull);
    public virtual TimeSpanMaskPart get_Part();
    public virtual TimeSpanElementEditor CreateElementEditor(TimeSpanMaskManagerValue editedValue, bool allowInputCustomValue);
    public virtual TimeSpanMaskManagerValue ApplyElement(long result, TimeSpanMaskManagerValue editedTimeSpan);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementDayString : TimeSpanMaskFormatElementNonEditable {
    private TimeSpanCultureInfoBase cultureInfo;
    public TimeSpanMaskFormatElementDayString(string mask, TimeSpanCultureInfoBase cultureInfo, bool hideOnNull);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
}
public abstract class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementEditable : TimeSpanMaskFormatElementNonEditable {
    [CompilerGeneratedAttribute]
private int <LengthLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHeadFormat>k__BackingField;
    public bool Editable { get; }
    public int LengthLimit { get; }
    public TimeSpanMaskPart Part { get; }
    protected internal bool IsHeadFormat { get; protected internal set; }
    protected TimeSpanMaskFormatElementEditable(string mask, int lengthLimit, bool hideOnNull);
    public virtual bool get_Editable();
    [CompilerGeneratedAttribute]
public int get_LengthLimit();
    public abstract virtual TimeSpanMaskPart get_Part();
    [CompilerGeneratedAttribute]
protected internal bool get_IsHeadFormat();
    [CompilerGeneratedAttribute]
protected internal void set_IsHeadFormat(bool value);
    public abstract virtual TimeSpanElementEditor CreateElementEditor(TimeSpanMaskManagerValue editedValue, bool allowInputCustomValue);
    public abstract virtual TimeSpanMaskManagerValue ApplyElement(long result, TimeSpanMaskManagerValue editedTimeSpan);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementFractionalSeconds : TimeSpanMaskFormatElementEditable {
    public TimeSpanMaskPart Part { get; }
    public TimeSpanMaskFormatElementFractionalSeconds(string mask, int lengthLimit, bool hideOnNull);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
    public virtual TimeSpanMaskPart get_Part();
    public virtual TimeSpanElementEditor CreateElementEditor(TimeSpanMaskManagerValue editedValue, bool allowInputCustomValue);
    public virtual TimeSpanMaskManagerValue ApplyElement(long result, TimeSpanMaskManagerValue editedTimeSpan);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementFractionalSecondsString : TimeSpanMaskFormatElementNonEditable {
    private TimeSpanCultureInfoBase cultureInfo;
    public TimeSpanMaskFormatElementFractionalSecondsString(string mask, TimeSpanCultureInfoBase cultureInfo, bool hideOnNull);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementHours : TimeSpanMaskFormatElementEditable {
    public TimeSpanMaskPart Part { get; }
    public TimeSpanMaskFormatElementHours(string mask, int lengthLimit, bool hideOnNull);
    public virtual TimeSpanMaskPart get_Part();
    public virtual TimeSpanElementEditor CreateElementEditor(TimeSpanMaskManagerValue editedValue, bool allowInputCustomValue);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
    public virtual TimeSpanMaskManagerValue ApplyElement(long result, TimeSpanMaskManagerValue editedTimeSpan);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementHoursString : TimeSpanMaskFormatElementNonEditable {
    private TimeSpanCultureInfoBase cultureInfo;
    public TimeSpanMaskFormatElementHoursString(string mask, TimeSpanCultureInfoBase cultureInfo, bool hideOnNull);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementLiteral : TimeSpanMaskFormatElement {
    [CompilerGeneratedAttribute]
private string <Literal>k__BackingField;
    public string Literal { get; }
    public TimeSpanMaskFormatElementLiteral(string literal, bool hideOnNull);
    [CompilerGeneratedAttribute]
public string get_Literal();
    public virtual string Format(TimeSpanMaskManagerValue formatted);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementMilliseconds : TimeSpanMaskFormatElementEditable {
    public TimeSpanMaskPart Part { get; }
    public TimeSpanMaskFormatElementMilliseconds(string mask, int lengthLimit, bool hideOnNull);
    public virtual TimeSpanMaskPart get_Part();
    public virtual TimeSpanElementEditor CreateElementEditor(TimeSpanMaskManagerValue editedValue, bool allowInputCustomValue);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
    public virtual TimeSpanMaskManagerValue ApplyElement(long result, TimeSpanMaskManagerValue editedTimeSpan);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementMillisecondsString : TimeSpanMaskFormatElementNonEditable {
    private TimeSpanCultureInfoBase cultureInfo;
    public TimeSpanMaskFormatElementMillisecondsString(string mask, TimeSpanCultureInfoBase cultureInfo, bool hideOnNull);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementMinutes : TimeSpanMaskFormatElementEditable {
    public TimeSpanMaskPart Part { get; }
    public TimeSpanMaskFormatElementMinutes(string mask, int lengthLimit, bool hideOnNull);
    public virtual TimeSpanMaskPart get_Part();
    public virtual TimeSpanElementEditor CreateElementEditor(TimeSpanMaskManagerValue editedValue, bool allowInputCustomValue);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
    public virtual TimeSpanMaskManagerValue ApplyElement(long result, TimeSpanMaskManagerValue editedTimeSpan);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementMinutesString : TimeSpanMaskFormatElementNonEditable {
    private TimeSpanCultureInfoBase cultureInfo;
    public TimeSpanMaskFormatElementMinutesString(string mask, TimeSpanCultureInfoBase cultureInfo, bool hideOnNull);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementNonEditable : TimeSpanMaskFormatElement {
    [CompilerGeneratedAttribute]
private string <Mask>k__BackingField;
    public string Mask { get; }
    public TimeSpanMaskFormatElementNonEditable(string mask, bool hideOnNull);
    [CompilerGeneratedAttribute]
public string get_Mask();
    public virtual string Format(TimeSpanMaskManagerValue formatted);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementSeconds : TimeSpanMaskFormatElementEditable {
    public TimeSpanMaskPart Part { get; }
    public TimeSpanMaskFormatElementSeconds(string mask, int lengthLimit, bool hideOnNull);
    public virtual TimeSpanMaskPart get_Part();
    public virtual TimeSpanElementEditor CreateElementEditor(TimeSpanMaskManagerValue editedValue, bool allowInputCustomValue);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
    public virtual TimeSpanMaskManagerValue ApplyElement(long result, TimeSpanMaskManagerValue editedTimeSpan);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatElementSecondsString : TimeSpanMaskFormatElementNonEditable {
    private TimeSpanCultureInfoBase cultureInfo;
    public TimeSpanMaskFormatElementSecondsString(string mask, TimeSpanCultureInfoBase cultureInfo, bool hideOnNull);
    public virtual string Format(TimeSpanMaskManagerValue formatted);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Mask.Internal.TimeSpanMaskFormatInfo : object {
    private IList`1<TimeSpanMaskFormatElement> innerList;
    private TimeSpanMaskHiddenGroupCollection hiddenGroups;
    [CompilerGeneratedAttribute]
private bool <IsNegative>k__BackingField;
    private TimeSpanCultureInfoBase cultureInfo;
    private bool hideInsignificantParts;
    private bool allowNegativeValue;
    private static List`1<Type> formatList;
    private static Dictionary`2<Type, Type> nonEditableTypesToEditableDictionary;
    public int Count { get; }
    public bool IsNegative { get; public set; }
    public TimeSpanMaskFormatElement Item { get; }
    public TimeSpanMaskFormatInfo(string mask, TimeSpanCultureInfoBase cultureInfo, bool hideInsignificantParts, bool allowNegativeValue);
    private static TimeSpanMaskFormatInfo();
    public int get_Count();
    [CompilerGeneratedAttribute]
public bool get_IsNegative();
    [CompilerGeneratedAttribute]
public void set_IsNegative(bool value);
    public sealed virtual IEnumerator`1<TimeSpanMaskFormatElement> GetEnumerator();
    public TimeSpanMaskFormatElement get_Item(int index);
    public string Format(TimeSpanMaskManagerValue formatted);
    public string Format(TimeSpanMaskManagerValue formatted, int startFormatIndex, int endFormatIndex, int groupIndex);
    private bool IsVisible(TimeSpanMaskManagerValue formatted, int groupIndex, int index);
    public void ForEachParentParts(int currentIndex, Func`2<TimeSpanMaskFormatElementEditable, bool> evaluator);
    private TimeSpanMaskFormatElementEditable GetPartByType(Type elementType);
    public int GetPartIndex(Nullable`1<TimeSpanMaskPart> part);
    public TimeSpanMaskFormatElementEditable GetNextPart(int currentIndex);
    private bool IsGroupHidden(int groupStartIndex, int groupEndIndex, TimeSpanMaskManagerValue value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private int GetGroupLength(string mask);
    private string ExpandFormat(string mask);
    private void ParseMask(string mask);
    private static void ProcessRestrictionLength(string work, int groupLengthLimit, Int32& groupLength, Int32& maskLength, Int32& lengthLimit);
    private void FlushAccumulator(StringBuilder accumulator, List`1<TimeSpanMaskFormatElement> result, bool hideOnNull);
    public bool IsNavigationSymbol(string insertion, Int32& formatIndex, int startIndex);
    private bool ForeachFormatCheckNavigationSymbol(char chr, int startIndex, int endIndex, Int32& formatIndex);
    private bool CheckNavigationSymbol(char chr, TimeSpanMaskFormatElementEditable format);
    public bool IsHeadFormat(int index);
    public int GetEditablePartFromLiteral(int i);
    public int GetHiddenGroupEditableIndex(int index);
    public int GetPreviousVisibleIndex(TimeSpanMaskManagerValue currentValue, int currentIndex);
    public int GetNextVisibleIndex(TimeSpanMaskManagerValue currentValue, int currentIndex);
    private bool IsEditableElementVisible(int index, TimeSpanMaskManagerValue value);
    private static Type GetEditablePartTypeByLiteralType(TimeSpanStringLiteralType literalType);
    public bool TryParse(string initialEditText, int startIndex, TimeSpan currentValue, TimeSpan& res);
    private TimeSpan ApplySign(TimeSpan timeSpan, bool sign);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskHiddenGroup : object {
    [CompilerGeneratedAttribute]
private int <StartGroupIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndGroupIndex>k__BackingField;
    public int StartGroupIndex { get; public set; }
    public int EndGroupIndex { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StartGroupIndex();
    [CompilerGeneratedAttribute]
public void set_StartGroupIndex(int value);
    [CompilerGeneratedAttribute]
public int get_EndGroupIndex();
    [CompilerGeneratedAttribute]
public void set_EndGroupIndex(int value);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskHiddenGroupCollection : object {
    private List`1<TimeSpanMaskHiddenGroup> groupList;
    public void Add(int startIndex, int endIndex);
    public bool Get(int index, Int32& startIndex, Int32& endIndex);
    private sealed virtual override IEnumerator`1<TimeSpanMaskHiddenGroup> System.Collections.Generic.IEnumerable<DevExpress.Data.Mask.Internal.TimeSpanMaskHiddenGroup>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskManagerCore : MaskManager {
    internal static bool DefaultResetPartsOnSelectAllInput;
    internal static bool DefaultMoveCursorToDefaultPartOnSelectAllSpin;
    [CompilerGeneratedAttribute]
private int <SelectedFormatInfoIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpanMaskManagerValue <CurrentValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpanMaskManagerValue <UndoValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpanElementEditor <CurrentElementEditor>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpanMaskFormatInfo <FormatInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsModified>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpanCultureInfoBase <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAdvancingCaret>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MoveValueWithNavigation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SpinNextPartOnCycling>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpanMaskInputMode <InputMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpanMaskPart> <DefaultHiddenPart>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowNegativeValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DayDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysZeroOnClearSelectAllValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFocused>k__BackingField;
    protected int SelectedFormatInfoIndex { get; private set; }
    protected TimeSpanMaskManagerValue CurrentValue { get; private set; }
    protected TimeSpanMaskManagerValue UndoValue { get; private set; }
    protected TimeSpanElementEditor CurrentElementEditor { get; private set; }
    protected TimeSpanMaskFormatInfo FormatInfo { get; }
    protected TimeSpanMaskManagerValue NonEmptyCurrentValue { get; }
    protected bool IsElementEdited { get; }
    protected bool IsModified { get; private set; }
    protected TimeSpanCultureInfoBase CultureInfo { get; }
    protected bool IsAdvancingCaret { get; }
    protected bool MoveValueWithNavigation { get; }
    protected bool SpinNextPartOnCycling { get; }
    protected bool IsNegative { get; private set; }
    protected TimeSpanMaskInputMode InputMode { get; }
    protected Nullable`1<TimeSpanMaskPart> DefaultHiddenPart { get; }
    protected bool AllowNull { get; }
    protected bool AllowNegativeValue { get; }
    protected TimeSpan DayDuration { get; }
    protected bool AlwaysZeroOnClearSelectAllValue { get; }
    protected bool IsFocused { get; private set; }
    protected TimeSpanMaskFormatElementEditable SelectedElement { get; }
    public string DisplayText { get; }
    public int DisplayCursorPosition { get; }
    public int DisplaySelectionAnchor { get; }
    public bool CanUndo { get; }
    private static TimeSpanMaskManagerCore();
    public TimeSpanMaskManagerCore(string mask, bool isAdvancingCaret, TimeSpanCultureInfoBase cultureInfo, bool allowNull, bool moveValueWithNavigation, bool spinNextPartOnCycling, TimeSpanMaskInputMode inputMode, bool hideInsignificantParts, Nullable`1<TimeSpanMaskPart> defaultHiddenPart, bool allowNegativeValue, Nullable`1<bool> resetPartsOnSelectAllInput, TimeSpan dayDuration);
    [CompilerGeneratedAttribute]
protected int get_SelectedFormatInfoIndex();
    [CompilerGeneratedAttribute]
private void set_SelectedFormatInfoIndex(int value);
    [CompilerGeneratedAttribute]
protected TimeSpanMaskManagerValue get_CurrentValue();
    [CompilerGeneratedAttribute]
private void set_CurrentValue(TimeSpanMaskManagerValue value);
    [CompilerGeneratedAttribute]
protected TimeSpanMaskManagerValue get_UndoValue();
    [CompilerGeneratedAttribute]
private void set_UndoValue(TimeSpanMaskManagerValue value);
    [CompilerGeneratedAttribute]
protected TimeSpanElementEditor get_CurrentElementEditor();
    [CompilerGeneratedAttribute]
private void set_CurrentElementEditor(TimeSpanElementEditor value);
    [CompilerGeneratedAttribute]
protected TimeSpanMaskFormatInfo get_FormatInfo();
    protected TimeSpanMaskManagerValue get_NonEmptyCurrentValue();
    protected bool get_IsElementEdited();
    [CompilerGeneratedAttribute]
protected bool get_IsModified();
    [CompilerGeneratedAttribute]
private void set_IsModified(bool value);
    [CompilerGeneratedAttribute]
protected TimeSpanCultureInfoBase get_CultureInfo();
    [CompilerGeneratedAttribute]
protected bool get_IsAdvancingCaret();
    [CompilerGeneratedAttribute]
protected bool get_MoveValueWithNavigation();
    [CompilerGeneratedAttribute]
protected bool get_SpinNextPartOnCycling();
    protected bool get_IsNegative();
    private void set_IsNegative(bool value);
    [CompilerGeneratedAttribute]
protected TimeSpanMaskInputMode get_InputMode();
    [CompilerGeneratedAttribute]
protected Nullable`1<TimeSpanMaskPart> get_DefaultHiddenPart();
    [CompilerGeneratedAttribute]
protected bool get_AllowNull();
    [CompilerGeneratedAttribute]
protected bool get_AllowNegativeValue();
    [CompilerGeneratedAttribute]
protected TimeSpan get_DayDuration();
    [CompilerGeneratedAttribute]
protected bool get_AlwaysZeroOnClearSelectAllValue();
    [CompilerGeneratedAttribute]
protected bool get_IsFocused();
    [CompilerGeneratedAttribute]
private void set_IsFocused(bool value);
    protected TimeSpanMaskFormatElementEditable get_SelectedElement();
    internal bool IsNavigationSymbol(string insertion);
    public void ClearFromSelectAllForDeleteAndBackspace();
    public void ClearFromSelectAll();
    private void ClearCore(Func`1<TimeSpanMaskManagerValue> clearHandler);
    public virtual string GetCurrentEditText();
    public virtual object GetCurrentEditValue();
    public virtual void SetInitialEditText(string initialEditText);
    public virtual void SetInitialEditValue(object initialEditValue);
    private void UpdateIsNegative(TimeSpanMaskManagerValue initValue);
    private TimeSpanMaskManagerValue SetInitialLongEditValue(long initialEditValue);
    private TimeSpanMaskManagerValue SetInitialTimeSpanEditValue(Nullable`1<TimeSpan> initialEditValue);
    public virtual string get_DisplayText();
    public virtual int get_DisplayCursorPosition();
    public virtual int get_DisplaySelectionAnchor();
    public virtual bool Insert(string insertion);
    private bool IsNextSeparatorSkipInput(string insertion);
    private bool IsGroupHidden(int index);
    public virtual bool FlushPendingEditActions();
    public virtual bool Delete();
    public virtual bool Backspace();
    public void GotFocus();
    public void LostFocus();
    public virtual bool get_CanUndo();
    public virtual bool Undo();
    public virtual bool CursorToDisplayPosition(int newPosition, bool forceSelection);
    public virtual void SelectAll();
    public virtual bool CursorMoveNear(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorMoveFar(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorHome(bool forceSelection);
    public virtual bool CursorEnd(bool forceSelection);
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    private void SpinNegate(TimeSpanElementEditor editor, bool currentNegateValue);
    private bool SpinAction(Func`2<TimeSpanElementEditor, SpinActionResult> action);
    protected virtual TimeSpanMaskManagerValue GetClearValue();
    protected TimeSpanElementEditor GetCurrentElementEditor();
    protected void KillCurrentElementEditor();
    protected bool ApplyCurrentElementEditor();
    private bool ApplyElementEditor(TimeSpanElementEditor editor, int formatInfoIndex, bool raiseEvents, bool killCurrentEditor);
    private void SetCurrentValue(TimeSpanMaskManagerValue newValue);
    internal void CursorToDefaultPart();
    internal bool CanMoveCursorToDefaultPartOnSelectAllSpin();
    private int GetDefaultEditableIndex();
    private int GetFormatIndexFromPosition(int position);
    private bool BackspaceOrDelete(bool isBackspace);
    [CompilerGeneratedAttribute]
private TimeSpanMaskManagerValue <ClearFromSelectAllForDeleteAndBackspace>b__71_0();
    [CompilerGeneratedAttribute]
private SpinActionResult <SpinUp>b__104_0(TimeSpanElementEditor x);
    [CompilerGeneratedAttribute]
private SpinActionResult <SpinDown>b__105_0(TimeSpanElementEditor x);
}
public class DevExpress.Data.Mask.Internal.TimeSpanMaskManagerValue : object {
    internal TimeSpan TimeSpan;
    [CompilerGeneratedAttribute]
private TimeSpanValueType <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DayDuration>k__BackingField;
    private TimeSpanValueType ValueType { get; }
    internal TimeSpan DayDuration { get; }
    public long Ticks { get; }
    public long Days { get; }
    public long Hours { get; }
    public long Minutes { get; }
    public long Seconds { get; }
    public long Milliseconds { get; }
    public double TotalHours { get; }
    public double TotalMinutes { get; }
    public double TotalSeconds { get; }
    public double TotalMilliseconds { get; }
    public bool IsNegative { get; }
    public TimeSpanMaskManagerValue(TimeSpan timeSpan);
    public TimeSpanMaskManagerValue(TimeSpan timeSpan, TimeSpan dayDuration);
    public TimeSpanMaskManagerValue(long ticks);
    public TimeSpanMaskManagerValue(long ticks, TimeSpan dayDuration);
    [CompilerGeneratedAttribute]
private TimeSpanValueType get_ValueType();
    [CompilerGeneratedAttribute]
internal TimeSpan get_DayDuration();
    public long get_Ticks();
    public long get_Days();
    public long get_Hours();
    public long get_Minutes();
    public long get_Seconds();
    public long get_Milliseconds();
    public double get_TotalHours();
    public double get_TotalMinutes();
    public double get_TotalSeconds();
    public double get_TotalMilliseconds();
    public bool get_IsNegative();
    public object GetValue();
    public virtual string ToString();
    public TimeSpanMaskManagerValue Negate();
    public TimeSpanMaskManagerValue ReplaceDays(long value);
    public TimeSpanMaskManagerValue ReplaceHours(long value);
    public TimeSpanMaskManagerValue ReplaceMinutes(long value);
    public TimeSpanMaskManagerValue ReplaceSeconds(long value);
    public TimeSpanMaskManagerValue ReplaceMilliseconds(long value);
    public TimeSpanMaskManagerValue ReplaceFractional(long value);
    public string ToString(string mask);
    public virtual bool Equals(object obj);
    protected bool Equals(TimeSpanMaskManagerValue other);
    public virtual int GetHashCode();
}
internal class DevExpress.Data.Mask.Internal.Token : object {
    public static int CHAR;
    public static int DIGIT;
    public static int CHARClassDecimalDigit;
    public static int CHARClassNonDecimalDigit;
    public static int CHARClassWhiteSpace;
    public static int CHARClassNonWhiteSpace;
    public static int CHARClassWord;
    public static int CHARClassNonWord;
    public static int CHARClassUnicodeCategory;
    public static int CHARClassUnicodeCategoryNot;
    public static int yyErrorCode;
}
public abstract class DevExpress.Data.Mask.Internal.Transition : object {
    private State target;
    public State Target { get; }
    public bool IsEmpty { get; }
    public bool IsExact { get; }
    protected Transition(State target);
    public State get_Target();
    public abstract virtual bool IsMatch(char input);
    public abstract virtual Transition Copy(State target);
    public virtual bool get_IsEmpty();
    public virtual bool get_IsExact();
    public abstract virtual char GetSampleChar();
}
public class DevExpress.Data.Mask.Internal.UnicodeCategoryTransition : Transition {
    private bool notMatch;
    private string fCategory;
    private UnicodeCategory[] fCategoriesCodes;
    private static IDictionary`2<string, UnicodeCategory[]> fUnicodeCategoryNames;
    private static string sampleChars;
    private UnicodeCategoryTransition(State target, UnicodeCategoryTransition source);
    public UnicodeCategoryTransition(bool notMatch, UnicodeCategory[] categories, string category);
    private static UnicodeCategoryTransition();
    public virtual bool IsMatch(char input);
    public virtual Transition Copy(State target);
    public virtual char GetSampleChar();
    public virtual string ToString();
    public static UnicodeCategory[] GetUnicodeCategoryListFromCharacterClassName(string className);
}
public class DevExpress.Data.Mask.Internal.WhiteSpaceTransition : Transition {
    private bool notMatch;
    private WhiteSpaceTransition(State target, bool notMatch);
    public WhiteSpaceTransition(bool notMatch);
    public virtual bool IsMatch(char input);
    public virtual Transition Copy(State target);
    public virtual char GetSampleChar();
    public virtual string ToString();
}
public class DevExpress.Data.Mask.Internal.WordTransition : Transition {
    private bool notMatch;
    private WordTransition(State target, bool notMatch);
    public WordTransition(bool notMatch);
    public virtual bool IsMatch(char input);
    public virtual Transition Copy(State target);
    public virtual char GetSampleChar();
    public virtual string ToString();
}
internal interface DevExpress.Data.Mask.Internal.yyInput {
    public abstract virtual bool advance();
    public abstract virtual int token();
    public abstract virtual object value();
}
internal class DevExpress.Data.Mask.Internal.Yylex : object {
    private PokeableReader reader;
    private CultureInfo parseCulture;
    private int remembered_token;
    private object remembered_value;
    private bool inBracketExpression;
    private bool inBracketExpressionStart;
    private bool inDupCount;
    public Yylex(TextReader reader, CultureInfo parseCulture);
    private static string ReadUnicodeCategoryName(PokeableReader reader);
    private static char ReadCharCharCode(PokeableReader reader, int digitsWanted);
    public sealed virtual bool advance();
    public sealed virtual int token();
    public sealed virtual object value();
}
public class DevExpress.Data.Mask.MaskChangingEventArgs : CancelEventArgs {
    private object oldValue;
    private object newValue;
    public object OldValue { get; }
    public object NewValue { get; public set; }
    public MaskChangingEventArgs(object oldValue, object newValue);
    public MaskChangingEventArgs(object oldValue, object newValue, bool cancel);
    public object get_OldValue();
    public object get_NewValue();
    public void set_NewValue(object value);
}
[ObsoleteAttribute("Use EventHandler<MaskChangingEventArgs> instead", "True")]
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.Mask.MaskChangingEventHandler : MulticastDelegate {
    public MaskChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MaskChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MaskChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.Mask.MaskLogicResult : object {
    private string editText;
    private int cursorPosition;
    private Nullable`1<int> selectionAnchor;
    public static MaskLogicResult Empty;
    private static MaskLogicResult Empty2;
    public string EditText { get; }
    public int CursorPosition { get; }
    public Nullable`1<int> SelectionAnchor { get; }
    public MaskLogicResult(string editText, int cursorPosition, Nullable`1<int> selectionAnchor);
    private static MaskLogicResult();
    public string get_EditText();
    public int get_CursorPosition();
    public Nullable`1<int> get_SelectionAnchor();
    public static MaskLogicResult From(string editText, int cursorPosition, Nullable`1<int> selectionAnchor);
    public static MaskLogicResult From(string head, string tail);
    public virtual string ToString();
}
public abstract class DevExpress.Data.Mask.MaskManager : object {
    private static HashSet`1<Type> standardCompatibleTypes;
    private static IEnumerable`1<Tuple`3<string, Type, string>> NoDisplayParameters;
    private static ConcurrentDictionary`2<FactoryKey, IReadOnlyCollection`1<ICreateProxy>> createCache;
    private static ConcurrentDictionary`2<Type, IReadOnlyCollection`1<IPropertyProxy>> propertiesCache;
    [CompilerGeneratedAttribute]
private EventHandler EditTextChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<MaskChangingEventArgs> EditTextChanging;
    [CompilerGeneratedAttribute]
private CancelEventHandler LocalEditAction;
    internal static string EditMaskDisplayName;
    internal static string CultureDisplayName;
    internal static string UseAdvancingCaretDisplayName;
    internal static string SpinWithCarryDisplayName;
    internal static string PlaceholderDisplayName;
    private static Type RootKeyType;
    private static ConcurrentDictionary`2<FactoryKey, TypeInfo> resolverCache;
    private static ConcurrentDictionary`2<Type, ManagerInfo> maskManagerInfoCache;
    private static ConcurrentDictionary`2<string, Type> maskManagerTypesCache;
    public bool IsEditValueAssignedAsFormattedText { get; }
    public bool IsMatch { get; }
    public bool IsFinal { get; }
    public bool IsSelection { get; }
    public string DisplayText { get; }
    public int DisplayCursorPosition { get; }
    public int DisplaySelectionAnchor { get; }
    public int DisplaySelectionStart { get; }
    public int DisplaySelectionEnd { get; }
    public int DisplaySelectionLength { get; }
    public string TestDisplayText { get; }
    public bool CanUndo { get; }
    private static MaskManager();
    [EditorBrowsableAttribute("1")]
public static bool IsCompatible(Type maskManagerType, Type defaultMaskManagerType);
    [EditorBrowsableAttribute("1")]
public static Type GetCompatibleMaskManagerType(Type maskManagerType);
    [EditorBrowsableAttribute("1")]
public static bool IsAutoInstallMaskManagerType(Type maskManagerType);
    [EditorBrowsableAttribute("1")]
public static IEnumerable`1<Tuple`3<string, Type, string>> GetDisplayParameters(Type propertyType, Type maskManagerType, ParameterVisibility visibility);
    [EditorBrowsableAttribute("1")]
public static IEnumerable`1<Tuple`3<string, Type, string>> GetDisplayParameters(string key, Type maskManagerType, ParameterVisibility visibility);
    [EditorBrowsableAttribute("1")]
public static IEnumerable`1<Tuple`3<string, Type, string>> GetDisplayParameters(MaskAttributes maskAttributes, ParameterVisibility visibility);
    [EditorBrowsableAttribute("1")]
public static IEnumerable`1<Tuple`3<string, Type, string>> GetDisplayParameters(Type dataType, Type managerType, string signature, IEnumerable`1<Tuple`3<string, Type, object>> maskSettings);
    private static DisplayParameters DisplayParametersFactory(FactoryParameters maskMetadataParameters, ParameterVisibility visibility);
    private static DisplayParameters DisplayParameterFactory(FactoryKey key, FactoryParameters maskMetadataParameters, ParameterVisibility visibility);
    [EditorBrowsableAttribute("1")]
public static MaskManager Create(MaskAttributes maskAttributes, IEnumerable`1<Tuple`3<string, Type, object>> parameters);
    [EditorBrowsableAttribute("1")]
public static MaskManager Create(string key, Type maskManagerType, IEnumerable`1<Tuple`3<string, Type, object>> parameters);
    [EditorBrowsableAttribute("1")]
public static MaskManager Create(Type propertyType, Type maskManagerType, IEnumerable`1<Tuple`3<string, Type, object>> parameters);
    private static MaskManager Factory(IParameters parameters);
    private static IReadOnlyCollection`1<ICreateProxy> ResolveCreateProxies(FactoryKey key);
    private static ConstructorInfo[] ResolveConstructors(Type type);
    private static MethodInfo ResolveCreateMethod(Type type);
    private static MaskManager TryCreate(IParameters parameters, IReadOnlyCollection`1<ICreateProxy> proxies);
    private static IReadOnlyCollection`1<IPropertyProxy> ResolvePropertyProxies(Type type);
    private static PropertyInfo[] ResolveProperties(Type type);
    private static bool TryInjectPropertyValues(MaskManager manager, IParameters parameters, IReadOnlyCollection`1<IPropertyProxy> proxies);
    protected virtual void BeginInjection();
    protected virtual bool EndInjection(bool hasEffectiveChanges);
    [EditorBrowsableAttribute("1")]
internal static object EnsureDisplayParameterOptionalValue(Tuple`3<string, Type, string> displayParameter, object value);
    [IteratorStateMachineAttribute("DevExpress.Data.Mask.MaskManager/<GetPredefinedParameters>d__54")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<Tuple`3<string, Type, object>> GetPredefinedParameters(IEnumerable`1<Tuple`3<string, Type, string>> displayParameters);
    public abstract virtual string GetCurrentEditText();
    public abstract virtual object GetCurrentEditValue();
    public virtual bool get_IsEditValueAssignedAsFormattedText();
    public abstract virtual void SetInitialEditText(string initialEditText);
    public abstract virtual void SetInitialEditValue(object initialEditValue);
    public virtual bool get_IsMatch();
    public virtual bool get_IsFinal();
    public bool get_IsSelection();
    public abstract virtual string get_DisplayText();
    public abstract virtual int get_DisplayCursorPosition();
    public abstract virtual int get_DisplaySelectionAnchor();
    public int get_DisplaySelectionStart();
    public int get_DisplaySelectionEnd();
    public int get_DisplaySelectionLength();
    public string get_TestDisplayText();
    public abstract virtual bool Insert(string insertedText);
    public abstract virtual bool Delete();
    public abstract virtual bool Backspace();
    public abstract virtual bool get_CanUndo();
    public abstract virtual bool Undo();
    public abstract virtual bool CursorToDisplayPosition(int newPosition, bool forceSelection);
    public abstract virtual void SelectAll();
    [EditorBrowsableAttribute("1")]
[DXBrowsableAttribute("False")]
public bool CursorLeft(bool forceSelection, bool isNeededKeyCheck);
    public bool CursorMoveNear(bool forceSelection);
    public abstract virtual bool CursorMoveNear(bool forceSelection, bool isNeededKeyCheck);
    [EditorBrowsableAttribute("1")]
[DXBrowsableAttribute("False")]
public bool CursorRight(bool forceSelection, bool isNeededKeyCheck);
    public bool CursorMoveFar(bool forceSelection);
    public abstract virtual bool CursorMoveFar(bool forceSelection, bool isNeededKeyCheck);
    public bool CursorMoveConditional(bool isFar, bool forceSelection, bool isNeededKeyCheck);
    public bool CursorHome();
    public abstract virtual bool CursorHome(bool forceSelection);
    public bool CursorEnd();
    public abstract virtual bool CursorEnd(bool forceSelection);
    public abstract virtual bool SpinUp();
    public abstract virtual bool SpinDown();
    public virtual bool FlushPendingEditActions();
    [CompilerGeneratedAttribute]
public void add_EditTextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_EditTextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_EditTextChanging(EventHandler`1<MaskChangingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_EditTextChanging(EventHandler`1<MaskChangingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LocalEditAction(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LocalEditAction(CancelEventHandler value);
    protected void RaiseEditTextChanged();
    protected virtual bool RaiseEditTextChanging(object newEditValue);
    protected bool RaiseModifyWithoutEditValueChange();
    [EditorBrowsableAttribute("1")]
public static Type ResolveMaskManagerType(string maskManagerTypeName);
    [EditorBrowsableAttribute("1")]
public static Type ResolveMaskManagerType(Type propertyType, string nameOrMaskManagerTypeName);
    [EditorBrowsableAttribute("1")]
public static Type ResolveMaskManagerType(object dataKey, Type dataType);
    [EditorBrowsableAttribute("1")]
public static Type ResolveMaskManagerType(object dataKey, Func`1<Type> getDataType, AnnotationAttributes annotationAttributes);
    private static bool TryResolveMaskManagerType(Type propertyType, TypeInfo& managerTypeInfo);
    [EditorBrowsableAttribute("2")]
public static void RegisterMaskManagerType(Type managerType);
    [EditorBrowsableAttribute("1")]
public static TypeInfo RegisterMaskManagerType(Type dataType, Type managerType);
    [EditorBrowsableAttribute("1")]
public static TypeInfo RegisterMaskManagerType(string nameOrMaskManagerTypeName, Type managerType);
    [EditorBrowsableAttribute("1")]
public static TypeInfo RegisterMaskManagerType(object dataKey, Type managerType);
    [EditorBrowsableAttribute("1")]
public static TypeInfo RegisterMaskManagerType(object dataKey, Type managerType, string signature);
    [IteratorStateMachineAttribute("DevExpress.Data.Mask.MaskManager/<RegisteredTypeInfos>d__141")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<TypeInfo> RegisteredTypeInfos(Type managerType);
    [EditorBrowsableAttribute("1")]
public static string GetName(object dataKey, Type managerType, string signature);
    [EditorBrowsableAttribute("1")]
public static IEnumerable`1<Type> GetRegisteredTypes();
    [EditorBrowsableAttribute("1")]
public static IEnumerable`1<TypeInfo> GetRegisteredTypeInfos();
    [EditorBrowsableAttribute("1")]
public static T GetMaskManagerInfoProperty(Type managerType, Func`2<ManagerInfo, T> getProperty);
    [EditorBrowsableAttribute("1")]
public static ManagerInfo RegisterMaskManagerInfo(Type managerType, Type resourceType, string description);
    [EditorBrowsableAttribute("1")]
public static ManagerInfo RegisterMaskManagerInfo(Type managerType, IReadOnlyCollection`1<StandardMaskSpecifier> standardMaskSpecifiers, IReadOnlyCollection`1<CustomPlaceholder> customPlaceholders, string helpLink, string standardHelpLink, string customHelpLink, string advancedSettingsLink, bool updateFromSource);
}
[ObsoleteAttribute("Use TextMaskManager or TextMaskManagerCore or MaskManagerStated instead")]
[EditorBrowsableAttribute("1")]
[DXBrowsableAttribute("False")]
public abstract class DevExpress.Data.Mask.MaskManagerCommon`1 : MaskManagerStated`1<TState> {
    protected MaskManagerCommon`1(TState initialState);
}
[ObsoleteAttribute("Use TextMaskManager or TextMaskManagerCore instead")]
[EditorBrowsableAttribute("1")]
[DXBrowsableAttribute("False")]
public abstract class DevExpress.Data.Mask.MaskManagerFormattingBase`1 : MaskManagerCommon`1<TState> {
}
[ObsoleteAttribute("Use TextMaskManager or TextMaskManagerCore instead")]
[EditorBrowsableAttribute("1")]
[DXBrowsableAttribute("False")]
public class DevExpress.Data.Mask.MaskManagerPlainText : TextMaskManager {
}
[ObsoleteAttribute("Use MaskManagerTextState instead", "True")]
[EditorBrowsableAttribute("1")]
[DXBrowsableAttribute("False")]
public class DevExpress.Data.Mask.MaskManagerPlainTextState : MaskManagerTextStateCore`1<MaskManagerTextState> {
    public MaskManagerPlainTextState(string editText, int cursorPosition, int selectionAnchor);
}
[ObsoleteAttribute("Use any immutable class TState where (TState: class, IEquatable<TState>) instead")]
[EditorBrowsableAttribute("1")]
[DXBrowsableAttribute("False")]
public class DevExpress.Data.Mask.MaskManagerState : object {
}
public enum DevExpress.Data.Mask.MaskManagerStateChangeType : Enum {
    public int value__;
    public static MaskManagerStateChangeType Insert;
    public static MaskManagerStateChangeType Delete;
    public static MaskManagerStateChangeType Terminator;
}
public abstract class DevExpress.Data.Mask.MaskManagerStated`1 : MaskManager {
    private TState currentState;
    private TState backupState;
    private MaskManagerStateChangeType backupType;
    private TState cachedDState;
    private int cachedDCP;
    private int cachedDSA;
    private string cachedDT;
    protected TState CurrentState { get; }
    public bool CanUndo { get; }
    public int DisplayCursorPosition { get; }
    public int DisplaySelectionAnchor { get; }
    public string DisplayText { get; }
    protected MaskManagerStated`1(TState initialState);
    protected TState get_CurrentState();
    public virtual bool get_CanUndo();
    public virtual bool Undo();
    private void ApplyCore(TState newState, MaskManagerStateChangeType changeType);
    protected bool Apply(TState newState, MaskManagerStateChangeType changeType, bool isNeededKeyCheck);
    [ObsoleteAttribute("Use IsValidState instead", "True")]
[EditorBrowsableAttribute("1")]
protected bool IsValid(TState newState);
    protected virtual bool IsValidState(TState newState);
    protected void SetInitialState(TState newState);
    protected virtual TState GetCtorState();
    private void VerifyCache();
    public sealed virtual int get_DisplayCursorPosition();
    public sealed virtual int get_DisplaySelectionAnchor();
    public sealed virtual string get_DisplayText();
    public sealed virtual object GetCurrentEditValue();
    [ObsoleteAttribute("Use GetDisplayCursorPosition instead", "True")]
[EditorBrowsableAttribute("1")]
protected int GetCursorPosition(TState newState);
    [ObsoleteAttribute("Use GetDisplaySelectionAnchor instead", "True")]
[EditorBrowsableAttribute("1")]
protected int GetSelectionAnchor(TState newState);
    protected abstract virtual int GetDisplayCursorPosition(TState state);
    protected abstract virtual int GetDisplaySelectionAnchor(TState state);
    protected abstract virtual string GetDisplayText(TState state);
    protected abstract virtual string GetEditText(TState state);
    protected abstract virtual object GetEditValue(TState state);
    public sealed virtual string GetCurrentEditText();
}
public class DevExpress.Data.Mask.MaskManagerTextState : MaskManagerTextStateCore`1<MaskManagerTextState> {
    public static MaskManagerTextState Empty;
    public MaskManagerTextState(string editText, int cursorPosition, int selectionAnchor);
    private static MaskManagerTextState();
    public void SplitBySelection(String& head, String& selectedText, String& tail);
    public Tuple`3<string, string, string> SplitBySelection();
    internal static string ToTestString(string editText, int cursorPosition, Nullable`1<int> selectionAnchor);
    public virtual string ToString();
}
public abstract class DevExpress.Data.Mask.MaskManagerTextStateCore`1 : object {
    private string editText;
    private int cursorPosition;
    private int selectionAnchor;
    public string EditText { get; }
    public int CursorPosition { get; }
    public int SelectionAnchor { get; }
    protected MaskManagerTextStateCore`1(string editText, int cursorPosition, int selectionAnchor);
    public string get_EditText();
    public int get_CursorPosition();
    public int get_SelectionAnchor();
    public virtual bool Equals(TRealState comparedState);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Data.Mask.NumericMaskManager : MaskManagerStated`1<NumericMaskManagerState> {
    protected bool AllowNull;
    protected bool FastNull;
    private NumericMaskLogic logic;
    private static string defaultNegativeSignString;
    private string culturalNegativeSignString;
    private NumericFormatter[] formatters;
    private Nullable`1<TypeCode> editValueTypeCode;
    private bool canResetSignWithDelete;
    private bool canResetSignWithBackspace;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXBrowsableAttribute("False")]
[DXHelpExcludeAttribute("True")]
public static bool AllowSpinToNegativeZero;
    internal static string AutoHideDecimalSeparatorDisplayName;
    internal static string HideInsignificantZerosDisplayName;
    internal static string ValueAfterDeleteDisplayName;
    internal static string ValueTypeDisplayName;
    [DXBrowsableAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use DefaultAutoHideDecimalSeparator instead")]
public static bool DefaultAllowHideDecimalSeparatorWhenPossibleWithoutMeaningChange { get; public set; }
    private bool IsSignedMask { get; }
    public bool IsFinal { get; }
    [IgnoreAttribute]
public NumericMaskManager(Configuration config, bool allowNull);
    [IgnoreAttribute]
[ObsoleteAttribute("Use NumericMaskManager(string formatString, CultureInfo managerCultureInfo, bool allowNull) instead")]
public NumericMaskManager(string formatString, CultureInfo managerCultureInfo);
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.NumericMaskManager", "Numeric", "allowNull", "Mono.Cecil.CustomAttributeArgument")]
public NumericMaskManager(string formatString, CultureInfo managerCultureInfo, bool allowNull);
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.NumericMaskManager", "Numeric", "allowNull", "Mono.Cecil.CustomAttributeArgument")]
public NumericMaskManager(string formatString, CultureInfo managerCultureInfo, bool allowNull, Nullable`1<bool> autoHideDecimalSeparator, Nullable`1<bool> hideInsignificantZeros, Nullable`1<ValueAfterDelete> valueAfterDelete, Type valueType);
    private static NumericMaskManager();
    public static bool get_DefaultAllowHideDecimalSeparatorWhenPossibleWithoutMeaningChange();
    public static void set_DefaultAllowHideDecimalSeparatorWhenPossibleWithoutMeaningChange(bool value);
    private NumericFormatter GetFormatter(NumericMaskManagerState state);
    private void InitFormatters(string formatString, CultureInfo managerCultureInfo);
    private bool ForceEditValueTypeCode(TypeCode forcedCode);
    private bool get_IsSignedMask();
    public virtual bool get_IsFinal();
    protected virtual int GetDisplayCursorPosition(NumericMaskManagerState numericState);
    protected virtual int GetDisplaySelectionAnchor(NumericMaskManagerState numericState);
    protected virtual string GetDisplayText(NumericMaskManagerState numericState);
    protected virtual string GetEditText(NumericMaskManagerState numericState);
    private static bool IsFastNullEligibleState(string editText, int cursorPosAfterDeleteOperation);
    public virtual bool Delete();
    public virtual bool Backspace();
    private static bool IsJustDotsAndZeros(string input);
    private bool StateCursorPositionTo(int newPosition, bool forceSelection, bool isNeededKeyCheck);
    private bool StateCursorPositionTo(int newPosition, bool forceSelection);
    public virtual bool CursorToDisplayPosition(int newPosition, bool forceSelection);
    public virtual bool CursorMoveNear(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorMoveFar(bool forceSelection, bool isNeededKeyCheck);
    private bool SpinKeys(bool isUp);
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    public virtual bool CursorHome(bool forceSelection);
    public virtual bool CursorEnd(bool forceSelection);
    public virtual bool Insert(string insertedText);
    private bool IsValidInvariantCultureDecimal(string testedString);
    public virtual void SetInitialEditText(string initialEditText);
    protected virtual object GetEditValue(NumericMaskManagerState state);
    protected virtual bool IsValidState(NumericMaskManagerState newState);
    public virtual void SetInitialEditValue(object initialEditValue);
    private static int FirstNonZeroDigitPos(string str, int startSearchAt);
    private static void CorrectOverprecisedToStringForSingleOrDouble(int officialPrec, int maxPrec, int digitsAfterDecimal, String& work, object initialEditValue);
    public virtual void SelectAll();
}
public class DevExpress.Data.Mask.RegExpMaskManager : MaskManagerSelectAllEnhancer`1<RegExpMaskManagerCore> {
    public static Nullable`1<bool> DisableSpin;
    public static bool DefaultDisableSpin;
    internal static string UseReverseDfaDisplayName;
    internal static string AutoCompleteDisplayName;
    internal static string ShowPlaceholdersDisplayName;
    [IgnoreAttribute]
public RegExpMaskManager(Configuration config);
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.RegExpMaskManager", "Extended Regular Expression", "isOptimistic", "Mono.Cecil.CustomAttributeArgument")]
public RegExpMaskManager(string regExp, bool reverseDfa, bool isAutoComplete, bool isOptimistic, bool showPlaceholders, char placeholder, CultureInfo culture, Nullable`1<bool> allowBlankInput);
    private static string ApplyAllowBlankInput(string regEx, Nullable`1<bool> allowBlankInput);
    internal static bool IsDisableSpin();
}
public class DevExpress.Data.Mask.RegularMaskManager : LegacyMaskManager {
    public RegularMaskManager(Configuration config);
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.RegularMaskManager", "Simplified Regular Expression", "ignoreMaskBlank", "Mono.Cecil.CustomAttributeArgument")]
public RegularMaskManager(string mask, CultureInfo culture, char placeholder, bool saveLiterals, bool ignoreMaskBlank);
}
public class DevExpress.Data.Mask.SimpleMaskManager : LegacyMaskManager {
    public SimpleMaskManager(Configuration config);
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.SimpleMaskManager", "Simple", "ignoreMaskBlank", "Mono.Cecil.CustomAttributeArgument")]
public SimpleMaskManager(string mask, CultureInfo culture, char placeholder, bool saveLiterals, bool ignoreMaskBlank);
}
public class DevExpress.Data.Mask.TextMaskManager : TextMaskManagerCore {
    public virtual bool Insert(string insertedText);
    public virtual bool Delete();
    public virtual bool Backspace();
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    protected virtual MaskLogicResult InsertLogic(string head, string selectedText, string tail, string insertedText);
    protected virtual MaskLogicResult DeleteLogic(string head, string selectedText, string tail);
    protected virtual MaskLogicResult BackspaceLogic(string head, string selectedText, string tail);
    protected virtual MaskLogicResult SpinUpLogic(string head, string selectedText, string tail);
    protected virtual MaskLogicResult SpinDownLogic(string head, string selectedText, string tail);
}
public abstract class DevExpress.Data.Mask.TextMaskManagerCore : MaskManagerStated`1<MaskManagerTextState> {
    private MaskManagerTextState CreateStateForApply(string editText, int cursorPosition, Nullable`1<int> selectionAnchor);
    private MaskManagerTextState CreateStateForApply(MaskLogicResult maskLogicResult);
    [ObsoleteAttribute("Use overloads without states instead")]
[EditorBrowsableAttribute("1")]
protected bool Apply(MaskManagerTextState newState, MaskManagerStateChangeType changeType, bool isNeededKeyCheck);
    [ObsoleteAttribute("Use overloads without states instead")]
[EditorBrowsableAttribute("1")]
protected void SetInitialState(MaskManagerTextState newState);
    protected bool Apply(string editText, int cursorPosition, Nullable`1<int> selectionAnchor, MaskManagerStateChangeType changeType, bool isNeededKeyCheck);
    protected bool Apply(string editText, int cursorPosition, MaskManagerStateChangeType changeType, bool isNeededKeyCheck);
    protected bool Apply(MaskLogicResult result, MaskManagerStateChangeType changeType, bool isNeededKeyCheck);
    protected virtual MaskLogicResult GetInitialStateFromText(string editTextAssigned);
    protected virtual MaskLogicResult GetInitialStateFromValue(object initialEditValue);
    private void SetInitialState(MaskLogicResult initialState);
    public sealed virtual void SetInitialEditText(string initialEditText);
    public sealed virtual void SetInitialEditValue(object initialEditValue);
    protected sealed virtual MaskManagerTextState GetCtorState();
    protected virtual MaskLogicResult GetCtorLogic();
    protected sealed virtual string GetEditText(MaskManagerTextState state);
    protected sealed virtual object GetEditValue(MaskManagerTextState state);
    protected virtual object GetEditValue(string editText);
    protected sealed virtual string GetDisplayText(MaskManagerTextState state);
    protected virtual string GetDisplayText(string editText);
    protected sealed virtual int GetDisplayCursorPosition(MaskManagerTextState state);
    protected sealed virtual int GetDisplaySelectionAnchor(MaskManagerTextState state);
    protected virtual int DisplayToEditTextPosition(string editText, int displayPosition);
    protected virtual int EditToDisplayTextPosition(string editText, int editTextPosition);
    protected sealed virtual bool IsValidState(MaskManagerTextState newState);
    protected virtual bool IsValidEditText(string editText);
    protected virtual bool IsValidCursorStopPosition(string editText, int position);
    protected virtual Nullable`1<int> GetNextValidCursorStopPosition(string editText, int firstPositionToTest, bool isFarDirection);
    private bool MoveCursorTo(int newPosition, bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorMoveNear(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorMoveFar(bool forceSelection, bool isNeededKeyCheck);
    public virtual bool CursorToDisplayPosition(int newPosition, bool forceSelection);
    public virtual bool CursorHome(bool forceSelection);
    public virtual bool CursorEnd(bool forceSelection);
    public virtual void SelectAll();
}
public class DevExpress.Data.Mask.TimeOnlyMaskManager : BaseDateTimeMaskManager {
    [IgnoreAttribute]
public TimeOnlyMaskManager(Configuration config, bool allowNull);
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.TimeOnlyMaskManager", "TimeOnly", "allowNull", "Mono.Cecil.CustomAttributeArgument")]
public TimeOnlyMaskManager(string mask, Nullable`1<bool> useAdvancingCaret, CultureInfo culture, bool allowNull, Nullable`1<bool> spinWithCarry);
}
public abstract class DevExpress.Data.Mask.TimeSpanCultureInfoBase : CultureInfo {
    protected TimeSpanCultureInfoBase(string name);
    protected TimeSpanCultureInfoBase(string name, bool useUserOverride);
    protected TimeSpanCultureInfoBase(int culture);
    protected TimeSpanCultureInfoBase(int culture, bool useUserOverride);
    public abstract virtual string GetStringLiteral(TimeSpanStringLiteralType type, long value);
}
public enum DevExpress.Data.Mask.TimeSpanMaskInputMode : Enum {
    public int value__;
    public static TimeSpanMaskInputMode Restricted;
    public static TimeSpanMaskInputMode NotRestricted;
    public static TimeSpanMaskInputMode NotRestrictedLargestUnit;
}
public class DevExpress.Data.Mask.TimeSpanMaskManager : MaskManagerSelectAllEnhancer`1<TimeSpanMaskManagerCore> {
    internal static string EnableMnemonicsDisplayName;
    internal static string InputModeDisplayName;
    internal static string HideInsignificantPartsOnlyDisplayName;
    internal static string DefaultPartDisplayName;
    internal static string AllowNegativeValuesDisplayName;
    internal static string ResetPartsOnSelectAllInputDisplayName;
    internal static string DayDurationDisplayName;
    [EditorBrowsableAttribute("1")]
public static bool AlwaysZeroOnClearSelectAll { get; public set; }
    public static bool ResetPartsOnSelectAllInput { get; public set; }
    public static bool MoveCursorToDefaultPartOnSelectAllSpin { get; public set; }
    [ParametersAttribute("DevExpress.Data.v24.2, DevExpress.Data.Mask.TimeSpanMaskManager", "TimeSpan")]
public TimeSpanMaskManager(string mask, Nullable`1<bool> useAdvancingCaret, TimeSpanCultureInfoBase cultureInfo, bool allowNull, bool enableMnemonics, bool spinWithCarry, TimeSpanMaskInputMode inputMode, bool hideInsignificantPartsOnly, Nullable`1<TimeSpanMaskPart> defaultPart, bool allowNegativeValues, Nullable`1<bool> resetPartsOnSelectAllInput, TimeSpan dayDuration);
    [IgnoreAttribute]
public TimeSpanMaskManager(TimeSpanMaskManagerCore nested);
    public static bool get_AlwaysZeroOnClearSelectAll();
    public static void set_AlwaysZeroOnClearSelectAll(bool value);
    public static bool get_ResetPartsOnSelectAllInput();
    public static void set_ResetPartsOnSelectAllInput(bool value);
    public static bool get_MoveCursorToDefaultPartOnSelectAllSpin();
    public static void set_MoveCursorToDefaultPartOnSelectAllSpin(bool value);
    public virtual bool Backspace();
    public virtual bool Delete();
    public virtual bool Insert(string insertion);
    public virtual bool SpinUp();
    public virtual bool SpinDown();
    public void GotFocus();
    public void LostFocus();
}
public enum DevExpress.Data.Mask.TimeSpanMaskPart : Enum {
    public int value__;
    public static TimeSpanMaskPart Days;
    public static TimeSpanMaskPart Hours;
    public static TimeSpanMaskPart Minutes;
    public static TimeSpanMaskPart Seconds;
    public static TimeSpanMaskPart Milliseconds;
    public static TimeSpanMaskPart Fractional;
}
public enum DevExpress.Data.Mask.TimeSpanStringLiteralType : Enum {
    public int value__;
    public static TimeSpanStringLiteralType Days;
    public static TimeSpanStringLiteralType DaysShort;
    public static TimeSpanStringLiteralType Hours;
    public static TimeSpanStringLiteralType HoursShort;
    public static TimeSpanStringLiteralType Minutes;
    public static TimeSpanStringLiteralType MinutesShort;
    public static TimeSpanStringLiteralType Seconds;
    public static TimeSpanStringLiteralType SecondsShort;
    public static TimeSpanStringLiteralType Fractional;
    public static TimeSpanStringLiteralType FractionalShort;
    public static TimeSpanStringLiteralType Milliseconds;
    public static TimeSpanStringLiteralType MillisecondsShort;
}
public class DevExpress.Data.Native.BindingHelper : object {
    public static bool IsDataObject(object obj);
    public static bool IsDataSource(object obj);
    public static bool IsDataSourceType(Type type);
    public static bool IsListSource(object obj);
    private static bool IsListSource(Type type);
    public static bool IsList(PropertyDescriptor property);
    public static string GetDataSourceName(IComponent obj);
    public static string JoinStrings(string separator, string s1, string s2);
    public static IDataAdapter ConvertToIDataAdapter(object obj);
    private static IDataAdapter ExtractDataAdapter(object obj);
    public static bool IsDataAdapter(object obj);
    public static bool IsDataAdapterType(Type type);
    public static DataSet ConvertToDataSet(object obj);
    public static string ConvertToTableName(object obj, string member);
    public static object DetermineDataAdapter(IList typedAdapters, DataTable table);
    private static object DetermineDataAdapter(IList typedAdapters, string tableName, string tableNamespace);
    public static object DetermineDataAdapter(IList typedAdapters, string tableName);
    public static bool IsEFDbSet(Type type);
}
public class DevExpress.Data.Native.VS2005ConnectionStringHelper : object {
    private static string dataDirectoryTag;
    private static Assembly EnvDTEAssembly;
    private string connectionString;
    private object dataAdapter;
    private IDesignerHost designerHost;
    public VS2005ConnectionStringHelper(IDesignerHost designerHost);
    private static Type GetEnvDTEType(string typeName);
    private static object GetPropertyValue(Type type, object obj, string propertyName);
    private static string GetDataConnectionString(object dataAdapter);
    private static void SetDataConnectionString(object obj, string connectionString);
    private static PropertyInfo FindConnection(object obj, Object& connection);
    private bool ShouldPatchConnectionString(object dataAdapter);
    public void PatchConnectionString(object dataAdapter);
    public string GetPatchedConnectionString(IDesignerHost designerHost, string connectionString);
    private bool IsWebProject(object containingProject);
    private bool IsWebApplication(object containingProject);
    private sealed virtual override void System.IDisposable.Dispose();
}
[ExtensionAttribute]
public static class DevExpress.Data.NetCompatibility.Extensions.NetCompatibilityExtensions : object {
    [ExtensionAttribute]
public static bool StartsWith(string str, char c);
    [ExtensionAttribute]
public static bool EndsWith(string str, char c);
    [ExtensionAttribute]
public static bool Contains(string str, char c);
    [ExtensionAttribute]
public static bool Contains(string str, string value, StringComparison comparison);
    [ExtensionAttribute]
public static string AsSpan(string str, int startIndex);
    [ExtensionAttribute]
public static string AsSpan(string str, int startIndex, int length);
}
public class DevExpress.Data.NotificationCollectionBase : CollectionBase {
    private int lockUpdate;
    [CompilerGeneratedAttribute]
private CollectionChangeEventHandler CollectionChanged;
    protected bool IsLockUpdate { get; }
    public NotificationCollectionBase(CollectionChangeEventHandler collectionChanged);
    [CompilerGeneratedAttribute]
public void add_CollectionChanged(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CollectionChanged(CollectionChangeEventHandler value);
    internal void Reset();
    public void BeginUpdate();
    public void CancelUpdate();
    public void EndUpdate();
    protected bool get_IsLockUpdate();
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs e);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClear();
}
public class DevExpress.Data.NotLoadedObject : object {
    public static NotLoadedObject Instance;
    private static NotLoadedObject();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class DevExpress.Data.NullCurrentSupport : object {
    internal static NullCurrentSupport Default;
    private static NullCurrentSupport();
    private sealed virtual override void DevExpress.Data.IDataControllerCurrentSupport.OnCurrentControllerRowChanged(CurrentRowEventArgs e);
    private sealed virtual override void DevExpress.Data.IDataControllerCurrentSupport.OnCurrentControllerRowObjectChanged(CurrentRowChangedEventArgs e);
}
internal class DevExpress.Data.NullThreadClient : object {
    internal static NullThreadClient Default;
    private static NullThreadClient();
    private sealed virtual override void DevExpress.Data.IDataControllerThreadClient.OnAsyncBegin();
    private sealed virtual override void DevExpress.Data.IDataControllerThreadClient.OnAsyncEnd();
    private sealed virtual override void DevExpress.Data.IDataControllerThreadClient.OnRowLoaded(int controllerRowHandle);
    private sealed virtual override void DevExpress.Data.IDataControllerThreadClient.OnTotalsReceived();
}
internal class DevExpress.Data.NullValidationSupport : object {
    internal static NullValidationSupport Default;
    public IBoundControl BoundControl { get; }
    private static NullValidationSupport();
    public sealed virtual IBoundControl get_BoundControl();
    public sealed virtual void OnBeginCurrentRowEdit();
    public sealed virtual void OnCurrentRowUpdated(ControllerRowEventArgs e);
    public sealed virtual void OnValidatingCurrentRow(ValidateControllerRowEventArgs e);
    public sealed virtual void OnPostRowException(ControllerRowExceptionEventArgs e);
    public sealed virtual void OnPostCellException(ControllerRowCellExceptionEventArgs e);
    public sealed virtual void OnControllerItemChanged(ListChangedEventArgs e);
    public sealed virtual void OnStartNewItemRow();
    public sealed virtual void OnEndNewItemRow();
}
public class DevExpress.Data.NullVisualClient : object {
    internal static NullVisualClient Default;
    private int DevExpress.Data.IDataControllerVisualClient.VisibleRowCount { get; }
    private int DevExpress.Data.IDataControllerVisualClient.TopRowIndex { get; }
    private int DevExpress.Data.IDataControllerVisualClient.PageRowCount { get; }
    private bool DevExpress.Data.IDataControllerVisualClient.IsInitializing { get; }
    private static NullVisualClient();
    private sealed virtual override int DevExpress.Data.IDataControllerVisualClient.get_VisibleRowCount();
    private sealed virtual override int DevExpress.Data.IDataControllerVisualClient.get_TopRowIndex();
    private sealed virtual override int DevExpress.Data.IDataControllerVisualClient.get_PageRowCount();
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.UpdateColumns();
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.UpdateRows(int topRowIndexDelta);
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.UpdateLayout();
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.UpdateRow(int controllerRowHandle);
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.UpdateRowIndexes(int newTopRowIndex);
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.UpdateTotalSummary();
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.UpdateScrollBar();
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.RequestSynchronization();
    private sealed virtual override bool DevExpress.Data.IDataControllerVisualClient.get_IsInitializing();
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.ColumnsRenewed();
    private sealed virtual override void DevExpress.Data.IDataControllerVisualClient.RequireSynchronization(IDataSync dataSync);
}
public class DevExpress.Data.ODataLinq.GetSourceEventArgs : EventArgs {
    private ServerModeCoreExtender extender;
    [CompilerGeneratedAttribute]
private IQueryable <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KeyExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreSourceRowsThreadSafe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public IQueryable Query { get; public set; }
    public String[] KeyExpressions { get; public set; }
    public bool AreSourceRowsThreadSafe { get; public set; }
    public string Properties { get; public set; }
    public object Tag { get; public set; }
    public ServerModeCoreExtender Extender { get; }
    public GetSourceEventArgs(ServerModeCoreExtender extender);
    [CompilerGeneratedAttribute]
public IQueryable get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(IQueryable value);
    [CompilerGeneratedAttribute]
public String[] get_KeyExpressions();
    [CompilerGeneratedAttribute]
public void set_KeyExpressions(String[] value);
    [CompilerGeneratedAttribute]
public bool get_AreSourceRowsThreadSafe();
    [CompilerGeneratedAttribute]
public void set_AreSourceRowsThreadSafe(bool value);
    [CompilerGeneratedAttribute]
public string get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(string value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public ServerModeCoreExtender get_Extender();
}
internal class DevExpress.Data.ODataLinq.Helpers.DummyListServer : List`1<GetSourceNotHandledMessenger> {
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> groupSummaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual void Refresh();
}
public class DevExpress.Data.ODataLinq.Helpers.ElementDescriptor : EvaluatorContextDescriptor {
    private Dictionary`2<string, Func`2<object, object>> expressionDict;
    private Dictionary`2<string, PropertyInfo> propertyDict;
    private ElementTypeResolver typeResolver;
    private ElementDescriptorCache cache;
    public ElementDescriptor(Type elementType, ElementDescriptorCache cache);
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual IEnumerable GetQueryContexts(object source, string queryTypeName, CriteriaOperator condition, int top);
    public Type GetCriteriaType(CriteriaOperator criteria);
}
public class DevExpress.Data.ODataLinq.Helpers.ElementDescriptorCache : object {
    private Dictionary`2<Type, ElementDescriptor> descriptorDict;
    public ElementDescriptor GetDescriptor(Type type);
}
internal class DevExpress.Data.ODataLinq.Helpers.ElementTypeResolver : CriteriaTypeResolverBase {
    private Dictionary`2<string, Type> propertiesTypes;
    public ElementTypeResolver(Dictionary`2<string, Type> propertiesTypes);
    public sealed virtual CriteriaTypeResolverResult Visit(JoinOperand theOperand);
    public sealed virtual CriteriaTypeResolverResult Visit(OperandProperty theOperand);
    public sealed virtual CriteriaTypeResolverResult Visit(AggregateOperand theOperand);
    public Type Resolve(CriteriaOperator criteria);
}
internal class DevExpress.Data.ODataLinq.Helpers.GetSourceNotHandledMessenger : object {
    public static string MessageText;
    public string Message { get; }
    private static GetSourceNotHandledMessenger();
    public string get_Message();
}
public interface DevExpress.Data.ODataLinq.Helpers.IODataServerModeFrontEndOwner {
    public Type ElementType { get; }
    public IQueryable Query { get; }
    public String[] KeyExpressions { get; }
    public string DefaultSorting { get; }
    public CriteriaOperator FixedFilterCriteria { get; }
    public string Properties { get; }
    public abstract virtual Type get_ElementType();
    public abstract virtual IQueryable get_Query();
    public abstract virtual bool IsReadyForTakeOff();
    public abstract virtual String[] get_KeyExpressions();
    public abstract virtual string get_DefaultSorting();
    public abstract virtual CriteriaOperator get_FixedFilterCriteria();
    public abstract virtual string get_Properties();
}
[ExtensionAttribute]
public static class DevExpress.Data.ODataLinq.Helpers.ODataLinqHelpers : object {
    private static string SkipMethodName;
    private static string TakeMethodName;
    private static string WhereMethodName;
    private static string OrderByMethodName;
    private static string SelectVRMethodName;
    private static string SelectVMethodName;
    private static string GroupByMethodName;
    private static string MaxMethodName;
    private static string MinMethodName;
    private static string KeyPropertyName;
    private static string CountPropertyName;
    private static string SelectMethodName;
    private static ReaderWriterLockSlim wrapperDataTypeLock;
    private static Dictionary`2<Type, Type> wrapperDataTypeCache;
    private static Dictionary`2<Type, ListHelperBase> listHelperCache;
    private static ReaderWriterLockSlim wrapperHelperLock;
    private static Dictionary`2<Type, WrapperHelper> wrapperHelperDict;
    private static ReaderWriterLockSlim dataServiceQueryLock;
    private static Dictionary`2<Type, DataServiceQueryHelper> dataServiceQueryDict;
    private static ElementDescriptorCache elementDescriptorCache;
    public static object NotSummarySupported;
    private static ODataLinqHelpers();
    public static ElementDescriptor GetElementDescriptor(Type type);
    public static IEnumerable`1<T> ExecuteDataServiceQuery(IQueryable source);
    public static long GetTotalCount(IQueryable`1<T> source);
    public static IQueryable`1<T> AddQueryOption(IQueryable`1<T> source, string name, object value);
    private static DataServiceQueryHelper GetDataServiceQueryHelper(Type dataServiceQueryType);
    [ExtensionAttribute]
public static IQueryable GroupBy(IQueryable source, CriteriaOperator groupCriteria, bool isDesc, int skip, int top);
    private static Type GetWrapperDataType(Type elementType);
    private static WrapperHelper GetWrapperHelper(Type wrapperDataType);
    private static object GetNewWrapperData(IQueryable source, Type wrapperDataType);
    [ExtensionAttribute]
public static IEnumerable`1<Object[]> SelectSummary(IQueryable source, Type sourceType, ServerModeSummaryDescriptor[] summaries);
    [ExtensionAttribute]
public static IQueryable SelectFieldValues(IQueryable source, CriteriaOperator fieldCriteria);
    [ExtensionAttribute]
public static WrapperResult SelectFieldValuesAndRows(IQueryable source, CriteriaOperator[] fieldsCriteria);
    [ExtensionAttribute]
public static IQueryable OrderBy(IQueryable source, ServerModeOrderDescriptor[] order);
    [ExtensionAttribute]
public static IQueryable Where(IQueryable source, CriteriaOperator filterCriteria);
    [ExtensionAttribute]
public static IQueryable SkipData(IQueryable source, int count);
    [ExtensionAttribute]
public static IQueryable TakeData(IQueryable source, int count);
    [ExtensionAttribute]
public static IQueryable SelectData(IQueryable source, string selectExpression);
    private static IQueryable CallMethodWithParamOfTypeInt(IQueryable source, int count, string methodName);
    private static IQueryable CallMethodWithParamOfTypeString(IQueryable source, string str, string methodName);
    private static WrapperResult GetWrapperResult(IQueryable source, CriteriaOperator[] operands, string methodName);
    private static IQueryable CallMethodWithParamOfTypeCriteriaOperator(IQueryable source, CriteriaOperator criteriaOp, string methodName);
    private static ListHelperBase GetListHelper(Type wrapperDataType);
    public static int CountOfData(IQueryable source);
}
public class DevExpress.Data.ODataLinq.Helpers.ODataServerModeCache : ServerModeKeyedCacheExtendable {
    private IQueryable source;
    private CriteriaOperator externalCriteria;
    public static object PrepareTopGroupGroupByConstant;
    protected CriteriaOperator ExternalCriteria { get; }
    protected int MagicNumberTakeKeysUpperLimitAfterSkip { get; }
    public ODataServerModeCache(IQueryable source, string selectExpression, CriteriaOperator filterCriteria, CriteriaOperator[] keysCriteria, ServerModeOrderDescriptor[][] sortInfo, int groupCount, ServerModeSummaryDescriptor[] summary, ServerModeSummaryDescriptor[] totalSummary);
    private static ODataServerModeCache();
    protected virtual CriteriaOperator get_ExternalCriteria();
    protected virtual Func`2<object, object> GetOnInstanceEvaluator(CriteriaOperator subj);
    protected virtual object FetchPrepare(CriteriaOperator where, ServerModeOrderDescriptor[] order);
    protected virtual int get_MagicNumberTakeKeysUpperLimitAfterSkip();
    protected virtual void FetchKeysCore(object source, int skip, int take, IEnumerable& keys, IEnumerable& rows);
    protected virtual IEnumerable FetchRowsCore(object source, int skip, int take);
    protected virtual IEnumerable FetchRowsByKeysCore(Object[] keys);
    protected virtual int GetCountInternal(CriteriaOperator criteriaOperator);
    protected virtual Type ResolveKeyType(CriteriaOperator singleKeyCritterion);
    protected virtual Type ResolveRowType();
    protected virtual ServerModeGroupInfoData[] PrepareChildrenInternal(CriteriaOperator groupWhere, ServerModeOrderDescriptor groupByDescriptor, ServerModeSummaryDescriptor[] summaries);
    protected virtual ServerModeGroupInfoData PrepareTopGroupInfoInternal(ServerModeSummaryDescriptor[] summaries);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.ODataLinq.Helpers.ODataServerModeDesignTimeWrapper : object {
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual void Refresh();
    public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public object FindKeyByBeginWith(PropertyDescriptor column, string value);
    public object FindKeyByValue(PropertyDescriptor column, object value);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.ODataLinq.Helpers.ODataServerModeFrontEnd : object {
    public IODataServerModeFrontEndOwner Owner;
    private ServerModeCoreExtender Extender;
    private IListServer _Wrapper;
    private Type _Type;
    private IQueryable _DataSource;
    private bool _IsReadyForTakeOff;
    private String[] _KeyExpressions;
    private string _DefaultSorting;
    private CriteriaOperator _FixedFilterCriteria;
    private string _Properties;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    private CriteriaOperator _Successful_FilterCriteria;
    private ICollection`1<ServerModeOrderDescriptor[]> _Successful_sortInfo;
    private int _Successful_groupCount;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_summaryInfo;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_totalSummaryInfo;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler _ListChanged;
    protected IListServer Wrapper { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    public bool RefreshSupported { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ODataServerModeFrontEnd(IODataServerModeFrontEndOwner owner, ServerModeCoreExtender extender);
    [CompilerGeneratedAttribute]
public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual ODataServerModeFrontEnd DXClone();
    protected virtual ODataServerModeFrontEnd CreateDXClone();
    protected IListServer get_Wrapper();
    private void _Wrapper_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    private void _Wrapper_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private IListServer CreateWrapper();
    protected virtual IListServer CreateRuntimeWrapper();
    protected void KillWrapper();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    public sealed virtual void ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    [CompilerGeneratedAttribute]
private void add__ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ListChanged(ListChangedEventHandler value);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual void Refresh();
    public virtual bool get_RefreshSupported();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    public void CatchUp();
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
}
public class DevExpress.Data.ODataLinq.Helpers.ODataServerModeSourceObjectTypeConverter : TypeListConverter {
    private SortedList`2<string, Type> typesCache;
    public static string None;
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    private static bool HasBaseEntityType(Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object val);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destType);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
internal class DevExpress.Data.ODataLinq.Helpers.SummaryNotSupported : object {
}
internal class DevExpress.Data.ODataLinq.Helpers.TypeInfoNoSource : TypeInfoBase {
    private PropertyDescriptorCollection uiDescriptors;
    public PropertyDescriptorCollection UIDescriptors { get; }
    public TypeInfoNoSource(Type designTimeType);
    public virtual PropertyDescriptorCollection get_UIDescriptors();
    public virtual object GetWorkerThreadRowInfo(object workerRow);
    public virtual object GetUIThreadRow(object rowInfo);
}
public class DevExpress.Data.ODataLinq.Helpers.WrapperDataServiceQuery`1 : object {
    private object rootGroupKeyValue;
    private IQueryable`1<TElement> rootSource;
    private CriteriaOperator rootKeyExpression;
    private int rootLevel;
    private int rootTakeCount;
    private int rootSkipCount;
    private ElementDescriptor elementDescriptor;
    private string rootSelectExpression;
    public int Count { get; }
    public object Key { get; }
    public IQueryable`1<TElement> Rows { get; }
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public WrapperDataServiceQuery`1(object rootGroupKeyValue, IQueryable`1<TElement> rootSource, CriteriaOperator rootKeyExpression, int rootLevel, int rootTakeCount, int rootSkipCount, string selectExpression);
    public WrapperDataServiceQuery`1(object rootGroupKeyValue, IQueryable`1<TElement> rootSource, CriteriaOperator rootKeyExpression, int rootLevel, int rootTakeCount, int rootSkipCount, string selectExpression, ElementDescriptor elementDescriptor);
    public WrapperDataServiceQuery`1(WrapperDataServiceQuery`1<TElement> source);
    public int get_Count();
    public object get_Key();
    public IQueryable`1<TElement> get_Rows();
    private IQueryable`1<TElement> GetSourceForExecute(IQueryable`1<TElement> source, Nullable`1<int> skip, Nullable`1<int> take);
    private IQueryable`1<TElement> TryAddSelectExpression(IQueryable`1<TElement> query);
    private bool AddToList(List`1<WrapperDataServiceQuery`1<TElement>> list, WrapperDataServiceQuery`1<TElement> value, int skip, int top, Int32& skipCounter);
    public IQueryable GroupBy(CriteriaOperator key, bool isDesc, int skip, int top);
    private static ListHelperBase GetListHelper(Type type);
    private bool IsKeyProperty(CriteriaOperator[] criteria);
    private static bool IsKeyProperty(CriteriaOperator criteria);
    public IQueryable SelectFieldValues(CriteriaOperator criteria);
    public WrapperResult SelectFieldValuesAndRows(CriteriaOperator[] operands);
    private IQueryable SelectUniqueFieldValues(IQueryable`1<TElement> source, CriteriaOperator criteria, int skipCount, int takeCount);
    private WrapperResult SelectFieldValuesAsList(IQueryable`1<TElement> source, CriteriaOperator[] keysCriteria, int skipCount, int takeCount);
    private IQueryable`1<TElement> AppendKeyFilter(IQueryable query, CriteriaOperator keyCriteria, object keyValue, BinaryOperatorType opType);
    public object Max(CriteriaOperator fieldCriteria);
    public object Min(CriteriaOperator fieldCriteria);
    private object MaxOrMin(CriteriaOperator fieldCriteria, bool isMax);
    public IQueryable OrderBy(ServerModeOrderDescriptor[] order);
    public IQueryable Where(CriteriaOperator filterCriteria);
    public IQueryable Take(int count);
    public IQueryable Select(string selectExpression);
    public IQueryable Skip(int count);
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerator`1<TElement> GetEnumerator();
    [CompilerGeneratedAttribute]
private int <get_Count>b__9_0();
}
public class DevExpress.Data.ODataLinq.Helpers.WrapperResult : ValueType {
    public IList ElementList;
    public IList FieldList;
    public bool IsEmpty;
    public WrapperResult(IList elementList, IList fieldList);
    public WrapperResult(IList elementList, IList fieldList, bool isEmpty);
}
public interface DevExpress.Data.ODataLinq.IOdata {
}
[DesignerAttribute("DevExpress.Design.ODataServerModeSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.ODataInstantFeedbackSource.bmp")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to a OData V4 Service in Instant Feedback Mode.")]
[DefaultEventAttribute("GetSource")]
public class DevExpress.Data.ODataLinq.ODataInstantFeedbackSource : Component {
    private AsyncListServer2DatacontrollerProxy _AsyncListServer;
    private AsyncListDesignTimeWrapper _DTWrapper;
    private IList _List;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetSourceEventArgs> GetSource;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetSourceEventArgs> DismissSource;
    private CriteriaOperator _FixedFilter;
    private string _Properties;
    private string _DefaultSorting;
    private String[] _KeyExpressions;
    private bool _AreSourceRowsThreadSafe;
    private Type _ElementType;
    private Nullable`1<bool> _isDesignMode;
    private bool IsDisposed;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CriteriaOperator FixedFilterCriteria { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies a string representation of an expression used to filter objects on the data store side. This filter is never affected by bound data-aware controls.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceCriteriaEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string FixedFilterString { get; public set; }
    [LocalizableAttribute("False")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the semicolon-separated list of property names. When the list is not emply, only the listed properties and key fields will be loaded. Otherwise, all properties are loaded.")]
[EditorAttribute("DevExpress.Design.ODataServerModeSourcePropertiesEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string Properties { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default when the sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the name of the key property.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceKeyExpressionEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string KeyExpression { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
public String[] KeyExpressions { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies whether elements retrieved by the ODataInstantFeedbackSource‘s queryable source are thread-safe.")]
public bool AreSourceRowsThreadSafe { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Data.ODataLinq.Helpers.ODataServerModeSourceObjectTypeConverter")]
[CategoryAttribute("Design")]
[DescriptionAttribute("Specifies the type of objects that will be retrieved from a data source at design time.")]
public Type DesignTimeElementType { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public ODataInstantFeedbackSource(EventHandler`1<GetSourceEventArgs> getSource);
    public ODataInstantFeedbackSource(EventHandler`1<GetSourceEventArgs> getSource, EventHandler`1<GetSourceEventArgs> freeSource);
    public ODataInstantFeedbackSource(Action`1<GetSourceEventArgs> getSource);
    public ODataInstantFeedbackSource(Action`1<GetSourceEventArgs> getSource, Action`1<GetSourceEventArgs> freeSource);
    [CompilerGeneratedAttribute]
public void add_GetSource(EventHandler`1<GetSourceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GetSource(EventHandler`1<GetSourceEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DismissSource(EventHandler`1<GetSourceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DismissSource(EventHandler`1<GetSourceEventArgs> value);
    public CriteriaOperator get_FixedFilterCriteria();
    public void set_FixedFilterCriteria(CriteriaOperator value);
    public string get_FixedFilterString();
    public void set_FixedFilterString(string value);
    public string get_Properties();
    public void set_Properties(string value);
    public string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    public string get_KeyExpression();
    public void set_KeyExpression(string value);
    public String[] get_KeyExpressions();
    public void set_KeyExpressions(String[] value);
    public bool get_AreSourceRowsThreadSafe();
    public void set_AreSourceRowsThreadSafe(bool value);
    private static EventHandler`1<T> ToEventHandler(Action`1<T> action);
    public Type get_DesignTimeElementType();
    public void set_DesignTimeElementType(Type value);
    private void TestCanChangeProperties();
    private void FillKeyExpression();
    private void ForceCatchUp();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private AsyncListDesignTimeWrapper CreateDesignTimeWrapper();
    private AsyncListServer2DatacontrollerProxy CreateRunTimeProxy();
    private AsyncListServerCore CreateAsyncListServerCore();
    private void listServerGet(object sender, ListServerGetOrFreeEventArgs e);
    private void listServerFree(object sender, ListServerGetOrFreeEventArgs e);
    private void getTypeInfo(object sender, GetTypeInfoEventArgs e);
    private void getPropertyDescriptors(object sender, GetPropertyDescriptorsEventArgs e);
    private void getWorkerRowInfo(object sender, GetWorkerThreadRowInfoEventArgs e);
    private void getUIRow(object sender, GetUIThreadRowEventArgs e);
    protected virtual void Dispose(bool disposing);
    public void Refresh();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual ODataInstantFeedbackSource DXCloneCreate();
}
public class DevExpress.Data.ODataLinq.ODataServerModeCore : ServerModeCoreExtendable {
    private IQueryable source;
    private CriteriaOperator _FixedCriteria;
    private string _Properties;
    private string _SelectExpression;
    private static Char[] splitChars;
    private static ICriteriaToExpressionConverter converter;
    private static ICriteriaToExpressionConverter converterForInstance;
    public CriteriaOperator FixedCriteria { get; }
    private CriteriaOperator DevExpress.Data.Filtering.Helpers.IFilteredDataSource.Filter { get; private set; }
    public string Properties { get; }
    public static ICriteriaToExpressionConverter Converter { get; }
    public static ICriteriaToExpressionConverter ConverterForInstance { get; }
    public ODataServerModeCore(IQueryable source, String[] keys, CriteriaOperator fixedFilterCriteria, string properties, ServerModeCoreExtender extender);
    public ODataServerModeCore(IQueryable source, CriteriaOperator[] keys, CriteriaOperator fixedFilterCriteria, string properties, ServerModeCoreExtender extender);
    private static ODataServerModeCore();
    public CriteriaOperator get_FixedCriteria();
    public virtual void SetFixedCriteria(CriteriaOperator op);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.Helpers.IFilteredDataSource.get_Filter();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IFilteredDataSource.set_Filter(CriteriaOperator value);
    public string get_Properties();
    private string GetSelectExpression();
    public static ICriteriaToExpressionConverter get_Converter();
    public static ICriteriaToExpressionConverter get_ConverterForInstance();
    protected virtual ServerModeKeyedCacheExtendable CreateCacheCoreExtendable();
    public virtual IList GetAllFilteredAndSortedRows();
    protected virtual Object[] GetUniqueValuesInternal(CriteriaOperator expression, int maxCount, CriteriaOperator filter);
    protected virtual ServerModeCore DXCloneCreate();
    public static String[] GuessKeyExpression(Type objectType);
}
[DesignerAttribute("DevExpress.Design.ODataServerModeSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.ODataServerModeSource.bmp")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to a OData v4 Data Service in Server Mode.")]
public class DevExpress.Data.ODataLinq.ODataServerModeSource : Component {
    private EventHandler`1<ErrorEventArgs> ErrorOccurred;
    private ODataServerModeFrontEnd _List;
    private IQueryable query;
    private String[] keys;
    private string _DefaultSorting;
    private CriteriaOperator _FixedFilter;
    private string _Properties;
    private ODataServerModeCore internalList;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    public static Nullable`1<bool> UseIncludeTotalCountInsteadOfCount;
    private Type elementType;
    private ServerModeCoreExtender extender;
    private Nullable`1<bool> _isDesignMode;
    private int _initCount;
    [BrowsableAttribute("False")]
public ServerModeCoreExtender Extender { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CriteriaOperator FixedFilterCriteria { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies a string representation of an expression used to filter objects on the data store side. This filter is never affected by bound data-aware controls.")]
[EditorAttribute("DevExpress.Design.ServerModeSourceCriteriaEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string FixedFilterString { get; public set; }
    [LocalizableAttribute("False")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the semicolon-separated list of property names. When the list is not emply, only the listed properties and key fields will be loaded. Otherwise, all properties are loaded.")]
[EditorAttribute("DevExpress.Design.ODataServerModeSourcePropertiesEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string Properties { get; public set; }
    [TypeConverterAttribute("DevExpress.Data.ODataLinq.Helpers.ODataServerModeSourceObjectTypeConverter")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the type of objects retrieved from a data source.")]
public Type ElementType { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the query request to the OData service.")]
public IQueryable Query { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the name of the key property.")]
[EditorAttribute("DevExpress.Design.ServerModeSourceKeyExpressionEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string KeyExpression { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
public String[] KeyExpressions { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default when the sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.ServerModeSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    private ODataServerModeFrontEnd List { get; }
    protected ODataServerModeCore InternalList { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public ODataServerModeSource(ServerModeCoreExtender extender);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.add_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.remove_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public ServerModeCoreExtender get_Extender();
    public sealed virtual CriteriaOperator get_FixedFilterCriteria();
    public void set_FixedFilterCriteria(CriteriaOperator value);
    public string get_FixedFilterString();
    public void set_FixedFilterString(string value);
    public sealed virtual string get_Properties();
    public void set_Properties(string value);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual ODataServerModeSource DXCloneCreate();
    public sealed virtual Type get_ElementType();
    public void set_ElementType(Type value);
    public sealed virtual IQueryable get_Query();
    public void set_Query(IQueryable value);
    private sealed virtual override bool DevExpress.Data.ODataLinq.Helpers.IODataServerModeFrontEndOwner.IsReadyForTakeOff();
    public string get_KeyExpression();
    public void set_KeyExpression(string value);
    public sealed virtual String[] get_KeyExpressions();
    public void set_KeyExpressions(String[] value);
    public sealed virtual string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    private void FillKeyExpression();
    private bool IsInitialized();
    private void ForceCatchUp();
    private ODataServerModeFrontEnd get_List();
    protected virtual void OnExceptionThrown(ServerModeExceptionThrownEventArgs e);
    protected virtual void OnInconsistencyDetected(ServerModeInconsistencyDetectedEventArgs e);
    private void _List_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private void _List_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    public void Reload();
    private void DoPostponedReload(object state);
    private void FailUnderAspOrAnotherNonPostEnvironment();
    protected virtual bool IsGoodContext(SynchronizationContext context);
    protected ODataServerModeCore get_InternalList();
    protected virtual ODataServerModeFrontEnd CreateList();
    protected virtual ODataServerModeCore CreateInternalList();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
}
public class DevExpress.Data.OperationCompleted : MulticastDelegate {
    public OperationCompleted(object object, IntPtr method);
    public virtual void Invoke(object arguments);
    public virtual IAsyncResult BeginInvoke(object arguments, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.ParseFindPanelTextEventArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
private string <FindPanelText>k__BackingField;
    internal CriteriaOperator _FindCriteria;
    internal Func`3<string, string, DisplayTextHighlightRange[]> _Highlighter;
    public string FindPanelText { get; public set; }
    public ParseFindPanelTextEventArgs(string findPanelText);
    [CompilerGeneratedAttribute]
public virtual string get_FindPanelText();
    [CompilerGeneratedAttribute]
public virtual void set_FindPanelText(string value);
    private void SetFindCriteriaWithNoHighlight(CriteriaOperator findCriteria);
    public void SetFindCriteria(CriteriaOperator findCriteria);
    public virtual void SetFindCriteriaAndHighlightedRangesGetterFromDisplayTextAndFieldName(CriteriaOperator findCriteria, Func`3<string, string, DisplayTextHighlightRange[]> highlightedRangesGetterFromDisplayTextAndFieldName);
    public virtual void SetFindCriteriaAndHighlightedRangesGetterFromDisplayText(CriteriaOperator findCriteria, Func`2<string, DisplayTextHighlightRange[]> highlightedRangesGetterFromDisplayText);
    public virtual void SetFindCriteriaAndHighlightedRangesGetterFromDisplayTextAndFieldName(CriteriaOperator findCriteria, Func`3<string, string, Nullable`1<DisplayTextHighlightRange>> highlightedRangeGetterFromDisplayTextAndFieldName);
    public virtual void SetFindCriteriaAndHighlightedRangesGetterFromDisplayText(CriteriaOperator findCriteria, Func`2<string, Nullable`1<DisplayTextHighlightRange>> highlightedRangeGetterFromDisplayText);
}
internal class DevExpress.Data.Platform.Compatibility.DefaultNonDesktop : object {
    internal static IDesktopBridge Instance;
    private EditableCollectionHelperCore editableCollection;
    private EditableCollectionHelperCore DevExpress.Data.Platform.Compatibility.IDesktopBridge.EditableCollection { get; }
    private static DefaultNonDesktop();
    private sealed virtual override EditableCollectionHelperCore DevExpress.Data.Platform.Compatibility.IDesktopBridge.get_EditableCollection();
    private sealed virtual override object DevExpress.Data.Platform.Compatibility.IDesktopBridge.ScaleValueDeserialize(object value, SizeF scale);
    private sealed virtual override bool DevExpress.Data.Platform.Compatibility.IDesktopBridge.TypeHelperIsRelatedToUI(Type type);
    private sealed virtual override Type DevExpress.Data.Platform.Compatibility.IDesktopBridge.CollectionViewGetRowType(object collection);
    private sealed virtual override PropertyDescriptorCollection DevExpress.Data.Platform.Compatibility.IDesktopBridge.TryGetItemProperties(IList list);
    private sealed virtual override void DevExpress.Data.Platform.Compatibility.IDesktopBridge.OnBindingListChanged(object sender, ListChangedEventArgs e, Boolean& ignoreNextReset);
    private sealed virtual override bool DevExpress.Data.Platform.Compatibility.IDesktopBridge.DataViewCanIgnoreItemChanged();
    private sealed virtual override bool DevExpress.Data.Platform.Compatibility.IDesktopBridge.IsDataView(IList list);
    private sealed virtual override bool DevExpress.Data.Platform.Compatibility.IDesktopBridge.GetListSource(object dataSource, string dataMember, IList& result);
    private sealed virtual override PropertyDescriptorCollection DevExpress.Data.Platform.Compatibility.IDesktopBridge.GetListItemProperties(object list, PropertyDescriptor[] listAccessors);
    private sealed virtual override string DevExpress.Data.Platform.Compatibility.IDesktopBridge.GetListName(object list, PropertyDescriptor[] listAccessors);
    private sealed virtual override bool DevExpress.Data.Platform.Compatibility.IDesktopBridge.IsBindingSource(object list, Object& dataSource, String& dataMember);
    private sealed virtual override IList DevExpress.Data.Platform.Compatibility.IDesktopBridge.GetListFromBindingContext(object context, object dataSource, string dataMember);
    private sealed virtual override SynchronizationContext DevExpress.Data.Platform.Compatibility.IDesktopBridge.CreateSynchronizationContext(Boolean& canCreate);
    private sealed virtual override void DevExpress.Data.Platform.Compatibility.IDesktopBridge.ShowError(ITypeDescriptorContext context, Exception e);
    private sealed virtual override IConverterAspect DevExpress.Data.Platform.Compatibility.IDesktopBridge.GetPropertyGridConverterAspect();
    private sealed virtual override IBindingList DevExpress.Data.Platform.Compatibility.IDesktopBridge.CreateBindingSource(IList innerList);
}
internal class DevExpress.Data.Platform.Compatibility.DefaultPlatformServicesNonDesktop : object {
    private IPlatformKeyboardService keyboard;
    private IPlatformObjectFactoryService objectFactory;
    private IPlatformSystemInformationService systemInformation;
    private IPlatformCursorsService cursors;
    private IPlatformClipboardService clipboard;
    public IPlatformKeyboardService Keyboard { get; }
    public IPlatformObjectFactoryService Factory { get; }
    public IPlatformSystemInformationService SystemInformation { get; }
    public IPlatformCursorsService Cursors { get; }
    public IPlatformClipboardService Clipboard { get; }
    public sealed virtual IPlatformKeyboardService get_Keyboard();
    public sealed virtual IPlatformObjectFactoryService get_Factory();
    public sealed virtual IPlatformSystemInformationService get_SystemInformation();
    public sealed virtual IPlatformCursorsService get_Cursors();
    public sealed virtual IPlatformClipboardService get_Clipboard();
}
public static class DevExpress.Data.Platform.Compatibility.DesktopCore : object {
    private static IDesktopBridge _instance;
    internal static IDesktopBridge Instance { get; internal set; }
    internal static IDesktopBridge get_Instance();
    internal static void set_Instance(IDesktopBridge value);
}
internal class DevExpress.Data.Platform.Compatibility.EditableCollectionHelperCore : object {
    public virtual bool IsEditableCollectionView(object collection);
    public virtual bool IsAllowEditEditableCollectionView(object collection);
    public virtual bool IsInstance(object collection);
    public virtual bool CanAddNew(object collection);
    public virtual void CommitNew(object collection);
    public virtual object CurrentAddItem(object collection);
    public virtual void CancelNew(object collection);
    public virtual object AddNew(object collection);
    public virtual bool IsEditingItem(object collection);
    public virtual void CancelEdit(object collection);
    public virtual void CommitEdit(object collection);
    public virtual bool IsAddingNew(object collection);
    public virtual bool CanCancelEdit(object collection);
    public virtual void Remove(object collection, object value);
    public virtual bool CanRemove(object collection);
    public virtual void RemoveAt(object collection, int index);
    public virtual void EditItem(object collection, object value);
}
public interface DevExpress.Data.Platform.Compatibility.ICalculatedColumnPropertyDescriptor {
}
internal interface DevExpress.Data.Platform.Compatibility.IDesktopBridge {
    public EditableCollectionHelperCore EditableCollection { get; }
    public abstract virtual bool TypeHelperIsRelatedToUI(Type type);
    public abstract virtual EditableCollectionHelperCore get_EditableCollection();
    public abstract virtual Type CollectionViewGetRowType(object collection);
    public abstract virtual PropertyDescriptorCollection TryGetItemProperties(IList list);
    public abstract virtual void OnBindingListChanged(object sender, ListChangedEventArgs e, Boolean& ignoreNextReset);
    public abstract virtual bool DataViewCanIgnoreItemChanged();
    public abstract virtual bool IsDataView(IList list);
    public abstract virtual bool GetListSource(object dataSource, string dataMember, IList& result);
    public abstract virtual PropertyDescriptorCollection GetListItemProperties(object list, PropertyDescriptor[] listAccessors);
    public abstract virtual string GetListName(object list, PropertyDescriptor[] listAccessors);
    public abstract virtual bool IsBindingSource(object list, Object& dataSource, String& dataMember);
    public abstract virtual IList GetListFromBindingContext(object context, object dataSource, string dataMember);
    public abstract virtual SynchronizationContext CreateSynchronizationContext(Boolean& canCreate);
    public abstract virtual void ShowError(ITypeDescriptorContext context, Exception e);
    public abstract virtual IConverterAspect GetPropertyGridConverterAspect();
    public abstract virtual object ScaleValueDeserialize(object value, SizeF scale);
    public abstract virtual IBindingList CreateBindingSource(IList innerList);
}
public interface DevExpress.Data.Platform.Compatibility.IPlatformKeyboardService {
    public PortableKeyState KeyState { get; }
    public bool IsAltGrPressed { get; }
    public abstract virtual PortableKeyState get_KeyState();
    public abstract virtual bool get_IsAltGrPressed();
}
public interface DevExpress.Data.Platform.Compatibility.IPlatformObjectFactoryService {
    public abstract virtual IPortableDispatchedTimer CreateDispatchedTimer();
    public abstract virtual IOpenFileDialog CreateOpenFileDialog();
    public abstract virtual ISaveFileDialog CreateSaveFileDialog();
    public abstract virtual IFolderBrowserDialog CreateFolderBrowserDialog();
}
public interface DevExpress.Data.Platform.Compatibility.IPlatformServices {
    public IPlatformKeyboardService Keyboard { get; }
    public IPlatformObjectFactoryService Factory { get; }
    public IPlatformSystemInformationService SystemInformation { get; }
    public IPlatformCursorsService Cursors { get; }
    public IPlatformClipboardService Clipboard { get; }
    public abstract virtual IPlatformKeyboardService get_Keyboard();
    public abstract virtual IPlatformObjectFactoryService get_Factory();
    public abstract virtual IPlatformSystemInformationService get_SystemInformation();
    public abstract virtual IPlatformCursorsService get_Cursors();
    public abstract virtual IPlatformClipboardService get_Clipboard();
}
public interface DevExpress.Data.Platform.Compatibility.IPrintingBridge {
    public IPrinterItemContainer Container { get; }
    public abstract virtual IPrinterItemContainer get_Container();
    public abstract virtual void ShowPrinterProperties(PrinterSettings nativeSettings, IntPtr handle);
}
public interface DevExpress.Data.Platform.Compatibility.IRealTimePropertyDescriptor {
}
internal class DevExpress.Data.Platform.Compatibility.PlatformKeyboardServiceNonDesktop : object {
    public PortableKeyState KeyState { get; }
    public bool IsAltGrPressed { get; }
    public sealed virtual PortableKeyState get_KeyState();
    public sealed virtual bool get_IsAltGrPressed();
}
internal class DevExpress.Data.Platform.Compatibility.PlatformObjectFactoryServiceNonDesktop : object {
    public sealed virtual IPortableDispatchedTimer CreateDispatchedTimer();
    public sealed virtual IOpenFileDialog CreateOpenFileDialog();
    public sealed virtual ISaveFileDialog CreateSaveFileDialog();
    public sealed virtual IFolderBrowserDialog CreateFolderBrowserDialog();
}
public static class DevExpress.Data.Platform.Compatibility.PlatformServices : object {
    private static IPlatformServices instance;
    public static IPlatformServices Instance { get; internal set; }
    public static IPlatformServices get_Instance();
    internal static void set_Instance(IPlatformServices value);
}
public class DevExpress.Data.PLinq.GetEnumerableEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IEnumerable <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public IEnumerable Source { get; public set; }
    public object Tag { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(IEnumerable value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
}
public class DevExpress.Data.PLinq.Helpers.AsyncListDesignTimeWrapper : object {
    private Type _ElementType;
    private PropertyDescriptorCollection _Descriptors;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    public Type ElementType { get; public set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public Type get_ElementType();
    public void set_ElementType(Type value);
    private PropertyDescriptorCollection GetDescriptors();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class DevExpress.Data.PLinq.Helpers.GetEnumerableNotHandledMessenger : object {
    public static string MessageText;
    public string Message { get; }
    private static GetEnumerableNotHandledMessenger();
    public string get_Message();
}
public class DevExpress.Data.PLinq.Helpers.GroupingResult : object {
    public object Key;
    public IEnumerable Rows;
    public int Count;
    public object SortValue;
}
public interface DevExpress.Data.PLinq.Helpers.IPLinqServerModeFrontEndOwner {
    public Type ElementType { get; }
    public IEnumerable Source { get; }
    public string DefaultSorting { get; }
    public Nullable`1<int> DegreeOfParallelism { get; }
    public abstract virtual Type get_ElementType();
    public abstract virtual IEnumerable get_Source();
    public abstract virtual bool IsReadyForTakeOff();
    public abstract virtual string get_DefaultSorting();
    public abstract virtual Nullable`1<int> get_DegreeOfParallelism();
}
internal abstract class DevExpress.Data.PLinq.Helpers.PLinqCallerCore : object {
    private static ReaderWriterLockSlim cacheLock;
    private static Dictionary`2<Tuple`2<Type, Type>, PLinqCallerCore> cache;
    private static PLinqCallerCore();
    private static PLinqCallerCore GetCore(Type sourceType);
    private static PLinqCallerCore GetCore(Type sourceType, Type type2);
    protected abstract virtual ParallelQuery AsParallel(IEnumerable source, Nullable`1<int> degreeOfParallelism);
    protected abstract virtual IList ToList(IEnumerable source);
    protected abstract virtual IList ToList(ParallelQuery source);
    protected abstract virtual int Count(ParallelQuery source);
    protected abstract virtual IEnumerable MakeReverse(IEnumerable source);
    protected abstract virtual Object[] ToArray(ParallelQuery source);
    protected abstract virtual ParallelQuery Take(ParallelQuery source, int count);
    protected abstract virtual bool Contains(ParallelQuery source, object value);
    protected abstract virtual ParallelQuery Where(ParallelQuery source, Delegate func);
    protected abstract virtual ParallelQuery GroupBy(ParallelQuery source, Delegate func);
    protected abstract virtual ParallelQuery Select(ParallelQuery source, Delegate func);
    protected abstract virtual ParallelQuery OrderBy(ParallelQuery source, Delegate func);
    protected abstract virtual ParallelQuery OrderByDescending(ParallelQuery source, Delegate func);
    protected abstract virtual ParallelQuery ThenBy(ParallelQuery source, Delegate func);
    protected abstract virtual ParallelQuery ThenByDescending(ParallelQuery source, Delegate func);
    public static ParallelQuery AsParallel(Type sourceType, Nullable`1<int> degreeOfParallelism, IEnumerable source);
    public static ParallelQuery Take(Type sourceType, ParallelQuery source, int count);
    public static bool Contains(Type sourceType, ParallelQuery source, object value);
    public static ParallelQuery Where(Type sourceType, ParallelQuery source, Delegate func);
    public static ParallelQuery GroupBy(Type sourceType, ParallelQuery source, Delegate func, Type resultType);
    public static ParallelQuery Select(Type sourceType, ParallelQuery source, Delegate func, Type resultType);
    public static ParallelQuery OrderBy(Type sourceType, ParallelQuery source, Delegate func, Type resultType);
    public static ParallelQuery OrderByDescending(Type sourceType, ParallelQuery source, Delegate func, Type resultType);
    public static ParallelQuery ThenBy(Type sourceType, ParallelQuery source, Delegate func, Type resultType);
    public static ParallelQuery ThenByDescending(Type sourceType, ParallelQuery source, Delegate func, Type resultType);
    public static IList ToList(Type sourceType, IEnumerable source);
    public static IList ToList(Type sourceType, ParallelQuery source);
    public static int Count(Type sourceType, ParallelQuery source);
    public static IEnumerable MakeReverse(Type sourceType, IEnumerable source);
    public static Object[] ToArray(Type sourceType, ParallelQuery source);
}
[ExtensionAttribute]
internal static class DevExpress.Data.PLinq.Helpers.PLinqHelpres : object {
    [ExtensionAttribute]
public static ParallelQuery AsParallel(IEnumerable enumerable, Type sourceType, Nullable`1<int> degreeOfParallelism);
    [ExtensionAttribute]
public static IList ToList(IEnumerable source, Type sourceType);
    [ExtensionAttribute]
public static IEnumerable MakeReverse(IEnumerable source, Type sourceType);
    [ExtensionAttribute]
public static IList ToList(ParallelQuery source, Type sourceType);
    [ExtensionAttribute]
public static Object[] ToArray(ParallelQuery source, Type sourceType);
    [ExtensionAttribute]
public static ParallelQuery ApplyWhere(ParallelQuery source, Type sourceType, CriteriaOperator filterCriteria);
    [ExtensionAttribute]
public static ParallelQuery Take(ParallelQuery source, Type sourceType, int count);
    private static ParallelQuery Lambda(ParallelQuery source, Delegate predicate, ParameterExpression sourceParam, ParameterExpression predicateParam, MethodCallExpression methodCall);
    [ExtensionAttribute]
public static ParallelQuery MakeOrderBy(ParallelQuery source, ICriteriaToExpressionConverter converter, Type sourceType, ServerModeOrderDescriptor[] orders);
    [ExtensionAttribute]
public static object CallTotalSummary(ParallelQuery source, Type sourceType, ServerModeSummaryDescriptor summary);
    [ExtensionAttribute]
private static object CallTotalSummaryWithCustomAggregate(ParallelQuery source, Type sourceType, ServerModeSummaryDescriptor summary);
    [ExtensionAttribute]
public static int CallTotalSummary(ParallelQuery source, Type sourceType);
    [ExtensionAttribute]
public static ParallelQuery MakeGroupBy(ParallelQuery source, CriteriaOperator groupCriteria, Type sourceType);
    private static LambdaExpression GetLambda(CriteriaOperator criteriaOperator, Type sourceType);
    [ExtensionAttribute]
public static ParallelQuery MakeSelect(ParallelQuery source, ICriteriaToExpressionConverter converter, CriteriaOperator selectCriteria, Type sourceType);
    [ExtensionAttribute]
public static ParallelQuery MakeSelect(ParallelQuery source, ICriteriaToExpressionConverter converter, Delegate funcSelect, Type sourceType, Type resultType);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.PLinq.Helpers.PLinqListServerDatacontrollerProxy : object {
    protected IListServer Nested;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public PLinqListServerDatacontrollerProxy(IListServer nested);
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> groupSummaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual void Refresh();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.PLinq.Helpers.PLinqServerModeCore : object {
    public string DefaultSorting;
    public static Nullable`1<bool> DefaultForceCaseInsensitiveForAnySource;
    public bool ForceCaseInsensitiveForAnySource;
    private CriteriaOperator _filterCriteria;
    private ServerModeOrderDescriptor[] _sortInfo;
    private int _groupCount;
    private ServerModeSummaryDescriptor[] _groupSummaryInfo;
    private ServerModeSummaryDescriptor[] _totalSummaryInfo;
    private IEnumerable source;
    private IList _filtered;
    private IList _sorted;
    private Nullable`1<int> degreeOfParallelism;
    private Type ListType;
    private PLinqListSourceGroupInfo _RootGroup;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    internal static string OrderDescToken;
    public static ICriteriaToExpressionConverter PLinqCriteriaToExpressionConverter { get; }
    protected IList Filtered { get; }
    protected IList Sorted { get; }
    protected PLinqListSourceGroupInfo RootGroup { get; }
    protected List`1<object> TotalSummary { get; }
    public bool RefreshSupported { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public PLinqServerModeCore(IEnumerable source, Nullable`1<int> degreeOfParallelism);
    public static ICriteriaToExpressionConverter get_PLinqCriteriaToExpressionConverter();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual PLinqServerModeCore DXClone();
    protected virtual PLinqServerModeCore CreateDXClone();
    protected IList get_Filtered();
    protected IList get_Sorted();
    protected PLinqListSourceGroupInfo get_RootGroup();
    private PLinqListSourceGroupInfo CreateRootGroup();
    protected List`1<object> get_TotalSummary();
    private IList DoFilter();
    private IList DoSort();
    public virtual CriteriaOperator ExtractExpression(CriteriaOperator d);
    public static Type ExtractGenericEnumerableType(IEnumerable enumerable);
    protected virtual void RaiseInconsistencyDetected();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> groupSummaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    private ServerModeOrderDescriptor[] Convert(ICollection`1<ServerModeOrderDescriptor[]> original_new, int groupCount);
    public static ServerModeOrderDescriptor[] GetSortingDescriptors(string sortingsString);
    private static ServerModeOrderDescriptor ExtractSorting(CriteriaOperator op);
    private ServerModeSummaryDescriptor[] Convert(ICollection`1<ServerModeSummaryDescriptor> original);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    private sealed virtual override IList DevExpress.Data.IListServer.GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    private int LocateByExpressionCore(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual void Refresh();
    public sealed virtual bool get_RefreshSupported();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.PLinq.Helpers.PLinqServerModeDesignTimeWrapper : object {
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual void Refresh();
    public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public object FindKeyByBeginWith(PropertyDescriptor column, string value);
    public object FindKeyByValue(PropertyDescriptor column, object value);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.PLinq.Helpers.PLinqServerModeFrontEnd : object {
    public IPLinqServerModeFrontEndOwner Owner;
    private IListServer _Wrapper;
    private Type _Type;
    private IEnumerable _DataSource;
    private Nullable`1<int> _DegreeOfParallelism;
    private bool _IsReadyForTakeOff;
    private string _DefaultSorting;
    private CriteriaOperator _Successful_FilterCriteria;
    private ICollection`1<ServerModeOrderDescriptor[]> _Successful_sortInfo;
    private int _Successful_groupCount;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_summaryInfo;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_totalSummaryInfo;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler _ListChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    protected IListServer Wrapper { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool RefreshSupported { get; }
    public PLinqServerModeFrontEnd(IPLinqServerModeFrontEndOwner owner);
    protected IListServer get_Wrapper();
    private void _Wrapper_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    private void _Wrapper_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual PLinqServerModeFrontEnd DXClone();
    protected virtual PLinqServerModeFrontEnd CreateDXClone();
    private IListServer CreateWrapper();
    protected virtual IListServer CreateRuntimeWrapper();
    protected void KillWrapper();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    [CompilerGeneratedAttribute]
private void add__ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ListChanged(ListChangedEventHandler value);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    public void CatchUp();
    public sealed virtual void Refresh();
    public virtual bool get_RefreshSupported();
    [CompilerGeneratedAttribute]
public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
}
public class DevExpress.Data.PLinq.Helpers.PLinqServerModeSourceObjectTypeConverter : TypeListConverter {
    private SortedList`2<string, Type> typesCache;
    public static string None;
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object val);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destType);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
internal abstract class DevExpress.Data.PLinq.Helpers.TypeInfoBase : object {
    public PropertyDescriptorCollection UIDescriptors { get; }
    public abstract virtual PropertyDescriptorCollection get_UIDescriptors();
    public abstract virtual object GetWorkerThreadRowInfo(object workerRow);
    public abstract virtual object GetUIThreadRow(object rowInfo);
}
internal class DevExpress.Data.PLinq.Helpers.TypeInfoNoQueryable : TypeInfoBase {
    private PropertyDescriptorCollection uiDescriptors;
    public PropertyDescriptorCollection UIDescriptors { get; }
    public TypeInfoNoQueryable(Type designTimeType);
    public virtual PropertyDescriptorCollection get_UIDescriptors();
    public virtual object GetWorkerThreadRowInfo(object workerRow);
    public virtual object GetUIThreadRow(object rowInfo);
}
internal class DevExpress.Data.PLinq.Helpers.TypeInfoProxied : TypeInfoBase {
    private PropertyDescriptorCollection uiDescriptors;
    private PropertyDescriptor[] workerDescriptors;
    public PropertyDescriptorCollection UIDescriptors { get; }
    public TypeInfoProxied(PropertyDescriptorCollection workerThreadDescriptors, Type designTimeType);
    public virtual PropertyDescriptorCollection get_UIDescriptors();
    public virtual object GetWorkerThreadRowInfo(object workerRow);
    public virtual object GetUIThreadRow(object rowInfo);
}
internal class DevExpress.Data.PLinq.Helpers.TypeInfoThreadSafe : TypeInfoBase {
    private PropertyDescriptorCollection PropertyDescriptors;
    public PropertyDescriptorCollection UIDescriptors { get; }
    public TypeInfoThreadSafe(PropertyDescriptorCollection propertyDescriptors);
    public virtual PropertyDescriptorCollection get_UIDescriptors();
    public virtual object GetWorkerThreadRowInfo(object workerRow);
    public virtual object GetUIThreadRow(object rowInfo);
}
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.PLinqInstantFeedbackSource.bmp")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to any enumerable source in Instant Feedback Mode.")]
[DefaultEventAttribute("GetEnumerable")]
[DesignerAttribute("DevExpress.Design.PLinqInstantFeedbackSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class DevExpress.Data.PLinq.PLinqInstantFeedbackSource : Component {
    private Type _ElementType;
    private string _DefaultSorting;
    private Nullable`1<int> _DegreeOfParallelism;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetEnumerableEventArgs> GetEnumerable;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetEnumerableEventArgs> DismissEnumerable;
    private AsyncListServer2DatacontrollerProxy _AsyncListServer;
    private AsyncListDesignTimeWrapper _DTWrapper;
    private IList _List;
    private Nullable`1<bool> _isDesignMode;
    private bool IsDisposed;
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Data.PLinq.Helpers.PLinqServerModeSourceObjectTypeConverter")]
[CategoryAttribute("Design")]
[DescriptionAttribute("Specifies the type of objects that will be retrieved from a data source, at design time.")]
public Type DesignTimeElementType { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default, when the sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the maximum number of parallel threads that will be started to process a query.")]
public Nullable`1<int> DegreeOfParallelism { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public PLinqInstantFeedbackSource(EventHandler`1<GetEnumerableEventArgs> getEnumerable);
    public PLinqInstantFeedbackSource(EventHandler`1<GetEnumerableEventArgs> getEnumerable, EventHandler`1<GetEnumerableEventArgs> freeEnumerable);
    public PLinqInstantFeedbackSource(Action`1<GetEnumerableEventArgs> getEnumerable);
    public PLinqInstantFeedbackSource(Action`1<GetEnumerableEventArgs> getEnumerable, Action`1<GetEnumerableEventArgs> freeEnumerable);
    private static EventHandler`1<T> ToEventHandler(Action`1<T> action);
    public Type get_DesignTimeElementType();
    public void set_DesignTimeElementType(Type value);
    public string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    public Nullable`1<int> get_DegreeOfParallelism();
    public void set_DegreeOfParallelism(Nullable`1<int> value);
    private void TestCanChangeProperties();
    private void ForceCatchUp();
    [CompilerGeneratedAttribute]
public void add_GetEnumerable(EventHandler`1<GetEnumerableEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GetEnumerable(EventHandler`1<GetEnumerableEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DismissEnumerable(EventHandler`1<GetEnumerableEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DismissEnumerable(EventHandler`1<GetEnumerableEventArgs> value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private AsyncListDesignTimeWrapper CreateDesignTimeWrapper();
    private AsyncListServer2DatacontrollerProxy CreateRunTimeProxy();
    private AsyncListServerCore CreateAsyncListServerCore();
    private void listServerGet(object sender, ListServerGetOrFreeEventArgs e);
    private void listServerFree(object sender, ListServerGetOrFreeEventArgs e);
    private void getTypeInfo(object sender, GetTypeInfoEventArgs e);
    private void getPropertyDescriptors(object sender, GetPropertyDescriptorsEventArgs e);
    private void getWorkerRowInfo(object sender, GetWorkerThreadRowInfoEventArgs e);
    private void getUIRow(object sender, GetUIThreadRowEventArgs e);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual PLinqInstantFeedbackSource DXCloneCreate();
    protected virtual void Dispose(bool disposing);
    public void Refresh();
}
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.PLinqServerModeSource.bmp")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to any enumerable source in Server Mode.")]
[DesignerAttribute("DevExpress.Design.PLinqServerModeSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class DevExpress.Data.PLinq.PLinqServerModeSource : Component {
    private EventHandler`1<ErrorEventArgs> ErrorOccurred;
    private PLinqServerModeFrontEnd _List;
    private Type _ElementType;
    private string _DefaultSorting;
    private Nullable`1<int> _DegreeOfParallelism;
    private IEnumerable _Source;
    private int _initCount;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    private Nullable`1<bool> _IsDesignMode;
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private PLinqServerModeFrontEnd List { get; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the type of objects retrieved from a data source.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Data.PLinq.Helpers.PLinqServerModeSourceObjectTypeConverter")]
public Type ElementType { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default, when the sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.ServerModeSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the maximum number of parallel threads that will be started to process a query.")]
public Nullable`1<int> DegreeOfParallelism { get; public set; }
    [DescriptionAttribute("Gets or sets the enumerable data source.")]
[CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public IEnumerable Source { get; public set; }
    private Type DevExpress.Data.PLinq.Helpers.IPLinqServerModeFrontEndOwner.ElementType { get; }
    private IEnumerable DevExpress.Data.PLinq.Helpers.IPLinqServerModeFrontEndOwner.Source { get; }
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.add_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.remove_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual PLinqServerModeSource DXCloneCreate();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private PLinqServerModeFrontEnd get_List();
    public void Reload();
    protected virtual PLinqServerModeFrontEnd CreateList();
    private void ForceCatchUp();
    public Type get_ElementType();
    public void set_ElementType(Type value);
    public sealed virtual string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    public sealed virtual Nullable`1<int> get_DegreeOfParallelism();
    public void set_DegreeOfParallelism(Nullable`1<int> value);
    public IEnumerable get_Source();
    public void set_Source(IEnumerable value);
    private bool IsInitialized();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private void _List_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private void _List_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    private void DoPostponedReload(object state);
    private void FailUnderAspOrAnotherNonPostEnvironment();
    protected virtual bool IsGoodContext(SynchronizationContext context);
    [CompilerGeneratedAttribute]
public void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    protected virtual void OnExceptionThrown(ServerModeExceptionThrownEventArgs e);
    protected virtual void OnInconsistencyDetected(ServerModeInconsistencyDetectedEventArgs e);
    private sealed virtual override Type DevExpress.Data.PLinq.Helpers.IPLinqServerModeFrontEndOwner.get_ElementType();
    private sealed virtual override IEnumerable DevExpress.Data.PLinq.Helpers.IPLinqServerModeFrontEndOwner.get_Source();
    private sealed virtual override bool DevExpress.Data.PLinq.Helpers.IPLinqServerModeFrontEndOwner.IsReadyForTakeOff();
}
public static class DevExpress.Data.Printing.Native.DxDibImageConverter : object {
    private static string dxDibHeader;
    private static int version;
    private static int ReadInt(Byte[] src, Int32& index);
    private static void Decompress(Byte[] src, int offset, Byte[] dst);
    public static bool IsDxDib(Byte[] bytes);
    [SecuritySafeCriticalAttribute]
private static Bitmap CreateBitmapUnmanaged(Byte[] src, int startIndex, int width, int height);
    private static Bitmap CreateBitmap(Byte[] src, int startIndex, int width, int height);
    public static Bitmap Decode(Byte[] data);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class DevExpress.Data.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ExpiredTextLong { get; }
    internal static string ExpiredTextShort { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ExpiredTextLong();
    internal static string get_ExpiredTextShort();
}
public class DevExpress.Data.RealTimePropertyDescriptor : PropertyDescriptor {
    private int index;
    private Type propertyType;
    private AttributeCollection propertyAttributes;
    private string message;
    private bool visible;
    private Func`2<object, object> getFunc;
    public bool Visible { get; }
    public int Index { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public AttributeCollection Attributes { get; }
    public RealTimePropertyDescriptor(string name, PropertyDescriptor prototype, int index, bool visible);
    public RealTimePropertyDescriptor(string name, string message);
    public bool get_Visible();
    public int get_Index();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual AttributeCollection get_Attributes();
    public object GetSourceValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.RealTimePropertyDescriptorCollection : PropertyDescriptorCollection {
    private static object syncObject;
    private Dictionary`2<PropertyDescriptor, RealTimePropertyDescriptor> descriptorDict;
    private PropertyDescriptorCollection sourcePDC;
    public PropertyDescriptorCollection SourcePropertyDescriptorCollection { get; }
    public RealTimePropertyDescriptor Item { get; }
    public PropertyDescriptor Item { get; }
    public PropertyDescriptor Item { get; }
    private RealTimePropertyDescriptorCollection(IList list, string displayableProperties);
    private RealTimePropertyDescriptorCollection(PropertyDescriptorCollection properties, string displayableProperties);
    private static RealTimePropertyDescriptorCollection();
    public static RealTimePropertyDescriptorCollection CreatePropertyDescriptorCollection(IList list, string displayableProperties);
    public static RealTimePropertyDescriptorCollection CreatePropertyDescriptorCollection(PropertyDescriptorCollection properties);
    private static PropertyDescriptorCollection GetSourcePropertyDescriptorCollection(IList source);
    public PropertyDescriptorCollection get_SourcePropertyDescriptorCollection();
    private RealTimePropertyDescriptor AddProperty(PropertyDescriptor property, int index, bool visible);
    public RealTimePropertyDescriptor get_Item(PropertyDescriptor pd);
    public PropertyDescriptor GetPropertyDescriptor(RealTimePropertyDescriptor rpd);
    public PropertyDescriptor GetPropertyDescriptorByName(string name);
    public virtual IEnumerator GetEnumerator();
    public virtual PropertyDescriptor get_Item(int index);
    public virtual PropertyDescriptor get_Item(string name);
    public virtual PropertyDescriptor Find(string name, bool ignoreCase);
    public bool TryGetRealtimePropertyDescriptor(PropertyDescriptor pd, RealTimePropertyDescriptor& rpd);
    public Dictionary`2<RealTimePropertyDescriptor, object> GetSourceValue(object component);
}
public class DevExpress.Data.RealTimeProxyForObject : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<RealTimePropertyDescriptor, object> <Content>k__BackingField;
    public Dictionary`2<RealTimePropertyDescriptor, object> Content { get; private set; }
    public RealTimeProxyForObject(object source, RealTimePropertyDescriptorCollection pdc);
    public RealTimeProxyForObject(object source, RealTimePropertyDescriptorCollection pdc, PropertyDescriptor pdSource);
    public RealTimePropertyDescriptor GetChangedPropertyDescriptor();
    [CompilerGeneratedAttribute]
public Dictionary`2<RealTimePropertyDescriptor, object> get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(Dictionary`2<RealTimePropertyDescriptor, object> value);
    private static Dictionary`2<RealTimePropertyDescriptor, object> FillValue(object source, RealTimePropertyDescriptorCollection pdc, PropertyDescriptor pdSource);
    public void Assign(RealTimeProxyForObject source);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DXToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.RealTimeSource.bmp")]
[DesignerAttribute("DevExpress.Design.RealtimeSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that acts as an asynchronous bridge between a data-aware control and rapidly changing data.")]
public class DevExpress.Data.RealTimeSource : Component {
    private bool ignoreItemEvents;
    private object source;
    private object dataSource;
    private bool _IsDisposed;
    private bool isSuspended;
    private object suspendDataSource;
    private RealTimeSourceCore _RealTimeCore;
    private bool useWeakEventHandler;
    private RealTimeSourceDesignTimeWrapper _DTWrapper;
    private string _DisplayableProperties;
    public static int SendQueueTimeout;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static Nullable`1<bool> FireListChangedResetAfterPropertyDescriptorChanged;
    internal RealTimeSourceCore RealTimeCore { get; internal set; }
    internal RealTimeSourceDesignTimeWrapper DTWrapper { get; internal set; }
    [AttributeProviderAttribute("System.ComponentModel.IListSource")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
[DescriptionAttribute("Specifies the data source from which the RealTimeSource component retrieves its data.")]
public object DataSource { get; public set; }
    [EditorAttribute("DevExpress.Design.RealTimeSourcePropertiesEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies a semicolon-separated list of displayable property names.")]
public string DisplayableProperties { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Specifies whether to ignore INotifyPropertyChanged.PropertyChanged events of the data source items.")]
public bool IgnoreItemEvents { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
public bool UseWeakEventHandler { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private static RealTimeSource();
    internal RealTimeSourceCore get_RealTimeCore();
    internal void set_RealTimeCore(RealTimeSourceCore value);
    internal RealTimeSourceDesignTimeWrapper get_DTWrapper();
    internal void set_DTWrapper(RealTimeSourceDesignTimeWrapper value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DisplayableProperties();
    public void set_DisplayableProperties(string value);
    public bool get_IgnoreItemEvents();
    public void set_IgnoreItemEvents(bool value);
    public bool get_UseWeakEventHandler();
    public void set_UseWeakEventHandler(bool value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public sealed virtual IList GetList();
    private RealTimeSourceDesignTimeWrapper CreateDesignTimeWrapper();
    private RealTimeSourceCore CreateRuntimeCore();
    private string GetDefaultDisplayableProperties(object dataSource);
    public static IEnumerable`1<string> GetDisplayableProperties(object source);
    private static IEnumerable`1<string> GetDisplayableProperties(object source, int depthOfReferences);
    [IteratorStateMachineAttribute("DevExpress.Data.RealTimeSource/<GetDefProps>d__38")]
private static IEnumerable`1<string> GetDefProps(int depthLeft, PropertyDescriptorCollection pdc);
    private void ForceCatchUp();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual RealTimeSource DXCloneCreate();
    protected virtual void Dispose(bool disposing);
    public TimeSpan GetQueueDelay();
    public void Suspend();
    public void Resume();
    public void CatchUp();
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Data.RealTimeSourceCore : object {
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    private SynchronizationContext synchronizationContext;
    private RealTimeQueue _Worker;
    private List`1<RealTimeProxyForObject> cache;
    private string listName;
    private RealTimePropertyDescriptorCollection propertyCollection;
    private IBindingList dataSourceAdapter;
    private string displayableProperties;
    private Nullable`1<DateTime> lastProcessedCommandCreationTime;
    private object syncObject;
    private ItemPropertyNotificationMode notificationMode;
    private bool waitReset;
    private bool isCatchUp;
    [CompilerGeneratedAttribute]
private bool <UseWeakEventHandler>k__BackingField;
    private object SyncObject { get; }
    public string DisplayableProperties { get; public set; }
    public object DataSource { get; public set; }
    public bool UseWeakEventHandler { get; public set; }
    private RealTimeQueue Worker { get; }
    private List`1<RealTimeProxyForObject> DevExpress.Data.IRealTimeListChangeProcessor.Cache { get; private set; }
    private ListChangedEventHandler DevExpress.Data.IRealTimeListChangeProcessor.ListChanged { get; }
    private RealTimePropertyDescriptorCollection DevExpress.Data.IRealTimeListChangeProcessor.PropertyDescriptorsCollection { get; private set; }
    private bool DevExpress.Data.IRealTimeListChangeProcessor.IsCatchUp { get; private set; }
    public bool AllowEdit { get; }
    public bool AllowNew { get; }
    public bool AllowRemove { get; }
    public bool IsSorted { get; }
    public ListSortDirection SortDirection { get; }
    public PropertyDescriptor SortProperty { get; }
    public bool SupportsChangeNotification { get; }
    public bool SupportsSearching { get; }
    public bool SupportsSorting { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public RealTimeSourceCore(object source, SynchronizationContext context, string displayableProperties, bool ignoreItemEvents, bool useWeakEventHandler);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private object get_SyncObject();
    public string get_DisplayableProperties();
    public void set_DisplayableProperties(string value);
    public object get_DataSource();
    public void set_DataSource(object value);
    [CompilerGeneratedAttribute]
public bool get_UseWeakEventHandler();
    [CompilerGeneratedAttribute]
public void set_UseWeakEventHandler(bool value);
    private RealTimeQueue get_Worker();
    private sealed virtual override void DevExpress.Data.IRealTimeListChangeProcessor.NotifyLastProcessedCommandCreationTime(DateTime sent);
    private sealed virtual override List`1<RealTimeProxyForObject> DevExpress.Data.IRealTimeListChangeProcessor.get_Cache();
    private sealed virtual override void DevExpress.Data.IRealTimeListChangeProcessor.set_Cache(List`1<RealTimeProxyForObject> value);
    private sealed virtual override ListChangedEventHandler DevExpress.Data.IRealTimeListChangeProcessor.get_ListChanged();
    private sealed virtual override RealTimePropertyDescriptorCollection DevExpress.Data.IRealTimeListChangeProcessor.get_PropertyDescriptorsCollection();
    private sealed virtual override void DevExpress.Data.IRealTimeListChangeProcessor.set_PropertyDescriptorsCollection(RealTimePropertyDescriptorCollection value);
    private sealed virtual override bool DevExpress.Data.IRealTimeListChangeProcessor.get_IsCatchUp();
    private sealed virtual override void DevExpress.Data.IRealTimeListChangeProcessor.set_IsCatchUp(bool value);
    private void InvalidateDataSource();
    private void DataSourceChanged();
    public sealed virtual void AddIndex(PropertyDescriptor property);
    public sealed virtual object AddNew();
    public sealed virtual bool get_AllowEdit();
    public sealed virtual bool get_AllowNew();
    public sealed virtual bool get_AllowRemove();
    public sealed virtual void ApplySort(PropertyDescriptor property, ListSortDirection direction);
    public sealed virtual int Find(PropertyDescriptor property, object key);
    public sealed virtual bool get_IsSorted();
    public sealed virtual void RemoveIndex(PropertyDescriptor property);
    public sealed virtual void RemoveSort();
    public sealed virtual ListSortDirection get_SortDirection();
    public sealed virtual PropertyDescriptor get_SortProperty();
    public sealed virtual bool get_SupportsChangeNotification();
    public sealed virtual bool get_SupportsSearching();
    public sealed virtual bool get_SupportsSorting();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    private void SourceListChanged(object sender, RealTimeEventBase command);
    internal TimeSpan GetQueueDelay();
    internal void CatchUp();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class DevExpress.Data.RealTimeSourceDesignTimeWrapper : object {
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    private object dataSource;
    private string _DisplayableProperties;
    private PropertyDescriptorCollection _Descriptors;
    [RefreshPropertiesAttribute("1")]
public string DisplayableProperties { get; public set; }
    public object DataSource { get; public set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public RealTimeSourceDesignTimeWrapper(object source, string dispProps);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public string get_DisplayableProperties();
    public void set_DisplayableProperties(string value);
    public object get_DataSource();
    public void set_DataSource(object value);
    private void InvalidateDescriptors();
    internal static RealTimePropertyDescriptor GetMessagingDescriptorIfUnsafe(string name, PropertyDescriptor prototype);
    private PropertyDescriptorCollection GetDescriptors();
    private PropertyDescriptorCollection GetDescriptorsCore();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Data.ResFinder : object {
}
public class DevExpress.Data.RowDeletedEventArgs : EventArgs {
    private int rowHandle;
    private int listSourceIndex;
    private object row;
    public int RowHandle { get; }
    public int ListSourceIndex { get; }
    public object Row { get; }
    public RowDeletedEventArgs(int rowHandle, int listIndex, object row);
    public int get_RowHandle();
    public int get_ListSourceIndex();
    public object get_Row();
}
public class DevExpress.Data.RowDeletedEventHandler : MulticastDelegate {
    public RowDeletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RowDeletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RowDeletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.RowDeletingEventArgs : RowDeletedEventArgs {
    private bool cancel;
    public bool Cancel { get; public set; }
    public RowDeletingEventArgs(int rowHandle, int listIndex, object row);
    public bool get_Cancel();
    public void set_Cancel(bool value);
}
public class DevExpress.Data.RowDeletingEventHandler : MulticastDelegate {
    public RowDeletingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RowDeletingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RowDeletingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class DevExpress.Data.RTListChangedEventArgs : object {
    private static Action`2<ListChangedEventArgs, int> setOldIndex;
    private static Action`2<ListChangedEventArgs, int> setNewIndex;
    private static Action`2<ListChangedEventArgs, PropertyDescriptor> setPropertyDescriptor;
    private static Action`2<ListChangedEventArgs, ListChangedType> setListChangedType;
    private static MethodInfo assignInfo;
    [ThreadStaticAttribute]
private static ListChangedEventArgs eventArg;
    private static RTListChangedEventArgs();
    private static void Assign(T& left, T right);
    private static Action`2<ListChangedEventArgs, T> GetSetter(string fieldName, string propertyName);
    private static Action`2<ListChangedEventArgs, T> EmitMutator(FieldInfo field);
    public static ListChangedEventArgs Create(ListChangedType listChangedType, PropertyDescriptor propDesc);
    public static ListChangedEventArgs Create(ListChangedType listChangedType, int newIndex);
    public static ListChangedEventArgs Create(ListChangedType listChangedType, int newIndex, PropertyDescriptor propDesc);
    public static ListChangedEventArgs Create(ListChangedType listChangedType, int newIndex, int oldIndex);
    public static ListChangedEventArgs Create(ListChangedType listChangedType, int newIndex, int oldIndex, PropertyDescriptor propDesc);
    private static ListChangedEventArgs GetListChangedEventArgsInternal(ListChangedType listChangedType, int newIndex, int oldIndex, PropertyDescriptor propDesc);
}
public abstract class DevExpress.Data.Selection.BaseSelectionCollection`1 : object {
    private Dictionary`2<T, object> rows;
    private SelectionController selectionController;
    private SelectionChangingEventArgs AddingArgs;
    private SelectionChangingEventArgs RemovingArgs;
    private SelectionChangedEventArgs AddArgs;
    private SelectionChangedEventArgs RemoveArgs;
    protected DataController Controller { get; }
    protected SelectionController SelectionController { get; }
    public int Count { get; }
    protected Dictionary`2<T, object> Rows { get; }
    protected BaseSelectionCollection`1(SelectionController selectionController);
    protected DataController get_Controller();
    protected SelectionController get_SelectionController();
    public int get_Count();
    protected Dictionary`2<T, object> get_Rows();
    protected internal Dictionary`2<T, object> GetSelectedDictionary();
    public virtual void Dispose();
    public void Clear();
    protected virtual bool OnSelectionChanging(SelectionChangingEventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected internal abstract virtual T GetRowObjectByControllerRow(int controllerRow);
    public object GetRowSelectedObject(int controllerRow);
    public bool GetRowSelected(int controllerRow);
    public void SetRowSelected(int controllerRow, bool selected, object selectionObject);
    public bool ToggleSelection(int controllerRow, object selectionObject);
    protected object GetSelectedObject(T row);
    protected internal bool GetSelected(T row);
    protected void SetSelected(int controllerRow, T row, bool selected, object selectionObject);
    protected virtual void SetSelectionObject(T row, object selectionObject);
    protected internal virtual int CalcCRC();
    public static int CalcCRC(Int32[] source);
}
public class DevExpress.Data.Selection.SelectedGroupsCollection : BaseSelectionCollection`1<GroupRowInfo> {
    public SelectedGroupsCollection(SelectionController selectionController);
    protected internal virtual GroupRowInfo GetRowObjectByControllerRow(int controllerRow);
    internal void OnGroupDeleted(GroupRowInfo groupInfo);
    internal void OnReplaceGroupSelection(GroupRowInfo oldGroupInfo, GroupRowInfo newGroupInfo);
    public void CopyToArray(Int32[] array, int startIndex);
    public Int32[] CopyToArray();
    protected internal virtual int CalcCRC();
}
public class DevExpress.Data.Selection.SelectedRowsCollection : BaseSelectionCollection`1<Nullable`1<int>> {
    private Int32[] indexes;
    public SelectedRowsCollection(SelectionController selectionController);
    protected internal virtual Nullable`1<int> GetRowObjectByControllerRow(int controllerRow);
    private void SetListSourceRowSelected(int listSourceRow, bool selected, object selectionObject);
    protected internal void OnItemMoved(int oldListSourceRow, int newListSourceRow);
    protected internal void OnItemAdded(int listSourceRow);
    protected internal virtual void OnItemDeleted(int listSourceRow);
    protected internal virtual void OnItemFilteredOut(int listSourceRow);
    private void RenumberIndexes(int listSourceRow, bool increment);
    private void RenumberIndexes(int oldListSourceRow, int newListSourceRow);
    public Int32[] CopyToArray(int length);
    protected internal virtual int CalcCRC();
    public Int32[] CopyToArray();
    public void CopyToArray(Int32[] array, int startIndex);
    private void PrepareReindex(bool increment);
    private sealed virtual override int DevExpress.Data.Helpers.IIndexRenumber.GetCount();
    private sealed virtual override int DevExpress.Data.Helpers.IIndexRenumber.GetValue(int pos);
    private sealed virtual override void DevExpress.Data.Helpers.IIndexRenumber.SetValue(int pos, int val);
}
public class DevExpress.Data.Selection.SelectionController : object {
    private SelectedRowsCollection selectedRows;
    private SelectedGroupsCollection selectedGroupRows;
    private DataController controller;
    private int lockAddRemoveActions;
    private int selectionLockCount;
    private bool actuallyChanged;
    private List`1<SelectedRowsCollection> selectionCollections;
    private object defaultSelectionObject;
    private List`1<SelectedRowsCollection> SelectionCollections { get; }
    protected internal DataController Controller { get; }
    protected internal SelectedRowsCollection SelectedRows { get; }
    protected internal SelectedGroupsCollection SelectedGroupRows { get; }
    public bool IsSelectionLocked { get; }
    public int Count { get; }
    public SelectionController(DataController controller);
    private List`1<SelectedRowsCollection> get_SelectionCollections();
    protected virtual List`1<SelectedRowsCollection> CreateSelectionCollections();
    public virtual void Dispose();
    protected internal DataController get_Controller();
    protected internal SelectedRowsCollection get_SelectedRows();
    protected internal SelectedGroupsCollection get_SelectedGroupRows();
    protected internal void RaiseSelectionChanged();
    internal void LockAddRemoveAction();
    internal void UnLockAddRemoveAction();
    protected internal virtual bool OnSelectionChanging(SelectionChangingEventArgs e);
    protected internal virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    public void SetActuallyChanged();
    public void BeginSelection();
    public bool get_IsSelectionLocked();
    public void CancelSelection();
    public void EndSelection();
    public void RaiseChanged();
    public int get_Count();
    [EditorBrowsableAttribute("1")]
public bool GetSelectedByListSource(int listSourceRow);
    public bool GetSelected(int controllerRow);
    public bool ToggleSelection(int controllerRow);
    internal object GetSelectionObject(int controllerRow);
    public object GetSelectedObject(int controllerRow);
    public void SetSelected(int controllerRow, bool selected);
    public void SetSelected(int controllerRow, bool selected, object selectionObject);
    public void SelectAll();
    protected internal int InternalClear();
    public virtual void Clear();
    internal void SetListSourceRowSelected(int listSourceRow, bool selected, object selectionObject);
    public SelectionInfo GetSelectionInfo();
    public Int32[] GetSelectedRows();
    protected Int32[] GetNonGroupedSelectedRows();
    private void ProcessRows(Dictionary`2<int, List`1<int>> groups, Int32[] rows, Dictionary`2<int, int> nonSelectedGroups);
    public virtual Int32[] GetNormalizedSelectedRowsEx(Int32[] selectedRows, bool includeAllRowsForEmptyGroups);
    public virtual Int32[] GetNormalizedSelectedRowsEx(bool includeAllRowsForEmptyGroups);
    public virtual Int32[] GetNormalizedSelectedRowsEx2();
    private void AddGroup(List`1<int> rows, GroupRowInfo group, Dictionary`2<int, bool> selectedGroups);
    public virtual Int32[] GetNormalizedSelectedRows();
    internal void OnReplaceGroupSelection(GroupRowInfo oldGroupInfo, GroupRowInfo newGroupInfo);
    internal void OnGroupDeleted(GroupRowInfo groupInfo);
    internal void OnItemMoved(int oldListSourceRow, int newListSourceRow);
    internal void OnItemAdded(int listSourceRow);
    internal void OnItemDeleted(int listSourceRow);
    internal void OnItemFilteredOut(int listSourceRow);
}
public class DevExpress.Data.SelectionChangedEventArgs : EventArgs {
    private CollectionChangeAction action;
    private int controllerRow;
    private static SelectionChangedEventArgs refresh;
    [DXHelpExcludeAttribute("True")]
[EditorBrowsableAttribute("1")]
public static SelectionChangedEventArgs Refresh { get; }
    public CollectionChangeAction Action { get; }
    public int ControllerRow { get; }
    public SelectionChangedEventArgs(CollectionChangeAction action, int controllerRow);
    public static SelectionChangedEventArgs get_Refresh();
    public CollectionChangeAction get_Action();
    public int get_ControllerRow();
    [DXHelpExcludeAttribute("True")]
[EditorBrowsableAttribute("1")]
public SelectionChangedEventArgs WithRow(int controllerRow);
}
public class DevExpress.Data.SelectionChangedEventHandler : MulticastDelegate {
    public SelectionChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SelectionChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SelectionChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.SelectionChangingEventArgs : CancelEventArgs {
    private CollectionChangeAction action;
    private int controllerRow;
    [ThreadStaticAttribute]
private static SelectionChangingEventArgs clear;
    [DXHelpExcludeAttribute("True")]
[EditorBrowsableAttribute("1")]
public static SelectionChangingEventArgs Clear { get; }
    public CollectionChangeAction Action { get; }
    public int ControllerRow { get; }
    public SelectionChangingEventArgs(CollectionChangeAction action, int controllerRow);
    public static SelectionChangingEventArgs get_Clear();
    public CollectionChangeAction get_Action();
    public int get_ControllerRow();
    [DXHelpExcludeAttribute("True")]
[EditorBrowsableAttribute("1")]
public SelectionChangingEventArgs WithRow(int controllerRow);
}
public class DevExpress.Data.SelectionChangingEventHandler : MulticastDelegate {
    public SelectionChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SelectionChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SelectionChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.ServerDataControllerGroupRowInfoCollection : DataControllerGroupRowInfoCollection {
    public ServerDataControllerGroupRowInfoCollection(DataController controller);
    protected virtual GroupRowInfo CreateGroupRowInfo(byte level, int childControllerRow, GroupRowInfo parentGroupRow);
    public virtual GroupRowInfo Add(byte level, int ChildControllerRow, GroupRowInfo parentGroup);
    internal void UpdateChildren(ServerModeGroupRowInfo sgroup, List`1<GroupRowInfo> insertList);
}
public class DevExpress.Data.ServerModeDataController : ServerModeDataControllerBase {
    public bool AllowNew { get; }
    public bool IsReady { get; }
    protected bool AllowToSetInvalidFilterCriteria { get; }
    private IServerModeSourceFilterController ListSourceExt { get; }
    public IListServer ListSourceEx { get; }
    public IListServerCaps ListSourceEx2 { get; }
    public bool CanSort { get; }
    public bool CanGroup { get; }
    public bool CanFilter { get; }
    protected virtual VisibleIndexCollection CreateVisibleIndexCollection();
    protected virtual GroupRowInfoCollection CreateGroupRowInfoCollection();
    protected virtual MasterRowInfoCollection CreateMasterRowCollection();
    protected virtual FilterHelper CreateFilterHelper();
    protected virtual IClassicRowKeeper CreateControllerRowsKeeperCore();
    public virtual IClassicRowKeeper CreateControllerRowsKeeperClassic();
    public virtual bool get_AllowNew();
    public virtual bool get_IsReady();
    public virtual IList GetAllFilteredAndSortedRows(Function`1<bool> callBackMethod);
    public virtual bool PrefetchAllData(Function`1<bool> callbackMethod, bool clonedVersion);
    private void PrefetchGroupRows();
    protected virtual IList GetListSource();
    protected virtual bool get_AllowToSetInvalidFilterCriteria();
    private IServerModeSourceFilterController get_ListSourceExt();
    public IListServer get_ListSourceEx();
    public IListServerCaps get_ListSourceEx2();
    public virtual bool get_CanSort();
    public virtual bool get_CanGroup();
    public virtual bool get_CanFilter();
    protected virtual bool ProcessListServerAction(string fieldName, ColumnServerActionType action, Boolean& res);
    public virtual int FindRowByBeginWith(string columnName, string text);
    public virtual int FindRowByValue(string columnName, object value, OperationCompleted[] completed);
    public virtual int FindRowByValues(Dictionary`2<DataColumnInfo, object> values);
    protected virtual object GetCurrentControllerRowObject();
    public virtual int FindRowByRowValue(object value, int tryListSourceIndex);
    public virtual int FindIncremental(string text, int columnHandle, int startRowHandle, bool down, bool ignoreStartRow, bool allowLoop, CompareIncrementalValue compareValue, OperationCompleted[] completed);
    protected virtual void DoSortRows();
    protected virtual void DoGroupRowsCore();
    protected virtual void ChangeExpandedLevel(int groupLevel, bool expanded, bool recursive);
    protected virtual void ChangeExpanded(int groupRowHandle, bool expanded, bool recursive);
    private void CheckChildrenReady(ServerModeGroupRowInfo sgroup, bool expanded, bool recursive);
    protected virtual void ChangeAllExpanded(bool expanded);
    protected internal virtual void RestoreGroupExpanded(GroupRowInfo group);
    protected internal virtual void MakeGroupRowVisible(GroupRowInfo group);
    protected virtual ServerModeGroupRowInfo RequestChildren(ServerModeGroupRowInfo sgroup);
    private void CreateGroupInfo(List`1<ListSourceGroupInfo> list, IList`1<GroupRowInfo> destination, ServerModeGroupRowInfo parentGroup);
    private void CreateChildren(IList`1<GroupRowInfo> destination, byte level, int startIndex, ServerModeGroupRowInfo group);
    protected virtual void CalcTotalSummary();
    protected virtual GroupRowInfo RequestSummary(GroupRowInfo group);
    public virtual void UpdateGroupSummary(List`1<SummaryItem> changedItems, bool selectionChanged);
}
public abstract class DevExpress.Data.ServerModeDataControllerBase : BaseGridControllerEx {
    private static CriteriaOperator CurrentYearBeginFunction;
    public bool IsServerMode { get; }
    public bool AutoUpdateTotalSummary { get; public set; }
    public bool ImmediateUpdateRowPosition { get; public set; }
    protected internal bool AllowSortUnbound { get; }
    protected IXtraSourceError SourceError { get; }
    protected bool RequireEndEditOnGroupRows { get; }
    private static ServerModeDataControllerBase();
    public virtual bool get_IsServerMode();
    public virtual bool get_AutoUpdateTotalSummary();
    public virtual void set_AutoUpdateTotalSummary(bool value);
    public virtual bool get_ImmediateUpdateRowPosition();
    public virtual void set_ImmediateUpdateRowPosition(bool value);
    public virtual Object[] GetGroupRowValues(GroupRowInfo group);
    internal void UpdateGroupSummary(GroupRowInfo group);
    protected internal virtual bool get_AllowSortUnbound();
    protected internal virtual void OnColumnPopulated(DataColumnInfo info);
    protected virtual bool CanFindUnboundColumn(DataColumnInfo column);
    protected virtual bool AllowServerAction(string fieldName, ColumnServerActionType action);
    protected virtual bool ProcessListServerAction(string fieldName, ColumnServerActionType action, Boolean& res);
    protected virtual void CalcGroupSummaryItem(SummaryItem summary);
    protected virtual object GetGroupRowValue(GroupRowInfo group, int column);
    internal ListSourceGroupInfo GetListSourceGroupInfo(GroupRowInfo group);
    public virtual object GetGroupRowValue(GroupRowInfo group);
    protected virtual Hashtable GetGroupSummaryCore(GroupRowInfo group);
    public virtual void UpdateTotalSummary(List`1<SummaryItem> changedItems, bool selectionChanged);
    protected virtual void DoSortSummary();
    protected virtual void DoFilterRows();
    protected virtual void OnBindingListChangedCore(ListChangedEventArgs e);
    protected virtual IXtraSourceError get_SourceError();
    protected virtual void SubscribeEvents();
    protected virtual void UnsubscribeEvents();
    private void SourceError_ErrorOccurred(object sender, ErrorEventArgs e);
    protected virtual void SubscribeDataSync();
    protected abstract virtual IList GetListSource();
    protected virtual void OnDataSourceChanged(DataSourceInfo currentSourceInfo);
    protected virtual bool get_RequireEndEditOnGroupRows();
    public static CriteriaOperator DescriptorToCriteria(DataColumnInfo column);
    private static CriteriaOperator DescriptorToCriteria(PropertyDescriptor pd);
    public static CriteriaOperator GetColumnGroupIntervalCriteria(CriteriaOperator plainCriteria, ColumnGroupInterval groupType, Boolean& isGroupInterval);
    private static CriteriaOperator GetColumnGroupIntervalCriteriaDateRange(CriteriaOperator plainCriteria);
    private static CriteriaOperator DiffHour(CriteriaOperator start, CriteriaOperator end);
    private static CriteriaOperator DiffDay(CriteriaOperator start, CriteriaOperator end);
    private static CriteriaOperator DiffMonth(CriteriaOperator start, CriteriaOperator end);
    private static CriteriaOperator BinaryEqual(CriteriaOperator left, CriteriaOperator right);
    private static CriteriaOperator BinaryGreater(CriteriaOperator left, CriteriaOperator right);
    private static CriteriaOperator BinaryGreaterOrEq(CriteriaOperator left, CriteriaOperator right);
    private static CriteriaOperator BinaryLess(CriteriaOperator left, CriteriaOperator right);
    private static CriteriaOperator BinaryLessOrEq(CriteriaOperator left, CriteriaOperator right);
    private static CriteriaOperator GetDate(CriteriaOperator criteria);
    private static CriteriaOperator GetMonth(CriteriaOperator criteria);
    private static CriteriaOperator Iif(CriteriaOperator condition, CriteriaOperator trueResult, CriteriaOperator falseResult);
    private static CriteriaOperator GetDateByInterval(OutlookInterval interval);
    private static CriteriaOperator GetWeekStart();
    internal static List`1<ServerModeOrderDescriptor[]> GetSortCollection(DataController controller);
    private static List`1<ServerModeOrderDescriptor[]> GetSortCollection(DataColumnSortInfo[] sortInfo, int groupCount);
    internal static Aggregate SummaryTypeToAggregate(SummaryItemType summaryType, Boolean& ignoreExpression);
    internal static ICollection`1<ServerModeSummaryDescriptor> ListSourceSummaryItemsToServerModeSummaryDescriptors(ICollection`1<ListSourceSummaryItem> src);
    internal static ICollection`1<ServerModeSummaryDescriptor> ListSourceSummaryItemsToServerModeSummaryDescriptors(ICollection`1<ListSourceSummaryItem> src, Func`4<ListSourceSummaryItem, CriteriaOperator, Aggregate, ServerModeSummaryDescriptor> createItem);
    public virtual void ValidateExpression(CriteriaOperator op);
}
public class DevExpress.Data.ServerModeDataControllerFilterHelper : DataControllerFilterHelper {
    public ServerModeDataController Controller { get; }
    public ServerModeDataControllerFilterHelper(ServerModeDataController controller);
    public ServerModeDataController get_Controller();
    public virtual Object[] GetUniqueColumnValues(DataColumnInfo columnInfo, ColumnValuesArguments args, OperationCompleted completed);
}
public class DevExpress.Data.ServerModeDataControllerVisibleIndexCollection : DataControllerVisibleIndexCollection {
    public ServerModeDataControllerVisibleIndexCollection(DataController controller);
    protected virtual int GetMaxCount();
}
public class DevExpress.Data.ServerModeExceptionThrownEventArgs : EventArgs {
    private Exception _Exception;
    public Exception Exception { get; }
    public ServerModeExceptionThrownEventArgs(Exception exception);
    public Exception get_Exception();
}
public class DevExpress.Data.ServerModeGroupedRowsKeeperEx : GroupedRowsKeeperEx {
    public bool AllExpanded { get; }
    public ServerModeGroupedRowsKeeperEx(DataController controller);
    public virtual bool get_AllExpanded();
    protected virtual bool GetAllRecordsSelected();
}
public class DevExpress.Data.ServerModeGroupRowInfo : GroupRowInfo {
    private ListSourceGroupInfo listGroupInfo;
    public bool ChildrenReady;
    public bool IsSummaryReady;
    public ListSourceGroupInfo ListGroupInfo { get; public set; }
    public object GroupValue { get; }
    public ServerModeGroupRowInfo(byte level, int childControllerRow, GroupRowInfo parentGroup, ListSourceGroupInfo listGroupInfo);
    public ListSourceGroupInfo get_ListGroupInfo();
    public void set_ListGroupInfo(ListSourceGroupInfo value);
    public virtual void ClearSummary();
    public virtual object get_GroupValue();
    internal void SetSummary(SummaryItemCollection groupSummary, List`1<object> summaryValues);
}
public class DevExpress.Data.ServerModeInconsistencyDetectedEventArgs : HandledEventArgs {
    private Exception _Exception;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Exception Message { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ServerModeInconsistencyDetectedEventArgs(Exception message);
    public Exception get_Message();
}
public class DevExpress.Data.ServerModeListSourceRowsKeeper : ListSourceRowsKeeper {
    protected ServerModeDataController Controller { get; }
    public ServerModeListSourceRowsKeeper(ServerModeDataController controller, SelectedRowsKeeper rowsKeeper);
    protected virtual GroupedRowsKeeperEx CreateGroupRowsKeeper();
    protected ServerModeDataController get_Controller();
    protected virtual void RestoreSelectionCore(int count);
    protected virtual void RestoreRegularRowsSelection();
    protected virtual object ExGetGroupRowKeyCore(GroupRowInfo group);
}
public class DevExpress.Data.ServerModeMasterRowInfoCollection : MasterRowInfoCollection {
    public ServerModeMasterRowInfoCollection(DataController controller);
    public virtual MasterRowInfo Find(int listSourceRow);
}
public class DevExpress.Data.ServerModeOrderDescriptor : object {
    public CriteriaOperator SortExpression;
    public CriteriaOperator GroupByExpression;
    public bool IsDesc;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXBrowsableAttribute("False")]
[ObsoleteAttribute("Use GroupByExpression instead")]
public CriteriaOperator AuxExpression { get; }
    public string SortPropertyName { get; }
    public ServerModeOrderDescriptor(CriteriaOperator sortExpression, bool isDesc);
    public ServerModeOrderDescriptor(CriteriaOperator sortExpression, bool isDesc, CriteriaOperator groupByExpression);
    public CriteriaOperator get_AuxExpression();
    public virtual string ToString();
    public static string ToString(ServerModeOrderDescriptor[] descrs);
    public string get_SortPropertyName();
}
internal static class DevExpress.Data.ServerModeRoundingHelper : object {
    public static CriteriaOperator MakeDateOrTimeRounding(Type columnType, CriteriaOperator expression);
}
public class DevExpress.Data.ServerModeSummaryDescriptor : object {
    public CriteriaOperator SummaryExpression;
    public Aggregate SummaryType;
    public string SummaryCustomAggregateName;
    public CriteriaOperatorCollection SummaryCustomAggregateExpressions;
    public string SummaryPropertyName { get; }
    public ServerModeSummaryDescriptor(CriteriaOperator expression, Aggregate type);
    public ServerModeSummaryDescriptor(IEnumerable`1<CriteriaOperator> expressions, string customAggregateName);
    public virtual bool Equals(ServerModeSummaryDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string get_SummaryPropertyName();
}
public class DevExpress.Data.SortClientColumnData : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public string Name { get; public set; }
    public object Tag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
}
public static class DevExpress.Data.StackTraceHelper : object {
    public static bool CheckStackFrame(string methodName, Type type, int start, int maxCount);
    public static bool CheckStackFrame(string methodName, Type type);
    public static bool CheckStackFrameByName(string methodName, string typeName, int start, int maxCount);
    public static bool CheckStackFrameByName(string methodName, string typeName);
}
public class DevExpress.Data.SubstituteFilterEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CriteriaOperator <Filter>k__BackingField;
    public CriteriaOperator Filter { get; public set; }
    public SubstituteFilterEventArgs(CriteriaOperator filter);
    [CompilerGeneratedAttribute]
public CriteriaOperator get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(CriteriaOperator value);
}
public class DevExpress.Data.SubstituteSortInfoEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataColumnSortInfo[] <SortInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GroupCount>k__BackingField;
    public DataColumnSortInfo[] SortInfo { get; public set; }
    public int GroupCount { get; internal set; }
    [CompilerGeneratedAttribute]
public DataColumnSortInfo[] get_SortInfo();
    [CompilerGeneratedAttribute]
public void set_SortInfo(DataColumnSortInfo[] value);
    [CompilerGeneratedAttribute]
public int get_GroupCount();
    [CompilerGeneratedAttribute]
internal void set_GroupCount(int value);
}
public interface DevExpress.Data.Summary.ISummaryItem {
    public string FieldName { get; }
    public SummaryItemType SummaryType { get; }
    public string DisplayFormat { get; public set; }
    public abstract virtual string get_FieldName();
    public abstract virtual SummaryItemType get_SummaryType();
    public abstract virtual string get_DisplayFormat();
    public abstract virtual void set_DisplayFormat(string value);
}
public interface DevExpress.Data.Summary.ISummaryItemsOwner {
    public abstract virtual List`1<ISummaryItem> GetItems();
    public abstract virtual void SetItems(List`1<ISummaryItem> items);
    public abstract virtual ISummaryItem CreateItem(string fieldName, SummaryItemType summaryType);
    public abstract virtual List`1<string> GetFieldNames();
    public abstract virtual string GetCaptionByFieldName(string fieldName);
    public abstract virtual Type GetTypeByFieldName(string fieldName);
}
public class DevExpress.Data.Summary.SummaryEditorOrderUIItem : object {
    private SummaryItemsEditorController controller;
    private ISummaryItem item;
    private string caption;
    public string Caption { get; protected set; }
    public bool CanUp { get; }
    public bool CanDown { get; }
    public ISummaryItem Item { get; }
    public int Index { get; }
    protected SummaryItemsEditorController Controller { get; }
    public SummaryEditorOrderUIItem(SummaryItemsEditorController controller, ISummaryItem item, string caption);
    public string get_Caption();
    protected void set_Caption(string value);
    public virtual string ToString();
    protected virtual bool IsCanUp();
    protected virtual bool IsCanDown();
    public bool get_CanUp();
    public bool get_CanDown();
    public virtual void MoveUp();
    public virtual void MoveDown();
    public ISummaryItem get_Item();
    public int get_Index();
    protected SummaryItemsEditorController get_Controller();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Summary.SummaryEditorUIItem : object {
    private SummaryItemsEditorController controller;
    private string fieldName;
    private string caption;
    private Type type;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool Item { get; public set; }
    public string FieldName { get; }
    public string Caption { get; }
    public Type Type { get; }
    public bool HasSummary { get; }
    protected SummaryItemsEditorController Controller { get; }
    public SummaryEditorUIItem(SummaryItemsEditorController controller, string fieldName, string caption, Type type);
    public bool get_Item(SummaryItemType summaryType);
    public void set_Item(SummaryItemType summaryType, bool value);
    public string get_FieldName();
    public string get_Caption();
    public Type get_Type();
    public bool get_HasSummary();
    protected SummaryItemsEditorController get_Controller();
    public virtual string ToString();
    public bool CanDoSummary(SummaryItemType summaryType);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void RaisePropertyChanged(string propertyName);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.Summary.SummaryItemsEditorController : object {
    private ISummaryItemsOwner itemsOwner;
    private List`1<ISummaryItem> items;
    private List`1<ISummaryItem> initialItems;
    private List`1<SummaryEditorUIItem> uiItems;
    public List`1<ISummaryItem> Items { get; }
    protected List`1<SummaryEditorUIItem> UIItems { get; }
    public int Count { get; }
    public SummaryEditorUIItem Item { get; }
    public SummaryEditorUIItem Item { get; }
    public bool HasCountByEmptyField { get; public set; }
    protected ISummaryItemsOwner ItemsOwner { get; }
    protected List`1<ISummaryItem> InitialItems { get; }
    public SummaryItemsEditorController(ISummaryItemsOwner itemsOwner);
    public List`1<ISummaryItem> get_Items();
    protected List`1<SummaryEditorUIItem> get_UIItems();
    public int get_Count();
    public SummaryEditorUIItem get_Item(int index);
    public SummaryEditorUIItem get_Item(string fieldName);
    public bool get_HasCountByEmptyField();
    public void set_HasCountByEmptyField(bool value);
    protected ISummaryItemsOwner get_ItemsOwner();
    protected List`1<ISummaryItem> get_InitialItems();
    public virtual void AddSummary(string fieldName, SummaryItemType summaryType);
    public virtual void RemoveSummary(string fieldName, SummaryItemType summaryType);
    public void SetSummary(string fieldName, SummaryItemType summaryType, bool value);
    public virtual bool HasSummary(SummaryItemType summaryType);
    public bool HasSummary(string fieldName, SummaryItemType summaryType);
    public bool HasSummary(string fieldName);
    public void Apply();
    public List`1<SummaryEditorOrderUIItem> CreateOrderItems();
    protected virtual string GetTextBySummaryType(SummaryItemType summaryType);
    protected virtual void CreateItemWithCountSummary();
    public virtual bool CanApplySummary(SummaryItemType summaryType, string fieldName);
    protected internal virtual bool CanApplySummaryCore(SummaryItemType summaryType, Type objectType);
    protected virtual string GetSummaryItemCaption(ISummaryItem item);
    protected virtual bool IsGroupSummaryItem(ISummaryItem item);
    protected ISummaryItem FindSummaryItem(string fieldName, SummaryItemType summaryType, List`1<ISummaryItem> list);
    protected virtual bool TestItemAlignment(ISummaryItem item);
    private void CreateUIItems();
    private int UIItemCompare(SummaryEditorUIItem item1, SummaryEditorUIItem item2);
}
public class DevExpress.Data.Summary.SummaryItemsSerializer : object {
    private static char EscapeCharacter;
    public static char SummaryItemDelimiter;
    public static char SummaryTypeDelimiter;
    public static char SummaryDisplayFormatDelimiter;
    private static string EscapedEscapeCharacter;
    private static string EscapedSummaryItemDelimeter;
    private ISummaryItemsOwner itemsOwner;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static char SummaryItemDelimeter { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static char SummaryTypeDelimeter { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static char SummaryDisplayFormatDelimeter { get; }
    protected ISummaryItemsOwner ItemsOwner { get; }
    public SummaryItemsSerializer(ISummaryItemsOwner itemsOwner);
    private static SummaryItemsSerializer();
    public static char get_SummaryItemDelimeter();
    public static char get_SummaryTypeDelimeter();
    public static char get_SummaryDisplayFormatDelimeter();
    protected ISummaryItemsOwner get_ItemsOwner();
    public virtual void Deserialize(string data);
    public virtual string Serialize();
    protected ISummaryItem DeserializeSummaryItem(string data);
    protected virtual void DeserializeSummaryItem(string data, String& fieldName, SummaryItemType& summaryType, String& displayFormat);
    protected bool ItemsOwnerNotContainsField(string fieldName);
    protected string GetFieldName(string data);
    private string SplitData(String& data, char splitter);
    private string EncodeItem(string toEncode);
    private string DecodeItem(string toDecode);
    protected String[] SplitAndDecodeData(string data);
}
public static class DevExpress.Data.Summary.SummaryItemTypeHelper : object {
    [DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DefaultBoolean AllowMinMaxSummaryTypeForBoolean;
    public static SummaryItemType[] generalPermanentTypes;
    public static SummaryItemType[] generalSumTypes;
    public static SummaryItemType[] generalComparableTypes;
    private static Type[] numericalTypes;
    private static SummaryItemTypeHelper();
    public static bool CanApplySummary(SummaryItemType summaryType, Type objectType);
    public static bool CanApplySummary(T summaryType, Type objectType, T[] permanentTypes, T[] sumTypes, T[] comparableTypes);
    public static bool IsDateTime(Type type);
    public static bool IsDateTimeOffset(Type type);
    public static bool IsDateOnly(Type type);
    public static bool IsTimeSpan(Type type);
    public static bool IsTimeOnly(Type type);
    public static bool IsBool(Type type);
    public static bool IsNumericalType(Type type);
}
public class DevExpress.Data.SummaryItem : SummaryItemBase {
    private SummaryItemCollection collection;
    private object summaryValue;
    private object summaryValueSelection;
    protected Nullable`1<bool> ignoreNullValuesCore;
    private SummaryItemTypeEx summaryTypeEx;
    private decimal summaryArgument;
    private bool exists;
    private SummaryMode mode;
    private SummaryMode calculatedSummaryMode;
    public bool Exists { get; public set; }
    public string FieldName { get; public set; }
    private SummaryItemType summaryType { get; private set; }
    public decimal SummaryArgument { get; public set; }
    public bool IsListBasedSummary { get; }
    protected internal bool IsSummaryArgumentRequired { get; }
    protected internal bool IsPercentArgument { get; }
    public SummaryItemType SummaryType { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public SummaryItemTypeEx SummaryTypeEx { get; public set; }
    public SummaryMode CalculatedSummaryMode { get; }
    public SummaryMode Mode { get; public set; }
    public object SummaryValue { get; public set; }
    public IList SummaryValueListBased { get; }
    public bool AllowCalculate { get; }
    [ObsoleteAttribute]
public bool AllowExternalCalculate { get; }
    public bool IsNoneSummary { get; }
    public bool IsCustomSummary { get; }
    protected internal SummaryItemCollection Collection { get; protected internal set; }
    public SummaryItem(DataColumnInfo columnInfo, SummaryItemType summaryType, object tag, Nullable`1<bool> ignoreNullValues);
    public SummaryItem(DataColumnInfo columnInfo, SummaryItemTypeEx summaryType, decimal argument, Nullable`1<bool> ignoreNullValues);
    public SummaryItem(DataColumnInfo columnInfo, SummaryItemType summaryType);
    public bool get_Exists();
    public void set_Exists(bool value);
    public string get_FieldName();
    public void set_FieldName(string value);
    private SummaryItemType get_summaryType();
    private void set_summaryType(SummaryItemType value);
    public decimal get_SummaryArgument();
    public void set_SummaryArgument(decimal value);
    public virtual bool get_IsListBasedSummary();
    protected internal bool get_IsSummaryArgumentRequired();
    protected internal bool get_IsPercentArgument();
    public SummaryItemType get_SummaryType();
    public void set_SummaryType(SummaryItemType value);
    public SummaryItemTypeEx get_SummaryTypeEx();
    public void set_SummaryTypeEx(SummaryItemTypeEx value);
    public SummaryMode get_CalculatedSummaryMode();
    public SummaryMode get_Mode();
    public void set_Mode(SummaryMode value);
    public object get_SummaryValue();
    public void set_SummaryValue(object value);
    public IList get_SummaryValueListBased();
    public bool get_AllowCalculate();
    public bool get_AllowExternalCalculate();
    public bool GetAllowExternalCalculate(bool allowUnbound);
    public bool get_IsNoneSummary();
    public bool get_IsCustomSummary();
    protected internal SummaryItemCollection get_Collection();
    protected internal void set_Collection(SummaryItemCollection value);
    protected virtual void OnSummaryChanged();
    protected internal bool IgnoreNullValues(bool defaultValue);
    public void ResetValue();
    internal void SetSummaryValue(object value, SummaryMode calculatedSummaryMode);
}
public class DevExpress.Data.SummaryItemBase : object {
    private DataColumnInfo columnInfo;
    private object tag;
    public DataColumnInfo ColumnInfo { get; public set; }
    public object Key { get; }
    public object Tag { get; public set; }
    public SummaryItemBase(DataColumnInfo columnInfo, object tag);
    public SummaryItemBase(DataColumnInfo columnInfo);
    public DataColumnInfo get_ColumnInfo();
    public void set_ColumnInfo(DataColumnInfo value);
    public object get_Key();
    public object get_Tag();
    public void set_Tag(object value);
    protected virtual void OnSummaryChanged();
}
public class DevExpress.Data.SummaryItemCollection : ColumnInfoNotificationCollection`1<SummaryItem> {
    internal SummarySelectionInfo lastSummarySelectionInfo;
    public bool HasAnySelectionSummary { get; }
    public int ActiveCount { get; }
    public SummaryItemCollection(DataControllerBase controller, CollectionChangeEventHandler collectionChanged);
    public SummaryItem GetSummaryItemByTag(object tag);
    public static IList`1<SummaryItem> GetOrderedList(IList items);
    public List`1<SummaryItem> GetSummaryItemByTagType(Type tagType);
    public bool get_HasAnySelectionSummary();
    public static int GetActiveCount(IList list);
    public SummaryItem GetSummaryItemByKey(object key);
    protected internal virtual void RequestSummaryValue(SummaryItem item);
    protected internal virtual void RequestSummaryValue();
    public bool Contains(SummaryItem item);
    protected virtual bool IsColumnInfoUsed(int index, IList`1<DataColumnInfo> unusedColumns);
    public virtual SummaryItem Add(SummaryItem item);
    public void ClearAndAddRange(SummaryItem[] summaryItems);
    public void AddRange(SummaryItem[] summaryItems);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClear();
    protected internal virtual void OnSummaryItemChanged(SummaryItem item);
    public int get_ActiveCount();
    public List`1<ListSourceSummaryItem> GetSummaryItems();
    public List`1<ListSourceSummaryItem> GetSummaryItems(bool allowUnbound);
}
[TypeConverterAttribute("DevExpress.Data.Design.SummaryItemTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.Data.SummaryItemType : Enum {
    public int value__;
    public static SummaryItemType Sum;
    public static SummaryItemType Min;
    public static SummaryItemType Max;
    public static SummaryItemType Count;
    public static SummaryItemType Average;
    public static SummaryItemType Custom;
    public static SummaryItemType None;
}
public enum DevExpress.Data.SummaryItemTypeEx : Enum {
    public int value__;
    public static SummaryItemTypeEx Sum;
    public static SummaryItemTypeEx Min;
    public static SummaryItemTypeEx Max;
    public static SummaryItemTypeEx Count;
    public static SummaryItemTypeEx Average;
    public static SummaryItemTypeEx Custom;
    public static SummaryItemTypeEx None;
    public static SummaryItemTypeEx Top;
    public static SummaryItemTypeEx TopPercent;
    public static SummaryItemTypeEx Bottom;
    public static SummaryItemTypeEx BottomPercent;
    public static SummaryItemTypeEx Unique;
    public static SummaryItemTypeEx Duplicate;
}
public enum DevExpress.Data.SummaryMode : Enum {
    public int value__;
    public static SummaryMode AllRows;
    public static SummaryMode Selection;
    public static SummaryMode Mixed;
}
internal class DevExpress.Data.SummarySelectionInfo : object {
    private Int32[] selectedRows;
    private static SummarySelectionInfo empty;
    [CompilerGeneratedAttribute]
private bool <AnyGroupsSelected>k__BackingField;
    public static SummarySelectionInfo Empty { get; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public Int32[] SelectedRows { get; public set; }
    public bool AnyGroupsSelected { get; public set; }
    public static SummarySelectionInfo get_Empty();
    public int get_Count();
    public bool get_IsEmpty();
    public Int32[] get_SelectedRows();
    public void set_SelectedRows(Int32[] value);
    [CompilerGeneratedAttribute]
public bool get_AnyGroupsSelected();
    [CompilerGeneratedAttribute]
public void set_AnyGroupsSelected(bool value);
    public bool IsEquals(SummarySelectionInfo info);
}
[AttributeUsageAttribute("4")]
public class DevExpress.Data.Svg.FormatElementAttribute : Attribute {
    private string xmlElementName;
    public string XmlElementName { get; }
    public FormatElementAttribute(string xmlElementName);
    public string get_XmlElementName();
}
public interface DevExpress.Data.Svg.IDefinitionKeysGenerator {
    public abstract virtual string GenerateKey();
}
public interface DevExpress.Data.Svg.ISvgElementFactory`1 {
    public abstract virtual T CreateLine(SvgLine line);
    public abstract virtual T CreateEllipse(SvgEllipse ellipse);
    public abstract virtual T CreateCircle(SvgCircle circle);
    public abstract virtual T CreateRectangle(SvgRectangle rectangle);
    public abstract virtual T CreatePath(SvgPath path);
    public abstract virtual T CreatePolygon(SvgPolygon polygon);
    public abstract virtual T CreatePolyline(SvgPolyline polyine);
    public abstract virtual T CreateText(SvgText text);
}
public interface DevExpress.Data.Svg.ISvgEllipseAdapter {
    public SvgEllipse Ellipse { get; }
    public abstract virtual SvgEllipse get_Ellipse();
}
public interface DevExpress.Data.Svg.ISvgInstance {
    public bool IgnoreChildren { get; }
    public abstract virtual bool get_IgnoreChildren();
}
public class DevExpress.Data.Svg.SvgAttribute : object {
    private string name;
    private object value;
    private Type type;
    public string Name { get; }
    public object Value { get; }
    public Type Type { get; }
    public SvgAttribute(string name, object value);
    public SvgAttribute(string name, object value, Type type);
    public string get_Name();
    public object get_Value();
    public Type get_Type();
}
public abstract class DevExpress.Data.Svg.SvgBrush : object {
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    public bool IsDefault { get; }
    protected SvgBrush(bool isDefault);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    public abstract virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator, string colorKey, string opacityKey);
}
[FormatElementAttribute("circle")]
public class DevExpress.Data.Svg.SvgCircle : SvgVisualElement {
    private double radius;
    private SvgPoint location;
    public double Radius { get; }
    public SvgPoint Location { get; }
    private SvgEllipse DevExpress.Data.Svg.ISvgEllipseAdapter.Ellipse { get; }
    public SvgCircle(SvgPoint location, double radius);
    public SvgCircle(double cx, double cy, double radius);
    public double get_Radius();
    public SvgPoint get_Location();
    private sealed virtual override SvgEllipse DevExpress.Data.Svg.ISvgEllipseAdapter.get_Ellipse();
    protected virtual bool FillFields(SvgElementDataImportAgent dataAgent);
    protected virtual void ExportFields(SvgElementDataExportAgent dataAgent);
    public virtual SvgRect GetBoundaryPoints();
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
[FormatElementAttribute("clipPath")]
public class DevExpress.Data.Svg.SvgClippingDefinition : SvgDefinition {
    public bool IgnoreChildren { get; }
    public virtual bool get_IgnoreChildren();
}
public enum DevExpress.Data.Svg.SvgCommandAction : Enum {
    public int value__;
    public static SvgCommandAction Start;
    public static SvgCommandAction Motion;
    public static SvgCommandAction Stop;
}
[FormatElementAttribute("A")]
public class DevExpress.Data.Svg.SvgCommandArc : SvgCommandBase {
    private SvgPoint radius;
    private double rotation;
    private bool isLargeArc;
    private bool isSwap;
    public SvgPoint Radius { get; protected internal set; }
    public double Rotation { get; protected internal set; }
    public bool IsLargeArc { get; protected internal set; }
    public bool IsSwap { get; protected internal set; }
    public char ExportCommandName { get; }
    public int ParametersCount { get; }
    public int InitialPointsCount { get; }
    public SvgCommandArc(double rx, double ry, double rotationAngle, bool isLargeArc, bool isSwap, SvgPoint point);
    public SvgPoint get_Radius();
    protected internal void set_Radius(SvgPoint value);
    public double get_Rotation();
    protected internal void set_Rotation(double value);
    public bool get_IsLargeArc();
    protected internal void set_IsLargeArc(bool value);
    public bool get_IsSwap();
    protected internal void set_IsSwap(bool value);
    public virtual char get_ExportCommandName();
    public virtual int get_ParametersCount();
    public virtual int get_InitialPointsCount();
    protected virtual void ExportCommandParameters(StringBuilder stringBuilder);
    protected virtual SvgPointCollection ParsePoints(String[] commandsElementsList, int index, SvgPoint prevPoint);
}
[FormatElementAttribute("a")]
public class DevExpress.Data.Svg.SvgCommandArcRelative : SvgCommandArc {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
}
public abstract class DevExpress.Data.Svg.SvgCommandBase : object {
    private SvgPointCollection points;
    public SvgPointCollection Points { get; protected internal set; }
    public bool IgnoreChildren { get; }
    public bool IsRelative { get; }
    public int ParametersCount { get; }
    public int InitialPointsCount { get; }
    public SvgCommandAction CommandAction { get; }
    public SvgPoint GeneralPoint { get; }
    public char ExportCommandName { get; }
    public SvgCommandBase(SvgPoint[] initialPoints);
    public SvgPointCollection get_Points();
    protected internal void set_Points(SvgPointCollection value);
    public virtual bool get_IgnoreChildren();
    public virtual bool get_IsRelative();
    public virtual int get_ParametersCount();
    public virtual int get_InitialPointsCount();
    public virtual SvgCommandAction get_CommandAction();
    public virtual SvgPoint get_GeneralPoint();
    public abstract virtual char get_ExportCommandName();
    protected virtual SvgPointCollection ParsePoints(String[] commandsElementsList, int index, SvgPoint prevPoint);
    protected void CalculateAbsolutePoints(SvgPoint prevPoint);
    protected virtual void ExportCommandParameters(StringBuilder stringBuilder);
    public void FillCommand(String[] commandsElementsList, int index, SvgPoint prevPoint);
    public void ExportCommand(StringBuilder stringBuilder);
}
[FormatElementAttribute("Z")]
public class DevExpress.Data.Svg.SvgCommandClose : SvgCommandBase {
    private SvgPoint closedPoint;
    public char ExportCommandName { get; }
    public int ParametersCount { get; }
    public int InitialPointsCount { get; }
    public SvgCommandAction CommandAction { get; }
    public SvgPoint GeneralPoint { get; }
    public virtual char get_ExportCommandName();
    public virtual int get_ParametersCount();
    public virtual int get_InitialPointsCount();
    public virtual SvgCommandAction get_CommandAction();
    public virtual SvgPoint get_GeneralPoint();
    protected virtual SvgPointCollection ParsePoints(String[] commandsElementsList, int index, SvgPoint startPoint);
}
[FormatElementAttribute("z")]
public class DevExpress.Data.Svg.SvgCommandCloseRelative : SvgCommandClose {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
}
public class DevExpress.Data.Svg.SvgCommandCollection : List`1<SvgCommandBase> {
    private static RegexOptions regOptions;
    private static SvgCommandCollection();
    public SvgCommandCollection(IList`1<SvgCommandBase> svgCommands);
    private static char GetByPrevCommandSymbol(char lastCommandSymbol);
    internal static string NormalizeSourceString(string sourceString);
    private static string ConstructNumbers(Match match);
    public static SvgCommandCollection Parse(string commandsString);
    public static SvgCommandCollection Parse(String[] commandsElementsList);
    public virtual string ToString();
    public SvgRect GetBoundaryPoints();
}
[FormatElementAttribute("C")]
public class DevExpress.Data.Svg.SvgCommandCubicBezier : SvgCommandBase {
    public char ExportCommandName { get; }
    public int ParametersCount { get; }
    public int InitialPointsCount { get; }
    public SvgCommandCubicBezier(SvgPoint point1, SvgPoint point2, SvgPoint point3);
    public virtual char get_ExportCommandName();
    public virtual int get_ParametersCount();
    public virtual int get_InitialPointsCount();
}
[FormatElementAttribute("c")]
public class DevExpress.Data.Svg.SvgCommandCubicBezierRelative : SvgCommandCubicBezier {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
}
[FormatElementAttribute("H")]
public class DevExpress.Data.Svg.SvgCommandHorizontal : SvgCommandBase {
    public char ExportCommandName { get; }
    public int ParametersCount { get; }
    public virtual char get_ExportCommandName();
    public virtual int get_ParametersCount();
    protected SvgPointCollection Parse(String[] commandsElementsList, int i, SvgPoint point);
    protected virtual SvgPointCollection ParsePoints(String[] commandsElementsList, int i, SvgPoint prevPoint);
}
[FormatElementAttribute("h")]
public class DevExpress.Data.Svg.SvgCommandHorizontalRelative : SvgCommandHorizontal {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
    protected virtual SvgPointCollection ParsePoints(String[] commandsElementsList, int i, SvgPoint prevPoint);
}
[FormatElementAttribute("L")]
public class DevExpress.Data.Svg.SvgCommandLine : SvgCommandBase {
    public char ExportCommandName { get; }
    public SvgCommandLine(SvgPoint point);
    public virtual char get_ExportCommandName();
}
[FormatElementAttribute("l")]
public class DevExpress.Data.Svg.SvgCommandLineRelative : SvgCommandLine {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
}
[FormatElementAttribute("M")]
public class DevExpress.Data.Svg.SvgCommandMove : SvgCommandBase {
    public SvgCommandAction CommandAction { get; }
    public char ExportCommandName { get; }
    public SvgCommandMove(SvgPoint point);
    public virtual SvgCommandAction get_CommandAction();
    public virtual char get_ExportCommandName();
}
[FormatElementAttribute("m")]
public class DevExpress.Data.Svg.SvgCommandMoveRelative : SvgCommandMove {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
}
[FormatElementAttribute("Q")]
public class DevExpress.Data.Svg.SvgCommandQuadraticBezier : SvgCommandBase {
    public char ExportCommandName { get; }
    public int ParametersCount { get; }
    public int InitialPointsCount { get; }
    public SvgCommandQuadraticBezier(SvgPoint point1, SvgPoint point2);
    public virtual char get_ExportCommandName();
    public virtual int get_ParametersCount();
    public virtual int get_InitialPointsCount();
}
[FormatElementAttribute("q")]
public class DevExpress.Data.Svg.SvgCommandQuadraticBezierRelative : SvgCommandQuadraticBezier {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
}
[FormatElementAttribute("S")]
public class DevExpress.Data.Svg.SvgCommandShortCubicBezier : SvgCommandBase {
    public char ExportCommandName { get; }
    public int ParametersCount { get; }
    public int InitialPointsCount { get; }
    public SvgCommandShortCubicBezier(SvgPoint point1, SvgPoint point2);
    public virtual char get_ExportCommandName();
    public virtual int get_ParametersCount();
    public virtual int get_InitialPointsCount();
}
[FormatElementAttribute("s")]
public class DevExpress.Data.Svg.SvgCommandShortCubicBezierRelative : SvgCommandShortCubicBezier {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
}
[FormatElementAttribute("T")]
public class DevExpress.Data.Svg.SvgCommandShortQuadraticBezier : SvgCommandBase {
    public char ExportCommandName { get; }
    public SvgCommandShortQuadraticBezier(SvgPoint point);
    public virtual char get_ExportCommandName();
}
[FormatElementAttribute("t")]
public class DevExpress.Data.Svg.SvgCommandShortQuadraticBezierRelative : SvgCommandShortQuadraticBezier {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
}
[FormatElementAttribute("V")]
public class DevExpress.Data.Svg.SvgCommandVertical : SvgCommandBase {
    public char ExportCommandName { get; }
    public int ParametersCount { get; }
    public virtual char get_ExportCommandName();
    public virtual int get_ParametersCount();
    protected SvgPointCollection Parse(String[] commandsElementsList, int i, SvgPoint point);
    protected virtual SvgPointCollection ParsePoints(String[] commandsElementsList, int i, SvgPoint prevPoint);
}
[FormatElementAttribute("v")]
public class DevExpress.Data.Svg.SvgCommandVerticalRelative : SvgCommandVertical {
    public bool IsRelative { get; }
    public virtual bool get_IsRelative();
    protected virtual SvgPointCollection ParsePoints(String[] commandsElementsList, int i, SvgPoint prevPoint);
}
public class DevExpress.Data.Svg.SvgDefDefinition : SvgDefinition {
    public bool IgnoreChildren { get; }
    public virtual bool get_IgnoreChildren();
}
public abstract class DevExpress.Data.Svg.SvgDefinition : SvgItem {
    private string key;
    private bool isExported;
    public string Key { get; }
    public bool IsExported { get; }
    public string get_Key();
    public bool get_IsExported();
    private string GetDefinitionKey(IDefinitionKeysGenerator keysGenerator);
    public virtual bool FillData(SvgElementDataImportAgent dataAgent);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
    public string GetUrl(IDefinitionKeysGenerator keysGenerator);
}
public abstract class DevExpress.Data.Svg.SvgElement : SvgItem {
    private List`1<SvgAttribute> attributeCollection;
    private Dictionary`2<string, string> styles;
    [CompilerGeneratedAttribute]
private SvgShapeVisual <ElementVisual>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgTransformCollection <TransformCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgClippingDefinition <ClippingDefinition>k__BackingField;
    public Dictionary`2<string, string> Styles { get; }
    public List`1<SvgAttribute> AttributeCollection { get; }
    public SvgShapeVisual ElementVisual { get; private set; }
    public SvgTransformCollection TransformCollection { get; public set; }
    public SvgClippingDefinition ClippingDefinition { get; public set; }
    public Dictionary`2<string, string> get_Styles();
    public List`1<SvgAttribute> get_AttributeCollection();
    [CompilerGeneratedAttribute]
public SvgShapeVisual get_ElementVisual();
    [CompilerGeneratedAttribute]
private void set_ElementVisual(SvgShapeVisual value);
    [CompilerGeneratedAttribute]
public SvgTransformCollection get_TransformCollection();
    [CompilerGeneratedAttribute]
public void set_TransformCollection(SvgTransformCollection value);
    [CompilerGeneratedAttribute]
public SvgClippingDefinition get_ClippingDefinition();
    [CompilerGeneratedAttribute]
public void set_ClippingDefinition(SvgClippingDefinition value);
    private void FillTransform(SvgElementDataImportAgent dataAgent);
    private void FillVisual(SvgElementDataImportAgent dataAgent);
    private void PopulateId(SvgElementDataImportAgent dataAgent);
    private void FillAttributes(SvgElementDataImportAgent dataAgent);
    private void ExportTransform(SvgElementDataExportAgent dataAgent);
    private void ExportStyle(SvgElementDataExportAgent dataAgent);
    private IEnumerable`1<SvgDefinition> ExportVisual(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
    [IteratorStateMachineAttribute("DevExpress.Data.Svg.SvgElement/<ExportClipping>d__26")]
private IEnumerable`1<SvgDefinition> ExportClipping(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
    public virtual bool FillData(SvgElementDataImportAgent dataAgent);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
    public abstract virtual SvgRect GetBoundaryPoints();
    public abstract virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
public static class DevExpress.Data.Svg.SvgElementCreator : object {
    private static Dictionary`2<string, Func`1<ISvgInstance>> elementsTypes;
    private static SvgElementCreator();
    private static Dictionary`2<string, Func`1<ISvgInstance>> CreateElementsDictinary();
    public static ISvgInstance CreateInstance(string key);
}
public class DevExpress.Data.Svg.SvgElementDataAgentBase : object {
    protected static NumberStyles DecimalStyles;
    protected static NumberStyles NumberStyles;
    private XmlElement element;
    public XmlElement Element { get; }
    public SvgElementDataAgentBase(XmlElement element);
    private static SvgElementDataAgentBase();
    public XmlElement get_Element();
}
public class DevExpress.Data.Svg.SvgElementDataExportAgent : SvgElementDataAgentBase {
    public SvgElementDataExportAgent(XmlElement element);
    private static string ColorToRGBHex(Color color, bool isPrintAlpha);
    private static double GetColorOpacityString(Color color);
    protected static string GetColorString(Color color);
    public virtual void SetColorValue(string key, Color value);
    public void SetColorOpacity(string key, Color value, IFormatProvider provider);
    public void SetValue(string key, string value);
    public void SetValue(string key, object value, IFormatProvider provider);
    public void SetContent(string value);
    public void SetXmlContent(string value);
}
public class DevExpress.Data.Svg.SvgElementDataImportAgent : SvgElementDataAgentBase {
    private Dictionary`2<string, SvgItem> defs;
    public SvgElementDataImportAgent(XmlElement element);
    public SvgElementDataImportAgent(XmlElement element, Dictionary`2<string, SvgItem> defs);
    private string RemovePxPostfix(string data);
    private string ProcessRgbSvgColorFormat(string color);
    public string GetString(string key);
    public int GetInt(string key, int defaultValue, IFormatProvider provider);
    public int GetInt(string key, IFormatProvider provider);
    public double GetDouble(string key, double defaultValue, IFormatProvider provider);
    public double GetDouble(string key, IFormatProvider provider);
    public bool TryGetColor(string key, Color& result);
    public T GetEnumValue(string key);
    public XmlNodeList GetElementsByTag(string name);
    public SvgItem GetSvgItemById(string id);
}
public class DevExpress.Data.Svg.SvgElementDataPaletteDependentExportAgent : SvgElementDataExportAgent {
    private ISvgPaletteProvider paletteProvider;
    public SvgElementDataPaletteDependentExportAgent(XmlElement element, ISvgPaletteProvider paletteProvider);
    public virtual void SetColorValue(string key, Color value);
}
public static class DevExpress.Data.Svg.SvgElementHelper : object {
    public static Func`2<SvgCommandBase, T> GetSvgCommandMatcher(Func`2<SvgCommandMove, T> move, Func`2<SvgCommandBase, T> line, Func`2<SvgCommandArc, T> arc, Func`2<SvgCommandShortCubicBezier, T> shortCubicBezier, Func`2<SvgCommandCubicBezier, T> cubicBezier, Func`2<SvgCommandShortQuadraticBezier, T> shortQuadraticBezier, Func`2<SvgCommandQuadraticBezier, T> quadraticBezier);
    public static String[] SplitContent(string content);
    public static Double[] GetDoubleFromContent(string content);
    private static bool IsLineToCommand(SvgCommandBase svgCommand);
}
[FormatElementAttribute("ellipse")]
public class DevExpress.Data.Svg.SvgEllipse : SvgSupportRectangle {
    private SvgEllipse DevExpress.Data.Svg.ISvgEllipseAdapter.Ellipse { get; }
    public SvgEllipse(double cx, double cy, double rx, double ry);
    private sealed virtual override SvgEllipse DevExpress.Data.Svg.ISvgEllipseAdapter.get_Ellipse();
    protected virtual bool FillFields(SvgElementDataImportAgent dataAgent);
    protected virtual void ExportFields(SvgElementDataExportAgent dataAgent);
    public virtual SvgRect GetBoundaryPoints();
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
public class DevExpress.Data.Svg.SvgExporter : object {
    private static string SvgFormatVersion;
    private static CultureInfo PointsExportCulture;
    private SvgSize size;
    private XmlDocument document;
    public SvgExporter(SvgSize size);
    private static SvgExporter();
    private XmlElement CreateSvgHead();
    private XmlElement AppendNewElementToParent(XmlNode parent, string name);
    private XmlElement CreateElement(string name);
    private void AddElementToParent(XmlNode parent, XmlElement element);
    private void Export(XmlNode elementsContainer, XmlNode definitionsContainer, IList`1<SvgItem> svgItems, IDefinitionKeysGenerator keysGenerator);
    private void Export(XmlNode definitionsContainer, IEnumerable`1<SvgDefinition> definitions, IDefinitionKeysGenerator keysGenerator);
    protected virtual SvgElementDataExportAgent CreateExportAgent(XmlElement xmlElement);
    public XmlDocument Export(IList`1<SvgItem> svgElements, string prefixDefinitions);
}
[ExtensionAttribute]
public static class DevExpress.Data.Svg.SvgExtensions : object {
    [ExtensionAttribute]
public static string FormatSvgValue(string value);
}
public enum DevExpress.Data.Svg.SvgFillRule : Enum {
    public int value__;
    public static SvgFillRule Default;
    public static SvgFillRule NonZero;
    public static SvgFillRule EvenOdd;
}
public abstract class DevExpress.Data.Svg.SvgGradientBrush : SvgBrush {
    private SvgGradientDefinition gradientDefionition;
    public SvgGradientDefinition GradientDefinition { get; }
    public SvgTransformCollection TransformCollection { get; public set; }
    public SvgGradientBrush(Color color1, Color color2);
    public SvgGradientBrush(Color color1, Color color2, SvgGradientUnits units);
    public SvgGradientDefinition get_GradientDefinition();
    public SvgTransformCollection get_TransformCollection();
    public void set_TransformCollection(SvgTransformCollection value);
    protected abstract virtual SvgGradientDefinition CreateDefinition();
    [IteratorStateMachineAttribute("DevExpress.Data.Svg.SvgGradientBrush/<ExportData>d__9")]
public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator, string colorKey, string opacityKey);
}
public class DevExpress.Data.Svg.SvgGradientDefinition : SvgDefinition {
    [CompilerGeneratedAttribute]
private SvgTransformCollection <TransformCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgGradientUnits <Units>k__BackingField;
    public SvgTransformCollection TransformCollection { get; public set; }
    public SvgGradientUnits Units { get; public set; }
    [CompilerGeneratedAttribute]
public SvgTransformCollection get_TransformCollection();
    [CompilerGeneratedAttribute]
public void set_TransformCollection(SvgTransformCollection value);
    [CompilerGeneratedAttribute]
public SvgGradientUnits get_Units();
    [CompilerGeneratedAttribute]
public void set_Units(SvgGradientUnits value);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
}
public enum DevExpress.Data.Svg.SvgGradientUnits : Enum {
    public int value__;
    public static SvgGradientUnits Default;
    public static SvgGradientUnits ObjectBoundingBox;
    public static SvgGradientUnits UserSpaceOnUse;
}
[FormatElementAttribute("g")]
public class DevExpress.Data.Svg.SvgGroup : SvgElement {
    public virtual SvgRect GetBoundaryPoints();
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
public class DevExpress.Data.Svg.SvgHatchBrush : SvgBrush {
    private SvgPatternDefinition patternDefinition;
    public SvgTransformCollection TransformCollection { get; public set; }
    public SvgHatchBrush(Color color1, Color color2);
    public SvgHatchBrush(Color color1, Color color2, SvgGradientUnits units);
    public SvgTransformCollection get_TransformCollection();
    public void set_TransformCollection(SvgTransformCollection value);
    [IteratorStateMachineAttribute("DevExpress.Data.Svg.SvgHatchBrush/<ExportData>d__6")]
public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator, string colorKey, string opacityKey);
}
[FormatElementAttribute("image")]
public class DevExpress.Data.Svg.SvgImageItem : SvgSupportRectangle {
    private string imageFormat;
    private Byte[] imageData;
    public string ImageFormat { get; }
    public Byte[] ImageData { get; }
    public SvgImageItem(Image image, double x, double y, double width, double height);
    public SvgImageItem(Byte[] imageData, string imageFormat, double x, double y, double width, double height);
    public string get_ImageFormat();
    public Byte[] get_ImageData();
    private string GetImageMimeType(Image image);
    protected virtual void ExportFields(SvgElementDataExportAgent dataAgent);
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
public class DevExpress.Data.Svg.SvgImporter : object {
    private Dictionary`2<string, SvgItem> defs;
    private IList`1<SvgItem> svgItems;
    private SvgRect bounds;
    private SvgRect viewBox;
    private SvgSize size;
    private XmlNode svgNode;
    [CompilerGeneratedAttribute]
private bool <UseGrouping>k__BackingField;
    public IList`1<SvgItem> SvgItems { get; }
    public SvgRect Bounds { get; }
    public SvgRect ViewBox { get; }
    public SvgSize Size { get; }
    public XmlNode SvgNode { get; }
    public bool UseGrouping { get; public set; }
    public IList`1<SvgItem> get_SvgItems();
    public SvgRect get_Bounds();
    public SvgRect get_ViewBox();
    public SvgSize get_Size();
    public XmlNode get_SvgNode();
    [CompilerGeneratedAttribute]
public bool get_UseGrouping();
    [CompilerGeneratedAttribute]
public void set_UseGrouping(bool value);
    private void UnionItemsBounds(SvgElement svgElement);
    private void ProcessingDefs(XmlNode node, Dictionary`2<string, SvgItem> defs);
    private void ProcessingElements(XmlNode node, IList`1<SvgItem> elementsContainer, bool unionItemsBounds);
    private void ProcessingRootElement(XmlNode node);
    internal void StartProcessing(XmlNode xmlNode);
    public bool IsSvgNode(XmlNode xmlNode);
    public bool SvgProcessing(XmlNode xmlNode);
    public bool Import(Stream stream);
}
public abstract class DevExpress.Data.Svg.SvgItem : object {
    private List`1<SvgItem> childs;
    public IList`1<SvgItem> Childs { get; }
    public bool IgnoreChildren { get; }
    public IList`1<SvgItem> get_Childs();
    public virtual bool get_IgnoreChildren();
    public abstract virtual bool FillData(SvgElementDataImportAgent dataAgent);
    public abstract virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
}
public class DevExpress.Data.Svg.SvgKeysGenerator : object {
    private string prefixDefinitions;
    private int keysCounter;
    public SvgKeysGenerator(string prefixDefinitions);
    private sealed virtual override string DevExpress.Data.Svg.IDefinitionKeysGenerator.GenerateKey();
}
[FormatElementAttribute("line")]
public class DevExpress.Data.Svg.SvgLine : SvgVisualElement {
    private SvgPoint point1;
    private SvgPoint point2;
    private SvgMarkerDefinition markerStart;
    private SvgMarkerDefinition markerEnd;
    public SvgPoint Point1 { get; }
    public SvgPoint Point2 { get; }
    public SvgMarkerDefinition MarkerStart { get; }
    public SvgMarkerDefinition MarkerEnd { get; }
    public SvgLine(double x1, double y1, double x2, double y2);
    public SvgPoint get_Point1();
    public SvgPoint get_Point2();
    public SvgMarkerDefinition get_MarkerStart();
    public SvgMarkerDefinition get_MarkerEnd();
    protected virtual bool FillFields(SvgElementDataImportAgent dataAgent);
    protected virtual void ExportFields(SvgElementDataExportAgent dataAgent);
    public virtual SvgRect GetBoundaryPoints();
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
public class DevExpress.Data.Svg.SvgLinearGradientBrush : SvgGradientBrush {
    public SvgLinearGradientBrush(Color color1, Color color2);
    public SvgLinearGradientBrush(Color color1, Color color2, SvgGradientUnits units);
    protected virtual SvgGradientDefinition CreateDefinition();
}
[FormatElementAttribute("linearGradient")]
public class DevExpress.Data.Svg.SvgLinearGradientDefinition : SvgGradientDefinition {
    [CompilerGeneratedAttribute]
private SvgPoint <Point1>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgPoint <Point2>k__BackingField;
    public SvgPoint Point1 { get; public set; }
    public SvgPoint Point2 { get; public set; }
    [CompilerGeneratedAttribute]
public SvgPoint get_Point1();
    [CompilerGeneratedAttribute]
public void set_Point1(SvgPoint value);
    [CompilerGeneratedAttribute]
public SvgPoint get_Point2();
    [CompilerGeneratedAttribute]
public void set_Point2(SvgPoint value);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
}
public enum DevExpress.Data.Svg.SvgLineCap : Enum {
    public int value__;
    public static SvgLineCap Default;
    public static SvgLineCap Butt;
    public static SvgLineCap Round;
    public static SvgLineCap Square;
}
public enum DevExpress.Data.Svg.SvgLineJoin : Enum {
    public int value__;
    public static SvgLineJoin Default;
    public static SvgLineJoin Miter;
    public static SvgLineJoin Round;
    public static SvgLineJoin Bevel;
}
[FormatElementAttribute("marker")]
public class DevExpress.Data.Svg.SvgMarkerDefinition : SvgDefinition {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RefX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RefY>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgRect <ViewBox>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    public double RefX { get; public set; }
    public double RefY { get; public set; }
    public SvgRect ViewBox { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public double get_RefX();
    [CompilerGeneratedAttribute]
public void set_RefX(double value);
    [CompilerGeneratedAttribute]
public double get_RefY();
    [CompilerGeneratedAttribute]
public void set_RefY(double value);
    [CompilerGeneratedAttribute]
public SvgRect get_ViewBox();
    [CompilerGeneratedAttribute]
public void set_ViewBox(SvgRect value);
    public virtual bool FillData(SvgElementDataImportAgent dataAgent);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
}
[FormatElementAttribute("matrix")]
public class DevExpress.Data.Svg.SvgMatrix : SvgTransformBase {
    private static int ElementsCount;
    private IDxMatrix matrix;
    public SvgMatrix(double m11, double m12, double m21, double m22, double x, double y);
    protected internal void SetTransformMatrix(IDxMatrix matrix);
    public virtual IDxMatrix GetTransformMatrix();
    public virtual void FillTransform(String[] values);
    public virtual string GetTransform(IFormatProvider provider);
}
public static class DevExpress.Data.Svg.SvgNumberParser : object {
    private static NumberStyles NumberStyles;
    public static IFormatProvider Culture;
    private static SvgNumberParser();
    public static double ParseDouble(string value);
    public static double ParseDouble(string value, IFormatProvider provider);
    public static float ParseFloat(string value);
    public static float ParseFloat(string value, IFormatProvider provider);
}
public class DevExpress.Data.Svg.SvgPaletteDependentExporter : SvgExporter {
    private ISvgPaletteProvider paletteProvider;
    public SvgPaletteDependentExporter(SvgSize size, ISvgPaletteProvider paletteProvider);
    protected virtual SvgElementDataExportAgent CreateExportAgent(XmlElement xmlElement);
}
[FormatElementAttribute("path")]
public class DevExpress.Data.Svg.SvgPath : SvgVisualElement {
    private SvgCommandCollection commandCollection;
    [CompilerGeneratedAttribute]
private SvgFillRule <FillRule>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgFillRule <ClipRule>k__BackingField;
    private bool IsFilledCorrectly { get; }
    public SvgCommandCollection CommandCollection { get; }
    public SvgFillRule FillRule { get; public set; }
    public SvgFillRule ClipRule { get; public set; }
    private bool get_IsFilledCorrectly();
    public SvgCommandCollection get_CommandCollection();
    [CompilerGeneratedAttribute]
public SvgFillRule get_FillRule();
    [CompilerGeneratedAttribute]
public void set_FillRule(SvgFillRule value);
    [CompilerGeneratedAttribute]
public SvgFillRule get_ClipRule();
    [CompilerGeneratedAttribute]
public void set_ClipRule(SvgFillRule value);
    protected virtual bool FillFields(SvgElementDataImportAgent dataAgent);
    protected virtual void ExportFields(SvgElementDataExportAgent dataAgent);
    public virtual SvgRect GetBoundaryPoints();
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
[FormatElementAttribute("pattern")]
public class DevExpress.Data.Svg.SvgPatternDefinition : SvgDefinition {
    [CompilerGeneratedAttribute]
private SvgTransformCollection <TransformCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgGradientUnits <Units>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgSize <Size>k__BackingField;
    public SvgTransformCollection TransformCollection { get; public set; }
    public SvgGradientUnits Units { get; public set; }
    public SvgSize Size { get; public set; }
    [CompilerGeneratedAttribute]
public SvgTransformCollection get_TransformCollection();
    [CompilerGeneratedAttribute]
public void set_TransformCollection(SvgTransformCollection value);
    [CompilerGeneratedAttribute]
public SvgGradientUnits get_Units();
    [CompilerGeneratedAttribute]
public void set_Units(SvgGradientUnits value);
    [CompilerGeneratedAttribute]
public SvgSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(SvgSize value);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
}
public class DevExpress.Data.Svg.SvgPoint : ValueType {
    private static int MaxFloatPrecision;
    private static string FloatStringFormat;
    public static SvgPoint Empty;
    public static SvgPoint Invalid;
    private double x;
    private double y;
    public bool IsEmpty { get; }
    public bool IsValid { get; }
    public double X { get; }
    public double Y { get; }
    public SvgPoint(double x, double y);
    private static SvgPoint();
    public static bool op_Equality(SvgPoint Point1, SvgPoint Point2);
    public static bool op_Inequality(SvgPoint Point1, SvgPoint Point2);
    public static SvgPoint op_Addition(SvgPoint Point1, SvgPoint Point2);
    public static SvgPoint op_Subtraction(SvgPoint Point1, SvgPoint Point2);
    public static bool Equals(SvgPoint Point1, SvgPoint Point2);
    public bool get_IsEmpty();
    public bool get_IsValid();
    public double get_X();
    public double get_Y();
    private static string GetSeparatorByProvider(IFormatProvider provider);
    public sealed virtual bool Equals(SvgPoint otherPoint);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
    public string ToString(IFormatProvider provider, string pointsSeparator);
    public string ToStringX();
    public string ToStringY();
    public string ToStringX(IFormatProvider provider);
    public string ToStringY(IFormatProvider provider);
    public void ParseX(string point);
    public void ParseY(string point);
    public void ParseX(string point, IFormatProvider provider);
    public void ParseY(string point, IFormatProvider provider);
    public void Offset(double offsetX, double offsetY);
    public void OffsetX(double offset);
    public void OffsetY(double offset);
    public static SvgPoint Parse(string pointString, IFormatProvider provider);
    public static SvgPoint Parse(string pointString, IFormatProvider provider, string pointsSeparator);
    public static SvgPoint Parse(string pointString, IFormatProvider provider, String[] separatorsList);
    public static SvgPoint Parse(string value1, string value2);
    public static SvgPoint Parse(string value1, string value2, IFormatProvider provider);
}
public class DevExpress.Data.Svg.SvgPointCollection : List`1<SvgPoint> {
    private static RegexOptions RegOptions;
    public IList`1<SvgPoint> Points { get; }
    public SvgPointCollection(int capacity);
    public SvgPointCollection(IEnumerable`1<SvgPoint> svgPoints);
    private static SvgPointCollection();
    public IList`1<SvgPoint> get_Points();
    internal static string NormalizeSourceString(string sourceString);
    public static SvgPointCollection Parse(string pointsString);
    public static SvgPointCollection Parse(String[] pointsList);
    public void Export(StringBuilder stringBuilder);
    public virtual string ToString();
    public SvgRect GetBoundaryPoints();
}
public abstract class DevExpress.Data.Svg.SvgPointContainer : SvgVisualElement {
    private SvgPointCollection pointCollection;
    public SvgPointCollection PointCollection { get; }
    public SvgPointCollection get_PointCollection();
    protected virtual bool FillFields(SvgElementDataImportAgent dataAgent);
    protected virtual void ExportFields(SvgElementDataExportAgent dataAgent);
    public virtual SvgRect GetBoundaryPoints();
}
[FormatElementAttribute("polygon")]
public class DevExpress.Data.Svg.SvgPolygon : SvgPointContainer {
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
[FormatElementAttribute("polyline")]
public class DevExpress.Data.Svg.SvgPolyline : SvgPointContainer {
    private SvgMarkerDefinition markerStart;
    private SvgMarkerDefinition markerEnd;
    public SvgMarkerDefinition MarkerStart { get; }
    public SvgMarkerDefinition MarkerEnd { get; }
    public SvgMarkerDefinition get_MarkerStart();
    public SvgMarkerDefinition get_MarkerEnd();
    protected virtual bool FillFields(SvgElementDataImportAgent dataAgent);
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
public class DevExpress.Data.Svg.SvgRadialGradientBrush : SvgGradientBrush {
    public SvgRadialGradientBrush(Color color1, Color color2);
    public SvgRadialGradientBrush(Color color1, Color color2, SvgGradientUnits units);
    public SvgRadialGradientBrush(Color color1, Color color2, SvgGradientUnits units, SvgPoint location, double radius);
    protected virtual SvgGradientDefinition CreateDefinition();
}
[FormatElementAttribute("radialGradient")]
public class DevExpress.Data.Svg.SvgRadialGradientDefinition : SvgGradientDefinition {
    [CompilerGeneratedAttribute]
private SvgPoint <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    public SvgPoint Location { get; public set; }
    public double Radius { get; public set; }
    [CompilerGeneratedAttribute]
public SvgPoint get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(SvgPoint value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
}
public class DevExpress.Data.Svg.SvgRect : ValueType {
    public static SvgRect Empty;
    private double x1;
    private double y1;
    private double x2;
    private double y2;
    public double X1 { get; }
    public double X2 { get; }
    public double Y1 { get; }
    public double Y2 { get; }
    public double Width { get; }
    public double Height { get; }
    public bool IsEmpty { get; }
    public SvgRect(double x1, double y1, double x2, double y2);
    private static SvgRect();
    public double get_X1();
    public double get_X2();
    public double get_Y1();
    public double get_Y2();
    public double get_Width();
    public double get_Height();
    public bool get_IsEmpty();
    public static SvgRect Union(SvgRect bounds, double x, double y);
    public static SvgRect Union(SvgRect rect1, SvgRect rect2);
    public static SvgRect FromString(string content);
}
[FormatElementAttribute("rect")]
public class DevExpress.Data.Svg.SvgRectangle : SvgSupportRectangle {
    public SvgRectangle(double x, double y, double width, double height);
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
    public SvgPath ToPath();
}
[FormatElementAttribute("rotate")]
public class DevExpress.Data.Svg.SvgRotate : SvgTransform {
    [CompilerGeneratedAttribute]
private double <Angle>k__BackingField;
    public double Angle { get; internal set; }
    public bool IsIdentity { get; }
    public SvgRotate(double angle);
    public SvgRotate(double angle, double x, double y);
    [CompilerGeneratedAttribute]
public double get_Angle();
    [CompilerGeneratedAttribute]
internal void set_Angle(double value);
    public virtual bool get_IsIdentity();
    public virtual IDxMatrix GetTransformMatrix();
    public virtual void FillTransform(String[] values);
    public virtual string GetTransform(IFormatProvider provider);
}
[FormatElementAttribute("scale")]
public class DevExpress.Data.Svg.SvgScale : SvgTransform {
    public bool IsIdentity { get; }
    public SvgScale(double x, double y);
    public virtual bool get_IsIdentity();
    public virtual IDxMatrix GetTransformMatrix();
    public virtual string GetTransform(IFormatProvider provider);
}
public enum DevExpress.Data.Svg.SvgShapeRendering : Enum {
    public int value__;
    public static SvgShapeRendering Auto;
    public static SvgShapeRendering OptimizeSpeed;
    public static SvgShapeRendering CrispEdges;
    public static SvgShapeRendering GeometricPrecision;
    public static SvgShapeRendering Inherit;
}
public class DevExpress.Data.Svg.SvgShapeVisual : SvgItem {
    [CompilerGeneratedAttribute]
private SvgBrush <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgBrush <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgLineCap <StrokeCap>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgLineJoin <StrokeJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgShapeRendering <ShapeRenderingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <DashArray>k__BackingField;
    public SvgBrush Fill { get; public set; }
    public SvgBrush Stroke { get; public set; }
    public double StrokeWidth { get; public set; }
    public SvgLineCap StrokeCap { get; public set; }
    public SvgLineJoin StrokeJoin { get; public set; }
    public SvgShapeRendering ShapeRenderingMode { get; public set; }
    public Single[] DashArray { get; public set; }
    [CompilerGeneratedAttribute]
public SvgBrush get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(SvgBrush value);
    [CompilerGeneratedAttribute]
public SvgBrush get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(SvgBrush value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public SvgLineCap get_StrokeCap();
    [CompilerGeneratedAttribute]
public void set_StrokeCap(SvgLineCap value);
    [CompilerGeneratedAttribute]
public SvgLineJoin get_StrokeJoin();
    [CompilerGeneratedAttribute]
public void set_StrokeJoin(SvgLineJoin value);
    [CompilerGeneratedAttribute]
public SvgShapeRendering get_ShapeRenderingMode();
    [CompilerGeneratedAttribute]
public void set_ShapeRenderingMode(SvgShapeRendering value);
    [CompilerGeneratedAttribute]
public Single[] get_DashArray();
    [CompilerGeneratedAttribute]
public void set_DashArray(Single[] value);
    private SvgBrush CreateFillBrush(SvgElementDataImportAgent dataAgent, double opacity);
    private SvgBrush CreateStrokeBrush(SvgElementDataImportAgent dataAgent, double opacity);
    public virtual bool FillData(SvgElementDataImportAgent dataAgent);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
}
[FormatElementAttribute("shear")]
public class DevExpress.Data.Svg.SvgShear : SvgTransform {
    public SvgShear(double x, double y);
    public virtual IDxMatrix GetTransformMatrix();
    public virtual string GetTransform(IFormatProvider provider);
}
public class DevExpress.Data.Svg.SvgSize : ValueType {
    public static SvgSize Empty;
    public static SvgSize Invalid;
    private double width;
    private double height;
    public bool IsEmpty { get; }
    public bool IsValid { get; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public SvgSize(double width, double height);
    private static SvgSize();
    public bool get_IsEmpty();
    public bool get_IsValid();
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
}
public abstract class DevExpress.Data.Svg.SvgSkew : SvgTransform {
    public bool IsIdentity { get; }
    public SvgSkew(double x, double y);
    public virtual bool get_IsIdentity();
    public virtual IDxMatrix GetTransformMatrix();
}
[FormatElementAttribute("skewX")]
public class DevExpress.Data.Svg.SvgSkewX : SvgSkew {
    public SvgSkewX(double x);
    public virtual void FillTransform(String[] values);
    public virtual string GetTransform(IFormatProvider provider);
}
[FormatElementAttribute("skewY")]
public class DevExpress.Data.Svg.SvgSkewY : SvgSkew {
    public SvgSkewY(double y);
    public virtual void FillTransform(String[] values);
    public virtual string GetTransform(IFormatProvider provider);
}
public class DevExpress.Data.Svg.SvgSolidBrush : SvgBrush {
    private Color color;
    public Color Color { get; }
    private SvgSolidBrush(Color color, bool isDefault);
    public SvgSolidBrush(Color color);
    public static SvgSolidBrush CreateDefault(Color color);
    public Color get_Color();
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator, string colorKey, string opacityKey);
}
[FormatElementAttribute("stop")]
public class DevExpress.Data.Svg.SvgStop : SvgItem {
    private int offset;
    private Color color;
    public int Offset { get; }
    public Color Color { get; }
    public SvgStop(int offset, Color color);
    public int get_Offset();
    public Color get_Color();
    public virtual bool FillData(SvgElementDataImportAgent dataAgent);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
}
public abstract class DevExpress.Data.Svg.SvgSupportRectangle : SvgVisualElement {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgPoint <Location>k__BackingField;
    public double Width { get; protected set; }
    public double Height { get; protected set; }
    public SvgPoint Location { get; protected set; }
    public SvgSupportRectangle(double x, double y, double width, double height);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
protected void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
protected void set_Height(double value);
    [CompilerGeneratedAttribute]
public SvgPoint get_Location();
    [CompilerGeneratedAttribute]
protected void set_Location(SvgPoint value);
    protected virtual bool FillFields(SvgElementDataImportAgent dataAgent);
    protected virtual void ExportFields(SvgElementDataExportAgent dataAgent);
    public virtual SvgRect GetBoundaryPoints();
}
[FormatElementAttribute("text")]
public class DevExpress.Data.Svg.SvgText : SvgVisualElement {
    private SvgPoint location;
    private SvgSize offset;
    private double fontSize;
    private string fontFamily;
    private string text;
    private SvgRect bounds;
    private SvgTextAnchor textAnchor;
    public SvgPoint Location { get; }
    public SvgSize Offset { get; }
    public double FontSize { get; }
    public string FontFamily { get; }
    public string Text { get; }
    public SvgRect Bounds { get; }
    public SvgTextAnchor TextAnchor { get; }
    public SvgText(SvgPoint location, SvgSize offset, SvgTextAnchor textAnchor, string text, SvgRect bounds);
    public SvgText(SvgPoint location, SvgSize offset, SvgTextAnchor textAnchor, string text, string fontFamily, double fontSize, SvgRect bounds);
    public SvgPoint get_Location();
    public SvgSize get_Offset();
    public double get_FontSize();
    public string get_FontFamily();
    public string get_Text();
    public SvgRect get_Bounds();
    public SvgTextAnchor get_TextAnchor();
    protected virtual bool FillFields(SvgElementDataImportAgent dataAgent);
    protected virtual void ExportFields(SvgElementDataExportAgent dataAgent);
    public virtual SvgRect GetBoundaryPoints();
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
public enum DevExpress.Data.Svg.SvgTextAnchor : Enum {
    public int value__;
    public static SvgTextAnchor Default;
    public static SvgTextAnchor Start;
    public static SvgTextAnchor Middle;
    public static SvgTextAnchor End;
}
[FormatElementAttribute("tspan")]
public class DevExpress.Data.Svg.SvgTextSpan : SvgText {
    public SvgTextSpan(SvgPoint location, SvgSize offset, SvgTextAnchor textAnchor, string text, SvgRect bounds);
}
public static class DevExpress.Data.Svg.SvgTokens : object {
    public static string SvgNamespaceName;
    public static string SvgNamespaceAttribute;
    public static string Svg;
    public static string Version;
    public static string Width;
    public static string Height;
    public static string ViewBox;
    public static string Transform;
    public static string GradientTransform;
    public static string Scale;
    public static string Translate;
    public static string Rotate;
    public static string Matrix;
    public static string SkewX;
    public static string SkewY;
    public static string Shear;
    public static string Defs;
    public static string Use;
    public static string ClipPath;
    public static string ClipPathAttribute;
    public static string ClipRule;
    public static string LinearGradient;
    public static string RadialGradient;
    public static string Stop;
    public static string StopColor;
    public static string StopOpacity;
    public static string Offset;
    public static string Url;
    public static string Pattern;
    public static string PatternUnits;
    public static string PatternTransform;
    public static string Group;
    public static string Circle;
    public static string Ellipse;
    public static string Rectangle;
    public static string Path;
    public static string Polygon;
    public static string Polyline;
    public static string Line;
    public static string Text;
    public static string TextSpan;
    public static string Image;
    public static string Marker;
    public static string FontFamily;
    public static string FontSize;
    public static string Points;
    public static string Commands;
    public static string Href;
    public static string Style;
    public static string Opacity;
    public static string Fill;
    public static string FillOpacity;
    public static string FillRule;
    public static string Stroke;
    public static string StrokeOpacity;
    public static string StrokeWidth;
    public static string StrokeLineCap;
    public static string StrokeLineJoin;
    public static string StrokeDashArray;
    public static string Everodd;
    public static string None;
    public static string TextAnchor;
    public static string ShapeRendering;
    public static string GradientUnits;
    public static string X;
    public static string Y;
    public static string X1;
    public static string Y1;
    public static string X2;
    public static string Y2;
    public static string Cx;
    public static string Cy;
    public static string Rx;
    public static string Ry;
    public static string R;
    public static string Dx;
    public static string Dy;
    public static string Id;
    public static string Title;
    public static string MarkerStart;
    public static string MarkerEnd;
    public static string MarkerWidth;
    public static string MarkerHeight;
    public static string MarkerUnits;
    public static string Orient;
    public static string RefX;
    public static string RefY;
}
public abstract class DevExpress.Data.Svg.SvgTransform : SvgTransformBase {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; internal set; }
    public double Y { get; internal set; }
    public bool IsIdentity { get; }
    public SvgTransform(double x, double y);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
internal void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
internal void set_Y(double value);
    public virtual bool get_IsIdentity();
    public virtual void FillTransform(String[] values);
    public virtual double GetDefaultY(double x);
}
public abstract class DevExpress.Data.Svg.SvgTransformBase : object {
    public IDxMatrix Matrix { get; }
    public bool IsIdentity { get; }
    public bool IgnoreChildren { get; }
    public IDxMatrix get_Matrix();
    public virtual bool get_IsIdentity();
    public virtual bool get_IgnoreChildren();
    public abstract virtual IDxMatrix GetTransformMatrix();
    public abstract virtual string GetTransform(IFormatProvider provider);
    public abstract virtual void FillTransform(String[] values);
    public void FillTransform(string content);
    public string GetTransform();
}
public class DevExpress.Data.Svg.SvgTransformCollection : List`1<SvgTransformBase> {
    public SvgTransformCollection(IList`1<SvgTransformBase> svgTransforms);
    [IteratorStateMachineAttribute("DevExpress.Data.Svg.SvgTransformCollection/<SplitTransforms>d__2")]
private static IEnumerable`1<string> SplitTransforms(string transforms);
    private static SvgTransformCollection ParseTransforms(IEnumerable`1<string> transformList);
    public static SvgTransformCollection Parse(string transformString);
    public IDxMatrix GetMatrix();
    public SvgPoint Transform(SvgPoint point);
    public virtual string ToString();
}
[FormatElementAttribute("translate")]
public class DevExpress.Data.Svg.SvgTranslate : SvgTransform {
    public SvgTranslate(double x, double y);
    public virtual IDxMatrix GetTransformMatrix();
    public virtual double GetDefaultY(double x);
    public virtual string GetTransform(IFormatProvider provider);
}
public abstract class DevExpress.Data.Svg.SvgVisualElement : SvgElement {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    protected abstract virtual bool FillFields(SvgElementDataImportAgent dataAgent);
    protected abstract virtual void ExportFields(SvgElementDataExportAgent dataAgent);
    private void FillTitle(SvgElementDataImportAgent dataAgent);
    public virtual bool FillData(SvgElementDataImportAgent dataAgent);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
}
[FormatElementAttribute("g")]
public class DevExpress.Data.Svg.SvgXmlContentItem : SvgElement {
    private string content;
    private SvgPoint location;
    private SvgSize size;
    public SvgXmlContentItem(string content, SvgPoint location, SvgSize size);
    public virtual IEnumerable`1<SvgDefinition> ExportData(SvgElementDataExportAgent dataAgent, IDefinitionKeysGenerator keysGenerator);
    public virtual SvgRect GetBoundaryPoints();
    public virtual T CreatePlatformItem(ISvgElementFactory`1<T> factory);
}
public class DevExpress.Data.ThreadSafeGetDisplayTextFuncInfo : object {
    public Delegate DisplayTextFunc;
    public Type DisplayTextFuncArgumentType;
    public bool IsThreadSafe;
    public Func`2<Object[], IDisposable> BulkDisplayTextOperationScopeCreationFunc;
    private ThreadSafeGetDisplayTextFuncInfo(Delegate _DisplayTextFunc, Type _DisplayTextFuncArgumentType, bool _IsThreadSafe, Func`2<Object[], IDisposable> _BulkDisplayTextOperationScopeCreationFunc);
    protected static ThreadSafeGetDisplayTextFuncInfo Create(Delegate _DisplayTextFunc, Type _DisplayTextFuncArgumentType, bool _IsThreadSafe, Func`2<Object[], IDisposable> _BulkDisplayTextOperationScopeCreationFunc);
    public static ThreadSafeGetDisplayTextFuncInfo CreateFromThreadSafeDisplayTextFunc(Func`2<T, string> _DisplayTextFunc);
    public static ThreadSafeGetDisplayTextFuncInfo CreateFromUiThreadDisplayTextFunc(Func`2<T, string> _DisplayTextFunc, Func`2<Object[], IDisposable> _BulkDisplayTextOperationScopeCreationFunc);
}
public class DevExpress.Data.TotalSummaryItemCollection : SummaryItemCollection {
    private bool isDirty;
    public bool IsDirty { get; public set; }
    public TotalSummaryItemCollection(DataControllerBase controller, CollectionChangeEventHandler collectionChanged);
    public bool get_IsDirty();
    public void set_IsDirty(bool value);
    public void SetDirty();
    protected internal virtual void RequestSummaryValue();
    public int IndexOf(SummaryItem item);
    public bool RemoveItems(ICollection items);
}
public enum DevExpress.Data.TreeList.DataColumnFilterMode : Enum {
    public int value__;
    public static DataColumnFilterMode DisplayText;
    public static DataColumnFilterMode Value;
    public static DataColumnFilterMode SpecialColumn;
}
internal class DevExpress.Data.TreeList.DataHelpers.NodesIdInfo : object {
    private int startId;
    private int length;
    private NodesIdInfo next;
    public int StartId { get; }
    public int EndId { get; }
    public int Length { get; public set; }
    public NodesIdInfo Next { get; public set; }
    public NodesIdInfo(int startId, NodesIdInfo next);
    public bool Contains(int id);
    private bool InInterval(int value, int min, int max);
    public void Add(int id);
    public NodesIdInfo FindNearestInfo(int id);
    public int get_StartId();
    public int get_EndId();
    public int get_Length();
    public void set_Length(int value);
    public NodesIdInfo get_Next();
    public void set_Next(NodesIdInfo value);
}
internal class DevExpress.Data.TreeList.DataHelpers.NodesIdInfoManager : object {
    private NodesIdInfo head;
    public NodesIdInfo Head { get; }
    public void Add(int id);
    private void CheckUnion(NodesIdInfo prev, NodesIdInfo next);
    private void Union(NodesIdInfo prev, NodesIdInfo next);
    public void BuildReversibleList();
    public int GetSumLength(int id);
    public NodesIdInfo get_Head();
}
public abstract class DevExpress.Data.TreeList.DataHelpers.TreeListBoundDataHelper : TreeListDataHelperBase {
    [CompilerGeneratedAttribute]
private IList <ListSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindingList <BindingList>k__BackingField;
    public Type ItemType { get; }
    public bool IsReady { get; }
    public bool IsLoaded { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public IList ListSource { get; private set; }
    protected ITypedList TypedList { get; }
    protected IBindingList BindingList { get; protected set; }
    protected internal bool SupportNotifications { get; }
    public TreeListBoundDataHelper(TreeListDataControllerBase controller, object dataSource);
    public virtual Type get_ItemType();
    protected virtual Type GetItemType(IList list);
    public virtual bool get_IsReady();
    public virtual bool get_IsLoaded();
    public virtual bool get_AllowEdit();
    public virtual bool get_AllowRemove();
    [CompilerGeneratedAttribute]
public IList get_ListSource();
    [CompilerGeneratedAttribute]
private void set_ListSource(IList value);
    protected ITypedList get_TypedList();
    [CompilerGeneratedAttribute]
protected virtual IBindingList get_BindingList();
    [CompilerGeneratedAttribute]
protected virtual void set_BindingList(IBindingList value);
    protected internal virtual bool get_SupportNotifications();
    protected virtual bool UseFirstRowTypeWhenPopulatingColumns(Type itemType);
    protected virtual bool IsValidColumnName(string fieldName);
    public virtual void PopulateColumns();
    protected virtual void PatchColumnCollection(PropertyDescriptorCollection properties);
    protected virtual bool IsColumnVisible(DataColumnInfo column);
    protected virtual bool IsServiceColumnName(string fieldName);
    protected virtual PropertyDescriptor GetActualComplexPropertyDescriptor(ComplexColumnInfo info);
    protected virtual PropertyDescriptor GetActualPropertyDescriptor(PropertyDescriptor descriptor);
    protected virtual PropertyDescriptorCollection GetPropertyDescriptorCollection();
    protected virtual PropertyDescriptorCollection GetExpandoObjectProperties(object item);
    protected object GetFirstItem();
    protected Type GetListItemPropertyType(IList list);
    public virtual void LoadData();
    public virtual void Dispose();
    public virtual TreeListNodeBase AddNewNode(TreeListNodeBase parentNode);
    public virtual bool AllowNew(TreeListNodeBase parentNode);
    protected virtual void InitNewNodeId(TreeListNodeBase node);
    protected virtual IList GetListSource(TreeListNodeBase node);
    protected internal virtual void CancelNewNode(TreeListNodeBase node);
    protected internal virtual void EndNewNode(TreeListNodeBase node);
    private ICancelAddNew GetCancelAddNewObject(TreeListNodeBase node);
    public virtual IEnumerable`1<IBindingList> GetBindingLists();
}
public abstract class DevExpress.Data.TreeList.DataHelpers.TreeListDataHelperBase : object {
    private int loading;
    [CompilerGeneratedAttribute]
private TreeListDataControllerBase <Controller>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLockedDeletingInProgress>k__BackingField;
    protected internal int NewNodeId;
    [CompilerGeneratedAttribute]
private bool <AddingNewNode>k__BackingField;
    public Type ItemType { get; }
    public bool IsReady { get; }
    public bool IsUnboundMode { get; }
    protected TreeListDataControllerBase Controller { get; private set; }
    protected IDataProvider DataProvider { get; }
    protected DataColumnInfoCollection Columns { get; }
    public bool IsDeletingChildrenInProgress { get; }
    protected internal bool IsLockedDeletingInProgress { get; protected internal set; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool IsLoaded { get; }
    public bool IsLoading { get; }
    protected internal bool SupportNotifications { get; }
    protected internal bool AddingNewNode { get; protected internal set; }
    public TreeListDataHelperBase(TreeListDataControllerBase controller);
    public abstract virtual Type get_ItemType();
    public virtual bool get_IsReady();
    public virtual bool get_IsUnboundMode();
    [CompilerGeneratedAttribute]
protected TreeListDataControllerBase get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(TreeListDataControllerBase value);
    protected IDataProvider get_DataProvider();
    protected DataColumnInfoCollection get_Columns();
    public virtual bool get_IsDeletingChildrenInProgress();
    [CompilerGeneratedAttribute]
protected internal bool get_IsLockedDeletingInProgress();
    [CompilerGeneratedAttribute]
protected internal void set_IsLockedDeletingInProgress(bool value);
    protected virtual bool IsColumnVisible(DataColumnInfo column);
    protected virtual bool CanPopulate(PropertyDescriptor descriptor);
    protected virtual void PopulateColumn(PropertyDescriptor descriptor);
    protected virtual DataColumnInfo CreateDataColumn(PropertyDescriptor descriptor);
    public virtual object GetValue(TreeListNodeBase node, string fieldName);
    public virtual object GetValue(TreeListNodeBase node, DataColumnInfo columnInfo);
    public virtual object GetValue(object item, string fieldName);
    public virtual TreeListNodeBase FindNode(object keyCollection, int listIndex);
    protected internal object GetValue(TreeListNodeBase node, PropertyDescriptor descriptor);
    protected internal virtual bool IsServicePropertyDescriptor(PropertyDescriptor descriptor);
    public virtual void SetValue(TreeListNodeBase node, string fieldName, object value);
    public virtual void SetValue(TreeListNodeBase node, DataColumnInfo columnInfo, object value);
    protected void SetValue(TreeListNodeBase node, PropertyDescriptor descriptor, object value);
    public void SetValue(object item, string fieldName, object value);
    public virtual void Dispose();
    protected void RemoveTreeListNode(TreeListNodeBase node);
    protected int GetRootParentIndex(TreeListNodeBase node);
    protected internal virtual void UpdateNodeId(TreeListNodeBase node);
    public virtual void RecalcNodeIdsIfNeeded();
    protected virtual void CalcNodeIds();
    public virtual void DeleteNode(TreeListNodeBase node, bool deleteChildren, bool modifySource);
    public virtual Action DeleteNodeWithChildrenAndSource(TreeListNodeBase node, bool allowRollback);
    public abstract virtual void PopulateColumns();
    public abstract virtual bool get_AllowEdit();
    public abstract virtual bool get_AllowRemove();
    public abstract virtual bool get_IsLoaded();
    public bool get_IsLoading();
    public abstract virtual void LoadData();
    protected virtual void BeginLoad();
    protected virtual void EndLoad();
    protected virtual TreeListUnboundPropertyDescriptor CreateUnboundPropertyDescriptor(UnboundColumnInfo info);
    protected virtual void PopulateUnboundColumns();
    protected virtual void PopulateComplexColumns();
    protected virtual PropertyDescriptor GetActualComplexPropertyDescriptor(ComplexColumnInfo info);
    public virtual object GetDataRowByListIndex(int listSourceRowIndex);
    public virtual object GetCellValueByListIndex(int listSourceRowIndex, string fieldName);
    public virtual void SetCellValueByListIndex(int listSourceRowIndex, string fieldName, object value);
    public virtual int GetListIndexByDataRow(object row);
    public virtual void NodeExpandingCollapsing(TreeListNodeBase node);
    public virtual void ReloadChildNodes(TreeListNodeBase node, IEnumerable children);
    protected internal virtual bool get_SupportNotifications();
    [CompilerGeneratedAttribute]
protected internal bool get_AddingNewNode();
    [CompilerGeneratedAttribute]
protected internal void set_AddingNewNode(bool value);
    public virtual bool AllowNew(TreeListNodeBase parentNode);
    public virtual TreeListNodeBase AddNewNode(TreeListNodeBase parentNode);
    protected internal virtual void CancelNewNode(TreeListNodeBase node);
    protected internal virtual void EndNewNode(TreeListNodeBase node);
    protected internal virtual void CheckNewNodePrimaryKeyValidity(TreeListNodeBase node);
    public abstract virtual IEnumerable`1<IBindingList> GetBindingLists();
}
public class DevExpress.Data.TreeList.DataHelpers.TreeListSelfReferenceDataHelper : TreeListBoundDataHelper {
    private IBindingList bindingList;
    private int deletingChildrenInProgress;
    protected IBindingList BindingList { get; protected set; }
    protected string KeyFieldName { get; }
    protected string ParentFieldName { get; }
    protected object RootValue { get; }
    public bool IsDeletingChildrenInProgress { get; }
    public TreeListSelfReferenceDataHelper(TreeListDataControllerBase controller, object dataSource);
    protected virtual IBindingList get_BindingList();
    protected virtual void set_BindingList(IBindingList value);
    protected string get_KeyFieldName();
    protected string get_ParentFieldName();
    protected object get_RootValue();
    protected virtual bool IsServiceColumnName(string fieldName);
    public virtual void Dispose();
    protected virtual void OnBindingListChanged(object sender, ListChangedEventArgs e);
    private void OnBindingListChangedCore(object sender, ListChangedEventArgs e);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected object GetListItem(int index);
    protected virtual void OnItemChanged(int index, string changedPropertyName);
    protected virtual bool CheckParentIDChanging(TreeListNodeBase node, string memberName);
    protected virtual void OnItemAdded(int index);
    private IEnumerable`1<TreeListNodeBase> GetChildrenById(object id);
    private void MoveChildrenToParent(TreeListNodeBase parentNode, IEnumerable`1<TreeListNodeBase> children);
    protected virtual void OnItemDeleted(int index);
    protected virtual void OnReset();
    public void DeleteNode(TreeListNodeBase node);
    public void DeleteNode(TreeListNodeBase node, bool deleteChildren);
    public virtual void DeleteNode(TreeListNodeBase node, bool deleteChildren, bool modifySource);
    public virtual Action DeleteNodeWithChildrenAndSource(TreeListNodeBase node, bool allowRollback);
    private void RemoveRange(NodesIdInfo range);
    public virtual bool get_IsDeletingChildrenInProgress();
    private void UpdateNodeIdsOnItemAdded(TreeListNodeBase node, int index);
    private void UpdateNodeIdsOnItemRemoved(int index);
    private void UpdateNodeIdsOnItemRemoved(NodesIdInfoManager idInfoManager, TreeListNodeBase nodeToRemove);
    protected void ProcessUpdateNodeIndicesAction(ITreeListNodeCollection nodes, TreeListNodeBase nodeToRemove, Func`2<TreeListNodeBase, bool> action);
    public virtual object GetDataRowByListIndex(int listIndex);
    public virtual object GetCellValueByListIndex(int listSourceRowIndex, string fieldName);
    public virtual void SetCellValueByListIndex(int listSourceRowIndex, string fieldName, object value);
    public virtual int GetListIndexByDataRow(object row);
    public virtual void LoadData();
    protected virtual void LoadDataCore();
    protected void CheckServiceColumns();
    private Dictionary`2<object, TreeListNodeBase> GetNodeDictionaryFromListSource(bool validateKeyField);
    private void LoadLinearData(Dictionary`2<object, TreeListNodeBase> tempMap);
    protected internal virtual void CheckNewNodePrimaryKeyValidity(TreeListNodeBase node);
    protected virtual void InitNewNodeId(TreeListNodeBase node);
    private void SetParentChildRelation(TreeListNodeBase node);
}
public class DevExpress.Data.TreeList.DataHelpers.TreeListUnboundDataHelper : TreeListDataHelperBase {
    public int MaxNodeId;
    [CompilerGeneratedAttribute]
private int <NodeCounter>k__BackingField;
    protected int NodeCounter { get; protected set; }
    public Type ItemType { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool IsReady { get; }
    public bool IsLoaded { get; }
    public bool IsUnboundMode { get; }
    public TreeListUnboundDataHelper(TreeListDataControllerBase controller);
    [CompilerGeneratedAttribute]
protected int get_NodeCounter();
    [CompilerGeneratedAttribute]
protected void set_NodeCounter(int value);
    public virtual void PopulateColumns();
    protected virtual PropertyDescriptor GetActualComplexPropertyDescriptor(ComplexColumnInfo info);
    public virtual Type get_ItemType();
    public virtual bool get_AllowEdit();
    public virtual bool get_AllowRemove();
    public virtual bool get_IsReady();
    public virtual bool get_IsLoaded();
    public virtual bool get_IsUnboundMode();
    public virtual void LoadData();
    protected internal virtual void UpdateNodeId(TreeListNodeBase node);
    protected virtual void CalcNodeIds();
    public virtual void RecalcNodeIdsIfNeeded();
    public virtual void DeleteNode(TreeListNodeBase node, bool deleteChildren, bool modifySource);
    public virtual IEnumerable`1<IBindingList> GetBindingLists();
}
public class DevExpress.Data.TreeList.DataHelpers.TreeListUnboundModeDataColumnInfo : object {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    public string FieldName { get; public set; }
    public bool ReadOnly { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
}
public enum DevExpress.Data.TreeList.FilterMode : Enum {
    public int value__;
    public static FilterMode Default;
    public static FilterMode ShowAll;
    public static FilterMode ShowWithAncestors;
    public static FilterMode ShowWithAncestorsAndDescendants;
}
public interface DevExpress.Data.TreeList.IDataProvider {
    public bool CanUseFastPropertyDescriptors { get; }
    public FilterMode FilterMode { get; }
    public bool IsCustomNodeFilterAssigned { get; }
    public bool ExpandNodesOnFiltering { get; }
    public bool HasCustomSummary { get; }
    public bool SummariesIgnoreNullValues { get; }
    public bool AutoPopulateServiceColumns { get; }
    public string KeyFieldName { get; }
    public string ParentFieldName { get; }
    public object RootValue { get; }
    public bool AllowReloadDataOnEndUpdate { get; }
    public bool AutoDetectColumnTypeInHierarchicalMode { get; }
    public bool InvokeRequired { get; }
    public bool IsDesignMode { get; }
    public abstract virtual TreeListNodeBase CreateNode(object content);
    public abstract virtual TreeListNodeBase CreateRootNode(TreeListDataControllerBase controller);
    public abstract virtual void UpdateRows();
    public abstract virtual string GetDisplayText(TreeListNodeBase node, string fieldName, object value);
    public abstract virtual DataColumnFilterMode GetColumnFilteringMode(DataColumnInfo column);
    public abstract virtual bool get_CanUseFastPropertyDescriptors();
    public abstract virtual void OnDataSourceChanged();
    public abstract virtual void BeforePopulateColumns();
    public abstract virtual void AfterPopulateColumns();
    public abstract virtual void OnCurrentNodeChanged();
    public abstract virtual ComplexColumnInfoCollection GetComplexColumns();
    public abstract virtual bool RaiseValidateNode(TreeListNodeBase currentNode);
    public abstract virtual void RaiseInvalidNodeException(TreeListNodeBase currentNode, ControllerRowExceptionEventArgs args);
    public abstract virtual object GetCustomUnboundData(TreeListNodeBase node, string propertyName, object value);
    public abstract virtual void SetCustomUnboundData(TreeListNodeBase node, string propertyName, object value);
    public abstract virtual UnboundColumnInfoCollection GetUnboundColumns();
    public abstract virtual FilterMode get_FilterMode();
    public abstract virtual bool get_IsCustomNodeFilterAssigned();
    public abstract virtual Nullable`1<bool> RaiseCustomNodeFilter(TreeListNodeBase node);
    public abstract virtual bool get_ExpandNodesOnFiltering();
    public abstract virtual bool RaiseCustomFilterPopupList(TreeListNodeBase node, DataColumnInfo columnInfo);
    public abstract virtual void SubstituteFilter(SubstituteFilterEventArgs e);
    public abstract virtual Nullable`1<int> CustomNodeSort(TreeListNodeBase node1, TreeListNodeBase node2, object value1, object value2, DataColumnInfo column, ColumnSortOrder sortOrder);
    public abstract virtual void OnStartSorting();
    public abstract virtual void OnEndSorting();
    public abstract virtual bool get_HasCustomSummary();
    public abstract virtual bool get_SummariesIgnoreNullValues();
    public abstract virtual object CustomSummary(TreeListNodeBase node, object totalValue, SummaryItem summaryItem, CustomSummaryProcess process, object fieldValue, Boolean& isTotalValueReady);
    public abstract virtual bool get_AutoPopulateServiceColumns();
    public abstract virtual string get_KeyFieldName();
    public abstract virtual string get_ParentFieldName();
    public abstract virtual object get_RootValue();
    public abstract virtual bool get_AllowReloadDataOnEndUpdate();
    public abstract virtual bool get_AutoDetectColumnTypeInHierarchicalMode();
    public abstract virtual bool get_InvokeRequired();
    public abstract virtual void BeginInvoke(Action action);
    public abstract virtual IEnumerable`1<TreeListUnboundModeDataColumnInfo> GetUnboundModeDataColumns();
    public abstract virtual bool IsServiceColumnName(string fieldName);
    public abstract virtual void InitUnboundMode();
    public abstract virtual void SynchronizeSortInfo(TreeListDataColumnSortInfoCollection sortInfo);
    public abstract virtual bool get_IsDesignMode();
    public abstract virtual bool IsDesignModeSource(IList listSource);
    public abstract virtual void AddNodeToFlattenCache(TreeListNodeBase node);
    public abstract virtual void RemoveNodeToFlattenCache(TreeListNodeBase node);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Data.TreeList.ITreeListNodeCollection {
    public TreeListNodeBase Item { get; }
    public int Count { get; }
    public int MinID { get; }
    public int MaxID { get; }
    public abstract virtual void SortNodes(IComparer`1<TreeListNodeBase> comparer);
    public abstract virtual void RemoveInternal(TreeListNodeBase child);
    public abstract virtual void AddInternal(TreeListNodeBase child);
    public abstract virtual void Clear();
    public abstract virtual void Remove(TreeListNodeBase node);
    public abstract virtual void Add(TreeListNodeBase node);
    public abstract virtual int IndexOf(TreeListNodeBase node);
    public abstract virtual void Insert(int index, TreeListNodeBase node);
    public abstract virtual TreeListNodeBase get_Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual TreeListNodeBase FindNodeById(int id);
    public abstract virtual void OnNodeIdChanged(TreeListNodeBase node, int oldId, int newId);
    public abstract virtual void UpdateIndices();
    public abstract virtual int get_MinID();
    public abstract virtual int get_MaxID();
}
public class DevExpress.Data.TreeList.MultiColumnTreeListNodeComparer : TreeListNodeComparerBase {
    private Tuple`2[] comparisons;
    public MultiColumnTreeListNodeComparer(TreeListDataControllerBase controller);
    protected virtual void Initialize();
    public virtual int Compare(TreeListNodeBase node1, TreeListNodeBase node2);
    [CompilerGeneratedAttribute]
private Tuple`2<TreeListDataColumnSortInfo, Comparison`1<TreeListNodeBase>> <Initialize>b__2_0(TreeListDataColumnSortInfo sortInfo);
}
public enum DevExpress.Data.TreeList.NodeChangeType : Enum {
    public int value__;
    public static NodeChangeType Add;
    public static NodeChangeType Remove;
    public static NodeChangeType Expand;
    public static NodeChangeType Content;
    public static NodeChangeType ExpandButtonVisibility;
    public static NodeChangeType Image;
    public static NodeChangeType CheckBox;
    public static NodeChangeType IsCheckBoxEnabled;
}
[ExtensionAttribute]
public static class DevExpress.Data.TreeList.NodeHelpers : object {
    [ExtensionAttribute]
public static void DoForDescendants(TreeListNodeBase node, Func`2<TreeListNodeBase, bool> action);
    [ExtensionAttribute]
public static void DoForAncestors(TreeListNodeBase node, Func`2<TreeListNodeBase, bool> canContinue, Action`1<TreeListNodeBase> action);
    public static void ProcessNodeAction(TreeListNodeBase node, Func`2<TreeListNodeBase, bool> action);
    [ExtensionAttribute]
public static List`1<TreeListNodeBase> ToList(ITreeListNodeCollection nodes);
}
public class DevExpress.Data.TreeList.SingleColumnTreeListNodeComaprer : TreeListNodeComparerBase {
    private Comparison`1<TreeListNodeBase> comparision;
    private ColumnSortOrder sortOrder;
    private TreeListDataColumnSortInfo sortInfo;
    public SingleColumnTreeListNodeComaprer(TreeListDataControllerBase controller);
    protected virtual void Initialize();
    public virtual int Compare(TreeListNodeBase node1, TreeListNodeBase node2);
}
public class DevExpress.Data.TreeList.SummaryDataItem : Dictionary`2<TreeListSummaryItem, TreeListSummaryValue> {
}
public class DevExpress.Data.TreeList.TreeListComplexPropertyDescriptor : ComplexPropertyDescriptorReflection {
    [CompilerGeneratedAttribute]
private TreeListDataControllerBase <DataController>k__BackingField;
    protected TreeListDataControllerBase DataController { get; private set; }
    public TreeListComplexPropertyDescriptor(TreeListDataControllerBase controller, object sourceObject, string path);
    public TreeListComplexPropertyDescriptor(TreeListDataControllerBase controller1, DataControllerBase controllerBase, string path);
    [CompilerGeneratedAttribute]
protected TreeListDataControllerBase get_DataController();
    [CompilerGeneratedAttribute]
private void set_DataController(TreeListDataControllerBase value);
    protected virtual PropertyDescriptor GetDescriptor(string name, object obj, Type type);
}
public class DevExpress.Data.TreeList.TreeListDataColumnSortInfo : DataColumnSortInfo {
    [CompilerGeneratedAttribute]
private ColumnSortMode <SortMode>k__BackingField;
    public ColumnSortMode SortMode { get; public set; }
    public TreeListDataColumnSortInfo(DataColumnInfo columnInfo, ColumnSortOrder sortOrder, ColumnSortMode sortMode);
    [CompilerGeneratedAttribute]
public ColumnSortMode get_SortMode();
    [CompilerGeneratedAttribute]
public void set_SortMode(ColumnSortMode value);
}
public class DevExpress.Data.TreeList.TreeListDataColumnSortInfoCollection : TreeListNotificationCollectionBase`1<TreeListDataColumnSortInfo> {
    public TreeListDataColumnSortInfoCollection(CollectionChangeEventHandler collectionChanged);
    public DataColumnSortInfo Add(DataColumnInfo columnInfo, ColumnSortOrder sortOrder, ColumnSortMode sortMode);
}
public class DevExpress.Data.TreeList.TreeListDataControllerBase : object {
    public static bool OptimizeSummaryCalculation;
    private int currentControllerRow;
    private int lockUpdate;
    private int lockUpdateSummary;
    private List`1<string> changedProperties;
    private object dataSource;
    private int lockNodeCollectionChanged;
    private CriteriaOperator filterCriteria;
    private Func`2<object, bool> filterFitPredicateCore;
    private bool isFilterCriteriaChanged;
    private bool currentRowEditing;
    [CompilerGeneratedAttribute]
private IDataProvider <DataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private DataColumnInfoCollection <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueComparer <ValueComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeListNodeBase <RootNode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeListNodesInfo <NodesInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeListDataHelperBase <DataHelper>k__BackingField;
    private int lockEndEdit;
    [CompilerGeneratedAttribute]
private TreeListFilterHelper <FilterHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFiltered>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeListDataColumnSortInfoCollection <SortInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSorted>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeListSummaryItemCollection <NodeSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeListSummaryItemCollection <TotalSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<TreeListNodeBase, SummaryDataItem> <SummaryData>k__BackingField;
    private bool isIncrementalSummaryCalculation;
    [CompilerGeneratedAttribute]
private bool <IsNewNodeEditing>k__BackingField;
    public ITreeListNodeCollection Nodes { get; }
    public IDataProvider DataProvider { get; private set; }
    public DataColumnInfoCollection Columns { get; private set; }
    public Type ItemType { get; }
    public int TotalNodesCount { get; }
    public int TotalVisibleNodesCount { get; }
    public bool IsSelfReferenceMode { get; }
    public bool IsUpdateLocked { get; }
    public bool IsReady { get; }
    public ValueComparer ValueComparer { get; private set; }
    public TreeListNodeBase RootNode { get; private set; }
    public bool IsDisposed { get; private set; }
    public TreeListNodesInfo NodesInfo { get; protected internal set; }
    public TreeListDataHelperBase DataHelper { get; private set; }
    protected bool IsSummaryUpdateLocked { get; }
    public bool IsLockedDeletingInProgress { get; }
    public bool SupportNotifications { get; }
    public object DataSource { get; public set; }
    public bool CanUseFastPropertyDescriptors { get; }
    public int CurrentControllerRow { get; public set; }
    public TreeListNodeBase CurrentNode { get; }
    public bool IsCurrentRowEditing { get; }
    public bool AllowEdit { get; }
    protected bool IsLockEndEdit { get; }
    public CriteriaOperator FilterCriteria { get; public set; }
    public TreeListFilterHelper FilterHelper { get; private set; }
    protected bool IsFiltered { get; private set; }
    protected bool HasFilter { get; }
    public Func`2<object, bool> FilterFitPredicate { get; }
    public TreeListDataColumnSortInfoCollection SortInfo { get; private set; }
    protected bool IsSorted { get; private set; }
    public TreeListSummaryItemCollection NodeSummary { get; private set; }
    public TreeListSummaryItemCollection TotalSummary { get; private set; }
    protected Dictionary`2<TreeListNodeBase, SummaryDataItem> SummaryData { get; private set; }
    protected internal bool IsNodeCollectionChangedLocked { get; }
    public bool IsNewNodeEditing { get; private set; }
    public bool IsAddingNewNode { get; }
    protected internal bool CanRaiseAddingNew { get; }
    public TreeListDataControllerBase(IDataProvider dataProvider);
    private static TreeListDataControllerBase();
    public ITreeListNodeCollection get_Nodes();
    [CompilerGeneratedAttribute]
public IDataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
private void set_DataProvider(IDataProvider value);
    [CompilerGeneratedAttribute]
public DataColumnInfoCollection get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(DataColumnInfoCollection value);
    public Type get_ItemType();
    public int get_TotalNodesCount();
    public int get_TotalVisibleNodesCount();
    public bool get_IsSelfReferenceMode();
    public bool get_IsUpdateLocked();
    public bool get_IsReady();
    [CompilerGeneratedAttribute]
public ValueComparer get_ValueComparer();
    [CompilerGeneratedAttribute]
private void set_ValueComparer(ValueComparer value);
    [CompilerGeneratedAttribute]
public TreeListNodeBase get_RootNode();
    [CompilerGeneratedAttribute]
private void set_RootNode(TreeListNodeBase value);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public virtual TreeListNodesInfo get_NodesInfo();
    [CompilerGeneratedAttribute]
protected internal virtual void set_NodesInfo(TreeListNodesInfo value);
    [CompilerGeneratedAttribute]
public TreeListDataHelperBase get_DataHelper();
    [CompilerGeneratedAttribute]
private void set_DataHelper(TreeListDataHelperBase value);
    protected bool get_IsSummaryUpdateLocked();
    public bool get_IsLockedDeletingInProgress();
    public bool IsValidRowHandle(int rowHandle);
    public bool IsValidVisibleIndex(int visibleIndex);
    public virtual object GetValue(TreeListNodeBase node, string fieldName);
    public virtual object GetValue(int rowHandle, string fieldName);
    public void SetValue(TreeListNodeBase node, string fieldName, object value);
    public void SetValueCore(TreeListNodeBase node, string fieldName, object value);
    public bool get_SupportNotifications();
    protected virtual ValueComparer CreateValueComparer();
    protected virtual TreeListNodeComparerBase CreateNodesComparer();
    protected virtual TreeListNodesInfo CreateNodesInfo();
    protected internal virtual IEnumerable`1<TreeListNodeBase> GetNodeEnumerator(TreeListNodeBase node, bool onlyExpanded);
    protected internal virtual PropertyDescriptorCollection GetCollectionViewProperties();
    protected internal virtual Type GetCollectionViewSourceCollectionType();
    protected internal virtual Type GetListItemType(IList list);
    protected internal virtual IEnumerable`1<TreeListNodeBase> GetNodeEnumerator(ITreeListNodeCollection nodes, bool onlyExpanded);
    protected internal virtual IEnumerable`1<TreeListNodeBase> GetSelectedNodeEnumerator(TreeListNodeBase nodes);
    public object get_DataSource();
    public void set_DataSource(object value);
    public virtual bool get_CanUseFastPropertyDescriptors();
    protected internal virtual void OnDataSourceChanged();
    protected virtual TreeListDataHelperBase CreateDataHelper();
    public virtual IList ExtractListSource(object dataSource);
    public virtual void PopulateColumns();
    public virtual void UpdateDataHelper();
    public int get_CurrentControllerRow();
    public void set_CurrentControllerRow(int value);
    public TreeListNodeBase get_CurrentNode();
    public bool get_IsCurrentRowEditing();
    public bool get_AllowEdit();
    public virtual void BeginCurrentRowEdit();
    public virtual bool EndCurrentRowEdit();
    protected virtual void UpdateCurrentControllerRowOnEndCurrentEdit(TreeListNodeBase currentNode);
    public virtual void CancelCurrentRowEdit();
    protected void BeginDataRowEdit(TreeListNodeBase node);
    protected void CancelDataRowEdit(TreeListNodeBase node);
    protected void EndDataRowEdit(TreeListNodeBase node);
    protected void StopCurrentRowEdit();
    protected virtual void OnEndCurrentRowEdit();
    protected virtual bool NotifyOnEndCurrentRowEdit();
    protected virtual void OnCurrentRowUpdated(TreeListNodeBase node);
    protected virtual void OnCurrentRowCancelled(TreeListNodeBase node);
    protected bool get_IsLockEndEdit();
    protected void BeginLockEndEdit();
    protected void EndLockEndEdit();
    protected IEditableObject GetEditableObject(TreeListNodeBase node);
    protected virtual void OnCurrentControllerRowChanged();
    protected virtual void OnCurrentControllerRowChanging(int newValue);
    public virtual void ResetCurrentPosition();
    public CriteriaOperator get_FilterCriteria();
    public void set_FilterCriteria(CriteriaOperator value);
    [CompilerGeneratedAttribute]
public TreeListFilterHelper get_FilterHelper();
    [CompilerGeneratedAttribute]
private void set_FilterHelper(TreeListFilterHelper value);
    [CompilerGeneratedAttribute]
protected bool get_IsFiltered();
    [CompilerGeneratedAttribute]
private void set_IsFiltered(bool value);
    protected bool get_HasFilter();
    public Func`2<object, bool> get_FilterFitPredicate();
    public virtual Func`2<object, bool> CreateFilterFitPredicate(CriteriaOperator criteria);
    protected virtual Func`2<object, bool> CreateFilterFitPredicate();
    protected virtual void OnFilterCriteriaChanged();
    protected virtual PropertyDescriptorCollection GetFilterDescriptorCollection();
    protected virtual TreeListFilterHelper CreateFilterHelper();
    public void DoFilterNodes();
    public virtual void DoFilterNodes(TreeListNodeBase parentNode);
    protected virtual bool DoFilterNode(TreeListNodeBase node);
    protected virtual void UpdateNodeAncestorsAndDescendantsVisibilityOnFiltering(TreeListNodeBase node);
    protected virtual bool CanUpdateNodeAncestorsExpandStateOnFiltering(TreeListNodeBase node);
    protected virtual void UpdateNodeAncestorsExpandStateOnFiltering(TreeListNodeBase node);
    protected internal virtual bool CalcNodeVisibility(TreeListNodeBase node, Func`2<object, bool> customFilterFitPredicate);
    protected virtual Nullable`1<bool> IsCustomNodeFilter(TreeListNodeBase node);
    protected virtual void DoFilterNodesCore(TreeListNodeBase parent);
    private void ResetFilterFitPredicate();
    [CompilerGeneratedAttribute]
public TreeListDataColumnSortInfoCollection get_SortInfo();
    [CompilerGeneratedAttribute]
private void set_SortInfo(TreeListDataColumnSortInfoCollection value);
    [CompilerGeneratedAttribute]
protected bool get_IsSorted();
    [CompilerGeneratedAttribute]
private void set_IsSorted(bool value);
    public bool DoSortNodes();
    public virtual bool DoSortNodes(TreeListNodeBase parentNode);
    protected internal virtual void DoSortNodesCore(TreeListNodeBase parentNode, bool recursive);
    private void DoSortNodesCore(ITreeListNodeCollection nodes, TreeListNodeComparerBase comparer, bool recursive);
    protected void OnSortInfoCollectionChanged();
    protected internal Nullable`1<int> CustomNodeSort(TreeListNodeBase node1, TreeListNodeBase node2, object value1, object value2, DataColumnInfo column, ColumnSortOrder sortOrder);
    [CompilerGeneratedAttribute]
public TreeListSummaryItemCollection get_NodeSummary();
    [CompilerGeneratedAttribute]
private void set_NodeSummary(TreeListSummaryItemCollection value);
    [CompilerGeneratedAttribute]
public TreeListSummaryItemCollection get_TotalSummary();
    [CompilerGeneratedAttribute]
private void set_TotalSummary(TreeListSummaryItemCollection value);
    [CompilerGeneratedAttribute]
protected Dictionary`2<TreeListNodeBase, SummaryDataItem> get_SummaryData();
    [CompilerGeneratedAttribute]
private void set_SummaryData(Dictionary`2<TreeListNodeBase, SummaryDataItem> value);
    public virtual void UpdateTotalSummary();
    public virtual void UpdateNodeSummary();
    public virtual void UpdateTotalSummary(IEnumerable`1<TreeListSummaryItem> changedItems);
    public virtual void UpdateTotalAndNodeSummary(IEnumerable`1<TreeListSummaryItem> changedItems);
    public virtual void UpdateNodeSummary(IEnumerable`1<TreeListSummaryItem> changedItems);
    protected virtual void UpdateSummaryCore(IEnumerable`1<TreeListSummaryItem> changedItems, IEnumerable`1<TreeListSummaryItem> summaryItems);
    protected virtual void UpdateSummaryProperties(IEnumerable`1<TreeListSummaryItem> changedItems);
    public object GetTotalSummaryValue(TreeListSummaryItem item);
    public object GetSummaryValue(TreeListNodeBase node, TreeListSummaryItem item);
    protected virtual object GetSummaryValueCore(TreeListNodeBase node, TreeListSummaryItem item);
    protected internal virtual object GetSummaryValueCore(TreeListNodeBase node, TreeListSummaryItem item, Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData);
    protected virtual void ClearSummaryData(IEnumerable`1<TreeListSummaryItem> changedItems, Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData);
    protected virtual void CalcSummary(IEnumerable`1<TreeListSummaryItem> summaryItems, Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData, IEnumerable`1<TreeListNodeBase> nodes, IEnumerable`1<TreeListNodeBase> selectedNodes);
    protected virtual IEnumerable`1<TreeListSummaryItem> GetSummarySelectionSummary(IEnumerable`1<TreeListSummaryItem> summaryItems);
    protected virtual bool CanContinueCalculation(TreeListNodeBase node, TreeListSummaryItem item, Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData);
    protected void UpdateSummaryValue(TreeListNodeBase summaryOwner, Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData, TreeListSummaryItem item, TreeListNodeBase node, bool useVisibleParent, bool checkSelection, bool initOnly);
    protected virtual bool CanCalculateSummary(TreeListSummaryItem item, TreeListNodeBase node);
    protected virtual TreeListSummaryValue CreateSummaryValue(TreeListSummaryItem item);
    public virtual bool CanCalculateSummaries(IEnumerable`1<TreeListSummaryItem> summaries);
    protected virtual bool IsServiceSummaryItem(TreeListSummaryItem item);
    protected virtual bool CanCalculateSummaryForNode(TreeListNodeBase node);
    protected virtual bool CanCalculateSummaryForItem(TreeListSummaryItem item);
    protected bool IsUnboundWithExpression(DataColumnInfo ci);
    protected virtual void DoCalcTotalSummary();
    protected void OnTotalSummaryCollectionChanged();
    protected void OnNodeSummaryCollectionChanged();
    protected virtual bool ShouldRecalculateSummaryOnNodeChanged(TreeListNodeBase node, NodeChangeType changeType);
    protected bool IsCustomSummaryItem(TreeListSummaryItem item);
    protected bool IsMinMaxSummaryItem(SummaryItem item);
    protected virtual void UpdateTotalSummaryOnNodeCollectionChanged(TreeListNodeBase node, NodeChangeType changeType, string changedPropertyName);
    protected virtual bool NeedUpdateTotalSummary(TreeListSummaryItem summaryItem, string changedPropertyName);
    protected virtual void UpdateTotalSummaryOnNodeCollectionChanged(TreeListNodeBase node, NodeChangeType changeType, IEnumerable`1<TreeListSummaryItem> changedItems, Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData);
    protected virtual void UpdateTotalSummaryIncrementally(TreeListNodeBase node, NodeChangeType changeType, IEnumerable`1<TreeListSummaryItem> changedItems, Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData);
    protected void UpdateCalculatedTotalSummary(TreeListNodeBase node, NodeChangeType changeType, IEnumerable`1<TreeListSummaryItem> calculatedSummaryItems, Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData);
    protected void UpdateMinMaxTotalSummary(TreeListNodeBase node, NodeChangeType changeType, IEnumerable`1<TreeListSummaryItem> summaryItems, Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData);
    private void ProcessSummaryDataItemValues(SummaryDataItem item, Func`2<TreeListSummaryValue, bool> summaryItemSelector, Action`1<TreeListSummaryValue> updateAction);
    private void UpdateSummaryData(Dictionary`2<TreeListNodeBase, SummaryDataItem> summaryData);
    public virtual void BeginSummaryUpdate();
    public virtual void EndSummaryUpdate();
    public virtual void DoRefresh(bool keepNodesState);
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    protected virtual void UpdateUnboundColumns();
    protected virtual void UpdateFocusedNode();
    public virtual void DoUpdate(bool sortNodes);
    protected virtual void UpdateCurrentControllerRow(TreeListNodeBase node);
    public virtual void BeginUpdateCore();
    public virtual void EndUpdateCore();
    public void EndSortUpdate();
    protected void UpdateDataProvider();
    public void CancelUpdate();
    public void UnlockUpdate();
    protected virtual void UpdateUnlocked();
    protected internal bool get_IsNodeCollectionChangedLocked();
    protected internal void LockNodeCollectionChanged();
    protected internal void UnlockNodeCollectionChanged();
    public virtual void SaveNodesState();
    public virtual void RestoreNodesState();
    protected internal virtual ExpressionEvaluator CreateExpressionEvaluator(string criteria, Exception& e);
    public virtual ExpressionEvaluator CreateExpressionEvaluator(CriteriaOperator criteriaOperator, Exception& e);
    protected internal object GetUnboundData(TreeListNodeBase node, string propertyName, object value);
    protected internal void SetUnboundData(TreeListNodeBase node, string propertyName, object value);
    private sealed virtual override object DevExpress.Data.Filtering.Helpers.IEvaluatorDataAccess.GetValue(PropertyDescriptor descriptor, object theObject);
    protected internal UnboundColumnInfoCollection GetUnboundColumns();
    protected internal bool IsUnboundColumn(DataColumnInfo column);
    public virtual bool BeforeListChanged(object sender, ListChangedEventArgs e);
    public virtual void AfterListChanged(object sender, ListChangedEventArgs e);
    protected internal virtual void OnNodeAddedRemoved(TreeListNodeBase node, NodeChangeType changeType);
    public virtual void OnNodeCollectionChanged(TreeListNodeBase node, NodeChangeType changeType, string changedPropertyName, bool raiseNodeChangedEvent, bool sourceIsUpdated);
    public virtual void OnNodeCollectionChanging(TreeListNodeBase node, NodeChangeType changeType);
    protected internal virtual bool OnNodeExpandingOrCollapsing(TreeListNodeBase node);
    protected internal virtual void OnNodeExpandedOrCollapsed(TreeListNodeBase node);
    public virtual void ToggleExpandedAllChildNodes(TreeListNodeBase parent, bool expand);
    protected virtual void OnBeforeToggleExpandAllNodes(TreeListNodeBase parent, bool expand);
    protected virtual void OnAfterToggleExpandAllNodes(TreeListNodeBase parent, bool expand);
    public virtual void CancelNewNodeEdit();
    [CompilerGeneratedAttribute]
public bool get_IsNewNodeEditing();
    [CompilerGeneratedAttribute]
private void set_IsNewNodeEditing(bool value);
    public bool get_IsAddingNewNode();
    public TreeListNodeBase AddNewRow();
    public virtual TreeListNodeBase AddNewNode(TreeListNodeBase parentNode);
    protected virtual void OnBeginNewNodeEdit();
    protected virtual void OnEndNewNodeEdit(NodeChangeType changeType);
    protected virtual void OnCancelNewNodeEdit();
    protected internal virtual object RaiseAddingNew(TreeListNodeBase parentNode);
    protected internal virtual bool get_CanRaiseAddingNew();
    protected virtual void RaiseInitNewNode(TreeListNodeBase node);
    private void IntializeNewNode(TreeListNodeBase node);
    public virtual TreeListNodeBase FindNodeByValue(object value);
    public virtual TreeListNodeBase FindNodeByValue(string fieldName, object value);
    public TreeListNodeBase FindNodeById(int id);
    public virtual TreeListNodeBase GetNodeByRowHandle(int rowHandle);
    public virtual int GetRowHandleByNode(TreeListNodeBase node);
    public virtual int GetRowHandleByVisibleIndex(int visibleIndex);
    public virtual int GetVisibleIndexByNode(TreeListNodeBase node);
    public object GetNodeContentByRowHandle(int rowHandle);
    private bool PrepareDeleteNode(TreeListNodeBase node);
    public virtual void DeleteNode(TreeListNodeBase node, bool deleteChildren, bool modifySource);
    public virtual Action DeleteNodeWithChildrenAndSource(TreeListNodeBase node, bool allowRollback);
    internal void UpdateNodeId(TreeListNodeBase node);
    public bool IsNullValue(object value);
    protected internal virtual void OnVisibleRowCountChanged();
    protected internal virtual bool UseFirstRowTypeWhenPopulatingColumns(Type itemType);
    protected internal virtual void OnLoaded();
    protected internal virtual void RePopulateColumnsIfNeeded();
    public virtual void RestoreFocusState();
    public virtual void SaveFocusState();
    protected internal virtual void OnVisibleIndexChanged(TreeListNodeBase node);
    public sealed virtual void Dispose();
    protected internal virtual void OnDataHelperDisposing();
    protected internal virtual void ResubscribeToBindingList(IBindingList oldValue, IBindingList newValue);
    protected internal virtual void OnNodeIsVisibleChanged(TreeListNodeBase treeListNodeBase);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(object s, CollectionChangeEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_1(object s, CollectionChangeEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_2(object s, CollectionChangeEventArgs e);
    [CompilerGeneratedAttribute]
private bool <UpdateTotalSummaryOnNodeCollectionChanged>b__203_0(TreeListSummaryItem item);
    [CompilerGeneratedAttribute]
private bool <UpdateTotalSummaryIncrementally>b__204_0(TreeListSummaryItem item);
    [CompilerGeneratedAttribute]
private bool <EndSummaryUpdate>b__210_0(TreeListSummaryItem item);
}
public class DevExpress.Data.TreeList.TreeListDisplayTextPropertyDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]
private TreeListDataControllerBase <Controller>k__BackingField;
    public TreeListDataControllerBase Controller { get; private set; }
    public bool IsReadOnly { get; }
    public string Category { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public TreeListDisplayTextPropertyDescriptor(TreeListDataControllerBase controller, string name);
    [CompilerGeneratedAttribute]
public TreeListDataControllerBase get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(TreeListDataControllerBase value);
    public virtual bool get_IsReadOnly();
    public virtual string get_Category();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    protected virtual object GetValueCore(TreeListNodeBase node);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.Data.TreeList.TreeListFilterHelper : object {
    [CompilerGeneratedAttribute]
private TreeListDataControllerBase <Controller>k__BackingField;
    protected TreeListDataControllerBase Controller { get; private set; }
    protected IDataProvider DataProvider { get; }
    protected TreeListDataHelperBase DataHelper { get; }
    public TreeListFilterHelper(TreeListDataControllerBase controller);
    [CompilerGeneratedAttribute]
protected TreeListDataControllerBase get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(TreeListDataControllerBase value);
    protected IDataProvider get_DataProvider();
    protected TreeListDataHelperBase get_DataHelper();
    public virtual CriteriaOperator CalcColumnFilterCriteriaByValue(DataColumnInfo columnInfo, object columnValue, bool roundDateTime, bool useDisplayText);
    public virtual Object[] GetUniqueColumnValuesCore(DataColumnInfo column, bool includeFilteredOut, bool roundDataTime, bool useDisplayText, bool implyNullLikeEmptyString);
    public virtual Object[] GetUniqueColumnValuesCore(DataColumnInfo column, CriteriaOperator criteria, bool includeFilteredOut, bool roundDataTime, bool useDisplayText, bool implyNullLikeEmptyString);
    [IteratorStateMachineAttribute("DevExpress.Data.TreeList.TreeListFilterHelper/<GetColumnValues>d__12")]
protected virtual IEnumerable`1<object> GetColumnValues(DataColumnInfo columnInfo, CriteriaOperator criteria, bool includeFilteredOut, bool roundDateTime, bool displayText, bool implyNullLikeEmptyString);
    [CompilerGeneratedAttribute]
private int <GetUniqueColumnValuesCore>b__11_0(object x, object y);
}
public abstract class DevExpress.Data.TreeList.TreeListNodeBase : object {
    private object content;
    private bool expanded;
    private bool isVisible;
    private int idCore;
    private ITreeListNodeCollection nodesCore;
    protected internal TreeListNodeBase parentNodeInternal;
    protected internal int rowHandleCore;
    protected internal int visibleIndexCore;
    private TreeListDataControllerBase controller;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpandedSetInternally>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    protected internal ITreeListNodeCollection NodesCore { get; }
    public object Tag { get; public set; }
    protected internal TreeListNodeBase ParentNodeCore { get; protected internal set; }
    protected internal TreeListNodeBase VisibleParentCore { get; }
    public object Content { get; public set; }
    public bool HasChildren { get; }
    public bool IsExpanded { get; public set; }
    public int RowHandle { get; }
    public int VisibleIndex { get; }
    public bool IsFiltered { get; }
    public bool IsVisible { get; internal set; }
    public int Id { get; protected internal set; }
    protected internal bool IsExpandedSetInternally { get; internal set; }
    protected internal TreeListDataControllerBase Controller { get; protected internal set; }
    protected internal bool IsTogglableCore { get; }
    public TreeListNodeBase(object content);
    protected internal ITreeListNodeCollection get_NodesCore();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    protected internal virtual TreeListNodeBase get_ParentNodeCore();
    protected internal virtual void set_ParentNodeCore(TreeListNodeBase value);
    protected internal virtual TreeListNodeBase get_VisibleParentCore();
    public virtual object get_Content();
    public virtual void set_Content(object value);
    public bool get_HasChildren();
    public virtual bool get_IsExpanded();
    public virtual void set_IsExpanded(bool value);
    [BrowsableAttribute("False")]
public bool IsDescendantOf(TreeListNodeBase node);
    public int get_RowHandle();
    public int get_VisibleIndex();
    public bool get_IsFiltered();
    public bool get_IsVisible();
    internal void set_IsVisible(bool value);
    public int get_Id();
    protected internal void set_Id(int value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsExpandedSetInternally();
    [CompilerGeneratedAttribute]
internal void set_IsExpandedSetInternally(bool value);
    protected internal TreeListDataControllerBase get_Controller();
    protected internal void set_Controller(TreeListDataControllerBase value);
    protected virtual void UninitializeController(TreeListDataControllerBase oldController);
    protected virtual void InitializeController();
    protected internal virtual bool get_IsTogglableCore();
    protected abstract virtual ITreeListNodeCollection CreateNodeCollection();
    protected void ChangeExpanded(bool value);
    protected virtual void SetExpanded(bool expanded);
    public void ExpandAll();
    public void CollapseAll();
    protected void ToggleExpandAll(bool expand);
    protected internal void ToggleExpandedAllCore(bool expand);
    protected void NotifyDataController(NodeChangeType nodeChangeType);
    internal void UpdateId();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void RaisePropertyChanged(string propertyName);
    protected internal virtual void InitializeNodeInternal();
}
public class DevExpress.Data.TreeList.TreeListNodeCollectionBase`1 : Collection`1<TNodeType> {
    private Dictionary`2<int, TNodeType> IdToNodeMap;
    protected internal int minID;
    protected internal int maxID;
    [CompilerGeneratedAttribute]
private TNodeType <OwnerCore>k__BackingField;
    private bool clearing;
    protected internal bool IsDeletingChildrenInProgress { get; }
    protected internal TNodeType OwnerCore { get; protected internal set; }
    protected TreeListDataControllerBase Controller { get; }
    private bool IsSelfReferenceMode { get; }
    public TreeListNodeCollectionBase`1(TNodeType owner);
    protected internal bool get_IsDeletingChildrenInProgress();
    [CompilerGeneratedAttribute]
protected internal TNodeType get_OwnerCore();
    [CompilerGeneratedAttribute]
protected internal void set_OwnerCore(TNodeType value);
    protected TreeListDataControllerBase get_Controller();
    protected virtual void InsertItem(int index, TNodeType item);
    protected bool CanBeAddedAsChild(TNodeType item);
    protected virtual void ClearItems();
    protected void ClearItemsCore();
    protected virtual void LinkNode(TNodeType node);
    protected virtual void UnlinkNode(TNodeType node);
    protected void InitializeNodeAndDescendants(TNodeType node, TNodeType owner);
    protected virtual void InitializeNode(TNodeType currentNode, TNodeType owner);
    private bool get_IsSelfReferenceMode();
    protected virtual void OnChanged(TNodeType node, NodeChangeType changeType);
    protected virtual void OnChanging(TNodeType node, NodeChangeType changeType);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TNodeType item);
    protected internal virtual void SortNodes(IComparer`1<TNodeType> comparer);
    protected internal void RemoveInternal(TNodeType node);
    protected internal void AddInternal(TNodeType node);
    protected TNodeType FindNodeById(int id);
    protected void OnNodeIdChanged(TNodeType node, int oldId, int newId);
    private void RemoveNodeFromIdToNodeMap(TNodeType node, int id);
    protected void UpdateIndices();
    private void UpdateMinMaxIndices(int newId);
    private void UpdateMinMaxIndicesOnNodeIdChanged(int oldId, int newId);
    private void ResetMinMaxIndices();
    private void CalcMinMaxIndices();
    [CompilerGeneratedAttribute]
private bool <UnlinkNode>b__18_0(TreeListNodeBase n);
}
public abstract class DevExpress.Data.TreeList.TreeListNodeComparerBase : Comparer`1<TreeListNodeBase> {
    protected ITreeListNodeCollection nodes;
    private CacheStorage cacheStorage;
    [CompilerGeneratedAttribute]
private TreeListDataControllerBase <Controller>k__BackingField;
    protected TreeListDataControllerBase Controller { get; private set; }
    protected TreeListNodeComparerBase(TreeListDataControllerBase controller);
    public void Init(ITreeListNodeCollection nodes);
    protected abstract virtual void Initialize();
    public void Clear();
    [CompilerGeneratedAttribute]
protected TreeListDataControllerBase get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(TreeListDataControllerBase value);
    protected Comparison`1<TreeListNodeBase> CreateComparision(TreeListDataColumnSortInfo sortInfo);
    private Type GetActualColumnType(TreeListDataColumnSortInfo sortInfo);
    protected virtual Cell CreateSortCell(TreeListDataColumnSortInfo sortInfo);
    protected Delegate CreateValueCacher(TreeListDataColumnSortInfo sortInfo, Type columnType, Delegate valueGetter);
    protected Delegate GetRowValueDelegate(DataColumnInfo columnInfo, Type expectedReturnType);
    private object CheckDBNull(object value);
    public void InitCache(TreeListDataColumnSortInfo sortInfo, Func`2<TreeListNodeBase, T> getter);
    public T[] GetCache(TreeListDataColumnSortInfo sortInfo);
    [CompilerGeneratedAttribute]
private Delegate <CreateComparision>b__10_0(DataColumnInfo ci, Type targetType);
}
public class DevExpress.Data.TreeList.TreeListNodesInfo : object {
    private List`1<TreeListNodeBase> rowHandleToNodeCache;
    private List`1<TreeListNodeBase> visibleIndexToNodeCache;
    private List`1<TreeListNodeBase> parentNodes;
    private bool shouldRefreshRowHandles;
    private bool shouldRefreshVisibleIndicies;
    private int oldVisibleNodesCount;
    protected bool allNodes;
    private TreeListNodeBase newNode;
    [CompilerGeneratedAttribute]
private TreeListDataControllerBase <Controller>k__BackingField;
    protected TreeListDataControllerBase Controller { get; private set; }
    public int TotalNodesCount { get; }
    public int TotalVisibleNodesCount { get; }
    public TreeListNodesInfo(TreeListDataControllerBase controller, bool allNodes);
    [CompilerGeneratedAttribute]
protected TreeListDataControllerBase get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(TreeListDataControllerBase value);
    public void SetDirty();
    public int get_TotalNodesCount();
    public int get_TotalVisibleNodesCount();
    public virtual void SetDirty(bool visibleIndiciesOnly);
    protected virtual void ClearRowHandles();
    protected virtual void ClearVisibleIndicies();
    protected void BuildCache(ITreeListNodeCollection nodes, Int32& rowHandleCounter, Int32& visibleIndexCounter, bool isParentExpanded);
    protected virtual void OnVisibleIndexAssigned(TreeListNodeBase node);
    protected void EnsureCacheValid();
    protected virtual void OnCacheCreated();
    public TreeListNodeBase GetNodeByRowHandle(int rowHandle);
    public int GetRowHandleByNode(TreeListNodeBase node);
    public int GetVisibleIndexByNode(TreeListNodeBase node);
    public TreeListNodeBase GetNodeByVisibleIndex(int visibleIndex);
    public TreeListNodeBase FindVisibleNode(int rowHandle);
    public TreeListNodeBase FindNodeById(int id);
    internal void SetNewNode(TreeListNodeBase node);
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Data.TreeList.TreeListNotificationCollectionBase`1 : NotificationCollectionBase {
    public T Item { get; }
    protected TreeListNotificationCollectionBase`1(CollectionChangeEventHandler collectionChanged);
    public T get_Item(int index);
    public void ClearAndAddRange(IList`1<T> items);
    public void AddRange(IList`1<T> items);
    [IteratorStateMachineAttribute("DevExpress.Data.TreeList.TreeListNotificationCollectionBase`1/<System-Collections-Generic-IEnumerable<T>-GetEnumerator>d__5")]
private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
}
public class DevExpress.Data.TreeList.TreeListSearchDisplayTextPropertyDescriptor : TreeListDisplayTextPropertyDescriptor {
    private string originalName;
    public TreeListSearchDisplayTextPropertyDescriptor(TreeListDataControllerBase controller, string name);
    protected virtual object GetValueCore(TreeListNodeBase node);
    private static string AddPrefix(string name);
}
public class DevExpress.Data.TreeList.TreeListSummaryAvgValue : TreeListSummarySumValue {
    private int count;
    private int oldCountValue;
    private object value;
    public object Value { get; }
    public TreeListSummaryAvgValue(TreeListSummaryItem summaryItem, TreeListDataControllerBase controller);
    public virtual object get_Value();
    public virtual void Start(TreeListNodeBase node);
    public virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void BackUp();
    public virtual void Finish(TreeListNodeBase node);
    public virtual void Calculate(TreeListSummaryValue val, bool summariesIgnoreNullValues);
    public virtual void UpdateIncremental(TreeListSummaryValue baseValue);
}
public class DevExpress.Data.TreeList.TreeListSummaryCountValue : TreeListSummaryValue {
    private int count;
    public object Value { get; }
    public TreeListSummaryCountValue(TreeListSummaryItem summaryItem);
    public virtual object get_Value();
    public virtual void BackUp();
    public virtual void Start(TreeListNodeBase node);
    public virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void UpdateIncremental(TreeListSummaryValue baseValue);
    public virtual void Calculate(TreeListSummaryValue val, bool summariesIgnoreNullValues);
}
public class DevExpress.Data.TreeList.TreeListSummaryCustomValue : TreeListSummaryValue {
    private IDataProvider dataProvider;
    private object value;
    public object Value { get; }
    protected IDataProvider DataProvider { get; }
    public TreeListSummaryCustomValue(TreeListSummaryItem summaryItem, IDataProvider clientContol);
    public virtual object get_Value();
    protected IDataProvider get_DataProvider();
    public virtual void Start(TreeListNodeBase node);
    public virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void Finish(TreeListNodeBase node);
    private void RaiseEvent(TreeListNodeBase node, CustomSummaryProcess process);
}
public class DevExpress.Data.TreeList.TreeListSummaryDateTimeAvarage : TreeListSummaryValue {
    private Tuple`2<decimal, int> current;
    private object result;
    public object Value { get; }
    public TreeListSummaryDateTimeAvarage(TreeListSummaryItem item);
    public virtual object get_Value();
    public virtual void Start(TreeListNodeBase node);
    public virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void Finish(TreeListNodeBase node);
}
public class DevExpress.Data.TreeList.TreeListSummaryItem : SummaryItem {
    [CompilerGeneratedAttribute]
private bool <IsRecursive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTotal>k__BackingField;
    public bool IsRecursive { get; public set; }
    public bool IsTotal { get; public set; }
    public Nullable`1<bool> AllowIgnoreNullValues { get; public set; }
    public TreeListSummaryItem(DataColumnInfo columnInfo, SummaryItemTypeEx summaryType, decimal argument, Nullable`1<bool> ignoreNullValues, bool isRecursive);
    public TreeListSummaryItem(DataColumnInfo columnInfo, SummaryItemType summaryType, Nullable`1<bool> ignoreNullValues, bool isRecursive);
    [CompilerGeneratedAttribute]
public bool get_IsRecursive();
    [CompilerGeneratedAttribute]
public void set_IsRecursive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTotal();
    [CompilerGeneratedAttribute]
public void set_IsTotal(bool value);
    public Nullable`1<bool> get_AllowIgnoreNullValues();
    public void set_AllowIgnoreNullValues(Nullable`1<bool> value);
    public bool ShouldIgnoreNullValues(bool defaultValue);
}
public class DevExpress.Data.TreeList.TreeListSummaryItemCollection : TreeListNotificationCollectionBase`1<TreeListSummaryItem> {
    public TreeListSummaryItemCollection(CollectionChangeEventHandler collectionChanged);
    public TreeListSummaryItem GetSummaryItemByTag(object tag);
    public TreeListSummaryItem Add(TreeListSummaryItem item);
}
public class DevExpress.Data.TreeList.TreeListSummaryMaxValue : TreeListSummaryValue {
    private object max;
    public object Value { get; }
    public TreeListSummaryMaxValue(TreeListSummaryItem summaryItem);
    public virtual void Start(TreeListNodeBase node);
    public virtual object get_Value();
    public virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void Calculate(TreeListSummaryValue val, bool summariesIgnoreNullValues);
}
public class DevExpress.Data.TreeList.TreeListSummaryMinValue : TreeListSummaryValue {
    private object min;
    public object Value { get; }
    public TreeListSummaryMinValue(TreeListSummaryItem summaryItem);
    public virtual object get_Value();
    public virtual void Start(TreeListNodeBase node);
    public virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void Calculate(TreeListSummaryValue val, bool summariesIgnoreNullValues);
}
public class DevExpress.Data.TreeList.TreeListSummarySumValue : TreeListSummaryValue {
    private object sum;
    protected bool isTimeSpan;
    protected object Sum { get; protected set; }
    public object Value { get; }
    public TreeListSummarySumValue(TreeListSummaryItem summaryItem, TreeListDataControllerBase controller);
    public virtual void Start(TreeListNodeBase node);
    public virtual void BackUp();
    protected object get_Sum();
    protected void set_Sum(object value);
    public virtual object get_Value();
    public virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void Calculate(TreeListSummaryValue val, bool summariesIgnoreNullValues);
    public virtual void UpdateIncremental(TreeListSummaryValue baseValue);
    protected object CalcDiff(object value1, object value2);
    protected object CalcSum(object value1, object value2);
    protected bool IsTimeSpanType(Type type);
    protected Type GetDataType(TreeListDataControllerBase controller);
}
public class DevExpress.Data.TreeList.TreeListSummaryTopAndBottomValues : TreeListSummaryValue {
    private List`1<object> values;
    private object result;
    [CompilerGeneratedAttribute]
private bool <GetBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPercentArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Argument>k__BackingField;
    public object Value { get; }
    protected bool GetBottom { get; private set; }
    protected bool IsPercentArgument { get; private set; }
    protected int Argument { get; private set; }
    public TreeListSummaryTopAndBottomValues(TreeListSummaryItem item, bool getBottom, bool isPercentArgument, int argument);
    public virtual object get_Value();
    [CompilerGeneratedAttribute]
protected bool get_GetBottom();
    [CompilerGeneratedAttribute]
private void set_GetBottom(bool value);
    [CompilerGeneratedAttribute]
protected bool get_IsPercentArgument();
    [CompilerGeneratedAttribute]
private void set_IsPercentArgument(bool value);
    [CompilerGeneratedAttribute]
protected int get_Argument();
    [CompilerGeneratedAttribute]
private void set_Argument(int value);
    public virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void Finish(TreeListNodeBase node);
}
public class DevExpress.Data.TreeList.TreeListSummaryUniqueDuplicate : TreeListSummaryValue {
    private List`1<object> values;
    private object result;
    [CompilerGeneratedAttribute]
private bool <Duplicates>k__BackingField;
    public object Value { get; }
    protected bool Duplicates { get; private set; }
    public TreeListSummaryUniqueDuplicate(TreeListSummaryItem item, bool duplicates);
    public virtual object get_Value();
    [CompilerGeneratedAttribute]
protected bool get_Duplicates();
    [CompilerGeneratedAttribute]
private void set_Duplicates(bool value);
    public virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void Finish(TreeListNodeBase node);
}
public abstract class DevExpress.Data.TreeList.TreeListSummaryValue : object {
    protected static ValueComparer Comparer;
    protected object StartValue;
    private TreeListSummaryItem summaryItem;
    [CompilerGeneratedAttribute]
private bool <IsTotalValueReady>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public bool IsTotalValueReady { get; protected set; }
    public TreeListSummaryItem SummaryItem { get; }
    protected string FieldName { get; }
    public object Value { get; }
    public object OldValue { get; protected set; }
    public bool IsValid { get; public set; }
    public TreeListSummaryValue(TreeListSummaryItem summaryItem);
    private static TreeListSummaryValue();
    [CompilerGeneratedAttribute]
public bool get_IsTotalValueReady();
    [CompilerGeneratedAttribute]
protected void set_IsTotalValueReady(bool value);
    public TreeListSummaryItem get_SummaryItem();
    protected string get_FieldName();
    public abstract virtual object get_Value();
    [CompilerGeneratedAttribute]
public object get_OldValue();
    [CompilerGeneratedAttribute]
protected void set_OldValue(object value);
    public virtual void Start(TreeListNodeBase node);
    public virtual void Finish(TreeListNodeBase node);
    public abstract virtual void Calculate(TreeListNodeBase node, bool summariesIgnoreNullValues);
    public virtual void Calculate(TreeListSummaryValue val, bool summariesIgnoreNullValues);
    public virtual void UpdateIncremental(TreeListSummaryValue baseValue);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    public virtual void BackUp();
    protected object GetNodeValue(TreeListNodeBase node);
}
public class DevExpress.Data.TreeList.TreeListUnboundPropertyDescriptor : PropertyDescriptor {
    private UnboundColumnInfo unboundInfo;
    private ExpressionEvaluator evaluator;
    private Type dataType;
    private Exception evaluatorCreateException;
    [CompilerGeneratedAttribute]
private TreeListDataControllerBase <Controller>k__BackingField;
    public bool IsBrowsable { get; }
    protected ExpressionEvaluator Evaluator { get; }
    protected TreeListDataControllerBase Controller { get; private set; }
    public UnboundColumnInfo UnboundInfo { get; }
    public bool IsReadOnly { get; }
    public string Category { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    private bool RequireValueConversion { get; }
    protected internal TreeListUnboundPropertyDescriptor(TreeListDataControllerBase controller, UnboundColumnInfo unboundInfo);
    public virtual bool get_IsBrowsable();
    protected virtual ExpressionEvaluator CreateEvaluator();
    protected ExpressionEvaluator get_Evaluator();
    [CompilerGeneratedAttribute]
protected TreeListDataControllerBase get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(TreeListDataControllerBase value);
    public UnboundColumnInfo get_UnboundInfo();
    public virtual bool get_IsReadOnly();
    public virtual string get_Category();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    private bool get_RequireValueConversion();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    protected virtual object GetEvaluatorValue(TreeListNodeBase node);
    protected object Convert(object value);
}
public class DevExpress.Data.TreeList.TreeListValuePropertyDescriptor : PropertyDescriptor {
    private PropertyDescriptor propertyDescriptor;
    [CompilerGeneratedAttribute]
private TreeListDataControllerBase <Controller>k__BackingField;
    public TreeListDataControllerBase Controller { get; private set; }
    public bool IsReadOnly { get; }
    public string Category { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public TreeListValuePropertyDescriptor(TreeListDataControllerBase controller, PropertyDescriptor descriptor);
    [CompilerGeneratedAttribute]
public TreeListDataControllerBase get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(TreeListDataControllerBase value);
    public virtual bool get_IsReadOnly();
    public virtual string get_Category();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    protected virtual object GetValueCore(TreeListNodeBase node);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.Data.TreeList.UnitypeComplexPropertyDescriptor : TreeListComplexPropertyDescriptor {
    public UnitypeComplexPropertyDescriptor(TreeListDataControllerBase controller, object sourceObject, string path);
    public UnitypeComplexPropertyDescriptor(TreeListDataControllerBase controller, DataControllerBase dataController, string path);
    protected virtual PropertyDescriptor GetDescriptor(string name, object obj, Type type);
}
public class DevExpress.Data.TreeList.UnitypeDataPropertyDescriptor : PropertyDescriptor {
    private Dictionary`2<Type, PropertyDescriptor> descriptorCache;
    private bool isReadOnly;
    private Type propertyType;
    private bool usePropertyType;
    private PropertyDescriptor rootPropertyDescriptor;
    public Type PropertyType { get; }
    public bool IsReadOnly { get; }
    public string Category { get; }
    public Type ComponentType { get; }
    public UnitypeDataPropertyDescriptor(PropertyDescriptor propertyDescriptor, bool usePropertyType);
    public UnitypeDataPropertyDescriptor(string propName, bool isReadOnly);
    public virtual Type get_PropertyType();
    public virtual bool get_IsReadOnly();
    public virtual string get_Category();
    public virtual Type get_ComponentType();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual PropertyDescriptor GetPropertyDescriptor(object component);
    protected Type GetDataType(PropertyDescriptor descriptor);
    protected virtual object ConvertValue(object val, PropertyDescriptor descriptor);
    protected virtual AttributeCollection CreateAttributeCollection();
}
public abstract class DevExpress.Data.UnboundColumnDataEventArgs : EventArgs {
    private bool isGetDataCore;
    private object valueCore;
    public bool IsGetData { get; }
    public bool IsSetData { get; }
    public object Value { get; public set; }
    public Type ValueType { get; }
    protected object RowObject { get; }
    protected string PropertyName { get; }
    protected Func`2<object, bool> ValueTypeValidator { get; }
    protected int RowIndex { get; }
    protected UnboundColumnDataEventArgs(object value, bool isGet);
    public bool get_IsGetData();
    public bool get_IsSetData();
    public object get_Value();
    public void set_Value(object value);
    public abstract virtual Type get_ValueType();
    protected abstract virtual object get_RowObject();
    protected abstract virtual string get_PropertyName();
    protected abstract virtual Func`2<object, bool> get_ValueTypeValidator();
    protected abstract virtual int get_RowIndex();
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Data.UnboundColumnDataTypeConverter : TypeListConverter {
    public static string None;
    private static Type[] unboundTypes;
    private static UnboundColumnDataTypeConverter();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object val);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destType);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    internal static Type GetType(ITypeDescriptorContext context, string str);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Data.UnboundColumnDataTypeValidator : object {
    private static ConcurrentDictionary`2<Type, Func`2<object, bool>> validationRoutines;
    private static Func`2<Type, Func`2<object, bool>> _Builder;
    [CompilerGeneratedAttribute]
private static bool <AllowInvalidTypes>k__BackingField;
    [ObsoleteAttribute("The invalid type detection for unbound columns is disabled. You may encounter errors if you set inconsistent values to unbound columns.")]
public static bool AllowInvalidTypes { get; public set; }
    private static UnboundColumnDataTypeValidator();
    public static Func`2<object, bool> Factory(Type type);
    private static Func`2<object, bool> CreateValidationRoutine(Type type);
    public static void Throw(Type valueType, Type expectedType, string propertyName, int rowIndex);
    [CompilerGeneratedAttribute]
public static bool get_AllowInvalidTypes();
    [CompilerGeneratedAttribute]
public static void set_AllowInvalidTypes(bool value);
}
public class DevExpress.Data.UnboundColumnInfo : object {
    private string name;
    private Type dataType;
    private bool readOnly;
    private string expression;
    private bool requireValueConversion;
    private bool visible;
    private UnboundColumnType columnType;
    private static Type[] dataTypes;
    public bool ReadOnly { get; public set; }
    public bool Visible { get; public set; }
    public string Name { get; public set; }
    public Type DataType { get; public set; }
    public string Expression { get; }
    public bool RequireValueConversion { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public UnboundColumnType ColumnType { get; public set; }
    public UnboundColumnInfo(string name, Type dataType, bool readOnly);
    public UnboundColumnInfo(string name, Type dataType, bool readOnly, string expression);
    public UnboundColumnInfo(string name, Type dataType, bool readOnly, string expression, bool visible);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public UnboundColumnInfo(string name, UnboundColumnType columnType, bool readOnly);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public UnboundColumnInfo(string name, UnboundColumnType columnType, bool readOnly, string expression);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public UnboundColumnInfo(string name, UnboundColumnType columnType, bool readOnly, string expression, bool visible);
    private static UnboundColumnInfo();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public string get_Name();
    public void set_Name(string value);
    public Type get_DataType();
    public void set_DataType(Type value);
    public string get_Expression();
    public bool get_RequireValueConversion();
    public void set_RequireValueConversion(bool value);
    public UnboundColumnType get_ColumnType();
    public void set_ColumnType(UnboundColumnType value);
    protected Type GetDataType();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.UnboundColumnInfoCollection : CollectionBase {
    public UnboundColumnInfo Item { get; }
    public UnboundColumnInfoCollection(UnboundColumnInfo[] infos);
    public int Add(UnboundColumnInfo info);
    public void AddRange(UnboundColumnInfo[] infos);
    public UnboundColumnInfo get_Item(int index);
}
[TypeConverterAttribute("DevExpress.Utils.Design.UnboundColumnTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.Data.UnboundColumnType : Enum {
    public int value__;
    public static UnboundColumnType Bound;
    public static UnboundColumnType Integer;
    public static UnboundColumnType Decimal;
    public static UnboundColumnType DateTime;
    public static UnboundColumnType String;
    public static UnboundColumnType Boolean;
    public static UnboundColumnType Object;
}
public class DevExpress.Data.UnboundCriteriaInliner : AggregatesAsIsBase {
    private Func`2<OperandProperty, CriteriaOperator> GetUnboundCriteria;
    private CriteriaOperator TopMostCriteria;
    private Stack`1<Tuple`2<string, CriteriaOperator>> recursionWatch;
    private UnboundCriteriaInliner(Func`2<OperandProperty, CriteriaOperator> _GetUnboundCriteria, CriteriaOperator _TopMostCriteria);
    public virtual CriteriaOperator Visit(OperandProperty theOperand);
    private static CriteriaOperator GetUnboundCriteriaImpl(DataColumnInfoCollection _columns, OperandProperty prop);
    public static CriteriaOperator Process(CriteriaOperator op, DataColumnInfoCollection columns);
}
public class DevExpress.Data.UnboundErrorObject : object {
    private static string displayText;
    public static UnboundErrorObject Value;
    public static string DisplayText { get; public set; }
    private static UnboundErrorObject();
    public static string get_DisplayText();
    public static void set_DisplayText(string value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[DXToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.UnboundDataSource.bmp")]
[DesignerAttribute("DevExpress.Design.UnboundSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source used to supply and obtain any data to data-aware controls in unbound mode.")]
[DefaultEventAttribute("ValueNeeded")]
public class DevExpress.Data.UnboundSource : Component {
    private UnboundSourceCore core;
    private UnboundSourcePropertyCollection props;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnboundSourceValueNeededEventArgs> ValueNeeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnboundSourceValuePushedEventArgs> ValuePushed;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnboundSourceListChangedEventArgs> UnboundSourceListChanging;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnboundSourceListChangedEventArgs> UnboundSourceListChanged;
    private bool initializing;
    private InitializationState lastInitializationState;
    private IContainer components;
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Gets the collection of the UnboundSource‘s properties.")]
[EditorAttribute("DevExpress.Design.UnboundSourcePropertiesEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public UnboundSourcePropertyCollection Properties { get; }
    internal bool Initializing { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("0")]
public int Count { get; public set; }
    public object Item { get; }
    public UnboundSource(IContainer container);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    protected UnboundSourceCore GetCore();
    protected virtual UnboundSourceCore CreateCore();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public UnboundSourcePropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
public void add_ValueNeeded(EventHandler`1<UnboundSourceValueNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValueNeeded(EventHandler`1<UnboundSourceValueNeededEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ValuePushed(EventHandler`1<UnboundSourceValuePushedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValuePushed(EventHandler`1<UnboundSourceValuePushedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UnboundSourceListChanging(EventHandler`1<UnboundSourceListChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnboundSourceListChanging(EventHandler`1<UnboundSourceListChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UnboundSourceListChanged(EventHandler`1<UnboundSourceListChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnboundSourceListChanged(EventHandler`1<UnboundSourceListChangedEventArgs> value);
    public void Change(int row, string propertyName);
    public void Move(int from, int to);
    public int Add();
    public void InsertAt(int position);
    public void Reset(int countAfterReset);
    public void SetRowCount(int count);
    public void Clear();
    public void RemoveAt(int index);
    internal void Reconfigure(IEnumerable`1<PropertyDescriptorDescriptor> newDescriptorsDescriptors, int rowsAfterReconfigure);
    internal bool get_Initializing();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    public int get_Count();
    public void set_Count(int value);
    public object get_Item(int rowIndex, string propertyName);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <CreateCore>b__6_0(object s, UnboundSourceValueNeededEventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateCore>b__6_1(object s, UnboundSourceValuePushedEventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateCore>b__6_2(object s, UnboundSourceListChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateCore>b__6_3(object s, UnboundSourceListChangedEventArgs e);
}
public class DevExpress.Data.UnboundSourceListChangedEventArgs : ListChangedEventArgs {
    private bool _IsTriggeredByComponentApi;
    public bool IsTriggeredByComponentApi { get; }
    public UnboundSourceListChangedEventArgs(bool isTriggeredByComponentApi, ListChangedType listChangedType, int newIndex, int oldIndex);
    public UnboundSourceListChangedEventArgs(bool isTriggeredByComponentApi, ListChangedType listChangedType, int index, PropertyDescriptor propertyDescriptor);
    public bool get_IsTriggeredByComponentApi();
}
public class DevExpress.Data.UnboundSourceProperty : object {
    private string name;
    private Type propertyType;
    private object userTag;
    private string displayName;
    private UnboundSourcePropertyCollection owner;
    [CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
public string Name { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[EditorAttribute("DevExpress.Utils.Editors.SimpleTypeEditor, DevExpress.Data.Desktop.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Utils.Editors.SimpleToStringTypeConverter, DevExpress.Data.Desktop.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
public Type PropertyType { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[EditorAttribute("DevExpress.Utils.Editors.UIObjectEditor, DevExpress.Data.Desktop.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Utils.Editors.ObjectEditorTypeConverter")]
public object UserTag { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Display")]
public string DisplayName { get; public set; }
    public UnboundSourceProperty(string name);
    public UnboundSourceProperty(string name, Type propertyType);
    internal void SetOwner(UnboundSourcePropertyCollection owner);
    private void UpdateView();
    public string get_Name();
    public void set_Name(string value);
    public Type get_PropertyType();
    public void set_PropertyType(Type value);
    public object get_UserTag();
    public void set_UserTag(object value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("0")]
public class DevExpress.Data.UnboundSourcePropertyCollection : CollectionBase {
    private int muteReconfiguration;
    private int propertyNameCounter;
    private UnboundSource owner;
    private UnboundSourceProperty[] beforeClearItems;
    public UnboundSourceProperty Item { get; }
    public UnboundSourceProperty Item { get; }
    public UnboundSourcePropertyCollection(UnboundSource owner);
    public void ClearAndAddRange(IEnumerable`1<UnboundSourceProperty> properties);
    public void Add(UnboundSourceProperty property);
    public void AddRange(IEnumerable`1<UnboundSourceProperty> properties);
    public void Add(UnboundSourcePropertyCollection properties);
    private string GetNextNewPropertyName();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    private void Mute();
    private void UnMute();
    internal void ReconfigureView();
    public UnboundSourceProperty get_Item(int index);
    public UnboundSourceProperty get_Item(string name);
    private IEnumerable`1<PropertyDescriptorDescriptor> CreateDescriptors();
}
public abstract class DevExpress.Data.UnboundSourceValueNeededEventArgs : EventArgs {
    private int _RowIndex;
    private string _Name;
    private object _Tag;
    private int _PropertyIndex;
    public int RowIndex { get; }
    public string PropertyName { get; }
    public object Tag { get; }
    public int PropertyIndex { get; }
    public object Value { get; public set; }
    private UnboundSourceValueNeededEventArgs(string name, object tag, int propertyIndex);
    internal void Init(int rowIndex);
    protected internal virtual void UnInit();
    public int get_RowIndex();
    public string get_PropertyName();
    public object get_Tag();
    public int get_PropertyIndex();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual void SetValue(T value);
}
public class DevExpress.Data.UnboundSourceValuePushedEventArgs : EventArgs {
    private int _RowIndex;
    private string _Name;
    private object _Tag;
    private object _Value;
    public int RowIndex { get; }
    public string PropertyName { get; }
    public object Tag { get; }
    public object Value { get; }
    protected internal UnboundSourceValuePushedEventArgs(int rowIndex, string name, object tag, object value);
    public int get_RowIndex();
    public string get_PropertyName();
    public object get_Tag();
    public object get_Value();
    internal void Init(int rowIndex, string name, object tag, object value);
    internal void UnInit();
}
public static class DevExpress.Data.Utils.AlignmentConverter : object {
    private static StringAlignment[] hAlign;
    private static StringAlignment[] vAlign;
    private static AlignmentConverter();
    public static StringAlignment HorzAlignmentToStringAlignment(HorzAlignment align);
    public static StringAlignment VertAlignmentToStringAlignment(VertAlignment align);
}
public class DevExpress.Data.Utils.AnnotationAttributes : object {
    private Func`1<IEnumerable`1<Attribute>> maskAttributesFallback;
    private static Func`2<PropertyDescriptor, AnnotationAttributesProvider> propertyDescriptorAnnotationAttributesProviderInitializer;
    private static Func`2<AttributeCollection, AnnotationAttributesProvider> attributeCollectionAnnotationAttributesProviderInitializer;
    [CompilerGeneratedAttribute]
private static DefaultBoolean <AllowValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private static DefaultBoolean <AllowMetadataAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private static DefaultBoolean <AllowExternalAndFluentAttributes>k__BackingField;
    private static Nullable`1<bool> isExternalAndFluentAttributesAllowed;
    private static bool IsConditionallyAPTCAIssueThreat;
    private AnnotationAttributesProvider provider;
    private object dataSourceNullValue;
    private Func`1<IEnumerable`1<Attribute>> filterAttributesFallback;
    private Lazy`1<String[]> filterGrouping;
    private Lazy`1<string> filterGroupingOrigin;
    public static DefaultBoolean AllowValidation { get; public set; }
    public static DefaultBoolean AllowMetadataAttributes { get; public set; }
    public static DefaultBoolean AllowExternalAndFluentAttributes { get; public set; }
    public bool HasDisplayAttribute { get; }
    public string Name { get; }
    public string Description { get; }
    public string ShortName { get; }
    public string GroupName { get; }
    public string Prompt { get; }
    public Nullable`1<int> Order { get; }
    public Nullable`1<bool> AutoGenerateField { get; }
    public Nullable`1<bool> AutoGenerateFilter { get; }
    public bool HasDisplayFormatAttribute { get; }
    public bool ApplyFormatInEditMode { get; }
    public bool ConvertEmptyStringToNull { get; }
    public string DataFormatString { get; }
    public string NullDisplayText { get; }
    public Nullable`1<bool> IsRequired { get; }
    public Nullable`1<bool> AllowEdit { get; }
    public Nullable`1<bool> IsReadOnly { get; }
    public Nullable`1<DataType> DataType { get; }
    public Type EnumType { get; }
    public bool IsKey { get; }
    public string FieldName { get; }
    public AnnotationAttributesKey Key { get; }
    protected bool IsShortNameEmpty { get; }
    protected bool HasShortName { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public String[] FilterGrouping { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string FilterGroupingOrigin { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool IsNonRootedFilterGroupingOrigin { get; }
    private static AnnotationAttributes();
    private AnnotationAttributes(AnnotationAttributesProvider provider);
    public AnnotationAttributes(PropertyDescriptor property);
    public AnnotationAttributes(PropertyDescriptor property, object dataSourceNullValue);
    public AnnotationAttributes(IEnumerable`1<Attribute> attributes);
    public AnnotationAttributes(AttributeCollection attributes);
    protected internal IEnumerable`1<Attribute> GetMaskAttributes();
    private IEnumerable`1<Attribute> GetMaskAttributesCore();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetMaskAttributesFallback(Func`1<IEnumerable`1<Attribute>> fallback);
    [CompilerGeneratedAttribute]
public static DefaultBoolean get_AllowValidation();
    [CompilerGeneratedAttribute]
public static void set_AllowValidation(DefaultBoolean value);
    [CompilerGeneratedAttribute]
public static DefaultBoolean get_AllowMetadataAttributes();
    [CompilerGeneratedAttribute]
public static void set_AllowMetadataAttributes(DefaultBoolean value);
    [CompilerGeneratedAttribute]
public static DefaultBoolean get_AllowExternalAndFluentAttributes();
    [CompilerGeneratedAttribute]
public static void set_AllowExternalAndFluentAttributes(DefaultBoolean value);
    internal static bool DenyAttributesCache(PropertyDescriptor descriptor);
    private static bool DenyMetadataAttributes();
    internal static bool DenyExternalAndFluentAttributes();
    private static void CheckDataAnnotations_ConditionallyAPTCAIssue();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static void ConditionallyAPTCA(Action unsafeAction);
    public bool Any();
    protected internal AttributeCollection GetAttributes();
    public AnnotationAttributes Merge(AnnotationAttributes attributes);
    public bool TryValidateValue(object value, String& errorMessage);
    public bool TryValidateValue(object value, object row, String& errorMessage);
    private object CheckDataSourceNullValue(object value);
    public Nullable`1<bool> CheckAddEnumeratorIntegerValues();
    public Nullable`1<bool> CheckIsDataColumnAllowNull();
    public Nullable`1<bool> CheckIsXpoNullabilityForced();
    public Nullable`1<DataType> GetActualDataType();
    public bool get_HasDisplayAttribute();
    public string get_Name();
    public string get_Description();
    public string get_ShortName();
    public string get_GroupName();
    public string get_Prompt();
    public Nullable`1<int> get_Order();
    public Nullable`1<bool> get_AutoGenerateField();
    public Nullable`1<bool> get_AutoGenerateFilter();
    public bool get_HasDisplayFormatAttribute();
    public bool get_ApplyFormatInEditMode();
    public bool get_ConvertEmptyStringToNull();
    public string get_DataFormatString();
    public string get_NullDisplayText();
    public Nullable`1<bool> get_IsRequired();
    public Nullable`1<bool> get_AllowEdit();
    public Nullable`1<bool> get_IsReadOnly();
    public Nullable`1<DataType> get_DataType();
    public Type get_EnumType();
    public bool get_IsKey();
    public string get_FieldName();
    public AnnotationAttributesKey get_Key();
    protected bool get_IsShortNameEmpty();
    protected bool get_HasShortName();
    public static ColumnOptions GetColumnOptions(PropertyDescriptor columnDescriptor, int columnIndex, bool readOnly);
    public static ColumnOptions GetColumnOptions(Type propertyType, AnnotationAttributes columnAttributes, int columnIndex, bool readOnly);
    public static bool ShouldHideFieldLabel(AnnotationAttributes annotationAttributes);
    public static string GetColumnCaption(AnnotationAttributes annotationAttributes);
    public static string GetColumnDescription(AnnotationAttributes annotationAttributes);
    public static string GetName(AnnotationAttributes annotationAttributes);
    public static string GetShortName(AnnotationAttributes annotationAttributes);
    public static string GetDescription(AnnotationAttributes annotationAttributes);
    public static string GetGroupName(AnnotationAttributes annotationAttributes);
    public static int GetColumnIndex(AnnotationAttributes annotationAttributes, int columnIndex);
    public static bool GetAutoGenerateColumnOrFilter(AnnotationAttributes annotationAttributes);
    public static bool GetAutoGenerateColumn(AnnotationAttributes annotationAttributes);
    public static bool GetAutoGenerateFilter(AnnotationAttributes annotationAttributes);
    public static bool GetApplyFormatInEditMode(AnnotationAttributes annotationAttributes);
    public static string GetNullDisplayText(AnnotationAttributes annotationAttributes);
    public static string GetDataFormatString(AnnotationAttributes annotationAttributes);
    public static Nullable`1<bool> CheckAddEnumeratorIntegerValues(AnnotationAttributes annotationAttributes);
    public static Nullable`1<DataType> GetDataType(AnnotationAttributes annotationAttributes);
    public static IEnumerable`1<TAttribute> GetAttributes(AnnotationAttributes annotationAttributes);
    public static void Reset();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static bool EnableExternalAndFluentAttributes();
    protected internal IEnumerable`1<Attribute> GetFilterAttributes();
    protected internal static AnnotationAttributes GetAnnotationAttributes(Type filterTypeEnum, Enum id);
    private IEnumerable`1<Attribute> GetFilterAttributesCore();
    protected internal FilterGroupAttribute GetFilterGroupAttribute();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetFilterAttributesFallback(Func`1<IEnumerable`1<Attribute>> fallback);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool EnsureFilterGrouping(String[]& grouping);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool EnsureFilterGroupingOrigin(String& origin);
    public String[] get_FilterGrouping();
    public string get_FilterGroupingOrigin();
    public bool get_IsNonRootedFilterGroupingOrigin();
    [CompilerGeneratedAttribute]
private String[] <get_FilterGrouping>b__129_0();
    [CompilerGeneratedAttribute]
private string <get_FilterGroupingOrigin>b__132_0();
}
public class DevExpress.Data.Utils.AnnotationAttributesKey : object {
    internal static AnnotationAttributesKey Empty;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    public string Name { get; private set; }
    public Type ComponentType { get; private set; }
    public Type PropertyType { get; private set; }
    private AnnotationAttributesKey(Type componentType, string name, Type propertyType);
    private static AnnotationAttributesKey();
    public static bool Match(AnnotationAttributesKey key, Type type);
    public static AnnotationAttributesKey FromPropertyDescriptor(PropertyDescriptor descriptor);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_ComponentType();
    [CompilerGeneratedAttribute]
private void set_ComponentType(Type value);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
private void set_PropertyType(Type value);
    public sealed virtual bool Equals(AnnotationAttributesKey other);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    public sealed virtual string ToString();
}
public static class DevExpress.Data.Utils.AssemblyCache : object {
    public static Assembly LoadDXAssembly(string name);
    [EditorBrowsableAttribute("1")]
public static Assembly Load(AssemblyName assemblyName);
    [EditorBrowsableAttribute("1")]
public static Assembly LoadWithPartialName(string partialName);
    public static void Clear();
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Data.Utils.AsyncDownloader`1 : object {
    public static bool IsResourceAvailable(Uri uri, AccessSettings accessContext);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<IsResourceAvailableAsync>d__1")]
public static Task`1<bool> IsResourceAvailableAsync(string localPathOrUriString, CancellationToken cancellationToken, AccessSettings accessContext);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<IsResourceAvailableAsync>d__2")]
public static Task`1<bool> IsResourceAvailableAsync(Uri uri, CancellationToken cancellationToken, AccessSettings accessContext);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<IsResourceAvailableAsyncCore>d__3")]
private static Task`1<bool> IsResourceAvailableAsyncCore(Uri uri, CancellationToken cancellationToken, AccessSettings context);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__4")]
public static Task`1<TValue> LoadAsync(string localPathOrUriString, Func`3<ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, FileLoadOptions<TValue> fileLoadOptions, AccessSettings accessContext);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__5")]
public static Task`1<TValue> LoadAsync(Uri uri, Func`3<ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, FileLoadOptions<TValue> fileLoadOptions, AccessSettings accessContext);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsyncCore>d__6")]
private static Task`1<TValue> LoadAsyncCore(Uri uri, Func`3<ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, FileLoadOptions<TValue> fileLoadOptions, AccessSettings context);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__7")]
public static Task`1<TValue> LoadAsync(string absoluteUriString, Func`3<ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, SendMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__8")]
public static Task`1<TValue> LoadAsync(Uri uri, Func`3<ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, SendMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__9")]
public static Task`1<TValue> LoadAsync(string absoluteUriString, Func`4<object, ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, SendMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__10")]
public static Task`1<TValue> LoadAsync(Uri uri, Func`4<object, ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, SendMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsyncCore>d__11")]
private static Task`1<TValue> LoadAsyncCore(Uri uri, Func`4<object, ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, SendMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__12")]
public static Task`1<TValue> LoadAsync(string absoluteUriString, Func`3<ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, PostMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__13")]
public static Task`1<TValue> LoadAsync(Uri uri, Func`3<ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, PostMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__14")]
public static Task`1<TValue> LoadAsync(string absoluteUriString, Func`4<object, ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, PostMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsync>d__15")]
public static Task`1<TValue> LoadAsync(Uri uri, Func`4<object, ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, PostMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<LoadAsyncCore>d__16")]
private static Task`1<TValue> LoadAsyncCore(Uri uri, Func`4<object, ExceptionDispatchInfo, Stream, TValue> handler, CancellationToken cancellationToken, PostMethodOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<ReadAsStreamAsync>d__17")]
public static Task`1<TValue> ReadAsStreamAsync(string absoluteUriString, Func`3<ExceptionDispatchInfo, Stream, StreamValue<TValue>> handler, CancellationToken cancellationToken, ReadStreamOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<ReadAsStreamAsync>d__18")]
public static Task`1<TValue> ReadAsStreamAsync(Uri uri, Func`3<ExceptionDispatchInfo, Stream, StreamValue<TValue>> handler, CancellationToken cancellationToken, ReadStreamOptions<TValue> options);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.AsyncDownloader`1/<ReadAsStreamAsyncCore>d__19")]
private static Task`1<TValue> ReadAsStreamAsyncCore(Uri uri, Func`3<ExceptionDispatchInfo, Stream, StreamValue<TValue>> handler, CancellationToken cancellationToken, ReadStreamOptions<TValue> options);
    public static LifeTime<TValue> CreateLocalLifeTime(Action`1<HttpClientHandler> setup);
    public static LifeTime<TValue> CreateLifeTime(Func`1<HttpClient> createClient, bool global);
    public static LifeTime<TValue> CreateLifeTime(HttpClient client);
    private static bool IsHttpUri(Uri uri);
    private static Uri CreateUri(string localPathOrAbsoluteUriString, AccessSettings accessContext);
    private static Uri CreateUri(string localPathOrAbsoluteUriString);
    public static IDisposable CreateScope(string uri);
    public static IDisposable CreateScope(Uri uri);
    public static IDisposable CreateScope(Uri[] uris);
}
public class DevExpress.Data.Utils.BackEase : object {
    public sealed virtual double Ease(double normalizedTime);
}
public class DevExpress.Data.Utils.BounceEase : object {
    public sealed virtual double Ease(double normalizedTime);
}
public class DevExpress.Data.Utils.CircleEase : object {
    public sealed virtual double Ease(double normalizedTime);
}
public class DevExpress.Data.Utils.CollectionChangedWeakEventHandler`1 : WeakEventHandler`3<TOwner, NotifyCollectionChangedEventArgs, NotifyCollectionChangedEventHandler> {
    private static Action`2<WeakEventHandler`3<TOwner, NotifyCollectionChangedEventArgs, NotifyCollectionChangedEventHandler>, object> action;
    private static Func`2<WeakEventHandler`3<TOwner, NotifyCollectionChangedEventArgs, NotifyCollectionChangedEventHandler>, NotifyCollectionChangedEventHandler> create;
    public CollectionChangedWeakEventHandler`1(TOwner owner, Action`3<TOwner, object, NotifyCollectionChangedEventArgs> onEventAction);
    private static CollectionChangedWeakEventHandler`1();
}
public static class DevExpress.Data.Utils.CriteriaOperatorToExpressionConverter : object {
    public static Expression`1<Func`2<T, bool>> GetWhere(CriteriaOperator criteria, ICriteriaToExpressionConverter converter);
    public static Expression`1<Func`2<T, bool>> GetGenericWhere(CriteriaOperator criteria);
    public static Expression`1<Func`2<T, bool>> GetLinqToObjectsWhere(CriteriaOperator criteria);
    public static Expression`1<Func`2<T, bool>> GetEntityFrameworkWhere(CriteriaOperator criteria);
    public static Expression`1<Func`2<T, TResult>> GetLambda(CriteriaOperator criteria, ICriteriaToExpressionConverter converter);
    public static Expression`1<Func`2<T, TResult>> GetGenericLambda(CriteriaOperator criteria);
    public static Expression`1<Func`2<T, TResult>> GetLinqToObjectsLambda(CriteriaOperator criteria);
    public static Expression`1<Func`2<T, TResult>> GetEntityFrameworkLambda(CriteriaOperator criteria);
    private static ICriteriaToExpressionConverter GetLinqToObjectsConverter();
    private static ICriteriaToExpressionConverter GetGenericConverter();
    private static ICriteriaToExpressionConverter GetEntityFrameworkConverter();
}
public class DevExpress.Data.Utils.CubicEase : PowerEase {
}
public static class DevExpress.Data.Utils.DXAssemblies : object {
    private static Assembly xpfCore;
    private static Assembly design;
    private static Assembly dataDesktop;
    private static Assembly dataAccess;
    private static Assembly dataAccessUI;
    private static Assembly richEdit;
    private static Assembly bars;
    private static Assembly utils;
    private static Assembly bonusSkins;
    private static Assembly pdfDrawing;
    private static Assembly printing;
    public static Assembly XpfCore { get; }
    public static Assembly Design { get; }
    public static Assembly DataDesktop { get; }
    public static Assembly DataAccess { get; }
    public static Assembly DataAccessUI { get; }
    public static Assembly RichEdit { get; }
    public static Assembly Bars { get; }
    public static Assembly Utils { get; }
    public static Assembly BonusSkins { get; }
    public static Assembly PdfDrawing { get; }
    public static Assembly Printing { get; }
    public static Assembly get_XpfCore();
    public static Assembly get_Design();
    public static Assembly get_DataDesktop();
    public static Assembly get_DataAccess();
    public static Assembly get_DataAccessUI();
    public static Assembly get_RichEdit();
    public static Assembly get_Bars();
    public static Assembly get_Utils();
    public static Assembly get_BonusSkins();
    public static Assembly get_PdfDrawing();
    public static Assembly get_Printing();
}
public static class DevExpress.Data.Utils.DXDependencies : object {
    private static Assembly newtonsoftJson;
    private static Assembly dataSQLite;
    private static Assembly dataSQLiteEF6;
    public static Assembly NewtonsoftJson { get; }
    public static Assembly DataSQLite { get; }
    public static Assembly DataSQLiteEF6 { get; }
    public static Assembly get_NewtonsoftJson();
    public static Assembly get_DataSQLite();
    public static Assembly get_DataSQLiteEF6();
}
public static class DevExpress.Data.Utils.EaseHelper : object {
    public static EasingMode GetEasingMode(int index);
    public static double Ease(EasingMode easingMode, IEasingFunction easingFunction, double normalizedTime);
}
public enum DevExpress.Data.Utils.EasingMode : Enum {
    public int value__;
    public static EasingMode EaseIn;
    public static EasingMode EaseOut;
    public static EasingMode EaseInOut;
}
public class DevExpress.Data.Utils.ElasticEase : object {
    public sealed virtual double Ease(double normalizedTime);
}
[ExtensionAttribute]
public static class DevExpress.Data.Utils.EnvironmentPolicy : object {
    private static object syncObj;
    private static int throwOnErrorsCounter;
    private static int setEnvironmentVariablesSuppressionCounter;
    private static int getEnvironmentVariablesSuppressionCounter;
    private static int readCurrentProcessDataSuppressionCounter;
    private static int exitProcessSuppressionCounter;
    private static int setCurrentDirectorySuppressionCounter;
    internal static ConcurrentDictionary`2<SpecialFolder, int> specialFolderSuppressions;
    private static Lazy`1<EnvironmentAllowedContext> registrations;
    internal static bool IsSettingEnvironmentVariablesSuppressed { get; }
    internal static bool IsGettingEnvironmentVariablesSuppressed { get; }
    internal static bool IsReadingCurrentProcessDataSuppressed { get; }
    internal static bool IsExitProcessSuppressed { get; }
    internal static bool IsSettingCurrentDirectorySuppressed { get; }
    [EditorBrowsableAttribute("2")]
public static bool ShouldThrowOnErrors { get; }
    private static EnvironmentAllowedContext Registrations { get; }
    private static EnvironmentPolicy();
    public static void ThrowAlways();
    public static void ThrowOnErrors();
    public static void SuppressAll();
    [EditorBrowsableAttribute("2")]
public static void SuppressSettingEnvironmentVariables();
    internal static bool get_IsSettingEnvironmentVariablesSuppressed();
    [EditorBrowsableAttribute("2")]
public static void SuppressGettingEnvironmentVariables();
    internal static bool get_IsGettingEnvironmentVariablesSuppressed();
    [EditorBrowsableAttribute("2")]
public static void SuppressReadingCurrentProcessData();
    internal static bool get_IsReadingCurrentProcessDataSuppressed();
    [EditorBrowsableAttribute("2")]
public static void SuppressExitProcess();
    internal static bool get_IsExitProcessSuppressed();
    [EditorBrowsableAttribute("2")]
public static void SuppressSettingCurrentDirectory();
    internal static bool get_IsSettingCurrentDirectorySuppressed();
    [EditorBrowsableAttribute("2")]
public static void SuppressReadingSpecialFolder(SpecialFolder folder);
    internal static bool IsReadingSpecialFolderSuppressed(SpecialFolder folder);
    public static bool get_ShouldThrowOnErrors();
    public static void add_SettingVariable(EventHandler`1<SettingEnvironmentVariableRequestEventArgs> value);
    public static void remove_SettingVariable(EventHandler`1<SettingEnvironmentVariableRequestEventArgs> value);
    public static void add_SetVariable(EventHandler`1<SetEnvironmentVariableEventArgs> value);
    public static void remove_SetVariable(EventHandler`1<SetEnvironmentVariableEventArgs> value);
    public static void add_GettingVariable(EventHandler`1<GettingEnvironmentVariableRequestEventArgs> value);
    public static void remove_GettingVariable(EventHandler`1<GettingEnvironmentVariableRequestEventArgs> value);
    public static void add_GotVariable(EventHandler`1<GotEnvironmentVariableEventArgs> value);
    public static void remove_GotVariable(EventHandler`1<GotEnvironmentVariableEventArgs> value);
    public static void add_ExpandingVariables(EventHandler`1<ExpandingEnvironmentVariablesRequestEventArgs> value);
    public static void remove_ExpandingVariables(EventHandler`1<ExpandingEnvironmentVariablesRequestEventArgs> value);
    public static void add_ExpandedVariables(EventHandler`1<ExpandedEnvironmentVariablesEventArgs> value);
    public static void remove_ExpandedVariables(EventHandler`1<ExpandedEnvironmentVariablesEventArgs> value);
    public static void add_ReadingSpecialFolder(EventHandler`1<SpecialFolderRequestEventArgs> value);
    public static void remove_ReadingSpecialFolder(EventHandler`1<SpecialFolderRequestEventArgs> value);
    public static void add_ReadSpecialFolder(EventHandler`1<SpecialFolderEventArgs> value);
    public static void remove_ReadSpecialFolder(EventHandler`1<SpecialFolderEventArgs> value);
    public static void add_ReadingCurrentProcessData(EventHandler`1<ReadingCurrentProcessDataEventArgs> value);
    public static void remove_ReadingCurrentProcessData(EventHandler`1<ReadingCurrentProcessDataEventArgs> value);
    public static void add_ReadCurrentProcessData(EventHandler`1<ReadCurrentProcessDataEventArgs> value);
    public static void remove_ReadCurrentProcessData(EventHandler`1<ReadCurrentProcessDataEventArgs> value);
    public static void add_SettingCurrentDirectory(EventHandler`1<PathRequestEventArgs> value);
    public static void remove_SettingCurrentDirectory(EventHandler`1<PathRequestEventArgs> value);
    public static void add_SetCurrentDirectory(EventHandler`1<PathEventArgs> value);
    public static void remove_SetCurrentDirectory(EventHandler`1<PathEventArgs> value);
    public static void add_ExitingProcess(EventHandler`1<ExitingProcessEventArgs> value);
    public static void remove_ExitingProcess(EventHandler`1<ExitingProcessEventArgs> value);
    public static void add_Failed(EventHandler`1<FailedEventArgs> value);
    public static void remove_Failed(EventHandler`1<FailedEventArgs> value);
    private static EnvironmentAllowedContext get_Registrations();
    private static EnvironmentAllowedContext CreateRegistrations();
    [ExtensionAttribute]
private static bool IsAllowedByDefault(SpecialFolder folder);
}
public class DevExpress.Data.Utils.ExponentialEase : object {
    public sealed virtual double Ease(double normalizedTime);
}
public enum DevExpress.Data.Utils.ExpressionKind : Enum {
    public int value__;
    public static ExpressionKind Simple;
    public static ExpressionKind EF;
    public static ExpressionKind LinqToObjects;
}
public static class DevExpress.Data.Utils.FrameworkAssemblies : object {
    private static Assembly winForms;
    private static Assembly windowsBase;
    private static Assembly presentationCore;
    private static Assembly presentationFramework;
    public static Assembly mscorlib { get; }
    public static Assembly WinForms { get; }
    public static Assembly WindowsBase { get; }
    public static Assembly PresentationCore { get; }
    public static Assembly PresentationFramework { get; }
    public static Assembly get_mscorlib();
    public static Assembly get_WinForms();
    private static Assembly TryGetWinForms();
    public static Assembly get_WindowsBase();
    private static Assembly TryGetWindowsBase();
    public static Assembly get_PresentationCore();
    private static Assembly TryGetPresentationCore();
    public static Assembly get_PresentationFramework();
    private static Assembly TryGetPresentationFramework();
}
public static class DevExpress.Data.Utils.FrameworkTypes : object {
    private static Assembly DateTimeAssembly;
    private static Type dateOnlyType;
    private static Type timeOnlyType;
    public static Type DateOnlyType { get; }
    public static Type TimeOnlyType { get; }
    private static FrameworkTypes();
    public static Type get_DateOnlyType();
    public static Type get_TimeOnlyType();
}
public static class DevExpress.Data.Utils.FrameworkVersions : object {
    private static ConcurrentDictionary`2<Type, bool> isNetCore3AndAboveCacheByType;
    private static Nullable`1<bool> isMonoRuntime;
    public static bool IsMonoRuntime { get; }
    private static FrameworkVersions();
    public static bool IsFullFramework();
    public static bool IsNetCore3AndAbove();
    public static bool IsNetCore3AndAbove(Type type);
    public static bool get_IsMonoRuntime();
}
[AttributeUsageAttribute("32767")]
[ConditionalAttribute("DEBUGTEST")]
public class DevExpress.Data.Utils.FxCopSpellCheckingIgnoreAttribute : Attribute {
}
public class DevExpress.Data.Utils.Helpers : object {
    private static ConcurrentDictionary`2<Type, Array> enumGenericValuesCache;
    private static ConcurrentDictionary`2<Type, Enum[]> enumValuesCache;
    private static Helpers();
    public static T[] GetEnumValues();
    public static T[] GetEnumValues(bool useCache);
    public static Enum[] GetEnumValues(Type enumType);
    public static Enum[] GetEnumValues(Type enumType, bool useCache);
    private static Enum[] GetEnumValuesCore(Type enumType);
    public static String[] GetEnumNames(Type enumType);
    [EditorBrowsableAttribute("1")]
public static Assembly LoadWithPartialName(string partialName, bool throwException);
}
public static class DevExpress.Data.Utils.HttpRequestHelper : object {
    public static Byte[] Send(Uri uri, HttpMethod method, Action`1<HttpRequestMessage> setup);
    [AsyncStateMachineAttribute("DevExpress.Data.Utils.HttpRequestHelper/<SendAsync>d__1")]
public static Task`1<Byte[]> SendAsync(Uri uri, HttpMethod method, Action`1<HttpRequestMessage> setup);
}
public interface DevExpress.Data.Utils.IConnectionStringsService {
    public abstract virtual void PatchDataDirectory();
    public abstract virtual void RestoreDataDirectory();
    public abstract virtual void PatchConnection();
    public abstract virtual void RestoreConnection();
}
public interface DevExpress.Data.Utils.IDataDirectoryPatchingService {
    public abstract virtual string PatchPath(string path);
}
public interface DevExpress.Data.Utils.IEasingFunction {
    public abstract virtual double Ease(double normalizedTime);
}
public class DevExpress.Data.Utils.ImageTool : object {
    private static int MM_ANISOTROPIC;
    private static bool IsWin7 { get; }
    public static RectangleF CalculateImageRect(RectangleF clientRect, SizeF imageSize, ImageSizeMode sizeMode);
    public static RectangleF CalculateImageRectCore(RectangleF clientRect, SizeF imageSize, ImageSizeMode sizeMode);
    public static RectangleF CalculateImageRect(RectangleF clientRect, SizeF imageSize, ImageSizeMode sizeMode, ImageAlignment alignment);
    public static RectangleF CalculateImageRectCore(RectangleF clientRect, SizeF imageSize, ImageSizeMode sizeMode, ImageAlignment alignment);
    public static Byte[] ToArray(Image img);
    public static Byte[] ToArray(Image img, ImageFormat format);
    private static Byte[] GetIconImageArray(Image img);
    private static Byte[] ToArrayCore(Image img, ImageFormat format);
    public static void SaveImage(Image img, Stream stream, ImageFormat format);
    public static Image FromArray(Byte[] buffer);
    protected static Image FromArrayCore(Byte[] buffer, int offset);
    public static Image ImageFromStream(Stream stream);
    public static Image ImageFromStream(Stream stream, bool useEmbeddedColorManagement);
    private static bool get_IsWin7();
    private static Byte[] GetWmfImageArray(Image image);
    private static UInt32 GdipEmfToWmfBits(IntPtr hemf, UInt32 bufferSize, Byte[] buffer, int mappingMode, EmfToWmfBitsFlags flags);
    private static bool DeleteEnhMetaFile(IntPtr hemf);
    private static bool DeleteMetaFile(IntPtr hmf);
    private static int GetEnhMetaFileBits(IntPtr hemf, int cbBuffer, Byte[] lpbBuffer);
    private static int GetMetaFileBitsEx(IntPtr hmf, int cbBuffer, Byte[] lpbBuffer);
    private static ImageCodecInfo FindEncoder(ImageFormat format);
    [SecuritySafeCriticalAttribute]
internal static Byte[] GetMetafileArray(Metafile srcMetafile);
    private static Byte[] CorrectPlaceableWmf(Metafile mf, Byte[] data);
    private static ushort CalcWmfHeaderChecksum(Byte[] headerBytes);
}
public class DevExpress.Data.Utils.InteropAssemblyInfo : object {
    [CompilerGeneratedAttribute]
private InteropAssemblyScope[] <Scopes>k__BackingField;
    public static InteropAssemblyInfo Instance;
    public InteropAssemblyScope[] Scopes { get; }
    private static InteropAssemblyInfo();
    [CompilerGeneratedAttribute]
public InteropAssemblyScope[] get_Scopes();
}
[DebuggerDisplayAttribute("InteropAssemblyScope(MinVersion={MinVersion},MaxVersion={MaxVersion})")]
public class DevExpress.Data.Utils.InteropAssemblyScope : object {
    public int MinVersion;
    public int MaxVersion;
    public string Assembly;
    public InteropAssemblyScope(int minVersion, int maxVersion, string assembly);
}
public interface DevExpress.Data.Utils.ISyntaxError {
    public int Line { get; }
    public int Column { get; }
    public abstract virtual int get_Line();
    public abstract virtual int get_Column();
}
public interface DevExpress.Data.Utils.IToolItem {
    public Guid Kind { get; }
    public abstract virtual Guid get_Kind();
    public abstract virtual void InitTool();
    public abstract virtual void UpdateView();
    public abstract virtual void Hide();
    public abstract virtual void Close();
    public abstract virtual void ShowNoActivate();
    public abstract virtual void ShowActivate();
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Data.Utils.IToolShell {
    public IToolItem Item { get; }
    public abstract virtual IToolItem get_Item(Guid itemKind);
    public abstract virtual void ShowNoActivate();
    public abstract virtual void Hide();
    public abstract virtual void HideIfNotContains(IToolShell anotherToolShell);
    public abstract virtual void Close();
    public abstract virtual void AddToolItem(IToolItem item);
    public abstract virtual void RemoveToolItem(Guid itemKind);
    public abstract virtual void InitToolItems();
    public abstract virtual void UpdateToolItems();
}
public interface DevExpress.Data.Utils.IValueLoader {
    public abstract virtual object Load();
}
public interface DevExpress.Data.Utils.IWeakEventHandler`1 {
    public THandler Handler { get; }
    public abstract virtual THandler get_Handler();
}
public class DevExpress.Data.Utils.ListChangedWeakEventHandler`1 : WeakEventHandler`3<TOwner, ListChangedEventArgs, ListChangedEventHandler> {
    private static Action`2<WeakEventHandler`3<TOwner, ListChangedEventArgs, ListChangedEventHandler>, object> action;
    private static Func`2<WeakEventHandler`3<TOwner, ListChangedEventArgs, ListChangedEventHandler>, ListChangedEventHandler> create;
    public ListChangedWeakEventHandler`1(TOwner owner, Action`3<TOwner, object, ListChangedEventArgs> onEventAction);
    private static ListChangedWeakEventHandler`1();
}
public static class DevExpress.Data.Utils.MarkupLanguageColorParser : object {
    public static Color ParseColor(string value);
    private static Color GetColorByName(string value);
    private static int GetColor(string colorName, int startIndex);
    private static Color GetColorByRgb(string colorName);
    private static Color GetColorByArgb(string colorName);
    private static Color ParseRGB(string value);
}
public class DevExpress.Data.Utils.NonCryptographicRandom : object {
    private Random random;
    [ThreadStaticAttribute]
private static NonCryptographicRandom _default;
    [ThreadStaticAttribute]
private static NonCryptographicRandom _systemBased;
    public static NonCryptographicRandom Default { get; }
    public static NonCryptographicRandom System { get; }
    public NonCryptographicRandom(int seed);
    public static NonCryptographicRandom get_Default();
    public static NonCryptographicRandom get_System();
    public int Next();
    public int Next(int maxValue);
    public int Next(int minValue, int maxValue);
    public void NextBytes(Byte[] buffer);
    public double NextDouble();
    public string NextString(int length);
    public Byte[] NextBytes(int count);
}
public static class DevExpress.Data.Utils.PlatformHelpers : object {
    private static int win10major;
    private static int win10minor;
    private static Lazy`1<Version> m_icuVersion;
    private static Version windowsVersionFromOSDescription;
    private static Char[] splitChars;
    public static bool IsWindows { get; }
    public static bool IsMacOS { get; }
    public static bool IsLinux { get; }
    public static bool IsIOS { get; }
    public static bool IsAndroid { get; }
    public static bool IsNet8OrGreater { get; }
    public static bool IsNet9OrGreater { get; }
    public static bool IsWin8OrHigher { get; }
    public static bool IsWin10OrHigher { get; }
    public static bool IsWin10CreatorsOrHigher { get; }
    public static bool IsWin10FallCreatorsOrHigher { get; }
    public static bool IsWin10May2019OrHigher { get; }
    public static bool IsWin10May2020OrHigher { get; }
    public static bool IsWin11 { get; }
    public static bool IsWin11October2022OrHigher { get; }
    public static bool IsIcuCompatiblePlatform { get; }
    public static Version ICUVersion { get; }
    public static bool IsIcuGlobalization { get; }
    public static bool IsNlsGlobalization { get; }
    private static PlatformHelpers();
    public static bool get_IsWindows();
    public static bool get_IsMacOS();
    public static bool get_IsLinux();
    public static bool get_IsIOS();
    public static bool get_IsAndroid();
    private static Version GetICUVersion();
    private static string GetOsDescription();
    public static bool get_IsNet8OrGreater();
    public static bool get_IsNet9OrGreater();
    public static bool get_IsWin8OrHigher();
    public static bool get_IsWin10OrHigher();
    public static bool get_IsWin10CreatorsOrHigher();
    public static bool get_IsWin10FallCreatorsOrHigher();
    public static bool get_IsWin10May2019OrHigher();
    public static bool get_IsWin10May2020OrHigher();
    public static bool get_IsWin11();
    public static bool get_IsWin11October2022OrHigher();
    public static bool get_IsIcuCompatiblePlatform();
    public static Version get_ICUVersion();
    public static bool get_IsIcuGlobalization();
    public static bool get_IsNlsGlobalization();
    public static bool IsIcuBased(CultureInfo currentCulture);
    public static bool IsNlsBased(CultureInfo currentCulture);
    private static bool CompareWindowsVersions(Version version);
    private static Version GetWindowsVersionFromOSDescription();
}
public class DevExpress.Data.Utils.PowerEase : object {
    protected int degree;
    public PowerEase(int newDegree);
    public virtual double Ease(double normalizedTime);
}
public class DevExpress.Data.Utils.ProcessStartConfirmationLocalizer : XtraLocalizer`1<ProcessStartConfirmationStringId> {
    public static XtraLocalizer`1<ProcessStartConfirmationStringId> Active { get; public set; }
    private static ProcessStartConfirmationLocalizer();
    public static XtraLocalizer`1<ProcessStartConfirmationStringId> CreateDefaultLocalizer();
    public static XtraLocalizer`1<ProcessStartConfirmationStringId> get_Active();
    public static void set_Active(XtraLocalizer`1<ProcessStartConfirmationStringId> value);
    public static string GetString(ProcessStartConfirmationStringId id);
    public virtual XtraLocalizer`1<ProcessStartConfirmationStringId> CreateResXLocalizer();
    protected virtual void PopulateStringTable();
}
public class DevExpress.Data.Utils.ProcessStartConfirmationResXLocalizer : XtraResXLocalizer`1<ProcessStartConfirmationStringId> {
    private static string baseName;
    protected virtual ResourceManager CreateResourceManagerCore();
}
public enum DevExpress.Data.Utils.ProcessStartConfirmationStringId : Enum {
    public int value__;
    public static ProcessStartConfirmationStringId Title;
    public static ProcessStartConfirmationStringId Header;
    public static ProcessStartConfirmationStringId Location;
    public static ProcessStartConfirmationStringId Message;
}
public class DevExpress.Data.Utils.PropertyChangedWeakEventHandler`1 : WeakEventHandler`3<TOwner, PropertyChangedEventArgs, PropertyChangedEventHandler> {
    private static Action`2<WeakEventHandler`3<TOwner, PropertyChangedEventArgs, PropertyChangedEventHandler>, object> action;
    private static Func`2<WeakEventHandler`3<TOwner, PropertyChangedEventArgs, PropertyChangedEventHandler>, PropertyChangedEventHandler> create;
    public PropertyChangedWeakEventHandler`1(TOwner owner, Action`3<TOwner, object, PropertyChangedEventArgs> onEventAction);
    private static PropertyChangedWeakEventHandler`1();
}
public class DevExpress.Data.Utils.QuadraticEase : PowerEase {
}
public class DevExpress.Data.Utils.QuinticEase : PowerEase {
}
public static class DevExpress.Data.Utils.SafeEnvironment : object {
    private static IEnvironment Instance;
    public static string CommandLine { get; }
    public static int ExitCode { get; public set; }
    public static string Desktop { get; }
    public static string DesktopDirectory { get; }
    public static string MyPictures { get; }
    public static string MyDocuments { get; }
    public static string CommonDocuments { get; }
    [EditorBrowsableAttribute("1")]
public static string CommonProgramFiles { get; }
    public static string UserProfile { get; }
    public static string LocalApplicationData { get; }
    public static string ApplicationData { get; }
    public static string ProgramFiles { get; }
    [EditorBrowsableAttribute("1")]
public static string ProgramFilesX86 { get; }
    public static string Programs { get; }
    public static string Windows { get; }
    public static string CurrentDirectory { get; public set; }
    public static string SystemDirectory { get; }
    public static string ProcessPath { get; }
    public static int ProcessId { get; }
    private static SafeEnvironment();
    public static string get_CommandLine();
    public static String[] GetCommandLineArgs();
    public static int get_ExitCode();
    public static void set_ExitCode(int value);
    public static void Exit(int exitCode);
    public static void FailFast(string message, Exception exception);
    public static void SetEnvironmentVariable(string variable, string value, Nullable`1<EnvironmentVariableTarget> target);
    public static string GetEnvironmentVariable(string variable, Nullable`1<EnvironmentVariableTarget> target);
    public static IDictionary GetEnvironmentVariables(Nullable`1<EnvironmentVariableTarget> target);
    public static string ExpandEnvironmentVariables(string name);
    public static string GetUserFolderPath(SpecialFolder userFolder, Nullable`1<SpecialFolderOption> option);
    [EditorBrowsableAttribute("1")]
public static string GetSystemFolderPath(SpecialFolder systemFolder, Nullable`1<SpecialFolderOption> option);
    public static string get_Desktop();
    public static string get_DesktopDirectory();
    public static string get_MyPictures();
    public static string get_MyDocuments();
    public static string get_CommonDocuments();
    public static string get_CommonProgramFiles();
    public static string get_UserProfile();
    public static string get_LocalApplicationData();
    public static string get_ApplicationData();
    public static string get_ProgramFiles();
    public static string get_ProgramFilesX86();
    public static string get_Programs();
    public static string get_Windows();
    public static string get_CurrentDirectory();
    public static void set_CurrentDirectory(string value);
    public static string get_SystemDirectory();
    public static string get_ProcessPath();
    public static int get_ProcessId();
    public static string GetCallStack(int skipFrames);
}
public static class DevExpress.Data.Utils.Security.StrongRandom : object {
    [ThreadStaticAttribute]
private static RandomNumberGenerator s_random;
    private static RandomNumberGenerator EnsureRandomNumberGenerator();
    public static int Next();
    public static int Next(int maxExclusive);
    public static int Next(int minInclusive, int maxExclusive);
    public static double NextDouble();
    public static long NextLong();
    public static string Nonce();
    public static void NextBytes(Byte[] bytes);
}
public class DevExpress.Data.Utils.ServiceModel.ScalarOperationCompletedEventArgs`1 : AsyncCompletedEventArgs {
    private object result;
    public T Result { get; }
    public ScalarOperationCompletedEventArgs`1(object result, Exception error, bool cancelled, object userState);
    public T get_Result();
}
[ExtensionAttribute]
public static class DevExpress.Data.Utils.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static TService GetService(IServiceProvider serviceProvider);
}
public class DevExpress.Data.Utils.SineEase : object {
    public sealed virtual double Ease(double normalizedTime);
}
public class DevExpress.Data.Utils.ToolShell : object {
    protected List`1<IToolItem> toolItems;
    private IToolItem DevExpress.Data.Utils.IToolShell.Item { get; }
    private sealed virtual override IToolItem DevExpress.Data.Utils.IToolShell.get_Item(Guid itemKind);
    protected IToolItem GetItemBy(Guid itemKind);
    public sealed virtual void RemoveToolItem(Guid itemKind);
    public virtual void ShowNoActivate();
    protected void ShowNoActivate(IToolItem obj);
    public sealed virtual void Hide();
    public sealed virtual void HideIfNotContains(IToolShell anotherToolShell);
    public sealed virtual void Close();
    public sealed virtual void AddToolItem(IToolItem item);
    public sealed virtual void InitToolItems();
    public virtual void UpdateToolItems();
    public virtual void Dispose();
}
public class DevExpress.Data.Utils.ValueHolder : object {
    private object value;
    private IValueLoader loader;
    public object Value { get; }
    public ValueHolder(IValueLoader loader);
    public virtual object get_Value();
}
public class DevExpress.Data.Utils.WeakEventHandler`3 : object {
    private WeakReference ownerReference;
    private Action`2<WeakEventHandler`3<TOwner, TEventArgs, THandler>, object> onDetachAction;
    private Action`3<TOwner, object, TEventArgs> onEventAction;
    [CompilerGeneratedAttribute]
private THandler <Handler>k__BackingField;
    public THandler Handler { get; private set; }
    public WeakEventHandler`3(TOwner owner, Action`3<TOwner, object, TEventArgs> onEventAction, Action`2<WeakEventHandler`3<TOwner, TEventArgs, THandler>, object> onDetachAction, Func`2<WeakEventHandler`3<TOwner, TEventArgs, THandler>, THandler> createHandlerFunction);
    [CompilerGeneratedAttribute]
public sealed virtual THandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(THandler value);
    public void OnEvent(object source, TEventArgs eventArgs);
}
public class DevExpress.Data.ValidateControllerRowEventArgs : ControllerRowEventArgs {
    private bool valid;
    private string errorText;
    public bool Valid { get; public set; }
    public string ErrorText { get; public set; }
    public ValidateControllerRowEventArgs(int rowHandle, object row);
    public bool get_Valid();
    public void set_Valid(bool value);
    public string get_ErrorText();
    public void set_ErrorText(string value);
}
public class DevExpress.Data.ValidateControllerRowEventHandler : MulticastDelegate {
    public ValidateControllerRowEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidateControllerRowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidateControllerRowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Data.ValueComparer : object {
    public static IComparer Default;
    public static IComparer TypeInvariant;
    private static ValueComparer();
    public virtual int Compare(object x, object y);
    protected virtual int CompareCore(object x, object y);
    public bool ObjectEquals(object x, object y);
    protected virtual bool ObjectEqualsCore(object x, object y);
}
public class DevExpress.Data.VirtualServerModeAcquireInnerListEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IList <InnerList>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IList> <ReleaseAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IList, IEnumerable, IList> <AddMoreRowsFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IList, IEnumerable, IList> <ClearAndAddRowsFunc>k__BackingField;
    public IList InnerList { get; public set; }
    public Action`1<IList> ReleaseAction { get; public set; }
    public Func`3<IList, IEnumerable, IList> AddMoreRowsFunc { get; public set; }
    public Func`3<IList, IEnumerable, IList> ClearAndAddRowsFunc { get; public set; }
    [CompilerGeneratedAttribute]
public IList get_InnerList();
    [CompilerGeneratedAttribute]
public void set_InnerList(IList value);
    [CompilerGeneratedAttribute]
public Action`1<IList> get_ReleaseAction();
    [CompilerGeneratedAttribute]
public void set_ReleaseAction(Action`1<IList> value);
    [CompilerGeneratedAttribute]
public Func`3<IList, IEnumerable, IList> get_AddMoreRowsFunc();
    [CompilerGeneratedAttribute]
public void set_AddMoreRowsFunc(Func`3<IList, IEnumerable, IList> value);
    [CompilerGeneratedAttribute]
public Func`3<IList, IEnumerable, IList> get_ClearAndAddRowsFunc();
    [CompilerGeneratedAttribute]
public void set_ClearAndAddRowsFunc(Func`3<IList, IEnumerable, IList> value);
    internal VirtualServerModeAcquireInnerListEventArgs Next(IList nextList);
}
public class DevExpress.Data.VirtualServerModeCanPerformColumnServerActionEventArgs : EventArgs {
    private string _ColumnName;
    private ColumnServerActionType _ActionType;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowAction>k__BackingField;
    public Nullable`1<bool> AllowAction { get; public set; }
    public string ColumnName { get; }
    public ColumnServerActionType ActionType { get; }
    public VirtualServerModeCanPerformColumnServerActionEventArgs(string columnName, ColumnServerActionType actionType);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowAction();
    [CompilerGeneratedAttribute]
public void set_AllowAction(Nullable`1<bool> value);
    public string get_ColumnName();
    public ColumnServerActionType get_ActionType();
}
public class DevExpress.Data.VirtualServerModeConfigurationInfo : object {
    private CriteriaOperator _Filter;
    private ServerModeOrderDescriptor[] _SortInfo;
    private ServerModeSummaryDescriptor[] _TotalSummary;
    public CriteriaOperator Filter { get; }
    public ServerModeOrderDescriptor[] SortInfo { get; }
    public ServerModeSummaryDescriptor[] TotalSummary { get; }
    public VirtualServerModeConfigurationInfo(CriteriaOperator filter, ServerModeOrderDescriptor[] sortInfo, ServerModeSummaryDescriptor[] totalSummary);
    public CriteriaOperator get_Filter();
    public ServerModeOrderDescriptor[] get_SortInfo();
    public ServerModeSummaryDescriptor[] get_TotalSummary();
}
public class DevExpress.Data.VirtualServerModeGetUniqueValuesEventArgs : EventArgs {
    private CancellationToken _CancellationToken;
    private CriteriaOperator _ValuesExpression;
    private int _MaxCount;
    private CriteriaOperator _FilterExpression;
    [CompilerGeneratedAttribute]
private Task`1<Object[]> <UniqueValuesTask>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public CriteriaOperator ValuesExpression { get; }
    public int MaxCount { get; }
    public CriteriaOperator FilterExpression { get; }
    public Task`1<Object[]> UniqueValuesTask { get; public set; }
    public string ValuesPropertyName { get; }
    public VirtualServerModeGetUniqueValuesEventArgs(CancellationToken cancellationToken, CriteriaOperator valuesExpression, CriteriaOperator filterExpression, int maxCount);
    public CancellationToken get_CancellationToken();
    public CriteriaOperator get_ValuesExpression();
    public int get_MaxCount();
    public CriteriaOperator get_FilterExpression();
    [CompilerGeneratedAttribute]
public Task`1<Object[]> get_UniqueValuesTask();
    [CompilerGeneratedAttribute]
public void set_UniqueValuesTask(Task`1<Object[]> value);
    public string get_ValuesPropertyName();
}
public class DevExpress.Data.VirtualServerModeRowsEventArgs : EventArgs {
    private CancellationToken _CancellationToken;
    private VirtualServerModeConfigurationInfo _ConfigurationInfo;
    private int _CurrentRowCount;
    [CompilerGeneratedAttribute]
private Task`1<VirtualServerModeRowsTaskResult> <RowsTask>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserData>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public VirtualServerModeConfigurationInfo ConfigurationInfo { get; }
    public int CurrentRowCount { get; }
    public Task`1<VirtualServerModeRowsTaskResult> RowsTask { get; public set; }
    public object UserData { get; public set; }
    public VirtualServerModeRowsEventArgs(CancellationToken cancellationToken, VirtualServerModeConfigurationInfo configurationInfo, int currentRowCount, object userData);
    public CancellationToken get_CancellationToken();
    public VirtualServerModeConfigurationInfo get_ConfigurationInfo();
    public int get_CurrentRowCount();
    [CompilerGeneratedAttribute]
public Task`1<VirtualServerModeRowsTaskResult> get_RowsTask();
    [CompilerGeneratedAttribute]
public void set_RowsTask(Task`1<VirtualServerModeRowsTaskResult> value);
    [CompilerGeneratedAttribute]
public object get_UserData();
    [CompilerGeneratedAttribute]
public void set_UserData(object value);
}
public class DevExpress.Data.VirtualServerModeRowsTaskResult : object {
    [CompilerGeneratedAttribute]
private ICollection <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MoreRowsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserData>k__BackingField;
    public ICollection Rows { get; public set; }
    public bool MoreRowsAvailable { get; public set; }
    public object UserData { get; public set; }
    public VirtualServerModeRowsTaskResult(ICollection rows, bool moreRowsAvailable, object userData);
    [CompilerGeneratedAttribute]
public ICollection get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(ICollection value);
    [CompilerGeneratedAttribute]
public bool get_MoreRowsAvailable();
    [CompilerGeneratedAttribute]
public void set_MoreRowsAvailable(bool value);
    [CompilerGeneratedAttribute]
public object get_UserData();
    [CompilerGeneratedAttribute]
public void set_UserData(object value);
}
[DXToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.VirtualServerModeSource.bmp")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that features event-based data operations: async data load, sorting, filtering and infinite scrolling through records (in a bound Windows Forms GridControl).")]
[DefaultEventAttribute("ConfigurationChanged")]
[DefaultPropertyAttribute("RowType")]
[DesignerAttribute("DevExpress.Design.VirtualServerModeSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class DevExpress.Data.VirtualServerModeSource : Component {
    private VirtualServerModeCore _Core;
    private Type _rowtype;
    private bool forceRefresh;
    private VirtualServerModeConfigurationInfo ConfigurationInfo;
    private object CurrentUserData;
    private CancellationTokenSource RowsCancellation;
    private CancellationTokenSource TotalsCancellation;
    private CancellationTokenSource UniqueValuesCancellation;
    private VirtualServerModeAcquireInnerListEventArgs InnerListData;
    private static bool warningThrownNoType;
    private static bool warningThrownKBPath;
    private static string KBPath;
    [CompilerGeneratedAttribute]
private EventHandler`1<VirtualServerModeRowsEventArgs> ConfigurationChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<VirtualServerModeRowsEventArgs> MoreRows;
    [CompilerGeneratedAttribute]
private EventHandler`1<VirtualServerModeTotalSummaryEventArgs> _TotalSummary;
    [CompilerGeneratedAttribute]
private EventHandler`1<VirtualServerModeGetUniqueValuesEventArgs> _GetUniqueValues;
    [CompilerGeneratedAttribute]
private EventHandler`1<VirtualServerModeAcquireInnerListEventArgs> AcquireInnerList;
    [CompilerGeneratedAttribute]
private EventHandler`1<VirtualServerModeCanPerformColumnServerActionEventArgs> CanPerformColumnServerAction;
    private bool _IsDisposed;
    private int _IsInit;
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Data.PLinq.Helpers.PLinqServerModeSourceObjectTypeConverter")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Gets or sets the type of object whose public properties identify data-aware control columns.")]
public Type RowType { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    protected VirtualServerModeCore Core { get; }
    protected bool IsInit { get; }
    public VirtualServerModeSource(Type rowType);
    public VirtualServerModeSource(IContainer container);
    public Type get_RowType();
    public void set_RowType(Type value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    protected VirtualServerModeCore get_Core();
    protected virtual VirtualServerModeCore CreateCore();
    private SameConfigAsBeforeDegree IsSameConfigAsBefore(VirtualServerModeConfigurationInfo e);
    private bool IsSameSummaryConfigAsBefore(VirtualServerModeConfigurationInfo e);
    private bool IsSameCoreConfigAsBefore(VirtualServerModeConfigurationInfo e);
    private void core_ConfigurationChanged(object sender, VirtualServerModeConfigurationChangedEventArgs e);
    private bool RunMainConfigChangedTask();
    private void RunTotalsTask();
    private void ProcessRowsTaskCompleted(Task`1<VirtualServerModeRowsTaskResult> task, CancellationTokenSource closuredCancellationSource, bool isInit);
    private void ProcessSummaryReadyCore(IDictionary`2<ServerModeSummaryDescriptor, object> summary, CancellationTokenSource closured);
    private void ProcessTotalTaskCompleted(Task`1<IDictionary`2<ServerModeSummaryDescriptor, object>> task, CancellationTokenSource closured);
    private void core_MoreRowsRequested(object sender, EventArgs e);
    private void core_CancelGetUniqueValuesRequested(object sender, EventArgs e);
    private void core_GetUniqueValuesRequested(object sender, GetUniqueValuesEventArgs e);
    private void ProcessGUVCompleted(Task`1<Object[]> task, CancellationTokenSource closuredCancellation);
    private IBindingList CreateDefaultInnerList();
    private VirtualServerModeAcquireInnerListEventArgs CreateInitialSourceData();
    protected virtual void RaiseConfigurationChanged(VirtualServerModeRowsEventArgs e);
    protected virtual void RaiseMoreRows(VirtualServerModeRowsEventArgs e);
    protected virtual void RaiseTotalSummary(VirtualServerModeTotalSummaryEventArgs e);
    protected virtual void RaiseGetUniqueValues(VirtualServerModeGetUniqueValuesEventArgs e);
    protected virtual void RaiseAcquireInnerList(VirtualServerModeAcquireInnerListEventArgs e);
    private void ThrowWarnings();
    [CompilerGeneratedAttribute]
public void add_ConfigurationChanged(EventHandler`1<VirtualServerModeRowsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ConfigurationChanged(EventHandler`1<VirtualServerModeRowsEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MoreRows(EventHandler`1<VirtualServerModeRowsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MoreRows(EventHandler`1<VirtualServerModeRowsEventArgs> value);
    [CompilerGeneratedAttribute]
private void add__TotalSummary(EventHandler`1<VirtualServerModeTotalSummaryEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__TotalSummary(EventHandler`1<VirtualServerModeTotalSummaryEventArgs> value);
    public void add_TotalSummary(EventHandler`1<VirtualServerModeTotalSummaryEventArgs> value);
    public void remove_TotalSummary(EventHandler`1<VirtualServerModeTotalSummaryEventArgs> value);
    private void UpdateTotalsSupported();
    [CompilerGeneratedAttribute]
private void add__GetUniqueValues(EventHandler`1<VirtualServerModeGetUniqueValuesEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__GetUniqueValues(EventHandler`1<VirtualServerModeGetUniqueValuesEventArgs> value);
    public void add_GetUniqueValues(EventHandler`1<VirtualServerModeGetUniqueValuesEventArgs> value);
    public void remove_GetUniqueValues(EventHandler`1<VirtualServerModeGetUniqueValuesEventArgs> value);
    private void UpdateGetUniqueValuesSupported();
    [CompilerGeneratedAttribute]
public void add_AcquireInnerList(EventHandler`1<VirtualServerModeAcquireInnerListEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AcquireInnerList(EventHandler`1<VirtualServerModeAcquireInnerListEventArgs> value);
    protected virtual void RaiseCanPerformColumnServerAction(VirtualServerModeCanPerformColumnServerActionEventArgs e);
    [CompilerGeneratedAttribute]
public void add_CanPerformColumnServerAction(EventHandler`1<VirtualServerModeCanPerformColumnServerActionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CanPerformColumnServerAction(EventHandler`1<VirtualServerModeCanPerformColumnServerActionEventArgs> value);
    protected virtual void Dispose(bool disposing);
    private void ThrowIfDisposed();
    protected bool get_IsInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    public void Refresh();
    protected virtual void RaiseRefreshRequested(EventArgs eventArgs);
    [CompilerGeneratedAttribute]
private void <CreateCore>b__14_0(object o, EventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateCore>b__14_1(object o, VirtualServerModeCanPerformColumnServerActionEventArgs e);
    [CompilerGeneratedAttribute]
private IDictionary`2<ServerModeSummaryDescriptor, object> <RunTotalsTask>b__26_2();
}
public class DevExpress.Data.VirtualServerModeTotalSummaryEventArgs : EventArgs {
    private CancellationToken _CancellationToken;
    private VirtualServerModeConfigurationInfo _ConfigurationInfo;
    private Action`1<IDictionary`2<ServerModeSummaryDescriptor, object>> _NotifyIntermediateSummaryReady;
    [CompilerGeneratedAttribute]
private Task`1<IDictionary`2<ServerModeSummaryDescriptor, object>> <TotalSummaryTask>k__BackingField;
    public static object NotReadyObject { get; }
    public CancellationToken CancellationToken { get; }
    public VirtualServerModeConfigurationInfo ConfigurationInfo { get; }
    public Task`1<IDictionary`2<ServerModeSummaryDescriptor, object>> TotalSummaryTask { get; public set; }
    public VirtualServerModeTotalSummaryEventArgs(CancellationToken cancellationToken, VirtualServerModeConfigurationInfo configurationInfo, Action`1<IDictionary`2<ServerModeSummaryDescriptor, object>> notifyIntermediateSummaryReady);
    public static object get_NotReadyObject();
    public CancellationToken get_CancellationToken();
    public VirtualServerModeConfigurationInfo get_ConfigurationInfo();
    [CompilerGeneratedAttribute]
public Task`1<IDictionary`2<ServerModeSummaryDescriptor, object>> get_TotalSummaryTask();
    [CompilerGeneratedAttribute]
public void set_TotalSummaryTask(Task`1<IDictionary`2<ServerModeSummaryDescriptor, object>> value);
    public void NotifyIntermediateSummaryReady(IDictionary`2<ServerModeSummaryDescriptor, object> intermediateSummary);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void NotifySummaryReady(IDictionary`2<ServerModeSummaryDescriptor, object> intermediateSummary);
}
public class DevExpress.Data.VirtualServerModeTotalSummaryReadyEventArgs : EventArgs {
    private IDictionary`2<ServerModeSummaryDescriptor, object> _Results;
    public IDictionary`2<ServerModeSummaryDescriptor, object> TotalSummary { get; }
    public static object NotReadyObject { get; }
    public VirtualServerModeTotalSummaryReadyEventArgs(IDictionary`2<ServerModeSummaryDescriptor, object> results);
    public IDictionary`2<ServerModeSummaryDescriptor, object> get_TotalSummary();
    public static object get_NotReadyObject();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.VisibleIndexCollection : object {
    private Int32[] list;
    private Int32[] scrollableIndexes;
    private int count;
    private int scrollableIndexesCount;
    private bool expandedGroupsIncludedInScrollableIndexes;
    private DataControllerBase controller;
    private GroupRowInfoCollection groupInfo;
    private bool isDirty;
    private bool modified;
    private Dictionary`2<int, bool> singleItems;
    private VisibleIndexHeightInfo scrollHeightInfo;
    private UInt32 hashIndex;
    [CLSCompliantAttribute("False")]
public UInt32 HashIndex { get; }
    public bool IsModified { get; }
    public bool IsDirty { get; }
    public VisibleIndexHeightInfo ScrollHeightInfo { get; }
    public bool ExpandedGroupsIncludedInScrollableIndexes { get; public set; }
    public Int32[] ScrollableIndexes { get; }
    public int ScrollableIndexesCount { get; }
    public int Count { get; }
    protected DataControllerBase Controller { get; }
    protected internal GroupRowInfoCollection GroupInfo { get; protected internal set; }
    public GroupRowInfoCollection GroupInfoCore { get; }
    public int Item { get; }
    public bool IsEmpty { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public VisibleIndexCollection(DataControllerBase controller, GroupRowInfoCollection groupInfo);
    public UInt32 get_HashIndex();
    public bool get_IsModified();
    public void ResetModified();
    public bool get_IsDirty();
    public void SetDirty(bool value);
    public void SetDirty();
    public VisibleIndexHeightInfo get_ScrollHeightInfo();
    public void Clear();
    protected void ClearCore(bool recreateList);
    public bool get_ExpandedGroupsIncludedInScrollableIndexes();
    public void set_ExpandedGroupsIncludedInScrollableIndexes(bool value);
    public Int32[] get_ScrollableIndexes();
    public int get_ScrollableIndexesCount();
    protected virtual void BuildScrollableIndexes();
    protected virtual void PutLastGroupsIntoScrollableIndexes(List`1<GroupInfoVisibleIndexPair> lastGroups, int tillLevel);
    public int ConvertIndexToScrollIndex(int index, bool allowFixedGroups);
    private int FindScrollableIndex(int index);
    public int ConvertScrollIndexToIndex(int scrollIndex, bool allowFixedGroups);
    protected virtual int GetMaxCount();
    public sealed virtual int get_Count();
    protected DataControllerBase get_Controller();
    protected internal virtual GroupRowInfoCollection get_GroupInfo();
    protected internal virtual void set_GroupInfo(GroupRowInfoCollection value);
    public GroupRowInfoCollection get_GroupInfoCore();
    public int get_Item(int visibleIndex);
    public void Add(int controllerRowHandle);
    private void ExtendArray();
    public bool Contains(int controllerRowHandle);
    public int IndexOf(int controllerRowHandle);
    public bool get_IsEmpty();
    public int GetHandle(int visibleIndex);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public void BuildVisibleIndexes(int visibleCount, bool allowNonGroupedList, bool expandAll);
    protected virtual List`1<GroupRowInfo> GetRootGroups();
    public void BuildVisibleIndexes(GroupRowInfo groupRow, bool expandAll);
    public bool IsSingleGroupRow(int controllerDataRowHanlde);
    protected virtual void BuildVisibleIndexesEx(GroupRowInfo groupRow, bool expandAll, bool expanded);
    protected void AddVisibleDataRows(GroupRowInfo rowInfo);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.VisibleIndexCollection2 : CollectionBase {
    private DataController controller;
    protected DataController Controller { get; }
    public int Item { get; }
    public bool IsEmpty { get; }
    public VisibleIndexCollection2(DataController controller);
    protected DataController get_Controller();
    public int get_Item(int visibleIndex);
    public void Add(int controllerRowHandle);
    public bool Contains(int controllerRowHandle);
    public int IndexOf(int controllerRowHandle);
    public bool get_IsEmpty();
    public int GetHandle(int visibleIndex);
}
public class DevExpress.Data.VisibleIndexHeightInfo : object {
    private static Int32[] zeroHeight;
    private static Int32[] selfHeight;
    private Int32[][] map;
    private bool dirty;
    private bool allowFixedGroups;
    private VisibleIndexCollection source;
    public Int32[][] Map { get; }
    public bool AllowFixedGroups { get; public set; }
    public VisibleIndexHeightInfo(VisibleIndexCollection source);
    private static VisibleIndexHeightInfo();
    public void Reset();
    public bool IsZeroHeight(Int32[] height);
    public bool IsSelfHeight(Int32[] height);
    public Int32[][] get_Map();
    public bool get_AllowFixedGroups();
    public void set_AllowFixedGroups(bool value);
    public void Calculate();
}
public class DevExpress.Data.VisibleListSourceRowCollection : object {
    protected DataControllerBase controller;
    private VisibleToSourceRowsMapper _Mapper;
    private string appliedFilterExpression;
    private bool hasUserFilter;
    public static int SeveralThreadsFilterThreshold;
    public static Nullable`1<int> SeveralThreadsFilterThreadsOverride;
    public static int SeveralThreadsSortThreshold;
    public static int SeveralThreadsSortThresholdManyColumns;
    public static Nullable`1<int> SeveralThreadsSortThreadsOverride;
    private int _ThreadSafetyEnforcerCounter;
    public string AppliedFilterExpression { get; }
    public bool HasUserFilter { get; }
    public static int SeveralThreadsFilterThreads { get; }
    public static int SeveralThreadsSortThreads { get; }
    public bool IsIdentity { get; }
    public int VisibleRowCount { get; }
    public VisibleListSourceRowCollection(DataControllerBase controller);
    private static VisibleListSourceRowCollection();
    private VisibleToSourceRowsMapper GetMapper();
    private VisibleToSourceRowsMapper GetMapperAfterNonIdentityCheck();
    public string get_AppliedFilterExpression();
    public bool get_HasUserFilter();
    public void SortRows(DataColumnSortInfo[] sortInfo);
    private void CreateHandlesToSourceIndicesMapper(Func`2& mapper, Action& disposeAction);
    public static int get_SeveralThreadsFilterThreads();
    public static int get_SeveralThreadsSortThreads();
    private void BuildSortDelegatesAndChooseDegreeOfParallelism(DataColumnSortInfo[] sortInfo, Func`2<int, int> handlesToSourceIndexMapper, Comparison`1& comparison, Action`1& prepareCache, Action& disposeAfterUse, Boolean& parallelsortable);
    public int FindControllerRowForInsert(DataColumnSortInfo[] sortInfoCollection, int listSourceRow, Nullable`1<int> oldVisiblePosition);
    private Comparison`1<int> BuildFindControllerRowForInsertExpressiveComparer(DataColumnSortInfo[] sortInfoCollection, int listSourceRow);
    private int FindControllerRowForInsertExpressive(DataColumnSortInfo[] sortInfoCollection, int listSourceRow, Nullable`1<int> oldVisiblePosition);
    private int FindControllerRowForInsertExpressiveCore(int listSourceRow, Nullable`1<int> oldVisiblePosition, Comparison`1<int> comparison);
    public sealed virtual void Dispose();
    public bool get_IsIdentity();
    public int get_VisibleRowCount();
    public int GetListSourceRow(int visibleRow);
    public int UnsafeGetListSourceRow(int visibleRow);
    public Func`2<int, int> UnsafeGetListSourceRowGetter();
    public Nullable`1<int> GetVisibleRow(int listSourceRow);
    public bool Contains(int listSourceRow);
    public void Clear();
    public void Assign(ICollection`1<int> records);
    public void Assign(IEnumerable`1<int> records, int count);
    public void Init(ICollection`1<int> list, Nullable`1<int> count, string appliedFilterExpression, bool hasUserFilter);
    public void ClearAndForceNonIdentity();
    public void ForceNonIdentity();
    public void InsertHiddenRow(int listSourceRow);
    public int HideSourceRow(int listSourceRow);
    public int RemoveSourceRow(int listSourceRow);
    public void MoveSourcePosition(int oldSourcePosition, int newSourcePosition);
    public void MoveVisiblePosition(int oldVisibleIndex, int newVisibleIndex);
    private VisibleListSourceRowCollection CloneBase();
    public VisibleListSourceRowCollection ClonePersistent();
    public VisibleListSourceRowCollection CloneThatWouldBeForSureModifiedAndOrForgottenBeforeAnythingHappensToOriginal();
    public void InsertVisibleRow(int sourceRowIndex, int visibleRowIndex);
    public void ShowRow(int sourceRowIndex, int visibleIndex);
    public Int32[] ToArray();
    public IEnumerable`1<int> ToEnumerable();
    public void SetRange(int startPos, Int32[] newValues);
    private void ClearMapper();
    private VisibleToSourceRowsMapper CreateMapper();
    private VisibleToSourceRowsMapper CreateMapper(IEnumerable`1<int> state, int count);
    private VisibleToSourceRowsMapper ReplaceMapper(VisibleToSourceRowsMapper newMapper);
    private VisibleToSourceRowsMapper GetMapperForChange();
    protected VisibleToSourceRowsMapper GetMapperForSetRange();
    private static bool IsTooSmallForSmart(int visibleCount);
    private static bool IsBigEnoughForSmart(int visibleCount);
    private static bool IsTooBigForDumb(int visibleCount);
    private void BC5101MapperCorruptionDetectionSectionEnter();
    private void BC5101MapperCorruptionDetectionFailOnEnter();
    private void BC5101MapperCorruptionDetectionSectionLeave();
    private static void BC5101MapperCorruptionDetectionFailOnLeave();
}
public class DevExpress.Data.WcfLinq.GetSourceEventArgs : EventArgs {
    private ServerModeCoreExtender extender;
    [CompilerGeneratedAttribute]
private IQueryable <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreSourceRowsThreadSafe>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public IQueryable Query { get; public set; }
    public string KeyExpression { get; public set; }
    public bool AreSourceRowsThreadSafe { get; public set; }
    public object Tag { get; public set; }
    public ServerModeCoreExtender Extender { get; }
    public GetSourceEventArgs(ServerModeCoreExtender extender);
    [CompilerGeneratedAttribute]
public IQueryable get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(IQueryable value);
    [CompilerGeneratedAttribute]
public string get_KeyExpression();
    [CompilerGeneratedAttribute]
public void set_KeyExpression(string value);
    [CompilerGeneratedAttribute]
public bool get_AreSourceRowsThreadSafe();
    [CompilerGeneratedAttribute]
public void set_AreSourceRowsThreadSafe(bool value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public ServerModeCoreExtender get_Extender();
}
public class DevExpress.Data.WcfLinq.Helpers.CriteriaForFilter : ClientCriteriaVisitorBase {
    private int inIsNull;
    public static CriteriaOperator Prepare(CriteriaOperator criteria);
    protected virtual CriteriaOperator Visit(BinaryOperator theOperator);
    protected virtual CriteriaOperator Visit(FunctionOperator theOperator);
    protected virtual CriteriaOperator Visit(UnaryOperator theOperator);
    private BinaryOperatorType RotateBinaryOperatorTypeForDateTime(BinaryOperatorType originalOperatorType);
    private CriteriaOperator CheckGetDateFunction(BinaryOperatorType originalOperatorType, CriteriaOperator leftResult, CriteriaOperator rightResult);
}
public class DevExpress.Data.WcfLinq.Helpers.CriteriaToString : object {
    private Type elementType;
    private ElementDescriptor elementDescriptor;
    private static Dictionary`2<char, string> escapeDict;
    private static String[] alfabet;
    private int currentLevel;
    private static CriteriaToString();
    public CriteriaToString(Type elementType);
    public string Process(CriteriaOperator criteria);
    public static string Convert(Type elementType, CriteriaOperator criteria);
    public static string Convert(CriteriaOperator criteria);
    public sealed virtual string Visit(JoinOperand theOperand);
    private sealed virtual override string DevExpress.Data.Filtering.IClientCriteriaVisitor<System.String>.Visit(OperandProperty theOperand);
    public sealed virtual string Visit(AggregateOperand theOperand);
    public sealed virtual string Visit(FunctionOperator theOperator);
    private string MakeConcat(CriteriaOperatorCollection operands);
    private static string EscapeString(string str);
    public sealed virtual string Visit(OperandValue theOperand);
    private static void AppendDateTime(StringBuilder sb, DateTime dt);
    public static string TimeSpanToString(TimeSpan time);
    public sealed virtual string Visit(GroupOperator theOperator);
    public sealed virtual string Visit(InOperator theOperator);
    public sealed virtual string Visit(UnaryOperator theOperator);
    private static void GetUnderType(Type& leftType);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BinaryOperator theOperator);
    public sealed virtual string Visit(BetweenOperator theOperator);
}
internal class DevExpress.Data.WcfLinq.Helpers.DummyListServer : List`1<GetSourceNotHandledMessenger> {
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> groupSummaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual void Refresh();
}
public class DevExpress.Data.WcfLinq.Helpers.ElementDescriptor : EvaluatorContextDescriptor {
    private Dictionary`2<string, Func`2<object, object>> expressionDict;
    private Dictionary`2<string, PropertyInfo> propertyDict;
    private ElementTypeResolver typeResolver;
    private ElementDescriptorCache cache;
    public ElementDescriptor(Type elementType, ElementDescriptorCache cache);
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual IEnumerable GetQueryContexts(object source, string queryTypeName, CriteriaOperator condition, int top);
    public Type GetCriteriaType(CriteriaOperator criteria);
}
public class DevExpress.Data.WcfLinq.Helpers.ElementDescriptorCache : object {
    private Dictionary`2<Type, ElementDescriptor> descriptorDict;
    public ElementDescriptor GetDescriptor(Type type);
}
internal class DevExpress.Data.WcfLinq.Helpers.ElementTypeResolver : CriteriaTypeResolverBase {
    private Dictionary`2<string, Type> propertiesTypes;
    public ElementTypeResolver(Dictionary`2<string, Type> propertiesTypes);
    public sealed virtual CriteriaTypeResolverResult Visit(JoinOperand theOperand);
    public sealed virtual CriteriaTypeResolverResult Visit(OperandProperty theOperand);
    public sealed virtual CriteriaTypeResolverResult Visit(AggregateOperand theOperand);
    public Type Resolve(CriteriaOperator criteria);
}
public class DevExpress.Data.WcfLinq.Helpers.EnumeratorForWrapperDataServiceQuery`1 : object {
    private int position;
    private int count;
    private TElement[] data;
    private object System.Collections.IEnumerator.Current { get; }
    public TElement Current { get; }
    public EnumeratorForWrapperDataServiceQuery`1(IQueryable`1<TElement> source, string rootOrderByQuery, string rootFilterQuery, int count, int rootSkipCount);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public TElement get_Current();
}
internal class DevExpress.Data.WcfLinq.Helpers.GetSourceNotHandledMessenger : object {
    public static string MessageText;
    public string Message { get; }
    private static GetSourceNotHandledMessenger();
    public string get_Message();
}
public interface DevExpress.Data.WcfLinq.Helpers.IWcfServerModeFrontEndOwner {
    public Type ElementType { get; }
    public IQueryable Query { get; }
    public string KeyExpression { get; }
    public string DefaultSorting { get; }
    public CriteriaOperator FixedFilterCriteria { get; }
    public abstract virtual Type get_ElementType();
    public abstract virtual IQueryable get_Query();
    public abstract virtual bool IsReadyForTakeOff();
    public abstract virtual string get_KeyExpression();
    public abstract virtual string get_DefaultSorting();
    public abstract virtual CriteriaOperator get_FixedFilterCriteria();
}
internal class DevExpress.Data.WcfLinq.Helpers.SummaryNotSupported : object {
}
internal class DevExpress.Data.WcfLinq.Helpers.TypeInfoNoSource : TypeInfoBase {
    private PropertyDescriptorCollection uiDescriptors;
    public PropertyDescriptorCollection UIDescriptors { get; }
    public TypeInfoNoSource(Type designTimeType);
    public virtual PropertyDescriptorCollection get_UIDescriptors();
    public virtual object GetWorkerThreadRowInfo(object workerRow);
    public virtual object GetUIThreadRow(object rowInfo);
}
public static class DevExpress.Data.WcfLinq.Helpers.WcfDataServiceQueryHelper : object {
    private static Dictionary`2<Type, QueryableHelper> queryableCache;
    private static Dictionary`2<Type, ContextHelper> contextCache;
    private static ReaderWriterLockSlim locker;
    private static WcfDataServiceQueryHelper();
    private static QueryableHelper GetQueryableHelper(object source);
    private static ContextHelper GetContextHelper(object context);
    private static T GetHelperCore(object source, Dictionary`2<Type, T> cache, Func`2<Type, T> createNew);
    public static IQueryable`1<T> AddQueryOption(IQueryable`1<T> source, string name, object value);
    public static IEnumerable`1<T> Execute(IQueryable`1<T> source);
    public static object GetContext(IQueryable source);
    public static IEnumerable`1<T> ExecuteWithTotalCount(IQueryable`1<T> source, Int64& totalCount);
    public static Uri GetRequestUri(IQueryable source);
    public static Uri ContextGetBaseUri(object context);
    public static IEnumerable`1<string> ContextExecute(object context, Uri uri);
    public static void SubscribeToSendingRequest(object context, Func`3<Uri, string, string> resolveVersionByUri);
}
[ExtensionAttribute]
public static class DevExpress.Data.WcfLinq.Helpers.WcfLinqHelpers : object {
    private static Dictionary`2<Type, Type> wrapperDataTypeCache;
    private static Dictionary`2<Type, ListHelperBase> listHelperCache;
    private static ElementDescriptorCache elementDescriptorCache;
    public static object NotSummarySupported;
    private static WcfLinqHelpers();
    public static ElementDescriptor GetElementDescriptor(Type type);
    [ExtensionAttribute]
public static IQueryable GroupBy(IQueryable source, CriteriaOperator groupCriteria, bool isDesc, int skip, int top);
    private static Type GetWrapperDataType(IQueryable source);
    private static object GetNewWrapperData(IQueryable source, Type wrapperDataType);
    [ExtensionAttribute]
public static IEnumerable`1<Object[]> SelectSummary(IQueryable source, Type sourceType, ServerModeSummaryDescriptor[] summaries);
    [ExtensionAttribute]
private static void AddMethodResultValue(List`1<object> aggregateFunclist, Type wrapperDataType, object reflectWrapperData, CriteriaOperator summary, string methodName);
    [ExtensionAttribute]
private static void AddPropertyValue(List`1<object> aggregateFunclist, Type wrapperDataType, object reflectWrapperData, string propertyName);
    [ExtensionAttribute]
public static IQueryable SelectFieldValues(IQueryable source, CriteriaOperator fieldCriteria);
    [ExtensionAttribute]
public static WrapperResult SelectFieldValuesAndRows(IQueryable source, CriteriaOperator fieldCriteria);
    [ExtensionAttribute]
public static IQueryable WhereEq(IQueryable source, CriteriaOperator fieldNameCriteria, List`1<CriteriaOperator> criteriaList);
    [ExtensionAttribute]
public static IQueryable OrderBy(IQueryable source, IEnumerable`1<ServerModeOrderDescriptor> order);
    [ExtensionAttribute]
public static IQueryable Where(IQueryable source, CriteriaOperator filterCriteria);
    [ExtensionAttribute]
public static IQueryable SkipData(IQueryable source, int count);
    [ExtensionAttribute]
public static IQueryable TakeData(IQueryable source, int count);
    private static IQueryable InvokeMethodWithParamOfTypeInt(IQueryable source, int count, Type wrapperDataType, string methodName);
    private static WrapperResult GetWrapperResult(IQueryable source, CriteriaOperator criteriaOp, Type wrapperDataType, string methodName);
    private static IQueryable InvokeMethodWithParamOfTypeCriteriaOperator(IQueryable source, CriteriaOperator criteriaOp, Type wrapperDataType, string methodName);
    private static ListHelperBase GetListHelper(Type wrapperDataType);
    [ExtensionAttribute]
public static int CountOfData(IQueryable source);
}
public class DevExpress.Data.WcfLinq.Helpers.WcfServerModeCache : ServerModeKeyedCacheExtendable {
    private IQueryable source;
    private CriteriaOperator externalCriteria;
    public static object PrepareTopGroupGroupByConstant;
    protected CriteriaOperator ExternalCriteria { get; }
    private CriteriaOperator SingleKeyCriteria { get; }
    protected int MagicNumberTakeKeysUpperLimitAfterSkip { get; }
    public WcfServerModeCache(IQueryable source, CriteriaOperator filterCriteria, CriteriaOperator keyCriteria, ServerModeOrderDescriptor[][] sortInfo, int groupCount, ServerModeSummaryDescriptor[] summary, ServerModeSummaryDescriptor[] totalSummary);
    private static WcfServerModeCache();
    protected virtual CriteriaOperator get_ExternalCriteria();
    private CriteriaOperator get_SingleKeyCriteria();
    protected virtual Func`2<object, object> GetOnInstanceEvaluator(CriteriaOperator subj);
    protected virtual object FetchPrepare(CriteriaOperator where, ServerModeOrderDescriptor[] order);
    protected virtual int get_MagicNumberTakeKeysUpperLimitAfterSkip();
    protected virtual void FetchKeysCore(object source, int skip, int take, IEnumerable& keys, IEnumerable& rows);
    protected virtual IEnumerable FetchRowsCore(object source, int skip, int take);
    protected virtual IEnumerable FetchRowsByKeysCore(Object[] keys);
    protected virtual int GetCountInternal(CriteriaOperator criteriaOperator);
    protected virtual Type ResolveKeyType(CriteriaOperator singleKeyCritterion);
    protected virtual Type ResolveRowType();
    protected virtual ServerModeGroupInfoData[] PrepareChildrenInternal(CriteriaOperator groupWhere, ServerModeOrderDescriptor groupByDescriptor, ServerModeSummaryDescriptor[] summaries);
    protected virtual ServerModeGroupInfoData PrepareTopGroupInfoInternal(ServerModeSummaryDescriptor[] summaries);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.WcfLinq.Helpers.WcfServerModeDesignTimeWrapper : object {
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual void Refresh();
    public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public object FindKeyByBeginWith(PropertyDescriptor column, string value);
    public object FindKeyByValue(PropertyDescriptor column, object value);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.WcfLinq.Helpers.WcfServerModeFrontEnd : object {
    public IWcfServerModeFrontEndOwner Owner;
    private ServerModeCoreExtender Extender;
    private IListServer _Wrapper;
    private Type _Type;
    private IQueryable _DataSource;
    private bool _IsReadyForTakeOff;
    private string _KeyExpression;
    private string _DefaultSorting;
    private CriteriaOperator _FixedFilterCriteria;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    private CriteriaOperator _Successful_FilterCriteria;
    private ICollection`1<ServerModeOrderDescriptor[]> _Successful_sortInfo;
    private int _Successful_groupCount;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_summaryInfo;
    private ICollection`1<ServerModeSummaryDescriptor> _Successful_totalSummaryInfo;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler _ListChanged;
    protected IListServer Wrapper { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    public bool RefreshSupported { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public WcfServerModeFrontEnd(IWcfServerModeFrontEndOwner owner, ServerModeCoreExtender extender);
    [CompilerGeneratedAttribute]
public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual WcfServerModeFrontEnd DXClone();
    protected virtual WcfServerModeFrontEnd CreateDXClone();
    protected IListServer get_Wrapper();
    private void _Wrapper_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    private void _Wrapper_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private IListServer CreateWrapper();
    protected virtual IListServer CreateRuntimeWrapper();
    protected void KillWrapper();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    public sealed virtual void ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    [CompilerGeneratedAttribute]
private void add__ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ListChanged(ListChangedEventHandler value);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    public sealed virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public sealed virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public sealed virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public sealed virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public sealed virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public sealed virtual int GetRowIndexByKey(object key);
    public sealed virtual object GetRowKey(int index);
    public sealed virtual List`1<object> GetTotalSummary();
    public sealed virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    public sealed virtual void Refresh();
    public sealed virtual bool get_RefreshSupported();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    public void CatchUp();
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
}
public class DevExpress.Data.WcfLinq.Helpers.WcfServerModeSourceObjectTypeConverter : TypeListConverter {
    private SortedList`2<string, Type> typesCache;
    public static string None;
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object val);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destType);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
public class DevExpress.Data.WcfLinq.Helpers.WrapperDataServiceQuery`1 : object {
    private object rootGroupKeyValue;
    private IQueryable`1<TElement> rootSource;
    private CriteriaOperator rootKeyExpression;
    private string rootOrderByQuery;
    private string rootFilterQuery;
    private int rootLevel;
    private int rootTakeCount;
    private int rootSkipCount;
    private ElementDescriptor elementDescriptor;
    public int Count { get; }
    public object Key { get; }
    public IQueryable`1<TElement> Rows { get; }
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public WrapperDataServiceQuery`1(object rootGroupKeyValue, IQueryable`1<TElement> rootSource, string rootOrderByQuery, string rootFilterQuery, CriteriaOperator rootKeyExpression, int rootLevel, int rootTakeCount, int rootSkipCount);
    public WrapperDataServiceQuery`1(object rootGroupKeyValue, IQueryable`1<TElement> rootSource, string rootOrderByQuery, string rootFilterQuery, CriteriaOperator rootKeyExpression, int rootLevel, int rootTakeCount, int rootSkipCount, ElementDescriptor elementDescriptor);
    public WrapperDataServiceQuery`1(WrapperDataServiceQuery`1<TElement> source);
    public int get_Count();
    public object get_Key();
    public IQueryable`1<TElement> get_Rows();
    private bool AddToList(List`1<WrapperDataServiceQuery`1<TElement>> list, WrapperDataServiceQuery`1<TElement> value, int skip, int top, Int32& skipCounter);
    public IQueryable GroupBy(CriteriaOperator key, bool isDesc, int skip, int top);
    private static ListHelperBase GetListHelper(Type type);
    public IQueryable SelectFieldValues(CriteriaOperator criteria);
    public WrapperResult SelectFieldValuesAndRows(CriteriaOperator criteria);
    private static ListHelperBase GetNewListHelper(string fieldName);
    private static ListHelperBase GetNewListHelper(Type fieldType);
    private IQueryable SelectUniqueFieldValues(IQueryable`1<TElement> source, CriteriaOperator criteria, string orderByQuery, string filterQuery, int skipCount, int takeCount);
    private WrapperResult SelectFieldValuesAsList(IQueryable`1<TElement> source, CriteriaOperator criteria, string orderByQuery, string filterQuery, int skipCount, int takeCount);
    private string GetOrderByQuery(string orderbyQuery, string fieldName, bool desc);
    private string GetFilterQuery(CriteriaOperator keyCriteria, object keyValue, BinaryOperatorType opType);
    public object Max(CriteriaOperator fieldCriteria);
    public object Min(CriteriaOperator fieldCriteria);
    private object MaxOrMin(CriteriaOperator fieldCriteria, bool isMax);
    public IQueryable OrderBy(IEnumerable`1<ServerModeOrderDescriptor> order);
    public IQueryable Where(CriteriaOperator filterCriteria);
    public IQueryable Take(int count);
    public IQueryable Skip(int count);
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public EnumeratorForWrapperDataServiceQuery`1<TElement> GetEnumerator();
    [CompilerGeneratedAttribute]
private int <get_Count>b__10_0();
}
public class DevExpress.Data.WcfLinq.Helpers.WrapperResult : ValueType {
    public IList ElementList;
    public IList FieldList;
    public WrapperResult(IList elementList, IList fieldList);
}
public interface DevExpress.Data.WcfLinq.IOdata {
}
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.WcfInstantFeedbackSource.bmp")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to a WCF Data Service in Instant Feedback Mode.")]
[DefaultEventAttribute("GetSource")]
[DesignerAttribute("DevExpress.Design.InstantFeedbackSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class DevExpress.Data.WcfLinq.WcfInstantFeedbackSource : Component {
    private AsyncListServer2DatacontrollerProxy _AsyncListServer;
    private AsyncListDesignTimeWrapper _DTWrapper;
    private IList _List;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetSourceEventArgs> GetSource;
    [CompilerGeneratedAttribute]
private EventHandler`1<GetSourceEventArgs> DismissSource;
    private CriteriaOperator _FixedFilter;
    private string _DefaultSorting;
    private string _KeyExpression;
    private bool _AreSourceRowsThreadSafe;
    private Type _ElementType;
    private Nullable`1<bool> _isDesignMode;
    private bool IsDisposed;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CriteriaOperator FixedFilterCriteria { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies a string representation of an expression used to filter objects on the data store side. This filter is never affected by bound data-aware controls.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceCriteriaEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string FixedFilterString { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default, when the sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the name of the key property.")]
[EditorAttribute("DevExpress.Design.InstantFeedbackSourceKeyExpressionEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string KeyExpression { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies whether elements retrieved by the WcfInstantFeedbackSource‘s queryable source are thread-safe.")]
public bool AreSourceRowsThreadSafe { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Data.WcfLinq.Helpers.WcfServerModeSourceObjectTypeConverter")]
[CategoryAttribute("Design")]
[DescriptionAttribute("Specifies the type of objects that will be retrieved from a data source, at design time.")]
public Type DesignTimeElementType { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public WcfInstantFeedbackSource(EventHandler`1<GetSourceEventArgs> getSource);
    public WcfInstantFeedbackSource(EventHandler`1<GetSourceEventArgs> getSource, EventHandler`1<GetSourceEventArgs> freeSource);
    public WcfInstantFeedbackSource(Action`1<GetSourceEventArgs> getSource);
    public WcfInstantFeedbackSource(Action`1<GetSourceEventArgs> getSource, Action`1<GetSourceEventArgs> freeSource);
    [CompilerGeneratedAttribute]
public void add_GetSource(EventHandler`1<GetSourceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GetSource(EventHandler`1<GetSourceEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DismissSource(EventHandler`1<GetSourceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DismissSource(EventHandler`1<GetSourceEventArgs> value);
    public CriteriaOperator get_FixedFilterCriteria();
    public void set_FixedFilterCriteria(CriteriaOperator value);
    public string get_FixedFilterString();
    public void set_FixedFilterString(string value);
    public string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    public string get_KeyExpression();
    public void set_KeyExpression(string value);
    public bool get_AreSourceRowsThreadSafe();
    public void set_AreSourceRowsThreadSafe(bool value);
    private static EventHandler`1<T> ToEventHandler(Action`1<T> action);
    public Type get_DesignTimeElementType();
    public void set_DesignTimeElementType(Type value);
    private void TestCanChangeProperties();
    private void FillKeyExpression();
    private void ForceCatchUp();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private AsyncListDesignTimeWrapper CreateDesignTimeWrapper();
    private AsyncListServer2DatacontrollerProxy CreateRunTimeProxy();
    private AsyncListServerCore CreateAsyncListServerCore();
    private void listServerGet(object sender, ListServerGetOrFreeEventArgs e);
    private void listServerFree(object sender, ListServerGetOrFreeEventArgs e);
    private void getTypeInfo(object sender, GetTypeInfoEventArgs e);
    private void getPropertyDescriptors(object sender, GetPropertyDescriptorsEventArgs e);
    private void getWorkerRowInfo(object sender, GetWorkerThreadRowInfoEventArgs e);
    private void getUIRow(object sender, GetUIThreadRowEventArgs e);
    protected virtual void Dispose(bool disposing);
    public void Refresh();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual WcfInstantFeedbackSource DXCloneCreate();
}
public class DevExpress.Data.WcfLinq.WcfServerModeCore : ServerModeCoreExtendable {
    private static ConcurrentDictionary`2<int, bool> subscribedContextDictionary;
    private IQueryable source;
    private CriteriaOperator _FixedCriteria;
    private static ICriteriaToExpressionConverter converter;
    private static ICriteriaToExpressionConverter converterForInstance;
    public CriteriaOperator FixedCriteria { get; }
    private CriteriaOperator DevExpress.Data.Filtering.Helpers.IFilteredDataSource.Filter { get; private set; }
    public static ICriteriaToExpressionConverter Converter { get; }
    public static ICriteriaToExpressionConverter ConverterForInstance { get; }
    private CriteriaOperator SingleKeyCriteria { get; }
    public WcfServerModeCore(IQueryable source, string keyExpression, CriteriaOperator fixedFilterCriteria, ServerModeCoreExtender extender);
    public WcfServerModeCore(IQueryable source, CriteriaOperator keyExpression, CriteriaOperator fixedFilterCriteria, ServerModeCoreExtender extender);
    private static WcfServerModeCore();
    private static string ResolveVersionByUri(Uri uri, string oldVersion);
    public CriteriaOperator get_FixedCriteria();
    public virtual void SetFixedCriteria(CriteriaOperator op);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.Helpers.IFilteredDataSource.get_Filter();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IFilteredDataSource.set_Filter(CriteriaOperator value);
    public static ICriteriaToExpressionConverter get_Converter();
    public static ICriteriaToExpressionConverter get_ConverterForInstance();
    private CriteriaOperator get_SingleKeyCriteria();
    protected virtual ServerModeKeyedCacheExtendable CreateCacheCoreExtendable();
    public virtual IList GetAllFilteredAndSortedRows();
    protected virtual Object[] GetUniqueValuesInternal(CriteriaOperator expression, int maxCount, CriteriaOperator filter);
    protected virtual ServerModeCore DXCloneCreate();
    public static string GuessKeyExpression(Type objectType);
}
[ToolboxBitmapAttribute("DevExpress.Data.ResFinder", "Bitmaps256.WcfServerModeSource.bmp")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: Data & Analytics")]
[DescriptionAttribute("A data source that binds controls to a WCF Data Service in Server Mode.")]
[DesignerAttribute("DevExpress.Design.ServerModeSourceDesigner, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class DevExpress.Data.WcfLinq.WcfServerModeSource : Component {
    private EventHandler`1<ErrorEventArgs> ErrorOccurred;
    private WcfServerModeFrontEnd _List;
    private IQueryable query;
    private string key;
    private string _DefaultSorting;
    private CriteriaOperator _FixedFilter;
    private WcfServerModeCore internalList;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeExceptionThrownEventArgs> ExceptionThrown;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerModeInconsistencyDetectedEventArgs> InconsistencyDetected;
    public static Nullable`1<bool> UseCountInsteadOfIncludeTotalCount;
    private Type elementType;
    private ServerModeCoreExtender extender;
    private Nullable`1<bool> _isDesignMode;
    private int _initCount;
    [BrowsableAttribute("False")]
public ServerModeCoreExtender Extender { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CriteriaOperator FixedFilterCriteria { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies a string representation of an expression used to filter objects on the data store side. This filter is never affected by bound data-aware controls.")]
[EditorAttribute("DevExpress.Design.ServerModeSourceCriteriaEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string FixedFilterString { get; public set; }
    [TypeConverterAttribute("DevExpress.Data.WcfLinq.Helpers.WcfServerModeSourceObjectTypeConverter")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the type of objects retrieved from a data source.")]
public Type ElementType { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the query request to the WCF data service.")]
public IQueryable Query { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies the key expression.")]
[EditorAttribute("DevExpress.Design.ServerModeSourceKeyExpressionEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string KeyExpression { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Specifies how data source contents are sorted by default, when the sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Design.ServerModeSourceDefaultSortingEditor, DevExpress.Design.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DefaultSorting { get; public set; }
    private WcfServerModeFrontEnd List { get; }
    protected WcfServerModeCore InternalList { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public WcfServerModeSource(ServerModeCoreExtender extender);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.add_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    private sealed virtual override void DevExpress.Data.Helpers.IXtraSourceError.remove_ErrorOccurred(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public ServerModeCoreExtender get_Extender();
    public sealed virtual CriteriaOperator get_FixedFilterCriteria();
    public void set_FixedFilterCriteria(CriteriaOperator value);
    public string get_FixedFilterString();
    public void set_FixedFilterString(string value);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual WcfServerModeSource DXCloneCreate();
    public sealed virtual Type get_ElementType();
    public void set_ElementType(Type value);
    public sealed virtual IQueryable get_Query();
    public void set_Query(IQueryable value);
    private sealed virtual override bool DevExpress.Data.WcfLinq.Helpers.IWcfServerModeFrontEndOwner.IsReadyForTakeOff();
    public sealed virtual string get_KeyExpression();
    public void set_KeyExpression(string value);
    public sealed virtual string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    private void FillKeyExpression();
    private bool IsInitialized();
    private void ForceCatchUp();
    private WcfServerModeFrontEnd get_List();
    protected virtual void OnExceptionThrown(ServerModeExceptionThrownEventArgs e);
    protected virtual void OnInconsistencyDetected(ServerModeInconsistencyDetectedEventArgs e);
    private void _List_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    private void _List_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    public void Reload();
    private void DoPostponedReload(object state);
    private void FailUnderAspOrAnotherNonPostEnvironment();
    protected virtual bool IsGoodContext(SynchronizationContext context);
    protected WcfServerModeCore get_InternalList();
    protected virtual WcfServerModeFrontEnd CreateList();
    protected virtual WcfServerModeCore CreateInternalList();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
}
public interface DevExpress.Data.WizardFramework.IWizardModel {
}
public interface DevExpress.Data.WizardFramework.IWizardPage`1 {
    public TWizardModel Model { get; public set; }
    public bool MoveNextEnabled { get; }
    public bool FinishEnabled { get; }
    public object PageContent { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(EventHandler`1<WizardPageErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(EventHandler`1<WizardPageErrorEventArgs> value);
    public abstract virtual TWizardModel get_Model();
    public abstract virtual void set_Model(TWizardModel value);
    public abstract virtual bool get_MoveNextEnabled();
    public abstract virtual bool get_FinishEnabled();
    public abstract virtual object get_PageContent();
    public abstract virtual Type GetNextPageType();
    public abstract virtual bool Validate(String& errorMessage);
    public abstract virtual void Begin();
    public abstract virtual void Commit();
}
public interface DevExpress.Data.WizardFramework.IWizardPageFactory`1 {
    public abstract virtual IWizardPage`1<TModel> GetPage(Type pageType);
}
public interface DevExpress.Data.WizardFramework.IWizardView {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Cancel(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Cancel(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Next(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Next(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Previous(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Previous(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Finish(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Finish(EventHandler value);
    public abstract virtual void EnableNext(bool enable);
    public abstract virtual void EnablePrevious(bool enable);
    public abstract virtual void EnableFinish(bool enable);
    public abstract virtual void SetPageContent(object content);
    public abstract virtual void ShowError(string error);
}
public class DevExpress.Data.WizardFramework.TimeMachine`1 : object {
    private List`1<HistoryItem<T>> historyItems;
    private int currentIndex;
    internal bool ShouldMoveToTheEndOfHistory;
    private bool AtEndOfHistory { get; }
    public T CurrentValue { get; public set; }
    public TimeMachine`1(T initialValue);
    private bool get_AtEndOfHistory();
    public T get_CurrentValue();
    public void set_CurrentValue(T value);
    public void MoveToThePast();
    public void MoveToTheFuture();
    public void MoveToTheEndOfHistory();
    private void CommitCurrentValue();
}
public class DevExpress.Data.WizardFramework.Wizard`1 : object {
    private IWizardView view;
    private List`1<IWizardPage`1<TWizardModel>> pageList;
    private IWizardPageFactory`1<TWizardModel> pageFactory;
    private TimeMachine`1<TWizardModel> timeMachine;
    private Semaphore semaphore;
    private TWizardModel resultModel;
    private IWizardPage`1<TWizardModel> currentPage;
    [CompilerGeneratedAttribute]
private EventHandler`1<WizardNextPageShowingEventArgs`1<TWizardModel>> NextPageShowing;
    [CompilerGeneratedAttribute]
private EventHandler Completed;
    [CompilerGeneratedAttribute]
private EventHandler Cancelled;
    public IWizardView View { get; }
    public IWizardPage`1<TWizardModel> CurrentPage { get; }
    internal bool ShouldMoveToTheEndOfHistory { get; internal set; }
    public Wizard`1(IWizardView view, TWizardModel model, IWizardPageFactory`1<TWizardModel> pageFactory);
    public IWizardView get_View();
    public IWizardPage`1<TWizardModel> get_CurrentPage();
    internal bool get_ShouldMoveToTheEndOfHistory();
    internal void set_ShouldMoveToTheEndOfHistory(bool value);
    private void currentPage_Error(object sender, WizardPageErrorEventArgs e);
    private void currentPage_Changed(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_NextPageShowing(EventHandler`1<WizardNextPageShowingEventArgs`1<TWizardModel>> value);
    [CompilerGeneratedAttribute]
public void remove_NextPageShowing(EventHandler`1<WizardNextPageShowingEventArgs`1<TWizardModel>> value);
    [CompilerGeneratedAttribute]
public void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Cancelled(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Cancelled(EventHandler value);
    public TWizardModel GetResultModel();
    private void view_Finish(object sender, EventArgs e);
    private void view_Cancel(object sender, EventArgs e);
    private void view_Previous(object sender, EventArgs e);
    private void view_Next(object sender, EventArgs e);
    private bool ValidatePage(IWizardPage`1<TWizardModel> page);
    private IWizardPage`1<TWizardModel> GetNextPage();
    protected virtual void RefreshView();
    private void MoveToPage(IWizardPage`1<TWizardModel> page, Action moveTimeMachine, bool addToList);
    public void SetStartPage(Type pageType);
}
public class DevExpress.Data.WizardFramework.WizardNextPageShowingEventArgs`1 : EventArgs {
    private Type nextPageType;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private IWizardPage`1<TWizardModel> <CurrentPage>k__BackingField;
    public bool Cancel { get; public set; }
    public Type NextPageType { get; public set; }
    public IWizardPage`1<TWizardModel> CurrentPage { get; private set; }
    public WizardNextPageShowingEventArgs`1(IWizardPage`1<TWizardModel> currentPage, Type nextPageType);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    public Type get_NextPageType();
    public void set_NextPageType(Type value);
    [CompilerGeneratedAttribute]
public IWizardPage`1<TWizardModel> get_CurrentPage();
    [CompilerGeneratedAttribute]
private void set_CurrentPage(IWizardPage`1<TWizardModel> value);
}
public abstract class DevExpress.Data.WizardFramework.WizardPageBase`2 : object {
    private TView view;
    private TModel model;
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    [CompilerGeneratedAttribute]
private EventHandler`1<WizardPageErrorEventArgs> Error;
    protected TView View { get; }
    public TModel Model { get; public set; }
    public bool MoveNextEnabled { get; }
    public bool FinishEnabled { get; }
    public object PageContent { get; }
    protected WizardPageBase`2(TView view);
    protected TView get_View();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Error(EventHandler`1<WizardPageErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Error(EventHandler`1<WizardPageErrorEventArgs> value);
    public sealed virtual TModel get_Model();
    public sealed virtual void set_Model(TModel value);
    public virtual bool get_MoveNextEnabled();
    public virtual bool get_FinishEnabled();
    public sealed virtual object get_PageContent();
    public virtual Type GetNextPageType();
    public virtual bool Validate(String& errorMessage);
    public abstract virtual void Begin();
    public abstract virtual void Commit();
    protected void RaiseChanged();
    protected void RaiseError(string errorMessage);
}
public class DevExpress.Data.WizardFramework.WizardPageErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string ErrorMessage { get; public set; }
    public WizardPageErrorEventArgs(string errorMessage);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
[DataContractAttribute]
public class DevExpress.Data.XtraReports.DataProviders.ColumnInfo : EntityInfo`1<string> {
    [CompilerGeneratedAttribute]
private TypeSpecifics <TypeSpecifics>k__BackingField;
    [DataMemberAttribute]
public TypeSpecifics TypeSpecifics { get; public set; }
    [CompilerGeneratedAttribute]
public TypeSpecifics get_TypeSpecifics();
    [CompilerGeneratedAttribute]
public void set_TypeSpecifics(TypeSpecifics value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual object Clone();
}
public enum DevExpress.Data.XtraReports.DataProviders.DataMemberType : Enum {
    public int value__;
    [DisplayAttribute]
public static DataMemberType Table;
    [DisplayAttribute]
public static DataMemberType View;
    [DisplayAttribute]
public static DataMemberType StoredProcedure;
    [DisplayAttribute]
public static DataMemberType Query;
}
[DataContractAttribute]
public class DevExpress.Data.XtraReports.DataProviders.DataSourceInfo : EntityInfo`1<string> {
    [CompilerGeneratedAttribute]
private bool <TablesOrViewsSupported>k__BackingField;
    [DataMemberAttribute]
public bool TablesOrViewsSupported { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TablesOrViewsSupported();
    [CompilerGeneratedAttribute]
public void set_TablesOrViewsSupported(bool value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual object Clone();
}
[DataContractAttribute]
public abstract class DevExpress.Data.XtraReports.DataProviders.EntityInfo`1 : object {
    [CompilerGeneratedAttribute]
private TName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [DataMemberAttribute]
public TName Name { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [CompilerGeneratedAttribute]
public TName get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(TName value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[DataContractAttribute]
public class DevExpress.Data.XtraReports.DataProviders.StoredProcedureInfo : EntityInfo`1<string> {
    private List`1<KeyValuePair`2<string, Type>> parameters;
    private List`1<KeyValuePair`2<string, Type>> Parameters { get; }
    public StoredProcedureInfo(string name, string displayName, IEnumerable`1<KeyValuePair`2<string, Type>> parameters);
    private List`1<KeyValuePair`2<string, Type>> get_Parameters();
    public object Clone();
}
[DataContractAttribute]
public class DevExpress.Data.XtraReports.DataProviders.TableInfo : EntityInfo`1<string> {
    [CompilerGeneratedAttribute]
private DataMemberType <DataMemberType>k__BackingField;
    [DataMemberAttribute]
public DataMemberType DataMemberType { get; public set; }
    [CompilerGeneratedAttribute]
public DataMemberType get_DataMemberType();
    [CompilerGeneratedAttribute]
public void set_DataMemberType(DataMemberType value);
    public sealed virtual object Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface DevExpress.Data.XtraReports.Native.IPickManagerDataMemberNode {
    public IPropertyDescriptor PropertyDescriptor { get; }
    public abstract virtual IPropertyDescriptor get_PropertyDescriptor();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Data.XtraReports.Native.ObservableRangeCollection`1 : ObservableCollection`1<T> {
    public T Item { get; public set; }
    public virtual void AddRange(IEnumerable`1<T> collection);
    public void RemoveRange(IEnumerable`1<T> collection);
    protected virtual void RemoveItemAt(int index);
    protected virtual void InsertItemAt(int index, T item);
    protected virtual void ClearItems();
    [EditorBrowsableAttribute("1")]
protected virtual void InsertItem(int index, T item);
    [EditorBrowsableAttribute("1")]
protected virtual void RemoveItem(int index);
    public void RemoveRangeAt(int startIndex, int count);
    public void RaiseUpdateItems(IList items);
    public void RemoveAll();
    public T get_Item(int index);
    public void set_Item(int index, T value);
    [CompilerGeneratedAttribute]
private int <RemoveRange>b__1_0(T a);
    [CompilerGeneratedAttribute]
private int <RemoveRangeAt>b__7_0(T x);
}
public class DevExpress.Data.XtraReports.Web.ClientControls.ReportingOptionsSerializer : OptionsSerializerBase {
    protected string ProjectName { get; }
    protected BindingFlags SearchedProperties { get; }
    protected virtual string get_ProjectName();
    protected virtual BindingFlags get_SearchedProperties();
    public object Serialize(object dto);
    internal virtual object SerializeCore(object dto);
    internal virtual bool ShouldSerialize(object dto);
}
public interface DevExpress.DataAccess.IDataComponent {
    public string DataMember { get; }
    public string Name { get; public set; }
    public abstract virtual string get_DataMember();
    public abstract virtual XElement SaveToXml();
    public abstract virtual void LoadFromXml(XElement element);
    public abstract virtual void Fill(IEnumerable`1<IParameter> sourceParameters);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public interface DevExpress.DataAccess.IDataSourceProtectionService {
    public abstract virtual void Protect(XElement dataSourceXElement);
    public abstract virtual void Unprotect(XElement dataSourceXElement);
}
public interface DevExpress.DataAccess.ISecureDataConverter {
    public abstract virtual string Protect(string entity);
    public abstract virtual string Unprotect(string protectedEntity);
}
public class DevExpress.DataAccess.Native.DynamicLookupResult : object {
    [CompilerGeneratedAttribute]
private bool <FilterApplied>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualDataMember>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    public bool FilterApplied { get; public set; }
    public string ActualDataMember { get; public set; }
    public object Result { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_FilterApplied();
    [CompilerGeneratedAttribute]
public void set_FilterApplied(bool value);
    [CompilerGeneratedAttribute]
public string get_ActualDataMember();
    [CompilerGeneratedAttribute]
public void set_ActualDataMember(string value);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
}
public interface DevExpress.DataAccess.Native.IDataSourceProtectorService {
    public abstract virtual void Protect(XElement dataSource);
    public abstract virtual void Unprotect(XElement dataSource);
}
public interface DevExpress.DataAccess.Native.IDynamicLookupSettingsDataProvider {
    public abstract virtual bool CanGetResult(string dataMember);
    public abstract virtual void Initialize(IServiceProvider serviceProvider);
    public abstract virtual DynamicLookupResult GetResult(string dataMember, IEnumerable`1<IParameter> parameters, string filterString, CancellationToken cancellationToken);
    public abstract virtual Task`1<DynamicLookupResult> GetResultAsync(string dataMember, IEnumerable`1<IParameter> parameters, string filterString, CancellationToken cancellationToken);
}
public enum DevExpress.DataAccess.Wizard.ExceptionHandlerKind : Enum {
    public int value__;
    public static ExceptionHandlerKind Default;
    public static ExceptionHandlerKind Connection;
    public static ExceptionHandlerKind Loading;
}
public interface DevExpress.DataAccess.Wizard.IUIRunnerContext {
    public abstract virtual IExceptionHandler CreateExceptionHandler(ExceptionHandlerKind kind, string caption);
    public abstract virtual IExceptionHandler CreateExceptionHandler(ExceptionHandlerKind kind);
}
public interface DevExpress.DataAccess.Wizard.IWizardRunnerContext {
    public IWaitFormActivator WaitFormActivator { get; }
    public abstract virtual IWaitFormActivator get_WaitFormActivator();
    public abstract virtual bool Run(Wizard`1<TModel> wizard);
    public abstract virtual IWizardView CreateWizardView(string wizardTitle, Size wizardSize);
    public abstract virtual void ShowMessage(string message, string caption);
    public abstract virtual void ShowMessage(string message);
    public abstract virtual bool Confirm(string message);
}
public interface DevExpress.DataAccess.Wizard.Services.IExceptionHandler {
    public bool AnyExceptions { get; }
    public abstract virtual void HandleException(Exception exception);
    public abstract virtual bool get_AnyExceptions();
}
public interface DevExpress.DataAccess.Wizard.Services.ISupportCancel {
    public abstract virtual void Cancel();
}
public interface DevExpress.DataAccess.Wizard.Services.IWaitFormActivator {
    public abstract virtual void CloseWaitForm();
    public abstract virtual void CloseWaitForm(bool throwException, int delay, bool waitForClose);
    public abstract virtual void EnableWaitFormDescription(bool show);
    public abstract virtual void EnableCancelButton(bool enable);
    public abstract virtual void ShowWaitForm(bool fadeIn, bool fadeOut, bool useDelay);
    public abstract virtual void SetWaitFormCaption(string caption);
    public abstract virtual void SetWaitFormDescription(string message);
    public abstract virtual void SetWaitFormObject(ISupportCancel dataSourceLoader);
}
public class DevExpress.DirectX.Common.ArrayMarshaler : Marshaler {
    private GCHandle arrayHandle;
    [SecuritySafeCriticalAttribute]
public ArrayMarshaler(Array value);
    public ArrayMarshaler(Guid value);
    [SecuritySafeCriticalAttribute]
protected virtual void FreePointer();
}
public class DevExpress.DirectX.Common.Direct2D.D2D_MATRIX_3X2_F : ValueType {
    private static D2D_MATRIX_3X2_F identity;
    private float m11;
    private float m12;
    private float m21;
    private float m22;
    private float dx;
    private float dy;
    public static D2D_MATRIX_3X2_F Identity { get; }
    public float M11 { get; }
    public float M12 { get; }
    public float M21 { get; }
    public float M22 { get; }
    public float Dx { get; }
    public float Dy { get; }
    public D2D_MATRIX_3X2_F(float m11, float m12, float m21, float m22, float dx, float dy);
    private static D2D_MATRIX_3X2_F();
    public static D2D_MATRIX_3X2_F get_Identity();
    public float get_M11();
    public float get_M12();
    public float get_M21();
    public float get_M22();
    public float get_Dx();
    public float get_Dy();
}
public class DevExpress.DirectX.Common.Direct2D.D2D_POINT_2F : ValueType {
    private static D2D_POINT_2F empty;
    private float x;
    private float y;
    public static D2D_POINT_2F Empty { get; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public D2D_POINT_2F(float x, float y);
    private static D2D_POINT_2F();
    public static D2D_POINT_2F get_Empty();
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
}
public class DevExpress.DirectX.Common.Direct2D.D2D_POINT_2U : ValueType {
    private static D2D_POINT_2U empty;
    private int x;
    private int y;
    public static D2D_POINT_2U Empty { get; }
    public D2D_POINT_2U(int x, int y);
    private static D2D_POINT_2U();
    public static D2D_POINT_2U get_Empty();
}
public class DevExpress.DirectX.Common.Direct2D.D2D_RECT_F : ValueType {
    private static D2D_RECT_F infinite;
    private float left;
    private float top;
    private float right;
    private float bottom;
    public static D2D_RECT_F Infinite { get; }
    public float Left { get; }
    public float Top { get; }
    public float Right { get; }
    public float Bottom { get; }
    public D2D_RECT_F(float left, float top, float right, float bottom);
    private static D2D_RECT_F();
    public static D2D_RECT_F get_Infinite();
    public float get_Left();
    public float get_Top();
    public float get_Right();
    public float get_Bottom();
}
public class DevExpress.DirectX.Common.Direct2D.D2D_RECT_U : ValueType {
    private int left;
    private int top;
    private int right;
    private int bottom;
    public int Left { get; }
    public int Top { get; }
    public int Right { get; }
    public int Bottom { get; }
    public int Height { get; }
    public int Width { get; }
    public D2D_RECT_U(int left, int top, int right, int bottom);
    public static D2D_RECT_F op_Implicit(D2D_RECT_U rect);
    public int get_Left();
    public int get_Top();
    public int get_Right();
    public int get_Bottom();
    public int get_Height();
    public int get_Width();
}
public class DevExpress.DirectX.Common.Direct2D.D2D_SIZE_F : ValueType {
    private float width;
    private float height;
    public float Width { get; }
    public float Height { get; }
    public D2D_SIZE_F(float width, float height);
    public float get_Width();
    public float get_Height();
}
public class DevExpress.DirectX.Common.Direct2D.D2D_SIZE_U : ValueType {
    private int width;
    private int height;
    public int Width { get; }
    public int Height { get; }
    public D2D_SIZE_U(int width, int height);
    public int get_Width();
    public int get_Height();
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_ALPHA_MODE : Enum {
    public int value__;
    public static D2D1_ALPHA_MODE Unknown;
    public static D2D1_ALPHA_MODE Premultiplied;
    public static D2D1_ALPHA_MODE Straight;
    public static D2D1_ALPHA_MODE Ignore;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_ANTIALIAS_MODE : Enum {
    public int value__;
    public static D2D1_ANTIALIAS_MODE PerPrimitive;
    public static D2D1_ANTIALIAS_MODE Aliased;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_BEZIER_SEGMENT : ValueType {
    private D2D_POINT_2F point1;
    private D2D_POINT_2F point2;
    private D2D_POINT_2F point3;
    public D2D_POINT_2F Point1 { get; }
    public D2D_POINT_2F Point2 { get; }
    public D2D_POINT_2F Point3 { get; }
    public D2D1_BEZIER_SEGMENT(D2D_POINT_2F point1, D2D_POINT_2F point2, D2D_POINT_2F point3);
    public D2D_POINT_2F get_Point1();
    public D2D_POINT_2F get_Point2();
    public D2D_POINT_2F get_Point3();
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1 : ValueType {
    private D2D1_EXTEND_MODE extendModeX;
    private D2D1_EXTEND_MODE extendModeY;
    private D2D1_INTERPOLATION_MODE interpolationMode;
    public D2D1_BITMAP_BRUSH_PROPERTIES1(D2D1_INTERPOLATION_MODE interpolationMode);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE : Enum {
    public int value__;
    public static D2D1_BITMAP_INTERPOLATION_MODE NearestNeighbor;
    public static D2D1_BITMAP_INTERPOLATION_MODE Linear;
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct2D.D2D1_BITMAP_OPTIONS : Enum {
    public int value__;
    public static D2D1_BITMAP_OPTIONS None;
    public static D2D1_BITMAP_OPTIONS Target;
    public static D2D1_BITMAP_OPTIONS CannotDraw;
    public static D2D1_BITMAP_OPTIONS CpuRead;
    public static D2D1_BITMAP_OPTIONS GdiCompatible;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_BITMAP_PROPERTIES : ValueType {
    private D2D1_PIXEL_FORMAT pixelFormat;
    private float dpiX;
    private float dpiY;
    public D2D1_BITMAP_PROPERTIES(D2D1_PIXEL_FORMAT pixelFormat, float dpiX, float dpiY);
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_BITMAP_PROPERTIES1 : ValueType {
    private static D2D1_BITMAP_PROPERTIES1 defaultProperties;
    private D2D1_PIXEL_FORMAT pixelFormat;
    private float dpiX;
    private float dpiY;
    private D2D1_BITMAP_OPTIONS bitmapOptions;
    private IntPtr colorContextPointer;
    public static D2D1_BITMAP_PROPERTIES1 Default { get; }
    public D2D1_BITMAP_PROPERTIES1(D2D1_PIXEL_FORMAT pixelFormat, float dpiX, float dpiY, D2D1_BITMAP_OPTIONS bitmapOptions, IntPtr colorContextPointer);
    private static D2D1_BITMAP_PROPERTIES1();
    public static D2D1_BITMAP_PROPERTIES1 get_Default();
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_BLEND_MODE : Enum {
    public int value__;
    public static D2D1_BLEND_MODE Multiply;
    public static D2D1_BLEND_MODE Screen;
    public static D2D1_BLEND_MODE Darken;
    public static D2D1_BLEND_MODE Lighten;
    public static D2D1_BLEND_MODE Dissolve;
    public static D2D1_BLEND_MODE ColorBurn;
    public static D2D1_BLEND_MODE LinearBurn;
    public static D2D1_BLEND_MODE DarkerColor;
    public static D2D1_BLEND_MODE LighterColor;
    public static D2D1_BLEND_MODE ColorDodge;
    public static D2D1_BLEND_MODE LinearDodge;
    public static D2D1_BLEND_MODE Overlay;
    public static D2D1_BLEND_MODE SoftLight;
    public static D2D1_BLEND_MODE HardLight;
    public static D2D1_BLEND_MODE VividLight;
    public static D2D1_BLEND_MODE LinearLight;
    public static D2D1_BLEND_MODE PinLight;
    public static D2D1_BLEND_MODE HardMix;
    public static D2D1_BLEND_MODE Difference;
    public static D2D1_BLEND_MODE Exclusion;
    public static D2D1_BLEND_MODE Hue;
    public static D2D1_BLEND_MODE Saturation;
    public static D2D1_BLEND_MODE Color;
    public static D2D1_BLEND_MODE Luminosity;
    public static D2D1_BLEND_MODE Subtract;
    public static D2D1_BLEND_MODE Division;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_BRUSH_PROPERTIES : ValueType {
    private float opacity;
    private D2D_MATRIX_3X2_F transform;
    public static D2D1_BRUSH_PROPERTIES Default { get; }
    public float Opacity { get; }
    public D2D_MATRIX_3X2_F Transform { get; }
    public D2D1_BRUSH_PROPERTIES(float opacity, D2D_MATRIX_3X2_F transform);
    public static D2D1_BRUSH_PROPERTIES get_Default();
    public float get_Opacity();
    public D2D_MATRIX_3X2_F get_Transform();
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_BUFFER_PRECISION : Enum {
    public int value__;
    public static D2D1_BUFFER_PRECISION PRECISION_UNKNOWN;
    public static D2D1_BUFFER_PRECISION PRECISION_8BPC_UNORM;
    public static D2D1_BUFFER_PRECISION PRECISION_8BPC_UNORM_SRGB;
    public static D2D1_BUFFER_PRECISION PRECISION_16BPC_UNORM;
    public static D2D1_BUFFER_PRECISION PRECISION_16BPC_FLOAT;
    public static D2D1_BUFFER_PRECISION PRECISION_32BPC_FLOAT;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_CAP_STYLE : Enum {
    public int value__;
    public static D2D1_CAP_STYLE Flat;
    public static D2D1_CAP_STYLE Square;
    public static D2D1_CAP_STYLE Round;
    public static D2D1_CAP_STYLE Triangle;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_CHANGE_TYPE : Enum {
    public int value__;
    public static D2D1_CHANGE_TYPE None;
    public static D2D1_CHANGE_TYPE Properties;
    public static D2D1_CHANGE_TYPE Context;
    public static D2D1_CHANGE_TYPE Graph;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_CHANNEL_DEPTH : Enum {
    public int value__;
    public static D2D1_CHANNEL_DEPTH DEPTH_DEFAULT;
    public static D2D1_CHANNEL_DEPTH DEPTH_1;
    public static D2D1_CHANNEL_DEPTH DEPTH_4;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_COLOR_F : ValueType {
    private static D2D1_COLOR_F transparentWhite;
    private float r;
    private float g;
    private float b;
    private float a;
    public static D2D1_COLOR_F TransparentWhite { get; }
    public bool IsTransparent { get; }
    public float R { get; }
    public float G { get; }
    public float B { get; }
    public float A { get; }
    public D2D1_COLOR_F(float r, float g, float b, float a);
    private static D2D1_COLOR_F();
    public static D2D1_COLOR_F get_TransparentWhite();
    public bool get_IsTransparent();
    public float get_R();
    public float get_G();
    public float get_B();
    public float get_A();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(D2D1_COLOR_F other);
    public virtual int GetHashCode();
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_COLOR_SPACE : Enum {
    public int value__;
    public static D2D1_COLOR_SPACE Custom;
    public static D2D1_COLOR_SPACE SRgb;
    public static D2D1_COLOR_SPACE SCRgb;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_COMBINE_MODE : Enum {
    public int value__;
    public static D2D1_COMBINE_MODE Union;
    public static D2D1_COMBINE_MODE Intersect;
    public static D2D1_COMBINE_MODE Xor;
    public static D2D1_COMBINE_MODE Exclude;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_COMPOSITE_MODE : Enum {
    public int value__;
    public static D2D1_COMPOSITE_MODE SourceOver;
    public static D2D1_COMPOSITE_MODE DestinationOver;
    public static D2D1_COMPOSITE_MODE SourceIn;
    public static D2D1_COMPOSITE_MODE DestinationIn;
    public static D2D1_COMPOSITE_MODE SourceOut;
    public static D2D1_COMPOSITE_MODE DestinationOut;
    public static D2D1_COMPOSITE_MODE SourceAtop;
    public static D2D1_COMPOSITE_MODE DestinationAtop;
    public static D2D1_COMPOSITE_MODE Xor;
    public static D2D1_COMPOSITE_MODE Plus;
    public static D2D1_COMPOSITE_MODE SourceCopy;
    public static D2D1_COMPOSITE_MODE BoundedSourceCopy;
    public static D2D1_COMPOSITE_MODE MaskInvert;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_CREATION_PROPERTIES : ValueType {
    private D2D1_THREADING_MODE threadingMode;
    private D2D1_DEBUG_LEVEL debugLevel;
    private D2D1_DEVICE_CONTEXT_OPTIONS options;
    public D2D1_CREATION_PROPERTIES(D2D1_DEBUG_LEVEL debugLevel, D2D1_THREADING_MODE threadingMode, D2D1_DEVICE_CONTEXT_OPTIONS options);
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES : ValueType {
    private IntPtr shaderBufferWithInputSignature;
    private int shaderBufferSize;
    private IntPtr inputElements;
    private int elementCount;
    private int stride;
    public D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES(IntPtr shaderBufferWithInputSignature, int shaderBufferSize, IntPtr inputElements, int elementCount, int stride);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_DASH_STYLE : Enum {
    public int value__;
    public static D2D1_DASH_STYLE Solid;
    public static D2D1_DASH_STYLE Dash;
    public static D2D1_DASH_STYLE Dot;
    public static D2D1_DASH_STYLE DashDot;
    public static D2D1_DASH_STYLE DashDotDot;
    public static D2D1_DASH_STYLE Custom;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_DEBUG_LEVEL : Enum {
    public int value__;
    public static D2D1_DEBUG_LEVEL None;
    public static D2D1_DEBUG_LEVEL Error;
    public static D2D1_DEBUG_LEVEL Warning;
    public static D2D1_DEBUG_LEVEL Information;
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct2D.D2D1_DEVICE_CONTEXT_OPTIONS : Enum {
    public int value__;
    public static D2D1_DEVICE_CONTEXT_OPTIONS None;
    public static D2D1_DEVICE_CONTEXT_OPTIONS EnableMultithreadedOptimizations;
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct2D.D2D1_DRAW_TEXT_OPTIONS : Enum {
    public int value__;
    public static D2D1_DRAW_TEXT_OPTIONS NONE;
    public static D2D1_DRAW_TEXT_OPTIONS NO_SNAP;
    public static D2D1_DRAW_TEXT_OPTIONS CLIP;
    public static D2D1_DRAW_TEXT_OPTIONS ENABLE_COLOR_FONT;
    public static D2D1_DRAW_TEXT_OPTIONS DISABLE_COLOR_BITMAP_SNAPPING;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_ELLIPSE : ValueType {
    private D2D_POINT_2F point;
    private float radiusX;
    private float radiusY;
    public D2D1_ELLIPSE(D2D_POINT_2F point, float radiusX, float radiusY);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_EXTEND_MODE : Enum {
    public int value__;
    public static D2D1_EXTEND_MODE Clamp;
    public static D2D1_EXTEND_MODE Wrap;
    public static D2D1_EXTEND_MODE Mirror;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_FACTORY_OPTIONS : ValueType {
    private D2D1_DEBUG_LEVEL debugLevel;
    public D2D1_FACTORY_OPTIONS(D2D1_DEBUG_LEVEL debugLevel);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_FACTORY_TYPE : Enum {
    public int value__;
    public static D2D1_FACTORY_TYPE SingleThreaded;
    public static D2D1_FACTORY_TYPE MultiThreaded;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_FEATURE_LEVEL : Enum {
    public int value__;
    public static D2D1_FEATURE_LEVEL Level_DEFAULT;
    public static D2D1_FEATURE_LEVEL Level_9;
    public static D2D1_FEATURE_LEVEL Level_10;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_FIGURE_BEGIN : Enum {
    public int value__;
    public static D2D1_FIGURE_BEGIN Filled;
    public static D2D1_FIGURE_BEGIN Hollow;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_FIGURE_END : Enum {
    public int value__;
    public static D2D1_FIGURE_END Open;
    public static D2D1_FIGURE_END Closed;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_FILL_MODE : Enum {
    public int value__;
    public static D2D1_FILL_MODE Alternate;
    public static D2D1_FILL_MODE Winding;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_FILTER : Enum {
    public int value__;
    public static D2D1_FILTER MIN_MAG_MIP_POINT;
    public static D2D1_FILTER MIN_MAG_POINT_MIP_LINEAR;
    public static D2D1_FILTER MIN_POINT_MAG_LINEAR_MIP_POINT;
    public static D2D1_FILTER MIN_POINT_MAG_MIP_LINEAR;
    public static D2D1_FILTER MIN_LINEAR_MAG_MIP_POINT;
    public static D2D1_FILTER MIN_LINEAR_MAG_POINT_MIP_LINEAR;
    public static D2D1_FILTER MIN_MAG_LINEAR_MIP_POINT;
    public static D2D1_FILTER MIN_MAG_MIP_LINEAR;
    public static D2D1_FILTER ANISOTROPIC;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_GAMMA : Enum {
    public int value__;
    public static D2D1_GAMMA StandardRgb;
    public static D2D1_GAMMA Linear;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_GRADIENT_MESH_PATCH : ValueType {
    private D2D_POINT_2F point00;
    private D2D_POINT_2F point01;
    private D2D_POINT_2F point02;
    private D2D_POINT_2F point03;
    private D2D_POINT_2F point10;
    private D2D_POINT_2F point11;
    private D2D_POINT_2F point12;
    private D2D_POINT_2F point13;
    private D2D_POINT_2F point20;
    private D2D_POINT_2F point21;
    private D2D_POINT_2F point22;
    private D2D_POINT_2F point23;
    private D2D_POINT_2F point30;
    private D2D_POINT_2F point31;
    private D2D_POINT_2F point32;
    private D2D_POINT_2F point33;
    private D2D1_COLOR_F color00;
    private D2D1_COLOR_F color03;
    private D2D1_COLOR_F color30;
    private D2D1_COLOR_F color33;
    private D2D1_PATCH_EDGE_MODE topEdgeMode;
    private D2D1_PATCH_EDGE_MODE leftEdgeMode;
    private D2D1_PATCH_EDGE_MODE bottomEdgeMode;
    private D2D1_PATCH_EDGE_MODE rightEdgeMode;
    public D2D_POINT_2F Point00 { get; public set; }
    public D2D_POINT_2F Point01 { get; public set; }
    public D2D_POINT_2F Point02 { get; public set; }
    public D2D_POINT_2F Point03 { get; public set; }
    public D2D_POINT_2F Point10 { get; public set; }
    public D2D_POINT_2F Point11 { get; public set; }
    public D2D_POINT_2F Point12 { get; public set; }
    public D2D_POINT_2F Point13 { get; public set; }
    public D2D_POINT_2F Point20 { get; public set; }
    public D2D_POINT_2F Point21 { get; public set; }
    public D2D_POINT_2F Point22 { get; public set; }
    public D2D_POINT_2F Point23 { get; public set; }
    public D2D_POINT_2F Point30 { get; public set; }
    public D2D_POINT_2F Point31 { get; public set; }
    public D2D_POINT_2F Point32 { get; public set; }
    public D2D_POINT_2F Point33 { get; public set; }
    public D2D1_COLOR_F Color00 { get; public set; }
    public D2D1_COLOR_F Color03 { get; public set; }
    public D2D1_COLOR_F Color30 { get; public set; }
    public D2D1_COLOR_F Color33 { get; public set; }
    public D2D1_PATCH_EDGE_MODE TopEdgeMode { get; public set; }
    public D2D1_PATCH_EDGE_MODE LeftEdgeMode { get; public set; }
    public D2D1_PATCH_EDGE_MODE BottomEdgeMode { get; public set; }
    public D2D1_PATCH_EDGE_MODE RightEdgeMode { get; public set; }
    public D2D_POINT_2F get_Point00();
    public void set_Point00(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point01();
    public void set_Point01(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point02();
    public void set_Point02(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point03();
    public void set_Point03(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point10();
    public void set_Point10(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point11();
    public void set_Point11(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point12();
    public void set_Point12(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point13();
    public void set_Point13(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point20();
    public void set_Point20(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point21();
    public void set_Point21(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point22();
    public void set_Point22(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point23();
    public void set_Point23(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point30();
    public void set_Point30(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point31();
    public void set_Point31(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point32();
    public void set_Point32(D2D_POINT_2F value);
    public D2D_POINT_2F get_Point33();
    public void set_Point33(D2D_POINT_2F value);
    public D2D1_COLOR_F get_Color00();
    public void set_Color00(D2D1_COLOR_F value);
    public D2D1_COLOR_F get_Color03();
    public void set_Color03(D2D1_COLOR_F value);
    public D2D1_COLOR_F get_Color30();
    public void set_Color30(D2D1_COLOR_F value);
    public D2D1_COLOR_F get_Color33();
    public void set_Color33(D2D1_COLOR_F value);
    public D2D1_PATCH_EDGE_MODE get_TopEdgeMode();
    public void set_TopEdgeMode(D2D1_PATCH_EDGE_MODE value);
    public D2D1_PATCH_EDGE_MODE get_LeftEdgeMode();
    public void set_LeftEdgeMode(D2D1_PATCH_EDGE_MODE value);
    public D2D1_PATCH_EDGE_MODE get_BottomEdgeMode();
    public void set_BottomEdgeMode(D2D1_PATCH_EDGE_MODE value);
    public D2D1_PATCH_EDGE_MODE get_RightEdgeMode();
    public void set_RightEdgeMode(D2D1_PATCH_EDGE_MODE value);
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_GRADIENT_STOP : ValueType {
    private float position;
    private D2D1_COLOR_F color;
    public D2D1_GRADIENT_STOP(float position, D2D1_COLOR_F color);
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES : ValueType {
    private D2D_RECT_F sourceRectangle;
    private D2D1_EXTEND_MODE extendModeX;
    private D2D1_EXTEND_MODE extendModeY;
    private D2D1_INTERPOLATION_MODE interpolationMode;
    public D2D1_IMAGE_BRUSH_PROPERTIES(D2D_RECT_F sourceRectangle, D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, D2D1_INTERPOLATION_MODE interpolationMode);
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_INPUT_ELEMENT_DESC : ValueType {
    private IntPtr semanticName;
    private int semanticIndex;
    private DXGI_FORMAT format;
    private int inputSlot;
    private int alignedByteOffset;
    public D2D1_INPUT_ELEMENT_DESC(IntPtr semanticNamePtr, int semanticIndex, DXGI_FORMAT format, int inputSlot, int alignedByteOffset);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_INTERPOLATION_MODE : Enum {
    public int value__;
    public static D2D1_INTERPOLATION_MODE NearestNeighbor;
    public static D2D1_INTERPOLATION_MODE Linear;
    public static D2D1_INTERPOLATION_MODE Cubic;
    public static D2D1_INTERPOLATION_MODE MultiSampleLinear;
    public static D2D1_INTERPOLATION_MODE Anisotropic;
    public static D2D1_INTERPOLATION_MODE HighQualityCubic;
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct2D.D2D1_LAYER_OPTIONS : Enum {
    public int value__;
    public static D2D1_LAYER_OPTIONS None;
    public static D2D1_LAYER_OPTIONS InitializeForCleartype;
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct2D.D2D1_LAYER_OPTIONS1 : Enum {
    public int value__;
    public static D2D1_LAYER_OPTIONS1 None;
    public static D2D1_LAYER_OPTIONS1 InitializeFromBackground;
    public static D2D1_LAYER_OPTIONS1 IgnoreAlpha;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_LAYER_PARAMETERS_COMMON : ValueType {
    private D2D_RECT_F contentBounds;
    private IntPtr geometricMaskPointer;
    private D2D1_ANTIALIAS_MODE maskAntialiasMode;
    private D2D_MATRIX_3X2_F maskTransform;
    private float opacity;
    private IntPtr opacityBrushPointer;
    private D2D1_LAYER_OPTIONS layerOptions;
    public D2D1_LAYER_PARAMETERS_COMMON(D2D_RECT_F contentBounds, IntPtr geometricMaskPointer, D2D1_ANTIALIAS_MODE maskAntialiasMode, D2D_MATRIX_3X2_F maskTransform, float opacity, IntPtr opacityBrushPointer, D2D1_LAYER_OPTIONS layerOptions);
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_LAYER_PARAMETERS1_COMMON : ValueType {
    private D2D_RECT_F contentBounds;
    private IntPtr geometricMaskPointer;
    private D2D1_ANTIALIAS_MODE maskAntialiasMode;
    private D2D_MATRIX_3X2_F maskTransform;
    private float opacity;
    private IntPtr opacityBrushPointer;
    private D2D1_LAYER_OPTIONS1 layerOptions;
    public D2D1_LAYER_OPTIONS1 LayerOptions { get; }
    public D2D1_LAYER_PARAMETERS1_COMMON(D2D_RECT_F contentBounds, IntPtr geometricMaskPointer, D2D1_ANTIALIAS_MODE maskAntialiasMode, D2D_MATRIX_3X2_F maskTransform, float opacity, IntPtr opacityBrushPointer, D2D1_LAYER_OPTIONS1 layerOptions);
    public D2D1_LAYER_OPTIONS1 get_LayerOptions();
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_LINE_JOIN : Enum {
    public int value__;
    public static D2D1_LINE_JOIN Miter;
    public static D2D1_LINE_JOIN Bevel;
    public static D2D1_LINE_JOIN Round;
    public static D2D1_LINE_JOIN MiterOrBevel;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES : ValueType {
    private D2D_POINT_2F startPoint;
    private D2D_POINT_2F endPoint;
    public D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES(D2D_POINT_2F startPoint, D2D_POINT_2F endPoint);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_MAP_OPTIONS : Enum {
    public int value__;
    public static D2D1_MAP_OPTIONS None;
    public static D2D1_MAP_OPTIONS Read;
    public static D2D1_MAP_OPTIONS Write;
    public static D2D1_MAP_OPTIONS Discard;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_MAPPED_RECT : ValueType {
    private int pitch;
    private IntPtr bits;
    public int Pitch { get; }
    public IntPtr Bits { get; }
    public int get_Pitch();
    public IntPtr get_Bits();
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_PATCH_EDGE_MODE : Enum {
    public int value__;
    public static D2D1_PATCH_EDGE_MODE ALIASED;
    public static D2D1_PATCH_EDGE_MODE ANTIALIASED;
    public static D2D1_PATCH_EDGE_MODE ALIASED_INFLATED;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_PATH_SEGMENT : Enum {
    public int value__;
    public static D2D1_PATH_SEGMENT NONE;
    public static D2D1_PATH_SEGMENT FORCE_UNSTROKED;
    public static D2D1_PATH_SEGMENT FORCE_ROUND_LINE_JOIN;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_PIXEL_FORMAT : ValueType {
    public static D2D1_PIXEL_FORMAT Default;
    private DXGI_FORMAT format;
    private D2D1_ALPHA_MODE alphaMode;
    public DXGI_FORMAT Format { get; }
    public D2D1_ALPHA_MODE AlphaMode { get; }
    public D2D1_PIXEL_FORMAT(DXGI_FORMAT format, D2D1_ALPHA_MODE alphaMode);
    private static D2D1_PIXEL_FORMAT();
    public DXGI_FORMAT get_Format();
    public D2D1_ALPHA_MODE get_AlphaMode();
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_PIXEL_OPTIONS : Enum {
    public int value__;
    public static D2D1_PIXEL_OPTIONS None;
    public static D2D1_PIXEL_OPTIONS TrivialSampling;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_PRIMITIVE_BLEND : Enum {
    public int value__;
    public static D2D1_PRIMITIVE_BLEND SourceOver;
    public static D2D1_PRIMITIVE_BLEND Copy;
    public static D2D1_PRIMITIVE_BLEND Minimum;
    public static D2D1_PRIMITIVE_BLEND Add;
    public static D2D1_PRIMITIVE_BLEND Maximum;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_PRINT_CONTROL_PROPERTIES : ValueType {
    public static D2D1_PRINT_CONTROL_PROPERTIES Default;
    private D2D1_PRINT_FONT_SUBSET_MODE fontSubset;
    private float rasterDPI;
    private D2D1_COLOR_SPACE colorSpace;
    public D2D1_PRINT_CONTROL_PROPERTIES(D2D1_PRINT_FONT_SUBSET_MODE fontSubset, float rasterDPI, D2D1_COLOR_SPACE colorSpace);
    private static D2D1_PRINT_CONTROL_PROPERTIES();
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_PRINT_FONT_SUBSET_MODE : Enum {
    public int value__;
    public static D2D1_PRINT_FONT_SUBSET_MODE Default;
    public static D2D1_PRINT_FONT_SUBSET_MODE EachPage;
    public static D2D1_PRINT_FONT_SUBSET_MODE None;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_PROPERTY_BINDING : ValueType {
    private IntPtr propertyName;
    private IntPtr setFunction;
    private IntPtr getFunction;
    public D2D1_PROPERTY_BINDING(IntPtr propertyName, IntPtr setFunction, IntPtr getFunction);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_PROPERTY_TYPE : Enum {
    public int value__;
    public static D2D1_PROPERTY_TYPE Unknown;
    public static D2D1_PROPERTY_TYPE String;
    public static D2D1_PROPERTY_TYPE Bool;
    public static D2D1_PROPERTY_TYPE UInt32;
    public static D2D1_PROPERTY_TYPE Int32;
    public static D2D1_PROPERTY_TYPE Float;
    public static D2D1_PROPERTY_TYPE Vector2;
    public static D2D1_PROPERTY_TYPE Vector3;
    public static D2D1_PROPERTY_TYPE Vector4;
    public static D2D1_PROPERTY_TYPE Blob;
    public static D2D1_PROPERTY_TYPE IUnknown;
    public static D2D1_PROPERTY_TYPE Enum;
    public static D2D1_PROPERTY_TYPE Array;
    public static D2D1_PROPERTY_TYPE Clsid;
    public static D2D1_PROPERTY_TYPE Matrix3x2;
    public static D2D1_PROPERTY_TYPE Matrix4x3;
    public static D2D1_PROPERTY_TYPE Matrix4x4;
    public static D2D1_PROPERTY_TYPE Matrix5x4;
    public static D2D1_PROPERTY_TYPE ColorContext;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES : ValueType {
    private D2D_POINT_2F center;
    private D2D_POINT_2F gradientOriginOffset;
    private float radiusX;
    private float radiusY;
    public D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES(D2D_POINT_2F center, D2D_POINT_2F gradientOriginOffset, float radiusX, float radiusY);
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_RECT_L : ValueType {
    public int left;
    public int top;
    public int right;
    public int bottom;
    public D2D1_RECT_L(int left, int top, int right, int bottom);
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_RENDER_TARGET_PROPERTIES : ValueType {
    private D2D1_RENDER_TARGET_TYPE type;
    private D2D1_PIXEL_FORMAT pixelFormat;
    private float dpiX;
    private float dpiY;
    private D2D1_RENDER_TARGET_USAGE usage;
    private D2D1_FEATURE_LEVEL minLevel;
    public D2D1_RENDER_TARGET_TYPE Type { get; }
    public D2D1_PIXEL_FORMAT PixelFormat { get; }
    public float DpiX { get; }
    public float DpiY { get; }
    public D2D1_RENDER_TARGET_USAGE Usage { get; }
    public D2D1_FEATURE_LEVEL MinLevel { get; }
    public D2D1_RENDER_TARGET_PROPERTIES(D2D1_RENDER_TARGET_TYPE type, D2D1_PIXEL_FORMAT pixelFormat, float dpiX, float dpiY, D2D1_RENDER_TARGET_USAGE usage, D2D1_FEATURE_LEVEL minLevel);
    public D2D1_RENDER_TARGET_TYPE get_Type();
    public D2D1_PIXEL_FORMAT get_PixelFormat();
    public float get_DpiX();
    public float get_DpiY();
    public D2D1_RENDER_TARGET_USAGE get_Usage();
    public D2D1_FEATURE_LEVEL get_MinLevel();
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_RENDER_TARGET_TYPE : Enum {
    public int value__;
    public static D2D1_RENDER_TARGET_TYPE Default;
    public static D2D1_RENDER_TARGET_TYPE Software;
    public static D2D1_RENDER_TARGET_TYPE Hardware;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_RENDER_TARGET_USAGE : Enum {
    public int value__;
    public static D2D1_RENDER_TARGET_USAGE None;
    public static D2D1_RENDER_TARGET_USAGE ForceBitmapRemoting;
    public static D2D1_RENDER_TARGET_USAGE GdiCompatible;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_ROUNDED_RECT : ValueType {
    private D2D_RECT_F rect;
    private float radiusX;
    private float radiusY;
    public D2D_RECT_F Rect { get; }
    public float RadiusX { get; }
    public float RadiusY { get; }
    public D2D1_ROUNDED_RECT(D2D_RECT_F rect, float radiusX, float radiusY);
    public D2D_RECT_F get_Rect();
    public float get_RadiusX();
    public float get_RadiusY();
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_STROKE_STYLE_PROPERTIES : ValueType {
    private D2D1_CAP_STYLE startCap;
    private D2D1_CAP_STYLE endCap;
    private D2D1_CAP_STYLE dashCap;
    private D2D1_LINE_JOIN lineJoin;
    private float miterLimit;
    private D2D1_DASH_STYLE dashStyle;
    private float dashOffset;
    public D2D1_STROKE_STYLE_PROPERTIES(D2D1_CAP_STYLE lineCap, D2D1_LINE_JOIN lineJoin, float miterLimit);
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_STROKE_STYLE_PROPERTIES1 : ValueType {
    private D2D1_CAP_STYLE startCap;
    private D2D1_CAP_STYLE endCap;
    private D2D1_CAP_STYLE dashCap;
    private D2D1_LINE_JOIN lineJoin;
    private float miterLimit;
    private D2D1_DASH_STYLE dashStyle;
    private float dashOffset;
    private D2D1_STROKE_TRANSFORM_TYPE transformType;
    public D2D1_STROKE_STYLE_PROPERTIES1(D2D1_CAP_STYLE lineCap, D2D1_LINE_JOIN lineJoin, float miterLimit, bool isDashed, float dashOffset, bool isHairline);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_STROKE_TRANSFORM_TYPE : Enum {
    public int value__;
    public static D2D1_STROKE_TRANSFORM_TYPE Normal;
    public static D2D1_STROKE_TRANSFORM_TYPE Fixed;
    public static D2D1_STROKE_TRANSFORM_TYPE Hairline;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_TABLETRANSFER_PROP : Enum {
    public int value__;
    public static D2D1_TABLETRANSFER_PROP RedTable;
    public static D2D1_TABLETRANSFER_PROP RedDisable;
    public static D2D1_TABLETRANSFER_PROP GreenTable;
    public static D2D1_TABLETRANSFER_PROP GreenDisable;
    public static D2D1_TABLETRANSFER_PROP BlueTable;
    public static D2D1_TABLETRANSFER_PROP BlueDisable;
    public static D2D1_TABLETRANSFER_PROP AlphaTable;
    public static D2D1_TABLETRANSFER_PROP AlphaDisable;
    public static D2D1_TABLETRANSFER_PROP ClampOutput;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_TEXT_ANTIALIAS_MODE : Enum {
    public int value__;
    public static D2D1_TEXT_ANTIALIAS_MODE Default;
    public static D2D1_TEXT_ANTIALIAS_MODE Cleartype;
    public static D2D1_TEXT_ANTIALIAS_MODE Grayscale;
    public static D2D1_TEXT_ANTIALIAS_MODE Aliased;
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_THREADING_MODE : Enum {
    public int value__;
    public static D2D1_THREADING_MODE D2D1_THREADING_MODE_SINGLE_THREADED;
    public static D2D1_THREADING_MODE D2D1_THREADING_MODE_MULTI_THREADED;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_VERTEX_BUFFER_PROPERTIES : ValueType {
    private int inputCount;
    private D2D1_VERTEX_USAGE usage;
    private IntPtr data;
    private int byteWidth;
    public D2D1_VERTEX_BUFFER_PROPERTIES(int inputCount, D2D1_VERTEX_USAGE usage, IntPtr data, int byteWidth);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_VERTEX_OPTIONS : Enum {
    public int value__;
    public static D2D1_VERTEX_OPTIONS None;
    public static D2D1_VERTEX_OPTIONS DoNotClear;
    public static D2D1_VERTEX_OPTIONS UseDepthBuffer;
    public static D2D1_VERTEX_OPTIONS AssumeNoOverlap;
}
public class DevExpress.DirectX.Common.Direct2D.D2D1_VERTEX_RANGE : ValueType {
    private int startVertex;
    private int vertexCount;
    public D2D1_VERTEX_RANGE(int startVertex, int vertexCount);
}
public enum DevExpress.DirectX.Common.Direct2D.D2D1_VERTEX_USAGE : Enum {
    public int value__;
    public static D2D1_VERTEX_USAGE Static;
    public static D2D1_VERTEX_USAGE Dynamic;
}
public static class DevExpress.DirectX.Common.Direct2D.D2DErrorCodes : object {
    public static int D2DERR_RECREATE_TARGET;
}
public enum DevExpress.DirectX.Common.Direct3D.D3D_DRIVER_TYPE : Enum {
    public int value__;
    public static D3D_DRIVER_TYPE UNKNOWN;
    public static D3D_DRIVER_TYPE HARDWARE;
    public static D3D_DRIVER_TYPE REFERENCE;
    public static D3D_DRIVER_TYPE NULL;
    public static D3D_DRIVER_TYPE SOFTWARE;
    public static D3D_DRIVER_TYPE WARP;
}
public enum DevExpress.DirectX.Common.Direct3D.D3D_FEATURE_LEVEL : Enum {
    public int value__;
    public static D3D_FEATURE_LEVEL LEVEL_9_2;
    public static D3D_FEATURE_LEVEL LEVEL_9_1;
    public static D3D_FEATURE_LEVEL LEVEL_9_3;
    public static D3D_FEATURE_LEVEL LEVEL_10_0;
    public static D3D_FEATURE_LEVEL LEVEL_10_1;
    public static D3D_FEATURE_LEVEL LEVEL_11_0;
    public static D3D_FEATURE_LEVEL LEVEL_11_1;
    public static D3D_FEATURE_LEVEL LEVEL_12_0;
    public static D3D_FEATURE_LEVEL LEVEL_12_1;
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct3D.D3D11_BIND_FLAG : Enum {
    public int value__;
    public static D3D11_BIND_FLAG VertexBuffer;
    public static D3D11_BIND_FLAG IndexBuffer;
    public static D3D11_BIND_FLAG ConstantBuffer;
    public static D3D11_BIND_FLAG ShaderResource;
    public static D3D11_BIND_FLAG StreamOutput;
    public static D3D11_BIND_FLAG RenderTarget;
    public static D3D11_BIND_FLAG DepthStencil;
    public static D3D11_BIND_FLAG UnorderedAccess;
    public static D3D11_BIND_FLAG Decoder;
    public static D3D11_BIND_FLAG VideoEncoder;
    public static D3D11_BIND_FLAG None;
}
public class DevExpress.DirectX.Common.Direct3D.D3D11_BOX : ValueType {
    public int left;
    public int top;
    public int front;
    public int right;
    public int bottom;
    public int back;
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct3D.D3D11_CPU_ACCESS_FLAG : Enum {
    public int value__;
    public static D3D11_CPU_ACCESS_FLAG Write;
    public static D3D11_CPU_ACCESS_FLAG Read;
    public static D3D11_CPU_ACCESS_FLAG None;
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct3D.D3D11_CREATE_DEVICE_FLAG : Enum {
    public int value__;
    public static D3D11_CREATE_DEVICE_FLAG SingleThreaded;
    public static D3D11_CREATE_DEVICE_FLAG Debug;
    public static D3D11_CREATE_DEVICE_FLAG SwitchToRef;
    public static D3D11_CREATE_DEVICE_FLAG PreventThreadingOptimizations;
    public static D3D11_CREATE_DEVICE_FLAG BgraSupport;
    public static D3D11_CREATE_DEVICE_FLAG Debuggable;
    public static D3D11_CREATE_DEVICE_FLAG PreventAlteringLayerSettingsFromRegistry;
    public static D3D11_CREATE_DEVICE_FLAG DisableGpuTimeout;
    public static D3D11_CREATE_DEVICE_FLAG VideoSupport;
    public static D3D11_CREATE_DEVICE_FLAG None;
}
public enum DevExpress.DirectX.Common.Direct3D.D3D11_MAP : Enum {
    public int value__;
    public static D3D11_MAP Read;
    public static D3D11_MAP Write;
    public static D3D11_MAP ReadWrite;
    public static D3D11_MAP WriteDiscard;
    public static D3D11_MAP WriteNoOverwrite;
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct3D.D3D11_MAP_FLAG : Enum {
    public int value__;
    public static D3D11_MAP_FLAG DoNotWait;
    public static D3D11_MAP_FLAG None;
}
public class DevExpress.DirectX.Common.Direct3D.D3D11_MAPPED_SUBRESOURCE : ValueType {
    private IntPtr pData;
    private int rowPitch;
    private int depthPitch;
    public IntPtr PData { get; }
    public int RowPitch { get; }
    public int DepthPitch { get; }
    public IntPtr get_PData();
    public int get_RowPitch();
    public int get_DepthPitch();
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.Direct3D.D3D11_RESOURCE_MISC_FLAG : Enum {
    public int value__;
    public static D3D11_RESOURCE_MISC_FLAG GENERATE_MIPS;
    public static D3D11_RESOURCE_MISC_FLAG SHARED;
    public static D3D11_RESOURCE_MISC_FLAG TEXTURECUBE;
    public static D3D11_RESOURCE_MISC_FLAG DRAWINDIRECT_ARGS;
    public static D3D11_RESOURCE_MISC_FLAG BUFFER_ALLOW_RAW_VIEWS;
    public static D3D11_RESOURCE_MISC_FLAG BUFFER_STRUCTURED;
    public static D3D11_RESOURCE_MISC_FLAG RESOURCE_CLAMP;
    public static D3D11_RESOURCE_MISC_FLAG SHARED_KEYEDMUTEX;
    public static D3D11_RESOURCE_MISC_FLAG GDI_COMPATIBLE;
    public static D3D11_RESOURCE_MISC_FLAG SHARED_NTHANDLE;
    public static D3D11_RESOURCE_MISC_FLAG RESTRICTED_CONTENT;
    public static D3D11_RESOURCE_MISC_FLAG RESTRICT_SHARED_RESOURCE;
    public static D3D11_RESOURCE_MISC_FLAG RESTRICT_SHARED_RESOURCE_DRIVER;
    public static D3D11_RESOURCE_MISC_FLAG GUARDED;
    public static D3D11_RESOURCE_MISC_FLAG TILE_POOL;
    public static D3D11_RESOURCE_MISC_FLAG TILED;
    public static D3D11_RESOURCE_MISC_FLAG HW_PROTECTED;
}
public class DevExpress.DirectX.Common.Direct3D.D3D11_TEXTURE2D_DESC : ValueType {
    private int width;
    private int height;
    private int mipLevels;
    private int arraySize;
    private DXGI_FORMAT format;
    private DXGI_SAMPLE_DESC sampleDescription;
    private D3D11_USAGE usage;
    private D3D11_BIND_FLAG bindFlags;
    private D3D11_CPU_ACCESS_FLAG cpuAccessFlags;
    private D3D11_RESOURCE_MISC_FLAG miscFlags;
    public D3D11_BIND_FLAG BindFlags { get; public set; }
    public D3D11_CPU_ACCESS_FLAG CpuAccessFlags { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public D3D11_USAGE Usage { get; public set; }
    public D3D11_RESOURCE_MISC_FLAG MiscFlags { get; public set; }
    public DXGI_FORMAT Format { get; public set; }
    public D3D11_TEXTURE2D_DESC(int width, int height, int mipLevels, int arraySize, DXGI_FORMAT format, DXGI_SAMPLE_DESC sampleDescription, D3D11_USAGE usage, D3D11_BIND_FLAG bindFlags, D3D11_CPU_ACCESS_FLAG cpuAccessFlags, D3D11_RESOURCE_MISC_FLAG miscFlags);
    public D3D11_BIND_FLAG get_BindFlags();
    public void set_BindFlags(D3D11_BIND_FLAG value);
    public D3D11_CPU_ACCESS_FLAG get_CpuAccessFlags();
    public void set_CpuAccessFlags(D3D11_CPU_ACCESS_FLAG value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public D3D11_USAGE get_Usage();
    public void set_Usage(D3D11_USAGE value);
    public D3D11_RESOURCE_MISC_FLAG get_MiscFlags();
    public void set_MiscFlags(D3D11_RESOURCE_MISC_FLAG value);
    public DXGI_FORMAT get_Format();
    public void set_Format(DXGI_FORMAT value);
}
public enum DevExpress.DirectX.Common.Direct3D.D3D11_USAGE : Enum {
    public int value__;
    public static D3D11_USAGE Default;
    public static D3D11_USAGE Immutable;
    public static D3D11_USAGE Dynamic;
    public static D3D11_USAGE Staging;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_BREAK_CONDITION : Enum {
    public int value__;
    public static DWRITE_BREAK_CONDITION NEUTRAL;
    public static DWRITE_BREAK_CONDITION CAN_BREAK;
    public static DWRITE_BREAK_CONDITION MAY_NOT_BREAK;
    public static DWRITE_BREAK_CONDITION MUST_BREAK;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_CLUSTER_METRICS : ValueType {
    private float width;
    private short length;
    private short flags;
    public float Width { get; }
    public float get_Width();
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_FACTORY_TYPE : Enum {
    public int value__;
    public static DWRITE_FACTORY_TYPE Shared;
    public static DWRITE_FACTORY_TYPE Isolated;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_FLOW_DIRECTION : Enum {
    public int value__;
    public static DWRITE_FLOW_DIRECTION TOP_TO_BOTTOM;
    public static DWRITE_FLOW_DIRECTION BOTTOM_TO_TOP;
    public static DWRITE_FLOW_DIRECTION LEFT_TO_RIGHT;
    public static DWRITE_FLOW_DIRECTION RIGHT_TO_LEFT;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_FACE_TYPE : Enum {
    public int value__;
    public static DWRITE_FONT_FACE_TYPE Cff;
    public static DWRITE_FONT_FACE_TYPE Truetype;
    public static DWRITE_FONT_FACE_TYPE OpenTypeCollection;
    public static DWRITE_FONT_FACE_TYPE Type1;
    public static DWRITE_FONT_FACE_TYPE Vector;
    public static DWRITE_FONT_FACE_TYPE Bitmap;
    public static DWRITE_FONT_FACE_TYPE Unknown;
    public static DWRITE_FONT_FACE_TYPE RawCff;
    public static DWRITE_FONT_FACE_TYPE TruetypeCollection;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_FEATURE : ValueType {
    private DWRITE_FONT_FEATURE_TAG nameTag;
    private int parameter;
    public DWRITE_FONT_FEATURE_TAG NameTag { get; }
    public int Parameter { get; }
    public DWRITE_FONT_FEATURE(DWRITE_FONT_FEATURE_TAG nameTag, int parameter);
    public DWRITE_FONT_FEATURE_TAG get_NameTag();
    public int get_Parameter();
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_FEATURE_TAG : ValueType {
    public static DWRITE_FONT_FEATURE_TAG ALTERNATIVE_FRACTIONS;
    public static DWRITE_FONT_FEATURE_TAG PETITE_CAPITALS_FROM_CAPITALS;
    public static DWRITE_FONT_FEATURE_TAG SMALL_CAPITALS_FROM_CAPITALS;
    public static DWRITE_FONT_FEATURE_TAG CONTEXTUAL_ALTERNATES;
    public static DWRITE_FONT_FEATURE_TAG CASE_SENSITIVE_FORMS;
    public static DWRITE_FONT_FEATURE_TAG GLYPH_COMPOSITION_DECOMPOSITION;
    public static DWRITE_FONT_FEATURE_TAG CONTEXTUAL_LIGATURES;
    public static DWRITE_FONT_FEATURE_TAG CAPITAL_SPACING;
    public static DWRITE_FONT_FEATURE_TAG CONTEXTUAL_SWASH;
    public static DWRITE_FONT_FEATURE_TAG CURSIVE_POSITIONING;
    public static DWRITE_FONT_FEATURE_TAG DEFAULT;
    public static DWRITE_FONT_FEATURE_TAG DISCRETIONARY_LIGATURES;
    public static DWRITE_FONT_FEATURE_TAG EXPERT_FORMS;
    public static DWRITE_FONT_FEATURE_TAG FRACTIONS;
    public static DWRITE_FONT_FEATURE_TAG FULL_WIDTH;
    public static DWRITE_FONT_FEATURE_TAG HALF_FORMS;
    public static DWRITE_FONT_FEATURE_TAG HALANT_FORMS;
    public static DWRITE_FONT_FEATURE_TAG ALTERNATE_HALF_WIDTH;
    public static DWRITE_FONT_FEATURE_TAG HISTORICAL_FORMS;
    public static DWRITE_FONT_FEATURE_TAG HORIZONTAL_KANA_ALTERNATES;
    public static DWRITE_FONT_FEATURE_TAG HISTORICAL_LIGATURES;
    public static DWRITE_FONT_FEATURE_TAG HALF_WIDTH;
    public static DWRITE_FONT_FEATURE_TAG HOJO_KANJI_FORMS;
    public static DWRITE_FONT_FEATURE_TAG JIS04_FORMS;
    public static DWRITE_FONT_FEATURE_TAG JIS78_FORMS;
    public static DWRITE_FONT_FEATURE_TAG JIS83_FORMS;
    public static DWRITE_FONT_FEATURE_TAG JIS90_FORMS;
    public static DWRITE_FONT_FEATURE_TAG KERNING;
    public static DWRITE_FONT_FEATURE_TAG STANDARD_LIGATURES;
    public static DWRITE_FONT_FEATURE_TAG LINING_FIGURES;
    public static DWRITE_FONT_FEATURE_TAG LOCALIZED_FORMS;
    public static DWRITE_FONT_FEATURE_TAG MARK_POSITIONING;
    public static DWRITE_FONT_FEATURE_TAG MATHEMATICAL_GREEK;
    public static DWRITE_FONT_FEATURE_TAG MARK_TO_MARK_POSITIONING;
    public static DWRITE_FONT_FEATURE_TAG ALTERNATE_ANNOTATION_FORMS;
    public static DWRITE_FONT_FEATURE_TAG NLC_KANJI_FORMS;
    public static DWRITE_FONT_FEATURE_TAG OLD_STYLE_FIGURES;
    public static DWRITE_FONT_FEATURE_TAG ORDINALS;
    public static DWRITE_FONT_FEATURE_TAG PROPORTIONAL_ALTERNATE_WIDTH;
    public static DWRITE_FONT_FEATURE_TAG PETITE_CAPITALS;
    public static DWRITE_FONT_FEATURE_TAG PROPORTIONAL_FIGURES;
    public static DWRITE_FONT_FEATURE_TAG PROPORTIONAL_WIDTHS;
    public static DWRITE_FONT_FEATURE_TAG QUARTER_WIDTHS;
    public static DWRITE_FONT_FEATURE_TAG REQUIRED_LIGATURES;
    public static DWRITE_FONT_FEATURE_TAG RUBY_NOTATION_FORMS;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_ALTERNATES;
    public static DWRITE_FONT_FEATURE_TAG SCIENTIFIC_INFERIORS;
    public static DWRITE_FONT_FEATURE_TAG SMALL_CAPITALS;
    public static DWRITE_FONT_FEATURE_TAG SIMPLIFIED_FORMS;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_1;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_2;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_3;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_4;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_5;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_6;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_7;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_8;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_9;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_10;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_11;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_12;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_13;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_14;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_15;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_16;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_17;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_18;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_19;
    public static DWRITE_FONT_FEATURE_TAG STYLISTIC_SET_20;
    public static DWRITE_FONT_FEATURE_TAG SUBSCRIPT;
    public static DWRITE_FONT_FEATURE_TAG SUPERSCRIPT;
    public static DWRITE_FONT_FEATURE_TAG SWASH;
    public static DWRITE_FONT_FEATURE_TAG TITLING;
    public static DWRITE_FONT_FEATURE_TAG TRADITIONAL_NAME_FORMS;
    public static DWRITE_FONT_FEATURE_TAG TABULAR_FIGURES;
    public static DWRITE_FONT_FEATURE_TAG TRADITIONAL_FORMS;
    public static DWRITE_FONT_FEATURE_TAG THIRD_WIDTHS;
    public static DWRITE_FONT_FEATURE_TAG UNICASE;
    public static DWRITE_FONT_FEATURE_TAG VERTICAL_WRITING;
    public static DWRITE_FONT_FEATURE_TAG VERTICAL_ALTERNATES_AND_ROTATION;
    public static DWRITE_FONT_FEATURE_TAG SLASHED_ZERO;
    private int tag;
    private DWRITE_FONT_FEATURE_TAG(int tag);
    private static DWRITE_FONT_FEATURE_TAG();
    private static DWRITE_FONT_FEATURE_TAG MakeOpenTypeTag(char a, char b, char c, char d);
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_FILE_TYPE : Enum {
    public int value__;
    public static DWRITE_FONT_FILE_TYPE Unknown;
    public static DWRITE_FONT_FILE_TYPE Cff;
    public static DWRITE_FONT_FILE_TYPE Truetype;
    public static DWRITE_FONT_FILE_TYPE OpenTypeCollection;
    public static DWRITE_FONT_FILE_TYPE Type1Pfm;
    public static DWRITE_FONT_FILE_TYPE Type1Pfb;
    public static DWRITE_FONT_FILE_TYPE Vector;
    public static DWRITE_FONT_FILE_TYPE Bitmap;
    public static DWRITE_FONT_FILE_TYPE TruetypeCollection;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_METRICS : ValueType {
    private short designUnitsPerEm;
    private short ascent;
    private short descent;
    private short lineGap;
    private short capHeight;
    private short xHeight;
    private short underlinePosition;
    private short underlineThickness;
    private short strikethroughPosition;
    private short strikethroughThickness;
    public short DesignUnitsPerEm { get; }
    public short Ascent { get; }
    public short Descent { get; }
    public short LineGap { get; }
    public short CapHeight { get; }
    public short XHeight { get; }
    public short UnderlinePosition { get; }
    public short UnderlineThickness { get; }
    public short StrikethroughPosition { get; }
    public short StrikethroughThickness { get; }
    public short get_DesignUnitsPerEm();
    public short get_Ascent();
    public short get_Descent();
    public short get_LineGap();
    public short get_CapHeight();
    public short get_XHeight();
    public short get_UnderlinePosition();
    public short get_UnderlineThickness();
    public short get_StrikethroughPosition();
    public short get_StrikethroughThickness();
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_METRICS1 : ValueType {
    private DWRITE_FONT_METRICS metrics;
    private short glyphBoxLeft;
    private short glyphBoxTop;
    private short glyphBoxRight;
    private short glyphBoxBottom;
    private short subscriptPositionX;
    private short subscriptPositionY;
    private short subscriptSizeX;
    private short subscriptSizeY;
    private short superscriptPositionX;
    private short superscriptPositionY;
    private short superscriptSizeX;
    private short superscriptSizeY;
    private int hasTypographicMetrics;
    public short DesignUnitsPerEm { get; }
    public short Ascent { get; }
    public short Descent { get; }
    public short LineGap { get; }
    public short UnderlinePosition { get; }
    public short UnderlineThickness { get; }
    public short StrikethroughPosition { get; }
    public short StrikethroughThickness { get; }
    public short GlyphBoxLeft { get; }
    public short GlyphBoxTop { get; }
    public short GlyphBoxRight { get; }
    public short GlyphBoxBottom { get; }
    public short SubscriptPositionX { get; }
    public short SubscriptPositionY { get; }
    public short SubscriptSizeX { get; }
    public short SubscriptSizeY { get; }
    public short SuperscriptPositionX { get; }
    public short SuperscriptPositionY { get; }
    public short SuperscriptSizeX { get; }
    public short SuperscriptSizeY { get; }
    public bool HasTypographicMetrics { get; }
    public short get_DesignUnitsPerEm();
    public short get_Ascent();
    public short get_Descent();
    public short get_LineGap();
    public short get_UnderlinePosition();
    public short get_UnderlineThickness();
    public short get_StrikethroughPosition();
    public short get_StrikethroughThickness();
    public short get_GlyphBoxLeft();
    public short get_GlyphBoxTop();
    public short get_GlyphBoxRight();
    public short get_GlyphBoxBottom();
    public short get_SubscriptPositionX();
    public short get_SubscriptPositionY();
    public short get_SubscriptSizeX();
    public short get_SubscriptSizeY();
    public short get_SuperscriptPositionX();
    public short get_SuperscriptPositionY();
    public short get_SuperscriptSizeX();
    public short get_SuperscriptSizeY();
    public bool get_HasTypographicMetrics();
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_SIMULATIONS : Enum {
    public int value__;
    public static DWRITE_FONT_SIMULATIONS None;
    public static DWRITE_FONT_SIMULATIONS Bold;
    public static DWRITE_FONT_SIMULATIONS Oblique;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_STRETCH : Enum {
    public int value__;
    public static DWRITE_FONT_STRETCH Undefined;
    public static DWRITE_FONT_STRETCH UltraCondensed;
    public static DWRITE_FONT_STRETCH ExtraCondensed;
    public static DWRITE_FONT_STRETCH Condensed;
    public static DWRITE_FONT_STRETCH SemiCondensed;
    public static DWRITE_FONT_STRETCH Normal;
    public static DWRITE_FONT_STRETCH Medium;
    public static DWRITE_FONT_STRETCH SemiExpanded;
    public static DWRITE_FONT_STRETCH Expanded;
    public static DWRITE_FONT_STRETCH ExtraExpanded;
    public static DWRITE_FONT_STRETCH UltraExpanded;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_STYLE : Enum {
    public int value__;
    public static DWRITE_FONT_STYLE Normal;
    public static DWRITE_FONT_STYLE Oblique;
    public static DWRITE_FONT_STYLE Italic;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_FONT_WEIGHT : Enum {
    public int value__;
    public static DWRITE_FONT_WEIGHT Thin;
    public static DWRITE_FONT_WEIGHT ExtraLight;
    public static DWRITE_FONT_WEIGHT UltraLight;
    public static DWRITE_FONT_WEIGHT Light;
    public static DWRITE_FONT_WEIGHT SemiLight;
    public static DWRITE_FONT_WEIGHT Normal;
    public static DWRITE_FONT_WEIGHT Regular;
    public static DWRITE_FONT_WEIGHT Medium;
    public static DWRITE_FONT_WEIGHT DemiBold;
    public static DWRITE_FONT_WEIGHT SemiBold;
    public static DWRITE_FONT_WEIGHT Bold;
    public static DWRITE_FONT_WEIGHT ExtraBold;
    public static DWRITE_FONT_WEIGHT UltraBold;
    public static DWRITE_FONT_WEIGHT Black;
    public static DWRITE_FONT_WEIGHT Heavy;
    public static DWRITE_FONT_WEIGHT ExtraBlack;
    public static DWRITE_FONT_WEIGHT UltraBlack;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_GLYPH_METRICS : ValueType {
    private int leftSideBearing;
    private int advanceWidth;
    private int rightSideBearing;
    private int topSideBearing;
    private int advanceHeight;
    private int bottomSideBearing;
    private int verticalOriginY;
    public int AdvanceWidth { get; }
    public int get_AdvanceWidth();
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_GLYPH_OFFSET : ValueType {
    private float advanceOffset;
    private float ascenderOffset;
    public float AdvanceOffset { get; }
    public float AscenderOffset { get; }
    public DWRITE_GLYPH_OFFSET(float advanceOffset, float ascenderOffset);
    public float get_AdvanceOffset();
    public float get_AscenderOffset();
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_GLYPH_RUN_COMMON : ValueType {
    private IntPtr fontFace;
    private float fontEmSize;
    private int glyphCount;
    private IntPtr glyphIndices;
    private IntPtr glyphAdvances;
    private IntPtr glyphOffsets;
    private int isSideways;
    private int bidiLevel;
    public IntPtr FontFace { get; }
    public float FontEmSize { get; }
    public int GlyphCount { get; public set; }
    public IntPtr GlyphIndices { get; public set; }
    public IntPtr GlyphAdvances { get; public set; }
    public IntPtr GlyphOffsets { get; public set; }
    public int IsSideways { get; }
    public int BidiLevel { get; }
    internal DWRITE_GLYPH_RUN_COMMON(IntPtr fontFace, float fontEmSize, int glyphCount, IntPtr glyphIndices, IntPtr glyphAdvances, IntPtr glyphOffsets, int isSideways, int bidiLevel);
    public IntPtr get_FontFace();
    public float get_FontEmSize();
    public int get_GlyphCount();
    public void set_GlyphCount(int value);
    public IntPtr get_GlyphIndices();
    public void set_GlyphIndices(IntPtr value);
    public IntPtr get_GlyphAdvances();
    public void set_GlyphAdvances(IntPtr value);
    public IntPtr get_GlyphOffsets();
    public void set_GlyphOffsets(IntPtr value);
    public int get_IsSideways();
    public int get_BidiLevel();
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION : ValueType {
    private IntPtr localeName;
    private IntPtr str;
    private int stringLength;
    private IntPtr clusterMap;
    private int textPosition;
    public IntPtr ClusterMap { get; public set; }
    public int StringLength { get; public set; }
    public IntPtr get_ClusterMap();
    public void set_ClusterMap(IntPtr value);
    public int get_StringLength();
    public void set_StringLength(int value);
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_INFORMATIONAL_STRING_ID : Enum {
    public int value__;
    public static DWRITE_INFORMATIONAL_STRING_ID NONE;
    public static DWRITE_INFORMATIONAL_STRING_ID COPYRIGHT_NOTICE;
    public static DWRITE_INFORMATIONAL_STRING_ID VERSION_STRINGS;
    public static DWRITE_INFORMATIONAL_STRING_ID TRADEMARK;
    public static DWRITE_INFORMATIONAL_STRING_ID MANUFACTURER;
    public static DWRITE_INFORMATIONAL_STRING_ID DESIGNER;
    public static DWRITE_INFORMATIONAL_STRING_ID DESIGNER_URL;
    public static DWRITE_INFORMATIONAL_STRING_ID DESCRIPTION;
    public static DWRITE_INFORMATIONAL_STRING_ID FONT_VENDOR_URL;
    public static DWRITE_INFORMATIONAL_STRING_ID LICENSE_DESCRIPTION;
    public static DWRITE_INFORMATIONAL_STRING_ID LICENSE_INFO_URL;
    public static DWRITE_INFORMATIONAL_STRING_ID WIN32_FAMILY_NAMES;
    public static DWRITE_INFORMATIONAL_STRING_ID WIN32_SUBFAMILY_NAMES;
    public static DWRITE_INFORMATIONAL_STRING_ID TYPOGRAPHIC_FAMILY_NAMES;
    public static DWRITE_INFORMATIONAL_STRING_ID TYPOGRAPHIC_SUBFAMILY_NAMES;
    public static DWRITE_INFORMATIONAL_STRING_ID SAMPLE_TEXT;
    public static DWRITE_INFORMATIONAL_STRING_ID FULL_NAME;
    public static DWRITE_INFORMATIONAL_STRING_ID POSTSCRIPT_NAME;
    public static DWRITE_INFORMATIONAL_STRING_ID POSTSCRIPT_CID_NAME;
    public static DWRITE_INFORMATIONAL_STRING_ID WEIGHT_STRETCH_STYLE_FAMILY_NAME;
    public static DWRITE_INFORMATIONAL_STRING_ID DESIGN_SCRIPT_LANGUAGE_TAG;
    public static DWRITE_INFORMATIONAL_STRING_ID SUPPORTED_SCRIPT_LANGUAGE_TAG;
    public static DWRITE_INFORMATIONAL_STRING_ID PREFERRED_FAMILY_NAMES;
    public static DWRITE_INFORMATIONAL_STRING_ID PREFERRED_SUBFAMILY_NAMES;
    public static DWRITE_INFORMATIONAL_STRING_ID WWS_FAMILY_NAME;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_LINE_BREAKPOINT : ValueType {
    private byte vector;
    public DWRITE_BREAK_CONDITION BreakConditionBefore { get; }
    public DWRITE_BREAK_CONDITION BreakConditionAfter { get; }
    public bool IsWhitespace { get; }
    public bool IsSoftHyphen { get; }
    public DWRITE_BREAK_CONDITION get_BreakConditionBefore();
    public DWRITE_BREAK_CONDITION get_BreakConditionAfter();
    public bool get_IsWhitespace();
    public bool get_IsSoftHyphen();
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_LINE_SPACING_METHOD : Enum {
    public int value__;
    public static DWRITE_LINE_SPACING_METHOD DEFAULT;
    public static DWRITE_LINE_SPACING_METHOD UNIFORM;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_MATRIX : ValueType {
    private float m11;
    private float m12;
    private float m21;
    private float m22;
    private float dx;
    private float dy;
    public DWRITE_MATRIX(float m11, float m12, float m21, float m22, float dx, float dy);
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_MEASURING_MODE : Enum {
    public int value__;
    public static DWRITE_MEASURING_MODE Natural;
    public static DWRITE_MEASURING_MODE GdiClassic;
    public static DWRITE_MEASURING_MODE GdiNatural;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_NUMBER_SUBSTITUTION_METHOD : Enum {
    public int value__;
    public static DWRITE_NUMBER_SUBSTITUTION_METHOD FromCulture;
    public static DWRITE_NUMBER_SUBSTITUTION_METHOD Contextual;
    public static DWRITE_NUMBER_SUBSTITUTION_METHOD None;
    public static DWRITE_NUMBER_SUBSTITUTION_METHOD National;
    public static DWRITE_NUMBER_SUBSTITUTION_METHOD Traditional;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_PARAGRAPH_ALIGNMENT : Enum {
    public int value__;
    public static DWRITE_PARAGRAPH_ALIGNMENT NEAR;
    public static DWRITE_PARAGRAPH_ALIGNMENT FAR;
    public static DWRITE_PARAGRAPH_ALIGNMENT CENTER;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_READING_DIRECTION : Enum {
    public int value__;
    public static DWRITE_READING_DIRECTION LEFT_TO_RIGHT;
    public static DWRITE_READING_DIRECTION RIGHT_TO_LEFT;
    public static DWRITE_READING_DIRECTION TOP_TO_BOTTOM;
    public static DWRITE_READING_DIRECTION BOTTOM_TO_TOP;
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_RENDERING_MODE : Enum {
    public int value__;
    public static DWRITE_RENDERING_MODE Default;
    public static DWRITE_RENDERING_MODE Aliased;
    public static DWRITE_RENDERING_MODE GdiClassic;
    public static DWRITE_RENDERING_MODE GdiNatural;
    public static DWRITE_RENDERING_MODE Natural;
    public static DWRITE_RENDERING_MODE NaturalSymmetric;
    public static DWRITE_RENDERING_MODE Outline;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_SCRIPT_ANALYSIS : ValueType {
    private short script1;
    private DWRITE_SCRIPT_SHAPES shapes1;
    public short script { get; public set; }
    public DWRITE_SCRIPT_SHAPES shapes { get; public set; }
    public short get_script();
    public void set_script(short value);
    public DWRITE_SCRIPT_SHAPES get_shapes();
    public void set_shapes(DWRITE_SCRIPT_SHAPES value);
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_SCRIPT_SHAPES : Enum {
    public int value__;
    public static DWRITE_SCRIPT_SHAPES Default;
    public static DWRITE_SCRIPT_SHAPES NoVisual;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_SHAPING_GLYPH_PROPERTIES : ValueType {
    private short value;
    public int Justification { get; }
    public bool IsClusterStart { get; }
    public bool IsDiacritic { get; }
    public bool IsZeroWidthSpace { get; }
    public DWRITE_SHAPING_GLYPH_PROPERTIES(bool isClusterStart);
    public int get_Justification();
    public bool get_IsClusterStart();
    public bool get_IsDiacritic();
    public bool get_IsZeroWidthSpace();
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_SHAPING_TEXT_PROPERTIES : ValueType {
    private short vector;
    public bool isShapedAlone { get; }
    public bool canBreakShapingAfter { get; }
    public bool get_isShapedAlone();
    public bool get_canBreakShapingAfter();
    public virtual string ToString();
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_TEXT_ALIGNMENT : Enum {
    public int value__;
    public static DWRITE_TEXT_ALIGNMENT LEADING;
    public static DWRITE_TEXT_ALIGNMENT TRAILING;
    public static DWRITE_TEXT_ALIGNMENT CENTER;
    public static DWRITE_TEXT_ALIGNMENT JUSTIFIED;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_TEXT_RANGE : ValueType {
    private int startPosition;
    private int length;
    public int StartPosition { get; }
    public int Length { get; }
    public DWRITE_TEXT_RANGE(int startPosition, int length);
    public int get_StartPosition();
    public int get_Length();
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_TRIMMING : ValueType {
    private DWRITE_TRIMMING_GRANULARITY granularity;
    private int delimiter;
    private int delimiterCount;
    public DWRITE_TRIMMING_GRANULARITY Granularity { get; }
    public int Delimiter { get; }
    public int DelimiterCount { get; }
    public DWRITE_TRIMMING(DWRITE_TRIMMING_GRANULARITY granularity, int delimiter, int delimiterCount);
    public DWRITE_TRIMMING_GRANULARITY get_Granularity();
    public int get_Delimiter();
    public int get_DelimiterCount();
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_TRIMMING_GRANULARITY : Enum {
    public int value__;
    public static DWRITE_TRIMMING_GRANULARITY NONE;
    public static DWRITE_TRIMMING_GRANULARITY CHARACTER;
    public static DWRITE_TRIMMING_GRANULARITY WORD;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_TYPOGRAPHIC_FEATURES : ValueType {
    private IntPtr features;
    private int featureCount;
    [SecuritySafeCriticalAttribute]
public DWRITE_TYPOGRAPHIC_FEATURES(DWRITE_FONT_FEATURE[] fontFeatures);
    public sealed virtual void Dispose();
}
internal class DevExpress.DirectX.Common.DirectWrite.DWRITE_TYPOGRAPHIC_FEATURES_ARRAY : object {
    [CompilerGeneratedAttribute]
private IntPtr[] <ArrayPtr>k__BackingField;
    private DWRITE_TYPOGRAPHIC_FEATURES[] managedArray;
    internal IntPtr[] ArrayPtr { get; private set; }
    [SecuritySafeCriticalAttribute]
public DWRITE_TYPOGRAPHIC_FEATURES_ARRAY(DWRITE_TYPOGRAPHIC_FEATURES[] features);
    [CompilerGeneratedAttribute]
internal IntPtr[] get_ArrayPtr();
    [CompilerGeneratedAttribute]
private void set_ArrayPtr(IntPtr[] value);
    protected virtual override void Finalize();
    [SecuritySafeCriticalAttribute]
private void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_UNDERLINE : ValueType {
    private float width;
    private float thickness;
    private float offset;
    private float runHeight;
    private DWRITE_READING_DIRECTION readingDirection;
    private DWRITE_FLOW_DIRECTION flowDirection;
    private IntPtr localeName;
    private DWRITE_MEASURING_MODE measuringMode;
}
public class DevExpress.DirectX.Common.DirectWrite.DWRITE_UNICODE_RANGE : ValueType {
    private int first;
    private int last;
    public int First { get; }
    public int Last { get; }
    public int get_First();
    public int get_Last();
}
public enum DevExpress.DirectX.Common.DirectWrite.DWRITE_WORD_WRAPPING : Enum {
    public int value__;
    public static DWRITE_WORD_WRAPPING WRAP;
    public static DWRITE_WORD_WRAPPING NO_WRAP;
    public static DWRITE_WORD_WRAPPING EMERGENCY_BREAK;
    public static DWRITE_WORD_WRAPPING WHOLE_WORD;
    public static DWRITE_WORD_WRAPPING CHARACTER;
}
public class DevExpress.DirectX.Common.DirectWrite.DwriteFontFeatureTags : object {
    private static Dictionary`2<DWriteShapingFeatures, DWRITE_TYPOGRAPHIC_FEATURES_ARRAY> featureCache;
    private static DwriteFontFeatureTags();
    internal static DWRITE_TYPOGRAPHIC_FEATURES_ARRAY GetFeatures(DWriteShapingFeatures key);
}
[FlagsAttribute]
public enum DevExpress.DirectX.Common.DirectWrite.DWriteShapingFeatures : Enum {
    public int value__;
    public static DWriteShapingFeatures None;
    public static DWriteShapingFeatures Kerning;
    public static DWriteShapingFeatures Ligatures;
    public static DWriteShapingFeatures Default;
}
public enum DevExpress.DirectX.Common.DXGI.DXGI_FORMAT : Enum {
    public int value__;
    public static DXGI_FORMAT Unknown;
    public static DXGI_FORMAT R32G32B32A32_Typeless;
    public static DXGI_FORMAT R32G32B32A32_Float;
    public static DXGI_FORMAT R32G32B32A32_UInt;
    public static DXGI_FORMAT R32G32B32A32_SInt;
    public static DXGI_FORMAT R32G32B32_Typeless;
    public static DXGI_FORMAT R32G32B32_Float;
    public static DXGI_FORMAT R32G32B32_UInt;
    public static DXGI_FORMAT R32G32B32_SInt;
    public static DXGI_FORMAT R16G16B16A16_Typeless;
    public static DXGI_FORMAT R16G16B16A16_Float;
    public static DXGI_FORMAT R16G16B16A16_UNorm;
    public static DXGI_FORMAT R16G16B16A16_UInt;
    public static DXGI_FORMAT R16G16B16A16_SNorm;
    public static DXGI_FORMAT R16G16B16A16_SInt;
    public static DXGI_FORMAT R32G32_Typeless;
    public static DXGI_FORMAT R32G32_Float;
    public static DXGI_FORMAT R32G32_UInt;
    public static DXGI_FORMAT R32G32_SInt;
    public static DXGI_FORMAT R32G8X24_Typeless;
    public static DXGI_FORMAT D32_Float_S8X24_UInt;
    public static DXGI_FORMAT R32_Float_X8X24_Typeless;
    public static DXGI_FORMAT X32_Typeless_G8X24_UInt;
    public static DXGI_FORMAT R10G10B10A2_Typeless;
    public static DXGI_FORMAT R10G10B10A2_UNorm;
    public static DXGI_FORMAT R10G10B10A2_UInt;
    public static DXGI_FORMAT R11G11B10_Float;
    public static DXGI_FORMAT R8G8B8A8_Typeless;
    public static DXGI_FORMAT R8G8B8A8_UNorm;
    public static DXGI_FORMAT R8G8B8A8_UNorm_SRgb;
    public static DXGI_FORMAT R8G8B8A8_UInt;
    public static DXGI_FORMAT R8G8B8A8_SNorm;
    public static DXGI_FORMAT R8G8B8A8_SInt;
    public static DXGI_FORMAT R16G16_Typeless;
    public static DXGI_FORMAT R16G16_Float;
    public static DXGI_FORMAT R16G16_UNorm;
    public static DXGI_FORMAT R16G16_UInt;
    public static DXGI_FORMAT R16G16_SNorm;
    public static DXGI_FORMAT R16G16_SInt;
    public static DXGI_FORMAT R32_Typeless;
    public static DXGI_FORMAT D32_Float;
    public static DXGI_FORMAT R32_Float;
    public static DXGI_FORMAT R32_UInt;
    public static DXGI_FORMAT R32_SInt;
    public static DXGI_FORMAT R24G8_Typeless;
    public static DXGI_FORMAT D24_UNorm_S8_UInt;
    public static DXGI_FORMAT R24_UNorm_X8_Typeless;
    public static DXGI_FORMAT X24_Typeless_G8_UInt;
    public static DXGI_FORMAT R8G8_Typeless;
    public static DXGI_FORMAT R8G8_UNorm;
    public static DXGI_FORMAT R8G8_UInt;
    public static DXGI_FORMAT R8G8_SNorm;
    public static DXGI_FORMAT R8G8_SInt;
    public static DXGI_FORMAT R16_Typeless;
    public static DXGI_FORMAT R16_Float;
    public static DXGI_FORMAT D16_UNorm;
    public static DXGI_FORMAT R16_UNorm;
    public static DXGI_FORMAT R16_UInt;
    public static DXGI_FORMAT R16_SNorm;
    public static DXGI_FORMAT R16_SInt;
    public static DXGI_FORMAT R8_Typeless;
    public static DXGI_FORMAT R8_UNorm;
    public static DXGI_FORMAT R8_UInt;
    public static DXGI_FORMAT R8_SNorm;
    public static DXGI_FORMAT R8_SInt;
    public static DXGI_FORMAT A8_UNorm;
    public static DXGI_FORMAT R1_UNorm;
    public static DXGI_FORMAT R9G9B9E5_Sharedexp;
    public static DXGI_FORMAT R8G8_B8G8_UNorm;
    public static DXGI_FORMAT G8R8_G8B8_UNorm;
    public static DXGI_FORMAT BC1_Typeless;
    public static DXGI_FORMAT BC1_UNorm;
    public static DXGI_FORMAT BC1_UNorm_SRgb;
    public static DXGI_FORMAT BC2_Typeless;
    public static DXGI_FORMAT BC2_UNorm;
    public static DXGI_FORMAT BC2_UNorm_SRgb;
    public static DXGI_FORMAT BC3_Typeless;
    public static DXGI_FORMAT BC3_UNorm;
    public static DXGI_FORMAT BC3_UNorm_SRgb;
    public static DXGI_FORMAT BC4_Typeless;
    public static DXGI_FORMAT BC4_UNorm;
    public static DXGI_FORMAT BC4_SNorm;
    public static DXGI_FORMAT BC5_Typeless;
    public static DXGI_FORMAT BC5_UNorm;
    public static DXGI_FORMAT BC5_SNorm;
    public static DXGI_FORMAT B5G6R5_UNorm;
    public static DXGI_FORMAT B5G5R5A1_UNorm;
    public static DXGI_FORMAT B8G8R8A8_UNorm;
    public static DXGI_FORMAT B8G8R8X8_UNorm;
    public static DXGI_FORMAT R10G10B10_Xr_Bias_A2_UNorm;
    public static DXGI_FORMAT B8G8R8A8_Typeless;
    public static DXGI_FORMAT B8G8R8A8_UNorm_SRgb;
    public static DXGI_FORMAT B8G8R8X8_Typeless;
    public static DXGI_FORMAT B8G8R8X8_UNorm_SRgb;
    public static DXGI_FORMAT BC6H_Typeless;
    public static DXGI_FORMAT BC6H_Uf16;
    public static DXGI_FORMAT BC6H_Sf16;
    public static DXGI_FORMAT BC7_Typeless;
    public static DXGI_FORMAT BC7_UNorm;
    public static DXGI_FORMAT BC7_UNorm_SRgb;
    public static DXGI_FORMAT AYUV;
    public static DXGI_FORMAT Y410;
    public static DXGI_FORMAT Y416;
    public static DXGI_FORMAT NV12;
    public static DXGI_FORMAT P010;
    public static DXGI_FORMAT P016;
    public static DXGI_FORMAT Opaque420;
    public static DXGI_FORMAT YUY2;
    public static DXGI_FORMAT Y210;
    public static DXGI_FORMAT Y216;
    public static DXGI_FORMAT NV11;
    public static DXGI_FORMAT AI44;
    public static DXGI_FORMAT IA44;
    public static DXGI_FORMAT P8;
    public static DXGI_FORMAT A8P8;
    public static DXGI_FORMAT B4G4R4A4_UNorm;
    public static DXGI_FORMAT P208;
    public static DXGI_FORMAT V208;
    public static DXGI_FORMAT V408;
}
public class DevExpress.DirectX.Common.DXGI.DXGI_SAMPLE_DESC : ValueType {
    private int count;
    private int quality;
    public int Count { get; public set; }
    public int Quality { get; public set; }
    public int get_Count();
    public void set_Count(int value);
    public int get_Quality();
    public void set_Quality(int value);
}
public static class DevExpress.DirectX.Common.DXGI.DXGIErrorCodes : object {
    public static int DXGI_ERROR_DEVICE_REMOVED;
    public static int DXGI_ERROR_DEVICE_RESET;
}
public class DevExpress.DirectX.Common.DynamicAssemblyHelper : object {
    private static string comCallableWrapperInterfaceName;
    private static DynamicAssemblyHelper instance;
    private ModuleBuilder moduleBuilder;
    private AssemblyBuilder builder;
    private AssemblyName assemblyName;
    private List`1<Delegate> delegates;
    private IDictionary`2<Type, IList`1<ComCallableWrapperVtable>> comWrappersCache;
    public static DynamicAssemblyHelper Instance { get; }
    public ModuleBuilder ModuleBuilder { get; }
    private static DynamicAssemblyHelper();
    public static DynamicAssemblyHelper get_Instance();
    internal static IInvokeHelper CreateInvokeHelper();
    internal static IList`1<ComCallableWrapperVtable> GetTypeComInterfaces(Type type);
    public ModuleBuilder get_ModuleBuilder();
    private string GetTypeName(string nameBase);
    public Type CreateDelegateType(MethodInfo method, bool isWinApi);
    private IList`1<MethodInfo> CreateMethods(IEnumerable`1<MethodDescription> methods, string name);
    [SecuritySafeCriticalAttribute]
private IList`1<ComCallableWrapperVtable> GetTypeComInterfacesImp(Type type);
}
[ExtensionAttribute]
public static class DevExpress.DirectX.Common.ILGeneratorExtensions : object {
    [ExtensionAttribute]
public static void EmitLoadArg(ILGenerator generator, int parameterIndex);
    [ExtensionAttribute]
public static void EmitLoadLocal(ILGenerator generator, int localIndex);
    [ExtensionAttribute]
public static void EmitStoreLocal(ILGenerator generator, int localIndex);
}
public static class DevExpress.DirectX.Common.InteropHelpers : object {
    public static int E_NOT_SUFFICIENT_BUFFER;
    [SecuritySafeCriticalAttribute]
public static void CheckHResult(int hResult);
    [SecuritySafeCriticalAttribute]
public static IntPtr StructArrayToPtr(T[] structArray);
    [SecuritySafeCriticalAttribute]
public static void DoActionWithPinnedObject(object o, Action`1<IntPtr> pinnedObjectPointerAction);
}
public abstract class DevExpress.DirectX.Common.Marshaler : object {
    private IntPtr pointer;
    public IntPtr Pointer { get; protected set; }
    public IntPtr get_Pointer();
    protected void set_Pointer(IntPtr value);
    protected virtual override void Finalize();
    protected abstract virtual void FreePointer();
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[AttributeUsageAttribute("64")]
public class DevExpress.DirectX.Common.NativeProcedurePointerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private CharSet <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private CallingConvention <CallingConvention>k__BackingField;
    public CharSet Charset { get; public set; }
    public CallingConvention CallingConvention { get; public set; }
    [CompilerGeneratedAttribute]
public CharSet get_Charset();
    [CompilerGeneratedAttribute]
public void set_Charset(CharSet value);
    [CompilerGeneratedAttribute]
public CallingConvention get_CallingConvention();
    [CompilerGeneratedAttribute]
public void set_CallingConvention(CallingConvention value);
}
internal static class DevExpress.DirectX.Common.Ole32Interop : object {
    private static int CLSCTX_INPROC_SERVER;
    private static int CoCreateInstance(IntPtr rclsid, IntPtr pUnkOuter, int dwClsContext, IntPtr riid, IntPtr& ppv);
    [SecuritySafeCriticalAttribute]
public static IntPtr CoCreateInstance(Guid clsid, Guid iid);
}
public class DevExpress.DirectX.Common.RECT : ValueType {
    private int left;
    private int top;
    private int right;
    private int bottom;
    public RECT(int left, int top, int right, int bottom);
}
public class DevExpress.DirectX.Common.StringMarshaler : Marshaler {
    private GCHandle handle;
    [SecuritySafeCriticalAttribute]
public StringMarshaler(string value, int offset);
    [SecuritySafeCriticalAttribute]
protected virtual void FreePointer();
}
public class DevExpress.DirectX.Common.StringMarshalerA : Marshaler {
    [SecuritySafeCriticalAttribute]
public StringMarshalerA(string value);
    [SecuritySafeCriticalAttribute]
protected virtual void FreePointer();
}
public enum DevExpress.DirectX.Common.WIC.WICBitmapDitherType : Enum {
    public int value__;
    public static WICBitmapDitherType None;
    public static WICBitmapDitherType Solid;
    public static WICBitmapDitherType Ordered4x4;
    public static WICBitmapDitherType Ordered8x8;
    public static WICBitmapDitherType Ordered16x16;
    public static WICBitmapDitherType Spiral4x4;
    public static WICBitmapDitherType Spiral8x8;
    public static WICBitmapDitherType DualSpiral4x4;
    public static WICBitmapDitherType DualSpiral8x8;
    public static WICBitmapDitherType ErrorDiffusion;
    public static WICBitmapDitherType FORCE_DWORD;
}
public enum DevExpress.DirectX.Common.WIC.WICBitmapInterpolationMode : Enum {
    public int value__;
    public static WICBitmapInterpolationMode NearestNeighbor;
    public static WICBitmapInterpolationMode Linear;
    public static WICBitmapInterpolationMode Cubic;
    public static WICBitmapInterpolationMode Fant;
    public static WICBitmapInterpolationMode HighQualityCubic;
}
public enum DevExpress.DirectX.Common.WIC.WICBitmapPaletteType : Enum {
    public int value__;
    public static WICBitmapPaletteType Custom;
    public static WICBitmapPaletteType MedianCut;
    public static WICBitmapPaletteType FixedBW;
    public static WICBitmapPaletteType FixedHalftone8;
    public static WICBitmapPaletteType FixedHalftone27;
    public static WICBitmapPaletteType FixedHalftone64;
    public static WICBitmapPaletteType FixedHalftone125;
    public static WICBitmapPaletteType FixedHalftone216;
    public static WICBitmapPaletteType FixedWebPalette;
    public static WICBitmapPaletteType FixedHalftone252;
    public static WICBitmapPaletteType FixedHalftone256;
    public static WICBitmapPaletteType FixedGray4;
    public static WICBitmapPaletteType FixedGray16;
    public static WICBitmapPaletteType FixedGray256;
    public static WICBitmapPaletteType FORCE_DWORD;
}
public static class DevExpress.DirectX.Common.WIC.WICPixelFormats : object {
    public static Guid PixelFormat24bppRGB;
    public static Guid PixelFormat32bppRGBA;
    public static Guid PixelFormat8bppIndexed;
    public static Guid PixelFormat8bppGray;
    public static Guid PixelFormat24bppBGR;
    public static Guid PixelFormat32bppBGRA;
    public static Guid PixelFormat32bppBGR;
    public static Guid PixelFormat32bppPRGBA;
    public static Guid PixelFormat32bppCMYK;
    public static Guid PixelFormat8bppAlpha;
    private static WICPixelFormats();
}
public class DevExpress.DirectX.Common.WIC.WICRect : ValueType {
    private int x;
    private int y;
    private int width;
    private int height;
    public int X { get; }
    public int Y { get; }
    public int Width { get; }
    public int Height { get; }
    public WICRect(int x, int y, int width, int height);
    public int get_X();
    public int get_Y();
    public int get_Width();
    public int get_Height();
}
internal class DevExpress.DirectX.NativeInterop.ArgumentLoadContext : LoadContext {
    public ArgumentLoadContext(int index);
    public virtual void Load(ILGenerator generator);
}
public class DevExpress.DirectX.NativeInterop.CCW.CCWWrapper`1 : object {
    private bool disposedValue;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    public CCWWrapper`1(T value);
    public static CCWWrapper`1<T> Create(T value);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Value();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class DevExpress.DirectX.NativeInterop.CCW.ComCallableWrapperBase : object {
    public static int E_INVALIDARG;
    private static int E_NOINTERFACE;
    private static int S_OK;
    private int vtablesCount;
    private IDictionary`2<Guid, IntPtr> vtables;
    private IntPtr nativeObjectData;
    private int referenceCount;
    private GCHandle handle;
    private bool isDisposed;
    protected static int MarshalBool(bool value);
    public sealed virtual int AddRef();
    public sealed virtual int Release();
    [SecuritySafeCriticalAttribute]
public sealed virtual int QueryInterface(IntPtr riid, IntPtr ppOutput);
    [SecuritySafeCriticalAttribute]
protected virtual void FreeResources();
    protected IntPtr QueryInterface();
}
public static class DevExpress.DirectX.NativeInterop.CCW.ComCallableWrapperHelper : object {
    [SecuritySafeCriticalAttribute]
public static T FromIntPtr(IntPtr iUnknown);
    [SecuritySafeCriticalAttribute]
public static T CreateWrapperObject(IntPtr iUnknown);
}
internal class DevExpress.DirectX.NativeInterop.CCW.ComCallableWrapperMethodBuilder : object {
    private static Type nativeIntType;
    private static Type comObjectType;
    private static Type arrayMarshalerType;
    private ILGenerator generator;
    private ParameterInfo[] targetMethodParameters;
    private MethodBuilderHelper methodBuilderHelper;
    private ComCallableWrapperMethodBuilder(TypeBuilder typeBuilder, MethodInfo targetMethod, string methodName);
    private static ComCallableWrapperMethodBuilder();
    public static string CreateMethod(TypeBuilder typeBuilder, MethodInfo interfaceMethod, MethodInfo targetMethod, Type interfaceType);
    private void AppendMethod(MethodInfo interfaceMethod, MethodInfo targetMethod, Type interfaceType);
    private void CallCreateWrapperObject(ILGenerator generator, int parameterIndex);
}
internal class DevExpress.DirectX.NativeInterop.CCW.ComCallableWrapperVtable : object {
    private IList`1<Guid> interfaceIds;
    private IList`1<IntPtr> methods;
    public IList`1<Guid> InterfaceIds { get; }
    public IList`1<IntPtr> Methods { get; }
    public ComCallableWrapperVtable(IList`1<Guid> interfaceIds, IList`1<IntPtr> methods);
    public IList`1<Guid> get_InterfaceIds();
    public IList`1<IntPtr> get_Methods();
}
public interface DevExpress.DirectX.NativeInterop.CCW.ICCWWrapper`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
}
public interface DevExpress.DirectX.NativeInterop.CCW.IComCallableWrapper`1 {
    public IntPtr NativeObject { get; }
    public abstract virtual IntPtr get_NativeObject();
}
internal class DevExpress.DirectX.NativeInterop.CCW.InterfaceMethodDescription : object {
    private MethodDescription methodDescription;
    private int offset;
    public MethodDescription MethodDescription { get; }
    public int Offset { get; }
    public InterfaceMethodDescription(MethodDescription methodDescription, int offset);
    public MethodDescription get_MethodDescription();
    public int get_Offset();
}
[GuidAttribute("00000000-0000-0000-C000-000000000046")]
public interface DevExpress.DirectX.NativeInterop.CCW.IUnknownCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int QueryInterface(IntPtr riid, IntPtr ppOutput);
    [MethodOffsetAttribute("1")]
[NoHResultAttribute]
public abstract virtual int AddRef();
    [MethodOffsetAttribute("2")]
[NoHResultAttribute]
public abstract virtual int Release();
}
internal class DevExpress.DirectX.NativeInterop.CCW.MethodDescription : object {
    private MethodInfo targetMethod;
    private Type interfaceType;
    private MethodInfo interfaceMethod;
    public MethodInfo TargetMethod { get; }
    public Type InterfaceType { get; }
    public MethodInfo InterfaceMethod { get; }
    public MethodDescription(MethodInfo targetMethod, Type interfaceType, MethodInfo interfaceMethod);
    public MethodInfo get_TargetMethod();
    public Type get_InterfaceType();
    public MethodInfo get_InterfaceMethod();
}
[AttributeUsageAttribute("64")]
public class DevExpress.DirectX.NativeInterop.CCW.MethodOffsetAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    public int Offset { get; }
    public MethodOffsetAttribute(int offset);
    [CompilerGeneratedAttribute]
public int get_Offset();
}
[AttributeUsageAttribute("64")]
public class DevExpress.DirectX.NativeInterop.CCW.NoHResultAttribute : Attribute {
}
public abstract class DevExpress.DirectX.NativeInterop.ComObject : object {
    private static int E_NOINTERFACE;
    private static IInvokeHelper invokeHelper;
    private IntPtr nativeObject;
    internal static IInvokeHelper InvokeHelper { get; }
    internal IntPtr NativeObject { get; }
    protected ComObject(IntPtr nativeObject);
    private static ComObject();
    internal static IInvokeHelper get_InvokeHelper();
    protected static int MarshalBool(bool value);
    internal IntPtr get_NativeObject();
    protected T AsObject(Func`2<IntPtr, T> create);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected IntPtr QueryInterface();
    [SecuritySafeCriticalAttribute]
protected Nullable`1<IntPtr> QueryInterface(bool throwIfNoInterface);
    [SecuritySafeCriticalAttribute]
public int AddRef();
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool dispose);
}
[ExtensionAttribute]
public static class DevExpress.DirectX.NativeInterop.ComObjectExtenstions : object {
    [ExtensionAttribute]
public static IntPtr ToNativeObject(ComObject comObject);
}
[SecuritySafeCriticalAttribute]
public static class DevExpress.DirectX.NativeInterop.D2D1NativeInterop : object {
    private static UInt32 D2D1CreateFactory(UInt32 factoryType, Guid riid, D2D1_FACTORY_OPTIONS& pFactoryOptions, IntPtr& ppIFactory);
    private static UInt32 D2D1CreateDevice(IntPtr dxgiDevice, IntPtr creationProperties, IntPtr& d2dDevice);
    private static int D2D1CreateDeviceContext(IntPtr dxgiSurface, D2D1_CREATION_PROPERTIES& creationProperties, IntPtr& d2dDeviceContext);
    public static D2D1Factory1 CreateFactory();
    public static D2D1DeviceContext CreateDeviceContext(DXGISurface dxgiSurface, D2D1_CREATION_PROPERTIES& creationProperties);
}
public static class DevExpress.DirectX.NativeInterop.D3DNativeInterop : object {
    private static int D3D11_SDK_VERSION;
    private static int D3DCompile(IntPtr pSrcData, IntPtr srcDataSize, IntPtr pSourceName, IntPtr pDefines, IntPtr pInclude, string pEntrypoint, string pTarget, int flags1, int flags2, IntPtr& ppCode, IntPtr& ppErrorMsgs);
    private static int D3D11CreateDevice(IntPtr pAdapter, D3D_DRIVER_TYPE DriverType, IntPtr Software, D3D11_CREATE_DEVICE_FLAG Flags, D3D_FEATURE_LEVEL[] pFeatureLevels, UInt32 FeatureLevels, UInt32 SDKVersion, IntPtr& ppDevice, D3D_FEATURE_LEVEL& pFeatureLevel, IntPtr& ppImmediateContext);
    [SecuritySafeCriticalAttribute]
public static D3DBlob D3DCompile(Byte[] shader, string entryPoint, string target);
    [SecuritySafeCriticalAttribute]
public static D3D11Device CreateD3D11Device(bool useSoftwareRenderer, D3D11DeviceContext& deviceContext);
    [SecuritySafeCriticalAttribute]
public static D3D11Device CreateD3D11Device(DeviceOptions options, D3D11DeviceContext& deviceContext);
}
[GuidAttribute("36bfdcb6-9739-435d-a30d-a653beff6a6f")]
public interface DevExpress.DirectX.NativeInterop.Direct2D.CCW.ID2D1DrawTransformCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int SetDrawInfo(D2D1DrawInfo drawInfo);
}
[GuidAttribute("a248fd3f-3e6c-4e63-9f03-7f68ecc91db9")]
public interface DevExpress.DirectX.NativeInterop.Direct2D.CCW.ID2D1EffectImplCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int Initialize(D2D1EffectContext effectContext, D2D1TransformGraph transformGraph);
    [MethodOffsetAttribute("1")]
public abstract virtual int PrepareForRender(D2D1_CHANGE_TYPE changeType);
    [MethodOffsetAttribute("2")]
public abstract virtual int SetGraph(D2D1TransformGraph transformGraph);
}
[GuidAttribute("2cd9069e-12e2-11dc-9fed-001143a055f9")]
public interface DevExpress.DirectX.NativeInterop.Direct2D.CCW.ID2D1SimplifiedGeometrySinkCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual void SetFillMode(D2D1_FILL_MODE fillMode);
    [MethodOffsetAttribute("1")]
public abstract virtual void SetSegmentFlags(D2D1_PATH_SEGMENT vertexFlags);
    [MethodOffsetAttribute("2")]
public abstract virtual void BeginFigure(D2D_POINT_2F startPoint, D2D1_FIGURE_BEGIN figureBegin);
    [MethodOffsetAttribute("3")]
public abstract virtual void AddLines(D2D_POINT_2F[] points, int pointCount);
    [MethodOffsetAttribute("4")]
public abstract virtual void AddBeziers(D2D1_BEZIER_SEGMENT[] beziers, int beziersCount);
    [MethodOffsetAttribute("5")]
public abstract virtual void EndFigure(D2D1_FIGURE_END figureEnd);
    [MethodOffsetAttribute("6")]
public abstract virtual int Close();
}
[GuidAttribute("ef1a287d-342a-4f76-8fdb-da0d6ea9f92b")]
public interface DevExpress.DirectX.NativeInterop.Direct2D.CCW.ID2D1TransformCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int MapOutputRectToInputRects(D2D1_RECT_L& outputRect, IntPtr inputRects, int inputRectsCount);
    [MethodOffsetAttribute("1")]
public abstract virtual int MapInputRectsToOutputRect(IntPtr inputRects, IntPtr inputOpaqueSubRects, int inputRectCount, D2D1_RECT_L& outputRect, D2D1_RECT_L& outputOpaqueSubRect);
    [MethodOffsetAttribute("2")]
public abstract virtual int MapInvalidRect(int inputIndex, D2D1_RECT_L invalidInputRect, D2D1_RECT_L& invalidOutputRect);
}
[GuidAttribute("b2efe1e7-729f-4102-949f-505fa21bf666")]
public interface DevExpress.DirectX.NativeInterop.Direct2D.CCW.ID2D1TransformNodeCCW {
    [MethodOffsetAttribute("0")]
[NoHResultAttribute]
public abstract virtual int GetInputCount();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1_LAYER_PARAMETERS : ValueType {
    private D2D1_LAYER_PARAMETERS_COMMON layerParameters;
    public D2D1_LAYER_PARAMETERS(D2D_RECT_F contentBounds, D2D1Geometry geometricMaskPointer, D2D1_ANTIALIAS_MODE maskAntialiasMode, D2D_MATRIX_3X2_F maskTransform, float opacity, D2D1Brush opacityBrushPointer, D2D1_LAYER_OPTIONS layerOptions);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1_LAYER_PARAMETERS1 : ValueType {
    private D2D1_LAYER_PARAMETERS1_COMMON layerParameters;
    public D2D1_LAYER_OPTIONS1 LayerOptions { get; }
    public D2D1_LAYER_PARAMETERS1(D2D_RECT_F contentBounds, D2D1Geometry geometricMaskPointer, D2D1_ANTIALIAS_MODE maskAntialiasMode, D2D_MATRIX_3X2_F maskTransform, float opacity, D2D1Brush opacityBrushPointer, D2D1_LAYER_OPTIONS1 layerOptions);
    public D2D1_LAYER_OPTIONS1 get_LayerOptions();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1_RESOURCE_TEXTURE_PROPERTIES : object {
    private Int32[] extents;
    private int dimensions;
    private D2D1_BUFFER_PRECISION bufferPrecision;
    private D2D1_CHANNEL_DEPTH channelDepth;
    private D2D1_FILTER filter;
    private D2D1_EXTEND_MODE[] extendModes;
    public D2D1_RESOURCE_TEXTURE_PROPERTIES(Int32[] extents, int dimensions, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth, D2D1_FILTER filter, D2D1_EXTEND_MODE[] extendModes);
    public void Marshal(Action`1<D2D1_RESOURCE_TEXTURE_PROPERTIES_COMMON> action);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1_RESOURCE_TEXTURE_PROPERTIES_COMMON : ValueType {
    private IntPtr extents;
    private int dimensions;
    private D2D1_BUFFER_PRECISION bufferPrecision;
    private D2D1_CHANNEL_DEPTH channelDepth;
    private D2D1_FILTER filter;
    private IntPtr extendModes;
    public D2D1_RESOURCE_TEXTURE_PROPERTIES_COMMON(IntPtr extents, int dimensions, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth, D2D1_FILTER filter, IntPtr extendModes);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Bitmap : D2D1Image {
    public D2D1Bitmap(IntPtr nativeObject);
    public D2D_SIZE_F GetSize();
    public D2D_SIZE_U GetPixelSize();
    public D2D1_PIXEL_FORMAT GetPixelFormat();
    public void GetDpi();
    public void CopyFromBitmap(D2D_POINT_2U destPoint, D2D1Bitmap bitmap, D2D_RECT_U srcRect);
    public void CopyFromRenderTarget(D2D_POINT_2U destPoint, D2D1RenderTarget renderTarget, D2D_RECT_U srcRect);
    public void CopyFromMemory(D2D_RECT_U dstRect, IntPtr srcData, int pitch);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Bitmap1 : D2D1Bitmap {
    public D2D1Bitmap1(IntPtr nativeObject);
    public D2D1_MAPPED_RECT Map(D2D1_MAP_OPTIONS options);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1BitmapBrush : D2D1Brush {
    public D2D1BitmapBrush(IntPtr nativeObject);
    public void SetExtendModeX(D2D1_EXTEND_MODE extendModeX);
    public void SetExtendModeY(D2D1_EXTEND_MODE extendModeY);
    public void SetInterpolationMode(D2D1_BITMAP_INTERPOLATION_MODE interpolationMode);
    public void SetBitmap(D2D1Bitmap bitmap);
    public D2D1_EXTEND_MODE GetExtendModeX();
    public D2D1_EXTEND_MODE GetExtendModeY();
    public D2D1_BITMAP_INTERPOLATION_MODE GetInterpolationMode();
    public D2D1Bitmap GetBitmap();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1BitmapBrush1 : D2D1BitmapBrush {
    public D2D1BitmapBrush1(IntPtr nativeObject);
    public void SetInterpolationMode1(D2D1_INTERPOLATION_MODE interpolationMode);
    public D2D1_INTERPOLATION_MODE GetInterpolationMode1();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Brush : D2D1Resource {
    public D2D1Brush(IntPtr nativeObject);
    public void SetOpacity(float opacity);
    public void SetTransform(D2D_MATRIX_3X2_F transform);
    public float GetOpacity();
    public D2D_MATRIX_3X2_F GetTransform();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1CommandList : D2D1Image {
    public D2D1CommandList(IntPtr nativeObject);
    public void Close();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1DCRenderTarget : D2D1RenderTarget {
    public D2D1DCRenderTarget(IntPtr nativeObject);
    public void BindDC(IntPtr hDC, RECT pSubRect);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Device : D2D1Resource {
    public D2D1Device(IntPtr nativeObject);
    public D2D1DeviceContext CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options);
    [SecuritySafeCriticalAttribute]
public D2D1PrintControl CreatePrintControl(WICImagingFactory wicFactory, PrintDocumentPackageTarget target, D2D1_PRINT_CONTROL_PROPERTIES properties);
    public void SetMaximumTextureMemory(long maximumInBytes);
    public long GetMaximumTextureMemory();
    public void ClearResources(int millisecondsSinceUse);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1DeviceContext : D2D1RenderTarget {
    public D2D1DeviceContext(IntPtr nativeObject);
    public D2D1DeviceContext2 AsDeviceContext2();
    public D2D1Bitmap1 CreateBitmap(D2D_SIZE_U size, IntPtr sourceData, int pitch, D2D1_BITMAP_PROPERTIES1 bitmapProperties);
    public void CreateBitmapFromWicBitmap1();
    public void CreateColorContext();
    public void CreateColorContextFromFilename();
    public void CreateColorContextFromWicColorContext();
    public D2D1Bitmap1 CreateBitmapFromDxgiSurface(DXGISurface surface, D2D1_BITMAP_PROPERTIES1 bitmapProperties);
    public D2D1Bitmap1 CreateBitmapFromDxgiSurface(DXGISurface surface);
    public D2D1Effect CreateEffect(Guid effectId);
    public void CreateGradientStopCollection();
    public D2D1ImageBrush CreateImageBrush(D2D1Image image, D2D1_IMAGE_BRUSH_PROPERTIES imageBrushProperties, D2D1_BRUSH_PROPERTIES brushProperties);
    public D2D1BitmapBrush1 CreateBitmapBrush(D2D1Bitmap bitmap, D2D1_BITMAP_BRUSH_PROPERTIES1 bitmapBrushProperties, D2D1_BRUSH_PROPERTIES brushProperties);
    public D2D1CommandList CreateCommandList();
    public void IsDxgiFormatSupported();
    public void IsBufferPrecisionSupported();
    public void GetImageLocalBounds();
    public void GetImageWorldBounds();
    public D2D_RECT_F GetGlyphRunWorldBounds(D2D_POINT_2F baselineOrigin, DWRITE_GLYPH_RUN glyphRun, DWRITE_MEASURING_MODE measuringMode);
    public D2D1Device GetDevice();
    public void SetTarget(D2D1Image image);
    public D2D1Image GetTarget();
    public void SetRenderingControls();
    public void GetRenderingControls();
    public void SetPrimitiveBlend(D2D1_PRIMITIVE_BLEND primitiveBlend);
    public D2D1_PRIMITIVE_BLEND GetPrimitiveBlend();
    public void SetUnitMode();
    public void GetUnitMode();
    public void DrawGlyphRun1();
    public void DrawImage(D2D1Image image, D2D_POINT_2F targetOffset, D2D_RECT_F imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);
    public void DrawImage(D2D1Image image, D2D_POINT_2F targetOffset, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);
    public void DrawGdiMetafile(D2D1GdiMetafile metafile, D2D_POINT_2F targetOffset);
    public void DrawBitmap(D2D1Bitmap bitmap, D2D_RECT_F destinationRectangle, float opacity, D2D1_INTERPOLATION_MODE interpolationMode, D2D_RECT_F sourceRectangle);
    public void DrawBitmap(D2D1Bitmap bitmap, D2D_RECT_F destinationRectangle, float opacity, D2D1_INTERPOLATION_MODE interpolationMode);
    public void PushLayer(D2D1_LAYER_PARAMETERS1 layerParameters, D2D1Layer layer);
    public void PushLayer(D2D1_LAYER_PARAMETERS1 layerParameters);
    public void InvalidateEffectInputRectangle(D2D1Effect effect, int input, D2D_RECT_F inputRectangle);
    public void GetEffectInvalidRectangleCount(D2D1Effect effect, int rectangleCount);
    public void GetEffectInvalidRectangles(D2D1Effect effect, D2D_RECT_F& rectangles, int rectanglesCount);
    public void GetEffectRequiredInputRectangles();
    public void FillOpacityMask(D2D1Bitmap opacityMask, D2D1Brush brush, D2D_RECT_F destinationRectangle, D2D_RECT_F sourceRectangle);
}
[GuidAttribute("394ea6a3-0c34-4321-950b-6ca20f0be6c7")]
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1DeviceContext2 : D2D1DeviceContext {
    internal D2D1DeviceContext2(IntPtr nativeObject);
    public D2D1GradientMesh CreateGradientMesh(D2D1_GRADIENT_MESH_PATCH[] patches);
    public void DrawGradientMesh(D2D1GradientMesh mesh);
}
[GuidAttribute("693ce632-7f2f-45de-93fe-18d88b37aa21")]
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1DrawInfo : ComObject {
    internal D2D1DrawInfo(IntPtr nativeObject);
    public D2D1DrawInfo Clone();
    public void SetInputDescription();
    public void SetOutputBuffer();
    public void SetCached();
    public void SetInstructionCountHint();
    public void SetPixelShaderConstantBuffer(IntPtr buffer, int bufferCount);
    public void SetResourceTexture(int textureIndex, D2D1ResourceTexture texture);
    public void SetVertexShaderConstantBuffer(IntPtr buffer, int bufferCount);
    public void SetPixelShader(IntPtr shaderId, D2D1_PIXEL_OPTIONS pixelOptions);
    public void SetVertexProcessing(D2D1VertexBuffer vertexBuffer, D2D1_VERTEX_OPTIONS vertexOptions, IntPtr blendDescription, D2D1_VERTEX_RANGE& vertexRange, IntPtr vertexShader);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Effect : D2D1Properties {
    public D2D1Effect(IntPtr nativeObject);
    public void SetInput(int index, D2D1Image input, bool invalidate);
    public void SetInputCount(int inputCount);
    public D2D1Image GetInput(int index);
    public int GetInputCount();
    public D2D1Image GetOutput();
}
[GuidAttribute("3d9f916b-27dc-4ad7-b4f1-64945340f563")]
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1EffectContext : ComObject {
    internal D2D1EffectContext(IntPtr nativeObject);
    public D2D1EffectContext Clone();
    public void GetDpi(Single& dpiX, Single& dpiY);
    public void CreateEffect();
    public void GetMaximumSupportedFeatureLevel();
    public void CreateTransformNodeFromEffect();
    public void CreateBlendTransform();
    public void CreateBorderTransform();
    public void CreateOffsetTransform();
    public void CreateBoundsAdjustmentTransform();
    public void LoadPixelShader(IntPtr resourceId, IntPtr buffer, int bufferLenght);
    public void LoadVertexShader(IntPtr resourceId, IntPtr buffer, int bufferLenght);
    public void LoadComputeShader();
    public bool IsShaderLoaded(Guid resourceId);
    public D2D1ResourceTexture CreateResourceTexture(IntPtr resourceId, D2D1_RESOURCE_TEXTURE_PROPERTIES properties, IntPtr data, int dataSize);
    public void FindResourceTexture();
    public D2D1VertexBuffer CreateVertexBuffer(D2D1_VERTEX_BUFFER_PROPERTIES& vertexBufferProperties, IntPtr resourceId, D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES& customVertexBufferProperties);
    public int FindVertexBuffer(IntPtr resourceId, D2D1VertexBuffer& vertexBuffer);
    public void CreateColorContext();
    public void CreateColorContextFromFilename();
    public void CreateColorContextFromWicColorContext();
    public void CheckFeatureSupport();
    public void IsBufferPrecisionSupported();
}
[GuidAttribute("06152247-6f50-465a-9245-118bfd3b6007")]
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Factory : ComObject {
    public D2D1Factory(IntPtr nativeObject);
    public void ReloadSystemMetrics();
    public void GetDesktopDpi(float dpiX, float dpiY);
    public D2D1Geometry CreateRectangleGeometry(D2D_RECT_F rectangle);
    public void CreateRoundedRectangleGeometry();
    public void CreateEllipseGeometry();
    public void CreateGeometryGroup();
    public D2D1TransformedGeometry CreateTransformedGeometry(D2D1Geometry sourceGeometry, D2D_MATRIX_3X2_F transform);
    public D2D1PathGeometry CreatePathGeometry();
    public void CreateStrokeStyle();
    public void CreateDrawingStateBlock();
    public void CreateWicBitmapRenderTarget();
    public void CreateHwndRenderTarget();
    public D2D1RenderTarget CreateDxgiSurfaceRenderTarget(DXGISurface dxgiSurface, D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties);
    public D2D1DCRenderTarget CreateDCRenderTarget(D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties);
    public D2D1DCRenderTarget CreateDCRenderTarget();
}
[GuidAttribute("bb12d362-daee-4b9a-aa1d-14ba401cfa1f")]
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Factory1 : D2D1Factory {
    private HashSet`1<Guid> registeredEffects;
    public D2D1Factory1(IntPtr nativeObject);
    public D2D1Device CreateDevice(DXGIDevice dxgiDevice);
    public D2D1StrokeStyle CreateStrokeStyle(D2D1_STROKE_STYLE_PROPERTIES1 strokeStyleProperties, Single[] dashes, int dashesCount);
    public void CreatePathGeometry1();
    public void CreateDrawingStateBlock1();
    public D2D1GdiMetafile CreateGdiMetafile(NativeStream metafileStream);
    public void RegisterEffectFromStream();
    [SecuritySafeCriticalAttribute]
public void RegisterEffectFromString(Guid effectId, string propertyXml, D2D1_PROPERTY_BINDING[] bindings, EventFactoryDelegate effectFactory);
    public void UnregisterEffect();
    public void GetRegisteredEffects();
    public void GetEffectProperties();
    public bool IsEffectRegistered(Guid effectGuid);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1GdiMetafile : ComObject {
    public D2D1GdiMetafile(IntPtr nativeObject);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Geometry : D2D1Resource {
    public D2D1Geometry(IntPtr nativeObject);
    public D2D_RECT_F GetBounds(D2D_MATRIX_3X2_F worldTransform);
    public D2D_RECT_F GetWidenedBounds(float strokeWidth, D2D1StrokeStyle strokeStyle, D2D_MATRIX_3X2_F worldTransform);
    public void StrokeContainsPoint();
    public void FillContainsPoint();
    public void CompareWithGeometry();
    public void Simplify();
    public void Tessellate();
    public void CombineWithGeometry(D2D1Geometry inputGeometry, D2D1_COMBINE_MODE combineMode, D2D_MATRIX_3X2_F inputGeometryTransform, float flatteningTolerance, IComCallableWrapper`1<ID2D1SimplifiedGeometrySinkCCW> sink);
    public void CombineWithGeometry(D2D1Geometry inputGeometry, D2D1_COMBINE_MODE combineMode, D2D_MATRIX_3X2_F inputGeometryTransform, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink);
    public void Outline(D2D_MATRIX_3X2_F worldTransform, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink);
    public float ComputeArea(D2D_MATRIX_3X2_F worldTransform, float flatteningTolerance);
    public float ComputeLength(D2D_MATRIX_3X2_F worldTransform, float flatteningTolerance);
    public void ComputePointAtLength(float lenght, D2D_MATRIX_3X2_F worldTransform, D2D_POINT_2F& point, D2D_POINT_2F& unitTangentVector);
    public void Widen(float strokeWidth, D2D1StrokeStyle strokeStyle, D2D_MATRIX_3X2_F worldTransform, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1GeometrySink : D2D1SimplifiedGeometrySink {
    public D2D1GeometrySink(IntPtr nativeObject);
    public void AddLine(D2D_POINT_2F point);
    public void AddBezier(D2D1_BEZIER_SEGMENT bezier);
    public void AddQuadraticBezier();
    public void AddQuadraticBeziers();
    public void AddArc();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1GradientMesh : D2D1Resource {
    internal D2D1GradientMesh(IntPtr nativeObject);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1GradientStopCollection : D2D1Resource {
    public D2D1GradientStopCollection(IntPtr nativeObject);
    public void GetGradientStopCount();
    public void GetGradientStops();
    public D2D1_GAMMA GetColorInterpolationGamma();
    public D2D1_EXTEND_MODE GetExtendMode();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Image : D2D1Resource {
    public D2D1Image(IntPtr nativeObject);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1ImageBrush : D2D1Brush {
    public D2D1ImageBrush(IntPtr nativeObject);
    public void SetImage(D2D1Image image);
    public void SetExtendModeX(D2D1_EXTEND_MODE extendModeX);
    public void SetExtendModeY(D2D1_EXTEND_MODE extendModeY);
    public void SetInterpolationMode(D2D1_INTERPOLATION_MODE interpolationMode);
    public void SetSourceRectangle(D2D_RECT_F sourceRectangle);
    public D2D1Image GetImage();
    public D2D1_EXTEND_MODE GetExtendModeX();
    public D2D1_EXTEND_MODE GetExtendModeY();
    public D2D1_INTERPOLATION_MODE GetInterpolationMode();
    public void GetSourceRectangle();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Layer : D2D1Resource {
    public D2D1Layer(IntPtr nativeObject);
    public void GetSize();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1LinearGradientBrush : D2D1Brush {
    internal D2D1LinearGradientBrush(IntPtr nativeObject);
    public void SetStartPoint(D2D_POINT_2F startPoint);
    public void SetEndPoint(D2D_POINT_2F endPoint);
    public D2D_POINT_2F GetStartPoint();
    public D2D_POINT_2F GetEndPoint();
    public D2D1GradientStopCollection GetGradientStopCollection();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1PathGeometry : D2D1Geometry {
    public D2D1PathGeometry(IntPtr nativeObject);
    public D2D1GeometrySink Open();
    public void Stream(D2D1GeometrySink geometrySink);
    public void GetSegmentCount();
    public void GetFigureCount();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1PrintControl : ComObject {
    internal D2D1PrintControl(IntPtr nativeObject);
    [SecuritySafeCriticalAttribute]
public void AddPage(D2D1CommandList commandList, D2D_SIZE_F pageSize, NativeStream pagePrintTicketStream);
    public void Close();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Properties : ComObject {
    public D2D1Properties(IntPtr nativeObject);
    public int GetPropertyCount();
    public void GetPropertyName();
    public void GetPropertyNameLength();
    public D2D1_PROPERTY_TYPE GetType(int index);
    public void GetPropertyIndex();
    public void SetValueByName();
    [SecuritySafeCriticalAttribute]
public void SetValue(int index, object value);
    public void SetValue(int index, D2D1_PROPERTY_TYPE type, IntPtr data, int dataSize);
    public void GetValueByName();
    public void GetValue(int index, D2D1_PROPERTY_TYPE type, IntPtr data, int dataSize);
    public int GetValueSize(int index);
    public D2D1Properties GetSubProperties(int index);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1RadialGradientBrush : D2D1Brush {
    internal D2D1RadialGradientBrush(IntPtr nativeObject);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1RenderTarget : D2D1Resource {
    public D2D1RenderTarget(IntPtr nativeObject);
    public D2D1Bitmap CreateBitmap(D2D_SIZE_U size, IntPtr srcData, int pitch, D2D1_BITMAP_PROPERTIES bitmapProperties);
    [SecuritySafeCriticalAttribute]
public D2D1Bitmap CreateBitmapFromWicBitmap(IComCallableWrapper`1<IWICBitmapSourceCCW> wicBitmapSource);
    public D2D1Bitmap CreateBitmapFromWicBitmap(WICBitmapSource wicBitmapSource);
    private D2D1Bitmap CreateBitmapFromWicBitmap(IntPtr wicBitmapSource);
    public void CreateSharedBitmap();
    public void CreateBitmapBrush();
    public D2D1SolidColorBrush CreateSolidColorBrush(D2D1_COLOR_F color, D2D1_BRUSH_PROPERTIES brushProperties);
    public D2D1GradientStopCollection CreateGradientStopCollection(D2D1_GRADIENT_STOP[] gradientStops, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode);
    public D2D1LinearGradientBrush CreateLinearGradientBrush(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES linearGradientBrushProperties, D2D1_BRUSH_PROPERTIES brushProperties, D2D1GradientStopCollection gradientStopCollection);
    public D2D1LinearGradientBrush CreateLinearGradientBrush(D2D_POINT_2F startPoint, D2D_POINT_2F endPoint, D2D1_COLOR_F startColor, D2D1_COLOR_F endColor);
    public D2D1RadialGradientBrush CreateRadialGradientBrush(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES radialGradientBrushProperties, D2D1_BRUSH_PROPERTIES brushProperties, D2D1GradientStopCollection gradientStopCollection);
    public void CreateCompatibleRenderTarget();
    public D2D1Layer CreateLayer(D2D_SIZE_F size);
    public void CreateMesh();
    public void DrawLine(D2D_POINT_2F point0, D2D_POINT_2F point1, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle);
    public void DrawLine(D2D_POINT_2F startPoint, D2D_POINT_2F endPoint, D2D1Brush brush, float strokeWidth);
    public void DrawRectangle(D2D_RECT_F rect, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle);
    public void FillRectangle(D2D_RECT_F rect, D2D1Brush brush);
    public void DrawRoundedRectangle(D2D1_ROUNDED_RECT rect, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle);
    public void FillRoundedRectangle(D2D1_ROUNDED_RECT rect, D2D1Brush brush);
    public void DrawEllipse(D2D1_ELLIPSE ellipse, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle);
    public void FillEllipse(D2D1_ELLIPSE ellipse, D2D1Brush brush);
    public void DrawGeometry(D2D1Geometry geometry, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle);
    public void DrawGeometry(D2D1Geometry geometry, D2D1Brush brush, float strokeWidth);
    public void FillGeometry(D2D1Geometry geometry, D2D1Brush brush, D2D1Brush opacityBrush);
    public void FillGeometry(D2D1Geometry geometry, D2D1Brush brush);
    public void FillMesh();
    public void FillOpacityMask();
    public void DrawBitmap(D2D1Bitmap bitmap, D2D_RECT_F destinationRectangle, float opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D_RECT_F sourceRectangle);
    public void DrawBitmap(D2D1Bitmap bitmap, D2D_RECT_F destinationRectangle, float opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode);
    public void DrawText();
    public void DrawTextLayout(D2D_POINT_2F origin, DWriteTextLayout textLayout, D2D1Brush fillBrush, D2D1_DRAW_TEXT_OPTIONS options);
    public void DrawGlyphRun(D2D_POINT_2F baselineOrigin, DWRITE_GLYPH_RUN glyphRun, D2D1Brush foregroundBrush, DWRITE_MEASURING_MODE measuringMode);
    public void SetTransform(D2D_MATRIX_3X2_F transform);
    public D2D_MATRIX_3X2_F GetTransform();
    public void SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);
    public D2D1_ANTIALIAS_MODE GetAntialiasMode();
    public void SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE mode);
    public void GetTextAntialiasMode();
    public void SetTextRenderingParams();
    public void GetTextRenderingParams();
    public void SetTags(long tag1, long tag2);
    public void GetTags(long tag1, long tag2);
    public void PushLayer(D2D1_LAYER_PARAMETERS layerParameters, D2D1Layer layer);
    public void PopLayer();
    public void Flush(Int64& tag1, Int64& tag2);
    public void Flush();
    public void SaveDrawingState();
    public void RestoreDrawingState();
    public void PushAxisAlignedClip(D2D_RECT_F clipRect, D2D1_ANTIALIAS_MODE antialiasMode);
    public void PopAxisAlignedClip();
    public void Clear(D2D1_COLOR_F clearColor);
    public void BeginDraw();
    public void EndDraw(Int64& tag1, Int64& tag2);
    public void EndDraw();
    public D2D1_PIXEL_FORMAT GetPixelFormat();
    public void SetDpi(float dpiX, float dpiY);
    public void GetDpi();
    public D2D_SIZE_F GetSize();
    public D2D_SIZE_U GetPixelSize();
    public int GetMaximumBitmapSize();
    public void IsSupported();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1Resource : ComObject {
    public D2D1Resource(IntPtr nativeObject);
    public D2D1Factory GetFactory();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1ResourceTexture : ComObject {
    internal D2D1ResourceTexture(IntPtr nativeObject);
    public void Update();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1SimplifiedGeometrySink : ComObject {
    public D2D1SimplifiedGeometrySink(IntPtr nativeObject);
    public void SetFillMode(D2D1_FILL_MODE fillMode);
    public void SetSegmentFlags();
    public void BeginFigure(D2D_POINT_2F startPoint, D2D1_FIGURE_BEGIN figureBegin);
    public void AddLines(D2D_POINT_2F[] points);
    public void AddBeziers(D2D1_BEZIER_SEGMENT[] beziers);
    public void EndFigure(D2D1_FIGURE_END figureEnd);
    public void Close();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1SolidColorBrush : D2D1Brush {
    public D2D1SolidColorBrush(IntPtr nativeObject);
    public void SetColor(D2D1_COLOR_F color);
    public D2D1_COLOR_F GetColor();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1StrokeStyle : D2D1Resource {
    public D2D1StrokeStyle(IntPtr nativeObject);
    public D2D1_CAP_STYLE GetStartCap();
    public D2D1_CAP_STYLE GetEndCap();
    public D2D1_CAP_STYLE GetDashCap();
    public float GetMiterLimit();
    public D2D1_LINE_JOIN GetLineJoin();
    public float GetDashOffset();
    public D2D1_DASH_STYLE GetDashStyle();
    public int GetDashesCount();
    public Single[] GetDashes();
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1TransformedGeometry : D2D1Geometry {
    public D2D1TransformedGeometry(IntPtr nativeObject);
    public D2D1Geometry GetSourceGeometry();
    public void GetTransform(D2D_MATRIX_3X2_F& transform);
}
[GuidAttribute("13d29038-c3e6-4034-9081-13b53a417992")]
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1TransformGraph : ComObject {
    internal D2D1TransformGraph(IntPtr nativeObject);
    public int GetInputCount();
    public void SetSingleTransformNode(IComCallableWrapper`1<ID2D1TransformNodeCCW> node);
    public void AddNode(IComCallableWrapper`1<ID2D1TransformNodeCCW> node);
    public void RemoveNode(IComCallableWrapper`1<ID2D1TransformNodeCCW> node);
    public void SetOutputNode(IComCallableWrapper`1<ID2D1TransformNodeCCW> node);
    public void ConnectNode(IComCallableWrapper`1<ID2D1TransformNodeCCW> fromNode, IComCallableWrapper`1<ID2D1TransformNodeCCW> toNode, int toNodeInputIndex);
    public void ConnectToEffectInput(int toEffectInputIndex, IComCallableWrapper`1<ID2D1TransformNodeCCW> node, int toNodeInputIndex);
    public void Clear();
    public void SetPassthroughGraph(int effectInputIndex);
}
public class DevExpress.DirectX.NativeInterop.Direct2D.D2D1VertexBuffer : ComObject {
    internal D2D1VertexBuffer(IntPtr nativeObject);
    public void Map(IntPtr data, int bufferSize);
    public void Unmap();
}
public class DevExpress.DirectX.NativeInterop.Direct3D.D3D11Device : ComObject {
    public D3D11Device(IntPtr nativeObject);
    public DXGIDevice AsDXGIDevice();
    public void CreateBuffer();
    public void CreateTexture1D();
    public D3D11Texture2D CreateTexture2D(D3D11_TEXTURE2D_DESC pDesc);
    public void CreateTexture3D();
    public void CreateShaderResourceView();
    public void CreateUnorderedAccessView();
    public void CreateRenderTargetView();
    public void CreateDepthStencilView();
    public void CreateInputLayout();
    public void CreateVertexShader();
    public void CreateGeometryShader();
    public void CreateGeometryShaderWithStreamOutput();
    public void CreatePixelShader();
    public void CreateHullShader();
    public void CreateDomainShader();
    public void CreateComputeShader();
    public void CreateClassLinkage();
    public void CreateBlendState();
    public void CreateDepthStencilState();
    public void CreateRasterizerState();
    public void CreateSamplerState();
    public void CreateQuery();
    public void CreatePredicate();
    public void CreateCounter();
    public D3D11DeviceContext CreateDeferredContext(int ContextFlags);
    public void OpenSharedResource(IntPtr hResource, Guid returnedInterface);
    public void CheckFormatSupport(DXGI_FORMAT Format, int pFormatSupport);
    public void CheckMultisampleQualityLevels(DXGI_FORMAT Format, int SampleCount, int pNumQualityLevels);
    public void CheckCounterInfo();
    public void CheckCounter();
    public void CheckFeatureSupport();
    public void GetPrivateData(Guid guid, int pDataSize, IntPtr pData);
    public void SetPrivateData(Guid guid, int DataSize, IntPtr pData);
    public void SetPrivateDataInterface(Guid guid, object pData);
    public D3D_FEATURE_LEVEL GetFeatureLevel();
    public int GetCreationFlags();
    public void GetDeviceRemovedReason();
    public D3D11DeviceContext GetImmediateContext();
    public void SetExceptionMode(int RaiseFlags);
    public int GetExceptionMode();
}
public class DevExpress.DirectX.NativeInterop.Direct3D.D3D11DeviceChild : ComObject {
    public D3D11DeviceChild(IntPtr nativeObject);
    public D3D11Device GetDevice();
    public void GetPrivateData(Guid guid, int pDataSize, IntPtr pData);
    public void SetPrivateData(Guid guid, int DataSize, IntPtr pData);
    public void SetPrivateDataInterface(Guid guid, object pData);
}
public class DevExpress.DirectX.NativeInterop.Direct3D.D3D11DeviceContext : D3D11DeviceChild {
    public D3D11DeviceContext(IntPtr nativeObject);
    public void Begin();
    public void ClearDepthStencilView();
    public void ClearRenderTargetView();
    public void ClearState();
    public void ClearUnorderedAccessViewFloat();
    public void ClearUnorderedAccessViewUint();
    public void CopyResource(D3D11Texture2D pDstResource, D3D11Texture2D pSrcResource);
    public void CopyStructureCount();
    public void CopySubresourceRegion(D3D11Texture2D pDstResource, int dstSubresource, int dstX, int dstY, int dstZ, D3D11Texture2D pSrcResource, int srcSubresource, D3D11_BOX pSrcBox);
    public void CSGetConstantBuffers();
    public void CSGetSamplers();
    public void CSGetShader();
    public void CSGetShaderResources();
    public void CSGetUnorderedAccessViews();
    public void CSSetConstantBuffers();
    public void CSSetSamplers();
    public void CSSetShader();
    public void CSSetShaderResources();
    public void CSSetUnorderedAccessViews();
    public void Dispatch();
    public void DispatchIndirect();
    public void Draw();
    public void DrawAuto();
    public void DrawIndexed();
    public void DrawIndexedInstanced();
    public void DrawIndexedInstancedIndirect();
    public void DrawInstanced();
    public void DrawInstancedIndirect();
    public void DSGetConstantBuffers();
    public void DSGetSamplers();
    public void DSGetShader();
    public void DSGetShaderResources();
    public void DSSetConstantBuffers();
    public void DSSetSamplers();
    public void DSSetShader();
    public void DSSetShaderResources();
    public void End();
    public void ExecuteCommandList();
    public void FinishCommandList();
    public void Flush();
    public void GenerateMips();
    public void GetContextFlags();
    public void GetData();
    public void GetPredication();
    public void GetResourceMinLOD();
    public void GSGetConstantBuffers();
    public void GSGetSamplers();
    public void GSGetShader();
    public void GSGetShaderResources();
    public void GSSetConstantBuffers();
    public void GSSetSamplers();
    public void GSSetShader();
    public void GSSetShaderResources();
    public void HSGetConstantBuffers();
    public void HSGetSamplers();
    public void HSGetShader();
    public void HSGetShaderResources();
    public void HSSetConstantBuffers();
    public void HSSetSamplers();
    public void HSSetShader();
    public void HSSetShaderResources();
    public void IAGetIndexBuffer();
    public void IAGetInputLayout();
    public void IAGetPrimitiveTopology();
    public void IAGetVertexBuffers();
    public void IASetIndexBuffer();
    public void IASetInputLayout();
    public void IASetPrimitiveTopology();
    public void IASetVertexBuffers();
    public D3D11_MAPPED_SUBRESOURCE Map(D3D11Resource pResource, int subresource, D3D11_MAP mapType, D3D11_MAP_FLAG mapFlags);
    public void OMGetBlendState();
    public void OMGetDepthStencilState();
    public void OMGetRenderTargets();
    public void OMGetRenderTargetsAndUnorderedAccessViews();
    public void OMSetBlendState();
    public void OMSetDepthStencilState();
    public void OMSetRenderTargets();
    public void OMSetRenderTargetsAndUnorderedAccessViews();
    public void PSGetConstantBuffers();
    public void PSGetSamplers();
    public void PSGetShader();
    public void PSGetShaderResources();
    public void PSSetConstantBuffers();
    public void PSSetSamplers();
    public void PSSetShader();
    public void PSSetShaderResources();
    public void ResolveSubresource();
    public void RSGetScissorRects();
    public void RSGetState();
    public void RSGetViewports();
    public void RSSetScissorRects();
    public void RSSetState();
    public void RSSetViewports();
    public void SetPredication();
    public void SetResourceMinLOD();
    public void SOGetTargets();
    public void SOSetTargets();
    public void Unmap(D3D11Resource pResource, int subresource);
    public void UpdateSubresource();
    public void VSGetConstantBuffers();
    public void VSGetSamplers();
    public void VSGetShader();
    public void VSGetShaderResources();
    public void VSSetConstantBuffers();
    public void VSSetSamplers();
    public void VSSetShader();
    public void VSSetShaderResources();
    public void GetNativeType();
}
public class DevExpress.DirectX.NativeInterop.Direct3D.D3D11Resource : D3D11DeviceChild {
    public D3D11Resource(IntPtr nativeObject);
    public void GetNativeType();
    public void SetEvictionPriority(int EvictionPriority);
    public int GetEvictionPriority();
}
public class DevExpress.DirectX.NativeInterop.Direct3D.D3D11Texture2D : D3D11Resource {
    public D3D11Texture2D(IntPtr nativeObject);
    public DXGISurface AsSurface();
    public DXGIResource AsResource();
    public D3D11_TEXTURE2D_DESC GetDesc();
}
public class DevExpress.DirectX.NativeInterop.Direct3D.D3DBlob : ComObject {
    internal D3DBlob(IntPtr nativeObject);
    public IntPtr GetBufferPointer();
    public int GetBufferSize();
    [SecuritySafeCriticalAttribute]
public Byte[] GetData();
}
[GuidAttribute("cca920e4-52f0-492b-bfa8-29c72ee0a468")]
public interface DevExpress.DirectX.NativeInterop.DirectWrite.CCW.IDWriteFontCollectionLoaderCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int CreateEnumeratorFromKey(DWriteFactory factory, IntPtr collectionKey, int collectionKeySize, IntPtr& enumerator);
}
[GuidAttribute("72755049-5ff7-435d-8348-4be97cfa6c7c")]
public interface DevExpress.DirectX.NativeInterop.DirectWrite.CCW.IDWriteFontFileEnumeratorCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int MoveNext(Int32& hasCurrentFile);
    [MethodOffsetAttribute("1")]
public abstract virtual int GetCurrentFontFile(IntPtr& fontFile);
}
[GuidAttribute("727cad4e-d6af-4c9e-8a08-d695b11caa49")]
public interface DevExpress.DirectX.NativeInterop.DirectWrite.CCW.IDWriteFontFileLoaderCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int CreateStreamFromKey(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, IntPtr& fontFileStream);
}
[GuidAttribute("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0")]
public interface DevExpress.DirectX.NativeInterop.DirectWrite.CCW.IDWriteFontFileStreamCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int ReadFileFragment(IntPtr& fragmentStart, long fileOffset, long fragmentSize, IntPtr& fragmentContext);
    [MethodOffsetAttribute("1")]
public abstract virtual int ReleaseFileFragment(IntPtr fragmentContext);
    [MethodOffsetAttribute("2")]
public abstract virtual int GetFileSize(Int64& fileSize);
    [MethodOffsetAttribute("3")]
public abstract virtual int GetLastWriteTime(Int64& lastWriteTime);
}
[GuidAttribute("5810cd44-0ca0-4701-b3fa-bec5182ae4f6")]
public interface DevExpress.DirectX.NativeInterop.DirectWrite.CCW.IDWriteTextAnalysisSinkCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int SetScriptAnalysis(int textPosition, int textLength, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis);
    [MethodOffsetAttribute("1")]
public abstract virtual int SetLineBreakpoints(int textPosition, int textLength, DWRITE_LINE_BREAKPOINT[] lineBreakpoints);
    [MethodOffsetAttribute("2")]
public abstract virtual int SetBidiLevel(int textPosition, int textLength, byte explicitLevel, byte resolvedLevel);
    [MethodOffsetAttribute("3")]
public abstract virtual int SetNumberSubstitution(int textPosition, int textLength, DWriteNumberSubstitution numberSubstitution);
}
[GuidAttribute("688e1a58-5094-47c8-adc8-fbcea60ae92b")]
public interface DevExpress.DirectX.NativeInterop.DirectWrite.CCW.IDWriteTextAnalysisSourceCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int GetTextAtPosition(int textPosition, IntPtr& textString, Int32& textLength);
    [MethodOffsetAttribute("1")]
public abstract virtual int GetTextBeforePosition(int textPosition, IntPtr& textString, Int32& textLength);
    [MethodOffsetAttribute("2")]
public abstract virtual DWRITE_READING_DIRECTION GetParagraphReadingDirection();
    [MethodOffsetAttribute("3")]
public abstract virtual int GetLocaleName(int textPosition, Int32& textLength, IntPtr& localeName);
    [MethodOffsetAttribute("4")]
public abstract virtual int GetNumberSubstitution(int textPosition, Int32& textLength, IntPtr& numberSubstitution);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWRITE_GLYPH_RUN : ValueType {
    private DWriteFontFace fontFace;
    private float fontEmSize;
    private Int16[] glyphIndices;
    private Single[] glyphAdvances;
    [CompilerGeneratedAttribute]
private bool <IsSideways>k__BackingField;
    public DWriteFontFace FontFace { get; }
    public float FontEmSize { get; }
    public Int16[] GlyphIndices { get; }
    public Single[] GlyphAdvances { get; }
    public bool IsSideways { get; public set; }
    public DWRITE_GLYPH_RUN(DWriteFontFace fontFace, float fontEmSize, Int16[] glyphIndices, Single[] glyphAdvances);
    public DWriteFontFace get_FontFace();
    public float get_FontEmSize();
    public Int16[] get_GlyphIndices();
    public Single[] get_GlyphAdvances();
    [CompilerGeneratedAttribute]
public bool get_IsSideways();
    [CompilerGeneratedAttribute]
public void set_IsSideways(bool value);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFactory : ComObject {
    public DWriteFactory(IntPtr nativeObject);
    public DWriteFactory2 AsDwriteFactory2();
    public DWriteFontCollection GetSystemFontCollection(bool checkForUpdates);
    public DWriteFontCollection CreateCustomFontCollection(IComCallableWrapper`1<IDWriteFontCollectionLoaderCCW> loader, IntPtr collectionKey);
    public void RegisterFontCollectionLoader(IComCallableWrapper`1<IDWriteFontCollectionLoaderCCW> fontCollectionLoader);
    public void UnregisterFontCollectionLoader(IComCallableWrapper`1<IDWriteFontCollectionLoaderCCW> fontCollectionLoader);
    public void CreateFontFileReference();
    public DWriteFontFile CreateCustomFontFileReference(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, IComCallableWrapper`1<IDWriteFontFileLoaderCCW> fontFileLoader);
    public DWriteFontFace CreateFontFace(DWRITE_FONT_FACE_TYPE fontFaceType, int numberOfFiles, DWriteFontFile[] fontFiles, int faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags);
    public DWriteFontFace CreateFontFace(DWRITE_FONT_FACE_TYPE fontFaceType, DWriteFontFile fontFile);
    public void CreateRenderingParams();
    public void CreateMonitorRenderingParams();
    public void CreateCustomRenderingParams();
    public void RegisterFontFileLoader(IComCallableWrapper`1<IDWriteFontFileLoaderCCW> fontFileLoader);
    public void UnregisterFontFileLoader(IComCallableWrapper`1<IDWriteFontFileLoaderCCW> fontFileLoader);
    public DWriteTextFormat CreateTextFormat(string fontFamilyName, DWriteFontCollection fontCollection, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STYLE style, DWRITE_FONT_STRETCH fontStretch, float fontSize, string localeName);
    public void CreateTypography();
    public void GetGdiInterop();
    public DWriteTextLayout CreateTextLayout(string text, DWriteTextFormat textFormat, float maxWidth, float maxHeight);
    public void CreateGdiCompatibleTextLayout();
    public void CreateEllipsisTrimmingSign();
    public DWriteTextAnalyzer CreateTextAnalyzer();
    public void CreateNumberSubstitution();
    public void CreateGlyphRunAnalysis();
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFactory1 : DWriteFactory {
    public DWriteFactory1(IntPtr nativeObject);
    public void GetEudcFontCollection();
    public void CreateCustomRenderingParams1();
}
[GuidAttribute("0439fc60-ca44-4994-8dee-3a9af7b732ec")]
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFactory2 : DWriteFactory1 {
    public DWriteFactory2(IntPtr nativeObject);
    public DWriteFontFallback GetSystemFontFallback();
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFont : ComObject {
    public DWriteFont(IntPtr nativeObject);
    public DWriteFont1 AsDWriteFont1();
    public DWriteFontFamily GetFontFamily();
    public DWRITE_FONT_WEIGHT GetWeight();
    public DWRITE_FONT_STRETCH GetStretch();
    public DWRITE_FONT_STYLE GetStyle();
    public bool IsSymbolFont();
    public void GetFaceNames();
    public DWriteLocalizedStrings GetInformationalStrings(DWRITE_INFORMATIONAL_STRING_ID id);
    public DWRITE_FONT_SIMULATIONS GetSimulations();
    public void GetMetrics();
    public bool HasCharacter(int unicodeValue);
    public DWriteFontFace CreateFontFace();
}
[GuidAttribute("acd16696-8c14-4f5d-877e-fe3fc1d32738")]
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFont1 : DWriteFont {
    internal DWriteFont1(IntPtr nativeObject);
    public DWRITE_FONT_METRICS1 GetMetrics1();
    public Byte[] GetPanose();
    public DWRITE_UNICODE_RANGE[] GetUnicodeRanges();
    public bool IsMonospacedFont();
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFontCollection : ComObject {
    public DWriteFontCollection(IntPtr nativeObject);
    public int GetFontFamilyCount();
    public DWriteFontFamily GetFontFamily(int index);
    public bool FindFamilyName(string familyName, Int32& index);
    public DWriteFont GetFontFromFontFace(DWriteFontFace fontFace);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFontFace : ComObject {
    public DWriteFontFace(IntPtr nativeObject);
    public DWriteFontFace1 AsDWriteFontFace1();
    public DWRITE_FONT_FACE_TYPE GetFaceType();
    public DWriteFontFile[] GetFiles();
    private void GetFiles(Int32& numberOfFiles, IntPtr result);
    public int GetIndex();
    public DWRITE_FONT_SIMULATIONS GetSimulations();
    public void IsSymbolFont();
    public DWRITE_FONT_METRICS GetMetrics();
    public void GetGlyphCount();
    public DWRITE_GLYPH_METRICS[] GetDesignGlyphMetrics(Int16[] glyphIndices, bool isSideways);
    public void GetGlyphIndices(Int32[] codePoints, int codePointCount, IntPtr glyphIndices);
    public bool TryGetFontTable(int openTypeTableTag, IntPtr& tableData, Int32& tableSize, IntPtr& tableContext);
    public void ReleaseFontTable(IntPtr tableContext);
    public void GetGlyphRunOutline(float emSize, Int16[] glyphIndices, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets, int glyphCount, bool isSideways, bool isRightToLeft, D2D1SimplifiedGeometrySink geometrySink);
    public void GetGlyphRunOutline(float emSize, Int16[] glyphIndices, Single[] glyphAdvances, D2D1SimplifiedGeometrySink geometrySink);
    public void GetRecommendedRenderingMode();
    public void GetGdiCompatibleMetrics();
    public void GetGdiCompatibleGlyphMetrics();
}
[GuidAttribute("a71efdb4-9fdb-4838-ad90-cfc3be8c3daf")]
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFontFace1 : DWriteFontFace {
    internal DWriteFontFace1(IntPtr nativeObject);
    public DWRITE_FONT_METRICS1 GetMetrics1();
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFontFallback : ComObject {
    public DWriteFontFallback(IntPtr nativeObject);
    public void MapCharacters(IComCallableWrapper`1<IDWriteTextAnalysisSourceCCW> analysisSource, int textPosition, int textLength, DWriteFontCollection baseFontCollection, string baseFamilyName, DWRITE_FONT_WEIGHT baseWeight, DWRITE_FONT_STYLE baseStyle, DWRITE_FONT_STRETCH baseStretch, Int32& mappedLength, DWriteFont& mappedFont, Single& scale);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFontFamily : DWriteFontList {
    public DWriteFontFamily(IntPtr nativeObject);
    public DWriteLocalizedStrings GetFamilyNames();
    public DWriteFont GetFirstMatchingFont(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style);
    public DWriteFont1 GetFirstMatchingFont1(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style);
    public DWriteFontList GetMatchingFonts(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFontFile : ComObject {
    public DWriteFontFile(IntPtr nativeObject);
    public void GetReferenceKey(IntPtr& key, Int32& keySize);
    public DWriteFontFileLoader GetLoader();
    public void Analyze();
    public Byte[] GetData();
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFontFileLoader : ComObject {
    internal DWriteFontFileLoader(IntPtr nativeObject);
    public DWriteFontFileStream CreateStreamFromKey(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFontFileStream : ComObject {
    internal DWriteFontFileStream(IntPtr nativeObject);
    public void ReadFileFragment(IntPtr& fragmentStart, long fileOffset, long fragmentSize, IntPtr& fragmentContext);
    public void ReleaseFileFragment(IntPtr fragmentContext);
    public long GetFileSize();
    public long GetLastWriteTime();
    [SecuritySafeCriticalAttribute]
public Byte[] ReadAllData();
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteFontList : ComObject {
    public DWriteFontList(IntPtr nativeObject);
    public DWriteFontCollection GetFontCollection();
    public int GetFontCount();
    public DWriteFont GetFont(int index);
}
internal class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteGlyphRunMarshaler : object {
    private ArrayMarshaler glyphAdvances;
    private ArrayMarshaler glyphIndices;
    private DWRITE_GLYPH_RUN_COMMON glyphRunInternal;
    public DWRITE_GLYPH_RUN_COMMON GlyphRun { get; }
    internal DWriteGlyphRunMarshaler(DWRITE_GLYPH_RUN glyphRun);
    public DWRITE_GLYPH_RUN_COMMON get_GlyphRun();
    public sealed virtual void Dispose();
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteLocalizedStrings : ComObject {
    internal DWriteLocalizedStrings(IntPtr nativeObject);
    private string GetString(int index, int bufferSize, int methodIndex);
    private int GetLength(int index, int methodIndex);
    public int GetCount();
    public bool FindLocaleName(string localeName, Int32& index);
    public int GetLocaleNameLength(int index);
    public string GetLocaleName(int index);
    public int GetStringLength(int index);
    public string GetString(int index);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteNumberSubstitution : ComObject {
    internal DWriteNumberSubstitution(IntPtr nativeObject);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteTextAnalyzer : ComObject {
    internal DWriteTextAnalyzer(IntPtr nativeObject);
    public void AnalyzeScript(IComCallableWrapper`1<IDWriteTextAnalysisSourceCCW> analysisSource, int textPosition, int textLength, IComCallableWrapper`1<IDWriteTextAnalysisSinkCCW> analysisSink);
    public void AnalyzeBidi(IComCallableWrapper`1<IDWriteTextAnalysisSourceCCW> analysisSource, int textPosition, int textLength, IComCallableWrapper`1<IDWriteTextAnalysisSinkCCW> analysisSink);
    public void AnalyzeNumberSubstitution(IComCallableWrapper`1<IDWriteTextAnalysisSourceCCW> analysisSource, int textPosition, int textLength, IComCallableWrapper`1<IDWriteTextAnalysisSinkCCW> analysisSink);
    public void AnalyzeLineBreakpoints(IComCallableWrapper`1<IDWriteTextAnalysisSourceCCW> analysisSource, int textPosition, int textLength, IComCallableWrapper`1<IDWriteTextAnalysisSinkCCW> analysisSink);
    public void GetGlyphs(string textString, DWriteFontFace fontFace, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteNumberSubstitution numberSubstitution, int maxGlyphCount, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, Int32& actualGlyphCount);
    public void GetGlyphs(string textString, DWriteFontFace fontFace, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteShapingFeatures features, DWriteNumberSubstitution numberSubstitution, int maxGlyphCount, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, Int32& actualGlyphCount);
    public void GetGlyphPlacements(string textString, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, DWriteFontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
    public void GetGlyphPlacements(string textString, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, DWriteFontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteShapingFeatures features, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
    public void GetGlyphs(IntPtr textString, int textLenght, DWriteFontFace fontFace, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteNumberSubstitution numberSubstitution, int maxGlyphCount, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, Int32& actualGlyphCount);
    public void GetGlyphs(IntPtr textString, int textLength, DWriteFontFace fontFace, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteShapingFeatures features, DWriteNumberSubstitution numberSubstitution, int maxGlyphCount, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, Int32& actualGlyphCount);
    public void GetGlyphPlacements(IntPtr textString, int textLength, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, DWriteFontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
    public void GetGlyphPlacements(IntPtr textString, int textLength, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, DWriteFontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteShapingFeatures features, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
    public void GetGdiCompatibleGlyphPlacements(string textString, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, DWriteFontFace fontFace, float fontEmSize, float pixelsPerDip, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteTextFormat : ComObject {
    public DWriteTextFormat(IntPtr nativeObject);
}
public class DevExpress.DirectX.NativeInterop.DirectWrite.DWriteTextLayout : DWriteTextFormat {
    internal DWriteTextLayout(IntPtr nativeObject);
    public void SetMaxWidth(float maxWidth);
    public void SetMaxHeight(float maxHeight);
    public void SetFontCollection(DWriteFontCollection fontCollection, DWRITE_TEXT_RANGE textRange);
    public void SetFontFamilyName(string fontFamilyName, DWRITE_TEXT_RANGE textRange);
    public void SetFontWeight(DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange);
    public void SetFontStyle(DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange);
    public void SetFontStretch(DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange);
    public void SetFontSize(float fontSize, DWRITE_TEXT_RANGE textRange);
    public void SetUnderline(bool hasUnderline, DWRITE_TEXT_RANGE textRange);
    public void SetStrikethrough(bool hasStrikethrough, DWRITE_TEXT_RANGE textRange);
    public void SetDrawingEffect();
    public void SetInlineObject();
    public void SetTypography();
    public void SetLocaleName();
    public void GetMaxWidth();
    public void GetMaxHeight();
    public void GetFontCollection();
    public void GetFontFamilyNameLength();
    public void GetFontFamilyName();
    public void GetFontWeight();
    public void GetFontStyle();
    public void GetFontStretch();
    public void GetFontSize();
    public void GetUnderline();
    public void GetStrikethrough();
    public void GetDrawingEffect();
    public void GetInlineObject();
    public void GetTypography();
    public void GetLocaleNameLength();
    public void GetLocaleName();
    public void Draw();
    public void GetLineMetrics();
    public void GetMetrics();
    public void GetOverhangMetrics();
    public void GetClusterMetrics(DWRITE_CLUSTER_METRICS[] clusterMetrics, int maxClusterCount, Int32& actualClusterCount);
    private int GetClusterMetricsCore(DWRITE_CLUSTER_METRICS[] clusterMetrics, int maxClusterCount, Int32& actualClusterCount);
    public void DetermineMinWidth();
    public void HitTestPoint();
    public void HitTestTextPosition();
    public void HitTestTextRange();
    public float GetWidth(int textLength);
}
[SecuritySafeCriticalAttribute]
public static class DevExpress.DirectX.NativeInterop.DWriteNativeInterop : object {
    private static UInt32 DWriteCreateFactory(DWRITE_FACTORY_TYPE type, Guid iid, IntPtr& factory);
    public static DWriteFactory CreateDwriteFactory(bool shared);
}
[GuidAttribute("54ec77fa-1377-44e6-8c32-88fd5f44c84c")]
public class DevExpress.DirectX.NativeInterop.DXGI.DXGIDevice : DXGIObject {
    public DXGIDevice(IntPtr nativeObject);
}
public class DevExpress.DirectX.NativeInterop.DXGI.DXGIDeviceSubObject : DXGIObject {
    public DXGIDeviceSubObject(IntPtr nativeObject);
    public void GetDevice(Guid riid, IntPtr& ppDevice);
}
public class DevExpress.DirectX.NativeInterop.DXGI.DXGIObject : ComObject {
    public DXGIObject(IntPtr nativeObject);
    public void SetPrivateData(Guid Name, int DataSize, IntPtr pData);
    public void SetPrivateDataInterface(Guid Name, object pUnknown);
    public void GetPrivateData(Guid Name, int pDataSize, IntPtr pData);
    public void GetParent(Guid riid);
}
[GuidAttribute("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")]
public class DevExpress.DirectX.NativeInterop.DXGI.DXGIResource : DXGIDeviceSubObject {
    public IntPtr SharedHandle { get; }
    public DXGIResource(IntPtr nativeObject);
    public IntPtr get_SharedHandle();
    public void GetSharedHandle(IntPtr& sharedHandle);
    public void GetUsage(int usageRef);
    public void SetEvictionPriority(int evictionPriority);
    public void GetEvictionPriority();
}
[GuidAttribute("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")]
public class DevExpress.DirectX.NativeInterop.DXGI.DXGISurface : DXGIDeviceSubObject {
    public DXGISurface(IntPtr nativeObject);
    public void GetDesc();
    public void Map();
    public void Unmap();
}
public class DevExpress.DirectX.NativeInterop.DXGI.DXGISurface1 : DXGISurface {
    public DXGISurface1(IntPtr nativeObject);
    public IntPtr GetDC(bool discard);
    public void ReleaseDC(RECT dirtyRect);
}
[CLSCompliantAttribute("False")]
public interface DevExpress.DirectX.NativeInterop.IInvokeHelper {
    public abstract virtual int CalliInt(IntPtr param0, int param1);
    public abstract virtual int CalliInt(IntPtr param0, float param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, int param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, int param1, int param2);
    public abstract virtual void Calli(IntPtr param0, IntPtr& param1, int param2);
    public abstract virtual void Calli(IntPtr param0, int param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, DWRITE_TEXT_RANGE param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, WICRect& param1, int param2, int param3, IntPtr param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, int param3, int param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, DWRITE_FONT_WEIGHT param1, DWRITE_TEXT_RANGE param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, DWRITE_FONT_STYLE param1, DWRITE_TEXT_RANGE param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, DWRITE_FONT_STRETCH param1, DWRITE_TEXT_RANGE param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D3D11_TEXTURE2D_DESC& param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, float param1, DWRITE_TEXT_RANGE param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, int param1, DWRITE_TEXT_RANGE param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr param2, IntPtr param3, IntPtr param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, int param3, int param4, D3D11_MAPPED_SUBRESOURCE& param5, int param6);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, int param2, int param3);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr param2, int param3, int param4, int param5);
    public abstract virtual void Calli(IntPtr param0, int param1, IntPtr param2, int param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, int param1, IntPtr& param2, Int32& param3, int param4);
    public abstract virtual void Calli(IntPtr param0, int param1);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, IntPtr param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, int param1, IntPtr& param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, int param1, int param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, int param1, int param2, int param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, int param1, IntPtr param2, int param3, int param4);
    public abstract virtual void Calli(IntPtr param0, float param1, float param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D_MATRIX_3X2_F& param2, IntPtr& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr& param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D1_RENDER_TARGET_PROPERTIES& param2, IntPtr& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, D2D1_RENDER_TARGET_PROPERTIES& param1, IntPtr& param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, D2D_SIZE_U param1, IntPtr param2, int param3, D2D1_BITMAP_PROPERTIES& param4, IntPtr& param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D1_BITMAP_PROPERTIES& param2, IntPtr& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, int param3, int param4, IntPtr& param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES& param1, D2D1_BRUSH_PROPERTIES& param2, IntPtr param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, D2D_SIZE_F& param1, IntPtr& param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D2D_POINT_2F param1, D2D_POINT_2F param2, IntPtr param3, float param4, IntPtr param5, int param6);
    public abstract virtual void Calli(IntPtr param0, D2D_RECT_F& param1, IntPtr param2, float param3, IntPtr param4, int param5);
    public abstract virtual void Calli(IntPtr param0, D2D1_ROUNDED_RECT& param1, IntPtr param2, float param3, IntPtr param4, int param5);
    public abstract virtual void Calli(IntPtr param0, D2D1_ROUNDED_RECT& param1, IntPtr param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D2D_RECT_F& param1, IntPtr param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D2D1_ELLIPSE& param1, IntPtr param2, float param3, IntPtr param4, int param5);
    public abstract virtual void Calli(IntPtr param0, D2D1_ELLIPSE& param1, IntPtr param2, int param3);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, IntPtr param2, float param3, IntPtr param4, int param5);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, IntPtr param2, IntPtr param3, int param4);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, D2D_RECT_F& param2, float param3, int param4, D2D_RECT_F& param5, int param6);
    public abstract virtual void Calli(IntPtr param0, D2D_MATRIX_3X2_F& param1, int param2);
    public abstract virtual void Calli(IntPtr param0, D2D1_LAYER_PARAMETERS& param1, IntPtr param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D2D_RECT_F& param1, int param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, D2D1_RENDER_TARGET_PROPERTIES& param1, int param2);
    public abstract virtual void Calli(IntPtr param0, D2D_POINT_2F param1, int param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D2D_POINT_2F& param1, int param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D2D1_BEZIER_SEGMENT& param1, int param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, D2D_MATRIX_3X2_F& param1, D2D_RECT_F& param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, float param1, IntPtr param2, D2D_MATRIX_3X2_F& param3, float param4, D2D_RECT_F& param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D_MATRIX_3X2_F& param2, float param3, int param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, int param1, D2D_MATRIX_3X2_F& param2, float param3, IntPtr param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, D2D_MATRIX_3X2_F& param1, float param2, IntPtr param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, D2D_MATRIX_3X2_F& param3, float param4, IntPtr param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, D2D_MATRIX_3X2_F& param1, float param2, float param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, float param1, D2D_MATRIX_3X2_F& param2, float param3, D2D_POINT_2F& param4, D2D_POINT_2F& param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, float param1, IntPtr param2, D2D_MATRIX_3X2_F& param3, float param4, IntPtr param5, int param6);
    public abstract virtual void Calli(IntPtr param0, float param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, D2D_POINT_2U& param1, IntPtr param2, D2D_RECT_U& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, D2D_RECT_U& param1, IntPtr param2, int param3, int param4);
    public abstract virtual void Calli(IntPtr param0, D2D_POINT_2F param1, int param2);
    public abstract virtual void Calli(IntPtr param0, D2D1_BEZIER_SEGMENT& param1, int param2);
    public abstract virtual void Calli(IntPtr param0, int param1, IntPtr& param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D2D_RECT_F& param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, int param1, int param2, IntPtr param3, int param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, D2D_SIZE_U param1, IntPtr param2, int param3, D2D1_BITMAP_PROPERTIES1& param4, IntPtr& param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D1_BITMAP_PROPERTIES1& param2, IntPtr& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D1_IMAGE_BRUSH_PROPERTIES& param2, D2D1_BRUSH_PROPERTIES& param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D1_BITMAP_BRUSH_PROPERTIES1& param2, D2D1_BRUSH_PROPERTIES& param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D_RECT_F& param2, int param3);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, D2D_POINT_2F& param2, D2D_RECT_F& param3, int param4, int param5, int param6);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, D2D_RECT_F& param2, float param3, int param4, D2D_RECT_F& param5, IntPtr param6, int param7);
    public abstract virtual void Calli(IntPtr param0, D2D1_LAYER_PARAMETERS1& param1, IntPtr param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, D2D_RECT_F& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D_RECT_F& param2, int param3, int param4);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, IntPtr param2, D2D_RECT_F& param3, D2D_RECT_F& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr& param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr param2, int param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, IntPtr param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, int param1, int param2, IntPtr param3, int param4, int param5, IntPtr& param6, int param7);
    public abstract virtual void Calli(IntPtr param0, D2D_POINT_2F param1, IntPtr param2, IntPtr param3, D2D1_DRAW_TEXT_OPTIONS param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, int param1, int param2, short param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, float param1, float param2, int param3, IntPtr param4, int param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, IntPtr& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, int param1, int param2, int param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, float param1, IntPtr param2, IntPtr param3, IntPtr param4, int param5, int param6, int param7, IntPtr param8, int param9);
    public abstract virtual void Calli(IntPtr param0, D2D1_PIXEL_FORMAT& param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, RECT& param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, D2D1_COLOR_F& param1, D2D1_BRUSH_PROPERTIES& param2, IntPtr& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, Int64& param1, Int64& param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D2D1_COLOR_F& param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D_SIZE_F param2, IntPtr param3, IntPtr param4, IntPtr param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, D3D11_TEXTURE2D_DESC& param1, IntPtr param2, IntPtr& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr param2, IntPtr param3, IntPtr param4, IntPtr& param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, Int32& param2, Int32& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr param2, IntPtr& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr& param1, int param2, int param3);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, D2D_POINT_2F& param2, IntPtr param3, int param4, int param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, D2D_RECT_F& param1, IntPtr& param2, int param3);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, D2D_RECT_F& param2, float param3, int param4, IntPtr param5, int param6);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, D2D_RECT_F& param2, float param3, int param4, IntPtr param5, IntPtr param6, int param7);
    public abstract virtual int CalliInt(IntPtr param0, D2D1_STROKE_STYLE_PROPERTIES1& param1, IntPtr param2, int param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, IntPtr param3, int param4);
    public abstract virtual void Calli(IntPtr param0, D2D_SIZE_U& param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, D2D_MATRIX_3X2_F& param1, float param2, Single& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr param2, D2D1_PRINT_CONTROL_PROPERTIES& param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, long param1, int param2, IntPtr param3, int param4);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, D2D_POINT_2F& param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, int param3, IntPtr param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, int param1, D2D1_MAPPED_RECT& param2, int param3);
    public abstract virtual void Calli(IntPtr param0, D2D_POINT_2F param1, DWRITE_GLYPH_RUN_COMMON& param2, IntPtr param3, int param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, RECT& param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr param2, int param3, IntPtr param4, double param5, int param6, int param7);
    public abstract virtual int CalliInt(IntPtr param0, D2D_POINT_2F param1, DWRITE_GLYPH_RUN_COMMON& param2, int param3, D2D_RECT_F& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr param2, IntPtr param3, int param4, IntPtr param5, int param6);
    public abstract virtual int CalliInt(IntPtr param0, D2D1_VERTEX_BUFFER_PROPERTIES& param1, IntPtr param2, D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES& param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, IntPtr param2, int param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, IntPtr param3, D2D1_VERTEX_RANGE& param4, IntPtr param5, int param6);
    public abstract virtual IntPtr CalliIntPtr(IntPtr param0, int param1);
    public abstract virtual void Calli(IntPtr param0, Single& param1, Single& param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES& param1, D2D1_BRUSH_PROPERTIES& param2, IntPtr param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, int param1, Int32& param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, int param1, IntPtr param2, Int32& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, Int32& param1, int param2);
    public abstract virtual void Calli(IntPtr param0, DWRITE_FONT_METRICS& param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, IntPtr param3, int param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, D2D1_RESOURCE_TEXTURE_PROPERTIES_COMMON& param2, IntPtr param3, IntPtr param4, int param5, IntPtr& param6, int param7);
    public abstract virtual int CalliInt(IntPtr param0, int param1, IntPtr param2, int param3);
    public abstract virtual void Calli(IntPtr param0, DWRITE_FONT_METRICS1& param1, int param2);
    public abstract virtual float CalliFloat(IntPtr param0, int param1);
    public abstract virtual int CalliInt(IntPtr param0, Int32& param1, IntPtr param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr& param1, Int32& param2, int param3);
    public abstract virtual int CalliInt(IntPtr param0, Int64& param1, int param2);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr& param1, long param2, long param3, IntPtr& param4, int param5);
    public abstract virtual int CalliInt(IntPtr param0, string param1, Int16[] param2, DWRITE_SHAPING_TEXT_PROPERTIES[] param3, int param4, Int16[] param5, DWRITE_SHAPING_GLYPH_PROPERTIES[] param6, int param7, IntPtr param8, float param9, float param10, IntPtr param11, bool param12, bool param13, bool param14, DWRITE_SCRIPT_ANALYSIS& param15, string param16, IntPtr param17, IntPtr param18, int param19, Single[] param20, DWRITE_GLYPH_OFFSET[] param21, int param22);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, Int16[] param2, DWRITE_SHAPING_TEXT_PROPERTIES[] param3, int param4, Int16[] param5, DWRITE_SHAPING_GLYPH_PROPERTIES[] param6, int param7, IntPtr param8, float param9, bool param10, bool param11, DWRITE_SCRIPT_ANALYSIS& param12, string param13, IntPtr[] param14, Int32[] param15, int param16, Single[] param17, DWRITE_GLYPH_OFFSET[] param18, int param19);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, IntPtr param3, bool param4, bool param5, DWRITE_SCRIPT_ANALYSIS& param6, string param7, IntPtr param8, IntPtr[] param9, Int32[] param10, int param11, int param12, Int16[] param13, DWRITE_SHAPING_TEXT_PROPERTIES[] param14, Int16[] param15, DWRITE_SHAPING_GLYPH_PROPERTIES[] param16, Int32& param17, int param18);
    public abstract virtual int CalliInt(IntPtr param0, string param1, IntPtr param2, DWRITE_FONT_WEIGHT param3, DWRITE_FONT_STYLE param4, DWRITE_FONT_STRETCH param5, float param6, string param7, IntPtr& param8, int param9);
    public abstract virtual int CalliInt(IntPtr param0, string param1, int param2, IntPtr param3, float param4, float param5, IntPtr& param6, int param7);
    public abstract virtual int CalliInt(IntPtr param0, DWRITE_CLUSTER_METRICS[] param1, int param2, Int32& param3, int param4);
    public abstract virtual int CalliInt(IntPtr param0, IntPtr param1, int param2, int param3, IntPtr param4, IntPtr param5, int param6, int param7, int param8, Int32& param9, IntPtr& param10, Single& param11, int param12);
    public abstract virtual int CalliInt(IntPtr param0, UInt32 param1, IntPtr& param2, Int32& param3, IntPtr& param4, Int32& param5, int value);
    public abstract virtual void Calli(IntPtr param0, IntPtr param1, int param2, int param3, int param4, int param5, IntPtr param6, int param7, D3D11_BOX& param8, int param9);
}
internal class DevExpress.DirectX.NativeInterop.InvokeHelperBuilder : object {
    private static MethodInfo calliMethod;
    private static Type nativeIntType;
    private static Type stringMarshalerType;
    private static Type arrayMarshalerType;
    private ModuleBuilder moduleBuilder;
    private static InvokeHelperBuilder();
    public InvokeHelperBuilder(DynamicAssemblyHelper helper);
    private static void EmitMarshalString(ILGenerator generator, int parameterIndex);
    private static void EmitMarshalArray(ILGenerator generator, int index);
    private static void EmitCalli(ILGenerator generator, OpCode opcode, CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes);
    private MethodBuilder PrepareGetMethodBuilder(TypeBuilder typeBuilder);
    public T CreateInvokeHelperImp();
}
internal abstract class DevExpress.DirectX.NativeInterop.LoadContext : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    protected int Index { get; }
    protected LoadContext(int index);
    [CompilerGeneratedAttribute]
protected int get_Index();
    public abstract virtual void Load(ILGenerator generator);
}
internal class DevExpress.DirectX.NativeInterop.LocalLoadContext : LoadContext {
    public LocalLoadContext(int index);
    public virtual void Load(ILGenerator generator);
}
internal class DevExpress.DirectX.NativeInterop.MarshalerLoadContext : LoadContext {
    private static Type marshalerType;
    public MarshalerLoadContext(int index);
    private static MarshalerLoadContext();
    public virtual void Load(ILGenerator generator);
}
public class DevExpress.DirectX.NativeInterop.MethodBuilderHelper : object {
    private ILGenerator generator;
    private Stack`1<int> usingBlockLocals;
    public ILGenerator Generator { get; }
    public bool HasOpenUsings { get; }
    public MethodBuilderHelper(ILGenerator generator);
    public ILGenerator get_Generator();
    public bool get_HasOpenUsings();
    public int StartUsingBlock(Type parametrType, int parameterIndex, Action`2<ILGenerator, int> createObjectAction);
    public void EndAllUsings();
    public void EndLastOpenUsing();
    private void EndUsingBlock(int localIndex);
    public int DefineLocal(Type localType);
}
public class DevExpress.DirectX.NativeInterop.NativeStream : ComObject {
    private static int FILE_ATTRIBUTE_NORMAL;
    private NativeStream(IntPtr nativeObject);
    private static IntPtr SHCreateMemStream(IntPtr pInit, int cbInit);
    private static int SHCreateStreamOnFileEx(string pszFile, STGMFlags grfMode, int dwAttributes, bool fCreate, IntPtr pstmTemplate, IntPtr& ppstm);
    [SecuritySafeCriticalAttribute]
public static NativeStream Create();
    [SecuritySafeCriticalAttribute]
public static NativeStream Create(Byte[] initalContents);
    [SecuritySafeCriticalAttribute]
public static NativeStream CreateFileStream(string fileName);
    public void Read(Byte[] pv, int cb, IntPtr pcbRead);
    public void Write(Byte[] pv, int cb, IntPtr pcbWritten);
    public void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
    public void SetSize(long libNewSize);
    public void CopyTo(NativeStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
    public void Commit(int grfCommitFlags);
    public void Revert();
    public void LockRegion(long libOffset, long cb, int dwLockType);
    public void UnlockRegion(long libOffset, long cb, int dwLockType);
    public void Stat();
    public void Clone(NativeStream& ppstm);
}
public class DevExpress.DirectX.NativeInterop.PrintDocumentPackage.PrintDocumentPackageTarget : ComObject {
    public PrintDocumentPackageTarget(IntPtr nativeObject);
    public void GetPackageTargetTypes();
    public void GetPackageTarget();
    public void Cancel();
}
public class DevExpress.DirectX.NativeInterop.PrintDocumentPackage.PrintDocumentPackageTargetFactory : ComObject {
    private static Guid clsid;
    private static Guid interfaceId;
    private PrintDocumentPackageTargetFactory(IntPtr nativeObject);
    private static PrintDocumentPackageTargetFactory();
    [SecuritySafeCriticalAttribute]
public static PrintDocumentPackageTargetFactory Create();
    public PrintDocumentPackageTarget CreateDocumentPackageTargetForPrintJob(string printerName, string jobName, NativeStream jobOutputStream, NativeStream jobPrintTicketStream);
}
[GuidAttribute("00000120-a8f2-4877-ba0a-fd2b6645fb94")]
public interface DevExpress.DirectX.NativeInterop.WIC.CCW.IWICBitmapSourceCCW {
    [MethodOffsetAttribute("0")]
public abstract virtual int GetSize(Int32& width, Int32& height);
    [MethodOffsetAttribute("1")]
public abstract virtual int GetPixelFormat(Guid& pixelFormat);
    [MethodOffsetAttribute("2")]
public abstract virtual int GetResolution(Double& dpiX, Double& dpiY);
    [MethodOffsetAttribute("3")]
public abstract virtual int CopyPalette(IntPtr palette);
    [MethodOffsetAttribute("4")]
public abstract virtual int CopyPixels(WICRect& prc, int stride, int bufferSize, IntPtr buffer);
}
public class DevExpress.DirectX.NativeInterop.WIC.WICBitmapDecodeFrame : WICBitmapSource {
    internal WICBitmapDecodeFrame(IntPtr nativeObject);
}
public class DevExpress.DirectX.NativeInterop.WIC.WICBitmapDecoder : ComObject {
    internal WICBitmapDecoder(IntPtr nativeObject);
    public void Initialize(NativeStream data, WICDecodeOptions decodeOptions);
    public int GetFrameCount();
    public WICBitmapDecodeFrame GetFrame(int index);
}
public class DevExpress.DirectX.NativeInterop.WIC.WICBitmapScaler : WICBitmapSource {
    internal WICBitmapScaler(IntPtr nativeObject);
    public void Initialize(IComCallableWrapper`1<IWICBitmapSourceCCW> source, int width, int height, WICBitmapInterpolationMode mode);
    public void Initialize(WICBitmapSource source, int width, int height, WICBitmapInterpolationMode mode);
}
public class DevExpress.DirectX.NativeInterop.WIC.WICBitmapSource : ComObject {
    internal WICBitmapSource(IntPtr nativeObject);
    public void CopyPixels(WICRect rect, int stride, Byte[] buffer);
    public Guid GetPixelFormat();
}
public class DevExpress.DirectX.NativeInterop.WIC.WICColorContext : ComObject {
    internal WICColorContext(IntPtr nativeObject);
    public void InitializeFromFilename(string fileName);
    public void InitializeFromMemory(Byte[] memory);
}
public class DevExpress.DirectX.NativeInterop.WIC.WICColorTransform : WICBitmapSource {
    internal WICColorTransform(IntPtr nativeObject);
    public void Initialize(IComCallableWrapper`1<IWICBitmapSourceCCW> pIBitmapSource, WICColorContext pIContextSource, WICColorContext pIContextDest, Guid pixelFmtDest);
}
public enum DevExpress.DirectX.NativeInterop.WIC.WICDecodeOptions : Enum {
    public int value__;
    public static WICDecodeOptions DecodeMetadataCacheOnDemand;
    public static WICDecodeOptions DecodeMetadataCacheOnLoad;
}
public class DevExpress.DirectX.NativeInterop.WIC.WICFormatConverter : WICBitmapSource {
    internal WICFormatConverter(IntPtr nativeObject);
    public void Initialize(IComCallableWrapper`1<IWICBitmapSourceCCW> bitmapSource, Guid guid);
    public void Initialize(WICBitmapSource bitmapSource, Guid guid);
}
public class DevExpress.DirectX.NativeInterop.WIC.WICImagingFactory : ComObject {
    private static Guid clsid;
    private static Guid IWicImagingFactoryGuid;
    private static Guid GUID_ContainerFormatJpeg;
    private static ThreadLocal`1<WICImagingFactory> instance;
    public static WICImagingFactory Instance { get; }
    internal WICImagingFactory(IntPtr nativeObject);
    private static WICImagingFactory();
    public static WICImagingFactory get_Instance();
    [SecuritySafeCriticalAttribute]
private static WICImagingFactory Create();
    public WICBitmapDecoder CreateJPEGDecoder();
    public WICPalette CreatePalette();
    public WICFormatConverter CreateFormatConverter();
    public WICBitmapScaler CreateBitmapScaler();
    public WICColorContext CreateColorContext();
    public WICColorTransform CreateColorTransformer();
}
public class DevExpress.DirectX.NativeInterop.WIC.WICPalette : ComObject {
    internal WICPalette(IntPtr nativeObject);
    [SecuritySafeCriticalAttribute]
public static WICPalette FromNativeObject(IntPtr nativeObject);
    public void InitializeCustom(Int32[] color, int count);
}
public abstract class DevExpress.DirectX.StandardInterop.ComObject`1 : object {
    private T comObject;
    private bool shouldRelease;
    public T WrappedObject { get; }
    protected ComObject`1(T comObject);
    protected ComObject`1(T comObject, bool shouldRelease);
    public T get_WrappedObject();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool dispose);
}
[GuidAttribute("a2296057-ea42-4099-983b-539fb6505426")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Bitmap {
    public abstract virtual void GetFactory();
    public abstract virtual void GetSize();
    public abstract virtual void GetPixelSize(D2D_SIZE_U& size);
    public abstract virtual void GetPixelFormat(D2D1_PIXEL_FORMAT& pixelFormat);
    public abstract virtual void GetDpi();
    public abstract virtual void CopyFromBitmap(D2D_POINT_2U& destPoint, ID2D1Bitmap bitmap, D2D_RECT_U& srcRect);
    public abstract virtual void CopyFromRenderTarget(D2D_POINT_2U& destPoint, ID2D1RenderTarget renderTarget, D2D_RECT_U& srcRect);
    public abstract virtual void CopyFromMemory(D2D_RECT_U& dstRect, IntPtr srcData, int pitch);
}
[GuidAttribute("a898a84c-3873-4588-b08b-ebbf978df041")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Bitmap1 {
}
[GuidAttribute("41343a53-e41a-49a2-91cd-21793bbb62e5")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1BitmapBrush1 {
}
[GuidAttribute("2cd906a8-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Brush {
    public abstract virtual void GetFactory();
    public abstract virtual void SetOpacity();
    public abstract virtual void SetTransform(D2D_MATRIX_3X2_F& transform);
    public abstract virtual void GetOpacity();
    public abstract virtual void GetTransform();
}
[GuidAttribute("b4f34a19-2383-4d76-94f6-ec343657c3dc")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1CommandList {
    public abstract virtual void GetFactory();
    public abstract virtual void Stream();
    public abstract virtual void Close();
}
[GuidAttribute("54d7898a-a061-40a7-bec7-e465bcba2c4f")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1CommandSink {
    public abstract virtual int BeginDraw();
    public abstract virtual int EndDraw();
    public abstract virtual int SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);
    public abstract virtual int SetTags(long tag1, long tag2);
    public abstract virtual int SetTextAntialiasMode(int textAntialiasMode);
    public abstract virtual int SetTextRenderingParams(IntPtr textRenderingParams);
    public abstract virtual int SetTransform(D2D_MATRIX_3X2_F& transform);
    public abstract virtual int SetPrimitiveBlend(D2D1_PRIMITIVE_BLEND primitiveBlend);
    public abstract virtual int SetUnitMode(int unitMode);
    public abstract virtual int Clear(D2D1_COLOR_F& color);
    public abstract virtual int DrawGlyphRun(D2D_POINT_2F baselineOrigin, IntPtr glyphRun, IntPtr glyphRunDescription, ID2D1Brush foregroundBrush, int measuringMode);
    public abstract virtual int DrawLine(D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    public abstract virtual int DrawGeometry(ID2D1Geometry geometry, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    public abstract virtual int DrawRectangle(D2D_RECT_F& rect, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    public abstract virtual int DrawBitmap(ID2D1Bitmap bitmap, D2D_RECT_F& destinationRectangle, float opacity, D2D1_INTERPOLATION_MODE interpolationMode, D2D_RECT_F& sourceRectangle, IntPtr perspectiveTransform);
    public abstract virtual int DrawImage(ID2D1Image image, D2D_POINT_2F& targetOffset, D2D_RECT_F& imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);
    public abstract virtual int DrawGdiMetafile(IntPtr gdiMetafile, D2D_POINT_2F& targetOffset);
    public abstract virtual int FillMesh(IntPtr mesh, ID2D1Brush brush);
    public abstract virtual int FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, D2D_RECT_F& destinationRectangle, D2D_RECT_F& sourceRectangle);
    public abstract virtual int FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush);
    public abstract virtual int FillRectangle(D2D_RECT_F& rect, ID2D1Brush brush);
    public abstract virtual int PushAxisAlignedClip(D2D_RECT_F clipRect, D2D1_ANTIALIAS_MODE antialiasMode);
    public abstract virtual int PushLayer(D2D1_LAYER_PARAMETERS1_COMMON& layerParameters1, ID2D1Layer layer);
    public abstract virtual int PopAxisAlignedClip();
    public abstract virtual int PopLayer();
}
[GuidAttribute("1c51bc64-de61-46fd-9899-63a5d8f03950")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1DCRenderTarget {
    public abstract virtual void GetFactory();
    public abstract virtual ID2D1Bitmap CreateBitmap(D2D_SIZE_U size, IntPtr srcData, int pitch, D2D1_BITMAP_PROPERTIES& bitmapProperties);
    public abstract virtual void CreateBitmapFromWicBitmap();
    public abstract virtual void CreateSharedBitmap();
    public abstract virtual void CreateBitmapBrush();
    public abstract virtual ID2D1SolidColorBrush CreateSolidColorBrush(D2D1_COLOR_F& color, D2D1_BRUSH_PROPERTIES& brushProperties);
    public abstract virtual void CreateGradientStopCollection();
    public abstract virtual void CreateLinearGradientBrush();
    public abstract virtual void CreateRadialGradientBrush();
    public abstract virtual void CreateCompatibleRenderTarget();
    public abstract virtual void CreateLayer();
    public abstract virtual void CreateMesh();
    public abstract virtual void DrawLine();
    public abstract virtual void DrawRectangle();
    public abstract virtual void FillRectangle();
    public abstract virtual void DrawRoundedRectangle();
    public abstract virtual void FillRoundedRectangle();
    public abstract virtual void DrawEllipse();
    public abstract virtual void FillEllipse();
    public abstract virtual void DrawGeometry();
    public abstract virtual void FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush);
    public abstract virtual void FillMesh();
    public abstract virtual void FillOpacityMask();
    public abstract virtual void DrawBitmap(ID2D1Bitmap bitmap, D2D_RECT_F& destinationRectangle, float opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D_RECT_F& sourceRectangle);
    public abstract virtual void DrawTextW();
    public abstract virtual void DrawTextLayout();
    public abstract virtual void DrawGlyphRun();
    public abstract virtual void SetTransform();
    public abstract virtual void GetTransform();
    public abstract virtual void SetAntialiasMode();
    public abstract virtual void GetAntialiasMode();
    public abstract virtual void SetTextAntialiasMode();
    public abstract virtual void GetTextAntialiasMode();
    public abstract virtual void SetTextRenderingParams();
    public abstract virtual void GetTextRenderingParams();
    public abstract virtual void SetTags();
    public abstract virtual void GetTags();
    public abstract virtual void PushLayer();
    public abstract virtual void PopLayer();
    public abstract virtual void Flush();
    public abstract virtual void SaveDrawingState();
    public abstract virtual void RestoreDrawingState();
    public abstract virtual void PushAxisAlignedClip();
    public abstract virtual void PopAxisAlignedClip();
    public abstract virtual void Clear(D2D1_COLOR_F& clearColor);
    public abstract virtual void BeginDraw();
    public abstract virtual int EndDraw(Int64& tag1, Int64& tag2);
    public abstract virtual void GetPixelFormat();
    public abstract virtual void SetDpi();
    public abstract virtual void GetDpi();
    public abstract virtual void GetSize();
    public abstract virtual void GetPixelSize();
    public abstract virtual void GetMaximumBitmapSize();
    public abstract virtual void IsSupported();
    public abstract virtual void BindDC(IntPtr hDC, RECT& subRectRef);
}
[GuidAttribute("47dd575d-ac05-4cdd-8049-9b02cd16f44c")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Device {
    public abstract virtual void GetFactory();
    public abstract virtual ID2D1DeviceContext CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options);
    public abstract virtual ID2D1PrintControl CreatePrintControl(IntPtr wicFactory, IntPtr printTarget, D2D1_PRINT_CONTROL_PROPERTIES& properties);
    public abstract virtual void SetMaximumTextureMemory(long maximumInBytes);
    public abstract virtual long GetMaximumTextureMemory();
    public abstract virtual void ClearResources(int millisecondsSinceUse);
}
[GuidAttribute("e8f7fe7a-191c-466d-ad95-975678bda998")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1DeviceContext {
    public abstract virtual void GetFactory();
    public abstract virtual void CreateBitmap();
    public abstract virtual ID2D1Bitmap CreateBitmapFromWicBitmap(IntPtr wicBitmapSource, IntPtr zero);
    public abstract virtual void CreateSharedBitmap();
    public abstract virtual void CreateBitmapBrush();
    public abstract virtual ID2D1SolidColorBrush CreateSolidColorBrush(D2D1_COLOR_F& color, D2D1_BRUSH_PROPERTIES& brushProperties);
    public abstract virtual ID2D1GradientStopCollection CreateGradientStopCollection(D2D1_GRADIENT_STOP[] gradientStops, int gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode);
    public abstract virtual ID2D1LinearGradientBrush CreateLinearGradientBrush(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES& linearGradientBrushProperties, D2D1_BRUSH_PROPERTIES& brushProperties, ID2D1GradientStopCollection gradientStopCollection);
    public abstract virtual void CreateRadialGradientBrush();
    public abstract virtual void CreateCompatibleRenderTarget();
    public abstract virtual ID2D1Layer CreateLayer(IntPtr sizePtr);
    public abstract virtual void CreateMesh();
    public abstract virtual void DrawLine(D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    public abstract virtual void DrawRectangle();
    public abstract virtual void FillRectangle(D2D_RECT_F& rect, ID2D1Brush brush);
    public abstract virtual void DrawRoundedRectangle();
    public abstract virtual void FillRoundedRectangle();
    public abstract virtual void DrawEllipse(D2D1_ELLIPSE& ellipse, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    public abstract virtual void FillEllipse();
    public abstract virtual void DrawGeometry(ID2D1Geometry geometry, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    public abstract virtual void FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush);
    public abstract virtual void FillMesh();
    public abstract virtual void FillOpacityMask();
    public abstract virtual void DrawBitmap(ID2D1Bitmap bitmap, D2D_RECT_F& destinationRectangle, float opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D_RECT_F& sourceRectangle);
    public abstract virtual void DrawTextW();
    public abstract virtual void DrawTextLayout();
    public abstract virtual void DrawGlyphRun();
    public abstract virtual void SetTransform(D2D_MATRIX_3X2_F& transform);
    public abstract virtual void GetTransform(D2D_MATRIX_3X2_F& transform);
    public abstract virtual void SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);
    public abstract virtual void GetAntialiasMode();
    public abstract virtual void SetTextAntialiasMode();
    public abstract virtual void GetTextAntialiasMode();
    public abstract virtual void SetTextRenderingParams();
    public abstract virtual void GetTextRenderingParams();
    public abstract virtual void SetTags();
    public abstract virtual void GetTags();
    public abstract virtual void PushLayer(D2D1_LAYER_PARAMETERS_COMMON& layerParameters, ID2D1Layer layer);
    public abstract virtual void PopLayer();
    public abstract virtual void Flush(Int64& tag1, Int64& tag2);
    public abstract virtual void SaveDrawingState();
    public abstract virtual void RestoreDrawingState();
    public abstract virtual void PushAxisAlignedClip(D2D_RECT_F& clipRect, D2D1_ANTIALIAS_MODE antialiasMode);
    public abstract virtual void PopAxisAlignedClip();
    public abstract virtual void Clear(D2D1_COLOR_F& clearColor);
    public abstract virtual void BeginDraw();
    public abstract virtual void EndDraw(Int64& tag1, Int64& tag2);
    public abstract virtual void GetPixelFormat();
    public abstract virtual void SetDpi();
    public abstract virtual void GetDpi();
    public abstract virtual void GetSize();
    public abstract virtual void GetPixelSize();
    public abstract virtual void GetMaximumBitmapSize();
    public abstract virtual void IsSupported();
    public abstract virtual ID2D1Bitmap1 CreateBitmap(D2D_SIZE_U size, IntPtr sourceData, int pitch, D2D1_BITMAP_PROPERTIES1 bitmapProperties);
    public abstract virtual void CreateBitmapFromWicBitmap1();
    public abstract virtual void CreateColorContext();
    public abstract virtual void CreateColorContextFromFilename();
    public abstract virtual void CreateColorContextFromWicColorContext();
    public abstract virtual ID2D1Bitmap1 CreateBitmapFromDxgiSurface(IDXGISurface surface, D2D1_BITMAP_PROPERTIES1 bitmapProperties);
    public abstract virtual ID2D1Effect CreateEffect(Guid& effectId);
    public abstract virtual void CreateGradientStopCollection1();
    public abstract virtual ID2D1ImageBrush CreateImageBrush(ID2D1Image image, D2D1_IMAGE_BRUSH_PROPERTIES& imageBrushProperties, D2D1_BRUSH_PROPERTIES& brushProperties);
    public abstract virtual ID2D1BitmapBrush1 CreateBitmapBrush(ID2D1Bitmap bitmap, D2D1_BITMAP_BRUSH_PROPERTIES1& bitmapBrushProperties, D2D1_BRUSH_PROPERTIES& brushProperties);
    public abstract virtual ID2D1CommandList CreateCommandList();
    public abstract virtual void IsDxgiFormatSupported();
    public abstract virtual void IsBufferPrecisionSupported();
    public abstract virtual void GetImageLocalBounds();
    public abstract virtual void GetImageWorldBounds();
    public abstract virtual void GetGlyphRunWorldBounds();
    public abstract virtual void GetDevice();
    public abstract virtual void SetTarget(ID2D1Image image);
    public abstract virtual void GetTarget(ID2D1Image& image);
    public abstract virtual void SetRenderingControls();
    public abstract virtual void GetRenderingControls();
    public abstract virtual void SetPrimitiveBlend();
    public abstract virtual void GetPrimitiveBlend();
    public abstract virtual void SetUnitMode();
    public abstract virtual void GetUnitMode();
    public abstract virtual void DrawGlyphRun1();
    public abstract virtual void DrawImage(ID2D1Image image, D2D_POINT_2F& targetOffset, IntPtr imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);
    public abstract virtual void DrawGdiMetafile();
    public abstract virtual void DrawBitmap(ID2D1Bitmap bitmap, D2D_RECT_F& destinationRectangle, float opacity, D2D1_INTERPOLATION_MODE interpolationMode, IntPtr sourceRectangle, IntPtr perspectiveTransformRef);
    public abstract virtual void PushLayer(IntPtr layerParameters, ID2D1Layer layer);
    public abstract virtual void InvalidateEffectInputRectangle();
    public abstract virtual void GetEffectInvalidRectangleCount();
    public abstract virtual void GetEffectInvalidRectangles();
    public abstract virtual void GetEffectRequiredInputRectangles();
    public abstract virtual void FillOpacityMask1();
}
[GuidAttribute("28211a43-7d89-476f-8181-2d6159b220ad")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Effect {
    public abstract virtual void GetPropertyCount();
    public abstract virtual void GetPropertyName();
    public abstract virtual void GetPropertyNameLength();
    public abstract virtual void GetType();
    public abstract virtual void GetPropertyIndex();
    public abstract virtual void SetValueByName();
    public abstract virtual void SetValue(int index, D2D1_PROPERTY_TYPE type, IntPtr data, int dataSize);
    public abstract virtual void GetValueByName();
    public abstract virtual void GetValue();
    public abstract virtual void GetValueSize();
    public abstract virtual void GetSubProperties();
    public abstract virtual void SetInput(int index, ID2D1Image input, bool invalidate);
    public abstract virtual void SetInputCount();
    public abstract virtual void GetInput();
    public abstract virtual void GetInputCount();
    public abstract virtual void GetOutput(ID2D1Image& image);
}
[GuidAttribute("06152247-6f50-465a-9245-118bfd3b6007")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Factory {
    public abstract virtual void ReloadSystemMetrics();
    public abstract virtual void GetDesktopDpi();
    public abstract virtual ID2D1Geometry CreateRectangleGeometry(D2D_RECT_F& rectangle);
    public abstract virtual void CreateRoundedRectangleGeometry();
    public abstract virtual void CreateEllipseGeometry();
    public abstract virtual void CreateGeometryGroup();
    public abstract virtual ID2D1TransformedGeometry CreateTransformedGeometry(ID2D1Geometry sourceGeometry, D2D_MATRIX_3X2_F& transform);
    public abstract virtual ID2D1PathGeometry CreatePathGeometry();
    public abstract virtual ID2D1StrokeStyle CreateStrokeStyle(D2D1_STROKE_STYLE_PROPERTIES1& strokeStyleProperties, Single[] dashes, int dashesCount);
    public abstract virtual void CreateDrawingStateBlock();
    public abstract virtual void CreateWicBitmapRenderTarget();
    public abstract virtual void CreateHwndRenderTarget();
    public abstract virtual void CreateDxgiSurfaceRenderTarget();
    public abstract virtual ID2D1DCRenderTarget CreateDCRenderTarget(D2D1_RENDER_TARGET_PROPERTIES& renderTargetProperties);
}
[GuidAttribute("bb12d362-daee-4b9a-aa1d-14ba401cfa1f")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Factory1 {
    public abstract virtual void ReloadSystemMetrics();
    public abstract virtual void GetDesktopDpi();
    public abstract virtual void CreateRectangleGeometry();
    public abstract virtual void CreateRoundedRectangleGeometry();
    public abstract virtual void CreateEllipseGeometry();
    public abstract virtual void CreateGeometryGroup();
    public abstract virtual ID2D1TransformedGeometry CreateTransformedGeometry(ID2D1Geometry sourceGeometry, D2D_MATRIX_3X2_F& transform);
    public abstract virtual ID2D1PathGeometry CreatePathGeometry();
    public abstract virtual ID2D1StrokeStyle CreateStrokeStyle(D2D1_STROKE_STYLE_PROPERTIES1& strokeStyleProperties, Single[] dashes, int dashesCount);
    public abstract virtual void CreateDrawingStateBlock();
    public abstract virtual void CreateWicBitmapRenderTarget();
    public abstract virtual void CreateHwndRenderTarget();
    public abstract virtual void CreateDxgiSurfaceRenderTarget();
    public abstract virtual ID2D1DCRenderTarget CreateDCRenderTarget(D2D1_RENDER_TARGET_PROPERTIES& renderTargetProperties);
    public abstract virtual ID2D1Device CreateDevice(IDXGIDevice dxgiDevice);
    public abstract virtual void CreateStrokeStyle1();
    public abstract virtual void CreatePathGeometry1();
    public abstract virtual void CreateDrawingStateBlock1();
    public abstract virtual void CreateGdiMetafile();
    public abstract virtual void RegisterEffectFromStream();
    public abstract virtual void RegisterEffectFromString();
    public abstract virtual void UnregisterEffect();
    public abstract virtual void GetRegisteredEffects();
    public abstract virtual void GetEffectProperties();
}
[GuidAttribute("2cd906a1-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Geometry {
    public abstract virtual void GetFactory();
    public abstract virtual void GetBounds(D2D_MATRIX_3X2_F& worldTransform, D2D_RECT_F& bounds);
    public abstract virtual void GetWidenedBounds(float lineWidth, ID2D1StrokeStyle strokeStyke, D2D_MATRIX_3X2_F& worldTransform, float flatteningTolerance, D2D_RECT_F& bounds);
    public abstract virtual void StrokeContainsPoint();
    public abstract virtual void FillContainsPoint();
    public abstract virtual void CompareWithGeometry();
    public abstract virtual void Simplify();
    public abstract virtual void Tessellate();
    public abstract virtual void CombineWithGeometry(ID2D1Geometry inputGeometry, D2D1_COMBINE_MODE combineMode, D2D_MATRIX_3X2_F& inputGeometryTransform, float flatteningTolerance, ID2D1SimplifiedGeometrySink geometrySink);
    public abstract virtual void Outline();
    public abstract virtual void ComputeArea();
    public abstract virtual void ComputeLength();
    public abstract virtual void ComputePointAtLength();
    public abstract virtual void Widen(float strokeWidth, ID2D1StrokeStyle strokeStyle, D2D_MATRIX_3X2_F& transform, float flatteningTolerance, ID2D1SimplifiedGeometrySink geometrySink);
}
[GuidAttribute("2cd9069f-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1GeometrySink {
    public abstract virtual void SetFillMode(D2D1_FILL_MODE fillMode);
    public abstract virtual void SetSegmentFlags();
    public abstract virtual void BeginFigure(D2D_POINT_2F startPoint, D2D1_FIGURE_BEGIN figureBegin);
    public abstract virtual void AddLines();
    public abstract virtual void AddBeziers();
    public abstract virtual void EndFigure(D2D1_FIGURE_END figureEnd);
    public abstract virtual void Close();
    public abstract virtual void AddLine(D2D_POINT_2F point);
    public abstract virtual void AddBezier(D2D1_BEZIER_SEGMENT& bezier);
    public abstract virtual void AddQuadraticBezier();
    public abstract virtual void AddQuadraticBeziers();
    public abstract virtual void AddArc();
}
[GuidAttribute("2cd906a7-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1GradientStopCollection {
}
[GuidAttribute("65019f75-8da2-497c-b32c-dfa34e48ede6")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Image {
}
[GuidAttribute("fe9e984d-3f95-407c-b5db-cb94d4e8f87c")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1ImageBrush {
}
[GuidAttribute("2cd9069b-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Layer {
}
[GuidAttribute("2cd906ab-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1LinearGradientBrush {
}
[GuidAttribute("2cd906a5-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1PathGeometry {
    public abstract virtual void GetFactory();
    public abstract virtual void GetBounds();
    public abstract virtual void GetWidenedBounds();
    public abstract virtual void StrokeContainsPoint();
    public abstract virtual void FillContainsPoint();
    public abstract virtual void CompareWithGeometry();
    public abstract virtual void Simplify();
    public abstract virtual void Tessellate();
    public abstract virtual void CombineWithGeometry(ID2D1Geometry inputGeometry, D2D1_COMBINE_MODE combineMode, D2D_MATRIX_3X2_F& inputGeometryTransform, float flatteningTolerance, ID2D1SimplifiedGeometrySink geometrySink);
    public abstract virtual void Outline();
    public abstract virtual void ComputeArea();
    public abstract virtual void ComputeLength();
    public abstract virtual void ComputePointAtLength();
    public abstract virtual void Widen();
    public abstract virtual ID2D1GeometrySink Open();
    public abstract virtual void Stream();
    public abstract virtual void GetSegmentCount();
    public abstract virtual void GetFigureCount();
}
[GuidAttribute("2c1d867d-c290-41c8-ae7e-34a98702e9a5")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1PrintControl {
    public abstract virtual void AddPage(ID2D1CommandList commandList, D2D_SIZE_F pageSize, IStream pagePrintTicketStream, Int64& tag1, Int64& tag2);
    public abstract virtual void Close();
}
[GuidAttribute("483473d7-cd46-4f9d-9d3a-3112aa80159d")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Properties {
    public abstract virtual void GetPropertyCount();
    public abstract virtual void GetPropertyName();
    public abstract virtual void GetPropertyNameLength();
    public abstract virtual void GetType();
    public abstract virtual void GetPropertyIndex();
    public abstract virtual void SetValueByName();
    public abstract virtual void SetValue(int index, D2D1_PROPERTY_TYPE type, IntPtr data, int dataSize);
    public abstract virtual void GetValueByName();
    public abstract virtual void GetValue();
    public abstract virtual void GetValueSize();
    public abstract virtual void GetSubProperties();
}
[GuidAttribute("2cd90694-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1RenderTarget {
    public abstract virtual void GetFactory();
    public abstract virtual ID2D1Bitmap CreateBitmap(D2D_SIZE_U size, IntPtr srcData, int pitch, D2D1_BITMAP_PROPERTIES& bitmapProperties);
    public abstract virtual ID2D1Bitmap CreateBitmapFromWicBitmap(IntPtr wicBitmapSource, IntPtr zero);
    public abstract virtual void CreateSharedBitmap();
    public abstract virtual void CreateBitmapBrush();
    public abstract virtual ID2D1SolidColorBrush CreateSolidColorBrush(D2D1_COLOR_F& color, D2D1_BRUSH_PROPERTIES& brushProperties);
    public abstract virtual ID2D1GradientStopCollection CreateGradientStopCollection(D2D1_GRADIENT_STOP[] gradientStops, int gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode);
    public abstract virtual ID2D1LinearGradientBrush CreateLinearGradientBrush(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES& linearGradientBrushProperties, D2D1_BRUSH_PROPERTIES& brushProperties, ID2D1GradientStopCollection gradientStopCollection);
    public abstract virtual void CreateRadialGradientBrush();
    public abstract virtual void CreateCompatibleRenderTarget();
    public abstract virtual ID2D1Layer CreateLayer(IntPtr sizePtr);
    public abstract virtual void CreateMesh();
    public abstract virtual void DrawLine(D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    public abstract virtual void DrawRectangle();
    public abstract virtual void FillRectangle(D2D_RECT_F& rect, ID2D1Brush brush);
    public abstract virtual void DrawRoundedRectangle();
    public abstract virtual void FillRoundedRectangle();
    public abstract virtual void DrawEllipse(D2D1_ELLIPSE& ellipse, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    public abstract virtual void FillEllipse();
    public abstract virtual void DrawGeometry(ID2D1Geometry geometry, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    public abstract virtual void FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush);
    public abstract virtual void FillMesh();
    public abstract virtual void FillOpacityMask();
    public abstract virtual void DrawBitmap(ID2D1Bitmap bitmap, D2D_RECT_F& destinationRectangle, float opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D_RECT_F& sourceRectangle);
    public abstract virtual void DrawTextW();
    public abstract virtual void DrawTextLayout();
    public abstract virtual void DrawGlyphRun();
    public abstract virtual void SetTransform(D2D_MATRIX_3X2_F& transform);
    public abstract virtual void GetTransform(D2D_MATRIX_3X2_F& transform);
    public abstract virtual void SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);
    public abstract virtual void GetAntialiasMode();
    public abstract virtual void SetTextAntialiasMode();
    public abstract virtual void GetTextAntialiasMode();
    public abstract virtual void SetTextRenderingParams();
    public abstract virtual void GetTextRenderingParams();
    public abstract virtual void SetTags();
    public abstract virtual void GetTags();
    public abstract virtual void PushLayer(IntPtr layerParameters, ID2D1Layer layer);
    public abstract virtual void PopLayer();
    public abstract virtual void Flush(Int64& tag1, Int64& tag2);
    public abstract virtual void SaveDrawingState();
    public abstract virtual void RestoreDrawingState();
    public abstract virtual void PushAxisAlignedClip(D2D_RECT_F& clipRect, D2D1_ANTIALIAS_MODE antialiasMode);
    public abstract virtual void PopAxisAlignedClip();
    public abstract virtual void Clear(D2D1_COLOR_F& clearColor);
    public abstract virtual void BeginDraw();
    public abstract virtual void EndDraw(Int64& tag1, Int64& tag2);
    public abstract virtual void GetPixelFormat();
    public abstract virtual void SetDpi();
    public abstract virtual void GetDpi();
    public abstract virtual void GetSize();
    public abstract virtual void GetPixelSize();
    public abstract virtual void GetMaximumBitmapSize();
    public abstract virtual void IsSupported();
}
[GuidAttribute("2cd90691-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1Resource {
    public abstract virtual void GetFactory();
}
[GuidAttribute("2cd9069e-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1SimplifiedGeometrySink {
    public abstract virtual void SetFillMode(D2D1_FILL_MODE fillMode);
    public abstract virtual void SetSegmentFlags(D2D1_PATH_SEGMENT vertexFlags);
    public abstract virtual void BeginFigure(D2D_POINT_2F startPoint, D2D1_FIGURE_BEGIN figureBegin);
    public abstract virtual void AddLines(D2D_POINT_2F[] points, int pointCount);
    public abstract virtual void AddBeziers(D2D1_BEZIER_SEGMENT[] segments, int segmentCount);
    public abstract virtual void EndFigure(D2D1_FIGURE_END figureEnd);
    public abstract virtual int Close();
}
[GuidAttribute("2cd906a9-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1SolidColorBrush {
}
[GuidAttribute("2cd9069d-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1StrokeStyle {
}
[GuidAttribute("2cd906bb-12e2-11dc-9fed-001143a055f9")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct2D.ID2D1TransformedGeometry {
    public abstract virtual void GetFactory();
    public abstract virtual void GetBounds();
    public abstract virtual void GetWidenedBounds();
    public abstract virtual void StrokeContainsPoint();
    public abstract virtual void FillContainsPoint();
    public abstract virtual void CompareWithGeometry();
    public abstract virtual void Simplify();
    public abstract virtual void Tessellate();
    public abstract virtual void CombineWithGeometry(ID2D1Geometry inputGeometry, D2D1_COMBINE_MODE combineMode, D2D_MATRIX_3X2_F& inputGeometryTransform, float flatteningTolerance, IntPtr geometrySink);
    public abstract virtual void Outline();
    public abstract virtual void ComputeArea();
    public abstract virtual void ComputeLength();
    public abstract virtual void ComputePointAtLength();
    public abstract virtual void Widen();
    public abstract virtual void GetSourceGeometry();
    public abstract virtual void GetTransform();
}
[GuidAttribute("db6f6ddb-ac77-4e88-8253-819df9bbf140")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct3D.ID3D11Device {
    public abstract virtual void CreateBuffer();
    public abstract virtual void CreateTexture1D();
    public abstract virtual ID3D11Texture2D CreateTexture2D(D3D11_TEXTURE2D_DESC& descRef, IntPtr initialDataRef);
    public abstract virtual void CreateTexture3D();
    public abstract virtual void CreateShaderResourceView();
    public abstract virtual void CreateUnorderedAccessView();
    public abstract virtual void CreateRenderTargetView();
    public abstract virtual void CreateDepthStencilView();
    public abstract virtual void CreateInputLayout();
    public abstract virtual void CreateVertexShader();
    public abstract virtual void CreateGeometryShader();
    public abstract virtual void CreateGeometryShaderWithStreamOutput();
    public abstract virtual void CreatePixelShader();
    public abstract virtual void CreateHullShader();
    public abstract virtual void CreateDomainShader();
    public abstract virtual void CreateComputeShader();
    public abstract virtual void CreateClassLinkage();
    public abstract virtual void CreateBlendState();
    public abstract virtual void CreateDepthStencilState();
    public abstract virtual void CreateRasterizerState();
    public abstract virtual void CreateSamplerState();
    public abstract virtual void CreateQuery();
    public abstract virtual void CreatePredicate();
    public abstract virtual void CreateCounter();
    public abstract virtual void CreateDeferredContext();
    public abstract virtual void OpenSharedResource();
    public abstract virtual void CheckFormatSupport();
    public abstract virtual void CheckMultisampleQualityLevels();
    public abstract virtual void CheckCounterInfo();
    public abstract virtual void CheckCounter();
    public abstract virtual void CheckFeatureSupport();
    public abstract virtual void GetPrivateData();
    public abstract virtual void SetPrivateData();
    public abstract virtual void SetPrivateDataInterface();
    public abstract virtual void GetFeatureLevel();
    public abstract virtual void GetCreationFlags();
    public abstract virtual void GetDeviceRemovedReason();
    public abstract virtual void GetImmediateContext();
    public abstract virtual void SetExceptionMode();
    public abstract virtual void GetExceptionMode();
}
[GuidAttribute("1841e5c8-16b0-489b-bcc8-44cfb0d5deae")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct3D.ID3D11DeviceChild {
    public abstract virtual void GetDevice();
    public abstract virtual void GetPrivateData();
    public abstract virtual void SetPrivateData();
    public abstract virtual void SetPrivateDataInterface();
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct3D.ID3D11DeviceContext {
    public abstract virtual void GetDevice();
    public abstract virtual void GetPrivateData();
    public abstract virtual void SetPrivateData();
    public abstract virtual void SetPrivateDataInterface();
    public abstract virtual void VSSetConstantBuffers();
    public abstract virtual void PSSetShaderResources();
    public abstract virtual void PSSetShader();
    public abstract virtual void PSSetSamplers();
    public abstract virtual void VSSetShader();
    public abstract virtual void DrawIndexed();
    public abstract virtual void Draw();
    public abstract virtual D3D11_MAPPED_SUBRESOURCE Map(ID3D11Resource pResource, int subresource, D3D11_MAP mapType, D3D11_MAP_FLAG mapFlags);
    public abstract virtual void Unmap(ID3D11Resource pResource, int subresource);
    public abstract virtual void PSSetConstantBuffers();
    public abstract virtual void IASetInputLayout();
    public abstract virtual void IASetVertexBuffers();
    public abstract virtual void IASetIndexBuffer();
    public abstract virtual void DrawIndexedInstanced();
    public abstract virtual void DrawInstanced();
    public abstract virtual void GSSetConstantBuffers();
    public abstract virtual void GSSetShader();
    public abstract virtual void IASetPrimitiveTopology();
    public abstract virtual void VSSetShaderResources();
    public abstract virtual void VSSetSamplers();
    public abstract virtual void Begin();
    public abstract virtual void End();
    public abstract virtual void GetData();
    public abstract virtual void SetPredication();
    public abstract virtual void GSSetShaderResources();
    public abstract virtual void GSSetSamplers();
    public abstract virtual void OMSetRenderTargets();
    public abstract virtual void OMSetRenderTargetsAndUnorderedAccessViews();
    public abstract virtual void OMSetBlendState();
    public abstract virtual void OMSetDepthStencilState();
    public abstract virtual void SOSetTargets();
    public abstract virtual void DrawAuto();
    public abstract virtual void DrawIndexedInstancedIndirect();
    public abstract virtual void DrawInstancedIndirect();
    public abstract virtual void Dispatch();
    public abstract virtual void DispatchIndirect();
    public abstract virtual void RSSetState();
    public abstract virtual void RSSetViewports();
    public abstract virtual void RSSetScissorRects();
    public abstract virtual void CopySubresourceRegion();
    public abstract virtual void CopyResource(ID3D11Texture2D pDstResource, ID3D11Texture2D pSrcResource);
    public abstract virtual void UpdateSubresource();
    public abstract virtual void CopyStructureCount();
    public abstract virtual void ClearRenderTargetView();
    public abstract virtual void ClearUnorderedAccessViewUint();
    public abstract virtual void ClearUnorderedAccessViewFloat();
    public abstract virtual void ClearDepthStencilView();
    public abstract virtual void GenerateMips();
    public abstract virtual void SetResourceMinLOD();
    public abstract virtual void GetResourceMinLOD();
    public abstract virtual void ResolveSubresource();
    public abstract virtual void ExecuteCommandList();
    public abstract virtual void HSSetShaderResources();
    public abstract virtual void HSSetShader();
    public abstract virtual void HSSetSamplers();
    public abstract virtual void HSSetConstantBuffers();
    public abstract virtual void DSSetShaderResources();
    public abstract virtual void DSSetShader();
    public abstract virtual void DSSetSamplers();
    public abstract virtual void DSSetConstantBuffers();
    public abstract virtual void CSSetShaderResources();
    public abstract virtual void CSSetUnorderedAccessViews();
    public abstract virtual void CSSetShader();
    public abstract virtual void CSSetSamplers();
    public abstract virtual void CSSetConstantBuffers();
    public abstract virtual void VSGetConstantBuffers();
    public abstract virtual void PSGetShaderResources();
    public abstract virtual void PSGetShader();
    public abstract virtual void PSGetSamplers();
    public abstract virtual void VSGetShader();
    public abstract virtual void PSGetConstantBuffers();
    public abstract virtual void IAGetInputLayout();
    public abstract virtual void IAGetVertexBuffers();
    public abstract virtual void IAGetIndexBuffer();
    public abstract virtual void GSGetConstantBuffers();
    public abstract virtual void GSGetShader();
    public abstract virtual void IAGetPrimitiveTopology();
    public abstract virtual void VSGetShaderResources();
    public abstract virtual void VSGetSamplers();
    public abstract virtual void GetPredication();
    public abstract virtual void GSGetShaderResources();
    public abstract virtual void GSGetSamplers();
    public abstract virtual void OMGetRenderTargets();
    public abstract virtual void OMGetRenderTargetsAndUnorderedAccessViews();
    public abstract virtual void OMGetBlendState();
    public abstract virtual void OMGetDepthStencilState();
    public abstract virtual void SOGetTargets();
    public abstract virtual void RSGetState();
    public abstract virtual void RSGetViewports();
    public abstract virtual void RSGetScissorRects();
    public abstract virtual void HSGetShaderResources();
    public abstract virtual void HSGetShader();
    public abstract virtual void HSGetSamplers();
    public abstract virtual void HSGetConstantBuffers();
    public abstract virtual void DSGetShaderResources();
    public abstract virtual void DSGetShader();
    public abstract virtual void DSGetSamplers();
    public abstract virtual void DSGetConstantBuffers();
    public abstract virtual void CSGetShaderResources();
    public abstract virtual void CSGetUnorderedAccessViews();
    public abstract virtual void CSGetShader();
    public abstract virtual void CSGetSamplers();
    public abstract virtual void CSGetConstantBuffers();
    public abstract virtual void ClearState();
    public abstract virtual void Flush();
    public abstract virtual void GetType();
    public abstract virtual void GetContextFlags();
    public abstract virtual void FinishCommandList();
}
[GuidAttribute("dc8e63f3-d12b-4952-b47b-5e45026a862d")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct3D.ID3D11Resource {
}
[GuidAttribute("6f15aaf2-d208-4e89-9ab4-489535d34f9c")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.Direct3D.ID3D11Texture2D {
    public abstract virtual void GetDevice();
    public abstract virtual void GetPrivateData();
    public abstract virtual void SetPrivateData();
    public abstract virtual void SetPrivateDataInterface();
    public abstract virtual void GetType();
    public abstract virtual void SetEvictionPriority();
    public abstract virtual void GetEvictionPriority();
    public abstract virtual D3D11_TEXTURE2D_DESC GetDesc();
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFactory : ComObject`1<IDWriteFactory> {
    protected internal DWriteFactory(IDWriteFactory nativeObject);
    [SecuritySafeCriticalAttribute]
public DWriteFontCollection CreateCustomFontCollection(IDWriteFontCollectionLoader loader, IntPtr collectionKey);
    public DWriteFontFile CreateCustomFontFileReference(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, IDWriteFontFileLoader fontFileLoader);
    public void CreateCustomRenderingParams();
    public void CreateEllipsisTrimmingSign();
    public DWriteFontFace CreateFontFace(DWRITE_FONT_FACE_TYPE fontFaceType, int numberOfFiles, DWriteFontFile[] fontFiles, int faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags);
    public DWriteFontFace CreateFontFace(DWRITE_FONT_FACE_TYPE fontFaceType, DWriteFontFile fontFile);
    public void CreateFontFileReference(string filePath, IntPtr lastWriteTime, DWriteFontFile& fontFile);
    public void CreateGdiCompatibleTextLayout();
    public void CreateGlyphRunAnalysis();
    public void CreateMonitorRenderingParams();
    public void CreateNumberSubstitution();
    public void CreateRenderingParams();
    public DWriteTextAnalyzer CreateTextAnalyzer();
    public DWriteTextFormat CreateTextFormat(string fontFamilyName, DWriteFontCollection fontCollection, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STYLE style, DWRITE_FONT_STRETCH fontStretch, float fontSize, string localeName);
    public DWriteTextLayout CreateTextLayout(string str, DWriteTextFormat format, float maxWidth, float maxHeight);
    public void CreateTypography();
    public DWriteGdiInterop GetGdiInterop();
    public DWriteFontCollection GetSystemFontCollection(bool checkForUpdates);
    public void RegisterFontCollectionLoader(IDWriteFontCollectionLoader loader);
    public void RegisterFontFileLoader(IDWriteFontFileLoader fontFileLoader);
    public void UnregisterFontCollectionLoader(IDWriteFontCollectionLoader loader);
    public void UnregisterFontFileLoader(IDWriteFontFileLoader fontFileLoader);
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFont : ComObject`1<IDWriteFont> {
    internal DWriteFont(IDWriteFont nativeObject);
    public DWriteFontFace CreateFontFace();
    public void GetFaceNames();
    public DWriteFontFamily GetFontFamily();
    public void GetInformationalStrings();
    public void GetMetrics();
    public DWRITE_FONT_SIMULATIONS GetSimulations();
    public DWRITE_FONT_STRETCH GetStretch();
    public DWRITE_FONT_STYLE GetStyle();
    public DWRITE_FONT_WEIGHT GetWeight();
    public void HasCharacter();
    public void IsSymbolFont();
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFont1 : DWriteFont {
    private IDWriteFont1 nativeObject;
    internal DWriteFont1(IDWriteFont1 nativeObject);
    public DWRITE_FONT_METRICS1 GetMetrics1();
    public Byte[] GetPanose();
    public DWRITE_UNICODE_RANGE[] GetUnicodeRanges();
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFontCollection : ComObject`1<IDWriteFontCollection> {
    protected internal DWriteFontCollection(IDWriteFontCollection nativeObject);
    public bool FindFamilyName(string familyName, Int32& index);
    public DWriteFontFamily GetFontFamily(int index);
    public int GetFontFamilyCount();
    public void GetFontFromFontFace();
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFontFace : ComObject`1<IDWriteFontFace> {
    protected internal DWriteFontFace(IDWriteFontFace nativeObject);
    public DWRITE_GLYPH_METRICS[] GetDesignGlyphMetrics(Int16[] glyphIndices, bool isSideways);
    public DWriteFontFile[] GetFiles();
    public void GetGdiCompatibleGlyphMetrics();
    public void GetGdiCompatibleMetrics();
    public void GetGlyphCount();
    public void GetGlyphIndices(Int32[] codePoints, int codePointCount, IntPtr glyphIndices);
    public int GetIndex();
    public DWRITE_FONT_METRICS GetMetrics();
    public void GetRecommendedRenderingMode();
    public DWRITE_FONT_SIMULATIONS GetSimulations();
    public void IsSymbolFont();
    public void ReleaseFontTable();
    public void TryGetFontTable();
    public void GetNativeType();
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFontFamily : DWriteFontList {
    private IDWriteFontFamily nativeObject;
    internal DWriteFontFamily(IDWriteFontFamily nativeObject);
    public DWriteLocalizedStrings GetFamilyNames();
    public DWriteFont1 GetFirstMatchingFont(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style);
    public void GetMatchingFonts();
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFontFile : ComObject`1<IDWriteFontFile> {
    internal IDWriteFontFile FontFile { get; }
    internal DWriteFontFile(IDWriteFontFile nativeObject);
    internal IDWriteFontFile get_FontFile();
    public void Analyze(Boolean& isSupportedFontType, DWRITE_FONT_FILE_TYPE& fontFileType, DWRITE_FONT_FACE_TYPE& fontFaceType, Int32& numberOfFaces);
    public void GetLoader();
    public void GetReferenceKey();
    public Byte[] GetData();
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFontFileLoader : ComObject`1<IDWriteFontFileLoader> {
    internal DWriteFontFileLoader(IDWriteFontFileLoader nativeObject);
    public DWriteFontFileStream CreateStreamFromKey(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize);
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFontFileStream : ComObject`1<IDWriteFontFileStream> {
    internal DWriteFontFileStream(IDWriteFontFileStream nativeObject);
    [SecuritySafeCriticalAttribute]
public Byte[] ReadAllData();
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteFontList : ComObject`1<IDWriteFontList> {
    internal DWriteFontList(IDWriteFontList nativeObject);
    public void GetFont();
    public void GetFontCollection();
    public void GetFontCount();
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteGdiInterop : ComObject`1<IDWriteGdiInterop> {
    internal DWriteGdiInterop(IDWriteGdiInterop comObject);
    public DWriteFontFace CreateFontFaceFromHdc(IntPtr hdc);
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteLocalizedStrings : ComObject`1<IDWriteLocalizedStrings> {
    internal DWriteLocalizedStrings(IDWriteLocalizedStrings nativeObject);
    public void FindLocaleName(string localeName, Int32& index, Boolean& exisit);
    public string GetLocaleName(int index);
    public string GetString(int index);
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteTextAnalyzer : ComObject`1<IDWriteTextAnalyzer> {
    internal DWriteTextAnalyzer(IDWriteTextAnalyzer nativeObject);
    public void AnalyzeScript(IDWriteTextAnalysisSource analysisSource, int textPosition, int textLength, IDWriteTextAnalysisSink analysisSink);
    public void AnalyzeBidi(IDWriteTextAnalysisSource analysisSource, int textPosition, int textLength, IDWriteTextAnalysisSink analysisSink);
    public void AnalyzeNumberSubstitution(IDWriteTextAnalysisSource analysisSource, int textPosition, int textLength, IDWriteTextAnalysisSink analysisSink);
    public void AnalyzeLineBreakpoints(IDWriteTextAnalysisSource analysisSource, int textPosition, int textLength, IDWriteTextAnalysisSink analysisSink);
    public void GetGlyphs(string textString, IDWriteFontFace fontFace, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, IDWriteNumberSubstitution numberSubstitution, int maxGlyphCount, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, Int32& actualGlyphCount);
    public void GetGlyphs(string textString, IDWriteFontFace fontFace, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteShapingFeatures features, IDWriteNumberSubstitution numberSubstitution, int maxGlyphCount, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, Int32& actualGlyphCount);
    public void GetGlyphPlacements(string textString, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, IDWriteFontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
    public void GetGlyphPlacements(string textString, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, IDWriteFontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteShapingFeatures features, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
    public void GetGlyphs(IntPtr textString, int textLenght, IDWriteFontFace fontFace, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, IDWriteNumberSubstitution numberSubstitution, int maxGlyphCount, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, Int32& actualGlyphCount);
    public void GetGlyphs(IntPtr textString, int textLength, IDWriteFontFace fontFace, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteShapingFeatures features, IDWriteNumberSubstitution numberSubstitution, int maxGlyphCount, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, Int32& actualGlyphCount);
    public void GetGlyphPlacements(IntPtr textString, int textLength, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, IDWriteFontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
    public void GetGlyphPlacements(IntPtr textString, int textLength, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, IDWriteFontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, DWriteShapingFeatures features, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
    public void GetGdiCompatibleGlyphPlacements(string textString, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, IDWriteFontFace fontFace, float fontEmSize, float pixelsPerDip, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteTextFormat : ComObject`1<IDWriteTextFormat> {
    protected internal DWriteTextFormat(IDWriteTextFormat nativeObject);
}
public class DevExpress.DirectX.StandardInterop.DirectWrite.DWriteTextLayout : ComObject`1<IDWriteTextLayout> {
    protected internal DWriteTextLayout(IDWriteTextLayout nativeObject);
    public void Draw(IDWriteTextRenderer textRenderer, float originX, float originY);
    public float GetWidth(int textLength);
}
[GuidAttribute("b859ee5a-d838-4b5b-a2e8-1adc7d93db48")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFactory {
    public abstract virtual void GetSystemFontCollection(IDWriteFontCollection& collection, bool checkForUpdates);
    public abstract virtual IDWriteFontCollection CreateCustomFontCollection(IDWriteFontCollectionLoader loader, IntPtr collectionKey, int collectionKeySize);
    public abstract virtual void RegisterFontCollectionLoader(IDWriteFontCollectionLoader loader);
    public abstract virtual void UnregisterFontCollectionLoader(IDWriteFontCollectionLoader loader);
    public abstract virtual void CreateFontFileReference(string filePath, IntPtr lastWriteTime, IDWriteFontFile& fontFile);
    public abstract virtual IDWriteFontFile CreateCustomFontFileReference(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, IDWriteFontFileLoader fontFileLoader);
    public abstract virtual IDWriteFontFace CreateFontFace(DWRITE_FONT_FACE_TYPE fontFaceType, int numberOfFiles, IDWriteFontFile[] fontFiles, int faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags);
    public abstract virtual void CreateRenderingParams();
    public abstract virtual void CreateMonitorRenderingParams();
    public abstract virtual void CreateCustomRenderingParams();
    public abstract virtual void RegisterFontFileLoader(IDWriteFontFileLoader fontFileLoader);
    public abstract virtual void UnregisterFontFileLoader(IDWriteFontFileLoader fontFileLoader);
    public abstract virtual IDWriteTextFormat CreateTextFormat(string fontFamilyName, IDWriteFontCollection fontCollection, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STYLE style, DWRITE_FONT_STRETCH fontStretch, float fontSize, string localeName);
    public abstract virtual void CreateTypography();
    public abstract virtual IDWriteGdiInterop GetGdiInterop();
    public abstract virtual IDWriteTextLayout CreateTextLayout(string str, int stringLength, IDWriteTextFormat textFormat, float maxWidth, float maxHeight);
    public abstract virtual void CreateGdiCompatibleTextLayout();
    public abstract virtual void CreateEllipsisTrimmingSign();
    public abstract virtual IDWriteTextAnalyzer CreateTextAnalyzer();
    public abstract virtual void CreateNumberSubstitution();
    public abstract virtual void CreateGlyphRunAnalysis();
}
[GuidAttribute("acd16696-8c14-4f5d-877e-fe3fc1d32737")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFont {
    public abstract virtual IDWriteFontFamily GetFontFamily();
    public abstract virtual DWRITE_FONT_WEIGHT GetWeight();
    public abstract virtual DWRITE_FONT_STRETCH GetStretch();
    public abstract virtual DWRITE_FONT_STYLE GetStyle();
    public abstract virtual bool IsSymbolFont();
    public abstract virtual void GetFaceNames();
    public abstract virtual void GetInformationalStrings();
    public abstract virtual DWRITE_FONT_SIMULATIONS GetSimulations();
    public abstract virtual void GetMetrics();
    public abstract virtual void HasCharacter();
    public abstract virtual IDWriteFontFace CreateFontFace();
}
[GuidAttribute("acd16696-8c14-4f5d-877e-fe3fc1d32738")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFont1 {
    public abstract virtual void GetFontFamily();
    public abstract virtual void GetWeight();
    public abstract virtual void GetStretch();
    public abstract virtual void GetStyle();
    public abstract virtual void IsSymbolFont();
    public abstract virtual void GetFaceNames();
    public abstract virtual void GetInformationalStrings();
    public abstract virtual DWRITE_FONT_SIMULATIONS GetSimulations();
    public abstract virtual void GetMetrics();
    public abstract virtual void HasCharacter();
    public abstract virtual IDWriteFontFace CreateFontFace();
    public abstract virtual void GetMetrics(DWRITE_FONT_METRICS1& fontMetrics);
    public abstract virtual void GetPanose(Byte[] panose);
    public abstract virtual int GetUnicodeRanges(int maxRangeCount, DWRITE_UNICODE_RANGE[] unicodeRanges, Int32& actualRangeCount);
    public abstract virtual bool IsMonospacedFont();
}
[GuidAttribute("a84cee02-3eea-4eee-a827-87c1a02a0fcc")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFontCollection {
    public abstract virtual int GetFontFamilyCount();
    public abstract virtual IDWriteFontFamily GetFontFamily(int index);
    public abstract virtual bool FindFamilyName(string familyName, Int32& index);
    public abstract virtual void GetFontFromFontFace();
}
[GuidAttribute("cca920e4-52f0-492b-bfa8-29c72ee0a468")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFontCollectionLoader {
    public abstract virtual int CreateEnumeratorFromKey(IDWriteFactory factory, IntPtr collectionKey, int collectionKeySize, IDWriteFontFileEnumerator& enumerator);
}
[GuidAttribute("5f49804d-7024-4d43-bfa9-d25984f53849")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFontFace {
    public abstract virtual void GetType();
    public abstract virtual void GetFiles(Int32& numberOfFiles, IDWriteFontFile[] fontFiles);
    public abstract virtual int GetIndex();
    public abstract virtual DWRITE_FONT_SIMULATIONS GetSimulations();
    public abstract virtual void IsSymbolFont();
    public abstract virtual DWRITE_FONT_METRICS GetMetrics();
    public abstract virtual void GetGlyphCount();
    public abstract virtual void GetDesignGlyphMetrics(Int16[] glyphIndices, int glyphCount, DWRITE_GLYPH_METRICS[] glyphMetrics, bool isSideways);
    public abstract virtual void GetGlyphIndices(Int32[] codePoints, int codePointCount, IntPtr glyphIndices);
    public abstract virtual void TryGetFontTable();
    public abstract virtual void ReleaseFontTable();
    public abstract virtual void GetGlyphRunOutline(float emSize, IntPtr glyphIndices, IntPtr glyphAdvances, IntPtr glyphOffsets, int glyphCount, bool isSideways, bool isRightToLeft, ID2D1SimplifiedGeometrySink geometrySink);
    public abstract virtual void GetRecommendedRenderingMode();
    public abstract virtual void GetGdiCompatibleMetrics();
    public abstract virtual void GetGdiCompatibleGlyphMetrics();
}
[GuidAttribute("da20d8ef-812a-4c43-9802-62ec4abd7add")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFontFamily {
    public abstract virtual void GetFontCollection();
    public abstract virtual void GetFontCount();
    public abstract virtual void GetFont();
    public abstract virtual IDWriteLocalizedStrings GetFamilyNames();
    public abstract virtual IDWriteFont1 GetFirstMatchingFont(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style);
    public abstract virtual void GetMatchingFonts();
}
[GuidAttribute("739d886a-cef5-47dc-8769-1a8b41bebbb0")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFontFile {
    public abstract virtual void GetReferenceKey(IntPtr& fontFileReferenceKey, Int32& fontFileReferenceKeySize);
    public abstract virtual IDWriteFontFileLoader GetLoader();
    public abstract virtual void Analyze(Boolean& isSupportedFontType, DWRITE_FONT_FILE_TYPE& fontFileType, DWRITE_FONT_FACE_TYPE& fontFaceType, Int32& numberOfFaces);
}
[GuidAttribute("72755049-5ff7-435d-8348-4be97cfa6c7c")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFontFileEnumerator {
    public abstract virtual int MoveNext(Boolean& hasCurrentFile);
    public abstract virtual int GetCurrentFontFile(IDWriteFontFile& fontFile);
}
[GuidAttribute("727cad4e-d6af-4c9e-8a08-d695b11caa49")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFontFileLoader {
    public abstract virtual int CreateStreamFromKey(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, IDWriteFontFileStream& fontFileStream);
}
[GuidAttribute("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFontFileStream {
    public abstract virtual int ReadFileFragment(IntPtr& fragmentStart, long fileOffset, long fragmentSize, IntPtr& fragmentContext);
    public abstract virtual int ReleaseFileFragment(IntPtr fragmentContext);
    public abstract virtual int GetFileSize(Int64& fileSize);
    public abstract virtual int GetLastWriteTime(Int64& lastWriteTime);
}
[GuidAttribute("1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteFontList {
    public abstract virtual void GetFontCollection();
    public abstract virtual void GetFontCount();
    public abstract virtual void GetFont();
}
[GuidAttribute("1edd9491-9853-4299-898f-6432983b6f3a")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteGdiInterop {
    public abstract virtual void CreateFontFromLOGFONT();
    public abstract virtual void ConvertFontToLOGFONT();
    public abstract virtual void ConvertFontFaceToLOGFONT();
    public abstract virtual void CreateFontFaceFromHdc(IntPtr hdc, IDWriteFontFace& fontFace);
    public abstract virtual void CreateBitmapRenderTarget();
}
[GuidAttribute("8339FDE3-106F-47ab-8373-1C6295EB10B3")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteInlineObject {
    public abstract virtual void Draw();
    public abstract virtual void GetMetrics();
    public abstract virtual void GetOverhangMetrics();
    public abstract virtual void GetBreakConditions();
}
[GuidAttribute("08256209-099a-4b34-b86d-c22b110e7771")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteLocalizedStrings {
    public abstract virtual int GetCount();
    public abstract virtual void FindLocaleName(string localeName, Int32& index, Boolean& exisit);
    public abstract virtual void GetLocaleNameLength(int index, Int32& length);
    public abstract virtual void GetLocaleName(int index, string str, int length);
    public abstract virtual void GetStringLength(int index, Int32& length);
    public abstract virtual void GetString(int index, string str, int length);
}
[GuidAttribute("14885cc9-bab0-4f90-b6ed-5c366a2cd03d")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteNumberSubstitution {
}
[GuidAttribute("eaf3a2da-ecf4-4d24-b644-b34f6842024b")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWritePixelSnapping {
    public abstract virtual int IsPixelSnappingDisabled(IntPtr clientDrawingContext, Boolean& isDisabled);
    public abstract virtual int GetCurrentTransform(IntPtr clientDrawingContext, DWRITE_MATRIX& transform);
    public abstract virtual int GetPixelsPerDip(IntPtr clientDrawingContext, Single& pixelsPerDip);
}
[GuidAttribute("5810cd44-0ca0-4701-b3fa-bec5182ae4f6")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteTextAnalysisSink {
    public abstract virtual void SetScriptAnalysis(int textPosition, int textLength, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis);
    public abstract virtual void SetLineBreakpoints(int textPosition, int textLength, DWRITE_LINE_BREAKPOINT[] lineBreakpoints);
    public abstract virtual void SetBidiLevel(int textPosition, int textLength, byte explicitLevel, byte resolvedLevel);
    public abstract virtual void SetNumberSubstitution(int textPosition, int textLength, IDWriteNumberSubstitution numberSubstitution);
}
[GuidAttribute("688e1a58-5094-47c8-adc8-fbcea60ae92b")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteTextAnalysisSource {
    public abstract virtual void GetTextAtPosition(int textPosition, String& textString, Int32& textLength);
    public abstract virtual void GetTextBeforePosition(int textPosition, String& textString, Int32& textLength);
    public abstract virtual DWRITE_READING_DIRECTION GetParagraphReadingDirection();
    public abstract virtual void GetLocaleName(int textPosition, Int32& textLength, String& localeName);
    public abstract virtual void GetNumberSubstitution(int textPosition, Int32& textLength, IDWriteNumberSubstitution& numberSubstitution);
}
[GuidAttribute("b7e6163e-7f46-43b4-84b3-e4e6249c365d")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteTextAnalyzer {
    public abstract virtual void AnalyzeScript(IDWriteTextAnalysisSource analysisSource, int textPosition, int textLength, IDWriteTextAnalysisSink analysisSink);
    public abstract virtual void AnalyzeBidi(IDWriteTextAnalysisSource analysisSource, int textPosition, int textLength, IDWriteTextAnalysisSink analysisSink);
    public abstract virtual void AnalyzeNumberSubstitution(IDWriteTextAnalysisSource analysisSource, int textPosition, int textLength, IDWriteTextAnalysisSink analysisSink);
    public abstract virtual void AnalyzeLineBreakpoints(IDWriteTextAnalysisSource analysisSource, int textPosition, int textLength, IDWriteTextAnalysisSink analysisSink);
    public abstract virtual void GetGlyphs(IntPtr textString, int textLength, IDWriteFontFace fontFace, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, IDWriteNumberSubstitution numberSubstitution, IntPtr[] features, Int32[] featureRangeLengths, int featureRanges, int maxGlyphCount, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, Int32& actualGlyphCount);
    public abstract virtual void GetGlyphPlacements(IntPtr textString, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, int textLength, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, IDWriteFontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, IntPtr[] features, Int32[] featureRangeLengths, int featureRanges, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
    public abstract virtual void GetGdiCompatibleGlyphPlacements(string textString, Int16[] clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES[] textProps, int textLength, Int16[] glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES[] glyphProps, int glyphCount, IDWriteFontFace fontFace, float fontEmSize, float pixelsPerDip, IntPtr transform, bool useGdiNatural, bool isSideways, bool isRightToLeft, DWRITE_SCRIPT_ANALYSIS& scriptAnalysis, string localeName, IntPtr features, Int32[] featureRangeLengths, int featureRanges, Single[] glyphAdvances, DWRITE_GLYPH_OFFSET[] glyphOffsets);
}
[GuidAttribute("9c906818-31d7-4fd3-a151-7c5e225db55a")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteTextFormat {
    public abstract virtual void SetTextAlignment(DWRITE_TEXT_ALIGNMENT textAlignment);
    public abstract virtual void SetParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment);
    public abstract virtual void SetWordWrapping(DWRITE_WORD_WRAPPING wordWrapping);
    public abstract virtual void SetReadingDirection(DWRITE_READING_DIRECTION readingDirection);
    public abstract virtual void SetFlowDirection(DWRITE_FLOW_DIRECTION flowDirection);
    public abstract virtual void SetIncrementalTabStop(float incrementalTabStop);
    public abstract virtual IDWriteInlineObject SetTrimming(DWRITE_TRIMMING& trimmingOptions);
    public abstract virtual void SetLineSpacing(DWRITE_LINE_SPACING_METHOD lineSpacingMethod, float lineSpacing, float baseline);
    public abstract virtual DWRITE_TEXT_ALIGNMENT GetTextAlignment();
    public abstract virtual DWRITE_PARAGRAPH_ALIGNMENT GetParagraphAlignment();
    public abstract virtual DWRITE_WORD_WRAPPING GetWordWrapping();
    public abstract virtual DWRITE_READING_DIRECTION GetReadingDirection();
    public abstract virtual DWRITE_FLOW_DIRECTION GetFlowDirection();
    public abstract virtual float GetIncrementalTabStop();
    public abstract virtual void GetTrimming(DWRITE_TRIMMING& trimmingOptions, IDWriteInlineObject& trimmingSign);
    public abstract virtual void GetLineSpacing(DWRITE_LINE_SPACING_METHOD& lineSpacingMethod, Single& lineSpacing, Single& baseline);
    public abstract virtual void GetFontCollection(IDWriteFontCollection& fontCollection);
    public abstract virtual int GetFontFamilyNameLength();
    public abstract virtual void GetFontFamilyName(String& fontFamilyName, int nameSize);
    public abstract virtual DWRITE_FONT_WEIGHT GetFontWeight();
    public abstract virtual DWRITE_FONT_STYLE GetFontStyle();
    public abstract virtual DWRITE_FONT_STRETCH GetFontStretch();
    public abstract virtual float GetFontSize();
    public abstract virtual int GetLocaleNameLength();
    public abstract virtual void GetLocaleName(String& localeName, int nameSize);
}
[GuidAttribute("53737037-6d14-410b-9bfe-0b182bb70961")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteTextLayout {
    public abstract virtual void SetTextAlignment(DWRITE_TEXT_ALIGNMENT textAlignment);
    public abstract virtual void SetParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment);
    public abstract virtual void SetWordWrapping(DWRITE_WORD_WRAPPING wordWrapping);
    public abstract virtual void SetReadingDirection(DWRITE_READING_DIRECTION readingDirection);
    public abstract virtual void SetFlowDirection(DWRITE_FLOW_DIRECTION flowDirection);
    public abstract virtual void SetIncrementalTabStop(float incrementalTabStop);
    public abstract virtual IDWriteInlineObject SetTrimming(DWRITE_TRIMMING& trimmingOptions);
    public abstract virtual void SetLineSpacing(DWRITE_LINE_SPACING_METHOD lineSpacingMethod, float lineSpacing, float baseline);
    public abstract virtual DWRITE_TEXT_ALIGNMENT GetTextAlignment();
    public abstract virtual DWRITE_PARAGRAPH_ALIGNMENT GetParagraphAlignment();
    public abstract virtual DWRITE_WORD_WRAPPING GetWordWrapping();
    public abstract virtual DWRITE_READING_DIRECTION GetReadingDirection();
    public abstract virtual DWRITE_FLOW_DIRECTION GetFlowDirection();
    public abstract virtual float GetIncrementalTabStop();
    public abstract virtual void GetTrimming(DWRITE_TRIMMING& trimmingOptions, IDWriteInlineObject& trimmingSign);
    public abstract virtual void GetLineSpacing(DWRITE_LINE_SPACING_METHOD& lineSpacingMethod, Single& lineSpacing, Single& baseline);
    public abstract virtual void GetFontCollection(IDWriteFontCollection& fontCollection);
    public abstract virtual int GetFontFamilyNameLength();
    public abstract virtual void GetFontFamilyName(String& fontFamilyName, int nameSize);
    public abstract virtual DWRITE_FONT_WEIGHT GetFontWeight();
    public abstract virtual DWRITE_FONT_STYLE GetFontStyle();
    public abstract virtual DWRITE_FONT_STRETCH GetFontStretch();
    public abstract virtual float GetFontSize();
    public abstract virtual int GetLocaleNameLength();
    public abstract virtual void GetLocaleName(String& localeName, int nameSize);
    public abstract virtual void SetMaxWidth(float maxWidth);
    public abstract virtual void SetMaxHeight(float maxHeight);
    public abstract virtual void SetFontCollection(IDWriteFontCollection fontCollection, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetFontFamilyName(string fontFamilyName, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetFontWeight(DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetFontStyle(DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetFontStretch(DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetFontSize(float fontSize, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetUnderline(bool hasUnderline, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetStrikethrough(bool hasStrikethrough, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetDrawingEffect(IntPtr drawingEffect, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetInlineObject(IDWriteInlineObject inlineObject, DWRITE_TEXT_RANGE textRange);
    public abstract virtual void SetTypography();
    public abstract virtual void SetLocaleName(string localeName, DWRITE_TEXT_RANGE textRange);
    public abstract virtual float GetMaxWidth();
    public abstract virtual float GetMaxHeight();
    public abstract virtual void GetFontCollection(int currentPosition, IDWriteFontCollection& fontCollection, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetFontFamilyNameLength(int currentPosition, Int32& nameLength, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetFontFamilyName(int currentPosition, String& fontFamilyName, int nameSize, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetFontWeight(int currentPosition, DWRITE_FONT_WEIGHT& fontWeight, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetFontStyle(int currentPosition, DWRITE_FONT_STYLE& fontStyle, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetFontStretch(int currentPosition, DWRITE_FONT_STRETCH& fontStretch, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetFontSize(int currentPosition, Single& fontSize, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetUnderline(int currentPosition, Boolean& hasUnderline, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetStrikethrough(int currentPosition, Boolean& hasStrikethrough, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetDrawingEffect(int currentPosition, IntPtr& drawingEffect, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetInlineObject(int currentPosition, IDWriteInlineObject& inlineObject, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetTypography();
    public abstract virtual void GetLocaleNameLength(int currentPosition, Int32& nameLength, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void GetLocaleName(int currentPosition, String& localeName, int nameSize, DWRITE_TEXT_RANGE& textRange);
    public abstract virtual void Draw(IntPtr clientDrawingContext, IDWriteTextRenderer renderer, float originX, float originY);
    public abstract virtual void GetLineMetrics();
    public abstract virtual void GetMetrics();
    public abstract virtual void GetOverhangMetrics();
    public abstract virtual int GetClusterMetrics(DWRITE_CLUSTER_METRICS[] metrics, int metricsCount, Int32& actualClusterCount);
    public abstract virtual void DetermineMinWidth(Single& minWidth);
    public abstract virtual void HitTestPoint();
    public abstract virtual void HitTestTextPosition();
    public abstract virtual void HitTestTextRange();
}
[GuidAttribute("ef8a8135-5cc6-45fe-8825-c5a0724eb819")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DirectWrite.IDWriteTextRenderer {
    public abstract virtual int IsPixelSnappingDisabled(IntPtr clientDrawingContext, Boolean& isDisabled);
    public abstract virtual int GetCurrentTransform(IntPtr clientDrawingContext, DWRITE_MATRIX& transform);
    public abstract virtual int GetPixelsPerDip(IntPtr clientDrawingContext, Single& pixelsPerDip);
    public abstract virtual int DrawGlyphRun(IntPtr clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, DWRITE_GLYPH_RUN_COMMON& glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION& glyphRunDescription, IntPtr clientDrawingEffect);
    public abstract virtual int DrawUnderline();
    public abstract virtual int DrawStrikethrough();
    public abstract virtual int DrawInlineObject(IntPtr clientDrawingContext, float originX, float originY, IDWriteInlineObject inlineObject, bool isSideways, bool isRightToLeft, IntPtr clientDrawingEffect);
}
[SecuritySafeCriticalAttribute]
[CLSCompliantAttribute("False")]
public static class DevExpress.DirectX.StandardInterop.DWriteStandardInterop : object {
    private static UInt32 DWriteCreateFactory(DWRITE_FACTORY_TYPE type, Guid iid, IDWriteFactory& factory);
    public static DWriteFactory CreateDwriteFactory(bool shared);
}
[GuidAttribute("54ec77fa-1377-44e6-8c32-88fd5f44c84c")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DXGI.IDXGIDevice {
}
[GuidAttribute("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DXGI.IDXGIDeviceSubObject {
    public abstract virtual void SetPrivateData(Guid Name, int DataSize, Byte[] pData);
    public abstract virtual void SetPrivateDataInterface(Guid Name, object pUnknown);
    public abstract virtual void GetPrivateData(Guid Name, Int32& pDataSize, Byte[]& pData);
    public abstract virtual void GetParent(Guid riid, IntPtr& ppParent);
    public abstract virtual void GetDevice(Guid riid, IntPtr& ppDevice);
}
[GuidAttribute("aec22fb8-76f3-4639-9be0-28eb43a67a2e")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DXGI.IDXGIObject {
    public abstract virtual void SetPrivateData(Guid Name, int DataSize, Byte[] pData);
    public abstract virtual void SetPrivateDataInterface(Guid Name, object pUnknown);
    public abstract virtual void GetPrivateData(Guid Name, Int32& pDataSize, Byte[]& pData);
    public abstract virtual void GetParent(Guid riid, IntPtr& ppParent);
}
[GuidAttribute("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DXGI.IDXGISurface {
    public abstract virtual void SetPrivateData(Guid Name, int DataSize, Byte[] pData);
    public abstract virtual void SetPrivateDataInterface(Guid Name, object pUnknown);
    public abstract virtual void GetPrivateData(Guid Name, Int32& pDataSize, Byte[]& pData);
    public abstract virtual void GetParent(Guid riid, IntPtr& ppParent);
    public abstract virtual void GetDevice(Guid riid, IntPtr& ppDevice);
    public abstract virtual void GetDesc();
    public abstract virtual int Map(IntPtr& pLockedRect, int MapFlags);
    public abstract virtual void Unmap();
}
[GuidAttribute("4AE63092-6327-4c1b-80AE-BFE12EA32B86")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.DXGI.IDXGISurface1 {
    public abstract virtual void SetPrivateData(Guid Name, int DataSize, Byte[] pData);
    public abstract virtual void SetPrivateDataInterface(Guid Name, object pUnknown);
    public abstract virtual void GetPrivateData(Guid Name, Int32& pDataSize, Byte[]& pData);
    public abstract virtual void GetParent(Guid riid, IntPtr& ppParent);
    public abstract virtual void GetDevice(Guid riid, IntPtr& ppDevice);
    public abstract virtual void GetDesc();
    public abstract virtual int Map(IntPtr& pLockedRect, int MapFlags);
    public abstract virtual void Unmap();
    public abstract virtual void GedDC();
    public abstract virtual void ReleaseDC();
}
[GuidAttribute("1b8efec4-3019-4c27-964e-367202156906")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.PrintDocumentPackage.IPrintDocumentPackageTarget {
    public abstract virtual void GetPackageTargetTypes();
    public abstract virtual void GetPackageTarget();
    public abstract virtual void Cancel();
}
[GuidAttribute("d2959bf7-b31b-4a3d-9600-712eb1335ba4")]
[InterfaceTypeAttribute("1")]
public interface DevExpress.DirectX.StandardInterop.PrintDocumentPackage.IPrintDocumentPackageTargetFactory {
    public abstract virtual IPrintDocumentPackageTarget CreateDocumentPackageTargetForPrintJob(string printerName, string jobName, IntPtr jobOutputStream, IntPtr jobPrintTicketStream);
}
public class DevExpress.Entity.Model.Constants : object {
    private static Dictionary`2<string, string> typeNameToKeyword;
    public static string ServicesClientAssemblyName;
    public static string ServiceContextTypeName;
    public static string DbContextTypeName;
    public static string DbModelBuilderTypeName;
    public static string MetadataHelperTypeName;
    public static string DbSetTypeName;
    public static string EFCoreDbSetTypeName;
    public static string DbConnectionTypeName;
    public static string IObjectContextAdapterTypeName;
    public static string SqlCeConnectionTypeName;
    public static string EntityStoreSchemaGeneratorTypeAttributeName;
    public static string EntityStoreSchemaGeneratorTypeAttributeValueIsViews;
    public static string DatabaseFileName;
    public static string EntityFrameworkAssemblyName;
    public static string SystemDataEntityAssemblyName;
    public static string Sql35ProviderName;
    public static string Sql40ProviderName;
    public static string CE35RegistryKey;
    public static string CE40RegistryKey;
    public static string SystemDataSqlCe350AssemblyFullName;
    public static string SystemDataSqlCe351AssemblyFullName;
    public static string SystemDataSqlCe40AssemblyFullName;
    public static string EntityFrameworkMySqlClientAssemblyName;
    public static string EntityFrameworkOracleManagedClientAssemblyName;
    public static string EntityFrameworkSqliteAssemblyName;
    public static string SqliteAssemblyName;
    public static string EntityFrameworkSqlClientAssemblyName;
    public static string EntityFrameworkSqlCeAssemblyName;
    public static string DbContextEFCoreTypeName;
    public static string EntityFrameworkCoreAssemblyName;
    public static string EntityFrameworkCoreMsSqlAssemblyName;
    public static string EntityFrameworkCoreMsSqlCeAssemblyName;
    public static string EntityFrameworkCoreSqliteAssemblyName;
    public static string EntityFrameworkCoreNpgsqlAssemblyName;
    public static string TypeNameToKeyword(string typeName);
    private static void InitTypeNames();
}
public abstract class DevExpress.Entity.Model.ContainerBuilder : object {
    private EntityTypeInfoFactory entityTypeInfoFactory;
    public DbContainerType BuilderType { get; }
    private EntityTypeInfoFactory EntityTypeInfoFactory { get; }
    protected virtual DbContainerInfo GetDbContainerInfo(IDXTypeInfo type, MetadataWorkspaceInfo mw, IMapper mapper);
    protected virtual DbContainerInfo CreateDbContainerInfo(IDXTypeInfo type, EntityContainerInfo result, MetadataWorkspaceInfo mw);
    public abstract virtual DbContainerType get_BuilderType();
    public abstract virtual IDbContainerInfo Build(IDXTypeInfo info, ISolutionTypesProvider typesProvider);
    protected virtual IDataColumnAttributesProvider CreateDataColumnAttributesProvider();
    private EntityTypeInfoFactory get_EntityTypeInfoFactory();
    protected virtual EntityTypeInfoFactory CreateEntityTypeInfoFactory();
}
public class DevExpress.Entity.Model.ContainerInfo : DXTypeInfo {
    [CompilerGeneratedAttribute]
private DbContainerType <ContainerType>k__BackingField;
    public DbContainerType ContainerType { get; private set; }
    public ContainerInfo(Type type, DbContainerType containerType);
    public ContainerInfo(IDXTypeInfo type, DbContainerType containerType);
    [CompilerGeneratedAttribute]
public sealed virtual DbContainerType get_ContainerType();
    [CompilerGeneratedAttribute]
private void set_ContainerType(DbContainerType value);
}
[SecuritySafeCriticalAttribute]
public class DevExpress.Entity.Model.DataColumnAttributes : object {
    private static Lazy`1<MethodInfo> getNullDisplayText;
    private AttributeCollection attributes;
    private Lazy`1<TypeConverter> typeConverterValue;
    protected Func`1<TypeConverter> getTypeConverterCallback;
    private Lazy`1<DisplayAttribute> displayAttributeValue;
    private Lazy`1<DisplayFormatAttribute> displayFormatAttributeValue;
    private Lazy`1<DataType> dataTypeValue;
    private Lazy`1<int> maxLengthValue;
    private Lazy`1<int> maxLength2Value;
    private Lazy`1<bool> requiredValue;
    private Lazy`1<Nullable`1<bool>> isReadOnlyValue;
    private Lazy`1<Nullable`1<bool>> allowEditValue;
    private Lazy`1<bool> allowScaffoldingValue;
    private static Type maxLengthAttributeType;
    public DataType DataTypeValue { get; }
    public Nullable`1<bool> AllowEdit { get; }
    public Nullable`1<bool> IsReadOnly { get; }
    public bool AllowScaffolding { get; }
    public int MaxLengthValue { get; }
    public int MaxLength2Value { get; }
    public bool RequiredValue { get; }
    public DisplayAttribute DisplayAttributeValue { get; }
    public TypeConverter TypeConverter { get; }
    public Nullable`1<bool> AutoGenerateField { get; }
    public string Description { get; }
    public string GroupName { get; }
    public Nullable`1<int> Order { get; }
    public string Name { get; }
    public string ShortName { get; }
    public bool ApplyFormatInEditMode { get; }
    public bool ConvertEmptyStringToNull { get; }
    public string DataFormatString { get; }
    public string NullDisplayText { get; }
    internal static Type MaxLengthAttributeType { get; }
    private static DataColumnAttributes();
    public DataColumnAttributes(AttributeCollection attributes, Func`1<TypeConverter> getTypeConverterCallback);
    public DataType get_DataTypeValue();
    public Nullable`1<bool> get_AllowEdit();
    public Nullable`1<bool> get_IsReadOnly();
    public bool get_AllowScaffolding();
    public int get_MaxLengthValue();
    public int get_MaxLength2Value();
    public bool get_RequiredValue();
    public DisplayAttribute get_DisplayAttributeValue();
    public TypeConverter get_TypeConverter();
    public Nullable`1<bool> get_AutoGenerateField();
    public string get_Description();
    public string get_GroupName();
    public Nullable`1<int> get_Order();
    public string get_Name();
    public string get_ShortName();
    public bool get_ApplyFormatInEditMode();
    public bool get_ConvertEmptyStringToNull();
    public string get_DataFormatString();
    public string get_NullDisplayText();
    internal static Type get_MaxLengthAttributeType();
    public DataColumnAttributes AddAttributes(IEnumerable`1<Attribute> newAttributes);
    private static AttributeCollection CombineAttributes(AttributeCollection collection, IEnumerable`1<Attribute> newAttributes);
    public TValue ReadAttributeProperty(Lazy`1<TAttribute> lazyAttributeValue, Func`2<TAttribute, TValue> reader, TValue defaultValue);
    public Lazy`1<TValue> ReadAttributeProperty(Func`2<TAttribute, TValue> reader, TValue defaultValue);
    public Lazy`1<TValue> ReadAttributeProperty(Type attributeType, Func`2<TAttribute, TValue> reader, TValue defaultValue);
    public TValue[] GetAttributeValues(Func`2<TAttribute, TValue> reader);
    public static TValue GetAttributeValue(Type type, Func`2<TAttribute, TValue> reader, TValue defaultValue);
}
public class DevExpress.Entity.Model.DbContainerInfo : DXTypeInfo {
    private IEntityContainerInfo container;
    [CompilerGeneratedAttribute]
private DbContainerType <ContainerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private object <MetadataWorkspace>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DbContextType>k__BackingField;
    public IEntityContainerInfo EntityContainer { get; private set; }
    public IEnumerable`1<IEntitySetInfo> EntitySets { get; }
    public DbContainerType ContainerType { get; public set; }
    public string SourceUrl { get; public set; }
    public IEnumerable`1<IEntityFunctionInfo> EntityFunctions { get; }
    public object MetadataWorkspace { get; private set; }
    public Type DbContextType { get; private set; }
    public DbContainerInfo(Type type);
    public DbContainerInfo(Type type, IEntityContainerInfo container);
    public DbContainerInfo(Type type, MetadataWorkspaceInfo metadataWorkspace);
    public DbContainerInfo(Type type, IEntityContainerInfo container, MetadataWorkspaceInfo metadataWorkspace);
    public sealed virtual IEntityContainerInfo get_EntityContainer();
    private void set_EntityContainer(IEntityContainerInfo value);
    [IteratorStateMachineAttribute("DevExpress.Entity.Model.DbContainerInfo/<get_EntitySets>d__9")]
public sealed virtual IEnumerable`1<IEntitySetInfo> get_EntitySets();
    protected virtual bool IsValidEntitySet(IEntitySetInfo info);
    [CompilerGeneratedAttribute]
public sealed virtual DbContainerType get_ContainerType();
    [CompilerGeneratedAttribute]
public void set_ContainerType(DbContainerType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceUrl(string value);
    [IteratorStateMachineAttribute("DevExpress.Entity.Model.DbContainerInfo/<get_EntityFunctions>d__20")]
public sealed virtual IEnumerable`1<IEntityFunctionInfo> get_EntityFunctions();
    [CompilerGeneratedAttribute]
public sealed virtual object get_MetadataWorkspace();
    [CompilerGeneratedAttribute]
private void set_MetadataWorkspace(object value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DbContextType();
    [CompilerGeneratedAttribute]
private void set_DbContextType(Type value);
}
public enum DevExpress.Entity.Model.DbContainerType : Enum {
    public int value__;
    public static DbContainerType EntityFramework;
    public static DbContainerType WCF;
}
public class DevExpress.Entity.Model.DbSetPropertyInfo : RuntimeWrapper {
    private string name;
    private EFCoreContainerInfo entityContainerInfo;
    private Dictionary`2<string, object> attachedInfo;
    public IEntityTypeInfo ElementType { get; }
    public bool IsView { get; }
    public bool ReadOnly { get; }
    public string Name { get; }
    public IEntityContainerInfo EntityContainerInfo { get; }
    private Dictionary`2<string, object> DevExpress.Entity.Model.IEntitySetInfo.AttachedInfo { get; }
    public DbSetPropertyInfo(object dbSetProperty, EFCoreContainerInfo entityContainerInfo);
    public sealed virtual IEntityTypeInfo get_ElementType();
    public sealed virtual bool get_IsView();
    public sealed virtual bool get_ReadOnly();
    public sealed virtual string get_Name();
    public sealed virtual IEntityContainerInfo get_EntityContainerInfo();
    private sealed virtual override Dictionary`2<string, object> DevExpress.Entity.Model.IEntitySetInfo.get_AttachedInfo();
}
public abstract class DevExpress.Entity.Model.DescendantBuilding.DbDescendantBuilder : DescendantBuilderBase {
    protected Type dbContext;
    protected Type descendant;
    private string tempFolder;
    private TypesCollector typesCollector;
    public string TempFolder { get; }
    public TypesCollector TypesCollector { get; }
    public bool SuppressExceptions { get; }
    protected DbDescendantBuilder(TypesCollector typesCollector);
    public string get_TempFolder();
    public sealed virtual TypesCollector get_TypesCollector();
    public abstract virtual bool get_SuppressExceptions();
    protected void CreateProperty(TypeBuilder tb, PropertyInfo pi, TypesCollector typesCollector);
    protected Type FindEFType(string typeName);
    protected IEnumerable`1<PropertyInfo> GetDbSetProperties(Type type);
    protected Tuple`2<ConstructorInfo, Type[]> GetDbContextConstructor(Expression connection, Type dbContextType);
    protected virtual Expression CreateDbConnection(Type dbContextType, bool isModelFirst, TypesCollector typesCollector);
    protected abstract virtual Expression CreateDefaultDbConnection(Type dbContextType, TypesCollector typesCollector);
    protected abstract virtual Expression CreateModelFirstDbConnection(TypesCollector typesCollector);
    protected virtual void PrepareEdmx(EdmxResource edmxResource);
    protected virtual Type EmitDbDescendant(TypesCollector typesCollector, Tuple`2<ConstructorInfo, Type[]> ctorTuple, ModuleBuilder mb, bool isModelFirst);
    protected ModuleBuilder CreateDynamicAssembly();
    protected AssemblyName GetDynamicAssemblyName();
    protected virtual void Dispose(bool disposing);
    protected virtual void Clear();
    protected void DeleteTempFolder();
    protected void DeleteDatabase(object dbContextInstance);
    public virtual object Build();
}
public class DevExpress.Entity.Model.DescendantBuilding.DefaultDescendantBuilder : DbDescendantBuilder {
    public bool SuppressExceptions { get; }
    public DefaultDescendantBuilder(TypesCollector typesCollector);
    public virtual bool get_SuppressExceptions();
    public static string GetCeProviderConnectionString(string dataBaseFilePath);
    protected virtual Expression CreateDefaultDbConnection(Type dbContextType, TypesCollector typesCollector);
    protected virtual Expression CreateModelFirstDbConnection(TypesCollector typesCollector);
}
public class DevExpress.Entity.Model.DescendantBuilding.DefaultDescendantBuilderProvider : DescendantBuilderProvider {
    public virtual bool Available(Type dbContext, IDXTypeInfo dbDescendant, ISolutionTypesProvider typesProvider);
    public virtual IDbDescendantBuilder GetBuilder(TypesCollector typesCollector, ISolutionTypesProvider typesProvider);
}
public class DevExpress.Entity.Model.DescendantBuilding.DefaultEFCoreDescendantBuilder : DescendantBuilderBase {
    private Type descendant;
    private Type dbContext;
    private TypesCollector typesCollector;
    private string tempFolder;
    public TypesCollector TypesCollector { get; }
    public bool SuppressExceptions { get; }
    public string TempFolder { get; }
    public DefaultEFCoreDescendantBuilder(TypesCollector typesCollector);
    public sealed virtual TypesCollector get_TypesCollector();
    public sealed virtual bool get_SuppressExceptions();
    public string get_TempFolder();
    public virtual object Build();
    protected virtual void BuildCore(IDXTypeInfo typeInfo);
    protected DescendantInstanceActivator CreateContextInstance(Type contextType);
    protected ModuleBuilder CreateDynamicAssembly();
    protected AssemblyName GetDynamicAssemblyName();
    protected void CreateDefaultConstructor(Type contextType, TypeBuilder newContextTypeBuilder);
    [CompilerGeneratedAttribute]
private bool <CreateDefaultConstructor>b__16_0(ConstructorInfo c);
}
public abstract class DevExpress.Entity.Model.DescendantBuilding.DescendantBuilderBase : DisposableObject {
    private DescendantInstanceActivator instanceActivator;
    public object DescendantInstance { get; }
    public DescendantInstanceActivator InstanceActivator { get; protected set; }
    public sealed virtual object get_DescendantInstance();
    public DescendantInstanceActivator get_InstanceActivator();
    protected void set_InstanceActivator(DescendantInstanceActivator value);
    protected DescendantInstanceActivator CreateDescendantInstanceActivator(Type resultType, Type[] parametersTypes, Expression connection, string tempFolder);
}
public class DevExpress.Entity.Model.DescendantBuilding.DescendantBuilderFactoryBase : object {
    private List`1<DescendantBuilderProvider> providers;
    public void Initialize();
    protected virtual void InitializeProviders();
    protected void Add(DescendantBuilderProvider provider);
    public virtual IDbDescendantBuilder GetDbDescendantBuilder(IDXTypeInfo dXTypeInfo, ISolutionTypesProvider typesProvider);
}
public abstract class DevExpress.Entity.Model.DescendantBuilding.DescendantBuilderProvider : object {
    public abstract virtual bool Available(Type dbContext, IDXTypeInfo dbDescendant, ISolutionTypesProvider typesProvider);
    public abstract virtual IDbDescendantBuilder GetBuilder(TypesCollector typesCollector, ISolutionTypesProvider typesProvider);
}
public class DevExpress.Entity.Model.DescendantBuilding.DescendantInstanceActivator : object {
    private string path;
    private object defaultInstance;
    private Func`1<object> createNew;
    public object DefaultInstance { get; }
    public DescendantInstanceActivator(string path, Expression expression);
    public DescendantInstanceActivator(string path, Func`1<object> func);
    public object get_DefaultInstance();
    public object Create();
    private sealed virtual override void System.IDisposable.Dispose();
}
public abstract class DevExpress.Entity.Model.DescendantBuilding.EF60DbDescendantBuilderBase : DbDescendantBuilder {
    protected IDXAssemblyInfo servicesAssembly;
    private static Type dbConfigurationType;
    private static object dbConfigurationTypeLockObject;
    public string ProviderName { get; }
    public string ProviderManifestToken { get; }
    public string SqlProviderServicesTypeName { get; }
    protected Assembly EntityFrameworkAssembly { get; }
    public EF60DbDescendantBuilderBase(TypesCollector typesCollector, IDXAssemblyInfo servicesAssembly);
    private static EF60DbDescendantBuilderBase();
    public abstract virtual string get_ProviderName();
    public abstract virtual string get_ProviderManifestToken();
    public abstract virtual string get_SqlProviderServicesTypeName();
    protected abstract virtual string GetConnectionString(string dbFilePath);
    protected void EmitCallToBaseTypeCtor(Type dbConfigurationType, ILGenerator ilGenerator);
    protected Type GetActivatedSingletonDependencyResolverType();
    protected void EmitCallToAddDependencyResolver(Type dbConfigurationType, ILGenerator ilGenerator);
    protected void EmitCallToAddDefaultResolver(Type dbConfigurationType, ILGenerator ilGenerator);
    protected virtual Type EmitDbConfigurationType(ModuleBuilder moduleBuilder);
    protected Type GetIProviderInvariantNameType();
    protected Type GetIDbDependencyResolverType();
    protected Type GetDbConfigurationType();
    protected Type GetDbConfigurationTypeAttributeType();
    protected virtual Type GetSqlProviderServicesType();
    protected Type GetDbContextInfoType();
    protected virtual void PrepareEdmx(EdmxResource edmxResource);
    public virtual object Build();
    protected virtual Type EmitDbDescendant(TypesCollector typesCollector, Tuple`2<ConstructorInfo, Type[]> ctorTuple, ModuleBuilder mb, bool isModelFirst, Type dbConfigurationType);
    protected virtual void SetDbConfiguration(object configuration);
    protected Assembly get_EntityFrameworkAssembly();
    protected void ClearDBConfiguration();
    private void ClearMetadataCache();
    protected virtual Expression CreateModelFirstDbConnection(TypesCollector typesCollector);
    [CompilerGeneratedAttribute]
private bool <GetSqlProviderServicesType>b__20_0(IDXTypeInfo x);
}
public abstract class DevExpress.Entity.Model.DescendantBuilding.EF60DbDescendantBuilderProviderBase : DescendantBuilderProvider {
    protected string ExpectedProviderName { get; }
    protected abstract virtual string get_ExpectedProviderName();
    public virtual bool Available(Type dbContext, IDXTypeInfo dbDescendant, ISolutionTypesProvider typesProvider);
    protected IDXAssemblyInfo GetServicesAssembly(IDXTypeInfo dbDescendant, ISolutionTypesProvider typesProvider, string servicesAssemblyName);
}
public interface DevExpress.Entity.Model.DescendantBuilding.IDbDescendantBuilder {
    public TypesCollector TypesCollector { get; }
    public object DescendantInstance { get; }
    public bool SuppressExceptions { get; }
    public abstract virtual TypesCollector get_TypesCollector();
    public abstract virtual object get_DescendantInstance();
    public abstract virtual bool get_SuppressExceptions();
    public abstract virtual object Build();
}
public class DevExpress.Entity.Model.DescendantBuilding.Internal.SqlExpressDescendantBuilderConfig : object {
    [CompilerGeneratedAttribute]
private static bool <UseUserInstance>k__BackingField;
    public static bool UseUserInstance { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_UseUserInstance();
    [CompilerGeneratedAttribute]
public static void set_UseUserInstance(bool value);
}
public class DevExpress.Entity.Model.DescendantBuilding.LocalDbDescendantBuilder : SqlExpressDescendantBuilder {
    [CompilerGeneratedAttribute]
private string <LocalDbVersion>k__BackingField;
    public string LocalDbVersion { get; public set; }
    public LocalDbDescendantBuilder(TypesCollector typesCollector, IDXAssemblyInfo servicesAssembly, string dbVersion);
    [CompilerGeneratedAttribute]
public string get_LocalDbVersion();
    [CompilerGeneratedAttribute]
public void set_LocalDbVersion(string value);
    protected virtual string GetConnectionString(string dbFilePath);
}
public static class DevExpress.Entity.Model.DescendantBuilding.Native.DbConfigurationHelper : object {
    public static bool UseStaticConfiguration;
    private static DbConfigurationHelper();
}
public class DevExpress.Entity.Model.DescendantBuilding.SqlCeDescendantBuilder : EF60DbDescendantBuilderBase {
    public bool SuppressExceptions { get; }
    public string ProviderName { get; }
    public string SqlProviderServicesTypeName { get; }
    public string ProviderManifestToken { get; }
    public SqlCeDescendantBuilder(TypesCollector typesCollector, IDXAssemblyInfo servicesAssembly);
    public virtual bool get_SuppressExceptions();
    public virtual string get_ProviderName();
    public virtual string get_SqlProviderServicesTypeName();
    protected virtual Type EmitDbConfigurationType(ModuleBuilder moduleBuilder);
    protected virtual Expression CreateDefaultDbConnection(Type dbContextType, TypesCollector typesCollector);
    protected virtual string GetConnectionString(string dbFilePath);
    public virtual string get_ProviderManifestToken();
    protected virtual void SetDbConfiguration(object configuration);
    private object GetAppConfigResolver(object firstResolver);
}
public class DevExpress.Entity.Model.DescendantBuilding.SqlCeDescendantBuilderProvider : EF60DbDescendantBuilderProviderBase {
    private bool IsSqlCE40Installed;
    protected string ExpectedProviderName { get; }
    public SqlCeDescendantBuilderProvider(bool isSqlCE40Installed);
    protected virtual string get_ExpectedProviderName();
    public virtual bool Available(Type dbContext, IDXTypeInfo dbDescendant, ISolutionTypesProvider typesProvider);
    public virtual IDbDescendantBuilder GetBuilder(TypesCollector typesCollector, ISolutionTypesProvider typesProvider);
}
public class DevExpress.Entity.Model.DescendantBuilding.SqlClientDescendantBuilderProvider : EF60DbDescendantBuilderProviderBase {
    [CompilerGeneratedAttribute]
private bool <IsSqlExpressInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocalDbInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDbVersion>k__BackingField;
    protected string ExpectedProviderName { get; }
    protected bool IsSqlExpressInstalled { get; protected set; }
    protected bool IsLocalDbInstalled { get; protected set; }
    protected string LocalDbVersion { get; protected set; }
    public SqlClientDescendantBuilderProvider(bool isSqlExpressInstalled, bool isLocalDbInstalled, string localDbVersion);
    protected virtual string get_ExpectedProviderName();
    public virtual bool Available(Type dbContext, IDXTypeInfo dbDescendant, ISolutionTypesProvider typesProvider);
    public virtual IDbDescendantBuilder GetBuilder(TypesCollector typesCollector, ISolutionTypesProvider typesProvider);
    [CompilerGeneratedAttribute]
protected bool get_IsSqlExpressInstalled();
    [CompilerGeneratedAttribute]
protected void set_IsSqlExpressInstalled(bool value);
    [CompilerGeneratedAttribute]
protected bool get_IsLocalDbInstalled();
    [CompilerGeneratedAttribute]
protected void set_IsLocalDbInstalled(bool value);
    [CompilerGeneratedAttribute]
protected string get_LocalDbVersion();
    [CompilerGeneratedAttribute]
protected void set_LocalDbVersion(string value);
}
public class DevExpress.Entity.Model.DescendantBuilding.SqlExpressDescendantBuilder : EF60DbDescendantBuilderBase {
    public bool SuppressExceptions { get; }
    public string ProviderName { get; }
    public string SqlProviderServicesTypeName { get; }
    public string ProviderManifestToken { get; }
    public SqlExpressDescendantBuilder(TypesCollector typesCollector, IDXAssemblyInfo servicesAssembly);
    public virtual bool get_SuppressExceptions();
    public virtual string get_ProviderName();
    public virtual string get_SqlProviderServicesTypeName();
    public virtual string get_ProviderManifestToken();
    protected virtual string GetConnectionString(string dbFilePath);
    protected virtual Expression CreateDefaultDbConnection(Type dbContextType, TypesCollector typesCollector);
}
public class DevExpress.Entity.Model.EdmPropertyInfo : object {
    private PropertyDescriptor property;
    private bool isForeignKey;
    private bool isNavigationProperty;
    private DataColumnAttributes attributes;
    private Type DevExpress.Entity.Model.IEdmPropertyInfo.PropertyType { get; }
    private string DevExpress.Entity.Model.IEdmPropertyInfo.Name { get; }
    private string DevExpress.Entity.Model.IEdmPropertyInfo.DisplayName { get; }
    private bool DevExpress.Entity.Model.IEdmPropertyInfo.IsReadOnly { get; }
    private bool DevExpress.Entity.Model.IEdmPropertyInfo.IsForeignKey { get; }
    private DataColumnAttributes DevExpress.Entity.Model.IEdmPropertyInfo.Attributes { get; }
    private object DevExpress.Entity.Model.IEdmPropertyInfo.ContextObject { get; }
    private bool DevExpress.Entity.Model.IEdmPropertyInfo.IsNavigationProperty { get; }
    public EdmPropertyInfo(PropertyDescriptor property, DataColumnAttributes attributes, bool isNavigationProperty, bool isForeignKey);
    private sealed virtual override Type DevExpress.Entity.Model.IEdmPropertyInfo.get_PropertyType();
    private sealed virtual override string DevExpress.Entity.Model.IEdmPropertyInfo.get_Name();
    private sealed virtual override string DevExpress.Entity.Model.IEdmPropertyInfo.get_DisplayName();
    private sealed virtual override bool DevExpress.Entity.Model.IEdmPropertyInfo.get_IsReadOnly();
    private sealed virtual override bool DevExpress.Entity.Model.IEdmPropertyInfo.get_IsForeignKey();
    private sealed virtual override DataColumnAttributes DevExpress.Entity.Model.IEdmPropertyInfo.get_Attributes();
    private sealed virtual override object DevExpress.Entity.Model.IEdmPropertyInfo.get_ContextObject();
    private sealed virtual override bool DevExpress.Entity.Model.IEdmPropertyInfo.get_IsNavigationProperty();
    private sealed virtual override IEdmPropertyInfo DevExpress.Entity.Model.IEdmPropertyInfo.AddAttributes(IEnumerable`1<Attribute> newAttributes);
}
public class DevExpress.Entity.Model.EF7PropertyInfo : object {
    private PropertyInfo property;
    public string Name { get; }
    public string DisplayName { get; }
    public Type PropertyType { get; }
    public bool IsForeignKey { get; }
    public bool IsReadOnly { get; }
    public DataColumnAttributes Attributes { get; }
    public object ContextObject { get; }
    public bool IsNavigationProperty { get; }
    public EF7PropertyInfo(PropertyInfo property);
    public sealed virtual string get_Name();
    public sealed virtual string get_DisplayName();
    public sealed virtual Type get_PropertyType();
    public sealed virtual bool get_IsForeignKey();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual DataColumnAttributes get_Attributes();
    public sealed virtual object get_ContextObject();
    public sealed virtual bool get_IsNavigationProperty();
    public sealed virtual IEdmPropertyInfo AddAttributes(IEnumerable`1<Attribute> newAttributes);
}
public class DevExpress.Entity.Model.EF7TypeInfo : object {
    private Type type;
    private List`1<IEdmPropertyInfo> allProperties;
    public IEnumerable`1<IEdmPropertyInfo> AllProperties { get; }
    public IEnumerable`1<IEdmPropertyInfo> KeyMembers { get; }
    public IEnumerable`1<IEdmAssociationPropertyInfo> LookupTables { get; }
    public Type Type { get; }
    public EF7TypeInfo(Type type);
    public sealed virtual IEnumerable`1<IEdmPropertyInfo> get_AllProperties();
    public sealed virtual IEnumerable`1<IEdmPropertyInfo> get_KeyMembers();
    public sealed virtual IEnumerable`1<IEdmAssociationPropertyInfo> get_LookupTables();
    public sealed virtual Type get_Type();
    private void InitProperties();
    public sealed virtual IEdmPropertyInfo GetForeignKey(IEdmPropertyInfo dependentProperty);
    public sealed virtual IEdmPropertyInfo GetDependentProperty(IEdmPropertyInfo foreignKey);
}
public class DevExpress.Entity.Model.EFContainerBuilderBase : ContainerBuilder {
    private DescendantBuilderFactoryBase descendantBuilderFactory;
    public DbContainerType BuilderType { get; }
    protected DescendantBuilderFactoryBase DescendantBuilderFactory { get; }
    public virtual DbContainerType get_BuilderType();
    private static PropertyInfo GetProperty(Type type, string name);
    private object GetObjectContext(TypesCollector typesCollector, object dbContextInstance);
    protected DescendantBuilderFactoryBase get_DescendantBuilderFactory();
    public virtual IDbContainerInfo Build(IDXTypeInfo type, ISolutionTypesProvider typesProvider);
    protected virtual IDbContainerInfo BuildCore(IDXTypeInfo type, IDbDescendantBuilder descendantBuilder);
    protected internal virtual Mapper GetMapper(TypesCollector typesCollector, MetadataWorkspaceInfo mwInfo);
    private void DeleteTempFolder(string directoryPath);
    private void DeleteDatabase(object dbContextInstance);
    private MetadataWorkspaceInfo CreateMetadataWorkspaceInfo(object objectContext);
    protected virtual void CreateSampleQuery(object objectContext);
    protected IEntityContainerInfo GetDbSets(TypesCollector typesCollector, object dbContextInstance);
    protected virtual DescendantBuilderFactoryBase CreateBuilderProviderFactory();
    protected virtual void LogException(Exception ex, bool display);
}
public class DevExpress.Entity.Model.EFCoreContainerInfo : RuntimeWrapper {
    private string name;
    private object dbContextInstance;
    private List`1<IEntitySetInfo> entitySets;
    private IEnumerable`1<IEntityFunctionInfo> entityFunctions;
    public string Name { get; }
    public IEnumerable`1<IEntitySetInfo> EntitySets { get; }
    public IEnumerable`1<IEntityFunctionInfo> EntityFunctions { get; }
    public EFCoreContainerInfo(object finder, object dbContextInstance);
    public sealed virtual string get_Name();
    public sealed virtual IEnumerable`1<IEntitySetInfo> get_EntitySets();
    public sealed virtual IEnumerable`1<IEntityFunctionInfo> get_EntityFunctions();
    private void InitEntitySets();
    [CompilerGeneratedAttribute]
private Object[] <InitEntitySets>b__11_1();
    [CompilerGeneratedAttribute]
private Object[] <InitEntitySets>b__11_2();
}
public class DevExpress.Entity.Model.EmptyEdmPropertyInfo : object {
    private Type componentType;
    private DataColumnAttributes attributes;
    private Type DevExpress.Entity.Model.IEdmPropertyInfo.PropertyType { get; }
    private string DevExpress.Entity.Model.IEdmPropertyInfo.Name { get; }
    private string DevExpress.Entity.Model.IEdmPropertyInfo.DisplayName { get; }
    private bool DevExpress.Entity.Model.IEdmPropertyInfo.IsReadOnly { get; }
    private bool DevExpress.Entity.Model.IEdmPropertyInfo.IsForeignKey { get; }
    private DataColumnAttributes DevExpress.Entity.Model.IEdmPropertyInfo.Attributes { get; }
    private object DevExpress.Entity.Model.IEdmPropertyInfo.ContextObject { get; }
    private bool DevExpress.Entity.Model.IEdmPropertyInfo.IsNavigationProperty { get; }
    public EmptyEdmPropertyInfo(Type componentType);
    private sealed virtual override Type DevExpress.Entity.Model.IEdmPropertyInfo.get_PropertyType();
    private sealed virtual override string DevExpress.Entity.Model.IEdmPropertyInfo.get_Name();
    private sealed virtual override string DevExpress.Entity.Model.IEdmPropertyInfo.get_DisplayName();
    private sealed virtual override bool DevExpress.Entity.Model.IEdmPropertyInfo.get_IsReadOnly();
    private sealed virtual override bool DevExpress.Entity.Model.IEdmPropertyInfo.get_IsForeignKey();
    private sealed virtual override DataColumnAttributes DevExpress.Entity.Model.IEdmPropertyInfo.get_Attributes();
    private sealed virtual override object DevExpress.Entity.Model.IEdmPropertyInfo.get_ContextObject();
    private sealed virtual override bool DevExpress.Entity.Model.IEdmPropertyInfo.get_IsNavigationProperty();
    private sealed virtual override IEdmPropertyInfo DevExpress.Entity.Model.IEdmPropertyInfo.AddAttributes(IEnumerable`1<Attribute> newAttributes);
}
public abstract class DevExpress.Entity.Model.EntityFrameworkModelBase : object {
    private Dictionary`2<DbContainerType, IContainerBuilder> builders;
    private Dictionary`2<Type, IDbContainerInfo> dbContainers;
    private IEnumerable`1<IContainerInfo> allContainersInfo;
    private static String[] assemblyFilters;
    protected ISolutionTypesProvider TypesProvider { get; }
    protected IProjectTypes ProjectTypes { get; }
    private static EntityFrameworkModelBase();
    private IContainerBuilder GetBuider(DbContainerType type);
    protected virtual IContainerBuilder GetContainerBuilderCore(DbContainerType dbContainerType);
    protected abstract virtual ISolutionTypesProvider get_TypesProvider();
    public sealed virtual IDbContainerInfo GetContainer(IContainerInfo info);
    [EditorBrowsableAttribute("1")]
public sealed virtual IDbContainerInfo GetContainer(string nameOrFullName);
    public IDbContainerInfo GetContainer(string nameOrFullName, bool returnNullOnError);
    private static bool DbTypeFilter(IDXTypeInfo typeInfo, string baseClassName);
    private static bool IsContextType(Type type, string baseContextName);
    private static bool InheritFromContext(Type type, string baseContextName);
    public static Type GetBaseContextType(Type type, string baseContextName);
    public static bool IsAtLeastEF6(IContainerInfo containerInfo);
    public static bool IsAtLeastEF6(Type dbContextType);
    public static bool IsEntityFrameworkCore(IContainerInfo containerInfo);
    public static bool IsEntityFrameworkCore(Type dbContextType);
    protected virtual IProjectTypes get_ProjectTypes();
    public sealed virtual IEnumerable`1<IContainerInfo> GetContainersInfo();
    public IEnumerable`1<IContainerInfo> GetContainersInfo(bool returnNullOnError);
}
public interface DevExpress.Entity.Model.IContainerInfo {
    public DbContainerType ContainerType { get; }
    public abstract virtual DbContainerType get_ContainerType();
}
public interface DevExpress.Entity.Model.IDbContainerInfo {
    public IEntityContainerInfo EntityContainer { get; }
    public IEnumerable`1<IEntitySetInfo> EntitySets { get; }
    public IEnumerable`1<IEntityFunctionInfo> EntityFunctions { get; }
    public object MetadataWorkspace { get; }
    public Type DbContextType { get; }
    public string SourceUrl { get; public set; }
    public abstract virtual IEntityContainerInfo get_EntityContainer();
    public abstract virtual IEnumerable`1<IEntitySetInfo> get_EntitySets();
    public abstract virtual IEnumerable`1<IEntityFunctionInfo> get_EntityFunctions();
    public abstract virtual object get_MetadataWorkspace();
    public abstract virtual Type get_DbContextType();
    public abstract virtual string get_SourceUrl();
    public abstract virtual void set_SourceUrl(string value);
}
public interface DevExpress.Entity.Model.IEdmAssociationPropertyInfo {
    public IEntityTypeInfo ToEndEntityType { get; }
    public IEnumerable`1<IEdmMemberInfo> ForeignKeyProperties { get; }
    public abstract virtual IEntityTypeInfo get_ToEndEntityType();
    public abstract virtual IEnumerable`1<IEdmMemberInfo> get_ForeignKeyProperties();
}
public interface DevExpress.Entity.Model.IEdmComplexTypePropertyInfo {
    public string Name { get; }
    public Type ClrType { get; }
    public abstract virtual string get_Name();
    public abstract virtual Type get_ClrType();
}
public interface DevExpress.Entity.Model.IEdmMemberInfo {
    public string Name { get; }
    public bool IsProperty { get; }
    public bool IsNavigationProperty { get; }
    public bool IsCollectionProperty { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public object FromEndMember { get; }
    public bool IsKeyMember { get; }
    public IPrimitiveType PrimitiveType { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsProperty();
    public abstract virtual bool get_IsNavigationProperty();
    public abstract virtual bool get_IsCollectionProperty();
    public abstract virtual BuiltInTypeKind get_BuiltInTypeKind();
    public abstract virtual object get_FromEndMember();
    public abstract virtual bool get_IsKeyMember();
    public abstract virtual IPrimitiveType get_PrimitiveType();
}
public interface DevExpress.Entity.Model.IEdmPropertyInfo {
    public string Name { get; }
    public string DisplayName { get; }
    public Type PropertyType { get; }
    public bool IsForeignKey { get; }
    public bool IsReadOnly { get; }
    public DataColumnAttributes Attributes { get; }
    public object ContextObject { get; }
    public bool IsNavigationProperty { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
    public abstract virtual Type get_PropertyType();
    public abstract virtual bool get_IsForeignKey();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual DataColumnAttributes get_Attributes();
    public abstract virtual object get_ContextObject();
    public abstract virtual bool get_IsNavigationProperty();
    public abstract virtual IEdmPropertyInfo AddAttributes(IEnumerable`1<Attribute> newAttributes);
}
public interface DevExpress.Entity.Model.IEdmTypeInfo {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public Type ClrType { get; }
    public string Name { get; }
    public IEdmTypeInfo CollectionElementType { get; }
    public object Value { get; }
    public abstract virtual BuiltInTypeKind get_BuiltInTypeKind();
    public abstract virtual Type get_ClrType();
    public abstract virtual string get_Name();
    public abstract virtual IEdmTypeInfo get_CollectionElementType();
    public abstract virtual object get_Value();
}
public interface DevExpress.Entity.Model.IEntityContainerInfo {
    public string Name { get; }
    public IEnumerable`1<IEntitySetInfo> EntitySets { get; }
    public IEnumerable`1<IEntityFunctionInfo> EntityFunctions { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<IEntitySetInfo> get_EntitySets();
    public abstract virtual IEnumerable`1<IEntityFunctionInfo> get_EntityFunctions();
}
public interface DevExpress.Entity.Model.IEntityFrameworkModel {
    public abstract virtual IDbContainerInfo GetContainer(IContainerInfo info);
    public abstract virtual IEnumerable`1<IContainerInfo> GetContainersInfo();
    [EditorBrowsableAttribute("1")]
public abstract virtual IDbContainerInfo GetContainer(string nameOrFullName);
}
public interface DevExpress.Entity.Model.IEntityFunctionInfo {
    public string Name { get; }
    public IFunctionParameterInfo[] Parameters { get; }
    public IEdmComplexTypePropertyInfo[] ResultTypeProperties { get; }
    public abstract virtual string get_Name();
    public abstract virtual IFunctionParameterInfo[] get_Parameters();
    public abstract virtual IEdmComplexTypePropertyInfo[] get_ResultTypeProperties();
}
public interface DevExpress.Entity.Model.IEntityProperties {
    public IEnumerable`1<IEdmPropertyInfo> AllProperties { get; }
    public abstract virtual IEnumerable`1<IEdmPropertyInfo> get_AllProperties();
}
public interface DevExpress.Entity.Model.IEntitySetInfo {
    public IEntityTypeInfo ElementType { get; }
    public bool IsView { get; }
    public bool ReadOnly { get; }
    public string Name { get; }
    public IEntityContainerInfo EntityContainerInfo { get; }
    public Dictionary`2<string, object> AttachedInfo { get; }
    public abstract virtual IEntityTypeInfo get_ElementType();
    public abstract virtual bool get_IsView();
    public abstract virtual bool get_ReadOnly();
    public abstract virtual string get_Name();
    public abstract virtual IEntityContainerInfo get_EntityContainerInfo();
    public abstract virtual Dictionary`2<string, object> get_AttachedInfo();
}
public interface DevExpress.Entity.Model.IEntityTypeInfo {
    public IEnumerable`1<IEdmPropertyInfo> KeyMembers { get; }
    public IEnumerable`1<IEdmAssociationPropertyInfo> LookupTables { get; }
    public Type Type { get; }
    public abstract virtual IEnumerable`1<IEdmPropertyInfo> get_KeyMembers();
    public abstract virtual IEnumerable`1<IEdmAssociationPropertyInfo> get_LookupTables();
    public abstract virtual Type get_Type();
    public abstract virtual IEdmPropertyInfo GetForeignKey(IEdmPropertyInfo dependentProperty);
    public abstract virtual IEdmPropertyInfo GetDependentProperty(IEdmPropertyInfo foreignKey);
}
public interface DevExpress.Entity.Model.IFunctionParameterInfo {
    public string Name { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public string TypeName { get; }
    public IEdmTypeInfo EdmType { get; }
    public Type ClrType { get; }
    public abstract virtual string get_Name();
    public abstract virtual BuiltInTypeKind get_BuiltInTypeKind();
    public abstract virtual string get_TypeName();
    public abstract virtual IEdmTypeInfo get_EdmType();
    public abstract virtual Type get_ClrType();
}
public interface DevExpress.Entity.Model.IPrimitiveType {
    public Type ClrEquivalentType { get; }
    public abstract virtual Type get_ClrEquivalentType();
}
public class DevExpress.Entity.Model.Metadata.AssociationTypeInfo : EntityTypeBaseInfo {
    public bool IsForeignKey { get; }
    public AssociationTypeInfo(object source);
    public IEnumerable`1<EdmMemberInfo> GetDependentProperties(EdmMemberInfo navProperty);
    private bool EdmEquals(object firstItem, object secondItem);
    public AssociationTypeInfo GetCSpaceAssociationType(IEntityTypeInfo declaringType);
    public bool get_IsForeignKey();
    public IEnumerable`1<EdmMemberInfo> GetToEndPropertyNames(EdmMemberInfo navProperty, EntityTypeBaseInfo toEndEntityTypeInfo);
}
public enum DevExpress.Entity.Model.Metadata.BuiltInTypeKind : Enum {
    public int value__;
    public static BuiltInTypeKind AssociationEndMember;
    public static BuiltInTypeKind AssociationSetEnd;
    public static BuiltInTypeKind AssociationSet;
    public static BuiltInTypeKind AssociationType;
    public static BuiltInTypeKind EntitySetBase;
    public static BuiltInTypeKind EntityTypeBase;
    public static BuiltInTypeKind CollectionType;
    public static BuiltInTypeKind CollectionKind;
    public static BuiltInTypeKind ComplexType;
    public static BuiltInTypeKind Documentation;
    public static BuiltInTypeKind OperationAction;
    public static BuiltInTypeKind EdmType;
    public static BuiltInTypeKind EntityContainer;
    public static BuiltInTypeKind EntitySet;
    public static BuiltInTypeKind EntityType;
    public static BuiltInTypeKind EnumType;
    public static BuiltInTypeKind EnumMember;
    public static BuiltInTypeKind Facet;
    public static BuiltInTypeKind EdmFunction;
    public static BuiltInTypeKind FunctionParameter;
    public static BuiltInTypeKind GlobalItem;
    public static BuiltInTypeKind MetadataProperty;
    public static BuiltInTypeKind NavigationProperty;
    public static BuiltInTypeKind MetadataItem;
    public static BuiltInTypeKind EdmMember;
    public static BuiltInTypeKind ParameterMode;
    public static BuiltInTypeKind PrimitiveType;
    public static BuiltInTypeKind PrimitiveTypeKind;
    public static BuiltInTypeKind EdmProperty;
    public static BuiltInTypeKind ProviderManifest;
    public static BuiltInTypeKind ReferentialConstraint;
    public static BuiltInTypeKind RefType;
    public static BuiltInTypeKind RelationshipEndMember;
    public static BuiltInTypeKind RelationshipMultiplicity;
    public static BuiltInTypeKind RelationshipSet;
    public static BuiltInTypeKind RelationshipType;
    public static BuiltInTypeKind RowType;
    public static BuiltInTypeKind SimpleType;
    public static BuiltInTypeKind StructuralType;
    public static BuiltInTypeKind TypeUsage;
}
public enum DevExpress.Entity.Model.Metadata.DataSpace : Enum {
    public int value__;
    public static DataSpace OSpace;
    public static DataSpace CSpace;
    public static DataSpace SSpace;
    public static DataSpace OCSpace;
    public static DataSpace CSSpace;
}
public class DevExpress.Entity.Model.Metadata.EdmAssociationPropertyInfo : EdmPropertyInfo {
    private IEntityTypeInfo toEndEntityType;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IEdmMemberInfo> <ForeignKeyProperties>k__BackingField;
    public IEnumerable`1<IEdmMemberInfo> ForeignKeyProperties { get; private set; }
    public IEntityTypeInfo ToEndEntityType { get; }
    public EdmAssociationPropertyInfo(PropertyDescriptor property, DataColumnAttributes attributes, IEntityTypeInfo toEndEntityType, bool isNavigationProperty, IEnumerable`1<EdmMemberInfo> foreignKeyProperties, bool isForeignKey);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IEdmMemberInfo> get_ForeignKeyProperties();
    [CompilerGeneratedAttribute]
private void set_ForeignKeyProperties(IEnumerable`1<IEdmMemberInfo> value);
    public sealed virtual IEntityTypeInfo get_ToEndEntityType();
}
public class DevExpress.Entity.Model.Metadata.EdmComplexTypeInfo : RuntimeWrapper {
    public EdmComplexTypePropertyInfo[] Properties { get; }
    public EdmComplexTypeInfo(object value);
    public EdmComplexTypePropertyInfo[] get_Properties();
}
public class DevExpress.Entity.Model.Metadata.EdmComplexTypePropertyInfo : RuntimeWrapper {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public string Name { get; private set; }
    public Type ClrType { get; private set; }
    public EdmComplexTypePropertyInfo(object value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
}
public static class DevExpress.Entity.Model.Metadata.EdmConst : object {
    private static string prefix;
    public static string EdmFunction { get; }
    public static string FunctionParameter { get; }
    public static string TypeUsage { get; }
    public static string EdmType { get; }
    public static string ComplexType { get; }
    public static string EdmProperty { get; }
    public static string EntitySetBase { get; }
    public static string EntityTypeBase { get; }
    public static string EdmMember { get; }
    public static string EntityContainer { get; }
    public static string MetadataWorkspace { get; }
    public static string get_EdmFunction();
    public static string get_FunctionParameter();
    public static string get_TypeUsage();
    public static string get_EdmType();
    public static string get_ComplexType();
    public static string get_EdmProperty();
    public static string get_EntitySetBase();
    public static string get_EntityTypeBase();
    public static string get_EdmMember();
    public static string get_EntityContainer();
    public static string get_MetadataWorkspace();
}
public class DevExpress.Entity.Model.Metadata.EdmFunctionInfo : RuntimeWrapper {
    public string Name { get; }
    public FunctionParameterInfo[] Parameters { get; }
    public EdmComplexTypePropertyInfo[] ResultTypeProperties { get; }
    public EdmFunctionInfo(object source);
    public string get_Name();
    public FunctionParameterInfo[] get_Parameters();
    public EdmComplexTypePropertyInfo[] get_ResultTypeProperties();
}
public class DevExpress.Entity.Model.Metadata.EdmMemberInfo : RuntimeWrapper {
    public string Name { get; }
    public bool IsProperty { get; }
    public bool IsNavigationProperty { get; }
    public bool IsCollectionProperty { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public object FromEndMember { get; }
    public bool IsKeyMember { get; }
    internal object ToEndMember { get; }
    internal object DeclaringType { get; }
    public IPrimitiveType PrimitiveType { get; }
    public EdmMemberInfo(object member);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsProperty();
    public sealed virtual bool get_IsNavigationProperty();
    public sealed virtual bool get_IsCollectionProperty();
    public sealed virtual BuiltInTypeKind get_BuiltInTypeKind();
    public AssociationTypeInfo GetAssociationType();
    public sealed virtual object get_FromEndMember();
    public sealed virtual bool get_IsKeyMember();
    internal object get_ToEndMember();
    internal object get_DeclaringType();
    public sealed virtual IPrimitiveType get_PrimitiveType();
}
public class DevExpress.Entity.Model.Metadata.EdmTypeInfo : RuntimeWrapper {
    private TypeUsageInfo typeUsageInfo;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public Type ClrType { get; }
    public string Name { get; }
    public IEdmTypeInfo CollectionElementType { get; }
    public EdmTypeInfo(object value);
    public sealed virtual BuiltInTypeKind get_BuiltInTypeKind();
    public sealed virtual Type get_ClrType();
    public sealed virtual string get_Name();
    public sealed virtual IEdmTypeInfo get_CollectionElementType();
}
public class DevExpress.Entity.Model.Metadata.EmptyDataColumnAttributesProvider : object {
    public sealed virtual DataColumnAttributes GetAtrributes(PropertyDescriptor property, Type ownerType);
}
public class DevExpress.Entity.Model.Metadata.EntityContainerInfo : RuntimeWrapper {
    private IDataColumnAttributesProvider dataColumnAttributesProvider;
    private List`1<IEntitySetInfo> entitySets;
    private List`1<IEntityFunctionInfo> entityFunctions;
    private List`1<AssociationTypeInfo> associationTypesFromCSpace;
    private IMapper mapper;
    private EntityTypeInfoFactory entityTypeInfoFactory;
    public string Name { get; }
    public IMapper Mapper { get; }
    public ICollection`1<IEntitySetInfo> BaseEntitySets { get; }
    public IEnumerable`1<IEntitySetInfo> EntitySets { get; }
    public IEnumerable`1<IEntityFunctionInfo> EntityFunctions { get; }
    public EntityContainerInfo(object entityContainer, IMapper mapper, IDataColumnAttributesProvider dataColumnAttributesProvider, EntityTypeInfoFactory entityTypeInfoFactory);
    public sealed virtual string get_Name();
    public IMapper get_Mapper();
    private sealed virtual override AssociationTypeInfo DevExpress.Entity.Model.Metadata.IAssociationTypeSource.GetAssociationTypeFromCSpace(string fullName);
    private void InitEntitySets();
    private void InitEntityFunctions();
    private void AddEntitySet(EntitySetBaseInfo entitySet);
    public ICollection`1<IEntitySetInfo> get_BaseEntitySets();
    public sealed virtual IEnumerable`1<IEntitySetInfo> get_EntitySets();
    public sealed virtual IEnumerable`1<IEntityFunctionInfo> get_EntityFunctions();
}
public class DevExpress.Entity.Model.Metadata.EntityFunctionInfo : object {
    private EdmFunctionInfo functionInfo;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IFunctionParameterInfo[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmComplexTypePropertyInfo[] <ResultTypeProperties>k__BackingField;
    public string Name { get; private set; }
    public IFunctionParameterInfo[] Parameters { get; private set; }
    public IEdmComplexTypePropertyInfo[] ResultTypeProperties { get; private set; }
    public EntityFunctionInfo(EdmFunctionInfo functionInfo);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFunctionParameterInfo[] get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(IFunctionParameterInfo[] value);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmComplexTypePropertyInfo[] get_ResultTypeProperties();
    [CompilerGeneratedAttribute]
private void set_ResultTypeProperties(IEdmComplexTypePropertyInfo[] value);
}
public class DevExpress.Entity.Model.Metadata.EntitySetBaseInfo : RuntimeWrapper {
    private EntityTypeBaseInfo elementType;
    public EntityTypeBaseInfo ElementType { get; }
    public string Name { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public EntitySetBaseInfo(object source);
    public EntityTypeBaseInfo get_ElementType();
    public string get_Name();
    public BuiltInTypeKind get_BuiltInTypeKind();
}
internal class DevExpress.Entity.Model.Metadata.EntitySetInfo : EntitySetInfoBase {
    protected EntitySetBaseInfo entitySetBase;
    public bool IsView { get; }
    public string Name { get; }
    public EntitySetInfo(EntitySetBaseInfo entitySet, IEntityContainerInfo entityContainerInfo, IDataColumnAttributesProvider dataColumnAttributesProvider, EntityTypeInfoFactory entityTypeInfoFactory);
    public virtual bool get_IsView();
    public virtual string get_Name();
}
public abstract class DevExpress.Entity.Model.Metadata.EntitySetInfoBase : object {
    private IDataColumnAttributesProvider dataColumnAttributesProvider;
    private EntityTypeInfoFactory entityTypeInfoFactory;
    protected IEntityTypeInfo elementTypeInfo;
    [CompilerGeneratedAttribute]
private IEntityContainerInfo <EntityContainerInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityTypeBaseInfo <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <AttachedInfo>k__BackingField;
    protected IDataColumnAttributesProvider DataColumnAttributesProvider { get; }
    public bool IsAbstract { get; }
    public IEntityTypeInfo ElementType { get; }
    public IEntityContainerInfo EntityContainerInfo { get; private set; }
    public EntityTypeBaseInfo EntityType { get; private set; }
    public bool IsView { get; }
    public string Name { get; }
    public bool ReadOnly { get; }
    protected IMapper Mapper { get; }
    public Dictionary`2<string, object> AttachedInfo { get; private set; }
    protected EntitySetInfoBase(EntityTypeBaseInfo entityType, IEntityContainerInfo entityContainerInfo, IDataColumnAttributesProvider dataColumnAttributesProvider, EntityTypeInfoFactory entityTypeInfoFactory);
    protected IDataColumnAttributesProvider get_DataColumnAttributesProvider();
    public bool get_IsAbstract();
    public sealed virtual IEntityTypeInfo get_ElementType();
    [CompilerGeneratedAttribute]
public sealed virtual IEntityContainerInfo get_EntityContainerInfo();
    [CompilerGeneratedAttribute]
private void set_EntityContainerInfo(IEntityContainerInfo value);
    [CompilerGeneratedAttribute]
public EntityTypeBaseInfo get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(EntityTypeBaseInfo value);
    public virtual bool get_IsView();
    public virtual string get_Name();
    public sealed virtual bool get_ReadOnly();
    protected IMapper get_Mapper();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_AttachedInfo();
    [CompilerGeneratedAttribute]
private void set_AttachedInfo(Dictionary`2<string, object> value);
}
internal class DevExpress.Entity.Model.Metadata.EntitySetInfoProxy : EntitySetInfoBase {
    protected string name;
    private IPluralizationService pluralizationService;
    public string Name { get; }
    public EntitySetInfoProxy(EntityTypeBaseInfo entityType, IEntityContainerInfo entityContainerInfo, IDataColumnAttributesProvider dataColumnAttributesProvider, IPluralizationService pluralizationService, EntityTypeInfoFactory entityTypeInfoFactory);
    public virtual string get_Name();
}
public class DevExpress.Entity.Model.Metadata.EntityTypeBaseInfo : RuntimeWrapper {
    private IEnumerable`1<EdmMemberInfo> properties;
    private IEnumerable`1<EdmMemberInfo> navigationProperties;
    private IEnumerable`1<EdmMemberInfo> keyMembers;
    public object BaseType { get; }
    public string FullName { get; }
    public string Name { get; }
    public bool Abstract { get; }
    public string BaseTypeFullName { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public IEnumerable`1<EdmMemberInfo> Properties { get; }
    public IEnumerable`1<EdmMemberInfo> NavigationProperties { get; }
    public IEnumerable`1<EdmMemberInfo> KeyMembers { get; }
    public EntityTypeBaseInfo(object source);
    public object get_BaseType();
    public string get_FullName();
    public string get_Name();
    public bool get_Abstract();
    public string get_BaseTypeFullName();
    public BuiltInTypeKind get_BuiltInTypeKind();
    public IEnumerable`1<EdmMemberInfo> get_Properties();
    public IEnumerable`1<EdmMemberInfo> get_NavigationProperties();
    public IEnumerable`1<EdmMemberInfo> get_KeyMembers();
}
public class DevExpress.Entity.Model.Metadata.EntityTypeInfo : object {
    private ICollection`1<IEdmPropertyInfo> keyMembers;
    private ICollection`1<IEdmPropertyInfo> properties;
    private ICollection`1<IEdmAssociationPropertyInfo> lookupTables;
    private Dictionary`2<string, string> foreignKeysNames;
    private Dictionary`2<IEdmPropertyInfo, IEdmPropertyInfo> foreignKeyDependentProperties;
    private IDataColumnAttributesProvider attributesProvider;
    private IMapper mapper;
    private EntityTypeBaseInfo entityType;
    private Type type;
    private EntityTypeInfoFactory entityTypeInfoFactory;
    [CompilerGeneratedAttribute]
private IAssociationTypeSource <AssociationTypeSource>k__BackingField;
    public Dictionary`2<string, string> ForeignKeysNames { get; }
    public IAssociationTypeSource AssociationTypeSource { get; private set; }
    public EntityTypeBaseInfo EntityType { get; }
    private Type DevExpress.Entity.Model.IEntityTypeInfo.Type { get; }
    private IEnumerable`1<IEdmPropertyInfo> DevExpress.Entity.Model.IEntityProperties.AllProperties { get; }
    private IEnumerable`1<IEdmPropertyInfo> PropertiesCore { get; }
    private IEnumerable`1<IEdmPropertyInfo> DevExpress.Entity.Model.IEntityTypeInfo.KeyMembers { get; }
    public IEnumerable`1<IEdmAssociationPropertyInfo> LookupTables { get; }
    public EntityTypeInfo(EntityTypeBaseInfo entityType, Type clrType, IAssociationTypeSource associationTypeSource, IMapper mapper, IDataColumnAttributesProvider attributesProvider, EntityTypeInfoFactory entityTypeInfoFactory);
    public Dictionary`2<string, string> get_ForeignKeysNames();
    [CompilerGeneratedAttribute]
public IAssociationTypeSource get_AssociationTypeSource();
    [CompilerGeneratedAttribute]
private void set_AssociationTypeSource(IAssociationTypeSource value);
    public EntityTypeBaseInfo get_EntityType();
    private void Init();
    protected virtual bool IsValidLookUpTableProperty(IEdmAssociationPropertyInfo property);
    public sealed virtual IEdmPropertyInfo GetDependentProperty(IEdmPropertyInfo foreignKey);
    public sealed virtual IEdmPropertyInfo GetForeignKey(IEdmPropertyInfo dependentProperty);
    private void InitForeignKeyDependencies();
    private IEnumerable`1<EdmMemberInfo> GetDependentProperties(IEntityTypeInfo declaringType, EdmMemberInfo navigationProperty);
    private IEnumerable`1<EdmMemberInfo> GetToEndProperties(IEntityTypeInfo declaringType, EdmMemberInfo navigationProperty, EntityTypeBaseInfo toEndEntityTypeInfo);
    private IEnumerable`1<string> GetDependentPropertyNames(IEntityTypeInfo declaringType, EdmMemberInfo navigationProperty);
    private Type GetClrType(EntityTypeBaseInfo entityType, IMapper mapper);
    [IteratorStateMachineAttribute("DevExpress.Entity.Model.Metadata.EntityTypeInfo/<GetProperties>d__28")]
private IEnumerable`1<EdmMemberInfo> GetProperties();
    private IEnumerable`1<EdmMemberInfo> GetSortedProperties();
    protected virtual IEdmAssociationPropertyInfo CreateAssociationPropertyInfo(Type type, EdmMemberInfo edmProperty, bool isForeignKey, bool isNavigationProperty);
    protected virtual EdmPropertyInfo CreateEdmPropertyInfo(Type type, EdmMemberInfo edmProperty, bool isForeignKey, bool isNavigationProperty);
    private sealed virtual override Type DevExpress.Entity.Model.IEntityTypeInfo.get_Type();
    private sealed virtual override IEnumerable`1<IEdmPropertyInfo> DevExpress.Entity.Model.IEntityProperties.get_AllProperties();
    private IEnumerable`1<IEdmPropertyInfo> get_PropertiesCore();
    private sealed virtual override IEnumerable`1<IEdmPropertyInfo> DevExpress.Entity.Model.IEntityTypeInfo.get_KeyMembers();
    public sealed virtual IEnumerable`1<IEdmAssociationPropertyInfo> get_LookupTables();
}
public class DevExpress.Entity.Model.Metadata.EntityTypeInfoFactory : object {
    public virtual IEntityTypeInfo Create(EntityTypeBaseInfo entityType, IAssociationTypeSource associationTypeSource, IMapper mapper, IDataColumnAttributesProvider attributesProvider);
}
public class DevExpress.Entity.Model.Metadata.FunctionParameterInfo : RuntimeWrapper {
    public string Name { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public string TypeName { get; }
    public IEdmTypeInfo EdmType { get; }
    public Type ClrType { get; }
    internal EdmComplexTypePropertyInfo[] ResultTypeProperties { get; }
    public FunctionParameterInfo(object source);
    public sealed virtual string get_Name();
    public sealed virtual BuiltInTypeKind get_BuiltInTypeKind();
    public sealed virtual string get_TypeName();
    public sealed virtual IEdmTypeInfo get_EdmType();
    public sealed virtual Type get_ClrType();
    internal EdmComplexTypePropertyInfo[] get_ResultTypeProperties();
}
public interface DevExpress.Entity.Model.Metadata.IAssociationTypeSource {
    public abstract virtual AssociationTypeInfo GetAssociationTypeFromCSpace(string fullName);
}
public interface DevExpress.Entity.Model.Metadata.IDataColumnAttributesProvider {
    public abstract virtual DataColumnAttributes GetAtrributes(PropertyDescriptor property, Type ownerType);
}
public interface DevExpress.Entity.Model.Metadata.IMapper {
    public abstract virtual bool HasView(EntitySetBaseInfo entitySetBase);
    public abstract virtual EntityTypeBaseInfo GetMappedOSpaceType(EntityTypeBaseInfo cSpaceType);
    public abstract virtual Type ResolveClrType(EntityTypeBaseInfo cSpaceType);
}
public interface DevExpress.Entity.Model.Metadata.IPluralizationService {
    public abstract virtual string GetPluralizedName(string name);
}
public class DevExpress.Entity.Model.Metadata.Mapper : object {
    private IEnumerable`1<EdmTypeInfo> oSpaceEdmTypes;
    private IEnumerable`1<EntitySetBaseInfo> cViews;
    private TypesCollector typesCollector;
    [CompilerGeneratedAttribute]
private IEnumerable`1<EntityTypeBaseInfo> <CEntityTypes>k__BackingField;
    public IEnumerable`1<EntityTypeBaseInfo> CEntityTypes { get; public set; }
    public Mapper(MetadataWorkspaceInfo mw, TypesCollector typesCollector);
    private StoreItemCollection GetSsdlFromDirectory(string directoryPath);
    private void RegisterMetadataWorkspace(MetadataWorkspaceInfo mw);
    [CompilerGeneratedAttribute]
public IEnumerable`1<EntityTypeBaseInfo> get_CEntityTypes();
    [CompilerGeneratedAttribute]
public void set_CEntityTypes(IEnumerable`1<EntityTypeBaseInfo> value);
    private void RegisterCSpaceItems(MetadataWorkspaceInfo mw);
    public IEnumerable`1<EntityTypeBaseInfo> GetUndeclaredTypesFormHierarchy(IEnumerable`1<EntityTypeBaseInfo> declaredDbSetsTypes);
    private void InitAllDescendants(EntityTypeBaseInfo type, Dictionary`2<string, EntityTypeBaseInfo> types);
    private void RegisterSSpaceItems(MetadataWorkspaceInfo mw);
    private bool IsView(object set);
    private static string GetPropertyValueByName(IEnumerable`1<object> metadataProperties, string propertyName);
    private void RegisterOSpaceItems(IEnumerable`1<object> oSpaceItems);
    private sealed virtual override EntityTypeBaseInfo DevExpress.Entity.Model.Metadata.IMapper.GetMappedOSpaceType(EntityTypeBaseInfo cSpaceType);
    private sealed virtual override bool DevExpress.Entity.Model.Metadata.IMapper.HasView(EntitySetBaseInfo entitySetBase);
    private sealed virtual override Type DevExpress.Entity.Model.Metadata.IMapper.ResolveClrType(EntityTypeBaseInfo cSpaceType);
    internal IEnumerable`1<EntityTypeBaseInfo> GetDescendatns(EntityTypeBaseInfo entityType);
    private sealed virtual override string DevExpress.Entity.Model.Metadata.IPluralizationService.GetPluralizedName(string name);
    protected virtual string GetPluralizedNameCore(string name);
}
public class DevExpress.Entity.Model.Metadata.MetadataWorkspaceInfo : RuntimeWrapper {
    protected bool CheckOnlyTypeName { get; }
    public MetadataWorkspaceInfo(object value);
    protected virtual bool get_CheckOnlyTypeName();
    public IEnumerable`1<object> GetItems(DataSpace dataSpace);
}
public class DevExpress.Entity.Model.Metadata.MethodAccessor : object {
    private object source;
    private Type sourceType;
    private MethodInfo method;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    private MethodAccessor(string name);
    public MethodAccessor(object source, string name);
    public MethodAccessor(Type sourceType, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public object Invoke(Func`1<Object[]> argumentsSource);
    public object Invoke(object target, Func`1<Object[]> argumentsSource);
    [CompilerGeneratedAttribute]
private bool <Invoke>b__11_0(MethodInfo x);
}
internal class DevExpress.Entity.Model.Metadata.NestedPropertyAccessor : PropertyAccessor {
    private string fullName;
    private NestedPropertyAccessor nestedProperty;
    private bool IsComplex { get; }
    public object Value { get; }
    public NestedPropertyAccessor(object source, string fullName);
    public NestedPropertyAccessor(string fullName, Type sourceType);
    private bool get_IsComplex();
    private static string GetCurrentLevelPropertyName(string name);
    private string GetNestedPropertyName();
    public virtual object get_Value();
}
public class DevExpress.Entity.Model.Metadata.PrimitiveType : RuntimeWrapper {
    public Type ClrEquivalentType { get; }
    public PrimitiveType(object value);
    public sealed virtual Type get_ClrEquivalentType();
}
public class DevExpress.Entity.Model.Metadata.PropertyAccessor : object {
    private object source;
    private Type sourceType;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    protected PropertyInfo Property { get; protected set; }
    public string Name { get; private set; }
    public object Value { get; }
    private PropertyAccessor(string name);
    public PropertyAccessor(object source, string name);
    public PropertyAccessor(string name, Type sourceType);
    [CompilerGeneratedAttribute]
protected PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
protected void set_Property(PropertyInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual object get_Value();
    public virtual string ToString();
    public static bool IsComplexPropertyName(string fullName);
    public static object GetValue(object source, string name);
    [CompilerGeneratedAttribute]
private bool <get_Value>b__14_0(PropertyInfo x);
}
public class DevExpress.Entity.Model.Metadata.RuntimeBase : object {
    private object value;
    public object Value { get; }
    protected RuntimeBase(object value);
    public sealed virtual object get_Value();
    public virtual int GetHashCode();
    public static bool op_Equality(RuntimeBase r1, RuntimeBase r2);
    public static bool op_Inequality(RuntimeBase r1, RuntimeBase r2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public abstract class DevExpress.Entity.Model.Metadata.RuntimeWrapper : RuntimeBase {
    private string expectedTypeName;
    private Dictionary`2<string, PropertyAccessor> properties;
    private Dictionary`2<string, MethodAccessor> methodAccessors;
    protected Type Type { get; }
    protected bool CheckOnlyTypeName { get; }
    protected RuntimeWrapper(string expectedTypeName, object value);
    public static TTargetType ConvertEnum(object source);
    private void CheckTypeName();
    public static bool IsTypeNamesMatch(Type targetType, string expectedTypeName, bool throwOnError);
    public static bool IsTypeMatch(Type targetType, string expectedTypeName, bool throwOnError);
    protected Type get_Type();
    protected virtual bool get_CheckOnlyTypeName();
    protected PropertyAccessor GetPropertyAccessor(string name);
    protected MethodAccessor GetMethodAccessor(string name);
}
public class DevExpress.Entity.Model.Metadata.TypeUsageInfo : RuntimeWrapper {
    private EdmTypeInfo edmType;
    public EdmTypeInfo EdmType { get; }
    public IEdmTypeInfo CollectionElementType { get; }
    public string Name { get; }
    public Type ClrType { get; }
    public TypeUsageInfo(object source);
    public EdmTypeInfo get_EdmType();
    public IEdmTypeInfo get_CollectionElementType();
    public string get_Name();
    public Type get_ClrType();
}
public class DevExpress.Entity.Model.ProviderNotSupportedException : Exception {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    public string ProviderName { get; public set; }
    public ProviderNotSupportedException(string providerName);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
}
public class DevExpress.Entity.Model.TypesCollector : object {
    [CompilerGeneratedAttribute]
private string <SqlProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDXTypeInfo <MetadataHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private IDXTypeInfo <IObjectContextAdapter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDXTypeInfo <DbSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IDXTypeInfo <DbSetFinder>k__BackingField;
    [CompilerGeneratedAttribute]
private IDXTypeInfo <DbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DbContextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DbContextOptionsT>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DbContextOptionsBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DbContextOptionsBuilderT>k__BackingField;
    [CompilerGeneratedAttribute]
private IDXTypeInfo <SqlCeConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDXTypeInfo <DbDescendantInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DbContextType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DbDescendantType>k__BackingField;
    private bool IsCollected { get; }
    public string SqlProvider { get; private set; }
    public IDXTypeInfo MetadataHelper { get; protected set; }
    public Type Database { get; protected set; }
    public IDXTypeInfo IObjectContextAdapter { get; private set; }
    public IDXTypeInfo DbSet { get; private set; }
    public IDXTypeInfo DbSetFinder { get; private set; }
    public IDXTypeInfo DbContext { get; private set; }
    public Type DbContextOptions { get; private set; }
    public Type DbContextOptionsT { get; private set; }
    public Type DbContextOptionsBuilder { get; private set; }
    public Type DbContextOptionsBuilderT { get; private set; }
    public IDXTypeInfo SqlCeConnection { get; public set; }
    public IDXTypeInfo DbDescendantInfo { get; private set; }
    public Type DbContextType { get; private set; }
    public Type DbDescendantType { get; private set; }
    private TypesCollector(Type type);
    public TypesCollector(IDXTypeInfo typeInfo);
    private void Init(Type type);
    private void InitializeDbContextForEFCore(Type type);
    private void TryLoadSqlCeServer();
    private void InitSystemDataEntityTypes();
    private void TryInitFrameworkTypes(Type type);
    private bool get_IsCollected();
    [CompilerGeneratedAttribute]
public string get_SqlProvider();
    [CompilerGeneratedAttribute]
private void set_SqlProvider(string value);
    [CompilerGeneratedAttribute]
public IDXTypeInfo get_MetadataHelper();
    [CompilerGeneratedAttribute]
protected void set_MetadataHelper(IDXTypeInfo value);
    [CompilerGeneratedAttribute]
public Type get_Database();
    [CompilerGeneratedAttribute]
protected void set_Database(Type value);
    [CompilerGeneratedAttribute]
public IDXTypeInfo get_IObjectContextAdapter();
    [CompilerGeneratedAttribute]
private void set_IObjectContextAdapter(IDXTypeInfo value);
    [CompilerGeneratedAttribute]
public IDXTypeInfo get_DbSet();
    [CompilerGeneratedAttribute]
private void set_DbSet(IDXTypeInfo value);
    [CompilerGeneratedAttribute]
public IDXTypeInfo get_DbSetFinder();
    [CompilerGeneratedAttribute]
private void set_DbSetFinder(IDXTypeInfo value);
    [CompilerGeneratedAttribute]
public IDXTypeInfo get_DbContext();
    [CompilerGeneratedAttribute]
private void set_DbContext(IDXTypeInfo value);
    [CompilerGeneratedAttribute]
public Type get_DbContextOptions();
    [CompilerGeneratedAttribute]
private void set_DbContextOptions(Type value);
    [CompilerGeneratedAttribute]
public Type get_DbContextOptionsT();
    [CompilerGeneratedAttribute]
private void set_DbContextOptionsT(Type value);
    [CompilerGeneratedAttribute]
public Type get_DbContextOptionsBuilder();
    [CompilerGeneratedAttribute]
private void set_DbContextOptionsBuilder(Type value);
    [CompilerGeneratedAttribute]
public Type get_DbContextOptionsBuilderT();
    [CompilerGeneratedAttribute]
private void set_DbContextOptionsBuilderT(Type value);
    [CompilerGeneratedAttribute]
public IDXTypeInfo get_SqlCeConnection();
    [CompilerGeneratedAttribute]
public void set_SqlCeConnection(IDXTypeInfo value);
    [CompilerGeneratedAttribute]
public IDXTypeInfo get_DbDescendantInfo();
    [CompilerGeneratedAttribute]
private void set_DbDescendantInfo(IDXTypeInfo value);
    [CompilerGeneratedAttribute]
public Type get_DbContextType();
    [CompilerGeneratedAttribute]
private void set_DbContextType(Type value);
    [CompilerGeneratedAttribute]
public Type get_DbDescendantType();
    [CompilerGeneratedAttribute]
private void set_DbDescendantType(Type value);
}
public class DevExpress.Entity.ProjectModel.DXAssemblyInfo : HasTypesCacheBase {
    private string assemblyFullName;
    private EdmxResources edmxResources;
    private ResourceOptions resourceOptions;
    private string name;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProjectAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IResourceOptions <ResourceOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSolutionAssembly>k__BackingField;
    private EdmxResources EdmxResources { get; }
    public Assembly Assembly { get; private set; }
    public string AssemblyFullName { get; }
    public bool IsProjectAssembly { get; private set; }
    public IResourceOptions ResourceOptions { get; private set; }
    public bool IsSolutionAssembly { get; private set; }
    public string Name { get; }
    public DXAssemblyInfo(string assemblyFullName, bool isProjectAssembly, bool isSolutionAssembly, IResourceOptions resourceOptions);
    public DXAssemblyInfo(Assembly assembly, bool isProjectAssembly, bool isSolutionAssembly, IResourceOptions resourceOptions, Type[] type);
    public DXAssemblyInfo(IDXAssemblyInfo dxAssemblyInfo);
    private EdmxResources get_EdmxResources();
    public EdmxResource GetEdmxResource(IDXTypeInfo typeInfo);
    private void AddTypes(IEnumerable`1<Type> types);
    public virtual void Add(IDXTypeInfo typeInfo);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(Assembly value);
    public sealed virtual string get_AssemblyFullName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsProjectAssembly();
    [CompilerGeneratedAttribute]
private void set_IsProjectAssembly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IResourceOptions get_ResourceOptions();
    [CompilerGeneratedAttribute]
private void set_ResourceOptions(IResourceOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSolutionAssembly();
    [CompilerGeneratedAttribute]
private void set_IsSolutionAssembly(bool value);
    public sealed virtual string get_Name();
}
public class DevExpress.Entity.ProjectModel.DXFieldInfo : DXMemberInfo {
    [CompilerGeneratedAttribute]
private IDXTypeInfo <FieldType>k__BackingField;
    public IDXTypeInfo FieldType { get; private set; }
    public DXFieldInfo(FieldInfo fieldInfo);
    public DXFieldInfo(string name, IDXTypeInfo fieldType);
    [CompilerGeneratedAttribute]
public sealed virtual IDXTypeInfo get_FieldType();
    [CompilerGeneratedAttribute]
private void set_FieldType(IDXTypeInfo value);
}
public class DevExpress.Entity.ProjectModel.DXMemberInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public DXMemberInfo(MemberInfo memberInfo);
    public DXMemberInfo(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public class DevExpress.Entity.ProjectModel.DXMethodInfo : DXMemberInfo {
    [CompilerGeneratedAttribute]
private IDXTypeInfo <ReturnType>k__BackingField;
    public IDXTypeInfo ReturnType { get; private set; }
    public DXMethodInfo(string name, IDXTypeInfo returnType);
    public DXMethodInfo(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IDXTypeInfo get_ReturnType();
    [CompilerGeneratedAttribute]
private void set_ReturnType(IDXTypeInfo value);
}
public class DevExpress.Entity.ProjectModel.DXPropertyInfo : DXMemberInfo {
    [CompilerGeneratedAttribute]
private IDXTypeInfo <PropertyType>k__BackingField;
    public IDXTypeInfo PropertyType { get; private set; }
    public DXPropertyInfo(PropertyInfo propertyInfo);
    public DXPropertyInfo(string name, IDXTypeInfo propertyType);
    [CompilerGeneratedAttribute]
public sealed virtual IDXTypeInfo get_PropertyType();
    [CompilerGeneratedAttribute]
private void set_PropertyType(IDXTypeInfo value);
}
public class DevExpress.Entity.ProjectModel.DXTypeInfo : object {
    protected Type type;
    [CompilerGeneratedAttribute]
private IDXAssemblyInfo <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeclaringTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    public IDXAssemblyInfo Assembly { get; public set; }
    public string Name { get; private set; }
    public string DeclaringTypeName { get; private set; }
    public string NamespaceName { get; private set; }
    public string FullName { get; }
    public bool IsSolutionType { get; }
    public DXTypeInfo(Type type);
    public DXTypeInfo(string name, string namespaceName);
    public DXTypeInfo(string name, string declaringTypeName, string namespaceName);
    [CompilerGeneratedAttribute]
public sealed virtual IDXAssemblyInfo get_Assembly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Assembly(IDXAssemblyInfo value);
    public sealed virtual Type ResolveType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DeclaringTypeName();
    [CompilerGeneratedAttribute]
private void set_DeclaringTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NamespaceName();
    [CompilerGeneratedAttribute]
private void set_NamespaceName(string value);
    public virtual string get_FullName();
    public static string GetFullName(string namespaceName, string name);
    public static string GetFullName(string namespaceName, string declaringTypeName, string name);
    public sealed virtual bool get_IsSolutionType();
}
public class DevExpress.Entity.ProjectModel.EdmxResource : object {
    public static string CsdlExtension;
    public static string SsdlExtension;
    public static string MslExtension;
    public static string EntityContainerTagName;
    public static string MslContainerTagName;
    public static string TagNameAttribute;
    public static string Msl_CsdlContainerAttributeName;
    public static string Msl_SsdlContainerAttributeName;
    private List`1<Stream> csdlStreams;
    private List`1<Stream> mslStreams;
    private List`1<Stream> ssdlStreams;
    [CompilerGeneratedAttribute]
private bool <HasCsdlContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSsdlContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMslContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsdlContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SsdlContainerName>k__BackingField;
    public bool HasCsdlContainer { get; public set; }
    public bool HasSsdlContainer { get; public set; }
    public bool HasMslContainer { get; public set; }
    public List`1<Stream> SsdlStreams { get; }
    private string DefaultFileName { get; }
    public string CsdlContainerName { get; public set; }
    public string SsdlContainerName { get; public set; }
    public EdmxResource(string csdlContainerName, string ssdlContainerName);
    public static EdmxResource GetEdmxResource(IDXTypeInfo typeInfo);
    public static void GetContainerNamesFromMsl(Stream mslStream, String& csdlContainerName, String& ssdlContainerName);
    private static string GetAttributeValue(XmlDocument xmlDocument, string tagName, string atrributeName);
    public static string GetEntityContainerName(Stream stream);
    [CompilerGeneratedAttribute]
public void set_HasCsdlContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasCsdlContainer();
    [CompilerGeneratedAttribute]
public void set_HasSsdlContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasSsdlContainer();
    [CompilerGeneratedAttribute]
public void set_HasMslContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasMslContainer();
    public List`1<Stream> get_SsdlStreams();
    public void AddCsdlContainerStream(Stream stream);
    public void AddSsdlContainerStream(Stream stream);
    public void AddMslContainerStream(Stream stream);
    public void AddCsdlStream(Stream stream);
    public void AddSsdlStream(Stream stream);
    public void AddMslStream(Stream stream);
    private void AddStream(List`1& streams, Stream stream);
    private string get_DefaultFileName();
    public void WriteResources(string path);
    public void WriteResources(string path, SchemaAttributeValues values);
    private void WriteResourcesCore(string path, string fileName, SchemaAttributeValues values);
    private void WriteResources(List`1<Stream> streams, string path, string extension);
    private void WriteResources(List`1<Stream> streams, string path, string extension, SchemaAttributeValues values);
    private void WriteResourceFile(Stream stream, string path, SchemaAttributeValues values);
    [CompilerGeneratedAttribute]
public void set_CsdlContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_CsdlContainerName();
    [CompilerGeneratedAttribute]
public void set_SsdlContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_SsdlContainerName();
    public string SetProvider(string xml, SchemaAttributeValues values);
    public string GetProviderName();
    protected virtual string Format(XmlDocument document);
    private XmlElement FindRecursive(XmlElement element, Predicate`1<XmlElement> predicate);
    [IteratorStateMachineAttribute("DevExpress.Entity.ProjectModel.EdmxResource/<FindElementsRecursive>d__58")]
private IEnumerable`1<XmlElement> FindElementsRecursive(XmlElement element, Predicate`1<XmlElement> predicate);
}
internal class DevExpress.Entity.ProjectModel.EdmxResources : object {
    private Dictionary`2<string, EdmxResource> csdlEdmxResources;
    private Dictionary`2<string, EdmxResource> ssdlEdmxResources;
    private ResourceOptions options;
    public EdmxResources(Assembly asm);
    public EdmxResources(Assembly asm, ResourceOptions options);
    public EdmxResource GetEdmxResource(string typeName);
    private static MemoryStream GetMemoryStream(Stream stream);
    private void AddMslResourceByContainersNames(Stream stream);
    private void AddCsdlResourceByContainer(Stream stream);
    private void AddSsdlResourceByContainer(Stream stream);
    private void AddResourceByContainerName(Dictionary`2<string, EdmxResource> resources, Stream stream, Action`2<EdmxResource, Stream> addStream);
    private void Init(Assembly asm);
    private void InitResources(Assembly asm, string extension, Action`1<Stream> addResource);
    private void InitExternalResources(string extension, Action`1<Stream> addResource);
    private void InitExternalResources(string directoryPath, string extension, Action`1<Stream> addResource);
    private void InitEmbededResources(Assembly asm, string extension, Action`1<Stream> addResource);
}
public class DevExpress.Entity.ProjectModel.HasTypesCacheBase : object {
    private Dictionary`2<string, IDXTypeInfo> cache;
    protected Dictionary`2<string, IDXTypeInfo> Cache { get; }
    protected bool IsCacheEmpty { get; }
    public IEnumerable`1<IDXTypeInfo> TypesInfo { get; }
    public sealed virtual void ClearCache();
    protected Dictionary`2<string, IDXTypeInfo> get_Cache();
    protected bool get_IsCacheEmpty();
    public void AddRange(IEnumerable`1<IDXTypeInfo> typesInfo);
    public virtual void Add(IDXTypeInfo typeInfo);
    public sealed virtual IEnumerable`1<IDXTypeInfo> get_TypesInfo();
    public sealed virtual bool Contains(IDXTypeInfo typeInfo);
    public sealed virtual IDXTypeInfo GetTypeInfo(string fullName);
    public sealed virtual void Remove(IDXTypeInfo typeInfo);
}
public interface DevExpress.Entity.ProjectModel.IContainerBuilder {
    public abstract virtual IDbContainerInfo Build(IDXTypeInfo info, ISolutionTypesProvider typesProvider);
}
public interface DevExpress.Entity.ProjectModel.IDXAssemblyInfo {
    public string AssemblyFullName { get; }
    public IEnumerable`1<IDXTypeInfo> TypesInfo { get; }
    public bool IsProjectAssembly { get; }
    public IResourceOptions ResourceOptions { get; }
    public bool IsSolutionAssembly { get; }
    public abstract virtual string get_AssemblyFullName();
    public abstract virtual IEnumerable`1<IDXTypeInfo> get_TypesInfo();
    public abstract virtual bool get_IsProjectAssembly();
    public abstract virtual IResourceOptions get_ResourceOptions();
    public abstract virtual bool get_IsSolutionAssembly();
}
public interface DevExpress.Entity.ProjectModel.IDXFieldInfo {
    public IDXTypeInfo FieldType { get; }
    public abstract virtual IDXTypeInfo get_FieldType();
}
public interface DevExpress.Entity.ProjectModel.IDXMemberInfo {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface DevExpress.Entity.ProjectModel.IDXMethodInfo {
    public IDXTypeInfo ReturnType { get; }
    public abstract virtual IDXTypeInfo get_ReturnType();
}
public interface DevExpress.Entity.ProjectModel.IDXPropertyInfo {
    public IDXTypeInfo PropertyType { get; }
    public abstract virtual IDXTypeInfo get_PropertyType();
}
public interface DevExpress.Entity.ProjectModel.IDXTypeInfo {
    public string NamespaceName { get; }
    public string FullName { get; }
    public IDXAssemblyInfo Assembly { get; public set; }
    public bool IsSolutionType { get; }
    public abstract virtual string get_NamespaceName();
    public abstract virtual string get_FullName();
    public abstract virtual Type ResolveType();
    public abstract virtual IDXAssemblyInfo get_Assembly();
    public abstract virtual void set_Assembly(IDXAssemblyInfo value);
    public abstract virtual bool get_IsSolutionType();
}
public interface DevExpress.Entity.ProjectModel.IHasName {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface DevExpress.Entity.ProjectModel.IHasTypesCache {
    public abstract virtual void ClearCache();
    public abstract virtual bool Contains(IDXTypeInfo typeInfo);
    public abstract virtual void Add(IDXTypeInfo typeInfo);
    public abstract virtual void Remove(IDXTypeInfo typeInfo);
    public abstract virtual IDXTypeInfo GetTypeInfo(string fullName);
}
public interface DevExpress.Entity.ProjectModel.IProjectTypes {
    public IEnumerable`1<IDXAssemblyInfo> Assemblies { get; }
    public string ProjectAssemblyName { get; }
    public IDXAssemblyInfo ProjectAssembly { get; }
    public abstract virtual IEnumerable`1<IDXAssemblyInfo> get_Assemblies();
    public abstract virtual string get_ProjectAssemblyName();
    public abstract virtual IDXAssemblyInfo get_ProjectAssembly();
    public abstract virtual IEnumerable`1<IDXAssemblyInfo> GetTypesPerAssembly(Func`2<IDXTypeInfo, bool> filter);
    public abstract virtual IEnumerable`1<IDXTypeInfo> GetTypes(Func`2<IDXTypeInfo, bool> filter);
    public abstract virtual IDXTypeInfo GetExistingOrCreateNew(Type type);
}
public interface DevExpress.Entity.ProjectModel.IResourceOptions {
}
public interface DevExpress.Entity.ProjectModel.ISolutionTypesProvider {
    [ObsoleteAttribute("The ActiveProjectTypes property is obsolete now. Use the CurrentProjectTypes property instead.")]
public IProjectTypes ActiveProjectTypes { get; }
    public IProjectTypes CurrentProjectTypes { get; }
    public abstract virtual IProjectTypes get_ActiveProjectTypes();
    public abstract virtual IProjectTypes get_CurrentProjectTypes();
    public abstract virtual IEnumerable`1<IDXTypeInfo> GetTypes();
    public abstract virtual IDXTypeInfo FindType(string fullName);
    public abstract virtual IDXTypeInfo FindType(Predicate`1<IDXTypeInfo> predicate);
    public abstract virtual IEnumerable`1<IDXTypeInfo> FindTypes(Predicate`1<IDXTypeInfo> predicate);
    public abstract virtual IEnumerable`1<IDXTypeInfo> FindTypes(IDXTypeInfo baseClass, Predicate`1<IDXTypeInfo> predicate);
    public abstract virtual string GetAssemblyReferencePath(string projectAssemblyFullName, string referenceName);
    public abstract virtual IProjectTypes GetProjectTypes(string assemblyFullName);
    public abstract virtual IDXAssemblyInfo GetAssembly(string assemblyName);
    public abstract virtual void AddReferenceFromFile(string assemblyPath);
    public abstract virtual void AddReference(string assemblyName);
    public abstract virtual bool IsReferenceExists(string assemblyName);
}
public class DevExpress.Entity.ProjectModel.MetaDataServices : object {
    [CompilerGeneratedAttribute]
private static ISolutionTypesProvider <SolutionTypesProvider>k__BackingField;
    public static ISolutionTypesProvider SolutionTypesProvider { get; private set; }
    public static bool IsInitialized { get; }
    public static void Initialize(ISolutionTypesProvider solutionTypesProvider);
    public static void Reset();
    [CompilerGeneratedAttribute]
public static ISolutionTypesProvider get_SolutionTypesProvider();
    [CompilerGeneratedAttribute]
private static void set_SolutionTypesProvider(ISolutionTypesProvider value);
    public static bool get_IsInitialized();
    public static IDXTypeInfo GetExistingOrCreateNew(Type type);
}
public class DevExpress.Entity.ProjectModel.ProjectTypes : object {
    private List`1<IDXAssemblyInfo> assemblies;
    private string projectAssemblyName;
    private IEnumerable`1<string> solutionAssemblyNames;
    private bool ignoreAssembliesWithoutLocation;
    [CompilerGeneratedAttribute]
private IResourceOptions <ResourceOptions>k__BackingField;
    public IEnumerable`1<IDXAssemblyInfo> Assemblies { get; }
    public IDXAssemblyInfo ProjectAssembly { get; }
    public IResourceOptions ResourceOptions { get; private set; }
    public string ProjectAssemblyName { get; }
    public ProjectTypes(string projectAssemblyName, IEnumerable`1<string> solutionAssemblyNames, IEnumerable`1<Type> allTypes);
    public ProjectTypes(string projectAssemblyName, IEnumerable`1<string> solutionAssemblyNames, IEnumerable`1<Type> allTypes, IResourceOptions options);
    protected ProjectTypes(string projectAssemblyName, IEnumerable`1<string> solutionAssemblyNames, IEnumerable`1<Type> allTypes, IResourceOptions options, bool ignoreAssembliesWithoutLocation);
    private void Initialize(IEnumerable`1<Type> allTypes);
    [IteratorStateMachineAttribute("DevExpress.Entity.ProjectModel.ProjectTypes/<GetTypes>d__8")]
public sealed virtual IEnumerable`1<IDXTypeInfo> GetTypes(Func`2<IDXTypeInfo, bool> filter);
    [IteratorStateMachineAttribute("DevExpress.Entity.ProjectModel.ProjectTypes/<GetTypesPerAssembly>d__9")]
public sealed virtual IEnumerable`1<IDXAssemblyInfo> GetTypesPerAssembly(Func`2<IDXTypeInfo, bool> filter);
    public sealed virtual IDXTypeInfo GetExistingOrCreateNew(Type type);
    private IDXTypeInfo CreateNew(IDXAssemblyInfo assemblyInfo, Type type);
    private bool IsProjectAssembly(string fullName);
    private bool IsInSolution(string fullName);
    private List`1<IDXAssemblyInfo> GetAllAssemblies(IEnumerable`1<Type> projectTypes);
    private static bool IsValidType(Type type);
    private bool ShouldSkipAssembly(Assembly assembly);
    private static bool IsEntityFramework(string assemblyName);
    private static bool IsEntityFrameworkServer(string assemblyName);
    public sealed virtual IEnumerable`1<IDXAssemblyInfo> get_Assemblies();
    public sealed virtual IDXAssemblyInfo get_ProjectAssembly();
    [CompilerGeneratedAttribute]
private void set_ResourceOptions(IResourceOptions value);
    [CompilerGeneratedAttribute]
public IResourceOptions get_ResourceOptions();
    public sealed virtual string get_ProjectAssemblyName();
    public sealed virtual IEnumerator`1<IDXAssemblyInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Entity.ProjectModel.ResourceOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <ExternalPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessEmbededResources>k__BackingField;
    public List`1<string> ExternalPaths { get; private set; }
    public bool ProcessEmbededResources { get; public set; }
    public static ResourceOptions DefaultOptions { get; }
    public ResourceOptions(bool processEmebedResources, String[] externalPaths);
    public void AddExternalPaths(String[] externalPaths);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExternalPaths();
    [CompilerGeneratedAttribute]
private void set_ExternalPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ProcessEmbededResources();
    [CompilerGeneratedAttribute]
public void set_ProcessEmbededResources(bool value);
    public static ResourceOptions get_DefaultOptions();
}
public abstract class DevExpress.Entity.ProjectModel.SolutionTypesProviderBase : object {
    private IProjectTypes activeProjectTypes;
    private IProjectTypes currentProjectTypes;
    private Dictionary`2<string, IProjectTypes> solutionProjectTypes;
    [ObsoleteAttribute("The ActiveProjectTypes property is obsolete now. Use the CurrentProjectTypes property instead.")]
public IProjectTypes ActiveProjectTypes { get; }
    public IProjectTypes CurrentProjectTypes { get; }
    public sealed virtual IProjectTypes get_ActiveProjectTypes();
    public sealed virtual IProjectTypes get_CurrentProjectTypes();
    [ObsoleteAttribute("The CreateProjectTypes method is obsolete now. Use the CreateCurrentProjectTypes method instead.")]
protected virtual IProjectTypes CreateProjectTypes(string activeProjectAssemblyName, IResourceOptions resourceOptions);
    protected virtual IProjectTypes CreateCurrentProjectTypes(string currentProjectAssemblyName, IResourceOptions resourceOptions);
    protected abstract virtual IEnumerable`1<Type> GetActiveProjectTypes();
    protected abstract virtual string GetActiveProjectAssemblyFullName();
    protected abstract virtual IEnumerable`1<string> GetSolutionAssemblyFullNames();
    protected abstract virtual String[] GetProjectOutputs();
    protected abstract virtual string GetOutputDir();
    protected abstract virtual IDXAssemblyInfo GetAssemblyCore(string assemblyName);
    protected virtual IEnumerable`1<Type> GetCurrentProjectTypes();
    protected virtual string GetCurrentProjectAssemblyFullName();
    public virtual void AddReferenceFromFile(string assemblyPath);
    public virtual void AddReference(string assemblyName);
    public virtual bool IsReferenceExists(string assemblyName);
    private ResourceOptions GetResourceOptionsForActiveProject();
    public sealed virtual IDXAssemblyInfo GetAssembly(string assemblyName);
    [IteratorStateMachineAttribute("DevExpress.Entity.ProjectModel.SolutionTypesProviderBase/<GetTypes>d__23")]
public sealed virtual IEnumerable`1<IDXTypeInfo> GetTypes();
    public virtual bool IsLocalType(IDXTypeInfo typeInfo);
    public sealed virtual void Add(IDXTypeInfo typeInfo);
    public sealed virtual void ClearCache();
    public sealed virtual bool Contains(IDXTypeInfo typeInfo);
    public sealed virtual void Remove(IDXTypeInfo typeInfo);
    public sealed virtual IDXTypeInfo GetTypeInfo(string typeFullName);
    public sealed virtual IDXTypeInfo FindType(string fullName);
    public sealed virtual IDXTypeInfo FindType(Predicate`1<IDXTypeInfo> predicate);
    [IteratorStateMachineAttribute("DevExpress.Entity.ProjectModel.SolutionTypesProviderBase/<FindTypes>d__32")]
public sealed virtual IEnumerable`1<IDXTypeInfo> FindTypes(IDXTypeInfo baseClass, Predicate`1<IDXTypeInfo> predicate);
    [IteratorStateMachineAttribute("DevExpress.Entity.ProjectModel.SolutionTypesProviderBase/<FindTypes>d__33")]
public sealed virtual IEnumerable`1<IDXTypeInfo> FindTypes(Predicate`1<IDXTypeInfo> predicate);
    public virtual string GetAssemblyReferencePath(string projectAssemblyFullName, string referenceName);
    public sealed virtual IProjectTypes GetProjectTypes(string assemblyFullName);
    protected virtual IProjectTypes GetProjectTypesCore(string assemblyFullName);
}
public class DevExpress.Entity.ProjectModel.SolutionTypesProviderConsole : SolutionTypesProviderBase {
    private List`1<Type> typeList;
    private string activeProjectAssemblyFullName;
    private IEnumerable`1<string> solutionAssemblyFullNames;
    public SolutionTypesProviderConsole(string activeProjectAssemblyFullName);
    public SolutionTypesProviderConsole(string activeProjectAssemblyFullName, IEnumerable`1<string> solutionAssemblyFullNames);
    protected virtual IEnumerable`1<Type> GetActiveProjectTypes();
    protected virtual IDXAssemblyInfo GetAssemblyCore(string assemblyName);
    public void Add(Type type);
    public void AddRange(IEnumerable`1<Type> types);
    protected virtual string GetActiveProjectAssemblyFullName();
    protected virtual String[] GetProjectOutputs();
    protected virtual string GetOutputDir();
    protected virtual IEnumerable`1<string> GetSolutionAssemblyFullNames();
}
public enum DevExpress.Export.ClipboardMode : Enum {
    public int value__;
    public static ClipboardMode Default;
    public static ClipboardMode PlainText;
    public static ClipboardMode Formatted;
}
public class DevExpress.Export.ClipboardOptions : BaseOptions {
    private bool allowFormattedMode;
    private ClipboardMode clipboardModeCore;
    private ProgressMode showProgressCore;
    private DefaultBoolean copyColumnHeadersCore;
    private DefaultBoolean allowTxtFormatCore;
    private DefaultBoolean allowRtfFormatCore;
    private DefaultBoolean allowHtmlFormatCore;
    private DefaultBoolean allowExcelFormatCore;
    private DefaultBoolean allowCsvFormatCore;
    private DefaultBoolean copyCollapsedDataCore;
    private PasteMode pasteModeCore;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets whether data is copied to the Clipboard as plain text or along with its format settings (in RTF, HTML, XLS (Biff8), CSV, UnicodeText and Text formats).")]
public ClipboardMode ClipboardMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets whether a progress bar that indicates a data copy operation’s progress is enabled.")]
public ProgressMode ShowProgress { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets whether column and band headers are to be copied along with data cells.")]
public DefaultBoolean CopyColumnHeaders { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets whether copying data in Text and UnicodeText formats is enabled.")]
public DefaultBoolean AllowTxtFormat { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets whether copying data in RTF format is enabled.")]
public DefaultBoolean AllowRtfFormat { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets whether copying data in HTML format is enabled.")]
public DefaultBoolean AllowHtmlFormat { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets whether copying data in XLS (Biff8) format is enabled.")]
public DefaultBoolean AllowExcelFormat { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets whether copying data in CSV format is enabled.")]
public DefaultBoolean AllowCsvFormat { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets whether formatted data is copied from both expanded and collapsed rows/nodes.")]
public DefaultBoolean CopyCollapsedData { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XtraSerializableProperty]
[DescriptionAttribute("Gets or sets data pasting mode.")]
public PasteMode PasteMode { get; public set; }
    public ClipboardOptions(bool allowFormattedMode);
    public virtual void Assign(BaseOptions options);
    public ClipboardMode get_ClipboardMode();
    public void set_ClipboardMode(ClipboardMode value);
    public ProgressMode get_ShowProgress();
    public void set_ShowProgress(ProgressMode value);
    public DefaultBoolean get_CopyColumnHeaders();
    public void set_CopyColumnHeaders(DefaultBoolean value);
    public DefaultBoolean get_AllowTxtFormat();
    public void set_AllowTxtFormat(DefaultBoolean value);
    public DefaultBoolean get_AllowRtfFormat();
    public void set_AllowRtfFormat(DefaultBoolean value);
    public DefaultBoolean get_AllowHtmlFormat();
    public void set_AllowHtmlFormat(DefaultBoolean value);
    public DefaultBoolean get_AllowExcelFormat();
    public void set_AllowExcelFormat(DefaultBoolean value);
    public DefaultBoolean get_AllowCsvFormat();
    public void set_AllowCsvFormat(DefaultBoolean value);
    public DefaultBoolean get_CopyCollapsedData();
    public void set_CopyCollapsedData(DefaultBoolean value);
    public virtual PasteMode get_PasteMode();
    public virtual void set_PasteMode(PasteMode value);
}
public enum DevExpress.Export.PasteMode : Enum {
    public int value__;
    public static PasteMode Default;
    public static PasteMode Append;
    public static PasteMode None;
    public static PasteMode Update;
}
public enum DevExpress.Export.ProgressMode : Enum {
    public int value__;
    public static ProgressMode Automatic;
    public static ProgressMode Always;
    public static ProgressMode Never;
}
public enum DevExpress.Export.RowPasteMode : Enum {
    public int value__;
    public static RowPasteMode Default;
    public static RowPasteMode OnlyValidRow;
    public static RowPasteMode Force;
}
public static class DevExpress.GCTestHelper : object {
    public static Nullable`1<bool> HardOptional;
    private static WeakReference Obtain(Func`1<object> obtainer);
    private static WeakReference[] Obtain(Func`1<Object[]> obtainer);
    public static void EnsureCollected(Func`1<object> obtainer);
    public static void EnsureCollected(Func`1<Object[]> obtainer);
    public static void EnsureCollected(WeakReference[] references);
    public static void EnsureCollected(IEnumerable`1<WeakReference> references);
    public static List`1<WeakReference> GetLiveReferences(IEnumerable`1<WeakReference> references);
    private static List`1<WeakReference> GetLiveReferencesCore(IEnumerable`1<WeakReference> references, int alreadyCollectedGen);
    private static List`1<WeakReference> CollectExistingData(IEnumerable`1<WeakReference> references, Int32& maxGeneration);
    private static List`1<WeakReference> SlowButSureGetLiveReferencesCore(IList`1<WeakReference> nextIterationHolder);
    private static void AssertCollected(List`1<WeakReference> nextIterationHolder);
    private static string BuildExceptionString(Object[] notCollected);
    public static void CollectOptional(WeakReference[] references);
    private static bool IsHardOptional();
    public static void CollectOptional(IEnumerable`1<WeakReference> references);
}
public class DevExpress.GCTestHelperException : Exception {
    public GCTestHelperException(string message);
}
public class DevExpress.Internal.DictionaryUniquenessProvider`1 : DXCollectionUniquenessProvider`1<T> {
    private DXCollectionBase`1<T> collection;
    private Dictionary`2<T, T> dictionary;
    protected internal DXCollectionBase`1<T> Collection { get; }
    protected internal Dictionary`2<T, T> Dictionary { get; }
    public DXCollectionUniquenessProviderType Type { get; }
    public DictionaryUniquenessProvider`1(DXCollectionBase`1<T> collection);
    protected internal DXCollectionBase`1<T> get_Collection();
    protected internal Dictionary`2<T, T> get_Dictionary();
    public virtual DXCollectionUniquenessProviderType get_Type();
    public virtual int LookupObjectIndex(T value);
    public virtual bool LookupObject(T value);
    public virtual void OnClearComplete();
    public virtual void OnInsertComplete(T value);
    public virtual void OnRemoveComplete(T value);
    public virtual void OnSetComplete(T oldValue, T newValue);
}
public abstract class DevExpress.Internal.DisposableBase : object {
    private bool disposed;
    public bool Disposed { get; }
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public bool get_Disposed();
    protected virtual void DisposeManaged();
    protected virtual void DisposeUnmanaged();
    private void Dispose(bool disposing);
}
public static class DevExpress.Internal.DXCollectionAccessor : object {
    public static T GetItem(DXCollectionBase`1<T> collection, int index);
    public static IList`1<T> GetInnerList(DXCollectionBase`1<T> collection);
}
public abstract class DevExpress.Internal.DXCollectionUniquenessProvider`1 : object {
    public DXCollectionUniquenessProviderType Type { get; }
    public abstract virtual int LookupObjectIndex(T value);
    public abstract virtual bool LookupObject(T value);
    public abstract virtual void OnClearComplete();
    public abstract virtual void OnInsertComplete(T value);
    public abstract virtual void OnRemoveComplete(T value);
    public abstract virtual void OnSetComplete(T oldValue, T newValue);
    public abstract virtual DXCollectionUniquenessProviderType get_Type();
}
public static class DevExpress.Internal.DXNotificationCollectionAccessor : object {
    public static void OnCollectionChanged(NotificationCollection`1<T> collection, CollectionChangedEventArgs`1<T> e);
    public static void OnCollectionChanging(NotificationCollection`1<T> collection, CollectionChangingEventArgs`1<T> e);
}
internal static class DevExpress.Internal.DXRegistryUtils : object {
    internal static RegistryKey GetInstallationKey(InstallationKind kind);
    internal static string GetInstallationRootPath();
    internal static RegistryKey EnsureComponentsKey();
    private static RegistryKey GetCustomerExperienceProgramKey(bool writable);
    internal static bool IsCustomerExperienceProgramActive();
    internal static void DeactivateCustomerExperienceProgram();
    internal static Guid EnsureUAlgoProviderGuid();
    private static RegistryKey GetLicensesKey(Guid id);
    internal static string ReadVersionString(Guid id, int version);
    internal static int ReadVersionInt(Guid id, int version);
    internal static int ReadPlatformFlags(Guid id, string platform);
}
public class DevExpress.Internal.EmptyUniquenessProvider`1 : DXCollectionUniquenessProvider`1<T> {
    public static DXCollectionUniquenessProvider`1<T> Instance;
    public DXCollectionUniquenessProviderType Type { get; }
    private static EmptyUniquenessProvider`1();
    public virtual DXCollectionUniquenessProviderType get_Type();
    public virtual int LookupObjectIndex(T value);
    public virtual bool LookupObject(T value);
    public virtual void OnClearComplete();
    public virtual void OnInsertComplete(T value);
    public virtual void OnRemoveComplete(T value);
    public virtual void OnSetComplete(T oldValue, T newValue);
}
internal static class DevExpress.Internal.HashHelper : object {
    public static bool VerifyHash(string puk, Byte[] rgbHash, Byte[] rgbSignature);
    private static UInt32[] Parse(Byte[] value);
    private static Byte[] GetBytes(UInt32[] data);
    private static UInt32[] Multiply(UInt32[] a, UInt32[] b);
    private static UInt32[] Divide(UInt32[] a, UInt32[] b);
    private static void Normalize(UInt32[]& data);
}
public class DevExpress.Internal.HashSetUniquenessProvider`1 : DXCollectionUniquenessProvider`1<T> {
    private HashSet`1<T> hashSet;
    private DXCollectionBase`1<T> collection;
    public DXCollectionUniquenessProviderType Type { get; }
    protected internal HashSet`1<T> HashSet { get; }
    protected internal DXCollectionBase`1<T> Collection { get; }
    public HashSetUniquenessProvider`1(DXCollectionBase`1<T> collection);
    public virtual DXCollectionUniquenessProviderType get_Type();
    protected internal HashSet`1<T> get_HashSet();
    protected internal DXCollectionBase`1<T> get_Collection();
    public virtual bool LookupObject(T value);
    public virtual int LookupObjectIndex(T value);
    public virtual void OnClearComplete();
    public virtual void OnInsertComplete(T value);
    public virtual void OnRemoveComplete(T value);
    public virtual void OnSetComplete(T oldValue, T newValue);
}
internal enum DevExpress.Internal.InstallationKind : Enum {
    public int value__;
    public static InstallationKind Common;
    public static InstallationKind DevExtreme;
}
public interface DevExpress.Internal.IWeakEventHandlerStrategy`1 {
    public bool IsEmpty { get; }
    public abstract virtual void Add(Delegate target);
    public abstract virtual void Remove(Delegate target);
    public abstract virtual void Raise(object sender, TArgs args);
    public abstract virtual void Purge();
    public abstract virtual bool get_IsEmpty();
}
public class DevExpress.Internal.NonWeakEventHandlerStrategy`1 : object {
    private Delegate handler;
    public bool IsEmpty { get; }
    public sealed virtual bool get_IsEmpty();
    public sealed virtual void Add(Delegate target);
    public sealed virtual void Remove(Delegate target);
    public sealed virtual void Raise(object sender, TArgs args);
    public sealed virtual void Purge();
}
public class DevExpress.Internal.SimpleUniquenessProvider`1 : DXCollectionUniquenessProvider`1<T> {
    private DXCollectionBase`1<T> collection;
    protected internal DXCollectionBase`1<T> Collection { get; }
    public DXCollectionUniquenessProviderType Type { get; }
    public SimpleUniquenessProvider`1(DXCollectionBase`1<T> collection);
    protected internal DXCollectionBase`1<T> get_Collection();
    public virtual DXCollectionUniquenessProviderType get_Type();
    public virtual int LookupObjectIndex(T value);
    public virtual bool LookupObject(T value);
    public virtual void OnClearComplete();
    public virtual void OnInsertComplete(T value);
    public virtual void OnRemoveComplete(T value);
    public virtual void OnSetComplete(T oldValue, T newValue);
}
public class DevExpress.Internal.UserData : object {
    private string userName;
    private string uniqueId;
    internal long licensedProducts;
    internal long licensedSources;
    private int userNo;
    private int keyNumber;
    internal int version;
    internal bool isValid;
    internal DateTime expiration;
    private static UserData empty;
    public bool IsTrial { get; }
    public bool IsExpired { get; }
    public static UserData Empty { get; }
    public string UniqueId { get; }
    public bool IsValid { get; }
    public int UserNo { get; }
    public int KeyNumber { get; }
    public string UserName { get; }
    public int Version { get; }
    public string VersionText { get; }
    protected long LicensedProducts { get; }
    protected long LicensedSources { get; }
    internal UserData(DateTime date);
    public UserData(int userNo, int keyNumber, string userName, long licensedProducts, long licensedSources);
    public bool get_IsTrial();
    public bool get_IsExpired();
    public static UserData get_Empty();
    public string GetText(string securityId);
    public bool IsLicensed(ProductKind kind);
    public bool IsLicensedSource(ProductKind kind);
    internal void Parse(string text);
    internal void UpdateUserName();
    internal static string UpdateText(string text);
    internal void Clear();
    public string get_UniqueId();
    public bool get_IsValid();
    public int get_UserNo();
    public int get_KeyNumber();
    public string get_UserName();
    public int get_Version();
    public string get_VersionText();
    protected long get_LicensedProducts();
    protected long get_LicensedSources();
    internal string GetExp();
}
internal class DevExpress.Internal.UserInfoChecker : object {
    internal static int SignatureLength;
    private static string puk;
    private static string testkey;
    private static UserInfoChecker def;
    public static UserInfoChecker Default { get; }
    public static UserInfoChecker get_Default();
    private string BytesToString(Byte[] bytes, int position);
    protected bool IsValidCore(string key);
    private bool IsValidKey(string key);
    protected UserData ParseCore(string key);
    public int GetVersion(string key);
    public bool IsValid(string key);
    public UserData Parse(string key);
    private string GetInfo(string key);
    private string GetData(string key);
    private string GetSign(string key);
}
public class DevExpress.Internal.WeakEventHandler`3 : WeakEventHandlerBase`1<TargetEventHandler<Arg1, Arg2, TBaseHandler>> {
    [ThreadStaticAttribute]
private static Dictionary`2<MethodInfo, CreateData<TargetEventHandler<Arg1, Arg2, TBaseHandler>>> creators;
    protected Dictionary`2<MethodInfo, CreateData<TargetEventHandler<Arg1, Arg2, TBaseHandler>>> Creators { get; }
    private static WeakEventHandler`3();
    protected virtual Dictionary`2<MethodInfo, CreateData<TargetEventHandler<Arg1, Arg2, TBaseHandler>>> get_Creators();
    protected static TargetEventHandler<Arg1, Arg2, TBaseHandler> CreateDelegate(WeakReference e, Delegate method);
    public void Invoke(Arg1 a1, Arg2 a2);
}
public abstract class DevExpress.Internal.WeakEventHandlerBase`1 : object {
    private List`1<WeakEvent<THandler>> events;
    private MethodInfo createMethod;
    private Type eventType;
    public bool HasSubscribers { get; }
    protected Dictionary`2<MethodInfo, CreateData<THandler>> Creators { get; }
    protected WeakEventHandlerBase`1(Type eventType);
    public bool get_HasSubscribers();
    protected abstract virtual Dictionary`2<MethodInfo, CreateData<THandler>> get_Creators();
    protected void AddEvent(Delegate value);
    protected void PurgeEvents();
    protected void RemoveEvent(Delegate value);
    private WeakEvent<THandler> CreateDynamicEvent(Delegate delegate);
    protected void Invoke(Invoker<THandler> invoker);
}
public class DevExpress.Internal.WeakEventHandlerMediumTrustStrategy`1 : object {
    private List`1<HandlerRecord<TArgs>> handlers;
    public bool IsEmpty { get; }
    public sealed virtual bool get_IsEmpty();
    public sealed virtual void Add(Delegate target);
    public sealed virtual void Remove(Delegate target);
    public sealed virtual void Raise(object sender, TArgs args);
    public sealed virtual void Purge();
}
public class DevExpress.Internal.WeakEventHandlerStrategy`2 : WeakEventHandler`3<object, TArgs, TBaseHandler> {
    public bool IsEmpty { get; }
    public sealed virtual bool get_IsEmpty();
    public sealed virtual void Add(Delegate target);
    public sealed virtual void Remove(Delegate target);
    public sealed virtual void Raise(object sender, TArgs args);
    public sealed virtual void Purge();
}
public interface DevExpress.Logify.ILogifyCustomDataProvider {
    public abstract virtual void CollectCustomData(IDictionary`2<string, string> data);
}
public class DevExpress.Logify.LogifyExceptionHandler : object {
    private static LogifyExceptionHandler instance;
    private bool isInitialized;
    private bool isSuccessfullyInstalled;
    public static LogifyExceptionHandler Instance { get; }
    public static LogifyExceptionHandler get_Instance();
    public static void SetWebEnvironment(bool webEnvironment);
    public void add_CanReportException(CancelEventHandler value);
    public void remove_CanReportException(CancelEventHandler value);
    public bool Initialize(string logId, string lastExecptionReportFileName);
    public void AddDesktopTraceListener(string apiKey, string applicationName);
    public void AddWebFormsTraceListener(string apiKey, string applicationName);
    public bool Send(Exception ex);
}
[AttributeUsageAttribute("32767")]
public class DevExpress.Logify.LogifyIgnoreExceptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    public bool Ignore { get; public set; }
    public LogifyIgnoreExceptionAttribute(bool ignore);
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
}
public class DevExpress.Logify.LogifyState : object {
    private static LogifyState instance;
    private Dictionary`2<string, string> customData;
    private List`1<WeakReference> customDataProviders;
    public static LogifyState Instance { get; }
    public IDictionary`2<string, string> CustomData { get; }
    public static LogifyState get_Instance();
    public IDictionary`2<string, string> get_CustomData();
    public void AddCustomDataProvider(ILogifyCustomDataProvider provider);
    public void RemoveCustomDataProvider(ILogifyCustomDataProvider provider);
}
public class DevExpress.Office.Crypto.CipherInfo : object {
    [CompilerGeneratedAttribute]
private int <BlockBits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyBits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherMode <Mode>k__BackingField;
    public int BlockBits { get; public set; }
    public int KeyBits { get; public set; }
    public string Name { get; public set; }
    public CipherMode Mode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_BlockBits();
    [CompilerGeneratedAttribute]
public void set_BlockBits(int value);
    [CompilerGeneratedAttribute]
public int get_KeyBits();
    [CompilerGeneratedAttribute]
public void set_KeyBits(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public CipherMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(CipherMode value);
    public CipherInfo Clone();
    public SymmetricAlgorithm GetAlgorithm();
    private SymmetricAlgorithm CreateSymmetricAlgorithm(string name);
}
public class DevExpress.Office.Crypto.EncryptionOptions : object {
    public static ModelEncryptionType DefaultType;
    private EncryptionPassword encryptionPassword;
    private PreservedSession preservedSession;
    [CompilerGeneratedAttribute]
private ModelEncryptionType <Type>k__BackingField;
    public ModelEncryptionType Type { get; public set; }
    public string Password { get; public set; }
    internal PreservedSession PreservedSession { get; }
    [CompilerGeneratedAttribute]
public ModelEncryptionType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ModelEncryptionType value);
    public string get_Password();
    public void set_Password(string value);
    internal PreservedSession get_PreservedSession();
    public void Reset();
    public void CopyFrom(EncryptionOptions options);
    public void PreserveSession(IEncryptionSession session, string password);
}
public class DevExpress.Office.Crypto.EncryptionPassword : object {
    private SecureString innerPassword;
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    public bool IsEmpty { get; private set; }
    public string Password { get; public set; }
    internal static bool IsNullOrEmpty(EncryptionPassword value);
    [CompilerGeneratedAttribute]
public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
private void set_IsEmpty(bool value);
    public string get_Password();
    public void set_Password(string value);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private SecureString ToSecureString(string str);
    [SecuritySafeCriticalAttribute]
private string FromSecureString(SecureString password);
}
public class DevExpress.Office.Crypto.HashInfo : object {
    [CompilerGeneratedAttribute]
private int <HashBits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int HashBits { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public int get_HashBits();
    [CompilerGeneratedAttribute]
public void set_HashBits(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public HashInfo Clone();
    public HashAlgorithm GetAlgorithm();
}
public interface DevExpress.Office.Crypto.IAgilePasswordKeyEncryptor {
    public IPasswordBasedKey PasswordEncryptor { get; }
    public Byte[] EncryptedVerifierHashInput { get; }
    public Byte[] EncryptedVerifierHashValue { get; }
    public Byte[] EncryptedKeyValue { get; }
    public abstract virtual IPasswordBasedKey get_PasswordEncryptor();
    public abstract virtual Byte[] get_EncryptedVerifierHashInput();
    public abstract virtual Byte[] get_EncryptedVerifierHashValue();
    public abstract virtual Byte[] get_EncryptedKeyValue();
}
public interface DevExpress.Office.Crypto.IEncryptionSession {
    public IPasswordKeyEncryptor PasswordKeyEncryptor { get; }
    public IPrimaryCipher PrimaryCipher { get; }
    public abstract virtual IPasswordKeyEncryptor get_PasswordKeyEncryptor();
    public abstract virtual IPrimaryCipher get_PrimaryCipher();
}
public interface DevExpress.Office.Crypto.IPasswordBasedKey {
    public HashInfo HashInfo { get; }
    public CipherInfo CipherInfo { get; }
    public int SpinCount { get; }
    public Byte[] SaltValue { get; }
    public abstract virtual HashInfo get_HashInfo();
    public abstract virtual CipherInfo get_CipherInfo();
    public abstract virtual int get_SpinCount();
    public abstract virtual Byte[] get_SaltValue();
}
public interface DevExpress.Office.Crypto.IPasswordKeyEncryptor {
    public bool SupportsIntegrityCheck { get; }
    public abstract virtual bool get_SupportsIntegrityCheck();
    public abstract virtual Byte[] Lock(string password, int secretKeySize);
    public abstract virtual Byte[] Unlock(string password);
    public abstract virtual void Accept(IPasswordKeyEncryptorVisitor visitor);
}
public interface DevExpress.Office.Crypto.IPasswordKeyEncryptorVisitor {
    public abstract virtual void Visit(IAgilePasswordKeyEncryptor encryptor);
    public abstract virtual void Visit(IStandardPasswordKeyEncryptor encryptor);
}
public interface DevExpress.Office.Crypto.IPrimaryCipher {
    public HashInfo HashInfo { get; }
    public CipherInfo CipherInfo { get; }
    public Byte[] SaltValue { get; }
    public abstract virtual HashInfo get_HashInfo();
    public abstract virtual CipherInfo get_CipherInfo();
    public abstract virtual Byte[] get_SaltValue();
}
public interface DevExpress.Office.Crypto.IStandardPasswordKeyEncryptor {
    public HashInfo HashInfo { get; }
    public CipherInfo CipherInfo { get; }
    public Byte[] SaltValue { get; }
    public Byte[] EncryptedVerifier { get; }
    public Byte[] EncryptedVerifierHash { get; }
    public abstract virtual HashInfo get_HashInfo();
    public abstract virtual CipherInfo get_CipherInfo();
    public abstract virtual Byte[] get_SaltValue();
    public abstract virtual Byte[] get_EncryptedVerifier();
    public abstract virtual Byte[] get_EncryptedVerifierHash();
}
public enum DevExpress.Office.Crypto.ModelEncryptionType : Enum {
    public int value__;
    public static ModelEncryptionType Compatible;
    public static ModelEncryptionType Strong;
}
public enum DevExpress.Office.Crypto.PreservedEncryptionType : Enum {
    public int value__;
    public static PreservedEncryptionType Agile;
    public static PreservedEncryptionType Standard;
    public static PreservedEncryptionType XOR;
    public static PreservedEncryptionType RC4;
    public static PreservedEncryptionType RC4CryptoAPI;
}
public class DevExpress.Office.Crypto.PreservedSession : object {
    [CompilerGeneratedAttribute]
private PreservedEncryptionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private HashInfo <PrimaryHash>k__BackingField;
    [CompilerGeneratedAttribute]
private HashInfo <EncryptorHash>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherInfo <PrimaryCipher>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherInfo <EncryptorCipher>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpinCount>k__BackingField;
    public PreservedEncryptionType Type { get; public set; }
    public HashInfo PrimaryHash { get; public set; }
    public HashInfo EncryptorHash { get; public set; }
    public CipherInfo PrimaryCipher { get; public set; }
    public CipherInfo EncryptorCipher { get; public set; }
    public int SpinCount { get; public set; }
    [CompilerGeneratedAttribute]
public PreservedEncryptionType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PreservedEncryptionType value);
    [CompilerGeneratedAttribute]
public HashInfo get_PrimaryHash();
    [CompilerGeneratedAttribute]
public void set_PrimaryHash(HashInfo value);
    [CompilerGeneratedAttribute]
public HashInfo get_EncryptorHash();
    [CompilerGeneratedAttribute]
public void set_EncryptorHash(HashInfo value);
    [CompilerGeneratedAttribute]
public CipherInfo get_PrimaryCipher();
    [CompilerGeneratedAttribute]
public void set_PrimaryCipher(CipherInfo value);
    [CompilerGeneratedAttribute]
public CipherInfo get_EncryptorCipher();
    [CompilerGeneratedAttribute]
public void set_EncryptorCipher(CipherInfo value);
    [CompilerGeneratedAttribute]
public int get_SpinCount();
    [CompilerGeneratedAttribute]
public void set_SpinCount(int value);
}
public interface DevExpress.Office.ICloneable`1 {
    public abstract virtual T Clone();
}
public interface DevExpress.Office.ISupportsCopyFrom`1 {
    public abstract virtual void CopyFrom(T value);
}
public interface DevExpress.Office.Services.IFontCharacterSetService {
    public abstract virtual void BeginProcessing(string fontName);
    public abstract virtual bool ContainsChar(char ch);
    public abstract virtual void EndProcessing();
}
public class DevExpress.Office.Utils.ChunkedMemoryStream : Stream {
    public static int DefaultMaxBufferSize;
    private int maxBufferSize;
    private long totalLength;
    private long position;
    private List`1<Byte[]> buffers;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int MaxBufferSize { get; protected internal set; }
    protected internal List`1<Byte[]> Buffers { get; }
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public int get_MaxBufferSize();
    protected internal void set_MaxBufferSize(int value);
    protected internal List`1<Byte[]> get_Buffers();
    public IList`1<Byte[]> GetBuffers();
    public virtual void Flush();
    public Byte[] ToArray();
    public virtual long Seek(long offset, SeekOrigin origin);
    private static void ThrowArgumentException(string propName, object val);
    public virtual void SetLength(long value);
    private void EnsureBuffers(long size);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual bool Equals(object obj);
    public bool Equals(ChunkedMemoryStream stream);
    public virtual int GetHashCode();
    public sealed virtual void CopyFrom(ChunkedMemoryStream value);
}
public class DevExpress.Office.Utils.FastCharacterMultiReplacement : object {
    private StringBuilder buffer;
    public FastCharacterMultiReplacement(StringBuilder stringBuilder);
    public ReplacementInfo CreateReplacementInfo(string text, Dictionary`2<char, string> replaceTable);
    public ReplacementInfo CreateReplacementInfo(string text, int start, int length, Dictionary`2<char, string> replaceTable);
    private bool IsUnicodeEscapePattern(string text, int pos);
    public string PerformReplacements(string text, ReplacementInfo replacementInfo);
    public string PerformReplacements(string text, int start, int length, ReplacementInfo replacementInfo);
    public string PerformReplacements(string text, Dictionary`2<char, string> replaceTable);
}
public abstract class DevExpress.Office.Utils.OfficePackage : object {
    public abstract virtual void Add(string name, string contentType, DateTime fileTime, Stream stream);
    public abstract virtual void Add(string fileName, string contentType, DateTime fileTime, Byte[] content);
    public abstract virtual void AddCompressed(string name, string contentType, DateTime fileTime, CompressedStream compressedStream);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Office.Utils.OfficeZipPackage : OfficePackage {
    private InternalZipArchive package;
    public OfficeZipPackage(Stream stream);
    protected virtual void Dispose(bool disposing);
    public virtual void Add(string name, string contentType, DateTime fileTime, Stream stream);
    public virtual void Add(string fileName, string contentType, DateTime fileTime, Byte[] content);
    public virtual void AddCompressed(string name, string contentType, DateTime fileTime, CompressedStream compressedStream);
}
public class DevExpress.Office.Utils.ReplacementInfo : object {
    private List`1<ReplacementItem> items;
    private int deltaLength;
    public int DeltaLength { get; }
    public IList`1<ReplacementItem> Items { get; }
    public void Add(int charIndex, string replaceWith);
    public int get_DeltaLength();
    public IList`1<ReplacementItem> get_Items();
}
public class DevExpress.Office.Utils.ReplacementItem : object {
    private int charIndex;
    private string replaceWith;
    public int CharIndex { get; }
    public string ReplaceWith { get; }
    public ReplacementItem(int charIndex, string replaceWith);
    public int get_CharIndex();
    public string get_ReplaceWith();
}
public interface DevExpress.Portable.Input.IPortableCursor {
    public PortableCursorType CursorType { get; }
    public abstract virtual PortableCursorType get_CursorType();
}
public interface DevExpress.Portable.Input.IPortableDataObject {
    public abstract virtual object GetData(string format, bool autoConvert);
    public abstract virtual object GetData(string format);
    public abstract virtual object GetData(Type format);
    public abstract virtual void SetData(string format, bool autoConvert, object data);
    public abstract virtual void SetData(string format, object data);
    public abstract virtual void SetData(Type format, object data);
    public abstract virtual void SetData(object data);
    public abstract virtual bool GetDataPresent(string format, bool autoConvert);
    public abstract virtual bool GetDataPresent(string format);
    public abstract virtual bool GetDataPresent(Type format);
    public abstract virtual String[] GetFormats(bool autoConvert);
    public abstract virtual String[] GetFormats();
}
public static class DevExpress.Portable.Input.PortableCursors : object {
    public static IPortableCursor AppStarting { get; }
    public static IPortableCursor PanSW { get; }
    public static IPortableCursor PanSouth { get; }
    public static IPortableCursor PanSE { get; }
    public static IPortableCursor PanNW { get; }
    public static IPortableCursor PanNorth { get; }
    public static IPortableCursor PanNE { get; }
    public static IPortableCursor PanEast { get; }
    public static IPortableCursor NoMoveVert { get; }
    public static IPortableCursor NoMoveHoriz { get; }
    public static IPortableCursor NoMove2D { get; }
    public static IPortableCursor VSplit { get; }
    public static IPortableCursor HSplit { get; }
    public static IPortableCursor Help { get; }
    public static IPortableCursor WaitCursor { get; }
    public static IPortableCursor UpArrow { get; }
    public static IPortableCursor SizeWE { get; }
    public static IPortableCursor SizeNWSE { get; }
    public static IPortableCursor SizeNS { get; }
    public static IPortableCursor SizeNESW { get; }
    public static IPortableCursor SizeAll { get; }
    public static IPortableCursor No { get; }
    public static IPortableCursor IBeam { get; }
    public static IPortableCursor Default { get; }
    public static IPortableCursor Cross { get; }
    public static IPortableCursor Arrow { get; }
    public static IPortableCursor PanWest { get; }
    public static IPortableCursor Hand { get; }
    public static IPortableCursor DragNone { get; }
    public static IPortableCursor DragMove { get; }
    public static IPortableCursor DragCopy { get; }
    public static IPortableCursor DragLink { get; }
    public static IPortableCursor get_AppStarting();
    public static IPortableCursor get_PanSW();
    public static IPortableCursor get_PanSouth();
    public static IPortableCursor get_PanSE();
    public static IPortableCursor get_PanNW();
    public static IPortableCursor get_PanNorth();
    public static IPortableCursor get_PanNE();
    public static IPortableCursor get_PanEast();
    public static IPortableCursor get_NoMoveVert();
    public static IPortableCursor get_NoMoveHoriz();
    public static IPortableCursor get_NoMove2D();
    public static IPortableCursor get_VSplit();
    public static IPortableCursor get_HSplit();
    public static IPortableCursor get_Help();
    public static IPortableCursor get_WaitCursor();
    public static IPortableCursor get_UpArrow();
    public static IPortableCursor get_SizeWE();
    public static IPortableCursor get_SizeNWSE();
    public static IPortableCursor get_SizeNS();
    public static IPortableCursor get_SizeNESW();
    public static IPortableCursor get_SizeAll();
    public static IPortableCursor get_No();
    public static IPortableCursor get_IBeam();
    public static IPortableCursor get_Default();
    public static IPortableCursor get_Cross();
    public static IPortableCursor get_Arrow();
    public static IPortableCursor get_PanWest();
    public static IPortableCursor get_Hand();
    public static IPortableCursor get_DragNone();
    public static IPortableCursor get_DragMove();
    public static IPortableCursor get_DragCopy();
    public static IPortableCursor get_DragLink();
    public static IPortableCursor GetCursor(PortableCursorType cursorType);
}
public enum DevExpress.Portable.Input.PortableCursorType : Enum {
    public int value__;
    public static PortableCursorType Default;
    public static PortableCursorType AppStarting;
    public static PortableCursorType PanSW;
    public static PortableCursorType PanSouth;
    public static PortableCursorType PanSE;
    public static PortableCursorType PanNW;
    public static PortableCursorType PanNorth;
    public static PortableCursorType PanNE;
    public static PortableCursorType PanEast;
    public static PortableCursorType NoMoveVert;
    public static PortableCursorType NoMoveHoriz;
    public static PortableCursorType NoMove2D;
    public static PortableCursorType VSplit;
    public static PortableCursorType HSplit;
    public static PortableCursorType Help;
    public static PortableCursorType WaitCursor;
    public static PortableCursorType UpArrow;
    public static PortableCursorType SizeWE;
    public static PortableCursorType SizeNWSE;
    public static PortableCursorType SizeNS;
    public static PortableCursorType SizeNESW;
    public static PortableCursorType SizeAll;
    public static PortableCursorType No;
    public static PortableCursorType IBeam;
    public static PortableCursorType Cross;
    public static PortableCursorType Arrow;
    public static PortableCursorType PanWest;
    public static PortableCursorType Hand;
    public static PortableCursorType DragNone;
    public static PortableCursorType DragMove;
    public static PortableCursorType DragCopy;
    public static PortableCursorType DragLink;
}
public class DevExpress.Portable.Input.PortableDataObject : object {
    private Dictionary`2<string, PortableDataStoreEntry> entries;
    public PortableDataObject(object data);
    public PortableDataObject(string format, object data);
    public virtual object GetData(Type format);
    public virtual object GetData(string format);
    public virtual object GetData(string format, bool autoConvert);
    public virtual bool GetDataPresent(Type format);
    public virtual bool GetDataPresent(string format);
    public virtual bool GetDataPresent(string format, bool autoConvert);
    public virtual String[] GetFormats();
    public virtual String[] GetFormats(bool autoConvert);
    private static String[] GetDistinctStrings(String[] formats);
    private static String[] GetMappedFormats(string format);
    public virtual void SetData(object data);
    public virtual void SetData(Type format, object data);
    public virtual void SetData(string format, object data);
    public virtual void SetData(string format, bool autoConvert, object data);
}
public enum DevExpress.Portable.Input.PortableDragAction : Enum {
    public int value__;
    public static PortableDragAction Continue;
    public static PortableDragAction Drop;
    public static PortableDragAction Cancel;
}
[FlagsAttribute]
public enum DevExpress.Portable.Input.PortableDragDropEffects : Enum {
    public int value__;
    public static PortableDragDropEffects None;
    public static PortableDragDropEffects Copy;
    public static PortableDragDropEffects Move;
    public static PortableDragDropEffects Link;
    public static PortableDragDropEffects Scroll;
    public static PortableDragDropEffects All;
}
public class DevExpress.Portable.Input.PortableDragEventArgs : EventArgs {
    private IPortableDataObject data;
    private int keyState;
    private int x;
    private int y;
    private PortableDragDropEffects allowedEffect;
    [CompilerGeneratedAttribute]
private PortableDragDropEffects <Effect>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalEventArgs>k__BackingField;
    public IPortableDataObject Data { get; }
    public int KeyState { get; }
    public int X { get; }
    public int Y { get; }
    public PortableDragDropEffects AllowedEffect { get; }
    public PortableDragDropEffects Effect { get; public set; }
    public object OriginalEventArgs { get; public set; }
    public PortableDragEventArgs(IPortableDataObject data, int keyState, int x, int y, PortableDragDropEffects allowedEffect, PortableDragDropEffects effect);
    public IPortableDataObject get_Data();
    public int get_KeyState();
    public int get_X();
    public int get_Y();
    public PortableDragDropEffects get_AllowedEffect();
    [CompilerGeneratedAttribute]
public PortableDragDropEffects get_Effect();
    [CompilerGeneratedAttribute]
public void set_Effect(PortableDragDropEffects value);
    [CompilerGeneratedAttribute]
public object get_OriginalEventArgs();
    [CompilerGeneratedAttribute]
public void set_OriginalEventArgs(object value);
}
public class DevExpress.Portable.Input.PortableGiveFeedbackEventArgs : EventArgs {
    private PortableDragDropEffects effect;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCursors>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalEventArgs>k__BackingField;
    public PortableDragDropEffects Effect { get; }
    public bool UseDefaultCursors { get; public set; }
    public object OriginalEventArgs { get; public set; }
    public PortableGiveFeedbackEventArgs(PortableDragDropEffects effect, bool useDefaultCursors);
    public PortableDragDropEffects get_Effect();
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCursors();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCursors(bool value);
    [CompilerGeneratedAttribute]
public object get_OriginalEventArgs();
    [CompilerGeneratedAttribute]
public void set_OriginalEventArgs(object value);
}
public class DevExpress.Portable.Input.PortableHandledMouseEventArgs : PortableMouseEventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; public set; }
    public PortableHandledMouseEventArgs(PortableMouseButtons button, int clicks, int x, int y, int delta);
    public PortableHandledMouseEventArgs(PortableMouseButtons button, int clicks, int x, int y, int delta, bool defaultHandledValue);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
[ComVisibleAttribute("True")]
public class DevExpress.Portable.Input.PortableKeyEventArgs : EventArgs {
    private PortableKeys keyData;
    private bool suppressKeyPress;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalEventArgs>k__BackingField;
    public bool Alt { get; }
    public bool Control { get; }
    public bool Handled { get; public set; }
    public PortableKeys KeyCode { get; }
    public int KeyValue { get; }
    public PortableKeys KeyData { get; }
    public PortableKeys Modifiers { get; }
    public bool Shift { get; }
    public bool SuppressKeyPress { get; public set; }
    public object OriginalEventArgs { get; internal set; }
    public PortableKeyEventArgs(PortableKeys keyData);
    public virtual bool get_Alt();
    public bool get_Control();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    public PortableKeys get_KeyCode();
    public int get_KeyValue();
    public PortableKeys get_KeyData();
    public PortableKeys get_Modifiers();
    public virtual bool get_Shift();
    public bool get_SuppressKeyPress();
    public void set_SuppressKeyPress(bool value);
    [CompilerGeneratedAttribute]
public object get_OriginalEventArgs();
    [CompilerGeneratedAttribute]
internal void set_OriginalEventArgs(object value);
}
public class DevExpress.Portable.Input.PortableKeyEventHandler : MulticastDelegate {
    public PortableKeyEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PortableKeyEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PortableKeyEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class DevExpress.Portable.Input.PortableKeyPressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private char <KeyChar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private PortableKeys <ModifierKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalEventArgs>k__BackingField;
    public char KeyChar { get; public set; }
    public bool Handled { get; public set; }
    public PortableKeys ModifierKeys { get; public set; }
    public object OriginalEventArgs { get; internal set; }
    public PortableKeyPressEventArgs(char keyChar);
    [CompilerGeneratedAttribute]
public char get_KeyChar();
    [CompilerGeneratedAttribute]
public void set_KeyChar(char value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public PortableKeys get_ModifierKeys();
    [CompilerGeneratedAttribute]
public void set_ModifierKeys(PortableKeys value);
    [CompilerGeneratedAttribute]
public object get_OriginalEventArgs();
    [CompilerGeneratedAttribute]
internal void set_OriginalEventArgs(object value);
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[TypeConverterAttribute("DevExpress.Portable.Input.PortableKeysConverter")]
public enum DevExpress.Portable.Input.PortableKeys : Enum {
    public int value__;
    public static PortableKeys KeyCode;
    public static PortableKeys Modifiers;
    public static PortableKeys None;
    public static PortableKeys LButton;
    public static PortableKeys RButton;
    public static PortableKeys Cancel;
    public static PortableKeys MButton;
    public static PortableKeys XButton1;
    public static PortableKeys XButton2;
    public static PortableKeys Back;
    public static PortableKeys Tab;
    public static PortableKeys LineFeed;
    public static PortableKeys Clear;
    public static PortableKeys Return;
    public static PortableKeys Enter;
    public static PortableKeys ShiftKey;
    public static PortableKeys ControlKey;
    public static PortableKeys Menu;
    public static PortableKeys Pause;
    public static PortableKeys Capital;
    public static PortableKeys CapsLock;
    public static PortableKeys KanaMode;
    public static PortableKeys HanguelMode;
    public static PortableKeys HangulMode;
    public static PortableKeys JunjaMode;
    public static PortableKeys FinalMode;
    public static PortableKeys HanjaMode;
    public static PortableKeys KanjiMode;
    public static PortableKeys Escape;
    public static PortableKeys IMEConvert;
    public static PortableKeys IMENonconvert;
    public static PortableKeys IMEAccept;
    public static PortableKeys IMEAceept;
    public static PortableKeys IMEModeChange;
    public static PortableKeys Space;
    public static PortableKeys Prior;
    public static PortableKeys PageUp;
    public static PortableKeys Next;
    public static PortableKeys PageDown;
    public static PortableKeys End;
    public static PortableKeys Home;
    public static PortableKeys Left;
    public static PortableKeys Up;
    public static PortableKeys Right;
    public static PortableKeys Down;
    public static PortableKeys Select;
    public static PortableKeys Print;
    public static PortableKeys Execute;
    public static PortableKeys Snapshot;
    public static PortableKeys PrintScreen;
    public static PortableKeys Insert;
    public static PortableKeys Delete;
    public static PortableKeys Help;
    public static PortableKeys D0;
    public static PortableKeys D1;
    public static PortableKeys D2;
    public static PortableKeys D3;
    public static PortableKeys D4;
    public static PortableKeys D5;
    public static PortableKeys D6;
    public static PortableKeys D7;
    public static PortableKeys D8;
    public static PortableKeys D9;
    public static PortableKeys A;
    public static PortableKeys B;
    public static PortableKeys C;
    public static PortableKeys D;
    public static PortableKeys E;
    public static PortableKeys F;
    public static PortableKeys G;
    public static PortableKeys H;
    public static PortableKeys I;
    public static PortableKeys J;
    public static PortableKeys K;
    public static PortableKeys L;
    public static PortableKeys M;
    public static PortableKeys N;
    public static PortableKeys O;
    public static PortableKeys P;
    public static PortableKeys Q;
    public static PortableKeys R;
    public static PortableKeys S;
    public static PortableKeys T;
    public static PortableKeys U;
    public static PortableKeys V;
    public static PortableKeys W;
    public static PortableKeys X;
    public static PortableKeys Y;
    public static PortableKeys Z;
    public static PortableKeys LWin;
    public static PortableKeys RWin;
    public static PortableKeys Apps;
    public static PortableKeys Sleep;
    public static PortableKeys NumPad0;
    public static PortableKeys NumPad1;
    public static PortableKeys NumPad2;
    public static PortableKeys NumPad3;
    public static PortableKeys NumPad4;
    public static PortableKeys NumPad5;
    public static PortableKeys NumPad6;
    public static PortableKeys NumPad7;
    public static PortableKeys NumPad8;
    public static PortableKeys NumPad9;
    public static PortableKeys Multiply;
    public static PortableKeys Add;
    public static PortableKeys Separator;
    public static PortableKeys Subtract;
    public static PortableKeys Decimal;
    public static PortableKeys Divide;
    public static PortableKeys F1;
    public static PortableKeys F2;
    public static PortableKeys F3;
    public static PortableKeys F4;
    public static PortableKeys F5;
    public static PortableKeys F6;
    public static PortableKeys F7;
    public static PortableKeys F8;
    public static PortableKeys F9;
    public static PortableKeys F10;
    public static PortableKeys F11;
    public static PortableKeys F12;
    public static PortableKeys F13;
    public static PortableKeys F14;
    public static PortableKeys F15;
    public static PortableKeys F16;
    public static PortableKeys F17;
    public static PortableKeys F18;
    public static PortableKeys F19;
    public static PortableKeys F20;
    public static PortableKeys F21;
    public static PortableKeys F22;
    public static PortableKeys F23;
    public static PortableKeys F24;
    public static PortableKeys NumLock;
    public static PortableKeys Scroll;
    public static PortableKeys LShiftKey;
    public static PortableKeys RShiftKey;
    public static PortableKeys LControlKey;
    public static PortableKeys RControlKey;
    public static PortableKeys LMenu;
    public static PortableKeys RMenu;
    public static PortableKeys BrowserBack;
    public static PortableKeys BrowserForward;
    public static PortableKeys BrowserRefresh;
    public static PortableKeys BrowserStop;
    public static PortableKeys BrowserSearch;
    public static PortableKeys BrowserFavorites;
    public static PortableKeys BrowserHome;
    public static PortableKeys VolumeMute;
    public static PortableKeys VolumeDown;
    public static PortableKeys VolumeUp;
    public static PortableKeys MediaNextTrack;
    public static PortableKeys MediaPreviousTrack;
    public static PortableKeys MediaStop;
    public static PortableKeys MediaPlayPause;
    public static PortableKeys LaunchMail;
    public static PortableKeys SelectMedia;
    public static PortableKeys LaunchApplication1;
    public static PortableKeys LaunchApplication2;
    public static PortableKeys OemSemicolon;
    public static PortableKeys Oem1;
    public static PortableKeys Oemplus;
    public static PortableKeys Oemcomma;
    public static PortableKeys OemMinus;
    public static PortableKeys OemPeriod;
    public static PortableKeys OemQuestion;
    public static PortableKeys Oem2;
    public static PortableKeys Oemtilde;
    public static PortableKeys Oem3;
    public static PortableKeys OemOpenBrackets;
    public static PortableKeys Oem4;
    public static PortableKeys OemPipe;
    public static PortableKeys Oem5;
    public static PortableKeys OemCloseBrackets;
    public static PortableKeys Oem6;
    public static PortableKeys OemQuotes;
    public static PortableKeys Oem7;
    public static PortableKeys Oem8;
    public static PortableKeys OemBackslash;
    public static PortableKeys Oem102;
    public static PortableKeys ProcessKey;
    public static PortableKeys Packet;
    public static PortableKeys Attn;
    public static PortableKeys Crsel;
    public static PortableKeys Exsel;
    public static PortableKeys EraseEof;
    public static PortableKeys Play;
    public static PortableKeys Zoom;
    public static PortableKeys NoName;
    public static PortableKeys Pa1;
    public static PortableKeys OemClear;
    public static PortableKeys Shift;
    public static PortableKeys Control;
    public static PortableKeys Alt;
}
public class DevExpress.Portable.Input.PortableKeysConverter : TypeConverter {
    private Dictionary`2<string, PortableKeys> keyNames;
    private List`1<string> displayOrder;
    private void AddKey(string key, PortableKeys value);
    private void Initialize();
    private object ConvertFromStringCore(string str);
    private object ConvertFromEnumArray(Enum[] array);
    private object ConvertToStringCore(PortableKeys portableKeys);
    private object ConvertToEnumArray(PortableKeys portableKeys);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[FlagsAttribute]
public enum DevExpress.Portable.Input.PortableKeyState : Enum {
    public int value__;
    public static PortableKeyState None;
    public static PortableKeyState ShiftKey;
    public static PortableKeyState CtrlKey;
    public static PortableKeyState AltKey;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
public enum DevExpress.Portable.Input.PortableMouseButtons : Enum {
    public int value__;
    public static PortableMouseButtons Left;
    public static PortableMouseButtons None;
    public static PortableMouseButtons Right;
    public static PortableMouseButtons Middle;
    public static PortableMouseButtons XButton1;
    public static PortableMouseButtons XButton2;
}
[ComVisibleAttribute("True")]
public class DevExpress.Portable.Input.PortableMouseEventArgs : EventArgs {
    private PortableMouseButtons button;
    private int clicks;
    private int x;
    private int y;
    private int delta;
    [CompilerGeneratedAttribute]
private object <OriginalEventArgs>k__BackingField;
    public PortableMouseButtons Button { get; }
    public int Clicks { get; }
    public int X { get; }
    public int Y { get; }
    public int Delta { get; }
    public Point Location { get; }
    public object OriginalEventArgs { get; internal set; }
    public PortableMouseEventArgs(PortableMouseButtons button, int clicks, int x, int y, int delta);
    public PortableMouseButtons get_Button();
    public int get_Clicks();
    public int get_X();
    public int get_Y();
    public int get_Delta();
    public Point get_Location();
    [CompilerGeneratedAttribute]
public object get_OriginalEventArgs();
    [CompilerGeneratedAttribute]
internal void set_OriginalEventArgs(object value);
}
public class DevExpress.Portable.Input.PortableQueryContinueDragEventArgs : EventArgs {
    private int keyState;
    private bool escapePressed;
    [CompilerGeneratedAttribute]
private PortableDragAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalEventArgs>k__BackingField;
    public int KeyState { get; }
    public bool EscapePressed { get; }
    public PortableDragAction Action { get; public set; }
    public object OriginalEventArgs { get; public set; }
    public PortableQueryContinueDragEventArgs(int keyState, bool escapePressed, PortableDragAction action);
    public int get_KeyState();
    public bool get_EscapePressed();
    [CompilerGeneratedAttribute]
public PortableDragAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(PortableDragAction value);
    [CompilerGeneratedAttribute]
public object get_OriginalEventArgs();
    [CompilerGeneratedAttribute]
public void set_OriginalEventArgs(object value);
}
public class DevExpress.Portable.Internal.EmptyPortableDispatchedTimer : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Interval>k__BackingField;
    public bool Enabled { get; public set; }
    public int Interval { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Interval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Interval(int value);
    public sealed virtual void add_Tick(EventHandler value);
    public sealed virtual void remove_Tick(EventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void Start();
    public sealed virtual void Stop();
}
public interface DevExpress.Portable.Internal.IPlatformCursorsService {
    public IPortableCursor Current { get; public set; }
    public abstract virtual IPortableCursor GetCursor(PortableCursorType cursorType);
    public abstract virtual IPortableCursor get_Current();
    public abstract virtual void set_Current(IPortableCursor value);
    public abstract virtual IPortableCursor FromResources(string resourceName, Assembly asm);
}
public interface DevExpress.Portable.Internal.IPlatformSystemInformationService {
    public int DoubleClickTime { get; }
    public Size DoubleClickSize { get; }
    public Size DragSize { get; }
    public int MouseHoverTime { get; }
    public Size MouseHoverSize { get; }
    public int MenuShowDelay { get; }
    public int MouseWheelScrollDelta { get; }
    public int MouseWheelScrollLines { get; }
    public int MonitorCount { get; }
    public Size PrimaryMonitorSize { get; }
    public int PrimaryScreenBitsPerPixel { get; }
    public abstract virtual int get_DoubleClickTime();
    public abstract virtual Size get_DoubleClickSize();
    public abstract virtual Size get_DragSize();
    public abstract virtual int get_MouseHoverTime();
    public abstract virtual Size get_MouseHoverSize();
    public abstract virtual int get_MenuShowDelay();
    public abstract virtual int get_MouseWheelScrollDelta();
    public abstract virtual int get_MouseWheelScrollLines();
    public abstract virtual int get_MonitorCount();
    public abstract virtual Size get_PrimaryMonitorSize();
    public abstract virtual int get_PrimaryScreenBitsPerPixel();
}
public interface DevExpress.Portable.Internal.IPortableDispatchedTimer {
    public bool Enabled { get; public set; }
    public int Interval { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual int get_Interval();
    public abstract virtual void set_Interval(int value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Tick(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Tick(EventHandler value);
    public abstract virtual void Start();
    public abstract virtual void Stop();
}
public class DevExpress.Portable.Internal.PlatformClipboardServiceNonDesktop : object {
    private IPortableDataObject dataObject;
    public sealed virtual void Clear();
    public sealed virtual bool ContainsData(string format, bool autoConvert);
    public sealed virtual bool ContainsData(string format);
    public sealed virtual object GetData(string format);
    public sealed virtual IPortableDataObject GetDataObject();
    public sealed virtual void SetData(string format, object data);
    public sealed virtual void SetDataObject(IPortableDataObject data);
    public sealed virtual void SetDataObject(IPortableDataObject data, bool copy);
    public sealed virtual bool QueryAllowCopying(string format);
    public sealed virtual bool QueryAllowPasting(string format);
    public sealed virtual bool ShouldThrow(Exception exception);
    public sealed virtual bool PerformCopy(Action nativeCopy, string format, Nullable`1<bool> allowCopying);
    public sealed virtual bool PerformPaste(Action nativePaste, string format, Nullable`1<bool> allowPasting);
}
internal class DevExpress.Portable.Internal.PlatformCursorsServiceNonDesktop : object {
    private PortableCursor defaultCursor;
    private Dictionary`2<PortableCursorType, PortableCursor> cursors;
    [CompilerGeneratedAttribute]
private IPortableCursor <Current>k__BackingField;
    public IPortableCursor Current { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IPortableCursor get_Current();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Current(IPortableCursor value);
    public sealed virtual IPortableCursor GetCursor(PortableCursorType cursorType);
    public sealed virtual IPortableCursor FromResources(string resourceName, Assembly asm);
}
internal class DevExpress.Portable.Internal.PlatformSystemInformationServiceNonDesktop : object {
    public int DoubleClickTime { get; }
    public Size DoubleClickSize { get; }
    public Size DragSize { get; }
    public int MouseHoverTime { get; }
    public Size MouseHoverSize { get; }
    public int MenuShowDelay { get; }
    public int MouseWheelScrollDelta { get; }
    public int MouseWheelScrollLines { get; }
    public int MonitorCount { get; }
    public Size PrimaryMonitorSize { get; }
    public int PrimaryScreenBitsPerPixel { get; }
    public sealed virtual int get_DoubleClickTime();
    public sealed virtual Size get_DoubleClickSize();
    public sealed virtual Size get_DragSize();
    public sealed virtual int get_MouseHoverTime();
    public sealed virtual Size get_MouseHoverSize();
    public sealed virtual int get_MenuShowDelay();
    public sealed virtual int get_MouseWheelScrollDelta();
    public sealed virtual int get_MouseWheelScrollLines();
    public sealed virtual int get_MonitorCount();
    public sealed virtual Size get_PrimaryMonitorSize();
    public sealed virtual int get_PrimaryScreenBitsPerPixel();
}
internal class DevExpress.Portable.Internal.PortableCursor : object {
    [CompilerGeneratedAttribute]
private PortableCursorType <CursorType>k__BackingField;
    public PortableCursorType CursorType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual PortableCursorType get_CursorType();
    [CompilerGeneratedAttribute]
public void set_CursorType(PortableCursorType value);
}
public interface DevExpress.Portable.IPlatformClipboardService {
    public abstract virtual void Clear();
    public abstract virtual bool ContainsData(string format);
    public abstract virtual bool ContainsData(string format, bool autoConvert);
    public abstract virtual object GetData(string format);
    public abstract virtual IPortableDataObject GetDataObject();
    public abstract virtual void SetData(string format, object data);
    public abstract virtual void SetDataObject(IPortableDataObject data);
    public abstract virtual void SetDataObject(IPortableDataObject dataObject, bool copy);
}
public interface DevExpress.Portable.IPlatformClipboardServiceEx {
    public abstract virtual bool ShouldThrow(Exception exception);
    public abstract virtual bool QueryAllowCopying(string format);
    public abstract virtual bool QueryAllowPasting(string format);
    public abstract virtual bool PerformCopy(Action nativeCopy, string format, Nullable`1<bool> allowCopying);
    public abstract virtual bool PerformPaste(Action nativePaste, string format, Nullable`1<bool> allowPasting);
}
[ComVisibleAttribute("True")]
public enum DevExpress.Portable.PortableCheckState : Enum {
    public int value__;
    public static PortableCheckState Unchecked;
    public static PortableCheckState Checked;
    public static PortableCheckState Indeterminate;
}
public static class DevExpress.Portable.PortableClipboard : object {
    private static IPlatformClipboardService Clipboard { get; }
    private static IPlatformClipboardServiceEx ClipboardEx { get; }
    private static IPlatformClipboardService get_Clipboard();
    public static void Clear();
    public static bool ContainsData(string format, bool autoConvert);
    public static bool ContainsData(string format);
    public static object GetData(string format);
    public static IPortableDataObject GetDataObject();
    public static void SetData(string format, object data);
    public static void SetDataObject(IPortableDataObject data);
    public static void SetDataObject(IPortableDataObject data, bool copy);
    private static IPlatformClipboardServiceEx get_ClipboardEx();
    public static bool QueryAllowCopying(string format);
    public static bool QueryAllowPasting(string format);
    public static bool ShouldThrow(Exception exception);
    public static bool PerformCopy(Action nativeCopy, string format, Nullable`1<bool> allowCopying);
    public static bool PerformPaste(Action nativePaste, string format, Nullable`1<bool> allowPasting);
}
[ComVisibleAttribute("True")]
public enum DevExpress.Portable.PortableDialogResult : Enum {
    public int value__;
    public static PortableDialogResult None;
    public static PortableDialogResult OK;
    public static PortableDialogResult Cancel;
    public static PortableDialogResult Abort;
    public static PortableDialogResult Retry;
    public static PortableDialogResult Ignore;
    public static PortableDialogResult Yes;
    public static PortableDialogResult No;
}
public class DevExpress.Portable.PortableDispatchedTimer : object {
    private IPortableDispatchedTimer instance;
    private bool disposed;
    private EventHandler onDisposed;
    private EventHandler onTimer;
    public bool Enabled { get; public set; }
    public int Interval { get; public set; }
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public int get_Interval();
    public void set_Interval(int value);
    public void add_Disposed(EventHandler value);
    public void remove_Disposed(EventHandler value);
    public void add_Tick(EventHandler value);
    public void remove_Tick(EventHandler value);
    public void Start();
    public void Stop();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void OnTimerTick(object sender, EventArgs e);
    protected virtual void OnTick(EventArgs e);
}
public enum DevExpress.Portable.PortableMessageBoxIcon : Enum {
    public int value__;
    public static PortableMessageBoxIcon None;
    public static PortableMessageBoxIcon Hand;
    public static PortableMessageBoxIcon Stop;
    public static PortableMessageBoxIcon Error;
    public static PortableMessageBoxIcon Question;
    public static PortableMessageBoxIcon Exclamation;
    public static PortableMessageBoxIcon Warning;
    public static PortableMessageBoxIcon Asterisk;
    public static PortableMessageBoxIcon Information;
}
[TypeConverterAttribute("DevExpress.Utils.Design.PortablePaddingConverter")]
public class DevExpress.Portable.PortablePadding : ValueType {
    private bool all;
    private int top;
    private int left;
    private int right;
    private int bottom;
    public static PortablePadding Empty;
    [RefreshPropertiesAttribute("1")]
public int All { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Bottom { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Left { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Right { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Top { get; public set; }
    [BrowsableAttribute("False")]
public int Horizontal { get; }
    [BrowsableAttribute("False")]
public int Vertical { get; }
    public PortablePadding(int all);
    public PortablePadding(int left, int top, int right, int bottom);
    private static PortablePadding();
    public int get_All();
    public void set_All(int value);
    internal bool ShouldSerializeAll();
    public int get_Bottom();
    public void set_Bottom(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Horizontal();
    public int get_Vertical();
    public sealed virtual bool Equals(PortablePadding other);
    public virtual bool Equals(object other);
    public static PortablePadding op_Addition(PortablePadding p1, PortablePadding p2);
    public static PortablePadding op_Subtraction(PortablePadding p1, PortablePadding p2);
    public static bool op_Equality(PortablePadding p1, PortablePadding p2);
    public static bool op_Inequality(PortablePadding p1, PortablePadding p2);
    public virtual int GetHashCode();
    private int RotateLeft(int value, int nBits);
}
public class DevExpress.Portable.PortableScrollEventArgs : EventArgs {
    private PortableScrollEventType type;
    private PortableScrollOrientation scrollOrientation;
    private int oldValue;
    [CompilerGeneratedAttribute]
private int <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalEventArgs>k__BackingField;
    public PortableScrollOrientation ScrollOrientation { get; }
    public PortableScrollEventType Type { get; }
    public int NewValue { get; public set; }
    public int OldValue { get; }
    public object OriginalEventArgs { get; internal set; }
    public PortableScrollEventArgs(PortableScrollEventType type, int newValue);
    public PortableScrollEventArgs(PortableScrollEventType type, int newValue, PortableScrollOrientation scroll);
    public PortableScrollEventArgs(PortableScrollEventType type, int oldValue, int newValue);
    public PortableScrollEventArgs(PortableScrollEventType type, int oldValue, int newValue, PortableScrollOrientation scroll);
    public PortableScrollOrientation get_ScrollOrientation();
    public PortableScrollEventType get_Type();
    [CompilerGeneratedAttribute]
public int get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(int value);
    public int get_OldValue();
    [CompilerGeneratedAttribute]
public object get_OriginalEventArgs();
    [CompilerGeneratedAttribute]
internal void set_OriginalEventArgs(object value);
}
public class DevExpress.Portable.PortableScrollEventHandler : MulticastDelegate {
    public PortableScrollEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PortableScrollEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PortableScrollEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum DevExpress.Portable.PortableScrollEventType : Enum {
    public int value__;
    public static PortableScrollEventType SmallDecrement;
    public static PortableScrollEventType SmallIncrement;
    public static PortableScrollEventType LargeDecrement;
    public static PortableScrollEventType LargeIncrement;
    public static PortableScrollEventType ThumbPosition;
    public static PortableScrollEventType ThumbTrack;
    public static PortableScrollEventType First;
    public static PortableScrollEventType Last;
    public static PortableScrollEventType EndScroll;
}
public enum DevExpress.Portable.PortableScrollOrientation : Enum {
    public int value__;
    public static PortableScrollOrientation HorizontalScroll;
    public static PortableScrollOrientation VerticalScroll;
}
public static class DevExpress.Portable.PortableSystemInformation : object {
    private static IPlatformSystemInformationService SystemInformation { get; }
    public static int DoubleClickTime { get; }
    public static Size DoubleClickSize { get; }
    public static Size DragSize { get; }
    public static int MouseHoverTime { get; }
    public static Size MouseHoverSize { get; }
    public static int MenuShowDelay { get; }
    public static int MouseWheelScrollDelta { get; }
    public static int MouseWheelScrollLines { get; }
    public static int MonitorCount { get; }
    public static Size PrimaryMonitorSize { get; }
    public static int PrimaryScreenBitsPerPixel { get; }
    private static IPlatformSystemInformationService get_SystemInformation();
    public static int get_DoubleClickTime();
    public static Size get_DoubleClickSize();
    public static Size get_DragSize();
    public static int get_MouseHoverTime();
    public static Size get_MouseHoverSize();
    public static int get_MenuShowDelay();
    public static int get_MouseWheelScrollDelta();
    public static int get_MouseWheelScrollLines();
    public static int get_MonitorCount();
    public static Size get_PrimaryMonitorSize();
    public static int get_PrimaryScreenBitsPerPixel();
}
public interface DevExpress.Printing.IPrinterItem {
    public string Location { get; }
    public string Comment { get; }
    public string PrinterDocumentsInQueue { get; }
    public string Status { get; }
    public string DisplayName { get; }
    public string FullName { get; }
    public abstract virtual string get_Location();
    public abstract virtual string get_Comment();
    public abstract virtual string get_PrinterDocumentsInQueue();
    public abstract virtual string get_Status();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_FullName();
}
public interface DevExpress.Printing.IPrinterItemContainer {
    public IReadOnlyList`1<IPrinterItem> Items { get; }
    public string DefaultPrinterName { get; }
    public abstract virtual IReadOnlyList`1<IPrinterItem> get_Items();
    public abstract virtual string get_DefaultPrinterName();
}
public interface DevExpress.Printing.Native.IPrintDocumentExtension {
    public string PageRange { get; public set; }
    public abstract virtual string get_PageRange();
    public abstract virtual void set_PageRange(string value);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
internal static class DevExpress.Printing.Native.PrintHelper : object {
    private static bool IsValidPath(string path);
    public static bool ValidateFilePath(string printFileName, String& messageText);
    public static Exception GetPrinterException(Exception ex);
    private static bool TryGetMessage(int nativeErrorCode, String& message);
    public static Task`1<bool> GetCollateAsync(PrinterSettings settings);
    public static Task`1<short> GetCopiesAsync(PrinterSettings settings);
    public static Task`1<bool> GetPrintToFileAsync(PrinterSettings settings);
    public static Task`1<string> GetPrintFileNameAsync(PrinterSettings settings);
    public static Task`1<PrintRange> GetPrintRangeAsync(PrinterSettings settings);
    public static Task`1<Duplex> GetDuplexAsync(PrinterSettings settings);
    public static Task`1<PaperSizeCollection> GetPaperSizesAsync(PrinterSettings settings);
    public static Task`1<PaperSourceCollection> GetPaperSourcesAsync(PrinterSettings settings);
}
public interface DevExpress.Printing.Utils.DocumentStoring.IStorableObject {
    public StoredID StoredID { get; public set; }
    public abstract virtual StoredID get_StoredID();
    public abstract virtual void set_StoredID(StoredID value);
}
public abstract class DevExpress.Printing.Utils.DocumentStoring.StorableObjectBase : object {
    private StoredID storedID;
    private StoredID DevExpress.Printing.Utils.DocumentStoring.IStorableObject.StoredID { get; private set; }
    private sealed virtual override StoredID DevExpress.Printing.Utils.DocumentStoring.IStorableObject.get_StoredID();
    private sealed virtual override void DevExpress.Printing.Utils.DocumentStoring.IStorableObject.set_StoredID(StoredID value);
}
public class DevExpress.Printing.Utils.DocumentStoring.StoredID : ValueType {
    public static int UndefinedID;
    public static StoredID Undefined;
    private int id;
    public int Id { get; }
    public bool IsUndefined { get; }
    public StoredID(int id);
    private static StoredID();
    public int get_Id();
    public bool get_IsUndefined();
    public virtual string ToString();
    public static bool op_Equality(StoredID x, StoredID y);
    public static bool op_Inequality(StoredID x, StoredID y);
    public sealed virtual bool Equals(StoredID obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object obj);
}
public enum DevExpress.Schedule.DateCheckResult : Enum {
    public int value__;
    public static DateCheckResult Unknown;
    public static DateCheckResult Holiday;
    public static DateCheckResult WorkDay;
}
public class DevExpress.Schedule.ExactWorkDay : KnownDateDay {
    public WorkDayType Type { get; }
    public ExactWorkDay(DateTime date, string displayName);
    public virtual WorkDayType get_Type();
    public virtual bool IsWorkDay(DateTime date);
    public virtual DateCheckResult CheckDate(DateTime date);
    protected virtual object CloneCore();
    public ExactWorkDay Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Schedule.Holiday : KnownDateDay {
    private string location;
    public WorkDayType Type { get; }
    public string Location { get; public set; }
    public Holiday(DateTime date, string displayName, string location);
    public Holiday(DateTime date, string displayName);
    public virtual WorkDayType get_Type();
    public string get_Location();
    public void set_Location(string value);
    public virtual bool IsWorkDay(DateTime date);
    public virtual DateCheckResult CheckDate(DateTime date);
    protected virtual object CloneCore();
    public Holiday Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Schedule.HolidayBaseCollection : DXCollection`1<Holiday> {
}
public abstract class DevExpress.Schedule.KnownDateDay : WorkDay {
    private DateTime date;
    private string displayName;
    public string DisplayName { get; public set; }
    public DateTime Date { get; }
    protected KnownDateDay(DateTime date, string displayName);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public DateTime get_Date();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Schedule.OutlookHolidaysLoader : object {
    internal static int CAL_GREGORIAN;
    internal static int CAL_GREGORIAN_ARABIC;
    internal static int CAL_GREGORIAN_ME_FRENCH;
    internal static int CAL_GREGORIAN_US;
    internal static int CAL_GREGORIAN_XLIT_ENGLISH;
    internal static int CAL_GREGORIAN_XLIT_FRENCH;
    internal static int CAL_HEBREW;
    internal static int CAL_HIJRI;
    internal static int CAL_JAPAN;
    internal static int CAL_JULIAN;
    internal static int CAL_KOREA;
    internal static int CAL_TAIWAN;
    internal static int CAL_THAI;
    internal static int DefaultCalendarType;
    private Dictionary`2<int, Calendar> calendarHash;
    protected char HolidayLineSeparator { get; }
    protected char HolidayDateSeparator { get; }
    protected virtual char get_HolidayLineSeparator();
    protected virtual char get_HolidayDateSeparator();
    protected internal Calendar QueryCalendar(int calendarType);
    private static Calendar CreateCalendarInstance(int calendarType);
    public String[] ExtractLocations(string fileName);
    public String[] ExtractLocations(Stream stream);
    protected List`1<string> ReadLocations(StreamReader sr);
    public HolidayBaseCollection FromFile(string fileName);
    public HolidayBaseCollection FromFile(string fileName, String[] locations);
    public HolidayBaseCollection FromFile(string fileName, Encoding encoding, String[] locations);
    public HolidayBaseCollection FromStream(Stream stream);
    public HolidayBaseCollection FromStream(Stream stream, String[] locations);
    public HolidayBaseCollection FromStream(Stream stream, Encoding encoding, String[] locations);
    protected virtual StreamReader CreateStreamReader(Stream stream, Encoding encoding);
    protected void FillHolidays(HolidayBaseCollection target, StreamReader sr, List`1<string> locations);
    protected internal bool MatchLocation(List`1<string> locations, string currentLocation);
    protected internal bool IsLocation(string line);
    protected internal string ExtractLocationName(string line);
    protected internal virtual Holiday CreateHoliday(string holidayInfo, string location);
}
public class DevExpress.Schedule.Serializing.HolidayCollectionContextElement : XmlContextItem {
    protected HolidayBaseCollection Holidays { get; }
    public HolidayCollectionContextElement(HolidayBaseCollection holidays);
    protected HolidayBaseCollection get_Holidays();
    public virtual string ValueToString();
}
public class DevExpress.Schedule.Serializing.HolidayCollectionXmlLoader : ObjectCollectionXmlLoader {
    private HolidayBaseCollection holidays;
    protected ICollection Collection { get; }
    protected string XmlCollectionName { get; }
    public HolidayCollectionXmlLoader(XmlNode root, HolidayBaseCollection holidays);
    protected virtual ICollection get_Collection();
    protected virtual string get_XmlCollectionName();
    protected virtual object LoadObject(XmlNode root);
    protected virtual void AddObjectToCollection(object obj);
    protected virtual void ClearCollectionObjects();
}
public class DevExpress.Schedule.Serializing.HolidayCollectionXmlPersistenceHelper : CollectionXmlPersistenceHelper {
    protected string XmlCollectionName { get; }
    public HolidayCollectionXmlPersistenceHelper(HolidayBaseCollection holidays);
    protected virtual string get_XmlCollectionName();
    public static HolidayBaseCollection ObjectFromXml(string xml);
    public static HolidayBaseCollection ObjectFromXml(XmlNode root);
    protected virtual ObjectCollectionXmlLoader CreateObjectCollectionXmlLoader(XmlNode root);
    protected virtual IXmlContextItem CreateXmlContextItem(object obj);
}
public class DevExpress.Schedule.Serializing.HolidayContextElement : XmlContextItem {
    protected Holiday Holiday { get; }
    public HolidayContextElement(Holiday holiday);
    protected Holiday get_Holiday();
    public virtual string ValueToString();
}
public class DevExpress.Schedule.Serializing.HolidaySR : object {
    public static string XmlCollectionName;
    public static string XmlElementName;
    public static string Date;
    public static string DisplayName;
    public static string Location;
}
public class DevExpress.Schedule.Serializing.HolidayXmlLoader : ObjectXmlLoader {
    public HolidayXmlLoader(XmlNode root);
    public virtual object ObjectFromXml();
}
public class DevExpress.Schedule.Serializing.HolidayXmlPersistenceHelper : XmlPersistenceHelper {
    private Holiday holiday;
    public HolidayXmlPersistenceHelper(Holiday holiday);
    protected virtual IXmlContext GetXmlContext();
    public virtual ObjectXmlLoader CreateObjectXmlLoader(XmlNode root);
    public static Holiday ObjectFromXml(string xml);
    public static Holiday ObjectFromXml(XmlNode root);
}
public abstract class DevExpress.Schedule.WorkDay : object {
    public WorkDayType Type { get; }
    public abstract virtual WorkDayType get_Type();
    public abstract virtual bool IsWorkDay(DateTime date);
    public abstract virtual DateCheckResult CheckDate(DateTime date);
    private sealed virtual override object System.ICloneable.Clone();
    protected abstract virtual object CloneCore();
}
public enum DevExpress.Schedule.WorkDayType : Enum {
    public int value__;
    public static WorkDayType WeekDay;
    public static WorkDayType Holiday;
    public static WorkDayType ExactWorkDay;
}
public interface DevExpress.Security.ISafePathHelper {
    public abstract virtual string FixAndValidatePath(string fileName, UrlResolver urlResolver, IDataDirectoryPatchingService patchingService, AccessSettings dataResourcesAccessSettings);
}
public enum DevExpress.Security.Resources.AccessPermission : Enum {
    public int value__;
    public static AccessPermission Allow;
    public static AccessPermission Deny;
}
public class DevExpress.Security.Resources.AccessSettings : object {
    private static ReadOnlyCollection`1<IAccessRule> defaultRules;
    private ReadOnlyCollection`1<IAccessRule> rules;
    [CompilerGeneratedAttribute]
private static AccessSettings <StaticResources>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessSettings <DataResources>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessSettings <ReportingSpecificResources>k__BackingField;
    public static AccessSettings StaticResources { get; private set; }
    public static AccessSettings DataResources { get; private set; }
    public static AccessSettings ReportingSpecificResources { get; private set; }
    private static AccessSettings();
    public bool TrySetRules(IAccessRule[] rules);
    public void SetRules(IAccessRule[] rules);
    private IReadOnlyCollection`1<T> GetRules(AccessPermission permission);
    public bool CheckRules(Func`2<T, bool> check);
    public bool CheckUriAccess(Uri uri);
    [CompilerGeneratedAttribute]
public static AccessSettings get_StaticResources();
    [CompilerGeneratedAttribute]
private static void set_StaticResources(AccessSettings value);
    [CompilerGeneratedAttribute]
public static AccessSettings get_DataResources();
    [CompilerGeneratedAttribute]
private static void set_DataResources(AccessSettings value);
    [CompilerGeneratedAttribute]
public static AccessSettings get_ReportingSpecificResources();
    [CompilerGeneratedAttribute]
private static void set_ReportingSpecificResources(AccessSettings value);
}
public class DevExpress.Security.Resources.CustomAccessRule : UriAccessRule {
    [CompilerGeneratedAttribute]
private Func`2<Uri, bool> CheckUri;
    public CustomAccessRule(AccessPermission permission);
    [CompilerGeneratedAttribute]
public void add_CheckUri(Func`2<Uri, bool> value);
    [CompilerGeneratedAttribute]
public void remove_CheckUri(Func`2<Uri, bool> value);
    protected virtual bool CheckUriCore(Uri uri);
}
public class DevExpress.Security.Resources.DirectoryAccessRule : UriAccessRule {
    private String[] directories;
    public DirectoryAccessRule(AccessPermission permission, String[] directories);
    public DirectoryAccessRule(AccessPermission permission);
    public static DirectoryAccessRule Allow(String[] directories);
    public static DirectoryAccessRule Deny(String[] directories);
    protected virtual bool CheckUriCore(Uri uri);
    private bool DirectoriesContainPath(string path);
}
public interface DevExpress.Security.Resources.IAccessRule {
    public AccessPermission Permission { get; }
    public abstract virtual AccessPermission get_Permission();
}
public interface DevExpress.Security.Resources.IUriAccessRule {
    public abstract virtual bool CheckUri(Uri uri);
}
public abstract class DevExpress.Security.Resources.UriAccessRule : object {
    private AccessPermission permission;
    private AccessPermission DevExpress.Security.Resources.IAccessRule.Permission { get; }
    protected UriAccessRule(AccessPermission permission);
    protected abstract virtual bool CheckUriCore(Uri uri);
    protected static bool TryGetScheme(Uri uri, String& scheme);
    protected static string GetLocalPath(Uri uri);
    protected static string GetAbsoluteUri(Uri uri);
    private sealed virtual override AccessPermission DevExpress.Security.Resources.IAccessRule.get_Permission();
    private sealed virtual override bool DevExpress.Security.Resources.IUriAccessRule.CheckUri(Uri uri);
}
public class DevExpress.Security.Resources.UrlAccessRule : UriAccessRule {
    private static String[] uriSchemes;
    private String[] urls;
    public UrlAccessRule(AccessPermission permission, String[] urls);
    public UrlAccessRule(AccessPermission permission);
    private static UrlAccessRule();
    public static UrlAccessRule Allow(String[] urls);
    public static UrlAccessRule Deny(String[] urls);
    protected virtual bool CheckUriCore(Uri uri);
    private bool UrlsContainPath(string path);
}
public class DevExpress.Security.SafeFile : object {
    public static void Delete(string path, AccessSettings accessSettings);
    public static void Copy(string sourceFileName, string destFileName, AccessSettings accessSettings);
}
public class DevExpress.Security.SafePath : object {
    public static string GetTempFileName();
    public static string GetTempFileName(string extension);
    public static bool IsTempFile(string tmpFileName);
    public static bool IsExistingTempFile(string tmpFileName);
}
public class DevExpress.Security.SafePathHelper : object {
    private static Lazy`1<SafePathHelper> instance;
    public static ISafePathHelper Instance { get; }
    private static SafePathHelper();
    public static ISafePathHelper get_Instance();
    public sealed virtual string FixAndValidatePath(string fileName, UrlResolver urlResolver, IDataDirectoryPatchingService patchingService, AccessSettings dataResourcesAccessSettings);
}
public interface DevExpress.Services.ICommandExecutionListenerService {
    public abstract virtual void BeginCommandExecution(Command command, ICommandUIState state);
    public abstract virtual void EndCommandExecution(Command command, ICommandUIState state);
}
public interface DevExpress.Services.IKeyboardHandlerService {
    public abstract virtual void OnKeyDown(PortableKeyEventArgs e);
    public abstract virtual void OnKeyUp(PortableKeyEventArgs e);
    public abstract virtual void OnKeyPress(PortableKeyPressEventArgs e);
}
public interface DevExpress.Services.IMouseHandlerService {
    public abstract virtual void OnMouseMove(PortableMouseEventArgs e);
    public abstract virtual void OnMouseDown(PortableMouseEventArgs e);
    public abstract virtual void OnMouseUp(PortableMouseEventArgs e);
    public abstract virtual void OnMouseWheel(PortableMouseEventArgs e);
}
public interface DevExpress.Services.IMouseHandlerServiceEx {
    public abstract virtual void OnMouseDoubleClick(PortableMouseEventArgs e);
}
public class DevExpress.Services.Implementation.CommandExecutionListenerService : object {
    private BatchUpdateHelper batchUpdateHelper;
    private BatchUpdateHelper DevExpress.Utils.IBatchUpdateable.BatchUpdateHelper { get; }
    public bool IsUpdateLocked { get; }
    private BatchUpdateHelper BatchUpdateHelper { get; }
    private sealed virtual override BatchUpdateHelper DevExpress.Utils.IBatchUpdateable.get_BatchUpdateHelper();
    public sealed virtual bool get_IsUpdateLocked();
    private BatchUpdateHelper get_BatchUpdateHelper();
    public sealed virtual void BeginUpdate();
    public sealed virtual void CancelUpdate();
    public sealed virtual void EndUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnBeginUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnCancelUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnEndUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnFirstBeginUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnLastCancelUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnLastEndUpdate();
    public virtual void BeginCommandExecution(Command command, ICommandUIState state);
    public virtual void EndCommandExecution(Command command, ICommandUIState state);
    protected internal virtual void OnLastEndUpdateCore();
}
public abstract class DevExpress.Services.Implementation.KeyboardHandlerService : object {
    private KeyboardHandler handler;
    protected KeyboardHandler Handler { get; }
    protected KeyboardHandlerService(KeyboardHandler handler);
    public abstract virtual object CreateContext();
    protected virtual KeyboardHandler get_Handler();
    public virtual void OnKeyDown(PortableKeyEventArgs e);
    public virtual void OnKeyUp(PortableKeyEventArgs e);
    public virtual void OnKeyPress(PortableKeyPressEventArgs e);
}
public class DevExpress.Services.Implementation.MouseHandlerService : object {
    private MouseHandler handler;
    public MouseHandler Handler { get; }
    public MouseHandlerService(MouseHandler handler);
    public virtual MouseHandler get_Handler();
    public virtual void OnMouseMove(PortableMouseEventArgs e);
    public virtual void OnMouseDown(PortableMouseEventArgs e);
    public virtual void OnMouseUp(PortableMouseEventArgs e);
    public virtual void OnMouseWheel(PortableMouseEventArgs e);
}
public interface DevExpress.Services.Internal.ICommandUIStateManagerService {
    public abstract virtual void UpdateCommandUIState(Command command, ICommandUIState state);
}
public interface DevExpress.Services.Internal.IContainerComponent {
    public object Component { get; }
    public abstract virtual object get_Component();
}
public class DevExpress.Services.Internal.ServiceListChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Type <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private ListChangedType <ListChangedType>k__BackingField;
    public Type Service { get; private set; }
    public ListChangedType ListChangedType { get; private set; }
    public ServiceListChangedEventArgs(Type service, ListChangedType listChangedType);
    [CompilerGeneratedAttribute]
public Type get_Service();
    [CompilerGeneratedAttribute]
private void set_Service(Type value);
    [CompilerGeneratedAttribute]
public ListChangedType get_ListChangedType();
    [CompilerGeneratedAttribute]
private void set_ListChangedType(ListChangedType value);
}
public class DevExpress.Services.Internal.ServiceManager : object {
    private bool isDisposed;
    private Dictionary`2<Type, object> services;
    [CompilerGeneratedAttribute]
private EventHandler ServiceListChanged;
    public Dictionary`2<Type, object> Services { get; }
    public bool IsDisposed { get; }
    public virtual bool IsServiceExists(Type serviceType);
    public Dictionary`2<Type, object> get_Services();
    public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
public void add_ServiceListChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ServiceListChanged(EventHandler value);
    protected internal virtual void RaiseServiceListChanged(ListChangedType changedType, Type serviceType);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public virtual object GetService(Type serviceType);
    public sealed virtual void AddService(Type serviceType, ServiceCreatorCallback callback, bool promote);
    public sealed virtual void AddService(Type serviceType, ServiceCreatorCallback callback);
    public sealed virtual void AddService(Type serviceType, object serviceInstance, bool promote);
    public sealed virtual void AddService(Type serviceType, object serviceInstance);
    public sealed virtual void RemoveService(Type serviceType, bool promote);
    public sealed virtual void RemoveService(Type serviceType);
}
public interface DevExpress.Services.IProgressIndicationService {
    public abstract virtual void Begin(string displayName, int minProgress, int maxProgress, int currentProgress);
    public abstract virtual void SetProgress(int currentProgress);
    public abstract virtual void End();
}
public class DevExpress.Services.KeyboardHandlerServiceWrapper : object {
    private IKeyboardHandlerService service;
    public IKeyboardHandlerService Service { get; }
    public KeyboardHandlerServiceWrapper(IKeyboardHandlerService service);
    public IKeyboardHandlerService get_Service();
    public virtual void OnKeyDown(PortableKeyEventArgs e);
    public virtual void OnKeyUp(PortableKeyEventArgs e);
    public virtual void OnKeyPress(PortableKeyPressEventArgs e);
}
public class DevExpress.Services.MouseHandlerServiceWrapper : object {
    private IMouseHandlerService service;
    public IMouseHandlerService Service { get; }
    public MouseHandlerServiceWrapper(IMouseHandlerService service);
    public IMouseHandlerService get_Service();
    public virtual void OnMouseMove(PortableMouseEventArgs e);
    public virtual void OnMouseDown(PortableMouseEventArgs e);
    public virtual void OnMouseUp(PortableMouseEventArgs e);
    public virtual void OnMouseWheel(PortableMouseEventArgs e);
}
internal class DevExpress.Utils.About.AlgoProvider : object {
    private static Nullable`1<Guid> id;
    internal static Nullable`1<Guid> Id { get; }
    internal static Nullable`1<Guid> get_Id();
    private static Nullable`1<Guid> GetId();
}
[AttributeUsageAttribute("1")]
public class DevExpress.Utils.About.AssemblyLicenseTargetAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Target>k__BackingField;
    public Type Target { get; private set; }
    public AssemblyLicenseTargetAttribute(Type target);
    [CompilerGeneratedAttribute]
public Type get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(Type value);
}
internal class DevExpress.Utils.About.CRC32 : object {
    private UInt32[] tab;
    private UInt32 poly;
    private static CRC32 _default;
    public static CRC32 Default { get; }
    public CRC32(UInt32 poly);
    private void Init();
    public static CRC32 get_Default();
    public UInt32 ComputeHash(string text);
    public UInt32 ComputeHash(Byte[] data);
    public virtual UInt32 ComputeHash(Byte[] data, int start, int length);
    public virtual UInt32 ComputeHash(T data, int start, int length);
}
public class DevExpress.Utils.About.DXLicenceHelper : object {
    private Type type;
    private bool validated;
    public DXLicenceHelper(Type type);
    public bool Validate();
    private bool ValidateCore();
}
public class DevExpress.Utils.About.DXLicense : License {
    private DXLicenseType licType;
    private bool expired;
    private ProductKind productKind;
    public bool IsExpired { get; }
    public ProductKind Kind { get; }
    public DXLicenseType LicType { get; }
    public string LicenseKey { get; }
    internal DXLicense(DXLicenseType licType, bool exp, ProductKind kind);
    internal DXLicense(DXLicenseType licType, bool exp);
    public DXLicense(DXLicenseType licType);
    public bool get_IsExpired();
    public ProductKind get_Kind();
    public DXLicenseType get_LicType();
    public virtual string get_LicenseKey();
    public virtual void Dispose();
}
public abstract class DevExpress.Utils.About.DXLicenseProvider : LicenseProvider {
    private static Hashtable keys;
    protected ProductKind Kind { get; }
    protected bool IsMvcWizard { get; }
    protected ProductKind[] Kinds { get; }
    private static DXLicenseProvider();
    public virtual License GetLicense(LicenseContext context, Type type, object instance, bool allowExceptions);
    private static string GetSavedLicenseKeyCaseInvensitive(LicenseContext context, Type type, Assembly asm);
    private static string GetSavedLicenseKeyCore(LicenseContext context, Type type, Assembly asm);
    private string GetSavedLicenseKey(LicenseContext context, Type type);
    protected void SetSavedLicenseKey(LicenseContext context, Type type, string key);
    [EditorBrowsableAttribute("1")]
public static void SetTrial(string key, String[] types);
    protected virtual DXLicenseType ParseKey(string key, DateTime& date);
    protected virtual string EncodeKey(DXLicenseType licType, UserData user);
    protected abstract virtual ProductKind get_Kind();
    protected virtual bool get_IsMvcWizard();
    protected virtual ProductKind[] get_Kinds();
}
public enum DevExpress.Utils.About.DXLicenseType : Enum {
    public int value__;
    public static DXLicenseType Full;
    public static DXLicenseType Trial;
    public static DXLicenseType None;
}
internal class DevExpress.Utils.About.EmptySilverlightClass : object {
}
public class DevExpress.Utils.About.Info : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTrial>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpired>k__BackingField;
    public string Text { get; public set; }
    public bool IsTrial { get; public set; }
    public bool IsExpired { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTrial();
    [CompilerGeneratedAttribute]
public void set_IsTrial(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExpired();
    [CompilerGeneratedAttribute]
public void set_IsExpired(bool value);
}
public class DevExpress.Utils.About.ProductInfoHelper : object {
    public static string PlatformFreeOffer;
    public static string PlatformWinForms;
    public static string PlatformDashboard;
    public static string PlatformUniversal;
    public static string WinGrid;
    public static string WinEditors;
    public static string WinDiagram;
    public static string WinVGrid;
    public static string WinRichEdit;
    public static string WinSpellChecker;
    public static string WinScheduler;
    public static string WinSnap;
    public static string WinCharts;
    public static string WinTreeList;
    public static string WinPivotGrid;
    public static string WinXtraBars;
    public static string WinMaps;
    public static string WinSpreadsheet;
    public static string WinNavBar;
    public static string WinLayoutControl;
    public static string WinPrinting;
    public static string WinGauge;
    public static string WinPdfViewer;
    public static string WinWizard;
    public static string WinReports;
    public static string WinXPO;
    public static string WinMVVM;
    public static string WinTreeMap;
    public static ProductStringInfo GetProductInfo(ProductKind kind);
}
public enum DevExpress.Utils.About.ProductInfoStage : Enum {
    public int value__;
    public static ProductInfoStage Beta;
    public static ProductInfoStage Trial;
    public static ProductInfoStage Registered;
    public static ProductInfoStage Free;
}
[FlagsAttribute]
public enum DevExpress.Utils.About.ProductKind : Enum {
    public long value__;
    public static ProductKind Default;
    public static ProductKind DXperienceWin;
    public static ProductKind XtraReports;
    public static ProductKind DemoWin;
    public static ProductKind XPO;
    public static ProductKind DevExtremeAspNet;
    public static ProductKind DXperienceASP;
    public static ProductKind XAF;
    public static ProductKind Blazor;
    public static ProductKind DXperienceWPF;
    public static ProductKind DXperienceSliverlight;
    public static ProductKind LightSwitchReports;
    public static ProductKind Dashboard;
    public static ProductKind CodedUIWin;
    public static ProductKind Snap;
    public static ProductKind DevExtremeHtmlJs;
    public static ProductKind Docs;
    public static ProductKind XtraReportsWpf;
    public static ProductKind XtraReportsSL;
    public static ProductKind XtraReportsWeb;
    public static ProductKind XtraReportsWin;
    public static ProductKind XtraReportsBlazor;
    public static ProductKind FreeOffer;
    public static ProductKind DXperiencePro;
    public static ProductKind DXperienceEnt;
    public static ProductKind DXperienceUni;
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.About.ProductKindAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ProductKind <ProductKind>k__BackingField;
    public ProductKind ProductKind { get; private set; }
    public ProductKindAttribute(ProductKind productKind);
    [CompilerGeneratedAttribute]
public ProductKind get_ProductKind();
    [CompilerGeneratedAttribute]
private void set_ProductKind(ProductKind value);
}
public class DevExpress.Utils.About.ProductStringInfo : object {
    private string name;
    private string platform;
    public string ProductName { get; }
    public string ProductPlatform { get; }
    public ProductStringInfo(string name);
    public ProductStringInfo(string platform, string name);
    public string get_ProductName();
    public string get_ProductPlatform();
}
public class DevExpress.Utils.About.ProductStringInfoWin : ProductStringInfo {
    public ProductStringInfoWin(string productName);
}
public abstract class DevExpress.Utils.About.UAlgo : object {
    private static Nullable`1<byte> status;
    private static Nullable`1<bool> enabled;
    private static Nullable`1<byte> defaultPlatform;
    private static UAlgoPathInfo pathInfo;
    public static byte pUnknown;
    public static byte pWinForms;
    public static byte pWeb;
    public static byte pWPF;
    public static byte pReporting;
    public static byte pSilverlight;
    public static byte pWinRT;
    public static byte pXAF;
    public static byte pCodeRush;
    public static byte pDataAccess;
    public static byte pXPO;
    public static byte kDemo;
    public static byte kDemoMain;
    public static byte kDemoModule;
    public static byte kDemoMainSearch;
    public static byte kDesignTime;
    public static byte kDesignTimeFrame;
    public static byte kDesignTimeWizard;
    public static byte kDesignTimeTemplate;
    public static byte kInstantLayoutAssistant;
    public static byte kStack;
    public static byte kExceptionDemo;
    public static byte kExceptionVisualStudio;
    public static byte kInstall;
    public static byte kUnInstall;
    public static byte kExceptionPaintDesign;
    public static byte kExceptionPaint;
    public static byte kProject;
    public static byte kCustomAction;
    [ThreadStaticAttribute]
private static UAlgo _default;
    [CompilerGeneratedAttribute]
private byte <LastPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private static Nullable`1<int> <VersionIdExt>k__BackingField;
    internal static UAlgoPathInfo PathInfo { get; }
    public static bool Enabled { get; public set; }
    public static UAlgo Default { get; }
    protected static Nullable`1<byte> DefaultPlatform { get; protected set; }
    protected static Nullable`1<byte> Status { get; protected set; }
    protected byte LastPlatform { get; protected set; }
    internal static int VersionId { get; }
    internal static string Version { get; }
    public static Nullable`1<int> VersionIdExt { get; public set; }
    public static bool LogifyTraceListenerEnabled { get; }
    private static UAlgo();
    internal static UAlgoPathInfo get_PathInfo();
    public static bool get_Enabled();
    public static void set_Enabled(bool value);
    public static UAlgo get_Default();
    protected static Nullable`1<byte> get_DefaultPlatform();
    protected static void set_DefaultPlatform(Nullable`1<byte> value);
    protected static Nullable`1<byte> get_Status();
    protected static void set_Status(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
protected byte get_LastPlatform();
    [CompilerGeneratedAttribute]
protected void set_LastPlatform(byte value);
    internal static int get_VersionId();
    internal static string get_Version();
    [CompilerGeneratedAttribute]
public static Nullable`1<int> get_VersionIdExt();
    [CompilerGeneratedAttribute]
public static void set_VersionIdExt(Nullable`1<int> value);
    private static bool ShouldUseLogify();
    public static void Wpf();
    public static void WinForms();
    public static void Web();
    public static void Project();
    public static void DemoMode();
    public static void DesignMode();
    public static void ASPDesigner();
    public static void WinFormsDesigner();
    [SecuritySafeCriticalAttribute]
private static bool CheckEnabled();
    private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e);
    public abstract virtual void DoEventException(UnhandledExceptionEventArgs e);
    public abstract virtual void DoEventException(Exception e);
    public abstract virtual void DoStackEvent(byte platform);
    public abstract virtual void DoEventTemplate(byte platform, object instance, Object[] customParams);
    public abstract virtual void DoEventInstall(byte kind);
    public abstract virtual void DoEventObject(byte kind, object instance);
    public abstract virtual void DoEventObject(byte kind, byte platform, object instance);
    public abstract virtual void DoEvent(byte kind, Type action);
    public abstract virtual void DoEvent(byte kind, byte platform, Type action);
    public abstract virtual void DoEvent(byte kind, string action);
    public abstract virtual void DoEvent(byte kind, byte platform, string action);
    public abstract virtual void DoEventProject(string json);
    public abstract virtual void DoCustomEvent(byte platform, string json);
    public static bool get_LogifyTraceListenerEnabled();
    public static void AddDesktopTraceListener(string apiKey, string applicationName);
    public static void AddWebFormsTraceListener(string apiKey, string applicationName);
}
public static class DevExpress.Utils.About.UAlgoConstants : object {
    public static byte pUnknown;
    public static byte pWinForms;
    public static byte pWeb;
    public static byte pWPF;
    public static byte pSilverlight;
    public static byte pWinRT;
    public static byte pXAF;
    public static byte pMVC;
    public static byte pReporting;
    public static byte pDashboard;
    public static byte pCodeRush;
    public static byte pTestCafe;
    public static byte pDocumentServer;
    public static byte pDevExtreme;
    public static byte pDataAccess;
    public static byte pXPO;
    public static byte kDemo;
    public static byte kDemoMain;
    public static byte kDemoModule;
    public static byte kDemoMainSearch;
    public static byte kDesignTime;
    public static byte kDesignTimeFrame;
    public static byte kDesignTimeWizard;
    public static byte kDesignTimeTemplate;
    public static byte kInstantLayoutAssistant;
    public static byte kStack;
    public static byte kExceptionDemo;
    public static byte kExceptionVisualStudio;
    public static byte kExceptionPaintDesign;
    public static byte kExceptionPaint;
    public static byte kProject;
    public static byte kInstall;
    public static byte kUnInstall;
    public static byte kTestCafeRecorder;
    public static byte kTestCafeControlPanel;
    public static byte kTestCafeFatalError;
    public static byte kCustomAction;
}
public class DevExpress.Utils.About.UAlgoDefault : UAlgo {
    private List`1<byte> list;
    internal static int kProjectMax;
    private UAlgoPost postInfo;
    public string Path { get; }
    private UAlgoPost PostInfo { get; }
    public string get_Path();
    public virtual void DoStackEvent(byte platform);
    public virtual void DoEventTemplate(byte platform, object instance, Object[] customParams);
    public virtual void DoEventException(UnhandledExceptionEventArgs e);
    public virtual void DoEventException(Exception e);
    public virtual void DoEventInstall(byte kind);
    public virtual void DoEventObject(byte kind, object instance);
    public virtual void DoEventObject(byte kind, byte platform, object instance);
    public virtual void DoEvent(byte kind, Type action);
    public virtual void DoEvent(byte kind, byte platform, Type action);
    public virtual void DoEvent(byte kind, string action);
    public virtual void DoCustomEvent(byte platform, string json);
    public virtual void DoEvent(byte kind, byte platform, string action);
    public virtual void DoEventProject(string json);
    internal virtual void DoEvent(byte kind, byte platform, string action, UInt32 actionNumber);
    private int GetTextLength(byte kind);
    private void CheckUpdateStatus(byte kind);
    private byte CheckPlatform(byte platform);
    private bool IsDemo(byte kind);
    private void CheckFlush();
    private void FlushList();
    private void DoPost(int wait);
    private UAlgoPost get_PostInfo();
    private bool CheckPost();
    private void Disable();
}
internal class DevExpress.Utils.About.UAlgoExceptionReportGenerator : object {
    public string GetText(Exception eo);
    private static bool SystemParametersInfo(int nAction, int nParam, RECT& rc, int nUpdate);
    private string GetInfo();
    private string GenerateExceptionReportCore(Exception e);
    private static string GenerateExceptionReportEx(Exception e);
    private static Exception[] GenerateList(Exception e);
    private static string GenerateExceptionReport(Exception[] list);
    private static string GetExceptionType(Exception e);
}
public class DevExpress.Utils.About.UAlgoLogify : UAlgoDefault {
    private void OnLogifyCanReportException(object sender, CancelEventArgs e);
    public virtual void DoEventException(UnhandledExceptionEventArgs e);
    public virtual void DoEventException(Exception e);
    internal virtual void DoEvent(byte kind, byte platform, string action, UInt32 actionNumber);
}
internal class DevExpress.Utils.About.UAlgoPathInfo : object {
    private string lastExceptionFileName;
    private string path;
    public string LastExceptionReportFileName { get; }
    public string Path { get; }
    public static bool CheckFolder(string path);
    private static string GetPath();
    private static string GetLastExceptionReportFileName();
    public string get_LastExceptionReportFileName();
    public string get_Path();
}
internal class DevExpress.Utils.About.UAlgoPost : object {
    private string path;
    private Guid id;
    private int version;
    private Task worker;
    internal bool disabled;
    public bool IsWorking { get; }
    public UAlgoPost(string path, Guid id, int version);
    public bool Post();
    public bool get_IsWorking();
    [AsyncStateMachineAttribute("DevExpress.Utils.About.UAlgoPost/<ProcessData>d__9")]
private Task ProcessData();
    private static Task`1<Result> Submit(string uriString, Byte[] data);
    [AsyncStateMachineAttribute("DevExpress.Utils.About.UAlgoPost/<<Post>b__5_0>d")]
[CompilerGeneratedAttribute]
private Task <Post>b__5_0();
}
public class DevExpress.Utils.About.Utility : object {
    internal static ProductKind[] productList;
    internal static String[] productText;
    protected static TraceSwitch licensingSwitch;
    private static bool staticAboutShown;
    private static bool isDesignMode;
    private static Nullable`1<bool> isDebuggerAttached;
    internal static Nullable`1<bool> expiredCore;
    public static bool IsDesignMode { get; public set; }
    public static bool IsDebuggerAttached { get; }
    private static Utility();
    public static int IsOnlyWin();
    public static int IsOnlyWeb();
    public static int IsOnlyWpf();
    public static int IsOnly(string platform);
    public static string GetExpiredText(int width, int height);
    private static string GetPropertyText(Type type, string name);
    public static string GetRegisteredText();
    public static string GetTrialText();
    public static void TraceWithCallStack(string message);
    public static bool GetAllowStaticAbout();
    public static bool ShouldShowAbout();
    private static bool ShouldShowAboutCore();
    private static bool ShouldShowAgain(DateTimeConverter converter, string strLastShownDate);
    public static bool get_IsDesignMode();
    public static void set_IsDesignMode(bool value);
    public static bool get_IsDebuggerAttached();
    public static bool IsDebuggerAttachedAndControlsRegistered();
    public static ProductKind GetDXperienceKind();
    public static bool IsExpired();
    public static int DaysLeft();
    public static bool IsLic();
    public static UserData GetInfoEx();
    internal static DateTime GetTicks();
    public static UserData GetInfo();
    public static bool IsFreeOfferOnly(ProductKind kind, ProductInfoStage stage);
    public static string GetSerial(ProductKind kind, ProductInfoStage stage);
}
public class DevExpress.Utils.Action0 : MulticastDelegate {
    public Action0(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Action1`1 : MulticastDelegate {
    public Action1`1(object object, IntPtr method);
    public virtual void Invoke(T1 obj1);
    public virtual IAsyncResult BeginInvoke(T1 obj1, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Action2`2 : MulticastDelegate {
    public Action2`2(object object, IntPtr method);
    public virtual void Invoke(T1 obj1, T2 obj2);
    public virtual IAsyncResult BeginInvoke(T1 obj1, T2 obj2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Action3`3 : MulticastDelegate {
    public Action3`3(object object, IntPtr method);
    public virtual void Invoke(T1 obj1, T2 obj2, T3 obj3);
    public virtual IAsyncResult BeginInvoke(T1 obj1, T2 obj2, T3 obj3, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Action4`4 : MulticastDelegate {
    public Action4`4(object object, IntPtr method);
    public virtual void Invoke(T1 obj1, T2 obj2, T3 obj3, T4 obj4);
    public virtual IAsyncResult BeginInvoke(T1 obj1, T2 obj2, T3 obj3, T4 obj4, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class DevExpress.Utils.Algorithms : object {
    public static int BinarySearch(IList`1<T> list, T value, IComparer`1<T> comparer);
    public static int BinarySearch(IList`1<T> list, int startIndex, int length, T value, IComparer`1<T> comparer);
    public static int BinarySearch(IList`1<T> list, IComparable`1<T> predicate);
    public static int BinarySearch(IList`1<T> list, ComparableT predicate);
    public static int BinarySearch(IVector`1<T> list, IComparable`1<T> predicate);
    public static int BinarySearch(IVector`1<T> list, ComparableT predicate);
    public static int BinarySearch(IList`1<T> list, IComparable`1<T> predicate, int startIndex, int endIndex);
    public static int BinarySearch(IList`1<T> list, ComparableT predicate, int startIndex, int endIndex);
    public static int BinarySearch(IVector`1<T> list, IComparable`1<T> predicate, int startIndex, int endIndex);
    public static int BinarySearch(IVector`1<T> list, ComparableT predicate, int startIndex, int endIndex);
    public static int BinarySearchReverseOrder(IList`1<T> list, IComparable`1<T> predicate);
    public static int BinarySearchReverseOrder(IList`1<T> list, ComparableT predicate);
    public static int BinarySearchReverseOrder(IVector`1<T> list, IComparable`1<T> predicate);
    public static int BinarySearchReverseOrder(IVector`1<T> list, ComparableT predicate);
    private static int ReverseComparision(int comp);
    public static int BinarySearchReverseOrder(IList`1<T> list, IComparable`1<T> predicate, int startIndex, int endIndex);
    public static int BinarySearchReverseOrder(IList`1<T> list, ComparableT predicate, int startIndex, int endIndex);
    public static int BinarySearchReverseOrder(IVector`1<T> list, IComparable`1<T> predicate, int startIndex, int endIndex);
    public static int BinarySearchReverseOrder(IVector`1<T> list, ComparableT predicate, int startIndex, int endIndex);
    public static int BinarySearch(int count, Func`2<int, int> compareTargetWithItemAtIndex);
    public static int BinarySearch(Func`2<int, int> compareTargetWithItemAtIndex, int startIndex, int endIndex);
    public static int BinarySearch(int count, P par, Func`3<P, int, int> compareTargetWithItemAtIndex);
    public static int BinarySearch(P par, Func`3<P, int, int> compareTargetWithItemAtIndex, int startIndex, int endIndex);
    public static int BinarySearch(int count, P1 par1, P2 par2, Func`4<P1, P2, int, int> compareTargetWithItemAtIndex);
    public static int BinarySearch(P1 par1, P2 par2, Func`4<P1, P2, int, int> compareTargetWithItemAtIndex, int startIndex, int endIndex);
    public static int BinarySearch(int count, P1 par1, P2 par2, P3 par3, Func`5<P1, P2, P3, int, int> compareTargetWithItemAtIndex);
    public static int BinarySearch(P1 par1, P2 par2, P3 par3, Func`5<P1, P2, P3, int, int> compareTargetWithItemAtIndex, int startIndex, int endIndex);
    private static int BinarySearch(C compareTargetWithItemAtIndex, int startIndex, int endIndex);
    public static void InvertElementsOrder(IList`1<T> list);
    public static void InvertElementsOrder(IVector`1<T> list);
    public static void SwapElements(IList`1<T> list, int index1, int index2);
    public static void SwapElements(IVector`1<T> list, int index1, int index2);
    public static T Min(T index1, T index2);
    public static T Max(T index1, T index2);
    public static void DepthFirstSearch(N initialNode, Func`2<N, IEnumerable`1<N>> neighboursFuncInReverseOrder, Action`1<N> yieldFuncInReverseOrder, Action`2<N, N> loopDetectionAction, IEqualityComparer`1<N> equalityComparer);
    public static IList`1<T> TopologicalSort(IList`1<T> sourceObjects, IComparer`1<T> comparer);
    public static IEnumerable`1<T> Unit(T instance);
    public static ComparisonComparerStruct`1<T> GetComparisonComparerStruct(Comparison`1<T> comparison);
    public static IComparer`1<T> GetComparisonComparer(Comparison`1<T> comparison);
    public static FuncEqualityComparerStruct`1<T> GetFuncEqualityComparerStruct(Func`3<T, T, bool> eqComparison, Func`2<T, int> hash);
    public static IEqualityComparer`1<T> GetFuncEqualityComparer(Func`3<T, T, bool> eqComparison, Func`2<T, int> hash);
    public static ComparisonComparerEqualityComparerStruct`1<T> GetComparisonComparerEqualityComparerStruct(Comparison`1<T> comparison, Func`3<T, T, bool> eqComparison, Func`2<T, int> hash);
    [IteratorStateMachineAttribute("DevExpress.Utils.Algorithms/<MergeOfOrderedEnumerators>d__48`4")]
public static IEnumerator`1<T> MergeOfOrderedEnumerators(AE ae, BE be, C comparer, bool distinctFriendlyOutput);
    public static IEnumerator`1<T> MergeOfOrderedEnumerators(IEnumerator`1<T> ae, IEnumerator`1<T> be, C comparer, bool distinctFriendlyOutput);
    public static IEnumerator`1<T> MergeOfOrderedEnumerators(IEnumerator`1<T> a, IEnumerator`1<T> b, IComparer`1<T> comparer, bool distinctFriendlyOutput);
    public static IEnumerator`1<T> MergeOfOrderedEnumerators(IEnumerator`1<T> a, IEnumerator`1<T> b, Comparison`1<T> comparison, bool distinctFriendlyOutput);
    public static IEnumerator`1<T> MergeOfOrderedEnumerators(IEnumerator`1<T> a, IEnumerator`1<T> b, bool distinctFriendlyOutput);
    [IteratorStateMachineAttribute("DevExpress.Utils.Algorithms/<MergeOfOrdered>d__53`2")]
public static IEnumerable`1<T> MergeOfOrdered(IEnumerable`1<T> _a, IEnumerable`1<T> _b, C comparer, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, IComparer`1<T> comparer, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, Comparison`1<T> comparison, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, bool distinctFriendlyOutput);
    private static IEnumerable`1<T> _MergeOfOrderedCore(IList`1<IEnumerable`1<T>> sequences, C comparer, int startIndex, int count, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IList`1<IEnumerable`1<T>> sequences, C comparer, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IList`1<IEnumerable`1<T>> sequences, IComparer`1<T> comparer, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IList`1<IEnumerable`1<T>> sequences, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IList`1<IEnumerable`1<T>> sequences, Comparison`1<T> comparison, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IEnumerable`1<IEnumerable`1<T>> sequences, C comparer, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IEnumerable`1<IEnumerable`1<T>> sequences, IComparer`1<T> comparer, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IEnumerable`1<IEnumerable`1<T>> sequences, bool distinctFriendlyOutput);
    public static IEnumerable`1<T> MergeOfOrdered(IEnumerable`1<IEnumerable`1<T>> sequences, Comparison`1<T> comparison, bool distinctFriendlyOutput);
    [IteratorStateMachineAttribute("DevExpress.Utils.Algorithms/<DistinctOfOrderedEnumerator>d__66`2")]
public static IEnumerator`1<T> DistinctOfOrderedEnumerator(E ae, IEqualityComparer`1<T> comparer);
    public static IEnumerator`1<T> DistinctOfOrderedEnumerator(IEnumerator`1<T> ae, IEqualityComparer`1<T> comparer);
    public static IEnumerator`1<T> DistinctOfOrderedEnumerator(IEnumerator`1<T> ae, Func`3<T, T, bool> eqComparison);
    [IteratorStateMachineAttribute("DevExpress.Utils.Algorithms/<DistinctOfOrdered>d__69`1")]
public static IEnumerable`1<T> DistinctOfOrdered(IEnumerable`1<T> e, IEqualityComparer`1<T> comparer);
    public static IEnumerable`1<T> DistinctOfOrdered(IEnumerable`1<T> ae, Func`3<T, T, bool> eqComparison);
    public static IEnumerator`1<T> UnionOfOrderedEnumerators(AE ae, BE be, C comparer);
    public static IEnumerator`1<T> UnionOfOrderedEnumerators(IEnumerator`1<T> ae, IEnumerator`1<T> be, C comparer);
    public static IEnumerator`1<T> UnionOfOrderedEnumerators(IEnumerator`1<T> a, IEnumerator`1<T> b, IComparer`1<T> comparer);
    public static IEnumerator`1<T> UnionOfOrderedEnumerators(IEnumerator`1<T> a, IEnumerator`1<T> b, Comparison`1<T> comparison);
    public static IEnumerator`1<T> UnionOfOrderedEnumerators(IEnumerator`1<T> a, IEnumerator`1<T> b);
    public static IEnumerable`1<T> UnionOfOrdered(IEnumerable`1<T> ae, IEnumerable`1<T> be, C comparer);
    public static IEnumerable`1<T> UnionOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, IComparer`1<T> comparer);
    public static IEnumerable`1<T> UnionOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, Comparison`1<T> comparison);
    public static IEnumerable`1<T> UnionOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b);
    public static IEnumerable`1<T> UnionOfOrdered(IList`1<IEnumerable`1<T>> le, C comparer);
    public static IEnumerable`1<T> UnionOfOrdered(IList`1<IEnumerable`1<T>> le, IComparer`1<T> comparer);
    public static IEnumerable`1<T> UnionOfOrdered(IList`1<IEnumerable`1<T>> le, Comparison`1<T> comparison);
    public static IEnumerable`1<T> UnionOfOrdered(IList`1<IEnumerable`1<T>> le);
    public static IEnumerable`1<T> UnionOfOrdered(IEnumerable`1<IEnumerable`1<T>> le, C comparer);
    public static IEnumerable`1<T> UnionOfOrdered(IEnumerable`1<IEnumerable`1<T>> le, IComparer`1<T> comparer);
    public static IEnumerable`1<T> UnionOfOrdered(IEnumerable`1<IEnumerable`1<T>> le, Comparison`1<T> comparison);
    public static IEnumerable`1<T> UnionOfOrdered(IEnumerable`1<IEnumerable`1<T>> le);
    [IteratorStateMachineAttribute("DevExpress.Utils.Algorithms/<ExceptOfOrdered>d__88`2")]
public static IEnumerable`1<T> ExceptOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, C comparer);
    public static IEnumerable`1<T> ExceptOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, IComparer`1<T> comparer);
    public static IEnumerable`1<T> ExceptOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, Comparison`1<T> comparer);
    public static IEnumerable`1<T> ExceptOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b);
    [IteratorStateMachineAttribute("DevExpress.Utils.Algorithms/<IntersectOfOrdered>d__92`2")]
public static IEnumerable`1<T> IntersectOfOrdered(IEnumerable`1<T> _a, IEnumerable`1<T> _b, C comparer);
    public static IEnumerable`1<T> IntersectOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, IComparer`1<T> comparer);
    public static IEnumerable`1<T> IntersectOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b, Comparison`1<T> comparison);
    public static IEnumerable`1<T> IntersectOfOrdered(IEnumerable`1<T> a, IEnumerable`1<T> b);
    private static IEnumerable`1<T> _IntersectOfOrderedCore(IList`1<IEnumerable`1<T>> sequences, C comparer, int startIndex, int count);
    public static IEnumerable`1<T> IntersectOfOrdered(IList`1<IEnumerable`1<T>> sequences, C comparer);
    public static IEnumerable`1<T> IntersectOfOrdered(IList`1<IEnumerable`1<T>> sequences, IComparer`1<T> comparer);
    public static IEnumerable`1<T> IntersectOfOrdered(IList`1<IEnumerable`1<T>> sequences, Comparison`1<T> comparison);
    public static IEnumerable`1<T> IntersectOfOrdered(IEnumerable`1<IEnumerable`1<T>> sequences, C comparer);
    public static IEnumerable`1<T> IntersectOfOrdered(IEnumerable`1<IEnumerable`1<T>> sequences, IComparer`1<T> comparer);
    public static IEnumerable`1<T> IntersectOfOrdered(IEnumerable`1<IEnumerable`1<T>> sequences, Comparison`1<T> comparison);
    public static int GetCommonPrefixLength(string x, string y, int lengthLimit);
    private static int _GetCommonPrefixLength_Naive(string a, string b, int indStart, int indJustBeyondLast);
    private static int _GetCommonPrefixLength_64_Core(string a, string b, int indStart, int indJustBeyondLast);
    private static int _GetCommonPrefixLength_32_Core(string a, string b, int indStart, int indJustBeyondLast);
}
public static class DevExpress.Utils.ArrayHelper : object {
    public static T[] InsertItem(T[] items, T item, int index);
    public static T[] Filter(T[] items, Predicate`1<T> match);
    private static bool Match(T[] array, T[] sample, int index);
    private static bool MatchBack(T[] array, T[] sample, int count);
    public static int FindSubset(T[] array, T[] sample);
    public static bool StartsWith(T[] array, T[] sample);
    public static bool EndsWith(T[] array, T[] sample);
    public static bool EndsWith(T[] array, T[] sample, int count);
    public static TOutput[] ConvertAll(TInput[] array, Converter`2<TInput, TOutput> converter);
    public static T Find(T[] array, Predicate`1<T> match);
    public static void ForEach(IEnumerable`1<T> enumerable, Action`1<T> action);
    public static bool ArraysEqual(IList`1<T> first, IList`1<T> second);
    public static bool ArraysEqual(IList`1<T> first, IList`1<T> second, IEqualityComparer`1<T> comparer);
    public static bool ArraysEqual(IList`1<T> first, IList`1<T> second, int startIndex, IEqualityComparer`1<T> comparer);
    public static T[] Clone(T[] source);
    private static T[] CloneInternal(T[] source, Func`2<T, T> cloneItem);
}
public static class DevExpress.Utils.AssemblyHelper : object {
    private static Assembly entryAssembly;
    private static ConcurrentDictionary`2<Assembly, string> defaultNamespaces;
    private static String[] excludedSuffixes;
    public static Assembly EntryAssembly { get; public set; }
    private static AssemblyHelper();
    public static Assembly get_EntryAssembly();
    public static void set_EntryAssembly(Assembly value);
    public static bool HasAttribute(string assemblyName, Type attributeType);
    public static bool HasAttribute(Assembly assembly, Type attributeType);
    public static bool IsLoadedAssembly(string assemblyName);
    public static Assembly LoadDXAssembly(string assemblyName);
    public static Assembly GetLoadedAssembly(string assemblyName);
    public static IEnumerable`1<Assembly> GetLoadedAssemblies();
    public static Assembly GetAssembly(string assemblyFullName, bool throwOnError);
    public static bool NameContains(string assemblyFullName, string assemblyName);
    public static bool NameContains(Assembly assembly, string assemblyName);
    public static bool NameContains(AssemblyName assembly, string assemblyName);
    public static bool IsEntryAssembly(Assembly assembly);
    public static bool IsEntryAssembly(string assemblyName);
    private static bool AssertAssemblyName(string fullName, string assemblyName);
    public static bool PartialNameEquals(string asmName0, string asmName1);
    public static string GetPartialName(string asmName);
    public static string GetPartialName(Assembly assembly);
    public static ResourceSet GetResources(Assembly assembly);
    public static IDictionaryEnumerator GetResourcesEnumerator(Assembly assembly);
    public static Uri GetResourceUri(Assembly assembly, string path);
    public static Stream GetResourceStream(Assembly assembly, string path, bool pathIsFull);
    public static Stream GetEmbeddedResourceStream(Assembly assembly, string name, bool nameIsFull);
    public static string GetDefaultNamespace(Assembly assembly);
    internal static string GetCommonPart(String[] strings, String[] excludedSuffixes);
    private static Stream GetResourceStreamCore(Assembly assembly, string path, bool pathIsFull);
    private static Stream GetEmbeddedResourceStreamCore(Assembly assembly, string name, bool nameIsFull);
    private static string GetDefaultNamespaceCore(Assembly assembly);
}
public abstract class DevExpress.Utils.AutoScroller : object {
    protected internal static int AutoScrollTimerInterval;
    private bool isDisposed;
    private PortableDispatchedTimer timer;
    private bool isActive;
    private MouseHandler mouseHandler;
    private AutoScrollerHotZoneCollection hotZones;
    private AutoScrollerHotZone activeHotZone;
    public bool IsDisposed { get; }
    public MouseHandler MouseHandler { get; }
    protected internal PortableDispatchedTimer Timer { get; }
    protected internal bool IsActive { get; protected internal set; }
    protected internal AutoScrollerHotZoneCollection HotZones { get; }
    protected AutoScroller(MouseHandler mouseHandler);
    private static AutoScroller();
    public bool get_IsDisposed();
    public MouseHandler get_MouseHandler();
    protected internal PortableDispatchedTimer get_Timer();
    protected internal bool get_IsActive();
    protected internal void set_IsActive(bool value);
    protected internal AutoScrollerHotZoneCollection get_HotZones();
    public sealed virtual void Dispose();
    protected internal virtual PortableDispatchedTimer CreateTimer();
    protected internal virtual void SubscribeTimerEvents();
    protected internal virtual void UnsubscribeTimerEvents();
    public virtual void Activate(Point mousePosition);
    public virtual void Deactivate();
    public virtual void OnMouseMove(Point pt);
    protected internal virtual void StartTimer();
    protected internal virtual void StopTimer();
    protected internal virtual AutoScrollerHotZone CalculateActiveHotZone(Point pt);
    protected internal virtual void OnTimerTick(object sender, EventArgs e);
    public void Suspend();
    public void Resume();
    protected abstract virtual void PopulateHotZones();
}
public abstract class DevExpress.Utils.AutoScrollerHotZone : object {
    private Rectangle bounds;
    public Rectangle Bounds { get; public set; }
    public Rectangle get_Bounds();
    public void set_Bounds(Rectangle value);
    public virtual bool Initialize(Point mousePosition);
    public abstract virtual bool CanActivate(Point mousePosition);
    public abstract virtual void PerformAutoScroll();
    protected abstract virtual Rectangle CalculateHotZoneBounds();
    protected abstract virtual Rectangle AdjustHotZoneBounds(Rectangle bounds, Point mousePosition);
}
public class DevExpress.Utils.AutoScrollerHotZoneCollection : List`1<AutoScrollerHotZone> {
}
public static class DevExpress.Utils.AzureCompatibility : object {
    [CompilerGeneratedAttribute]
private static bool <Enable>k__BackingField;
    public static bool Enable { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_Enable();
    [CompilerGeneratedAttribute]
public static void set_Enable(bool value);
}
public class DevExpress.Utils.BatchUpdateHelper : object {
    private IBatchUpdateHandler batchUpdateHandler;
    private int suspendUpdateCount;
    private bool overlappedTransaction;
    public bool IsUpdateLocked { get; }
    public int SuspendUpdateCount { get; }
    public IBatchUpdateHandler BatchUpdateHandler { get; public set; }
    public bool OverlappedTransaction { get; }
    public BatchUpdateHelper(IBatchUpdateHandler batchUpdateHandler);
    public bool get_IsUpdateLocked();
    public int get_SuspendUpdateCount();
    public IBatchUpdateHandler get_BatchUpdateHandler();
    public void set_BatchUpdateHandler(IBatchUpdateHandler value);
    public bool get_OverlappedTransaction();
    public void BeginUpdate();
    public void EndUpdate();
    public void CancelUpdate();
}
public class DevExpress.Utils.BeginMouseDragHelperState : MouseHandlerState {
    private Point initialPoint;
    private MouseHandlerState dragState;
    [CompilerGeneratedAttribute]
private bool <DragAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelOnPopupMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelOnRightMouseUp>k__BackingField;
    public bool DragAllowed { get; public set; }
    public MouseHandlerState DragState { get; }
    public bool CancelOnPopupMenu { get; public set; }
    public bool CancelOnRightMouseUp { get; public set; }
    public bool StopClickTimerOnStart { get; }
    public BeginMouseDragHelperState(MouseHandler mouseHandler, MouseHandlerState dragState, Point point);
    [CompilerGeneratedAttribute]
public bool get_DragAllowed();
    [CompilerGeneratedAttribute]
public void set_DragAllowed(bool value);
    public MouseHandlerState get_DragState();
    [CompilerGeneratedAttribute]
public bool get_CancelOnPopupMenu();
    [CompilerGeneratedAttribute]
public void set_CancelOnPopupMenu(bool value);
    [CompilerGeneratedAttribute]
public bool get_CancelOnRightMouseUp();
    [CompilerGeneratedAttribute]
public void set_CancelOnRightMouseUp(bool value);
    public virtual bool get_StopClickTimerOnStart();
    public virtual void OnMouseWheel(PortableMouseEventArgs e);
    private bool IsDragStarted(PortableMouseEventArgs e);
    public virtual void OnMouseMove(PortableMouseEventArgs e);
    public virtual void OnMouseUp(PortableMouseEventArgs e);
    public virtual bool OnPopupMenu(PortableMouseEventArgs e);
    public virtual void OnMouseCaptureChanged();
}
public static class DevExpress.Utils.BindToTypePolicy : object {
    private static Nullable`1<LoadLevel> MaximumLoadLevel;
    private static Nullable`1<QueryLevel> MaximumQueryLevel;
    private static Func`3<string, Type, Type> PreserveExistingType;
    private static object syncObj;
    private static BindToTypePolicy();
    public static void DenyAssemblyLoadingFromFilesAndBytes();
    public static void DenyAssemblyLoading();
    private static bool EnsureMaximumQueryLevel(QueryLevel level, Type& resolvedType);
    private static bool EnsureMaximumQueryLevel(QueryLevel level, Assembly& resolvedAssembly);
    [EditorBrowsableAttribute("1")]
public static void RegisterTrustedType(Type type);
    [EditorBrowsableAttribute("1")]
public static void RegisterTrustedType(string assemblyQualifiedTypeName, Type type);
    [EditorBrowsableAttribute("1")]
public static void UnregisterTrustedType(Type type);
    [EditorBrowsableAttribute("1")]
public static void UnregisterTrustedType(string assemblyQualifiedTypeName);
    internal static bool RaiseQueryBindToKnownType(string assemblyName, string typeName, Type& resolvedKnownType);
    internal static bool RaiseQueryBindToKnownType(Assembly assembly, string typeName, Type& resolvedKnownType);
    internal static bool RaiseQueryBindToAnyType(Assembly assembly, string typeName, Type& resolvedType);
    internal static bool RaiseQueryBindToEnumType(Assembly assembly, string typeName, Type& resolvedEnumType);
    internal static bool RaiseQueryBindToType(Assembly assembly, string typeName, Type& resolvedType);
    internal static bool RaiseQueryBindToType(Type assemblyType, Type& resolvedType);
    internal static bool RaiseQueryBindToType(string assemblyName, string typeName, Type& resolvedType);
    internal static bool RaiseQueryAssemblyLoad(string assemblyName, bool isAnyTypeQuery, Assembly& resolvedAssembly);
    internal static bool RaiseQueryAssemblyLoad(string assemblyName, LoadLevel loadLevel, Assembly& resolvedAssembly);
    internal static XtraSerializationSecurityDiagnosticsLevel RaiseQueryNonTrustedTypeValidation(string assemblyName, string typeName, ApiLevel apiLevel, XtraSerializationSecurityDiagnosticsLevel traceLevel);
    public static void add_QueryBindToType(WeakEventHandler`1<QueryBindToTypeEventArgs> value);
    public static void remove_QueryBindToType(WeakEventHandler`1<QueryBindToTypeEventArgs> value);
    public static void add_QueryAssemblyLoad(WeakEventHandler`1<QueryAssemblyLoadEventArgs> value);
    public static void remove_QueryAssemblyLoad(WeakEventHandler`1<QueryAssemblyLoadEventArgs> value);
    public static void add_QueryNonTrustedTypeValidation(WeakEventHandler`1<QueryNonTrustedTypeValidationEventArgs> value);
    public static void remove_QueryNonTrustedTypeValidation(WeakEventHandler`1<QueryNonTrustedTypeValidationEventArgs> value);
}
public class DevExpress.Utils.BitmapCreator : object {
    private static int defaultResolutionLimit;
    public static Bitmap CreateBitmap(Image original, Color backColor);
    public static Bitmap CreateBitmapWithResolutionLimit(Image original, Color backColor);
    public static Bitmap CreateClearBitmap(Image original, float resolutionLimit);
    private static Bitmap CopyContent(Image original, Bitmap newBitmap, Color backColor);
    private static void Correct(Int32& size, Single& resolution, float resolutionLimit);
    public static void TransformBitmap(Image original, Bitmap bitmap, ImageAttributes attributes);
    public static ImageAttributes CreateTransparencyAttributes(int imageTransparency);
    public static ColorMatrix CreateTransparencyColorMatrix(int imageTransparency);
}
public abstract class DevExpress.Utils.BridgeList`2 : object {
    protected IList`1<Key> keys;
    private IList`1<T> List { get; }
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    private int System.Collections.Generic.ICollection<T>.Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    protected bool IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected BridgeList`2(IList`1<Key> keys);
    private IList`1<T> get_List();
    protected abstract virtual T GetItemByKey(Key key, int index);
    private sealed virtual override int System.Collections.Generic.IList<T>.IndexOf(T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    protected virtual void InsertCore(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    protected virtual void AddCore(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    protected virtual void ClearCore();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private void CopyTo(Array array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<T>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    protected virtual bool IsReadOnlyCore();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    protected virtual bool RemoveCore(T item);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    protected virtual int AddObjectCore(object item);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    protected virtual bool get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    protected virtual void RemoveAtCore(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class DevExpress.Utils.CastList`2 : SimpleBridgeList`2<T, TKey> {
    public CastList`2(IList`1<TKey> keys);
}
public static class DevExpress.Utils.CharExtensions : object {
    public static char ToLower(char ch, CultureInfo culture);
    public static char ToUpper(char ch, CultureInfo culture);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.ChunkedArray`1 : object {
    private int chunkSize;
    private List`1<List`1<T>> chunks;
    private int totalCount;
    private List`1<T> LastChunk { get; }
    public int Count { get; }
    public T Item { get; public set; }
    public ChunkedArray`1(int chunkSize);
    public ChunkedArray`1(int chunkSize, int capacity);
    private List`1<T> get_LastChunk();
    public int get_Count();
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public void Add(T item);
    public void Clear();
    private void AddChunk();
    [IteratorStateMachineAttribute("DevExpress.Utils.ChunkedArray`1/<GetEnumerator>d__16")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void AddRange(IEnumerable`1<T> items);
}
[DataContractAttribute]
internal abstract class DevExpress.Utils.ClientControls.DataContracts.LicenseOptions : SerializableSettingsBase {
    protected static bool DefaultIsLicensed;
    [CompilerGeneratedAttribute]
private Type <ValidationType>k__BackingField;
    [DataMemberAttribute]
public bool IsLicensed { get; public set; }
    [DataMemberAttribute]
public string Link { get; public set; }
    internal Type ValidationType { get; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    public abstract virtual bool get_IsLicensed();
    public abstract virtual void set_IsLicensed(bool value);
    public abstract virtual string get_Link();
    public abstract virtual void set_Link(string value);
    [CompilerGeneratedAttribute]
internal virtual Type get_ValidationType();
    internal virtual bool GetIsLicensed();
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
internal class DevExpress.Utils.ClientControls.LicenseChecker : object {
    private List`1<Type> _types;
    public void RegisterType(Type licenseType);
    public bool IsLicensed();
}
public enum DevExpress.Utils.CollectionChangedAction : Enum {
    public int value__;
    public static CollectionChangedAction Add;
    public static CollectionChangedAction Remove;
    public static CollectionChangedAction Changed;
    public static CollectionChangedAction Clear;
    public static CollectionChangedAction EndBatchUpdate;
}
public class DevExpress.Utils.CollectionChangedEventArgs`1 : EventArgs {
    private CollectionChangedAction action;
    private T element;
    public CollectionChangedAction Action { get; }
    public T Element { get; }
    public CollectionChangedEventArgs`1(CollectionChangedAction action, T element);
    public CollectionChangedAction get_Action();
    public T get_Element();
}
public class DevExpress.Utils.CollectionChangedEventHandler`1 : MulticastDelegate {
    public CollectionChangedEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, CollectionChangedEventArgs`1<T> e);
    public virtual IAsyncResult BeginInvoke(object sender, CollectionChangedEventArgs`1<T> e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.CollectionChangingEventArgs`1 : CollectionChangedEventArgs`1<T> {
    private bool cancel;
    private T newValue;
    private T oldValue;
    private string propertyName;
    public bool Cancel { get; public set; }
    public T NewValue { get; public set; }
    public T OldValue { get; public set; }
    public string PropertyName { get; public set; }
    public CollectionChangingEventArgs`1(CollectionChangedAction action, T element);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public T get_NewValue();
    public void set_NewValue(T value);
    public T get_OldValue();
    public void set_OldValue(T value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
}
public class DevExpress.Utils.CollectionChangingEventHandler`1 : MulticastDelegate {
    public CollectionChangingEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, CollectionChangingEventArgs`1<T> e);
    public virtual IAsyncResult BeginInvoke(object sender, CollectionChangingEventArgs`1<T> e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.CommandResourceImageLoader : object {
    public static Stream LoadSmallImageStream(string resourcePath, string imageName, Assembly asm);
    public static Image LoadSmallImage(string resourcePath, string imageName, Assembly asm);
    public static Image LoadLargeImage(string resourcePath, string imageName, Assembly asm);
    public static Bitmap CreateBitmapFromResources(string name, Assembly asm);
    internal static string GetSmallImageName(string resourcePath, string imageName);
    internal static string GetLargeImageName(string resourcePath, string imageName);
    public static string GetImageName(string resourcePath, string imageName, string size);
}
public abstract class DevExpress.Utils.Commands.Command : object {
    private CommandSourceType commandSourceType;
    private bool hideDisabled;
    public string MenuCaption { get; }
    public string Description { get; }
    public Image Image { get; }
    public Image LargeImage { get; }
    public ISvgImage SvgImage { get; }
    public CommandSourceType CommandSourceType { get; public set; }
    public bool HideDisabled { get; public set; }
    public bool ShowsModalDialog { get; }
    protected bool ShouldBeExecutedOnKeyUpInSilverlightEnvironment { get; }
    protected internal bool InnerShouldBeExecutedOnKeyUpInSilverlightEnvironment { get; }
    protected internal IServiceProvider ServiceProvider { get; }
    public string KeyTip { get; }
    public bool SupportsImage { get; }
    public abstract virtual string get_MenuCaption();
    public abstract virtual string get_Description();
    public virtual Image get_Image();
    public virtual Image get_LargeImage();
    public virtual ISvgImage get_SvgImage();
    public virtual CommandSourceType get_CommandSourceType();
    public virtual void set_CommandSourceType(CommandSourceType value);
    public bool get_HideDisabled();
    public void set_HideDisabled(bool value);
    public virtual bool get_ShowsModalDialog();
    protected virtual bool get_ShouldBeExecutedOnKeyUpInSilverlightEnvironment();
    protected internal bool get_InnerShouldBeExecutedOnKeyUpInSilverlightEnvironment();
    protected internal virtual IServiceProvider get_ServiceProvider();
    public virtual string get_KeyTip();
    public virtual bool get_SupportsImage();
    public virtual void Execute();
    public virtual bool CanExecute();
    public virtual ICommandUIState CreateDefaultCommandUIState();
    public virtual void UpdateUIState(ICommandUIState state);
    protected internal virtual void UpdateUIStateViaService(ICommandUIState state);
    public abstract virtual void ForceExecute(ICommandUIState state);
    protected abstract virtual void UpdateUIStateCore(ICommandUIState state);
}
public class DevExpress.Utils.Commands.CommandCollection : List`1<Command> {
}
public class DevExpress.Utils.Commands.CommandFactory`2 : MulticastDelegate {
    public CommandFactory`2(object object, IntPtr method);
    public virtual TCommand Invoke(TOwner owner);
    public virtual IAsyncResult BeginInvoke(TOwner owner, AsyncCallback callback, object object);
    public virtual TCommand EndInvoke(IAsyncResult result);
}
public abstract class DevExpress.Utils.Commands.CommandRepositoryBase`4 : CommandStorageBase`3<TCommand, TCommandID, CommandFactory`2<TCommand, TOwner>> {
    public CommandRepositoryBase`4(int capacity);
    public sealed virtual TCommand GetCommand(TCommandID commandID, TArgument argument);
    public sealed virtual TCommand GetCommand(TCommandID commandID, TArgument argument, Func`1<TCommand> fallback);
    public sealed virtual TCommand GetCommand(TCommandID commandID, TArgument argument, Func`1<ConstructorInfo> getConstructorInfo);
}
public enum DevExpress.Utils.Commands.CommandSourceType : Enum {
    public int value__;
    public static CommandSourceType Unknown;
    public static CommandSourceType Menu;
    public static CommandSourceType Keyboard;
    public static CommandSourceType Mouse;
}
public abstract class DevExpress.Utils.Commands.CommandStorageBase`3 : object {
    private CommandCache<TCommand, TCommandID, TFactory> commandCache;
    protected CommandCache<TCommand, TCommandID, TFactory> Cache { get; }
    public CommandStorageBase`3(int capacity);
    public sealed virtual void AddCommand(TCommandID commandID, ConstructorInfo constructorInfo);
    public void AddCommand(TCommandID commandID, TFactory factory);
    public sealed virtual void RemoveCommand(TCommandID commandID);
    protected TFactory GetFactoryCore(TCommandID commandID);
    private static TFactory CreateCommandFactory(ConstructorInfo constructorInfo);
    private static ParameterExpression[] GetParameterExpressionList(Type[] parameterTypeList);
    protected CommandCache<TCommand, TCommandID, TFactory> get_Cache();
}
public abstract class DevExpress.Utils.Commands.ControlCommand`3 : Command {
    private TControl control;
    private Image imageCore;
    private Image largeImageCore;
    private ISvgImage svgImageCore;
    [ThreadStaticAttribute]
protected static Dictionary`2<string, ISvgImage> svgImageCache;
    public TControl Control { get; }
    protected internal IServiceProvider ServiceProvider { get; }
    public TCommandId Id { get; }
    protected XtraLocalizer`1<TLocalizedStringId> Localizer { get; }
    public TLocalizedStringId MenuCaptionStringId { get; }
    public TLocalizedStringId DescriptionStringId { get; }
    public string MenuCaption { get; }
    public string Description { get; }
    public string ImageName { get; }
    protected string ImageResourcePrefix { get; }
    protected string SvgImageResourcePrefix { get; }
    protected Assembly ImageResourceAssembly { get; }
    public Image Image { get; }
    public Image LargeImage { get; }
    public bool SupportsImage { get; }
    public ISvgImage SvgImage { get; }
    protected ControlCommand`3(TControl control);
    public TControl get_Control();
    protected internal virtual IServiceProvider get_ServiceProvider();
    public abstract virtual TCommandId get_Id();
    protected abstract virtual XtraLocalizer`1<TLocalizedStringId> get_Localizer();
    public abstract virtual TLocalizedStringId get_MenuCaptionStringId();
    public abstract virtual TLocalizedStringId get_DescriptionStringId();
    public virtual string get_MenuCaption();
    public virtual string get_Description();
    public virtual string get_ImageName();
    protected abstract virtual string get_ImageResourcePrefix();
    protected virtual string get_SvgImageResourcePrefix();
    protected virtual Assembly get_ImageResourceAssembly();
    public virtual Image get_Image();
    public virtual Image get_LargeImage();
    public virtual bool get_SupportsImage();
    public virtual ISvgImage get_SvgImage();
    protected internal virtual Image LoadImage();
    protected internal virtual Image LoadLargeImage();
    protected internal abstract virtual ISvgImage LoadSvgImage();
    protected internal virtual ICommandExecutionListenerService GetCommandExecutionListener();
    protected virtual void NotifyBeginCommandExecution(ICommandUIState state);
    protected virtual void NotifyEndCommandExecution(ICommandUIState state);
}
public class DevExpress.Utils.Commands.DefaultCommandUIState : object {
    private bool isEnabled;
    private bool isChecked;
    private bool isVisible;
    public bool Enabled { get; public set; }
    public bool Visible { get; public set; }
    public bool Checked { get; public set; }
    public object EditValue { get; public set; }
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual object get_EditValue();
    public virtual void set_EditValue(object value);
}
public class DevExpress.Utils.Commands.DefaultValueBasedCommandUIState`1 : DefaultCommandUIState {
    private T editValue;
    public T Value { get; public set; }
    public object EditValue { get; public set; }
    public virtual T get_Value();
    public virtual void set_Value(T value);
    public virtual object get_EditValue();
    public virtual void set_EditValue(object value);
}
public interface DevExpress.Utils.Commands.ICommandAwareControl`1 {
    public CommandBasedKeyboardHandler`1<TCommandId> KeyboardHandler { get; }
    public abstract virtual CommandBasedKeyboardHandler`1<TCommandId> get_KeyboardHandler();
    public abstract virtual Command CreateCommand(TCommandId id);
    public abstract virtual bool HandleException(Exception e);
    public abstract virtual void Focus();
    public abstract virtual void CommitImeContent();
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeDispose(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeDispose(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UpdateUI(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UpdateUI(EventHandler value);
}
public interface DevExpress.Utils.Commands.ICommandRepository`3 {
    public abstract virtual TCommand GetCommand(TCommandID commandID, TOwner owner);
    public abstract virtual TCommand GetCommand(TCommandID commandID, TOwner owner, Func`1<TCommand> fallback);
    public abstract virtual TCommand GetCommand(TCommandID commandID, TOwner owner, Func`1<ConstructorInfo> getConstructorInfo);
}
public interface DevExpress.Utils.Commands.ICommandStorage`2 {
    public abstract virtual void AddCommand(TCommandID commandID, ConstructorInfo constructorInfo);
    public abstract virtual void RemoveCommand(TCommandID commandID);
}
public interface DevExpress.Utils.Commands.ICommandUIState {
    public bool Enabled { get; public set; }
    public bool Visible { get; public set; }
    public bool Checked { get; public set; }
    public object EditValue { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual bool get_Checked();
    public abstract virtual void set_Checked(bool value);
    public abstract virtual object get_EditValue();
    public abstract virtual void set_EditValue(object value);
}
public interface DevExpress.Utils.Commands.ISimpleCommandRepository`2 {
    public abstract virtual TCommand GetCommand(TCommandID commandID);
    public abstract virtual TCommand GetCommand(TCommandID commandID, Func`1<TCommand> fallback);
    public abstract virtual TCommand GetCommand(TCommandID commandID, Func`1<ConstructorInfo> getConstructorInfo);
}
public interface DevExpress.Utils.Commands.IValueBasedCommandUIState`1 {
    public T Value { get; public set; }
    public abstract virtual T get_Value();
    public abstract virtual void set_Value(T value);
}
public abstract class DevExpress.Utils.Commands.SimpleCommandRepositoryBase`3 : CommandStorageBase`3<TCommand, TCommandID, TFactory> {
    private Func`2<TFactory, TCommand> getCommand;
    public SimpleCommandRepositoryBase`3(Func`2<TFactory, TCommand> getCommand);
    public SimpleCommandRepositoryBase`3(Func`2<TFactory, TCommand> getCommand, int capacity);
    public sealed virtual TCommand GetCommand(TCommandID commandID);
    public sealed virtual TCommand GetCommand(TCommandID commandID, Func`1<TCommand> fallback);
    public sealed virtual TCommand GetCommand(TCommandID commandID, Func`1<ConstructorInfo> getConstructorInfo);
}
public interface DevExpress.Utils.CommonDialogs.ICommonDialog {
    [CompilerGeneratedAttribute]
public abstract virtual void add_HelpRequest(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HelpRequest(EventHandler value);
    public abstract virtual DialogResult ShowDialog();
    public abstract virtual DialogResult ShowDialog(object owner);
    public abstract virtual void Reset();
}
public interface DevExpress.Utils.CommonDialogs.IFileDialog {
    public bool AddExtension { get; public set; }
    public bool CheckFileExists { get; public set; }
    public bool CheckPathExists { get; public set; }
    public FileDialogCustomPlacesCollection CustomPlaces { get; }
    public string DefaultExt { get; public set; }
    public bool DereferenceLinks { get; public set; }
    public string FileName { get; public set; }
    public String[] FileNames { get; }
    public string Filter { get; public set; }
    public int FilterIndex { get; public set; }
    public string InitialDirectory { get; public set; }
    public bool RestoreDirectory { get; public set; }
    public bool ShowHelp { get; public set; }
    public bool SupportMultiDottedExtensions { get; public set; }
    public string Title { get; public set; }
    public bool ValidateNames { get; public set; }
    public abstract virtual bool get_AddExtension();
    public abstract virtual void set_AddExtension(bool value);
    public abstract virtual bool get_CheckFileExists();
    public abstract virtual void set_CheckFileExists(bool value);
    public abstract virtual bool get_CheckPathExists();
    public abstract virtual void set_CheckPathExists(bool value);
    public abstract virtual FileDialogCustomPlacesCollection get_CustomPlaces();
    public abstract virtual string get_DefaultExt();
    public abstract virtual void set_DefaultExt(string value);
    public abstract virtual bool get_DereferenceLinks();
    public abstract virtual void set_DereferenceLinks(bool value);
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
    public abstract virtual String[] get_FileNames();
    public abstract virtual string get_Filter();
    public abstract virtual void set_Filter(string value);
    public abstract virtual int get_FilterIndex();
    public abstract virtual void set_FilterIndex(int value);
    public abstract virtual string get_InitialDirectory();
    public abstract virtual void set_InitialDirectory(string value);
    public abstract virtual bool get_RestoreDirectory();
    public abstract virtual void set_RestoreDirectory(bool value);
    public abstract virtual bool get_ShowHelp();
    public abstract virtual void set_ShowHelp(bool value);
    public abstract virtual bool get_SupportMultiDottedExtensions();
    public abstract virtual void set_SupportMultiDottedExtensions(bool value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual bool get_ValidateNames();
    public abstract virtual void set_ValidateNames(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FileOk(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FileOk(CancelEventHandler value);
}
public interface DevExpress.Utils.CommonDialogs.IFolderBrowserDialog {
    public string Description { get; public set; }
    public SpecialFolder RootFolder { get; public set; }
    public bool ShowNewFolderButton { get; public set; }
    public string SelectedPath { get; public set; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual SpecialFolder get_RootFolder();
    public abstract virtual void set_RootFolder(SpecialFolder value);
    public abstract virtual bool get_ShowNewFolderButton();
    public abstract virtual void set_ShowNewFolderButton(bool value);
    public abstract virtual string get_SelectedPath();
    public abstract virtual void set_SelectedPath(string value);
}
public abstract class DevExpress.Utils.CommonDialogs.Internal.CommonDialogProviderBase : object {
    private Dictionary`2<object, Dictionary`2<Type, ISlot`1<ICommonDialog>>> dialogFactories;
    private object standardDialogFactoriesKey;
    private object defaultDialogFactoriesKey;
    public IOpenFileDialog CreateStandardOpenFileDialog();
    public ISaveFileDialog CreateStandardSaveFileDialog();
    public IFolderBrowserDialog CreateStandardFolderBrowserDialog();
    public IOpenFileDialog CreateDefaultOpenFileDialog();
    public ISaveFileDialog CreateDefaultSaveFileDialog();
    public IFolderBrowserDialog CreateDefaultFolderBrowserDialog();
    public IOpenFileDialog CreateCustomOpenFileDialog(object key);
    public ISaveFileDialog CreateCustomSaveFileDialog(object key);
    public IFolderBrowserDialog CreateCustomFolderBrowserDialog(object key);
    private TDialog CreateDialogCore(object key);
    private void RegisterStandardDialogsFactories();
    public void RegisterDefaultOpenFileDialogFactory(Func`1<IOpenFileDialog> factory, bool overwriteIfExists);
    public void RegisterDefaultSaveFileDialogFactory(Func`1<ISaveFileDialog> factory, bool overwriteIfExists);
    public void RegisterDefaultFolderBrowserDialogFactory(Func`1<IFolderBrowserDialog> factory, bool overwriteIfExists);
    private void RegisterDefaultDialogsFactories();
    public void RegisterCustomOpenFileDialogFactory(object key, Func`1<IOpenFileDialog> factory, bool overwriteIfExists);
    public void RegisterCustomSaveFileDialogFactory(object key, Func`1<ISaveFileDialog> factory, bool overwriteIfExists);
    public void RegisterCustomFolderBrowserDialogFactory(object key, Func`1<IFolderBrowserDialog> factory, bool overwriteIfExists);
    private void RegisterFactoryCore(object key, Func`1<TDialog> factory, bool overwriteIfExists);
    protected abstract virtual IOpenFileDialog StandardOpenFileDialogFactory();
    protected abstract virtual ISaveFileDialog StandardSaveFileDialogFactory();
    protected abstract virtual IFolderBrowserDialog StandardFolderBrowserDialogFactory();
}
public enum DevExpress.Utils.CommonDialogs.Internal.DialogResult : Enum {
    public int value__;
    public static DialogResult None;
    public static DialogResult OK;
    public static DialogResult Cancel;
    public static DialogResult Abort;
    public static DialogResult Retry;
    public static DialogResult Ignore;
    public static DialogResult Yes;
    public static DialogResult No;
}
public class DevExpress.Utils.CommonDialogs.Internal.FileDialogCustomPlace : object {
    private string pathCore;
    private Guid knownFolderGuidCore;
    public string Path { get; public set; }
    public Guid KnownFolderGuid { get; public set; }
    public FileDialogCustomPlace(string path);
    public FileDialogCustomPlace(Guid knownFolderGuid);
    public string get_Path();
    public void set_Path(string value);
    public Guid get_KnownFolderGuid();
    public void set_KnownFolderGuid(Guid value);
    public virtual string ToString();
}
public class DevExpress.Utils.CommonDialogs.Internal.FileDialogCustomPlacesCollection : Collection`1<FileDialogCustomPlace> {
    public void Add(string path);
    public void Add(Guid knownFolderGuid);
}
internal interface DevExpress.Utils.CommonDialogs.Internal.ISlot`1 {
    public Func`1<TDialogType> Creator { get; }
    public abstract virtual Func`1<TDialogType> get_Creator();
}
internal class DevExpress.Utils.CommonDialogs.Internal.Slot`1 : object {
    [CompilerGeneratedAttribute]
private Func`1<TDialogType> <Creator>k__BackingField;
    public Func`1<TDialogType> Creator { get; private set; }
    public Slot`1(Func`1<TDialogType> creator);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<TDialogType> get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(Func`1<TDialogType> value);
}
public interface DevExpress.Utils.CommonDialogs.IOpenFileDialog {
    public bool Multiselect { get; public set; }
    public string SafeFileName { get; }
    public String[] SafeFileNames { get; }
    public bool ShowReadOnly { get; public set; }
    public bool ReadOnlyChecked { get; public set; }
    public abstract virtual bool get_Multiselect();
    public abstract virtual void set_Multiselect(bool value);
    public abstract virtual string get_SafeFileName();
    public abstract virtual String[] get_SafeFileNames();
    public abstract virtual bool get_ShowReadOnly();
    public abstract virtual void set_ShowReadOnly(bool value);
    public abstract virtual bool get_ReadOnlyChecked();
    public abstract virtual void set_ReadOnlyChecked(bool value);
}
public interface DevExpress.Utils.CommonDialogs.ISaveFileDialog {
    public bool CreatePrompt { get; public set; }
    public bool OverwritePrompt { get; public set; }
    public abstract virtual bool get_CreatePrompt();
    public abstract virtual void set_CreatePrompt(bool value);
    public abstract virtual bool get_OverwritePrompt();
    public abstract virtual void set_OverwritePrompt(bool value);
}
public static class DevExpress.Utils.ComparingUtils : object {
    public static int CompareDoubles(double number1, double number2, double epsilon);
    public static int CompareDoubleArrays(Double[] numbers1, Double[] numbers2, double epsilon);
}
public static class DevExpress.Utils.CompositeUri : object {
    public static string Combine(String[] parts);
}
public class DevExpress.Utils.CompressedXmlStreamInfo : object {
    [CompilerGeneratedAttribute]
private MemoryStream <MemoryStream>k__BackingField;
    [CompilerGeneratedAttribute]
private ChunkedMemoryStream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private Crc32Stream <CrcStream>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteCountStream <UncompressedSizeStream>k__BackingField;
    [CompilerGeneratedAttribute]
private DeflateStream <DeflateStream>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamWriter <StreamWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlWriter <Writer>k__BackingField;
    public MemoryStream MemoryStream { get; public set; }
    public ChunkedMemoryStream Stream { get; public set; }
    [CLSCompliantAttribute("False")]
public Crc32Stream CrcStream { get; public set; }
    public ByteCountStream UncompressedSizeStream { get; public set; }
    public DeflateStream DeflateStream { get; public set; }
    public StreamWriter StreamWriter { get; public set; }
    public XmlWriter Writer { get; public set; }
    [CompilerGeneratedAttribute]
public MemoryStream get_MemoryStream();
    [CompilerGeneratedAttribute]
public void set_MemoryStream(MemoryStream value);
    [CompilerGeneratedAttribute]
public ChunkedMemoryStream get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(ChunkedMemoryStream value);
    [CompilerGeneratedAttribute]
public Crc32Stream get_CrcStream();
    [CompilerGeneratedAttribute]
public void set_CrcStream(Crc32Stream value);
    [CompilerGeneratedAttribute]
public ByteCountStream get_UncompressedSizeStream();
    [CompilerGeneratedAttribute]
public void set_UncompressedSizeStream(ByteCountStream value);
    [CompilerGeneratedAttribute]
public DeflateStream get_DeflateStream();
    [CompilerGeneratedAttribute]
public void set_DeflateStream(DeflateStream value);
    [CompilerGeneratedAttribute]
public StreamWriter get_StreamWriter();
    [CompilerGeneratedAttribute]
public void set_StreamWriter(StreamWriter value);
    [CompilerGeneratedAttribute]
public XmlWriter get_Writer();
    [CompilerGeneratedAttribute]
public void set_Writer(XmlWriter value);
}
public class DevExpress.Utils.ControlConstants : object {
    public static SelectionTypes SelectionNormal;
    public static SelectionTypes SelectionClick;
    public static string DataMemberEditor;
    public static ViewTechnology ViewTechnologyDefault;
    public static SelectionTypes SelectionTypeAuto;
    public static string BitmapPath;
    public static bool NonObjectBindable;
    public static string MultilineStringEditor;
    public static string UITypeEditor;
}
public class DevExpress.Utils.Controls.BaseOptionChangedEventArgs : EventArgs {
    private string name;
    private object oldValue;
    private object newValue;
    public string Name { get; }
    public object OldValue { get; }
    public object NewValue { get; public set; }
    public BaseOptionChangedEventArgs(string name, object oldValue, object newValue);
    public string get_Name();
    public object get_OldValue();
    public virtual object get_NewValue();
    public virtual void set_NewValue(object value);
}
public class DevExpress.Utils.Controls.BaseOptionChangedEventHandler : MulticastDelegate {
    public BaseOptionChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BaseOptionChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BaseOptionChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class DevExpress.Utils.Controls.BaseOptions : ViewStatePersisterCore {
    private int lockUpdate;
    protected internal BaseOptionChangedEventHandler ChangedCore;
    private static object boolFalse;
    private static object boolTrue;
    private PropertyChangedEventHandler onPropertyChanged;
    protected bool IsLockUpdate { get; }
    public BaseOptions(IViewBagOwner viewBagOwner, string objectPath);
    private static BaseOptions();
    public virtual void Assign(BaseOptions options);
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    public virtual void CancelUpdate();
    protected virtual bool get_IsLockUpdate();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    protected internal virtual void RaisePropertyChanged(string propertyName);
    protected void OnChanged(string option, bool oldValue, bool newValue);
    protected void OnChanged(string option, object oldValue, object newValue);
    protected virtual void OnChanged(BaseOptionChangedEventArgs e);
    protected virtual void RaiseOnChanged(BaseOptionChangedEventArgs e);
    protected internal bool ShouldSerialize();
    public virtual string ToString();
    protected internal virtual bool ShouldSerialize(IComponent owner);
    public virtual void Reset();
}
public abstract class DevExpress.Utils.Controls.DisposableObject : object {
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsDisposed { get; }
    public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public interface DevExpress.Utils.Controls.IFilterItem {
    public Nullable`1<bool> IsChecked { get; public set; }
    public bool IsVisible { get; public set; }
    public abstract virtual Nullable`1<bool> get_IsChecked();
    public abstract virtual void set_IsChecked(Nullable`1<bool> value);
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsVisible(bool value);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Controls.IFilterItems {
    public Nullable`1<bool> CheckState { get; }
    public bool CanAccept { get; }
    public int Count { get; }
    public IFilterItem Item { get; }
    public abstract virtual Nullable`1<bool> get_CheckState();
    public abstract virtual bool get_CanAccept();
    public abstract virtual int get_Count();
    public abstract virtual void ApplyFilter();
    public abstract virtual void CheckAllItems(bool isChecked);
    public abstract virtual IFilterItem get_Item(int index);
}
public class DevExpress.Utils.Controls.OptionsHelper : object {
    public static string GetObjectText(object obj);
    public static void SetOptionValue(object obj, string name, object value);
    public static object GetOptionValue(object obj, string name);
    public static T GetOptionValue(object obj, string name);
    public static string GetObjectText(object obj, bool includeSubObjects);
}
public class DevExpress.Utils.Crypt.ARC4Cipher : object {
    private static int bufferSize;
    private Byte[] keyBuffer;
    private Byte[] s;
    private int x;
    private int y;
    public ARC4Cipher(Byte[] key);
    private static byte Swap(Byte[] buffer, int i, int j);
    public void UpdateKey(Byte[] key);
    public void Reset();
    public void Reset(int position);
    public void EncryptSelf(Byte[] data);
    public void Encrypt(Byte[] input, int inputOffset, Byte[] output, int outputOffset, int count);
    public Byte[] Encrypt(Byte[] input);
    public byte Encrypt(byte input);
    public void Decrypt(Byte[] input, int inputOffset, Byte[] output, int outputOffset, int count);
    public Byte[] Decrypt(Byte[] input);
    public byte Decrypt(byte input);
    private byte GenerateKeyWord();
}
public interface DevExpress.Utils.Crypt.IKeyGen {
    public abstract virtual Byte[] DeriveKey(int blockNumber);
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.Crypt.MD4HashCalculator : object {
    private static UInt32 A;
    private static UInt32 B;
    private static UInt32 C;
    private static UInt32 D;
    private static UInt32 rootOf2;
    private static UInt32 rootOf3;
    private static int blockLength;
    private static Int32[] stepFCoeffs;
    private static Int32[] stepGCoeffs;
    private static Int32[] stepHIndices;
    private static Int32[] stepHCoeffs;
    private int position;
    private int bytesRead;
    private int tailLength;
    private int index;
    private long bitsCount;
    private Byte[] hashBuffer;
    private Byte[] tail;
    public UInt32[] InitialCheckSumValue { get; }
    private static MD4HashCalculator();
    public sealed virtual UInt32[] get_InitialCheckSumValue();
    public sealed virtual UInt32[] UpdateCheckSum(UInt32[] value, Byte[] buffer, int offset, int count);
    public sealed virtual UInt32[] GetFinalCheckSum(UInt32[] value);
    private void Reset();
    private static void Transform(Byte[] block, int offset, UInt32[] hash);
    private static void TransformCore(UInt32[] block, UInt32[] hash);
    private static UInt32[] Decode(Byte[] input, int offset);
    private static UInt32 F(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 G(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 H(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 StepF(UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s);
    private static UInt32 StepG(UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s);
    private static UInt32 StepH(UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s);
    private static UInt32 RotateLeftCircularly(UInt32 x, int s);
}
[CLSCompliantAttribute("False")]
public static class DevExpress.Utils.Crypt.MD4HashConverter : object {
    public static Byte[] ToArray(UInt32[] digest);
    private static void Pack(Byte[] destination, int offset, UInt32 value);
}
[ExtensionAttribute]
public static class DevExpress.Utils.CultureInfoExtensions : object {
    [ExtensionAttribute]
public static string GetDateSeparator(CultureInfo culture);
    [ExtensionAttribute]
public static string GetTimeSeparator(CultureInfo culture);
    [ExtensionAttribute]
public static char GetListSeparator(CultureInfo culture);
    [ExtensionAttribute]
public static int GetLCID(CultureInfo culture);
    public static CultureInfo GetCultureInfo(string name);
    public static CultureInfo CreateSpecificCulture(string name);
    [ExtensionAttribute]
public static String[] GetAllDateTimePatterns(CultureInfo culture);
    [ExtensionAttribute]
public static String[] GetAllDateTimePatterns(CultureInfo culture, char format);
    public static void SetCurrentCulture(CultureInfo culture);
    public static void SetCurrentUICulture(CultureInfo culture);
}
public abstract class DevExpress.Utils.CustomTypeDescriptorBase : object {
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    public abstract virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
}
public static class DevExpress.Utils.DateTimeExtensions : object {
    public static DateTime FromOADate(double d);
}
[TypeConverterAttribute("DevExpress.Utils.Design.DefaultBooleanConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.Utils.DefaultBoolean : Enum {
    public int value__;
    public static DefaultBoolean True;
    public static DefaultBoolean False;
    public static DefaultBoolean Default;
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.Deque`1 : object {
    private T[] arr;
    private int size;
    private int head;
    private int tail;
    public int Count { get; }
    public T Item { get; public set; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public sealed virtual int get_Count();
    public T get_Item(int index);
    public void set_Item(int index, T value);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    public sealed virtual void Clear();
    public void PushBack(T item);
    public T PopBack();
    public void PushFront(T item);
    public T PopFront();
    private void SetCapacity(int capacity);
    [IteratorStateMachineAttribute("DevExpress.Utils.Deque`1/<GetEnumerator>d__17")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
}
public static class DevExpress.Utils.DeserializationSettings : object {
    private static Lazy`1<XtraSerializationTrustedContext> registrations;
    private static XtraSerializationTrustedContext Registrations { get; }
    private static DeserializationSettings();
    [EditorBrowsableAttribute("2")]
public static IDisposable DenyBinaryFormatter();
    [EditorBrowsableAttribute("1")]
public static void InvokeWithBinaryFormatterDenied(Action restrictedAction);
    [EditorBrowsableAttribute("1")]
public static IDisposable ForceDXBinaryFormatter();
    [EditorBrowsableAttribute("1")]
public static void InvokeWithForcedDXBinaryFormatter(Action dxBinaryFormatterForcedAction);
    [EditorBrowsableAttribute("1")]
public static void EnableSafeDeserialization();
    [EditorBrowsableAttribute("1")]
public static void InvokeRestricted(Action restrictedAction);
    [EditorBrowsableAttribute("1")]
public static void InvokeRestricted(Action restrictedAction, Predicate`1<RestrictedTypeConfirmationEventArgs> confirmOnce);
    [EditorBrowsableAttribute("1")]
public static void InvokeRestrictedIfNotAlreadyInTrustedContext(Action restrictedAction, Predicate`1<RestrictedTypeConfirmationEventArgs> confirmOnce);
    public static void InvokeTrusted(Action trustedAction);
    public static void RegisterTrustedClass(Type type);
    public static void RegisterTrustedAssembly(Assembly assembly);
    public static void RegisterTrustedClass(string assemblyName, string typeName);
    [EditorBrowsableAttribute("1")]
public static void RegisterTrustedClass(string typeName);
    public static void RegisterTrustedAssembly(string assemblyName);
    [EditorBrowsableAttribute("1")]
public static void UnregisterTrustedClass(Type type);
    [EditorBrowsableAttribute("1")]
public static void UnregisterTrustedAssembly(Assembly assembly);
    private static XtraSerializationTrustedContext get_Registrations();
    private static XtraSerializationTrustedContext CreateRegistrations();
}
public static class DevExpress.Utils.Design.Aliases : object {
    public static string IDesigner;
    public static string IRootDesigner;
    public static string CodeDomSerializer;
    public static string CollectionCodeDomSerializer;
    public static string TypeCodeDomSerializer;
}
internal class DevExpress.Utils.Design.AlwaysLocalizedBooleanTypeConverter : BooleanTypeConverter {
    protected virtual string GetDisplayName(DXDisplayNameAttribute attr);
}
internal class DevExpress.Utils.Design.AlwaysLocalizedEnumTypeConverter : EnumTypeConverter {
    public AlwaysLocalizedEnumTypeConverter(Type type);
    protected virtual string GetDisplayName(DXDisplayNameAttribute attr);
}
[AttributeUsageAttribute("1")]
public class DevExpress.Utils.Design.AssemblyServiceClassAttribute : Attribute {
    private string typeName;
    public string TypeName { get; }
    public AssemblyServiceClassAttribute(string typeName);
    public static IDXImagesProvider CreateDXImagesProvider(Assembly imagesAssembly);
    public string get_TypeName();
}
internal class DevExpress.Utils.Design.AttributeHelper : object {
    private Type resourceFinder;
    public AttributeHelper(Type resourceFinder);
    public PropertyDescriptorCollection LocalizeProperties(PropertyDescriptorCollection properties);
    public static Attribute[] GetPropertyAttributes(Type resourceFinder, PropertyDescriptor propertyDescriptor);
}
public class DevExpress.Utils.Design.BinaryTypeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private object <>n__0(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private object <>n__1(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class DevExpress.Utils.Design.BinaryTypeConverterExpandable : UniversalTypeConverterEx {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private object <>n__0(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private object <>n__1(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class DevExpress.Utils.Design.BooleanTypeConverter : BooleanConverter {
    private static Dictionary`2<object, DXDisplayNameAttribute> names;
    private static BooleanTypeConverter();
    private static DXDisplayNameAttribute GetDisplayName(bool value);
    private static object GetBooleanValueFromDiplayName(string displayName);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    protected virtual string GetDisplayName(DXDisplayNameAttribute attr);
}
public class DevExpress.Utils.Design.CollectionTypeConverter : TypeConverter {
    private static DXDisplayNameAttribute attr;
    public static string DisplayName { get; }
    private static CollectionTypeConverter();
    public static string get_DisplayName();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.Design.ColorConverter : TypeConverter {
    private static string ColorConstantsLock;
    private static Dictionary`2<string, Color> colorConstants;
    private static string SystemColorConstantsLock;
    private static Dictionary`2<string, Color> systemColorConstants;
    private static string ValuesLock;
    private static StandardValuesCollection values;
    internal static Dictionary`2<string, Color> Colors { get; }
    private static Dictionary`2<string, Color> SystemColors { get; }
    private static ColorConverter();
    internal static Dictionary`2<string, Color> get_Colors();
    private static Dictionary`2<string, Color> get_SystemColors();
    internal static bool IsKnownColor(Color color);
    internal static bool IsPredefinedColor(Color color);
    private static bool IsSystemColor(Color color);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    internal static object GetNamedColor(string name);
    internal static bool TryGetNamedColor(string name, Color& color);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private object ConvertToInstanceDescriptor(Color c);
    private static void FillConstants(Dictionary`2<string, Color> hash, Type enumType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class DevExpress.Utils.Design.CustomPropertyDescriptor : PropertyDescriptor {
    private PropertyDescriptor parentPropertyDescriptor;
    [CompilerGeneratedAttribute]
private bool <Browsable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Serializable>k__BackingField;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public AttributeCollection Attributes { get; }
    protected bool Browsable { get; }
    protected bool Serializable { get; }
    public CustomPropertyDescriptor(PropertyDescriptor parentPropertyDescriptor, bool visible);
    public CustomPropertyDescriptor(PropertyDescriptor parentPropertyDescriptor, bool browsable, bool serializable);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual AttributeCollection get_Attributes();
    [CompilerGeneratedAttribute]
protected virtual bool get_Browsable();
    [CompilerGeneratedAttribute]
protected virtual bool get_Serializable();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[AttributeUsageAttribute("4")]
public abstract class DevExpress.Utils.Design.DataAccess.CustomBindingPropertiesAttribute : Attribute {
    [IteratorStateMachineAttribute("DevExpress.Utils.Design.DataAccess.CustomBindingPropertiesAttribute/<GetCustomBindingProperties>d__0")]
public virtual IEnumerable`1<ICustomBindingProperty> GetCustomBindingProperties();
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.Design.DataAccess.DashboardDataAccessMetadataAttribute : DataAccessMetadataAttribute {
    [CompilerGeneratedAttribute]
private string <DesignTimeElementTypeProperty>k__BackingField;
    public string DesignTimeElementTypeProperty { get; public set; }
    public DashboardDataAccessMetadataAttribute(string technologies);
    [CompilerGeneratedAttribute]
public string get_DesignTimeElementTypeProperty();
    [CompilerGeneratedAttribute]
public void set_DesignTimeElementTypeProperty(string value);
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.Design.DataAccess.DataAccessMetadataAttribute : Attribute {
    private string supportedTechnologiesCore;
    [CompilerGeneratedAttribute]
private string <SupportedProcessingModes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataSourceProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataMemberProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDirectBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableInMemoryCollectionViewBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBindingToEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBindingToControlRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBindingToObjectDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBindingToXPOServerMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferAsyncDataLoading>k__BackingField;
    public string SupportedTechnologies { get; }
    public string SupportedProcessingModes { get; public set; }
    public string DataSourceProperty { get; public set; }
    public string DataMemberProperty { get; public set; }
    public string Platform { get; public set; }
    public bool EnableDirectBinding { get; public set; }
    public bool EnableInMemoryCollectionViewBinding { get; public set; }
    public bool EnableBindingToEnum { get; public set; }
    public bool EnableBindingToControlRows { get; public set; }
    public bool EnableBindingToObjectDataSource { get; public set; }
    public bool EnableBindingToXPOServerMode { get; public set; }
    public bool PreferAsyncDataLoading { get; public set; }
    public DataAccessMetadataAttribute(string technologies);
    public string get_SupportedTechnologies();
    [CompilerGeneratedAttribute]
public string get_SupportedProcessingModes();
    [CompilerGeneratedAttribute]
public void set_SupportedProcessingModes(string value);
    [CompilerGeneratedAttribute]
public string get_DataSourceProperty();
    [CompilerGeneratedAttribute]
public void set_DataSourceProperty(string value);
    [CompilerGeneratedAttribute]
public string get_DataMemberProperty();
    [CompilerGeneratedAttribute]
public void set_DataMemberProperty(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableDirectBinding();
    [CompilerGeneratedAttribute]
public void set_EnableDirectBinding(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableInMemoryCollectionViewBinding();
    [CompilerGeneratedAttribute]
public void set_EnableInMemoryCollectionViewBinding(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBindingToEnum();
    [CompilerGeneratedAttribute]
public void set_EnableBindingToEnum(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBindingToControlRows();
    [CompilerGeneratedAttribute]
public void set_EnableBindingToControlRows(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBindingToObjectDataSource();
    [CompilerGeneratedAttribute]
public void set_EnableBindingToObjectDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBindingToXPOServerMode();
    [CompilerGeneratedAttribute]
public void set_EnableBindingToXPOServerMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreferAsyncDataLoading();
    [CompilerGeneratedAttribute]
public void set_PreferAsyncDataLoading(bool value);
}
public interface DevExpress.Utils.Design.DataAccess.IBindingPropertiesProvider {
    public string DataSourceProperty { get; }
    public string DataMemberProperty { get; }
    public abstract virtual string get_DataSourceProperty();
    public abstract virtual string get_DataMemberProperty();
}
public interface DevExpress.Utils.Design.DataAccess.ICustomBindingPropertiesProvider {
    public abstract virtual IEnumerable`1<ICustomBindingProperty> GetCustomBindingProperties();
}
public interface DevExpress.Utils.Design.DataAccess.ICustomBindingProperty {
    public string PropertyName { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public abstract virtual string get_PropertyName();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Description();
}
public interface DevExpress.Utils.Design.DataAccess.IDataMemberBindingProperty {
    public string DataMember { get; }
    public abstract virtual string get_DataMember();
}
public interface DevExpress.Utils.Design.DataAccess.ISuggestDataMemberBindingProperty {
    public abstract virtual string Suggest(PropertyDescriptorCollection members);
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.Design.DataAccess.OLAPDataAccessMetadataAttribute : DataAccessMetadataAttribute {
    [CompilerGeneratedAttribute]
private string <OLAPConnectionStringProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OLAPDataProviderProperty>k__BackingField;
    public string OLAPConnectionStringProperty { get; public set; }
    public string OLAPDataProviderProperty { get; public set; }
    public OLAPDataAccessMetadataAttribute(string technologies);
    [CompilerGeneratedAttribute]
public string get_OLAPConnectionStringProperty();
    [CompilerGeneratedAttribute]
public void set_OLAPConnectionStringProperty(string value);
    [CompilerGeneratedAttribute]
public string get_OLAPDataProviderProperty();
    [CompilerGeneratedAttribute]
public void set_OLAPDataProviderProperty(string value);
}
public class DevExpress.Utils.Design.DateTimeFormatConverter : StringConverter {
    protected string DefaultString { get; }
    protected virtual string get_DefaultString();
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    protected internal virtual StringCollection GetDateTimeFormats(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.Design.DefaultBindingPropertyExAttribute : Attribute {
    public DefaultBindingPropertyExAttribute(string name);
}
public class DevExpress.Utils.Design.DefaultBooleanConverter : EnumTypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public static class DevExpress.Utils.Design.DefaultSvgPalette : object {
    public static Dictionary`2<string, string> Colors;
    public static Dictionary`2<string, string> HexColors;
    private static HashSet`1<string> AlternativeColors;
    private static DefaultSvgPalette();
    public static KeyValuePair`2<string, string> GetColor(string value, string name);
    public static string GetHexColor(string name);
    public static bool IsAlternativeColor(string name);
}
public class DevExpress.Utils.Design.DesignSR : object {
    public static string NoneValueString;
    public static string NoneString { get; }
    public static string get_NoneString();
}
public class DevExpress.Utils.Design.DXAdvPropertyDescriptor : DXPropertyDescriptor {
    private PropertyDescriptor originalDescriptor;
    protected PropertyDescriptor OriginalDescriptor { get; }
    public DXAdvPropertyDescriptor(PropertyDescriptor sourceDescriptor);
    protected virtual PropertyDescriptor get_OriginalDescriptor();
    public virtual bool ShouldSerializeValue(object component);
}
public static class DevExpress.Utils.Design.DXAssemblyDetector : object {
    private static ConcurrentDictionary`2<Assembly, bool> assemblyList;
    private static Byte[] dxPublicKeyToken;
    private static DXAssemblyDetector();
    public static bool IsDevExpressAssembly(Assembly assembly);
}
public class DevExpress.Utils.Design.DXAssemblyResolver : object {
    private static bool Checked;
    private static int locked;
    [SecuritySafeCriticalAttribute]
public static void Init();
    private static Assembly OnAssemblyResolve(object sender, ResolveEventArgs e);
}
public class DevExpress.Utils.Design.DXAssemblyResolverEx : object {
    private static bool initialized;
    private static int locked;
    [ThreadStaticAttribute]
private static Dictionary`2<string, Assembly> assemblies;
    private static Regex typeModuleRegEx;
    private static int CodeRushForRoslynVersionBuild;
    private static Regex versionRegEx;
    public static void Init();
    [SecuritySafeCriticalAttribute]
private static void InitInternal();
    [SecuritySafeCriticalAttribute]
private static Assembly OnAssemblyResolve(object sender, ResolveEventArgs e);
    public static Assembly FindAssembly(string name);
    public static Assembly FindAssembly(string name, bool patchVersion);
    private static string GetValidShortName(string assemblyName, bool patchVersion);
    private static Regex GetTypeModuleRegEx();
    internal static string GetValidTypeName(string typeName);
    internal static string GetValidAssemblyName(string assemblyName);
    internal static string GetValidAssemblyName(string assemblyName, bool patchVersion);
    private static Version GetVersion(String[] typeParts, Int32& versionIndex);
    private static Regex GetVersionRegEx();
    internal static string GetValidModuleName(string assemblyName);
}
public class DevExpress.Utils.Design.DXClientDocumentationProviderAttribute : DXDocumentationProviderAttribute {
    public DXClientDocumentationProviderAttribute(string link);
}
public class DevExpress.Utils.Design.DXClientDocumentationProviderWebAttribute : DXDocumentationProviderAttribute {
    public DXClientDocumentationProviderWebAttribute(string typeName);
    public DXClientDocumentationProviderWebAttribute(string typeName, bool globalNamespace);
    private static string GetLinkByControlType(string controlType, bool globalNamespace);
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.Design.DXDocumentationProviderAttribute : Attribute {
    private string description;
    private string link;
    private bool useNewSite;
    public string Description { get; }
    public string Link { get; }
    public DXDocumentationProviderAttribute(string description, string link);
    public DXDocumentationProviderAttribute(string description, string link, bool useNewSite);
    public string get_Description();
    public string get_Link();
    public string GetUrl();
}
public static class DevExpress.Utils.Design.DXObjectWrapper : object {
    public static object GetInstance(ITypeDescriptorContext context);
}
public class DevExpress.Utils.Design.DXPropertyDescriptor : PropertyDescriptor {
    private PropertyDescriptor sourceDescriptor;
    protected PropertyDescriptor SourceDescriptor { get; }
    public bool IsReadOnly { get; }
    public string Name { get; }
    public Type ComponentType { get; }
    public Type PropertyType { get; }
    public DXPropertyDescriptor(PropertyDescriptor sourceDescriptor);
    public static void ConvertDescriptors(IDictionary properties);
    public static void ConvertDescriptors(IDictionary properties, String[] excludeList);
    protected static bool IsConvertible(PropertyDescriptor descriptor);
    protected static bool IsRequireConvert(PropertyDescriptor descriptor);
    protected PropertyDescriptor get_SourceDescriptor();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object val);
    public virtual bool get_IsReadOnly();
    public virtual string get_Name();
    public virtual Type get_ComponentType();
    public virtual Type get_PropertyType();
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.Utils.Design.EmptyStringConverter : StringConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.Design.EnumTypeConverter : EnumConverter {
    private static object dataGuard;
    private static Dictionary`2<Type, HashEntry> data;
    public EnumTypeConverter(Type type);
    private static EnumTypeConverter();
    internal static void Refresh();
    private static DXDisplayNameAttribute[] GetAttributes(Type enumType, String[] names);
    private static DXDisplayNameAttribute GetAttribute(Type enumType, string name);
    private static String[] GetNames(Type enumType, String[] displayNames);
    private static string GetName(Type enumType, string displayName);
    protected static void Initialize(Type enumType);
    protected static void Initialize(Type enumType, Type resourceFinder);
    protected static void Initialize(Type enumType, Type resourceFinder, string resourceFile);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    protected string DisplayNameToName(Type enumType, string displayName);
    private bool IsFlagsDefined(Type type);
    protected virtual void InitializeInternal(Type enumType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    protected string NameToDisplayName(Type enumType, string name);
    protected virtual string GetDisplayName(DXDisplayNameAttribute attr);
    [CompilerGeneratedAttribute]
private string <NameToDisplayName>b__17_0(DXDisplayNameAttribute x);
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.Design.Filtering.FilteringModelMetadataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelTypeProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomAttributesProperty>k__BackingField;
    public string Platform { get; public set; }
    public string ModelTypeProperty { get; public set; }
    public string CustomAttributesProperty { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_ModelTypeProperty();
    [CompilerGeneratedAttribute]
public void set_ModelTypeProperty(string value);
    [CompilerGeneratedAttribute]
public string get_CustomAttributesProperty();
    [CompilerGeneratedAttribute]
public void set_CustomAttributesProperty(string value);
}
public class DevExpress.Utils.Design.FontConverter : TypeConverter {
    [ThreadStaticAttribute]
private static FontConverter _default;
    private FontNameConverter fontNameConverter;
    private static string styleHdr;
    internal static FontConverter Default { get; }
    internal static FontConverter get_Default();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private bool TryConvertToInstanceDescriptor(Font font, InstanceDescriptor& instanceDescriptor);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    private ArgumentException GetFormatException(string text, char separator);
    private string GetGraphicsUnitText(GraphicsUnit units);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    private String[] ParseSizeTokens(string text, char separator);
    private GraphicsUnit ParseGraphicsUnits(string units);
}
public class DevExpress.Utils.Design.FontTypeConverter : FontConverter {
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
public class DevExpress.Utils.Design.GraphicsUnitTypeConverter : EnumTypeConverter {
    public GraphicsUnitTypeConverter(Type type);
    protected virtual void InitializeInternal(Type enumType);
}
public class DevExpress.Utils.Design.HiddenInheritableCollectionAttribute : InheritableCollectionAttribute {
}
public class DevExpress.Utils.Design.HorizontalContentSplittingConverter : EnumTypeConverter {
}
public interface DevExpress.Utils.Design.ICaptionSupport {
    public string Caption { get; }
    public abstract virtual string get_Caption();
}
public interface DevExpress.Utils.Design.ICollectionEditorSupport {
    public abstract virtual void ReplaceItems(Object[] items);
}
internal interface DevExpress.Utils.Design.IConverterAspect {
    public abstract virtual void OnConvertFrom(ITypeDescriptorContext context);
    public abstract virtual void OnConvertTo(ITypeDescriptorContext context);
}
public interface DevExpress.Utils.Design.IDTEService {
    public string ProjectFullName { get; }
    public abstract virtual String[] GetClassesInfo(Type filterType, IList ignoreClassNames);
    public abstract virtual string get_ProjectFullName();
}
public interface DevExpress.Utils.Design.IDXImageInfo {
    public ImageType ImageType { get; }
    public string Name { get; }
    public string Group { get; }
    public ImageSize Size { get; }
    public String[] Tags { get; }
    public abstract virtual ImageType get_ImageType();
    public abstract virtual string get_Name();
    public abstract virtual string get_Group();
    public abstract virtual ImageSize get_Size();
    public abstract virtual String[] get_Tags();
    public abstract virtual string MakeUri();
}
public interface DevExpress.Utils.Design.IDXImagesProvider {
    public abstract virtual string GetFile(string name, ImageSize imageSize, ImageType imageType);
    public abstract virtual Image GetImage(string id, ImageSize imageSize, ImageType imageType);
    public abstract virtual IEnumerable`1<string> GetFiles(string name);
    public abstract virtual IDXImageInfo[] GetAllImages();
    public abstract virtual bool IsGrayScaledImage(string key);
    public abstract virtual bool IsOffice2013Image(string key);
    public abstract virtual bool IsDevAVImage(string key);
    public abstract virtual bool IsBrowsable(string key);
    public abstract virtual String[] GetBaseImages();
    public abstract virtual Image GetImageByPath(string path);
}
public interface DevExpress.Utils.Design.IDXObjectWrapper {
    public object SourceObject { get; }
    public abstract virtual object get_SourceObject();
}
public class DevExpress.Utils.Design.ImageFormatConverter : TypeConverter {
    private StandardValuesCollection values;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private PropertyInfo[] GetProperties();
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public enum DevExpress.Utils.Design.ImageSize : Enum {
    public int value__;
    [DescriptionAttribute("Any")]
public static ImageSize Any;
    [DescriptionAttribute("16x16")]
public static ImageSize Size16x16;
    [DescriptionAttribute("32x32")]
public static ImageSize Size32x32;
}
public enum DevExpress.Utils.Design.ImageType : Enum {
    public int value__;
    [DescriptionAttribute("Default")]
public static ImageType Default;
    [DescriptionAttribute("Colored")]
public static ImageType Colored;
    [DescriptionAttribute("Gray scaled")]
public static ImageType GrayScaled;
    [DescriptionAttribute("Office 2013")]
public static ImageType Office2013;
    [DescriptionAttribute("DevAV")]
public static ImageType DevAV;
    [DescriptionAttribute("Svg")]
public static ImageType Svg;
    [DescriptionAttribute("Blazor")]
public static ImageType Blazor;
}
public class DevExpress.Utils.Design.InheritableCollectionAttribute : Attribute {
}
public class DevExpress.Utils.Design.InitAssemblyResolverAttribute : Attribute {
    private static InitAssemblyResolverAttribute();
}
public interface DevExpress.Utils.Design.ISvgPaletteProvider {
    public double Opacity { get; public set; }
    public abstract virtual Color GetColor(Color defaultColor);
    public abstract virtual Color GetColor(string defaultColor);
    public abstract virtual Color GetColorByStyleName(string styleName, string defaultColor, object tag);
    public abstract virtual ISvgPaletteProvider Clone();
    public abstract virtual double get_Opacity();
    public abstract virtual void set_Opacity(double value);
    public abstract virtual bool Equals(ISvgPaletteProvider provider);
    public abstract virtual int GetHashCode();
}
public interface DevExpress.Utils.Design.ISvgPaletteProviderExt {
    public bool Disabled { get; }
    public abstract virtual Color GetColorByStyleName(string styleName, string defaultColor, SvgGradient& svgGradient, object tag);
    public abstract virtual bool get_Disabled();
}
public class DevExpress.Utils.Design.LinearGradientModeConverter : EnumTypeConverter {
    protected virtual void InitializeInternal(Type enumType);
}
public class DevExpress.Utils.Design.LocalizableExpandableObjectTypeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.Design.LocalizableObjectTypeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.Design.MarginsFConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ObsoleteAttribute]
public class DevExpress.Utils.Design.MarginsFloatConverter : LocalizableExpandableObjectTypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
}
public static class DevExpress.Utils.Design.NotifyHelper : object {
    public static void RaiseCanExecuteChanged(object this, Expression`1<Action> expression);
    public static void RaisePropertyChanged(object this, Expression`1<Func`1<T>> propertyExpression);
    public static void RaisePropertyChanged(object this, string propertyName);
}
public class DevExpress.Utils.Design.NullableBooleanConverter : TypeConverter {
    private static DefaultBooleanConverter defaultBooleanConverter;
    private IConverterAspect standardPropertyGridAspect;
    private static NullableBooleanConverter();
    private static Nullable`1<bool> DefaultBooleanToBoolean(DefaultBoolean value);
    private static DefaultBoolean BooleanToDefaultBoolean(Nullable`1<bool> value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public class DevExpress.Utils.Design.NullableSizeTypeConverter : NullableTypeConverter {
    public NullableSizeTypeConverter(Type type);
    protected virtual string GetNullText();
    protected virtual string GetDefaultPopupText();
}
public class DevExpress.Utils.Design.NullableTypeConverter : NullableConverter {
    private IConverterAspect standardPropertyGridAspect;
    private string nullString;
    private string defaultPopupString;
    private PropertyInfo[] properties;
    private string defaultValueString;
    private object defaultValue;
    private bool isStandardValuesSupport;
    private bool getDefaultValuesFromCtor;
    private bool isSimpleProperty;
    private Dictionary`2<string, object> standardValuesCache;
    private ICollection standardValuesCollection;
    private bool flagFrom;
    private bool flagTo;
    public NullableTypeConverter(Type type);
    protected virtual string GetNullText();
    protected virtual string GetDefaultPopupText();
    private void InitializeStandardValueCache();
    private void FillStandardValuesCache(bool isStandardValuesSupport);
    private bool CanGetStandardValues(bool isSimpleProperty);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.Design.PaperKindConverter : EnumTypeConverter {
    private static IComparer comparer;
    protected IComparer Comparer { get; }
    public PaperKindConverter(Type type);
    private static PaperKindConverter();
    protected virtual IComparer get_Comparer();
    protected virtual void InitializeInternal(Type enumType);
}
public class DevExpress.Utils.Design.PointFTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    private static PropertyDescriptorCollection PathProperties(Type type, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class DevExpress.Utils.Design.PortablePaddingConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[AttributeUsageAttribute("32767")]
public class DevExpress.Utils.Design.ResourceFinderAttribute : Attribute {
    private Type resourceFinder;
    private string resourceFile;
    public string ResourceFile { get; }
    public Type ResourceFinder { get; }
    public ResourceFinderAttribute(Type resourceFinder);
    public ResourceFinderAttribute(Type resourceFinder, string resourceFile);
    public string get_ResourceFile();
    public Type get_ResourceFinder();
}
[ObsoleteAttribute("The ResourceStreamAttribute has become obsolete. Use the ToolboxBitmap24Attribute or ToolboxBitmap32Attribute instead.")]
public class DevExpress.Utils.Design.ResourceStreamAttribute : Attribute {
    private string resourceName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private Assembly assembly;
    public string Name { get; private set; }
    private Assembly Assembly { get; }
    public ResourceStreamAttribute(string name, string resourceName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    private Assembly get_Assembly();
    public Stream GetStream();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Utils.Design.SingleTypeConverter : TypeConverter {
    public static string ToString(ITypeDescriptorContext context, CultureInfo culture, float ef);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.Design.SizeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class DevExpress.Utils.Design.SizeFConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class DevExpress.Utils.Design.SizeFTypeConverter : SizeFConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    private static PropertyDescriptorCollection PathProperties(Type type, Attribute[] attributes);
}
public class DevExpress.Utils.Design.SizeTypeConverter : SizeConverter {
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    private static PropertyDescriptorCollection PathProperties(Type type, Attribute[] attributes);
}
public class DevExpress.Utils.Design.TimeIntervalFormatConverter : DateTimeFormatConverter {
    private static string DefaultTimeIntervalPattern;
    private static string TimeIntervalStartFormatPattern;
    private static string TimeIntervalEndFormatPattern;
    private static string TimeIntervalFormatPattern;
    protected string DefaultString { get; }
    protected virtual string get_DefaultString();
    protected internal virtual StringCollection GetDateTimeFormats(ITypeDescriptorContext context);
    protected virtual string BuildTimeIntervalFormat(string pattern, string formatInfo);
}
[ObsoleteAttribute("This class is now obsolete. Use the ToolboxSvgImageAttribute class instead")]
public class DevExpress.Utils.Design.ToolboxBitmap24Attribute : ToolboxImageAttribute {
    public ToolboxBitmap24Attribute(string resourceName);
}
[ObsoleteAttribute("This class is now obsolete. Use the ToolboxSvgImageAttribute class instead")]
public class DevExpress.Utils.Design.ToolboxBitmap32Attribute : ToolboxImageAttribute {
    public ToolboxBitmap32Attribute(string resourceName);
}
public abstract class DevExpress.Utils.Design.ToolboxImageAttribute : Attribute {
    private string imageName;
    private string assemblyName;
    private Assembly assembly;
    private Assembly Assembly { get; }
    public ToolboxImageAttribute(string resourceName);
    private Assembly get_Assembly();
    public Stream GetStream();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Utils.Design.ToolboxSvgImageAttribute : ToolboxImageAttribute {
    public ToolboxSvgImageAttribute(string resourceName);
}
public class DevExpress.Utils.Design.TypeDescriptorHelper : object {
    public static PropertyDescriptor CreateProperty(Type type, PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes);
}
public class DevExpress.Utils.Design.UnboundColumnTypeConverter : EnumTypeConverter {
}
public class DevExpress.Utils.Design.UniversalCollectionPropertyDescriptor : PropertyDescriptor {
    private object source;
    private string caption;
    protected object Source { get; }
    protected string Caption { get; }
    public bool IsReadOnly { get; }
    public string Category { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public UniversalCollectionPropertyDescriptor(object source, string caption);
    protected object get_Source();
    protected string get_Caption();
    public virtual bool get_IsReadOnly();
    public virtual string get_Category();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.Utils.Design.UniversalCollectionTypeConverter : TypeConverter {
    protected string GetObjectCaption(object obj);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
public class DevExpress.Utils.Design.UniversalSerializer : object {
    public static void SerializeObject(object component, SerializationInfo si);
    public static void DeserializeObject(object component, SerializationInfo si);
}
public class DevExpress.Utils.Design.UniversalTypeConverter : ExpandableObjectConverter {
    protected bool AllowBinaryType { get; }
    protected virtual Type GetObjectType(object value);
    protected virtual bool get_AllowBinaryType();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    protected ConstructorInfo[] GetConstructors(Type ctorType);
    protected virtual ConstructorInfo[] FilterConstructors(ConstructorInfo[] ctors);
    protected string ExtractPropertyName(string valName);
    protected virtual Object[] GenerateParameters(PropertyDescriptorCollection properties, ConstructorInfo ctor, object val);
    protected virtual ConstructorInfo FindConstructor(PropertyDescriptorCollection properties, ConstructorInfo empty, ConstructorInfo[] ctors, List`1<PropertyDescriptor> list);
    protected virtual bool CheckParameter(Type propertyType, string propertyName, ParameterInfo[] pars);
    public static void ResetObject(object checkObject);
    public static bool ShouldSerializeObject(object checkObject, IComponent owner);
    public static bool ShouldSerializeObject(object checkObject);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private object <>n__0(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class DevExpress.Utils.Design.UniversalTypeConverterEx : ExpandableObjectConverter {
    protected virtual Type GetObjectType(object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.Design.VerticalContentSplittingConverter : EnumTypeConverter {
}
public static class DevExpress.Utils.DragAndDropCursors : object {
    public static IPortableCursor GetCursor(PortableDragDropEffects effect);
}
public class DevExpress.Utils.Drawing.DirectXMatrix : object {
    public static DirectXMatrix Empty;
    [CompilerGeneratedAttribute]
private DxMatrix <DxMatrix>k__BackingField;
    public DxMatrix DxMatrix { get; public set; }
    public bool IsSimple { get; }
    public Single[] Elements { get; }
    public float OffsetX { get; }
    public float OffsetY { get; }
    public bool IsInvertible { get; }
    public bool IsIdentity { get; }
    public Matrix Matrix { get; }
    public DirectXMatrix(Single[] matrix);
    public DirectXMatrix(DxMatrix matrix);
    public DirectXMatrix(float a00, float a10, float a01, float a11, float a02, float a12);
    private static DirectXMatrix();
    [CompilerGeneratedAttribute]
public DxMatrix get_DxMatrix();
    [CompilerGeneratedAttribute]
public void set_DxMatrix(DxMatrix value);
    public bool get_IsSimple();
    public sealed virtual Single[] get_Elements();
    public sealed virtual float get_OffsetX();
    public sealed virtual float get_OffsetY();
    public sealed virtual bool get_IsInvertible();
    public sealed virtual bool get_IsIdentity();
    public sealed virtual Matrix get_Matrix();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual void Dispose();
    public sealed virtual void Reset();
    public sealed virtual void Multiply(IDxMatrix matrix);
    public sealed virtual void Multiply(IDxMatrix matrix, MatrixOrder order);
    private void Multiply(DxMatrix matrix, MatrixOrder order);
    public static DirectXMatrix Multiply(DirectXMatrix matrix1, DirectXMatrix matrix2);
    public static DxMatrix Multiply(DxMatrix matrix1, DxMatrix matrix2);
    public sealed virtual void Translate(float offsetX, float offsetY);
    public sealed virtual void Translate(float offsetX, float offsetY, MatrixOrder order);
    public sealed virtual void Scale(float scaleX, float scaleY);
    public sealed virtual void Scale(float scaleX, float scaleY, MatrixOrder order);
    public sealed virtual void Rotate(float angle);
    public sealed virtual void Rotate(float angle, MatrixOrder order);
    public sealed virtual void RotateAt(float angle, PointF point);
    public sealed virtual void RotateAt(float angle, PointF point, MatrixOrder order);
    public static DxMatrix GetRotateMatrix(float angle);
    public static DxMatrix GetScaleMatrix(float scaleX, float scaleY);
    public static DxMatrix GetTranslateMatrix(float offsetX, float offsetY);
    public static DxMatrix GetShearMatrix(float shearX, float shearY);
    public sealed virtual void Shear(float shearX, float shearY);
    public sealed virtual void Shear(float shearX, float shearY, MatrixOrder order);
    public sealed virtual void Invert();
    public static DirectXMatrix Invert(DirectXMatrix matrix);
    public static DxMatrix Invert(DxMatrix matrix);
    public static RectangleF Multiply(RectangleF bounds, DxMatrix dxMatrix);
    public static float GetScale(DxMatrix dxMatrix);
    public static PointF Multiply(PointF point, DxMatrix matrix);
    public static PointF Multiply(float x, float y, DxMatrix matrix);
    public sealed virtual void TransformPoints(PointF[] pts);
    public sealed virtual void TransformPoints(Point[] pts);
    public sealed virtual void TransformVectors(PointF[] pts);
    public sealed virtual void VectorTransformPoints(Point[] pts);
    public sealed virtual void TransformVectors(Point[] pts);
    public sealed virtual IDxMatrix Clone();
}
public class DevExpress.Utils.Drawing.DxMatrix : ValueType {
    public static DxMatrix Empty;
    [CompilerGeneratedAttribute]
private float <A00>k__BackingField;
    [CompilerGeneratedAttribute]
private float <A01>k__BackingField;
    [CompilerGeneratedAttribute]
private float <A02>k__BackingField;
    [CompilerGeneratedAttribute]
private float <A10>k__BackingField;
    [CompilerGeneratedAttribute]
private float <A11>k__BackingField;
    [CompilerGeneratedAttribute]
private float <A12>k__BackingField;
    public float A00 { get; public set; }
    public float A01 { get; public set; }
    public float A02 { get; public set; }
    public float A10 { get; public set; }
    public float A11 { get; public set; }
    public float A12 { get; public set; }
    public bool IsSimple { get; }
    public bool IsEmpty { get; }
    public Single[] Elements { get; }
    public bool IsInvertible { get; }
    public DxMatrix(Single[] elements);
    public DxMatrix(float a00, float a10, float a01, float a11, float a02, float a12);
    private static DxMatrix();
    [CompilerGeneratedAttribute]
public float get_A00();
    [CompilerGeneratedAttribute]
public void set_A00(float value);
    [CompilerGeneratedAttribute]
public float get_A01();
    [CompilerGeneratedAttribute]
public void set_A01(float value);
    [CompilerGeneratedAttribute]
public float get_A02();
    [CompilerGeneratedAttribute]
public void set_A02(float value);
    [CompilerGeneratedAttribute]
public float get_A10();
    [CompilerGeneratedAttribute]
public void set_A10(float value);
    [CompilerGeneratedAttribute]
public float get_A11();
    [CompilerGeneratedAttribute]
public void set_A11(float value);
    [CompilerGeneratedAttribute]
public float get_A12();
    [CompilerGeneratedAttribute]
public void set_A12(float value);
    public bool get_IsSimple();
    public bool get_IsEmpty();
    public Single[] get_Elements();
    public bool get_IsInvertible();
    public static bool op_Equality(DxMatrix obj1, DxMatrix obj2);
    public static bool op_Inequality(DxMatrix obj1, DxMatrix obj2);
    public sealed virtual bool Equals(DxMatrix matrix);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Utils.Drawing.GdiMatrix : object {
    [CompilerGeneratedAttribute]
private Matrix <Matrix>k__BackingField;
    public Matrix Matrix { get; internal set; }
    public Single[] Elements { get; }
    public float OffsetX { get; }
    public float OffsetY { get; }
    public bool IsInvertible { get; }
    public bool IsIdentity { get; }
    public GdiMatrix(float m11, float m12, float m21, float m22, float dx, float dy);
    public GdiMatrix(Matrix matrix);
    [CompilerGeneratedAttribute]
public sealed virtual Matrix get_Matrix();
    [CompilerGeneratedAttribute]
internal void set_Matrix(Matrix value);
    public sealed virtual Single[] get_Elements();
    public sealed virtual float get_OffsetX();
    public sealed virtual float get_OffsetY();
    public sealed virtual bool get_IsInvertible();
    public sealed virtual bool get_IsIdentity();
    public sealed virtual void Dispose();
    public sealed virtual void Invert();
    public sealed virtual void Multiply(IDxMatrix matrix);
    public sealed virtual void Multiply(IDxMatrix matrix, MatrixOrder order);
    public sealed virtual void Reset();
    public sealed virtual void Rotate(float angle);
    public sealed virtual void Rotate(float angle, MatrixOrder order);
    public sealed virtual void RotateAt(float angle, PointF point);
    public sealed virtual void RotateAt(float angle, PointF point, MatrixOrder order);
    public sealed virtual void Scale(float scaleX, float scaleY);
    public sealed virtual void Scale(float scaleX, float scaleY, MatrixOrder order);
    public sealed virtual void Shear(float shearX, float shearY);
    public sealed virtual void Shear(float shearX, float shearY, MatrixOrder order);
    public sealed virtual void TransformPoints(PointF[] pts);
    public sealed virtual void TransformPoints(Point[] pts);
    public sealed virtual void TransformVectors(PointF[] pts);
    public sealed virtual void TransformVectors(Point[] pts);
    public sealed virtual void Translate(float offsetX, float offsetY);
    public sealed virtual void Translate(float offsetX, float offsetY, MatrixOrder order);
    public sealed virtual void VectorTransformPoints(Point[] pts);
    public sealed virtual IDxMatrix Clone();
}
public interface DevExpress.Utils.Drawing.IDirectXClipState {
    public RectangleF ClipBounds { get; public set; }
    public DxMatrix ClipMatrix { get; public set; }
    public DxMatrix ContextMatrix { get; public set; }
    public abstract virtual RectangleF get_ClipBounds();
    public abstract virtual void set_ClipBounds(RectangleF value);
    public abstract virtual DxMatrix get_ClipMatrix();
    public abstract virtual void set_ClipMatrix(DxMatrix value);
    public abstract virtual DxMatrix get_ContextMatrix();
    public abstract virtual void set_ContextMatrix(DxMatrix value);
}
public interface DevExpress.Utils.Drawing.IDirectXPath {
}
public interface DevExpress.Utils.Drawing.IDxGraphicsPath {
    public GraphicsPath Path { get; }
    public FillMode FillMode { get; public set; }
    public int PointCount { get; }
    public PointF[] PathPoints { get; }
    public Byte[] PathTypes { get; }
    public abstract virtual GraphicsPath get_Path();
    public abstract virtual void AddArc(RectangleF rect, float startAngle, float sweepAngle);
    public abstract virtual void AddArc(float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void AddBezier(PointF pt1, PointF pt2, PointF pt3, PointF pt4);
    public abstract virtual void AddBezier(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);
    public abstract virtual void AddBeziers(Point[] points);
    public abstract virtual void AddBeziers(PointF[] points);
    public abstract virtual void AddClosedCurve(PointF[] points);
    public abstract virtual void AddClosedCurve(PointF[] points, float tension);
    public abstract virtual void AddClosedCurve(Point[] points);
    public abstract virtual void AddClosedCurve(Point[] points, float tension);
    public abstract virtual void AddCurve(PointF[] points, float tension);
    public abstract virtual void AddCurve(Point[] points);
    public abstract virtual void AddCurve(Point[] points, int offset, int numberOfSegments, float tension);
    public abstract virtual void AddCurve(PointF[] points, int offset, int numberOfSegments, float tension);
    public abstract virtual void AddCurve(PointF[] points);
    public abstract virtual void AddCurve(Point[] points, float tension);
    public abstract virtual void AddEllipse(RectangleF rect);
    public abstract virtual void AddEllipse(float x, float y, float width, float height);
    public abstract virtual void AddLine(PointF pt1, PointF pt2);
    public abstract virtual void AddLine(float x1, float y1, float x2, float y2);
    public abstract virtual void AddLines(PointF[] points);
    public abstract virtual void AddLines(Point[] points);
    public abstract virtual void AddPath(IDxGraphicsPath addingPath, bool connect);
    public abstract virtual void AddPie(float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void AddPie(Rectangle rect, float startAngle, float sweepAngle);
    public abstract virtual void AddPolygon(Point[] points);
    public abstract virtual void AddPolygon(PointF[] points);
    public abstract virtual void AddRectangle(RectangleF rect);
    public abstract virtual void AddRectangles(Rectangle[] rects);
    public abstract virtual void AddRectangles(RectangleF[] rects);
    public abstract virtual void AddString(string s, FontFamily family, int style, float emSize, PointF origin, StringFormat format);
    public abstract virtual void AddString(string s, FontFamily family, int style, float emSize, RectangleF layoutRect, StringFormat format);
    public abstract virtual void AddString(string s, string family, int style, float emSize, PointF origin);
    public abstract virtual void CloseAllFigures();
    public abstract virtual void CloseFigure();
    public abstract virtual void Flatten(IDxMatrix matrix);
    public abstract virtual void Flatten();
    public abstract virtual void Flatten(IDxMatrix matrix, float flatness);
    public abstract virtual RectangleF GetBounds();
    public abstract virtual RectangleF GetBounds(IDxMatrix matrix, Pen pen);
    public abstract virtual RectangleF GetBounds(IDxMatrix matrix);
    public abstract virtual PointF GetLastPoint();
    public abstract virtual bool IsOutlineVisible(PointF point, Pen pen);
    public abstract virtual bool IsOutlineVisible(float x, float y, Pen pen);
    public abstract virtual bool IsVisible(PointF point);
    public abstract virtual bool IsVisible(float x, float y);
    public abstract virtual void Reset();
    public abstract virtual void Reverse();
    public abstract virtual void StartFigure();
    public abstract virtual void Transform(IDxMatrix matrix);
    public abstract virtual void Warp(PointF[] destPoints, RectangleF srcRect);
    public abstract virtual void Warp(PointF[] destPoints, RectangleF srcRect, IDxMatrix matrix);
    public abstract virtual void Warp(PointF[] destPoints, RectangleF srcRect, IDxMatrix matrix, WarpMode warpMode);
    public abstract virtual void Warp(PointF[] destPoints, RectangleF srcRect, IDxMatrix matrix, WarpMode warpMode, float flatness);
    public abstract virtual void Widen(Pen pen, IDxMatrix matrix, float flatness);
    public abstract virtual void Widen(Pen pen);
    public abstract virtual void Widen(Pen pen, IDxMatrix matrix);
    public abstract virtual FillMode get_FillMode();
    public abstract virtual void set_FillMode(FillMode value);
    public abstract virtual int get_PointCount();
    public abstract virtual PointF[] get_PathPoints();
    public abstract virtual Byte[] get_PathTypes();
}
public interface DevExpress.Utils.Drawing.IDxMatrix {
    public Single[] Elements { get; }
    public float OffsetX { get; }
    public float OffsetY { get; }
    public bool IsInvertible { get; }
    public bool IsIdentity { get; }
    public Matrix Matrix { get; }
    public abstract virtual Single[] get_Elements();
    public abstract virtual float get_OffsetX();
    public abstract virtual float get_OffsetY();
    public abstract virtual bool get_IsInvertible();
    public abstract virtual bool get_IsIdentity();
    public abstract virtual void Reset();
    public abstract virtual void Multiply(IDxMatrix matrix);
    public abstract virtual void Multiply(IDxMatrix matrix, MatrixOrder order);
    public abstract virtual void Translate(float offsetX, float offsetY);
    public abstract virtual void Translate(float offsetX, float offsetY, MatrixOrder order);
    public abstract virtual void Scale(float scaleX, float scaleY);
    public abstract virtual void Scale(float scaleX, float scaleY, MatrixOrder order);
    public abstract virtual void Rotate(float angle);
    public abstract virtual void Rotate(float angle, MatrixOrder order);
    public abstract virtual void RotateAt(float angle, PointF point);
    public abstract virtual void RotateAt(float angle, PointF point, MatrixOrder order);
    public abstract virtual void Shear(float shearX, float shearY);
    public abstract virtual void Shear(float shearX, float shearY, MatrixOrder order);
    public abstract virtual void Invert();
    public abstract virtual void TransformPoints(PointF[] pts);
    public abstract virtual void TransformPoints(Point[] pts);
    public abstract virtual void TransformVectors(PointF[] pts);
    public abstract virtual void VectorTransformPoints(Point[] pts);
    public abstract virtual void TransformVectors(Point[] pts);
    public abstract virtual Matrix get_Matrix();
    public abstract virtual IDxMatrix Clone();
}
public interface DevExpress.Utils.Drawing.IGraphicsCache {
    public int DeviceDpi { get; }
    public Matrix TransformMatrix { get; }
    public Point Offset { get; }
    public Graphics Graphics { get; }
    public bool UseDirectXPaint { get; }
    public SmoothingMode SmoothingMode { get; public set; }
    public abstract virtual int get_DeviceDpi();
    public abstract virtual void Clear();
    public abstract virtual Matrix get_TransformMatrix();
    public abstract virtual void SetTransform(IDxMatrix matrix);
    public abstract virtual IDxMatrix GetTransform();
    public abstract virtual void TranslateTransform(float dx, float dy, MatrixOrder order);
    public abstract virtual void ScaleTransform(float sx, float sy, MatrixOrder order);
    public abstract virtual void ResetTransform();
    public abstract virtual Point get_Offset();
    public abstract virtual Rectangle CalcRectangle(Rectangle r);
    public abstract virtual Rectangle CalcClipRectangle(Rectangle r);
    public abstract virtual void ResetMatrix();
    public abstract virtual bool IsNeedDrawRect(Rectangle r);
    public abstract virtual Graphics get_Graphics();
    public abstract virtual Font GetFont(Font font, FontStyle fontStyle);
    public abstract virtual Brush GetSolidBrush(Color color);
    public abstract virtual Pen GetPen(Color color);
    public abstract virtual Pen GetPen(Color color, int width);
    public abstract virtual Brush GetGradientBrush(Rectangle rect, Color startColor, Color endColor, LinearGradientMode mode);
    public abstract virtual Brush GetGradientBrush(Rectangle rect, Color startColor, Color endColor, LinearGradientMode mode, int blendCount);
    public abstract virtual void FillRectangle(Brush brush, Rectangle rect);
    public abstract virtual void FillRectangle(Brush brush, RectangleF rect);
    public abstract virtual void FillRectangle(Color color, Rectangle rect);
    public abstract virtual void FillRectangle(Color color, RectangleF rect);
    public abstract virtual void FillPolygon(Point[] points, Color color);
    public abstract virtual void FillPolygon(PointF[] points, Color color);
    public abstract virtual void FillEllipse(float x, float y, float width, float height, Color color);
    public abstract virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public abstract virtual void DrawLine(Point pt1, Point pt2, Color color, int thickness);
    public abstract virtual void DrawLine(PointF pt1, PointF pt2, Color color, int thickness);
    public abstract virtual void DrawLines(Point[] points, Color color, int thickness);
    public abstract virtual void DrawLines(PointF[] points, Color color, int thickness);
    public abstract virtual void DrawVString(string text, Font font, Brush foreBrush, Rectangle bounds, StringFormat strFormat, int angle);
    public abstract virtual void DrawString(string text, Font font, Brush foreBrush, Rectangle bounds, StringFormat strFormat);
    public abstract virtual void DrawImage(Image image, Rectangle rect);
    public abstract virtual void DrawImageUnscaled(Image image, Point point);
    public abstract virtual void DrawSvgImage(ISvgImage svgImage, Rectangle destRect, ISvgPaletteProvider svgPalette);
    public abstract virtual void DrawSvgImage(ISvgImage svgImage, Point point, ISvgPaletteProvider svgPalette);
    public abstract virtual void FillPath(Brush brush, GraphicsPath path);
    public abstract virtual void DrawPath(Pen pen, GraphicsPath path);
    public abstract virtual SizeF CalcTextSize(string text, Font font, StringFormat strFormat, int maxWidth);
    public abstract virtual SizeF CalcTextSize(string text, Font font, StringFormat strFormat, int maxWidth, int maxHeight);
    public abstract virtual SizeF CalcTextSize(string text, Font font, StringFormat strFormat, int maxWidth, int maxHeight, Boolean& isCropped);
    public abstract virtual Size CalcDefaultTextSize(Font font);
    public abstract virtual void DrawRectangle(Pen pen, Rectangle r);
    public abstract virtual RectangleF GetClipBounds();
    public abstract virtual IGraphicsClipState SaveClip();
    public abstract virtual void SetClip(RectangleF rect, bool intersect);
    public abstract virtual IGraphicsClipState SaveAndSetClip(RectangleF rect, bool intersect);
    public abstract virtual void RestoreClip(IGraphicsClipState clipInfo);
    public abstract virtual object Save(bool storeNativeClip);
    public abstract virtual void Restore(object state, bool storeNativeClip);
    public abstract virtual bool get_UseDirectXPaint();
    public abstract virtual SmoothingMode get_SmoothingMode();
    public abstract virtual void set_SmoothingMode(SmoothingMode value);
    public abstract virtual void Clear(Color color);
    public abstract virtual void DrawImage(Image image, RectangleF rect);
    public abstract virtual IDxMatrix CreateMatrix(float m11, float m12, float m21, float m22, float dx, float dy);
    public abstract virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, ColorMatrix matrix);
}
public interface DevExpress.Utils.Drawing.IGraphicsClipState {
    public Region ClipRegion { get; }
    public IntPtr ClipRegionAPI { get; }
    public Nullable`1<Rectangle> SavedMaximumClipBounds { get; }
    public IDirectXClipState DirectXClipState { get; }
    public abstract virtual Region get_ClipRegion();
    public abstract virtual IntPtr get_ClipRegionAPI();
    public abstract virtual Nullable`1<Rectangle> get_SavedMaximumClipBounds();
    public abstract virtual IDirectXClipState get_DirectXClipState();
}
[AttributeUsageAttribute("32767")]
public class DevExpress.Utils.DXBrowsableAttribute : Attribute {
    private bool browsable;
    public bool Browsable { get; }
    public DXBrowsableAttribute(bool browsable);
    public bool get_Browsable();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.DXCollection`1 : DXCollectionBase`1<T> {
    public T Item { get; }
    protected bool CanSet { get; }
    protected internal DXCollection`1(IEnumerable`1<T> collection);
    protected DXCollection`1(DXCollectionUniquenessProviderType uniquenessProviderType);
    protected DXCollection`1(int capacity, DXCollectionUniquenessProviderType uniquenessProviderType);
    public virtual T get_Item(int index);
    protected virtual bool get_CanSet();
    protected virtual void SetItem(int index, T value);
}
[ComVisibleAttribute("False")]
public class DevExpress.Utils.DXCollectionBase`1 : object {
    private List`1<T> list;
    internal DXCollectionUniquenessProvider`1<T> uniquenessProvider;
    public int Count { get; }
    [ComVisibleAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Capacity { get; public set; }
    protected IList`1<T> InnerList { get; }
    protected internal IList`1<T> List { get; }
    protected internal DXCollectionUniquenessProvider`1<T> UniquenessProvider { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DXCollectionUniquenessProviderType UniquenessProviderType { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    protected bool IsReadOnly { get; }
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    protected DXCollectionBase`1(IEnumerable`1<T> collection);
    protected DXCollectionBase`1(DXCollectionUniquenessProviderType uniquenessProviderType);
    public DXCollectionBase`1(int capacity);
    protected DXCollectionBase`1(int capacity, DXCollectionUniquenessProviderType uniquenessProviderType);
    public sealed virtual int get_Count();
    public int get_Capacity();
    public void set_Capacity(int value);
    protected virtual IList`1<T> get_InnerList();
    protected internal IList`1<T> get_List();
    protected internal DXCollectionUniquenessProvider`1<T> get_UniquenessProvider();
    public DXCollectionUniquenessProviderType get_UniquenessProviderType();
    public void set_UniquenessProviderType(DXCollectionUniquenessProviderType value);
    protected internal DXCollectionUniquenessProvider`1<T> CreateUniquenessProvider(DXCollectionUniquenessProviderType strategy);
    protected internal virtual int AddIfNotAlreadyAdded(T obj);
    protected internal int BinarySearch(T item, IComparer`1<T> comparer);
    protected virtual void InsertIfNotAlreadyInserted(int index, T obj);
    protected internal virtual bool RemoveIfAlreadyAdded(T obj);
    public sealed virtual void Clear();
    protected virtual bool OnClear();
    protected virtual void OnClearComplete();
    protected virtual bool OnInsert(int index, T value);
    protected virtual void OnInsertComplete(int index, T value);
    protected virtual bool OnRemove(int index, T value);
    protected virtual void OnRemoveComplete(int index, T value);
    protected virtual bool OnSet(int index, T oldValue, T newValue);
    protected virtual void OnSetComplete(int index, T oldValue, T newValue);
    protected virtual void OnValidate(T value);
    protected internal virtual bool RemoveAtCore(int index);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T value);
    protected virtual bool get_IsReadOnly();
    public virtual bool Remove(T value);
    public sealed virtual void CopyTo(T[] array, int index);
    protected virtual T GetItem(int index);
    protected virtual void SetItem(int index, T value);
    protected virtual int AddCore(T value);
    protected internal virtual void InsertCore(int index, T value);
    protected internal virtual void RemoveCore(T value);
    public virtual int Add(T value);
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
    public sealed virtual void Insert(int index, T value);
    public virtual bool Contains(T value);
    public virtual int IndexOf(T value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private void ThrowIndexOutOfRangeException();
    private void ThrowArgumentNotFoundException();
    private static string EnvironmentGetResourceString(string key);
    public void ForEach(Action`1<T> action);
    public virtual void AddRange(ICollection collection);
    protected virtual void AddRangeCore(ICollection collection);
    public virtual void Sort(IComparer`1<T> comparer);
    public T Find(Predicate`1<T> match);
    protected internal virtual void FindAllCore(DXCollectionBase`1<T> result, Predicate`1<T> match);
    public virtual T[] ToArray();
    internal T InvokeGetItem(int index);
    internal IList`1<T> GetInnerList();
}
public enum DevExpress.Utils.DXCollectionUniquenessProviderType : Enum {
    public int value__;
    public static DXCollectionUniquenessProviderType None;
    public static DXCollectionUniquenessProviderType MinimizeMemoryUsage;
    public static DXCollectionUniquenessProviderType MaximizePerformance;
    public static DXCollectionUniquenessProviderType MaxPerformanceMinMemory;
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.DXCollectionWithSetItem`1 : DXCollectionBase`1<T> {
    public T Item { get; public set; }
    protected DXCollectionWithSetItem`1(DXCollectionUniquenessProviderType uniquenessProviderType);
    public virtual T get_Item(int index);
    public virtual void set_Item(int index, T value);
}
public static class DevExpress.Utils.DXColor : object {
    public static Color Empty;
    public static Color Transparent;
    public static Color Black;
    public static Color Gray;
    public static Color Azure;
    public static Color Wheat;
    public static Color Bisque;
    public static Color BlanchedAlmond;
    public static Color Beige;
    public static Color Cyan;
    public static Color Red;
    public static Color Blue;
    public static Color Green;
    public static Color Yellow;
    public static Color White;
    public static Color RosyBrown;
    public static Color LightGreen;
    public static Color YellowGreen;
    public static Color AliceBlue;
    public static Color DimGray;
    public static Color Teal;
    public static Color Sienna;
    public static Color SaddleBrown;
    public static Color SeaGreen;
    public static Color Snow;
    public static Color Maroon;
    public static Color Aqua;
    public static Color Aquamarine;
    public static Color Silver;
    public static Color Magenta;
    public static Color DarkBlue;
    public static Color DarkCyan;
    public static Color DarkGreen;
    public static Color DarkMagenta;
    public static Color DarkRed;
    public static Color LightGray;
    public static Color Brown;
    public static Color SkyBlue;
    public static Color SteelBlue;
    public static Color Coral;
    public static Dictionary`2<string, Color> PredefinedColors;
    private static DXColor();
    public static Color FromArgb(int red, int green, int blue);
    public static Color FromArgb(int alpha, int red, int green, int blue);
    public static Color FromArgb(int argb);
    public static int ToArgb(Color color);
    public static Color FromOle(int oleColor);
    public static Color FromName(string name);
    public static int ToOle(Color color);
    public static string ToHtml(Color c);
    public static int ToWin32(Color c);
    public static Color FromHtml(string htmlColor);
    public static bool IsEmpty(Color c);
    private static Dictionary`2<string, Color> CreatePredefinedColorsTable();
    public static Color Blend(Color color, Color backgroundColor);
    public static bool IsTransparentOrEmpty(Color color);
    public static bool IsTransparentColor(Color color);
    public static bool IsSemitransparentColor(Color color);
    public static Color CalculateNearestColor(ICollection`1<Color> colorsToChooseFrom, Color value);
}
public static class DevExpress.Utils.DXConvert : object {
    public static bool IsDBNull(object value);
}
public static class DevExpress.Utils.DXEncoding : object {
    public static Encoding UTF8NoByteOrderMarks;
    public static Encoding Default;
    public static Encoding ASCII;
    private static DXEncoding();
    public static Encoding GetEncoding(int codePage);
    public static EncodingInfo[] GetEncodings();
    public static int GetEncodingCodePage(Encoding encoding);
    public static bool IsSingleByteEncoding(Encoding encoding);
    public static Encoding GetEncoding(string name);
    public static Encoding GetEncodingFromCodePage(int codePage);
    public static int CodePageFromCharset(int charset);
    public static int CharsetFromCodePage(int codePage);
}
public static class DevExpress.Utils.DXListExtensions : object {
    public static List`1<TOutput> ConvertAll(List`1<TInput> instance, Converter`2<TInput, TOutput> converter);
}
public static class DevExpress.Utils.DXMarshal : object {
    [SecuritySafeCriticalAttribute]
public static int SizeOf(Type type);
    [SecuritySafeCriticalAttribute]
public static int SizeOf();
    [SecuritySafeCriticalAttribute]
public static int SizeOf(object structure);
    [SecuritySafeCriticalAttribute]
public static T PtrToStructure(IntPtr prt);
}
[ExtensionAttribute]
public static class DevExpress.Utils.DXMethodInfoExtensions : object {
    [ExtensionAttribute]
public static Delegate CreateDelegate(MethodInfo instance, Type delegateType);
    [ExtensionAttribute]
public static Delegate CreateDelegate(MethodInfo instance, Type delegateType, object target);
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Utils.DXNamedItemCollection`1 : DXCollection`1<T> {
    private Dictionary`2<string, T> nameHash;
    protected internal Dictionary`2<string, T> NameHash { get; }
    public T Item { get; }
    protected DXNamedItemCollection`1(DXCollectionUniquenessProviderType uniquenessProviderType);
    protected internal Dictionary`2<string, T> get_NameHash();
    public T get_Item(string name);
    protected virtual void OnInsertComplete(int index, T value);
    protected virtual void OnRemoveComplete(int index, T value);
    protected virtual void OnClearComplete();
    protected abstract virtual string GetItemName(T item);
}
public class DevExpress.Utils.DXPoint : ValueType {
    private int x;
    private int y;
    public int X { get; public set; }
    public int Y { get; public set; }
    public DXPoint(int x, int y);
    public static bool op_Equality(DXPoint left, DXPoint right);
    public static bool op_Inequality(DXPoint left, DXPoint right);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public sealed virtual bool Equals(DXPoint other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToStringInvariant();
}
public class DevExpress.Utils.DXRectangle : ValueType {
    public static DXRectangle Empty;
    private int left;
    private int top;
    private int width;
    private int height;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Left { get; public set; }
    public int Right { get; }
    public int Top { get; public set; }
    public int Bottom { get; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public DXSize Size { get; }
    public DXPoint Location { get; }
    public bool IsEmpty { get; }
    public bool IsCollapsed { get; }
    public DXRectangle(int left, int top, int width, int height);
    public DXRectangle(DXPoint location, DXSize size);
    private static DXRectangle();
    private static DXRectangle CreateEmpty();
    public static DXRectangle FromLTRB(int left, int top, int right, int bottom);
    public static bool IsIntersected(DXRectangle rectangle1, DXRectangle rectangle2);
    public static DXRectangle Intersect(DXRectangle rectangle1, DXRectangle rectangle2);
    public static DXRectangle Inflate(DXRectangle rectangle, int x, int y);
    public static DXRectangle Union(DXRectangle rectangle1, DXRectangle rectangle2);
    public static bool op_Equality(DXRectangle rectangle1, DXRectangle rectangle2);
    public static bool op_Inequality(DXRectangle rectangle1, DXRectangle rectangle2);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public DXSize get_Size();
    public DXPoint get_Location();
    public bool get_IsEmpty();
    public bool get_IsCollapsed();
    public void Intersect(DXRectangle rectangle);
    public bool IntersectsWith(DXRectangle rectangle);
    public bool Contains(DXRectangle rectangle);
    public bool Contains(DXPoint point);
    public void Offset(int dx, int dy);
    public void Inflate(int dx, int dy);
    public virtual string ToString();
    public string ToStringInvariant();
    public sealed virtual bool Equals(DXRectangle other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Utils.DXSize : ValueType {
    private int width;
    private int height;
    public int Width { get; public set; }
    public int Height { get; public set; }
    public DXSize(int width, int height);
    public static bool op_Equality(DXSize size1, DXSize size2);
    public static bool op_Inequality(DXSize size1, DXSize size2);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public sealed virtual bool Equals(DXSize other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToStringInvariant();
}
public static class DevExpress.Utils.DXSystemColors : object {
    public static Color Control { get; }
    public static Color ControlDark { get; }
    public static Color Window { get; }
    public static Color ActiveBorder { get; }
    public static Color ActiveCaption { get; }
    public static Color ActiveCaptionText { get; }
    public static Color AppWorkspace { get; }
    public static Color ControlDarkDark { get; }
    public static Color ControlLight { get; }
    public static Color ControlLightLight { get; }
    public static Color ControlText { get; }
    public static Color Desktop { get; }
    public static Color GrayText { get; }
    public static Color Highlight { get; }
    public static Color HighlightText { get; }
    public static Color HotTrack { get; }
    public static Color InactiveBorder { get; }
    public static Color InactiveCaption { get; }
    public static Color InactiveCaptionText { get; }
    public static Color Info { get; }
    public static Color InfoText { get; }
    public static Color Menu { get; }
    public static Color MenuText { get; }
    public static Color ScrollBar { get; }
    public static Color WindowFrame { get; }
    public static Color WindowText { get; }
    public static Color GradientActiveCaption { get; }
    public static Color GradientInactiveCaption { get; }
    public static Color MenuBar { get; }
    public static Color MenuHighlight { get; }
    public static Color get_Control();
    public static Color get_ControlDark();
    public static Color get_Window();
    public static Color get_ActiveBorder();
    public static Color get_ActiveCaption();
    public static Color get_ActiveCaptionText();
    public static Color get_AppWorkspace();
    public static Color get_ControlDarkDark();
    public static Color get_ControlLight();
    public static Color get_ControlLightLight();
    public static Color get_ControlText();
    public static Color get_Desktop();
    public static Color get_GrayText();
    public static Color get_Highlight();
    public static Color get_HighlightText();
    public static Color get_HotTrack();
    public static Color get_InactiveBorder();
    public static Color get_InactiveCaption();
    public static Color get_InactiveCaptionText();
    public static Color get_Info();
    public static Color get_InfoText();
    public static Color get_Menu();
    public static Color get_MenuText();
    public static Color get_ScrollBar();
    public static Color get_WindowFrame();
    public static Color get_WindowText();
    public static Color get_GradientActiveCaption();
    public static Color get_GradientInactiveCaption();
    public static Color get_MenuBar();
    public static Color get_MenuHighlight();
}
[ExtensionAttribute]
public static class DevExpress.Utils.DXTypeExtensions : object {
    public static TypeCode TypeCodeDBNull;
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
public static Type GetReflectedType(MethodInfo mi);
    [ExtensionAttribute]
public static Type GetReflectedType(MemberInfo mi);
    public static TypeCode GetTypeCode(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type sourceType);
    [ExtensionAttribute]
public static bool IsValueType(Type sourceType);
    [ExtensionAttribute]
public static bool IsPublic(Type type);
    [ExtensionAttribute]
public static bool IsNestedPublic(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsVisible(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsSealed(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type sourceType);
    [ExtensionAttribute]
public static Type GetBaseType(Type sourceType);
    [ExtensionAttribute]
public static bool ContainsGenericParameters(Type type);
}
public class DevExpress.Utils.Editors.ObjectEditorTypeConverter : TypeConverter {
    public static string NullString;
    private static ObjectEditorTypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.EmptyAutoScroller : AutoScroller {
    public EmptyAutoScroller(MouseHandler mouseHandler);
    protected virtual void PopulateHotZones();
}
public class DevExpress.Utils.EmptyEncoding : Encoding {
    private static EmptyEncoding instance;
    public static EmptyEncoding Instance { get; }
    public bool IsSingleByte { get; }
    private static EmptyEncoding();
    public static EmptyEncoding get_Instance();
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual bool get_IsSingleByte();
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
}
internal class DevExpress.Utils.EnumerableBridgeEnumerator`2 : object {
    private IEnumerator`1<Key> keysEnumerator;
    private Func`2<Key, T> cast;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public EnumerableBridgeEnumerator`2(IEnumerator`1<Key> keysEnumerator, Func`2<Key, T> cast);
    public sealed virtual T get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[ExtensionAttribute]
public static class DevExpress.Utils.EnumExtensions : object {
    [ExtensionAttribute]
public static Array GetValues(Type enumType);
    [ExtensionAttribute]
public static bool ToBoolean(DefaultBoolean value, Func`1<bool> defaultValueEvaluator);
    [ExtensionAttribute]
public static bool ToBoolean(DefaultBoolean value, bool defaultValue);
    [ExtensionAttribute]
public static bool HasAnyFlag(Enum value, Enum[] flags);
    [ExtensionAttribute]
public static bool HasAnyValue(Enum value, Enum[] values);
    public static string GetEnumItemDisplayText(object current);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.ErrorInfo : object {
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    private Dictionary`2<object, object> hash;
    private string errorText;
    public string Item { get; public set; }
    public string ErrorText { get; public set; }
    public bool HasErrors { get; }
    protected Dictionary`2<object, object> Hash { get; }
    [CompilerGeneratedAttribute]
public void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Changed(EventHandler value);
    public virtual string get_Item(object obj);
    public virtual void set_Item(object obj, string value);
    public virtual string get_ErrorText();
    public virtual void set_ErrorText(string value);
    public virtual bool get_HasErrors();
    public virtual void ClearErrors();
    protected virtual void OnChanged();
    protected Dictionary`2<object, object> get_Hash();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.ErrorInfoEx : ErrorInfo {
    private ErrorType errorType;
    public ErrorType ErrorType { get; public set; }
    public string Item { get; public set; }
    public virtual ErrorType get_ErrorType();
    public virtual void set_ErrorType(ErrorType value);
    public virtual string get_Item(object obj);
    public virtual void set_Item(object obj, string value);
    public virtual void SetError(object obj, string errorText, ErrorType errorType);
    public virtual void SetErrorType(object obj, ErrorType newErrorType);
    public virtual ErrorType GetErrorType(object obj);
}
[ExtensionAttribute]
public static class DevExpress.Utils.Extensions.Helpers.SafeEventRaiseExtensions : object {
    [ExtensionAttribute]
public static void SafeRaise(EventHandler eventHandler, object sender, EventArgs e);
    [ExtensionAttribute]
public static void SafeRaise(EventHandler eventHandler, object sender);
    [ExtensionAttribute]
public static void SafeRaise(PropertyChangedEventHandler eventHandler, object sender, PropertyChangedEventArgs e);
    [ExtensionAttribute]
public static void SafeRaise(EventHandler`1<T> eventHandler, object sender, T e);
    [ExtensionAttribute]
public static void SafeRaise(WeakEventHandler`2<TArgs, THandler> eventHandler, object sender, TArgs e);
}
public abstract class DevExpress.Utils.Filtering.BaseFilterLookupAttribute : FilterAttributeLocalizable {
    internal Nullable`1<bool> useSelectAll;
    [CompilerGeneratedAttribute]
private ValueSelectionMode <SelectionMode>k__BackingField;
    public bool UseSelectAll { get; public set; }
    public ValueSelectionMode SelectionMode { get; public set; }
    public string SelectAllName { get; public set; }
    public string NullName { get; public set; }
    public bool get_UseSelectAll();
    public void set_UseSelectAll(bool value);
    [CompilerGeneratedAttribute]
public ValueSelectionMode get_SelectionMode();
    [CompilerGeneratedAttribute]
public void set_SelectionMode(ValueSelectionMode value);
    public string get_SelectAllName();
    public void set_SelectAllName(string value);
    public string GetSelectAllName();
    public string get_NullName();
    public void set_NullName(string value);
    public string GetNullName();
    protected virtual IEnumerable`1<Expression`1<Func`1<string>>> GetLocalizableProperties();
}
public abstract class DevExpress.Utils.Filtering.BaseFilterRangeAttribute : FilterAttributeLocalizable {
    [CompilerGeneratedAttribute]
private object <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumMember>k__BackingField;
    public string FromName { get; public set; }
    public string ToName { get; public set; }
    public string NullName { get; public set; }
    public object Minimum { get; protected set; }
    public object Maximum { get; protected set; }
    public string MinimumMember { get; public set; }
    public string MaximumMember { get; public set; }
    protected BaseFilterRangeAttribute(object minOrMinMember, object maxOrMaxMember);
    protected virtual bool TryParse(string str, Object& value);
    public string get_FromName();
    public void set_FromName(string value);
    public string get_ToName();
    public void set_ToName(string value);
    public string get_NullName();
    public void set_NullName(string value);
    public string GetFromName();
    public string GetToName();
    public string GetNullName();
    protected virtual IEnumerable`1<Expression`1<Func`1<string>>> GetLocalizableProperties();
    [CompilerGeneratedAttribute]
public object get_Minimum();
    [CompilerGeneratedAttribute]
protected void set_Minimum(object value);
    [CompilerGeneratedAttribute]
public object get_Maximum();
    [CompilerGeneratedAttribute]
protected void set_Maximum(object value);
    [CompilerGeneratedAttribute]
public string get_MinimumMember();
    [CompilerGeneratedAttribute]
public void set_MinimumMember(string value);
    [CompilerGeneratedAttribute]
public string get_MaximumMember();
    [CompilerGeneratedAttribute]
public void set_MaximumMember(string value);
    protected internal virtual String[] GetMembers();
}
public class DevExpress.Utils.Filtering.BooleanChoiceData : MetricAttributesData {
    public bool DefaultValue { get; public set; }
    internal BooleanChoiceData(IDictionary`2<string, object> memberValues);
    public bool get_DefaultValue();
    public void set_DefaultValue(bool value);
}
public enum DevExpress.Utils.Filtering.BooleanUIEditorType : Enum {
    public int value__;
    public static BooleanUIEditorType Default;
    public static BooleanUIEditorType Check;
    public static BooleanUIEditorType Toggle;
    public static BooleanUIEditorType List;
    public static BooleanUIEditorType DropDown;
}
public enum DevExpress.Utils.Filtering.DateTimeRangeUIEditorType : Enum {
    public int value__;
    public static DateTimeRangeUIEditorType Default;
    public static DateTimeRangeUIEditorType Picker;
    public static DateTimeRangeUIEditorType Range;
    public static DateTimeRangeUIEditorType Calendar;
    public static DateTimeRangeUIEditorType RangeSelector;
}
public class DevExpress.Utils.Filtering.EnumChoiceData : MetricAttributesData {
    internal EnumChoiceData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.ExcelFilterOptions : object {
    public static ExcelFilterOptions Default;
    [CompilerGeneratedAttribute]
private Nullable`1<CustomUIFilterType> <DefaultFilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CustomUIFilterType> <DefaultTextFilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CustomUIFilterType> <DefaultDateFilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CustomUIFilterType> <DefaultTimeFilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CustomUIFilterType> <DefaultDateTimeOffsetFilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowComparisons>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowComparisonsForEnums>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowComparisonsForText>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowAggregates>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowSequences>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowDatePeriods>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowAdvancedDatePeriods>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowTimePeriods>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowBlanks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowNulls>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowLikeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowCustomFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowPredefinedFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private TabType <PreferredTabType>k__BackingField;
    [CompilerGeneratedAttribute]
private NumericValuesTabFilterType <PreferredNumericValuesTabFilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateValuesTabFilterType <PreferredDateValuesTabFilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeValuesTabFilterType <PreferredTimeValuesTabFilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowScrollAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseAnimationForTabs>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeValuesTreeFilterType <PreferredDateTimeValuesTreeFilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeValuesTabFilterType <PreferredDateTimeValuesTabFilterType>k__BackingField;
    public static DefaultBoolean AllowIsSameDayFilter;
    [EditorBrowsableAttribute("1")]
public static int IsSameDayFilterThreshold;
    [EditorBrowsableAttribute("1")]
public static int DateTreeAutoExpandThreshold;
    public Nullable`1<CustomUIFilterType> DefaultFilterType { get; public set; }
    public Nullable`1<CustomUIFilterType> DefaultTextFilterType { get; public set; }
    public Nullable`1<CustomUIFilterType> DefaultDateFilterType { get; public set; }
    public Nullable`1<CustomUIFilterType> DefaultTimeFilterType { get; public set; }
    public Nullable`1<CustomUIFilterType> DefaultDateTimeOffsetFilterType { get; public set; }
    public Nullable`1<bool> ShowComparisons { get; public set; }
    public Nullable`1<bool> ShowComparisonsForEnums { get; public set; }
    public Nullable`1<bool> ShowComparisonsForText { get; public set; }
    public Nullable`1<bool> ShowAggregates { get; public set; }
    public Nullable`1<bool> ShowSequences { get; public set; }
    public Nullable`1<bool> ShowDatePeriods { get; public set; }
    public Nullable`1<bool> ShowAdvancedDatePeriods { get; public set; }
    public Nullable`1<bool> ShowTimePeriods { get; public set; }
    public Nullable`1<bool> ShowBlanks { get; public set; }
    public Nullable`1<bool> ShowNulls { get; public set; }
    public Nullable`1<bool> ShowLikeFilters { get; public set; }
    public Nullable`1<bool> ShowCustomFilters { get; public set; }
    public Nullable`1<bool> ShowPredefinedFilters { get; public set; }
    public TabType PreferredTabType { get; public set; }
    public NumericValuesTabFilterType PreferredNumericValuesTabFilterType { get; public set; }
    public DateValuesTabFilterType PreferredDateValuesTabFilterType { get; public set; }
    public TimeValuesTabFilterType PreferredTimeValuesTabFilterType { get; public set; }
    public Nullable`1<bool> ShowScrollAnnotations { get; public set; }
    public Nullable`1<bool> UseAnimationForTabs { get; public set; }
    [EditorBrowsableAttribute("1")]
public DateTimeValuesTreeFilterType PreferredDateTimeValuesTreeFilterType { get; public set; }
    [EditorBrowsableAttribute("1")]
public DateTimeValuesTabFilterType PreferredDateTimeValuesTabFilterType { get; public set; }
    private static ExcelFilterOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<CustomUIFilterType> get_DefaultFilterType();
    [CompilerGeneratedAttribute]
public void set_DefaultFilterType(Nullable`1<CustomUIFilterType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CustomUIFilterType> get_DefaultTextFilterType();
    [CompilerGeneratedAttribute]
public void set_DefaultTextFilterType(Nullable`1<CustomUIFilterType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CustomUIFilterType> get_DefaultDateFilterType();
    [CompilerGeneratedAttribute]
public void set_DefaultDateFilterType(Nullable`1<CustomUIFilterType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CustomUIFilterType> get_DefaultTimeFilterType();
    [CompilerGeneratedAttribute]
public void set_DefaultTimeFilterType(Nullable`1<CustomUIFilterType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CustomUIFilterType> get_DefaultDateTimeOffsetFilterType();
    [CompilerGeneratedAttribute]
public void set_DefaultDateTimeOffsetFilterType(Nullable`1<CustomUIFilterType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowComparisons();
    [CompilerGeneratedAttribute]
public void set_ShowComparisons(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowComparisonsForEnums();
    [CompilerGeneratedAttribute]
public void set_ShowComparisonsForEnums(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowComparisonsForText();
    [CompilerGeneratedAttribute]
public void set_ShowComparisonsForText(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowAggregates();
    [CompilerGeneratedAttribute]
public void set_ShowAggregates(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowSequences();
    [CompilerGeneratedAttribute]
public void set_ShowSequences(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowDatePeriods();
    [CompilerGeneratedAttribute]
public void set_ShowDatePeriods(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowAdvancedDatePeriods();
    [CompilerGeneratedAttribute]
public void set_ShowAdvancedDatePeriods(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowTimePeriods();
    [CompilerGeneratedAttribute]
public void set_ShowTimePeriods(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowBlanks();
    [CompilerGeneratedAttribute]
public void set_ShowBlanks(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowNulls();
    [CompilerGeneratedAttribute]
public void set_ShowNulls(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowLikeFilters();
    [CompilerGeneratedAttribute]
public void set_ShowLikeFilters(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowCustomFilters();
    [CompilerGeneratedAttribute]
public void set_ShowCustomFilters(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowPredefinedFilters();
    [CompilerGeneratedAttribute]
public void set_ShowPredefinedFilters(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public TabType get_PreferredTabType();
    [CompilerGeneratedAttribute]
public void set_PreferredTabType(TabType value);
    [CompilerGeneratedAttribute]
public NumericValuesTabFilterType get_PreferredNumericValuesTabFilterType();
    [CompilerGeneratedAttribute]
public void set_PreferredNumericValuesTabFilterType(NumericValuesTabFilterType value);
    [CompilerGeneratedAttribute]
public DateValuesTabFilterType get_PreferredDateValuesTabFilterType();
    [CompilerGeneratedAttribute]
public void set_PreferredDateValuesTabFilterType(DateValuesTabFilterType value);
    [CompilerGeneratedAttribute]
public TimeValuesTabFilterType get_PreferredTimeValuesTabFilterType();
    [CompilerGeneratedAttribute]
public void set_PreferredTimeValuesTabFilterType(TimeValuesTabFilterType value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowScrollAnnotations();
    [CompilerGeneratedAttribute]
public void set_ShowScrollAnnotations(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseAnimationForTabs();
    [CompilerGeneratedAttribute]
public void set_UseAnimationForTabs(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public DateTimeValuesTreeFilterType get_PreferredDateTimeValuesTreeFilterType();
    [CompilerGeneratedAttribute]
public void set_PreferredDateTimeValuesTreeFilterType(DateTimeValuesTreeFilterType value);
    [CompilerGeneratedAttribute]
public DateTimeValuesTabFilterType get_PreferredDateTimeValuesTabFilterType();
    [CompilerGeneratedAttribute]
public void set_PreferredDateTimeValuesTabFilterType(DateTimeValuesTabFilterType value);
    [EditorBrowsableAttribute("1")]
internal static bool UseIsSameDayFilter();
}
[AttributeUsageAttribute("384")]
public abstract class DevExpress.Utils.Filtering.FilterAttribute : Attribute {
    internal static Object[] EmptyValues;
    internal static String[] EmptyMembers;
    private static FilterAttribute();
    protected internal virtual String[] GetMembers();
}
public abstract class DevExpress.Utils.Filtering.FilterAttributeLocalizable : FilterAttribute {
    private Dictionary`2<string, LocalizableString> localizableStrings;
    private Type resourceTypeCore;
    public Type ResourceType { get; public set; }
    protected abstract virtual IEnumerable`1<Expression`1<Func`1<string>>> GetLocalizableProperties();
    private void RegisterLocalizableProperty(Expression`1<Func`1<string>> propertySelector);
    public Type get_ResourceType();
    public void set_ResourceType(Type value);
    private void OnResourceTypeChanged(Type value);
    protected string GetLocalizableValue(Expression`1<Func`1<string>> propertySelector);
    protected string GetLocalizablePropertyValue(Expression`1<Func`1<string>> propertySelector);
    protected void SetLocalizablePropertyValue(Expression`1<Func`1<string>> propertySelector, string value);
}
public class DevExpress.Utils.Filtering.FilterBooleanChoiceAttribute : FilterAttributeLocalizable {
    [CompilerGeneratedAttribute]
private BooleanUIEditorType <EditorType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValueMember>k__BackingField;
    public BooleanUIEditorType EditorType { get; public set; }
    public Nullable`1<bool> DefaultValue { get; private set; }
    public string DefaultValueMember { get; public set; }
    public string TrueName { get; public set; }
    public string FalseName { get; public set; }
    public string DefaultName { get; public set; }
    public FilterBooleanChoiceAttribute(bool defaultValue);
    public FilterBooleanChoiceAttribute(string defaultValueOrDefaultValueMember);
    [CompilerGeneratedAttribute]
public BooleanUIEditorType get_EditorType();
    [CompilerGeneratedAttribute]
public void set_EditorType(BooleanUIEditorType value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DefaultValueMember();
    [CompilerGeneratedAttribute]
public void set_DefaultValueMember(string value);
    public string get_TrueName();
    public void set_TrueName(string value);
    public string get_FalseName();
    public void set_FalseName(string value);
    public string get_DefaultName();
    public void set_DefaultName(string value);
    public string GetTrueName();
    public string GetFalseName();
    public string GetDefaultName();
    protected virtual IEnumerable`1<Expression`1<Func`1<string>>> GetLocalizableProperties();
    protected internal virtual String[] GetMembers();
}
public class DevExpress.Utils.Filtering.FilterDateTimeRangeAttribute : BaseFilterRangeAttribute {
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static FilterDateTimeRangeAttribute Implicit;
    [CompilerGeneratedAttribute]
private DateTimeRangeUIEditorType <EditorType>k__BackingField;
    public bool IsImplicit { get; }
    public DateTimeRangeUIEditorType EditorType { get; public set; }
    public object Minimum { get; public set; }
    public object Maximum { get; public set; }
    public FilterDateTimeRangeAttribute(string minOrMinMember, string maxOrMaxMember);
    private static FilterDateTimeRangeAttribute();
    public bool get_IsImplicit();
    protected virtual bool TryParse(string str, Object& value);
    [CompilerGeneratedAttribute]
public DateTimeRangeUIEditorType get_EditorType();
    [CompilerGeneratedAttribute]
public void set_EditorType(DateTimeRangeUIEditorType value);
    public object get_Minimum();
    public void set_Minimum(object value);
    public object get_Maximum();
    public void set_Maximum(object value);
}
public class DevExpress.Utils.Filtering.FilterEnumChoiceAttribute : BaseFilterLookupAttribute {
    [CompilerGeneratedAttribute]
private LookupUIEditorType <EditorType>k__BackingField;
    internal Nullable`1<bool> useFlags;
    [CompilerGeneratedAttribute]
private FlagComparisonRule <FlagComparisonRule>k__BackingField;
    public LookupUIEditorType EditorType { get; public set; }
    public bool UseFlags { get; public set; }
    public FlagComparisonRule FlagComparisonRule { get; public set; }
    public FilterEnumChoiceAttribute(bool useFlags);
    public FilterEnumChoiceAttribute(FlagComparisonRule flagComparisonRule);
    [CompilerGeneratedAttribute]
public LookupUIEditorType get_EditorType();
    [CompilerGeneratedAttribute]
public void set_EditorType(LookupUIEditorType value);
    public bool get_UseFlags();
    public void set_UseFlags(bool value);
    [CompilerGeneratedAttribute]
public FlagComparisonRule get_FlagComparisonRule();
    [CompilerGeneratedAttribute]
public void set_FlagComparisonRule(FlagComparisonRule value);
}
public class DevExpress.Utils.Filtering.FilterGroupAttribute : BaseFilterLookupAttribute {
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static FilterGroupAttribute Implicit;
    private Char[] separatorChars;
    private Char[] separatorAndSpaceChars;
    [CompilerGeneratedAttribute]
private GroupUIEditorType <EditorType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Grouping>k__BackingField;
    public bool IsImplicit { get; }
    public GroupUIEditorType EditorType { get; public set; }
    [BrowsableAttribute("False")]
public String[] Grouping { get; private set; }
    public FilterGroupAttribute(string groupingOrChildren);
    private static FilterGroupAttribute();
    public bool get_IsImplicit();
    [CompilerGeneratedAttribute]
public GroupUIEditorType get_EditorType();
    [CompilerGeneratedAttribute]
public void set_EditorType(GroupUIEditorType value);
    [CompilerGeneratedAttribute]
public String[] get_Grouping();
    [CompilerGeneratedAttribute]
private void set_Grouping(String[] value);
    internal bool IsValid(string origin);
    private bool IsRootedBy(string origin);
    [BrowsableAttribute("False")]
internal static String[] Ensure(String[] grouping, string path);
    [BrowsableAttribute("False")]
internal bool Equals(FilterGroupAttribute attribute);
}
public class DevExpress.Utils.Filtering.FilterLookupAttribute : BaseFilterLookupAttribute {
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static FilterLookupAttribute Implicit;
    [CompilerGeneratedAttribute]
private LookupUIEditorType <EditorType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataSourceMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxCountMember>k__BackingField;
    internal Nullable`1<bool> useBlanks;
    public bool IsImplicit { get; }
    public LookupUIEditorType EditorType { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool UseFlags { get; public set; }
    [BrowsableAttribute("False")]
public object DataSource { get; private set; }
    public Nullable`1<int> Top { get; private set; }
    public Nullable`1<int> MaxCount { get; private set; }
    public string DataSourceMember { get; public set; }
    public string ValueMember { get; public set; }
    public string DisplayMember { get; public set; }
    public string TopMember { get; public set; }
    public string MaxCountMember { get; public set; }
    public bool UseBlanks { get; public set; }
    public string BlanksName { get; public set; }
    public FilterLookupAttribute(int top, int maxCount);
    public FilterLookupAttribute(string topOrTopMember, string maxCountOrMaxCountMember);
    public FilterLookupAttribute(object dataSourceOrDataSourceMember, int top, int maxCount);
    private static FilterLookupAttribute();
    public bool get_IsImplicit();
    [CompilerGeneratedAttribute]
public LookupUIEditorType get_EditorType();
    [CompilerGeneratedAttribute]
public void set_EditorType(LookupUIEditorType value);
    public bool get_UseFlags();
    public void set_UseFlags(bool value);
    [CompilerGeneratedAttribute]
public object get_DataSource();
    [CompilerGeneratedAttribute]
private void set_DataSource(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Top();
    [CompilerGeneratedAttribute]
private void set_Top(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxCount();
    [CompilerGeneratedAttribute]
private void set_MaxCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_DataSourceMember();
    [CompilerGeneratedAttribute]
public void set_DataSourceMember(string value);
    [CompilerGeneratedAttribute]
public string get_ValueMember();
    [CompilerGeneratedAttribute]
public void set_ValueMember(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayMember();
    [CompilerGeneratedAttribute]
public void set_DisplayMember(string value);
    [CompilerGeneratedAttribute]
public string get_TopMember();
    [CompilerGeneratedAttribute]
public void set_TopMember(string value);
    [CompilerGeneratedAttribute]
public string get_MaxCountMember();
    [CompilerGeneratedAttribute]
public void set_MaxCountMember(string value);
    public bool get_UseBlanks();
    public void set_UseBlanks(bool value);
    public string get_BlanksName();
    public void set_BlanksName(string value);
    public string GetBlanksName();
    protected virtual IEnumerable`1<Expression`1<Func`1<string>>> GetLocalizableProperties();
    protected internal virtual String[] GetMembers();
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.Filtering.FilterMetadataTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <MetadataClassType>k__BackingField;
    public Type MetadataClassType { get; private set; }
    public FilterMetadataTypeAttribute(Type metadataClassType);
    [CompilerGeneratedAttribute]
public Type get_MetadataClassType();
    [CompilerGeneratedAttribute]
private void set_MetadataClassType(Type value);
}
public class DevExpress.Utils.Filtering.FilterRangeAttribute : BaseFilterRangeAttribute {
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static FilterRangeAttribute Implicit;
    [CompilerGeneratedAttribute]
private RangeUIEditorType <EditorType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Average>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AverageMember>k__BackingField;
    public bool IsImplicit { get; }
    public RangeUIEditorType EditorType { get; public set; }
    public object Average { get; private set; }
    public string AverageMember { get; public set; }
    public FilterRangeAttribute(object minOrMinMember, object maxOrMaxMember);
    public FilterRangeAttribute(object minOrMinMember, object maxOrMaxMember, object avgOrAvgMember);
    private static FilterRangeAttribute();
    public bool get_IsImplicit();
    [CompilerGeneratedAttribute]
public RangeUIEditorType get_EditorType();
    [CompilerGeneratedAttribute]
public void set_EditorType(RangeUIEditorType value);
    [CompilerGeneratedAttribute]
public object get_Average();
    [CompilerGeneratedAttribute]
private void set_Average(object value);
    [CompilerGeneratedAttribute]
public string get_AverageMember();
    [CompilerGeneratedAttribute]
public void set_AverageMember(string value);
    protected internal virtual String[] GetMembers();
}
public enum DevExpress.Utils.Filtering.FlagComparisonRule : Enum {
    public int value__;
    public static FlagComparisonRule Default;
    public static FlagComparisonRule Contains;
    public static FlagComparisonRule Equals;
}
public class DevExpress.Utils.Filtering.GroupData : MetricAttributesData {
    internal bool HasParentValues { get; }
    internal GroupData(IDictionary`2<string, object> memberValues);
    internal string GetPath();
    internal Object[] GetParentValues();
    internal CriteriaOperator GetParentCriteria();
    internal bool get_HasParentValues();
    public void SetGroupData(Object[] values, String[] displayValues);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetGroupValues(Object[] values);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetGroupTexts(String[] texts);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public virtual void SetDataItemsLookup(object lookup);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public virtual object GetDataItemsLookup();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetupGroupFilters(FilteringViewModelPropertyValuesProvider provider, string path, Object[] values, String[] displayTexts);
}
public enum DevExpress.Utils.Filtering.GroupUIEditorType : Enum {
    public int value__;
    public static GroupUIEditorType Default;
}
public interface DevExpress.Utils.Filtering.IFilterCriteriaBindingAware {
    public IFilterCriteriaBindingTarget BindingTarget { get; }
    public abstract virtual IFilterCriteriaBindingTarget get_BindingTarget();
}
public interface DevExpress.Utils.Filtering.IFilterCriteriaBindingTarget {
    public CriteriaOperator FilterCriteria { get; public set; }
    public abstract virtual CriteriaOperator get_FilterCriteria();
    public abstract virtual void set_FilterCriteria(CriteriaOperator value);
    public abstract virtual void RaiseFilterCriteriaChanged();
    public abstract virtual IDisposable Lock();
}
public interface DevExpress.Utils.Filtering.IFilteringUIClient {
    public IEndUserFilteringViewModelProvider Provider { get; }
    public abstract virtual bool EnsureProviderInitialized();
    public abstract virtual IEndUserFilteringViewModelProvider get_Provider();
}
[ExtensionAttribute]
internal static class DevExpress.Utils.Filtering.Internal.Accessor : object {
    private static ConcurrentDictionary`2<string, Func`2<object, object>> accessorsCache;
    private static Accessor();
    [ExtensionAttribute]
internal static object GetMemberValue(object this, string member, Func`2<object, object> defaultAccessor);
    private static Func`2<object, object> GetAccessor(Type type, string member, Func`2<object, object> defaultAccessor);
    internal static Func`2<object, object> GetAccessor(Type type, MemberInfo memberInfo);
    private static Func`2<object, object> GetDefaultAccessor(Type type, string member);
    internal static void Reset(Type type, string member);
    internal static void Reset();
}
internal static class DevExpress.Utils.Filtering.Internal.AggregatedValues : object {
    private static Object[] Default;
    private static Object[] NotLoaded;
    private static AggregatedValues();
    public static Object[] Aggregate(Type type, Object[] uniqueValues);
    private static object GetAvg(Object[] uniqueValues, Type type, object min, object max);
}
public enum DevExpress.Utils.Filtering.Internal.AttributesMergeMode : Enum {
    public int value__;
    public static AttributesMergeMode Default;
    public static AttributesMergeMode Merge;
    public static AttributesMergeMode Replace;
}
[FlagsAttribute]
public enum DevExpress.Utils.Filtering.Internal.AutoHeight : Enum {
    public int value__;
    public static AutoHeight None;
    public static AutoHeight AutoHeight;
    public static AutoHeight Wrap;
    public static AutoHeight Trimming;
}
public class DevExpress.Utils.Filtering.Internal.BaseFilteringUIServiceProvider : object {
    protected IntegrityContainer serviceContainer;
    public void RegisterService(TService service);
    public TService GetService();
    protected virtual void RegisterServices();
    protected virtual IViewModelFactory GetViewModelFactory();
    protected virtual IValueTypeResolver GetValueBoxTypeResolver();
    protected virtual IEndUserFilteringSettingsFactory GetEndUserFilteringSettingsFactory();
    protected virtual IEndUserFilteringMetricAttributesFactory GetEndUserFilteringMetricAttributesFactory();
    protected virtual IMetricAttributesQueryFactory GetMetricAttributesQueryFactory();
    protected virtual IEndUserFilteringMetricViewModelFactory GetEndUserFilteringMetricViewModelFactory();
    protected virtual IViewModelBuilderResolver GetViewModelBuilderResolver();
    protected virtual IFilterCriteriaQueryFactory GetFilterCriteriaQueryFactory();
    protected virtual IFilterCriteriaParseFactory GetFilterCriteriaParseFactory();
    protected virtual IFilterUIEditorPropertiesFactory GetFilterUIEditorPropertiesFactory();
    protected virtual IDisplayTextServiceFactory GetDisplayTextServiceFactory();
    protected virtual IDisplayTemplatesServiceFactory GetDisplayTemplatesServiceFactory();
    protected virtual IDisplayTemplatesCustomizationServiceFactory GetDisplayTemplatesCustomizationServiceFactory();
    protected virtual IEndUserFilteringViewModelDataContext GetEndUserFilteringViewModelDataContext();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
internal abstract class DevExpress.Utils.Filtering.Internal.BaseMetricAttributesQueryFactory : object {
    protected IMetricAttributesQuery CreateQueryCore(IDictionary`2<Type, Func`3<IEndUserFilteringMetric, IMetricAttributesQueryOwner, IMetricAttributesQuery>> initializers, IEndUserFilteringMetric metric, IMetricAttributesQueryOwner owner);
}
internal class DevExpress.Utils.Filtering.Internal.BehaviorProvider : object {
    private IDictionary`2<string, int> orders;
    private Hashtable disabledElements;
    public BehaviorProvider(IDictionary`2<string, int> orders, Hashtable disabledElements);
    public sealed virtual bool GetIsEnabled(string name);
    public sealed virtual bool GetIsVisible(string name);
}
public class DevExpress.Utils.Filtering.Internal.BooleanValueBox`1 : SimpleValueBox`1<bool> {
    public Nullable`1<bool> Value { get; public set; }
    protected IBooleanChoiceMetricAttributes MetricAttributes { get; }
    [BrowsableAttribute("False")]
public string TrueName { get; }
    [BrowsableAttribute("False")]
public string FalseName { get; }
    [BrowsableAttribute("False")]
public string DefaultName { get; }
    [BrowsableAttribute("False")]
public Nullable`1<bool> DefaultValue { get; }
    public virtual Nullable`1<bool> get_Value();
    public virtual void set_Value(Nullable`1<bool> value);
    protected IBooleanChoiceMetricAttributes get_MetricAttributes();
    public sealed virtual string get_TrueName();
    public sealed virtual string get_FalseName();
    public sealed virtual string get_DefaultName();
    public sealed virtual Nullable`1<bool> get_DefaultValue();
    private sealed virtual override CriteriaOperator DevExpress.Utils.Filtering.Internal.IFilterValueViewModel.CreateFilterCriteria();
    protected sealed virtual bool TryParseCore(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected sealed virtual bool InitializeWithNull(bool useInversion);
    protected sealed virtual bool InitializeWithValues(Object[] uniqueAndSortedValues, bool useInversion);
    private bool TryParseBinary(string path, CriteriaOperator criteria);
    private static Nullable`1<bool> GetBoolOrNull(OperandValue value);
    private static Nullable`1<bool> GetBoolOrNull(object value);
    [CompilerGeneratedAttribute]
private void <InitializeWithNull>b__15_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(Nullable`1<bool> value);
}
internal static class DevExpress.Utils.Filtering.Internal.CollectionParser`1 : object {
    internal static List`1<T> GetValues(InOperator inOp);
    internal static List`1<T> GetValues(FunctionOperator isSameDayOp);
    internal static List`1<T> GetValues(Object[] valuesArray);
    internal static List`1<T> GetValues(IEnumerable`1<OperandValue> operands);
}
public class DevExpress.Utils.Filtering.Internal.CollectionValueBox`1 : ValueViewModel {
    private static IReadOnlyCollection`1<T> UnsetValues;
    private static IReadOnlyCollection`1<int> UnsetDisplayIndexes;
    private static object valuesKey;
    private static object displayIndexesKey;
    private static object blanksKey;
    private static bool IsDateTime;
    private static bool IsDateOnly;
    private Nullable`1<bool> dataSourceLoaded;
    private HashSet`1<object> valuesLookup;
    private Dictionary`2<int, string> displayTextLookup;
    private HashSet`1<T> delayedInvertedValues;
    private HashSet`1<int> delayedInvertedIndexes;
    private Lazy`1<object> dataSourceCore;
    private LookupDataSource`1<T> lookupDataSourceCore;
    private Nullable`1<bool> delayedInvertedBlanks;
    public IReadOnlyCollection`1<T> Values { get; public set; }
    public IReadOnlyCollection`1<int> DisplayIndexes { get; public set; }
    private bool DevExpress.Utils.Filtering.Internal.ISupportInversion.HasInversion { get; }
    private object DevExpress.Utils.Filtering.Internal.ISupportInversion.InvertedValues { get; }
    public bool IsLoadMoreAvailable { get; }
    public bool IsLoadFewerAvailable { get; }
    [BrowsableAttribute("False")]
public object DataSource { get; }
    [BrowsableAttribute("False")]
public IEnumerable`1<KeyValuePair`2<object, string>> LookupDataSource { get; }
    protected bool LookupDataSourceLoaded { get; }
    protected int NullAndBlanksCount { get; }
    protected int MaxDisplayIndex { get; }
    [BrowsableAttribute("False")]
public bool IsInverted { get; }
    protected ILookupMetricAttributes`1<T> MetricAttributes { get; }
    private bool DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.HasValues { get; }
    private object DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.Values { get; }
    [BrowsableAttribute("False")]
public string ValueMember { get; }
    [BrowsableAttribute("False")]
public string DisplayMember { get; }
    [BrowsableAttribute("False")]
public Nullable`1<int> Top { get; }
    [BrowsableAttribute("False")]
public Nullable`1<int> MaxCount { get; }
    [BrowsableAttribute("False")]
public bool UseSelectAll { get; }
    [BrowsableAttribute("False")]
public bool UseRadioSelection { get; }
    [BrowsableAttribute("False")]
public string SelectAllName { get; }
    [BrowsableAttribute("False")]
public string NullName { get; }
    [BrowsableAttribute("False")]
public string BlanksName { get; }
    [BrowsableAttribute("False")]
public bool UseBlanks { get; }
    public Nullable`1<bool> Blanks { get; public set; }
    private bool DevExpress.Utils.Filtering.Internal.ICollectionValueViewModel.FilterByDisplayText { get; }
    private static CollectionValueBox`1();
    public virtual IReadOnlyCollection`1<T> get_Values();
    public virtual void set_Values(IReadOnlyCollection`1<T> value);
    public virtual IReadOnlyCollection`1<int> get_DisplayIndexes();
    public virtual void set_DisplayIndexes(IReadOnlyCollection`1<int> value);
    protected void OnValuesChanged();
    protected void OnDisplayIndexesChanged();
    protected sealed virtual void ResetCore();
    protected sealed virtual bool CanResetCore();
    protected sealed virtual void OnInitialized();
    protected sealed virtual void OnMetricAttributesMemberChanged(string propertyName);
    protected sealed virtual void OnMetricAttributesSpecialMemberChanged(string propertyName);
    private void ResetDataSourceAndLoadCommand();
    public sealed virtual void LoadMore();
    private int GetCount();
    private int GetCount(bool forceFilterByText);
    public sealed virtual void LoadFewer();
    private void InitializeDataSource(bool fromUnique, Nullable`1<int> count);
    private void NotifyDataSourceChanged();
    private void UpdateLookupDataSource();
    protected virtual IEnumerable`1<KeyValuePair`2<object, string>> CreateLookUpDataSource(IEnumerable dataSource, Action ensureDelayed, SynchronizationContext synchronizationContext);
    private static int TryGetBestCapacity(IEnumerable dataSource, bool forceFilterByDisplayText);
    private bool AreAllValuesSelected(bool fromUnique, bool filterByText, Boolean& useInversion);
    private bool AreAllUniqueValuesSelected(bool filterByText, int valuesCount, Boolean& useInversion);
    private bool AreAllDataSourceSelected(bool filterByText, int valuesCount, Boolean& useInversion);
    private bool HasValuesOrIndexes(bool filterByText);
    private bool UseInversion();
    private bool UseInversion(int valuesCount, int dataCount);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.ISupportInversion.get_HasInversion();
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.ISupportInversion.get_InvertedValues();
    private void EnsureDelayedInvertedValues();
    private bool IsNoValuesLoaded();
    private void SetValues(T[] valuesArray, bool useInversion);
    private void SetInvertedValues(T[] valuesArray);
    private void EnsureDelayedInvertedDisplayIndexes();
    private void SetDisplayIndexes(Int32[] indexes, bool useInversion);
    private void SetInvertedDisplayIndexes(Int32[] indexes, int maxDisplayIndex);
    private static List`1<TValue> GetInvertedList(int totalCount, TValue[] values);
    private bool CanLoadData();
    public bool CanLoadMore();
    public sealed virtual bool get_IsLoadMoreAvailable();
    public bool CanLoadFewer();
    public sealed virtual bool get_IsLoadFewerAvailable();
    private void UpdateLoadCommands();
    public sealed virtual object get_DataSource();
    public sealed virtual IEnumerable`1<KeyValuePair`2<object, string>> get_LookupDataSource();
    protected bool get_LookupDataSourceLoaded();
    protected int get_NullAndBlanksCount();
    protected bool IsNullOrBlank(int index);
    protected int get_MaxDisplayIndex();
    public sealed virtual bool get_IsInverted();
    protected ILookupMetricAttributes`1<T> get_MetricAttributes();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.get_HasValues();
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.get_Values();
    public sealed virtual string get_ValueMember();
    public sealed virtual string get_DisplayMember();
    public sealed virtual Nullable`1<int> get_Top();
    public sealed virtual Nullable`1<int> get_MaxCount();
    public sealed virtual bool get_UseSelectAll();
    public sealed virtual bool get_UseRadioSelection();
    public sealed virtual string get_SelectAllName();
    public sealed virtual string get_NullName();
    public sealed virtual string get_BlanksName();
    public sealed virtual bool get_UseBlanks();
    public virtual Nullable`1<bool> get_Blanks();
    public virtual void set_Blanks(Nullable`1<bool> value);
    private Nullable`1<bool> GetActualBlanks(Nullable`1<bool> value, Func`1<bool> useInversion);
    private void SetBlanksFromParse(bool useInversion);
    private void SetBlanks(Nullable`1<bool> value);
    private bool TryResetBlanks();
    protected void OnBlanksChanged();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.ICollectionValueViewModel.get_FilterByDisplayText();
    private sealed virtual override CriteriaOperator DevExpress.Utils.Filtering.Internal.IFilterValueViewModel.CreateFilterCriteria();
    private bool HasNull();
    private bool HasNullInverted();
    private OperandValue[] GetOperandValues(bool forceFilterByText);
    private OperandValue[] GetOperandValuesInverted(bool forceFilterByText, int maxDisplayIndex);
    private object GetFirstValue(bool forceFilterByText);
    private CriteriaOperator GetEqualsOrIsNull(OperandProperty prop, object value, bool forceFilterByText);
    private CriteriaOperator GetEquals(OperandProperty prop, OperandValue value, bool forceFilterByText, bool useInversion);
    private CriteriaOperator GetIn(OperandProperty prop, OperandValue[] operandValues, bool forceFilterByText, bool useInversion);
    private static UnaryOperator GetIsNull(OperandProperty prop, bool useInversion);
    private static CriteriaOperator GetNothingOrBlanks(bool useBlanks, Nullable`1<bool> blanks, string path, bool useInversion);
    private static CriteriaOperator GetBlanks(string path, bool value, bool useInversion);
    private static CriteriaOperator GetBlanks(OperandProperty prop, bool value, bool useInversion);
    private static CriteriaOperator GetBlanks(OperandProperty prop);
    private static CriteriaOperator GetBlanks(OperandProperty prop, bool value);
    private int GetDisplayIndex(OperandValue value);
    private int GetDisplayIndex(object value);
    private Func`2<string, int> GetDisplayIndexFallback();
    private int GetNullDisplayIndex();
    private Int32[] GetNullDisplayIndexes();
    private static Int32[] GetNullDisplayIndexesCore(IDisplayMetricAttributes attributes, string nullName);
    private static int GetDisplayIndexCore(IDisplayMetricAttributes attributes, string value, Func`2<string, int> getDisplayIndexFallback);
    private static bool GetForceFilterByText(IMetricAttributes metricAttributes);
    protected sealed virtual bool TryParseCore(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected sealed virtual bool InitializeWithNull(bool useInversion);
    protected sealed virtual bool InitializeWithValues(Object[] uniqueAndSortedValues, bool useInversion);
    private bool IsNullGroup(GroupOperator group, bool useInversion);
    private bool IsBlanksGroup(GroupOperator group, bool useInversion);
    private bool IsEqualsGroup(GroupOperator group, bool useInversion);
    private bool IsBinaryElementOfGroup(CriteriaOperator operand, bool useInversion);
    private bool IsInElementOfGroup(CriteriaOperator operand, bool useInversion);
    private bool IsIsSameDayElementOfGroup(CriteriaOperator operand, bool useInversion);
    private bool IsBlanksElementOfGroup(CriteriaOperator operand, bool useInversion);
    private bool IsNullElementOfGroup(GroupOperator group, bool useInversion);
    private InOperator GetInElement(CriteriaOperator operand, bool useInversion);
    private FunctionOperator GetIsSameDayElement(CriteriaOperator operand, bool useInversion);
    private FunctionOperator GetBlanksElement(CriteriaOperator operand, bool useInversion);
    private UnaryOperator GetNullElement(UnaryOperator unaryElement, bool useInversion);
    private bool TryParseNullGroup(IEndUserFilteringMetric metric, GroupOperator group, bool forceText, bool useInversion);
    private bool TryParseBlanksGroup(IEndUserFilteringMetric metric, GroupOperator group, bool forceText, bool useInversion);
    private bool TryParseEqualsGroup(GroupOperator group, bool forceText, bool useInversion);
    private bool TryParseIn(string path, CriteriaOperator criteria, bool useInversion);
    private bool TryParseIsSameDay(string path, CriteriaOperator criteria, bool useInversion);
    private bool TryParseBinary(string path, CriteriaOperator criteria, bool useInversion);
    private bool TryParseBlanks(string path, CriteriaOperator criteria, bool useInversion);
    private bool TryParseUnary(IEndUserFilteringMetric metric, CriteriaOperator criteria, bool useInversion);
    private bool CanParseIsNull();
    [CompilerGeneratedAttribute]
private void <UpdateLookupDataSource>b__31_0();
    [CompilerGeneratedAttribute]
private void <UpdateLookupDataSource>b__31_2();
    [CompilerGeneratedAttribute]
private void <UpdateLookupDataSource>b__31_1();
    [CompilerGeneratedAttribute]
private void <UpdateLookupDataSource>b__31_3();
    [CompilerGeneratedAttribute]
private bool <set_Blanks>b__105_0();
}
internal static class DevExpress.Utils.Filtering.Internal.ConstraintsCache : object {
    private static ConcurrentDictionary`2<Type, object> minValues;
    private static ConcurrentDictionary`2<Type, object> maxValues;
    private static ConstraintsCache();
    internal static object GetMinValue(Type type);
    internal static object GetMaxValue(Type type);
}
public class DevExpress.Utils.Filtering.Internal.ContextDisplayTemplatesCustomizationServiceFactory : object {
    private IDisplayTemplatesCustomizationServiceFactory factory;
    private Func`1<IServiceProvider> getContext;
    public ContextDisplayTemplatesCustomizationServiceFactory(IDisplayTemplatesCustomizationServiceFactory factory, Func`1<IServiceProvider> getContext);
    private sealed virtual override IDisplayTemplatesCustomizationService DevExpress.Utils.Filtering.Internal.IDisplayTemplatesCustomizationServiceFactory.Create(string path);
}
public class DevExpress.Utils.Filtering.Internal.ContextDisplayTemplatesCustomizationServiceFactoryForDataClient : object {
    private Func`1<IServiceProvider> getContext;
    public ContextDisplayTemplatesCustomizationServiceFactoryForDataClient(Func`1<IServiceProvider> getContext);
    private sealed virtual override IDisplayTemplatesCustomizationService DevExpress.Utils.Filtering.Internal.IDisplayTemplatesCustomizationServiceFactory.Create(string path);
}
internal abstract class DevExpress.Utils.Filtering.Internal.CustomUIFilter : FilterUIElement`1<CustomUIFilterType> {
    private static Type CustomUIFilterTypeEnum;
    private static Dictionary`2<CustomUIFilterType, AnnotationAttributes> annotationAttributes;
    private string parentGroup;
    private ICustomUIFilterValue valueCore;
    private WeakReference parentRef;
    private Lazy`1<ICustomUIFilterSummaryItem> summaryItemCore;
    private IDisposable endEditToken;
    private ICustomUIFilterCriteriaParser criteriaParser;
    private int DevExpress.Utils.Filtering.Internal.ICustomUIFilter.Order { get; }
    private string DevExpress.Utils.Filtering.Internal.ICustomUIFilter.Group { get; }
    private string DevExpress.Utils.Filtering.Internal.ICustomUIFilter.ParentGroup { get; }
    private bool DevExpress.Utils.Filtering.Internal.ICustomUIFilter.Visible { get; }
    public ICustomUIFilterValue Value { get; }
    public object ParentViewModel { get; public set; }
    protected ICustomUIFilterSummaryItem SummaryItem { get; }
    public bool IsActive { get; }
    public CustomUIFilter(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    private static CustomUIFilter();
    protected sealed virtual int GetHash(CustomUIFilterType id);
    private static AnnotationAttributes EnsureAnnotationAttributes(CustomUIFilterType id);
    private T ReadAnnotationAttributes(Func`2<AnnotationAttributes, T> readValue);
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.ICustomUIFilter.get_Order();
    private sealed virtual override string DevExpress.Utils.Filtering.Internal.ICustomUIFilter.get_Group();
    private sealed virtual override string DevExpress.Utils.Filtering.Internal.ICustomUIFilter.get_ParentGroup();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.ICustomUIFilter.get_Visible();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.ICustomUIFilter.Allow(ICustomUIFiltersOptions userOptions);
    protected virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    public sealed virtual ICustomUIFilterValue get_Value();
    internal bool SetValueCore(ICustomUIFilterValue value);
    internal bool SetValueCore(ICustomUIFilterValue value, bool notify);
    public object get_ParentViewModel();
    public void set_ParentViewModel(object value);
    protected string GetPath();
    protected CustomUIFiltersType GetFiltersType();
    protected IMetricAttributes GetMetricAttributes();
    protected ICustomUIFilter GetActiveFilter();
    protected TAttributes GetMetricAttributes();
    protected virtual void OnValueChanged();
    protected virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    protected ICustomUIFilterSummaryItem get_SummaryItem();
    protected void ResetSummaryItem();
    protected virtual void QueryViewModelResultFromSummaryItem(ICustomUIFilterDialogViewModel viewModel, object controller);
    protected virtual ICustomUIFilterSummaryItem CreateSummaryItem();
    public sealed virtual bool get_IsActive();
    public sealed virtual void EndEdit();
    public sealed virtual Task Edit(object uiProvider);
    public sealed virtual bool Reset();
    private void ResetViewModelResult(ICustomUIFilterValue savedValue);
    private void SubscribeCustomUIFilterDialogViewModel(ICustomUIFilterDialogViewModel viewModel);
    private void UnsubscribeCustomUIFilterDialogViewModel(ICustomUIFilterDialogViewModel viewModel);
    private void CustomUIFilterDialogViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SyncValue(ICustomUIFilterDialogViewModel viewModel, PropertyChangedEventArgs e);
    private ICustomUIFilterDialogViewModel CreateCustomUIFilterDialogViewModel();
    protected virtual ICustomUIFilterValue GetCustomUIFilterDialogViewModelParameter(ICustomUIFilter activeFilter);
    private sealed virtual override CriteriaOperator DevExpress.Utils.Filtering.Internal.ICustomUIFilterValueViewModel.CreateFilterCriteria(IEndUserFilteringMetric metric);
    private sealed virtual override CriteriaOperator DevExpress.Utils.Filtering.Internal.ICustomUIFilterValueViewModel.CreateFilterCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    private CriteriaOperator CreateFilterCriteriaCore(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected abstract virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    internal static ICustomUIFilter Assign(ICustomUIFilter this, ICustomUIFilter filter);
    internal static bool TryGetValue(OperandValue value, Type type, Object& result);
    internal static object GetValue(object value, Type type);
    internal static bool TryGetValue(CriteriaOperator expression, T& value);
    protected static object CheckNullObject(ICustomUIFilterValue filterValue);
    protected static object CheckNullObject(object value);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IEndUserFilteringCriteriaAwareViewModel.TryParse(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    private bool EnsureCriteriaParser(IEndUserFilteringMetric metric);
    private bool TryParseCriteria(IEndUserFilteringMetric metric, CriteriaOperator criteria, ICustomUIFilterValue& value);
    protected virtual ICustomUIFilterValue CreateValue(Object[] values);
    protected abstract virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
    [CompilerGeneratedAttribute]
private void <SubscribeCustomUIFilterDialogViewModel>b__46_0(INotifyPropertyChanged npc);
    [CompilerGeneratedAttribute]
private void <UnsubscribeCustomUIFilterDialogViewModel>b__47_0(INotifyPropertyChanged npc);
    [CompilerGeneratedAttribute]
private CustomUIFilterDialogType <CreateCustomUIFilterDialogViewModel>b__50_0(ICustomUIFilterDialogTypesResolver resolver);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterAggregate : CustomUIFilter {
    private static Dictionary`2<CustomUIFilterType, BinaryOperatorType> map;
    public CustomUIFilterAggregate(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    private static CustomUIFilterAggregate();
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual ICustomUIFilterSummaryItem CreateSummaryItem();
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterBetween : CustomUIFilter {
    public CustomUIFilterBetween(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterBinary : CustomUIFilter {
    private static Dictionary`2<CustomUIFilterType, BinaryOperatorType> map;
    public CustomUIFilterBinary(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    private static CustomUIFilterBinary();
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterBlank : CustomUIFilter {
    public CustomUIFilterBlank(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterCustom : CustomUIFilter {
    private KeyValuePair`2[] children;
    internal CustomUIFilterCustom(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    private CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, CustomUIFilterType filterType, object value, ICustomUIFilterValuesFactory valuesFactory);
    private CriteriaOperator GetCriteriaCore(IEndUserFilteringMetric metric, CustomUIFilterType filterType, ICustomUIFilterValue value);
    internal IEnumerable`1<ICustomUIFilterValue> EnsureChildren(ICustomUIFilterValuesFactory valuesFactory);
    private static KeyValuePair`2<ICustomUIFilter, ICustomUIFilterValue> CreateChild(ICustomUIFilterValuesFactory valuesFactory, ICustomUIFilter child);
    protected sealed virtual ICustomUIFilterValue CreateValue(Object[] values);
    protected sealed virtual ICustomUIFilterValue GetCustomUIFilterDialogViewModelParameter(ICustomUIFilter activeFilter);
    protected sealed virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    private Object[] GetValues(ICustomUIFilterValue activeFilterValue);
    private IEnumerable`1<ICustomUIFilter> GetChildren();
    private IEnumerable`1<ICustomUIFilter> GetChildren(ICustomUIFilters parent);
    private static bool IsChild(ICustomUIFilter filter, CustomUIFiltersType filtersType);
    private static bool IsCompatible(ICustomUIFilter filter, CustomUIFiltersType filtersType);
    private static bool IsRangeOrBetween(ICustomUIFilter filter);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterDateFunction : CustomUIFilter {
    private static Dictionary`2<CustomUIFilterType, FunctionOperatorType> map;
    public CustomUIFilterDateFunction(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    private static CustomUIFilterDateFunction();
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    private bool IsKnownDate(ICustomUIFilterValue filterValue);
    private bool IsKnownBaseDate(ICustomUIFilterValue filterValue);
    private bool IsKnownDatePart(ICustomUIFilterValue filterValue);
    private bool IsMonth(Int32& month);
    private bool IsQuarter(Int32& startMonth);
    protected virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterDatePeriod : CustomUIFilter {
    private IEnumerable`1<ICustomUIFilterValue> children;
    public CustomUIFilterDatePeriod(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual ICustomUIFilterValue GetCustomUIFilterDialogViewModelParameter(ICustomUIFilter activeFilter);
    protected sealed virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    internal IEnumerable`1<ICustomUIFilter> GetDataPeriods();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.CustomUIFilterDatePeriod/<DataPeriods>d__8")]
internal static IEnumerable`1<ICustomUIFilter> DataPeriods(IEnumerable`1<ICustomUIFilter> children);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.CustomUIFilterDatePeriod/<ExcludeDataPeriods>d__9")]
internal static IEnumerable`1<ICustomUIFilter> ExcludeDataPeriods(IEnumerable`1<ICustomUIFilter> children);
    internal static bool AllowChildren(HashSet`1<CustomUIFilterType> blockedOptions);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterDatePeriods : CustomUIFilterPeriodsBase {
    public CustomUIFilterDatePeriods(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual IEnumerable`1<ICustomUIFilter> GetChildren();
    private static bool IsChild(string group);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
public enum DevExpress.Utils.Filtering.Internal.CustomUIFilterDialogType : Enum {
    public int value__;
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterDialogViewModel : FilterUIElement`1<CustomUIFilterDialogType> {
    private Lazy`1<IDisplayTextService> displayTextServiceCore;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomUIFiltersType <FiltersType>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomUIFilterType <FilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private ICustomUIFilterValue <Parameter>k__BackingField;
    private ICustomUIFilterValue resultCore;
    public string Path { get; private set; }
    public CustomUIFiltersType FiltersType { get; private set; }
    public CustomUIFilterType FilterType { get; private set; }
    public ICustomUIFilterValue Parameter { get; private set; }
    public ICustomUIFilterValue Result { get; public set; }
    public CustomUIFilterDialogViewModel(string path, CustomUIFilterDialogType dialogType, Func`1<IServiceProvider> getServiceProvider, CustomUIFiltersType filtersType, CustomUIFilterType filterType, ICustomUIFilterValue parameter);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual CustomUIFiltersType get_FiltersType();
    [CompilerGeneratedAttribute]
private void set_FiltersType(CustomUIFiltersType value);
    [CompilerGeneratedAttribute]
public sealed virtual CustomUIFilterType get_FilterType();
    [CompilerGeneratedAttribute]
private void set_FilterType(CustomUIFilterType value);
    [CompilerGeneratedAttribute]
public sealed virtual ICustomUIFilterValue get_Parameter();
    [CompilerGeneratedAttribute]
private void set_Parameter(ICustomUIFilterValue value);
    private IDisplayTextService CreateDisplayTextService();
    protected virtual object GetServiceCore(Type serviceType);
    protected sealed virtual int GetHash(CustomUIFilterDialogType id);
    public sealed virtual ICustomUIFilterValue get_Result();
    public sealed virtual void set_Result(ICustomUIFilterValue value);
    internal static bool AreEqualOrDefault(ICustomUIFilterValue x, ICustomUIFilterValue y);
    [CompilerGeneratedAttribute]
private IDisplayTextService <CreateDisplayTextService>b__18_0(IDisplayTextServiceFactory factory);
}
[ExtensionAttribute]
public static class DevExpress.Utils.Filtering.Internal.CustomUIFilterDialogViewModelExtension : object {
    [ExtensionAttribute]
public static void SetResult(ICustomUIFilterDialogViewModel viewModel, Object[] values);
    [ExtensionAttribute]
internal static ICustomUIFilterValue CreateValue(ICustomUIFilterDialogViewModel viewModel, CustomUIFilterType filterType, Object[] values);
}
internal static class DevExpress.Utils.Filtering.Internal.CustomUIFilterGroups : object {
    internal static string Special;
    internal static string Custom;
    internal static string Common;
    internal static string User;
    internal static string Aggregates;
    internal static string Numeric;
    internal static string DateTime;
    internal static string DateDay;
    internal static string DateWeek;
    internal static string DateMonth;
    internal static string DateQuarter;
    internal static string DateYear;
    internal static string DateYearToDate;
    internal static string Time;
    internal static string Text;
    internal static string Period;
    internal static string PeriodQuarter;
    internal static string PeriodMonth;
    internal static string DatePeriods;
    internal static string TimePeriods;
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterIsSameDay : CustomUIFilterIsSamePeriod {
    protected FunctionOperatorType FunctionOperatorTypeForPeriod { get; }
    public CustomUIFilterIsSameDay(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected virtual FunctionOperatorType get_FunctionOperatorTypeForPeriod();
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterIsSameHour : CustomUIFilterIsSamePeriod {
    protected FunctionOperatorType FunctionOperatorTypeForPeriod { get; }
    public CustomUIFilterIsSameHour(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected virtual FunctionOperatorType get_FunctionOperatorTypeForPeriod();
}
internal abstract class DevExpress.Utils.Filtering.Internal.CustomUIFilterIsSamePeriod : CustomUIFilter {
    protected FunctionOperatorType FunctionOperatorTypeForPeriod { get; }
    protected CustomUIFilterIsSamePeriod(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    protected abstract virtual FunctionOperatorType get_FunctionOperatorTypeForPeriod();
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterIsSameTime : CustomUIFilterIsSamePeriod {
    protected FunctionOperatorType FunctionOperatorTypeForPeriod { get; }
    public CustomUIFilterIsSameTime(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected virtual FunctionOperatorType get_FunctionOperatorTypeForPeriod();
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterLike : CustomUIFilter {
    public CustomUIFilterLike(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterNone : CustomUIFilter {
    internal CustomUIFilterNone(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterNull : CustomUIFilter {
    public CustomUIFilterNull(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal abstract class DevExpress.Utils.Filtering.Internal.CustomUIFilterPeriodsBase : CustomUIFilter {
    private IEnumerable`1<ICustomUIFilterValue> children;
    protected CustomUIFilterPeriodsBase(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    private CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilter filter);
    protected sealed virtual ICustomUIFilterValue CreateValue(Object[] values);
    private static CustomUIFilterType[] GetFilterTypes(Object[] values);
    protected sealed virtual ICustomUIFilterValue GetCustomUIFilterDialogViewModelParameter(ICustomUIFilter activeFilter);
    protected sealed virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    protected abstract virtual IEnumerable`1<ICustomUIFilter> GetChildren();
    internal static Object[] GetValues(IReadOnlyList`1<CustomUIFilterType> values);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterRange : CustomUIFilter {
    public CustomUIFilterRange(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    private static bool IsRange(FunctionOperator function);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("ActiveFilter={ActiveFilter}")]
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilters : FilterUIElement`1<CustomUIFiltersType> {
    private Lazy`1<ICustomUIFiltersOptions> optionsCore;
    private IEndUserFilteringMetric metricCore;
    private IMetricAttributesQuery queryCore;
    private Lazy`1<IStorage`2<CustomUIFilterType, ICustomUIFilter>> childrenCore;
    [CompilerGeneratedAttribute]
private ICustomUIFiltersOptions <UserOptions>k__BackingField;
    internal static string FilterCriteriaNotify;
    private ICustomUIFilter activeFilterCore;
    private ICustomUIFilterValue activeFilterValueCore;
    private Lazy`1<CriteriaOperator> filterCriteriaCore;
    private WeakReference parentViewModelRef;
    public IEndUserFilteringMetric Metric { get; }
    public IMetricAttributesQuery Query { get; }
    private IStorage`2<CustomUIFilterType, ICustomUIFilter> Children { get; }
    public ICustomUIFilter Item { get; }
    public IEnumerable`1<IGrouping`2<string, ICustomUIFilter>> Groups { get; }
    public ICustomUIFiltersOptions Options { get; }
    public ICustomUIFiltersOptions UserOptions { get; public set; }
    public string Name { get; }
    public string Description { get; }
    private bool IsTimeSpanRange { get; }
    private bool IsTimeOnlyRange { get; }
    private bool IsTimeSpanLookup { get; }
    private bool IsTimeOnlyLookup { get; }
    public ICustomUIFilter ActiveFilter { get; internal set; }
    public CriteriaOperator FilterCriteria { get; }
    private object ParentViewModel { get; private set; }
    public CustomUIFilters(IEndUserFilteringMetric metric, IMetricAttributesQuery query, CustomUIFiltersType filterType, Func`1<IServiceProvider> getServiceProvider);
    protected sealed virtual int GetHash(CustomUIFiltersType id);
    public sealed virtual IEndUserFilteringMetric get_Metric();
    public IMetricAttributesQuery get_Query();
    private IStorage`2<CustomUIFilterType, ICustomUIFilter> get_Children();
    public sealed virtual ICustomUIFilter get_Item(CustomUIFilterType filterType);
    public sealed virtual IEnumerable`1<IGrouping`2<string, ICustomUIFilter>> get_Groups();
    public sealed virtual ICustomUIFiltersOptions get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual ICustomUIFiltersOptions get_UserOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserOptions(ICustomUIFiltersOptions value);
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    private bool get_IsTimeSpanRange();
    private bool get_IsTimeOnlyRange();
    private bool get_IsTimeSpanLookup();
    private bool get_IsTimeOnlyLookup();
    private T GetMetricAttributes();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.ICustomUIFilters.AllowFilter(ICustomUIFilter filter);
    internal static bool IsFilterCriteriaNotify(PropertyChangedEventArgs e, String& path);
    internal static bool IsFilterCriteriaNotify(string propertyName, String& path);
    public sealed virtual ICustomUIFilter get_ActiveFilter();
    internal void set_ActiveFilter(ICustomUIFilter value);
    private ICustomUIFilter GetUserDefinedOrDefaultFilter();
    private bool IsDefaultFilterType(ICustomUIFiltersOptions userOptions);
    private ICustomUIFilter GetDefaultFilter();
    private void SetActiveFilter(ICustomUIFilter filter, ICustomUIFilterValue filterValue, bool notifyActiveFilter);
    private static ICustomUIFilterValue GetFilterValue(ICustomUIFilter value);
    private ICustomUIFiltersOptions CreateOptions();
    private void OptionsChanged(object sender, PropertyChangedEventArgs e);
    public sealed virtual bool ApplyFilterCriteria(CriteriaOperator criteria, ICustomUIFilter& filter);
    public sealed virtual bool CanReset();
    public sealed virtual void Reset();
    public sealed virtual CriteriaOperator get_FilterCriteria();
    private void ResetFilterCriteriaCore();
    private CriteriaOperator CreateFilterCriteria();
    private IStorage`2<CustomUIFilterType, ICustomUIFilter> CreateStorage();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.CustomUIFilters/<GetChildren>d__60")]
private IEnumerable`1<ICustomUIFilter> GetChildren();
    private object GetParentViewModel();
    private object get_ParentViewModel();
    private void set_ParentViewModel(object value);
    private void OnParentViewModelChanged();
    private sealed virtual override IEnumerator`1<ICustomUIFilter> System.Collections.Generic.IEnumerable<DevExpress.Utils.Filtering.Internal.ICustomUIFilter>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private bool <DevExpress.Utils.Filtering.Internal.ICustomUIFilters.AllowFilter>b__35_0(ICustomUIFilter x);
    [CompilerGeneratedAttribute]
private bool <GetUserDefinedOrDefaultFilter>b__44_0(ICustomUIFilter x);
    [CompilerGeneratedAttribute]
private bool <GetDefaultFilter>b__46_1(ICustomUIFilter x);
    [CompilerGeneratedAttribute]
private bool <GetDefaultFilter>b__46_4(ICustomUIFilter x);
    [CompilerGeneratedAttribute]
private bool <GetDefaultFilter>b__46_2(ICustomUIFilter x);
    [CompilerGeneratedAttribute]
private bool <GetDefaultFilter>b__46_3(ICustomUIFilter x);
    [CompilerGeneratedAttribute]
private ICustomUIFiltersOptions <CreateOptions>b__49_0(ICustomUIFiltersOptionsFactory factory);
    [CompilerGeneratedAttribute]
private void <CreateOptions>b__49_1(INotifyPropertyChanged optionsNPC);
    [CompilerGeneratedAttribute]
private CriteriaOperator <CreateFilterCriteria>b__58_0(ICustomUIFilterValueViewModel fvm);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterSequence : CustomUIFilter {
    private static Dictionary`2<CustomUIFilterType, SummaryItemTypeEx> map;
    private static Dictionary`2<CustomUIFilterType, SummaryItemTypeEx> percentsMap;
    public CustomUIFilterSequence(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    private static CustomUIFilterSequence();
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual ICustomUIFilterValue GetCustomUIFilterDialogViewModelParameter(ICustomUIFilter activeFilter);
    protected sealed virtual void OnValueChanged();
    protected sealed virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    protected sealed virtual ICustomUIFilterSummaryItem CreateSummaryItem();
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
    private SequenceQualifier GetSequenceQualifier();
    private SummaryItemTypeEx GetSummaryType(SequenceQualifier qualifier);
}
public class DevExpress.Utils.Filtering.Internal.CustomUIFilterSequenceDefaultArguments : object {
    public static int Count;
    private static CustomUIFilterSequenceDefaultArguments();
}
[ExtensionAttribute]
internal static class DevExpress.Utils.Filtering.Internal.CustomUIFiltersExtension : object {
    [ExtensionAttribute]
internal static void InitializeUIProperties(ICustomUIFilters filters, ICustomUIFiltersProperties properties, IServiceProvider serviceProvider);
}
public abstract class DevExpress.Utils.Filtering.Internal.CustomUIFiltersOptions : object {
    [CompilerGeneratedAttribute]
private CustomUIFilterType <DefaultFilterType>k__BackingField;
    public CustomUIFilterType DefaultFilterType { get; private set; }
    public bool AllowFilters { get; }
    public bool FilterByDisplayText { get; }
    public bool ImmediateUpdate { get; }
    public bool ShowComparisons { get; }
    public bool ShowAggregates { get; }
    public bool ShowSequences { get; }
    public bool ShowDatePeriods { get; }
    public bool ShowAdvancedDatePeriods { get; }
    public bool ShowTimePeriods { get; }
    public bool ShowBlanks { get; }
    public bool ShowNulls { get; }
    public bool ShowLikeFilters { get; }
    public bool ShowCustomFilters { get; }
    public bool ShowUserDefinedFilters { get; }
    protected CustomUIFiltersOptions(CustomUIFilterType defaultFilterType);
    [CompilerGeneratedAttribute]
public sealed virtual CustomUIFilterType get_DefaultFilterType();
    [CompilerGeneratedAttribute]
private void set_DefaultFilterType(CustomUIFilterType value);
    public virtual bool get_AllowFilters();
    public virtual bool get_FilterByDisplayText();
    public virtual bool get_ImmediateUpdate();
    public virtual bool get_ShowComparisons();
    public virtual bool get_ShowAggregates();
    public virtual bool get_ShowSequences();
    public virtual bool get_ShowDatePeriods();
    public virtual bool get_ShowAdvancedDatePeriods();
    public virtual bool get_ShowTimePeriods();
    public virtual bool get_ShowBlanks();
    public virtual bool get_ShowNulls();
    public virtual bool get_ShowLikeFilters();
    public virtual bool get_ShowCustomFilters();
    public virtual bool get_ShowUserDefinedFilters();
    public static CustomUIFilterType GetDefaultFilterType(CustomUIFiltersType filtersType, Type type);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Utils.Filtering.Internal.CustomUIFiltersSettings : object {
    private IStorage`1<ICustomUIFiltersBox> storageCore;
    public ICustomUIFilters Item { get; }
    public CustomUIFiltersSettings(IEnumerable`1<ICustomUIFiltersBox> children);
    public sealed virtual bool HasFilters(string path);
    public sealed virtual ICustomUIFilters get_Item(string path);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.ICustomUIFiltersSettings.EnsureFiltersType(string path);
    private sealed virtual override IEnumerator`1<ICustomUIFiltersBox> System.Collections.Generic.IEnumerable<DevExpress.Utils.Filtering.Internal.ICustomUIFiltersBox>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum DevExpress.Utils.Filtering.Internal.CustomUIFiltersType : Enum {
    public int value__;
    public static CustomUIFiltersType Numeric;
    public static CustomUIFiltersType DateTime;
    public static CustomUIFiltersType Text;
    public static CustomUIFiltersType Boolean;
    public static CustomUIFiltersType Enum;
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterTextFunction : CustomUIFilter {
    private static Dictionary`2<CustomUIFilterType, FunctionOperatorType> map;
    public CustomUIFilterTextFunction(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    private static CustomUIFilterTextFunction();
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    private bool NeedInversion();
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterTimeFunction : CustomUIFilter {
    private static Dictionary`2<CustomUIFilterType, FunctionOperatorType> map;
    public CustomUIFilterTimeFunction(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    private static CustomUIFilterTimeFunction();
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    private bool IsKnownTime(ICustomUIFilterValue filterValue);
    protected virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterTimePeriods : CustomUIFilterPeriodsBase {
    public CustomUIFilterTimePeriods(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual IEnumerable`1<ICustomUIFilter> GetChildren();
    private static bool IsChild(string group);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
public enum DevExpress.Utils.Filtering.Internal.CustomUIFilterType : Enum {
    public int value__;
    [DisplayAttribute]
public static CustomUIFilterType None;
    [DisplayAttribute]
public static CustomUIFilterType Custom;
    [DisplayAttribute]
public static CustomUIFilterType Equals;
    [DisplayAttribute]
public static CustomUIFilterType DoesNotEqual;
    [DisplayAttribute]
public static CustomUIFilterType Between;
    [DisplayAttribute]
public static CustomUIFilterType IsNull;
    [DisplayAttribute]
public static CustomUIFilterType IsNotNull;
    [DisplayAttribute]
public static CustomUIFilterType InRange;
    [DisplayAttribute]
public static CustomUIFilterType GreaterThan;
    [DisplayAttribute]
public static CustomUIFilterType GreaterThanOrEqualTo;
    [DisplayAttribute]
public static CustomUIFilterType LessThan;
    [DisplayAttribute]
public static CustomUIFilterType LessThanOrEqualTo;
    [DisplayAttribute]
public static CustomUIFilterType TopN;
    [DisplayAttribute]
public static CustomUIFilterType BottomN;
    [DisplayAttribute]
public static CustomUIFilterType AboveAverage;
    [DisplayAttribute]
public static CustomUIFilterType BelowAverage;
    [DisplayAttribute]
public static CustomUIFilterType BeginsWith;
    [DisplayAttribute]
public static CustomUIFilterType EndsWith;
    [DisplayAttribute]
public static CustomUIFilterType DoesNotBeginsWith;
    [DisplayAttribute]
public static CustomUIFilterType DoesNotEndsWith;
    [DisplayAttribute]
public static CustomUIFilterType Contains;
    [DisplayAttribute]
public static CustomUIFilterType DoesNotContain;
    [DisplayAttribute]
public static CustomUIFilterType IsBlank;
    [DisplayAttribute]
public static CustomUIFilterType IsNotBlank;
    [DisplayAttribute]
public static CustomUIFilterType Like;
    [DisplayAttribute]
public static CustomUIFilterType NotLike;
    [DisplayAttribute]
public static CustomUIFilterType InDateRange;
    [DisplayAttribute]
public static CustomUIFilterType Before;
    [DisplayAttribute]
public static CustomUIFilterType After;
    [DisplayAttribute]
public static CustomUIFilterType Yesterday;
    [DisplayAttribute]
public static CustomUIFilterType Today;
    [DisplayAttribute]
public static CustomUIFilterType Tomorrow;
    [DisplayAttribute]
public static CustomUIFilterType LastWeek;
    [DisplayAttribute]
public static CustomUIFilterType ThisWeek;
    [DisplayAttribute]
public static CustomUIFilterType NextWeek;
    [DisplayAttribute]
public static CustomUIFilterType LastMonth;
    [DisplayAttribute]
public static CustomUIFilterType ThisMonth;
    [DisplayAttribute]
public static CustomUIFilterType NextMonth;
    [DisplayAttribute]
public static CustomUIFilterType LastQuarter;
    [DisplayAttribute]
public static CustomUIFilterType ThisQuarter;
    [DisplayAttribute]
public static CustomUIFilterType NextQuarter;
    [DisplayAttribute]
public static CustomUIFilterType LastYear;
    [DisplayAttribute]
public static CustomUIFilterType ThisYear;
    [DisplayAttribute]
public static CustomUIFilterType NextYear;
    [DisplayAttribute]
public static CustomUIFilterType YearToDate;
    [DisplayAttribute]
public static CustomUIFilterType AllDatesInThePeriod;
    [DisplayAttribute]
public static CustomUIFilterType Quarter1;
    [DisplayAttribute]
public static CustomUIFilterType Quarter2;
    [DisplayAttribute]
public static CustomUIFilterType Quarter3;
    [DisplayAttribute]
public static CustomUIFilterType Quarter4;
    [DisplayAttribute]
public static CustomUIFilterType January;
    [DisplayAttribute]
public static CustomUIFilterType February;
    [DisplayAttribute]
public static CustomUIFilterType March;
    [DisplayAttribute]
public static CustomUIFilterType April;
    [DisplayAttribute]
public static CustomUIFilterType May;
    [DisplayAttribute]
public static CustomUIFilterType June;
    [DisplayAttribute]
public static CustomUIFilterType July;
    [DisplayAttribute]
public static CustomUIFilterType August;
    [DisplayAttribute]
public static CustomUIFilterType September;
    [DisplayAttribute]
public static CustomUIFilterType October;
    [DisplayAttribute]
public static CustomUIFilterType November;
    [DisplayAttribute]
public static CustomUIFilterType December;
    [DisplayAttribute]
public static CustomUIFilterType BeforeMidday;
    [DisplayAttribute]
public static CustomUIFilterType AfterMidday;
    [DisplayAttribute]
public static CustomUIFilterType LastHour;
    [DisplayAttribute]
public static CustomUIFilterType ThisHour;
    [DisplayAttribute]
public static CustomUIFilterType NextHour;
    [DisplayAttribute]
public static CustomUIFilterType Night;
    [DisplayAttribute]
public static CustomUIFilterType Morning;
    [DisplayAttribute]
public static CustomUIFilterType Afternoon;
    [DisplayAttribute]
public static CustomUIFilterType Evening;
    [DisplayAttribute]
public static CustomUIFilterType WorkTime;
    [DisplayAttribute]
public static CustomUIFilterType LunchTime;
    [DisplayAttribute]
public static CustomUIFilterType FreeTime;
    [DisplayAttribute]
public static CustomUIFilterType DatePeriods;
    [DisplayAttribute]
public static CustomUIFilterType IsSameDay;
    [DisplayAttribute]
public static CustomUIFilterType TimePeriods;
    [DisplayAttribute]
public static CustomUIFilterType IsSameHour;
    [DisplayAttribute]
public static CustomUIFilterType IsSameTime;
    [DisplayAttribute]
public static CustomUIFilterType User;
}
internal class DevExpress.Utils.Filtering.Internal.CustomUIFilterUserDefined : CustomUIFilter {
    private IEnumerable`1<IUserDefinedFilterItem> filterItems;
    private IEnumerable`1<ICustomUIFilterValue> children;
    private bool HasFilterItems { get; }
    internal CustomUIFilterUserDefined(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
    internal static bool Match(CustomUIFilterType filterType);
    private bool get_HasFilterItems();
    protected sealed virtual bool AllowCore(ICustomUIFiltersOptions userOptions);
    protected sealed virtual CriteriaOperator GetCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue filterValue);
    internal void SetFilterItems(IEnumerable`1<IUserDefinedFilterItem> filterItems, string path, Type type, IEnumerable`1<string> customFunctions);
    private IUserDefinedFilterItem[] GetCustomFunctions(string path, Type type, IEnumerable`1<string> customFunctions);
    protected sealed virtual ICustomUIFilterValue CreateValue(Object[] values);
    protected sealed virtual ICustomUIFilterValue GetCustomUIFilterDialogViewModelParameter(ICustomUIFilter activeFilter);
    protected sealed virtual void QueryViewModelResult(ICustomUIFilterDialogViewModel viewModel);
    protected sealed virtual ICustomUIFilterCriteriaParser CreateCriteriaParser(IEndUserFilteringMetric metric);
}
[ExtensionAttribute]
public static class DevExpress.Utils.Filtering.Internal.CustomUIFilterValueExtension : object {
    [ExtensionAttribute]
public static bool IsKnownValue(ICustomUIFilterValue value);
    [ExtensionAttribute]
internal static void SetValue(ICustomUIFilter filter, Object[] values);
}
internal static class DevExpress.Utils.Filtering.Internal.DataAnnotationAttributeBuilderHelper : object {
    private static Object[] constructorArgs;
    private static DataAnnotationAttributeBuilderHelper();
    internal static void CheckDataAnnotations_ConditionallyAPTCAIssue();
    internal static CustomAttributeBuilder Build(ConstructorInfo attributeCtor, Object[] values);
    internal static CustomAttributeBuilder Build(ConstructorInfo attributeCtor, PropertyInfo[] attributeProperties, Object[] values);
    private static void BuildAttributeArgs(PropertyInfo[] attributeProperties, Object[] values, PropertyInfo[]& properties, Object[]& attributeValues);
}
public class DevExpress.Utils.Filtering.Internal.DataClientFilteringUIServiceProvider : FilteringUIServiceProviderBase {
    protected virtual IEndUserFilteringSettingsFactory GetEndUserFilteringSettingsFactory();
    protected virtual IMetricAttributesQueryFactory GetMetricAttributesQueryFactory();
}
public abstract class DevExpress.Utils.Filtering.Internal.DataClientFilteringUIViewModelProvider : FilteringUIViewModelProviderBase {
    private Dictionary`2<string, Object[]> uniqueValuesCache;
    private Type DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.SourceType { get; private set; }
    private IEnumerable`1<IEndUserFilteringMetricAttributes> DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.Attributes { get; private set; }
    private Type DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.ViewModelBaseType { get; private set; }
    private object DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.ParentViewModel { get; private set; }
    private IViewModelProvider DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.ParentViewModelProvider { get; private set; }
    protected DataClientFilteringUIViewModelProvider(IServiceProvider serviceProvider);
    private sealed virtual override Type DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.get_SourceType();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.set_SourceType(Type value);
    private sealed virtual override IEnumerable`1<IEndUserFilteringMetricAttributes> DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.get_Attributes();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.set_Attributes(IEnumerable`1<IEndUserFilteringMetricAttributes> value);
    private sealed virtual override Type DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.get_ViewModelBaseType();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.set_ViewModelBaseType(Type value);
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.get_ParentViewModel();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.set_ParentViewModel(object value);
    private sealed virtual override IViewModelProvider DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.get_ParentViewModelProvider();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.set_ParentViewModelProvider(IViewModelProvider value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.UpdateMemberBindings(string path);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.RetrieveFields(Action`1<Type> retrieveFields, Type sourceType, IEnumerable`1<IEndUserFilteringMetricAttributes> attributes, Type viewModelBaseType);
    protected internal void Initialize(string path, Object[] uniqueValues);
    protected void CheckUniqueValues(string path, object uniqueValues);
    protected sealed virtual void RaiseLookupMetricAttributesQuery(QueryLookupDataEventArgs e);
    protected sealed virtual void RaiseRangeMetricAttributesQuery(QueryRangeDataEventArgs e);
    protected sealed virtual void RaiseBooleanChoiceMetricAttributesQuery(QueryBooleanChoiceDataEventArgs e);
    protected sealed virtual void RaiseEnumChoiceMetricAttributesQuery(QueryEnumChoiceDataEventArgs e);
    protected sealed virtual void RaiseGroupMetricAttributesQuery(QueryGroupDataEventArgs e);
    protected virtual IDisplayTemplatesCustomizationServiceFactory GetDisplayTemplatesCustomizationServiceFactory();
}
internal static class DevExpress.Utils.Filtering.Internal.DataTypeAttributeBuilder : object {
    private static bool IsConditionallyAPTCAIssueThreat;
    private static ConstructorInfo attributeCtor;
    private static DataTypeAttributeBuilder();
    internal static CustomAttributeBuilder Build(IEndUserFilteringMetric metric);
    private static CustomAttributeBuilder BuildCore(IEndUserFilteringMetric metric);
}
public class DevExpress.Utils.Filtering.Internal.DateHash : ValueType {
    public static DateHash Empty;
    public static DateHash All;
    public static DateHash NotLoaded;
    private static int DAY_MASK;
    private static int MONTH_MASK;
    private static int YEAR_MASK;
    private static int ORIGIN_MASK;
    private static int YEAR_ORIGIN_MASK;
    private static int MONTH_ORIGIN_MASK;
    private static int HASH_MASK;
    private int value;
    [BrowsableAttribute("False")]
public int Year { get; }
    [BrowsableAttribute("False")]
public int Month { get; }
    [BrowsableAttribute("False")]
public int Day { get; }
    [BrowsableAttribute("False")]
public bool IsDay { get; }
    [BrowsableAttribute("False")]
public bool IsMonth { get; }
    [BrowsableAttribute("False")]
public bool IsYear { get; }
    [BrowsableAttribute("False")]
public bool IsExpandable { get; }
    [BrowsableAttribute("False")]
public bool IsOrigin { get; }
    [BrowsableAttribute("False")]
public bool IsMonthOrigin { get; }
    [BrowsableAttribute("False")]
public bool IsYearOrigin { get; }
    [BrowsableAttribute("False")]
public int ExpandLevel { get; }
    [BrowsableAttribute("False")]
public string SearchMember { get; }
    internal Object[] Path { get; }
    internal int YearKey { get; }
    internal int MonthKey { get; }
    internal int ParentKey { get; }
    internal int GroupKey { get; }
    private DateHash(Kind kind);
    internal DateHash(int year);
    internal DateHash(int year, int month);
    internal DateHash(int year, int month, int day);
    internal DateHash(int year, int month, int day, int origin);
    private static DateHash();
    public sealed virtual bool Equals(DateHash node);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public bool get_IsDay();
    public bool get_IsMonth();
    public bool get_IsYear();
    public bool get_IsExpandable();
    public bool get_IsOrigin();
    public bool get_IsMonthOrigin();
    public bool get_IsYearOrigin();
    public int get_ExpandLevel();
    public string get_SearchMember();
    internal string GetText(DateTimeHashTreeIndices indices);
    internal string GetText(DateOnlyHashTreeIndices indices);
    private string GetTextCore(DateHashTreeIndicesBase`1<TDate> indices);
    internal string GetText(DateHashTreeIndicesBase`1<TDate> indices, int level);
    public virtual string ToString();
    internal Object[] get_Path();
    internal int get_YearKey();
    internal int get_MonthKey();
    internal int DayKey(Int32& monthKey);
    internal int get_ParentKey();
    internal int get_GroupKey();
    internal bool TryGetInterval(Interval`1& interval);
    internal bool TryGetInterval(Interval`1& interval);
    internal bool Match(Interval`1<DateTime> range);
    internal bool Match(Interval`1<DateOnly> range);
    internal bool Match(IReadOnlyCollection`1<Interval`1<DateTime>> intervals);
    internal bool Match(IReadOnlyCollection`1<Interval`1<DateOnly>> intervals);
    internal DateTime GetDateTime();
    internal DateOnly GetDateOnly();
}
internal abstract class DevExpress.Utils.Filtering.Internal.DateHashTreeIndicesBase`1 : IntervalsHashTreeIndices`2<TDate, DateHash> {
    private static int YEAR;
    private static int MONTH;
    internal String[] monthStrings;
    internal String[] dayStrings;
    internal Dictionary`2<int, string> yearStrings;
    private bool isRangeSelector;
    protected static Interval`1[] EmptyRangeIntervals;
    private int expandState;
    private static Interval`1<int> EmptyRange;
    internal static object rangeChanged;
    protected bool IsAllDatesRange { get; }
    private bool AreYearsExpanded { get; }
    private bool AreMonthsExpanded { get; }
    protected DateHashTreeIndicesBase`1(Object[] values, bool rootVisible, EventHandlerList events, bool isRangeSelector);
    private static DateHashTreeIndicesBase`1();
    protected virtual void Initialize();
    private void InitializeMonthAndDayStings();
    private void InitializeYearStrings();
    protected sealed virtual int GroupKey(DateHash hash);
    protected sealed virtual int ParentKey(DateHash hash);
    protected sealed virtual int ValueKey(DateHash hash, Int32& key);
    protected sealed virtual Object[] Path(DateHash hash);
    protected sealed virtual string Text(DateHash hash, int level);
    protected sealed virtual void BeforeUpdate();
    protected sealed virtual void AfterUpdate();
    protected sealed virtual void Update(Object[] values, bool isRangeSelector);
    protected sealed virtual void AddNodes(Object[] values, bool rootVisible);
    private bool SkipExistingNode(int index, DateHash dayHash);
    protected abstract virtual int GetYear(TDate date);
    protected abstract virtual int GetMonth(TDate date);
    protected abstract virtual int GetDay(TDate date);
    private sealed virtual override TDate DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree<TDate>.GetDate(int index);
    private sealed virtual override IReadOnlyCollection`1<Interval`1<TDate>> DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree<TDate>.GetRangeIntervals();
    protected abstract virtual bool get_IsAllDatesRange();
    protected abstract virtual Interval`1[] GetCurrentRangeIntervals();
    protected abstract virtual TDate GetDateCore(int index);
    private bool get_AreYearsExpanded();
    private bool get_AreMonthsExpanded();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree.ExpandYears();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree.ExpandMonths();
    private sealed virtual override Interval`1<int> DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree.GetRange();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree.SelectRange(int startIndex, int endIndex);
    protected abstract virtual void SelectRangeCore(int hashStartIndex, int hashEndIndex);
    protected sealed virtual bool ResetCore();
    protected abstract virtual bool ResetRangeCore();
    protected sealed virtual bool GetIsVisible(Entry entry, int index);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree.add_RangeChanged(EventHandler value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree.remove_RangeChanged(EventHandler value);
    protected void RaiseRangeChanged();
}
[EditorBrowsableAttribute("1")]
public abstract class DevExpress.Utils.Filtering.Internal.DateInterval : Interval`1<DateTime> {
    private static DateTime MaxIntervalBegin;
    public static Interval`1<DateTime> Empty { get; }
    public static Interval`1<DateTime> AllDates { get; }
    protected DateInterval(Nullable`1<DateTime> begin, Nullable`1<DateTime> end);
    protected DateInterval(int year, Nullable`1<int> month, Nullable`1<int> day);
    private static DateInterval();
    internal static object GetDate(object value);
    protected static CriteriaOperator GetIsSameDay(string path, DateTime date, int daysCount);
    internal static CriteriaOperator GetIsSameDay(string path, IEnumerable`1<DayInterval> intervals);
    protected internal sealed virtual bool Contains(Interval`1<DateTime> dateInterval);
    protected internal sealed virtual bool CanMerge(Interval`1<DateTime> interval);
    protected sealed virtual CriteriaOperator GetBinaryCriteria(string path, Nullable`1<DateTime> value, BinaryOperatorType operatorType);
    internal static bool Contains(Interval`1<DateTime> interval, DateInterval dateInterval);
    internal static Interval`1<T> Range(Nullable`1<T> from, Nullable`1<T> to, bool exclusiveBegin, bool exclusiveEnd);
    private static Nullable`1<DateTime> CheckMinValue(Nullable`1<T> from, bool exclusive);
    private static Nullable`1<DateTime> CheckMaxValue(Nullable`1<T> to, bool exclusive);
    protected internal bool IsSameDayFilter(Int32& daysCount);
    protected static DateTime GetNextIntervalBegin(Nullable`1<DateTime> value);
    public static Interval`1<DateTime> get_Empty();
    public static Interval`1<DateTime> get_AllDates();
}
internal class DevExpress.Utils.Filtering.Internal.DateIntervalMerged : DateInterval {
    private DateIntervalMerged(Nullable`1<DateTime> begin, Nullable`1<DateTime> end);
    protected sealed virtual CriteriaOperator GetRangeCriteria(string path, CriteriaOperator fromCriteria, CriteriaOperator toCriteria);
    internal static Interval`1<T> Create(Nullable`1<T> begin, Nullable`1<T> end);
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Filtering.Internal.DateIntervalOptions : object {
    internal static int GetIsSameDayFilterThreshold();
    internal static bool UseIsSameDayFilter();
}
[EditorBrowsableAttribute("1")]
public abstract class DevExpress.Utils.Filtering.Internal.DateIntervalsValueBox`1 : RangeValueBox`1<TDate> {
    private EventHandlerList Events;
    private EventHandler HashTreeCheckedChanged;
    private EventHandler HashTreeRangeChanged;
    private IDateIntervalsHashTree`1<TDate> hashTreeIndices;
    [BrowsableAttribute("False")]
protected bool IsRangeSelector { get; }
    public IDateIntervalsHashTree`1<TDate> HashTree { get; }
    private IDateIntervalsHashTree DevExpress.Utils.Filtering.Internal.IDatesTreeViewModel.HashTree { get; }
    protected bool get_IsRangeSelector();
    public sealed virtual IDateIntervalsHashTree`1<TDate> get_HashTree();
    private sealed virtual override IDateIntervalsHashTree DevExpress.Utils.Filtering.Internal.IDatesTreeViewModel.get_HashTree();
    protected virtual void ResetCore();
    protected virtual void OnInitialized();
    protected virtual void OnReleasing();
    protected virtual void OnUniqueValuesChanged();
    private void InitializeHashTree();
    private void EnsureDatesOrderWhenSortedByDisplayText(Object[] dates);
    protected abstract virtual IDateIntervalsHashTree`1<TDate> CreateHashTreeIndices(Object[] dates, EventHandlerList events);
    protected abstract virtual void SortDates(Object[] dates);
    protected abstract virtual void UpdateHashTree(Object[] dates, Interval`1[] intervals, Interval`1<TDate> range);
    protected abstract virtual void OnHashTreeCheckedChanged(object sender, EventArgs e);
    protected abstract virtual void OnHashTreeRangeChanged(object sender, EventArgs e);
    protected sealed virtual void BeforeParseCore(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected sealed virtual bool AfterParseCore(IEndUserFilteringMetric metric, bool result);
    [CompilerGeneratedAttribute]
private void <AfterParseCore>b__23_0(IDateIntervalsHashTree`1<TDate> x);
    [CompilerGeneratedAttribute]
private void <AfterParseCore>b__23_1(IDateIntervalsHashTree`1<TDate> x);
}
[DebuggerDisplayAttribute("Day:{Begin.Value.ToShortDateString(),nq}")]
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.DateOnlyDayInterval : DateOnlyInterval {
    public DateOnlyDayInterval(DateOnly date);
    public DateOnlyDayInterval(int year, int month, int day);
}
internal class DevExpress.Utils.Filtering.Internal.DateOnlyHashTreeIndices : DateHashTreeIndicesBase`1<DateOnly> {
    internal static Interval`1[] AllDates;
    private Interval`1<DateOnly> range;
    protected bool IsAllDatesRange { get; }
    protected Interval`1[] AllIntervals { get; }
    public DateOnlyHashTreeIndices(Object[] values, bool rootVisible, EventHandlerList events, bool isRangeSelector);
    private static DateOnlyHashTreeIndices();
    protected sealed virtual string Text(DateHash hash);
    protected sealed virtual int GetYear(DateOnly date);
    protected sealed virtual int GetMonth(DateOnly date);
    protected sealed virtual int GetDay(DateOnly date);
    protected sealed virtual IIntervalsChecks<DateOnly, DateHash> CreateIntervalsChecks();
    protected sealed virtual bool get_IsAllDatesRange();
    protected sealed virtual Interval`1[] get_AllIntervals();
    protected sealed virtual bool TryGetInterval(DateHash hash, Interval`1& interval);
    protected sealed virtual bool Match(DateHash hash, Interval`1<DateOnly> range);
    protected sealed virtual bool Match(DateHash hash, IReadOnlyCollection`1<Interval`1<DateOnly>> intervals);
    protected virtual DateOnly GetDateCore(int index);
    protected sealed virtual Interval`1[] GetCurrentRangeIntervals();
    protected sealed virtual void SelectRangeCore(int hashStartIndex, int hashEndIndex);
    protected sealed virtual bool ResetRangeCore();
    private Interval`1<DateOnly> GetRange(int startIndex, int endIndex);
}
[EditorBrowsableAttribute("1")]
public abstract class DevExpress.Utils.Filtering.Internal.DateOnlyInterval : Interval`1<DateOnly> {
    private static DateOnly MaxIntervalBegin;
    public static Interval`1<DateOnly> Empty { get; }
    public static Interval`1<DateOnly> AllDates { get; }
    protected DateOnlyInterval(Nullable`1<DateOnly> begin, Nullable`1<DateOnly> end);
    protected DateOnlyInterval(int year, Nullable`1<int> month, Nullable`1<int> day);
    private static DateOnlyInterval();
    protected static CriteriaOperator GetIsSameDay(string path, DateOnly date, int daysCount);
    internal static CriteriaOperator GetIsSameDay(string path, IEnumerable`1<DateOnlyDayInterval> intervals);
    protected internal sealed virtual bool Contains(Interval`1<DateOnly> dateInterval);
    protected internal sealed virtual bool CanMerge(Interval`1<DateOnly> interval);
    protected sealed virtual CriteriaOperator GetBinaryCriteria(string path, Nullable`1<DateOnly> value, BinaryOperatorType operatorType);
    internal static bool Contains(Interval`1<DateOnly> interval, DateOnlyInterval dateInterval);
    internal static Interval`1<T> Range(Nullable`1<T> from, Nullable`1<T> to, bool exclusiveBegin, bool exclusiveEnd);
    internal static Nullable`1<DateOnly> CheckMinValue(Nullable`1<T> from, bool exclusive);
    internal static Nullable`1<DateOnly> CheckMaxValue(Nullable`1<T> to, bool exclusive);
    protected internal bool IsSameDayFilter(Int32& daysCount);
    protected static DateOnly GetNextIntervalBegin(Nullable`1<DateOnly> value);
    public static Interval`1<DateOnly> get_Empty();
    public static Interval`1<DateOnly> get_AllDates();
}
internal class DevExpress.Utils.Filtering.Internal.DateOnlyIntervalMerged : DateOnlyInterval {
    private DateOnlyIntervalMerged(Nullable`1<DateOnly> begin, Nullable`1<DateOnly> end);
    protected sealed virtual CriteriaOperator GetRangeCriteria(string path, CriteriaOperator fromCriteria, CriteriaOperator toCriteria);
    internal static Interval`1<T> Create(Nullable`1<T> begin, Nullable`1<T> end);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.DateOnlyIntervalsValueBox : DateIntervalsValueBox`1<DateOnly> {
    protected virtual IDateIntervalsHashTree`1<DateOnly> CreateHashTreeIndices(Object[] dates, EventHandlerList events);
    protected sealed virtual void SortDates(Object[] dates);
    protected sealed virtual void UpdateHashTree(Object[] dates, Interval`1[] intervals, Interval`1<DateOnly> range);
    protected sealed virtual void OnHashTreeCheckedChanged(object sender, EventArgs e);
    protected sealed virtual void OnHashTreeRangeChanged(object sender, EventArgs e);
    protected sealed virtual void SetIsNull();
}
[DebuggerDisplayAttribute("Month:{Begin.Value.ToShortDateString(),nq}")]
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.DateOnlyMonthInterval : DateOnlyInterval {
    public DateOnlyMonthInterval(DateOnly date);
    public DateOnlyMonthInterval(int year, int month);
}
[DebuggerDisplayAttribute("{Begin.Value.ToShortDateString(),nq}-{End.Value.ToShortDateString(),nq}")]
internal class DevExpress.Utils.Filtering.Internal.DateOnlyRangeInterval : DateOnlyInterval {
    internal DateOnlyRangeInterval(Nullable`1<DateOnly> begin, Nullable`1<DateOnly> end);
    protected sealed virtual CriteriaOperator GetRangeCriteria(string path, CriteriaOperator fromCriteria, CriteriaOperator toCriteria);
}
[DebuggerDisplayAttribute("Year:{Begin.Value.ToShortDateString(),nq}")]
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.DateOnlyYearInterval : DateOnlyInterval {
    public DateOnlyYearInterval(DateOnly date);
    public DateOnlyYearInterval(int year);
}
[DebuggerDisplayAttribute("{Begin.Value.ToShortDateString(),nq}-{End.Value.ToShortDateString(),nq}")]
internal class DevExpress.Utils.Filtering.Internal.DateRangeInterval : DateInterval {
    internal DateRangeInterval(Nullable`1<DateTime> begin, Nullable`1<DateTime> end);
    protected sealed virtual CriteriaOperator GetRangeCriteria(string path, CriteriaOperator fromCriteria, CriteriaOperator toCriteria);
}
internal class DevExpress.Utils.Filtering.Internal.DateTimeHashTreeIndices : DateHashTreeIndicesBase`1<DateTime> {
    internal static Interval`1[] AllDates;
    private Interval`1<DateTime> range;
    protected bool IsAllDatesRange { get; }
    protected Interval`1[] AllIntervals { get; }
    public DateTimeHashTreeIndices(Object[] values, bool rootVisible, EventHandlerList events, bool isRangeSelector);
    private static DateTimeHashTreeIndices();
    protected sealed virtual string Text(DateHash hash);
    protected sealed virtual int GetYear(DateTime date);
    protected sealed virtual int GetMonth(DateTime date);
    protected sealed virtual int GetDay(DateTime date);
    protected sealed virtual IIntervalsChecks<DateTime, DateHash> CreateIntervalsChecks();
    protected sealed virtual bool get_IsAllDatesRange();
    protected sealed virtual Interval`1[] get_AllIntervals();
    protected sealed virtual bool TryGetInterval(DateHash hash, Interval`1& interval);
    protected sealed virtual bool Match(DateHash hash, Interval`1<DateTime> range);
    protected sealed virtual bool Match(DateHash hash, IReadOnlyCollection`1<Interval`1<DateTime>> intervals);
    protected virtual DateTime GetDateCore(int index);
    protected sealed virtual Interval`1[] GetCurrentRangeIntervals();
    protected sealed virtual void SelectRangeCore(int hashStartIndex, int hashEndIndex);
    protected sealed virtual bool ResetRangeCore();
    private Interval`1<DateTime> GetRange(int startIndex, int endIndex);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.DateTimeIntervalsValueBox : DateIntervalsValueBox`1<DateTime> {
    protected sealed virtual IDateIntervalsHashTree`1<DateTime> CreateHashTreeIndices(Object[] dates, EventHandlerList events);
    protected sealed virtual void SortDates(Object[] dates);
    protected sealed virtual void UpdateHashTree(Object[] dates, Interval`1[] intervals, Interval`1<DateTime> range);
    protected sealed virtual void OnHashTreeCheckedChanged(object sender, EventArgs e);
    protected sealed virtual void OnHashTreeRangeChanged(object sender, EventArgs e);
    protected sealed virtual void SetIsNull();
}
[DebuggerDisplayAttribute("Day:{Begin.Value.ToShortDateString(),nq}")]
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.DayInterval : DateInterval {
    public DayInterval(DateTime date);
    public DayInterval(int year, int month, int day);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.DaysInterval : DurationInterval {
    public DaysInterval(TimeSpan duration);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomFunctionsQueryFactory : object {
    internal static ICustomFunctionsQueryFactory Instance;
    private static DefaultCustomFunctionsQueryFactory();
    private sealed virtual override CustomFunctionEventArgs DevExpress.Utils.Filtering.Internal.ICustomFunctionsQueryFactory.Create(ICustomUIFilters filters);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIDateFiltersOptions : CustomUIFiltersOptions {
    internal static ICustomUIFiltersOptions Instance;
    private static DefaultCustomUIDateFiltersOptions();
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIDateTimeOffsetFiltersOptions : CustomUIFiltersOptions {
    internal static ICustomUIFiltersOptions Instance;
    private static DefaultCustomUIDateTimeOffsetFiltersOptions();
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIFilterDialogTypesResolver : object {
    internal static ICustomUIFilterDialogTypesResolver Instance;
    private static DefaultCustomUIFilterDialogTypesResolver();
    private sealed virtual override CustomUIFilterDialogType DevExpress.Utils.Filtering.Internal.ICustomUIFilterDialogTypesResolver.Resolve(CustomUIFilterType filterType);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIFilterFactory : object {
    internal static ICustomUIFilterFactory Instance;
    private static MatchCase[] matches;
    private static DefaultCustomUIFilterFactory();
    private sealed virtual override ICustomUIFilter DevExpress.Utils.Filtering.Internal.ICustomUIFilterFactory.Create(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIFiltersFactory : object {
    internal static ICustomUIFiltersFactory Instance;
    private static DefaultCustomUIFiltersFactory();
    private sealed virtual override ICustomUIFilters DevExpress.Utils.Filtering.Internal.ICustomUIFiltersFactory.Create(IEndUserFilteringMetric metric, IMetricAttributesQuery query, Func`1<IServiceProvider> getServiceProvider);
    private static CustomUIFiltersType GetDefaultGroupFilterType(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIFiltersOptions : CustomUIFiltersOptions {
    internal static ICustomUIFiltersOptions Instance;
    private static DefaultCustomUIFiltersOptions();
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIFiltersOptionsFactory : object {
    internal static ICustomUIFiltersOptionsFactory Instance;
    private static DefaultCustomUIFiltersOptionsFactory();
    private sealed virtual override ICustomUIFiltersOptions DevExpress.Utils.Filtering.Internal.ICustomUIFiltersOptionsFactory.Create(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIFiltersPropertiesFactory : object {
    public static ICustomUIFiltersPropertiesFactory Instance;
    private static DefaultCustomUIFiltersPropertiesFactory();
    public sealed virtual ICustomUIFiltersProperties Create(ICustomUIFilters filters);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIFilterTypesResolver : object {
    internal static ICustomUIFilterTypesResolver Instance;
    private static DefaultCustomUIFilterTypesResolver();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.DefaultCustomUIFilterTypesResolver/<DevExpress-Utils-Filtering-Internal-ICustomUIFilterTypesResolver-Resolve>d__2")]
private sealed virtual override IEnumerable`1<CustomUIFilterType> DevExpress.Utils.Filtering.Internal.ICustomUIFilterTypesResolver.Resolve(IEndUserFilteringMetric metric, CustomUIFiltersType filtersType, ICustomUIFiltersOptions options);
    private static bool IsRange(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUIFilterValuesFactory : object {
    internal static ICustomUIFilterValuesFactory Instance;
    private static DefaultCustomUIFilterValuesFactory();
    private sealed virtual override ICustomUIFilterValue DevExpress.Utils.Filtering.Internal.ICustomUIFilterValuesFactory.Create(CustomUIFilterType filterType, Object[] values);
    private static object ValueOrKnown(Object[] values, KnownValues defaultValue);
    private static object ValuesOrKnown(Object[] values, KnownValues defaultValue);
    private static object GetValue(Object[] values, object defaultValue);
    private static object GetValues(Object[] values, object defaultValue);
    private static IEnumerable`1<ICustomUIFilterValue> GetChildren(Object[] values);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUITextFiltersOptions : CustomUIFiltersOptions {
    internal static ICustomUIFiltersOptions Instance;
    private static DefaultCustomUITextFiltersOptions();
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUITimeFiltersOptions : CustomUIFiltersOptions {
    internal static ICustomUIFiltersOptions Instance;
    private static DefaultCustomUITimeFiltersOptions();
}
internal class DevExpress.Utils.Filtering.Internal.DefaultCustomUITimeOnlyFiltersOptions : CustomUIFiltersOptions {
    internal static ICustomUIFiltersOptions Instance;
    private static DefaultCustomUITimeOnlyFiltersOptions();
}
internal class DevExpress.Utils.Filtering.Internal.DefaultDisplayTemplatesCustomizationServiceFactory : object {
    internal static IDisplayTemplatesCustomizationServiceFactory Instance;
    private static DefaultDisplayTemplatesCustomizationServiceFactory();
    private sealed virtual override IDisplayTemplatesCustomizationService DevExpress.Utils.Filtering.Internal.IDisplayTemplatesCustomizationServiceFactory.Create(string path);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultDisplayTemplatesServiceFactory : object {
    internal static IDisplayTemplatesServiceFactory Instance;
    private static DefaultDisplayTemplatesServiceFactory();
    private sealed virtual override IDisplayTemplatesService DevExpress.Utils.Filtering.Internal.IDisplayTemplatesServiceFactory.Create(string path);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultDisplayTextServiceFactory : object {
    internal static IDisplayTextServiceFactory Instance;
    private static DefaultDisplayTextServiceFactory();
    internal static bool IsNullOrDefault(IDisplayTextService service);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IDisplayTextServiceFactory.TryCreate(string path, IDisplayTextService& service);
    private sealed virtual override IDisplayTextService DevExpress.Utils.Filtering.Internal.IDisplayTextServiceFactory.Create(string path);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultEndUserFilteringMetricAttributesFactory : object {
    internal static IEndUserFilteringMetricAttributesFactory Instance;
    private static DefaultEndUserFilteringMetricAttributesFactory();
    private sealed virtual override IEndUserFilteringMetricAttributes DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricAttributesFactory.Create(string path, Type type, Attribute[] attributes);
    private sealed virtual override IEndUserFilteringMetricAttributes DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricAttributesFactory.Create(string path, Type type, AnnotationAttributes attributes);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultEndUserFilteringMetricViewModelFactory : object {
    internal static IEndUserFilteringMetricViewModelFactory Instance;
    private static DefaultEndUserFilteringMetricViewModelFactory();
    public sealed virtual IEndUserFilteringMetricViewModel Create(IEndUserFilteringMetric metric, IEndUserFilteringMetricViewModelValueBox valueBox);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultEndUserFilteringSettingsFactory : EndUserFilteringSettingsFactory {
    internal static IEndUserFilteringSettingsFactory Instance;
    private static DefaultEndUserFilteringSettingsFactory();
    protected sealed virtual IEndUserFilteringSettings Create(IEndUserFilteringMetadataProvider type, IEndUserFilteringMetadataProvider customAttributes);
    protected sealed virtual IEndUserFilteringMetadataProvider CreateCustomAttributesMetadataProvider(IEnumerable`1<IEndUserFilteringMetricAttributes> customAttributes);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultEndUserFilteringViewModelDataContext : object {
    internal static IEndUserFilteringViewModelDataContext Instance;
    private static DefaultEndUserFilteringViewModelDataContext();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelDataContext.Initialize(string path);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelDataContext.DataBind(string path);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelDataContext.Complete(string path);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultEndUserFilteringViewModelTypeBuilder : object {
    internal static IEndUserFilteringViewModelTypeBuilder Instance;
    private ConcurrentDictionary`2<int, Type> typesCache;
    internal static string FilteringViewModel;
    private static OpCode[] args;
    private Dictionary`2<Type, IList`1<FieldInfo>> backingFields;
    private Dictionary`2<Type, IList`1<ConstructorInfo>> backingFieldConstructors;
    private static MethodInfo getItemMethodInfo;
    private static MethodInfo getValueMethodInfo;
    private static string Error_ValuesFieldNotFound;
    private static string Error_PropertyShouldMatchPropertyType;
    private static string Error_NestedPropertyShouldMatchNestedType;
    private static DefaultEndUserFilteringViewModelTypeBuilder();
    private sealed virtual override Type DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelTypeBuilder.Create(Type baseType, IEndUserFilteringViewModelProperties properties, IEndUserFilteringViewModelPropertyValues values);
    private Assembly OnTypeResolve(object sender, ResolveEventArgs args);
    private static string GetDynamicTypeName(string typeName, int hash);
    private static string GetDynamicTypeName(Type baseType, int hash);
    internal static int GetHash(Type baseType, IEnumerable`1<KeyValuePair`2<string, Type>> properties);
    internal static int GetHash(Type baseType, IEnumerable`1<KeyValuePair`2<string, Type>> properties, string rootPath);
    private static TypeBuilder GetTypeBuilder(Type baseType, int hash);
    private void BuildConstructors(Type baseType, TypeBuilder typeBuilder, FieldInfo[] fields);
    private void CreateConstructor(ConstructorInfo cInfo, TypeBuilder typeBuilder, FieldInfo[] fields);
    private static Type[] GetParameterTypes(MethodBase method, FieldInfo[] fields);
    private static void EmitLdargs(Array parameters, ILGenerator generator, int start);
    private static void EmitLdargsAndStfld(FieldInfo[] fields, ILGenerator generator);
    private void ImplementIEndUserFilteringViewModel(TypeBuilder typeBuilder, FieldInfo valuesField);
    private static FieldInfo DefineValuesField(TypeBuilder typeBuilder, Type baseType);
    private MethodBuilder BuildInitializeMethod(TypeBuilder typeBuilder, FieldInfo valuesField);
    private void BuildProperties(IEndUserFilteringViewModelProperties properties, IEndUserFilteringViewModelPropertyValues values, FieldInfo valuesField, TypeBuilder typebuilder, Type baseType, string rootPath);
    private static string GetPropertyPath(String& rootPath, KeyValuePair`2<string, Type> property);
    private FieldBuilder BuildBackingField(TypeBuilder typebuilder, string propertyName, Type propertyType);
    private void RegisterBackingField(TypeBuilder typebuilder, FieldBuilder backingField);
    private void RegisterBackingFieldConstructor(TypeBuilder typeBuilder, ConstructorBuilder ctorBuilder);
    private void BuildBackingFieldsInitializationForNestedType(TypeBuilder typeBuilder, ILGenerator generator);
    private void BuildBackingFieldsInitialization(TypeBuilder typeBuilder, ILGenerator generator);
    private static PropertyBuilder BuildProperty(FieldInfo valuesField, TypeBuilder typebuilder, string propertyName, Type propertyType, string valuePath);
    private static PropertyBuilder BuildNestedProperty(FieldInfo backingField, TypeBuilder typebuilder, string propertyName, Type propertyType);
    private static MethodBuilder BuildPropertyGetter(FieldInfo valuesField, TypeBuilder typeBuilder, string propertyName, Type propertyType, string valuePath);
    private static MethodBuilder BuildNestedPropertyGetter(FieldInfo backingField, TypeBuilder typeBuilder, string propertyName, Type propertyType);
    private static void BuildPropertyAttributes(PropertyBuilder propertyBuilder, IEndUserFilteringMetric metric);
    private static void BuildNestedPropertyAttributes(PropertyBuilder propertyBuilder);
    private static bool Throw(string format, Type type);
    private static bool Throw(string format, Object[] parameters);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultFilterCriteriaParseFactory : object {
    internal static IFilterCriteriaParseFactory Instance;
    private static DefaultFilterCriteriaParseFactory();
    private sealed virtual override ParseFilterCriteriaEventArgs DevExpress.Utils.Filtering.Internal.IFilterCriteriaParseFactory.Create(IEndUserFilteringMetricViewModel metricViewModel);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultFilterCriteriaQueryFactory : object {
    internal static IFilterCriteriaQueryFactory Instance;
    private static DefaultFilterCriteriaQueryFactory();
    private sealed virtual override QueryFilterCriteriaEventArgs DevExpress.Utils.Filtering.Internal.IFilterCriteriaQueryFactory.Create(IEndUserFilteringMetricViewModel metricViewModel);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultFilterUIEditorPropertiesFactory : object {
    public static IFilterUIEditorPropertiesFactory Instance;
    private static DefaultFilterUIEditorPropertiesFactory();
    private sealed virtual override IFilterUIEditorProperties DevExpress.Utils.Filtering.Internal.IFilterUIEditorPropertiesFactory.Create(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultLazyMetricAttributesFactory : LazyMetricAttributesFactoryBase {
    public static ILazyMetricAttributesFactory Instance;
    private static DefaultLazyMetricAttributesFactory();
}
internal class DevExpress.Utils.Filtering.Internal.DefaultMetricAttributesQueryFactory : BaseMetricAttributesQueryFactory {
    internal static IMetricAttributesQueryFactory Instance;
    private Dictionary`2<Type, Func`3<IEndUserFilteringMetric, IMetricAttributesQueryOwner, IMetricAttributesQuery>> initializers;
    private static DefaultMetricAttributesQueryFactory();
    private sealed virtual override IMetricAttributesQuery DevExpress.Utils.Filtering.Internal.IMetricAttributesQueryFactory.CreateQuery(IEndUserFilteringMetric metric, IMetricAttributesQueryOwner owner);
}
internal static class DevExpress.Utils.Filtering.Internal.DefaultValuesCache : object {
    private static ConcurrentDictionary`2<Type, object> cache;
    private static Func`2<Type, object> defaultValueFactory;
    private static DefaultValuesCache();
    internal static object Get(Type type);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultValueTypeResolver : object {
    internal static DefaultValueTypeResolver Instance;
    private static Dictionary`2<Type, Type> attributeTypesMapping;
    private static Dictionary`2<Type, Type> viewModelTypesMapping;
    private static Dictionary`2<Type, Type> valueBoxTypesMapping;
    private static Type ValueType;
    private static DefaultValueTypeResolver();
    private sealed virtual override Type DevExpress.Utils.Filtering.Internal.IValueTypeResolver.GetAttributesType(Type metricTypeDefinition, Type valueType);
    private sealed virtual override Type DevExpress.Utils.Filtering.Internal.IValueTypeResolver.GetValueViewModelType(Type metricTypeDefinition, Type valueType);
    private sealed virtual override Type DevExpress.Utils.Filtering.Internal.IValueTypeResolver.GetValueBoxType(Type metricTypeDefinition, Type valueType);
    private static Type GetType(Type typeDefinition, Type valueType, IDictionary`2<Type, Type> mapping);
    private static Type EnsureGenericArgumentType(Type valueType, Type type);
    private static bool IsArgumentConstrainedByStruct(Type type);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultViewModelBuilderResolver : object {
    internal static DefaultViewModelBuilderResolver Instance;
    private static Dictionary`2<Type, Func`2<IEndUserFilteringMetric, IViewModelBuilder>> initializers;
    private static DefaultViewModelBuilderResolver();
    private sealed virtual override IViewModelBuilder DevExpress.Utils.Filtering.Internal.IViewModelBuilderResolver.CreateViewModelBuilder();
    private sealed virtual override IViewModelBuilder DevExpress.Utils.Filtering.Internal.IViewModelBuilderResolver.CreateValueViewModelBuilder(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.DefaultViewModelFactory : object {
    internal static IViewModelFactory Instance;
    private static DefaultViewModelFactory();
    public sealed virtual object Create(Type viewModelType, IViewModelBuilder builder);
}
internal static class DevExpress.Utils.Filtering.Internal.DisplayAttributeBuilder : object {
    private static ConstructorInfo attributeCtor;
    private static PropertyInfo[] attributeProperties;
    private static DisplayAttributeBuilder();
    internal static CustomAttributeBuilder Build(string name);
    internal static CustomAttributeBuilder Build(IEndUserFilteringMetric metric, bool calculateShortName);
    private static string GetShortName(IEndUserFilteringMetric metric, bool calculateShortName);
    private static TService GetService(IServiceProvider serviceProvider);
}
public enum DevExpress.Utils.Filtering.Internal.DisplayFormat : Enum {
    public int value__;
    public static DisplayFormat None;
    public static DisplayFormat Custom;
}
internal static class DevExpress.Utils.Filtering.Internal.DisplayFormatAttributeBuilder : object {
    private static ConstructorInfo attributeCtor;
    private static PropertyInfo[] attributeProperties;
    private static DisplayFormatAttributeBuilder();
    internal static CustomAttributeBuilder Build(IEndUserFilteringMetric metric);
}
[ExtensionAttribute]
public static class DevExpress.Utils.Filtering.Internal.DisplayTextServiceExtension : object {
    [ExtensionAttribute]
public static Converter`2<object, string> GetEnumDisplayTextConverter(IDisplayTextService displayTextService);
}
public class DevExpress.Utils.Filtering.Internal.DurationHash : ValueType {
    public static DurationHash Empty;
    public static DurationHash All;
    public static DurationHash NotLoaded;
    private static int SECONDS_MASK;
    private static int MINUTES_MASK;
    private static int HOURS_MASK;
    private long value;
    private DurationHash(Kind kind);
    private static DurationHash();
    public sealed virtual bool Equals(DurationHash node);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[EditorBrowsableAttribute("1")]
public abstract class DevExpress.Utils.Filtering.Internal.DurationInterval : Interval`1<TimeSpan> {
    private static TimeSpan IntervalMillisecond;
    private static TimeSpan MaxIntervalBegin;
    public static Interval`1<TimeSpan> Empty { get; }
    protected DurationInterval(Nullable`1<TimeSpan> begin, Nullable`1<TimeSpan> end);
    protected DurationInterval(int days, Nullable`1<int> hours, Nullable`1<int> minutes, Nullable`1<int> seconds, Nullable`1<int> milliseconds);
    private static DurationInterval();
    protected internal sealed virtual bool CanMerge(Interval`1<TimeSpan> interval);
    protected sealed virtual CriteriaOperator GetBinaryCriteria(string path, Nullable`1<TimeSpan> value, BinaryOperatorType operatorType);
    internal static Interval`1<T> Range(Nullable`1<T> from, Nullable`1<T> to, bool exclusiveBegin, bool exclusiveEnd);
    private static Nullable`1<TimeSpan> CheckMinValue(Nullable`1<T> from, bool exclusive);
    private static Nullable`1<TimeSpan> CheckMaxValue(Nullable`1<T> to, bool exclusive);
    private static TimeSpan GetNextIntervalBegin(Nullable`1<TimeSpan> value);
    public static Interval`1<TimeSpan> get_Empty();
}
internal class DevExpress.Utils.Filtering.Internal.DurationIntervalMerged : DurationInterval {
    private DurationIntervalMerged(Nullable`1<TimeSpan> begin, Nullable`1<TimeSpan> end);
    internal static Interval`1<T> Create(Nullable`1<T> begin, Nullable`1<T> end);
}
internal abstract class DevExpress.Utils.Filtering.Internal.EndUserFilteringElement : StatelessObject {
    private string pathCore;
    public string Path { get; }
    public string Caption { get; }
    public string Description { get; }
    public string Layout { get; }
    public int Order { get; }
    public bool ApplyFormatInEditMode { get; }
    public string DataFormatString { get; }
    public string NullDisplayText { get; }
    public Nullable`1<DataType> DataType { get; }
    public Type EnumDataType { get; }
    public bool IsVisible { get; }
    public bool IsEnabled { get; }
    public EndUserFilteringElement(Func`1<IServiceProvider> getServiceProvider, string path);
    public sealed virtual string get_Path();
    protected sealed virtual string GetId();
    public sealed virtual string get_Caption();
    public sealed virtual string get_Description();
    public sealed virtual string get_Layout();
    public sealed virtual int get_Order();
    public sealed virtual bool get_ApplyFormatInEditMode();
    public sealed virtual string get_DataFormatString();
    public sealed virtual string get_NullDisplayText();
    public sealed virtual Nullable`1<DataType> get_DataType();
    public sealed virtual Type get_EnumDataType();
    public sealed virtual bool get_IsVisible();
    public sealed virtual bool get_IsEnabled();
}
internal class DevExpress.Utils.Filtering.Internal.EndUserFilteringMetric : EndUserFilteringElement {
    private static Type ExplicitLookupMetricAttributesTypeDefinition;
    private static Type ExplicitRangeMetricAttributesTypeDefinition;
    public Type Type { get; }
    public Type AttributesTypeDefinition { get; }
    public IMetricAttributes Attributes { get; }
    public EndUserFilteringMetric(Func`1<IServiceProvider> getServiceProvider, string path);
    private static EndUserFilteringMetric();
    public sealed virtual Type get_Type();
    public sealed virtual Type get_AttributesTypeDefinition();
    public sealed virtual IMetricAttributes get_Attributes();
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal void WithAttributes(Action`1<AnnotationAttributes> action);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal bool IsExplicitLookup();
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal bool IsExplicitLookup(Func`2<FilterLookupAttribute, bool> predicate);
    private static bool IsExplicitLookup(FilterAttributes filterAttributes);
    private static bool IsExplicitLookup(FilterAttributes filterAttributes, Func`2<FilterLookupAttribute, bool> condition);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal bool IsExplicitRange();
    private static bool IsExplicitRange(FilterAttributes filterAttributes);
}
internal class DevExpress.Utils.Filtering.Internal.EndUserFilteringMetricAttributes : object {
    internal static Attribute[] Empty;
    private Attribute[] attributes;
    private AnnotationAttributes annotationAttributes;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributesMergeMode <MergeMode>k__BackingField;
    public string Path { get; private set; }
    public Type Type { get; private set; }
    public AttributesMergeMode MergeMode { get; public set; }
    public EndUserFilteringMetricAttributes(string path, Type type, Attribute[] attributes);
    public EndUserFilteringMetricAttributes(string path, Type type, AnnotationAttributes attributes);
    private static EndUserFilteringMetricAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual AttributesMergeMode get_MergeMode();
    [CompilerGeneratedAttribute]
public void set_MergeMode(AttributesMergeMode value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<Attribute> GetEnumerator();
    public static AnnotationAttributes GetAttributes(IEndUserFilteringMetricAttributes attributes);
    private AnnotationAttributes GetAttributes(IEnumerable`1<Attribute> attributes);
    private AnnotationAttributes GetAttributes();
}
[ExtensionAttribute]
public static class DevExpress.Utils.Filtering.Internal.EndUserFilteringMetricExtension : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void WithAttributes(IEndUserFilteringMetric metric, Action`1<AnnotationAttributes> action);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static bool IsExplicitLookup(IEndUserFilteringMetric metric);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static bool IsExplicitLookup(IEndUserFilteringMetric metric, Func`2<FilterLookupAttribute, bool> predicate);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static bool IsExplicitRange(IEndUserFilteringMetric metric);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static bool IsFlagEnum(IEndUserFilteringMetric metric);
    [ExtensionAttribute]
internal static Type[] EnsureValueTypes(IEndUserFilteringMetric metric, String[] paths);
}
public class DevExpress.Utils.Filtering.Internal.EndUserFilteringMetricViewModel : object {
    private IEndUserFilteringMetric metricCore;
    private IEndUserFilteringMetricViewModelValueBox valueBoxCore;
    private int valueChangedLock;
    internal static string FilterCriteriaNotify;
    private WeakReference parentViewModelRef;
    private WeakReference surrogateViewModelRef;
    private Lazy`1<CriteriaOperator> filterCriteriaCore;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    protected object ParentViewModel { get; protected set; }
    public IEndUserFilteringMetric Metric { get; }
    public IMetricAttributesQuery Query { get; }
    public bool HasValue { get; }
    public IValueViewModel Value { get; }
    public Type ValueType { get; }
    public CriteriaOperator FilterCriteria { get; }
    public EndUserFilteringMetricViewModel(IEndUserFilteringMetric metric, IEndUserFilteringMetricViewModelValueBox valueBox);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricViewModel.EnsureValueType();
    private void Value_Changed(object sender, EventArgs e);
    private sealed virtual override IDisposable DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricViewModel.LockValue();
    internal static bool IsFilterCriteriaNotify(PropertyChangedEventArgs e, String& path);
    internal static bool IsFilterCriteriaNotify(string propertyName, String& path);
    protected virtual void OnValueChanged();
    internal void ResetFilterCriteria();
    private object GetParentViewModel();
    private object GetSurrogateParentViewModel();
    internal IEndUserFilteringViewModel GetFilteringViewModel();
    protected object get_ParentViewModel();
    protected void set_ParentViewModel(object value);
    protected virtual void OnParentViewModelChanged();
    public sealed virtual IEndUserFilteringMetric get_Metric();
    public sealed virtual IMetricAttributesQuery get_Query();
    public sealed virtual bool get_HasValue();
    public sealed virtual IValueViewModel get_Value();
    public sealed virtual Type get_ValueType();
    public sealed virtual CriteriaOperator get_FilterCriteria();
    protected virtual CriteriaOperator CreateFilterCriteria();
    protected virtual CriteriaOperator GetFilterCriteria(IValueViewModel value);
    public Func`2<T, bool> GetWhereClause();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void RaisePropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private CriteriaOperator <.ctor>b__2_0();
    [CompilerGeneratedAttribute]
private CriteriaOperator <ResetFilterCriteria>b__13_0();
}
[ExtensionAttribute]
public static class DevExpress.Utils.Filtering.Internal.EndUserFilteringMetricViewModelExtension : object {
    [ExtensionAttribute]
public static void InitializeUIProperties(IEndUserFilteringMetricViewModel metricViewModel, IFilterUIEditorProperties properties, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static void InitializeDataBinding(IEndUserFilteringMetricViewModel metricViewModel, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static void CompleteDataBinding(IEndUserFilteringMetricViewModel metricViewModel, IServiceProvider serviceProvider);
}
internal class DevExpress.Utils.Filtering.Internal.EndUserFilteringSettings : object {
    private IOrderedStorage`1<IEndUserFilteringMetric> storage;
    private IEndUserFilteringMetadataProvider customMetadataProvider;
    internal static IEnumerable`1<IEndUserFilteringMetricAttributes> EmptyAttributes;
    private IntegrityContainer serviceContainer;
    private Hashtable disabledItems;
    private Dictionary`2<string, int> orders;
    private Dictionary`2<string, AnnotationAttributes> attributes;
    private Dictionary`2<string, FilterAttributes> filterAttributes;
    private Dictionary`2<string, Type> typeDefinitionsCache;
    private Dictionary`2<string, IMetricAttributes> metricsAttributesCache;
    private IEnumerable`1<string> DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettings.Paths { get; }
    private IEndUserFilteringMetric DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettings.Item { get; }
    private IEnumerable`1<IEndUserFilteringMetricAttributes> DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettings.CustomAttributes { get; }
    public EndUserFilteringSettings(IEndUserFilteringMetadataProvider typeMetadataProvider, IEndUserFilteringMetadataProvider customMetadataProvider);
    private static EndUserFilteringSettings();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettings.Ensure(string path, Type type, FilterType filterType, FilterValuesType valuesType, FilterGroupType groupType, bool sortedByDisplayText);
    private void EnsureSortedByDisplayText(IEndUserFilteringMetric metric, bool value);
    private void EnsureFilterByDisplayText(IEndUserFilteringMetric metric, FilterType filterType);
    private bool Ensure(string path, Type type);
    private bool Ensure(IEndUserFilteringMetric metric, FilterType filterType, FilterValuesType valuesType, FilterGroupType groupType);
    private bool IsRange(IEndUserFilteringMetric metric);
    private bool IsBooleanChoice(IEndUserFilteringMetric metric);
    private bool IsLookup(IEndUserFilteringMetric metric);
    private bool ForceGroupFilter(IEndUserFilteringMetric metric, FilterGroupType groupType);
    private bool ForceGroupFilter(IMetadataStorage storage, string path);
    private bool ForceGroupFilter(IMetadataStorage storage, string path, FilterGroupAttribute filterGroup);
    private bool UpdateGroupFilter(IEndUserFilteringMetric metric);
    private bool UpdateGroupFilter(IMetadataStorage storage, string path, FilterGroupAttribute filterGroup);
    private FilterGroupAttribute GetFilterGroupAttribute(IMetadataStorage storage, string path);
    private bool IsImplicitLookup(IEndUserFilteringMetric metric);
    private bool ForceLookupFilter(IEndUserFilteringMetric metric);
    private bool ResetLookupFilter(IEndUserFilteringMetric metric);
    private bool ForceRangeFilter(IEndUserFilteringMetric metric);
    private bool ResetRangeFilter(IEndUserFilteringMetric metric);
    private bool Force(IMetadataStorage storage, string path, Type type);
    private bool Force(IMetadataStorage storage, string path);
    private bool Reset(IMetadataStorage storage, string path);
    private bool Any(IMetadataStorage storage, string path, Predicate`1<TAttribute> predicate);
    private static FilterValuesType CheckDefaultValuesType(IEndUserFilteringMetric metric, FilterValuesType valuesType);
    private sealed virtual override IEnumerable`1<string> DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettings.get_Paths();
    private sealed virtual override IEndUserFilteringMetric DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettings.get_Item(string path);
    private sealed virtual override IEnumerable`1<IEndUserFilteringMetricAttributes> DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettings.get_CustomAttributes();
    private sealed virtual override IEnumerable`1<KeyValuePair`2<string, TValue>> DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettings.GetPairs(Func`2<IEndUserFilteringMetric, TValue> accessor);
    private sealed virtual override IEnumerator`1<IEndUserFilteringMetric> System.Collections.Generic.IEnumerable<DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetric>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private void RegisterServices();
    protected virtual ILazyMetricAttributesFactory GetLazyMetricAttributesFactory();
    protected virtual IBehaviorProvider CreateBehaviorProvider();
    protected virtual IMetadataProvider CreateMetadataProvider();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetadataStorage.SetEnabled(string path, bool value);
    private void SetEnabledCore(string path, bool value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetadataStorage.SetOrder(string path, Nullable`1<int> value);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IMetadataStorage.TryGetValue(string path, Int32& value);
    private void SetOrderCore(string path, Nullable`1<int> value);
    private void ResetOrder();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetadataStorage.SetAttributes(string path, AnnotationAttributes value);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IMetadataStorage.TryGetValue(string path, AnnotationAttributes& value);
    private void SetAttributesCore(string path, AnnotationAttributes value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetadataStorage.SetAttributes(string path, FilterAttributes value);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IMetadataStorage.TryGetValue(string path, FilterAttributes& value);
    private void SetFilterAttributesCore(string path, FilterAttributes value);
    private sealed virtual override Type DevExpress.Utils.Filtering.Internal.IMetricAttributesCache.GetValueOrCache(string path, Func`1<Type> create);
    private sealed virtual override IMetricAttributes DevExpress.Utils.Filtering.Internal.IMetricAttributesCache.GetValueOrCache(string path, Func`1<IMetricAttributes> create);
    private static T GetValueOrCache(string path, Func`1<T> create, Dictionary`2<string, T> cache);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetricAttributesCache.Reset();
    private void Reset(string path);
    private bool UpdateFilterAttributes(string path);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetric>.Equals(IEndUserFilteringMetric x, IEndUserFilteringMetric y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetric>.GetHashCode(IEndUserFilteringMetric m);
}
internal abstract class DevExpress.Utils.Filtering.Internal.EndUserFilteringSettingsFactory : object {
    private static HashSet`1<Type> dxMetadataTypes;
    private static EndUserFilteringSettingsFactory();
    private sealed virtual override IEndUserFilteringSettings DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettingsFactory.Create(Type type, IEnumerable`1<IEndUserFilteringMetricAttributes> customAttributes);
    protected virtual IEndUserFilteringMetadataProvider CreateTypeMetadataProvider(Type type);
    protected abstract virtual IEndUserFilteringMetadataProvider CreateCustomAttributesMetadataProvider(IEnumerable`1<IEndUserFilteringMetricAttributes> customAttributes);
    protected abstract virtual IEndUserFilteringSettings Create(IEndUserFilteringMetadataProvider type, IEndUserFilteringMetadataProvider customAttributes);
    protected static bool SkipFiltering(string path, Type type);
    protected static bool SkipFiltering(Type type, FilterAttributes filterAttributes);
    protected static bool SkipFiltering(FilterAttributes filterAttributes);
    private static bool IsImage(Type type);
    private static bool IsMetadata(Type type);
    private static bool IsDXMetadata(Type type, string baseType);
}
[ExtensionAttribute]
public static class DevExpress.Utils.Filtering.Internal.EndUserFilteringViewModelExtension : object {
    private static Dictionary`2<Type, Func`2<IEndUserFilteringViewModel, IEndUserFilteringViewModelPropertyValues>> accessorsCache;
    private static EndUserFilteringViewModelExtension();
    [ExtensionAttribute]
public static IEndUserFilteringMetricViewModel GetProperty(IEndUserFilteringViewModel viewModel, string path);
    [ExtensionAttribute]
public static IServiceProvider GetServiceProvider(IEndUserFilteringViewModel viewModel);
    [ExtensionAttribute]
public static CriteriaOperator QueryFilterCriteria(IEndUserFilteringViewModel viewModel, string path, CriteriaOperator criteria);
    [ExtensionAttribute]
public static bool ParseFilterCriteria(IEndUserFilteringViewModel viewModel, string path, CriteriaOperator criteria);
    private static IEndUserFilteringViewModelPropertyValues GetValues(IEndUserFilteringViewModel viewModel);
    private static Func`2<IEndUserFilteringViewModel, IEndUserFilteringViewModelPropertyValues> GetValuesAccessor(Type viewModelType);
    private static Func`2<IEndUserFilteringViewModel, IEndUserFilteringViewModelPropertyValues> MakeValuesAccessor(Type viewModelType);
    private static FieldInfo GetValuesField(Type viewModelType);
}
[ExtensionAttribute]
public static class DevExpress.Utils.Filtering.Internal.EndUserFilteringViewModelPropertyValuesExtension : object {
    [ExtensionAttribute]
public static object EnsureDataBinding(IEndUserFilteringViewModelPropertyValues values, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static void UpdateDataBinding(IEndUserFilteringViewModelPropertyValues values, IServiceProvider serviceProvider, string excludePath);
    [ExtensionAttribute]
public static void UpdateDataBindings(IEndUserFilteringViewModelPropertyValues values, IServiceProvider serviceProvider, string path);
}
internal static class DevExpress.Utils.Filtering.Internal.EnumDataTypeAttributeBuilder : object {
    private static ConstructorInfo attributeCtor;
    private static EnumDataTypeAttributeBuilder();
    internal static CustomAttributeBuilder Build(Type enumType);
}
internal static class DevExpress.Utils.Filtering.Internal.EnumHelper : object {
    private static ConcurrentDictionary`2<Type, Func`2<string, object>> parseMethodsCache;
    private static MethodInfo mInfo_TryParse;
    private static EnumHelper();
    internal static bool IsFlags(Type enumType);
    internal static T[] GetFlags(T enumValue);
    internal static bool TryParse(Type enumType, string value, TEnum& result);
    private static Func`2<string, object> CreateParseEnumMethod(Type enumType);
    private static MethodInfo GetTryParseMethod();
    internal static object GetValueByUnderlyingType(object value, Type enumType);
}
public class DevExpress.Utils.Filtering.Internal.EnumValueBox`1 : SimpleValueBox`1<T> {
    private static IReadOnlyCollection`1<T> UnsetValues;
    private static object valuesKey;
    private static string EnumDataSource;
    public Nullable`1<T> Value { get; public set; }
    public IReadOnlyCollection`1<T> Values { get; public set; }
    protected IEnumChoiceMetricAttributes`1<T> MetricAttributes { get; }
    private bool DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.HasValues { get; }
    private object DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.Values { get; }
    [BrowsableAttribute("False")]
public Type EnumType { get; }
    [BrowsableAttribute("False")]
public bool UseFlags { get; }
    [BrowsableAttribute("False")]
public bool UseContainsForFlags { get; }
    [BrowsableAttribute("False")]
public bool UseRadioSelection { get; }
    [BrowsableAttribute("False")]
public bool UseSelectAll { get; }
    [BrowsableAttribute("False")]
public string SelectAllName { get; }
    [BrowsableAttribute("False")]
public string NullName { get; }
    private static EnumValueBox`1();
    public virtual Nullable`1<T> get_Value();
    public virtual void set_Value(Nullable`1<T> value);
    public virtual IReadOnlyCollection`1<T> get_Values();
    public virtual void set_Values(IReadOnlyCollection`1<T> value);
    protected sealed virtual void OnInitialized();
    protected sealed virtual void OnMetricAttributesSpecialMemberChanged(string propertyName);
    protected void OnValuesChanged();
    protected sealed virtual void ResetCore();
    protected sealed virtual bool CanResetCore();
    protected IEnumChoiceMetricAttributes`1<T> get_MetricAttributes();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.get_HasValues();
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.get_Values();
    public sealed virtual Type get_EnumType();
    public sealed virtual bool get_UseFlags();
    public bool get_UseContainsForFlags();
    public sealed virtual bool get_UseRadioSelection();
    public sealed virtual bool get_UseSelectAll();
    public sealed virtual string get_SelectAllName();
    public sealed virtual string get_NullName();
    private sealed virtual override CriteriaOperator DevExpress.Utils.Filtering.Internal.IFilterValueViewModel.CreateFilterCriteria();
    private CriteriaOperator GetBitwiseCriteria(OperandProperty prop, UnaryOperator isNull, T xorRes);
    private static T Xor(Type enumType, IEnumerable`1<T> values);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.EnumValueBox`1/<XorValues>d__37")]
private static IEnumerable`1<T> XorValues(Type enumType, object xorValue);
    protected sealed virtual bool TryParseCore(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    private bool IsUnaryGroup(GroupOperator group);
    private bool IsEqualsGroup(GroupOperator group);
    private bool TryParseIn(string path, CriteriaOperator criteria);
    private bool TryParseBinary(string path, CriteriaOperator criteria);
    private void SetValues(Nullable`1<T> value);
    private void SetValues(IEnumerable`1<T> values);
    private static Nullable`1<T> GetEnum(OperandValue value, Type enumType);
    private static T[] GetEnumValues(T value, bool useFlags);
    [CompilerGeneratedAttribute]
private void <TryParseCore>b__38_0();
    [CompilerGeneratedAttribute]
private T <TryParseCore>b__38_1(OperandValue v);
    [CompilerGeneratedAttribute]
private T <TryParseCore>b__38_2(BinaryOperator binary);
    [CompilerGeneratedAttribute]
private T <TryParseIn>b__41_0(OperandValue v);
}
internal class DevExpress.Utils.Filtering.Internal.ExcelFilteringSettings : EndUserFilteringSettings {
    public ExcelFilteringSettings(IEndUserFilteringMetadataProvider typeMetadataProvider, IEndUserFilteringMetadataProvider customMetadataProvider);
    protected sealed virtual ILazyMetricAttributesFactory GetLazyMetricAttributesFactory();
}
internal class DevExpress.Utils.Filtering.Internal.ExcelFilteringSettingsFactory : EndUserFilteringSettingsFactory {
    internal static IEndUserFilteringSettingsFactory Instance;
    private static ExcelFilteringSettingsFactory();
    protected sealed virtual IEndUserFilteringSettings Create(IEndUserFilteringMetadataProvider type, IEndUserFilteringMetadataProvider customAttributes);
    protected sealed virtual IEndUserFilteringMetadataProvider CreateCustomAttributesMetadataProvider(IEnumerable`1<IEndUserFilteringMetricAttributes> customAttributes);
}
public class DevExpress.Utils.Filtering.Internal.ExcelFilteringUIServiceProvider : BaseFilteringUIServiceProvider {
    protected virtual void RegisterServices();
    protected virtual ICustomFunctionsQueryFactory GetCustomFunctionsQueryFactory();
    protected virtual ICustomUIFiltersPropertiesFactory GetCustomUIFiltersPropertiesFactory();
    protected virtual ICustomUIFilterFactory GetCustomUIFilterFactory();
    protected virtual ICustomUIFiltersOptionsFactory GetCustomUIFiltersOptionsFactory();
    protected virtual ICustomUIFiltersFactory GetCustomUIFiltersFactory();
    protected virtual ICustomUIFilterTypesResolver GetCustomUIFilterTypesResolver();
    protected virtual ICustomUIFilterValuesFactory GetCustomUIFilterValuesFactory();
    protected virtual ICustomUIFilterDialogTypesResolver GetCustomUIFilterDialogTypesResolver();
    protected virtual IEndUserFilteringSettingsFactory GetEndUserFilteringSettingsFactory();
    protected virtual IMetricAttributesQueryFactory GetMetricAttributesQueryFactory();
}
public abstract class DevExpress.Utils.Filtering.Internal.ExcelFilteringUIViewModelProvider : FilteringViewModelPropertyValuesProvider {
    private Lazy`1<IEndUserFilteringViewModel> viewModelCore;
    private Lazy`1<ICustomUIFiltersSettings> customUIFiltersCore;
    private static CustomUIFilterType[] AllFilters;
    private Dictionary`2<string, SetFilterCriteriaResult> filterResults;
    private Dictionary`2<string, bool> immediateFilters;
    private Dictionary`2<string, Func`1<CriteriaOperator>> delayedFilters;
    [CompilerGeneratedAttribute]
private FilterChangedEventHandler FilterChanged;
    protected ExcelFilteringUIViewModel ViewModel { get; }
    protected Lazy`1<IEndUserFilteringViewModel> ViewModelCore { get; }
    protected ICustomUIFiltersSettings CustomUIFilters { get; }
    protected ExcelFilteringUIViewModelProvider(IServiceProvider serviceProvider);
    protected virtual void ResetCore();
    protected ExcelFilteringUIViewModel get_ViewModel();
    protected sealed virtual Lazy`1<IEndUserFilteringViewModel> get_ViewModelCore();
    protected virtual void OnViewModelCreated(IEndUserFilteringViewModel viewModel);
    protected ICustomUIFiltersSettings get_CustomUIFilters();
    public bool HasFilters(string path);
    public bool AllowFilters(string path);
    private bool AllowFilters(ICustomUIFilters filters, ICustomUIFiltersOptions options, ICustomUIFiltersOptions userOptions);
    private static bool AllFiltersBlockedByUserOptions(ICustomUIFilters filters, ICustomUIFiltersOptionsEx userOptionsEx);
    protected SetFilterCriteriaResult SetFilterCriteria(string path, CriteriaOperator criteria);
    protected SetFilterCriteriaResult GetDefaultCriteriaResultForColumn(string path);
    private SetFilterCriteriaResult SetUIEditorFilterCriteria(string path, Func`1<CriteriaOperator> getCriteria);
    private ICustomUIFilter SetCustomUIFiltersCriteria(string path, Func`1<CriteriaOperator> getCriteria);
    protected ICustomUIFilterValue GetCustomUIFilterValue(string path);
    protected void CheckUserOptions(string path, Func`2<ICustomUIFiltersOptions, ICustomUIFiltersOptions> getUserOptions);
    protected void SetUserDefinedFilters(string path, IEnumerable`1<IUserDefinedFilterItem> filterItems);
    protected virtual bool SupportCustomFunctions(string path);
    private IEnumerable`1<string> GetCustomFunctions(ICustomUIFilters filters);
    protected virtual IEnumerable`1<string> QueryCustomFunctions(CustomFunctionEventArgs args);
    protected virtual void RaiseQueryCustomFunctions(CustomFunctionEventArgs args);
    protected virtual void RaiseContextQueryCustomFunctions(CustomFunctionEventArgs args);
    protected virtual void EnsureFilterTypeCore(string path);
    protected IValueViewModel InitializeUIEditorValue(string path, IFilterUIEditorProperties properties);
    protected void ResetUIEditorValue(string path);
    protected void ResetCustomUIFiltersCore();
    protected virtual ICustomUIFiltersSettings CreateCustomUIFilters();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.ExcelFilteringUIViewModelProvider/<CreateCustomUIFilterBoxes>d__35")]
protected IEnumerable`1<ICustomUIFiltersBox> CreateCustomUIFilterBoxes();
    protected ICustomUIFilters InitializeCustomUIFiltersValue(string path, ICustomUIFiltersProperties properties);
    protected void ResetCustomUIFiltersValue(string path);
    protected virtual ExcelFilteringUIViewModel CreateViewModel();
    internal static bool IsSurrogateViewModel(object viewModel);
    protected virtual void OnUIEditorFilterCriteriaChanged(string path);
    protected virtual void OnCustomUIFilterCriteriaChanged(string path);
    protected bool ShouldUpdateImmediately(string path);
    protected bool HasFilter(string path);
    protected bool HasImmediateFilter(string path);
    protected bool HasDelayedFilter(string path);
    protected void ApplyDelayedFilter(string path);
    private void ApplyImmediateFilter(string path, Func`1<CriteriaOperator> getFilterCriteria);
    protected void ClearDelayedFilter(string path);
    private void RegisterImmediateFilter(string path, Func`1<CriteriaOperator> getFilterCriteria);
    private void RegisterDelayedFilter(string path, Func`1<CriteriaOperator> getFilterCriteria);
    [CompilerGeneratedAttribute]
public void add_FilterChanged(FilterChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FilterChanged(FilterChangedEventHandler value);
    protected virtual void RaiseFilterChanged(string path, FilterChangedType type);
    protected virtual void OnFilterCriteriaChanged(string path, Func`1<CriteriaOperator> getCriteria);
    protected static bool IsRange(Type type, AnnotationAttributes attributes, Boolean& dateTime);
    protected Object[] GetAggregateValues(Type type, Object[] uniqueValues);
    protected virtual ICustomUIFiltersBox CreateCustomUIFiltersBox(IEndUserFilteringMetric metric);
    [CompilerGeneratedAttribute]
private bool <AllowFilters>b__13_0(ICustomUIFilters filters);
}
internal class DevExpress.Utils.Filtering.Internal.ExcelLazyMetricAttributesFactory : LazyMetricAttributesFactoryBase {
    public static ILazyMetricAttributesFactory Instance;
    private static ExcelLazyMetricAttributesFactory();
    protected sealed virtual IMetricAttributes CreateDateTimeRangeCore(Type type);
    protected sealed virtual IMetricAttributes CreateNumericRangeCore(Type type);
}
internal class DevExpress.Utils.Filtering.Internal.ExcelMetricAttributesQueryFactory : BaseMetricAttributesQueryFactory {
    internal static IMetricAttributesQueryFactory Instance;
    private Dictionary`2<Type, Func`3<IEndUserFilteringMetric, IMetricAttributesQueryOwner, IMetricAttributesQuery>> initializers;
    private static ExcelMetricAttributesQueryFactory();
    private sealed virtual override IMetricAttributesQuery DevExpress.Utils.Filtering.Internal.IMetricAttributesQueryFactory.CreateQuery(IEndUserFilteringMetric metric, IMetricAttributesQueryOwner owner);
}
internal static class DevExpress.Utils.Filtering.Internal.ExpressionHelper : object {
    internal static string GetPropertyName(Expression`1<Func`1<T>> expression);
    internal static string GetPropertyName(LambdaExpression expression);
    private static bool IsPropertyExpression(MemberExpression expression);
    private static MemberExpression GetMemberExpression(LambdaExpression expression);
}
internal static class DevExpress.Utils.Filtering.Internal.ExternalAndFluentAPIFilteringAttributes : object {
    private static Attribute[] NoAttributes;
    private static ConcurrentDictionary`2<Type, IGetExternalAndFluentAPIAttributesProxy> getExternalAndFluentAPIAttributesCache;
    private static ConcurrentDictionary`2<Type, IGetExternalAndFluentAPIAttributesProxy> getExternalAndFluentAPIFilteringAttributesCache;
    private static Type metadataHelperType;
    private static ExternalAndFluentAPIFilteringAttributes();
    internal static IEnumerable`1<Attribute> GetAttributes(Type componentType, string memberName);
    internal static IEnumerable`1<Attribute> GetExternalAndFluentAPIAttributes(Type metadataHelperType, Type componentType, string memberName);
    private static IGetExternalAndFluentAPIAttributesProxy EnsureAttributesGetter(Type type);
    private static IEnumerable`1<Attribute> GetExternalAndFluentAPIFilteringAttributes(Type metadataHelperType, Type componentType, string memberName);
    private static IGetExternalAndFluentAPIAttributesProxy EnsureFilterAttributesGetter(Type type);
    internal static Type GetMetadataHelperType();
    internal static void Reset();
}
public class DevExpress.Utils.Filtering.Internal.FilterAttributes : object {
    private static Func`2<PropertyDescriptor, AttributeCollection> metadataAttributesProvider;
    private static Func`2<PropertyDescriptor, FilterAttributesProvider> propertyDescriptorAttributesProviderInitializer;
    private static Func`2<AttributeCollection, FilterAttributesProvider> attributeCollectionAttributesProviderInitializer;
    private FilterAttributesProvider provider;
    private Type propertyType;
    private Type enumDataType;
    private Type forcedPropertyType;
    private Type forcedEnumDataType;
    private Type metricAttributesTypeDefinition;
    private IMetricAttributes metricAttributes;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Type PropertyType { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Type EnumDataType { get; }
    public bool HasEditorAttribute { get; }
    public bool HasFilterPropertyAttribute { get; }
    public bool IsFilterProperty { get; }
    private static FilterAttributes();
    private FilterAttributes(FilterAttributesProvider provider, Type propertyType);
    public FilterAttributes(PropertyDescriptor property);
    public FilterAttributes(AttributeCollection attributes, Type propertyType);
    public FilterAttributes(AttributeCollection attributes, Type propertyType, Type enumDataType);
    public FilterAttributes(IEnumerable`1<Attribute> attributes, Type propertyType);
    public FilterAttributes(IEnumerable`1<Attribute> attributes, Type propertyType, Type enumDataType);
    public FilterAttributes(AnnotationAttributes annotationAttributes, Type propertyType);
    private static void CheckDataAnnotations_ConditionallyAPTCAIssue();
    public Type get_PropertyType();
    public Type get_EnumDataType();
    public bool Any();
    public bool Any(Predicate`1<TAttribute> predicate);
    public bool get_HasEditorAttribute();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FilterRangeEditorSettings GetRangeEditorSettings();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FilterLookupEditorSettings GetLookupEditorSettings();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FilterBooleanEditorSettings GetBooleanEditorSettings();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FilterEnumEditorSettings GetEnumEditorSettings();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FilterGroupEditorSettings GetGroupEditorSettings();
    public bool get_HasFilterPropertyAttribute();
    public bool get_IsFilterProperty();
    public FilterAttributes Merge(FilterAttributes attributes);
    internal static AttributeCollection GetMetadataAttributes(PropertyDescriptor descriptor);
    internal bool Force(Type type);
    private void SetForcedPropertyType(Type type);
    internal bool Force(TAttribute attribute);
    internal bool Reset();
    internal bool Update(TAttribute attribute, Func`2<TAttribute, bool> condition);
    internal bool IsFit(Func`2<TAttribute, bool> condition);
    internal bool Update(AnnotationAttributes annotationAttributes);
    public Type GetMetricAttributesTypeDefinition();
    public IMetricAttributes GetMetricAttributes();
    public static void Reset();
}
public class DevExpress.Utils.Filtering.Internal.FilterBooleanEditorSettings : FilterEditorSettingsBase`1<BooleanUIEditorType> {
    public FilterBooleanEditorSettings(BooleanUIEditorType editorType);
}
public abstract class DevExpress.Utils.Filtering.Internal.FilterCriteriaBindingTarget : object {
    private static PropertyChangedEventArgs FilterCriteriaChangedArgs;
    private int lockFilterCriteriaChanged;
    public CriteriaOperator FilterCriteria { get; public set; }
    private static FilterCriteriaBindingTarget();
    public abstract virtual CriteriaOperator get_FilterCriteria();
    public abstract virtual void set_FilterCriteria(CriteriaOperator value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    protected abstract virtual PropertyChangedEventHandler GetFilterCriteriaChanged();
    protected abstract virtual void AddFilterCriteriaChanged(PropertyChangedEventHandler handler);
    protected abstract virtual void RemoveFilterCriteriaChanged(PropertyChangedEventHandler handler);
    private sealed virtual override void DevExpress.Utils.Filtering.IFilterCriteriaBindingTarget.RaiseFilterCriteriaChanged();
    private sealed virtual override IDisposable DevExpress.Utils.Filtering.IFilterCriteriaBindingTarget.Lock();
}
public class DevExpress.Utils.Filtering.Internal.FilterEditorAttribute : FilterAttribute {
    [CompilerGeneratedAttribute]
private FilterRangeEditorSettings <RangeEditorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterLookupEditorSettings <LookupEditorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterBooleanEditorSettings <BooleanEditorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterEnumEditorSettings <EnumEditorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterGroupEditorSettings <GroupEditorSettings>k__BackingField;
    public FilterRangeEditorSettings RangeEditorSettings { get; private set; }
    public FilterLookupEditorSettings LookupEditorSettings { get; private set; }
    public FilterBooleanEditorSettings BooleanEditorSettings { get; private set; }
    public FilterEnumEditorSettings EnumEditorSettings { get; private set; }
    public FilterGroupEditorSettings GroupEditorSettings { get; private set; }
    public FilterEditorAttribute(RangeUIEditorType editorType);
    public FilterEditorAttribute(DateTimeRangeUIEditorType editorType);
    public FilterEditorAttribute(LookupUIEditorType editorType);
    public FilterEditorAttribute(LookupUIEditorType editorType, bool useFlags);
    public FilterEditorAttribute(BooleanUIEditorType editorType);
    public FilterEditorAttribute(GroupUIEditorType editorType);
    [CompilerGeneratedAttribute]
public FilterRangeEditorSettings get_RangeEditorSettings();
    [CompilerGeneratedAttribute]
private void set_RangeEditorSettings(FilterRangeEditorSettings value);
    [CompilerGeneratedAttribute]
public FilterLookupEditorSettings get_LookupEditorSettings();
    [CompilerGeneratedAttribute]
private void set_LookupEditorSettings(FilterLookupEditorSettings value);
    [CompilerGeneratedAttribute]
public FilterBooleanEditorSettings get_BooleanEditorSettings();
    [CompilerGeneratedAttribute]
private void set_BooleanEditorSettings(FilterBooleanEditorSettings value);
    [CompilerGeneratedAttribute]
public FilterEnumEditorSettings get_EnumEditorSettings();
    [CompilerGeneratedAttribute]
private void set_EnumEditorSettings(FilterEnumEditorSettings value);
    [CompilerGeneratedAttribute]
public FilterGroupEditorSettings get_GroupEditorSettings();
    [CompilerGeneratedAttribute]
private void set_GroupEditorSettings(FilterGroupEditorSettings value);
}
internal static class DevExpress.Utils.Filtering.Internal.FilterEditorAttributeBuilder : object {
    private static ConstructorInfo numericRangeAttributeCtor;
    private static ConstructorInfo dateTimeRangeAttributeCtor;
    private static ConstructorInfo lookupAttributeCtor;
    private static ConstructorInfo enumAttributeCtor;
    private static ConstructorInfo booleanChoiceAttributeCtor;
    private static ConstructorInfo groupAttributeCtor;
    private static FilterEditorAttributeBuilder();
    internal static CustomAttributeBuilder Build(IEndUserFilteringMetric metric);
}
public abstract class DevExpress.Utils.Filtering.Internal.FilterEditorSettingsBase`1 : object {
    [CompilerGeneratedAttribute]
private TEditorType <EditorType>k__BackingField;
    public TEditorType EditorType { get; private set; }
    public FilterEditorSettingsBase`1(TEditorType editorType);
    [CompilerGeneratedAttribute]
public TEditorType get_EditorType();
    [CompilerGeneratedAttribute]
private void set_EditorType(TEditorType value);
}
public class DevExpress.Utils.Filtering.Internal.FilterEnumEditorSettings : FilterLookupEditorSettings {
    [CompilerGeneratedAttribute]
private bool <UseFlags>k__BackingField;
    public bool UseFlags { get; private set; }
    public FilterEnumEditorSettings(LookupUIEditorType editorType, bool useFlags);
    [CompilerGeneratedAttribute]
public bool get_UseFlags();
    [CompilerGeneratedAttribute]
private void set_UseFlags(bool value);
}
public class DevExpress.Utils.Filtering.Internal.FilterGroupEditorSettings : FilterEditorSettingsBase`1<GroupUIEditorType> {
    public FilterGroupEditorSettings(GroupUIEditorType editorType);
}
public enum DevExpress.Utils.Filtering.Internal.FilterGroupType : Enum {
    public int value__;
    public static FilterGroupType Default;
    public static FilterGroupType Tree;
    public static FilterGroupType List;
}
public class DevExpress.Utils.Filtering.Internal.FilteringLocalizer : XtraLocalizer`1<FilteringLocalizerStringId> {
    public static XtraLocalizer`1<FilteringLocalizerStringId> Active { get; public set; }
    private static FilteringLocalizer();
    public static XtraLocalizer`1<FilteringLocalizerStringId> CreateDefaultLocalizer();
    public static XtraLocalizer`1<FilteringLocalizerStringId> get_Active();
    public static void set_Active(XtraLocalizer`1<FilteringLocalizerStringId> value);
    public static string GetString(FilteringLocalizerStringId id);
    public virtual XtraLocalizer`1<FilteringLocalizerStringId> CreateResXLocalizer();
    protected virtual void PopulateStringTable();
}
public enum DevExpress.Utils.Filtering.Internal.FilteringLocalizerStringId : Enum {
    public int value__;
    public static FilteringLocalizerStringId FromName;
    public static FilteringLocalizerStringId ToName;
    public static FilteringLocalizerStringId TrueName;
    public static FilteringLocalizerStringId FalseName;
    public static FilteringLocalizerStringId DefaultName;
    public static FilteringLocalizerStringId SelectAllName;
    public static FilteringLocalizerStringId NullName;
    public static FilteringLocalizerStringId EmptyName;
    public static FilteringLocalizerStringId BlanksName;
    public static FilteringLocalizerStringId NonBlanksName;
    public static FilteringLocalizerStringId MenuSelectAllName;
    public static FilteringLocalizerStringId MenuClearSelectionName;
    public static FilteringLocalizerStringId MenuInvertSelectionName;
    public static FilteringLocalizerStringId MenuResetFilter;
    public static FilteringLocalizerStringId MenuResetAllFilters;
}
public class DevExpress.Utils.Filtering.Internal.FilteringResXLocalizer : XtraResXLocalizer`1<FilteringLocalizerStringId> {
    private static string baseName;
    protected virtual ResourceManager CreateResourceManagerCore();
}
public class DevExpress.Utils.Filtering.Internal.FilteringUIServiceProvider : FilteringUIServiceProviderBase {
    public IEndUserFilteringViewModelProvider CreateViewModelProvider();
    protected virtual IEndUserFilteringViewModelProvider CreateViewModelProvider(IServiceProvider serviceProvider);
}
public class DevExpress.Utils.Filtering.Internal.FilteringUIServiceProviderBase : BaseFilteringUIServiceProvider {
    protected virtual void RegisterServices();
    protected virtual IEndUserFilteringViewModelTypeBuilder GetEndUserFilteringViewModelTypeBuilder();
}
public class DevExpress.Utils.Filtering.Internal.FilteringUIViewModelProvider : FilteringUIViewModelProviderBase {
    private Type sourceTypeCore;
    private IEnumerable`1<IEndUserFilteringMetricAttributes> attributesCore;
    private Type viewModelBaseTypeCore;
    private object parentViewModelCore;
    private IViewModelProvider parentViewModelProviderCore;
    public Type SourceType { get; public set; }
    public IEnumerable`1<IEndUserFilteringMetricAttributes> Attributes { get; public set; }
    public Type ViewModelBaseType { get; public set; }
    public object ParentViewModel { get; public set; }
    public IViewModelProvider ParentViewModelProvider { get; public set; }
    public FilteringUIViewModelProvider(IServiceProvider serviceProvider);
    protected virtual Type GetSourceType();
    public sealed virtual Type get_SourceType();
    public sealed virtual void set_SourceType(Type value);
    protected virtual void OnSourceTypeChanged();
    protected virtual IEnumerable`1<IEndUserFilteringMetricAttributes> GetAttributes();
    public sealed virtual IEnumerable`1<IEndUserFilteringMetricAttributes> get_Attributes();
    public sealed virtual void set_Attributes(IEnumerable`1<IEndUserFilteringMetricAttributes> value);
    protected virtual void OnAttributesChanged();
    protected virtual void OnModelChanged();
    public sealed virtual Type get_ViewModelBaseType();
    public sealed virtual void set_ViewModelBaseType(Type value);
    protected sealed virtual Type GetViewModelBaseType();
    protected virtual void OnViewModelBaseTypeChanged();
    public sealed virtual object get_ParentViewModel();
    public sealed virtual void set_ParentViewModel(object value);
    protected sealed virtual object GetParentViewModel();
    protected virtual void OnParentViewModelChanged(object oldValue, object newValue);
    private void SubscribeParentViewModel(object parentViewModel);
    private void UnsubscribeParentViewModel(object parentViewModel);
    private void ParentViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e);
    public sealed virtual IViewModelProvider get_ParentViewModelProvider();
    public sealed virtual void set_ParentViewModelProvider(IViewModelProvider value);
    protected virtual void OnParentViewModelProviderChanged(IViewModelProvider oldValue, IViewModelProvider newValue);
    protected void UpdateParentViewModel(IViewModelProvider provider);
    private void SubscribeParentViewModelProvider(IViewModelProvider viewModelProvider);
    private void UnsubscribeParentViewModelProvider(IViewModelProvider viewModelProvider);
    private void ParentViewModelProvider_ViewModelChanged(object sender, EventArgs e);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.UpdateMemberBindings(string path);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider.RetrieveFields(Action`1<Type> retrieveFields, Type sourceType, IEnumerable`1<IEndUserFilteringMetricAttributes> attributes, Type viewModelBaseType);
    [CompilerGeneratedAttribute]
private void <SubscribeParentViewModel>b__26_0(INotifyPropertyChanged npc);
    [CompilerGeneratedAttribute]
private void <UnsubscribeParentViewModel>b__27_0(INotifyPropertyChanged npc);
    [CompilerGeneratedAttribute]
private void <UpdateParentViewModel>b__34_0(IViewModelProvider vmp);
    [CompilerGeneratedAttribute]
private void <SubscribeParentViewModelProvider>b__35_0(IViewModelProvider vmp);
    [CompilerGeneratedAttribute]
private void <UnsubscribeParentViewModelProvider>b__36_0(IViewModelProvider vmp);
}
public abstract class DevExpress.Utils.Filtering.Internal.FilteringUIViewModelProviderBase : FilteringViewModelPropertyValuesProvider {
    private Lazy`1<Type> viewModelTypeCore;
    private Lazy`1<IEndUserFilteringViewModel> viewModelCore;
    private Lazy`1<CriteriaOperator> filterCriteriaCore;
    private Action`1<string> filterCriteriaChangedAction;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public Type ViewModelType { get; }
    public bool IsViewModelTypeCreated { get; }
    public object ViewModel { get; }
    public bool IsViewModelCreated { get; }
    protected Lazy`1<IEndUserFilteringViewModel> ViewModelCore { get; }
    public CriteriaOperator FilterCriteria { get; }
    protected FilteringUIViewModelProviderBase(IServiceProvider serviceProvider);
    protected virtual void ResetCore();
    protected virtual void OnApplyFilterCriteria();
    protected void ResetFilterCriteria();
    protected void ResetViewModelType();
    public sealed virtual Type get_ViewModelType();
    public sealed virtual bool get_IsViewModelTypeCreated();
    protected void ResetViewModelTypeCore();
    protected Type CreateAndInitializeViewModelType();
    protected virtual Type CreateViewModelType();
    protected virtual Type GetViewModelBaseType();
    public sealed virtual object get_ViewModel();
    public sealed virtual bool get_IsViewModelCreated();
    protected sealed virtual Lazy`1<IEndUserFilteringViewModel> get_ViewModelCore();
    protected void ResetViewModelCore();
    protected virtual object GetParentViewModel();
    protected IEndUserFilteringViewModel CreateAndInitializeViewModel();
    protected virtual IEndUserFilteringViewModel CreateViewModel();
    protected virtual void OnViewModelCreated(IEndUserFilteringViewModel viewModel);
    private void SubscribeViewModel(object viewModel);
    private void UnsubscribeViewModel(object viewModel);
    private void ViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnFilterCriteriaChanged(string path);
    public sealed virtual CriteriaOperator get_FilterCriteria();
    protected void ResetFilterCriteriaCore();
    protected CriteriaOperator CreateFilterCriteria();
    public sealed virtual void ClearFilterCriteria();
    public sealed virtual CriteriaOperator GetFilterCriteria(string path);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void RaisePropertyChanged(string propertyName);
    protected void UpdateMemberBindings();
    protected void UpdateMemberBindings(string path);
    protected Type RetrieveType(Type sourceType, IEnumerable`1<IEndUserFilteringMetricAttributes> attributes, Type viewModelBaseType);
    [CompilerGeneratedAttribute]
private void <CreateAndInitializeViewModelType>b__14_0(Type vmType);
    [CompilerGeneratedAttribute]
private Type <CreateViewModelType>b__15_0(IEndUserFilteringViewModelTypeBuilder builder);
    [CompilerGeneratedAttribute]
private void <CreateAndInitializeViewModel>b__25_0(IEndUserFilteringViewModel vm);
    [CompilerGeneratedAttribute]
private void <SubscribeViewModel>b__28_0(INotifyPropertyChanged npc);
    [CompilerGeneratedAttribute]
private void <UnsubscribeViewModel>b__29_0(INotifyPropertyChanged npc);
    [CompilerGeneratedAttribute]
private void <UpdateMemberBindings>b__42_0(object vm);
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Utils.Filtering.Internal.FilteringViewModelPropertyValuesProvider : object {
    protected IServiceProvider serviceProvider;
    private int resetting;
    private Lazy`1<IEndUserFilteringSettings> settingsCore;
    private Lazy`1<IStorage`1<IEndUserFilteringMetricViewModel>> storageCore;
    private Lazy`1<IEndUserFilteringViewModelProperties> propertiesCore;
    private Lazy`1<IEndUserFilteringViewModelBindableProperties> bindablePropertiesCore;
    private IBindablePropertiesState bindablePropertiesStateCore;
    private Lazy`1<IEndUserFilteringViewModelPropertyValues> propertyValuesCore;
    private WeakReference contextRef;
    private Dictionary`2<string, Func`1<bool>> blanksSuppressionCache;
    private Dictionary`2<string, Func`1<bool>> radioPropagationCache;
    private WeakEventHandler`2<EventArgs, EventHandler> viewModelCreated;
    protected bool IsResetting { get; }
    public IEndUserFilteringMetricViewModel Item { get; }
    public IEndUserFilteringSettings Settings { get; }
    protected IEnumerable`1<IEndUserFilteringMetricViewModel> Children { get; }
    public IEndUserFilteringViewModelProperties Properties { get; }
    protected IEnumerable`1<string> BindablePaths { get; }
    public IEndUserFilteringViewModelBindableProperties BindableProperties { get; }
    public IEndUserFilteringViewModelPropertyValues PropertyValues { get; }
    protected bool IsPropertyValuesCreated { get; }
    protected bool CanRaiseContextQuery { get; }
    private object DevExpress.Utils.MVVM.IViewModelProvider.ViewModel { get; }
    private bool DevExpress.Utils.MVVM.IViewModelProvider.IsViewModelCreated { get; }
    protected Lazy`1<IEndUserFilteringViewModel> ViewModelCore { get; }
    protected bool IsInitializingBindableProperties { get; }
    public FilteringViewModelPropertyValuesProvider(IServiceProvider serviceProvider);
    public sealed virtual void Reset();
    protected bool get_IsResetting();
    protected virtual void ResetCore();
    public sealed virtual IEndUserFilteringMetricViewModel get_Item(string path);
    protected void CheckFilterType(string path, Type type, FilterType filterType, FilterValuesType valuesType, FilterGroupType groupType, bool sortedByDisplayText);
    protected virtual void EnsureFilterTypeCore(string path);
    protected void InitializeMemberBindings(string path);
    protected virtual Type GetSourceType();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.FilteringViewModelPropertyValuesProvider/<GetAttributes>d__13")]
protected virtual IEnumerable`1<IEndUserFilteringMetricAttributes> GetAttributes();
    protected virtual void OnModelChanged();
    protected void Update();
    public sealed virtual IEndUserFilteringSettings get_Settings();
    protected void ResetSettingsCore();
    protected IEndUserFilteringSettings CreateSettings();
    protected virtual IEndUserFilteringSettings CreateSettings(Type sourceType, IEnumerable`1<IEndUserFilteringMetricAttributes> attributes);
    protected IEnumerable`1<IEndUserFilteringMetricViewModel> get_Children();
    protected void ResetStorageCore();
    protected virtual IStorage`1<IEndUserFilteringMetricViewModel> CreateStorage();
    protected virtual IStorage`1<IEndUserFilteringMetricViewModel> CreateStorage(IEnumerable`1<IEndUserFilteringMetricViewModel> children);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.FilteringViewModelPropertyValuesProvider/<GetChildren>d__28")]
protected IEnumerable`1<IEndUserFilteringMetricViewModel> GetChildren(IEndUserFilteringSettings settings);
    protected IEndUserFilteringMetricViewModel CreateMetricViewModel(IEndUserFilteringMetricViewModelFactory viewModelFactory, IEndUserFilteringMetric metric, IEndUserFilteringMetricViewModelValueBox valueBox);
    public sealed virtual IEndUserFilteringViewModelProperties get_Properties();
    protected void ResetPropertiesCore();
    protected IEndUserFilteringViewModelProperties CreateProperties();
    protected virtual IEndUserFilteringViewModelProperties CreateProperties(IEndUserFilteringSettings settings);
    protected virtual IEnumerable`1<string> get_BindablePaths();
    public sealed virtual IEndUserFilteringViewModelBindableProperties get_BindableProperties();
    protected virtual IEndUserFilteringViewModelBindableProperties CreateBindableProperties();
    protected void ResetBindablePropertiesCore();
    protected void OnBindablePropertiesInitialized();
    protected internal virtual void CheckBindableProperty(string path);
    public sealed virtual IEndUserFilteringViewModelPropertyValues get_PropertyValues();
    protected bool get_IsPropertyValuesCreated();
    protected void ResetPropertyValuesCore();
    protected void QueueFilterCriteriaChange(string path, Action`1<string> change);
    protected void UpdatePropertyValuesDataBinding(string path);
    protected IEndUserFilteringViewModelPropertyValues CreatePropertyValues();
    protected virtual IEndUserFilteringViewModelPropertyValues CreatePropertyValues(IStorage`1<IEndUserFilteringMetricViewModel> storage);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringCriteriaChangeAware.QueueFilterCriteriaChange(string path, Action`1<string> change);
    private sealed virtual override IDisposable DevExpress.Utils.Filtering.Internal.IEndUserFilteringCriteriaChangeAware.EnterFilterCriteriaChange();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelPropertyValues.EnsureValueType(string path);
    private sealed virtual override IEndUserFilteringViewModelPropertyValues DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelPropertyValues.GetNestedValues(string rootPath);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelPropertyValues.ApplyFilterCriteria(Func`1<object> getViewModel, CriteriaOperator criteria);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelPropertyValues.ApplyFilterCriteria(Func`1<object> getViewModel, string path, CriteriaOperator criteria);
    protected virtual void OnApplyFilterCriteria();
    private sealed virtual override CriteriaOperator DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelPropertyValues.QueryFilterCriteria(string path, CriteriaOperator criteria);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelPropertyValues.ParseFilterCriteria(string path, CriteriaOperator criteria);
    protected virtual CriteriaOperator QueryFilterCriteria(QueryFilterCriteriaEventArgs args);
    protected virtual bool ParseFilterCriteria(ParseFilterCriteriaEventArgs args);
    protected virtual void RaiseQueryFilterCriteria(QueryFilterCriteriaEventArgs args);
    protected virtual void RaiseParseFilterCriteria(ParseFilterCriteriaEventArgs args);
    protected virtual void RaiseContextQueryFilterCriteria(QueryFilterCriteriaEventArgs args);
    protected virtual void RaiseContextParseFilterCriteria(ParseFilterCriteriaEventArgs args);
    protected void UpdateMemberBindings(object viewModel, string propertyName);
    protected void UpdateMemberBindings(IEndUserFilteringMetricViewModel metricViewModel, object viewModel, string propertyName);
    protected void UpdateMemberBindings(string path, MetricAttributesData data);
    protected TQueryContext ResolveQueryContext();
    protected virtual void RegisterQueryContext(IMetricAttributesQueryOwner context);
    protected virtual void UnregisterQueryContext();
    protected virtual bool get_CanRaiseContextQuery();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetricAttributesQueryOwner.RegisterContext(IMetricAttributesQueryOwner queryContext);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetricAttributesQueryOwner.UnregisterContext();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetricAttributesQueryOwner.RaiseMetricAttributesQuery(TEventArgs e);
    protected virtual void RaiseMetricAttributesQuery(TEventArgs e);
    protected virtual void RaiseMetricAttributesContextQuery(TEventArgs e);
    protected virtual void RaiseRangeMetricAttributesQuery(QueryRangeDataEventArgs e);
    protected virtual void RaiseLookupMetricAttributesQuery(QueryLookupDataEventArgs e);
    protected virtual void RaiseBooleanChoiceMetricAttributesQuery(QueryBooleanChoiceDataEventArgs e);
    protected virtual void RaiseEnumChoiceMetricAttributesQuery(QueryEnumChoiceDataEventArgs e);
    protected virtual void RaiseGroupMetricAttributesQuery(QueryGroupDataEventArgs e);
    protected void CheckSuppressBlanks(string path, Func`1<bool> getSuppressBlanks);
    protected void SetupDisplayBlanks(MetricAttributesData data, string path);
    private bool GetSuppressBlanks(string path);
    protected void CheckForceRadio(string path, Func`1<bool> getForceRadio);
    protected internal void SetupDisplayRadio(MetricAttributesData data, string path);
    private bool GetForceRadio(string path);
    public void ResetDisplayOptions();
    private sealed virtual override IEnumerator`1<IEndUserFilteringMetricViewModel> System.Collections.Generic.IEnumerable<DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricViewModel>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    protected TService GetService();
    protected void RegisterService(TService service);
    private sealed virtual override object DevExpress.Utils.MVVM.IViewModelProvider.get_ViewModel();
    private sealed virtual override bool DevExpress.Utils.MVVM.IViewModelProvider.get_IsViewModelCreated();
    private sealed virtual override void DevExpress.Utils.MVVM.IViewModelProvider.add_ViewModelChanged(EventHandler value);
    private sealed virtual override void DevExpress.Utils.MVVM.IViewModelProvider.remove_ViewModelChanged(EventHandler value);
    protected abstract virtual Lazy`1<IEndUserFilteringViewModel> get_ViewModelCore();
    protected IEndUserFilteringViewModel GetViewModelCore(Lazy`1<IEndUserFilteringViewModel> lazy);
    protected virtual void OnViewModelCreated(IEndUserFilteringViewModel viewModel);
    protected void RaiseViewModelChanged();
    protected Func`1<IServiceProvider> GetGetContextServiceProvider();
    protected virtual bool get_IsInitializingBindableProperties();
    protected virtual object GetViewModelForBindableProperties();
    protected IEndUserFilteringMetricViewModelValueBox CreateEndUserFilteringMetricViewModelValueBox(IEndUserFilteringMetric metric);
    [CompilerGeneratedAttribute]
private IServiceProvider <GetGetContextServiceProvider>b__119_0();
}
public class DevExpress.Utils.Filtering.Internal.FilterLookupEditorSettings : FilterEditorSettingsBase`1<LookupUIEditorType> {
    public FilterLookupEditorSettings(LookupUIEditorType editorType);
}
public class DevExpress.Utils.Filtering.Internal.FilterPropertyAttribute : FilterAttribute {
    [CompilerGeneratedAttribute]
private bool <IsFilterProperty>k__BackingField;
    public bool IsFilterProperty { get; private set; }
    public FilterPropertyAttribute(bool isFilterProperty);
    [CompilerGeneratedAttribute]
public bool get_IsFilterProperty();
    [CompilerGeneratedAttribute]
private void set_IsFilterProperty(bool value);
}
internal static class DevExpress.Utils.Filtering.Internal.FilterPropertyAttributeBuilder : object {
    private static ConstructorInfo attributeCtor;
    private static FilterPropertyAttributeBuilder();
    internal static CustomAttributeBuilder Build(IEndUserFilteringMetric metric);
    internal static CustomAttributeBuilder Build(bool isFilterProperty);
}
public class DevExpress.Utils.Filtering.Internal.FilterRangeEditorSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<RangeUIEditorType> <NumericEditorType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeRangeUIEditorType> <DateTimeEditorType>k__BackingField;
    public Nullable`1<RangeUIEditorType> NumericEditorType { get; private set; }
    public Nullable`1<DateTimeRangeUIEditorType> DateTimeEditorType { get; private set; }
    public FilterRangeEditorSettings(RangeUIEditorType editorType);
    public FilterRangeEditorSettings(DateTimeRangeUIEditorType editorType);
    [CompilerGeneratedAttribute]
public Nullable`1<RangeUIEditorType> get_NumericEditorType();
    [CompilerGeneratedAttribute]
private void set_NumericEditorType(Nullable`1<RangeUIEditorType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeRangeUIEditorType> get_DateTimeEditorType();
    [CompilerGeneratedAttribute]
private void set_DateTimeEditorType(Nullable`1<DateTimeRangeUIEditorType> value);
}
public enum DevExpress.Utils.Filtering.Internal.FilterType : Enum {
    public int value__;
    public static FilterType Default;
    public static FilterType Value;
    public static FilterType Text;
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
internal abstract class DevExpress.Utils.Filtering.Internal.FilterUIElement`1 : LocalizableUIElement`1<TUIElementID> {
    protected Func`1<IServiceProvider> getServiceProvider;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    protected FilterUIElement`1(TUIElementID id, Func`1<IServiceProvider> getServiceProvider);
    protected TService GetService();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    protected virtual object GetServiceCore(Type serviceType);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void RaisePropertyChanged(string propertyName);
}
public class DevExpress.Utils.Filtering.Internal.FilterUIElementLocalizer : XtraLocalizer`1<FilterUIElementLocalizerStringId> {
    public static XtraLocalizer`1<FilterUIElementLocalizerStringId> Active { get; public set; }
    private static FilterUIElementLocalizer();
    public static XtraLocalizer`1<FilterUIElementLocalizerStringId> CreateDefaultLocalizer();
    public static XtraLocalizer`1<FilterUIElementLocalizerStringId> get_Active();
    public static void set_Active(XtraLocalizer`1<FilterUIElementLocalizerStringId> value);
    public static string GetString(FilterUIElementLocalizerStringId id);
    public virtual XtraLocalizer`1<FilterUIElementLocalizerStringId> CreateResXLocalizer();
    protected virtual void PopulateStringTable();
}
public enum DevExpress.Utils.Filtering.Internal.FilterUIElementLocalizerStringId : Enum {
    public int value__;
    public static FilterUIElementLocalizerStringId CustomUIFiltersNumericName;
    public static FilterUIElementLocalizerStringId CustomUIFiltersNumericDescription;
    public static FilterUIElementLocalizerStringId CustomUIFiltersDateTimeName;
    public static FilterUIElementLocalizerStringId CustomUIFiltersDateTimeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFiltersDurationName;
    public static FilterUIElementLocalizerStringId CustomUIFiltersDurationDescription;
    public static FilterUIElementLocalizerStringId CustomUIFiltersTimeName;
    public static FilterUIElementLocalizerStringId CustomUIFiltersTimeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFiltersTextName;
    public static FilterUIElementLocalizerStringId CustomUIFiltersTextDescription;
    public static FilterUIElementLocalizerStringId CustomUIFiltersBooleanName;
    public static FilterUIElementLocalizerStringId CustomUIFiltersBooleanDescription;
    public static FilterUIElementLocalizerStringId CustomUIFiltersEnumName;
    public static FilterUIElementLocalizerStringId CustomUIFiltersEnumDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterEqualsName;
    public static FilterUIElementLocalizerStringId CustomUIFilterEqualsDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotEqualName;
    public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotEqualDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterBetweenName;
    public static FilterUIElementLocalizerStringId CustomUIFilterBetweenDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsNullName;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsNullDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsNotNullName;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsNotNullDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterGreaterThanName;
    public static FilterUIElementLocalizerStringId CustomUIFilterGreaterThanDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterGreaterThanOrEqualToName;
    public static FilterUIElementLocalizerStringId CustomUIFilterGreaterThanOrEqualToDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterLessThanName;
    public static FilterUIElementLocalizerStringId CustomUIFilterLessThanDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterLessThanOrEqualToName;
    public static FilterUIElementLocalizerStringId CustomUIFilterLessThanOrEqualToDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterTopNName;
    public static FilterUIElementLocalizerStringId CustomUIFilterTopNDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterBottomNName;
    public static FilterUIElementLocalizerStringId CustomUIFilterBottomNDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterSequenceQualifierItemsName;
    public static FilterUIElementLocalizerStringId CustomUIFilterSequenceQualifierItemsDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterSequenceQualifierPercentsName;
    public static FilterUIElementLocalizerStringId CustomUIFilterSequenceQualifierPercentsDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterAboveAverageName;
    public static FilterUIElementLocalizerStringId CustomUIFilterAboveAverageDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterBelowAverageName;
    public static FilterUIElementLocalizerStringId CustomUIFilterBelowAverageDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterInRangeName;
    public static FilterUIElementLocalizerStringId CustomUIFilterInRangeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterBeginsWithName;
    public static FilterUIElementLocalizerStringId CustomUIFilterBeginsWithDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterEndsWithName;
    public static FilterUIElementLocalizerStringId CustomUIFilterEndsWithDescription;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotBeginsWithName;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotBeginsWithDescription;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotEndsWithName;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotEndsWithDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterContainsName;
    public static FilterUIElementLocalizerStringId CustomUIFilterContainsDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotContainName;
    public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotContainDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsBlankName;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsBlankDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsNotBlankName;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsNotBlankDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterLikeName;
    public static FilterUIElementLocalizerStringId CustomUIFilterLikeDescription;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static FilterUIElementLocalizerStringId CustomUIFilterNotLikeName;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static FilterUIElementLocalizerStringId CustomUIFilterNotLikeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsSameDayName;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsSameDayDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterBeforeName;
    public static FilterUIElementLocalizerStringId CustomUIFilterBeforeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterAfterName;
    public static FilterUIElementLocalizerStringId CustomUIFilterAfterDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterInDateRangeName;
    public static FilterUIElementLocalizerStringId CustomUIFilterInDateRangeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterTomorrowName;
    public static FilterUIElementLocalizerStringId CustomUIFilterTomorrowDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterTodayName;
    public static FilterUIElementLocalizerStringId CustomUIFilterTodayDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterYesterdayName;
    public static FilterUIElementLocalizerStringId CustomUIFilterYesterdayDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextWeekName;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextWeekDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisWeekName;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisWeekDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastWeekName;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastWeekDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextMonthName;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextMonthDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisMonthName;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisMonthDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastMonthName;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastMonthDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextQuarterName;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextQuarterDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisQuarterName;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisQuarterDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastQuarterName;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastQuarterDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextYearName;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextYearDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisYearName;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisYearDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastYearName;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastYearDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterBeforeMiddayName;
    public static FilterUIElementLocalizerStringId CustomUIFilterBeforeMiddayDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterAfterMiddayName;
    public static FilterUIElementLocalizerStringId CustomUIFilterAfterMiddayDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastHourName;
    public static FilterUIElementLocalizerStringId CustomUIFilterLastHourDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisHourName;
    public static FilterUIElementLocalizerStringId CustomUIFilterThisHourDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextHourName;
    public static FilterUIElementLocalizerStringId CustomUIFilterNextHourDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterMorningName;
    public static FilterUIElementLocalizerStringId CustomUIFilterMorningDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterAfternoonName;
    public static FilterUIElementLocalizerStringId CustomUIFilterAfternoonDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterEveningName;
    public static FilterUIElementLocalizerStringId CustomUIFilterEveningDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterNightName;
    public static FilterUIElementLocalizerStringId CustomUIFilterNightDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterWorkTimeName;
    public static FilterUIElementLocalizerStringId CustomUIFilterWorkTimeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterFreeTimeName;
    public static FilterUIElementLocalizerStringId CustomUIFilterFreeTimeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterLunchTimeName;
    public static FilterUIElementLocalizerStringId CustomUIFilterLunchTimeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterYearToDateName;
    public static FilterUIElementLocalizerStringId CustomUIFilterYearToDateDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterDatePeriodsName;
    public static FilterUIElementLocalizerStringId CustomUIFilterDatePeriodsDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterTimePeriodsName;
    public static FilterUIElementLocalizerStringId CustomUIFilterTimePeriodsDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterAllDatesInThePeriodName;
    public static FilterUIElementLocalizerStringId CustomUIFilterAllDatesInThePeriodDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterQuarter1Name;
    public static FilterUIElementLocalizerStringId CustomUIFilterQuarter1Description;
    public static FilterUIElementLocalizerStringId CustomUIFilterQuarter2Name;
    public static FilterUIElementLocalizerStringId CustomUIFilterQuarter2Description;
    public static FilterUIElementLocalizerStringId CustomUIFilterQuarter3Name;
    public static FilterUIElementLocalizerStringId CustomUIFilterQuarter3Description;
    public static FilterUIElementLocalizerStringId CustomUIFilterQuarter4Name;
    public static FilterUIElementLocalizerStringId CustomUIFilterQuarter4Description;
    public static FilterUIElementLocalizerStringId CustomUIFilterJanuaryName;
    public static FilterUIElementLocalizerStringId CustomUIFilterJanuaryDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterFebruaryName;
    public static FilterUIElementLocalizerStringId CustomUIFilterFebruaryDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterMarchName;
    public static FilterUIElementLocalizerStringId CustomUIFilterMarchDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterAprilName;
    public static FilterUIElementLocalizerStringId CustomUIFilterAprilDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterMayName;
    public static FilterUIElementLocalizerStringId CustomUIFilterMayDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterJuneName;
    public static FilterUIElementLocalizerStringId CustomUIFilterJuneDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterJulyName;
    public static FilterUIElementLocalizerStringId CustomUIFilterJulyDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterAugustName;
    public static FilterUIElementLocalizerStringId CustomUIFilterAugustDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterSeptemberName;
    public static FilterUIElementLocalizerStringId CustomUIFilterSeptemberDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterOctoberName;
    public static FilterUIElementLocalizerStringId CustomUIFilterOctoberDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterNovemberName;
    public static FilterUIElementLocalizerStringId CustomUIFilterNovemberDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterDecemberName;
    public static FilterUIElementLocalizerStringId CustomUIFilterDecemberDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsSameTimeName;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsSameTimeDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsSameHourName;
    public static FilterUIElementLocalizerStringId CustomUIFilterIsSameHourDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterNoneName;
    public static FilterUIElementLocalizerStringId CustomUIFilterNoneDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterCustomName;
    public static FilterUIElementLocalizerStringId CustomUIFilterCustomDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterUserName;
    public static FilterUIElementLocalizerStringId CustomUIFilterUserDescription;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptChooseOne;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptEnterADate;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptEnterADuration;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptEnterATime;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptSelectAValue;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptEnterAValue;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptSelectADate;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptSelectADuration;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptSelectATime;
    public static FilterUIElementLocalizerStringId CustomUINullValuePromptSearchControl;
    public static FilterUIElementLocalizerStringId CustomUIFirstLabel;
    public static FilterUIElementLocalizerStringId CustomUISecondLabel;
    public static FilterUIElementLocalizerStringId FilteringUITabValues;
    public static FilterUIElementLocalizerStringId FilteringUITabGroups;
    public static FilterUIElementLocalizerStringId FilteringUIClearFilter;
    public static FilterUIElementLocalizerStringId FilteringUIClose;
    public static FilterUIElementLocalizerStringId FilteringUISearchByYearCaption;
    public static FilterUIElementLocalizerStringId FilteringUISearchByMonthCaption;
    public static FilterUIElementLocalizerStringId FilteringUISearchByDayCaption;
    public static FilterUIElementLocalizerStringId FilteringUIMoreButtonCaption;
    public static FilterUIElementLocalizerStringId FilteringUIFewerButtonCaption;
    public static FilterUIElementLocalizerStringId CustomUIValueLabel;
    public static FilterUIElementLocalizerStringId CustomUITypeLabel;
    public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotBeginWithName;
    public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotBeginWithDescription;
    public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotEndWithName;
    public static FilterUIElementLocalizerStringId CustomUIFilterDoesNotEndWithDescription;
}
public class DevExpress.Utils.Filtering.Internal.FilterUIElementResXLocalizer : XtraResXLocalizer`1<FilterUIElementLocalizerStringId> {
    private static string baseName;
    protected virtual ResourceManager CreateResourceManagerCore();
}
public enum DevExpress.Utils.Filtering.Internal.FilterValuesType : Enum {
    public int value__;
    public static FilterValuesType Default;
    public static FilterValuesType Range;
    public static FilterValuesType List;
}
internal static class DevExpress.Utils.Filtering.Internal.FNV1a : object {
    private static int Prime;
    public static int Basis;
    public static int NotLoaded;
    public static int NullObject;
    private static FNV1a();
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static int Next(int hashCode, object value);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static int Create(Object[] values);
    private static int NextInt(int hash, int value);
    private static int NextOctet(int hash, int octet);
}
internal static class DevExpress.Utils.Filtering.Internal.GenericTypeHelper : object {
    private static ConcurrentDictionary`2<Type, bool> genericTypes;
    private static Func`2<Type, bool> getIsGenericType;
    private static GenericTypeHelper();
    internal static Type GetElementType(Type dataSorceType);
    private static Type FindTypeDefinition(Type type, Predicate`1<Type> match);
    private static Type[] FindGenericArguments(Type type, Predicate`1<Type> match);
    private static bool IsGenericType(Type type);
}
public static class DevExpress.Utils.Filtering.Internal.GroupCriteria : object {
    public static OperandValue NullValue;
    public static OperandValue BlanksValue;
    private static GroupCriteria();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static bool IsNullValue(object value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static bool IsNullValue(OperandValue value, Object& nullValue);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static CriteriaOperator Parent(String[] grouping, Type[] groupingTypes, Object[] path);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static CriteriaOperator Branch(String[] grouping, Type[] groupingTypes, Object[] path, Object[] values, int level, bool useInversion);
    public static CriteriaOperator Get(String[] grouping, CriteriaOperator criteria, CriteriaOperator nonColumnCriteria);
    public static void Set(TOwner owner, String[] grouping, string origin, CriteriaOperator criteria, Action`3<TOwner, string, CriteriaOperator> setter);
    private static CriteriaOperator GetEquals(Type type, OperandProperty prop, object value, bool useInversion);
    private static CriteriaOperator GetIn(Type type, OperandProperty prop, Object[] values, bool useInversion);
    private static CriteriaOperator GetEqual(OperandProperty prop, OperandValue value, bool useInversion);
    private static CriteriaOperator GetIsSameDay(OperandProperty prop, OperandValue value, bool useInversion);
    private static CriteriaOperator GetIsNull(OperandProperty prop, bool isString, bool useInversion);
    public static CriteriaOperator ReduceBranches(String[] grouping, IEnumerable`1<CriteriaOperator> treeFilters, int count);
    public static CriteriaOperator ReduceBranches(String[] grouping, IEnumerable`1<CriteriaOperator> treeFilters);
}
internal class DevExpress.Utils.Filtering.Internal.GroupIndices : HashTreeIndices {
    private Action queryVisualUpdate;
    public GroupIndices(Func`1<bool> rootVisibility, Action queryVisualUpdate);
    protected sealed virtual void OnExpanded();
    public void Load(int key, Object[] level, bool createChildren, Action`3<int, int, int> onEntryCreated, Action`1<int> onEntryRemoved);
    public object GetValue(int index, Int32& group, IDictionary`2<int, Object[]> valuesCache, IDictionary`2<int, GroupValue> groupsCache, object root);
    public object Find(int index, Func`3<int, int, object> accessor);
}
internal class DevExpress.Utils.Filtering.Internal.GroupValue : GroupValueBase {
    private int key;
    private int parent;
    private int index;
    private int level;
    public int Key { get; }
    public int Level { get; }
    public object Value { get; }
    internal GroupValue(int key, int parent, int index, int level);
    public sealed virtual int get_Key();
    public sealed virtual int get_Level();
    public sealed virtual object get_Value();
    public sealed virtual string ToString();
}
internal abstract class DevExpress.Utils.Filtering.Internal.GroupValueBase : object {
    internal IGroupValuesSource source;
    public int Key { get; }
    public int Level { get; }
    public object Value { get; }
    public abstract virtual int get_Key();
    public abstract virtual int get_Level();
    public abstract virtual object get_Value();
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Utils.Filtering.Internal.GroupValueBox`1 : ValueViewModel {
    private IGroupValues groupValues;
    private String[] cachedGrouping;
    private Type[] cachedGroupingTypes;
    public IGroupValues GroupValues { get; }
    public ICheckedGroupValues CheckedGroupValues { get; }
    protected IGroupMetricAttributes MetricAttributes { get; }
    protected bool AllowNull { get; }
    [BrowsableAttribute("False")]
public bool UseSelectAll { get; }
    [BrowsableAttribute("False")]
public bool UseRadioSelection { get; }
    [BrowsableAttribute("False")]
public string SelectAllName { get; }
    [BrowsableAttribute("False")]
public string NullName { get; }
    [BrowsableAttribute("False")]
public String[] Grouping { get; }
    [BrowsableAttribute("False")]
public Type[] GroupingTypes { get; }
    public sealed virtual IGroupValues get_GroupValues();
    public ICheckedGroupValues get_CheckedGroupValues();
    protected virtual void OnGroupValuesChanded();
    protected sealed virtual void ResetCore();
    protected sealed virtual bool CanResetCore();
    protected IGroupMetricAttributes get_MetricAttributes();
    protected sealed virtual bool get_AllowNull();
    public sealed virtual bool get_UseSelectAll();
    public sealed virtual bool get_UseRadioSelection();
    public sealed virtual string get_SelectAllName();
    public sealed virtual string get_NullName();
    public sealed virtual String[] get_Grouping();
    public Type[] get_GroupingTypes();
    protected sealed virtual void OnInitialized();
    protected sealed virtual void OnReleasing();
    protected sealed virtual void OnMetricAttributesSpecialMemberChanged(string propertyName);
    private bool RadioModeQuery();
    private bool RootVisibilityQuery();
    private string RootTextQuery();
    private void OnGroupValuesQuery(Object[] path);
    private void OnGroupValuesLoaded(object sender, GroupValuesLoadedEventArgs e);
    private void OnGroupValuesChecked(object sender, GroupValuesCheckedEventArgs e);
    private void LoadGroupValues();
    private sealed virtual override CriteriaOperator DevExpress.Utils.Filtering.Internal.IFilterValueViewModel.CreateFilterCriteria();
    private static String[] EnsureNullText(String[] texts, string nullText);
    private static string GetParent(String[] grouping, Object[] path);
    protected sealed virtual void BeforeParseCore(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected sealed virtual bool TryParseCore(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected virtual IGroupValuesParser CreateParser();
    [CompilerGeneratedAttribute]
private CriteriaOperator <DevExpress.Utils.Filtering.Internal.IFilterValueViewModel.CreateFilterCriteria>b__37_0(GroupValuesInterval<T> x);
}
internal class DevExpress.Utils.Filtering.Internal.GroupValues : object {
    private EventHandlerList Events;
    private IGroupValuesCache Cache;
    private IHashTreeChecks groupChecks;
    private IHashTreeChecks groupRadios;
    private HashSet`1<int> checks;
    private Dictionary`2<int, ICheckedGroup> delayedChecks;
    private HashSet`1<int> delayedCheckedGroups;
    private Func`1<bool> isRadioMode;
    private bool isDisposing;
    private static object query;
    private static object loaded;
    private static object checked;
    private static object visualUpdateRequired;
    private GroupValuesCheckedEventArgs CheckedArgs;
    private HashSet`1<int> expandedGroups;
    private IGroupValuesSource GroupValuesSource { get; }
    private int DevExpress.Utils.Filtering.Internal.IGroupValues.Count { get; }
    private object DevExpress.Utils.Filtering.Internal.IGroupValues.Item { get; }
    private int DevExpress.Utils.Filtering.Internal.IGroupValues.Depth { get; }
    private bool DevExpress.Utils.Filtering.Internal.IGroupValues.HasValue { get; }
    private bool DevExpress.Utils.Filtering.Internal.ICheckedGroupValues.HasDelayedFilters { get; }
    private IVisibleItemsSource VisibleItems { get; }
    private int DevExpress.Utils.Filtering.Internal.IExpandableGroups.VisibleItemsCount { get; }
    private IHashTreeChecks HashTreeChecks { get; }
    public GroupValues(Nullable`1<int> depth, Action`1<Object[]> groupValuesQuery, Func`1<bool> radioModeQuery, Func`1<string> rootTextQuery, Func`1<bool> rootVisibilityQuery);
    private static GroupValues();
    private sealed virtual override void System.IDisposable.Dispose();
    private void ClearChecks();
    private IGroupValuesSource get_GroupValuesSource();
    private sealed virtual override Nullable`1<int> DevExpress.Utils.Filtering.Internal.IGroupValues.GetParent(int group);
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IGroupValues.GetIndex(int group);
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IGroupValues.get_Count();
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IGroupValues.get_Item(int index);
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IGroupValues.GetValue(int index, Int32& group);
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IGroupValues.get_Depth();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IGroupValues.get_HasValue();
    private sealed virtual override Nullable`1<bool> DevExpress.Utils.Filtering.Internal.IGroupValues.IsChecked(object value, Nullable`1<int> group);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.ICheckedGroupValues.get_HasDelayedFilters();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.GroupValues/<DevExpress-Utils-Filtering-Internal-ICheckedGroupValues-GetDelayedFilters>d__28`1")]
private sealed virtual override IEnumerable`1<CriteriaOperator> DevExpress.Utils.Filtering.Internal.ICheckedGroupValues.GetDelayedFilters(String[] grouping, Type[] groupingTypes);
    private sealed virtual override IEnumerable`1<int> DevExpress.Utils.Filtering.Internal.ICheckedGroupValues.GetIndices();
    private sealed virtual override ICheckedValuesEnumerator DevExpress.Utils.Filtering.Internal.ICheckedGroupValues.GetEnumerator();
    private sealed virtual override IEnumerator`1<IGrouping`2<int, object>> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<System.Int32,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValues.Reset();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValues.Invert();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValues.ToggleAll();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValues.Toggle(object value, Nullable`1<int> group);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IGroupValues.Load(Object[] level, Nullable`1<int> group, Nullable`1<int> depth, String[] texts);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.ICheckedGroupValues.Prepare();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.ICheckedGroupValues.Initialize(ICheckedGroup value);
    private void OnQueryComplete(int group, Object[] level);
    private void ResetChecksAndExpandedState(int key, Object[] values);
    internal bool IsValueChecked(object value, int group);
    private int GetValueKey(object value, int key);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IGroupValues.IsLoaded(Object[] path);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValues.QueryLoad(int group);
    private void QueryLoadCore(int group);
    internal Object[] GetPath(int group);
    internal Object[] GetValue(int group, IList`1<object> values, Boolean& useInversion);
    private Object[] GetInvertedValues(IList`1<object> values, Object[] level);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValues.add_Loaded(EventHandler`1<GroupValuesLoadedEventArgs> value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValues.remove_Loaded(EventHandler`1<GroupValuesLoadedEventArgs> value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValues.add_VisualUpdateRequired(EventHandler value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValues.remove_VisualUpdateRequired(EventHandler value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.ICheckedGroupValues.add_Checked(EventHandler`1<GroupValuesCheckedEventArgs> value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.ICheckedGroupValues.remove_Checked(EventHandler`1<GroupValuesCheckedEventArgs> value);
    private void RaiseQuery(int group);
    private void RaiseLoaded(int group, Object[] level);
    private void RaiseCheckedChanged();
    private void RaiseVisualUpdateRequired();
    private GroupValuesLoadedEventArgs GetLoadedArgs(int group, Object[] level);
    private IVisibleItemsSource get_VisibleItems();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IExpandableGroups.IsExpanded(int group);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IExpandableGroups.ChangeState(int group);
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IExpandableGroups.GetIndex(int visibleIndex);
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IExpandableGroups.GetVisibleIndex(int index);
    private sealed virtual override IEnumerator`1<int> DevExpress.Utils.Filtering.Internal.IExpandableGroups.GetVisibleIndices(int index);
    private sealed virtual override IEnumerator`1<int> DevExpress.Utils.Filtering.Internal.IExpandableGroups.GetVisibleIndicesInverted(int index);
    private sealed virtual override IEnumerable`1<int> DevExpress.Utils.Filtering.Internal.IExpandableGroups.GetVisibleIndices(IEnumerable`1<int> indexes);
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IExpandableGroups.get_VisibleItemsCount();
    private IHashTreeChecks get_HashTreeChecks();
}
internal class DevExpress.Utils.Filtering.Internal.GroupValuesCache : object {
    private IGrouping`2<int, object> Root;
    private Func`2<int, bool> isExpanded;
    private Func`1<string> rootText;
    internal GroupIndices indices;
    private Nullable`1<int> depthCore;
    private Dictionary`2<int, Object[]> values;
    private Dictionary`2<int, String[]> displayTexts;
    private Dictionary`2<int, GroupValue> groups;
    public int Depth { get; }
    private Object[] DevExpress.Utils.Filtering.Internal.IGroupValuesCache.Item { get; }
    private int DevExpress.Utils.Filtering.Internal.IGroupValuesSource.Count { get; }
    private object DevExpress.Utils.Filtering.Internal.IGroupValuesSource.Item { get; }
    private int DevExpress.Utils.Filtering.Internal.IVisibleItemsSource.Count { get; }
    internal GroupValuesCache(Nullable`1<int> depth, Func`2<int, bool> isExpanded, Func`1<string> rootText, Func`1<bool> rootVisibility, Action queryUpdate);
    private sealed virtual override void System.IDisposable.Dispose();
    private void ResetCaches();
    public sealed virtual int get_Depth();
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IGroupValuesCache.GetIndex(int group);
    private sealed virtual override Nullable`1<int> DevExpress.Utils.Filtering.Internal.IGroupValuesCache.GetParent(int group);
    private sealed virtual override Object[] DevExpress.Utils.Filtering.Internal.IGroupValuesCache.GetPath(int group);
    private sealed virtual override Object[] DevExpress.Utils.Filtering.Internal.IGroupValuesCache.get_Item(int key);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IGroupValuesCache.IsLoaded(int key);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IGroupValuesCache.TryGetValue(int key, Object[]& level);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IGroupValuesCache.Reload(int key, Object[] level, Nullable`1<int> depth, String[] texts);
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private IEnumerator`1<object> GetEnumeratorCore();
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IGroupValuesSource.get_Count();
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IGroupValuesSource.get_Item(int index);
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IGroupValuesSource.GetValue(int index, Int32& group);
    private object GetGroupValueByIndex(int group, int index);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.GroupValuesCache/<DevExpress-Utils-Filtering-Internal-IGroupValuesSource-Groups>d__29")]
private sealed virtual override IEnumerator`1<IGrouping`2<int, object>> DevExpress.Utils.Filtering.Internal.IGroupValuesSource.Groups();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.GroupValuesCache/<DevExpress-Utils-Filtering-Internal-IGroupValuesSource-Values>d__30")]
private sealed virtual override IEnumerator`1<object> DevExpress.Utils.Filtering.Internal.IGroupValuesSource.Values(int key, int level);
    private sealed virtual override ICheckedValuesEnumerator DevExpress.Utils.Filtering.Internal.IGroupValuesSource.Values(Func`2<int, bool> isChecked);
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IGroupValuesSource.GetValue(int key, int index);
    private sealed virtual override string DevExpress.Utils.Filtering.Internal.IGroupValuesSource.GetText(int key, int index);
    private void InitializeLevel(int key, int level, Object[] children);
    private GroupValue CreateGroupValue(int level, int key, int parent, int index);
    private bool ResetLevels(int key);
    private bool ResetLevels(int key, Object[] level);
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IVisibleItemsSource.get_Count();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IVisibleItemsSource.Expand(int group);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
private sealed virtual override IEnumerator`1<int> DevExpress.Utils.Filtering.Internal.IVisibleItemsSource.Indices(int index, bool forwardDirection);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
private sealed virtual override int DevExpress.Utils.Filtering.Internal.IVisibleItemsSource.GetIndex(int index, bool returnSourceIndex);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
private sealed virtual override IEnumerable`1<int> DevExpress.Utils.Filtering.Internal.IVisibleItemsSource.Indices(IEnumerable`1<int> indexes);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.GroupValuesCache/<DevExpress-Utils-Filtering-Internal-IVisibleItemsSource-Indices>d__45")]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
private sealed virtual override IEnumerable`1<int> DevExpress.Utils.Filtering.Internal.IVisibleItemsSource.Indices(HashSet`1<int> groups);
    private IEnumerator`1<int> GetGroupValuesEnumerator(HashSet`1<int> groups);
    private int GetGroupKey(int key, int parentKey, int childIndex);
    private int GetGroupValueKey(int key, int index, int childIndex);
}
public class DevExpress.Utils.Filtering.Internal.GroupValuesCheckedEventArgs : EventArgs {
    private ICheckedGroupValues checkedValues;
    public GroupValuesCheckedEventArgs(ICheckedGroupValues checkedValues);
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Utils.Filtering.Internal.GroupValuesLoadedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <GroupIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int GroupIndex { get; private set; }
    public int Count { get; private set; }
    public GroupValuesLoadedEventArgs(int index, int count);
    [CompilerGeneratedAttribute]
public int get_GroupIndex();
    [CompilerGeneratedAttribute]
private void set_GroupIndex(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
}
internal class DevExpress.Utils.Filtering.Internal.GroupValuesParser`1 : object {
    private String[] grouping;
    private Type[] groupingTypes;
    private Nullable`1<bool> intervalsValid;
    private IList`1<Interval<T>> intervals;
    private int level;
    private int key;
    private int valueKey;
    private Interval<T> interval;
    private Interval<T> branchRoot;
    private Dictionary`2<int, Interval<T>> branch;
    private Nullable`1<int> branchLevel;
    private bool InvalidCore;
    private IList`1<Interval<T>> parents;
    private Nullable`1<int> inversionCounter;
    private HashSet`1<int> consequentValues;
    private Stack`1<GroupOperatorType> groupTypes;
    private bool DevExpress.Utils.Filtering.Internal.IGroupValuesParser.Invalid { get; }
    private bool InversionQueued { get; }
    private Nullable`1<GroupOperatorType> CurrentGroupType { get; }
    public GroupValuesParser`1(String[] grouping, Type[] groupingTypes);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IGroupValuesParser.get_Invalid();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IGroupValuesParser.Accept(Action`1<ICheckedGroup> visit);
    private sealed virtual override void DevExpress.Data.Filtering.IClientCriteriaVisitor.Visit(OperandProperty theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(OperandValue theOperand);
    private bool TryGetValue(OperandValue theOperand, Object& typedValue);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(GroupOperator theOperator);
    private void RestoreRoot();
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BinaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(InOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(UnaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(FunctionOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BetweenOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.IClientCriteriaVisitor.Visit(AggregateOperand theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.IClientCriteriaVisitor.Visit(JoinOperand theOperand);
    private void MarkAsInvalid();
    private bool ValidateValues(Interval<T> interval);
    private bool ValidateIntervals(Interval[] intervals);
    private bool ValidateParentValues(Interval<T> interval);
    private bool ValidateParentValues(int level, GroupOperatorType type);
    private void CheckIsInverted(Interval<T> interval);
    private bool get_InversionQueued();
    private void QueueInversion(int count);
    private void QueueInversion();
    private void QueueInversionForNextValue();
    private Nullable`1<GroupOperatorType> get_CurrentGroupType();
}
internal abstract class DevExpress.Utils.Filtering.Internal.HashTreeChecks : HashTreeChecksBase {
    protected HashTreeChecks(HashSet`1<int> checks, Dictionary`2<int, ICheckedGroup> delayedChecks, HashSet`1<int> delayedCheckedGroups);
    private sealed virtual override Nullable`1<bool> DevExpress.Utils.Filtering.Internal.IHashTreeChecks.IsChecked(int key, int valueKey);
    private bool IsParentChecked(int key);
    private bool AreAnyChildrenChecked(int group, int depthLimit);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IHashTreeChecks.ToggleAll();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IHashTreeChecks.Toggle(int key, int valueKey);
    private bool ToggleRoot(int valueKey);
    private void CheckLevel(int key);
    private void EnsureLevelChecked(int group);
    private bool EnsureLevelChecked(Object[] level, int group);
    private void EnsureLevelClear(int group);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IHashTreeChecks.Invert();
    private void InvertChecks(HashSet`1<int> inverted);
    private void InvertLevel(int key, HashSet`1<int> invertedChecks, int depthLimit);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IHashTreeChecks.Initialize(ICheckedGroup value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IHashTreeChecks.Initialize(Object[] level, int key);
    private void InitializeChecks(int group, Object[] values);
    private void InitializeInvertedChecks(int group, Object[] values, Object[] level);
    protected void EnsureLevelChecked(HashSet`1<int> parents);
    protected abstract virtual int GetDepth();
    protected abstract virtual bool TryGetParent(int key, Int32& parentKey);
    protected abstract virtual bool TryGetPath(int group, Object[]& path);
}
internal abstract class DevExpress.Utils.Filtering.Internal.HashTreeChecksBase : object {
    protected HashSet`1<int> checks;
    protected Dictionary`2<int, ICheckedGroup> delayedChecks;
    private HashSet`1<int> delayedCheckedGroups;
    protected HashTreeChecksBase(HashSet`1<int> checks, Dictionary`2<int, ICheckedGroup> delayedChecks, HashSet`1<int> delayedCheckedGroups);
    public sealed virtual bool Reset();
    protected void ClearChecks();
    protected bool HasDelayedChecks(int group);
    protected void InitializeDelayedChecks(ICheckedGroup value);
    protected void ResetDelayedChecks(int group);
    private bool IsChild(ICheckedGroup value, int group);
    protected void UpdateDelayedCheckedGroups();
    private void ObtainDelayedGroups(ICheckedGroup value, HashSet`1<int> delayedGroups);
    protected abstract virtual bool TryGetChildren(int group, Object[]& children);
}
internal abstract class DevExpress.Utils.Filtering.Internal.HashTreeIndices : object {
    private static int DEFAULT_CAPACITY;
    protected static int EXPANDED;
    protected static int EXPANDED_BY_FILTER;
    private Dictionary`2<int, int> keyToIndicesMap;
    private Dictionary`2<int, int> keyToParentsMap;
    private Func`1<bool> rootVisibility;
    private int _count;
    private Int32[] indices;
    protected Entry[] entries;
    private int RootSize;
    private Nullable`1<int> visibleCount;
    private Dictionary`2<int, int> indicesToVisibleIndicesMap;
    private Dictionary`2<int, int> visibleIndicesToIndicesMap;
    private Int32[] visibleIndices;
    public int Count { get; }
    public int VisibleCount { get; }
    protected HashTreeIndices(Func`1<bool> rootVisibility);
    protected HashTreeIndices(bool rootVisible);
    public bool Reset(Nullable`1<bool> rootVisibility);
    public bool Reset();
    public int get_Count();
    protected void EnsureRootEntry();
    private bool EnsureRootEntryCore();
    private int EnsureRootIndex(bool rootVisible);
    public sealed virtual int get_VisibleCount();
    public sealed virtual int GetVisibleIndex(int index);
    public sealed virtual int GetIndex(int visibleIndex);
    public sealed virtual bool EnsureVisibleIndex(int index, Int32& value);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.HashTreeIndices/<GetVisibleIndices>d__27")]
public sealed virtual IEnumerator`1<int> GetVisibleIndices(int index);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.HashTreeIndices/<GetVisibleIndicesInverted>d__28")]
public sealed virtual IEnumerator`1<int> GetVisibleIndicesInverted(int index);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.HashTreeIndices/<GetVisibleIndices>d__29")]
public sealed virtual IEnumerable`1<int> GetVisibleIndices(IEnumerable`1<int> indexes);
    protected void ResetVisibleIndicesMapping();
    protected virtual bool GetIsVisible(Entry entry, int index);
    protected virtual bool GetIsExpanded(Entry entry);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.HashTreeIndices/<GetVisibleIndicesEnumerator>d__33")]
private IEnumerator`1<int> GetVisibleIndicesEnumerator();
    private int NextIndex(int index, Entry entry);
    private int EnsureVisibleIndicesMapping();
    private Int32[] EnsureVisibleIndices();
    protected int GetPrevVisibleIndex(int index);
    protected int GetNextVisibleIndex(int index);
    protected void EnsureCapacity(int value);
    private void EnsureCapacity(int index, int value);
    private int FindIndex(int lo, int hi, int index);
    private int BinarySearchIndex(int lo, int hi, int index);
    public sealed virtual bool IsExpanded(int key);
    public sealed virtual bool Expand(int group);
    public sealed virtual bool EnsureExpanded(int group);
    protected bool TryGetEntryIndex(int key, Int32& entryIndex);
    protected bool ExpandRange(Func`2<Entry, bool> rangeFilter);
    protected virtual void OnExpanded();
    protected internal int IndexOf(int key);
    protected internal int ParentOf(int key);
    protected internal bool TryGetIndex(int key, Int32& index);
    protected internal bool TryGetParent(int key, Int32& parent);
    protected int BinarySearchIndex(int index);
    protected void LoadTree(Object[] values, Action`2<Object[], bool> addAllEntries);
    protected void LoadLevel(int key, int index, Object[] level, Action`3<int, int, int> onEntryCreated);
    protected void SetEntry(int key, int parent, int position, int index);
    protected void AddNullObject(int index);
    protected void AddNotLoaded(int index);
    protected void AddEntry(int index, int key, int parent, int state);
    protected void RemoveEntry(int key, int position);
    protected void RemoveTree(Action`1<int> onEntryRemoved);
    protected void RemoveLevel(Entry entry, Action`1<int> onEntryRemoved);
    protected void Offset(int startPosition, int offset);
    protected void Offset(int parentKey);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.HashTreeIndices/<GetFilteringEnumerator>d__67")]
protected IEnumerator`1<int> GetFilteringEnumerator();
    protected void SetExpandedByFilter(int parentKey);
    protected virtual void OnSetExpandedByFilter(int index);
    protected virtual void ResetExpandedByFilter();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.HashTreeIndices/<GetValuesEnumerator>d__71")]
protected IEnumerator`1<int> GetValuesEnumerator(Func`3<int, int, int> getValueKey, Func`3<int, int, bool> match);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.HashTreeIndices/<GetGroupValuesEnumerator>d__72")]
protected internal IEnumerator`1<int> GetGroupValuesEnumerator(Func`4<int, int, int, int> getGroupKey, Func`4<int, int, int, int> getValueKey, Func`3<int, int, bool> match);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.HashTreeIndices/<GetGroupValuesEnumerator>d__73")]
protected internal IEnumerator`1<int> GetGroupValuesEnumerator();
}
internal abstract class DevExpress.Utils.Filtering.Internal.HashTreeRadios : HashTreeChecksBase {
    protected HashTreeRadios(HashSet`1<int> checks, Dictionary`2<int, ICheckedGroup> delayedChecks, HashSet`1<int> delayedCheckedGroups);
    private sealed virtual override Nullable`1<bool> DevExpress.Utils.Filtering.Internal.IHashTreeChecks.IsChecked(int key, int valueKey);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IHashTreeChecks.ToggleAll();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IHashTreeChecks.Toggle(int key, int valueKey);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IHashTreeChecks.Invert();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IHashTreeChecks.Initialize(ICheckedGroup value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IHashTreeChecks.Initialize(Object[] level, int key);
    private void InitializeCheck(ICheckedGroup value);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.HoursInterval : DurationInterval {
    public HoursInterval(TimeSpan duration);
}
public interface DevExpress.Utils.Filtering.Internal.IBaseCollectionValueViewModel {
    public bool UseSelectAll { get; }
    public bool UseRadioSelection { get; }
    public string SelectAllName { get; }
    public string NullName { get; }
    public abstract virtual bool get_UseSelectAll();
    public abstract virtual bool get_UseRadioSelection();
    public abstract virtual string get_SelectAllName();
    public abstract virtual string get_NullName();
}
public interface DevExpress.Utils.Filtering.Internal.IBaseLookupMetricAttributes {
    public LookupUIEditorType EditorType { get; }
    public abstract virtual LookupUIEditorType get_EditorType();
}
public interface DevExpress.Utils.Filtering.Internal.IBehaviorProvider {
    public abstract virtual bool GetIsVisible(string name);
    public abstract virtual bool GetIsEnabled(string name);
}
public interface DevExpress.Utils.Filtering.Internal.IBindablePropertiesState {
    public abstract virtual void Apply(IEndUserFilteringViewModelBindableProperties properties);
}
public interface DevExpress.Utils.Filtering.Internal.IBooleanChoiceMetricAttributes {
    public BooleanUIEditorType EditorType { get; }
    public string TrueName { get; }
    public string FalseName { get; }
    public string DefaultName { get; }
    public Nullable`1<bool> DefaultValue { get; }
    public abstract virtual BooleanUIEditorType get_EditorType();
    public abstract virtual string get_TrueName();
    public abstract virtual string get_FalseName();
    public abstract virtual string get_DefaultName();
    public abstract virtual Nullable`1<bool> get_DefaultValue();
}
public interface DevExpress.Utils.Filtering.Internal.IBooleanValueViewModel {
    public string DefaultName { get; }
    public string TrueName { get; }
    public string FalseName { get; }
    public Nullable`1<bool> DefaultValue { get; }
    public abstract virtual string get_DefaultName();
    public abstract virtual string get_TrueName();
    public abstract virtual string get_FalseName();
    public abstract virtual Nullable`1<bool> get_DefaultValue();
}
public interface DevExpress.Utils.Filtering.Internal.ICheckedGroup {
    public int Group { get; }
    public Object[] Path { get; }
    public Object[] Values { get; }
    public bool IsInverted { get; }
    public abstract virtual int get_Group();
    public abstract virtual Object[] get_Path();
    public abstract virtual Object[] get_Values();
    public abstract virtual bool get_IsInverted();
}
public interface DevExpress.Utils.Filtering.Internal.ICheckedGroupValues {
    public bool HasDelayedFilters { get; }
    public abstract virtual void Prepare();
    public abstract virtual void Initialize(ICheckedGroup value);
    public abstract virtual IEnumerable`1<int> GetIndices();
    public abstract virtual ICheckedValuesEnumerator GetEnumerator();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Checked(EventHandler`1<GroupValuesCheckedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Checked(EventHandler`1<GroupValuesCheckedEventArgs> value);
    public abstract virtual bool get_HasDelayedFilters();
    public abstract virtual IEnumerable`1<CriteriaOperator> GetDelayedFilters(String[] grouping, Type[] groupingTypes);
}
public interface DevExpress.Utils.Filtering.Internal.ICheckedValuesEnumerator {
    public int Group { get; }
    public abstract virtual int get_Group();
}
public interface DevExpress.Utils.Filtering.Internal.IChoiceMetricAttributes`1 {
}
public interface DevExpress.Utils.Filtering.Internal.ICollectionMetricAttributes {
    public bool UseRadioSelection { get; }
    public bool UseSelectAll { get; }
    public string SelectAllName { get; }
    public string NullName { get; }
    public abstract virtual bool get_UseRadioSelection();
    public abstract virtual bool get_UseSelectAll();
    public abstract virtual string get_SelectAllName();
    public abstract virtual string get_NullName();
}
public interface DevExpress.Utils.Filtering.Internal.ICollectionValueViewModel {
    public object DataSource { get; }
    public string ValueMember { get; }
    public string DisplayMember { get; }
    public bool IsLoadMoreAvailable { get; }
    public bool IsLoadFewerAvailable { get; }
    public bool FilterByDisplayText { get; }
    public IReadOnlyCollection`1<int> DisplayIndexes { get; public set; }
    public bool UseBlanks { get; }
    public Nullable`1<bool> Blanks { get; public set; }
    public string BlanksName { get; }
    public bool IsInverted { get; }
    public abstract virtual object get_DataSource();
    public abstract virtual string get_ValueMember();
    public abstract virtual string get_DisplayMember();
    public abstract virtual bool get_IsLoadMoreAvailable();
    public abstract virtual void LoadMore();
    public abstract virtual bool get_IsLoadFewerAvailable();
    public abstract virtual void LoadFewer();
    public abstract virtual bool get_FilterByDisplayText();
    public abstract virtual IReadOnlyCollection`1<int> get_DisplayIndexes();
    public abstract virtual void set_DisplayIndexes(IReadOnlyCollection`1<int> value);
    public abstract virtual bool get_UseBlanks();
    public abstract virtual Nullable`1<bool> get_Blanks();
    public abstract virtual void set_Blanks(Nullable`1<bool> value);
    public abstract virtual string get_BlanksName();
    public abstract virtual bool get_IsInverted();
}
public interface DevExpress.Utils.Filtering.Internal.ICollectionValueViewModel`1 {
    public IReadOnlyCollection`1<T> Values { get; public set; }
    public Nullable`1<int> Top { get; }
    public Nullable`1<int> MaxCount { get; }
    public abstract virtual IReadOnlyCollection`1<T> get_Values();
    public abstract virtual void set_Values(IReadOnlyCollection`1<T> value);
    public abstract virtual Nullable`1<int> get_Top();
    public abstract virtual Nullable`1<int> get_MaxCount();
}
public interface DevExpress.Utils.Filtering.Internal.ICustomFunctionsQueryContext {
    public abstract virtual void RaiseQueryCustomFunctions(CustomFunctionEventArgs e);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomFunctionsQueryFactory {
    public abstract virtual CustomFunctionEventArgs Create(ICustomUIFilters filters);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilter {
    public int Order { get; }
    public string Group { get; }
    public string ParentGroup { get; }
    public bool Visible { get; }
    public bool IsActive { get; }
    public ICustomUIFilterValue Value { get; }
    public abstract virtual int get_Order();
    public abstract virtual string get_Group();
    public abstract virtual string get_ParentGroup();
    public abstract virtual bool Allow(ICustomUIFiltersOptions userOptions);
    public abstract virtual bool get_Visible();
    public abstract virtual bool get_IsActive();
    public abstract virtual ICustomUIFilterValue get_Value();
    public abstract virtual Task Edit(object owner);
    public abstract virtual void EndEdit();
    public abstract virtual bool Reset();
}
internal interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterCriteriaParser {
    public abstract virtual bool TryParse(CriteriaOperator criteria, Object[]& values);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterDialogDispatcherService {
    public TaskScheduler TaskScheduler { get; }
    public abstract virtual Task Queue(Action action);
    public abstract virtual TaskScheduler get_TaskScheduler();
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterDialogService {
    public abstract virtual Task`1<bool> Show(object uiProvider, ICustomUIFilterDialogViewModel viewModel, IDisposable& cancelationToken);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterDialogTypesResolver {
    public abstract virtual CustomUIFilterDialogType Resolve(CustomUIFilterType filterType);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterDialogViewModel {
    public string Path { get; }
    public CustomUIFiltersType FiltersType { get; }
    public CustomUIFilterType FilterType { get; }
    public ICustomUIFilterValue Parameter { get; }
    public ICustomUIFilterValue Result { get; public set; }
    public abstract virtual string get_Path();
    public abstract virtual CustomUIFiltersType get_FiltersType();
    public abstract virtual CustomUIFilterType get_FilterType();
    public abstract virtual ICustomUIFilterValue get_Parameter();
    public abstract virtual ICustomUIFilterValue get_Result();
    public abstract virtual void set_Result(ICustomUIFilterValue value);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterFactory {
    public abstract virtual ICustomUIFilter Create(CustomUIFilterType filterType, Func`1<IServiceProvider> getServiceProvider);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilters {
    public ICustomUIFilter Item { get; }
    public IEnumerable`1<IGrouping`2<string, ICustomUIFilter>> Groups { get; }
    public ICustomUIFiltersOptions Options { get; }
    public ICustomUIFiltersOptions UserOptions { get; public set; }
    public IEndUserFilteringMetric Metric { get; }
    public ICustomUIFilter ActiveFilter { get; }
    public CriteriaOperator FilterCriteria { get; }
    public abstract virtual ICustomUIFilter get_Item(CustomUIFilterType filterType);
    public abstract virtual IEnumerable`1<IGrouping`2<string, ICustomUIFilter>> get_Groups();
    public abstract virtual ICustomUIFiltersOptions get_Options();
    public abstract virtual ICustomUIFiltersOptions get_UserOptions();
    public abstract virtual void set_UserOptions(ICustomUIFiltersOptions value);
    public abstract virtual IEndUserFilteringMetric get_Metric();
    public abstract virtual ICustomUIFilter get_ActiveFilter();
    public abstract virtual CriteriaOperator get_FilterCriteria();
    public abstract virtual bool AllowFilter(ICustomUIFilter filter);
    public abstract virtual bool ApplyFilterCriteria(CriteriaOperator criteria, ICustomUIFilter& filter);
    public abstract virtual bool CanReset();
    public abstract virtual void Reset();
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFiltersBox {
    public IEndUserFilteringMetric Metric { get; }
    public ICustomUIFilters Filters { get; }
    public abstract virtual IEndUserFilteringMetric get_Metric();
    public abstract virtual ICustomUIFilters get_Filters();
    public abstract virtual void EnsureFiltersType();
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFiltersFactory {
    public abstract virtual ICustomUIFilters Create(IEndUserFilteringMetric metric, IMetricAttributesQuery query, Func`1<IServiceProvider> getServiceProvider);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFiltersOptions {
    public CustomUIFilterType DefaultFilterType { get; }
    public bool AllowFilters { get; }
    public bool FilterByDisplayText { get; }
    public bool ImmediateUpdate { get; }
    public bool ShowComparisons { get; }
    public bool ShowAggregates { get; }
    public bool ShowSequences { get; }
    public bool ShowDatePeriods { get; }
    public bool ShowAdvancedDatePeriods { get; }
    public bool ShowTimePeriods { get; }
    public bool ShowBlanks { get; }
    public bool ShowNulls { get; }
    public bool ShowLikeFilters { get; }
    public bool ShowCustomFilters { get; }
    public bool ShowUserDefinedFilters { get; }
    public abstract virtual CustomUIFilterType get_DefaultFilterType();
    public abstract virtual bool get_AllowFilters();
    public abstract virtual bool get_FilterByDisplayText();
    public abstract virtual bool get_ImmediateUpdate();
    public abstract virtual bool get_ShowComparisons();
    public abstract virtual bool get_ShowAggregates();
    public abstract virtual bool get_ShowSequences();
    public abstract virtual bool get_ShowDatePeriods();
    public abstract virtual bool get_ShowAdvancedDatePeriods();
    public abstract virtual bool get_ShowTimePeriods();
    public abstract virtual bool get_ShowBlanks();
    public abstract virtual bool get_ShowNulls();
    public abstract virtual bool get_ShowLikeFilters();
    public abstract virtual bool get_ShowCustomFilters();
    public abstract virtual bool get_ShowUserDefinedFilters();
}
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFiltersOptionsEx {
    public abstract virtual bool IsUserFilterTypeSpecified();
    public abstract virtual bool AllowFilter(CustomUIFilterType filterType);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFiltersOptionsFactory {
    public abstract virtual ICustomUIFiltersOptions Create(IEndUserFilteringMetric metric);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFiltersProperties {
    public Nullable`1<CustomUIFiltersType> FiltersType { get; }
    public abstract virtual Nullable`1<CustomUIFiltersType> get_FiltersType();
    public abstract virtual void Assign(ICustomUIFiltersProperties properties);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFiltersPropertiesEx {
    public abstract virtual void Register(TService service);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFiltersPropertiesFactory {
    public abstract virtual ICustomUIFiltersProperties Create(ICustomUIFilters filters);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFiltersSettings {
    public ICustomUIFilters Item { get; }
    public abstract virtual ICustomUIFilters get_Item(string path);
    public abstract virtual bool HasFilters(string path);
    public abstract virtual void EnsureFiltersType(string path);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterSummaryItem {
    public string Column { get; }
    public SummaryItemTypeEx Type { get; public set; }
    public decimal Argument { get; public set; }
    public abstract virtual string get_Column();
    public abstract virtual SummaryItemTypeEx get_Type();
    public abstract virtual void set_Type(SummaryItemTypeEx value);
    public abstract virtual decimal get_Argument();
    public abstract virtual void set_Argument(decimal value);
    public abstract virtual bool QueryValue(object controller, Object& value);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterTypesResolver {
    public abstract virtual IEnumerable`1<CustomUIFilterType> Resolve(IEndUserFilteringMetric metric, CustomUIFiltersType filtersType, ICustomUIFiltersOptions option);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterValue {
    public CustomUIFilterType FilterType { get; }
    public string FilterName { get; }
    public string FilterDescription { get; }
    public bool IsDefault { get; }
    public object Value { get; }
    public bool HasChildren { get; }
    public IEnumerable`1<ICustomUIFilterValue> Children { get; }
    public abstract virtual CustomUIFilterType get_FilterType();
    public abstract virtual string get_FilterName();
    public abstract virtual string get_FilterDescription();
    public abstract virtual bool get_IsDefault();
    public abstract virtual object get_Value();
    public abstract virtual bool get_HasChildren();
    public abstract virtual IEnumerable`1<ICustomUIFilterValue> get_Children();
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterValuesFactory {
    public abstract virtual ICustomUIFilterValue Create(CustomUIFilterType filterType, Object[] values);
}
public interface DevExpress.Utils.Filtering.Internal.ICustomUIFilterValueViewModel {
    public abstract virtual CriteriaOperator CreateFilterCriteria(IEndUserFilteringMetric metric);
    public abstract virtual CriteriaOperator CreateFilterCriteria(IEndUserFilteringMetric metric, ICustomUIFilterValue value);
}
public interface DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree {
    public abstract virtual void ExpandYears();
    public abstract virtual void ExpandMonths();
    public abstract virtual void SelectRange(int startIndex, int endIndex);
    public abstract virtual Interval`1<int> GetRange();
    [CompilerGeneratedAttribute]
public abstract virtual void add_RangeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RangeChanged(EventHandler value);
}
public interface DevExpress.Utils.Filtering.Internal.IDateIntervalsHashTree`1 {
    public abstract virtual TDate GetDate(int index);
    public abstract virtual IReadOnlyCollection`1<Interval`1<TDate>> GetRangeIntervals();
}
public interface DevExpress.Utils.Filtering.Internal.IDateOnlyTreeViewModel {
    public IDateIntervalsHashTree`1<DateOnly> HashTree { get; }
    public abstract virtual IDateIntervalsHashTree`1<DateOnly> get_HashTree();
}
public interface DevExpress.Utils.Filtering.Internal.IDatesTreeViewModel {
    public IDateIntervalsHashTree HashTree { get; }
    public abstract virtual IDateIntervalsHashTree get_HashTree();
}
public interface DevExpress.Utils.Filtering.Internal.IDateTimeTreeViewModel {
    public IDateIntervalsHashTree`1<DateTime> HashTree { get; }
    public abstract virtual IDateIntervalsHashTree`1<DateTime> get_HashTree();
}
public interface DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes {
    public bool SortedByDisplayText { get; }
    public bool FilterByDisplayText { get; }
    public object DataItemsLookup { get; }
    public abstract virtual bool get_SortedByDisplayText();
    public abstract virtual bool get_FilterByDisplayText();
    public abstract virtual object get_DataItemsLookup();
    public abstract virtual bool TryGetDisplayLookup(object owner, object uniqueValues, bool skipNulls, Object& lookup);
    public abstract virtual bool TryGetDisplayText(int valueIndex, String& displayText);
    public abstract virtual bool TryGetDisplayIndex(string displayText, Int32& valueIndex);
}
public interface DevExpress.Utils.Filtering.Internal.IDisplayTemplatesCustomizationService {
    public abstract virtual object PrepareTemplate(object template);
    public abstract virtual void OnApplyTemplate(object template);
}
public interface DevExpress.Utils.Filtering.Internal.IDisplayTemplatesCustomizationServiceFactory {
    public abstract virtual IDisplayTemplatesCustomizationService Create(string path);
}
public interface DevExpress.Utils.Filtering.Internal.IDisplayTemplatesService {
    public abstract virtual object GetTemplateProvider();
    public abstract virtual object GetCustomUIFilterTemplateProvider();
    public abstract virtual object GetCustomUIFiltersTemplateSelectorContainerProvider();
}
public interface DevExpress.Utils.Filtering.Internal.IDisplayTemplatesServiceFactory {
    public abstract virtual IDisplayTemplatesService Create(string path);
}
public interface DevExpress.Utils.Filtering.Internal.IDisplayTextService {
    public DisplayFormat DisplayFormat { get; }
    public AutoHeight AutoHeight { get; }
    public abstract virtual string GetCaption();
    public abstract virtual string GetDescription();
    public abstract virtual string GetDisplayText(object value);
    public abstract virtual DisplayFormat get_DisplayFormat();
    public abstract virtual AutoHeight get_AutoHeight();
    public abstract virtual string GetEditMask(Object& maskTypeOrMaskManagerType);
    public abstract virtual object GetHtmlImages();
    public abstract virtual object GetEditorProperties();
}
public interface DevExpress.Utils.Filtering.Internal.IDisplayTextServiceFactory {
    public abstract virtual IDisplayTextService Create(string path);
    public abstract virtual bool TryCreate(string path, IDisplayTextService& service);
}
public interface DevExpress.Utils.Filtering.Internal.IDurationIntervalsHashTree {
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringCriteriaAwareViewModel {
    public abstract virtual bool TryParse(IEndUserFilteringMetric metric, CriteriaOperator criteria);
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringCriteriaChangeAware {
    public abstract virtual void QueueFilterCriteriaChange(string path, Action`1<string> change);
    public abstract virtual IDisposable EnterFilterCriteriaChange();
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringElement {
    public string Path { get; }
    public string Caption { get; }
    public string Description { get; }
    public string Layout { get; }
    public int Order { get; }
    public bool ApplyFormatInEditMode { get; }
    public string DataFormatString { get; }
    public string NullDisplayText { get; }
    public Nullable`1<DataType> DataType { get; }
    public Type EnumDataType { get; }
    public bool IsVisible { get; }
    public bool IsEnabled { get; }
    public abstract virtual string get_Path();
    public abstract virtual string get_Caption();
    public abstract virtual string get_Description();
    public abstract virtual string get_Layout();
    public abstract virtual int get_Order();
    public abstract virtual bool get_ApplyFormatInEditMode();
    public abstract virtual string get_DataFormatString();
    public abstract virtual string get_NullDisplayText();
    public abstract virtual Nullable`1<DataType> get_DataType();
    public abstract virtual Type get_EnumDataType();
    public abstract virtual bool get_IsVisible();
    public abstract virtual bool get_IsEnabled();
}
internal interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetadataProvider {
    public abstract virtual void SetMetadataStorage(IMetadataStorage metadataStorage);
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetric {
    public Type Type { get; }
    public Type AttributesTypeDefinition { get; }
    public IMetricAttributes Attributes { get; }
    public abstract virtual Type get_Type();
    public abstract virtual Type get_AttributesTypeDefinition();
    public abstract virtual IMetricAttributes get_Attributes();
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricAttributes {
    public string Path { get; }
    public Type Type { get; }
    public AttributesMergeMode MergeMode { get; }
    public abstract virtual string get_Path();
    public abstract virtual Type get_Type();
    public abstract virtual AttributesMergeMode get_MergeMode();
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricAttributesFactory {
    public abstract virtual IEndUserFilteringMetricAttributes Create(string path, Type type, Attribute[] attributes);
    public abstract virtual IEndUserFilteringMetricAttributes Create(string path, Type type, AnnotationAttributes attributes);
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricAttributesProvider {
    public IEnumerable`1<IEndUserFilteringMetricAttributes> Attributes { get; }
    public abstract virtual IEnumerable`1<IEndUserFilteringMetricAttributes> get_Attributes();
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricViewModel {
    public IEndUserFilteringMetric Metric { get; }
    public IMetricAttributesQuery Query { get; }
    public bool HasValue { get; }
    public IValueViewModel Value { get; }
    public Type ValueType { get; }
    public CriteriaOperator FilterCriteria { get; }
    public abstract virtual IEndUserFilteringMetric get_Metric();
    public abstract virtual IMetricAttributesQuery get_Query();
    public abstract virtual bool get_HasValue();
    public abstract virtual IValueViewModel get_Value();
    public abstract virtual Type get_ValueType();
    public abstract virtual IDisposable LockValue();
    public abstract virtual CriteriaOperator get_FilterCriteria();
    public abstract virtual void EnsureValueType();
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricViewModelFactory {
    public abstract virtual IEndUserFilteringMetricViewModel Create(IEndUserFilteringMetric metric, IEndUserFilteringMetricViewModelValueBox valueBox);
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringMetricViewModelValueBox {
    public Type Type { get; }
    public IValueViewModel Value { get; }
    public IMetricAttributesQuery Query { get; }
    public abstract virtual Type get_Type();
    public abstract virtual IValueViewModel get_Value();
    public abstract virtual IMetricAttributesQuery get_Query();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueChanged(EventHandler value);
    public abstract virtual void EnsureValueType();
    public abstract virtual void ReleaseValue();
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettings {
    public IEnumerable`1<string> Paths { get; }
    public IEndUserFilteringMetric Item { get; }
    public IEnumerable`1<IEndUserFilteringMetricAttributes> CustomAttributes { get; }
    public abstract virtual IEnumerable`1<string> get_Paths();
    public abstract virtual IEndUserFilteringMetric get_Item(string path);
    public abstract virtual IEnumerable`1<IEndUserFilteringMetricAttributes> get_CustomAttributes();
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, TValue>> GetPairs(Func`2<IEndUserFilteringMetric, TValue> accessor);
    public abstract virtual bool Ensure(string path, Type type, FilterType filterType, FilterValuesType valuesType, FilterGroupType groupType, bool sortedByDisplaText);
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringSettingsFactory {
    public abstract virtual IEndUserFilteringSettings Create(Type type, IEnumerable`1<IEndUserFilteringMetricAttributes> customAttributes);
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModel {
    public abstract virtual void Initialize(IEndUserFilteringViewModelPropertyValues values);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelBindableProperties {
    public PropertyDescriptor Item { get; }
    public abstract virtual PropertyDescriptor get_Item(string path);
    public abstract virtual IBindablePropertiesState Release();
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelDataContext {
    public abstract virtual void Initialize(string path);
    public abstract virtual void DataBind(string path);
    public abstract virtual void Complete(string path);
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProperties {
    public abstract virtual IEndUserFilteringViewModelProperties GetNestedProperties(string rootPath);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelPropertyValues {
    public IEndUserFilteringMetricViewModel Item { get; }
    public abstract virtual IEndUserFilteringMetricViewModel get_Item(string path);
    public abstract virtual IEndUserFilteringViewModelPropertyValues GetNestedValues(string rootPath);
    public abstract virtual void EnsureValueType(string path);
    public abstract virtual void ApplyFilterCriteria(Func`1<object> getViewModel, CriteriaOperator criteria);
    public abstract virtual void ApplyFilterCriteria(Func`1<object> getViewModel, string path, CriteriaOperator criteria);
    public abstract virtual CriteriaOperator QueryFilterCriteria(string path, CriteriaOperator criteria);
    public abstract virtual bool ParseFilterCriteria(string path, CriteriaOperator criteria);
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelProvider {
    public IViewModelProvider ParentViewModelProvider { get; public set; }
    public object ParentViewModel { get; public set; }
    public Type SourceType { get; public set; }
    public IEnumerable`1<IEndUserFilteringMetricAttributes> Attributes { get; public set; }
    public IEndUserFilteringSettings Settings { get; }
    public IEndUserFilteringViewModelProperties Properties { get; }
    public IEndUserFilteringViewModelBindableProperties BindableProperties { get; }
    public IEndUserFilteringViewModelPropertyValues PropertyValues { get; }
    public Type ViewModelBaseType { get; public set; }
    public Type ViewModelType { get; }
    public object ViewModel { get; }
    public bool IsViewModelTypeCreated { get; }
    public bool IsViewModelCreated { get; }
    public CriteriaOperator FilterCriteria { get; }
    public abstract virtual IViewModelProvider get_ParentViewModelProvider();
    public abstract virtual void set_ParentViewModelProvider(IViewModelProvider value);
    public abstract virtual object get_ParentViewModel();
    public abstract virtual void set_ParentViewModel(object value);
    public abstract virtual Type get_SourceType();
    public abstract virtual void set_SourceType(Type value);
    public abstract virtual IEnumerable`1<IEndUserFilteringMetricAttributes> get_Attributes();
    public abstract virtual void set_Attributes(IEnumerable`1<IEndUserFilteringMetricAttributes> value);
    public abstract virtual IEndUserFilteringSettings get_Settings();
    public abstract virtual IEndUserFilteringViewModelProperties get_Properties();
    public abstract virtual IEndUserFilteringViewModelBindableProperties get_BindableProperties();
    public abstract virtual IEndUserFilteringViewModelPropertyValues get_PropertyValues();
    public abstract virtual Type get_ViewModelBaseType();
    public abstract virtual void set_ViewModelBaseType(Type value);
    public abstract virtual Type get_ViewModelType();
    public abstract virtual object get_ViewModel();
    public abstract virtual bool get_IsViewModelTypeCreated();
    public abstract virtual bool get_IsViewModelCreated();
    public abstract virtual void Reset();
    public abstract virtual void UpdateMemberBindings(string path);
    public abstract virtual CriteriaOperator get_FilterCriteria();
    public abstract virtual void ClearFilterCriteria();
    public abstract virtual CriteriaOperator GetFilterCriteria(string path);
    public abstract virtual void RetrieveFields(Action`1<Type> retrieveFields, Type sourceType, IEnumerable`1<IEndUserFilteringMetricAttributes> attributes, Type viewModelBaseType);
}
public interface DevExpress.Utils.Filtering.Internal.IEndUserFilteringViewModelTypeBuilder {
    public abstract virtual Type Create(Type baseType, IEndUserFilteringViewModelProperties properties, IEndUserFilteringViewModelPropertyValues values);
}
public interface DevExpress.Utils.Filtering.Internal.IEnumChoiceMetricAttributes {
    public Type EnumType { get; }
    public bool UseFlags { get; }
    public bool UseContainsForFlags { get; }
    public abstract virtual Type get_EnumType();
    public abstract virtual bool get_UseFlags();
    public abstract virtual bool get_UseContainsForFlags();
}
public interface DevExpress.Utils.Filtering.Internal.IEnumChoiceMetricAttributes`1 {
}
public interface DevExpress.Utils.Filtering.Internal.IEnumValueViewModel {
    public bool UseFlags { get; }
    public Type EnumType { get; }
    public abstract virtual bool get_UseFlags();
    public abstract virtual Type get_EnumType();
}
public interface DevExpress.Utils.Filtering.Internal.IEnumValueViewModel`1 {
    public IReadOnlyCollection`1<T> Values { get; public set; }
    public abstract virtual IReadOnlyCollection`1<T> get_Values();
    public abstract virtual void set_Values(IReadOnlyCollection`1<T> value);
}
public interface DevExpress.Utils.Filtering.Internal.IExpandableGroups {
    public int VisibleItemsCount { get; }
    public abstract virtual bool IsExpanded(int group);
    public abstract virtual void ChangeState(int group);
    public abstract virtual int get_VisibleItemsCount();
    public abstract virtual int GetVisibleIndex(int index);
    public abstract virtual int GetIndex(int visibleIndex);
    public abstract virtual IEnumerator`1<int> GetVisibleIndices(int index);
    public abstract virtual IEnumerator`1<int> GetVisibleIndicesInverted(int index);
    public abstract virtual IEnumerable`1<int> GetVisibleIndices(IEnumerable`1<int> indexes);
}
public interface DevExpress.Utils.Filtering.Internal.IFilterCriteriaParseContext {
    public abstract virtual void RaiseParseFilterCriteria(ParseFilterCriteriaEventArgs args);
}
public interface DevExpress.Utils.Filtering.Internal.IFilterCriteriaParseFactory {
    public abstract virtual ParseFilterCriteriaEventArgs Create(IEndUserFilteringMetricViewModel metricViewModel);
}
public interface DevExpress.Utils.Filtering.Internal.IFilterCriteriaQueryContext {
    public abstract virtual void RaiseQueryFilterCriteria(QueryFilterCriteriaEventArgs args);
}
public interface DevExpress.Utils.Filtering.Internal.IFilterCriteriaQueryFactory {
    public abstract virtual QueryFilterCriteriaEventArgs Create(IEndUserFilteringMetricViewModel metricViewModel);
}
public interface DevExpress.Utils.Filtering.Internal.IFilterUIEditorProperties {
    public Nullable`1<RangeUIEditorType> RangeUIEditorType { get; }
    public Nullable`1<DateTimeRangeUIEditorType> DateTimeRangeUIEditorType { get; }
    public Nullable`1<LookupUIEditorType> LookupUIEditorType { get; }
    public Nullable`1<BooleanUIEditorType> BooleanUIEditorType { get; }
    public Nullable`1<GroupUIEditorType> GroupUIEditorType { get; }
    public Nullable`1<DataType> DataType { get; }
    public Type EnumType { get; }
    public Nullable`1<bool> UseFlags { get; }
    public abstract virtual Nullable`1<RangeUIEditorType> get_RangeUIEditorType();
    public abstract virtual Nullable`1<DateTimeRangeUIEditorType> get_DateTimeRangeUIEditorType();
    public abstract virtual Nullable`1<LookupUIEditorType> get_LookupUIEditorType();
    public abstract virtual Nullable`1<BooleanUIEditorType> get_BooleanUIEditorType();
    public abstract virtual Nullable`1<GroupUIEditorType> get_GroupUIEditorType();
    public abstract virtual Nullable`1<DataType> get_DataType();
    public abstract virtual Type get_EnumType();
    public abstract virtual Nullable`1<bool> get_UseFlags();
    public abstract virtual void Assign(IFilterUIEditorProperties properties);
}
public interface DevExpress.Utils.Filtering.Internal.IFilterUIEditorPropertiesEx {
    public abstract virtual void Register(TService service);
}
public interface DevExpress.Utils.Filtering.Internal.IFilterUIEditorPropertiesFactory {
    public abstract virtual IFilterUIEditorProperties Create(IEndUserFilteringMetric metric);
}
public interface DevExpress.Utils.Filtering.Internal.IFilterValueViewModel {
    public abstract virtual CriteriaOperator CreateFilterCriteria();
}
public interface DevExpress.Utils.Filtering.Internal.IGroupMetricAttributes {
    public GroupUIEditorType EditorType { get; }
    public String[] Grouping { get; }
    public IDictionary`2<int, Object[]> GroupValues { get; }
    public IDictionary`2<int, String[]> GroupTexts { get; }
    public abstract virtual GroupUIEditorType get_EditorType();
    public abstract virtual String[] get_Grouping();
    public abstract virtual IDictionary`2<int, Object[]> get_GroupValues();
    public abstract virtual IDictionary`2<int, String[]> get_GroupTexts();
}
public interface DevExpress.Utils.Filtering.Internal.IGroupMetricAttributes`1 {
}
public interface DevExpress.Utils.Filtering.Internal.IGroupMetricAttributesQuery {
    public abstract virtual IGroupMetricAttributesQuery Initialize(Object[] path, CriteriaOperator criteria, string group);
}
public interface DevExpress.Utils.Filtering.Internal.IGroupValue {
    public object Value { get; }
    public int Level { get; }
    public abstract virtual object get_Value();
    public abstract virtual int get_Level();
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Filtering.Internal.IGroupValues {
    public int Depth { get; }
    public int Count { get; }
    public object Item { get; }
    public bool HasValue { get; }
    public abstract virtual Nullable`1<int> GetParent(int group);
    public abstract virtual int GetIndex(int group);
    public abstract virtual object GetValue(int index, Int32& group);
    public abstract virtual int get_Depth();
    public abstract virtual int get_Count();
    public abstract virtual object get_Item(int index);
    public abstract virtual bool get_HasValue();
    public abstract virtual Nullable`1<bool> IsChecked(object value, Nullable`1<int> group);
    public abstract virtual bool Load(Object[] level, Nullable`1<int> group, Nullable`1<int> depth, String[] texts);
    public abstract virtual void Toggle(object value, Nullable`1<int> group);
    public abstract virtual void ToggleAll();
    public abstract virtual void Invert();
    public abstract virtual void Reset();
    public abstract virtual bool IsLoaded(Object[] path);
    public abstract virtual void QueryLoad(int group);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Loaded(EventHandler`1<GroupValuesLoadedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Loaded(EventHandler`1<GroupValuesLoadedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_VisualUpdateRequired(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_VisualUpdateRequired(EventHandler value);
}
[DefaultMemberAttribute("Item")]
internal interface DevExpress.Utils.Filtering.Internal.IGroupValuesCache {
    public int Depth { get; }
    public Object[] Item { get; }
    public abstract virtual int get_Depth();
    public abstract virtual Object[] get_Item(int group);
    public abstract virtual bool IsLoaded(int group);
    public abstract virtual bool TryGetValue(int group, Object[]& values);
    public abstract virtual bool Reload(int group, Object[] children, Nullable`1<int> depth, String[] texts);
    public abstract virtual int GetIndex(int group);
    public abstract virtual Nullable`1<int> GetParent(int group);
    public abstract virtual Object[] GetPath(int group);
}
public interface DevExpress.Utils.Filtering.Internal.IGroupValuesParser {
    public bool Invalid { get; }
    public abstract virtual bool get_Invalid();
    public abstract virtual void Accept(Action`1<ICheckedGroup> visit);
}
[DefaultMemberAttribute("Item")]
internal interface DevExpress.Utils.Filtering.Internal.IGroupValuesSource {
    public int Count { get; }
    public object Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual object get_Item(int index);
    public abstract virtual object GetValue(int index, Int32& group);
    public abstract virtual IEnumerator`1<IGrouping`2<int, object>> Groups();
    public abstract virtual IEnumerator`1<object> Values(int key, int level);
    public abstract virtual ICheckedValuesEnumerator Values(Func`2<int, bool> isChecked);
    public abstract virtual object GetValue(int key, int index);
    public abstract virtual string GetText(int key, int index);
}
public interface DevExpress.Utils.Filtering.Internal.IGroupValueViewModel {
    public String[] Grouping { get; }
    public IGroupValues GroupValues { get; }
    public abstract virtual String[] get_Grouping();
    public abstract virtual IGroupValues get_GroupValues();
}
public interface DevExpress.Utils.Filtering.Internal.IGroupValueViewModel`1 {
}
public interface DevExpress.Utils.Filtering.Internal.IHashTree {
    public abstract virtual bool Expand(int hash);
    public abstract virtual bool IsExpanded(int hash);
    public abstract virtual bool EnsureExpanded(int hash);
}
public interface DevExpress.Utils.Filtering.Internal.IHashTree`1 {
    public abstract virtual bool Expand(T element);
    public abstract virtual bool IsExpanded(T element);
    public abstract virtual bool EnsureExpanded(T element);
}
public interface DevExpress.Utils.Filtering.Internal.IHashTreeChecks {
    public abstract virtual void Initialize(ICheckedGroup value);
    public abstract virtual void Initialize(Object[] level, int key);
    public abstract virtual Nullable`1<bool> IsChecked(int key, int valueKey);
    public abstract virtual bool ToggleAll();
    public abstract virtual void Toggle(int key, int valueKey);
    public abstract virtual bool Invert();
    public abstract virtual bool Reset();
}
public interface DevExpress.Utils.Filtering.Internal.IHashTreeIndices {
    public int VisibleCount { get; }
    public abstract virtual int get_VisibleCount();
    public abstract virtual int GetVisibleIndex(int index);
    public abstract virtual int GetIndex(int visibleIndex);
    public abstract virtual IEnumerator`1<int> GetVisibleIndices(int index);
    public abstract virtual IEnumerator`1<int> GetVisibleIndicesInverted(int index);
    public abstract virtual IEnumerable`1<int> GetVisibleIndices(IEnumerable`1<int> indexes);
    public abstract virtual bool EnsureVisibleIndex(int index, Int32& value);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Filtering.Internal.IIntervalsHashTree`1 {
    public int Count { get; }
    public THash Item { get; }
    public bool FilteredOut { get; }
    public bool HasChecks { get; }
    public abstract virtual int get_Count();
    public abstract virtual THash get_Item(int index);
    public abstract virtual bool get_FilteredOut();
    public abstract virtual bool Filter(Func`2<THash, bool> filter);
    public abstract virtual bool get_HasChecks();
    public abstract virtual Nullable`1<bool> IsChecked(int index);
    public abstract virtual void Toggle(int index);
    public abstract virtual void ToggleAll();
    public abstract virtual void Invert();
    public abstract virtual void Reset();
    [CompilerGeneratedAttribute]
public abstract virtual void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CheckedChanged(EventHandler value);
    public abstract virtual string GetText(int index);
    public abstract virtual string GetText(THash date, int level);
    public abstract virtual void Prepare();
    [CompilerGeneratedAttribute]
public abstract virtual void add_VisualUpdateRequired(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_VisualUpdateRequired(EventHandler value);
    public abstract virtual IEnumerable`1<int> GetCheckedIndices();
    public abstract virtual IEnumerable`1<int> GetFilteredIndices();
}
public interface DevExpress.Utils.Filtering.Internal.IIntervalsHashTree`2 {
    public abstract virtual IReadOnlyCollection`1<Interval`1<T>> GetIntervals();
    public abstract virtual void Initialize(IReadOnlyCollection`1<Interval`1<T>> intervals);
    public abstract virtual void Initialize(Interval`1<T> range);
    public abstract virtual void Update(Object[] dates, Interval`1[] intervals, Interval`1<T> range, bool isRangeSelector);
}
public interface DevExpress.Utils.Filtering.Internal.ILazyMetricAttributesFactory {
    public abstract virtual IMetricAttributes CreateRange(Type type);
    public abstract virtual IMetricAttributes CreateLookup(Type type);
    public abstract virtual IMetricAttributes CreateBooleanChoice(Type type);
    public abstract virtual IMetricAttributes CreateEnumChoice(Type type, Type enumDataType);
    public abstract virtual IMetricAttributes CreateGroup(Type type);
}
public interface DevExpress.Utils.Filtering.Internal.ILocalizableUIElement`1 {
    public string Name { get; }
    public string Description { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
    public abstract virtual TUIElementID GetID();
}
public interface DevExpress.Utils.Filtering.Internal.ILookupMetricAttributes {
    public Nullable`1<int> Top { get; }
    public Nullable`1<int> MaxCount { get; }
    public object DataSource { get; }
    public string DisplayMember { get; }
    public string ValueMember { get; }
    public bool UseBlanks { get; }
    public string BlanksName { get; }
    public bool ExactCriteriaForBlanks { get; }
    public abstract virtual Nullable`1<int> get_Top();
    public abstract virtual Nullable`1<int> get_MaxCount();
    public abstract virtual object get_DataSource();
    public abstract virtual string get_DisplayMember();
    public abstract virtual string get_ValueMember();
    public abstract virtual bool get_UseBlanks();
    public abstract virtual string get_BlanksName();
    public abstract virtual bool get_ExactCriteriaForBlanks();
}
public interface DevExpress.Utils.Filtering.Internal.ILookupMetricAttributes`1 {
}
public interface DevExpress.Utils.Filtering.Internal.ILookupValuesViewModel {
    public IEnumerable`1<KeyValuePair`2<object, string>> LookupDataSource { get; }
    public abstract virtual IEnumerable`1<KeyValuePair`2<object, string>> get_LookupDataSource();
}
public interface DevExpress.Utils.Filtering.Internal.IMetadataProvider {
    public abstract virtual AnnotationAttributes GetAnnotationAttributes(string name);
    public abstract virtual string GetCaption(string name);
    public abstract virtual string GetDescription(string name);
    public abstract virtual string GetLayout(string name);
    public abstract virtual int GetOrder(string name);
    public abstract virtual string GetShortName(string name);
    public abstract virtual bool GetIsVisible(string name);
    public abstract virtual bool GetApplyFormatInEditMode(string name);
    public abstract virtual string GetDataFormatString(string name);
    public abstract virtual string GetNullDisplayText(string name);
    public abstract virtual Nullable`1<DataType> GetDataType(string name);
    public abstract virtual Type GetEnumDataType(string name);
    public abstract virtual FilterAttributes GetFilterAttributes(string name);
    public abstract virtual Type GetType(string name);
    public abstract virtual Type GetAttributesTypeDefinition(string name);
    public abstract virtual IMetricAttributes GetAttributes(string name);
}
internal interface DevExpress.Utils.Filtering.Internal.IMetadataStorage {
    public abstract virtual void SetEnabled(string path, bool enabled);
    public abstract virtual void SetOrder(string path, Nullable`1<int> order);
    public abstract virtual void SetAttributes(string path, AnnotationAttributes attributes);
    public abstract virtual void SetAttributes(string path, FilterAttributes attributes);
    public abstract virtual bool TryGetValue(string path, Int32& order);
    public abstract virtual bool TryGetValue(string path, AnnotationAttributes& attributes);
    public abstract virtual bool TryGetValue(string path, FilterAttributes& attributes);
}
public interface DevExpress.Utils.Filtering.Internal.IMetricAttributes {
    public abstract virtual void UpdateMemberBinding(string unboundMemberName, object value);
    public abstract virtual void UpdateMemberBindings(object viewModel, string propertyName, IMetricAttributesQuery query);
    public abstract virtual void UpdateMemberBindings(MetricAttributesData data, IMetricAttributesQuery query);
}
public interface DevExpress.Utils.Filtering.Internal.IMetricAttributes`1 {
}
internal interface DevExpress.Utils.Filtering.Internal.IMetricAttributesCache {
    public abstract virtual Type GetValueOrCache(string path, Func`1<Type> create);
    public abstract virtual IMetricAttributes GetValueOrCache(string path, Func`1<IMetricAttributes> create);
    public abstract virtual void Reset();
}
public interface DevExpress.Utils.Filtering.Internal.IMetricAttributesQuery {
    public string Path { get; }
    public abstract virtual string get_Path();
    public abstract virtual IDictionary`2<string, object> InitializeValues(MetricAttributesData data);
    public abstract virtual void QueryValues(IDictionary`2<string, object> values);
}
public interface DevExpress.Utils.Filtering.Internal.IMetricAttributesQueryFactory {
    public abstract virtual IMetricAttributesQuery CreateQuery(IEndUserFilteringMetric metric, IMetricAttributesQueryOwner owner);
}
public interface DevExpress.Utils.Filtering.Internal.IMetricAttributesQueryOwner {
    public abstract virtual void RaiseMetricAttributesQuery(TEventArgs e);
    public abstract virtual void RegisterContext(IMetricAttributesQueryOwner context);
    public abstract virtual void UnregisterContext();
}
[DebuggerDisplayAttribute("{Begin}-{End}")]
public class DevExpress.Utils.Filtering.Internal.Interval`1 : object {
    [CompilerGeneratedAttribute]
private Nullable`1<T> <Begin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<T> <End>k__BackingField;
    internal static Interval`1[] EmptyIntervals;
    private static bool IsDateTime;
    private static bool IsDateOnly;
    private static bool IsTimeSpan;
    public Nullable`1<T> Begin { get; private set; }
    public Nullable`1<T> End { get; private set; }
    public Interval`1(Nullable`1<T> begin, Nullable`1<T> end);
    private static Interval`1();
    [CompilerGeneratedAttribute]
public Nullable`1<T> get_Begin();
    [CompilerGeneratedAttribute]
private void set_Begin(Nullable`1<T> value);
    [CompilerGeneratedAttribute]
public Nullable`1<T> get_End();
    [CompilerGeneratedAttribute]
private void set_End(Nullable`1<T> value);
    public sealed virtual bool Equals(Interval`1<T> interval);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    protected internal virtual bool Contains(Interval`1<T> interval);
    protected internal virtual bool CanMerge(Interval`1<T> interval);
    protected internal virtual CriteriaOperator GetCriteria(string path);
    private CriteriaOperator GetCriteria(string path, Nullable`1<T> fromValue, Nullable`1<T> toValue);
    private CriteriaOperator GetCriteria(string path, Nullable`1<T> value, BinaryOperatorType operatorType);
    protected virtual CriteriaOperator GetRangeCriteria(string path, CriteriaOperator fromCriteria, CriteriaOperator toCriteria);
    protected virtual CriteriaOperator GetBinaryCriteria(string path, Nullable`1<T> value, BinaryOperatorType operatorType);
    internal static Nullable`1<T> CheckIsAfter(bool isGroup, Nullable`1<T> val, Nullable`1<bool> inclusive);
    internal static Nullable`1<T> CheckIsBefore(bool isGroup, Nullable`1<T> val, Nullable`1<bool> inclusive);
}
internal abstract class DevExpress.Utils.Filtering.Internal.IntervalsHashTreeIndices`2 : HashTreeIndices {
    protected EventHandlerList events;
    protected Dictionary`2<int, THash> hashes;
    protected Dictionary`2<int, int> hashKeys;
    protected Dictionary`2<int, Object[]> hashValues;
    private Func`2<THash, bool> filterCore;
    protected HashSet`1<int> filteredOut;
    protected HashSet`1<int> visibleByFilter;
    internal HashSet`1<int> checks;
    private IIntervalsChecks<T, THash> treeChecks;
    internal static object checkedChanged;
    private static object visualUpdateRequired;
    private int DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.Count { get; }
    private THash DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.Item { get; }
    private bool DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.FilteredOut { get; }
    private bool DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.HasChecks { get; }
    protected Interval`1[] AllIntervals { get; }
    protected IntervalsHashTreeIndices`2(Object[] values, bool rootVisible, EventHandlerList events);
    private static IntervalsHashTreeIndices`2();
    protected abstract virtual void AddNodes(Object[] values, bool rootVisible);
    protected abstract virtual void Initialize();
    private sealed virtual override int DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.get_Count();
    private sealed virtual override THash DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.get_Item(int index);
    private sealed virtual override string DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.GetText(int index);
    private sealed virtual override string DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.GetText(THash hash, int level);
    protected abstract virtual string Text(THash hash);
    protected abstract virtual string Text(THash hash, int level);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.Prepare();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<T,THash>.Update(Object[] values, Interval`1[] intervals, Interval`1<T> range, bool isRangeSelector);
    protected virtual void Update(Object[] values, bool isRangeSelector);
    protected abstract virtual void BeforeUpdate();
    protected abstract virtual void AfterUpdate();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IHashTree<THash>.IsExpanded(THash hash);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IHashTree<THash>.Expand(THash hash);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IHashTree<THash>.EnsureExpanded(THash hash);
    protected sealed virtual void ResetExpandedByFilter();
    protected sealed virtual void OnSetExpandedByFilter(int index);
    protected sealed virtual void OnExpanded();
    protected abstract virtual int GroupKey(THash hash);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.get_FilteredOut();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.Filter(Func`2<THash, bool> filter);
    protected virtual bool GetIsVisible(Entry entry, int index);
    private void FilterNodes(Func`2<THash, bool> filter);
    protected abstract virtual int ParentKey(THash hash);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.get_HasChecks();
    private sealed virtual override Nullable`1<bool> DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.IsChecked(int index);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.Toggle(int index);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.ToggleAll();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.Invert();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.Reset();
    protected virtual bool ResetCore();
    private int GetValueKey(int index, Int32& key);
    private int GetValueKey(int key, int index);
    private int GetValueKey(int key, int index, int childIndex);
    private int GetGroupKey(int key, int parentKey, int index);
    private Object[] Path(int index);
    private int ValueKey(int index, Int32& key);
    protected abstract virtual Object[] Path(THash hash);
    protected abstract virtual int ValueKey(THash hash, Int32& key);
    protected abstract virtual IIntervalsChecks<T, THash> CreateIntervalsChecks();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.IntervalsHashTreeIndices`2/<DevExpress-Utils-Filtering-Internal-IIntervalsHashTree<THash>-GetCheckedIndices>d__57")]
private sealed virtual override IEnumerable`1<int> DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.GetCheckedIndices();
    private IEnumerator`1<int> GetCheckedIndicesEnumerator();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.IntervalsHashTreeIndices`2/<DevExpress-Utils-Filtering-Internal-IIntervalsHashTree<THash>-GetFilteredIndices>d__59")]
private sealed virtual override IEnumerable`1<int> DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.GetFilteredIndices();
    protected abstract virtual Interval`1[] get_AllIntervals();
    private sealed virtual override IReadOnlyCollection`1<Interval`1<T>> DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<T,THash>.GetIntervals();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<T,THash>.Initialize(IReadOnlyCollection`1<Interval`1<T>> intervals);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<T,THash>.Initialize(Interval`1<T> range);
    private bool InitializeChecks(Interval`1[] intervals, Interval`1<T> range);
    private bool InitializeChecks(IEnumerator`1<int> valuesEnumerator);
    protected bool TryGetCheckedRange(Int32& startIndex, Int32& endIndex);
    protected abstract virtual bool TryGetInterval(THash hash, Interval`1& interval);
    protected abstract virtual bool Match(THash hash, IReadOnlyCollection`1<Interval`1<T>> intervals);
    protected abstract virtual bool Match(THash hash, Interval`1<T> range);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.add_CheckedChanged(EventHandler value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.remove_CheckedChanged(EventHandler value);
    private void RaiseCheckedChanged();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.add_VisualUpdateRequired(EventHandler value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.remove_VisualUpdateRequired(EventHandler value);
    protected void RaiseVisualUpdateRequired();
    [CompilerGeneratedAttribute]
private bool <GetCheckedIndicesEnumerator>b__58_0(int key, int index);
    [CompilerGeneratedAttribute]
private bool <DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<THash>.GetFilteredIndices>b__59_0(int key, int index);
    [CompilerGeneratedAttribute]
private bool <DevExpress.Utils.Filtering.Internal.IIntervalsHashTree<T,THash>.GetIntervals>b__62_0(int key, int index);
    [CompilerGeneratedAttribute]
private bool <TryGetCheckedRange>b__67_0(int key, int index);
}
internal interface DevExpress.Utils.Filtering.Internal.IOrderedStorage`1 {
    public abstract virtual void ResetOrder(Func`2<T, int> getOrder);
}
public interface DevExpress.Utils.Filtering.Internal.IRangeMetricAttributes {
    public bool IsNumericRange { get; }
    public bool IsTimeSpanRange { get; }
    public bool IsTimeOnlyRange { get; }
    public RangeUIEditorType NumericRangeUIEditorType { get; }
    public DateTimeRangeUIEditorType DateTimeRangeUIEditorType { get; }
    public string FromName { get; }
    public string ToName { get; }
    public string NullName { get; }
    public abstract virtual bool get_IsNumericRange();
    public abstract virtual bool get_IsTimeSpanRange();
    public abstract virtual bool get_IsTimeOnlyRange();
    public abstract virtual RangeUIEditorType get_NumericRangeUIEditorType();
    public abstract virtual DateTimeRangeUIEditorType get_DateTimeRangeUIEditorType();
    public abstract virtual string get_FromName();
    public abstract virtual string get_ToName();
    public abstract virtual string get_NullName();
}
public interface DevExpress.Utils.Filtering.Internal.IRangeMetricAttributes`1 {
    public Nullable`1<T> Minimum { get; }
    public Nullable`1<T> Maximum { get; }
    public Nullable`1<T> Average { get; }
    public abstract virtual Nullable`1<T> get_Minimum();
    public abstract virtual Nullable`1<T> get_Maximum();
    public abstract virtual Nullable`1<T> get_Average();
}
public interface DevExpress.Utils.Filtering.Internal.IRangeValueViewModel {
    public bool AllowNull { get; }
    public string FromName { get; }
    public string ToName { get; }
    public string NullName { get; }
    public Nullable`1<bool> ParsedExact { get; }
    public Nullable`1<bool> ParsedExactFrom { get; }
    public Nullable`1<bool> ParsedExactTo { get; }
    public abstract virtual bool get_AllowNull();
    public abstract virtual string get_FromName();
    public abstract virtual string get_ToName();
    public abstract virtual string get_NullName();
    public abstract virtual Nullable`1<bool> get_ParsedExact();
    public abstract virtual Nullable`1<bool> get_ParsedExactFrom();
    public abstract virtual Nullable`1<bool> get_ParsedExactTo();
}
public interface DevExpress.Utils.Filtering.Internal.IRangeValueViewModel`1 {
    public Nullable`1<T> Average { get; }
    public Nullable`1<T> Minimum { get; }
    public Nullable`1<T> Maximum { get; }
    public Nullable`1<T> FromValue { get; public set; }
    public Nullable`1<T> ToValue { get; public set; }
    public IReadOnlyCollection`1<Interval`1<T>> Intervals { get; public set; }
    public abstract virtual Nullable`1<T> get_Average();
    public abstract virtual Nullable`1<T> get_Minimum();
    public abstract virtual Nullable`1<T> get_Maximum();
    public abstract virtual Nullable`1<T> get_FromValue();
    public abstract virtual void set_FromValue(Nullable`1<T> value);
    public abstract virtual Nullable`1<T> get_ToValue();
    public abstract virtual void set_ToValue(Nullable`1<T> value);
    public abstract virtual IReadOnlyCollection`1<Interval`1<T>> get_Intervals();
    public abstract virtual void set_Intervals(IReadOnlyCollection`1<Interval`1<T>> value);
}
public interface DevExpress.Utils.Filtering.Internal.ISimpleValueViewModel`1 {
    public bool AllowNull { get; }
    public Nullable`1<T> Value { get; public set; }
    public abstract virtual bool get_AllowNull();
    public abstract virtual Nullable`1<T> get_Value();
    public abstract virtual void set_Value(Nullable`1<T> value);
}
public interface DevExpress.Utils.Filtering.Internal.IStorage`1 {
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Filtering.Internal.IStorage`2 {
    public T Item { get; }
    public bool AreElementsLoaded { get; }
    public abstract virtual T get_Item(TPath path, Func`2<T, TPath> getPath);
    public abstract virtual IEnumerable`1<TPath> GetPaths(Func`2<T, TPath> getPath);
    public abstract virtual IEnumerable`1<KeyValuePair`2<TPath, TValue>> GetPairs(Func`2<T, TPath> getPath, Func`2<T, TValue> accessor);
    public abstract virtual bool get_AreElementsLoaded();
}
public interface DevExpress.Utils.Filtering.Internal.ISummaryDataController {
    public ISummaryItemsCollection Summary { get; }
    public abstract virtual IDataColumnInfo GetColumn(string fieldName);
    public abstract virtual ISummaryItemsCollection get_Summary();
}
public interface DevExpress.Utils.Filtering.Internal.ISummaryItemsCollection {
    public abstract virtual SummaryItem Add(IDataColumnInfo column, SummaryItemTypeEx type, decimal argument, ICustomUIFilterSummaryItem tag);
    public abstract virtual void BeginUpdate();
    public abstract virtual void CancelUpdate();
    public abstract virtual void EndUpdate();
}
public interface DevExpress.Utils.Filtering.Internal.ISummaryMetricAttributes {
    public abstract virtual bool TryGetDataController(Object& controller);
    public abstract virtual bool TryGetSummaryValue(string member, Object& value);
}
public interface DevExpress.Utils.Filtering.Internal.ISupportInversion {
    public bool HasInversion { get; }
    public object InvertedValues { get; }
    public abstract virtual bool get_HasInversion();
    public abstract virtual object get_InvertedValues();
}
public interface DevExpress.Utils.Filtering.Internal.IUniqueValuesMetricAttributes {
    public bool HasUniqueValues { get; }
    public object UniqueValues { get; }
    public abstract virtual bool get_HasUniqueValues();
    public abstract virtual object get_UniqueValues();
}
public interface DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel {
    public bool HasValues { get; }
    public object Values { get; }
    public abstract virtual bool get_HasValues();
    public abstract virtual object get_Values();
}
public interface DevExpress.Utils.Filtering.Internal.IUserDefinedFilterItem {
    public string Name { get; }
    public CriteriaOperator Criteria { get; }
    public abstract virtual string get_Name();
    public abstract virtual CriteriaOperator get_Criteria();
}
public interface DevExpress.Utils.Filtering.Internal.IValueTypeResolver {
    public abstract virtual Type GetAttributesType(Type metricTypeDefinition, Type valueType);
    public abstract virtual Type GetValueViewModelType(Type metricTypeDefinition, Type valueType);
    public abstract virtual Type GetValueBoxType(Type metricTypeDefinition, Type valueType);
}
public interface DevExpress.Utils.Filtering.Internal.IValueViewModel {
    public bool IsModified { get; }
    public bool IsInitializedWithValues { get; }
    public abstract virtual bool get_IsModified();
    public abstract virtual bool get_IsInitializedWithValues();
    public abstract virtual void Initialize(IEndUserFilteringMetricViewModel metricViewModel);
    public abstract virtual void Initialize(IEnumerable`1<IEndUserFilteringMetricViewModel> viewModels);
    public abstract virtual void Release();
    public abstract virtual void Reset();
    public abstract virtual bool CanReset();
    public abstract virtual void ResetAll();
    public abstract virtual bool CanResetAll();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(EventHandler value);
}
public interface DevExpress.Utils.Filtering.Internal.IViewModelBuilder {
    public string TypeNameModifier { get; }
    public abstract virtual string get_TypeNameModifier();
    public abstract virtual bool ForceBindableProperty(PropertyInfo property);
    public abstract virtual void BuildBindablePropertyAttributes(PropertyInfo property, PropertyBuilder builder);
}
public interface DevExpress.Utils.Filtering.Internal.IViewModelBuilderResolver {
    public abstract virtual IViewModelBuilder CreateViewModelBuilder();
    public abstract virtual IViewModelBuilder CreateValueViewModelBuilder(IEndUserFilteringMetric metric);
}
public interface DevExpress.Utils.Filtering.Internal.IViewModelFactory {
    public abstract virtual object Create(Type viewModelType, IViewModelBuilder builder);
}
internal interface DevExpress.Utils.Filtering.Internal.IVisibleItemsSource {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void Expand(int group);
    public abstract virtual int GetIndex(int index, bool returnSourceIndex);
    public abstract virtual IEnumerator`1<int> Indices(int index, bool forwardDirection);
    public abstract virtual IEnumerable`1<int> Indices(HashSet`1<int> groups);
    public abstract virtual IEnumerable`1<int> Indices(IEnumerable`1<int> indexes);
}
internal enum DevExpress.Utils.Filtering.Internal.KnownValues : Enum {
    public int value__;
    public static KnownValues NullOrBlank;
    public static KnownValues Aggregate;
    public static KnownValues Sequence;
    public static KnownValues Date;
    public static KnownValues BaseDate;
    public static KnownValues DatePart;
    public static KnownValues Time;
    public static KnownValues User;
}
internal abstract class DevExpress.Utils.Filtering.Internal.LazyMetricAttributesFactoryBase : object {
    protected static String[] EmptyRangeMembers;
    private static String[] EmptyLookupMembers;
    private static String[] EmptyBooleanChoiceMembers;
    private static LazyMetricAttributesFactoryBase();
    private sealed virtual override IMetricAttributes DevExpress.Utils.Filtering.Internal.ILazyMetricAttributesFactory.CreateRange(Type type);
    private sealed virtual override IMetricAttributes DevExpress.Utils.Filtering.Internal.ILazyMetricAttributesFactory.CreateLookup(Type type);
    private sealed virtual override IMetricAttributes DevExpress.Utils.Filtering.Internal.ILazyMetricAttributesFactory.CreateBooleanChoice(Type type);
    private sealed virtual override IMetricAttributes DevExpress.Utils.Filtering.Internal.ILazyMetricAttributesFactory.CreateEnumChoice(Type type, Type enumDataType);
    private sealed virtual override IMetricAttributes DevExpress.Utils.Filtering.Internal.ILazyMetricAttributesFactory.CreateGroup(Type type);
    protected virtual IMetricAttributes CreateDateTimeRangeCore(Type type);
    protected virtual IMetricAttributes CreateNumericRangeCore(Type type);
    protected virtual IMetricAttributes CreateLookupCore(Type type);
    protected virtual IMetricAttributes CreateBooleanChoiceCore(Type type);
    protected virtual IMetricAttributes CreateEnumChoiceCore(Type type, Type enumDataType);
    protected virtual IMetricAttributes CreateGroupCore(Type type);
}
internal class DevExpress.Utils.Filtering.Internal.LocalizableString : object {
    private string propertyName;
    private string propertyValue;
    private Type resourceType;
    private Func`1<string> accessor;
    public string Value { get; public set; }
    public Type ResourceType { get; public set; }
    public LocalizableString(string propertyName);
    public LocalizableString(Type resourceType, string propertyName);
    public LocalizableString(Expression`1<Func`1<string>> propertyExpression);
    public LocalizableString(LocalizableString source);
    public string get_Value();
    public void set_Value(string value);
    public Type get_ResourceType();
    public void set_ResourceType(Type value);
    public string GetLocalizableValue();
    private bool IsBadlyConfigured(PropertyInfo property);
    private void ResetAccessor();
    public sealed virtual bool Equals(LocalizableString string);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private string <GetLocalizableValue>b__14_0();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
internal abstract class DevExpress.Utils.Filtering.Internal.LocalizableUIElement`1 : object {
    protected TUIElementID id;
    internal static string StringIdTypeSuffix;
    internal static string StringIdNameSuffix;
    internal static string StringIdDescriptionSuffix;
    internal static string UIElementIDPrefix;
    public string Name { get; }
    public string Description { get; }
    protected LocalizableUIElement`1(TUIElementID id);
    private static LocalizableUIElement`1();
    public virtual string get_Name();
    public virtual string get_Description();
    public sealed virtual string ToString();
    public sealed virtual int GetHashCode();
    public sealed virtual bool Equals(object obj);
    private sealed virtual override TUIElementID DevExpress.Utils.Filtering.Internal.ILocalizableUIElement<TUIElementID>.GetID();
    protected abstract virtual int GetHash(TUIElementID id);
    internal static string GetName(TUIElementID id);
    internal static string GetDescription(TUIElementID id);
}
internal class DevExpress.Utils.Filtering.Internal.LookupDataSource`1 : object {
    private IEnumerable dataSource;
    private string valueMember;
    private string displayMember;
    private HashSet`1<int> nullAndBlanks;
    private HashSet`1<object> valuesLookup;
    private Dictionary`2<int, string> displayTextLookup;
    private IDisplayMetricAttributes displayMetricAttributes;
    private string nullName;
    private bool forceFilterByDisplayText;
    private bool useBlanks;
    private Action delayedInitialization;
    private SynchronizationContext context;
    private int maxDisplayIndexCore;
    private static bool allowNull;
    private IEnumerable`1<KeyValuePair`2<object, string>> lookupDataSource;
    public bool Loaded { get; }
    public int NullAndBlanksCount { get; }
    public int MaxDisplayIndex { get; }
    public LookupDataSource`1(IEnumerable dataSource, IMetricAttributes attributes, HashSet`1<object> valuesLookup, Dictionary`2<int, string> displayTextLookup, Action delayedInitialization, SynchronizationContext synchronizationContext);
    private static LookupDataSource`1();
    public bool get_Loaded();
    public int get_NullAndBlanksCount();
    public bool IsNullOrBlank(int index);
    public int get_MaxDisplayIndex();
    private IEnumerable`1<KeyValuePair`2<object, string>> CreateValuesLookup(IEnumerable dataSource, string nullName, bool useBlanks);
    private IEnumerable`1<KeyValuePair`2<object, string>> CreateTextLookup(IEnumerable dataSource, string nullName, bool useBlanks);
    private void OnEndLookup(int visibleIndex);
    private static object GetLookupDataItem(object item);
    private static string GetNullDisplayText(IDisplayMetricAttributes displayMetricAttributes, int index, string nullName);
    private static string GetDisplayText(IDisplayMetricAttributes displayMetricAttributes, int index, object item, string displayValue);
    private bool SkipNull(object value, int nextIndex);
    private bool SkipBlank(bool useBlanks, object value, int nextIndex);
    private static bool IsBlank(object value);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<object, string>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.String>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.LookupDataSource`1/<CreateLookup>d__34")]
private IEnumerator`1<KeyValuePair`2<object, string>> CreateLookup(IEnumerable dataSource, string nullName, bool useBlanks);
    [CompilerGeneratedAttribute]
private object <CreateTextLookup>b__22_0(object x);
    [CompilerGeneratedAttribute]
private void <OnEndLookup>b__23_0(object _);
}
[ExtensionAttribute]
internal static class DevExpress.Utils.Filtering.Internal.MayBe : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static TResult Get(T this, Func`2<T, TResult> get, TResult defaultValue);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static void Do(T this, Action`1<T> do);
}
internal static class DevExpress.Utils.Filtering.Internal.MemberReader : object {
    private static IDictionary`2<string, Func`2<object, object>> accessors;
    internal static Func`2<object, object> defaultAccessor;
    private static MemberReader();
    internal static object Read(object viewModel, string memberName, IDictionary`2<string, object> valuesHash);
    internal static object Read(object viewModel, string memberName);
    internal static void ResetAccessors(object viewModel);
    internal static Expression`1<Func`2<object, object>> GetAccessor(Type viewModelType, MemberInfo m);
    private static Expression`1<Func`2<object, object>> Call(Type sourceType, MethodInfo sourceMethod);
    private static Expression`1<Func`2<object, object>> Accessor(Type sourceType, MemberInfo sourceProperty);
    private static Expression CheckReturnType(MethodCallExpression call);
    private static Expression CheckMemberType(MemberExpression accessor);
}
internal class DevExpress.Utils.Filtering.Internal.MetadataProvider : object {
    private IMetadataStorage metadataStorage;
    public MetadataProvider(IMetadataStorage metadataStorage);
    private sealed virtual override AnnotationAttributes DevExpress.Utils.Filtering.Internal.IMetadataProvider.GetAnnotationAttributes(string name);
    private sealed virtual override FilterAttributes DevExpress.Utils.Filtering.Internal.IMetadataProvider.GetFilterAttributes(string name);
    public sealed virtual string GetCaption(string name);
    public sealed virtual string GetShortName(string name);
    public sealed virtual string GetDescription(string name);
    public sealed virtual string GetLayout(string name);
    public sealed virtual bool GetIsVisible(string name);
    public sealed virtual int GetOrder(string name);
    public sealed virtual bool GetApplyFormatInEditMode(string name);
    public sealed virtual string GetDataFormatString(string name);
    public sealed virtual string GetNullDisplayText(string name);
    public sealed virtual Nullable`1<DataType> GetDataType(string name);
    public sealed virtual Type GetType(string name);
    public sealed virtual Type GetEnumDataType(string name);
    public sealed virtual Type GetAttributesTypeDefinition(string name);
    public sealed virtual IMetricAttributes GetAttributes(string name);
    private Type GetMetricAttributesTypeDefinition(string name, Type propertyType, Type enumDataType);
    private IMetricAttributes CreateMetricAttributes(string name, Type propertyType, Type enumDataType);
    private int GetColumnIndexFromMetadata(string name);
    private T GetValueFromAnnotationAttributes(string name, Func`2<AnnotationAttributes, T> getValue);
    private T GetValueFromFilterAttributes(string name, Func`2<FilterAttributes, T> getValue);
    private static string GetName(string path);
}
internal static class DevExpress.Utils.Filtering.Internal.MethodInfoHelper : object {
    internal static MethodInfo GetMethodInfo(Type sourceType, string methodName);
    internal static MethodInfo GetMethodInfo(Type sourceType, string methodName, Type[] types, BindingFlags flags);
    private static TMemberInfo GetMemberInfo(Type sourceType, Func`2<Type, TMemberInfo> getMember);
    private static Type[] GetTypes(Type sourceType, Type[] interfaces);
}
internal abstract class DevExpress.Utils.Filtering.Internal.MetricAttributes : object {
    private static Dictionary`2<Type, Func`7<Nullable`1<bool>, string, string, string, BooleanUIEditorType, String[], IMetricAttributes>> booleanChoiceInitializers;
    private static Type[] enumConstructorParameterTypes;
    private static Dictionary`2<Type, EnumChoiceMetricCtor> enumChoiceInitializers;
    private static Type[] groupConstructorParameterTypes;
    private static Dictionary`2<Type, GroupMetricCtor> groupInitializers;
    private static Type[] lookupConstructorParameterTypes;
    private static Dictionary`2<Type, LookupMetricCtor> lookupInitializers;
    private static Dictionary`2<Type, Func`4<ILazyMetricAttributesFactory, Type, Type, IMetricAttributes>> lazyInstantiatorsMapping;
    private String[] members;
    private String[] unboundMembers;
    private MemberValueBox[] valueBoxes;
    private DisplayTextsBox displayTexts;
    private MemberNullableValueBox`1<bool> filterByDisplayText;
    private MemberNullableValueBox`1<bool> sortedByDisplayText;
    private MemberNullableValueBox`1<bool> displayBlanks;
    private MemberNullableValueBox`1<bool> displayRadio;
    private DataItemsLookupBox dataItemsLookup;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private static Dictionary`2<Type, Func`9<object, object, object, string, string, string, RangeUIEditorType, String[], IMetricAttributes>> rangeInitializers;
    private static Dictionary`2<Type, Func`8<object, object, string, string, string, DateTimeRangeUIEditorType, String[], IMetricAttributes>> dateTimeRangeInitializers;
    protected string DefaultNullName { get; }
    protected String[] DisplayTexts { get; }
    protected Nullable`1<bool> FilterByDisplayText { get; }
    protected Nullable`1<bool> SortedByDisplayText { get; }
    protected Nullable`1<bool> DisplayBlanks { get; }
    protected Nullable`1<bool> DisplayRadio { get; }
    protected object DataItemsLookup { get; }
    private bool DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes.FilterByDisplayText { get; }
    private bool DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes.SortedByDisplayText { get; }
    private object DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes.DataItemsLookup { get; }
    protected MetricAttributes(String[] members, int specialMembersCountMembers);
    private static MetricAttributes();
    internal static bool IsBooleanChoice(Type type);
    internal static IMetricAttributes CreateBooleanChoice(Type type, Nullable`1<bool> defaultValue, string trueName, string falseName, string defaultName, BooleanUIEditorType editorType, String[] members);
    internal static bool IsEnumChoice(Type type);
    internal static IMetricAttributes CreateEnumChoice(Type type, Type enumDataType, LookupUIEditorType editorType, Nullable`1<bool> useFlags, FlagComparisonRule comparisonRule, ValueSelectionMode selectionMode, Nullable`1<bool> useSelectAll, string selectAllName, string nullName, String[] members);
    private static bool GetUseFlags(Nullable`1<bool> useFlags, Type enumType);
    internal static IMetricAttributes CreateGroup(Type type, GroupUIEditorType editorType, String[] grouping, ValueSelectionMode selectionMode, Nullable`1<bool> useSelectAll, string selectAllName, string nullName, String[] members);
    internal static bool IsLookup(IEndUserFilteringMetric metric, IMetadataStorage storage);
    internal static bool IsLookup(Type type, string path, IMetadataStorage storage);
    internal static bool IsDateTimeOffset(Type type);
    internal static bool IsLookup(Type type);
    internal static bool IsLookupMember(IMetadataStorage metadataStorage, Type type, string path);
    private static bool IsTypicalLookupMemberType(Type type);
    private static bool IsIdProperty(string path);
    private static bool IsKeyMember(IMetadataStorage metadataStorage, string path);
    private static bool GetIsKey(IMetadataStorage metadataStorage, string path);
    internal static IMetricAttributes CreateLookup(Type type, object dataSource, string valueMember, string displayMember, Nullable`1<int> top, Nullable`1<int> maxCount, LookupUIEditorType editorType, ValueSelectionMode selectionMode, Nullable`1<bool> useSelectAll, string selectAllName, string nullName, Nullable`1<bool> useBlanks, string blanksName, String[] members);
    internal static Type GetMetricAttributesTypeDefinition(IMetricAttributesCache cache, string path, Type type, Type enumDataType);
    internal static IMetricAttributes CreateLazyMetricAttributes(IServiceProvider serviceProvider, string path, Type type, Type enumDataType);
    internal bool TryGetValue(string member, Object& value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetricAttributes.UpdateMemberBinding(string unboundMemberName, object value);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetricAttributes.UpdateMemberBindings(MetricAttributesData data, IMetricAttributesQuery query);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IMetricAttributes.UpdateMemberBindings(object viewModel, string propertyName, IMetricAttributesQuery queryProvider);
    protected virtual IMetricAttributesQuery EnsureQueryProvider(IMetricAttributesQuery queryProvider);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void RaisePropertyChanged(string propertyName);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.ISummaryMetricAttributes.TryGetDataController(Object& controller);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.ISummaryMetricAttributes.TryGetSummaryValue(string member, Object& value);
    protected virtual string get_DefaultNullName();
    protected virtual bool AllowDisplayLookup(object owner);
    protected virtual bool CheckLookupDisplayText(object value, String& text);
    protected virtual bool IsNullDisplayLookupItem(object value);
    protected internal virtual bool ShouldUseBlanksFilterForNullValue(object value);
    protected virtual KeyValuePair`2<object, string> CreateDisplayLookupItem(object value, string text);
    protected virtual String[] get_DisplayTexts();
    protected virtual Nullable`1<bool> get_FilterByDisplayText();
    protected virtual Nullable`1<bool> get_SortedByDisplayText();
    protected virtual Nullable`1<bool> get_DisplayBlanks();
    protected virtual Nullable`1<bool> get_DisplayRadio();
    protected virtual object get_DataItemsLookup();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes.get_FilterByDisplayText();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes.get_SortedByDisplayText();
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes.get_DataItemsLookup();
    internal static bool ForceFilterByText(Type type, IDisplayMetricAttributes displayMetricAttributes);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes.TryGetDisplayLookup(object owner, object uniqueValues, bool skipNulls, Object& lookup);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes.TryGetDisplayText(int valueIndex, String& text);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IDisplayMetricAttributes.TryGetDisplayIndex(string displayText, Int32& valueIndex);
    protected static bool IsNullOrDBNull(object value);
    protected static bool IsBlank(object value);
    internal static bool IsRange(Type type);
    internal static bool IsDateTimeRange(Type type);
    private static bool IsDateOrTime(Type type);
    internal static bool IsDateTime(Type type);
    internal static bool IsDateOnly(Type type);
    internal static bool IsTimeSpan(Type type);
    internal static bool IsTimeOnly(Type type);
    internal static void CheckNumericRange(Type type, Object& min, Object& max);
    internal static void CheckDataTimeRange(Type type, Object& min, Object& max);
    internal static void CheckDataTimeRangeCore(Type type, Object& min, Object& max);
    private static DateTimeRangeUIEditorType CheckDateTimeRangeUIEditorType(RangeUIEditorType value);
    internal static IMetricAttributes CreateRange(Type type, object min, object max, object avg, string fromName, string toName, string nullName, RangeUIEditorType editorType, String[] members);
    internal static IMetricAttributes CreateRange(Type type, object min, object max, string fromName, string toName, string nullName, DateTimeRangeUIEditorType editorType, String[] members);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.MillisecondsInterval : DurationInterval {
    public MillisecondsInterval(TimeSpan duration);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.MinutesInterval : DurationInterval {
    public MinutesInterval(TimeSpan duration);
}
[DebuggerDisplayAttribute("Month:{Begin.Value.ToShortDateString(),nq}")]
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.MonthInterval : DateInterval {
    public MonthInterval(DateTime date);
    public MonthInterval(int year, int month);
}
[ExtensionAttribute]
internal static class DevExpress.Utils.Filtering.Internal.Notify : object {
    private static ConcurrentDictionary`2<string, Func`2<object, object>> getPropCache;
    private static ConcurrentDictionary`2<Type, Action`2<object, string>> raisePropertyCache;
    private static ConcurrentDictionary`2<Type, Action`1<object>> raiseCanExecuteCache;
    private static Notify();
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static void RaiseCanExecuteChanged(object this, Expression`1<Action> expression);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static void RaiseCanExecuteChanged(object this, Expression`1<Action`1<T>> expression);
    [ExtensionAttribute]
private static void RaiseCanExecuteChanged(object this, MethodInfo methodInfo);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static void RaisePropertyChanged(object this, Expression`1<Func`1<T>> expression);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static void RaisePropertyChanged(object this, LambdaExpression propertySelector);
    [ExtensionAttribute]
internal static void RaisePropertyChanged(object this, string propertyName);
    private static Func`2<object, object> GetGetPropertyValue(MethodInfo methodInfo, Type type);
    private static Action`2<object, string> GetRaisePropertyChanged(object this);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
private static Action`1<object> GetRaiseCanExecuteChanged(object this);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static void Reset();
}
internal static class DevExpress.Utils.Filtering.Internal.NullableTypesCache : object {
    private static ConcurrentDictionary`2<Type, Type> cache;
    private static Type NullableBase;
    private static Func`2<Type, Type> genericTypeFactory;
    private static NullableTypesCache();
    internal static Type Get(Type type);
}
internal class DevExpress.Utils.Filtering.Internal.QueryHelper : object {
    private static Type UniqueValuesType;
    private static Type ArrayListType;
    private static Type DataRowCollectionType;
    private static Type DataTableType;
    private static MethodInfo enumerableOfTypeInfo;
    private static MethodInfo queryableOfTypeInfo;
    private static Dictionary`2<Type, Func`3<object, Func`2<object, bool>, bool>> anyCache;
    private static MethodInfo enumerableAnyInfo;
    private static MethodInfo queryableAnyInfo;
    private static Type UntypedPredicate;
    private static Dictionary`2<Type, Func`3<object, int, object>> takeCache;
    private static MethodInfo enumerableTakeInfo;
    private static MethodInfo queryableTakeInfo;
    private static Dictionary`2<Type, Func`2<object, int>> countCache;
    private static MethodInfo enumerableCountInfo;
    private static MethodInfo queryableCountInfo;
    private static Dictionary`2<Type, Func`2<object, object>> distinctCache;
    private static MethodInfo enumerableDistinctInfo;
    private static MethodInfo queryableDistinctInfo;
    private static Dictionary`2<Type, Func`2<object, object>> selectCache;
    private static MethodInfo enumerableSelectInfo;
    private static MethodInfo queryableSelectInfo;
    private static Dictionary`2<Type, Func`2<object, object>> materializationCache;
    private static MethodInfo enumerableToListInfo;
    private static MethodInfo enumerableToArrayInfo;
    private static QueryHelper();
    internal static IReadOnlyCollection`1<T> GetValues(object dataSource, string valueMember);
    internal static bool Any(object dataSource, Func`2<object, bool> predicate);
    internal static object Take(object dataSource, Nullable`1<int> count);
    internal static object TakeDistinct(object dataSource, Nullable`1<int> count);
    internal static int Count(object dataSource);
    internal static int CountDistinct(object dataSource);
    private static bool AnyCore(Array array, Func`2<object, bool> predicate);
    private static bool AnyCore(object dataSource, Func`2<object, bool> predicate);
    private static Expression CreatePredicate(Func`2<object, bool> predicate, Type elementType, ParameterExpression pPredicate);
    private static object Take(object dataSource, Nullable`1<int> count);
    private static int Count(object dataSource, Type elementType);
    private static object Distinct(object dataSource, Type valueType);
    private static object Select(object dataSource, string valueMember, Type valueType);
    private static object Materialize(object dataSource, bool forceToArray);
    private static DataRowCollection GetDataRows(object dataSource);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.QueryHelper/<GetDataRowValues>d__40")]
private static IEnumerable`1<object> GetDataRowValues(object dataSource, string member);
}
public class DevExpress.Utils.Filtering.Internal.RangeValueBox`1 : ValueViewModel {
    private static IReadOnlyCollection`1<Interval`1<T>> UnspecifiedIntervals;
    private static object intervalsKey;
    private static object fromValueKey;
    private static object toValueKey;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ParsedExact>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ParsedExactFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ParsedExactTo>k__BackingField;
    private Nullable`1<ParsedRangeType<T>> parsedType;
    private Nullable`1<bool> parsedExactStateChanged;
    private static bool IsDateTime;
    private static bool IsDateOnly;
    private static bool IsTimeSpan;
    private static bool IsTimeOnly;
    private static Comparer`1<T> DefaultComparer;
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
public bool HasIntervals { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
protected bool IsRangeIntervalUnspecified { get; }
    public IReadOnlyCollection`1<Interval`1<T>> Intervals { get; public set; }
    public Nullable`1<T> FromValue { get; public set; }
    public Nullable`1<T> ToValue { get; public set; }
    protected IRangeMetricAttributes`1<T> MetricAttributes { get; }
    private bool DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.HasValues { get; }
    private object DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.Values { get; }
    private bool DevExpress.Utils.Filtering.Internal.IRangeValueViewModel.AllowNull { get; }
    [BrowsableAttribute("False")]
public Nullable`1<T> Minimum { get; }
    [BrowsableAttribute("False")]
public Nullable`1<T> Maximum { get; }
    [BrowsableAttribute("False")]
public Nullable`1<T> Average { get; }
    [BrowsableAttribute("False")]
public string FromName { get; }
    [BrowsableAttribute("False")]
public string ToName { get; }
    [BrowsableAttribute("False")]
public string NullName { get; }
    [BrowsableAttribute("False")]
public Nullable`1<bool> ParsedExact { get; private set; }
    [BrowsableAttribute("False")]
public Nullable`1<bool> ParsedExactFrom { get; private set; }
    [BrowsableAttribute("False")]
public Nullable`1<bool> ParsedExactTo { get; private set; }
    private static RangeValueBox`1();
    public bool get_HasIntervals();
    protected bool get_IsRangeIntervalUnspecified();
    public virtual IReadOnlyCollection`1<Interval`1<T>> get_Intervals();
    public virtual void set_Intervals(IReadOnlyCollection`1<Interval`1<T>> value);
    protected IReadOnlyCollection`1<Interval`1<T>> GetRangeIntervals();
    protected bool TryResetRangeIntervals();
    protected void OnIntervalsChanged();
    private void SetIntervals(IReadOnlyCollection`1<Interval`1<T>> intervals);
    private void TryNotifyIntervals();
    private CriteriaOperator CreateDateIntervalsCriteria();
    private CriteriaOperator CreateDateTimeIntervalsCriteria(string path);
    private CriteriaOperator CreateDateOnlyIntervalsCriteria(string path);
    private CriteriaOperator CreateIntervalsCriteria();
    private static IReadOnlyCollection`1<Interval`1<T>> Merge(IReadOnlyCollection`1<Interval`1<T>> intervals);
    protected sealed virtual bool TryParseCore(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected sealed virtual bool InitializeWithNull(bool useInversion);
    protected sealed virtual bool InitializeWithValues(Object[] uniqueAndSortedValues, bool useInversion);
    private static bool IsSameDay(FunctionOperator function);
    private bool TryParseIsSameDay(string path, FunctionOperator function);
    private static void TryAddDay(List`1<Interval`1<T>> intervals, OperandValue day);
    private static bool IsDateRange(FunctionOperator function);
    private bool TryParseDateRange(string path, FunctionOperator function);
    private static bool IsRange(FunctionOperator function);
    private bool TryParseRange(string path, FunctionOperator function);
    private static bool IsBinaryGroup(GroupOperator group);
    private bool TryParseBinaryGroup(string path, BinaryOperator first, BinaryOperator second);
    private bool IsIntervals(GroupOperator group);
    private bool TryParseIntervals(string path, GroupOperator group);
    private bool TryParseBetween(string path, CriteriaOperator left, CriteriaOperator right);
    private bool TryParseBinary(string path, CriteriaOperator criteria, bool isGroup);
    private bool TryParseValueCore(string path, OperandValue value, BinaryOperatorType binaryOperatorType, bool isGroup);
    private bool TryParseIsNull(string path, CriteriaOperator criteria);
    protected virtual void SetIsNull();
    private bool TryGetRange(OperandValue from, OperandValue to, bool exclusiveFrom, bool exclusiveTo, Interval`1& range);
    private bool TryGetRange(Nullable`1<T> fromValue, Nullable`1<T> toValue, bool exclusiveFrom, bool exclusiveTo, Interval`1& range);
    private bool IsExactDateTimeRange();
    private void SetEqual(OperandValue value);
    private void SetEqual(Nullable`1<T> value);
    private void SetRange(OperandValue from, OperandValue to, bool exclusiveFrom, bool exclusiveTo);
    private void SetRange(T from, T to);
    private void SetRangeCore(Interval`1<T> range);
    private void SetRangeInterval(Interval`1<T> range);
    private void SetGreaterThan(bool isGroup, OperandValue value, bool inclusive);
    private void SetLessThan(bool isGroup, OperandValue value, bool inclusive);
    private static bool IsGreater(BinaryOperator binary);
    private static bool IsLess(BinaryOperator binary);
    private static bool IsOrdered(OperandValue first, OperandValue second);
    private static bool IsUnaryIsNull(UnaryOperator unary);
    private static bool IsRangeFunction(bool isDateTime, FunctionOperator function);
    private static bool TryGetValue(OperandValue value, Nullable`1& result);
    public virtual Nullable`1<T> get_FromValue();
    public virtual void set_FromValue(Nullable`1<T> value);
    public virtual Nullable`1<T> get_ToValue();
    public virtual void set_ToValue(Nullable`1<T> value);
    protected virtual void OnFromValueChanged();
    protected virtual void OnToValueChanged();
    protected IRangeMetricAttributes`1<T> get_MetricAttributes();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.get_HasValues();
    private sealed virtual override object DevExpress.Utils.Filtering.Internal.IUniqueValuesViewModel.get_Values();
    protected sealed virtual bool OnMetricAttributesChanged(string propertyName);
    protected sealed virtual void OnMetricAttributesSpecialMemberChanged(string propertyName);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IRangeValueViewModel.get_AllowNull();
    public sealed virtual Nullable`1<T> get_Minimum();
    public sealed virtual Nullable`1<T> get_Maximum();
    public virtual Nullable`1<T> get_Average();
    public sealed virtual string get_FromName();
    public sealed virtual string get_ToName();
    public sealed virtual string get_NullName();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_ParsedExact();
    [CompilerGeneratedAttribute]
private void set_ParsedExact(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_ParsedExactFrom();
    [CompilerGeneratedAttribute]
private void set_ParsedExactFrom(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_ParsedExactTo();
    [CompilerGeneratedAttribute]
private void set_ParsedExactTo(Nullable`1<bool> value);
    protected bool HasParsedRange(ParsedRangeType& type);
    private void SetParsedRangeSpecifics(Nullable`1<ParsedRangeType<T>> type, Nullable`1<bool> exact, Nullable`1<bool> exactFrom, Nullable`1<bool> exactTo, bool notify);
    private void RaiseParsedExactStateChanged();
    protected virtual void Initialize(Action setValues);
    protected virtual void OnUniqueValuesChanged();
    private void NotifyTreeControlDataSourceChanged();
    protected virtual void OnInitialized();
    protected virtual void ResetCore();
    protected sealed virtual bool CanResetCore();
    private sealed virtual override CriteriaOperator DevExpress.Utils.Filtering.Internal.IFilterValueViewModel.CreateFilterCriteria();
    internal static bool CompareAndCheck(Nullable`1& fromValue, Nullable`1& toValue);
    private bool IsGreaterThanMaximum(Nullable`1<T> val);
    private bool IsLessThanMinimum(Nullable`1<T> val);
    [CompilerGeneratedAttribute]
private bool <TryParseIsNull>b__36_0();
}
internal static class DevExpress.Utils.Filtering.Internal.RequiredAttributeBuilder : object {
    private static ConstructorInfo attributeCtor;
    private static RequiredAttributeBuilder();
    internal static CustomAttributeBuilder Build(IEndUserFilteringMetric metric);
}
internal class DevExpress.Utils.Filtering.Internal.RootValue : GroupValueBase {
    public int Key { get; }
    public int Level { get; }
    public object Value { get; }
    public sealed virtual int get_Key();
    public sealed virtual int get_Level();
    public sealed virtual object get_Value();
    public sealed virtual string ToString();
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.SecondsInterval : DurationInterval {
    public SecondsInterval(TimeSpan duration);
}
public enum DevExpress.Utils.Filtering.Internal.SequenceQualifier : Enum {
    public int value__;
    [DisplayAttribute]
public static SequenceQualifier Items;
    [DisplayAttribute]
public static SequenceQualifier Percents;
}
public static class DevExpress.Utils.Filtering.Internal.SequenceQualifierResourcesType : object {
    public static string Items { get; }
    public static string ItemsDescription { get; }
    public static string Percents { get; }
    public static string PercentsDescription { get; }
    public static string get_Items();
    public static string get_ItemsDescription();
    public static string get_Percents();
    public static string get_PercentsDescription();
}
public abstract class DevExpress.Utils.Filtering.Internal.SimpleValueBox`1 : ValueViewModel {
    protected static object valueKey;
    public Nullable`1<T> Value { get; public set; }
    private bool DevExpress.Utils.Filtering.Internal.ISimpleValueViewModel<T>.AllowNull { get; }
    private static SimpleValueBox`1();
    public virtual Nullable`1<T> get_Value();
    public virtual void set_Value(Nullable`1<T> value);
    protected void OnValueChanged();
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.ISimpleValueViewModel<T>.get_AllowNull();
    protected virtual void ResetCore();
    protected virtual bool CanResetCore();
    protected bool TryParseIsNull(string path, CriteriaOperator criteria);
    [CompilerGeneratedAttribute]
private bool <TryParseIsNull>b__9_0();
    [CompilerGeneratedAttribute]
private void <TryParseIsNull>b__9_1();
}
internal abstract class DevExpress.Utils.Filtering.Internal.StatelessObject : object {
    private Func`1<IServiceProvider> getServiceProvider;
    protected StatelessObject(Func`1<IServiceProvider> getServiceProvider);
    protected TValue GetMetadata(Func`2<IMetadataProvider, Func`2<string, TValue>> accessor);
    protected TValue GetBehavior(Func`2<IBehaviorProvider, Func`2<string, TValue>> accessor);
    protected TValue GetValue(Func`2<TService, Func`2<string, TValue>> accessor);
    protected TService GetService();
    protected abstract virtual string GetId();
    public virtual string ToString();
    public sealed virtual int GetHashCode();
    public sealed virtual bool Equals(object obj);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
internal class DevExpress.Utils.Filtering.Internal.Storage`1 : StorageBase`2<string, T> {
    internal Storage`1(IEnumerable`1<T> elements, Func`2<T, int> getOrder);
    protected sealed virtual IEqualityComparer`1<string> GetPathComparer();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IOrderedStorage<T>.ResetOrder(Func`2<T, int> getOrder);
}
internal abstract class DevExpress.Utils.Filtering.Internal.StorageBase`2 : object {
    private Lazy`1<T[]> orderedElements;
    private SortHelper<TPath, T> helper;
    private IDictionary`2<TPath, T> pathMappings;
    private IEnumerator`1<T> pathEnumerator;
    private bool DevExpress.Utils.Filtering.Internal.IStorage<TPath,T>.AreElementsLoaded { get; }
    protected T[] Elements { get; }
    private T DevExpress.Utils.Filtering.Internal.IStorage<TPath,T>.Item { get; }
    internal StorageBase`2(IEnumerable`1<T> elements, Func`2<T, int> getOrder);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IStorage<TPath,T>.get_AreElementsLoaded();
    protected T[] get_Elements();
    protected void ReleaseElements(Action`1<T> releaseElement);
    protected void InitializeOrderedElements(Func`2<T, int> getOrder);
    private sealed virtual override T DevExpress.Utils.Filtering.Internal.IStorage<TPath,T>.get_Item(TPath path, Func`2<T, TPath> getPath);
    private bool TryGetValue(TPath path, T& result);
    private IDictionary`2<TPath, T> GetPathMappings();
    private T Find(TPath path, Func`2<T, TPath> getPath);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.StorageBase`2/<DevExpress-Utils-Filtering-Internal-IStorage<TPath,T>-GetPaths>d__16")]
private sealed virtual override IEnumerable`1<TPath> DevExpress.Utils.Filtering.Internal.IStorage<TPath,T>.GetPaths(Func`2<T, TPath> getPath);
    [IteratorStateMachineAttribute("DevExpress.Utils.Filtering.Internal.StorageBase`2/<DevExpress-Utils-Filtering-Internal-IStorage<TPath,T>-GetPairs>d__17`1")]
private sealed virtual override IEnumerable`1<KeyValuePair`2<TPath, TValue>> DevExpress.Utils.Filtering.Internal.IStorage<TPath,T>.GetPairs(Func`2<T, TPath> getPath, Func`2<T, TValue> accessor);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private IEnumerator`1<T> GetEnumeratorCore();
    protected virtual IEqualityComparer`1<TPath> GetPathComparer();
    protected virtual T Actualize(TPath path, T element);
}
[ExtensionAttribute]
internal static class DevExpress.Utils.Filtering.Internal.SupportParentViewModel : object {
    private static Dictionary`2<string, Func`2<object, object>> accessorsCache;
    private static Dictionary`2<string, Action`2<object, object>> mutatorsCache;
    private static SupportParentViewModel();
    [ExtensionAttribute]
internal static object GetParentViewModel(object this);
    [ExtensionAttribute]
internal static void SetParentViewModel(object this, object parentViewModel);
    private static Func`2<object, object> GetGetParentViewModel(Type type);
    private static Action`2<object, object> GetSetParentViewModel(Type type);
}
[ExtensionAttribute]
internal static class DevExpress.Utils.Filtering.Internal.SupportServices : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static TService GetService(IServiceProvider serviceProvider);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
internal static object GetServiceObj(IServiceProvider serviceProvider, Type serviceType);
}
[EditorBrowsableAttribute("1")]
public abstract class DevExpress.Utils.Filtering.Internal.TimeInterval : Interval`1<TimeOnly> {
    private static TimeSpan IntervalTick;
    private static TimeSpan IntervalMillisecondWithoutTick;
    private static TimeOnly MaxIntervalBegin;
    public static Interval`1<TimeOnly> Empty { get; }
    protected TimeInterval(Nullable`1<TimeOnly> begin, Nullable`1<TimeOnly> end);
    protected TimeInterval(Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> second, Nullable`1<int> millisecond);
    private static TimeInterval();
    protected internal sealed virtual bool CanMerge(Interval`1<TimeOnly> interval);
    protected sealed virtual CriteriaOperator GetBinaryCriteria(string path, Nullable`1<TimeOnly> value, BinaryOperatorType operatorType);
    internal static Interval`1<T> Range(Nullable`1<T> from, Nullable`1<T> to, bool exclusiveBegin, bool exclusiveEnd);
    private static Nullable`1<TimeOnly> CheckMinValue(Nullable`1<T> from, bool exclusive);
    private static Nullable`1<TimeOnly> CheckMaxValue(Nullable`1<T> to, bool exclusive);
    private static TimeOnly GetNextIntervalBegin(Nullable`1<TimeOnly> value);
    public static Interval`1<TimeOnly> get_Empty();
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.TimeIntervalHour : TimeInterval {
    public TimeIntervalHour(TimeOnly time);
}
internal class DevExpress.Utils.Filtering.Internal.TimeIntervalMerged : TimeInterval {
    private TimeIntervalMerged(Nullable`1<TimeOnly> begin, Nullable`1<TimeOnly> end);
    internal static Interval`1<T> Create(Nullable`1<T> begin, Nullable`1<T> end);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.TimeIntervalMicrosecond : TimeInterval {
    public TimeIntervalMicrosecond(TimeOnly time);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.TimeIntervalMillisecond : TimeInterval {
    public TimeIntervalMillisecond(TimeOnly time);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.TimeIntervalMinute : TimeInterval {
    public TimeIntervalMinute(TimeOnly time);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.TimeIntervalSecond : TimeInterval {
    public TimeIntervalSecond(TimeOnly time);
}
internal static class DevExpress.Utils.Filtering.Internal.TypeHelper : object {
    private static Assembly DataAssembly;
    private static TypeHelper();
    internal static bool IsExpandableProperty(PropertyDescriptor pd);
    internal static bool IsExpandableType(Type type);
    private static bool IsSimpleRefType(Type type);
    private static bool IsSimpleValueType(Type type);
    private static bool IsSpecialValueType(Type type);
    internal static bool IsNullable(Type type);
    internal static bool IsNullable(Type type, Type& underlyingType);
    internal static bool AllowNull(Type type);
    internal static Type GetTypeOrNullable(Type type, Nullable`1<bool> allowNull);
    internal static Type GetNullable(Type type, Type& underlyingType);
    internal static Type GetConversionType(Type type);
    internal static bool IsAccessibleForDynamicDescendants(Type type);
    internal static Type EnsureDynamicDescendantsAccessibility(Type type);
    private static bool IsComparableObject(Type type);
}
internal static class DevExpress.Utils.Filtering.Internal.UniqueValues : object {
    public static Object[] Empty;
    public static Object[] NotLoaded;
    private static UniqueValues();
    public static Object[] Get(IDictionary`2<string, Object[]> cache, string path);
    public static void Initialize(IDictionary`2<string, Object[]> cache, string path, Object[] uniqueValues);
    public static Object[] Aggregate(Type type, Object[] uniqueValues);
    public static bool IsNullOrDBNull(object value);
    public static bool HasNulls(Object[] uniqueValues);
    public static bool IsNotLoaded(object value);
    public static bool AreNotLoaded(Object[] uniqueValues);
    internal static object GetFirstNotNull(Object[] uniqueValues, Type type, int pos);
    internal static object GetLastNotNull(Object[] uniqueValues, Type type, int pos);
    private static object CheckDBNull(object uniqueValue);
    private static object CheckDBNullOrNaN(object uniqueValue, Type type);
    internal static object CheckIsNaN_or_IsInfinity(object uniqueValue, Type type);
    internal static Type GetActualType(Type type, object min, object max);
    public static object EnsureNullSafety(object value);
    public static Object[] EnsureNullSafety(Object[] uniqueValues);
    internal static void SkipNullObject(Object[] uniqueValues, object nullObject, object nullValue);
    public static Object[] RestoreNulls(Object[] uniqueValues, object nullValue);
}
internal class DevExpress.Utils.Filtering.Internal.ValueEntry : ValueType {
    private IGroupValuesSource source;
    private int group;
    private int index;
    public object Value { get; }
    public ValueEntry(int key, int index, IGroupValuesSource source);
    public object get_Value();
    public sealed virtual bool Equals(ValueEntry entry);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal static class DevExpress.Utils.Filtering.Internal.ValueParser : object {
    internal static bool TryGetValue(OperandValue value, Type valueType, Object& result);
    internal static bool TryGetValue(object value, Type valueType, Object& result);
    private static object GetValue(object value, Type valueType);
    private static object GetDefaultValue(Type valueType);
    internal static bool TryParse(object value, Type type, Object& result);
}
internal static class DevExpress.Utils.Filtering.Internal.ValueParser`1 : object {
    internal static bool TryGetValue(OperandValue value, T& result);
    internal static bool TryGetValue(object value, T& result);
    private static T GetValue(object value);
}
[ExtensionAttribute]
internal static class DevExpress.Utils.Filtering.Internal.ValueTypeResolverExtension : object {
    [ExtensionAttribute]
internal static Type GetAttributesType(IValueTypeResolver typeResolver, IEndUserFilteringMetric metric);
    [ExtensionAttribute]
internal static Type GetValueBoxType(IValueTypeResolver typeResolver, IEndUserFilteringMetric metric);
    [ExtensionAttribute]
internal static Type GetValueViewModelType(IValueTypeResolver typeResolver, IEndUserFilteringMetric metric);
}
public abstract class DevExpress.Utils.Filtering.Internal.ValueViewModel : object {
    private bool isModifiedCore;
    [CompilerGeneratedAttribute]
private IEndUserFilteringMetricViewModel <MetricViewModel>k__BackingField;
    private WeakReference viewModelsRef;
    private IMetricAttributes metricAttributes;
    private Nullable`1<bool> initializedWithValues;
    private int lockSetIsModified;
    private EventHandler changedCore;
    private static IValueViewModel[] EmptyValues;
    private Hashtable valueHash;
    private Lazy`1<Object[]> nullsCore;
    [BrowsableAttribute("False")]
public bool IsModified { get; protected set; }
    protected internal IEndUserFilteringMetricViewModel MetricViewModel { get; private set; }
    protected bool IsInitialized { get; }
    protected bool IsViewModelsInitialized { get; }
    protected IMetricAttributes MetricAttributes { get; }
    public bool IsInitializedWithValues { get; }
    protected bool AllowNull { get; }
    private static ValueViewModel();
    public sealed virtual bool get_IsModified();
    protected void set_IsModified(bool value);
    protected void SetIsModified();
    protected void ResetIsModified();
    protected void UpdateIsModified(Func`1<bool> getValue);
    protected void OnIsModifiedChanged();
    [CompilerGeneratedAttribute]
protected internal IEndUserFilteringMetricViewModel get_MetricViewModel();
    [CompilerGeneratedAttribute]
private void set_MetricViewModel(IEndUserFilteringMetricViewModel value);
    protected bool get_IsInitialized();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IValueViewModel.Initialize(IEndUserFilteringMetricViewModel metricViewModel);
    protected bool get_IsViewModelsInitialized();
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IValueViewModel.Initialize(IEnumerable`1<IEndUserFilteringMetricViewModel> viewModels);
    private sealed virtual override void DevExpress.Utils.Filtering.Internal.IValueViewModel.Release();
    protected IMetricAttributes get_MetricAttributes();
    protected virtual void OnInitialized();
    protected virtual void OnReleasing();
    public sealed virtual bool get_IsInitializedWithValues();
    protected virtual void Initialize(Action setValues);
    private void SubscribeAttributes(IMetricAttributes attributes);
    private void UnsubscribeAttributes(IMetricAttributes attributes);
    private void Attributes_PropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnMetricAttributesMemberChanged(string propertyName);
    protected virtual void OnMetricAttributesSpecialMemberChanged(string propertyName);
    protected virtual bool OnMetricAttributesChanged(string propertyName);
    protected void EnsureDataItemsLookup(string propertyName);
    public sealed virtual bool CanReset();
    [BrowsableAttribute("False")]
public sealed virtual void Reset();
    [BrowsableAttribute("False")]
public sealed virtual void ResetAll();
    public sealed virtual bool CanResetAll();
    protected virtual void UpdateResetCommands();
    protected abstract virtual void ResetCore();
    protected abstract virtual bool CanResetCore();
    public sealed virtual void add_Changed(EventHandler value);
    public sealed virtual void remove_Changed(EventHandler value);
    protected void RaiseChanged();
    private void SetValueCore(object valueKey, object value, Expression`1<Func`1<T>> selector);
    protected IReadOnlyCollection`1<T> GetValues(object valueKey, IReadOnlyCollection`1<T> defaultValue);
    protected T GetValue(object valueKey, T defaultValue);
    protected Nullable`1<T> GetValue(object valueKey);
    protected bool TrySetValue(object valueKey, object value, Expression`1<Func`1<T>> selector);
    protected bool TrySetValues(object valuesKey, IEnumerable`1<T> values, Expression`1<Func`1<IEnumerable`1<T>>> selector);
    protected bool ResetValue(object valueKey, Expression`1<Func`1<T>> selector);
    protected bool ResetValueCore(object valueKey);
    protected bool IsEmpty(IEnumerable`1<T> value, IEnumerable`1<T> defaultValue);
    protected bool TryResetValues(IEnumerable`1<T> value, IEnumerable`1<T> defaultValue, object key, Expression`1<Func`1<IEnumerable`1<T>>> selector);
    protected void Reset(object key, Expression`1<Func`1<T>> selector);
    protected bool TryResetValues(IEnumerable`1<T> value, IEnumerable`1<T> defaultValue, object key, Expression`1<Func`1<IEnumerable`1<T>>> selector, object partialKey);
    protected void Reset(object key, Expression`1<Func`1<T>> selector, object partialKey);
    protected void OnResetComplete();
    protected bool HasValue(object valueKey);
    protected virtual bool get_AllowNull();
    protected void InitializeNulls(IUniqueValuesMetricAttributes uniqueValues);
    protected bool HasNulls(IUniqueValuesMetricAttributes uniqueValues);
    private sealed virtual override bool DevExpress.Utils.Filtering.Internal.IEndUserFilteringCriteriaAwareViewModel.TryParse(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected virtual bool ParseFilterCriteria(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected virtual void BeforeParseCore(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected virtual bool AfterParseCore(IEndUserFilteringMetric metric, bool result);
    protected virtual bool OnParseReset();
    protected internal bool TryInitializeFromParse(Object[] values, bool useInversion);
    protected virtual bool InitializeWithNull(bool useInversion);
    protected virtual bool InitializeWithValues(Object[] uniqueAndSortedValues, bool useInversion);
    protected abstract virtual bool TryParseCore(IEndUserFilteringMetric metric, CriteriaOperator criteria);
    protected bool TryParseProperty(string path, CriteriaOperator criteria);
    protected bool TryParseUnaryIsNull(string path, CriteriaOperator criteria, Func`1<bool> allowNull, Action setNull);
    public static Type GetDataType(IValueViewModel viewModel);
    public static object GetDataItemsLookup(IValueViewModel value);
    public static bool CanResetAll(IEnumerable`1<IEndUserFilteringMetricViewModel> viewModels);
    public static void ResetAll(IEnumerable`1<IEndUserFilteringMetricViewModel> viewModels);
    private static IDisposable EnterFilterCriteriaChange(IEnumerable`1<IEndUserFilteringMetricViewModel> viewModels);
    private static IEnumerable`1<IValueViewModel> GetAllValues(IEnumerable`1<IEndUserFilteringMetricViewModel> viewModels);
    protected static int GetCount(IEnumerable`1<TValue> values);
    [CompilerGeneratedAttribute]
private void <OnInitialized>b__23_0();
    [CompilerGeneratedAttribute]
private void <SubscribeAttributes>b__29_0(INotifyPropertyChanged npc);
    [CompilerGeneratedAttribute]
private void <UnsubscribeAttributes>b__30_0(INotifyPropertyChanged npc);
    [CompilerGeneratedAttribute]
private void <OnParseReset>b__75_0();
}
[DebuggerDisplayAttribute("Year:{Begin.Value.ToShortDateString(),nq}")]
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Filtering.Internal.YearInterval : DateInterval {
    public YearInterval(DateTime date);
    public YearInterval(int year);
}
public class DevExpress.Utils.Filtering.LookupData : MetricAttributesData {
    public object DataSource { get; public set; }
    public int Top { get; public set; }
    public int MaxCount { get; public set; }
    internal LookupData(IDictionary`2<string, object> memberValues);
    public object get_DataSource();
    public void set_DataSource(object value);
    public int get_Top();
    public void set_Top(int value);
    public int get_MaxCount();
    public void set_MaxCount(int value);
}
public enum DevExpress.Utils.Filtering.LookupUIEditorType : Enum {
    public int value__;
    public static LookupUIEditorType Default;
    public static LookupUIEditorType List;
    public static LookupUIEditorType DropDown;
    public static LookupUIEditorType TokenBox;
}
public abstract class DevExpress.Utils.Filtering.MetricAttributesData : object {
    protected internal static string DataControllerMember;
    protected internal static string UniqueValuesMember;
    protected internal static string DisplayTextsMember;
    protected internal static string SortedByDisplayTextMember;
    protected internal static string FilterByDisplayTextMember;
    protected internal static string DisplayBlanksMember;
    protected internal static string DisplayRadioMember;
    protected internal static string DataItemsLookupMember;
    protected internal static string MemberBindings;
    protected internal static string GroupValuesMember;
    protected internal static string GroupTextsMember;
    protected internal static string GroupPathMember;
    protected internal static string GroupParentValuesMember;
    protected internal static string GroupParentCriteriaMember;
    private IDictionary`2<string, object> memberValues;
    protected MetricAttributesData(IDictionary`2<string, object> memberValues);
    protected internal static bool IsSpecialMember(string propertyName);
    internal bool TryGetValue(string memberName, TValue& memberValue);
    protected bool HasValue(string memberName, Predicate`1<TValue> nonDefault);
    protected TValue GetValue(string memberName);
    protected void SetValue(string memberName, TValue value);
    protected TValue GetValue(Expression`1<Func`1<TValue>> expression);
    protected void SetValue(Expression`1<Func`1<TValue>> expression, object value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetDataController(object controller);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetDisplayTexts(String[] displayTexts);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetDisplayBlanks(bool value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void ResetDisplayBlanks();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetDisplayRadio(bool value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void ResetDisplayRadio();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public virtual void SetDataItemsLookup(object lookup);
}
public class DevExpress.Utils.Filtering.ParseFilterCriteriaEventArgs : EventArgs {
    private string path;
    private IValueViewModel value;
    private CriteriaOperator criteria;
    internal bool HasResult;
    private static Object[] NullValue;
    public string Path { get; }
    public IValueViewModel Value { get; }
    public CriteriaOperator FilterCriteria { get; }
    protected ParseFilterCriteriaEventArgs(string path, IValueViewModel value);
    private static ParseFilterCriteriaEventArgs();
    public string get_Path();
    public IValueViewModel get_Value();
    public CriteriaOperator get_FilterCriteria();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool SetResult(Object[] values, bool useInversion);
    [DebuggerStepThroughAttribute]
public bool SetValues(Object[] values);
    [DebuggerStepThroughAttribute]
public bool SetValues(IReadOnlyCollection`1<T> values);
    [DebuggerStepThroughAttribute]
public bool SetValuesOrBlanks(Object[] values);
    [DebuggerStepThroughAttribute]
public bool SetValuesOrBlanks(IReadOnlyCollection`1<T> values);
    [DebuggerStepThroughAttribute]
public bool SetValue(object value, bool useInversion);
    [DebuggerStepThroughAttribute]
public bool SetValue(T value);
    [DebuggerStepThroughAttribute]
public bool SetRange(object from, object to);
    [DebuggerStepThroughAttribute]
public bool SetRange(T from, T to);
    [DebuggerStepThroughAttribute]
public bool SetNull();
    [DebuggerStepThroughAttribute]
public bool SetNotNull();
    [DebuggerStepThroughAttribute]
public bool SetBlanks();
    [DebuggerStepThroughAttribute]
public bool SetNotBlanks();
    [DebuggerStepThroughAttribute]
public bool SetEmpty();
    [DebuggerStepThroughAttribute]
public bool SetNotEmpty();
    [DebuggerStepThroughAttribute]
internal ParseFilterCriteriaEventArgs Initialize(CriteriaOperator criteria);
}
public class DevExpress.Utils.Filtering.ParseFilterCriteriaEventHandler`1 : MulticastDelegate {
    public ParseFilterCriteriaEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, TEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Filtering.QueryBooleanChoiceDataEventArgs : QueryDataEventArgs`1<BooleanChoiceData> {
    internal QueryBooleanChoiceDataEventArgs(string propertyPath, IDictionary`2<string, object> memberValues);
    protected virtual BooleanChoiceData CreateData(IDictionary`2<string, object> memberValues);
}
public abstract class DevExpress.Utils.Filtering.QueryDataEventArgs`1 : EventArgs {
    private TData resultCore;
    [CompilerGeneratedAttribute]
private string <PropertyPath>k__BackingField;
    public string PropertyPath { get; private set; }
    public TData Result { get; }
    protected QueryDataEventArgs`1(string propertyPath, IDictionary`2<string, object> memberValues);
    [CompilerGeneratedAttribute]
public string get_PropertyPath();
    [CompilerGeneratedAttribute]
private void set_PropertyPath(string value);
    public TData get_Result();
    protected abstract virtual TData CreateData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.QueryDataEventHandler`2 : MulticastDelegate {
    public QueryDataEventHandler`2(object object, IntPtr method);
    public virtual void Invoke(object sender, TEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Filtering.QueryEnumChoiceDataEventArgs : QueryDataEventArgs`1<EnumChoiceData> {
    internal QueryEnumChoiceDataEventArgs(string propertyPath, IDictionary`2<string, object> memberValues);
    protected virtual EnumChoiceData CreateData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.QueryFilterCriteriaEventArgs : EventArgs {
    private static object CriteriaNotSet;
    private string path;
    private IValueViewModel value;
    private CriteriaOperator criteria;
    private object resultCore;
    public string Path { get; }
    public IValueViewModel Value { get; }
    public CriteriaOperator FilterCriteria { get; public set; }
    protected QueryFilterCriteriaEventArgs(string path, IValueViewModel value);
    private static QueryFilterCriteriaEventArgs();
    public string get_Path();
    public IValueViewModel get_Value();
    public CriteriaOperator get_FilterCriteria();
    public void set_FilterCriteria(CriteriaOperator value);
    [DebuggerStepThroughAttribute]
internal QueryFilterCriteriaEventArgs Initialize(CriteriaOperator criteria);
}
public class DevExpress.Utils.Filtering.QueryFilterCriteriaEventHandler`1 : MulticastDelegate {
    public QueryFilterCriteriaEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, TEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Filtering.QueryGroupDataEventArgs : QueryDataEventArgs`1<GroupData> {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool RootQuery { get; }
    public string GroupPropertyPath { get; }
    public Object[] ParentValues { get; }
    public CriteriaOperator ParentCriteria { get; }
    internal QueryGroupDataEventArgs(string propertyPath, IDictionary`2<string, object> memberValues);
    public bool get_RootQuery();
    public string get_GroupPropertyPath();
    public Object[] get_ParentValues();
    public CriteriaOperator get_ParentCriteria();
    protected sealed virtual GroupData CreateData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.QueryLookupDataEventArgs : QueryDataEventArgs`1<LookupData> {
    internal QueryLookupDataEventArgs(string propertyPath, IDictionary`2<string, object> memberValues);
    protected virtual LookupData CreateData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.QueryRangeDataEventArgs : QueryDataEventArgs`1<RangeData> {
    internal QueryRangeDataEventArgs(string propertyPath, IDictionary`2<string, object> memberValues);
    protected virtual RangeData CreateData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.QueryUniqueValuesBooleanChoiceDataEventArgs : QueryBooleanChoiceDataEventArgs {
    internal QueryUniqueValuesBooleanChoiceDataEventArgs(string propertyPath, IDictionary`2<string, object> memberValues);
    protected sealed virtual BooleanChoiceData CreateData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.QueryUniqueValuesEnumChoiceDataEventArgs : QueryEnumChoiceDataEventArgs {
    internal QueryUniqueValuesEnumChoiceDataEventArgs(string propertyPath, IDictionary`2<string, object> memberValues);
    protected sealed virtual EnumChoiceData CreateData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.QueryUniqueValuesLookupDataEventArgs : QueryLookupDataEventArgs {
    internal QueryUniqueValuesLookupDataEventArgs(string propertyPath, IDictionary`2<string, object> memberValues);
    protected sealed virtual LookupData CreateData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.QueryUniqueValuesRangeDataEventArgs : QueryRangeDataEventArgs {
    internal QueryUniqueValuesRangeDataEventArgs(string propertyPath, IDictionary`2<string, object> memberValues);
    protected sealed virtual RangeData CreateData(IDictionary`2<string, object> memberValues);
}
public class DevExpress.Utils.Filtering.RangeData : MetricAttributesData {
    public object Minimum { get; public set; }
    public object Maximum { get; public set; }
    public object Average { get; public set; }
    internal RangeData(IDictionary`2<string, object> memberValues);
    public object get_Minimum();
    public void set_Minimum(object value);
    public object get_Maximum();
    public void set_Maximum(object value);
    public object get_Average();
    public void set_Average(object value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetDates(Object[] uniqueDates);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetTimeSpans(Object[] uniqueSpans);
    private void SetAggregates(Type type, Object[] uniqueValues);
}
public enum DevExpress.Utils.Filtering.RangeUIEditorType : Enum {
    public int value__;
    public static RangeUIEditorType Default;
    public static RangeUIEditorType Range;
    public static RangeUIEditorType Text;
    public static RangeUIEditorType Spin;
}
public class DevExpress.Utils.Filtering.UniqueValuesBooleanChoiceData : BooleanChoiceData {
    public object UniqueValues { get; public set; }
    internal UniqueValuesBooleanChoiceData(IDictionary`2<string, object> memberValues);
    public object get_UniqueValues();
    public void set_UniqueValues(object value);
}
public class DevExpress.Utils.Filtering.UniqueValuesEnumChoiceData : EnumChoiceData {
    public object UniqueValues { get; public set; }
    internal UniqueValuesEnumChoiceData(IDictionary`2<string, object> memberValues);
    public object get_UniqueValues();
    public void set_UniqueValues(object value);
}
public class DevExpress.Utils.Filtering.UniqueValuesLookupData : LookupData {
    public object UniqueValues { get; public set; }
    internal UniqueValuesLookupData(IDictionary`2<string, object> memberValues);
    public object get_UniqueValues();
    public void set_UniqueValues(object value);
}
public class DevExpress.Utils.Filtering.UniqueValuesRangeData : RangeData {
    public object UniqueValues { get; public set; }
    internal UniqueValuesRangeData(IDictionary`2<string, object> memberValues);
    public object get_UniqueValues();
    public void set_UniqueValues(object value);
}
public enum DevExpress.Utils.Filtering.ValueSelectionMode : Enum {
    public int value__;
    public static ValueSelectionMode Default;
    public static ValueSelectionMode Single;
    public static ValueSelectionMode Multiple;
}
public static class DevExpress.Utils.FontFamilyCache : object {
    [ThreadStaticAttribute]
private static Dictionary`2<string, FontFamily> fontFamiliesMapCore;
    private static void CreateFontFamiliesMap();
    public static bool IsAvailable(string fontName);
    public static bool TryGetValue(string fontName, FontFamily& family);
}
public static class DevExpress.Utils.FontHelper : object {
    private static Func`2<FontFamily, IntPtr> nativeFamilyGetter;
    private static CultureInfo englishNeutralCulture;
    private static Func`2<FontFamily, IntPtr> GetNativeFamily { get; }
    public static long GetFontHashCode(Font font);
    private static Func`2<FontFamily, IntPtr> get_GetNativeFamily();
    private static long GetFontHashCodeCore(Font font);
    public static long GetFontHashCode(string fontName, FontStyle style, float size, GraphicsUnit unit);
    public static float GetLineSpacing(Font font);
    public static float GetCellAscent(Font font);
    public static float GetCellDescent(Font font);
    public static string GetFamilyName(Font font);
    public static string GetFamilyName(FontFamily family);
    public static string GetEnglishFamilyName(Font font);
    public static string GetEnglishFamilyName(FontFamily family);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class DevExpress.Utils.FormatInfo : ViewStatePersisterCore {
    private static FormatInfo fEmpty;
    private static bool alwaysUseThreadFormatCore;
    private int fLockParse;
    private IComponentLoading componentLoading;
    private bool shouldModifyFormatString;
    protected FormatType fFormatType;
    protected string fFormatString;
    private IFormatProvider _format;
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    private bool isDeserializingCore;
    [DescriptionAttribute("Gets or sets whether a value for the FormatInfo.Format property should be determined each time the property is accessed.")]
public static bool AlwaysUseThreadFormat { get; public set; }
    [BrowsableAttribute("False")]
public bool IsEmpty { get; }
    [DescriptionAttribute("Gets a FormatInfo object with default settings.")]
public static FormatInfo Empty { get; }
    protected bool IsLoading { get; }
    protected IComponentLoading ComponentLoading { get; }
    protected bool IsComponentLoading { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[NotifyParentPropertyAttribute("True")]
public IFormatProvider Format { get; public set; }
    [DXLocalizedDescriptionAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.FormatInfo.FormatString")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.FormatInfo.FormatString")]
[NotifyParentPropertyAttribute("True")]
[XtraSerializableProperty]
public string FormatString { get; public set; }
    [DXLocalizedDescriptionAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.FormatInfo.FormatType")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.FormatInfo.FormatType")]
[RefreshPropertiesAttribute("1")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
public FormatType FormatType { get; public set; }
    protected bool IsDeserializing { get; }
    protected bool IsTryGetThreadSafeFuncValid { get; }
    private static FormatInfo();
    public FormatInfo(IComponentLoading componentLoading);
    public FormatInfo(IViewBagOwner bagOwner, string objectPath);
    public FormatInfo(IComponentLoading componentLoading, IViewBagOwner bagOwner, string objectPath);
    public static bool get_AlwaysUseThreadFormat();
    public static void set_AlwaysUseThreadFormat(bool value);
    public virtual bool get_IsEmpty();
    public static FormatInfo get_Empty();
    public virtual bool ShouldSerialize();
    public virtual void LockParse();
    public virtual void UnlockParse();
    protected virtual bool get_IsLoading();
    protected IComponentLoading get_ComponentLoading();
    protected bool get_IsComponentLoading();
    public virtual void Reset();
    protected void ResetCore();
    protected void CheckFormatString();
    public virtual bool IsEquals(FormatInfo info);
    public virtual IFormatProvider get_Format();
    public virtual void set_Format(IFormatProvider value);
    protected virtual void ResetFormatString();
    protected virtual bool ShouldSerializeFormatString();
    public virtual string get_FormatString();
    public virtual void set_FormatString(string value);
    protected virtual void ResetFormatType();
    protected virtual bool ShouldSerializeFormatType();
    public virtual FormatType get_FormatType();
    public virtual void set_FormatType(FormatType value);
    public virtual void Assign(FormatInfo info);
    public virtual void Parse();
    protected virtual void TestFormatString(string format);
    public virtual string GetDisplayText(object val);
    protected string GetFormatString(string formatString);
    public string GetFormatString();
    [EditorBrowsableAttribute("1")]
public static void ResetCache();
    private string TryFormat(object val, IFormatProvider format, string formatString);
    protected virtual string GetDisplayTextCore(object value, IFormatProvider format, string formatString);
    private string GetFormattedStringValue(object value, IFormatProvider format, string formatString);
    private static string GetStringValue(object value);
    private static string ToString(object value);
    [CompilerGeneratedAttribute]
public void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Changed(EventHandler value);
    protected virtual void OnChanged();
    public sealed virtual void OnStartSerializing();
    public sealed virtual void OnEndSerializing();
    protected bool get_IsDeserializing();
    public sealed virtual void OnStartDeserializing(LayoutAllowEventArgs e);
    public sealed virtual void OnEndDeserializing(string restoredVersion);
    public virtual string ToString();
    protected virtual bool get_IsTryGetThreadSafeFuncValid();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public virtual bool TryGetThreadSafeGetDisplayTextFunc(Func`2& threadSafeDisplayTextFunc);
    protected virtual bool TryGetThreadSafeGetDisplayTextCoreFunc(IFormatProvider _format, string _formatString, Func`2& threadSafeDisplayTextFunc);
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.Utils.FormatType : Enum {
    public int value__;
    public static FormatType None;
    public static FormatType Numeric;
    public static FormatType DateTime;
    public static FormatType Custom;
}
public class DevExpress.Utils.Function`1 : MulticastDelegate {
    public Function`1(object object, IntPtr method);
    public virtual TResult Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Function`2 : MulticastDelegate {
    public Function`2(object object, IntPtr method);
    public virtual TResult Invoke(TArg obj);
    public virtual IAsyncResult BeginInvoke(TArg obj, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Function2`3 : MulticastDelegate {
    public Function2`3(object object, IntPtr method);
    public virtual TResult Invoke(TArg1 obj1, TArg2 obj2);
    public virtual IAsyncResult BeginInvoke(TArg1 obj1, TArg2 obj2, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Function3`4 : MulticastDelegate {
    public Function3`4(object object, IntPtr method);
    public virtual TResult Invoke(TArg1 obj1, TArg2 obj2, TArg3 obj3);
    public virtual IAsyncResult BeginInvoke(TArg1 obj1, TArg2 obj2, TArg3 obj3, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public abstract class DevExpress.Utils.GenericEventListenerWrapper`2 : object {
    private WeakReference instanceReference;
    private U eventSource;
    protected WeakReference ListenerReference { get; }
    public T ListenerInstance { get; }
    public U EventSource { get; }
    protected GenericEventListenerWrapper`2(T listenerInstance, U eventSource);
    protected WeakReference get_ListenerReference();
    public T get_ListenerInstance();
    public U get_EventSource();
    public bool IsAlive();
    protected abstract virtual void SubscribeEvents();
    protected abstract virtual void UnsubscribeEvents();
    public virtual void CleanUp();
    protected virtual void ResetEventSource();
    protected virtual void ResetListenerInstance();
}
public static class DevExpress.Utils.GlobalizationModeChecker : object {
    public static bool AllowCreateAnyCulture();
    public static bool IsGlobalizationInvariant();
}
public static class DevExpress.Utils.Guard : object {
    public static void ArgumentNotNull(object value, string name);
    public static void ArgumentNonNegative(int value, string name);
    public static void ArgumentPositive(int value, string name);
    public static void ArgumentNonNegative(float value, string name);
    public static void ArgumentPositive(float value, string name);
    public static void ArgumentNonNegative(double value, string name);
    public static void ArgumentPositive(double value, string name);
    public static void ArgumentIsNotNullOrEmpty(string value, string name);
    public static void ArgumentIsInRange(IList`1<T> list, int index, string name);
    public static void ArgumentIsInRange(int minValue, int maxValue, int value, string name);
    public static TValue ArgumentMatchType(object value, string name);
    public static void ArgumentMatch(TValue value, string name, Func`2<TValue, bool> predicate);
    private static void ThrowArgumentException(string propName, object val, Exception innerException);
    private static void ThrowArgumentNullException(string propName);
}
[ExtensionAttribute]
public static class DevExpress.Utils.HashAlgorithmExtensions : object {
    [ExtensionAttribute]
public static Byte[] Transform2Blocks(HashAlgorithm hashAlgorithm, Byte[] first, Byte[] second);
}
public static class DevExpress.Utils.HashCodeHelper : object {
    private static int DefaultSeed;
    private static int DefaultNullHash;
    private static string HowToMoreMessage;
    public static int Seed { get; }
    public static int NullHash { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int CalcHashCode2(Int32[] array);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int CalcHashCode(Int32[] values);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int CalcHashCode(Object[] values);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int RotateValue(int val, int count);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int CalcHashCode32(int h1, int h2);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int CalcHashCode32(int h1, int h2, int h3);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int CalcHashCode32(int h1, int h2, int h3, int h4);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int CalcHashCode32(int h1, int h2, int h3, int h4, int h5);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int CalcHashCode32(int h1, int h2, int h3, int h4, int h5, int h6);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static int CalcHashCode32(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
    public static int get_Seed();
    public static int Start();
    public static int get_NullHash();
    public static int GetNullHash();
    public static int Finish(int hashState);
    public static int Combine(int hashState, int h1);
    [ObsoleteAttribute("Ask SAY for more overloads if REALLY needed")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public static int Combine(int hashState, int h1, Int32[] hhh);
    private static int CombineInt32ListCore(int hashState, IList`1<int> listOfInt32s);
    public static int CombineInt32List(int hashState, IList`1<int> listOfInt32s);
    private static int CombineInt16ListCore(int hashState, IList`1<short> listOfInt16s);
    public static int CombineInt16List(int hashState, IList`1<short> listOfInt16s);
    private static int CombineByteListCore(int hashState, IList`1<byte> listOfOctets, int start, int count);
    public static int CombineByteList(int hashState, IList`1<byte> listOfOctets, int startIndex, int count);
    public static int CombineByteList(int hashState, IList`1<byte> listOfOctets);
    private static int CombineByteListCore(int hashState, Byte[] listOfOctets, int start, int count);
    public static int CombineByteList(int hashState, Byte[] listOfOctets, int startIndex, int count);
    public static int CombineByteList(int hashState, Byte[] listOfOctets);
    private static int CombineCharListCore(int hashState, IList`1<char> listOfChars);
    public static int CombineCharList(int hashState, IList`1<char> listOfChars);
    public static int CombineInt32List(int hashState, IEnumerable`1<int> enumerableOfInt32);
    public static int CombineInt16List(int hashState, IEnumerable`1<short> enumerableOfInt16);
    public static int CombineByteList(int hashState, IEnumerable`1<byte> enumerableOfOctets);
    public static int CombineCharList(int hashState, IEnumerable`1<char> enumerableOfChars);
    private static int CombineGenericListCore(int hashState, IList`1<T> listOfObjects);
    public static int CombineGenericList(int hashState, IList`1<T> listOfObjects);
    public static int CombineGenericList(int hashState, IEnumerable`1<T> objects);
    public static int GetHashCode(T obj);
    [ObsoleteAttribute("Ask SAY for more overloads if REALLY needed")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public static int CombineGeneric(int hashState, T1 o1, Object[] ooo);
    [ObsoleteAttribute("Ask SAY for more overloads if REALLY needed")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public static int Start(int h1, int h2, Int32[] hhh);
    public static int StartInt32List(IList`1<int> listOfInt32);
    public static int StartInt16List(IList`1<short> listOfInt16);
    public static int StartByteList(IList`1<byte> listOfOctets, int startIndex, int count);
    public static int StartByteList(IList`1<byte> listOfOctets);
    public static int StartByteList(Byte[] listOfOctets, int startIndex, int count);
    public static int StartByteList(Byte[] listOfOctets);
    public static int StartCharList(IList`1<char> listOfChars);
    public static int StartInt32List(IEnumerable`1<int> enumerableOfInt32);
    public static int StartInt16List(IEnumerable`1<short> enumerableOfInt16);
    public static int StartByteList(IEnumerable`1<byte> enumerableOfOctets);
    public static int StartCharList(IEnumerable`1<char> enumerableOfChars);
    [ObsoleteAttribute("Ask SAY for more overloads if REALLY needed")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public static int StartGeneric(T1 o1, T2 o2, Object[] ooo);
    public static int StartGenericList(IList`1<T> listOfObjects);
    public static int StartGenericList(IEnumerable`1<T> objects);
    [ObsoleteAttribute("Ask SAY for more overloads if REALLY needed")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public static int Finish(int hashState, int h1, Int32[] hhh);
    public static int FinishInt32List(int hashState, IList`1<int> listOfInt32);
    public static int FinishInt16List(int hashState, IList`1<short> listOfInt16);
    public static int FinishByteList(int hashState, IList`1<byte> listOfOctets, int startIndex, int count);
    public static int FinishByteList(int hashState, IList`1<byte> listOfOctets);
    public static int FinishByteList(int hashState, Byte[] listOfOctets, int startIndex, int count);
    public static int FinishByteList(int hashState, Byte[] listOfOctets);
    public static int FinishCharList(int hashState, IList`1<char> listOfChars);
    public static int FinishInt32List(int hashState, IEnumerable`1<int> enumerableOfInt32);
    public static int FinishInt16List(int hashState, IEnumerable`1<short> enumerableOfInt16);
    public static int FinishByteList(int hashState, IEnumerable`1<byte> enumerableOfOctets);
    public static int FinishCharList(int hashState, IEnumerable`1<char> enumerableOfChars);
    [ObsoleteAttribute("Ask SAY for more overloads if REALLY needed")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public static int FinishGeneric(int hashState, T1 o1, Object[] ooo);
    public static int FinishGenericList(int hashState, IList`1<T> listOfObjects);
    public static int FinishGenericList(int hashState, IEnumerable`1<T> objects);
    [ObsoleteAttribute("Ask SAY for more overloads if REALLY needed")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public static int Calculate(int h1, int h2, Int32[] hhh);
    public static int CalculateInt32List(IList`1<int> listOfInt32);
    public static int CalculateInt16List(IList`1<short> listOfInt16);
    public static int CalculateByteList(IList`1<byte> listOfOctets, int startIndex, int count);
    public static int CalculateByteList(IList`1<byte> listOfOctets);
    public static int CalculateByteList(Byte[] listOfOctets, int startIndex, int count);
    public static int CalculateByteList(Byte[] listOfOctets);
    public static int CalculateCharList(IList`1<char> listOfChars);
    public static int CalculateInt32List(IEnumerable`1<int> enumerableOfInt32);
    public static int CalculateInt16List(IEnumerable`1<short> enumerableOfInt16);
    public static int CalculateByteList(IEnumerable`1<byte> enumerableOfOctets);
    public static int CalculateCharList(IEnumerable`1<char> enumerableOfChars);
    [ObsoleteAttribute("Ask SAY for more overloads if REALLY needed")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public static int CalculateGeneric(T1 o1, T2 o2, Object[] ooo);
    public static int CalculateGenericList(IList`1<T> listOfObjects);
    public static int CalculateGenericList(IEnumerable`1<T> objects);
    public static int Combine(int hashState, int h1, int h2);
    public static int Combine(int hashState, int h1, int h2, int h3);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22, int h23);
    public static int Combine(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22, int h23, int h24);
    public static int CombineGeneric(int hashState, T1 o1);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22, T23 o23);
    public static int CombineGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22, T23 o23, T24 o24);
    public static int Start(int h1);
    public static int Start(int h1, int h2);
    public static int Start(int h1, int h2, int h3);
    public static int Start(int h1, int h2, int h3, int h4);
    public static int Start(int h1, int h2, int h3, int h4, int h5);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22, int h23);
    public static int Start(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22, int h23, int h24);
    public static int StartGeneric(T1 o1);
    public static int StartGeneric(T1 o1, T2 o2);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22, T23 o23);
    public static int StartGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22, T23 o23, T24 o24);
    public static int Finish(int hashState, int h1);
    public static int Finish(int hashState, int h1, int h2);
    public static int Finish(int hashState, int h1, int h2, int h3);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22, int h23);
    public static int Finish(int hashState, int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22, int h23, int h24);
    public static int FinishGeneric(int hashState, T1 o1);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22, T23 o23);
    public static int FinishGeneric(int hashState, T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22, T23 o23, T24 o24);
    public static int Calculate(int h1);
    public static int Calculate(int h1, int h2);
    public static int Calculate(int h1, int h2, int h3);
    public static int Calculate(int h1, int h2, int h3, int h4);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22, int h23);
    public static int Calculate(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10, int h11, int h12, int h13, int h14, int h15, int h16, int h17, int h18, int h19, int h20, int h21, int h22, int h23, int h24);
    public static int CalculateGeneric(T1 o1);
    public static int CalculateGeneric(T1 o1, T2 o2);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22, T23 o23);
    public static int CalculateGeneric(T1 o1, T2 o2, T3 o3, T4 o4, T5 o5, T6 o6, T7 o7, T8 o8, T9 o9, T10 o10, T11 o11, T12 o12, T13 o13, T14 o14, T15 o15, T16 o16, T17 o17, T18 o18, T19 o19, T20 o20, T21 o21, T22 o22, T23 o23, T24 o24);
}
public class DevExpress.Utils.HashSetEqualityComparer`1 : EqualityComparer`1<HashSet`1<T>> {
    public virtual bool Equals(HashSet`1<T> x, HashSet`1<T> y);
    public virtual int GetHashCode(HashSet`1<T> obj);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.BrushGuard : object {
    private static Func`2<Brush, IntPtr> nativeBrushAccessor;
    private static BrushGuard();
    public static bool IsDisposedOrInvalid(Brush brush);
    private static Func`2<Brush, IntPtr> EmitNativeBrushAccessor();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.GraphicsGuard : object {
    private static Func`2<Graphics, IntPtr> nativeGraphicsAccessor;
    private static GraphicsGuard();
    public static bool IsDisposedOrInvalid(Graphics g);
    private static Func`2<Graphics, IntPtr> EmitNativeGraphicsAccessor();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.GraphicsPathGuard : object {
    private static Func`2<GraphicsPath, IntPtr> nativePathAccessor;
    private static GraphicsPathGuard();
    public static bool IsDisposedOrInvalid(GraphicsPath path);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static IntPtr GetHandle(GraphicsPath path);
    private static Func`2<GraphicsPath, IntPtr> EmitNativePathAccessor();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.IconGuard : object {
    private static Func`2<Icon, IntPtr> iconHandleAccessor;
    private static IconGuard();
    public static bool IsDisposedOrInvalid(Icon icon);
    private static Func`2<Icon, IntPtr> EmitIconHandleAccessor();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.ImageGuard : object {
    private static Func`2<Image, IntPtr> nativeImageAccessor;
    private static ImageGuard();
    public static bool IsDisposedOrInvalid(Image image);
    public static bool IsDisposedOrInvalid(Image image, IntPtr& handle);
    private static Func`2<Image, IntPtr> EmitNativeImageAccessor();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.Internal.HandleGuard : object {
    private static ConcurrentDictionary`2<Type, Proxy> cache;
    private static HandleGuard();
    public static Proxy GetProxy(Type handleType);
    public static Func`2<TOwner, IntPtr> EmitAccessor(FieldInfo fi_handle, DynamicMethod method);
    private static bool Returns(MethodInfo method, Type returnType);
    private static bool Accepts(MethodInfo method, Type parameterType);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Helpers.Internal.StateGuard`2 : object {
    private static Func`2<T, TStateEnumOrBoolean> EmitStateOrFlagAccessor(FieldInfo f_stateOrFlagField);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.MatrixGuard : object {
    private static Func`2<Matrix, IntPtr> nativeMatrixAccessor;
    private static MatrixGuard();
    public static bool IsDisposedOrInvalid(Matrix m);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static IntPtr GetHandle(Matrix matrix);
    private static Func`2<Matrix, IntPtr> EmitNativeMatrixAccessor();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.NativeField : object {
    public static FieldInfo Try(Type type, string fieldName);
    public static FieldInfo Try(Type type, string fieldName, string propertyName);
    public static FieldInfo TryStatic(Type type, string fieldName);
    public static object TryEventKey(Type type, string eventName);
    public static FieldInfo Required(Type type, string fieldName);
    public static FieldInfo StaticRequired(Type type, string fieldName);
    public static FieldInfo Ensure(Type type, string fieldName);
    public static FieldInfo EnsurePublic(Type type, string fieldName);
    public static FieldInfo Ensure(Type type, string fieldName, string propertyName);
    public static FieldInfo EnsurePublic(Type type, string fieldName, string propertyName);
    public static FieldInfo EnsureStatic(Type type, string fieldName, string propertyName);
    public static FieldInfo EnsurePublicStatic(Type type, string fieldName, string propertyName);
    public static object EnsureEventKey(Type type, string eventName);
    private static string EventName(string eventName);
    private static string NetCoreEventName(string eventName);
    private static string NetCoreFieldPrefix(string fieldName);
    private static string NetCoreStaticFieldPrefix(string fieldName);
    private static FieldInfo EnsureNetCoreField(Type type, string fieldName, BindingFlags flags);
    private static FieldInfo EnsureNetCoreStaticField(Type type, string fieldName, BindingFlags flags);
    private static FieldInfo EnsureNetCoreBackingField(Type type, string fieldName, string propertyName, BindingFlags flags);
    private static FieldInfo TryNetCoreField(Type type, string fieldName);
    private static FieldInfo TryNetCoreField(Type type, string fieldName, string propertyName);
    private static FieldInfo TryNetCoreStaticField(Type type, string fieldName);
    private static FieldInfo EnsureNetCoreFieldCore(Type type, string fieldName, BindingFlags bindingFlags, Func`2<string, string> transform);
    private static FieldInfo EnsureNetCoreBackingFieldCore(Type type, string fieldName, string propertyName, BindingFlags bindingFlags, Func`2<string, string> transform);
    private static FieldInfo TryNetCoreFieldCore(Type type, string fieldName, BindingFlags bindingFlags, Func`2<string, string> transform);
    private static FieldInfo TryNetCoreFieldCore(Type type, string fieldName, string propertyName, BindingFlags bindingFlags, Func`2<string, string> transform);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.NativeField`1 : object {
    public static FieldInfo Try(string fieldName);
    public static FieldInfo Try(string fieldName, string propertyName);
    public static FieldInfo TryStatic(string fieldName);
    public static FieldInfo Required(string fieldName);
    public static FieldInfo StaticRequired(string fieldName);
    public static FieldInfo Ensure(string fieldName, string propertyName);
    public static FieldInfo EnsurePublic(string fieldName, string propertyName);
    public static FieldInfo Ensure(string fieldName);
    public static FieldInfo EnsurePublic(string fieldName);
    public static FieldInfo EnsureStatic(string fieldName, string propertyName);
    public static FieldInfo EnsurePublicStatic(string fieldName, string propertyName);
    public static object EnsureEventKey(string eventName);
    public static Func`2<T, IntPtr> EmitAccessor(FieldInfo f_nativeField, DynamicMethod accessor);
    public static Func`2<T, IntPtr> EmitAccessor(MethodInfo mi_nativePropertyGetter, DynamicMethod accessor);
    public static Func`2<T, IntPtr> EmitAccessor(FieldInfo f_nativeField, DynamicMethod accessor, MethodInfo implicitCastMethod);
    public static Func`2<T, IntPtr> EmitAccessor(FieldInfo f_nativeField, DynamicMethod accessor, string fallbackProperty);
    public static Func`1<RETVAL> EmitStaticFieldAccessor(FieldInfo f_nativeField, DynamicMethod accessor);
    public static Func`1<RETVAL> EmitStaticFieldAccessor(FieldInfo f_nativeField, DynamicMethod accessor, string fallbackProperty);
    public static Func`2<T, TStateEnumOrBoolean> EmitStateOrFlagAccessor(FieldInfo f_stateOrFlagField, DynamicMethod accessor);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Helpers.PenGuard : object {
    private static Func`2<Pen, IntPtr> nativePenAccessor;
    private static PenGuard();
    public static bool IsDisposedOrInvalid(Pen pen);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static IntPtr GetHandle(Pen pen);
    private static Func`2<Pen, IntPtr> EmitNativePenAccessor();
}
public static class DevExpress.Utils.Helpers.StreamHelper : object {
    private static int optimalChunkSize;
    public static int FillBuffer(Stream stream, Byte[] buffer, int offset, int count);
    public static void CopyStream(Stream inStream, Stream outStream);
    public static void CopyStream(Stream inStream, Stream outStream, long bytesToCopy);
    [SecuritySafeCriticalAttribute]
public static void CopyUnmanagedMemoryToStream(IntPtr inPtr, Stream outStream, long bytesToCopy);
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.HiddenToolboxItemAttribute : Attribute {
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.Utils.HorzAlignment : Enum {
    public int value__;
    public static HorzAlignment Default;
    public static HorzAlignment Near;
    public static HorzAlignment Center;
    public static HorzAlignment Far;
}
public class DevExpress.Utils.HtmlImageHelper : object {
    private static Dictionary`2<Guid, string> mimeHT;
    private static HtmlImageHelper();
    public static long GetImageHashCode(Image img);
    public static string GetMimeType(Image img);
    public static void SaveImage(Image image, string path);
    public static Byte[] ImageToArray(Image img);
    private static ImageFormat GetImageFormat(Image img);
    private static string GetValue(ImageFormat format);
    private static Guid GetKey(ImageFormat format);
}
public interface DevExpress.Utils.IAssignableCollection {
    public abstract virtual void Clear();
    public abstract virtual void Assign(IAssignableCollection source);
}
public interface DevExpress.Utils.IBatchUpdateable {
    public bool IsUpdateLocked { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public BatchUpdateHelper BatchUpdateHelper { get; }
    public abstract virtual void BeginUpdate();
    public abstract virtual void EndUpdate();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public abstract virtual void CancelUpdate();
    public abstract virtual bool get_IsUpdateLocked();
    public abstract virtual BatchUpdateHelper get_BatchUpdateHelper();
}
public interface DevExpress.Utils.IBatchUpdateHandler {
    public abstract virtual void OnFirstBeginUpdate();
    public abstract virtual void OnBeginUpdate();
    public abstract virtual void OnEndUpdate();
    public abstract virtual void OnLastEndUpdate();
    public abstract virtual void OnCancelUpdate();
    public abstract virtual void OnLastCancelUpdate();
}
public interface DevExpress.Utils.IComponentLoading {
    public bool IsLoading { get; }
    public abstract virtual bool get_IsLoading();
}
public interface DevExpress.Utils.IConvertToInt`1 {
    public abstract virtual int ToInt();
    public abstract virtual T FromInt(int value);
}
public static class DevExpress.Utils.ImageMetadataHelper : object {
    public static string LoadTags(Image image);
    public static string LoadTags(Image image, int id);
    public static PropertyItem CreatePropertyItem(int id, string data);
    private static PropertyItem CreatePropertyItem();
}
public abstract class DevExpress.Utils.ImmutableObject : object {
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class DevExpress.Utils.Implementation.ComparisonComparerEqualityComparerStruct`1 : ValueType {
    [CompilerGeneratedAttribute]
private Comparison`1<V> <Comparison>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<V, V, bool> <Eq>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<V, int> <Hash>k__BackingField;
    public Comparison`1<V> Comparison { get; }
    public Func`3<V, V, bool> Eq { get; }
    public Func`2<V, int> Hash { get; }
    public ComparisonComparerEqualityComparerStruct`1(Comparison`1<V> comparison, Func`3<V, V, bool> eq, Func`2<V, int> hash);
    [CompilerGeneratedAttribute]
public Comparison`1<V> get_Comparison();
    [CompilerGeneratedAttribute]
public Func`3<V, V, bool> get_Eq();
    [CompilerGeneratedAttribute]
public Func`2<V, int> get_Hash();
    public sealed virtual int Compare(V x, V y);
    public sealed virtual bool Equals(V x, V y);
    private static int ThrowNotSupported();
    private static int ThrowNotSupported(string m);
    public sealed virtual int GetHashCode(V x);
}
public class DevExpress.Utils.Implementation.ComparisonComparerStruct`1 : ValueType {
    [CompilerGeneratedAttribute]
private Comparison`1<V> <Comparison>k__BackingField;
    public Comparison`1<V> Comparison { get; }
    public ComparisonComparerStruct`1(Comparison`1<V> comparison);
    [CompilerGeneratedAttribute]
public Comparison`1<V> get_Comparison();
    public sealed virtual int Compare(V x, V y);
}
public class DevExpress.Utils.Implementation.FuncEqualityComparerStruct`1 : ValueType {
    [CompilerGeneratedAttribute]
private Func`3<V, V, bool> <Eq>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<V, int> <Hash>k__BackingField;
    public Func`3<V, V, bool> Eq { get; }
    public Func`2<V, int> Hash { get; }
    public FuncEqualityComparerStruct`1(Func`3<V, V, bool> eq, Func`2<V, int> hash);
    [CompilerGeneratedAttribute]
public Func`3<V, V, bool> get_Eq();
    [CompilerGeneratedAttribute]
public Func`2<V, int> get_Hash();
    public sealed virtual bool Equals(V x, V y);
    private static int ThrowNotSupported(string m);
    public sealed virtual int GetHashCode(V x);
}
public class DevExpress.Utils.Implementation.IsDependOnDelegate : MulticastDelegate {
    public IsDependOnDelegate(object object, IntPtr method);
    public virtual bool Invoke(int y, int x);
    public virtual IAsyncResult BeginInvoke(int y, int x, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Implementation.TopologicalSorter`1 : object {
    private Int32[] qLink;
    private Node[] nodes;
    private bool success;
    protected internal Node[] Nodes { get; }
    protected internal Int32[] QLink { get; }
    public bool Success { get; }
    protected internal Node[] get_Nodes();
    protected internal Int32[] get_QLink();
    public bool get_Success();
    public IList`1<T> Sort(IList`1<T> sourceObjects, IComparer`1<T> comparer);
    public IList`1<T> Sort(IList`1<T> sourceObjects);
    public IList`1<T> Sort(IList`1<T> sourceObjects, IsDependOnDelegate isDependOn);
    protected internal void Initialize(int n);
    protected internal virtual void AppendRelation(int successorIndex, int predecessorIndex);
    protected internal virtual void CalculateRelations(IList`1<T> sourceObjects, IsDependOnDelegate isDependOn);
    protected internal int CreateVirtualNoPredecessorsItemList();
    protected virtual IList`1<T> ProcessNodes(int lastNoPredecessorItemIndex, IList`1<T> sourceObjects);
    private Node<T> RemoveRelation(Node<T> node, Int32& lastNoPredecessorItemIndex);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.IndexedDictionary`1 : object {
    private List`1<T> itemsArray;
    private Dictionary`2<T, int> indices;
    private Dictionary`2<T, int> Indices { get; }
    public int Count { get; }
    public T Item { get; public set; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private Dictionary`2<T, int> get_Indices();
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public int Add(T item);
    public sealed virtual bool Remove(T item);
    private void ClearIndices();
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Clear();
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Internal.BreakingChangesDetector : object {
    [SecuritySafeCriticalAttribute]
public static bool Match(Assembly assembly, List`1<string> errors, Type brokenInterface, HashSet`1<Type> exclude);
    [SecuritySafeCriticalAttribute]
public static bool Match(Assembly assembly, List`1<string> errors, HashSet`1<Type> brokenTypes, HashSet`1<MethodBase> brokenMembers, HashSet`1<Type> excludeTypes, HashSet`1<MethodBase> excludeMembers);
    private static Pattern GetIsBrokenTypeAPI(HashSet`1<Type> brokenTypes, HashSet`1<MethodBase> brokenMembers, HashSet`1<Type> excludeTypes, HashSet`1<MethodBase> excludeMembers);
    private static Func`2<Type, bool> GetIgnoreTypesOrItsNestedCompilerGeneratedTypes(HashSet`1<Type> excludeTypes);
    private static bool IsBrokenAPI(Instruction instruction, HashSet`1<Type> brokenTypes, HashSet`1<MethodBase> brokenMembers);
    private static bool IsBrokenAPI(Instruction instruction, HashSet`1<Type> brokenTypes, HashSet`1<MethodBase> brokenMembers, HashSet`1<MethodBase> allowedMethods);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.__DXBinaryParser : object {
    private DXObjectReader objectReader;
    private long topId;
    private long headerId;
    private DXSizedArray objectMapIdTable;
    private DXSizedArray asmIdToAssemblyTable;
    private DXSerStack stack;
    private DXBinaryType expectedType;
    private object expectedTypeInformation;
    private DXParseRecord PRS;
    private DXBinaryAssemblyInfo systemAssemblyInfo;
    private BinaryReader dataReader;
    private static Encoding encoding;
    private DXSerStack opPool;
    private DXBinaryObject binaryObject;
    private DXBinaryObjectWithMap binaryObjectWithMap;
    private DXBinaryObjectWithMapTyped binaryObjectWithMapTyped;
    private DXBinaryObjectString objectString;
    private DXBinaryCrossAppDomainString crossAppDomainString;
    private DXMemberPrimitiveTyped memberPrimitiveTyped;
    private Byte[] byteBuffer;
    private static int chunkSize;
    private DXMemberPrimitiveUnTyped memberPrimitiveUnTyped;
    private DXMemberReference memberReference;
    private DXObjectNull objectNull;
    private static DXMessageEnd modreq(System.Runtime.CompilerServices.IsVolatile) messageEnd;
    private DXBinaryAssemblyInfo SystemAssemblyInfo { get; }
    private DXSizedArray ObjectMapIdTable { get; }
    private DXSizedArray AssemblyIdToAssemblyTable { get; }
    private DXParseRecord prs { get; }
    internal __DXBinaryParser(Stream inputStream, DXObjectReader objectReader);
    private static __DXBinaryParser();
    private DXBinaryAssemblyInfo get_SystemAssemblyInfo();
    private DXSizedArray get_ObjectMapIdTable();
    private DXSizedArray get_AssemblyIdToAssemblyTable();
    private DXParseRecord get_prs();
    [SecurityCriticalAttribute]
public void Run();
    private void ReadBegin();
    private void ReadEnd();
    public byte ReadByte();
    public Byte[] ReadBytes(int length);
    public int ReadInt32();
    public string ReadString();
    private void ReadBytes(Byte[] byteA, int offset, int size);
    private bool ReadBoolean();
    private char ReadChar();
    private Char[] ReadChars(int length);
    private decimal ReadDecimal();
    private float ReadSingle();
    private double ReadDouble();
    private short ReadInt16();
    private long ReadInt64();
    private sbyte ReadSByte();
    private TimeSpan ReadTimeSpan();
    private DateTime ReadDateTime();
    private ushort ReadUInt16();
    private UInt32 ReadUInt32();
    private ulong ReadUInt64();
    [SecurityCriticalAttribute]
private void ReadSerializationHeaderRecord();
    [SecurityCriticalAttribute]
private void ReadAssembly(DXBinaryHeader binaryHeaderEnum);
    [SecurityCriticalAttribute]
private void ReadObject();
    [SecurityCriticalAttribute]
private void ReadCrossAppDomainMap();
    [SecurityCriticalAttribute]
private void ReadObjectWithMap(DXBinaryHeader binaryHeaderEnum);
    [SecurityCriticalAttribute]
private void ReadObjectWithMap(DXBinaryObjectWithMap record);
    [SecurityCriticalAttribute]
private void ReadObjectWithMapTyped(DXBinaryHeader binaryHeaderEnum);
    [SecurityCriticalAttribute]
private void ReadObjectWithMapTyped(DXBinaryObjectWithMapTyped record);
    [SecurityCriticalAttribute]
private void ReadObjectString(DXBinaryHeader binaryHeaderEnum);
    [SecurityCriticalAttribute]
private void ReadMemberPrimitiveTyped();
    [SecurityCriticalAttribute]
private void ReadArray(DXBinaryHeader binaryHeaderEnum);
    [SecurityCriticalAttribute]
private void ReadArrayAsBytes(DXParseRecord pr);
    [SecurityCriticalAttribute]
private void ReadMemberPrimitiveUnTyped();
    [SecurityCriticalAttribute]
private void ReadMemberReference();
    [SecurityCriticalAttribute]
private void ReadObjectNull(DXBinaryHeader binaryHeaderEnum);
    [SecurityCriticalAttribute]
private void ReadMessageEnd();
    public object ReadValue(DXInternalPrimitiveType code);
    private DXObjectProgress GetOp();
    private void PutOp(DXObjectProgress op);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.__DXBinaryWriter : object {
    private DXObjectWriter objectWriter;
    private BinaryWriter dataWriter;
    private Hashtable objectMapTable;
    private int nullCount;
    private DXBinaryObject binaryObject;
    private DXBinaryObjectWithMap binaryObjectWithMap;
    private DXBinaryObjectWithMapTyped binaryObjectWithMapTyped;
    private DXBinaryObjectString binaryObjectString;
    private DXBinaryArray binaryArray;
    private Byte[] byteBuffer;
    private int chunkSize;
    private DXMemberPrimitiveUnTyped memberPrimitiveUnTyped;
    private DXMemberPrimitiveTyped memberPrimitiveTyped;
    private DXObjectNull objectNull;
    private DXMemberReference memberReference;
    private DXBinaryAssembly binaryAssembly;
    internal __DXBinaryWriter(Stream outputStream, DXObjectWriter objectWriter);
    public void WriteBegin();
    public void WriteEnd();
    public void WriteString(string value);
    public void WriteInt32(int value);
    public void WriteByte(byte value);
    private void WriteBoolean(bool value);
    private void WriteBytes(Byte[] value);
    private void WriteBytes(Byte[] byteA, int offset, int size);
    private void WriteChar(char value);
    private void WriteChars(Char[] value);
    private void WriteDecimal(decimal value);
    private void WriteSingle(float value);
    private void WriteDouble(double value);
    private void WriteInt16(short value);
    private void WriteInt64(long value);
    private void WriteSByte(sbyte value);
    private void WriteTimeSpan(TimeSpan value);
    private void WriteDateTime(DateTime value);
    private void WriteUInt16(ushort value);
    private void WriteUInt32(UInt32 value);
    private void WriteUInt64(ulong value);
    public void WriteObjectEnd(DXNameInfo memberNameInfo, DXNameInfo typeNameInfo);
    public void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion);
    public void WriteSerializationHeaderEnd();
    public void WriteObject(DXNameInfo nameInfo, DXNameInfo typeNameInfo, int numMembers, String[] memberNames, Type[] memberTypes, DXWriteObjectInfo[] memberObjectInfos);
    public void WriteObjectString(int objectId, string value);
    [SecurityCriticalAttribute]
public void WriteSingleArray(DXNameInfo arrayNameInfo, DXWriteObjectInfo objectInfo, DXNameInfo arrayElemTypeNameInfo, int length, int lowerBound, Array array);
    [SecurityCriticalAttribute]
private void WriteArrayAsBytes(Array array, int typeLength);
    public void WriteJaggedArray(DXNameInfo arrayNameInfo, DXWriteObjectInfo objectInfo, DXNameInfo arrayElemTypeNameInfo, int length, int lowerBound);
    public void WriteRectangleArray(DXNameInfo arrayNameInfo, DXWriteObjectInfo objectInfo, DXNameInfo arrayElemTypeNameInfo, int rank, Int32[] lengthA, Int32[] lowerBoundA);
    [SecurityCriticalAttribute]
public void WriteObjectByteArray(DXNameInfo arrayNameInfo, DXWriteObjectInfo objectInfo, DXNameInfo arrayElemTypeNameInfo, int length, int lowerBound, Byte[] byteA);
    public void WriteMember(DXNameInfo memberNameInfo, DXNameInfo typeNameInfo, object value);
    public void WriteNullMember(DXNameInfo memberNameInfo, DXNameInfo typeNameInfo);
    public void WriteMemberObjectRef(int idRef);
    public void WriteMemberNested();
    public void WriteMemberString(DXNameInfo typeNameInfo, string value);
    public void WriteItem(DXNameInfo itemNameInfo, DXNameInfo typeNameInfo, object value);
    public void WriteNullItem();
    public void WriteDelayedNullItem();
    public void WriteItemEnd();
    private void InternalWriteItemNull();
    public void WriteItemObjectRef(int idRef);
    public void WriteAssembly(string assemblyString, int assemblyId, bool isNew);
    public void WriteValue(DXInternalPrimitiveType code, object value);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryArray : object {
    public int ObjectId;
    public int Rank;
    public Int32[] Lengths;
    public Int32[] LowerBounds;
    public DXBinaryType BinaryType;
    public object typeInformation;
    public int AssemblyId;
    private DXBinaryHeader BinaryHeader;
    public DXBinaryArrayType BinaryArrayType;
    internal DXBinaryArray(DXBinaryHeader binaryHeaderEnum);
    internal void Set(int objectId, int rank, Int32[] lengthA, Int32[] lowerBoundA, DXBinaryType binaryTypeEnum, object typeInformation, DXBinaryArrayType binaryArrayTypeEnum, int assemblyId);
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryArrayType : Enum {
    public int value__;
    public static DXBinaryArrayType Single;
    public static DXBinaryArrayType Jagged;
    public static DXBinaryArrayType Rectangular;
    public static DXBinaryArrayType SingleOffset;
    public static DXBinaryArrayType JaggedOffset;
    public static DXBinaryArrayType RectangularOffset;
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryAssembly : object {
    internal int AssemblyId;
    internal string AssemblyName;
    internal void Set(int assemblyId, string assemblyName);
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryAssemblyInfo : object {
    internal string AssemblyName;
    private Assembly assembly;
    internal DXBinaryAssemblyInfo(string assemblyName);
    internal DXBinaryAssemblyInfo(string assemblyName, Assembly assembly);
    internal Assembly GetAssembly();
}
internal static class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryConverter : object {
    internal static DXBinaryType GetBinaryTypeInfo(Type type, DXWriteObjectInfo objectInfo, DXObjectWriter objectWriter, Object& typeInformation, Int32& assemblyId);
    internal static DXBinaryType GetParserBinaryTypeInfo(Type type, Object& typeInformation);
    internal static void WriteTypeInfo(DXBinaryType binaryTypeEnum, object typeInformation, int assemblyId, __DXBinaryWriter sout);
    internal static object ReadTypeInfo(DXBinaryType binaryTypeEnum, __DXBinaryParser input, Int32& assemblyId);
    [SecurityCriticalAttribute]
internal static void TypeFromInfo(DXBinaryType binaryTypeEnum, object typeInformation, DXObjectReader objectReader, DXBinaryAssemblyInfo assemblyInfo, DXInternalPrimitiveType& primitiveTypeEnum, String& typeString, Type& type, Boolean& isVariant);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryCrossAppDomainAssembly : object {
    internal int AssemblyId;
    internal int AssemblyIndex;
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryCrossAppDomainMap : object {
    public int ArrayIndex;
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryCrossAppDomainString : object {
    public int ObjectId;
    public int Value;
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
public class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryFormatter : object {
    private SerializationBinder binderCore;
    private static ConcurrentDictionary`2<Type, DXTypeInformation> concurrentTypeNameCache;
    private FormatterTypeStyle typeFormatCore;
    private FormatterAssemblyStyle assemblyFormatCore;
    private TypeFilterLevel securityLevelCore;
    private StreamingContext contextCore;
    public FormatterTypeStyle TypeFormat { get; public set; }
    public FormatterAssemblyStyle AssemblyFormat { get; public set; }
    public TypeFilterLevel FilterLevel { get; public set; }
    public ISurrogateSelector SurrogateSelector { get; public set; }
    public StreamingContext Context { get; public set; }
    public SerializationBinder Binder { get; public set; }
    private static DXBinaryFormatter();
    public FormatterTypeStyle get_TypeFormat();
    public void set_TypeFormat(FormatterTypeStyle value);
    public FormatterAssemblyStyle get_AssemblyFormat();
    public void set_AssemblyFormat(FormatterAssemblyStyle value);
    public TypeFilterLevel get_FilterLevel();
    public void set_FilterLevel(TypeFilterLevel value);
    public sealed virtual ISurrogateSelector get_SurrogateSelector();
    public sealed virtual void set_SurrogateSelector(ISurrogateSelector value);
    public sealed virtual StreamingContext get_Context();
    public sealed virtual void set_Context(StreamingContext value);
    public sealed virtual SerializationBinder get_Binder();
    public sealed virtual void set_Binder(SerializationBinder value);
    public sealed virtual object Deserialize(Stream serializationStream);
    [SecuritySafeCriticalAttribute]
private object Deserialize(Stream serializationStream, bool fCheck);
    public sealed virtual void Serialize(Stream serializationStream, object graph);
    [SecuritySafeCriticalAttribute]
private void Serialize(Stream serializationStream, object graph, bool fCheck);
    internal static DXTypeInformation GetTypeInformation(Type type);
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryHeader : Enum {
    public int value__;
    public static DXBinaryHeader SerializedStreamHeader;
    public static DXBinaryHeader Object;
    public static DXBinaryHeader ObjectWithMap;
    public static DXBinaryHeader ObjectWithMapAssemblyId;
    public static DXBinaryHeader ObjectWithMapTyped;
    public static DXBinaryHeader ObjectWithMapTypedAssemblyId;
    public static DXBinaryHeader ObjectString;
    public static DXBinaryHeader Array;
    public static DXBinaryHeader MemberPrimitiveTyped;
    public static DXBinaryHeader MemberReference;
    public static DXBinaryHeader ObjectNull;
    public static DXBinaryHeader MessageEnd;
    public static DXBinaryHeader Assembly;
    public static DXBinaryHeader ObjectNullMultiple256;
    public static DXBinaryHeader ObjectNullMultiple;
    public static DXBinaryHeader ArraySinglePrimitive;
    public static DXBinaryHeader ArraySingleObject;
    public static DXBinaryHeader ArraySingleString;
    public static DXBinaryHeader CrossAppDomainMap;
    public static DXBinaryHeader CrossAppDomainString;
    public static DXBinaryHeader CrossAppDomainAssembly;
    public static DXBinaryHeader MethodCall;
    public static DXBinaryHeader MethodReturn;
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryObject : object {
    public int ObjectId;
    public int MapId;
    internal void Set(int objectId, int mapId);
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryObjectString : object {
    public int ObjectId;
    public string Value;
    internal void Set(int objectId, string value);
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryObjectWithMap : object {
    public DXBinaryHeader binaryHeaderEnum;
    public int ObjectId;
    public string Name;
    private int membersCount;
    public String[] MemberNames;
    public int AssemblyId;
    internal DXBinaryObjectWithMap(DXBinaryHeader binaryHeaderEnum);
    internal void Set(int objectId, string name, int numMembers, String[] memberNames, int assemblyId);
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryObjectWithMapTyped : object {
    public DXBinaryHeader binaryHeaderEnum;
    public int ObjectId;
    public string Name;
    private int membersCount;
    public String[] memberNames;
    public DXBinaryType[] binaryTypeEnums;
    public Object[] TypeInfos;
    public Int32[] MemberAssemblyIds;
    public int AssemblyId;
    internal DXBinaryObjectWithMapTyped(DXBinaryHeader binaryHeaderEnum);
    internal void Set(int objectId, string name, int numMembers, String[] memberNames, DXBinaryType[] binaryTypeEnumA, Object[] typeInformationA, Int32[] memberAssemblyIds, int assemblyId);
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXBinaryType : Enum {
    public int value__;
    public static DXBinaryType Primitive;
    public static DXBinaryType String;
    public static DXBinaryType Object;
    public static DXBinaryType ObjectUrt;
    public static DXBinaryType ObjectUser;
    public static DXBinaryType ObjectArray;
    public static DXBinaryType StringArray;
    public static DXBinaryType PrimitiveArray;
}
internal static class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXConverter : object {
    private static int primitiveTypeEnumLength;
    private static Type[] modreq(System.Runtime.CompilerServices.IsVolatile) primitiveTypeToTypes;
    private static Type[] modreq(System.Runtime.CompilerServices.IsVolatile) arrayTypes;
    private static String[] modreq(System.Runtime.CompilerServices.IsVolatile) comTypeNames;
    private static TypeCode[] modreq(System.Runtime.CompilerServices.IsVolatile) typeCodeArray;
    private static DXInternalPrimitiveType[] modreq(System.Runtime.CompilerServices.IsVolatile) primitiveTypeCodes;
    internal static Type typeofISerializable;
    internal static Type typeofString;
    internal static Type typeofConverter;
    internal static Type typeofBoolean;
    internal static Type typeofByte;
    internal static Type typeofChar;
    internal static Type typeofDecimal;
    internal static Type typeofDouble;
    internal static Type typeofInt16;
    internal static Type typeofInt32;
    internal static Type typeofInt64;
    internal static Type typeofSByte;
    internal static Type typeofSingle;
    internal static Type typeofTimeSpan;
    internal static Type typeofDateTime;
    internal static Type typeofUInt16;
    internal static Type typeofUInt32;
    internal static Type typeofUInt64;
    internal static Type typeofObject;
    internal static Type typeofSystemVoid;
    internal static Assembly urtAssembly;
    internal static string urtAssemblyString;
    internal static Assembly urtAlternativeAssembly;
    internal static string urtAlternativeAssemblyString;
    internal static Type typeofTypeArray;
    internal static Type typeofObjectArray;
    internal static Type typeofStringArray;
    internal static Type typeofBooleanArray;
    internal static Type typeofByteArray;
    internal static Type typeofCharArray;
    internal static Type typeofDecimalArray;
    internal static Type typeofDoubleArray;
    internal static Type typeofInt16Array;
    internal static Type typeofInt32Array;
    internal static Type typeofInt64Array;
    internal static Type typeofSByteArray;
    internal static Type typeofSingleArray;
    internal static Type typeofTimeSpanArray;
    internal static Type typeofDateTimeArray;
    internal static Type typeofUInt16Array;
    internal static Type typeofUInt32Array;
    internal static Type typeofUInt64Array;
    internal static Type typeofMarshalByRefObject;
    private static DXConverter();
    public static DXInternalPrimitiveType ToCode(Type type);
    public static bool IsWriteAsByteArray(DXInternalPrimitiveType code);
    public static int TypeLength(DXInternalPrimitiveType code);
    public static Type ToArrayType(DXInternalPrimitiveType code);
    private static void InitPrimitiveTypeToTypesArray();
    private static void InitTypesArray();
    public static Type ToType(DXInternalPrimitiveType code);
    public static Array CreatePrimitiveArray(DXInternalPrimitiveType code, int length);
    public static bool IsPrimitiveArray(Type type, Object& typeInformation);
    private static void InitValueArray();
    public static string ToComType(DXInternalPrimitiveType code);
    private static void InitTypeCodeArray();
    private static TypeCode ToTypeCode(DXInternalPrimitiveType code);
    private static void InitCodeArray();
    public static DXInternalPrimitiveType ToPrimitiveType(TypeCode typeCode);
    public static object FromString(string value, DXInternalPrimitiveType code);
}
internal static class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXDateTime : object {
    private static MethodInfo mi_FromBinaryRaw;
    private static MethodInfo mi_ToBinaryRaw;
    internal static DateTime FromBinaryRaw(long value);
    internal static long ToBinaryRaw(DateTime value);
}
internal static class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXEnvironment : object {
    public static string GetResourceString(string nm, Object[] _);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXFormatterConverter : object {
    public static DXFormatterConverter Default;
    private static DXFormatterConverter();
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual char ToChar(object value);
    public sealed virtual sbyte ToSByte(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual short ToInt16(object value);
    public sealed virtual ushort ToUInt16(object value);
    public sealed virtual int ToInt32(object value);
    public sealed virtual UInt32 ToUInt32(object value);
    public sealed virtual long ToInt64(object value);
    public sealed virtual ulong ToUInt64(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual string ToString(object value);
}
internal static class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXFormatterServices : object {
    public static bool UnsafeTypeForwardersIsEnabled();
    internal static Assembly LoadAssemblyFromStringNoThrow(string assemblyName);
    internal static string GetClrAssemblyName(Type type, Boolean& hasTypeForwardedFrom);
    internal static string GetClrTypeFullName(Type type);
    private static string GetClrTypeFullNameForArray(Type type);
    private static string GetClrTypeFullNameForNonArrayTypes(Type type);
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXInternalArrayType : Enum {
    public int value__;
    public static DXInternalArrayType Empty;
    public static DXInternalArrayType Single;
    public static DXInternalArrayType Jagged;
    public static DXInternalArrayType Rectangular;
    public static DXInternalArrayType Base64;
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXInternalFE : object {
    internal FormatterTypeStyle FEtypeFormat;
    internal FormatterAssemblyStyle FEassemblyFormat;
    internal TypeFilterLevel FEsecurityLevel;
    internal DXInternalSerializerType FEserializerTypeEnum;
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXInternalMemberType : Enum {
    public int value__;
    public static DXInternalMemberType Empty;
    public static DXInternalMemberType Header;
    public static DXInternalMemberType Field;
    public static DXInternalMemberType Item;
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXInternalMemberValue : Enum {
    public int value__;
    public static DXInternalMemberValue Empty;
    public static DXInternalMemberValue InlineValue;
    public static DXInternalMemberValue Nested;
    public static DXInternalMemberValue Reference;
    public static DXInternalMemberValue Null;
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXInternalObjectPosition : Enum {
    public int value__;
    public static DXInternalObjectPosition Empty;
    public static DXInternalObjectPosition Top;
    public static DXInternalObjectPosition Child;
    public static DXInternalObjectPosition Headers;
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXInternalObjectType : Enum {
    public int value__;
    public static DXInternalObjectType Empty;
    public static DXInternalObjectType Object;
    public static DXInternalObjectType Array;
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXInternalParseType : Enum {
    public int value__;
    public static DXInternalParseType Empty;
    public static DXInternalParseType SerializedStreamHeader;
    public static DXInternalParseType Object;
    public static DXInternalParseType Member;
    public static DXInternalParseType ObjectEnd;
    public static DXInternalParseType MemberEnd;
    public static DXInternalParseType Headers;
    public static DXInternalParseType HeadersEnd;
    public static DXInternalParseType SerializedStreamHeaderEnd;
    public static DXInternalParseType Envelope;
    public static DXInternalParseType EnvelopeEnd;
    public static DXInternalParseType Body;
    public static DXInternalParseType BodyEnd;
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXInternalPrimitiveType : Enum {
    public int value__;
    public static DXInternalPrimitiveType Invalid;
    public static DXInternalPrimitiveType Boolean;
    public static DXInternalPrimitiveType Byte;
    public static DXInternalPrimitiveType Char;
    public static DXInternalPrimitiveType Currency;
    public static DXInternalPrimitiveType Decimal;
    public static DXInternalPrimitiveType Double;
    public static DXInternalPrimitiveType Int16;
    public static DXInternalPrimitiveType Int32;
    public static DXInternalPrimitiveType Int64;
    public static DXInternalPrimitiveType SByte;
    public static DXInternalPrimitiveType Single;
    public static DXInternalPrimitiveType TimeSpan;
    public static DXInternalPrimitiveType DateTime;
    public static DXInternalPrimitiveType UInt16;
    public static DXInternalPrimitiveType UInt32;
    public static DXInternalPrimitiveType UInt64;
    public static DXInternalPrimitiveType Null;
    public static DXInternalPrimitiveType String;
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXInternalSerializerType : Enum {
    public int value__;
    public static DXInternalSerializerType Soap;
    public static DXInternalSerializerType Binary;
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXIntSizedArray : object {
    private Int32[] objects;
    private Int32[] negObjects;
    public int Item { get; public set; }
    private DXIntSizedArray(DXIntSizedArray sizedArray);
    public sealed virtual object Clone();
    public int get_Item(int index);
    public void set_Item(int index, int value);
    private void IncreaseCapacity(int index);
}
internal static class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXIOUtil : object {
    internal static void WriteStringWithCode(string value, __DXBinaryWriter sout);
    internal static void WriteWithCode(Type type, object value, __DXBinaryWriter sout);
    internal static object ReadWithCode(__DXBinaryParser input);
    internal static Object[] ReadArgs(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXMemberPrimitiveTyped : object {
    public DXInternalPrimitiveType PrimitiveType;
    public object Value;
    internal void Set(DXInternalPrimitiveType primitiveTypeEnum, object value);
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXMemberPrimitiveUnTyped : object {
    public DXInternalPrimitiveType TypeInformation;
    public object Value;
    internal void Set(DXInternalPrimitiveType typeInformation, object value);
    internal void Set(DXInternalPrimitiveType typeInformation);
    public sealed virtual void Write(__DXBinaryWriter sout);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXMemberReference : object {
    public int ReferenceId;
    internal void Set(int idRef);
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXMessageEnd : object {
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXNameCache : object {
    private static ConcurrentDictionary`2<string, object> names;
    private string name;
    private static DXNameCache();
    public object GetCachedValue(string name);
    public void SetCachedValue(object value);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXNameInfo : object {
    internal string NIFullName;
    internal long NIobjectId;
    internal long NIassemId;
    internal DXInternalPrimitiveType NIprimitiveTypeEnum;
    internal Type NItype;
    internal bool NIisSealed;
    internal bool NIisArray;
    internal bool NIisArrayItem;
    internal bool NItransmitTypeOnObject;
    internal bool NItransmitTypeOnMember;
    internal bool NIisParentTypeOnObject;
    internal DXInternalArrayType NIarrayEnum;
    private bool NIsealedStatusChecked;
    public bool IsSealed { get; }
    public string NIname { get; public set; }
    internal void Init();
    public bool get_IsSealed();
    public string get_NIname();
    public void set_NIname(string value);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXObjectIDGenerator : object {
    private static int numbins;
    internal int currentCount;
    internal int currentSize;
    internal Int64[] ids;
    internal Object[] objs;
    private static Int32[] sizesWithMaxArraySwitch;
    private static DXObjectIDGenerator();
    private int FindElement(object obj, Boolean& found);
    public long GetId(object obj, Boolean& firstTime);
    public long HasId(object obj, Boolean& firstTime);
    private void Rehash();
}
internal static class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXObjectManager : object {
    private static ConstructorInfo ctorInternal;
    private static MethodInfo mi_RegisterString;
    private static FieldInfo fi_TopObject;
    internal static ObjectManager CreateObjectManager(StreamingContext context);
    internal static void RegisterString(ObjectManager manager, string str, long pRobjectId, SerializationInfo si, long parentId, MemberInfo memberInfo);
    internal static void SetTopObject(ObjectManager manager, object newTopObject);
    private static ConstructorInfo GetObjectManagerInternalCtor();
    private static ConstructorInfo GetObjectManagerPublicCtor();
    private static MethodInfo GetObjectManagerRegisterStringMethod();
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXObjectMap : object {
    public string ObjectName;
    public Type ObjectType;
    internal DXBinaryType[] binaryTypeEnumA;
    internal Object[] typeInformationA;
    internal Type[] memberTypes;
    internal String[] memberNames;
    internal DXReadObjectInfo objectInfo;
    internal bool isInitObjectInfo;
    internal DXObjectReader objectReader;
    internal int objectId;
    internal DXBinaryAssemblyInfo assemblyInfo;
    [SecurityCriticalAttribute]
internal DXObjectMap(string objectName, Type objectType, String[] memberNames, DXObjectReader objectReader, int objectId, DXBinaryAssemblyInfo assemblyInfo);
    [SecurityCriticalAttribute]
internal DXObjectMap(string objectName, String[] memberNames, DXBinaryType[] binaryTypeEnumA, Object[] typeInformationA, Int32[] memberAssemblyIds, DXObjectReader objectReader, int objectId, DXBinaryAssemblyInfo assemblyInfo, DXSizedArray assemblyIdToAssemblyTable);
    internal DXReadObjectInfo CreateObjectInfo(SerializationInfo& si, Object[]& memberData);
    [SecurityCriticalAttribute]
internal static DXObjectMap Create(string name, Type objectType, String[] memberNames, DXObjectReader objectReader, int objectId, DXBinaryAssemblyInfo assemblyInfo);
    [SecurityCriticalAttribute]
internal static DXObjectMap Create(string name, String[] memberNames, DXBinaryType[] binaryTypeEnumA, Object[] typeInformationA, Int32[] memberAssemblyIds, DXObjectReader objectReader, int objectId, DXBinaryAssemblyInfo assemblyInfo, DXSizedArray assemblyIdToAssemblyTable);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXObjectMapInfo : object {
    internal int objectId;
    private int numMembers;
    private String[] memberNames;
    private Type[] memberTypes;
    internal DXObjectMapInfo(int objectId, int numMembers, String[] memberNames, Type[] memberTypes);
    public bool IsCompatible(int numMembers, String[] memberNames, Type[] memberTypes);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXObjectNull : object {
    public int Count;
    internal void SetNullCount(int nullCount);
    public sealed virtual void Write(__DXBinaryWriter output);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
    public void Read(__DXBinaryParser input, DXBinaryHeader binaryHeaderEnum);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXObjectProgress : object {
    internal static int opRecordIdCount;
    internal int opRecordId;
    internal bool isInitial;
    internal int count;
    internal DXBinaryType expectedType;
    internal object expectedTypeInformation;
    internal string name;
    internal DXInternalObjectType objectTypeEnum;
    internal DXInternalMemberType memberTypeEnum;
    internal DXInternalMemberValue memberValueEnum;
    internal Type dtType;
    internal int numItems;
    internal DXBinaryType binaryTypeEnum;
    internal object typeInformation;
    internal int memberLength;
    internal DXBinaryType[] binaryTypeEnumA;
    internal Object[] typeInformationA;
    internal String[] memberNames;
    internal Type[] memberTypes;
    internal DXParseRecord pr;
    private static DXObjectProgress();
    [ConditionalAttribute("SER_LOGGING")]
private void Counter();
    internal void Init();
    internal void ArrayCountIncrement(int value);
    internal bool GetNext(DXBinaryType& outBinaryTypeEnum, Object& outTypeInformation);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXObjectReader : object {
    private StreamingContext contextCore;
    private ObjectManager objectManagerCore;
    internal DXInternalFE formatterEnums;
    private SerializationBinder binderCore;
    private bool bSimpleAssembly;
    private object topObjectCore;
    private DXSerObjectInfoInit serObjectInfoInit;
    private DXSerStack stack;
    private DXSerStack valueFixupStack;
    internal Object[] crossAppDomainArray;
    private bool bFullDeserialization;
    private static int THRESHOLD_FOR_VALUETYPE_IDS;
    private bool bOldFormatDetected;
    private DXIntSizedArray valTypeObjectIdTable;
    private DXNameCache typeCache;
    private string previousAssemblyString;
    private string previousName;
    private Type previousType;
    private DXSerStack ValueFixupStack { get; }
    private object TopObject { get; private set; }
    internal DXObjectReader(Stream stream, StreamingContext context, DXInternalFE formatterEnums, SerializationBinder binder);
    private DXSerStack get_ValueFixupStack();
    private object get_TopObject();
    private void set_TopObject(object value);
    [SecuritySafeCriticalAttribute]
internal object Deserialize(__DXBinaryParser serParser, bool fCheck);
    [SecurityCriticalAttribute]
private void CheckSerializable(Type t);
    [SecurityCriticalAttribute]
private void InitFullDeserialization();
    internal object CrossAppDomainArray(int index);
    [SecurityCriticalAttribute]
internal DXReadObjectInfo CreateReadObjectInfo(Type objectType);
    [SecurityCriticalAttribute]
internal DXReadObjectInfo CreateReadObjectInfo(Type objectType, Type[] memberTypes);
    [SecurityCriticalAttribute]
public void Parse(DXParseRecord pr);
    private void ParseError(DXParseRecord processing, DXParseRecord onStack);
    private void ParseSerializedStreamHeader(DXParseRecord pr);
    private void ParseSerializedStreamHeaderEnd(DXParseRecord pr);
    [SecurityCriticalAttribute]
private void ParseObject(DXParseRecord pr);
    [SecurityCriticalAttribute]
private void ParseObjectEnd(DXParseRecord pr);
    [SecurityCriticalAttribute]
private void ParseArray(DXParseRecord pr);
    private void NextRectangleMap(DXParseRecord pr);
    [SecurityCriticalAttribute]
private void ParseArrayMember(DXParseRecord pr);
    [SecurityCriticalAttribute]
private void ParseArrayMemberEnd(DXParseRecord pr);
    [SecurityCriticalAttribute]
private void ParseMember(DXParseRecord pr);
    [SecurityCriticalAttribute]
private void ParseMemberEnd(DXParseRecord pr);
    [SecurityCriticalAttribute]
private void ParseString(DXParseRecord pr, DXParseRecord parentPr);
    [SecurityCriticalAttribute]
private void RegisterObject(object obj, DXParseRecord pr, DXParseRecord objectPr);
    [SecurityCriticalAttribute]
private void RegisterObject(object obj, DXParseRecord pr, DXParseRecord objectPr, bool bIsString);
    [SecurityCriticalAttribute]
internal long GetId(long objectId);
    [SecurityCriticalAttribute]
internal Type Bind(string assemblyString, string typeString);
    [SecurityCriticalAttribute]
internal Type FastBindToType(string assemblyName, string typeName);
    [SecurityCriticalAttribute]
private static Assembly ResolveSimpleAssemblyName(AssemblyName assemblyName);
    [SecurityCriticalAttribute]
private static void GetSimplyNamedTypeFromAssembly(Assembly assembly, string typeName, Type& type);
    [SecurityCriticalAttribute]
internal Type GetType(DXBinaryAssemblyInfo assemblyInfo, string name);
    [SecuritySafeCriticalAttribute]
private static void CheckTypeForwardedTo(Assembly sourceAssembly, Assembly targetAssembly, Type resolvedType);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXObjectWriter : object {
    private Queue objectQueueCore;
    private DXObjectIDGenerator idGeneratorCore;
    private int currentIdCore;
    private StreamingContext contextCore;
    private SerializationObjectManager objectManagerCore;
    private __DXBinaryWriter serWriter;
    private long topId;
    private string topName;
    private DXInternalFE formatterEnums;
    private SerializationBinder binderCore;
    private DXSerObjectInfoInit serObjectInfoInit;
    internal ArrayList internalCrossAppDomainArray;
    private object previousObj;
    private long previousId;
    private Type previousType;
    private DXInternalPrimitiveType previousCode;
    private Hashtable assemblyToIdTable;
    private DXSerStack niPool;
    internal SerializationObjectManager ObjectManager { get; }
    internal DXObjectWriter(StreamingContext context, DXInternalFE formatterEnums, SerializationBinder binder);
    [SecurityCriticalAttribute]
internal void Serialize(object graph, __DXBinaryWriter serWriter, bool fCheck);
    internal SerializationObjectManager get_ObjectManager();
    [SecurityCriticalAttribute]
private void Write(DXWriteObjectInfo objectInfo, DXNameInfo memberNameInfo, DXNameInfo typeNameInfo);
    [SecurityCriticalAttribute]
private void Write(DXWriteObjectInfo objectInfo, DXNameInfo memberNameInfo, DXNameInfo typeNameInfo, String[] memberNames, Type[] memberTypes, Object[] memberData, DXWriteObjectInfo[] memberObjectInfos);
    [SecurityCriticalAttribute]
private void WriteMemberSetup(DXWriteObjectInfo objectInfo, DXNameInfo memberNameInfo, DXNameInfo typeNameInfo, string memberName, Type memberType, object memberData, DXWriteObjectInfo memberObjectInfo);
    [SecurityCriticalAttribute]
private void WriteMembers(DXNameInfo memberNameInfo, DXNameInfo memberTypeNameInfo, object memberData, DXWriteObjectInfo objectInfo, DXNameInfo typeNameInfo, DXWriteObjectInfo memberObjectInfo);
    [SecurityCriticalAttribute]
private void WriteArray(DXWriteObjectInfo objectInfo, DXNameInfo memberNameInfo, DXWriteObjectInfo memberObjectInfo);
    [SecurityCriticalAttribute]
private void WriteArrayMember(DXWriteObjectInfo objectInfo, DXNameInfo arrayElemTypeNameInfo, object data);
    [SecurityCriticalAttribute]
private void WriteRectangle(DXWriteObjectInfo objectInfo, int rank, Int32[] maxA, Array array, DXNameInfo arrayElemNameTypeInfo, Int32[] lowerBoundA);
    private object GetNext(Int64& objID);
    private long InternalGetId(object obj, bool assignUniqueIdToValueType, Type type, Boolean& isNew);
    private long Schedule(object obj, bool assignUniqueIdToValueType, Type type);
    private long Schedule(object obj, bool assignUniqueIdToValueType, Type type, DXWriteObjectInfo objectInfo);
    private bool WriteKnownValueClass(DXNameInfo memberNameInfo, DXNameInfo typeNameInfo, object data);
    private void WriteObjectRef(DXNameInfo nameInfo, long objectId);
    private void WriteString(DXNameInfo memberNameInfo, DXNameInfo typeNameInfo, object stringObject);
    private bool CheckForNull(DXWriteObjectInfo objectInfo, DXNameInfo memberNameInfo, DXNameInfo typeNameInfo, object data);
    private void WriteSerializedStreamHeader(long topId, long headerId);
    private DXNameInfo TypeToNameInfo(Type type, DXWriteObjectInfo objectInfo, DXInternalPrimitiveType code, DXNameInfo nameInfo);
    private DXNameInfo TypeToNameInfo(Type type);
    private DXNameInfo TypeToNameInfo(DXWriteObjectInfo objectInfo);
    private DXNameInfo TypeToNameInfo(DXWriteObjectInfo objectInfo, DXNameInfo nameInfo);
    private void TypeToNameInfo(Type type, DXNameInfo nameInfo);
    private DXNameInfo MemberToNameInfo(string name);
    internal DXInternalPrimitiveType ToCode(Type type);
    private long GetAssemblyId(DXWriteObjectInfo objectInfo);
    private Type GetType(object obj);
    private DXNameInfo GetNameInfo();
    private bool CheckTypeFormat(FormatterTypeStyle test, FormatterTypeStyle want);
    private void PutNameInfo(DXNameInfo nameInfo);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXParseRecord : object {
    internal DXInternalParseType PRparseTypeEnum;
    internal DXInternalObjectType PRobjectTypeEnum;
    internal DXInternalArrayType PRarrayTypeEnum;
    internal DXInternalMemberType PRmemberTypeEnum;
    internal DXInternalMemberValue PRmemberValueEnum;
    internal DXInternalObjectPosition PRobjectPositionEnum;
    internal string PRname;
    internal string PRvalue;
    internal object PRvarValue;
    internal string PRkeyDt;
    internal Type PRdtType;
    internal DXInternalPrimitiveType PRdtTypeCode;
    internal long PRobjectId;
    internal long PRidRef;
    internal string PRarrayElementTypeString;
    internal Type PRarrayElementType;
    internal bool PRisArrayVariant;
    internal DXInternalPrimitiveType PRarrayElementTypeCode;
    internal int PRrank;
    internal Int32[] PRlengthA;
    internal Int32[] PRlowerBoundA;
    internal Int32[] PRindexMap;
    internal int PRmemberIndex;
    internal int PRlinearlength;
    internal Int32[] PRrectangularMap;
    internal bool PRisLowerBound;
    internal DXReadObjectInfo PRobjectInfo;
    internal bool PRisValueTypeFixup;
    internal object PRnewObj;
    internal Object[] PRobjectA;
    internal DXPrimitiveArray PRprimitiveArray;
    internal bool PRisRegistered;
    internal Object[] PRmemberData;
    internal SerializationInfo PRsi;
    internal int PRnullCount;
    internal void Init();
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXPrimitiveArray : object {
    private DXInternalPrimitiveType code;
    private Boolean[] booleanA;
    private Char[] charA;
    private Double[] doubleA;
    private Int16[] int16A;
    private Int32[] int32A;
    private Int64[] int64A;
    private SByte[] sbyteA;
    private Single[] singleA;
    private UInt16[] uint16A;
    private UInt32[] uint32A;
    private UInt64[] uint64A;
    internal DXPrimitiveArray(DXInternalPrimitiveType code, Array array);
    internal void Init(DXInternalPrimitiveType code, Array array);
    internal void SetValue(string value, int index);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXReadObjectInfo : object {
    public int ObjectInfoId;
    private static int readObjectInfoCounter;
    public Type ObjectType;
    internal ObjectManager objectManager;
    private StreamingContext context;
    private int count;
    internal bool isSi;
    internal bool IsTyped;
    private bool bSimpleAssembly;
    private DXSerObjectInfoCache cache;
    private int lastPosition;
    internal List`1<Type> memberTypesList;
    internal DXSerObjectInfoInit serObjectInfoInit;
    internal void ObjectEnd();
    internal void PrepareForReuse();
    [SecurityCriticalAttribute]
internal static DXReadObjectInfo Create(Type objectType, StreamingContext context, ObjectManager objectManager, DXSerObjectInfoInit serObjectInfoInit, bool bSimpleAssembly);
    [SecurityCriticalAttribute]
internal void Init(Type objectType, StreamingContext context, ObjectManager objectManager, DXSerObjectInfoInit serObjectInfoInit, bool bSimpleAssembly);
    [SecurityCriticalAttribute]
internal static DXReadObjectInfo Create(Type objectType, Type[] memberTypes, StreamingContext context, ObjectManager objectManager, DXSerObjectInfoInit serObjectInfoInit, bool bSimpleAssembly);
    [SecurityCriticalAttribute]
internal void Init(Type objectType, Type[] memberTypes, StreamingContext context, ObjectManager objectManager, DXSerObjectInfoInit serObjectInfoInit, bool bSimpleAssembly);
    [SecurityCriticalAttribute]
private void InitReadConstructor(Type objectType);
    private void InitSiRead();
    private void InitNoMembers();
    [SecurityCriticalAttribute]
private void InitMemberInfo();
    internal MemberInfo GetMemberInfo(string name);
    internal Type GetType(string name);
    internal void AddValue(string name, object value, SerializationInfo& si, Object[]& memberData);
    internal void InitDataStore(SerializationInfo& si, Object[]& memberData);
    internal void RecordFixup(long objectId, string name, long idRef);
    [SecurityCriticalAttribute]
internal void PopulateObjectMembers(object obj, Object[] memberData);
    private int Position(string name);
    internal Type[] GetMemberTypes(String[] inMemberNames, Type objectType);
    internal Type GetMemberType(MemberInfo objMember);
    private static DXReadObjectInfo GetObjectInfo(DXSerObjectInfoInit serObjectInfoInit);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXSerializationHeaderRecord : object {
    private static int binaryFormatterMajorVersion;
    private static int binaryFormatterMinorVersion;
    private DXBinaryHeader binaryHeaderEnum;
    public int TopId;
    public int HeaderId;
    private int majorVersion;
    private int minorVersion;
    internal DXSerializationHeaderRecord(DXBinaryHeader binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion);
    public sealed virtual void Write(__DXBinaryWriter output);
    private static int GetInt32(Byte[] buffer, int index);
    [SecurityCriticalAttribute]
public sealed virtual void Read(__DXBinaryParser input);
}
internal static class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXSerializationInfo : object {
    private static string s_mscorlibAssemblySimpleName;
    private static string s_mscorlibFileName;
    public static bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName);
    private static bool Compare(Byte[] a, Byte[] b);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXSerObjectInfoCache : object {
    internal string fullTypeName;
    internal string assemblyString;
    internal bool hasTypeForwardedFrom;
    internal MemberInfo[] memberInfos;
    internal String[] memberNames;
    internal Type[] memberTypes;
    internal DXSerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom);
    internal DXSerObjectInfoCache(Type type);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXSerObjectInfoInit : object {
    internal Hashtable seenBeforeTable;
    internal int objectInfoIdCount;
    internal DXSerStack oiPool;
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXSerStack : object {
    internal Object[] objects;
    internal string stackId;
    internal int top;
    internal DXSerStack(string stackId);
    internal void Push(object obj);
    internal object Pop();
    internal void IncreaseCapacity();
    internal object Peek();
    internal object PeekPeek();
    internal int Count();
    internal bool IsEmpty();
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXSizedArray : object {
    private Object[] objects;
    private Object[] negObjects;
    public object Item { get; public set; }
    internal DXSizedArray(int length);
    private DXSizedArray(DXSizedArray sizedArray);
    public sealed virtual object Clone();
    public object get_Item(int index);
    public void set_Item(int index, object value);
    private void IncreaseCapacity(int index);
}
internal static class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXStringBuilderCache : object {
    public static StringBuilder Acquire(int capacity);
    public static object GetStringAndRelease(StringBuilder sb);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXTypeInformation : object {
    private string fullTypeName;
    private string assemblyString;
    private bool hasTypeForwardedFrom;
    public string FullTypeName { get; }
    public string AssemblyString { get; }
    public bool HasTypeForwardedFrom { get; }
    internal DXTypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom);
    public string get_FullTypeName();
    public string get_AssemblyString();
    public bool get_HasTypeForwardedFrom();
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXValidatingFormatter : object {
    private IFormatter sourceFormatter;
    private IFormatter auxFormatter;
    private ISurrogateSelector System.Runtime.Serialization.IFormatter.SurrogateSelector { get; private set; }
    private StreamingContext System.Runtime.Serialization.IFormatter.Context { get; private set; }
    private SerializationBinder System.Runtime.Serialization.IFormatter.Binder { get; private set; }
    public DXValidatingFormatter(IFormatter source, IFormatter aux);
    private sealed virtual override ISurrogateSelector System.Runtime.Serialization.IFormatter.get_SurrogateSelector();
    private sealed virtual override void System.Runtime.Serialization.IFormatter.set_SurrogateSelector(ISurrogateSelector value);
    private sealed virtual override StreamingContext System.Runtime.Serialization.IFormatter.get_Context();
    private sealed virtual override void System.Runtime.Serialization.IFormatter.set_Context(StreamingContext value);
    private sealed virtual override SerializationBinder System.Runtime.Serialization.IFormatter.get_Binder();
    private sealed virtual override void System.Runtime.Serialization.IFormatter.set_Binder(SerializationBinder value);
    private sealed virtual override object System.Runtime.Serialization.IFormatter.Deserialize(Stream serializationStream);
    private sealed virtual override void System.Runtime.Serialization.IFormatter.Serialize(Stream serializationStream, object graph);
    private static string Dump(Byte[] data);
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXValueFixup : object {
    private DXValueFixupEnum valueFixupEnum;
    private Array arrayObj;
    private Int32[] indexMap;
    private DXReadObjectInfo objectInfo;
    private string memberName;
    internal DXValueFixup(Array arrayObj, Int32[] indexMap);
    internal DXValueFixup(string memberName, DXReadObjectInfo objectInfo);
    [SecurityCriticalAttribute]
internal void Fixup(DXParseRecord record, DXParseRecord parent);
}
internal enum DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXValueFixupEnum : Enum {
    public int value__;
    public static DXValueFixupEnum Empty;
    public static DXValueFixupEnum Array;
    public static DXValueFixupEnum Header;
    public static DXValueFixupEnum Member;
}
internal class DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.DXWriteObjectInfo : object {
    public int ObjectInfoId;
    public object Object;
    public Type ObjectType;
    internal bool isSi;
    private bool isNamed;
    public bool IsArray;
    private DXSerObjectInfoCache cache;
    private Object[] memberData;
    private SerializationInfo si;
    private StreamingContext context;
    private DXSerObjectInfoInit serObjectInfoInit;
    public long ObjectId;
    public long AssemblyId;
    private string binderTypeName;
    private string binderAssemblyString;
    internal void ObjectEnd();
    private void InternalInit();
    [SecurityCriticalAttribute]
internal static DXWriteObjectInfo Serialize(object obj, StreamingContext context, DXSerObjectInfoInit serObjectInfoInit, DXObjectWriter objectWriter, SerializationBinder binder);
    [SecurityCriticalAttribute]
internal void InitSerialize(object obj, StreamingContext context, DXSerObjectInfoInit serObjectInfoInit, DXObjectWriter objectWriter, SerializationBinder binder);
    [SecurityCriticalAttribute]
internal static DXWriteObjectInfo Serialize(Type objectType, StreamingContext context, DXSerObjectInfoInit serObjectInfoInit, SerializationBinder binder);
    [SecurityCriticalAttribute]
internal void InitSerialize(Type objectType, StreamingContext context, DXSerObjectInfoInit serObjectInfoInit, SerializationBinder binder);
    private void InitSiWrite();
    private static void CheckTypeForwardedFrom(DXSerObjectInfoCache cache, Type objectType, string binderAssemblyString);
    private void InitNoMembers();
    [SecurityCriticalAttribute]
private void InitMemberInfo();
    internal string GetTypeFullName();
    internal string GetAssemblyString();
    private void InvokeSerializationBinder(SerializationBinder binder);
    internal Type GetMemberType(MemberInfo objMember);
    internal void GetMemberInfo(String[]& outMemberNames, Type[]& outMemberTypes, Object[]& outMemberData);
    private static DXWriteObjectInfo GetObjectInfo(DXSerObjectInfoInit serObjectInfoInit);
    private static void PutObjectInfo(DXSerObjectInfoInit serObjectInfoInit, DXWriteObjectInfo objectInfo);
}
internal interface DevExpress.Utils.Internal.Compatibility.Serialization.Formatters.Binary.IDXStreamable {
    [SecurityCriticalAttribute]
public abstract virtual void Read(__DXBinaryParser input);
    public abstract virtual void Write(__DXBinaryWriter output);
}
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Internal.DangerousTypeActivationDetector : object {
    private static HashSet`1<Type> incompatibleTypes;
    private static HashSet`1<MethodBase> incompatibleAPI;
    private static DangerousTypeActivationDetector();
    public static void SetUp(bool detectActivatorCreateInstance, HashSet`1<Type> additionalTypes);
    public static bool TryCheckAssembly(Type type, String& errorMessage, HashSet`1<Type> excludeTypes);
}
public abstract class DevExpress.Utils.Internal.DXCharsetAndCodePageTranslator : object {
    private static DXCharsetAndCodePageTranslator instance;
    public static DXCharsetAndCodePageTranslator Instance { get; }
    public static DXCharsetAndCodePageTranslator get_Instance();
    public static void ClearInstance();
    private static DXCharsetAndCodePageTranslator CreateInstance();
    public abstract virtual int CodePageFromCharset(int charset);
    public abstract virtual int CharsetFromCodePage(int codePage);
}
public class DevExpress.Utils.Internal.FullTrustCharsetAndCodePageTranslator : DXCharsetAndCodePageTranslator {
    private static int TCI_SRCCHARSET;
    private static int TCI_SRCCODEPAGE;
    private static Dictionary`2<int, int> charsetToCodePage;
    private static Dictionary`2<int, int> codePageToCharset;
    private static FullTrustCharsetAndCodePageTranslator();
    private static int TranslateCharsetInfo(IntPtr pSrc, CHARSETINFO& lpSc, int dwFlags);
    private static Dictionary`2<int, int> InitializeCodePageTable();
    private static Dictionary`2<int, int> InitializeCharsetTable();
    [SecuritySafeCriticalAttribute]
private int CodePageFromCharsetCore(int charset);
    [SecuritySafeCriticalAttribute]
private int CharsetFromCodePageCore(int codePage);
    public virtual int CodePageFromCharset(int charset);
    public virtual int CharsetFromCodePage(int codePage);
}
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Internal.InsufficientEntropyDueRandomDetector : object {
    private static Pattern[] badApproachesPatterns;
    private static Type systemRandom;
    private static Type nonCryptoRandom;
    private static InsufficientEntropyDueRandomDetector();
    public static bool Match(Assembly assembly, List`1<string> errors);
    private static Pattern GetIsRandomMethodCall();
    private static bool IsRandom(MethodBase method);
    private static bool IsFalsePositive(Instruction[] captures, ILReader reader);
}
public class DevExpress.Utils.Internal.PartialTrustCharsetAndCodePageTranslator : DXCharsetAndCodePageTranslator {
    private static Dictionary`2<int, int> CharsetToCodePage;
    private static PartialTrustCharsetAndCodePageTranslator();
    private static Dictionary`2<int, int> InitializeCharsetTable();
    public virtual int CodePageFromCharset(int charset);
    public virtual int CharsetFromCodePage(int codePage);
}
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Internal.SafeXMLCompatibilityDetector : object {
    private static Lazy`1<HashSet`1<Type>> incompatibleTypes;
    private static Lazy`1<HashSet`1<MethodBase>> incompatibleAPI;
    private static SafeXMLCompatibilityDetector();
    private static HashSet`1<Type> GetDefaultIncompatibleTypes();
    private static HashSet`1<MethodBase> GetDefaultIncompatibleAPI();
    [ObsoleteAttribute("The SetUp method is now a no-op")]
public static void SetUp();
    [ObsoleteAttribute("Use the Match method instead.")]
public static bool TryCheckAssembly(Type type, String& errorMessage, HashSet`1<Type> excludeTypes);
    public static bool Match(Assembly assembly, List`1<string> errors, HashSet`1<Type> excludeTypes);
}
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Internal.TypeGetTypeUsageDetector : object {
    private static HashSet`1<MethodBase> getTypeMethods;
    private static TypeGetTypeUsageDetector();
    private static void RegisterMembersWithParameters(MemberInfo[] methods);
    private static void RegisterMembersWithStringParameters(MemberInfo[] methods, Predicate`1<ParameterInfo> filter);
    public static void RegisterAdditionalEntryPoints(HashSet`1<MethodBase> methods);
    [SecuritySafeCriticalAttribute]
public static bool Match(Assembly assembly, List`1<string> errors, HashSet`1<Type> exclude, HashSet`1<string> excludeMethodByName);
    private static Pattern GetTypeGetTypeUsage(HashSet`1<Type> exclude, HashSet`1<string> excludeMethodByName);
    private static bool IsExeptionalMethod(HashSet`1<string> excludeMethodByName, MethodBase method);
    private static bool IsConstantString(Instruction capture, Instruction[] instructions);
}
[AttributeUsageAttribute("128")]
public class DevExpress.Utils.IoC.DependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsMandatory>k__BackingField;
    public bool IsMandatory { get; private set; }
    public DependencyAttribute(bool isMandatory);
    [CompilerGeneratedAttribute]
public bool get_IsMandatory();
    [CompilerGeneratedAttribute]
private void set_IsMandatory(bool value);
}
public class DevExpress.Utils.IoC.FactoryRegistration : Registration {
    private Func`1<object> factory;
    private object syncRoot;
    private bool isCachedInstanceInitialized;
    private object cachedInstance;
    [CompilerGeneratedAttribute]
private bool <Transient>k__BackingField;
    public object Instance { get; }
    public bool Transient { get; private set; }
    public FactoryRegistration(Func`1<object> factory);
    public object get_Instance();
    [CompilerGeneratedAttribute]
public bool get_Transient();
    [CompilerGeneratedAttribute]
private void set_Transient(bool value);
    public void AsTransient();
    public sealed virtual void Dispose();
}
public class DevExpress.Utils.IoC.InstanceRegistration : Registration {
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    public object Instance { get; private set; }
    public InstanceRegistration(object instance);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(object value);
}
public class DevExpress.Utils.IoC.IntegrityContainer : object {
    private Dictionary`2<Type, Registration> registry;
    private List`1<IDisposable> objectsToDispose;
    protected IDictionary`2<Type, Registration> Registry { get; }
    protected internal IEnumerable`1<Type> RegisteredTypes { get; }
    protected IDictionary`2<Type, Registration> get_Registry();
    protected internal IEnumerable`1<Type> get_RegisteredTypes();
    public TypeRegistration RegisterType();
    public TypeRegistration RegisterType(Type serviceType, Type concreteType);
    public TypeRegistration RegisterType();
    public InstanceRegistration RegisterInstance(TServiceType instance);
    public InstanceRegistration RegisterInstance(Type serviceType, object instance);
    public FactoryRegistration RegisterFactory(Func`1<TServiceType> factory);
    public FactoryRegistration RegisterFactory(Func`2<IServiceProvider, TServiceType> factory);
    protected TRegistration RegisterCore(Type serviceType, TRegistration registration);
    public TServiceType Resolve();
    public object Resolve(Type serviceType);
    private object CreateInstance(TypeRegistration typeRegistration);
    protected void AfterInitializeInstance(object instance, TypeRegistration typeRegistration);
    protected void InitializeProperties(object instance, TypeRegistration typeRegistration);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    protected virtual bool TryResolveUnregistered(Type serviceType, Registration& registration);
    protected internal static ConstructorInfo[] SelectMostGreedyConstructors(Type type);
    protected static ConstructorInfo SelectMostGreedyConstructor(Type type);
    internal IEnumerable`1<object> GetNonTransientInstances();
    private static bool IsNonTransient(Registration registration);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private object <GetNonTransientInstances>b__23_1(KeyValuePair`2<Type, Registration> x);
}
public abstract class DevExpress.Utils.IoC.Registration : object {
}
public class DevExpress.Utils.IoC.RegistrationFailedException : Exception {
    public RegistrationFailedException(string message);
    public RegistrationFailedException(string message, Exception inner);
}
public class DevExpress.Utils.IoC.ResolutionFailedException : Exception {
    public ResolutionFailedException(string message);
    public ResolutionFailedException(string message, Exception inner);
}
public class DevExpress.Utils.IoC.TypeRegistration : Registration {
    private Dictionary`2<string, object> arguments;
    private ParameterInfo[] parameterInfoArray;
    [CompilerGeneratedAttribute]
private Type <ConcreteType>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstructorInfo <ConstructorInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Transient>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SyncRoot>k__BackingField;
    public Type ConcreteType { get; private set; }
    public ConstructorInfo ConstructorInfo { get; private set; }
    public object Instance { get; internal set; }
    public bool Transient { get; private set; }
    public object SyncRoot { get; private set; }
    public TypeRegistration(Type concreteType, ConstructorInfo constructorInfo);
    [CompilerGeneratedAttribute]
public Type get_ConcreteType();
    [CompilerGeneratedAttribute]
private void set_ConcreteType(Type value);
    [CompilerGeneratedAttribute]
public ConstructorInfo get_ConstructorInfo();
    [CompilerGeneratedAttribute]
private void set_ConstructorInfo(ConstructorInfo value);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
internal void set_Instance(object value);
    [CompilerGeneratedAttribute]
public bool get_Transient();
    [CompilerGeneratedAttribute]
private void set_Transient(bool value);
    [CompilerGeneratedAttribute]
public object get_SyncRoot();
    [CompilerGeneratedAttribute]
private void set_SyncRoot(object value);
    public TypeRegistration WithCtorArgument(string name, object value);
    public bool TryGetParameterValue(string name, Object& value);
    public void AsTransient();
    public sealed virtual void Dispose();
}
public interface DevExpress.Utils.IOfficeScroller {
    public abstract virtual void Start(object control);
    public abstract virtual void Start(object control, Point screenPoint);
}
public interface DevExpress.Utils.ISupportObjectChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(EventHandler value);
}
public interface DevExpress.Utils.ISupportObjectChanging {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changing(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changing(CancelEventHandler value);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.IVector`1 {
    public int Count { get; }
    public T Item { get; public set; }
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(int index);
    public abstract virtual void set_Item(int index, T value);
}
public interface DevExpress.Utils.IView`1 {
    public abstract virtual void BeginUpdate();
    public abstract virtual void EndUpdate();
    public abstract virtual void RegisterPresenter(TPresenter presenter);
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual void Warning(string message);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Ok(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Ok(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Cancel(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Cancel(EventHandler value);
}
public abstract class DevExpress.Utils.KeyboardHandler.CommandBasedKeyboardHandler`1 : KeyboardHandler {
    private Dictionary`2<long, T> keyHandlerIdTable;
    public Dictionary`2<long, T> KeyHandlerIdTable { get; }
    public Dictionary`2<long, T> get_KeyHandlerIdTable();
    public virtual bool HandleKey(PortableKeys keyData);
    public virtual bool HandleKeyPress(char character, PortableKeys modifier);
    protected bool ExecuteCommand(Command command, PortableKeys keyData);
    protected virtual void ExecuteCommandCore(Command command, PortableKeys keyData);
    public virtual void RegisterKeyHandler(IKeyHashProvider provider, PortableKeys key, PortableKeys modifier, T handlerId);
    protected internal virtual void RegisterKeyHandlerCore(IKeyHashProvider provider, long keyData, T handlerId);
    public virtual void UnregisterKeyHandler(IKeyHashProvider provider, PortableKeys key, PortableKeys modifier);
    protected internal virtual void UnregisterKeyHandlerCore(IKeyHashProvider provider, long keyData);
    public virtual T GetKeyHandlerId(long keyData);
    public virtual Command GetKeyHandler(PortableKeys keyData);
    public virtual Command GetKeyHandler(char key, PortableKeys modifier);
    protected internal virtual Command GetKeyHandlerCore(long keyData);
    public static long KeysToInt64KeyData(PortableKeys keys);
    public static PortableKeys KeyDataToKeys(long keyData);
    public static long CharToInt64KeyData(char value, PortableKeys modifier);
    public virtual PortableKeys GetKeys(T handlerId);
    protected abstract virtual void ValidateHandlerId(T handlerId);
    public abstract virtual Command CreateHandlerCommand(T handlerId);
    protected abstract virtual IKeyHashProvider CreateKeyHashProviderFromContext();
}
public class DevExpress.Utils.KeyboardHandler.EmptyKeyboardHandler : KeyboardHandler {
}
public interface DevExpress.Utils.KeyboardHandler.IKeyHashProvider {
    public abstract virtual long CreateHash(long keyData);
}
public abstract class DevExpress.Utils.KeyboardHandler.KeyboardHandler : object {
    private object context;
    public object Context { get; public set; }
    public static bool IsShiftPressed { get; }
    public static bool IsControlPressed { get; }
    public static bool IsAltPressed { get; }
    public static PortableKeyState KeyState { get; }
    public object get_Context();
    public void set_Context(object value);
    public virtual bool IsValidChar(char c);
    public virtual bool HandleKey(PortableKeys keyData);
    public virtual bool HandleKeyPress(char character, PortableKeys modifier);
    public virtual bool HandleKeyUp(PortableKeys keys);
    public static bool get_IsShiftPressed();
    public static bool get_IsControlPressed();
    public static bool get_IsAltPressed();
    public static PortableKeyState get_KeyState();
    public static PortableKeys GetModifierKeys();
}
public static class DevExpress.Utils.LanguageIdToCultureConverter : object {
    private static Dictionary`2<int, CultureInfo> cultureTable;
    private static LanguageIdToCultureConverter();
    public static CultureInfo Convert(int lcid);
    public static int Convert(CultureInfo cultureInfo);
    public static IEnumerable`1<CultureInfo> GetAllLanguages();
    private static Dictionary`2<int, CultureInfo> CreateCultureTable();
    private static void AddCulture(Dictionary`2<int, CultureInfo> where, CultureInfo culture);
}
public class DevExpress.Utils.LayoutAllowEventArgs : LayoutUpgradeEventArgs {
    [CompilerGeneratedAttribute]
private bool <Allow>k__BackingField;
    public bool Allow { get; public set; }
    public LayoutAllowEventArgs(string previousVersion);
    [CompilerGeneratedAttribute]
public bool get_Allow();
    [CompilerGeneratedAttribute]
public void set_Allow(bool value);
}
public class DevExpress.Utils.LayoutAllowEventHandler : MulticastDelegate {
    public LayoutAllowEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LayoutAllowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LayoutAllowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.LayoutUpgradeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <PreviousVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <NewHiddenItems>k__BackingField;
    public string PreviousVersion { get; private set; }
    public Object[] NewHiddenItems { get; private set; }
    public LayoutUpgradeEventArgs(string previousVersion);
    public LayoutUpgradeEventArgs(string previousVersion, Object[] newHiddenItems);
    [CompilerGeneratedAttribute]
public string get_PreviousVersion();
    [CompilerGeneratedAttribute]
private void set_PreviousVersion(string value);
    [CompilerGeneratedAttribute]
public Object[] get_NewHiddenItems();
    [CompilerGeneratedAttribute]
private void set_NewHiddenItems(Object[] value);
}
public class DevExpress.Utils.LayoutUpgradeEventHandler : MulticastDelegate {
    public LayoutUpgradeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LayoutUpgradeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LayoutUpgradeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class DevExpress.Utils.ListEnumerator`1 : object {
    private int index;
    private IList`1<T> list;
    private object System.Collections.IEnumerator.Current { get; }
    private T System.Collections.Generic.IEnumerator<T>.Current { get; }
    public ListEnumerator`1(IList`1<T> list);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override T System.Collections.Generic.IEnumerator<T>.get_Current();
    private sealed virtual override void System.IDisposable.Dispose();
}
public abstract class DevExpress.Utils.Localization.CoreLibraryResources : object {
}
internal class DevExpress.Utils.Localization.Internal.ActiveLocalizerChangedWeakEventHandler`1 : WeakEventHandler`2<EventArgs, EventHandler> {
    [ThreadStaticAttribute]
private static ActiveLocalizerChangedWeakEventHandler`1<T> instanceCore;
    private static ActiveLocalizerChangedWeakEventHandler`1<T> Instance { get; }
    private static ActiveLocalizerChangedWeakEventHandler`1<T> get_Instance();
    internal static void AddHandler(EventHandler value);
    internal static void RemoveHandler(EventHandler value);
    internal static void RaiseChanged(XtraLocalizer`1<T> localizer);
}
public abstract class DevExpress.Utils.Localization.Internal.ActiveLocalizerProvider`1 : object {
    private XtraLocalizer`1<T> defaultLocalizerCore;
    [EditorBrowsableAttribute("1")]
protected internal XtraLocalizer`1<T> DefaultLocalizer { get; }
    protected ActiveLocalizerProvider`1(XtraLocalizer`1<T> defaultLocalizer);
    protected internal XtraLocalizer`1<T> get_DefaultLocalizer();
    public XtraLocalizer`1<T> GetActiveLocalizer();
    public void SetActiveLocalizer(XtraLocalizer`1<T> localizer);
    protected internal abstract virtual XtraLocalizer`1<T> GetActiveLocalizerCore();
    protected internal abstract virtual void SetActiveLocalizerCore(XtraLocalizer`1<T> localizer);
    protected internal virtual void EnableAllThreadRequestsHandling();
}
public class DevExpress.Utils.Localization.Internal.DefaultActiveLocalizerProvider`1 : ActiveLocalizerProvider`1<T> {
    [ThreadStaticAttribute]
private static XtraLocalizer`1<T> threadLocalizerCore;
    private static XtraLocalizer`1<T> globalLocalizerCore;
    public DefaultActiveLocalizerProvider`1(XtraLocalizer`1<T> defaultLocalizer);
    protected internal virtual XtraLocalizer`1<T> GetActiveLocalizerCore();
    protected internal virtual void SetActiveLocalizerCore(XtraLocalizer`1<T> localizer);
    protected internal sealed virtual void EnableAllThreadRequestsHandling();
}
internal class DevExpress.Utils.Localization.Internal.QueryLocalizedStringWeakEventHandler : WeakEventHandler`2<QueryLocalizedStringEventArgs, EventHandler> {
    [ThreadStaticAttribute]
private static QueryLocalizedStringWeakEventHandler instanceCore;
    private static QueryLocalizedStringWeakEventHandler globalInstanceCore;
    [ThreadStaticAttribute]
private static QueryLocalizedStringWeakEventHandler nonTranslatedInstanceCore;
    private static QueryLocalizedStringWeakEventHandler nonTranslatedGlobalInstanceCore;
    [ThreadStaticAttribute]
private static QueryLocalizedStringWeakEventHandler containerResourceInstanceCore;
    private static QueryLocalizedStringWeakEventHandler containerResourceGlobalInstanceCore;
    [ThreadStaticAttribute]
private static QueryLocalizedStringEventArgs argsCore;
    private static QueryLocalizedStringWeakEventHandler Instance { get; }
    private static QueryLocalizedStringWeakEventHandler NonTranslatedInstance { get; }
    private static QueryLocalizedStringWeakEventHandler ContainerResourceInstance { get; }
    private static QueryLocalizedStringEventArgs Args { get; }
    private static QueryLocalizedStringWeakEventHandler get_Instance();
    private static QueryLocalizedStringWeakEventHandler get_NonTranslatedInstance();
    private static QueryLocalizedStringWeakEventHandler get_ContainerResourceInstance();
    internal static void EnsureGlobalTargets();
    private static QueryLocalizedStringEventArgs get_Args();
    internal static void AddHandler(EventHandler`1<QueryLocalizedStringEventArgs> value);
    internal static void RemoveHandler(EventHandler`1<QueryLocalizedStringEventArgs> value);
    internal static string Raise(XtraLocalizer localizer, Enum id, string value);
    internal static void AddHandlerNonTranslated(EventHandler`1<QueryLocalizedStringEventArgs> value);
    internal static void RemoveHandlerNonTranslated(EventHandler`1<QueryLocalizedStringEventArgs> value);
    internal static string RaiseNonTranslated(CultureInfo culture, XtraLocalizer resxLocalizer, Enum id, string resourceStringID);
    internal static void AddHandlerContainerResource(EventHandler`1<QueryLocalizedStringEventArgs> value);
    internal static void RemoveHandlerContainerResource(EventHandler`1<QueryLocalizedStringEventArgs> value);
    internal static string RaiseContainerResource(CultureInfo culture, Type containerType, string resourceStringID, string value, string invariantString);
    internal static string RaiseContainerResourceNonTranslated(CultureInfo culture, Type containerType, string resourceStringID, string invariantString);
    internal static string RaiseCommonResource(CultureInfo culture, Type containerType, string resourceStringID, string value, string invariantString);
    internal static string RaiseCommonResourceNonTranslated(CultureInfo culture, Type containerType, string resourceStringID, string invariantString);
}
public abstract class DevExpress.Utils.Localization.XtraLocalizer : object {
    internal static bool ShouldHandleAllThreadRequests;
    private static ConcurrentDictionary`2<Type, DXComponentResourceManager> registeredComponentResourceManagers;
    internal static bool ShouldHandleAllThreadEvents;
    internal static string TraceSourcePrefix;
    internal static string NonTranslatedTraceSourcePrefix;
    internal static string ResourceSatelliteAssembliesTraceSourcePrefix;
    internal static int TraceSourceColumnsCount;
    internal static int ResourceSatelliteAssembliesTraceSourceColumnsCount;
    [EditorBrowsableAttribute("1")]
public static int TraceSourceSize;
    private static XtraLocalizerTraceSource traceSourceCore;
    private static XtraLocalizerTraceSource nonTranslatedTraceSourceCore;
    private static SatelliteAssembliesTraceSource satelliteAssembliesTraceSourceCore;
    internal static bool IsTraceModeEnabled;
    private static string traceSourceApplicationName;
    private static Nullable`1<bool> autoDetectUserResourceManager;
    internal static CultureInfo InvariantCulture;
    protected static ConcurrentDictionary`2<Type, XtraLocalizer> registeredLocalizers;
    [CompilerGeneratedAttribute]
private static ResourceManager <UserResourceManager>k__BackingField;
    private static XtraLocalizerTraceSource TraceSource { get; }
    private static XtraLocalizerTraceSource NonTranslatedTraceSource { get; }
    private static SatelliteAssembliesTraceSource ResourceSatelliteAssembliesTraceSource { get; }
    [EditorBrowsableAttribute("0")]
public static ResourceManager UserResourceManager { get; public set; }
    private static XtraLocalizer();
    [EditorBrowsableAttribute("2")]
public static void HandleRequestsFromAllThreads();
    protected internal abstract virtual void EnableAllThreadRequestsHandling();
    public static ComponentResourceManager CreateComponentResourceManager(Type containerType);
    public static ResourceManager CreateResourceManager(XtraResXLocalizer`1<TStringID> resXLocalizer, string baseName, Type locatorType);
    protected static ResourceManager CreateASPxResourceManager(XtraLocalizer`1<TStringID> resXLocalizer, string resXName);
    internal static ResourceManager CreateLocalizationGeneratorResourceManager(ResourceFileInfo resourceFileInfo);
    internal static ResourceSet EnsureLocalizationGeneratorResources(ResourceManager resourceManager, CultureInfo cultureInfo);
    internal static string RaiseLocalizationGeneratorResource(ResourceManager resourceManager, CultureInfo culture, string dxStringID, string value, bool isInvariantCulture);
    public static void add_QueryLocalizedString(EventHandler`1<QueryLocalizedStringEventArgs> value);
    public static void remove_QueryLocalizedString(EventHandler`1<QueryLocalizedStringEventArgs> value);
    public static void add_QueryLocalizedStringNonTranslated(EventHandler`1<QueryLocalizedStringEventArgs> value);
    public static void remove_QueryLocalizedStringNonTranslated(EventHandler`1<QueryLocalizedStringEventArgs> value);
    public static void add_QueryLocalizedStringContainerResource(EventHandler`1<QueryLocalizedStringEventArgs> value);
    public static void remove_QueryLocalizedStringContainerResource(EventHandler`1<QueryLocalizedStringEventArgs> value);
    [EditorBrowsableAttribute("2")]
public static void HandleAllThreadEvents();
    internal static string RaiseQueryContainerResource(CultureInfo culture, Type containerType, string resourceStringID, string value, string invariantString);
    internal static string RaiseQueryCommonResource(CultureInfo culture, Type containerType, string resourceStringID, string value, string invariantString);
    internal static string RaiseContainerResourceNonTranslated(CultureInfo culture, Type containerType, string resourceStringID, string invariantString);
    internal static string RaiseCommonResourceNonTranslated(CultureInfo culture, Type containerType, string resourceStringID, string invariantString);
    internal static string RaiseQueryLocalizedStringNonTranslated(CultureInfo culture, XtraLocalizer resXLocalizer, string resourceStringID, string invariantString);
    internal static string RaiseQueryLocalizedStringNonTranslated(CultureInfo culture, XtraLocalizer resXLocalizer, Enum stringID, string resourceStringID, string invariantString);
    private static XtraLocalizerTraceSource get_TraceSource();
    private static XtraLocalizerTraceSource get_NonTranslatedTraceSource();
    private static SatelliteAssembliesTraceSource get_ResourceSatelliteAssembliesTraceSource();
    private static bool EnsurePrimaryTraceSource();
    internal static void AddTrace(XtraLocalizer localizer, Enum id, string value);
    internal static void AddTraceNonTranslated(XtraLocalizer localizer, string stringId, string value, string invariantString);
    internal static void AddTrace(Type containerType, string resourceStringID, string value, string invariantString);
    internal static void AddTraceNonTranslated(Type containerType, string resourceStringID, string value, string invariantString);
    private static string GetElement(string container, string resourceStringID);
    internal static void AddTraceCommonResource(Type containerType, string resourceStringID, string value, string invariantString);
    internal static void AddTraceCommonResourceNonTranslated(Type containerType, string resourceStringID, string value, string invariantString);
    internal static void AddResourceSatelliteAssembly(string assemblyName, string version, string culture);
    [EditorBrowsableAttribute("2")]
public static IDisposable EnterTraceMode(string applicationName);
    [EditorBrowsableAttribute("2")]
public static bool EnableTraceSource(string applicationName);
    private static Assembly GetApplicationEntryAssembly();
    private static ResourceManager EnsureUserResourceManager(Assembly entryAsm);
    [EditorBrowsableAttribute("2")]
public static bool ReleaseTraceSource();
    private static string EnsureNotActivated(string applicationName);
    public static void WriteAllToXml(string fileName);
    public static void WriteToXml(string fileName, HashSet`1<string> resourceIds);
    public static void WriteNonTranslatedToXml(string fileName);
    protected static XmlElement StartXmlDocumentCore(XmlDocument document);
    protected static void WriteToXmlCore(string fileName, XmlDocument document);
    protected internal static void CreateDataElement(XmlDocument document, XmlElement root, string resourceID, string value);
    protected abstract virtual void WriteToXml(XmlDocument document, XmlElement root, HashSet`1<string> resourceIds);
    protected abstract virtual void WriteNonTranslatedToXml(XmlDocument document, XmlElement root);
    [EditorBrowsableAttribute("1")]
public static void ClearAll(bool preserveNonTranslatedInfo);
    [CompilerGeneratedAttribute]
public static ResourceManager get_UserResourceManager();
    [CompilerGeneratedAttribute]
public static void set_UserResourceManager(ResourceManager value);
    protected internal string GetResourceStringID(Enum id);
    protected string GetResourceStringID(string enumTypeName, string id);
    protected internal abstract virtual string GetEnumTypeName();
    protected internal abstract virtual void ClearCore(bool preserveNonTranslatedInfo);
    protected internal abstract virtual string GetInvariantStringCore(Enum id);
    protected internal abstract virtual string GetCultureCore();
    protected internal abstract virtual Enum GetStringID(string resourceStringID);
    protected internal abstract virtual bool GetIsTranslated(Enum stringID);
    protected internal abstract virtual void AddNonTranslated(Enum stringID, string resourceStringID);
}
public abstract class DevExpress.Utils.Localization.XtraLocalizer`1 : XtraLocalizer {
    private static ActiveLocalizerProvider`1<T> localizerProviderCore;
    protected static Type IDType;
    protected static T InvalidID;
    private ConcurrentDictionary`2<CultureInfo, ConcurrentDictionary`2<T, string>> stringTables;
    private ConcurrentDictionary`2<T, string> nonTranslatedResourceStringIDs;
    public static XtraLocalizer`1<T> Active { get; public set; }
    [EditorBrowsableAttribute("1")]
public static ResourceManager UserResourceManager { get; public set; }
    public string Language { get; }
    [EditorBrowsableAttribute("1")]
internal ConcurrentDictionary`2<T, string> StringTable { get; }
    private static XtraLocalizer`1();
    public static void add_ActiveChanged(EventHandler value);
    public static void remove_ActiveChanged(EventHandler value);
    [EditorBrowsableAttribute("1")]
public static void RaiseActiveChanged();
    [DebuggerStepThroughAttribute]
public static XtraLocalizer`1<T> get_Active();
    public static void set_Active(XtraLocalizer`1<T> value);
    [EditorBrowsableAttribute("1")]
public static void Clear();
    [EditorBrowsableAttribute("1")]
public static void SetActiveLocalizerProvider(ActiveLocalizerProvider`1<T> value);
    [EditorBrowsableAttribute("1")]
public static ActiveLocalizerProvider`1<T> GetActiveLocalizerProvider();
    protected internal virtual void EnableAllThreadRequestsHandling();
    protected string RaiseQueryLocalizedString(T id, string result);
    public virtual void WriteToXml(string fileName);
    protected virtual void WriteToXml(XmlDocument document, XmlElement root, HashSet`1<string> resourceIds);
    private static bool IsObsolete(Type enumType, string name);
    [EditorBrowsableAttribute("1")]
public virtual XmlDocument CreateXmlDocument();
    private void CreateDataElementByID(XmlDocument document, XmlElement root, T id, string resourceID);
    protected virtual void WriteNonTranslatedToXml(XmlDocument document, XmlElement root);
    public static ResourceManager get_UserResourceManager();
    public static void set_UserResourceManager(ResourceManager value);
    public virtual string get_Language();
    protected internal virtual string GetCultureCore();
    [DebuggerStepThroughAttribute]
internal ConcurrentDictionary`2<T, string> get_StringTable();
    protected internal virtual void AddNonTranslated(Enum stringID, string resourceStringID);
    protected internal virtual bool GetIsTranslated(Enum stringID);
    protected internal virtual void ClearCore(bool preserveNonTranslatedInfo);
    protected virtual IEqualityComparer`1<T> CreateComparer();
    protected internal virtual void CreateStringTable();
    protected virtual void AddString(T id, string str);
    protected virtual bool DiffersFromCurrentCulture();
    public virtual string GetLocalizedString(T id);
    protected internal virtual string GetInvariantStringCore(Enum id);
    protected internal virtual string GetEnumTypeName();
    protected internal virtual Enum GetStringID(string resourceStringID);
    protected T GetID(Enum enumID);
    protected abstract virtual void PopulateStringTable();
    public abstract virtual XtraLocalizer`1<T> CreateResXLocalizer();
}
public abstract class DevExpress.Utils.Localization.XtraResXLocalizer`1 : XtraLocalizer`1<T> {
    private XtraLocalizer`1<T> embeddedLocalizer;
    private ResourceManager manager;
    private Func`2<T, string> resolver;
    protected bool UseDelayedResourceManager { get; }
    protected internal ResourceManager Manager { get; }
    public string Language { get; }
    protected internal XtraLocalizer`1<T> EmbeddedLocalizer { get; }
    protected XtraResXLocalizer`1(XtraLocalizer`1<T> embeddedLocalizer);
    public virtual XmlDocument CreateXmlDocument();
    [EditorBrowsableAttribute("1")]
public virtual XtraLocalizer`1<T> CreateResXLocalizer();
    protected virtual bool get_UseDelayedResourceManager();
    protected internal virtual void CreateResourceManager();
    protected abstract virtual ResourceManager CreateResourceManagerCore();
    protected internal virtual ResourceManager get_Manager();
    public virtual string get_Language();
    protected internal virtual string GetCultureCore();
    protected internal XtraLocalizer`1<T> get_EmbeddedLocalizer();
    protected virtual void PopulateStringTable();
    public virtual string GetLocalizedString(T id);
    private string ResourceIdToString(T id);
    protected internal virtual string GetLocalizedStringCore(T id);
    protected string GetLocalizedStringFromResources(T id);
    protected virtual string GetEmbeddedLocalizerString(T id);
    protected virtual string GetResourceManagerString(string resourceStringID);
    public string GetInvariantString(T id);
    protected internal virtual string GetInvariantStringCore(Enum id);
    protected internal virtual void ClearCore(bool preserveNonTranslatedInfo);
    [CompilerGeneratedAttribute]
private XtraLocalizer <.ctor>b__4_0(Type x, XtraLocalizer _);
}
public class DevExpress.Utils.LocalizationHelper : object {
    private static string ciFlag;
    public static bool IsJapanese { get; }
    public static void SetCurrentCulture(String[] arguments);
    public static bool get_IsJapanese();
}
public class DevExpress.Utils.LZWDecoder : object {
    private Dictionary`2<int, Byte[]> dictionary;
    private Byte[] data;
    private int initialSequenceLength;
    private AddEntryMethod addEntryMethod;
    private int dataSize;
    private int clearTable;
    private int endOfData;
    private int currentEntryLength;
    private int currentMaxEntryLength;
    private int currentDictionarySize;
    private int currentPosition;
    private byte currentSymbol;
    private int remainBits;
    public LZWDecoder(Byte[] data, int initialSequenceLength, bool earlyChange);
    public static Byte[] Decode(Byte[] data, int initialSequenceLength);
    public Byte[] Decode();
    private void InitializeTable();
    private int ReadNext();
    private void AddEntry(Byte[] entry);
    private void EnsureEntryLength();
    private void AddEntryWithEarlyChange(Byte[] entry);
    private void AddEntryWithLaterChange(Byte[] entry);
}
public static class DevExpress.Utils.MemoryControllerHelper : object {
    private static MEMORYSTATUSEX memoryStatus;
    public static long AvailableVirtualMemory { get; }
    public static long AvailableVirtualMemory_Mib { get; }
    private static MemoryControllerHelper();
    public static bool IsEnoughMemory(int limitBytes);
    public static long GetAvailableVirtualMemory();
    [SecuritySafeCriticalAttribute]
public static long get_AvailableVirtualMemory();
    [SecuritySafeCriticalAttribute]
public static long get_AvailableVirtualMemory_Mib();
    private static bool GlobalMemoryStatusEx(MEMORYSTATUSEX lpBuffer);
}
public abstract class DevExpress.Utils.Menu.CommandBasedPopupMenuBuilder`2 : object {
    private IMenuBuilderUIFactory`2<TCommand, TMenuId> uiFactory;
    public IMenuBuilderUIFactory`2<TCommand, TMenuId> UiFactory { get; }
    protected CommandBasedPopupMenuBuilder`2(IMenuBuilderUIFactory`2<TCommand, TMenuId> uiFactory);
    public IMenuBuilderUIFactory`2<TCommand, TMenuId> get_UiFactory();
    protected internal virtual void AddMenuItemIfCommandVisible(IDXPopupMenu`1<TMenuId> menu, TCommand command);
    protected internal virtual void AddMenuItemIfCommandVisible(IDXPopupMenu`1<TMenuId> menu, TCommand command, bool beginGroup);
    protected internal virtual IDXMenuItem`1<TMenuId> AddMenuItem(IDXPopupMenu`1<TMenuId> menu, TCommand command);
    protected internal virtual IDXMenuItem`1<TMenuId> AddMenuItem(IDXPopupMenu`1<TMenuId> menu, TCommand command, DXMenuItemPriority priority);
    protected internal virtual void AddMenuCheckItemIfCommandVisible(IDXPopupMenu`1<TMenuId> menu, TCommand command, string groupId);
    protected internal virtual IDXMenuCheckItem`1<TMenuId> AddMenuCheckItem(IDXPopupMenu`1<TMenuId> menu, TCommand command);
    protected internal virtual IDXMenuCheckItem`1<TMenuId> AddMenuCheckItem(IDXPopupMenu`1<TMenuId> menu, TCommand command, string groupId);
    protected internal virtual void AppendSubmenu(IDXPopupMenu`1<TMenuId> menu, IDXPopupMenu`1<TMenuId> subMenu, bool beginGroup);
    public virtual IDXPopupMenu`1<TMenuId> CreatePopupMenu();
    public virtual IDXPopupMenu`1<TMenuId> CreateSubMenu();
    public abstract virtual void PopulatePopupMenu(IDXPopupMenu`1<TMenuId> menu);
}
public enum DevExpress.Utils.Menu.DXMenuItemPriority : Enum {
    public int value__;
    public static DXMenuItemPriority Normal;
    public static DXMenuItemPriority High;
    public static DXMenuItemPriority Low;
}
public interface DevExpress.Utils.Menu.IDXMenuCheckItem`1 {
}
public interface DevExpress.Utils.Menu.IDXMenuCheckItemCommandAdapter`1 {
    public abstract virtual IDXMenuCheckItem`1<T> CreateMenuItem(string groupId);
}
public interface DevExpress.Utils.Menu.IDXMenuItem`1 {
}
public interface DevExpress.Utils.Menu.IDXMenuItemBase`1 {
    public bool BeginGroup { get; public set; }
    public abstract virtual bool get_BeginGroup();
    public abstract virtual void set_BeginGroup(bool value);
}
public class DevExpress.Utils.Menu.IDXMenuItemCollection`1 : List`1<IDXMenuItemBase`1<T>> {
}
public interface DevExpress.Utils.Menu.IDXMenuItemCommandAdapter`1 {
    public abstract virtual IDXMenuItem`1<T> CreateMenuItem(DXMenuItemPriority priority);
}
public interface DevExpress.Utils.Menu.IDXPopupMenu`1 {
    public int ItemsCount { get; }
    public T Id { get; public set; }
    public string Caption { get; public set; }
    public bool Visible { get; public set; }
    public bool Enabled { get; public set; }
    public abstract virtual int get_ItemsCount();
    public abstract virtual void AddItem(IDXMenuItemBase`1<T> item);
    public abstract virtual T get_Id();
    public abstract virtual void set_Id(T value);
    public abstract virtual string get_Caption();
    public abstract virtual void set_Caption(string value);
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
public interface DevExpress.Utils.Menu.IMenuBuilderUIFactory`2 {
    public abstract virtual IDXMenuItemCommandAdapter`1<TMenuId> CreateMenuItemAdapter(TCommand command);
    public abstract virtual IDXMenuCheckItemCommandAdapter`1<TMenuId> CreateMenuCheckItemAdapter(TCommand command);
    public abstract virtual IDXPopupMenu`1<TMenuId> CreatePopupMenu();
    public abstract virtual IDXPopupMenu`1<TMenuId> CreateSubMenu();
}
public abstract class DevExpress.Utils.MouseControllerBase`1 : object {
    private Func`1<T> getHitInfo;
    private T hitInfo;
    private Point mousePosition;
    protected T HitInfo { get; }
    protected Point MousePosition { get; }
    public MouseControllerBase`1(Func`1<T> getHitInfo);
    public virtual void DoMouseMove(Point mousePosition);
    protected virtual void OnMouseMove();
    protected T get_HitInfo();
    protected T GetHitInfo();
    protected Point get_MousePosition();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public abstract class DevExpress.Utils.MouseHandler : object {
    public static PortableMouseEventArgs EmptyMouseEventArgs;
    private bool isDisposed;
    private bool suspended;
    private int clickCount;
    private Point clickScreenPoint;
    private MouseHandlerState state;
    private PortableDispatchedTimer clickTimer;
    private IOfficeScroller officeScroller;
    private AutoScroller autoScroller;
    public bool IsDisposed { get; }
    protected bool SupportsTripleClick { get; }
    protected internal bool Suspended { get; }
    protected internal int ClickCount { get; protected internal set; }
    public bool IsControlPressed { get; }
    public MouseHandlerState State { get; }
    public PortableDispatchedTimer ClickTimer { get; }
    public bool IsClickTimerActive { get; }
    public IOfficeScroller OfficeScroller { get; }
    public AutoScroller AutoScroller { get; }
    private static MouseHandler();
    public bool get_IsDisposed();
    protected virtual bool get_SupportsTripleClick();
    protected internal bool get_Suspended();
    protected internal int get_ClickCount();
    protected internal void set_ClickCount(int value);
    public virtual bool get_IsControlPressed();
    public MouseHandlerState get_State();
    public PortableDispatchedTimer get_ClickTimer();
    public bool get_IsClickTimerActive();
    public IOfficeScroller get_OfficeScroller();
    public AutoScroller get_AutoScroller();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize();
    protected internal virtual PortableDispatchedTimer CreateTimer();
    public virtual void RunClickTimer();
    public virtual void StopClickTimer();
    public virtual void OnMouseDown(PortableMouseEventArgs e);
    public virtual void OnMouseMove(PortableMouseEventArgs e);
    public virtual void OnMouseUp(PortableMouseEventArgs e);
    public virtual void OnMouseWheel(PortableMouseEventArgs e);
    public virtual void OnClickTimerTick(object sender, EventArgs e);
    public virtual bool OnPopupMenu(PortableMouseEventArgs e);
    protected virtual PortableMouseEventArgs ConvertMouseEventArgs(PortableMouseEventArgs screenMouseEventArgs);
    protected virtual bool IsDoubleClick(PortableMouseEventArgs e);
    protected internal virtual bool IsTripleClick(PortableMouseEventArgs e);
    protected internal virtual bool IsMultipleClickCore(PortableMouseEventArgs e);
    protected internal Size GetDoubleClickSize();
    public Size GetDragSize();
    public void Suspend();
    public void Resume();
    public virtual void SwitchStateCore(MouseHandlerState newState, Point mousePosition);
    protected virtual void HandleMouseDoubleClick(PortableMouseEventArgs e);
    protected virtual void HandleMouseTripleClick(PortableMouseEventArgs e);
    protected virtual void HandleMouseDown(PortableMouseEventArgs e);
    protected virtual void HandleMouseMove(PortableMouseEventArgs e);
    protected virtual void HandleMouseUp(PortableMouseEventArgs e);
    protected virtual bool HandlePopupMenu(PortableMouseEventArgs e);
    protected abstract virtual void HandleMouseWheel(PortableMouseEventArgs e);
    protected abstract virtual void HandleClickTimerTick();
    protected abstract virtual void CalculateAndSaveHitInfo(PortableMouseEventArgs e);
    protected abstract virtual IOfficeScroller CreateOfficeScroller();
    protected abstract virtual AutoScroller CreateAutoScroller();
    protected abstract virtual void StartOfficeScroller(Point clientPoint);
    public abstract virtual void SwitchToDefaultState();
}
public abstract class DevExpress.Utils.MouseHandlerState : object {
    private bool isFinished;
    private MouseHandler mouseHandler;
    public MouseHandler MouseHandler { get; }
    public bool AutoScrollEnabled { get; }
    public bool IsFinished { get; }
    public bool CanShowToolTip { get; }
    public bool StopClickTimerOnStart { get; }
    protected MouseHandlerState(MouseHandler mouseHandler);
    public MouseHandler get_MouseHandler();
    public virtual bool get_AutoScrollEnabled();
    public bool get_IsFinished();
    public virtual bool get_CanShowToolTip();
    public virtual bool get_StopClickTimerOnStart();
    public virtual void Finish();
    public virtual void OnCancelState();
    public virtual void OnMouseMove(PortableMouseEventArgs e);
    public virtual void OnMouseDown(PortableMouseEventArgs e);
    public virtual void OnMouseUp(PortableMouseEventArgs e);
    public virtual void OnMouseDoubleClick(PortableMouseEventArgs e);
    public virtual void OnMouseTripleClick(PortableMouseEventArgs e);
    public virtual void OnMouseWheel(PortableMouseEventArgs e);
    public virtual bool OnPopupMenu(PortableMouseEventArgs e);
    public virtual void OnLongMouseDown();
    public virtual void OnDragEnter(PortableDragEventArgs e);
    public virtual void OnDragOver(PortableDragEventArgs e);
    public virtual void OnDragDrop(PortableDragEventArgs e);
    public virtual void OnDragLeave();
    public virtual void OnGiveFeedback(PortableGiveFeedbackEventArgs e);
    public virtual void Start();
    public virtual void OnQueryContinueDrag(PortableQueryContinueDragEventArgs e);
    public virtual void OnKeyStateChanged(PortableKeyState keyState);
    public virtual bool OnPopupMenuShowing();
    public virtual void OnMouseCaptureChanged();
}
public class DevExpress.Utils.MouseHitTestController`1 : MouseControllerBase`1<T> {
    private Action`2<T, T> action;
    public MouseHitTestController`1(Action`2<T, T> action, Func`1<T> getHitInfo);
    protected virtual void OnMouseMove();
}
public class DevExpress.Utils.MultiKey : object {
    protected Object[] keyParts;
    private int hashCode;
    public MultiKey(Object[] keyParts);
    public static MultiKey CreateKey(MultiKey source, Object[] keyParts);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public static class DevExpress.Utils.MultiplierChooser : object {
    private static Double[] multipliers;
    private static MultiplierChooser();
    public static double ChooseMultiplier(double delta);
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.MVVM.DynamicTypesHelper : object {
    private static string dynamicSuffix;
    private static Dictionary`2<string, ModuleBuilder> mCache;
    private static DynamicTypesHelper();
    public static TypeBuilder GetTypeBuilder(Type serviceType);
    public static TypeBuilder GetTypeBuilder(Type serviceType, Type sourceType);
    public static ModuleBuilder GetModuleBuilder(Assembly assembly);
    private static string MakeDynamicAssemblyName(string assemblyName);
    private static AssemblyName CreateDynamicAssemblyName(string assemblyName);
    public static string GetDynamicAssemblyName(string assemblyName);
    public static string GetDynamicTypeName(string typeName, string typeNameModifier);
    public static string GetDynamicTypeName(Type type);
    public static string GetDynamicTypeName(Type type, string typeNameModifier);
    public static string GetTypeName(Type type);
    private static string GetTypeNameCore(Type type);
}
[ExtensionAttribute]
[DXBrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.MVVM.Internal.ILAnalyzer : object {
    public static Type CompilerGenerated;
    [ThreadStaticAttribute]
private static StringBuilder methodErrorsBuilder;
    [ThreadStaticAttribute]
private static StringBuilder typeErrorsBuilder;
    private static short call_Value;
    private static short callvirt_Value;
    private static short newobj_Value;
    private static ILAnalyzer();
    public static bool Match(Pattern[] patterns, Assembly assembly, List`1<string> errors, bool catchUpExceptions);
    public static bool Match(Pattern[] patterns, Type type, List`1<string> errors, bool catchUpExceptions);
    public static bool Match(Pattern[] patterns, MethodBase method, String& error, bool catchUpExceptions);
    [ExtensionAttribute]
private static Type[] GetTypesSafe(Assembly assembly);
    [ExtensionAttribute]
private static bool IsAnonymousType(Type type);
    private static StringBuilder CreateMethodErrorsBuilder(MethodBase method);
    private static StringBuilder CreateTypeErrorsBuilder(Type type);
    public static bool IsSameMethod(MethodBase source, MethodBase target);
    public static bool IsCall(OpCode opCode);
    public static bool InNewObj(OpCode opCode);
    public static bool IsCallOrIsNewObj(OpCode opCode);
}
public class DevExpress.Utils.MVVM.Internal.ILReader : object {
    [CompilerGeneratedAttribute]
private Instruction[] <Instructions>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodBase <Method>k__BackingField;
    public Instruction[] Instructions { get; private set; }
    public MethodBase Method { get; private set; }
    public ILReader(MethodBase mInfo);
    [CompilerGeneratedAttribute]
public Instruction[] get_Instructions();
    [CompilerGeneratedAttribute]
private void set_Instructions(Instruction[] value);
    [CompilerGeneratedAttribute]
public MethodBase get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MethodBase value);
    private Instruction[] ReadInstructions(MethodBase method);
    private static object ReadOperand(BinaryReader binaryReader, OperandReaderContext context, OpCode opCode);
}
public interface DevExpress.Utils.MVVM.IViewModelProvider {
    public object ViewModel { get; }
    public bool IsViewModelCreated { get; }
    public abstract virtual object get_ViewModel();
    public abstract virtual bool get_IsViewModelCreated();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewModelChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewModelChanged(EventHandler value);
}
public static class DevExpress.Utils.MVVM.MVVMAssemblyProxy : object {
    private static string typePrefix;
    private static Assembly mvvmAssembly;
    public static Type GetMvvmType(Type& typeRef, string typeName);
    private static Assembly GetMVVMAssembly();
    private static Type GetMvvmType(string typeName);
    public static void Reset();
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Utils.NamedItemNotificationCollection`1 : NotificationCollection`1<T> {
    private Dictionary`2<string, T> nameHash;
    protected internal Dictionary`2<string, T> NameHash { get; }
    public T Item { get; }
    protected NamedItemNotificationCollection`1(DXCollectionUniquenessProviderType uniquenessProviderType);
    protected internal Dictionary`2<string, T> get_NameHash();
    public T get_Item(string name);
    protected virtual void OnInsertComplete(int index, T value);
    protected virtual void OnRemoveComplete(int index, T value);
    protected virtual void OnClearComplete();
    protected abstract virtual string GetItemName(T item);
}
public enum DevExpress.Utils.Native.CommandAction : Enum {
    public int value__;
    public static CommandAction Execute;
    public static CommandAction Undo;
    public static CommandAction Redo;
}
public abstract class DevExpress.Utils.Native.CommandBase : object {
    private UndoManager undoManager;
    protected internal bool CanDisposeOldValue { get; }
    protected internal bool CanDisposeNewValue { get; }
    public UndoManager UndoManager { get; }
    protected CommandBase(UndoManager undoManager);
    protected internal virtual bool get_CanDisposeOldValue();
    protected internal virtual bool get_CanDisposeNewValue();
    public UndoManager get_UndoManager();
    protected abstract virtual HistoryItem ExecuteInternal(object parameter);
    protected abstract virtual void UndoInternal(HistoryItem historyItem);
    protected abstract virtual void RedoInternal(HistoryItem historyItem);
    public abstract virtual bool CanExecute(object parameter);
    public void Execute(object parameter);
    public void Undo(HistoryItem historyItem);
    public void Redo(HistoryItem historyItem);
}
public class DevExpress.Utils.Native.CommandExecutedEventArgs : EventArgs {
    private object objectToSelect;
    private object commandParameter;
    private HistoryItem historyItem;
    private CommandAction commandAction;
    public object ObjectToSelect { get; }
    public object CommandParameter { get; }
    public HistoryItem HistoryItem { get; }
    public CommandAction CommandAction { get; }
    public CommandExecutedEventArgs(object objectToSelect);
    public CommandExecutedEventArgs(object objectToSelect, object commandParameter);
    public CommandExecutedEventArgs(object objectToSelect, object commandParameter, HistoryItem historyItem, CommandAction commandAction);
    public object get_ObjectToSelect();
    public object get_CommandParameter();
    public HistoryItem get_HistoryItem();
    public CommandAction get_CommandAction();
}
public class DevExpress.Utils.Native.CommandExecutedEventHandler : MulticastDelegate {
    public CommandExecutedEventHandler(object object, IntPtr method);
    public virtual void Invoke(CommandExecutedEventArgs e);
    public virtual IAsyncResult BeginInvoke(CommandExecutedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Native.CompositeHistoryItem : DisposableObject {
    private List`1<IHistoryItem> historyItems;
    [CompilerGeneratedAttribute]
private object <ObjectToSelect>k__BackingField;
    internal List`1<IHistoryItem> HistoryItems { get; }
    private IEnumerable`1<IHistoryItem> UndoHistoryItems { get; }
    public object ObjectToSelect { get; public set; }
    private object DevExpress.Utils.Native.IHistoryItem.ObjectToSelect { get; }
    internal List`1<IHistoryItem> get_HistoryItems();
    [IteratorStateMachineAttribute("DevExpress.Utils.Native.CompositeHistoryItem/<get_UndoHistoryItems>d__4")]
private IEnumerable`1<IHistoryItem> get_UndoHistoryItems();
    [CompilerGeneratedAttribute]
public object get_ObjectToSelect();
    [CompilerGeneratedAttribute]
public void set_ObjectToSelect(object value);
    private sealed virtual override object DevExpress.Utils.Native.IHistoryItem.get_ObjectToSelect();
    private sealed virtual override void DevExpress.Utils.Native.IHistoryItem.Undo();
    private sealed virtual override void DevExpress.Utils.Native.IHistoryItem.Redo();
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
}
public abstract class DevExpress.Utils.Native.DisposableObject : object {
    private bool isDisposed;
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class DevExpress.Utils.Native.HistoryDisposingStrategy : object {
    private static HistoryDisposingStrategy executedItemsStrategy;
    private static HistoryDisposingStrategy undoneItemsStrategy;
    private bool canDisposeOldValue;
    private bool canDisposeNewValue;
    public static HistoryDisposingStrategy ExecutedItemsStrategy { get; }
    public static HistoryDisposingStrategy UndoneItemsStrategy { get; }
    public bool CanDisposeOldValue { get; }
    public bool CanDisposeNewValue { get; }
    private HistoryDisposingStrategy(bool canDisposeOldValue, bool canDisposeNewValue);
    private static HistoryDisposingStrategy();
    public static HistoryDisposingStrategy get_ExecutedItemsStrategy();
    public static HistoryDisposingStrategy get_UndoneItemsStrategy();
    public bool get_CanDisposeOldValue();
    public bool get_CanDisposeNewValue();
}
public class DevExpress.Utils.Native.HistoryItem : DisposableObject {
    private CommandBase command;
    private object oldValue;
    private object newValue;
    private object parameter;
    [CompilerGeneratedAttribute]
private object <TargetObject>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ObjectToSelect>k__BackingField;
    public CommandBase Command { get; }
    public object OldValue { get; }
    public object NewValue { get; }
    public object Parameter { get; }
    public object TargetObject { get; public set; }
    public object ObjectToSelect { get; public set; }
    private object DevExpress.Utils.Native.IHistoryItem.ObjectToSelect { get; }
    public HistoryItem(CommandBase command, object oldValue, object newValue, object parameter);
    public CommandBase get_Command();
    public object get_OldValue();
    public object get_NewValue();
    public object get_Parameter();
    [CompilerGeneratedAttribute]
public object get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(object value);
    [CompilerGeneratedAttribute]
public object get_ObjectToSelect();
    [CompilerGeneratedAttribute]
public void set_ObjectToSelect(object value);
    private sealed virtual override object DevExpress.Utils.Native.IHistoryItem.get_ObjectToSelect();
    private sealed virtual override void DevExpress.Utils.Native.IHistoryItem.Undo();
    private sealed virtual override void DevExpress.Utils.Native.IHistoryItem.Redo();
    private void DisposeValueCore(object value);
    private void DisposeValue(object value, bool canDispose);
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
}
public interface DevExpress.Utils.Native.IHistoryItem {
    public object ObjectToSelect { get; }
    public abstract virtual object get_ObjectToSelect();
    public abstract virtual void Undo();
    public abstract virtual void Redo();
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Native.UnboundColumnTypeHelper : object {
    private static ConcurrentDictionary`2<string, Type> dataTypesResolverCache;
    private static UnboundColumnTypeHelper();
    public static UnboundColumnType TypeToUnboundColumnType(Type columnType);
    public static Type UnboundColumnTypeToType(UnboundColumnType columnType);
    public static Type ResolveUnboundDataType(string typeName);
}
public class DevExpress.Utils.Native.UndoManager : DisposableObject {
    private static int DefaultQueuePosition;
    private List`1<IHistoryItem> commands;
    private HashSet`1<IHistoryItem> lockedCommands;
    private int queuePosition;
    private CompositeHistoryItem transaction;
    private HistoryDisposingStrategy disposingStrategy;
    private bool allowSaveActions;
    [CompilerGeneratedAttribute]
private CommandExecutedEventHandler CommandExecuted;
    public bool CanUndo { get; }
    public bool CanRedo { get; }
    public bool AllowSaveActions { get; public set; }
    public bool get_CanUndo();
    public bool get_CanRedo();
    public bool get_AllowSaveActions();
    public void set_AllowSaveActions(bool value);
    [CompilerGeneratedAttribute]
public void add_CommandExecuted(CommandExecutedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CommandExecuted(CommandExecutedEventHandler value);
    private void OnCommandExecuted(IHistoryItem item, CommandAction commandAction);
    private void PushItem(IHistoryItem info);
    private void ClearCommandsCore();
    private void PushToTransaction(IHistoryItem info);
    private IHistoryItem GetUndoItem();
    private IHistoryItem GetRedoItem();
    protected virtual bool CanDisposeValue(HistoryItem historyItem, object value);
    protected virtual void Dispose(bool disposing);
    public bool CanDisposeOldValue(HistoryItem historyItem);
    public bool CanDisposeNewValue(HistoryItem historyItem);
    public void AddHistoryItem(HistoryItem item);
    public void Undo();
    public void Redo();
    public void BeginTransaction();
    public void CommitTransaction();
    public void CancelTransaction();
    public void ClearCommands();
}
public class DevExpress.Utils.NotificationCollection`1 : DXCollection`1<T> {
    private BatchUpdateHelper batchUpdateHelper;
    private bool changed;
    private EventHandler onBeginBatchUpdate;
    private EventHandler onEndBatchUpdate;
    private EventHandler onCancelBatchUpdate;
    private CollectionChangingEventHandler`1<T> onCollectionChanging;
    private CollectionChangedEventHandler`1<T> onCollectionChanged;
    protected bool NotifySet { get; }
    private BatchUpdateHelper DevExpress.Utils.IBatchUpdateable.BatchUpdateHelper { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsUpdateLocked { get; }
    protected NotificationCollection`1(DXCollectionUniquenessProviderType uniquenessProviderType);
    protected NotificationCollection`1(int capacity, DXCollectionUniquenessProviderType uniquenessProviderType);
    protected virtual bool get_NotifySet();
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    public sealed virtual void CancelUpdate();
    private sealed virtual override BatchUpdateHelper DevExpress.Utils.IBatchUpdateable.get_BatchUpdateHelper();
    public sealed virtual bool get_IsUpdateLocked();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnFirstBeginUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnBeginUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnEndUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnLastEndUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnCancelUpdate();
    private sealed virtual override void DevExpress.Utils.IBatchUpdateHandler.OnLastCancelUpdate();
    public void add_CollectionChanged(CollectionChangedEventHandler`1<T> value);
    public void remove_CollectionChanged(CollectionChangedEventHandler`1<T> value);
    public void add_CollectionChanging(CollectionChangingEventHandler`1<T> value);
    public void remove_CollectionChanging(CollectionChangingEventHandler`1<T> value);
    internal void add_BeginBatchUpdate(EventHandler value);
    internal void remove_BeginBatchUpdate(EventHandler value);
    internal void add_EndBatchUpdate(EventHandler value);
    internal void remove_EndBatchUpdate(EventHandler value);
    internal void add_CancelBatchUpdate(EventHandler value);
    internal void remove_CancelBatchUpdate(EventHandler value);
    protected internal virtual void OnCollectionChanged(CollectionChangedEventArgs`1<T> e);
    protected virtual void RaiseCollectionChanged(CollectionChangedEventArgs`1<T> e);
    protected internal virtual void OnCollectionChanging(CollectionChangingEventArgs`1<T> e);
    protected virtual void RaiseCollectionChanging(CollectionChangingEventArgs`1<T> e);
    protected internal void OnFirstBeginUpdate();
    protected virtual void OnLastEndUpdate();
    protected internal virtual void OnLastCancelUpdate();
    protected internal virtual void RaiseBeginBatchUpdate();
    protected internal virtual void RaiseEndBatchUpdate();
    protected internal virtual void RaiseCancelBatchUpdate();
    public virtual void AddRange(ICollection collection);
    protected virtual bool OnInsert(int index, T value);
    protected virtual void OnInsertComplete(int index, T value);
    protected virtual bool OnRemove(int index, T value);
    protected virtual void OnRemoveComplete(int index, T value);
    protected virtual bool OnClear();
    protected virtual void OnClearComplete();
    protected virtual void OnSetComplete(int index, T oldValue, T newValue);
}
public class DevExpress.Utils.NotificationCollectionChangedListener`1 : NotificationCollectionChangedListenerBase`1<T> {
    public NotificationCollectionChangedListener`1(NotificationCollection`1<T> collection);
    protected virtual void SubscribeObjectEvents(T obj);
    protected virtual void UnsubscribeObjectEvents(T obj);
    protected internal virtual void OnObjectChanged(object sender, EventArgs e);
    protected internal virtual void OnObjectChanging(object sender, CancelEventArgs e);
}
public abstract class DevExpress.Utils.NotificationCollectionChangedListenerBase`1 : object {
    private NotificationCollection`1<T> collection;
    private bool isDisposed;
    private EventHandler onChanged;
    private CancelEventHandler onChanging;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
internal bool IsDisposed { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal NotificationCollection`1<T> Collection { get; }
    protected NotificationCollectionChangedListenerBase`1(NotificationCollection`1<T> collection);
    internal bool get_IsDisposed();
    protected internal NotificationCollection`1<T> get_Collection();
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    protected internal virtual void RaiseChanged();
    public void add_Changing(CancelEventHandler value);
    public void remove_Changing(CancelEventHandler value);
    protected internal virtual bool RaiseChanging();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected internal virtual void SubscribeExistingObjectsEvents();
    protected internal virtual void UnsubscribeExistingObjectsEvents();
    protected internal virtual void SubscribeCollectionEvents();
    protected internal virtual void UnsubscribeCollectionEvents();
    protected internal virtual void OnCollectionChanging(object sender, CollectionChangingEventArgs`1<T> e);
    protected internal virtual void OnCollectionChanged(object sender, CollectionChangedEventArgs`1<T> e);
    protected internal virtual void OnCollectionBeginBatchUpdate(object sender, EventArgs e);
    protected internal virtual void OnCollectionCancelBatchUpdate(object sender, EventArgs e);
    protected internal virtual void OnCollectionEndBatchUpdate(object sender, EventArgs e);
    protected abstract virtual void SubscribeObjectEvents(T obj);
    protected abstract virtual void UnsubscribeObjectEvents(T obj);
}
public class DevExpress.Utils.OfficeMouseWheelEventArgs : PortableMouseEventArgs {
    [CompilerGeneratedAttribute]
private bool <IsHorizontal>k__BackingField;
    public bool IsHorizontal { get; public set; }
    public OfficeMouseWheelEventArgs(PortableMouseButtons buttons, int clicks, int x, int y, int delta);
    [CompilerGeneratedAttribute]
public bool get_IsHorizontal();
    [CompilerGeneratedAttribute]
public void set_IsHorizontal(bool value);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.OffsetListAdapter`1 : object {
    private IList`1<T> source;
    private int offset;
    private int count;
    private IList`1<T> List { get; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public OffsetListAdapter`1(IList`1<T> source, int offset, int count);
    private IList`1<T> get_List();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    private bool ContainsIndex(int index);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual void Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
}
public abstract class DevExpress.Utils.OnDemandList`1 : object {
    private T[] store;
    private IList`1<T> List { get; }
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    private int System.Collections.Generic.ICollection<T>.Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected OnDemandList`1(int itemsCount);
    private IList`1<T> get_List();
    public T GetRealValue(int index);
    private sealed virtual override int System.Collections.Generic.IList<T>.IndexOf(T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<T>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    protected abstract virtual T CreateItem(int listIndex);
}
public class DevExpress.Utils.OptionsColumnLayout : BaseOptions {
    private bool storeLayout;
    private bool storeAppearance;
    private bool storeAllOptions;
    private bool addNewColumns;
    private bool removeOldColumns;
    [DescriptionAttribute("Gets or sets whether the columns that exist in a layout when it is restored but that do not exist in the current control should be discarded or added to the control.")]
[CategoryAttribute("Columns")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.OptionsColumnLayout.RemoveOldColumns")]
[TypeConverterAttribute("DevExpress.Utils.Design.BooleanTypeConverter")]
[DefaultValueAttribute("True")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool RemoveOldColumns { get; public set; }
    [DescriptionAttribute("Gets or sets whether columns that exist in the current control but do not exist in a layout when it is restored should be retained.")]
[CategoryAttribute("Columns")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.OptionsColumnLayout.AddNewColumns")]
[TypeConverterAttribute("DevExpress.Utils.Design.BooleanTypeConverter")]
[DefaultValueAttribute("True")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool AddNewColumns { get; public set; }
    [DescriptionAttribute("Gets or sets whether the position, width and visibility of the columns and bands are stored when the layout is saved to storage and restored when the layout is restored from storage.")]
[CategoryAttribute("Options")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.OptionsColumnLayout.StoreLayout")]
[TypeConverterAttribute("DevExpress.Utils.Design.BooleanTypeConverter")]
[DefaultValueAttribute("True")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool StoreLayout { get; public set; }
    [DescriptionAttribute("Gets or sets whether the appearance settings of the columns and bands are also stored when the layout is saved to storage and restored when the layout is restored from storage.")]
[CategoryAttribute("Options")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.OptionsColumnLayout.StoreAppearance")]
[TypeConverterAttribute("DevExpress.Utils.Design.BooleanTypeConverter")]
[DefaultValueAttribute("False")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool StoreAppearance { get; public set; }
    [DescriptionAttribute("Gets or sets whether all the settings of a control’s columns/bands (except for the appearance settings) are stored when the layout is saved to storage and restored when the layout is restored from storage.")]
[CategoryAttribute("Options")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.OptionsColumnLayout.StoreAllOptions")]
[TypeConverterAttribute("DevExpress.Utils.Design.BooleanTypeConverter")]
[DefaultValueAttribute("False")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool StoreAllOptions { get; public set; }
    public bool get_RemoveOldColumns();
    public void set_RemoveOldColumns(bool value);
    public bool get_AddNewColumns();
    public void set_AddNewColumns(bool value);
    public bool get_StoreLayout();
    public void set_StoreLayout(bool value);
    public bool get_StoreAppearance();
    public void set_StoreAppearance(bool value);
    public bool get_StoreAllOptions();
    public void set_StoreAllOptions(bool value);
    public virtual void Assign(BaseOptions options);
    protected internal bool ShouldSerialize(IComponent owner);
}
public class DevExpress.Utils.OptionsLayoutBase : BaseOptions {
    [ThreadStaticAttribute]
private static OptionsLayoutBase fullLayout;
    internal Nullable`1<SizeF> storedLayoutScaleFactor;
    internal Nullable`1<SizeF> currentLayoutScaleFactor;
    private string layoutVersion;
    private int assignScaleFactorLocker;
    [DescriptionAttribute("Returns an OptionsLayoutBase object whose settings indicate that the full layout of the control should be stored to and restored from storage (a stream, xml file or system registry).")]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public static OptionsLayoutBase FullLayout { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("")]
[CategoryAttribute("Scale")]
[DefaultValueAttribute("")]
public Nullable`1<SizeF> StoredLayoutScaleFactor { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("")]
[CategoryAttribute("Scale")]
[DefaultValueAttribute("")]
public Nullable`1<SizeF> CurrentLayoutScaleFactor { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("")]
[CategoryAttribute("Scale")]
[DefaultValueAttribute("")]
public Nullable`1<SizeF> LayoutScaleFactor { get; }
    [DescriptionAttribute("Gets or sets the version of the layout.")]
[CategoryAttribute("Version")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public string LayoutVersion { get; public set; }
    public static OptionsLayoutBase get_FullLayout();
    public Nullable`1<SizeF> get_StoredLayoutScaleFactor();
    public Nullable`1<SizeF> get_CurrentLayoutScaleFactor();
    public Nullable`1<SizeF> get_LayoutScaleFactor();
    public string get_LayoutVersion();
    public void set_LayoutVersion(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeCore(IComponent owner);
    public virtual void Assign(BaseOptions source);
    internal void AssignLayoutScaleInfo(OptionsLayoutBase options);
    internal void ClearLayoutScaleInfo();
}
public class DevExpress.Utils.OptionsLayoutGrid : OptionsLayoutBase {
    private bool storeAppearance;
    private bool storeVisualOptions;
    private bool storeAllOptions;
    private bool storeDataSettings;
    private bool storeFormatRules;
    private OptionsColumnLayout columns;
    [DescriptionAttribute("Gets or sets whether the control’s appearance settings are also stored when the layout is saved to storage and restored when the layout is restored from storage.")]
[CategoryAttribute("Options")]
[DefaultValueAttribute("False")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool StoreAppearance { get; public set; }
    [DescriptionAttribute("Gets or sets whether MS Excel-style conditional formatting rules are stored when the layout is saved to storage and restored when the layout is restored from storage.")]
[CategoryAttribute("Options")]
[DefaultValueAttribute("False")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool StoreFormatRules { get; public set; }
    [DescriptionAttribute("Gets or sets whether the control’s visual options are stored when the layout is saved to storage and restored when the layout is restored from storage.")]
[CategoryAttribute("Options")]
[DefaultValueAttribute("True")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool StoreVisualOptions { get; public set; }
    [DescriptionAttribute("Gets or sets whether all the control’s settings (except for the appearance settings and format rules) are stored when the layout is saved to storage and restored when the layout is restored from storage.")]
[CategoryAttribute("Options")]
[DefaultValueAttribute("False")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool StoreAllOptions { get; public set; }
    [DescriptionAttribute("Gets or sets whether the control’s grouping, sorting, filtering settings and summaries are stored when the layout is saved to storage and restored when the layout is restored from storage.")]
[CategoryAttribute("Options")]
[DefaultValueAttribute("True")]
[XtraSerializableProperty]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public bool StoreDataSettings { get; public set; }
    [DescriptionAttribute("Contains options that specify how the columns’ and bands’ settings are stored to and restored from storage (a stream, xml file or system registry).")]
[CategoryAttribute("Columns")]
[DesignerSerializationVisibilityAttribute("2")]
[XtraSerializableProperty("5", "2")]
[NotifyParentPropertyAttribute("True")]
[AutoFormatDisableAttribute]
public OptionsColumnLayout Columns { get; }
    public bool get_StoreAppearance();
    public void set_StoreAppearance(bool value);
    public bool get_StoreFormatRules();
    public void set_StoreFormatRules(bool value);
    public bool get_StoreVisualOptions();
    public void set_StoreVisualOptions(bool value);
    public bool get_StoreAllOptions();
    public void set_StoreAllOptions(bool value);
    public bool get_StoreDataSettings();
    public void set_StoreDataSettings(bool value);
    private bool ShouldSerializeColumns();
    public OptionsColumnLayout get_Columns();
    public virtual void Assign(BaseOptions options);
    public virtual void Reset();
    protected virtual OptionsColumnLayout CreateOptionsColumn();
}
public abstract class DevExpress.Utils.OptionsSerializerBase : object {
    protected string ProjectName { get; }
    protected BindingFlags SearchedProperties { get; }
    private bool TryGetSerializedValue(object value, Object& serialized);
    protected abstract virtual string get_ProjectName();
    protected virtual BindingFlags get_SearchedProperties();
    internal abstract virtual object SerializeCore(object dto);
    internal abstract virtual bool ShouldSerialize(object dto);
    protected virtual void PrepareOptions();
    internal Dictionary`2<string, object> SerializeAsObject(object dto, Dictionary`2<string, string> clientToServerApiMap);
}
[ComVisibleAttribute("True")]
[TypeConverterAttribute("DevExpress.Utils.PointFloatConverter")]
public class DevExpress.Utils.PointFloat : ValueType {
    public static PointFloat Empty;
    private float x;
    private float y;
    [BrowsableAttribute("False")]
public bool IsEmpty { get; }
    [TypeConverterAttribute("DevExpress.Utils.Design.SingleTypeConverter")]
[DXDisplayNameIgnoreAttribute]
public float X { get; public set; }
    [TypeConverterAttribute("DevExpress.Utils.Design.SingleTypeConverter")]
[DXDisplayNameIgnoreAttribute]
public float Y { get; public set; }
    public PointFloat(float x, float y);
    public PointFloat(PointF pt);
    private static PointFloat();
    public bool get_IsEmpty();
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public static PointFloat op_Addition(PointFloat pt, Size sz);
    public static PointFloat op_Subtraction(PointFloat pt, Size sz);
    public static bool op_Equality(PointFloat left, PointFloat right);
    public static bool op_Inequality(PointFloat left, PointFloat right);
    public static PointF op_Implicit(PointFloat point);
    public sealed virtual bool Equals(PointFloat point);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Offset(float dx, float dy);
}
public class DevExpress.Utils.PointFloatConverter : TypeConverter {
    private static Type SR { get; }
    private static Type get_SR();
    private static string SRGetString(string str);
    private static string SRGetString(string str, Object[] args);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    protected virtual TypeConverter GetSingleConverter();
}
public class DevExpress.Utils.PointFloatConverterForDisplay : PointFloatConverter {
    protected virtual TypeConverter GetSingleConverter();
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
}
public abstract class DevExpress.Utils.PresenterBase`3 : object {
    private TView view;
    private TModel model;
    private bool success;
    protected TModel Model { get; }
    protected TView View { get; }
    protected PresenterBase`3(TModel model, TView view);
    protected TModel get_Model();
    protected TView get_View();
    public void InitView();
    protected virtual void OnCancel(object s, EventArgs e);
    protected virtual void OnOk(object s, EventArgs e);
    private void StopView();
    public virtual bool Run();
    protected abstract virtual void InitViewCore();
    protected abstract virtual void Commit();
    protected virtual string Validate();
}
public class DevExpress.Utils.PropertyAllowEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private OptionsLayoutBase <OptionsLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultBoolean <Allow>k__BackingField;
    public OptionsLayoutBase OptionsLayout { get; }
    public object Owner { get; }
    public string PropertyName { get; }
    public DefaultBoolean Allow { get; public set; }
    public PropertyAllowEventArgs(OptionsLayoutBase optionsLayout, object owner, string propertyName);
    [CompilerGeneratedAttribute]
public OptionsLayoutBase get_OptionsLayout();
    [CompilerGeneratedAttribute]
public object get_Owner();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public DefaultBoolean get_Allow();
    [CompilerGeneratedAttribute]
public void set_Allow(DefaultBoolean value);
}
public class DevExpress.Utils.PublicWeakEventHandler`2 : WeakEventHandler`2<TArgs, TBaseHandler> {
    protected static IWeakEventHandlerStrategy`1<TArgs> CreateStrategy();
    public static PublicWeakEventHandler`2<TArgs, TBaseHandler> op_Addition(PublicWeakEventHandler`2<TArgs, TBaseHandler> target, Delegate value);
    public static PublicWeakEventHandler`2<TArgs, TBaseHandler> op_Subtraction(PublicWeakEventHandler`2<TArgs, TBaseHandler> target, Delegate value);
}
public static class DevExpress.Utils.QuarterFormatter : object {
    private static int monthsInQuarter;
    private static char arabicQuarterSymbol;
    private static char romanQuarterSymbol;
    private static char singleQuote;
    private static char doubleQuote;
    private static char backSlash;
    private static char percent;
    private static String[] arabicDigits;
    private static String[] romanDigits;
    private static Char[] specialChars;
    private static QuarterFormatter();
    private static string MakeQuarterString(char quarterSymbol, int digitIndex, int counter, string predefinedFormat);
    private static bool IsQuarterSymbol(char c);
    public static string FormatQuarter(int quarter, string format, string predefinedFormat);
    public static string FormatDateTime(int quarterNumber, string formatString, string quarterFormat);
    public static string FormatDateTime(DateTime dateTime, string formatString, string quarterFormat);
}
public static class DevExpress.Utils.ResourceStreamHelper : object {
    public static Stream GetStream(string name, Type type);
    public static Stream GetStream(string name, Assembly asm);
    public static Byte[] GetBytes(string name, Assembly asm);
    public static string GetResourceName(Type baseType, string name);
}
[DebuggerDisplayAttribute("P={Position} (F={F}; G={G}; H={H})")]
public class DevExpress.Utils.Routing.AStarNode`1 : object {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private double <F>k__BackingField;
    [CompilerGeneratedAttribute]
private double <G>k__BackingField;
    public double H;
    [CompilerGeneratedAttribute]
private AStarNode`1<T> <Parent>k__BackingField;
    private IEqualityComparer`1<T> Comparer { get; }
    public T Position { get; }
    public double F { get; private set; }
    public double G { get; private set; }
    public AStarNode`1<T> Parent { get; private set; }
    public AStarNode`1(T position, double h, IEqualityComparer`1<T> comparer);
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> get_Comparer();
    [CompilerGeneratedAttribute]
public T get_Position();
    [CompilerGeneratedAttribute]
public double get_F();
    [CompilerGeneratedAttribute]
private void set_F(double value);
    [CompilerGeneratedAttribute]
public double get_G();
    [CompilerGeneratedAttribute]
private void set_G(double value);
    [CompilerGeneratedAttribute]
public AStarNode`1<T> get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(AStarNode`1<T> value);
    public void UpdateParent(AStarNode`1<T> parent, double g);
    public IEnumerable`1<T> GetPath();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Utils.Routing.SortedDictionaryOfQueues`2 : object {
    private Func`2<T, TKey> getKey;
    private static EqualityComparer`1<T> ItemComparer;
    private SortedDictionary`2<TKey, Queue`1<T>> sortedDictionary;
    public SortedDictionaryOfQueues`2(Func`2<T, TKey> getKey, IComparer`1<TKey> keyComparer);
    private static SortedDictionaryOfQueues`2();
    public void Enqueue(T item);
    public void Remove(T item);
    public T DequeueMin();
}
public static class DevExpress.Utils.SafeBinaryFormatter : object {
    private static IFormatter instanceCore;
    [ThreadStaticAttribute]
private static int binaryFormatterDisabledCounter;
    private static int binaryFormatterDisabledCounterGlobal;
    [ThreadStaticAttribute]
private static int dxBinaryFormatterForcedCounter;
    private static int dxBinaryFormatterForcedCounterGlobal;
    internal static Type BinaryType;
    private static IFormatter Instance { get; }
    private static bool IsBinaryFormatterDisabled { get; }
    [EditorBrowsableAttribute("1")]
internal static bool IsDXBinaryFormatterForced { get; }
    private static SafeBinaryFormatter();
    private static IFormatter get_Instance();
    [DXHelpExcludeAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static TFormatter Configure(TFormatter formatter);
    [EditorBrowsableAttribute("2")]
public static void Reset();
    private static bool get_IsBinaryFormatterDisabled();
    public static IDisposable DisableBinaryFormatter(bool global);
    internal static bool get_IsDXBinaryFormatterForced();
    [EditorBrowsableAttribute("2")]
public static IDisposable ForcedDXBinaryFormatter(bool global);
    public static void Serialize(Stream stream, object graph);
    public static Byte[] Serialize(object graph);
    public static object Deserialize(Stream stream);
    public static object Deserialize(Byte[] bytes);
    public static object Deserialize(string base64string);
    private static object DeserializeWithSecurityExceptionUnwrap(Stream stream);
    internal static bool CanConvertTo(ITypeDescriptorContext context, Type destinationType, Func`3<ITypeDescriptorContext, Type, bool> baseCanConvertTo, bool allowBinaryType);
    internal static bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType, Func`3<ITypeDescriptorContext, Type, bool> baseCanConvertFrom, bool allowBinaryType);
    internal static object ConvertTo(object value, Type destinationType, Func`2<object, object> convertToFallback, bool allowBinaryType);
    internal static object ConvertFrom(object value, Func`2<object, object> convertFromFallback, bool allowBinaryType);
}
[ExtensionAttribute]
public static class DevExpress.Utils.SafeXml : object {
    private static DtdProcessing XxeSafeDtdProcessing;
    private static XmlResolver SsrfSafeXmlResolver;
    public static XmlReader CreateReader(Stream stream, Action`1<XmlReaderSettings> settings);
    public static XmlReader CreateReader(TextReader textReader, Action`1<XmlReaderSettings> settings);
    [EditorBrowsableAttribute("1")]
public static XmlReader CreateReader(XmlReader xmlReader, Action`1<XmlReaderSettings> settings);
    public static XmlReader CreateReader(string url, Action`1<XmlReaderSettings> settings);
    public static XmlReader CreateReader(Stream stream);
    public static XmlReader CreateReader(TextReader textReader);
    [EditorBrowsableAttribute("1")]
public static XmlReader CreateReader(XmlReader xmlReader);
    public static XmlReader CreateReader(string url);
    public static XmlReaderSettings CreateReaderSettings(Action`1<XmlReaderSettings> settings);
    public static XmlTextReader CreateTextReader(Stream stream);
    public static XmlTextReader CreateTextReader(TextReader textReader);
    public static XmlTextReader CreateTextReader(string url);
    [ExtensionAttribute]
public static XmlTextReader EnsureTextReader(XmlTextReader reader);
    [ExtensionAttribute]
private static XmlTextReader EnsureTextReaderForXmlSerializer(XmlTextReader reader);
    public static XmlDocument CreateDocument();
    public static XmlDocument CreateDocument(Stream stream, Action`1<XmlReaderSettings> settings);
    [EditorBrowsableAttribute("1")]
public static XmlDocument CreateDocument(XmlReader reader, Action`1<XmlReaderSettings> settings);
    public static XmlDocument CreateDocument(string xmlString);
    public static TDocument CreateDocument(Func`1<TDocument> createDocument, string xml);
    public static TDocument CreateDocument(Func`1<TDocument> createDocument, Stream stream, Action`1<XmlReaderSettings> settings);
    public static XDocument CreateXDocument(Stream stream, Action`1<XmlReaderSettings> settings);
    public static XDocument CreateXDocument(string xmlString, Action`1<XmlReaderSettings> settings);
    [EditorBrowsableAttribute("1")]
public static XDocument CreateXDocument(XmlReader reader, Action`1<XmlReaderSettings> settings);
    public static XElement CreateXElement(Stream stream, Action`1<XmlReaderSettings> settings);
    public static XElement CreateXElement(string xmlString, Action`1<XmlReaderSettings> settings);
    [EditorBrowsableAttribute("1")]
public static XElement CreateXElement(XmlReader reader, Action`1<XmlReaderSettings> settings);
    private static TDocument CreateDocumentCore(Func`1<TDocument> createDocument, XmlResolver xmlResolver);
    private static TDocument LoadXmlCore(TDocument document, string xmlString);
    private static XmlReader XmlDocument_SetupReader(XmlNameTable documentNameTable, string xmlString);
    public static T Deserialize(string xmlString, Type[] extraTypes);
    public static T Deserialize(Stream stream, Type[] extraTypes);
    public static T Deserialize(TextReader textReader, Type[] extraTypes);
    public static object Deserialize(string xmlString, Type type, Type[] extraTypes);
    public static object Deserialize(Stream stream, Type type, Type[] extraTypes);
    [EditorBrowsableAttribute("1")]
public static object Deserialize(XmlTextReader xmlTextReader, Type type, Type[] extraTypes);
    [EditorBrowsableAttribute("1")]
public static object Deserialize(XmlReader reader, Type type, Type[] extraTypes);
    public static void Serialize(Stream stream, object root, Type[] extraTypes);
    public static void Serialize(TextWriter textWriter, object root, Type[] extraTypes);
    public static void Serialize(XmlWriter xmlWriter, object root, Type[] extraTypes, XmlSerializerNamespaces namespaces);
    public static void Serialize(Stream stream, object root, Type type, Type[] extraTypes);
    [EditorBrowsableAttribute("1")]
public static void Serialize(XmlWriter xmlWriter, object root, Type type, Type[] extraTypes, XmlSerializerNamespaces namespaces);
    [EditorBrowsableAttribute("1")]
public static void Serialize(TextWriter textWriter, object root, Type type, Type[] extraTypes);
    private static XmlSerializer CreateSerializerCore(Type type, Type[] extraTypes);
    private static void SerializeCore(Stream stream, object root, XmlSerializer serializer);
    private static void SerializeCore(TextWriter writer, object root, XmlSerializer serializer);
    private static void SerializeCore(XmlWriter writer, object root, XmlSerializer serializer, XmlSerializerNamespaces namespaces);
    private static object DeserializeCore(XmlSerializer serializer, XmlReader xmlTextReader);
}
[DataContractAttribute]
public abstract class DevExpress.Utils.SerializableSettingsBase : object {
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    internal abstract virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.Utils.Serializing.BinaryXtraSerializer : XtraSerializer {
    public bool CanUseStream { get; }
    public virtual bool get_CanUseStream();
    protected virtual bool Serialize(Stream stream, IXtraPropertyCollection props, string appName);
    protected virtual bool Serialize(string path, IXtraPropertyCollection props, string appName);
    protected virtual IXtraPropertyCollection Deserialize(Stream stream, string appName, IList objects);
    protected virtual IXtraPropertyCollection Deserialize(string path, string appName, IList objects);
    private TypedBinaryReaderExWithStringTable CreateTypedReader(BinaryReader reader);
    private TypedBinaryWriterExWithStringTable CreateTypedWriter(BinaryWriter writer);
    private IXtraPropertyCollection DeserializeCore(Stream stream, string appName);
    private bool SerializeCore(Stream stream, IXtraPropertyCollection props, string appName);
    private void SerializeLevel(TypedBinaryWriterExWithStringTable typedWriter, IXtraPropertyCollection props);
    private IXtraPropertyCollection DeserializeLevel(TypedBinaryReaderExWithStringTable typedReader);
    private void SerializeProperty(TypedBinaryWriterExWithStringTable typedWriter, XtraPropertyInfo property);
    private XtraPropertyInfo DeserializeProperty(TypedBinaryReaderExWithStringTable typedReader);
}
public class DevExpress.Utils.Serializing.BooleanContextAttribute : XmlContextItem {
    public BooleanContextAttribute(string name, bool val, bool defaultValue);
    public virtual string ValueToString();
}
public abstract class DevExpress.Utils.Serializing.CollectionXmlPersistenceHelper : XmlPersistenceHelper {
    private ICollection collection;
    protected ICollection Collection { get; }
    protected string XmlCollectionName { get; }
    protected CollectionXmlPersistenceHelper(ICollection collection);
    protected ICollection get_Collection();
    protected abstract virtual string get_XmlCollectionName();
    protected abstract virtual IXmlContextItem CreateXmlContextItem(object obj);
    protected abstract virtual ObjectCollectionXmlLoader CreateObjectCollectionXmlLoader(XmlNode root);
    protected virtual IXmlContext GetXmlContext();
    protected virtual IXmlContext CreateXmlContext();
    protected virtual void InitXmlContext(IXmlContext context);
    protected virtual void AddItemToContext(object item, IXmlContext context);
    public virtual ObjectXmlLoader CreateObjectXmlLoader(XmlNode root);
}
public class DevExpress.Utils.Serializing.ColorContextAttribute : XmlContextItem {
    public ColorContextAttribute(string name, Color val, Color defaultValue);
    public virtual string ValueToString();
}
public abstract class DevExpress.Utils.Serializing.CompactXmlSerializer : XmlXtraSerializer {
    protected string Version { get; }
    protected bool WriteNullValues { get; }
    protected XtraPropertyInfo CreateXmlPropertyInfo(string name, Type propertyType, object val, bool isKey);
    protected void ReadAttributes(XmlReader reader, XtraPropertyInfo info, bool skipZeroDepth);
    private static Type TryReadAttributeType(XmlReader reader, ObjectConverterImplementation converter);
    protected XtraPropertyInfo ReadInfoCore(XmlReader reader, bool skipZeroDepth);
    protected XtraPropertyInfo ReadInfoCore(XmlReader tr);
    protected virtual void WriteStartDocument(XmlWriter tw);
    protected virtual void WriteApplicationAttribute(string appName, XmlWriter tw);
    protected virtual string get_Version();
    protected virtual void SerializeLevelCore(XmlWriter tw, IXtraPropertyCollection props);
    protected void SerializeContentProperty(XmlWriter tw, XtraPropertyInfo p);
    protected virtual void SerializeContentPropertyCore(XmlWriter tw, XtraPropertyInfo p);
    protected void SerializeAttributeProperty(XmlWriter xmlWriter, XtraPropertyInfo pInfo);
    private static bool IsValidName(string name);
    protected virtual bool get_WriteNullValues();
    protected abstract virtual string ObjToString(object val);
}
internal class DevExpress.Utils.Serializing.DataSerializerProxy : object {
    private IObjectDataSerializer serializer;
    public DataSerializerProxy(IObjectDataSerializer serializer);
    public sealed virtual bool CanSerialize(object data, object extensionProvider);
    public sealed virtual string Serialize(object data, object extensionProvider);
    public sealed virtual bool CanDeserialize(string value, string typeName, object extensionProvider);
    public sealed virtual object Deserialize(string value, string typeName, object extensionProvider);
}
public class DevExpress.Utils.Serializing.DateTimeContextAttribute : XmlContextItem {
    public DateTimeContextAttribute(string name, DateTime val, DateTime defaultValue);
    public virtual string ValueToString();
}
public enum DevExpress.Utils.Serializing.DXTypeCode : Enum {
    public int value__;
    public static DXTypeCode Null;
    public static DXTypeCode Object;
    public static DXTypeCode DBNull;
    public static DXTypeCode Boolean;
    public static DXTypeCode Char;
    public static DXTypeCode SByte;
    public static DXTypeCode Byte;
    public static DXTypeCode Int16;
    public static DXTypeCode UInt16;
    public static DXTypeCode Int32;
    public static DXTypeCode UInt32;
    public static DXTypeCode Int64;
    public static DXTypeCode UInt64;
    public static DXTypeCode Single;
    public static DXTypeCode Double;
    public static DXTypeCode Decimal;
    public static DXTypeCode DateTime;
    public static DXTypeCode TimeSpan;
    public static DXTypeCode String;
    public static DXTypeCode Guid;
    public static DXTypeCode ByteArray;
    public static DXTypeCode Enum;
}
public class DevExpress.Utils.Serializing.DXXmlNodeCollection : DXCollection`1<XmlNode> {
    protected virtual XmlNode GetItem(int index);
}
public class DevExpress.Utils.Serializing.GuidContextAttribute : XmlContextItem {
    public GuidContextAttribute(string name, Guid val, Guid defaultValue);
    public virtual string ValueToString();
}
public abstract class DevExpress.Utils.Serializing.Helpers.CollectionItemInfosEnumeratorBase : object {
    protected XtraPropertyInfo currentInfo;
    public object Current { get; }
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public virtual void Reset();
    protected abstract virtual bool MoveNextCore();
}
public abstract class DevExpress.Utils.Serializing.Helpers.CollectionItemSerializationStrategy : object {
    private SerializeHelper helper;
    private ICollection collection;
    private object owner;
    private MethodInfo mi;
    protected internal SerializeHelper Helper { get; }
    protected internal ICollection Collection { get; }
    protected internal object Owner { get; }
    protected internal MethodInfo ShouldSerializeCollectionItemMethodInfo { get; }
    protected CollectionItemSerializationStrategy(SerializeHelper helper, string name, ICollection collection, object owner);
    protected internal SerializeHelper get_Helper();
    protected internal ICollection get_Collection();
    protected internal object get_Owner();
    protected internal MethodInfo get_ShouldSerializeCollectionItemMethodInfo();
    public virtual XtraPropertyInfo SerializeCollectionItem(int index, object item);
    protected internal virtual XtraPropertyInfo CreateItemPropertyInfo(int index);
    protected internal virtual XtraPropertyInfo CreateItemPropertyInfoCore(int index, bool isSimpleCollection);
    protected internal virtual bool ShouldSerializeCollectionItem(XtraPropertyInfo itemProperty, object item);
    protected internal abstract virtual bool AssignItemPropertyValue(XtraPropertyInfo itemProperty, object item);
}
public class DevExpress.Utils.Serializing.Helpers.CollectionItemSerializationStrategyCollection : CollectionItemSerializationStrategy {
    private XtraSerializationFlags parentFlags;
    private OptionsLayoutBase options;
    private XtraSerializableProperty attr;
    private string name;
    protected internal XtraSerializationFlags ParentFlags { get; }
    protected internal OptionsLayoutBase Options { get; }
    public CollectionItemSerializationStrategyCollection(SerializeHelper helper, string name, ICollection collection, object owner, XtraSerializationFlags parentFlags, OptionsLayoutBase options, XtraSerializableProperty attr);
    protected internal XtraSerializationFlags get_ParentFlags();
    protected internal OptionsLayoutBase get_Options();
    protected internal virtual bool AssignItemPropertyValue(XtraPropertyInfo itemProperty, object item);
}
public class DevExpress.Utils.Serializing.Helpers.CollectionItemSerializationStrategyEmpty : CollectionItemSerializationStrategy {
    public CollectionItemSerializationStrategyEmpty(SerializeHelper helper, string name, ICollection collection, object owner);
    protected internal virtual bool AssignItemPropertyValue(XtraPropertyInfo itemProperty, object item);
}
public class DevExpress.Utils.Serializing.Helpers.CollectionItemSerializationStrategyName : CollectionItemSerializationStrategy {
    public CollectionItemSerializationStrategyName(SerializeHelper helper, string name, ICollection collection, object owner);
    protected internal virtual bool AssignItemPropertyValue(XtraPropertyInfo itemProperty, object item);
    protected internal virtual object ExtractItemName(object item);
    protected internal virtual XtraPropertyInfo CreateItemPropertyInfo(int index);
}
public class DevExpress.Utils.Serializing.Helpers.CollectionItemSerializationStrategySimple : CollectionItemSerializationStrategy {
    public CollectionItemSerializationStrategySimple(SerializeHelper helper, string name, ICollection collection, object owner);
    protected internal virtual XtraPropertyInfo CreateItemPropertyInfo(int index);
    protected internal virtual bool AssignItemPropertyValue(XtraPropertyInfo itemProperty, object item);
    private void CheckStoreItemType(XtraPropertyInfo itemProperty, object item);
}
internal class DevExpress.Utils.Serializing.Helpers.CustomObjectConverterImplementation : ObjectConverterImplementation {
    private ICustomObjectConverter customConverter;
    private CustomObjectConverters customConverters;
    protected ObjectConverters Converters { get; }
    public CustomObjectConverterImplementation(ICustomObjectConverter customConverter);
    protected virtual ObjectConverters get_Converters();
}
internal class DevExpress.Utils.Serializing.Helpers.CustomObjectConverters : ObjectConverters {
    private ICustomObjectConverter customConverter;
    protected ICustomObjectConverter CustomConverter { get; }
    public CustomObjectConverters(ICustomObjectConverter customConverter);
    protected ICustomObjectConverter get_CustomConverter();
    public virtual bool IsConverterExists(Type type);
    public IOneTypeObjectConverter GetCustomConverter(Type type);
    public virtual IOneTypeObjectConverter GetConverter(Type type);
}
public class DevExpress.Utils.Serializing.Helpers.DefaultPropertyDescriptorComparer : object {
    public static IComparer`1<SerializablePropertyDescriptorPair> Instance;
    private static DefaultPropertyDescriptorComparer();
    public sealed virtual int Compare(SerializablePropertyDescriptorPair x, SerializablePropertyDescriptorPair y);
}
public abstract class DevExpress.Utils.Serializing.Helpers.DeflateStreamsArchiveManagerBase : object {
    protected static int Int32Size;
    protected static string Prefix;
    public static Byte[] PrefixBytes;
    public static Byte[] VersionBytes;
    protected Stream baseStream;
    private bool streamAllocated;
    protected int fStreamCount;
    protected Int32[] offsets;
    public int StreamCount { get; }
    protected DeflateStreamsArchiveManagerBase(Stream baseStream);
    private static DeflateStreamsArchiveManagerBase();
    protected static void ThrowInvalidOperationException();
    public int get_StreamCount();
    protected void StreamClosed();
    protected Stream CreateDeflateStream(CompressionMode mode);
    protected Stream CreateRawStream();
    protected void CheckStreamIndex(int streamIndex);
}
public class DevExpress.Utils.Serializing.Helpers.DeflateStreamsArchiveReader : DeflateStreamsArchiveManagerBase {
    public DeflateStreamsArchiveReader(Stream baseStream);
    public static bool IsValidStream(Stream stream);
    private static void ReadBytes(Stream stream, Byte[] buffer);
    private static bool ByteArraysEqual(Byte[] array1, Byte[] array2);
    public Stream GetStream(int streamIndex);
    public Stream GetRawStream(int streamIndex);
    private void ReadBytes(Byte[] buffer);
    private int ReadInt32();
    private Int32[] ReadInt32Array(int count);
}
public class DevExpress.Utils.Serializing.Helpers.DeflateStreamsArchiveWriter : DeflateStreamsArchiveManagerBase {
    private int offsetTablePosition;
    private int streamIndex;
    private int CurrentOffset { get; }
    public DeflateStreamsArchiveWriter(int streamCount, Stream baseStream);
    private int get_CurrentOffset();
    public Stream GetNextStream();
    public Stream GetNextRawStream();
    public void Close();
    private void WriteInt32(int number);
    private void WriteBytes(Byte[] bytes);
    private void SkipInt32(int count);
}
public class DevExpress.Utils.Serializing.Helpers.DeserializeExceptionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; private set; }
    public DeserializeExceptionEventArgs(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
public class DevExpress.Utils.Serializing.Helpers.DeserializeHelper : SerializeHelperBase {
    internal Exception exception;
    private bool resetProperties;
    private ObjectConverterImplementation objectConverterImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<DeserializeExceptionEventArgs> ExceptionOccurred;
    internal static float RoundingConstant;
    public ObjectConverterImplementation ObjectConverterImpl { get; public set; }
    protected Exception Exception { get; }
    protected bool ResetProperties { get; }
    public DeserializeHelper(object rootObject, bool resetProperties, SerializationContext context);
    private static DeserializeHelper();
    [CompilerGeneratedAttribute]
public void add_ExceptionOccurred(EventHandler`1<DeserializeExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExceptionOccurred(EventHandler`1<DeserializeExceptionEventArgs> value);
    private void SetDefaultObjectConverterImpl();
    public ObjectConverterImplementation get_ObjectConverterImpl();
    public void set_ObjectConverterImpl(ObjectConverterImplementation value);
    protected Exception get_Exception();
    protected bool get_ResetProperties();
    public void RemoveProperty(IList store, string propertyName);
    protected static void AddRange(IList`1<object> where, ICollection what);
    public virtual void DeserializeCollection(XtraSerializableProperty attr, XtraPropertyInfo root, object owner, object collection, OptionsLayoutBase options);
    private void DeserializeCollectionContent(XtraPropertyInfo root, object collection, OptionsLayoutBase options);
    protected void MergeCollection(XtraSerializableProperty attr, XtraPropertyInfo root, object owner, List`1<object> prevCollection, ICollection newCollection, OptionsLayoutBase options);
    private bool IsOldItem(XtraSerializableProperty attr, XtraPropertyInfo root, ICollection newCollection, object owner, object item);
    private bool IsNewItem(XtraSerializableProperty attr, XtraPropertyInfo root, ICollection newCollection, object owner, object item);
    private void RemoveItemFromCollection(XtraPropertyInfo root, XtraSetItemIndexEventArgs e);
    private bool ContainsCollectionItem(XtraSerializableProperty attr, ICollection prevCollection, object item, object owner);
    private object GetCollectionItemId(XtraSerializableProperty attr, object item, object owner);
    protected void DeserializeCollectionItem(XtraSerializableProperty attr, XtraPropertyInfo root, object owner, object collection, XtraPropertyInfo item, int index, OptionsLayoutBase options);
    private void InsertItemIntoCollection(XtraSerializableProperty attr, XtraPropertyInfo root, object collection, XtraPropertyInfo item, OptionsLayoutBase options, XtraSetItemIndexEventArgs setArgs, object collItem, bool newItem);
    private void InvokeSetIndexCollectionItem(string propertyName, XtraSetItemIndexEventArgs e);
    private void InvokeRemoveCollectionItem(string propertyName, XtraSetItemIndexEventArgs e);
    public void DeserializeObjects(IList objects, IXtraPropertyCollection store, OptionsLayoutBase options);
    internal static bool CallStartDeserializing(object obj, string layoutVersion);
    internal static void CallEndDeserializing(object obj, string layoutVersion);
    protected virtual string GetRootVersion();
    protected void DeserializeObject(object obj, IXtraPropertyCollection store, XtraSerializationFlags parentFlags, OptionsLayoutBase options);
    protected virtual bool RaiseStartDeserializing(object obj, string restoredLayoutVersion);
    protected virtual void RaiseEndDeserializing(object obj, string restoredLayoutVersion);
    public void DeserializeObject(object obj, IXtraPropertyCollection store, OptionsLayoutBase options);
    public virtual void AfterDeserializeRootObject();
    protected void DeserializeProperty(IXtraPropertyCollection store, object obj, SerializablePropertyDescriptorPair pair, XtraSerializationFlags parentFlags, OptionsLayoutBase options);
    private bool CheckIfNoAutoScale(XtraSerializableProperty attr, PropertyDescriptor prop, object val);
    private object ScaleValue(XtraSerializableProperty attr, PropertyDescriptor prop, object val, OptionsLayoutBase options);
    private Size ScaleSize(Size val, SizeF scale);
    private SizeF ScaleSizeF(SizeF val, SizeF scale);
    private Point ScalePoint(Point val, SizeF value);
    private double ScaleDouble(double val, float scale, bool scaleX);
    private float ScaleFloat(float val, float scale, bool scaleX);
    private int ScaleInt(int val, float scale, bool scaleX);
    internal static int ScaleHorizontal(int width, float scaleFactor);
    internal static int ScaleVertical(int height, float scaleFactor);
    public static int Round(float val);
    public static int Round(double val);
    private object ValueToObject(XtraPropertyInfo prop, Type type);
    private static int GetCacheIndex(XtraPropertyInfo cacheIndexPropetyInfo);
    private object TryGetCollectionItemFromCache(XtraSerializableProperty attr, string name, XtraPropertyInfo item);
    private bool TryGetValueFromCache(XtraSerializableProperty attr, IXtraPropertyCollection store, object obj, PropertyDescriptor prop);
    private object GetCachedValue(string propertyName, int index);
    private void RestoreNameProperty(PropertyDescriptor descriptor, object component, object val);
    public XtraPropertyInfo FindProperty(IXtraPropertyCollection props, string name);
    public static string GetLayoutVersion(IXtraPropertyCollection props);
    public static Nullable`1<SizeF> GetLayoutScaleFactor(IXtraPropertyCollection props);
    private static XtraPropertyInfo FindPropertyCore(IXtraPropertyCollection props, string name);
    private void RaiseExceptionOccurred(Exception exception);
}
public interface DevExpress.Utils.Serializing.Helpers.ICustomObjectConverter {
    public abstract virtual bool CanConvert(Type type);
    public abstract virtual string ToString(Type type, object obj);
    public abstract virtual object FromString(Type type, string str);
    public abstract virtual Type GetType(string typeName);
}
public interface DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter {
    public Type Type { get; }
    public abstract virtual Type get_Type();
    public abstract virtual string ToString(object obj);
    public abstract virtual object FromString(string str);
}
public interface DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter2 {
    public abstract virtual bool CanConvertFromString(string str);
}
public interface DevExpress.Utils.Serializing.Helpers.IOptionsLayoutProvider {
    public OptionsLayoutBase OptionsLayout { get; }
    public abstract virtual OptionsLayoutBase get_OptionsLayout();
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraCollectionDeserializationOptionsProvider {
    public bool RemoveOldItems { get; }
    public bool AddNewItems { get; }
    public abstract virtual bool get_RemoveOldItems();
    public abstract virtual bool get_AddNewItems();
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraNameSerializable {
    public string NameToSerialize { get; }
    public abstract virtual string get_NameToSerialize();
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraPartlyDeserializable {
    public abstract virtual void Deserialize(object rootObject, IXtraPropertyCollection properties);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Utils.Serializing.Helpers.IXtraPropertyCollection {
    public XtraPropertyInfo Item { get; }
    public XtraPropertyInfo Item { get; }
    public bool IsSinglePass { get; }
    public abstract virtual XtraPropertyInfo get_Item(string name);
    public abstract virtual XtraPropertyInfo get_Item(int index);
    public abstract virtual bool get_IsSinglePass();
    public abstract virtual void AddRange(ICollection props);
    public abstract virtual void Add(XtraPropertyInfo prop);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraRootSerializationObject {
    public abstract virtual SerializationInfo GetIndexByObject(string propertyName, object obj);
    public abstract virtual object GetObjectByIndex(string propertyName, int index);
    public abstract virtual void AfterSerialize();
}
[ComVisibleAttribute("False")]
public interface DevExpress.Utils.Serializing.Helpers.IXtraSerializable2 {
    public abstract virtual XtraPropertyInfo[] Serialize();
    public abstract virtual void Deserialize(IList props);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSerializableCollection {
    public abstract virtual void BeforeDeserialize(XtraItemEventArgs e);
    public abstract virtual bool Clear(XtraItemEventArgs e);
    public abstract virtual void AfterDeserialize(XtraItemEventArgs e);
    public abstract virtual bool SetItemIndex(XtraSetItemIndexEventArgs e);
    public abstract virtual object CreateItem(XtraItemEventArgs e);
    public abstract virtual void RemoveItem(XtraSetItemIndexEventArgs e);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSerializationIdProvider {
    public abstract virtual object GetSerializationId(XtraSerializableProperty property, object item);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSortableProperties {
    public abstract virtual bool ShouldSortProperties();
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSupportAfterDeserialize {
    public abstract virtual void AfterDeserialize(XtraItemEventArgs e);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSupportAllowProperty {
    public abstract virtual DefaultBoolean AllowProperty(OptionsLayoutBase options, object propertyOwner, string propertyName, bool isSerializing);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSupportCreateContentPropertyValue {
    public abstract virtual object Create(XtraItemEventArgs e);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSupportDeserializeCollection {
    public abstract virtual void BeforeDeserializeCollection(string propertyName, XtraItemEventArgs e);
    public abstract virtual bool ClearCollection(string propertyName, XtraItemEventArgs e);
    public abstract virtual void AfterDeserializeCollection(string propertyName, XtraItemEventArgs e);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSupportDeserializeCollectionItem {
    public abstract virtual void SetIndexCollectionItem(string propertyName, XtraSetItemIndexEventArgs e);
    public abstract virtual object CreateCollectionItem(string propertyName, XtraItemEventArgs e);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSupportDeserializeCollectionItemEx {
    public abstract virtual void RemoveCollectionItem(string propertyName, XtraSetItemIndexEventArgs e);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSupportForceInitialize {
    public abstract virtual void ForceInitialize();
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSupportShouldSerialize {
    public abstract virtual bool ShouldSerialize(string propertyName);
}
public interface DevExpress.Utils.Serializing.Helpers.IXtraSupportShouldSerializeCollectionItem {
    public abstract virtual bool ShouldSerializeCollectionItem(XtraItemEventArgs e);
}
public abstract class DevExpress.Utils.Serializing.Helpers.JSONConverterBase`2 : object {
    private static ConverterImpl<T, TImpl> instance;
    public ConverterImpl<T, TImpl> Converter { get; }
    private Type DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter.Type { get; }
    public ConverterImpl<T, TImpl> get_Converter();
    protected abstract virtual ConverterImpl<T, TImpl> CreateConverterImpl();
    private sealed virtual override Type DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter.get_Type();
    private sealed virtual override object DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter.FromString(string str);
    private sealed virtual override string DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter.ToString(object obj);
}
public class DevExpress.Utils.Serializing.Helpers.ObjectConverter : object {
    private static ObjectConverterImplementation instance;
    public static ObjectConverterImplementation Instance { get; }
    public static ObjectConverterImplementation get_Instance();
    public static string ObjectToString(object obj);
    public static object StringToObject(string str, Type type);
}
public class DevExpress.Utils.Serializing.Helpers.ObjectConverterImplementation : object {
    private ObjectConverters converters;
    private static Type[] structTypes;
    private static Char[] splitCHars;
    protected ITypeDescriptorContext Context { get; }
    protected ObjectConverters Converters { get; }
    private static ObjectConverterImplementation();
    protected virtual ITypeDescriptorContext get_Context();
    public void CopyConvertersTo(ObjectConverterImplementation ocImplTo);
    public Type ResolveType(string typeName);
    public void RegisterConverter(IOneTypeObjectConverter converter);
    public void UnregisterConverter(Type type);
    public bool CanConvertToString(Type type);
    public bool CanConvertFromString(Type type, string s);
    public string ConvertToString(object obj);
    public object ConvertFromString(Type type, string str);
    public IOneTypeObjectConverter GetConverter(Type type);
    protected virtual ObjectConverters get_Converters();
    private static TypeConverter GetToStringConverter(Type type);
    private static TypeConverter GetFromStringConverter(Type type);
    private static TypeConverter GetTypeConverterCore(Type type);
    public virtual string ObjectToString(object obj);
    protected internal virtual bool IsTypeSerializable(Type type);
    protected virtual string SerializeWithBinaryFormatter(object obj);
    protected virtual object DeserializeWithBinaryFormatter(string str);
    private bool IsSimpleType(Type type);
    private string ArrayToString(object obj);
    private string ArrayElementToString(object obj);
    private string PrimitiveToString(object obj);
    internal string GetNextPart(string str, Int32& index);
    internal int GetIndexOfDelimiter(string str, int index);
    private object StringToArray(string str, Type type, string primitiveOrTagPropertyName);
    private object StringToArrayElement(string part, string primitiveOrTagPropertyName);
    public virtual object StringToObject(string valueString, Type type, string primitiveOrTagPropertyName);
    protected virtual object EnsureConvertedObjectType(Type type, object obj, string value);
    internal object XtraStringToObject(string valueString);
    private static bool IsNullable(Type type);
    private static bool IsKnownStructure(Type type);
    internal string StructureToString(object obj, bool allowConvertableTypes, bool onlyPrimitiveValues);
    internal object StringToStructure(string str, Type type);
    private static object EnumToObject(string str, Type type);
}
public class DevExpress.Utils.Serializing.Helpers.ObjectConverters : object {
    private ConcurrentDictionary`2<Type, IOneTypeObjectConverter> converters;
    protected ConcurrentDictionary`2<Type, IOneTypeObjectConverter> Converters { get; }
    protected ConcurrentDictionary`2<Type, IOneTypeObjectConverter> get_Converters();
    public void RegisterConverter(IOneTypeObjectConverter converter);
    public void UnregisterConverter(Type type);
    public virtual bool IsConverterExists(Type type);
    public virtual IOneTypeObjectConverter GetConverter(Type type);
    public Type ResolveType(string typeName);
    public string ConvertToString(object obj);
    public object ConvertFromString(Type type, string str);
    public void CopyTo(ObjectConverters toConverters);
}
public class DevExpress.Utils.Serializing.Helpers.ObjectEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Object>k__BackingField;
    public object Object { get; private set; }
    public ObjectEventArgs(object obj);
    [CompilerGeneratedAttribute]
public object get_Object();
    [CompilerGeneratedAttribute]
private void set_Object(object value);
}
internal class DevExpress.Utils.Serializing.Helpers.OneTypeCustomObjectConverter : object {
    private Type type;
    private ICustomObjectConverter customObjectConverter;
    public Type Type { get; }
    public OneTypeCustomObjectConverter(Type type, ICustomObjectConverter customObjectConverter);
    public sealed virtual Type get_Type();
    public sealed virtual string ToString(object obj);
    public sealed virtual object FromString(string str);
}
public class DevExpress.Utils.Serializing.Helpers.PrintingSystemSerializationContext : SerializationContext {
    private Dictionary`2<Type, PropertyDescriptorCollection> propertyDescriptorCollections;
    protected internal virtual IList`1<SerializablePropertyDescriptorPair> SortProps(object obj, List`1<SerializablePropertyDescriptorPair> pairsList);
    protected IList`1<SerializablePropertyDescriptorPair> SortPropsCore(object obj, List`1<SerializablePropertyDescriptorPair> pairsList);
    protected internal virtual bool ShouldSerializeProperty(SerializeHelper helper, object obj, PropertyDescriptor prop, XtraSerializableProperty xtraSerializableProperty);
    protected internal virtual int GetCollectionItemsCount(XtraPropertyInfo root);
    protected internal virtual void DeserializeObjectsCore(DeserializeHelper helper, IList objects, IXtraPropertyCollection store, OptionsLayoutBase options);
    private static XtraObjectInfo FindObject(IList objects, string name);
    protected internal virtual IXtraPropertyCollection SerializeObjectsCore(SerializeHelper helper, IList objects, OptionsLayoutBase options);
    protected internal virtual PropertyDescriptorCollection GetProperties(object obj, IXtraPropertyCollection store);
    protected internal virtual bool InvokeShouldSerialize(SerializeHelper helper, object obj, PropertyDescriptor property);
    protected internal virtual MethodInfo GetShouldSerializeCollectionMethodInfo(SerializeHelper helper, string name, object owner);
    protected internal virtual bool ShouldSerializeCollectionItem(SerializeHelper helper, object owner, MethodInfo mi, XtraPropertyInfo itemProperty, object item, XtraItemEventArgs e);
    protected internal virtual object InvokeCreateContentPropertyValueMethod(DeserializeHelper helper, XtraItemEventArgs e, PropertyDescriptor prop);
    protected internal virtual void InvokeSetIndexCollectionItem(DeserializeHelper helper, string propertyName, XtraSetItemIndexEventArgs e);
    protected internal virtual object InvokeCreateCollectionItem(DeserializeHelper helper, string propertyName, XtraItemEventArgs e);
    protected internal virtual void InvokeAfterDeserialize(DeserializeHelper helper, object obj, XtraPropertyInfo bp, object value);
}
public class DevExpress.Utils.Serializing.Helpers.PropertyDescriptorComparer : object {
    private SerializationContext serializationContext;
    private object obj;
    public PropertyDescriptorComparer(SerializationContext serializationContext, object obj);
    protected virtual int CompareProperties(SerializablePropertyDescriptorPair x, SerializablePropertyDescriptorPair y);
    private sealed virtual override int System.Collections.Generic.IComparer<DevExpress.Utils.Serializing.Helpers.SerializablePropertyDescriptorPair>.Compare(SerializablePropertyDescriptorPair x, SerializablePropertyDescriptorPair y);
}
public class DevExpress.Utils.Serializing.Helpers.ReferenceDeserializationHelper : object {
    private Dictionary`2<string, object> referencedObjects;
    private List`1<Pair`2<object, XtraPropertyInfo>> referencedProperties;
    public void AddReferencedObject(object obj, string reference);
    public void ProcessProperties(object obj, IXtraPropertyCollection store);
    public void AssignReferencedObjects();
    public static string ParseReference(string value);
}
public class DevExpress.Utils.Serializing.Helpers.ReferenceSerializationHelper : object {
    private List`1<object> serializedObjects;
    private List`1<object> referencedObjects;
    private IDictionary`2<object, string> objectReferences;
    private int refID;
    [CompilerGeneratedAttribute]
private ShouldSerializeEventHandler ShouldSerializeObject;
    public List`1<object> ReferencedObjects { get; }
    public List`1<object> SerializedObjects { get; }
    public ReferenceSerializationHelper(IDictionary`2<object, string> objectReferences);
    public List`1<object> get_ReferencedObjects();
    public List`1<object> get_SerializedObjects();
    [CompilerGeneratedAttribute]
public void add_ShouldSerializeObject(ShouldSerializeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ShouldSerializeObject(ShouldSerializeEventHandler value);
    private bool OnShouldSerializeObject(object obj);
    public PropertyDescriptorCollection ProcessProperties(object obj, PropertyDescriptorCollection properties);
    public void OnPropertySerialize(object component, PropertyDescriptor property);
    public string GetReference(object obj);
    public bool IsSerializedObject(object obj);
}
public class DevExpress.Utils.Serializing.Helpers.SerializablePropertyDescriptorPair : object {
    private PropertyDescriptor descriptor;
    private XtraSerializableProperty attribute;
    public PropertyDescriptor Property { get; }
    public XtraSerializableProperty Attribute { get; }
    public SerializablePropertyDescriptorPair(PropertyDescriptor descriptor, XtraSerializableProperty attribute);
    public PropertyDescriptor get_Property();
    public XtraSerializableProperty get_Attribute();
    public virtual string ToString();
}
public class DevExpress.Utils.Serializing.Helpers.SerializationCollectionItemInfosEnumerator : CollectionItemInfosEnumeratorBase {
    private SerializeHelper helper;
    protected OptionsLayoutBase options;
    protected IEnumerator en;
    public SerializationCollectionItemInfosEnumerator(SerializeHelper helper, OptionsLayoutBase options, ICollection collection);
    public virtual void Reset();
    protected virtual bool MoveNextCore();
}
public class DevExpress.Utils.Serializing.Helpers.SerializationContext : object {
    private Dictionary`2<int, MethodInfo> methodInfos;
    private Dictionary`2<int, XtraSerializableProperty> xtraSerializablePropertyAttributes;
    private Dictionary`2<int, int> propertyIds;
    private Dictionary`2<int, bool> propertySerializationVisibilities;
    internal MethodInfo GetMethod(object obj, string name);
    internal virtual XtraSerializableProperty GetXtraSerializableProperty(object obj, PropertyDescriptor property);
    protected internal virtual IList`1<SerializablePropertyDescriptorPair> SortProps(object obj, List`1<SerializablePropertyDescriptorPair> pairsList);
    protected internal virtual bool ShouldSerializeProperty(SerializeHelper helper, object obj, PropertyDescriptor prop, XtraSerializableProperty xtraSerializableProperty);
    protected internal virtual int GetCollectionItemsCount(XtraPropertyInfo root);
    protected internal virtual void DeserializeObjectsCore(DeserializeHelper helper, IList objects, IXtraPropertyCollection store, OptionsLayoutBase options);
    private static IXtraPropertyCollection GetObjectProperties(XtraObjectInfo objectInfo, IXtraPropertyCollection store, int index);
    protected internal virtual IXtraPropertyCollection SerializeObjectsCore(SerializeHelper helper, IList objects, OptionsLayoutBase options);
    protected virtual void OnDeserializeObjectsObject(DeserializeHelper helper, object obj, IXtraPropertyCollection list, OptionsLayoutBase options);
    protected virtual IXtraPropertyCollection OnSerializeObjectsObject(SerializeHelper helper, object obj, OptionsLayoutBase options);
    protected internal virtual PropertyDescriptorCollection GetProperties(object obj);
    protected internal virtual PropertyDescriptorCollection GetProperties(object obj, IXtraPropertyCollection store);
    protected internal virtual bool InvokeShouldSerialize(SerializeHelper helper, object obj, PropertyDescriptor property);
    protected internal virtual MethodInfo GetShouldSerializeCollectionMethodInfo(SerializeHelper helper, string name, object owner);
    protected internal virtual bool ShouldSerializeCollectionItem(SerializeHelper helper, object owner, MethodInfo mi, XtraPropertyInfo itemProperty, object item, XtraItemEventArgs e);
    protected internal virtual object InvokeCreateContentPropertyValueMethod(DeserializeHelper helper, XtraItemEventArgs e, PropertyDescriptor prop);
    private IXtraSerializableCollection GetSerializableCollection(XtraItemEventArgs e);
    protected internal virtual void InvokeBeforeDeserializeCollection(XtraItemEventArgs e);
    protected internal virtual void InvokeAfterDeserializeCollection(XtraItemEventArgs e);
    protected internal virtual void InvokeClearCollection(DeserializeHelper helper, XtraItemEventArgs e);
    protected internal virtual void InvokeSetIndexCollectionItem(DeserializeHelper helper, string propertyName, XtraSetItemIndexEventArgs e);
    protected internal virtual void InvokeRemoveCollectionItem(DeserializeHelper helper, string propertyName, XtraSetItemIndexEventArgs e);
    protected internal virtual object InvokeCreateCollectionItem(DeserializeHelper helper, string propertyName, XtraItemEventArgs e);
    protected internal virtual object InvokeFindCollectionItem(DeserializeHelper helper, string propertyName, XtraItemEventArgs e);
    protected internal virtual void InvokeAfterDeserialize(DeserializeHelper helper, object obj, XtraPropertyInfo bp, object value);
    protected internal virtual void AfterDeserializeRootObject();
    protected internal virtual void CustomGetSerializableProperties(object obj, List`1<SerializablePropertyDescriptorPair> pairsList, PropertyDescriptorCollection props);
    protected internal virtual bool AllowProperty(SerializeHelperBase helper, object obj, PropertyDescriptor prop, OptionsLayoutBase options, bool isSerializing);
    protected int GetPropertyId(SerializeHelperBase helper, PropertyDescriptor property);
    protected internal virtual bool CanDeserializeProperty(object obj, PropertyDescriptor prop);
    protected internal virtual void ResetProperty(DeserializeHelper helper, object obj, PropertyDescriptor property, XtraSerializableProperty attr);
    protected internal virtual bool CustomDeserializeProperty(DeserializeHelper helper, object obj, PropertyDescriptor property, XtraPropertyInfo propertyInfo);
    internal bool IsDesignerSerializationVisible(PropertyDescriptor property);
}
[AttributeUsageAttribute("4")]
public class DevExpress.Utils.Serializing.Helpers.SerializationContextAttribute : Attribute {
    private Type serializationContextType;
    public SerializationContextAttribute(Type serializationContextType);
    public SerializationContext CreateSerializationContext();
}
public class DevExpress.Utils.Serializing.Helpers.SerializationDiffCalculator : object {
    public static XtraPropertyInfo[] CalculateDiff(XtraPropertyInfo[] prevSnapShot, XtraPropertyInfo[] currentSnapShot);
    public static XtraPropertyInfoCollection CalculateDiffCore(IXtraPropertyCollection prevSnapShot, IXtraPropertyCollection currentSnapShot);
    protected internal static XtraPropertyInfoCollection CalculatePropertyDiff(XtraPropertyInfo prev, XtraPropertyInfo current);
}
public class DevExpress.Utils.Serializing.Helpers.SerializationInfo : object {
    private int index;
    [CompilerGeneratedAttribute]
private bool <Serialized>k__BackingField;
    public int Index { get; }
    public bool Serialized { get; public set; }
    public SerializationInfo(int index);
    public int get_Index();
    [CompilerGeneratedAttribute]
public bool get_Serialized();
    [CompilerGeneratedAttribute]
public void set_Serialized(bool value);
}
internal static class DevExpress.Utils.Serializing.Helpers.SerializationStrings : object {
    public static string Reference;
    public static string ReferenceLink;
}
public class DevExpress.Utils.Serializing.Helpers.SerializationVirtualXtraPropertyCollection : VirtualXtraPropertyCollectionBase {
    protected SerializeHelper helper;
    protected OptionsLayoutBase options;
    protected ICollection collection;
    public int Count { get; }
    public SerializationVirtualXtraPropertyCollection(SerializeHelper helper, OptionsLayoutBase options, ICollection collection);
    public virtual int get_Count();
    protected virtual CollectionItemInfosEnumeratorBase CreateEnumerator();
}
public class DevExpress.Utils.Serializing.Helpers.SerializeHelper : SerializeHelperBase {
    public static int UndefinedObjectIndex;
    public static string IndexPropertyName;
    [CompilerGeneratedAttribute]
private ObjectConverterImplementation <ObjectConverterImpl>k__BackingField;
    public ObjectConverterImplementation ObjectConverterImpl { get; public set; }
    public SerializeHelper(object rootObject);
    public SerializeHelper(object rootObject, SerializationContext context);
    internal static void CallStartSerializing(object obj);
    internal static void CallEndSerializing(object obj);
    internal static void AddIndexPropertyInfo(XtraPropertyInfo propInfo, int index);
    [CompilerGeneratedAttribute]
public ObjectConverterImplementation get_ObjectConverterImpl();
    [CompilerGeneratedAttribute]
public void set_ObjectConverterImpl(ObjectConverterImplementation value);
    public IXtraPropertyCollection SerializeObjects(IList objects, OptionsLayoutBase options);
    public virtual IXtraPropertyCollection SerializeObject(object obj, OptionsLayoutBase options);
    public virtual IXtraPropertyCollection SerializeObject(object obj, XtraSerializationFlags parentFlags, OptionsLayoutBase options);
    protected virtual void RaiseStartSerializing(object obj);
    protected virtual void RaiseEndSerializing(object obj);
    protected internal virtual IXtraPropertyCollection SerializeObjectCore(object obj, XtraSerializationFlags parentFlags, OptionsLayoutBase options);
    protected internal virtual XtraPropertyInfoCollection SerializeLayoutVersion(OptionsLayoutBase options, object obj);
    protected internal virtual XtraPropertyInfo[] PerformManualSerialization(object obj);
    protected internal virtual bool CheckNeedSerialize(object obj, PropertyDescriptor prop, XtraSerializableProperty attr, XtraSerializationFlags parentFlags);
    internal bool ShouldSerializeValue(PropertyDescriptor property, XtraSerializableProperty attr, object instance);
    protected internal virtual void SerializeProperty(XtraPropertyInfoCollection store, object obj, SerializablePropertyDescriptorPair pair, XtraSerializationFlags parentFlags, OptionsLayoutBase options);
    private bool TrySerializePropertyValueCacheIndex(XtraSerializableProperty attr, PropertyDescriptor prop, IXtraPropertyCollection store, object obj, Int32& index);
    internal bool TrySerializeCollectionItemCacheIndex(string name, XtraSerializableProperty attr, IXtraPropertyCollection store, object value, Int32& index);
    private bool TrySerializeCacheIndex(string name, XtraSerializableProperty attr, IXtraPropertyCollection store, object value, Int32& index);
    protected virtual XtraPropertyInfo CreateXtraPropertyInfo(PropertyDescriptor prop, object value, bool isKey);
    protected internal virtual void SerializePropertyAsPrimitive(XtraPropertyInfoCollection store, object obj, PropertyDescriptor prop);
    protected internal virtual void SerializePropertyAsSimple(XtraPropertyInfoCollection store, object obj, PropertyDescriptor prop);
    protected internal virtual void SerializePropertyAsContent(XtraPropertyInfoCollection store, object obj, PropertyDescriptor prop, OptionsLayoutBase options, XtraSerializableProperty attr, int index);
    protected internal virtual XtraPropertyInfo GetSerializedPropertyAsContent(object obj, PropertyDescriptor prop, OptionsLayoutBase options, XtraSerializableProperty attr);
    protected internal virtual void SerializePropertyAsCollection(XtraPropertyInfoCollection store, object obj, PropertyDescriptor prop, OptionsLayoutBase options, XtraSerializableProperty attr);
    protected internal XtraPropertyInfo GetSerializedPropertyAsCollection(XtraPropertyInfo root, XtraSerializableProperty attr, object owner, XtraSerializationFlags parentFlags, OptionsLayoutBase options, ICollection list);
    private void SerializeCollectionContent(XtraPropertyInfo root, ICollection list, OptionsLayoutBase options);
    protected internal virtual void SerializeCollection(XtraSerializableProperty attr, string name, XtraPropertyInfoCollection props, object owner, XtraSerializationFlags parentFlags, OptionsLayoutBase options, ICollection list);
    protected internal virtual CollectionItemSerializationStrategy CreateCollectionItemSerializationStrategy(XtraSerializableProperty attr, string name, ICollection collection, object owner, XtraSerializationFlags parentFlags, OptionsLayoutBase options);
}
public abstract class DevExpress.Utils.Serializing.Helpers.SerializeHelperBase : object {
    protected internal static string LayoutPropertyName;
    protected internal static string LayoutScaleFactorPropertyName;
    private SerializationContext fContext;
    protected object rootObject;
    protected internal SerializationContext Context { get; protected internal set; }
    internal object RootObject { get; }
    internal IXtraRootSerializationObject RootSerializationObject { get; }
    protected SerializeHelperBase(object rootObject);
    protected SerializeHelperBase(object rootObject, SerializationContext context);
    protected internal SerializationContext get_Context();
    protected internal void set_Context(SerializationContext value);
    internal object get_RootObject();
    internal IXtraRootSerializationObject get_RootSerializationObject();
    protected virtual SerializationContext CreateContextFromRoot();
    protected virtual SerializationContext CreateSerializationContext();
    protected internal virtual IList`1<SerializablePropertyDescriptorPair> SortProps(object obj, List`1<SerializablePropertyDescriptorPair> pairsList);
    internal static IList CheckObjects(IList objects);
    protected internal int GetPropertyId(PropertyDescriptor property);
    protected internal virtual string GetMethodNameItem(string prop, string action);
    protected internal virtual string GetMethodName(string prop, string action);
    protected internal virtual MethodInfo GetMethod(object obj, string name);
    internal XtraSerializableProperty GetXtraSerializableProperty(object obj, PropertyDescriptor property);
    protected List`1<SerializablePropertyDescriptorPair> GetProperties(object obj);
    protected virtual List`1<SerializablePropertyDescriptorPair> GetProperties(object obj, IXtraPropertyCollection store);
    protected bool ShouldNotTryCache(XtraSerializableProperty attr);
    internal bool AllowProperty(object obj, PropertyDescriptor prop, XtraSerializableProperty attribute, OptionsLayoutBase options, bool isSerializing);
}
public class DevExpress.Utils.Serializing.Helpers.ShouldSerializeEventHandler : MulticastDelegate {
    public ShouldSerializeEventHandler(object object, IntPtr method);
    public virtual bool Invoke(object sender, ObjectEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectEventArgs args, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Serializing.Helpers.SimpleSerializer`1 : object {
    private Type DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter.Type { get; }
    private sealed virtual override Type DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter.get_Type();
    private sealed virtual override object DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter.FromString(string str);
    private sealed virtual override string DevExpress.Utils.Serializing.Helpers.IOneTypeObjectConverter.ToString(object obj);
}
public class DevExpress.Utils.Serializing.Helpers.SnapshotSerializeHelper : SerializeHelper {
    protected internal virtual bool CheckNeedSerialize(object obj, PropertyDescriptor prop, XtraSerializableProperty attr, XtraSerializationFlags parentFlags);
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Utils.Serializing.Helpers.VirtualXtraPropertyCollectionBase : object {
    private bool enumeratorCreated;
    public XtraPropertyInfo Item { get; }
    public XtraPropertyInfo Item { get; }
    public bool IsSinglePass { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public sealed virtual XtraPropertyInfo get_Item(string name);
    public sealed virtual XtraPropertyInfo get_Item(int index);
    public sealed virtual bool get_IsSinglePass();
    public sealed virtual void AddRange(ICollection props);
    public sealed virtual void Add(XtraPropertyInfo prop);
    public sealed virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    protected abstract virtual CollectionItemInfosEnumeratorBase CreateEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.Serializing.Helpers.XtraPropertyCollection : DXCollection`1<XtraPropertyInfo> {
    private Dictionary`2<string, XtraPropertyInfo> hash;
    public XtraPropertyInfo Item { get; }
    public bool IsSinglePass { get; }
    public XtraPropertyCollection(int capacity);
    protected virtual void OnInsertComplete(int index, XtraPropertyInfo value);
    protected virtual void OnRemoveComplete(int index, XtraPropertyInfo value);
    protected virtual void OnClearComplete();
    public sealed virtual XtraPropertyInfo get_Item(string name);
    public sealed virtual bool get_IsSinglePass();
    private sealed virtual override void DevExpress.Utils.Serializing.Helpers.IXtraPropertyCollection.Add(XtraPropertyInfo prop);
}
public class DevExpress.Utils.Serializing.Helpers.XtraPropertyInfo : object {
    private IXtraPropertyCollection childProperties;
    private ObjectConverterImplementation objectConverterImpl;
    private PropertyFlags flags;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    public object Value;
    public bool IsXtraObjectInfo { get; }
    protected internal bool IsObjectTypeProperty { get; }
    protected internal bool IsPrimitiveOrTagOrObjectTypeProperty { get; }
    protected internal bool HasPrimitivePropertyType { get; private set; }
    protected internal bool IsConvertible { get; private set; }
    protected ObjectConverterImplementation ObjectConverterImplementation { get; }
    public string Name { get; public set; }
    public Type PropertyType { get; public set; }
    public bool IsKey { get; }
    public bool IsNull { get; public set; }
    public IXtraPropertyCollection ChildProperties { get; protected set; }
    public bool HasChildren { get; }
    public XtraPropertyInfo(XtraObjectInfo info, IXtraPropertyCollection childProperties);
    public XtraPropertyInfo(XtraObjectInfo info);
    public XtraPropertyInfo(string name);
    public XtraPropertyInfo(string name, Type propertyType, object val);
    public XtraPropertyInfo(string name, Type propertyType, object val, bool isKey);
    public static string MakeXtraObjectInfoName(string name);
    public static bool ShouldSerializeTag(object tagValue, ObjectConverterImplementation objectConverter);
    protected internal static bool IsPrimitiveOrTag(XtraSerializableProperty property, PropertyDescriptor descriptor);
    protected internal XtraPropertyInfo MarkAsIsPrimitiveOrTag();
    protected internal static bool IsPrimitiveType(Type type);
    public static bool ShouldSerializePropertyType(XtraPropertyInfo pInfo, String& type, Func`2<object, string> getValueType);
    public static Type ResolveType(string typeName);
    protected virtual IXtraPropertyCollection CreateXtraPropertyCollection();
    public bool get_IsXtraObjectInfo();
    protected internal bool get_IsObjectTypeProperty();
    protected internal bool get_IsPrimitiveOrTagOrObjectTypeProperty();
    protected internal bool get_HasPrimitivePropertyType();
    private void set_HasPrimitivePropertyType(bool value);
    protected internal bool get_IsConvertible();
    private void set_IsConvertible(bool value);
    protected internal void EnsureObjectTypeProperty(ObjectConverterImplementation converter, PropertyDescriptor descriptor);
    protected internal XtraPropertyInfo EnsureIsPrimitive(ObjectConverterImplementation converter);
    private XtraPropertyInfo EnsurePropertyTypeOrSkipValue(Type valueType, ObjectConverterImplementation converter);
    private bool EnsureIsConvertible(ObjectConverterImplementation converter, Type propType);
    public void SetObjectConverterImpl(ObjectConverterImplementation objectConverterImpl);
    protected virtual ObjectConverterImplementation get_ObjectConverterImplementation();
    private ObjectConverterImplementation EnsureObjectConverter(ObjectConverterImplementation converter);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(Type value);
    public bool get_IsKey();
    public bool get_IsNull();
    public void set_IsNull(bool value);
    public virtual object ValueToObject(Type type);
    public IXtraPropertyCollection get_ChildProperties();
    protected void set_ChildProperties(IXtraPropertyCollection value);
    public bool get_HasChildren();
    public virtual string ToString();
    private string GetPrimitiveOrTagPropertyName();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.Serializing.Helpers.XtraPropertyInfoCollection : List`1<XtraPropertyInfo> {
    public XtraPropertyInfo Item { get; }
    public bool IsSinglePass { get; }
    public sealed virtual XtraPropertyInfo get_Item(string name);
    public sealed virtual bool get_IsSinglePass();
    public sealed virtual void AddRange(ICollection props);
}
public class DevExpress.Utils.Serializing.ImageContextAttribute : XmlContextItem {
    public ImageContextAttribute(string name, Image val, Image defaultValue);
    public virtual string ValueToString();
}
public class DevExpress.Utils.Serializing.IntegerContextAttribute : XmlContextItem {
    public IntegerContextAttribute(string name, int val, int defaultValue);
    public virtual string ValueToString();
}
public interface DevExpress.Utils.Serializing.IObjectDataSerializer {
    public abstract virtual bool CanSerialize(object data);
    public abstract virtual string Serialize(object data);
    public abstract virtual bool CanDeserialize(string value, string typeName);
    public abstract virtual object Deserialize(string value, string typeName);
}
public interface DevExpress.Utils.Serializing.ISupportBrokenLayoutExceptionHandling {
    public abstract virtual bool OnBrokenLayoutException(RestoreLayoutException exception);
}
public interface DevExpress.Utils.Serializing.ISupportXtraSerializer {
    public abstract virtual void SaveLayoutToXml(string xmlFile);
    public abstract virtual void SaveLayoutToRegistry(string path);
    public abstract virtual void SaveLayoutToStream(Stream stream);
    public abstract virtual void RestoreLayoutFromXml(string xmlFile);
    public abstract virtual void RestoreLayoutFromStream(Stream stream);
    public abstract virtual void RestoreLayoutFromRegistry(string path);
}
public interface DevExpress.Utils.Serializing.IXmlContext {
    public string ElementName { get; }
    public ICollection Attributes { get; }
    public ICollection Elements { get; }
    public bool XmlDocumentHeader { get; }
    public abstract virtual string get_ElementName();
    public abstract virtual ICollection get_Attributes();
    public abstract virtual ICollection get_Elements();
    public abstract virtual bool get_XmlDocumentHeader();
}
public interface DevExpress.Utils.Serializing.IXmlContextItem {
    public string Name { get; }
    public object Value { get; }
    public object DefaultValue { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual object get_DefaultValue();
    public abstract virtual string ValueToString();
}
[ComVisibleAttribute("False")]
public interface DevExpress.Utils.Serializing.IXtraSerializable {
    public abstract virtual void OnStartSerializing();
    public abstract virtual void OnEndSerializing();
    public abstract virtual void OnStartDeserializing(LayoutAllowEventArgs e);
    public abstract virtual void OnEndDeserializing(string restoredVersion);
}
[ComVisibleAttribute("False")]
public interface DevExpress.Utils.Serializing.IXtraSerializableLayout {
    public string LayoutVersion { get; }
    public abstract virtual string get_LayoutVersion();
}
[ComVisibleAttribute("False")]
public interface DevExpress.Utils.Serializing.IXtraSerializableLayout2 {
    public SizeF LayoutScaleFactor { get; }
    public abstract virtual SizeF get_LayoutScaleFactor();
}
[ComVisibleAttribute("False")]
public interface DevExpress.Utils.Serializing.IXtraSerializableLayoutEx {
    public abstract virtual bool AllowProperty(OptionsLayoutBase options, string propertyName, int id);
    public abstract virtual void ResetProperties(OptionsLayoutBase options);
}
public abstract class DevExpress.Utils.Serializing.ObjectCollectionXmlLoader : ObjectXmlLoader {
    protected ICollection Collection { get; }
    protected string XmlCollectionName { get; }
    protected ObjectCollectionXmlLoader(XmlNode root);
    protected abstract virtual ICollection get_Collection();
    protected abstract virtual string get_XmlCollectionName();
    protected abstract virtual object LoadObject(XmlNode root);
    protected abstract virtual void AddObjectToCollection(object obj);
    protected abstract virtual void ClearCollectionObjects();
    public virtual object ObjectFromXml();
}
public class DevExpress.Utils.Serializing.ObjectContextAttribute : XmlContextItem {
    public ObjectContextAttribute(string name, object val, object defaultValue);
    public virtual string ValueToString();
}
public class DevExpress.Utils.Serializing.ObjectDataSerializer : object {
    public static string Guid;
    internal static string DataAccessCustomSerializerName;
    public static void Register(IObjectDataSerializer serializer);
    public static void Unregister();
    public static void Register(IObjectDataSerializer serializer);
    public static void Register(Type[] dataSourceTypes, IObjectDataSerializer serializer);
    public static void Register(string contextName, IObjectDataSerializer serializer);
    public static bool Unregister(string contextName);
}
public abstract class DevExpress.Utils.Serializing.ObjectXmlLoader : object {
    private XmlNode root;
    private static Type intType;
    private static Type decimalType;
    private static Type dateTimeType;
    private static Type stringType;
    private static Type booleanType;
    private static Type objectType;
    protected ObjectXmlLoader(XmlNode root);
    private static ObjectXmlLoader();
    public abstract virtual object ObjectFromXml();
    protected internal object ReadAttributeValueCore(string name);
    protected internal DXXmlNodeCollection GetChildNodes(string name);
    protected internal DXXmlNodeCollection GetElementsByTagName(XmlNode root, string tagName);
    protected internal virtual void FindRecursive(XmlNode root, string tagName, DXXmlNodeCollection searchResult);
    public object ReadAttributeValue(string name, Type type);
    public object ReadAttributeAsObject(string name, Type type, object defaultValue);
    public bool ReadAttributeAsBoolean(string name, bool defaultValue);
    public string ReadAttributeAsString(string name, string defaultValue);
    public int ReadAttributeAsInt(string name, int defaultValue);
    public DateTime ReadAttributeAsDateTime(string name, DateTime defaultValue);
    public TimeSpan ReadAttributeAsTimeSpan(string name, TimeSpan defaultValue);
    public Image ReadAttributeAsImage(string name, Image defaultValue);
    public Color ReadAttributeAsColor(string name, Color defaultValue);
    public Guid ReadAttributeAsGuid(string name, Guid defaultValue);
    public decimal ReadAttributeAsDecimal(string name, decimal defaultValue);
}
internal class DevExpress.Utils.Serializing.RectangleDFConverter : StructDoubleConverter {
    public static RectangleDFConverter Instance;
    public Type Type { get; }
    private static RectangleDFConverter();
    public virtual Type get_Type();
    protected virtual Double[] GetValues(object obj);
    protected virtual object CreateObject(Double[] values);
}
public class DevExpress.Utils.Serializing.RestoreLayoutErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private List`1<RestoreLayoutException> <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Throw>k__BackingField;
    public List`1<RestoreLayoutException> Exceptions { get; }
    public bool Throw { get; public set; }
    public bool IsLayoutBroken { get; }
    public RestoreLayoutErrorEventArgs(List`1<RestoreLayoutException> exceptions);
    [CompilerGeneratedAttribute]
public List`1<RestoreLayoutException> get_Exceptions();
    [CompilerGeneratedAttribute]
public bool get_Throw();
    [CompilerGeneratedAttribute]
public void set_Throw(bool value);
    public bool get_IsLayoutBroken();
    public void ThrowIfRestoreLayoutExceptionsNotHandled();
}
public abstract class DevExpress.Utils.Serializing.RestoreLayoutException : InvalidOperationException {
    public RestoreLayoutException(string message);
    public RestoreLayoutException(string message, Exception innerException);
}
public class DevExpress.Utils.Serializing.StringContextAttribute : XmlContextItem {
    public StringContextAttribute(string name, string val, string defaultValue);
    public virtual string ValueToString();
}
public abstract class DevExpress.Utils.Serializing.StructConverter`1 : object {
    public Type Type { get; }
    protected char Delimiter { get; }
    public abstract virtual Type get_Type();
    protected virtual char get_Delimiter();
    public sealed virtual string ToString(object obj);
    protected String[] ConvertValuesToStrings(T[] values);
    public sealed virtual object FromString(string str);
    protected abstract virtual T[] GetValues(object obj);
    protected abstract virtual object CreateObject(T[] values);
    protected abstract virtual string ElementToString(T obj);
    protected virtual String[] SplitValue(string value);
    protected abstract virtual T ToType(string str);
    public virtual bool CanConvertFromString(string str);
}
public abstract class DevExpress.Utils.Serializing.StructDoubleConverter : StructConverter`1<double> {
    protected virtual string ElementToString(double obj);
    protected virtual double ToType(string str);
}
public abstract class DevExpress.Utils.Serializing.StructFloatConverter : StructConverter`1<float> {
    protected virtual string ElementToString(float obj);
    protected virtual float ToType(string str);
}
public abstract class DevExpress.Utils.Serializing.StructIntConverter : StructConverter`1<int> {
    protected virtual string ElementToString(int obj);
    protected virtual int ToType(string str);
}
public abstract class DevExpress.Utils.Serializing.StructStringConverter : StructConverter`1<string> {
    protected virtual string ElementToString(string obj);
    protected virtual string ToType(string str);
}
public class DevExpress.Utils.Serializing.TimeSpanContextAttribute : XmlContextItem {
    public TimeSpanContextAttribute(string name, TimeSpan val, TimeSpan defaultValue);
    public virtual string ValueToString();
}
public class DevExpress.Utils.Serializing.TypedBinaryReaderEx : object {
    private BinaryReader input;
    private ICustomObjectConverter customObjectConverter;
    private ObjectConverterImplementation objectConverter;
    protected internal ObjectConverterImplementation SerializerObjectConverter { get; protected internal set; }
    protected internal ICustomObjectConverter CustomObjectConverter { get; protected internal set; }
    protected bool HasCustomObjectConverter { get; }
    protected internal BinaryReader Input { get; }
    public TypedBinaryReaderEx(BinaryReader input);
    protected internal ObjectConverterImplementation get_SerializerObjectConverter();
    protected internal void set_SerializerObjectConverter(ObjectConverterImplementation value);
    protected internal ICustomObjectConverter get_CustomObjectConverter();
    protected internal void set_CustomObjectConverter(ICustomObjectConverter value);
    protected bool get_HasCustomObjectConverter();
    protected internal BinaryReader get_Input();
    protected internal virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual override void Finalize();
    public virtual void Close();
    public virtual object ReadObject();
    protected internal virtual object ReadObjectCore(byte typeCode);
    protected internal virtual object ReadObjectCoreDecodeTypeCode(byte typeCode);
    protected internal virtual bool ReadBoolean(DXTypeCode typeCode);
    protected internal virtual object ReadInteger(DXTypeCode typeCode);
    protected internal virtual decimal ReadDecimal(DXTypeCode typeCode);
    protected internal virtual DateTime ReadDateTime(DXTypeCode typeCode);
    protected internal virtual TimeSpan ReadTimeSpan(DXTypeCode typeCode);
    protected internal virtual string ReadString();
    protected internal virtual Guid ReadGuid();
    protected internal virtual Byte[] ReadByteArray();
    protected internal virtual object ReadEnum();
    protected internal virtual object ReadObjectCore();
}
public class DevExpress.Utils.Serializing.TypedBinaryReaderExWithStringTable : TypedBinaryReaderEx {
    private int startPosition;
    private int endPosition;
    private int stringTablePosition;
    private StringCollection stringTable;
    public TypedBinaryReaderExWithStringTable(BinaryReader input);
    public virtual object ReadObject();
    protected internal virtual void ReadStringTable();
    protected internal virtual string ReadString();
}
public class DevExpress.Utils.Serializing.TypedBinaryWriterEx : object {
    private BinaryWriter output;
    private ICustomObjectConverter customObjectConverter;
    private Dictionary`2<TypeCode, DXTypeCode> typeCodeTable;
    protected internal ICustomObjectConverter CustomObjectConverter { get; protected internal set; }
    protected bool HasCustomObjectConverter { get; }
    protected internal BinaryWriter Output { get; }
    public TypedBinaryWriterEx(BinaryWriter output);
    private static bool IsMscorlib(Assembly assembly);
    protected internal ICustomObjectConverter get_CustomObjectConverter();
    protected internal void set_CustomObjectConverter(ICustomObjectConverter value);
    protected bool get_HasCustomObjectConverter();
    protected internal BinaryWriter get_Output();
    protected internal virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual override void Finalize();
    public virtual void Flush();
    public virtual void Close();
    public virtual void WriteObject(object obj);
    public virtual void WriteObject(Type type, object obj);
    protected internal virtual void WriteTypedObject(DXTypeCode typeCode, object obj);
    protected internal virtual void WriteNull();
    protected internal virtual void WriteDBNull();
    protected internal virtual void WriteBoolean(bool val);
    protected internal virtual void WriteChar(char val);
    [CLSCompliantAttribute("False")]
protected internal virtual void WriteSByte(sbyte val);
    protected internal virtual void WriteByte(byte val);
    protected internal virtual void WriteInt16(short val);
    protected internal virtual void WriteInt16Core(short val, DXTypeCode sourceTypeCode);
    [CLSCompliantAttribute("False")]
protected internal virtual void WriteUInt16(ushort val);
    [CLSCompliantAttribute("False")]
protected internal virtual void WriteUInt16Core(ushort val, DXTypeCode sourceTypeCode);
    protected internal virtual void WriteInt32(int val);
    protected internal virtual void WriteInt32Core(int val, DXTypeCode sourceTypeCode);
    [CLSCompliantAttribute("False")]
protected internal virtual void WriteUInt32(UInt32 val);
    [CLSCompliantAttribute("False")]
protected internal virtual void WriteUInt32Core(UInt32 val, DXTypeCode sourceTypeCode);
    protected internal virtual void WriteInt64(long val);
    protected internal virtual void WriteInt64Core(long val, DXTypeCode sourceTypeCode);
    [CLSCompliantAttribute("False")]
protected internal virtual void WriteUInt64(ulong val);
    [CLSCompliantAttribute("False")]
protected internal virtual void WriteUInt64Core(ulong val, DXTypeCode sourceTypeCode);
    protected internal virtual void WriteSingle(float val);
    protected internal virtual void WriteDouble(double val);
    protected internal virtual void WriteDecimal(decimal val);
    protected internal virtual void WriteDateTime(DateTime val);
    protected internal virtual void WriteTimeSpan(TimeSpan val);
    protected internal virtual void WriteString(string val);
    protected internal virtual void WriteGuid(Guid val);
    protected internal virtual void WriteByteArray(Byte[] val);
    protected internal virtual void WriteTypeName(Type type);
    protected internal virtual void WriteEnum(object val);
    protected internal virtual void WriteObjectCore(object val);
    private void WriteObjectCore(Type type, string serializedObject);
    protected internal virtual void WriteObjectCore(Type type, string serializedObject, bool forceWriteTypeFullName);
    protected internal virtual byte CreateTypeCodeByte(DXTypeCode sourceTypeCode, DXTypeCode destinationTypeCode);
    private static Dictionary`2<TypeCode, DXTypeCode> CreateTypeCodeTable();
    protected internal virtual DXTypeCode GetTypeCode(object obj);
    protected internal virtual DXTypeCode GetTypeCode(Type type);
}
public class DevExpress.Utils.Serializing.TypedBinaryWriterExWithStringTable : TypedBinaryWriterEx {
    private bool closed;
    private int startPosition;
    private StringCollection stringTable;
    public TypedBinaryWriterExWithStringTable(BinaryWriter output);
    public virtual void WriteObject(object obj);
    private void CorrectStartPosition();
    public void WriteCustomObject(Type type, string serializedObject);
    public virtual void Close();
    protected internal virtual void WriteStringTable();
    protected internal virtual void WriteString(string value);
}
public class DevExpress.Utils.Serializing.XmlContext : object {
    private string elementName;
    private XmlContextItemCollection attributes;
    private XmlContextItemCollection elements;
    private bool xmlDocumentHeader;
    public string ElementName { get; public set; }
    private ICollection DevExpress.Utils.Serializing.IXmlContext.Attributes { get; }
    private ICollection DevExpress.Utils.Serializing.IXmlContext.Elements { get; }
    public XmlContextItemCollection Attributes { get; }
    public XmlContextItemCollection Elements { get; }
    public bool XmlDocumentHeader { get; public set; }
    public XmlContext(string elementName);
    public sealed virtual string get_ElementName();
    public void set_ElementName(string value);
    private sealed virtual override ICollection DevExpress.Utils.Serializing.IXmlContext.get_Attributes();
    private sealed virtual override ICollection DevExpress.Utils.Serializing.IXmlContext.get_Elements();
    public XmlContextItemCollection get_Attributes();
    public XmlContextItemCollection get_Elements();
    public sealed virtual bool get_XmlDocumentHeader();
    public void set_XmlDocumentHeader(bool value);
}
public abstract class DevExpress.Utils.Serializing.XmlContextItem : object {
    private string name;
    private object val;
    private object defaultValue;
    public string Name { get; }
    public object Value { get; }
    public object DefaultValue { get; }
    protected XmlContextItem(string name, object val, object defaultValue);
    public sealed virtual string get_Name();
    public sealed virtual object get_Value();
    public sealed virtual object get_DefaultValue();
    public abstract virtual string ValueToString();
    public void SetValue(object val);
}
public class DevExpress.Utils.Serializing.XmlContextItemCollection : DXNamedItemCollection`1<IXmlContextItem> {
    protected virtual IXmlContextItem GetItem(int index);
    protected internal virtual int AddIfNotAlreadyAdded(IXmlContextItem obj);
    protected internal virtual bool RemoveIfAlreadyAdded(IXmlContextItem obj);
    protected virtual string GetItemName(IXmlContextItem item);
}
public class DevExpress.Utils.Serializing.XmlContextWriter : object {
    public static string XmlWhiteSpace;
    private IXmlContext context;
    public XmlContextWriter(IXmlContext context);
    public virtual void Save(XmlWriter writer);
    protected virtual void WriteStartDocument(XmlWriter writer);
    protected virtual void WriteEndDocument(XmlWriter writer);
    protected virtual void WriteStartElement(XmlWriter writer, string name);
    protected virtual void WriteEndElement(XmlWriter writer);
    protected virtual void WriteAttributes(XmlWriter writer, ICollection items);
    protected virtual void WriteElements(XmlWriter writer, ICollection items);
    protected virtual void WriteElement(XmlWriter writer, IXmlContextItem item);
    protected virtual void WriteIndent(XmlWriter writer, int count);
    protected virtual void WriteNewLine(XmlWriter writer);
}
public static class DevExpress.Utils.Serializing.XmlDocumentHelper : object {
    public static DXXmlNodeCollection GetChildren(XmlNode root);
    public static XmlNode GetDocumentElement(XmlDocument doc);
    public static DXXmlNodeCollection ConvertXmlNodeList(XmlNodeList list);
    public static XmlDocument LoadFromStream(Stream stream);
    public static XmlDocument LoadFromXml(string xml);
}
public abstract class DevExpress.Utils.Serializing.XmlPersistenceHelper : object {
    protected abstract virtual IXmlContext GetXmlContext();
    public abstract virtual ObjectXmlLoader CreateObjectXmlLoader(XmlNode root);
    protected virtual XmlContextWriter CreateXmlContextWriter(IXmlContext context);
    public virtual void WriteXml(Stream stream);
    public virtual string ToXml();
    public static XmlNode GetRootElement(string xml);
    public virtual object FromXml(string xml);
    public virtual object FromXmlNode(XmlNode root);
    protected internal virtual bool IsValidContext(IXmlContext context);
    protected internal virtual string ContextToString(IXmlContext context);
    protected internal virtual void ContextToStream(IXmlContext context, Stream stream);
    protected internal virtual void SaveXml(IXmlContext context, XmlWriter writer);
    public virtual object ParseXmlDocument(XmlNode root);
}
public class DevExpress.Utils.Serializing.XmlXtraSerializer : XtraSerializer {
    private static Dictionary`2<Type, MethodInfo> XmlConvertToStringMethods;
    private static Dictionary`2<Type, MethodInfo> XmlConvertFromStringMethods;
    private string alternativeAppName;
    private static ConcurrentDictionary`2<string, Type> types;
    protected string SerializerName { get; }
    protected string Version { get; }
    public bool CanUseStream { get; }
    private static ConcurrentDictionary`2<string, Type> Types { get; }
    protected bool AllowCustomTypes { get; }
    private static XmlXtraSerializer();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public XmlXtraSerializer(string alternativeAppName);
    private static void PopulateToStringMethods(MethodInfo[] methods);
    private static void PopulateFromStringMethods(MethodInfo[] methods);
    private static MethodInfo FindXmlToStringMethod(Type type);
    private static MethodInfo FindXmlFromStringMethod(Type type);
    protected virtual string get_SerializerName();
    protected virtual string get_Version();
    public virtual bool get_CanUseStream();
    protected virtual bool Serialize(Stream stream, IXtraPropertyCollection props, string appName);
    protected virtual bool Serialize(string path, IXtraPropertyCollection props, string appName);
    protected virtual bool SerializeCore(Stream stream, IXtraPropertyCollection props, string appName);
    protected void SerializeCore(XmlWriter tw, IXtraPropertyCollection props, string appName);
    protected virtual void WriteStartElement(XmlWriter tw, string appName);
    protected virtual XmlWriterSettings CreateXmlWriterSettings();
    protected XmlWriter CreateXmlTextWriter(Stream stream);
    protected virtual void WriteStartDocument(XmlWriter tw);
    protected virtual void WriteApplicationAttribute(string appName, XmlWriter tw);
    protected virtual void WriteVersionAttribute(XmlWriter tw);
    protected void SerializeLevel(XmlWriter tw, IXtraPropertyCollection props);
    protected virtual void SerializeLevelCore(XmlWriter tw, IXtraPropertyCollection props);
    private void SerializeProperty(XmlWriter writer, XtraPropertyInfo pInfo);
    protected virtual Dictionary`2<string, string> GetAttributes(XtraPropertyInfo pInfo);
    protected virtual bool ShouldSerializePropertyType(XtraPropertyInfo pInfo, String& propertyTypeName);
    protected virtual string GetObjectTypeName(object obj);
    public static object XmlStringToObject(string str, Type type);
    public static string XmlObjectToString(object val);
    protected virtual IXtraPropertyCollection Deserialize(Stream stream, string appName, IList objects);
    protected virtual IXtraPropertyCollection Deserialize(string path, string appName, IList objects);
    protected virtual XmlReader CreateReader(Stream stream);
    protected virtual IXtraPropertyCollection DeserializeCore(Stream stream, string appName, IList objects);
    protected virtual bool CheckSerializerName(string name);
    private void Read(XmlReader reader, IXtraPropertyCollection list, int depth);
    private static ConcurrentDictionary`2<string, Type> get_Types();
    protected bool get_AllowCustomTypes();
    protected virtual Type ResolveType(string typeName, ObjectConverterImplementation converter);
    private Type GetTypeViaConverter(string typeName, ICustomObjectConverter customObjectConverter, ObjectConverterImplementation converter);
    private Type GetTypeViaCustomTypes(string typeName);
    protected virtual XtraPropertyInfo CreateXtraPropertyInfo(string name, Type propType, bool isKey, Dictionary`2<string, string> attributes);
    protected virtual string UpdateValue(string val);
}
public class DevExpress.Utils.Serializing.XtraEventArgs : EventArgs {
    private XtraPropertyInfo info;
    public XtraPropertyInfo Info { get; }
    public XtraEventArgs(XtraPropertyInfo info);
    public XtraPropertyInfo get_Info();
}
public class DevExpress.Utils.Serializing.XtraItemEventArgs : EventArgs {
    private OptionsLayoutBase options;
    private object owner;
    private object collection;
    private XtraPropertyInfo item;
    private object rootObject;
    private int index;
    public OptionsLayoutBase Options { get; }
    public object Owner { get; }
    public object Collection { get; }
    public object RootObject { get; }
    public XtraPropertyInfo Item { get; }
    public int Index { get; }
    public XtraItemEventArgs(object owner, object collection, XtraPropertyInfo item);
    public XtraItemEventArgs(object rootObject, object owner, object collection, XtraPropertyInfo item);
    public XtraItemEventArgs(object rootObject, object owner, object collection, XtraPropertyInfo item, OptionsLayoutBase options);
    public XtraItemEventArgs(object rootObject, object owner, object collection, XtraPropertyInfo item, OptionsLayoutBase options, int index);
    public OptionsLayoutBase get_Options();
    public object get_Owner();
    public object get_Collection();
    public object get_RootObject();
    public XtraPropertyInfo get_Item();
    public int get_Index();
}
public class DevExpress.Utils.Serializing.XtraNewItemEventArgs : XtraItemEventArgs {
    [CompilerGeneratedAttribute]
private bool <NewItem>k__BackingField;
    public bool NewItem { get; public set; }
    public XtraNewItemEventArgs(object rootObject, object owner, object collection, XtraPropertyInfo item);
    [CompilerGeneratedAttribute]
public bool get_NewItem();
    [CompilerGeneratedAttribute]
public void set_NewItem(bool value);
}
public class DevExpress.Utils.Serializing.XtraObjectInfo : object {
    private object instance;
    private string name;
    public bool Skip { get; }
    public object Instance { get; }
    public string Name { get; }
    public XtraObjectInfo(string name, object instance);
    public virtual bool get_Skip();
    public object get_Instance();
    public string get_Name();
}
public class DevExpress.Utils.Serializing.XtraOldItemEventArgs : XtraItemEventArgs {
    [CompilerGeneratedAttribute]
private bool <OldItem>k__BackingField;
    public bool OldItem { get; public set; }
    public XtraOldItemEventArgs(object rootObject, object owner, object collection, XtraPropertyInfo item);
    [CompilerGeneratedAttribute]
public bool get_OldItem();
    [CompilerGeneratedAttribute]
public void set_OldItem(bool value);
}
[AttributeUsageAttribute("192")]
public class DevExpress.Utils.Serializing.XtraSerializableProperty : Attribute {
    private Nullable`1<XtraSerializationVisibility> visibility;
    private XtraSerializationFlags flags;
    private bool clearCollection;
    private bool useFindItem;
    private bool useCreateItem;
    private bool mergeCollection;
    private int order;
    public XtraSerializationFlags Flags { get; }
    public int Order { get; }
    public bool ClearCollection { get; }
    public bool MergeCollection { get; }
    public bool UseFindItem { get; }
    public bool UseCreateItem { get; }
    public bool Serialize { get; }
    public bool IsCachedProperty { get; }
    public bool DeserializeCollectionItemBeforeCallSetIndex { get; }
    public bool SupressDefaultValue { get; }
    public bool IsAutoScale { get; }
    public bool IsAutoScaleIgnoreDefault { get; }
    public bool IsLoadOnly { get; }
    public bool IsCollectionContent { get; }
    public bool SerializeCollection { get; }
    public XtraSerializationVisibility Visibility { get; }
    protected internal bool IsExactVisible { get; }
    private XtraSerializableProperty(Nullable`1<XtraSerializationVisibility> visibility);
    private XtraSerializableProperty(Nullable`1<XtraSerializationVisibility> visibility, XtraSerializationFlags flags, int order);
    public XtraSerializableProperty(XtraSerializationVisibility visibility, int order);
    public XtraSerializableProperty(int order);
    public XtraSerializableProperty(XtraSerializationVisibility visibility, bool useCreateItem, bool useFindItem, bool clearCollection, bool mergeCollection, int order, XtraSerializationFlags flags);
    public XtraSerializableProperty(XtraSerializationVisibility visibility, bool useCreateItem, bool useFindItem, bool clearCollection, int order, XtraSerializationFlags flags);
    public XtraSerializableProperty(XtraSerializationVisibility visibility, bool useCreateItem, bool useFindItem, bool clearCollection, int order);
    public XtraSerializableProperty(XtraSerializationVisibility visibility, bool useCreateItem, bool useFindItem, bool clearCollection);
    public XtraSerializableProperty(bool useCreateItem, bool useFindItem, bool clearCollection);
    public XtraSerializableProperty(XtraSerializationVisibility visibility, bool useCreateItem);
    public XtraSerializableProperty(bool useCreateItem, bool useFindItem, bool clearCollection, int order);
    public XtraSerializableProperty(XtraSerializationVisibility visibility);
    public XtraSerializableProperty(XtraSerializationFlags flags);
    public XtraSerializableProperty(XtraSerializationFlags flags, int order);
    public XtraSerializableProperty(XtraSerializationVisibility visibility, XtraSerializationFlags flags);
    public XtraSerializableProperty(XtraSerializationVisibility visibility, XtraSerializationFlags flags, int order);
    public XtraSerializationFlags get_Flags();
    public int get_Order();
    public bool get_ClearCollection();
    public bool get_MergeCollection();
    public bool get_UseFindItem();
    public bool get_UseCreateItem();
    public bool get_Serialize();
    public bool get_IsCachedProperty();
    public bool get_DeserializeCollectionItemBeforeCallSetIndex();
    public bool get_SupressDefaultValue();
    public bool get_IsAutoScale();
    public bool get_IsAutoScaleIgnoreDefault();
    public bool get_IsLoadOnly();
    public bool get_IsCollectionContent();
    public bool get_SerializeCollection();
    public XtraSerializationVisibility get_Visibility();
    protected internal bool get_IsExactVisible();
}
[AttributeUsageAttribute("128")]
public class DevExpress.Utils.Serializing.XtraSerializablePropertyId : Attribute {
    private int id;
    public int Id { get; }
    public XtraSerializablePropertyId(int id);
    public int get_Id();
}
[FlagsAttribute]
public enum DevExpress.Utils.Serializing.XtraSerializationFlags : Enum {
    public int value__;
    public static XtraSerializationFlags None;
    public static XtraSerializationFlags UseAssign;
    public static XtraSerializationFlags DefaultValue;
    public static XtraSerializationFlags Cached;
    public static XtraSerializationFlags DeserializeCollectionItemBeforeCallSetIndex;
    public static XtraSerializationFlags SuppressDefaultValue;
    public static XtraSerializationFlags AutoScaleX;
    public static XtraSerializationFlags AutoScaleY;
    public static XtraSerializationFlags AutoScale;
    public static XtraSerializationFlags LoadOnly;
    public static XtraSerializationFlags CollectionContent;
    public static XtraSerializationFlags AutoScaleIgnoreDefault;
    public static XtraSerializationFlags AutoScaleXNoDefault;
    public static XtraSerializationFlags AutoScaleYNoDefault;
    public static XtraSerializationFlags AutoScaleNoDefault;
    [EditorBrowsableAttribute("1")]
public static XtraSerializationFlags ForceUseXtraShouldSerialize;
}
public enum DevExpress.Utils.Serializing.XtraSerializationVisibility : Enum {
    public int value__;
    public static XtraSerializationVisibility Hidden;
    public static XtraSerializationVisibility Visible;
    public static XtraSerializationVisibility Collection;
    public static XtraSerializationVisibility SimpleCollection;
    public static XtraSerializationVisibility NameCollection;
    public static XtraSerializationVisibility Content;
    public static XtraSerializationVisibility Reference;
    public static XtraSerializationVisibility Primitive;
}
public class DevExpress.Utils.Serializing.XtraSerializer : object {
    public static string NullValueString;
    public static string Base64Value;
    public static string ArrayValue;
    private ICustomObjectConverter customObjectConverter;
    private ObjectConverterImplementation objectConverterImpl;
    protected ObjectConverterImplementation ObjectConverterImpl { get; }
    protected bool HasCustomObjectConverter { get; }
    public ICustomObjectConverter CustomObjectConverter { get; public set; }
    public bool CanUseStream { get; }
    protected ObjectConverterImplementation get_ObjectConverterImpl();
    protected virtual ObjectConverterImplementation GetDefaultObjectConverterImplementation();
    protected bool get_HasCustomObjectConverter();
    public ICustomObjectConverter get_CustomObjectConverter();
    public void set_CustomObjectConverter(ICustomObjectConverter value);
    private void CustomObjectConverterChanged();
    protected static XtraObjectInfo[] CreateXtraObjectInfoArray(object obj);
    protected virtual bool Serialize(string path, IXtraPropertyCollection props, string appName);
    protected virtual IXtraPropertyCollection Deserialize(string path, string appName, IList objects);
    protected virtual bool Serialize(Stream stream, IXtraPropertyCollection props, string appName);
    protected virtual IXtraPropertyCollection Deserialize(Stream stream, string appName, IList objects);
    public virtual bool get_CanUseStream();
    public bool SerializeObject(object obj, object pathOrStream, string appName);
    public bool SerializeObject(object obj, object pathOrStream, string appName, OptionsLayoutBase options);
    public bool SerializeObject(object obj, string path, string appName);
    public virtual bool SerializeObject(object obj, string path, string appName, OptionsLayoutBase options);
    protected virtual SerializeHelper CreateSerializeHelper(object rootObj, bool useRootObj);
    protected virtual DeserializeHelper CreateDeserializeHelper(object rootObj, bool useRootObj);
    public void DeserializeObject(object obj, object pathOrStream, string appName);
    public void DeserializeObject(object obj, object pathOrStream, string appName, OptionsLayoutBase options);
    public void DeserializeObject(object obj, string path, string appName);
    public virtual void DeserializeObject(object obj, string path, string appName, OptionsLayoutBase options);
    public bool SerializeObject(object obj, Stream stream, string appName);
    public virtual bool SerializeObject(object obj, Stream stream, string appName, OptionsLayoutBase options);
    public void DeserializeObject(object obj, Stream stream, string appName);
    public virtual void DeserializeObject(object obj, Stream stream, string appName, OptionsLayoutBase options);
    protected virtual void DeserializeObject(object obj, IXtraPropertyCollection store, OptionsLayoutBase options);
    public bool SerializeObjects(XtraObjectInfo[] objects, string path, string appName);
    public virtual bool SerializeObjects(XtraObjectInfo[] objects, string path, string appName, OptionsLayoutBase options);
    public void DeserializeObjects(XtraObjectInfo[] objects, string path, string appName);
    public virtual void DeserializeObjects(IList objects, string path, string appName, OptionsLayoutBase options);
    public bool SerializeObjects(XtraObjectInfo[] objects, Stream stream, string appName);
    public bool SerializeObjects(XtraObjectInfo[] objects, Stream stream, string appName, OptionsLayoutBase options);
    public virtual bool SerializeObjects(object rootObject, IList objects, Stream stream, string appName, OptionsLayoutBase options);
    public void DeserializeObjects(XtraObjectInfo[] objects, Stream stream, string appName);
    public virtual void DeserializeObjects(IList objects, Stream stream, string appName, OptionsLayoutBase options);
    public virtual void DeserializeObjects(object rootObject, IList objects, Stream stream, string appName, OptionsLayoutBase options);
    internal static bool IsLayoutBroken(RestoreLayoutErrorEventArgs args);
}
public class DevExpress.Utils.Serializing.XtraSetItemIndexEventArgs : XtraItemEventArgs {
    private int newIndex;
    public int NewIndex { get; }
    public XtraSetItemIndexEventArgs(object rootObject, object owner, object collection, XtraPropertyInfo item, int newIndex);
    public virtual int get_NewIndex();
}
public class DevExpress.Utils.Serializing.XtraSkipObjectInfo : XtraObjectInfo {
    public static XtraObjectInfo SkipObjectInfoInstance;
    public bool Skip { get; }
    private static XtraSkipObjectInfo();
    public virtual bool get_Skip();
}
public class DevExpress.Utils.SimpleBridgeList`2 : BridgeList`2<T, TKey> {
    private static Func`2<TKey, T> defaultCast;
    private Func`2<TKey, T> cast;
    private Func`2<T, TKey> castBack;
    public SimpleBridgeList`2(IList`1<TKey> keys, Func`2<TKey, T> cast, Func`2<T, TKey> castBack);
    private static SimpleBridgeList`2();
    protected virtual T GetItemByKey(TKey key, int index);
    protected virtual void InsertCore(int index, T item);
    protected virtual void RemoveAtCore(int index);
    protected virtual bool RemoveCore(T item);
    protected virtual void AddCore(T item);
    protected virtual int AddObjectCore(object item);
    protected virtual void ClearCore();
    protected virtual bool IsReadOnlyCore();
}
public class DevExpress.Utils.SimpleEnumerableBridge`2 : object {
    private IEnumerable`1<Key> keys;
    private Func`2<Key, T> cast;
    private static Func`2<Key, T> defaultCast;
    public SimpleEnumerableBridge`2(IEnumerable`1<Key> keys);
    protected SimpleEnumerableBridge`2(IEnumerable`1<Key> keys, Func`2<Key, T> cast);
    private static SimpleEnumerableBridge`2();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class DevExpress.Utils.StringExtensions : object {
    public static StringComparer ComparerInvariantCulture { get; }
    public static StringComparer ComparerInvariantCultureIgnoreCase { get; }
    public static StringComparer get_ComparerInvariantCulture();
    public static StringComparer get_ComparerInvariantCultureIgnoreCase();
    [ExtensionAttribute]
public static UnicodeCategory GetUnicodeCategory(char c);
    public static int CompareInvariantCultureIgnoreCase(string str1, string str2);
    public static int CompareInvariantCulture(string str1, string str2);
    public static int CompareInvariantCultureWithOptions(string str1, string str2, CompareOptions options);
    public static int CompareWithCultureInfoAndOptions(string str1, string str2, CultureInfo info, CompareOptions options);
    [ExtensionAttribute]
public static int IndexOfInvariantCultureIgnoreCase(string str1, string str2);
    [ExtensionAttribute]
public static int IndexOfInvariantCulture(string str1, string str2);
    [ExtensionAttribute]
public static int IndexOfInvariantCultureIgnoreCase(string str1, string str2, int startIndex);
    [ExtensionAttribute]
public static int IndexOfInvariantCulture(string str1, string str2, int startIndex);
    [ExtensionAttribute]
public static int LastIndexOfInvariantCultureIgnoreCase(string str1, string str2);
    [ExtensionAttribute]
public static int LastIndexOfInvariantCultureIgnoreCase(string str1, string str2, int startIndex);
    [ExtensionAttribute]
public static bool StartsWithInvariantCultureIgnoreCase(string str1, string str2);
    [ExtensionAttribute]
public static bool StartsWithInvariantCulture(string str1, string str2);
    [ExtensionAttribute]
public static bool EndsWithInvariantCultureIgnoreCase(string str1, string str2);
    [ExtensionAttribute]
public static bool EndsWithInvariantCulture(string str1, string str2);
    public static int Compare(string str, string str2, bool ignoreCase, CultureInfo culture);
}
public static class DevExpress.Utils.StringFormatHelper : object {
    public static bool ContainsParameterSpecifier(string formatString, int n);
    public static string Interpolate(string format, String[] names, int indexOffset);
}
[CLSCompliantAttribute("False")]
public abstract class DevExpress.Utils.StructuredStorage.Internal.AbstractDirectoryEntry : object {
    private UInt32 sid;
    private string path;
    private string name;
    private DirectoryEntryType type;
    private DirectoryEntryColor color;
    private UInt32 leftSiblingSid;
    private UInt32 rightSiblingSid;
    private UInt32 childSiblingSid;
    private Guid clsId;
    private UInt32 userFlags;
    private UInt32 startSector;
    private ulong streamLength;
    private static Char[] CharsToMask;
    public UInt32 Sid { get; protected internal set; }
    public string Path { get; }
    protected internal string InnerPath { get; protected internal set; }
    public string Name { get; protected set; }
    protected internal string InnerName { get; }
    public ushort LengthOfName { get; }
    public DirectoryEntryType Type { get; protected set; }
    public DirectoryEntryColor Color { get; protected internal set; }
    public UInt32 LeftSiblingSid { get; protected internal set; }
    public UInt32 RightSiblingSid { get; protected internal set; }
    public UInt32 ChildSiblingSid { get; protected set; }
    public Guid ClsId { get; protected set; }
    public UInt32 UserFlags { get; protected set; }
    public UInt32 StartSector { get; protected set; }
    public ulong StreamLength { get; protected set; }
    protected AbstractDirectoryEntry(UInt32 sid);
    private static AbstractDirectoryEntry();
    public UInt32 get_Sid();
    protected internal void set_Sid(UInt32 value);
    public string get_Path();
    protected internal string get_InnerPath();
    protected internal void set_InnerPath(string value);
    public string get_Name();
    protected void set_Name(string value);
    protected internal string get_InnerName();
    public ushort get_LengthOfName();
    public DirectoryEntryType get_Type();
    protected void set_Type(DirectoryEntryType value);
    public DirectoryEntryColor get_Color();
    protected internal void set_Color(DirectoryEntryColor value);
    public UInt32 get_LeftSiblingSid();
    protected internal void set_LeftSiblingSid(UInt32 value);
    public UInt32 get_RightSiblingSid();
    protected internal void set_RightSiblingSid(UInt32 value);
    public UInt32 get_ChildSiblingSid();
    protected void set_ChildSiblingSid(UInt32 value);
    public Guid get_ClsId();
    protected void set_ClsId(Guid value);
    public UInt32 get_UserFlags();
    protected void set_UserFlags(UInt32 value);
    public UInt32 get_StartSector();
    protected void set_StartSector(UInt32 value);
    public ulong get_StreamLength();
    protected void set_StreamLength(ulong value);
    internal static string Mask(string text);
    private void ThrowInvalidValueInDirectoryEntryException(string name);
}
[CLSCompliantAttribute("False")]
public abstract class DevExpress.Utils.StructuredStorage.Internal.AbstractHeader : object {
    public static ulong MAGIC_NUMBER;
    private AbstractIOHandler ioHandler;
    private ushort sectorShift;
    private ushort sectorSize;
    private ushort miniSectorShift;
    private ushort miniSectorSize;
    private UInt32 noSectorsInDirectoryChain4KB;
    private UInt32 noSectorsInFatChain;
    private UInt32 directoryStartSector;
    private UInt32 miniSectorCutoff;
    private UInt32 miniFatStartSector;
    private UInt32 noSectorsInMiniFatChain;
    private UInt32 diFatStartSector;
    private UInt32 noSectorsInDiFatChain;
    public AbstractIOHandler IoHandler { get; }
    public ushort SectorShift { get; public set; }
    public ushort SectorSize { get; }
    public ushort MiniSectorShift { get; public set; }
    public ushort MiniSectorSize { get; }
    public UInt32 NoSectorsInDirectoryChain4KB { get; public set; }
    public UInt32 NoSectorsInFatChain { get; public set; }
    public UInt32 DirectoryStartSector { get; public set; }
    public UInt32 MiniSectorCutoff { get; public set; }
    public UInt32 MiniFatStartSector { get; public set; }
    public UInt32 NoSectorsInMiniFatChain { get; public set; }
    public UInt32 DiFatStartSector { get; public set; }
    public UInt32 NoSectorsInDiFatChain { get; public set; }
    protected AbstractHeader(AbstractIOHandler ioHandler);
    public AbstractIOHandler get_IoHandler();
    public ushort get_SectorShift();
    public void set_SectorShift(ushort value);
    public ushort get_SectorSize();
    public ushort get_MiniSectorShift();
    public void set_MiniSectorShift(ushort value);
    public ushort get_MiniSectorSize();
    public UInt32 get_NoSectorsInDirectoryChain4KB();
    public void set_NoSectorsInDirectoryChain4KB(UInt32 value);
    public UInt32 get_NoSectorsInFatChain();
    public void set_NoSectorsInFatChain(UInt32 value);
    public UInt32 get_DirectoryStartSector();
    public void set_DirectoryStartSector(UInt32 value);
    public UInt32 get_MiniSectorCutoff();
    public void set_MiniSectorCutoff(UInt32 value);
    public UInt32 get_MiniFatStartSector();
    public void set_MiniFatStartSector(UInt32 value);
    public UInt32 get_NoSectorsInMiniFatChain();
    public void set_NoSectorsInMiniFatChain(UInt32 value);
    public UInt32 get_DiFatStartSector();
    public void set_DiFatStartSector(UInt32 value);
    public UInt32 get_NoSectorsInDiFatChain();
    public void set_NoSectorsInDiFatChain(UInt32 value);
    public void ThrowUnsupportedSizeException(string name);
    public void ThrowInvalidHeaderValueException(string name);
    protected virtual void ThrowArgumentException(string propName, object val);
}
[CLSCompliantAttribute("False")]
public abstract class DevExpress.Utils.StructuredStorage.Internal.AbstractIOHandler : object {
    private Stream stream;
    private AbstractHeader header;
    private InternalBitConverter bitConverter;
    public ulong IOStreamSize { get; }
    public AbstractHeader Header { get; }
    public InternalBitConverter BitConverter { get; }
    public Stream Stream { get; }
    protected AbstractIOHandler(Stream stream);
    public abstract virtual ulong get_IOStreamSize();
    public AbstractHeader get_Header();
    public InternalBitConverter get_BitConverter();
    public Stream get_Stream();
    public void InitBitConverter(bool isLittleEndian);
    public void SetHeaderReference(AbstractHeader header);
    public virtual void CloseStream();
}
public enum DevExpress.Utils.StructuredStorage.Internal.DirectoryEntryColor : Enum {
    public int value__;
    public static DirectoryEntryColor MinValue;
    public static DirectoryEntryColor Red;
    public static DirectoryEntryColor Black;
    public static DirectoryEntryColor MaxValue;
}
public enum DevExpress.Utils.StructuredStorage.Internal.DirectoryEntryType : Enum {
    public int value__;
    public static DirectoryEntryType MinValue;
    public static DirectoryEntryType Invalid;
    public static DirectoryEntryType Storage;
    public static DirectoryEntryType Stream;
    public static DirectoryEntryType LockBytes;
    public static DirectoryEntryType Property;
    public static DirectoryEntryType Root;
    public static DirectoryEntryType MaxValue;
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.InternalBitConverter : object {
    public static InternalBitConverter Create(bool isLittleEndian);
    protected internal virtual void Preprocess(Byte[] value);
    [CLSCompliantAttribute("False")]
public ulong ToUInt64(Byte[] value);
    [CLSCompliantAttribute("False")]
public UInt32 ToUInt32(Byte[] value);
    [CLSCompliantAttribute("False")]
public ushort ToUInt16(Byte[] value);
    public string ToString(Byte[] value);
    [CLSCompliantAttribute("False")]
public Byte[] GetBytes(ushort value);
    [CLSCompliantAttribute("False")]
public Byte[] GetBytes(UInt32 value);
    [CLSCompliantAttribute("False")]
public Byte[] GetBytes(ulong value);
    [CLSCompliantAttribute("False")]
public List`1<byte> GetBytes(List`1<UInt32> input);
}
public static class DevExpress.Utils.StructuredStorage.Internal.Measures : object {
    public static int DirectoryEntrySize;
    public static int HeaderSize;
}
internal class DevExpress.Utils.StructuredStorage.Internal.PrereverseInternalBitConverter : InternalBitConverter {
    protected internal virtual void Preprocess(Byte[] value);
}
[CLSCompliantAttribute("False")]
public abstract class DevExpress.Utils.StructuredStorage.Internal.Reader.AbstractFat : object {
    private Header header;
    private InputHandler fileHandler;
    private int addressesPerSector;
    private ulong maxSectorsInFile;
    public Header Header { get; }
    public int AddressesPerSector { get; }
    public InputHandler FileHandler { get; }
    public ushort SectorSize { get; }
    protected AbstractFat(Header header, InputHandler fileHandler);
    public Header get_Header();
    public int get_AddressesPerSector();
    public InputHandler get_FileHandler();
    public List`1<UInt32> GetSectorChain(UInt32 startSector, ulong maxCount, string name);
    public List`1<UInt32> GetSectorChain(UInt32 startSector, ulong maxCount, string name, bool immediateCycleCheck);
    internal void ThrowCycleDetectedException(string chain);
    internal void ThrowChainSizeMismatchException(string name);
    internal void InvalidSectorInChainException();
    internal int UncheckedRead(Byte[] array, int offset, int count);
    protected abstract virtual UInt32 GetNextSectorInChain(UInt32 currentSector);
    public abstract virtual long SeekToPositionInSector(long sector, long position);
    public abstract virtual ushort get_SectorSize();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Reader.DirectoryTree : object {
    private Fat fat;
    private Header header;
    private InputHandler fileHandler;
    private List`1<DirectoryEntry> directoryEntries;
    private List`1<UInt32> sectorsUsedByDirectory;
    private Dictionary`2<string, DirectoryEntry> entryCacheByName;
    private Dictionary`2<string, DirectoryEntry> entryCacheByPath;
    private Dictionary`2<UInt32, DirectoryEntry> entryCacheBySid;
    public DirectoryTree(Fat fat, Header header, InputHandler fileHandler);
    private void Init(UInt32 startSector);
    private void GetAllDirectoryEntriesRecursive(UInt32 sid, string path);
    private DirectoryEntry ReadDirectoryEntry(UInt32 sid, string path);
    private void SeekToDirectoryEntry(UInt32 sid);
    internal DirectoryEntry GetDirectoryEntry(string path);
    internal DirectoryEntry GetDirectoryEntry(UInt32 sid);
    internal UInt32 GetMiniStreamStart();
    internal ulong GetSizeOfMiniStream();
    internal void ThrowStreamNotFoundException(string name);
    internal ReadOnlyCollection`1<string> GetPathsOfAllEntries();
    internal ReadOnlyCollection`1<string> GetPathsOfAllStreamEntries();
    internal ReadOnlyCollection`1<DirectoryEntry> GetAllEntries();
    internal ReadOnlyCollection`1<DirectoryEntry> GetAllStreamEntries();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Reader.Fat : AbstractFat {
    private List`1<UInt32> sectorsUsedByFat;
    private List`1<UInt32> sectorsUsedByDiFat;
    public ushort SectorSize { get; }
    public Fat(Header header, InputHandler fileHandler);
    public virtual ushort get_SectorSize();
    public virtual long SeekToPositionInSector(long sector, long position);
    protected virtual UInt32 GetNextSectorInChain(UInt32 currentSector);
    private void Init();
    private void ReadFirst109SectorsUsedByFAT();
    private void ReadSectorsUsedByFatFromDiFat();
    private void CheckConsistency();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Reader.Header : AbstractHeader {
    public Header(InputHandler fileHandler);
    private void ReadHeader();
    protected virtual void ThrowArgumentException(string propName, object val);
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Reader.InputHandler : AbstractIOHandler {
    private static int HeaderSector;
    public ulong IOStreamSize { get; }
    public InputHandler(Stream stream);
    public virtual ulong get_IOStreamSize();
    internal long SeekToSector(long sector);
    internal long SeekToPositionInSector(long sector, long position);
    internal byte ReadByte();
    internal void Read(Byte[] array);
    internal void Read(Byte[] array, int offset, int count);
    internal int UncheckedRead(Byte[] array, int offset, int count);
    internal void ReadPosition(Byte[] array, long position);
    internal ushort ReadUInt16();
    internal UInt32 ReadUInt32();
    internal ulong ReadUInt64();
    internal ushort ReadUInt16(long position);
    internal UInt32 ReadUInt32(long position);
    internal ulong ReadUInt64(long position);
    internal string ReadString(int size);
    private void ThrowFileHandlerNotCorrectlyInitializedException();
    private void ThrowReadBytesAmountMismatchException();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Reader.KeepOpenInputHandler : InputHandler {
    public KeepOpenInputHandler(Stream stream);
    public virtual void CloseStream();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Reader.MiniFat : AbstractFat {
    private List`1<UInt32> sectorsUsedByMiniFat;
    private List`1<UInt32> sectorsUsedByMiniStream;
    private Fat fat;
    private UInt32 miniStreamStart;
    private ulong sizeOfMiniStream;
    public ushort SectorSize { get; }
    internal MiniFat(Fat fat, Header header, InputHandler fileHandler, UInt32 miniStreamStart, ulong sizeOfMiniStream);
    public virtual ushort get_SectorSize();
    public virtual long SeekToPositionInSector(long sector, long position);
    protected virtual UInt32 GetNextSectorInChain(UInt32 currentSector);
    private void Init();
    private void ReadSectorsUsedByMiniFAT();
    private void ReadSectorsUsedByMiniStream();
    private void CheckConsistency();
}
[CLSCompliantAttribute("False")]
public static class DevExpress.Utils.StructuredStorage.Internal.SectorType : object {
    public static UInt32 MaxValue;
    public static UInt32 Dif;
    public static UInt32 Fat;
    public static UInt32 EndOfChain;
    public static UInt32 Free;
    public static UInt32 NoStream;
}
[CLSCompliantAttribute("False")]
public abstract class DevExpress.Utils.StructuredStorage.Internal.Writer.AbstractFat : object {
    private List`1<UInt32> entries;
    private StructuredStorageContext context;
    private UInt32 currentEntry;
    public List`1<UInt32> Entries { get; }
    public UInt32 CurrentEntry { get; public set; }
    public StructuredStorageContext Context { get; }
    protected AbstractFat(StructuredStorageContext context);
    public List`1<UInt32> get_Entries();
    public UInt32 get_CurrentEntry();
    public void set_CurrentEntry(UInt32 value);
    public StructuredStorageContext get_Context();
    internal UInt32 WriteChain(UInt32 entryCount);
    internal abstract virtual void Write();
    protected long DivCeiling(long x, int y);
}
[CLSCompliantAttribute("False")]
public abstract class DevExpress.Utils.StructuredStorage.Internal.Writer.BaseDirectoryEntry : AbstractDirectoryEntry {
    private StructuredStorageContext context;
    internal StructuredStorageContext Context { get; }
    internal BaseDirectoryEntry(string name, StructuredStorageContext context);
    internal StructuredStorageContext get_Context();
    private void Init();
    internal void Write();
    protected internal abstract virtual void WriteReferencedStream();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Writer.EmptyDirectoryEntry : BaseDirectoryEntry {
    public EmptyDirectoryEntry(StructuredStorageContext context);
    protected internal virtual void WriteReferencedStream();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Writer.Fat : AbstractFat {
    private List`1<UInt32> diFatEntries;
    private UInt32 numFatSectors;
    private UInt32 numDiFatSectors;
    private UInt32 diFatStartSector;
    internal UInt32 NumFatSectors { get; }
    internal UInt32 NumDiFatSectors { get; }
    internal UInt32 DiFatStartSector { get; }
    public Fat(StructuredStorageContext context);
    internal UInt32 get_NumFatSectors();
    internal UInt32 get_NumDiFatSectors();
    internal UInt32 get_DiFatStartSector();
    private UInt32 WriteDiFatEntriesToFat(UInt32 sectorCount);
    private void writeDiFatSectorsToStream(UInt32 fatStartSector);
    internal virtual void Write();
    internal void ThrowInconsistencyException();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Writer.Header : AbstractHeader {
    private List`1<byte> diFatSectors;
    private StructuredStorageContext context;
    private int diFatSectorCount;
    public Header(StructuredStorageContext context);
    private void Init();
    internal void WriteNextDiFatSector(UInt32 sector);
    internal void Write();
    internal void writeToStream(Stream stream);
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Writer.MiniFat : AbstractFat {
    private UInt32 miniFatStart;
    private UInt32 numMiniFatSectors;
    internal UInt32 MiniFatStart { get; }
    internal UInt32 NumMiniFatSectors { get; }
    public MiniFat(StructuredStorageContext context);
    internal UInt32 get_MiniFatStart();
    internal UInt32 get_NumMiniFatSectors();
    internal virtual void Write();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Writer.OutputHandler : AbstractIOHandler {
    internal Stream BaseStream { get; }
    public ulong IOStreamSize { get; }
    public OutputHandler(Stream memoryStream);
    internal Stream get_BaseStream();
    public virtual ulong get_IOStreamSize();
    internal void WriteByte(byte value);
    internal void WriteUInt16(ushort value);
    internal void WriteUInt32(UInt32 value);
    internal void WriteUInt64(ulong value);
    internal void Write(Byte[] data);
    internal void WriteSectors(Byte[] data, ushort sectorSize, byte padding);
    internal void WriteSectors(Byte[] data, int dataSize, ushort sectorSize, byte padding);
    internal void WriteSectors(Byte[] data, ushort sectorSize, UInt32 padding);
    internal void WriteToStream(Stream stream);
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Writer.RootDirectoryEntry : StorageDirectoryEntry {
    private OutputHandler miniStream;
    internal OutputHandler MiniStream { get; }
    internal RootDirectoryEntry(StructuredStorageContext context);
    internal OutputHandler get_MiniStream();
    protected internal virtual void WriteReferencedStream();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Writer.StorageDirectoryEntry : BaseDirectoryEntry {
    private List`1<StorageDirectoryEntry> storageDirectoryEntries;
    private List`1<StreamDirectoryEntry> streamDirectoryEntries;
    private List`1<BaseDirectoryEntry> allDirectoryEntries;
    internal List`1<StreamDirectoryEntry> StreamDirectoryEntries { get; }
    internal List`1<StorageDirectoryEntry> StorageDirectoryEntries { get; }
    public StorageDirectoryEntry(string name, StructuredStorageContext context);
    internal List`1<StreamDirectoryEntry> get_StreamDirectoryEntries();
    internal List`1<StorageDirectoryEntry> get_StorageDirectoryEntries();
    public void AddStreamDirectoryEntry(string name, Stream stream);
    public StorageDirectoryEntry AddStorageDirectoryEntry(string name);
    public void setClsId(Guid clsId);
    internal List`1<BaseDirectoryEntry> RecursiveGetAllDirectoryEntries();
    private List`1<BaseDirectoryEntry> RecursiveGetAllDirectoryEntries(List`1<BaseDirectoryEntry> result);
    internal void RecursiveCreateRedBlackTrees();
    private UInt32 CreateRedBlackTree();
    private UInt32 SetRelationsAndColorRecursive(List`1<BaseDirectoryEntry> entryList, int treeHeight, int treeLevel);
    private static int GetMiddleIndex(List`1<BaseDirectoryEntry> list);
    protected int DirectoryEntryComparison(BaseDirectoryEntry a, BaseDirectoryEntry b);
    protected internal virtual void WriteReferencedStream();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Writer.StreamDirectoryEntry : BaseDirectoryEntry {
    private Stream stream;
    public StreamDirectoryEntry(string name, Stream stream, StructuredStorageContext context);
    protected internal virtual void WriteReferencedStream();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Internal.Writer.StructuredStorageContext : object {
    private Header header;
    private Fat fat;
    private MiniFat miniFat;
    private OutputHandler tempOutputStream;
    private OutputHandler directoryStream;
    private InternalBitConverter internalBitConverter;
    private RootDirectoryEntry rootDirectoryEntry;
    private UInt32 sidCounter;
    internal Header Header { get; }
    internal Fat Fat { get; }
    internal MiniFat MiniFat { get; }
    internal OutputHandler TempOutputStream { get; internal set; }
    internal OutputHandler DirectoryStream { get; }
    internal InternalBitConverter InternalBitConverter { get; }
    public RootDirectoryEntry RootDirectoryEntry { get; }
    internal Header get_Header();
    internal Fat get_Fat();
    internal MiniFat get_MiniFat();
    internal OutputHandler get_TempOutputStream();
    internal void set_TempOutputStream(OutputHandler value);
    internal OutputHandler get_DirectoryStream();
    internal InternalBitConverter get_InternalBitConverter();
    public RootDirectoryEntry get_RootDirectoryEntry();
    internal UInt32 GetNewSid();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Reader.DirectoryEntry : AbstractDirectoryEntry {
    private InputHandler fileHandler;
    private Header header;
    internal DirectoryEntry(Header header, InputHandler fileHandler, UInt32 sid, string path);
    private void ReadDirectoryEntry();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Reader.StructuredStorageReader : object {
    private InputHandler fileHandler;
    private Header header;
    private Fat fat;
    private MiniFat miniFat;
    private DirectoryTree directory;
    public ICollection`1<string> FullNameOfAllEntries { get; }
    public ICollection`1<string> FullNameOfAllStreamEntries { get; }
    public ICollection`1<DirectoryEntry> AllEntries { get; }
    public ICollection`1<DirectoryEntry> AllStreamEntries { get; }
    public DirectoryEntry RootDirectoryEntry { get; }
    public StructuredStorageReader(Stream stream);
    public StructuredStorageReader(Stream stream, bool keepOpen);
    public ICollection`1<string> get_FullNameOfAllEntries();
    public ICollection`1<string> get_FullNameOfAllStreamEntries();
    public ICollection`1<DirectoryEntry> get_AllEntries();
    public ICollection`1<DirectoryEntry> get_AllStreamEntries();
    public DirectoryEntry get_RootDirectoryEntry();
    public VirtualStream GetStream(string path);
    public DirectoryEntry GetEntry(string path);
    public void Close();
    public void Dispose();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Reader.VirtualStream : Stream {
    private AbstractFat fat;
    private string name;
    private long length;
    private List`1<UInt32> sectors;
    private UInt32 startSector;
    private UInt32 lastReadSectorIndex;
    private Byte[] lastReadSector;
    private long position;
    public long Position { get; public set; }
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public VirtualStream(AbstractFat fat, UInt32 startSector, long sizeOfStream, string name);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual int Read(Byte[] array, int offset, int count);
    public int Read(Byte[] array, int offset, int count, long position);
    private void CheckConsistency();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public Stream Clone();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Writer.StructuredStorageWriter : object {
    private StructuredStorageContext context;
    public StorageDirectoryEntry RootDirectoryEntry { get; }
    public StorageDirectoryEntry get_RootDirectoryEntry();
    public void Write(Stream outputStream);
    public void AddStreamDirectoryEntry(string name, Stream stream);
    public void AddStreamDirectoryEntry(string name, BinaryWriter binaryWriter);
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.StructuredStorage.Writer.VirtualStream : object {
    private AbstractFat fat;
    private Stream stream;
    private ushort sectorSize;
    private OutputHandler outputHander;
    private UInt32 startSector;
    private UInt32 sectorCount;
    public UInt32 StartSector { get; }
    public ulong Length { get; }
    public UInt32 SectorCount { get; }
    public VirtualStream(Stream stream, AbstractFat fat, ushort sectorSize, OutputHandler outputHander);
    public UInt32 get_StartSector();
    public ulong get_Length();
    public UInt32 get_SectorCount();
    public void Write();
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Svg.CoordinateParser : object {
    public static double TransformFloat(string value);
    public static Double[] GetNumbers(string points);
}
public interface DevExpress.Utils.Svg.ISvgBitmap {
}
public interface DevExpress.Utils.Svg.ISvgImage {
}
internal static class DevExpress.Utils.Svg.MatrixHelper : object {
    internal static IDxMatrix CreateRotationMatrix(double angle, double centerX, double centerY, double scale);
    internal static IDxMatrix CreateScaleMatrix(double scaleX, double scaleY);
    internal static IDxMatrix CreateSkewMatrix(double angleX, double angleY, double scale);
    internal static IDxMatrix CreateTranslateMatrix(double offsetX, double offsetY, double scale);
    internal static IDxMatrix FromPoints(List`1<double> points, double scale);
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgPreserveAspectRatioConverter")]
public class DevExpress.Utils.Svg.SvgAspectRatio : object {
    [CompilerGeneratedAttribute]
private SvgPreserveAspectRatio <Align>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Slice>k__BackingField;
    public SvgPreserveAspectRatio Align { get; public set; }
    public bool Slice { get; public set; }
    public bool Meet { get; }
    public SvgAspectRatio(SvgPreserveAspectRatio align);
    public SvgAspectRatio(SvgPreserveAspectRatio align, bool slice);
    [CompilerGeneratedAttribute]
public SvgPreserveAspectRatio get_Align();
    [CompilerGeneratedAttribute]
public void set_Align(SvgPreserveAspectRatio value);
    [CompilerGeneratedAttribute]
public bool get_Slice();
    [CompilerGeneratedAttribute]
public void set_Slice(bool value);
    public bool get_Meet();
    public virtual string ToString();
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgBackgroundTypeConverter : SvgViewBoxTypeConverter {
    public static SvgBackgroundTypeConverter Instance;
    private static SvgBackgroundTypeConverter();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[SvgElementNameAliasAttribute("circle")]
public class DevExpress.Utils.Svg.SvgCircle : SvgShapeRenderingElement {
    [SvgPropertyNameAliasAttribute("cx")]
public double CenterX { get; private set; }
    [SvgPropertyNameAliasAttribute("cy")]
public double CenterY { get; private set; }
    [SvgPropertyNameAliasAttribute("r")]
public double Radius { get; private set; }
    public double get_CenterX();
    private void set_CenterX(double value);
    public double get_CenterY();
    private void set_CenterY(double value);
    public double get_Radius();
    private void set_Radius(double value);
    public static SvgCircle Create(SvgElementProperties properties, double centerX, double centerY, double radius);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[SvgElementNameAliasAttribute("clipPath")]
public class DevExpress.Utils.Svg.SvgClipPath : SvgElement {
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    public static SvgClipPath Create(SvgElementProperties properties);
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgClipRule : Enum {
    public int value__;
    public static SvgClipRule NonZero;
    public static SvgClipRule EvenOdd;
}
public class DevExpress.Utils.Svg.SvgContent : SvgElement {
    public string Content { get; internal set; }
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    public string get_Content();
    internal void set_Content(string value);
    public static SvgContent Create(string content);
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgCoordinateUnits : Enum {
    public int value__;
    public static SvgCoordinateUnits ObjectBoundingBox;
    public static SvgCoordinateUnits UserSpaceOnUse;
}
[SvgElementNameAliasAttribute("defs")]
public class DevExpress.Utils.Svg.SvgDefinitions : SvgElement {
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
public abstract class DevExpress.Utils.Svg.SvgElement : object {
    protected Hashtable valueHash;
    private Hashtable defaultValueHash;
    public static string DefaultColor;
    public static int RoundDecimal;
    private IList`1<SvgElement> elementsCore;
    private Stack`1<SvgStyle> stylesCore;
    private SvgElement parentCore;
    [CompilerGeneratedAttribute]
private SvgTransformCollection <Transformations>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgStyle <DefaultStyle>k__BackingField;
    public IList`1<SvgElement> Elements { get; }
    public Stack`1<SvgStyle> Styles { get; }
    public SvgElement Parent { get; }
    [SvgPropertyNameAliasAttribute("fill")]
[DefaultValueAttribute("")]
public string Fill { get; internal set; }
    [SvgPropertyNameAliasAttribute("opacity")]
[DefaultValueAttribute("")]
public Nullable`1<double> Opacity { get; internal set; }
    [SvgPropertyNameAliasAttribute("fill-opacity")]
[DefaultValueAttribute("")]
public Nullable`1<double> FillOpacity { get; internal set; }
    [SvgPropertyNameAliasAttribute("id")]
public string Id { get; internal set; }
    [SvgPropertyNameAliasAttribute("class")]
public string StyleName { get; internal set; }
    [SvgPropertyNameAliasAttribute("transform")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgTransformConverter")]
public SvgTransformCollection Transformations { get; internal set; }
    [SvgPropertyNameAliasAttribute("style")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgStyleConverter")]
public SvgStyle Style { get; internal set; }
    [SvgPropertyNameAliasAttribute("stroke")]
[DefaultValueAttribute("")]
public string Stroke { get; internal set; }
    [SvgPropertyNameAliasAttribute("stroke-width")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit StrokeWidth { get; internal set; }
    [SvgPropertyNameAliasAttribute("stroke-linecap")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgStrokeLineCap StrokeLineCap { get; internal set; }
    [SvgPropertyNameAliasAttribute("stroke-linejoin")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgStrokeLineJoin StrokeLineJoin { get; internal set; }
    [SvgPropertyNameAliasAttribute("stroke-miterlimit")]
[DefaultValueAttribute("")]
public Nullable`1<double> StrokeMiterLimit { get; internal set; }
    [SvgPropertyNameAliasAttribute("stroke-dasharray")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitCollectionConverter")]
public SvgUnitCollection StrokeDashArray { get; internal set; }
    [SvgPropertyNameAliasAttribute("stroke-dashoffset")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit StrokeDashOffset { get; internal set; }
    [SvgPropertyNameAliasAttribute("stroke-opacity")]
[DefaultValueAttribute("")]
public Nullable`1<double> StrokeOpacity { get; internal set; }
    [SvgPropertyNameAliasAttribute("display")]
[DefaultValueAttribute("")]
public string Display { get; internal set; }
    [SvgPropertyNameAliasAttribute("mask")]
[DefaultValueAttribute("")]
public Uri Mask { get; internal set; }
    [SvgPropertyNameAliasAttribute("clip-path")]
[DefaultValueAttribute("")]
public Uri ClipPath { get; internal set; }
    [SvgPropertyNameAliasAttribute("clip-rule")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgClipRule ClipRule { get; internal set; }
    [SvgPropertyNameAliasAttribute("fill-rule")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgFillRule FillRule { get; internal set; }
    [SvgPropertyNameAliasAttribute("font-family")]
public string FontFamily { get; internal set; }
    [SvgPropertyNameAliasAttribute("font-size")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit FontSize { get; internal set; }
    public Nullable`1<double> Brightness { get; internal set; }
    public SvgStyle DefaultStyle { get; internal set; }
    public bool UsePalette { get; internal set; }
    [SvgPropertyNameAliasAttribute("tag")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgTagConverter")]
public object Tag { get; internal set; }
    internal SvgPaletteUseMode PaletteUseMode { get; internal set; }
    internal bool UsePaletteForFill { get; }
    internal bool UsePaletteForStroke { get; }
    public static double Round(double value);
    public IList`1<SvgElement> get_Elements();
    public void AddElement(SvgElement element);
    protected virtual void AddElementCore(SvgElement element);
    public Stack`1<SvgStyle> get_Styles();
    public SvgElement get_Parent();
    public string get_Fill();
    internal void set_Fill(string value);
    public Nullable`1<double> get_Opacity();
    internal void set_Opacity(Nullable`1<double> value);
    public Nullable`1<double> get_FillOpacity();
    internal void set_FillOpacity(Nullable`1<double> value);
    public string get_Id();
    internal void set_Id(string value);
    public string get_StyleName();
    internal void set_StyleName(string value);
    [CompilerGeneratedAttribute]
public SvgTransformCollection get_Transformations();
    [CompilerGeneratedAttribute]
internal void set_Transformations(SvgTransformCollection value);
    public SvgStyle get_Style();
    internal void set_Style(SvgStyle value);
    public string get_Stroke();
    internal void set_Stroke(string value);
    public SvgUnit get_StrokeWidth();
    internal void set_StrokeWidth(SvgUnit value);
    public SvgStrokeLineCap get_StrokeLineCap();
    internal void set_StrokeLineCap(SvgStrokeLineCap value);
    public SvgStrokeLineJoin get_StrokeLineJoin();
    internal void set_StrokeLineJoin(SvgStrokeLineJoin value);
    public Nullable`1<double> get_StrokeMiterLimit();
    internal void set_StrokeMiterLimit(Nullable`1<double> value);
    public SvgUnitCollection get_StrokeDashArray();
    internal void set_StrokeDashArray(SvgUnitCollection value);
    public SvgUnit get_StrokeDashOffset();
    internal void set_StrokeDashOffset(SvgUnit value);
    public Nullable`1<double> get_StrokeOpacity();
    internal void set_StrokeOpacity(Nullable`1<double> value);
    public string get_Display();
    internal void set_Display(string value);
    public Uri get_Mask();
    internal void set_Mask(Uri value);
    public Uri get_ClipPath();
    internal void set_ClipPath(Uri value);
    public SvgClipRule get_ClipRule();
    internal void set_ClipRule(SvgClipRule value);
    public SvgFillRule get_FillRule();
    internal void set_FillRule(SvgFillRule value);
    public virtual string get_FontFamily();
    internal virtual void set_FontFamily(string value);
    public virtual SvgUnit get_FontSize();
    internal virtual void set_FontSize(SvgUnit value);
    public Nullable`1<double> get_Brightness();
    internal void set_Brightness(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public SvgStyle get_DefaultStyle();
    [CompilerGeneratedAttribute]
internal void set_DefaultStyle(SvgStyle value);
    public bool get_UsePalette();
    internal void set_UsePalette(bool value);
    public object get_Tag();
    internal void set_Tag(object value);
    internal SvgPaletteUseMode get_PaletteUseMode();
    internal void set_PaletteUseMode(SvgPaletteUseMode value);
    internal bool get_UsePaletteForFill();
    internal bool get_UsePaletteForStroke();
    protected virtual void Assign(SvgElementProperties properties);
    public SvgElement Clone(SvgElementProperties properties);
    public abstract virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    public virtual T DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    [EditorBrowsableAttribute("1")]
public void SetUsePalette(bool value);
    [EditorBrowsableAttribute("1")]
public void SetPaletteUseMode(SvgPaletteUseMode svgPaletteUseMode, bool enabled);
    protected internal void SetAttribute(string key, string value);
    protected internal void SetUnit(string key, SvgUnit value);
    protected internal void SetDouble(string key, double value);
    protected virtual void SetValueCore(object key, T value);
    protected virtual void SetDefaultValueCore(object key, T value);
    protected virtual void SetValueCore(object key, T value, Action valueChangedCallback);
    protected virtual bool TryGetValueCore(object key, T defaultValue, T& result);
    protected internal object GetValueForSerialize(object key, Type type);
    protected virtual T GetValueCore(object key, bool isInherit);
    protected virtual T GetValueCore(object key, T defaultValue, bool isInherit);
    protected virtual T GetValueFromCurrentStyleCore(object key, T defaultValue, bool isInherit);
    private bool TryGetValueFromCurrentStyle(object key, T defaultValue, T& result);
    protected virtual T GetDefaultValueCore(object key);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void SetParent(SvgElement parent);
    private T GetValueFromDefaultStyle(object key);
    private bool TryGetValueFromStyle(object key, T defaultValue, T& result);
    [CompilerGeneratedAttribute]
private bool <TryGetValueFromCurrentStyle>b__121_0(SvgStyle x);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgElementCreator : object {
    private static Dictionary`2<string, Func`1<SvgElement>> ElementTypes;
    private static Dictionary`2<string, Func`2<Double[], SvgTransform>> TransformTypes;
    private static DoubleConverter DoubleConverter;
    private static UriTypeConverter UriConverter;
    private static NullableConverter NullableDoubleConverter;
    private static Dictionary`2<Type, Dictionary`2<string, Tuple`2<Action`2<object, object>, TypeConverter>>> propertyMutators;
    private static SvgElementCreator();
    public static SvgTransform CreateTransform(string transformName, Double[] data);
    public static SvgElement CreateElement(XmlReader reader, List`1<string> unknownTags);
    public static SvgElement CreateElement(string elementName, XmlReader reader, List`1<string> unknownTags);
    private static SvgElement SetAttributes(SvgElement element, XmlReader reader, List`1<string> unknownTags);
    private static SvgElement SetUnknownTag(SvgElement element, string attributeName, List`1<string> unknownTags);
    public static void SetPropertyValue(SvgElement element, string attributeName, string value, List`1<string> unknownTags);
    private static Tuple`2<Action`2<object, object>, TypeConverter> GetPropertyTuple(string attributeName, Type elementType);
    private static Tuple`2<Action`2<object, object>, TypeConverter> GetPropertyTuple(PropertyDescriptor descriptor, string attributeName, Type elementType);
    private static Dictionary`2<string, Tuple`2<Action`2<object, object>, TypeConverter>> EnsureMutators(Type elementType);
    private static Action`2<object, object> MakeMutator(Type type, Type valueType, string memberName);
    private static MemberInfo GetMemberInfo(Type type, string memberName);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgElementNameAliasAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public SvgElementNameAliasAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
}
public class DevExpress.Utils.Svg.SvgElementProperties : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StyleName>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgTransformCollection <Transformations>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Display>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Opacity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <FillOpacity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgUnit <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgStrokeLineCap <StrokeLineCap>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgStrokeLineJoin <StrokeLineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StrokeMiterLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgUnitCollection <StrokeDashArray>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgUnit <StrokeDashOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StrokeOpacity>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgFillRule <FillRule>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgClipRule <ClipRule>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ClipPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Brightness>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePalette>k__BackingField;
    public string Id { get; public set; }
    public string StyleName { get; public set; }
    public SvgTransformCollection Transformations { get; private set; }
    public SvgStyle Style { get; public set; }
    public string Display { get; public set; }
    public string Fill { get; public set; }
    public Nullable`1<double> Opacity { get; public set; }
    public Nullable`1<double> FillOpacity { get; public set; }
    public string Stroke { get; public set; }
    public SvgUnit StrokeWidth { get; public set; }
    public SvgStrokeLineCap StrokeLineCap { get; public set; }
    public SvgStrokeLineJoin StrokeLineJoin { get; public set; }
    public Nullable`1<double> StrokeMiterLimit { get; public set; }
    public SvgUnitCollection StrokeDashArray { get; public set; }
    public SvgUnit StrokeDashOffset { get; public set; }
    public Nullable`1<double> StrokeOpacity { get; public set; }
    public SvgFillRule FillRule { get; public set; }
    public SvgClipRule ClipRule { get; public set; }
    public Uri ClipPath { get; public set; }
    public Nullable`1<double> Brightness { get; public set; }
    public bool UsePalette { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_StyleName();
    [CompilerGeneratedAttribute]
public void set_StyleName(string value);
    [CompilerGeneratedAttribute]
public SvgTransformCollection get_Transformations();
    [CompilerGeneratedAttribute]
private void set_Transformations(SvgTransformCollection value);
    [CompilerGeneratedAttribute]
public SvgStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(SvgStyle value);
    [CompilerGeneratedAttribute]
public string get_Display();
    [CompilerGeneratedAttribute]
public void set_Display(string value);
    [CompilerGeneratedAttribute]
public string get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Opacity();
    [CompilerGeneratedAttribute]
public void set_Opacity(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_FillOpacity();
    [CompilerGeneratedAttribute]
public void set_FillOpacity(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public string get_Stroke();
    [CompilerGeneratedAttribute]
public void set_Stroke(string value);
    [CompilerGeneratedAttribute]
public SvgUnit get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(SvgUnit value);
    [CompilerGeneratedAttribute]
public SvgStrokeLineCap get_StrokeLineCap();
    [CompilerGeneratedAttribute]
public void set_StrokeLineCap(SvgStrokeLineCap value);
    [CompilerGeneratedAttribute]
public SvgStrokeLineJoin get_StrokeLineJoin();
    [CompilerGeneratedAttribute]
public void set_StrokeLineJoin(SvgStrokeLineJoin value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StrokeMiterLimit();
    [CompilerGeneratedAttribute]
public void set_StrokeMiterLimit(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public SvgUnitCollection get_StrokeDashArray();
    [CompilerGeneratedAttribute]
public void set_StrokeDashArray(SvgUnitCollection value);
    [CompilerGeneratedAttribute]
public SvgUnit get_StrokeDashOffset();
    [CompilerGeneratedAttribute]
public void set_StrokeDashOffset(SvgUnit value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StrokeOpacity();
    [CompilerGeneratedAttribute]
public void set_StrokeOpacity(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public SvgFillRule get_FillRule();
    [CompilerGeneratedAttribute]
public void set_FillRule(SvgFillRule value);
    [CompilerGeneratedAttribute]
public SvgClipRule get_ClipRule();
    [CompilerGeneratedAttribute]
public void set_ClipRule(SvgClipRule value);
    [CompilerGeneratedAttribute]
public Uri get_ClipPath();
    [CompilerGeneratedAttribute]
public void set_ClipPath(Uri value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Brightness();
    [CompilerGeneratedAttribute]
public void set_Brightness(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_UsePalette();
    [CompilerGeneratedAttribute]
public void set_UsePalette(bool value);
}
[SvgElementNameAliasAttribute("ellipse")]
public class DevExpress.Utils.Svg.SvgEllipse : SvgShapeRenderingElement {
    [SvgPropertyNameAliasAttribute("cx")]
public double CenterX { get; private set; }
    [SvgPropertyNameAliasAttribute("cy")]
public double CenterY { get; private set; }
    [SvgPropertyNameAliasAttribute("rx")]
public double RadiusX { get; private set; }
    [SvgPropertyNameAliasAttribute("ry")]
public double RadiusY { get; private set; }
    public double get_CenterX();
    private void set_CenterX(double value);
    public double get_CenterY();
    private void set_CenterY(double value);
    public double get_RadiusX();
    private void set_RadiusX(double value);
    public double get_RadiusY();
    private void set_RadiusY(double value);
    public static SvgEllipse Create(SvgElementProperties properties, double centerX, double centerY, double radiusX, double radiusY);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[SvgElementNameAliasAttribute("image")]
public class DevExpress.Utils.Svg.SvgEmbeddedImage : SvgElement {
    [SvgPropertyNameAliasAttribute("x")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit X { get; private set; }
    [SvgPropertyNameAliasAttribute("y")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Y { get; private set; }
    [SvgPropertyNameAliasAttribute("width")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Width { get; private set; }
    [SvgPropertyNameAliasAttribute("height")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Height { get; private set; }
    [SvgPropertyNameAliasAttribute("href")]
public string Href { get; internal set; }
    [SvgPropertyNameAliasAttribute("preserveAspectRatio")]
public SvgAspectRatio AspectRatio { get; private set; }
    public SvgUnit get_X();
    private void set_X(SvgUnit value);
    public SvgUnit get_Y();
    private void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    private void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    private void set_Height(SvgUnit value);
    public string get_Href();
    internal void set_Href(string value);
    public SvgAspectRatio get_AspectRatio();
    private void set_AspectRatio(SvgAspectRatio value);
    public static SvgEmbeddedImage Create(SvgUnit width, SvgUnit height, SvgUnit x, SvgUnit y, string href, SvgAspectRatio aspectRatio);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgEnumConverter : EnumConverter {
    public SvgEnumConverter(Type type);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgFillRule : Enum {
    public int value__;
    public static SvgFillRule NonZero;
    public static SvgFillRule EvenOdd;
    public static SvgFillRule Inherit;
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgFontStyle : Enum {
    public int value__;
    public static SvgFontStyle Normal;
    public static SvgFontStyle Oblique;
    public static SvgFontStyle Italic;
    public static SvgFontStyle All;
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgFontVariant : Enum {
    public int value__;
    public static SvgFontVariant Normal;
    public static SvgFontVariant SmallCaps;
    public static SvgFontVariant Inherit;
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgFontWeightConverter")]
[FlagsAttribute]
public enum DevExpress.Utils.Svg.SvgFontWeight : Enum {
    public int value__;
    public static SvgFontWeight All;
    public static SvgFontWeight Inherit;
    public static SvgFontWeight Normal;
    public static SvgFontWeight Bold;
    public static SvgFontWeight Bolder;
    public static SvgFontWeight Lighter;
    public static SvgFontWeight W100;
    public static SvgFontWeight W200;
    public static SvgFontWeight W300;
    public static SvgFontWeight W400;
    public static SvgFontWeight W500;
    public static SvgFontWeight W600;
    public static SvgFontWeight W700;
    public static SvgFontWeight W800;
    public static SvgFontWeight W900;
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgFontWeightConverter : EnumConverter {
    public SvgFontWeightConverter(Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public abstract class DevExpress.Utils.Svg.SvgGradient : SvgElement {
    [CompilerGeneratedAttribute]
private SvgTransformCollection <GradientTransformation>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SvgGradientStop> <Stops>k__BackingField;
    private Nullable`1<int> hashCode;
    [SvgPropertyNameAliasAttribute("gradientUnits")]
public SvgCoordinateUnits GradientUnits { get; protected set; }
    [SvgPropertyNameAliasAttribute("spreadMethod")]
public SvgGradientSpreadMethod SpreadMethod { get; protected set; }
    [SvgPropertyNameAliasAttribute("gradientTransform")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgTransformConverter")]
public SvgTransformCollection GradientTransformation { get; internal set; }
    public IList`1<SvgGradientStop> Stops { get; internal set; }
    public SvgCoordinateUnits get_GradientUnits();
    protected void set_GradientUnits(SvgCoordinateUnits value);
    public SvgGradientSpreadMethod get_SpreadMethod();
    protected void set_SpreadMethod(SvgGradientSpreadMethod value);
    [CompilerGeneratedAttribute]
public SvgTransformCollection get_GradientTransformation();
    [CompilerGeneratedAttribute]
internal void set_GradientTransformation(SvgTransformCollection value);
    [CompilerGeneratedAttribute]
public IList`1<SvgGradientStop> get_Stops();
    [CompilerGeneratedAttribute]
internal void set_Stops(IList`1<SvgGradientStop> value);
    protected virtual void AddElementCore(SvgElement element);
    public static bool op_Equality(SvgGradient gradient1, SvgGradient gradient2);
    private static bool EqualsCore(SvgGradient gradient1, SvgGradient gradient2);
    public static bool op_Inequality(SvgGradient gradient1, SvgGradient gradient2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual int GetHashCodeCore();
    public virtual T DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgGradientSpreadMethod : Enum {
    public int value__;
    public static SvgGradientSpreadMethod Pad;
    public static SvgGradientSpreadMethod Reflect;
    public static SvgGradientSpreadMethod Repeat;
}
[SvgElementNameAliasAttribute("stop")]
public class DevExpress.Utils.Svg.SvgGradientStop : SvgElement {
    [SvgPropertyNameAliasAttribute("offset")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitOffsetConverter")]
public SvgUnit Offset { get; internal set; }
    [SvgPropertyNameAliasAttribute("stop-color")]
[DefaultValueAttribute("")]
public string StopColor { get; internal set; }
    [SvgPropertyNameAliasAttribute("stop-opacity")]
[DefaultValueAttribute("")]
public Nullable`1<double> StopOpacity { get; internal set; }
    public SvgUnit get_Offset();
    internal void set_Offset(SvgUnit value);
    public string get_StopColor();
    internal void set_StopColor(string value);
    public Nullable`1<double> get_StopOpacity();
    internal void set_StopOpacity(Nullable`1<double> value);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    public static SvgGradientStop Create(SvgUnit offset, string stopColor, Nullable`1<double> stopOpacity);
}
[SvgElementNameAliasAttribute("g")]
public class DevExpress.Utils.Svg.SvgGroup : SvgElement {
    public static SvgGroup Create(SvgElementProperties properties);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[TypeConverterAttribute("DevExpress.Utils.Design.BinaryTypeConverter")]
public class DevExpress.Utils.Svg.SvgImage : object {
    internal IList`1<object> AttachedResources;
    private List`1<SvgElement> elementsCore;
    private List`1<SvgStyle> stylesCore;
    private IEnumerable`1<string> unknownTagsCore;
    private SvgRoot rootCore;
    private SvgStyle defaultStyleCore;
    internal object Owner;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OffsetX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OffsetY>k__BackingField;
    public IEnumerable`1<string> UnknownTags { get; }
    public SvgStyle DefaultStyle { get; public set; }
    public List`1<SvgElement> Elements { get; }
    public List`1<SvgStyle> Styles { get; }
    public object Tag { get; public set; }
    [DescriptionAttribute("Returns the image width.")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.Svg.SvgImage.Width")]
public double Width { get; private set; }
    [DescriptionAttribute("Returns the image height.")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.Svg.SvgImage.Height")]
public double Height { get; private set; }
    [DescriptionAttribute("")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.Svg.SvgImage.OffsetX")]
public double OffsetX { get; private set; }
    [DescriptionAttribute("Returns the vertical image offset.")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.Utils.Svg.SvgImage.OffsetY")]
public double OffsetY { get; private set; }
    public SvgRoot Root { get; }
    public SvgImage(Stream stream);
    public SvgImage(Type type, string resource);
    protected SvgImage(SerializationInfo info, StreamingContext context);
    public IEnumerable`1<string> get_UnknownTags();
    public SvgStyle get_DefaultStyle();
    public void set_DefaultStyle(SvgStyle value);
    protected virtual void UpdateDefaultStyle(SvgElement element);
    public static SvgImage FromFile(string path);
    public static SvgImage FromStream(Stream stream);
    public static SvgImage FromResources(string name, Assembly assembly);
    public static ISvgImage FromStream(Dictionary`2& perThreadCache, string name, Assembly assembly);
    public void Save(string filePath);
    public void Save(Stream stream);
    [EditorBrowsableAttribute("1")]
public static SvgImage Create(SvgRoot root);
    public List`1<SvgElement> get_Elements();
    public List`1<SvgStyle> get_Styles();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(double value);
    [CompilerGeneratedAttribute]
public double get_OffsetX();
    [CompilerGeneratedAttribute]
private void set_OffsetX(double value);
    [CompilerGeneratedAttribute]
public double get_OffsetY();
    [CompilerGeneratedAttribute]
private void set_OffsetY(double value);
    public SvgRoot get_Root();
    protected internal void SetRoot(SvgRoot root);
    private void GetDimensions();
    public static SvgImage op_Implicit(Byte[] data);
    private sealed virtual override object System.ICloneable.Clone();
    public SvgImage Clone(Action`2<SvgElement, Hashtable> updateStyle);
    public SvgImage Clone();
    public Matrix GetViewBoxTransform();
    public IDxMatrix GetDxViewBoxTransform();
    [EditorBrowsableAttribute("1")]
public SvgImage SetTransform(Matrix transform);
    [EditorBrowsableAttribute("1")]
public Matrix GetTransform();
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[SvgElementNameAliasAttribute("line")]
public class DevExpress.Utils.Svg.SvgLine : SvgShapeRenderingElement {
    [SvgPropertyNameAliasAttribute("x1")]
public double StartX { get; private set; }
    [SvgPropertyNameAliasAttribute("y1")]
public double StartY { get; private set; }
    [SvgPropertyNameAliasAttribute("x2")]
public double EndX { get; private set; }
    [SvgPropertyNameAliasAttribute("y2")]
public double EndY { get; private set; }
    public double get_StartX();
    private void set_StartX(double value);
    public double get_StartY();
    private void set_StartY(double value);
    public double get_EndX();
    private void set_EndX(double value);
    public double get_EndY();
    private void set_EndY(double value);
    public static SvgLine Create(SvgElementProperties properties, double startX, double startY, double endX, double endY);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[SvgElementNameAliasAttribute("linearGradient")]
public class DevExpress.Utils.Svg.SvgLinearGradient : SvgGradient {
    [SvgPropertyNameAliasAttribute("x1")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit StartX { get; protected set; }
    [SvgPropertyNameAliasAttribute("y1")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit StartY { get; protected set; }
    [SvgPropertyNameAliasAttribute("x2")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit EndX { get; protected set; }
    [SvgPropertyNameAliasAttribute("y2")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit EndY { get; protected set; }
    public SvgUnit get_StartX();
    protected void set_StartX(SvgUnit value);
    public SvgUnit get_StartY();
    protected void set_StartY(SvgUnit value);
    public SvgUnit get_EndX();
    protected void set_EndX(SvgUnit value);
    public SvgUnit get_EndY();
    protected void set_EndY(SvgUnit value);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    public virtual int GetHashCode();
    public static SvgLinearGradient Create(SvgCoordinateUnits gradientUnits, SvgGradientSpreadMethod spreadMethod, SvgUnit startX, SvgUnit startY, SvgUnit endX, SvgUnit endY);
    public static SvgLinearGradient Create(SvgElementProperties properties, SvgCoordinateUnits gradientUnits, SvgGradientSpreadMethod spreadMethod, SvgUnit startX, SvgUnit startY, SvgUnit endX, SvgUnit endY);
}
public class DevExpress.Utils.Svg.SvgLoader : object {
    private static int DefaultFileStreamBufferSize;
    private static FieldInfo fi_XmlException_res;
    public static SvgImage LoadFromFile(string path);
    public static SvgImage LoadFromStream(Stream stream);
    public static SvgImage LoadFromStream(Stream stream, SvgImage image);
    public static SvgImage ParseDocument(XmlReader reader, SvgImage image);
    private static List`1<SvgElement> ParseDocumentCore(XmlReader reader, SvgImage result, List`1<SvgStyle> styles);
    private static SvgElement GetTopElement(Stack`1<SvgElement> elementStack);
    private static void ApplyElementStyle(SvgElement element, List`1<SvgStyle> styles, string id);
    private static void ApplyStyles(SvgElement element, List`1<SvgStyle> styles, string id);
    private static void ApplyStylesByName(SvgElement element, List`1<SvgStyle> styles, string styleName);
    private static void ApplyParentStyle(SvgElement element, SvgStyle parentStyle);
    private static void AddStyle(SvgElement element, SvgStyle style);
}
[SvgElementNameAliasAttribute("mask")]
public class DevExpress.Utils.Svg.SvgMask : SvgElement {
    [SvgPropertyNameAliasAttribute("x")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit X { get; private set; }
    [SvgPropertyNameAliasAttribute("y")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Y { get; private set; }
    [SvgPropertyNameAliasAttribute("width")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Width { get; private set; }
    [SvgPropertyNameAliasAttribute("height")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Height { get; private set; }
    [SvgPropertyNameAliasAttribute("maskunits")]
public SvgCoordinateUnits MaskUnits { get; protected set; }
    [SvgPropertyNameAliasAttribute("maskcontentunits")]
public SvgCoordinateUnits MaskContentUnits { get; protected set; }
    public SvgUnit get_X();
    private void set_X(SvgUnit value);
    public SvgUnit get_Y();
    private void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    private void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    private void set_Height(SvgUnit value);
    public SvgCoordinateUnits get_MaskUnits();
    protected void set_MaskUnits(SvgCoordinateUnits value);
    public SvgCoordinateUnits get_MaskContentUnits();
    protected void set_MaskContentUnits(SvgCoordinateUnits value);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[SvgTransformNameAliasAttribute("matrix")]
public class DevExpress.Utils.Svg.SvgMatrix : SvgTransform {
    [CompilerGeneratedAttribute]
private List`1<double> <Points>k__BackingField;
    public List`1<double> Points { get; private set; }
    public SvgMatrix(Double[] data);
    public SvgMatrix(Matrix m);
    [CompilerGeneratedAttribute]
public List`1<double> get_Points();
    [CompilerGeneratedAttribute]
private void set_Points(List`1<double> value);
    public virtual IDxMatrix GetDxMatrix(double scale);
    public virtual string ToString();
    protected virtual void Initialize(Double[] data);
    public virtual SvgTransform DeepCopy();
}
[FlagsAttribute]
public enum DevExpress.Utils.Svg.SvgPaletteUseMode : Enum {
    public int value__;
    public static SvgPaletteUseMode None;
    public static SvgPaletteUseMode Fill;
    public static SvgPaletteUseMode Stroke;
    public static SvgPaletteUseMode All;
}
[SvgElementNameAliasAttribute("path")]
public class DevExpress.Utils.Svg.SvgPath : SvgShapeRenderingElement {
    private SvgPathSegmentCollection segmentsCore;
    [SvgPropertyNameAliasAttribute("d")]
public string PathData { get; internal set; }
    public SvgPathSegmentCollection Segments { get; internal set; }
    public string get_PathData();
    internal void set_PathData(string value);
    private void OnPathDataChanged();
    public SvgPathSegmentCollection get_Segments();
    internal void set_Segments(SvgPathSegmentCollection value);
    private void OnSegmentsCollectionChanged(object sender, CollectionChangeEventArgs e);
    public static SvgPath Create(SvgElementProperties properties, SvgPathSegmentCollection segments);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
public class DevExpress.Utils.Svg.SvgPathArcSegment : SvgPathSegment {
    [CompilerGeneratedAttribute]
private double <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RadiusY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Angle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sweep>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LargeArc>k__BackingField;
    public double RadiusX { get; private set; }
    public double RadiusY { get; private set; }
    public double Angle { get; private set; }
    public bool Sweep { get; private set; }
    public bool LargeArc { get; private set; }
    public SvgPathArcSegment(SvgPoint start, double radiusX, double radiusY, double angle, bool largeArc, bool sweep, SvgPoint end);
    [CompilerGeneratedAttribute]
public double get_RadiusX();
    [CompilerGeneratedAttribute]
private void set_RadiusX(double value);
    [CompilerGeneratedAttribute]
public double get_RadiusY();
    [CompilerGeneratedAttribute]
private void set_RadiusY(double value);
    [CompilerGeneratedAttribute]
public double get_Angle();
    [CompilerGeneratedAttribute]
private void set_Angle(double value);
    [CompilerGeneratedAttribute]
public bool get_Sweep();
    [CompilerGeneratedAttribute]
private void set_Sweep(bool value);
    [CompilerGeneratedAttribute]
public bool get_LargeArc();
    [CompilerGeneratedAttribute]
private void set_LargeArc(bool value);
    public virtual string ToString();
    public virtual SvgPathSegment DeepCopy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Utils.Svg.SvgPathCloseSegment : SvgPathSegment {
    public static SvgPathCloseSegment Instance;
    private static SvgPathCloseSegment();
    public virtual string ToString();
    public virtual SvgPathSegment DeepCopy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Utils.Svg.SvgPathCurveToCubicSegment : SvgPathSegment {
    [CompilerGeneratedAttribute]
private SvgPoint <FirstAdditionalPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgPoint <SecondAdditionalPoint>k__BackingField;
    public SvgPoint FirstAdditionalPoint { get; private set; }
    public SvgPoint SecondAdditionalPoint { get; private set; }
    public SvgPathCurveToCubicSegment(SvgPoint start, SvgPoint firstAdditionalPoint, SvgPoint secondAdditionalPoint, SvgPoint end);
    [CompilerGeneratedAttribute]
public SvgPoint get_FirstAdditionalPoint();
    [CompilerGeneratedAttribute]
private void set_FirstAdditionalPoint(SvgPoint value);
    [CompilerGeneratedAttribute]
public SvgPoint get_SecondAdditionalPoint();
    [CompilerGeneratedAttribute]
private void set_SecondAdditionalPoint(SvgPoint value);
    public virtual string ToString();
    public virtual SvgPathSegment DeepCopy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Utils.Svg.SvgPathCurveToQuadraticSegment : SvgPathSegment {
    [CompilerGeneratedAttribute]
private SvgPoint <AdditionalPoint>k__BackingField;
    private SvgPoint firstAdditionalPointCore;
    private SvgPoint secondAdditionalPointCore;
    public SvgPoint AdditionalPoint { get; private set; }
    public SvgPoint FirstAdditionalPoint { get; }
    public SvgPoint SecondAdditionalPoint { get; }
    public SvgPathCurveToQuadraticSegment(SvgPoint start, SvgPoint additionalPoint, SvgPoint end);
    [CompilerGeneratedAttribute]
public SvgPoint get_AdditionalPoint();
    [CompilerGeneratedAttribute]
private void set_AdditionalPoint(SvgPoint value);
    public SvgPoint get_FirstAdditionalPoint();
    public SvgPoint get_SecondAdditionalPoint();
    public virtual string ToString();
    public virtual SvgPathSegment DeepCopy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Utils.Svg.SvgPathLineToSegment : SvgPathSegment {
    public SvgPathLineToSegment(SvgPoint start, SvgPoint end);
    public virtual string ToString();
    public virtual SvgPathSegment DeepCopy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Utils.Svg.SvgPathMoveToSegment : SvgPathSegment {
    public SvgPathMoveToSegment(SvgPoint moveToPoint);
    public virtual string ToString();
    public virtual SvgPathSegment DeepCopy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class DevExpress.Utils.Svg.SVGPathParserV2 : object {
    public static void Parse(string data, SvgPathSegmentCollection segments);
    private static void CurveTo(SvgPathSegmentCollection segments, bool isRelative, SvgPoint[] points);
    private static void SmoothCurveTo(SvgPathSegmentCollection segments, bool isRelative, SvgPoint[] points);
    private static void QuadraticBezierCurve(SvgPathSegmentCollection segments, bool isRelative, SvgPoint[] points);
    private static void SmoothQuadraticBezierCurve(SvgPathSegmentCollection segments, bool isRelative, SvgPoint[] points);
    private static void EllipticalArc(SvgPathSegmentCollection segments, bool isRelative, Command command, string data, StringBuilder numberBuffer);
    private static SvgPoint ToAbsolute(SvgPoint point, SvgPoint current, bool isRelative);
    private static SvgPoint ToAbsolute(double x, double y, SvgPoint current, bool isRelativeX, bool isRelativeY);
    private static SvgPoint ConvertPoint(SvgPoint point, SvgPoint mirror);
    [IteratorStateMachineAttribute("DevExpress.Utils.Svg.SVGPathParserV2/<GetCommands>d__9")]
private static IEnumerable`1<Command> GetCommands(string data);
    internal static SvgPoint[] GetPoints(string points);
    internal static Double[] GetDoubles(string numbers);
    private static double GetDouble(Int32& start, int end, string data, Number number);
    private static bool GetBool(Int32& start, int end, string data, Flag flag);
    private static Double[] GetDoubles(Command command, string data, StringBuilder numberBuffer, int capacity);
    private static SvgPoint[] GetPoints(Command command, string data, StringBuilder numberBuffer);
    private static bool IsCommandId(char c);
    private static bool IsNumberSeparator(char c);
    private static bool IsWhiteSpace(char c);
}
public abstract class DevExpress.Utils.Svg.SvgPathSegment : object {
    [CompilerGeneratedAttribute]
private SvgPoint <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgPoint <End>k__BackingField;
    public SvgPoint Start { get; protected set; }
    public SvgPoint End { get; protected set; }
    [CompilerGeneratedAttribute]
public SvgPoint get_Start();
    [CompilerGeneratedAttribute]
protected void set_Start(SvgPoint value);
    [CompilerGeneratedAttribute]
public SvgPoint get_End();
    [CompilerGeneratedAttribute]
protected void set_End(SvgPoint value);
    public abstract virtual SvgPathSegment DeepCopy();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.Svg.SvgPathSegmentCollection : CollectionBase {
    private int lockUpdateCore;
    [CompilerGeneratedAttribute]
private SvgPathSegment <Last>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgPoint <LastPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionChangeEventHandler CollectionChanged;
    public SvgPathSegment Last { get; private set; }
    public SvgPoint LastPoint { get; private set; }
    public SvgPathSegment Item { get; }
    [CompilerGeneratedAttribute]
public SvgPathSegment get_Last();
    [CompilerGeneratedAttribute]
private void set_Last(SvgPathSegment value);
    [CompilerGeneratedAttribute]
public SvgPoint get_LastPoint();
    [CompilerGeneratedAttribute]
private void set_LastPoint(SvgPoint value);
    [CompilerGeneratedAttribute]
public void add_CollectionChanged(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CollectionChanged(CollectionChangeEventHandler value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    public SvgPathSegment get_Item(int index);
    public virtual void AddRange(SvgPathSegment[] segments);
    public virtual bool Add(SvgPathSegment segment);
    public virtual int IndexOf(SvgPathSegment segment);
    public virtual bool Insert(int index, SvgPathSegment segment);
    public virtual bool Remove(SvgPathSegment element);
    public virtual bool Contains(object element);
    private bool AddSegment(SvgPathSegment segment);
    protected virtual void OnElementAdded(SvgPathSegment segment);
    protected virtual void OnElementRemoved(SvgPathSegment segment);
    protected virtual void OnClear();
    [IteratorStateMachineAttribute("DevExpress.Utils.Svg.SvgPathSegmentCollection/<GetTypedEnumerator>d__27")]
protected internal IEnumerable`1<SvgPathSegment> GetTypedEnumerator();
    protected internal void RaiseCollectionChanged(CollectionChangeEventArgs e);
    public virtual string ToString();
    protected virtual string ToStringCore();
    public void CopyTo(Array target, int index);
    protected bool CanAdd(SvgPathSegment element);
    public virtual void BeginUpdate();
    public virtual void CancelUpdate();
    public virtual void EndUpdate();
    public SvgPathSegment[] ToArray();
    public void ForEach(Action`1<SvgPathSegment> action);
    public SvgPathSegment[] CleanUp();
    public void RemoveRange(SvgPathSegment[] elements);
    public SvgPathSegment FindFirst(Predicate`1<SvgPathSegment> match);
    public bool Contains(SvgPathSegment element);
}
[SvgElementNameAliasAttribute("polygon")]
public class DevExpress.Utils.Svg.SvgPolygon : SvgShapeRenderingElement {
    [SvgPropertyNameAliasAttribute("points")]
public string Points { get; protected internal set; }
    public SvgPoint[] SvgPoints { get; protected set; }
    public string get_Points();
    protected internal void set_Points(string value);
    protected virtual void OnPointsChanged();
    public SvgPoint[] get_SvgPoints();
    protected void set_SvgPoints(SvgPoint[] value);
    protected virtual void OnSvgPointsChanged();
    public static SvgPolygon Create(SvgElementProperties properties, SvgPoint[] svgPoints);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[SvgElementNameAliasAttribute("polyline")]
public class DevExpress.Utils.Svg.SvgPolyline : SvgPolygon {
    public static SvgPolyline Create(SvgElementProperties properties, SvgPoint[] svgPoints);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgPreserveAspectRatio : Enum {
    public int value__;
    public static SvgPreserveAspectRatio xMidYMid;
    public static SvgPreserveAspectRatio none;
    public static SvgPreserveAspectRatio xMinYMin;
    public static SvgPreserveAspectRatio xMidYMin;
    public static SvgPreserveAspectRatio xMaxYMin;
    public static SvgPreserveAspectRatio xMinYMid;
    public static SvgPreserveAspectRatio xMaxYMid;
    public static SvgPreserveAspectRatio xMinYMax;
    public static SvgPreserveAspectRatio xMidYMax;
    public static SvgPreserveAspectRatio xMaxYMax;
}
public class DevExpress.Utils.Svg.SvgPreserveAspectRatioConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
}
public class DevExpress.Utils.Svg.SvgPropertyNameAliasAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public SvgPropertyNameAliasAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
}
[SvgElementNameAliasAttribute("radialGradient")]
public class DevExpress.Utils.Svg.SvgRadialGradient : SvgGradient {
    [SvgPropertyNameAliasAttribute("cx")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit CenterX { get; private set; }
    [SvgPropertyNameAliasAttribute("cy")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit CenterY { get; private set; }
    [SvgPropertyNameAliasAttribute("r")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit Radius { get; private set; }
    [SvgPropertyNameAliasAttribute("fx")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit FocalX { get; private set; }
    [SvgPropertyNameAliasAttribute("fy")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit FocalY { get; private set; }
    [SvgPropertyNameAliasAttribute("fr")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit FocalRadius { get; private set; }
    public SvgUnit get_CenterX();
    private void set_CenterX(SvgUnit value);
    public SvgUnit get_CenterY();
    private void set_CenterY(SvgUnit value);
    public SvgUnit get_Radius();
    private void set_Radius(SvgUnit value);
    public SvgUnit get_FocalX();
    private void set_FocalX(SvgUnit value);
    public SvgUnit get_FocalY();
    private void set_FocalY(SvgUnit value);
    public SvgUnit get_FocalRadius();
    private void set_FocalRadius(SvgUnit value);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    public static SvgRadialGradient Create(SvgCoordinateUnits gradientUnits, SvgGradientSpreadMethod spreadMethod, SvgUnit centerX, SvgUnit centerY, SvgUnit radius, SvgUnit focalX, SvgUnit focalY, SvgUnit focalRadius);
    public static SvgRadialGradient Create(SvgElementProperties properties, SvgCoordinateUnits gradientUnits, SvgGradientSpreadMethod spreadMethod, SvgUnit centerX, SvgUnit centerY, SvgUnit radius, SvgUnit focalX, SvgUnit focalY, SvgUnit focalRadius);
}
[SvgElementNameAliasAttribute("rect")]
public class DevExpress.Utils.Svg.SvgRectangle : SvgShapeRenderingElement {
    [SvgPropertyNameAliasAttribute("x")]
public double X { get; private set; }
    [SvgPropertyNameAliasAttribute("y")]
public double Y { get; private set; }
    [SvgPropertyNameAliasAttribute("width")]
public double Width { get; private set; }
    [SvgPropertyNameAliasAttribute("height")]
public double Height { get; private set; }
    [SvgPropertyNameAliasAttribute("rx")]
[DefaultValueAttribute("0")]
public double CornerRadiusX { get; private set; }
    [SvgPropertyNameAliasAttribute("ry")]
[DefaultValueAttribute("0")]
public double CornerRadiusY { get; private set; }
    public double get_X();
    private void set_X(double value);
    public double get_Y();
    private void set_Y(double value);
    public double get_Width();
    private void set_Width(double value);
    public double get_Height();
    private void set_Height(double value);
    public double get_CornerRadiusX();
    private void set_CornerRadiusX(double value);
    public double get_CornerRadiusY();
    private void set_CornerRadiusY(double value);
    public static SvgRectangle Create(SvgElementProperties properties, double x, double y, double width, double height, double cornerRadiusX, double cornerRadiusY);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[SvgElementNameAliasAttribute("svg")]
public class DevExpress.Utils.Svg.SvgRoot : SvgElement {
    [SvgPropertyNameAliasAttribute("x")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit X { get; private set; }
    [SvgPropertyNameAliasAttribute("y")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Y { get; private set; }
    [SvgPropertyNameAliasAttribute("width")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Width { get; private set; }
    [SvgPropertyNameAliasAttribute("height")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Height { get; private set; }
    [SvgPropertyNameAliasAttribute("viewBox")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgViewBoxTypeConverter")]
public SvgViewBox ViewBox { get; internal set; }
    [SvgPropertyNameAliasAttribute("version")]
public string Version { get; private set; }
    [SvgPropertyNameAliasAttribute("xmlns")]
public string Xmlns { get; private set; }
    [SvgPropertyNameAliasAttribute("xmlns:xlink")]
public string XmlnsXlink { get; private set; }
    [SvgPropertyNameAliasAttribute("enable-background")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgBackgroundTypeConverter")]
public SvgViewBox Background { get; internal set; }
    [SvgPropertyNameAliasAttribute("xml:space")]
public string XmlSpace { get; private set; }
    public SvgUnit get_X();
    private void set_X(SvgUnit value);
    public SvgUnit get_Y();
    private void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    private void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    private void set_Height(SvgUnit value);
    public SvgViewBox get_ViewBox();
    internal void set_ViewBox(SvgViewBox value);
    public string get_Version();
    private void set_Version(string value);
    public string get_Xmlns();
    private void set_Xmlns(string value);
    public string get_XmlnsXlink();
    private void set_XmlnsXlink(string value);
    public SvgViewBox get_Background();
    internal void set_Background(SvgViewBox value);
    public string get_XmlSpace();
    private void set_XmlSpace(string value);
    public static SvgRoot Create(SvgElementProperties properties, SvgUnit x, SvgUnit y, SvgUnit width, SvgUnit height, SvgViewBox viewBox);
    public Matrix GetViewBoxTransform();
    public IDxMatrix GetDxViewBoxTransform();
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[SvgTransformNameAliasAttribute("rotate")]
public class DevExpress.Utils.Svg.SvgRotate : SvgTransform {
    [CompilerGeneratedAttribute]
private double <Angle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CenterX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CenterY>k__BackingField;
    public double Angle { get; private set; }
    public double CenterX { get; private set; }
    public double CenterY { get; private set; }
    public SvgRotate(Double[] data);
    [CompilerGeneratedAttribute]
public double get_Angle();
    [CompilerGeneratedAttribute]
private void set_Angle(double value);
    [CompilerGeneratedAttribute]
public double get_CenterX();
    [CompilerGeneratedAttribute]
private void set_CenterX(double value);
    [CompilerGeneratedAttribute]
public double get_CenterY();
    [CompilerGeneratedAttribute]
private void set_CenterY(double value);
    public virtual IDxMatrix GetDxMatrix(double scale);
    public virtual string ToString();
    protected virtual void Initialize(Double[] data);
    public virtual SvgTransform DeepCopy();
}
[SvgTransformNameAliasAttribute("scale")]
public class DevExpress.Utils.Svg.SvgScale : SvgTransform {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; private set; }
    public double Y { get; private set; }
    public SvgScale(Double[] data);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
private void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(double value);
    public virtual IDxMatrix GetDxMatrix(double scale);
    public virtual string ToString();
    protected virtual void Initialize(Double[] data);
    public virtual SvgTransform DeepCopy();
}
public class DevExpress.Utils.Svg.SvgSerializer : object {
    private static object lockObj;
    private static Dictionary`2<Type, Dictionary`2<string, Tuple`4<string, Type, TypeConverter, DefaultValueParameter>>> propertyAccessors;
    private static Dictionary`2<Type, string> elementTypes;
    private static SvgSerializer();
    private static Func`2<object, object> MakeAccessor(Type type, Type propertyType, string memberName);
    private static Expression CreateAccessor(Type type, MemberInfo mInfo, ParameterExpression& parameter);
    private static MemberInfo GetMemberInfo(Type type, string memberName);
    public static void SaveSvgImageToXML(string path, SvgImage image);
    public static void SaveSvgImageToXML(Stream stream, SvgImage image);
    public static void Write(SvgElement element, XmlWriter xmlWriter);
    private static void WriteEndElement(SvgElement element, XmlWriter xmlWriter);
    private static void WriteChildren(SvgElement element, XmlWriter xmlWriter);
    private static void WriteStartElement(SvgElement element, XmlWriter xmlWriter);
    private static void WriteElementAttributes(SvgElement element, XmlWriter xmlWriter);
    private static IEnumerable`1<PropertyDescriptor> GetPropertyInfos(Type elementType);
    private static string GetElementName(SvgElement element);
    public static XmlNode WriteElement(XmlDocument document, XmlNode xmlNode, SvgElement element);
    private static void WriteElementAttributes(XmlDocument document, XmlNode xmlNode, SvgElement element);
    private static XmlAttribute CreateAttribute(XmlDocument document, string name, string val);
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgShapeRendering : Enum {
    public int value__;
    public static SvgShapeRendering Auto;
    public static SvgShapeRendering GeometricPrecision;
    public static SvgShapeRendering OptimizeSpeed;
}
public abstract class DevExpress.Utils.Svg.SvgShapeRenderingElement : SvgElement {
    [SvgPropertyNameAliasAttribute("shape-rendering")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgShapeRendering ShapeRendering { get; internal set; }
    public SvgShapeRendering get_ShapeRendering();
    internal void set_ShapeRendering(SvgShapeRendering value);
}
public abstract class DevExpress.Utils.Svg.SvgSkew : SvgTransform {
    [CompilerGeneratedAttribute]
private double <AngleX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AngleY>k__BackingField;
    public double AngleX { get; public set; }
    public double AngleY { get; public set; }
    public SvgSkew(Double[] data);
    [CompilerGeneratedAttribute]
public double get_AngleX();
    [CompilerGeneratedAttribute]
public void set_AngleX(double value);
    [CompilerGeneratedAttribute]
public double get_AngleY();
    [CompilerGeneratedAttribute]
public void set_AngleY(double value);
    public virtual IDxMatrix GetDxMatrix(double scale);
    public virtual string ToString();
}
[SvgTransformNameAliasAttribute("skewX")]
public class DevExpress.Utils.Svg.SvgSkewX : SvgSkew {
    public SvgSkewX(Double[] data);
    protected virtual void Initialize(Double[] data);
    public virtual SvgTransform DeepCopy();
}
[SvgTransformNameAliasAttribute("skewY")]
public class DevExpress.Utils.Svg.SvgSkewY : SvgSkew {
    public SvgSkewY(Double[] data);
    protected virtual void Initialize(Double[] data);
    public virtual SvgTransform DeepCopy();
}
public class DevExpress.Utils.Svg.SvgSkinLinearGradient : SvgLinearGradient {
    public float Angle { get; internal set; }
    public float get_Angle();
    internal void set_Angle(float value);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    public virtual int GetHashCode();
    public static SvgSkinLinearGradient Create(SvgCoordinateUnits gradientUnits, SvgGradientSpreadMethod spreadMethod, float angle);
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgStrokeLineCap : Enum {
    public int value__;
    public static SvgStrokeLineCap Butt;
    public static SvgStrokeLineCap Round;
    public static SvgStrokeLineCap Square;
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgStrokeLineJoin : Enum {
    public int value__;
    public static SvgStrokeLineJoin Miter;
    public static SvgStrokeLineJoin Bevel;
    public static SvgStrokeLineJoin Round;
}
public class DevExpress.Utils.Svg.SvgStyle : object {
    private SvgStyleElement styleElement;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private Dictionary`2<string, string> attributesCore;
    public string Name { get; public set; }
    public Dictionary`2<string, string> Attributes { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public Dictionary`2<string, string> get_Attributes();
    public void SetValue(string key, string value);
    public virtual string ToString();
    public virtual bool TryGetValue(object key, T defaultValue, T& result);
    public SvgStyle DeepCopy();
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgStyleConverter : TypeConverter {
    public static SvgStyleConverter Instance;
    private static SvgStyleConverter();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.Svg.SvgStyleElement : SvgGradientStop {
    [SvgPropertyNameAliasAttribute("x")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit X { get; private set; }
    [SvgPropertyNameAliasAttribute("y")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Y { get; private set; }
    [SvgPropertyNameAliasAttribute("width")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Width { get; private set; }
    [SvgPropertyNameAliasAttribute("height")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Height { get; private set; }
    [SvgPropertyNameAliasAttribute("viewBox")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgViewBoxTypeConverter")]
public SvgViewBox ViewBox { get; internal set; }
    [SvgPropertyNameAliasAttribute("enable-background")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgBackgroundTypeConverter")]
public SvgViewBox Background { get; internal set; }
    [SvgPropertyNameAliasAttribute("text-anchor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgTextAnchor TextAnchor { get; internal set; }
    [SvgPropertyNameAliasAttribute("font-style")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgFontStyle FontStyle { get; private set; }
    [SvgPropertyNameAliasAttribute("font-variant")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgFontVariant FontVariant { get; private set; }
    [SvgPropertyNameAliasAttribute("text-decoration")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgTextDecoration TextDecoration { get; private set; }
    [SvgPropertyNameAliasAttribute("font-weight")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgFontWeight FontWeight { get; private set; }
    public SvgUnit get_X();
    private void set_X(SvgUnit value);
    public SvgUnit get_Y();
    private void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    private void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    private void set_Height(SvgUnit value);
    public SvgViewBox get_ViewBox();
    internal void set_ViewBox(SvgViewBox value);
    public SvgViewBox get_Background();
    internal void set_Background(SvgViewBox value);
    public virtual SvgTextAnchor get_TextAnchor();
    internal virtual void set_TextAnchor(SvgTextAnchor value);
    public virtual SvgFontStyle get_FontStyle();
    private void set_FontStyle(SvgFontStyle value);
    public virtual SvgFontVariant get_FontVariant();
    private void set_FontVariant(SvgFontVariant value);
    public virtual SvgTextDecoration get_TextDecoration();
    private void set_TextDecoration(SvgTextDecoration value);
    public virtual SvgFontWeight get_FontWeight();
    private void set_FontWeight(SvgFontWeight value);
    public virtual bool TryGetValue(object key, T defaultValue, T& result);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    protected virtual void SetValueCore(object key, T value);
}
[SvgElementNameAliasAttribute("style")]
public class DevExpress.Utils.Svg.SvgStyleItem : SvgElement {
    [SvgPropertyNameAliasAttribute("type")]
[DefaultValueAttribute("")]
public string Type { get; internal set; }
    public string get_Type();
    internal void set_Type(string value);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
public static class DevExpress.Utils.Svg.SvgStyleParserV2 : object {
    private static bool EndOfStyle(XmlReader reader);
    public static bool ReadStyles(XmlReader reader, List`1<SvgStyle> result, SvgElement styleElement);
    internal static void Parse(string styleDefinitions, List`1<SvgStyle> styles);
    private static string TrimComment(string styleDefinitions, StringBuilder builder);
    private static SvgStyle EnsureStyle(string styleName, List`1<SvgStyle> styles);
    public static SvgStyle ReadStyleAttribute(string text);
    [IteratorStateMachineAttribute("DevExpress.Utils.Svg.SvgStyleParserV2/<GetStyles>d__6")]
private static IEnumerable`1<StyleSpan> GetStyles(string styleDefinitions);
    [IteratorStateMachineAttribute("DevExpress.Utils.Svg.SvgStyleParserV2/<GetNames>d__7")]
private static IEnumerable`1<NameSpan> GetNames(string styleDefinitions, int start, int end);
    [IteratorStateMachineAttribute("DevExpress.Utils.Svg.SvgStyleParserV2/<GetAttributes>d__8")]
private static IEnumerable`1<KeyValueSpan> GetAttributes(string styleDefinitions, int start, int end);
    private static bool IsWhiteSpace(char c);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgTagConverter : TypeConverter {
    public static SvgTagConverter Instance;
    private static SvgTagConverter();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[SvgElementNameAliasAttribute("text")]
public class DevExpress.Utils.Svg.SvgText : SvgElement {
    [SvgPropertyNameAliasAttribute("text-anchor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgTextAnchor TextAnchor { get; internal set; }
    [SvgPropertyNameAliasAttribute("baseline-shift")]
public string BaselineShift { get; internal set; }
    [SvgPropertyNameAliasAttribute("x")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitCollectionConverter")]
public SvgUnitCollection X { get; internal set; }
    [SvgPropertyNameAliasAttribute("dx")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitCollectionConverter")]
public SvgUnitCollection Dx { get; internal set; }
    [SvgPropertyNameAliasAttribute("y")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitCollectionConverter")]
public SvgUnitCollection Y { get; internal set; }
    [SvgPropertyNameAliasAttribute("dy")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitCollectionConverter")]
public SvgUnitCollection Dy { get; internal set; }
    [SvgPropertyNameAliasAttribute("rotate")]
public string Rotate { get; internal set; }
    [SvgPropertyNameAliasAttribute("textLength")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit TextLength { get; internal set; }
    [SvgPropertyNameAliasAttribute("lengthAdjust")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgTextLengthAdjust LengthAdjust { get; internal set; }
    [SvgPropertyNameAliasAttribute("letter-spacing")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit LetterSpacing { get; internal set; }
    [SvgPropertyNameAliasAttribute("word-spacing")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
public SvgUnit WordSpacing { get; internal set; }
    [SvgPropertyNameAliasAttribute("font-style")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgFontStyle FontStyle { get; private set; }
    [SvgPropertyNameAliasAttribute("font-variant")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgFontVariant FontVariant { get; private set; }
    [SvgPropertyNameAliasAttribute("text-decoration")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgTextDecoration TextDecoration { get; private set; }
    [SvgPropertyNameAliasAttribute("font-weight")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SvgFontWeight FontWeight { get; private set; }
    [SvgPropertyNameAliasAttribute("font")]
public string Font { get; public set; }
    public virtual SvgTextAnchor get_TextAnchor();
    internal virtual void set_TextAnchor(SvgTextAnchor value);
    public virtual string get_BaselineShift();
    internal virtual void set_BaselineShift(string value);
    public SvgUnitCollection get_X();
    internal void set_X(SvgUnitCollection value);
    public SvgUnitCollection get_Dx();
    internal void set_Dx(SvgUnitCollection value);
    public SvgUnitCollection get_Y();
    internal void set_Y(SvgUnitCollection value);
    public SvgUnitCollection get_Dy();
    internal void set_Dy(SvgUnitCollection value);
    public string get_Rotate();
    internal void set_Rotate(string value);
    public virtual SvgUnit get_TextLength();
    internal virtual void set_TextLength(SvgUnit value);
    public virtual SvgTextLengthAdjust get_LengthAdjust();
    internal virtual void set_LengthAdjust(SvgTextLengthAdjust value);
    public virtual SvgUnit get_LetterSpacing();
    internal virtual void set_LetterSpacing(SvgUnit value);
    public virtual SvgUnit get_WordSpacing();
    internal virtual void set_WordSpacing(SvgUnit value);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
    public virtual SvgFontStyle get_FontStyle();
    private void set_FontStyle(SvgFontStyle value);
    public virtual SvgFontVariant get_FontVariant();
    private void set_FontVariant(SvgFontVariant value);
    public virtual SvgTextDecoration get_TextDecoration();
    private void set_TextDecoration(SvgTextDecoration value);
    public virtual SvgFontWeight get_FontWeight();
    private void set_FontWeight(SvgFontWeight value);
    public virtual string get_Font();
    public virtual void set_Font(string value);
    public static SvgText Create(SvgElementProperties properties, string fontFamily, SvgUnit fontSize, SvgFontWeight fontWeight, SvgFontStyle fontStyle);
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgTextAnchor : Enum {
    public int value__;
    public static SvgTextAnchor Default;
    public static SvgTextAnchor Start;
    public static SvgTextAnchor Middle;
    public static SvgTextAnchor End;
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
[FlagsAttribute]
public enum DevExpress.Utils.Svg.SvgTextDecoration : Enum {
    public int value__;
    public static SvgTextDecoration Inherit;
    public static SvgTextDecoration None;
    public static SvgTextDecoration Underline;
    public static SvgTextDecoration Overline;
    public static SvgTextDecoration LineThrough;
    public static SvgTextDecoration Blink;
}
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgEnumConverter")]
public enum DevExpress.Utils.Svg.SvgTextLengthAdjust : Enum {
    public int value__;
    public static SvgTextLengthAdjust Spacing;
    public static SvgTextLengthAdjust SpacingAndGlyphs;
}
public abstract class DevExpress.Utils.Svg.SvgTransform : object {
    private IDxMatrix matrixCore;
    private Double[] dataCore;
    protected Double[] Data { get; }
    public Matrix Matrix { get; }
    public IDxMatrix DxMatrix { get; }
    public SvgTransform(Double[] data);
    protected Double[] get_Data();
    protected abstract virtual void Initialize(Double[] data);
    public Matrix get_Matrix();
    public IDxMatrix get_DxMatrix();
    public Matrix GetMatrix(double scale);
    public abstract virtual IDxMatrix GetDxMatrix(double scale);
    public abstract virtual SvgTransform DeepCopy();
}
public class DevExpress.Utils.Svg.SvgTransformCollection : NotificationCollection`1<SvgTransform> {
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgTransformConverter : TypeConverter {
    public static SvgTransformConverter Instance;
    private static SvgTransformConverter();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class DevExpress.Utils.Svg.SvgTransformGroup : SvgGroup {
    public static SvgTransformGroup Create(SvgElementProperties properties);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgTransformNameAliasAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public SvgTransformNameAliasAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[SvgTransformNameAliasAttribute("translate")]
public class DevExpress.Utils.Svg.SvgTranslate : SvgTransform {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; private set; }
    public double Y { get; private set; }
    public SvgTranslate(Double[] data);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
private void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(double value);
    public virtual IDxMatrix GetDxMatrix(double scale);
    public virtual string ToString();
    protected virtual void Initialize(Double[] data);
    public virtual SvgTransform DeepCopy();
}
[SvgElementNameAliasAttribute("tspan")]
public class DevExpress.Utils.Svg.SvgTspan : SvgText {
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
public class DevExpress.Utils.Svg.SvgUnit : object {
    public static string None;
    internal static string Zero;
    public static SvgUnit Empty;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnitValue>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgUnitType <UnitType>k__BackingField;
    public double Value { get; private set; }
    public double UnitValue { get; private set; }
    public SvgUnitType UnitType { get; private set; }
    public SvgUnit(double unitValue);
    public SvgUnit(SvgUnitType unitType, double unitValue);
    private static SvgUnit();
    private void ConvertToPixels();
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(double value);
    [CompilerGeneratedAttribute]
public double get_UnitValue();
    [CompilerGeneratedAttribute]
private void set_UnitValue(double value);
    [CompilerGeneratedAttribute]
public SvgUnitType get_UnitType();
    [CompilerGeneratedAttribute]
private void set_UnitType(SvgUnitType value);
    public virtual string ToString();
    public sealed virtual object Clone();
}
public class DevExpress.Utils.Svg.SvgUnitCollection : List`1<SvgUnit> {
    public virtual string ToString();
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgUnitCollectionConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgUnitConverter : TypeConverter {
    public static SvgUnitConverter Instance;
    private static SvgUnitConverter();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgUnitOffsetConverter : SvgUnitConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public enum DevExpress.Utils.Svg.SvgUnitType : Enum {
    public int value__;
    public static SvgUnitType None;
    public static SvgUnitType Em;
    public static SvgUnitType Ex;
    public static SvgUnitType Px;
    public static SvgUnitType In;
    public static SvgUnitType Cm;
    public static SvgUnitType Mm;
    public static SvgUnitType Pt;
    public static SvgUnitType Pc;
    public static SvgUnitType Percentage;
}
[SvgElementNameAliasAttribute("use")]
public class DevExpress.Utils.Svg.SvgUse : SvgElement {
    [SvgPropertyNameAliasAttribute("x")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit X { get; private set; }
    [SvgPropertyNameAliasAttribute("y")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Y { get; private set; }
    [SvgPropertyNameAliasAttribute("width")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Width { get; private set; }
    [SvgPropertyNameAliasAttribute("height")]
[TypeConverterAttribute("DevExpress.Utils.Svg.SvgUnitConverter")]
[DefaultValueAttribute("")]
public SvgUnit Height { get; private set; }
    [SvgPropertyNameAliasAttribute("xlink:href")]
public Uri ReferencedElement { get; internal set; }
    public SvgUnit get_X();
    private void set_X(SvgUnit value);
    public SvgUnit get_Y();
    private void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    private void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    private void set_Height(SvgUnit value);
    public Uri get_ReferencedElement();
    internal void set_ReferencedElement(Uri value);
    public static SvgUse Create(SvgElementProperties properties, Uri referencedElement, SvgUnit x, SvgUnit y, SvgUnit width, SvgUnit height);
    public virtual SvgElement DeepCopy(Action`2<SvgElement, Hashtable> updateStyle);
}
public class DevExpress.Utils.Svg.SvgViewBox : object {
    [ThreadStaticAttribute]
private static SvgViewBox emptyCore;
    [CompilerGeneratedAttribute]
private double <MinX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public static SvgViewBox Empty { get; }
    public double MinX { get; public set; }
    public double MinY { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public bool IsEmpty { get; }
    public SvgViewBox(double minX, double minY, double width, double height);
    public static SvgViewBox get_Empty();
    [CompilerGeneratedAttribute]
public double get_MinX();
    [CompilerGeneratedAttribute]
public void set_MinX(double value);
    [CompilerGeneratedAttribute]
public double get_MinY();
    [CompilerGeneratedAttribute]
public void set_MinY(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    public bool get_IsEmpty();
    public sealed virtual object Clone();
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Utils.Svg.SvgViewBoxTypeConverter : TypeConverter {
    public static SvgViewBoxTypeConverter Instance;
    private static SvgViewBoxTypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    protected static SvgViewBox GetSvgViewBox(string value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal static class DevExpress.Utils.Svg.TransformParser : object {
    public static void Parse(string transformDefinitions, SvgTransformCollection transforms);
    [IteratorStateMachineAttribute("DevExpress.Utils.Svg.TransformParser/<GetTransforms>d__1")]
private static IEnumerable`1<TransformSpan> GetTransforms(string transformDefinitions);
    private static bool IsWhiteSpace(char c);
}
[ExtensionAttribute]
public static class DevExpress.Utils.SystemDrawingConversions.GeometricPrimitiveExtensions : object {
    [ExtensionAttribute]
public static Point ToPoint(DXPoint dxPoint);
    [ExtensionAttribute]
public static DXPoint ToDXPoint(Point point);
    [ExtensionAttribute]
public static Size ToSize(DXSize dxSize);
    [ExtensionAttribute]
public static DXSize ToDXSize(Size size);
    [ExtensionAttribute]
public static Rectangle ToRectangle(DXRectangle dxRectangle);
    [ExtensionAttribute]
public static DXRectangle ToDXRectangle(Rectangle rectangle);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.Text.ConstDpiFontsCache : object {
    private Dictionary`2<Font, FontCache> fonts;
    public FontCache Item { get; }
    public FontCache get_Item(Graphics graphics, Font font);
    public void DrawString(Graphics graphics, string text, Font font, Color foreColor, Rectangle drawBounds, Rectangle clipBounds, StringFormat stringFormat, TextHighLight highLight, IWordBreakProvider wordBreakProvider);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, IWordBreakProvider wordBreakProvider);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight, IWordBreakProvider wordBreakProvider);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight, Boolean& isCropped);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight, IWordBreakProvider wordBreakProvider, Boolean& isCropped);
    public Int32[] GetMeasureString(Graphics graphics, string text, Font font, StringFormat stringFormat);
    public int GetStringHeight(Graphics graphics, string text, Font font, int width, StringFormat stringFormat);
    public int GetFontHeight(Graphics graphics, Font font);
    public int GetFontAscentHeight(Graphics graphics, Font font);
    private FontCache GetFontCacheByFont(Graphics graphics, Font font);
    private FontCache AddFontCache(Graphics graphics, Font font);
    internal void RemoveFontCache(Font font);
    private sealed virtual override void System.IDisposable.Dispose();
    private void Clear();
}
public class DevExpress.Utils.Text.FontCache : object {
    private static int InitialCharCount;
    private static string StringToMeasureAverageCharWidth;
    private FontStyle fontStyle;
    private IntPtr fontHandle;
    private bool underline;
    private Lazy`1<IntPtr> fontUnderlineHandleCore;
    private int height;
    private int ascentHeight;
    private int internalLeading;
    private int averageCharWidth;
    private Int32[] charsWidth;
    private Int32[] abcWidths;
    private char firstChar;
    private char lastChar;
    private char currentLastChar;
    private Dictionary`2<UInt32, int> kerningPairs;
    [CompilerGeneratedAttribute]
private bool <IsSymbolFont>k__BackingField;
    public static int MaxSingleLineChars;
    public static int MaxMultiLineChars;
    public static char TabStopChar { get; }
    public static char NewLineChar { get; }
    public static char ReturnChar { get; }
    public static char SpaceChar { get; }
    public int Height { get; }
    public int AscentHeight { get; }
    public int InternalLeading { get; }
    internal int EmHeight { get; }
    public bool IsItalic { get; }
    public bool IsSymbolFont { get; private set; }
    internal bool Underline { get; }
    internal IntPtr FontHandle { get; }
    internal IntPtr FontUnderlineHandle { get; }
    public FontCache(Graphics graphics, Font font);
    private FontCache(IntPtr hdc, FontFamily family, int height, FontStyle style);
    private static FontCache();
    public sealed virtual void Dispose();
    [SecuritySafeCriticalAttribute]
protected virtual void DisposeCore();
    public static char get_TabStopChar();
    public static char get_NewLineChar();
    public static char get_ReturnChar();
    public static char get_SpaceChar();
    public static bool IsTabStop(char ch);
    public static bool IsNewLine(char ch);
    public static bool IsReturn(char ch);
    public static bool IsSpace(char ch);
    public int get_Height();
    public int get_AscentHeight();
    public int get_InternalLeading();
    internal int get_EmHeight();
    public bool get_IsItalic();
    [CompilerGeneratedAttribute]
public bool get_IsSymbolFont();
    [CompilerGeneratedAttribute]
private void set_IsSymbolFont(bool value);
    [SecuritySafeCriticalAttribute]
private IntPtr CreateGdiFont(LOGFONT lf, bool forceUnderline);
    public static IntPtr CreateFont(int nHeight, int nWidth, int nEscapement, int nOrientation, int fnWeight, int fdwItalic, int fdwUnderline, int fdwStrikeOut, int fdwCharSet, int fdwOutputPrecision, int fdwClipPrecision, int fdwQuality, int fdwPitchAndFamily, string lpszFace);
    [SecuritySafeCriticalAttribute]
private LOGFONT CreateLogFont(Font font);
    private bool IsMultiLine(StringFormat stringFormat);
    public void DrawString(Graphics graphics, Color foreColor, string text, Rectangle drawBounds, Rectangle clipBounds, StringFormat stringFormat, TextHighLight highLight, IWordBreakProvider wordBreakProvider);
    public void DrawString(Graphics graphics, Color foreColor, TextOutDraw draw);
    public TextOutDraw PrepareTextOut(Graphics graphics, Color foreColor, string text, Rectangle drawBounds, Rectangle clipBounds, StringFormat stringFormat, TextHighLight highLight, IWordBreakProvider wordBreakProvider);
    [SecuritySafeCriticalAttribute]
internal void DrawSingleLineStringSC(Graphics graphics, Color foreColor, string text, Rectangle drawBounds, StringFormat stringFormat);
    private TextOutDraw PrepareSingleLineTextOut(Graphics graphics, Color foreColor, string text, Rectangle drawBounds, Rectangle clipBounds, StringFormat stringFormat);
    [SecuritySafeCriticalAttribute]
internal void DrawStringSC(Graphics graphics, Color foreColor, string text, Rectangle drawBounds, Rectangle clipBounds, StringFormat stringFormat, TextHighLight highLight, IWordBreakProvider wordBreakProvider);
    [SecuritySafeCriticalAttribute]
internal void DrawStringSCCore(Graphics graphics, Color foreColor, TextOutDraw draw);
    public Size GetStringSize(Graphics graphics, string text, StringFormat stringFormat);
    public Size GetStringSize(Graphics graphics, string text, StringFormat stringFormat, int maxWidth);
    public Size GetStringSize(Graphics graphics, string text, StringFormat stringFormat, int maxWidth, int maxHeight);
    public Size GetStringSize(Graphics graphics, string text, StringFormat stringFormat, int maxWidth, int maxHeight, IWordBreakProvider wordBreakProvider);
    public Size GetStringSize(Graphics graphics, string text, StringFormat stringFormat, int maxWidth, int maxHeight, Boolean& isCropped);
    public Size GetStringSize(Graphics graphics, string text, StringFormat stringFormat, int maxWidth, IWordBreakProvider wordBreakProvider);
    public Size GetStringSize(Graphics graphics, string text, StringFormat stringFormat, int maxWidth, int maxHeight, IWordBreakProvider wordBreakProvider, Boolean& isCropped);
    public Int32[] GetMeasureString(Graphics graphics, string text, StringFormat stringFormat);
    public int GetStringHeight(Graphics graphics, string text, int width, StringFormat stringFormat);
    internal bool get_Underline();
    internal IntPtr get_FontHandle();
    internal IntPtr get_FontUnderlineHandle();
    private string ValidateString(string text, bool isMultiLine);
    private string ValidateString(string text, bool removeReturn, bool isMultiLine);
    private string ValidateString(string text, TextHighLight highLight, bool isMultiLine);
    private string ValidateString(string text, bool removeReturn, TextHighLight highLight, bool isMultiLine);
    public Int32[] GetCharactersWidth(Graphics graphics, string text, StringFormat stringFormat);
    public Int32[] GetCharactersWidth(Int32[] widths, Graphics graphics, string text, StringFormat stringFormat, int maxWidth, Int32& count);
    public Int32[] GetCharactersWidth(Int32[] widths, Graphics graphics, string text, StringFormat stringFormat, int maxWidth, Int32& count, Boolean& cropped);
    public int GetCharABCWidths(char ch);
    private bool IsFontChar(char ch);
    private int GetTabWidth(StringFormat stringFormat, int tabIndex);
    private bool CalculateMetrics(Graphics graphics, LOGFONT logFont);
    private void CalculateMetrics(IntPtr hdc, LOGFONT logFont);
    private void CalculateMetrics(Graphics graphics, Font font);
    private void CreateWidthAndKerningArrays();
    private void CreateWidthAndKerningArrays(IntPtr hdc);
    private void CreateKernings(IntPtr hdc);
    private void PrepareWidthAndKerningArrays(Graphics graphics, string text);
    private UInt32 GetKerningPairHashCode(char wFirst, char wSecond);
    private int GetKerningPairAmount(char wFirst, char wSecond);
    public static void Preview(Graphics graphics, FontFamily family, FontStyle style, Rectangle bounds, Color color, Font defaultFont, bool isRtl);
    [SecuritySafeCriticalAttribute]
private Size PreviewSize(IntPtr hdc, string name);
    [SecuritySafeCriticalAttribute]
private void DrawPreview(IntPtr hdc, string name, Color foreColor, Rectangle bounds);
    [SecuritySafeCriticalAttribute]
private static FontCache BestEmHeight(IntPtr hdc, FontCache fontCache, FontFamily fontFamily, int maxHeight);
    [CompilerGeneratedAttribute]
private IntPtr <.ctor>b__16_1();
    [CompilerGeneratedAttribute]
private IntPtr <.ctor>b__17_0();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Text.FontGuard : object {
    private static Func`2<Font, IntPtr> nativeFontAccessor;
    private static FontGuard();
    public static bool IsDisposedOrInvalid(Font font);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static IntPtr GetHandle(Font font);
    private static Func`2<Font, IntPtr> EmitNativeFontAccessor();
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Utils.Text.FontsCache : object {
    private Dictionary`2<GraphicsUnit, ConstDpiFontsCache> dpiHash;
    public FontCache Item { get; }
    protected virtual override void Finalize();
    public FontCache get_Item(Graphics graphics, Font font);
    public void DrawSingleLineString(Graphics g, string text, Font font, Color foreColor, Rectangle drawBounds, StringFormat format);
    public void DrawString(Graphics graphics, string text, Font font, Color foreColor, Rectangle drawBounds, Rectangle clipBounds, StringFormat stringFormat, TextHighLight highLight, IWordBreakProvider wordBreakProvider);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, IWordBreakProvider wordBreakProvider);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight, IWordBreakProvider wordBreakProvider);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight, Boolean& isCropped);
    public Size GetStringSize(Graphics graphics, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight, IWordBreakProvider wordBreakProvider, Boolean& isCropped);
    public Int32[] GetMeasureString(Graphics graphics, string text, Font font, StringFormat stringFormat);
    public int GetStringHeight(Graphics graphics, string text, Font font, int width, StringFormat stringFormat);
    public int GetFontHeight(Graphics graphics, Font font);
    public int GetFontAscentHeight(Graphics graphics, Font font);
    public int GetFontInternalLeading(Graphics graphics, Font font);
    private FontCache GetFontCacheByFont(Graphics graphics, Font font);
    internal void ResetFontCache(GraphicsUnit pageUnit, Font font);
    private sealed virtual override void System.IDisposable.Dispose();
    private void ClearDpiHash();
}
public class DevExpress.Utils.Text.HdcDpiEmptyModifier : HdcDpiModifier {
    public HdcDpiEmptyModifier(Graphics gr, Size viewPort);
    protected virtual void ApplyHDCDpi();
    protected virtual void RestoreHDCDpi();
}
public class DevExpress.Utils.Text.HdcDpiModifier : object {
    private Graphics gr;
    private Size viewPort;
    private int dpi;
    private SIZE oldWindowExt;
    private SIZE oldViewportExt;
    private int oldMapMode;
    protected int Dpi { get; }
    public HdcDpiModifier(Graphics gr, Size viewPort, int dpi);
    protected virtual int get_Dpi();
    public sealed virtual void Dispose();
    [SecuritySafeCriticalAttribute]
protected virtual void ApplyHDCDpi();
    [SecuritySafeCriticalAttribute]
protected virtual void RestoreHDCDpi();
}
public class DevExpress.Utils.Text.HdcDpiToDocuments : HdcDpiModifier {
    public HdcDpiToDocuments(Graphics gr, Size viewPort);
}
public static class DevExpress.Utils.Text.HdcPixelUtils : object {
    public static int GetLogicPixelPerInchX(IntPtr hdc);
    public static int GetLogicPixelPerInchY(IntPtr hdc);
}
public interface DevExpress.Utils.Text.IWordBreakProvider {
    public abstract virtual bool IsWordBreakChar(char ch);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.Text.StringFormatGuard : object {
    private static Func`2<StringFormat, IntPtr> nativeFormatAccessor;
    private static StringFormatGuard();
    public static bool IsDisposedOrInvalid(StringFormat format);
    private static Func`2<StringFormat, IntPtr> EmitNativeFormatAccessor();
}
public class DevExpress.Utils.Text.TextHighLight : object {
    private DisplayTextHighlightRange[] ranges;
    private Color backColor;
    private Color foreColor;
    public int StartIndex { get; public set; }
    public int Length { get; public set; }
    public int EndIndex { get; }
    public DisplayTextHighlightRange[] Ranges { get; public set; }
    public Color BackColor { get; }
    public Color ForeColor { get; }
    public TextHighLight(int startIndex, int length, Color backColor, Color foreColor);
    public TextHighLight(DisplayTextHighlightRange[] ranges, Color backColor, Color foreColor);
    public int get_StartIndex();
    public void set_StartIndex(int value);
    public int get_Length();
    public void set_Length(int value);
    public int get_EndIndex();
    public DisplayTextHighlightRange[] get_Ranges();
    public void set_Ranges(DisplayTextHighlightRange[] value);
    public Color get_BackColor();
    public Color get_ForeColor();
    public bool IsTextHighLighted(int textPos, int textLen);
}
public class DevExpress.Utils.Text.TextLine : object {
    private static Int32[] emptyWidths;
    private TextLines lines;
    private string elipsisText;
    private int elipsisWidth;
    private Int32[] elipsisWidths;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position2>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length2>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTrimmed>k__BackingField;
    private Char[] whiteSpaces;
    [CompilerGeneratedAttribute]
private Point <DrawPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DrawText>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <DrawWidths>k__BackingField;
    public int Position { get; private set; }
    public int Length { get; private set; }
    public int Position2 { get; private set; }
    public int Length2 { get; private set; }
    public bool IsTrimmed { get; private set; }
    public int TextWidth { get; }
    public int Text2Width { get; }
    public int LineWidth { get; }
    public string EllipsisText { get; }
    public int EllipsisWidth { get; }
    public Int32[] EllipsisWidths { get; }
    public bool HasEllipsis { get; public set; }
    private bool IsFirstLine { get; }
    private Char[] WhiteSpaces { get; }
    protected TextLines Lines { get; }
    protected Int32[] Widths { get; }
    public Point DrawPoint { get; internal set; }
    public string DrawText { get; internal set; }
    public Int32[] DrawWidths { get; internal set; }
    public TextLine(TextLines lines, int position, int length);
    private static TextLine();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
public int get_Position2();
    [CompilerGeneratedAttribute]
private void set_Position2(int value);
    [CompilerGeneratedAttribute]
public int get_Length2();
    [CompilerGeneratedAttribute]
private void set_Length2(int value);
    [CompilerGeneratedAttribute]
public bool get_IsTrimmed();
    [CompilerGeneratedAttribute]
private void set_IsTrimmed(bool value);
    public int get_TextWidth();
    public int get_Text2Width();
    public int get_LineWidth();
    public string get_EllipsisText();
    public int get_EllipsisWidth();
    public Int32[] get_EllipsisWidths();
    public int GetCharWidth(int index);
    public int GetCharWidth(int index, bool includeItalic);
    public bool get_HasEllipsis();
    public void set_HasEllipsis(bool value);
    public virtual string ToString();
    public void UpdateTrimmingLine(StringTrimming trimming, int drawBoundsWidth);
    public void UpdateTrimmingLine(StringTrimming trimming, int drawBoundsWidth, bool wordWrap, string text);
    private void TrimEllipsisPathWithoutDelimeter(int drawWidth, int lineLength, bool wordWrap);
    private void TrimEllipsisPathWithDelimeter(int drawWidth, int lineLength, int delimeterIndex, int pathEndWidth);
    private int CalculateLastPathPart(Int32& rightPartWidth, Int32& delimeterIndex);
    private void TrimmTextToWord(string text, bool wordWrap, int lineLength, int drawWidth, Int32& len, Int32& usedLineWidth);
    private bool ShouldProceed(bool isLineLast, int currentLen);
    private bool get_IsFirstLine();
    private bool IsLineLast(string text);
    private Char[] get_WhiteSpaces();
    private int GetLastValuableSymbolIndex(string text);
    protected bool GetIsTrimmingElipsis(StringTrimming trimming);
    protected TextLines get_Lines();
    protected Int32[] get_Widths();
    [CompilerGeneratedAttribute]
public Point get_DrawPoint();
    [CompilerGeneratedAttribute]
internal void set_DrawPoint(Point value);
    [CompilerGeneratedAttribute]
public string get_DrawText();
    [CompilerGeneratedAttribute]
internal void set_DrawText(string value);
    [CompilerGeneratedAttribute]
public Int32[] get_DrawWidths();
    [CompilerGeneratedAttribute]
internal void set_DrawWidths(Int32[] value);
    protected Int32[] GetCharactersWidth(string text);
    protected int GetTextWidth(int pos, int len);
    protected int GetNextWord(int startIndex, int textLength);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.Text.TextLines : object {
    private TextOutDraw draw;
    private int count;
    private TextLine[] lines;
    public int Count { get; }
    public TextLine Item { get; }
    public int Width { get; }
    public Int32[] Widths { get; }
    public TextOutDraw Draw { get; }
    public TextLines(TextOutDraw draw);
    public int get_Count();
    public TextLine get_Item(int index);
    public void Add(int position, int length);
    public int get_Width();
    public Int32[] get_Widths();
    public Int32[] GetCharacterWidths(string text);
    public int GetCharABCWidths(int position);
    public TextOutDraw get_Draw();
    protected TextLine AddLine(int position, int length);
    protected void Add(TextLine line);
}
public class DevExpress.Utils.Text.TEXTMETRIC : ValueType {
    public int tmHeight;
    public int tmAscent;
    public int tmDescent;
    public int tmInternalLeading;
    public int tmExternalLeading;
    public int tmAveCharWidth;
    public int tmMaxCharWidth;
    public int tmWeight;
    public int tmOverhang;
    public int tmDigitizedAspectX;
    public int tmDigitizedAspectY;
    public char tmFirstChar;
    public char tmLastChar;
    public char tmDefaultChar;
    public char tmBreakChar;
    public byte tmItalic;
    public byte tmUnderlined;
    public byte tmStruckOut;
    public byte tmPitchAndFamily;
    public byte tmCharSet;
}
public class DevExpress.Utils.Text.TextOutDraw : object {
    [ThreadStaticAttribute]
public static TextOutDraw LastTextOut;
    private Graphics graphics;
    private string text;
    private Rectangle drawBounds;
    private Rectangle clipedBounds;
    [ThreadStaticAttribute]
private static Int32[] CachedWidths;
    private Int32[] widths;
    private Boolean[] hotPrefixes;
    private StringFormat format;
    private StringAlignment formatAlignment;
    private StringFormatFlags formatFlags;
    private TextHighLight highLight;
    private FontCache fontCache;
    private int pos;
    private int drawTop;
    private int linepos;
    private bool isCliped;
    private bool measureTrailingSpaces;
    private bool isNoWrap;
    private bool trimming;
    private TextLines lines;
    private IWordBreakProvider wordBreakProvider;
    [CompilerGeneratedAttribute]
private bool <IsCropped>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <AllowCache>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TextLineInfo> <CachedLines>k__BackingField;
    [CompilerGeneratedAttribute]
private static IWordBreakProvider <CustomWordBreakProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForeColor>k__BackingField;
    public TextLines Lines { get; }
    internal TextLines TextLines { get; }
    public FontCache FontCache { get; }
    public int FontHeight { get; }
    public string Text { get; }
    public StringAlignment FormatAlignment { get; }
    public StringFormat Format { get; }
    public StringFormatFlags FormatFlags { get; }
    public Rectangle DrawBounds { get; public set; }
    public Rectangle ClipedBounds { get; public set; }
    public int Pos { get; public set; }
    public Int32[] Widths { get; }
    public bool IsCliped { get; }
    public bool MeasureTrailingSpaces { get; }
    public int LineCount { get; }
    public int MaxDrawWidth { get; }
    public bool IsCropped { get; private set; }
    private bool IsNoWrap { get; }
    private bool IsTrimmingElipsis { get; }
    public static bool AllowCache { get; public set; }
    protected List`1<TextLineInfo> CachedLines { get; protected set; }
    protected bool IsFontUnderline { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static IWordBreakProvider CustomWordBreakProvider { get; public set; }
    public Color ForeColor { get; internal set; }
    private static TextOutDraw();
    public TextOutDraw(bool singleLineSimpleString, FontCache fontCache, Graphics graphics, string text, Rectangle drawBounds, StringFormat format);
    internal TextOutDraw(FontCache fontCache, Graphics graphics, string text, int maxWidth, StringFormat format);
    public TextOutDraw(FontCache fontCache, Graphics graphics, string text, Rectangle drawBounds, Rectangle clipBounds, StringFormat format, TextHighLight highLight, IWordBreakProvider provider);
    public TextLines get_Lines();
    private void CreateSingleLine(int maxCount);
    internal TextLines get_TextLines();
    private StringAlignment CalcAlignment(StringAlignment stringAlignment, bool rightToLeft);
    public void SetGraphics(Graphics graphics);
    public FontCache get_FontCache();
    public virtual int get_FontHeight();
    public virtual Int32[] GetCharactersWidth(string text);
    public virtual Int32[] GetCharactersWidth(string text, int maxWidth, Int32& count);
    public virtual Int32[] GetCharactersWidth(string text, int maxWidth, Int32& count, Boolean& cropped);
    public string get_Text();
    public StringAlignment get_FormatAlignment();
    public StringFormat get_Format();
    public StringFormatFlags get_FormatFlags();
    public Rectangle get_DrawBounds();
    public void set_DrawBounds(Rectangle value);
    public Rectangle get_ClipedBounds();
    public void set_ClipedBounds(Rectangle value);
    public int get_Pos();
    public void set_Pos(int value);
    public Int32[] get_Widths();
    public bool get_IsCliped();
    public bool get_MeasureTrailingSpaces();
    public void DrawString(Graphics graphics);
    public void DrawCached(Graphics graphics);
    public void Offset(int x, int y);
    public void DrawString(IntPtr hdc);
    public int get_LineCount();
    public int get_MaxDrawWidth();
    [CompilerGeneratedAttribute]
public bool get_IsCropped();
    [CompilerGeneratedAttribute]
private void set_IsCropped(bool value);
    protected int GetCharABCWidths(char ch);
    public int GetCharABCWidths(int index);
    private bool get_IsNoWrap();
    private void CreateLines();
    private bool CanAddOneMoreLine(int lineTop);
    private bool IsLastWrapLine(int currentLineY);
    private void CreateWrapLines();
    private int FindNewLineIndex(int startIndex);
    private void CreateReturnLines();
    private void CreateNoWrapLines();
    private bool get_IsTrimmingElipsis();
    private void AddNewLineToList();
    private void AddNewLineToList(bool skipToNextWord);
    private bool CanRemoveSymbol(int pos);
    public int GetNextWord(int startIndex, int textLength);
    public int GetTextWidth(int startIndex, int length, bool ignoreOverhang);
    private Int32[] GetLineWidths(int length);
    private Int32[] GetLineWidths(int startIndex, int length);
    public void DrawSingleLineString(IntPtr hdc);
    private void DrawStringLines(IntPtr hdc);
    private void DrawStringLine(IntPtr hdc, TextLine line, Rectangle bounds);
    private void DrawStringLine(IntPtr hdc, int startPos, int length, int x, int y, TextHighLight highLight);
    private void DrawHighlightedRanges(IntPtr hdc, int startPos, int length, int x, int y, TextHighLight highLight, bool onlyHighlightedBackground);
    protected virtual void DrawHighLightStringLine(IntPtr hdc, Int32& startPos, Int32& length, Int32& x, int y, int highLightLen, bool onlyHighlightedBackground);
    private void DrawHighlightBackground(IntPtr hdc, Rectangle bounds);
    private void DrawStringLine(IntPtr hdc, Int32& startPos, Int32& length, Int32& x, int y, int highLightLen, bool ignoreOverhang, bool onlyCalculate);
    private void DrawStringLine(IntPtr hdc, int startPos, int length, int x, int y);
    private void DrawStringLine(IntPtr hdc, string lineText, int x, int y, Int32[] lineWidths, Boolean[] hotkeys);
    protected virtual void DrawStringLineWithHotkeys(IntPtr hdc, string lineText, int textX, int textY, Int32[] lineWidths, Boolean[] hotkeys);
    protected void DrawStringLine(IntPtr hdc, string lineText, int x, int y, Int32[] lineWidths);
    [CompilerGeneratedAttribute]
public static bool get_AllowCache();
    [CompilerGeneratedAttribute]
public static void set_AllowCache(bool value);
    [CompilerGeneratedAttribute]
protected List`1<TextLineInfo> get_CachedLines();
    [CompilerGeneratedAttribute]
protected void set_CachedLines(List`1<TextLineInfo> value);
    protected virtual void DrawText(IntPtr hdc, string text, int x, int y, Int32[] textWidths);
    private void GetHotKeyInfo(string text, int x, Int32[] lineWidths, Boolean[] hotkeys, String& newText, Int32[]& newLineWidths, Int32& newX);
    private int GetHotKeysCount(Boolean[] hotkeys, int length);
    protected virtual bool get_IsFontUnderline();
    private string ReplaceTabsWithSpaces(string st);
    private Rectangle CorrectRectangleLeft(Rectangle bounds, TextLine line);
    private Rectangle CorrectRectangleTop(Rectangle bounds);
    private Rectangle CorrectRectangleTop(Rectangle bounds, int height);
    private string ValidateHotPrefix(string text);
    private Rectangle ApplyTextUtilsOffsets(Rectangle bounds);
    private sealed virtual override bool DevExpress.Utils.Text.IWordBreakProvider.IsWordBreakChar(char ch);
    [CompilerGeneratedAttribute]
public static IWordBreakProvider get_CustomWordBreakProvider();
    [CompilerGeneratedAttribute]
public static void set_CustomWordBreakProvider(IWordBreakProvider value);
    [CompilerGeneratedAttribute]
public Color get_ForeColor();
    [CompilerGeneratedAttribute]
internal void set_ForeColor(Color value);
}
public class DevExpress.Utils.Text.TextUtils : object {
    public static string EllipsisString;
    [ThreadStaticAttribute]
private static FontsCache fontsCache;
    private static int tabStopSpacesCount;
    private static int leftOffset;
    private static int rightOffset;
    private static int topOffset;
    private static int bottomOffset;
    private static bool useKerning;
    public static int TabStopSpacesCount { get; public set; }
    public static int LeftOffset { get; public set; }
    public static int RightOffset { get; public set; }
    public static int TopOffset { get; public set; }
    public static int BottomOffset { get; public set; }
    public static bool UseKerning { get; public set; }
    private static FontsCache Fonts { get; }
    private static TextUtils();
    public static int get_TabStopSpacesCount();
    public static void set_TabStopSpacesCount(int value);
    public static int get_LeftOffset();
    public static void set_LeftOffset(int value);
    public static int get_RightOffset();
    public static void set_RightOffset(int value);
    public static int get_TopOffset();
    public static void set_TopOffset(int value);
    public static int get_BottomOffset();
    public static void set_BottomOffset(int value);
    public static void ResetOffsets();
    public static void SetOffsets(int left, int top, int right, int bottom);
    public static bool get_UseKerning();
    public static void set_UseKerning(bool value);
    private static FontsCache get_Fonts();
    public static void ResetFontsCache(Graphics g, Font font);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Point location);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Point location, Rectangle clipBounds);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Point location, StringFormat stringFormat);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Point location, Rectangle clipBounds, StringFormat stringFormat);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Rectangle drawBounds);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Rectangle drawBounds, Rectangle clipBounds);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Rectangle drawBounds, StringFormat stringFormat);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Rectangle drawBounds, Rectangle clipBounds, StringFormat stringFormat);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Rectangle drawBounds, StringFormat stringFormat, TextHighLight highLight);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Rectangle drawBounds, Rectangle clipBounds, StringFormat stringFormat, TextHighLight highLight);
    public static void DrawString(Graphics g, string text, Font font, Color foreColor, Rectangle drawBounds, Rectangle clipBounds, StringFormat stringFormat, TextHighLight highLight, IWordBreakProvider wordBreakProvider);
    public static void DrawSingleLineString(Graphics g, string text, Font font, Color foreColor, Rectangle drawBounds, StringFormat format);
    public static Size GetStringSize(Graphics g, string text, Font font);
    public static Size GetStringSize(Graphics g, string text, Font font, StringFormat stringFormat);
    public static Size GetStringSize(Graphics g, string text, Font font, StringFormat stringFormat, int maxWidth);
    public static Size GetStringSize(Graphics g, string text, Font font, StringFormat stringFormat, int maxWidth, IWordBreakProvider wordBreakProvider);
    public static Size GetStringSize(Graphics g, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight);
    public static Size GetStringSize(Graphics g, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight, IWordBreakProvider wordBreakProvider);
    public static Size GetStringSize(Graphics g, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight, Boolean& isCropped);
    public static Size GetStringSize(Graphics g, string text, Font font, StringFormat stringFormat, int maxWidth, int maxHeight, IWordBreakProvider wordBreakProvider, Boolean& isCropped);
    public static Int32[] GetMeasureString(Graphics g, string text, Font font);
    public static Int32[] GetMeasureString(Graphics g, string text, Font font, StringFormat stringFormat);
    public static int GetStringHeight(Graphics g, string text, Font font, int width);
    public static int GetStringHeight(Graphics g, string text, Font font, int width, StringFormat stringFormat);
    public static int GetFontHeight(Graphics g, Font font);
    public static int GetFontAscentHeight(Graphics g, Font font);
    public static int GetFontInternalLeading(Graphics g, Font font);
    public static bool IsMultilineTextFit(Graphics g, Font font, string text, Rectangle drawBounds, StringFormat format);
    public static int GetMaxCharacterCount(Graphics g, string text, Font font, StringFormat format, int maxWidth);
}
[SecuritySafeCriticalAttribute]
internal class DevExpress.Utils.Text.Win32Util : object {
    private static int ETO_CLIPPED;
    public static int MM_ANISOTROPIC;
    public static int TRANSPARENT;
    private static int LOGPIXELSX;
    private static int LOGPIXELSY;
    public static IntPtr CreateSolidBrush(IntPtr hdc);
    public static IntPtr CreateSolidBrush(int color);
    public static IntPtr CreateSolidBrush(Color color);
    public static void DeleteObject(IntPtr hObject);
    public static void FillRect(IntPtr hdc, Rectangle bounds, IntPtr hBrush);
    public static int GetTextColor(IntPtr hdc);
    public static void SetBkMode(IntPtr hdc, int mode);
    public static IntPtr SelectObject(IntPtr hdc, IntPtr handle);
    public static void SetTextColor(IntPtr hdc, Color color);
    public static void SetTextColor(IntPtr hdc, int color);
    public static void SetBkColor(IntPtr hdc, Color color);
    public static void ExtTextOut(IntPtr hdc, int x, int y, bool isCliped, Rectangle clip, string str, Int32[] spacings);
    public static void ExtTextOut(IntPtr hdc, int x, int y, bool isClipped, Rectangle clip, string str, int length, Int32[] spacings);
    public static TEXTMETRIC GetTextMetrics(IntPtr hdc);
    public static bool GetOutlineTextMetrics(IntPtr hdc, OUTLINETEXTMETRIC& lptm);
    public static Int32[] GetCharWidth(IntPtr hdc, UInt32 firstChar, UInt32 lastChar);
    public static Int32[] GetCharWidth32(IntPtr hdc, UInt32 firstChar, UInt32 lastChar);
    public static Int32[] GetCharABCWidths(HandleRef hdc, UInt32 firstChar, UInt32 lastChar);
    public static bool GetCharABCWidthsFloat(HandleRef hdc, UInt32 firstChar, UInt32 lastChar, ABCFLOAT[]& abcWidths);
    public static KerningPair[] GetKerningPairs(IntPtr hdc);
    public static int GetLogicPixelPerInchX(IntPtr hdc);
    public static int GetLogicPixelPerInchY(IntPtr hdc);
    private static RECT GetRect(Rectangle bounds);
}
[AttributeUsageAttribute("5")]
public class DevExpress.Utils.ToolboxTabNameAttribute : Attribute {
    private string tabName;
    public string TabName { get; }
    public ToolboxTabNameAttribute(string tabName);
    public string get_TabName();
}
[ExtensionAttribute]
public static class DevExpress.Utils.TypeBuilderExtensions : object {
    [ExtensionAttribute]
public static Type AsType(TypeBuilder builder);
    [ExtensionAttribute]
public static Type CreateType(TypeBuilder builder);
}
public class DevExpress.Utils.Url.FileUrlResolver : UrlResolver {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    protected string Directory { get; private set; }
    public FileUrlResolver(string directory);
    [CompilerGeneratedAttribute]
protected virtual string get_Directory();
    [CompilerGeneratedAttribute]
private void set_Directory(string value);
    public virtual bool TryMapPath(string path, String& value);
}
public class DevExpress.Utils.Url.HttpUrlResolver : UrlResolver {
    private MethodInfo mapPathMethod;
    private MethodInfo MapPathMethod { get; }
    protected object Server { get; }
    protected Uri Url { get; }
    public static string ResolveUrl(string url);
    private MethodInfo get_MapPathMethod();
    protected virtual object get_Server();
    protected virtual Uri get_Url();
    public virtual bool TryMapPath(string url, String& value);
    private bool CanMapPathCore(string url);
    private bool TryMapPathCore(string url, String& value);
    private bool TryResolveUrl(string url, String& value);
}
public class DevExpress.Utils.Url.InvalidUriException : Exception {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Uri { get; }
    public InvalidUriException(string uri);
    [CompilerGeneratedAttribute]
public string get_Uri();
}
public class DevExpress.Utils.Url.RelativeUrlResolver : FileUrlResolver {
    public RelativeUrlResolver(string directory);
    public virtual bool TryGetRelativePath(string url, String& value);
}
public static class DevExpress.Utils.Url.UnixPath : object {
    public static bool IsFullyQualified(string path);
    public static bool IsPartiallyQualified(string path);
}
public static class DevExpress.Utils.Url.UriCreator : object {
    public static Uri CreateUri(string path, AccessSettings settings);
    public static bool TryCreateUri(string path, Uri& uri);
    private static bool TryCreateUriCore(string path, Uri& uri);
    private static bool UriHasScheme(Uri uri);
    public static Uri ValidateUriSecurity(string path, AccessSettings settings);
}
public class DevExpress.Utils.Url.UriSecurityAccessException : Exception {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Uri { get; private set; }
    public UriSecurityAccessException(string uri);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(string value);
}
public enum DevExpress.Utils.UrlAccessSecurityLevel : Enum {
    public int value__;
    public static UrlAccessSecurityLevel Restricted;
    public static UrlAccessSecurityLevel WebUrlsOnly;
    public static UrlAccessSecurityLevel FilesFromBaseDirectory;
    public static UrlAccessSecurityLevel FilesFromDirectories;
    public static UrlAccessSecurityLevel Custom;
    public static UrlAccessSecurityLevel Unrestricted;
}
public class DevExpress.Utils.UrlAccessSecurityLevelSetting : object {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the DevExpress.Security.Resources.AccessSettings.StaticResources.TrySetRules method instead.")]
public static UrlAccessSecurityLevel SecurityLevel { get; public set; }
    public static UrlAccessSecurityLevel get_SecurityLevel();
    public static void set_SecurityLevel(UrlAccessSecurityLevel value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the DevExpress.Security.Resources.AccessSettings.StaticResources.TrySetRules method instead.")]
public static bool SafeSetSecurityLevel(UrlAccessSecurityLevel value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the DevExpress.Security.Resources.AccessSettings.StaticResources.TrySetRules method instead.")]
public static bool RegisterCustomCallback(Func`2<string, Uri> customCallback);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the DevExpress.Security.Resources.AccessSettings.StaticResources.TrySetRules method instead.")]
public static bool RegisterCustomBaseDirectories(String[] baseDirectories);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the DevExpress.Utils.Url.UriCreator.CreateUri method instead.")]
public static Uri CreateUriFromCustomRegistration(string path);
}
public abstract class DevExpress.Utils.UrlResolver : object {
    private static object lockInstance;
    private static UrlResolver instance;
    public static UrlResolver Instance { get; }
    private static UrlResolver();
    protected static bool TryGetResourceDirectory(String& directory);
    public static UrlResolver get_Instance();
    public static UrlResolver CreateInstance();
    public static string TrimUrl(string url);
    public abstract virtual bool TryMapPath(string path, String& value);
    public virtual bool TryGetRelativePath(string url, String& value);
    [ObsoleteAttribute("Use the UrlResolver.TryMapPath method instead.")]
public virtual string MapPath(string url);
    [ObsoleteAttribute("Use the UrlResolver.TryMapPath method instead.")]
public virtual bool CanMapPath(string url);
    protected bool IsAbsolutePath(string path);
}
[ExtensionAttribute]
public static class DevExpress.Utils.UrlResolverExtensions : object {
    private static String[] schemes;
    private static UrlResolverExtensions();
    [ExtensionAttribute]
public static string MapPath(UrlResolver resolver, string url, string defaultDirectory);
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.Utils.VertAlignment : Enum {
    public int value__;
    public static VertAlignment Default;
    public static VertAlignment Top;
    public static VertAlignment Center;
    public static VertAlignment Bottom;
}
public class DevExpress.Utils.WeakEventHandler`2 : object {
    private IWeakEventHandlerStrategy`1<TArgs> strategy;
    protected static bool IsNonPublicMethodAccessAllowed { get; }
    protected internal bool IsEmpty { get; }
    protected internal WeakEventHandler`2(IWeakEventHandlerStrategy`1<TArgs> strategy);
    protected static bool get_IsNonPublicMethodAccessAllowed();
    protected static IWeakEventHandlerStrategy`1<TArgs> CreateStrategy();
    protected internal bool get_IsEmpty();
    protected internal void Add(Delegate target);
    protected internal void Remove(Delegate target);
    protected internal void Purge();
    public void Raise(object sender, TArgs args);
    public static WeakEventHandler`2<TArgs, TBaseHandler> op_Addition(WeakEventHandler`2<TArgs, TBaseHandler> target, Delegate value);
    public static WeakEventHandler`2<TArgs, TBaseHandler> op_Subtraction(WeakEventHandler`2<TArgs, TBaseHandler> target, Delegate value);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Utils.WeakKeyDictionary`2 : object {
    private List`1<WeakReference> keys;
    private List`1<TValue> values;
    public IList Keys { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public IList get_Keys();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public int get_Count();
    public void Add(TKey key, TValue value);
    public bool Remove(TKey key);
    public bool ContainsKey(TKey key);
    public bool ContainsValue(TValue value);
    public void Clear();
    private void Insert(TKey key, TValue value, bool add);
    public bool TryGetValue(TKey key, TValue& value);
    private int FindEntry(TKey key);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("DevExpress.Utils.WeakKeyDictionary`2/<GetEnumeratorCore>d__19")]
private IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumeratorCore();
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.Utils.WordWrap : Enum {
    public int value__;
    public static WordWrap Default;
    public static WordWrap NoWrap;
    public static WordWrap Wrap;
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.Utils.WpfSerialNumberProvider : object {
    public static string GetSerial();
}
public class DevExpress.Utils.XmlBasedExporterUtils : object {
    private StringBuilder preProcessVariableValueStringBuilder;
    private FastCharacterMultiReplacement xmlCharsReplacement;
    private Dictionary`2<char, string> xmlCharsReplacementTable;
    private Dictionary`2<char, string> xmlCharsNoCrLfReplacementTable;
    private Dictionary`2<char, string> xmlCharsNoCrLfTabReplacementTable;
    private Dictionary`2<char, string> xmlCharsOffice2003XMLReplacementTable;
    [ThreadStaticAttribute]
private static XmlBasedExporterUtils instance;
    public static XmlBasedExporterUtils Instance { get; }
    public static XmlBasedExporterUtils get_Instance();
    public CompressedXmlStreamInfo BeginCreateUncompressedXmlContent(XmlWriterSettings xmlSettings);
    public CompressedXmlStreamInfo BeginCreateUncompressedXmlContent(XmlWriterSettings xmlSettings, Encoding encoding);
    public Stream EndCreateUncompressedXmlContent(CompressedXmlStreamInfo info);
    public Stream CreateUncompressedXmlContent(Action`1<XmlWriter> action, XmlWriterSettings xmlSettings);
    public Stream CreateUncompressedXmlContent(Action`1<XmlWriter> action, XmlWriterSettings xmlSettings, Encoding encoding);
    public CompressedXmlStreamInfo BeginCreateCompressedXmlContent(XmlWriterSettings xmlSettings);
    public CompressedStream EndCreateCompressedXmlContent(CompressedXmlStreamInfo info);
    private void Dispose(IDisposable disposable);
    public CompressedStream CreateCompressedXmlContent(Action`1<XmlWriter> action, XmlWriterSettings xmlSettings);
    public XmlWriterSettings CreateDefaultXmlWriterSettings();
    private static Dictionary`2<char, string> CreateVariableValueReplacementTable();
    private static Dictionary`2<char, string> CreateVariableValueNoCrLfReplacementTable();
    private static Dictionary`2<char, string> CreateVariableValueNoTabCrLfReplacementTable();
    private static Dictionary`2<char, string> CreateVariableOffice2003XMLReplacementTable();
    public string EncodeXmlChars(string value);
    public string EncodeXmlCharsNoCrLf(string value);
    public string EncodeXmlCharsXML1_0(string value);
    public string EncodeXmlCharsOffice2003XML(string value);
    public string ReplaceInvalidUriCharacters(string uri);
    public string RemoveInvalidUriCharacters(string uri);
    private bool HasInvalidUriCharacters(string uri);
}
public static class DevExpress.Utils.XmlDataHelper : object {
    public static string GetXmlSchema(DataSet ds);
    public static DataSet CreateDataSetByXmlUrl(string xmlUrl, bool schemaOnly);
    public static DataSet CreateDataSetBySchema(string xmlSchema);
}
public class DevExpress.Utils.Zip.Adler32 : object {
    private static int adler32Base;
    private static UInt32 maxAdler;
    private UInt32 adler32s1;
    private UInt32 adler32s2;
    public static long Calculate(Byte[] values);
    public static long Calculate(Int32[] values);
    internal void Initialize(UInt32 value);
    public void Add(byte value);
    public void Add(Byte[] values);
    public void Add(Byte[] values, int offset, int count);
    public void Write(Stream stream);
    public long ToLong();
    internal UInt32 ToUInt();
    private void Normalize();
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.Zip.Adler32CheckSumCalculator : object {
    private static Adler32CheckSumCalculator instance;
    private Adler32 adler;
    public static Adler32CheckSumCalculator Instance { get; }
    public UInt32 InitialCheckSumValue { get; }
    public static Adler32CheckSumCalculator get_Instance();
    public sealed virtual UInt32 get_InitialCheckSumValue();
    public sealed virtual UInt32 UpdateCheckSum(UInt32 value, Byte[] buffer, int offset, int count);
    public sealed virtual UInt32 GetFinalCheckSum(UInt32 value);
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.Zip.Adler32Stream : CheckSumStream`1<UInt32> {
    public Adler32Stream(Stream stream);
}
public class DevExpress.Utils.Zip.ByteCountCheckSumCalculator : object {
    private static ByteCountCheckSumCalculator instance;
    public static ByteCountCheckSumCalculator Instance { get; }
    public long InitialCheckSumValue { get; }
    public static ByteCountCheckSumCalculator get_Instance();
    public sealed virtual long get_InitialCheckSumValue();
    public sealed virtual long UpdateCheckSum(long value, Byte[] buffer, int offset, int count);
    public sealed virtual long GetFinalCheckSum(long value);
}
public class DevExpress.Utils.Zip.ByteCountStream : CheckSumStream`1<long> {
    public ByteCountStream(Stream stream);
}
public class DevExpress.Utils.Zip.CheckSumStream`1 : Stream {
    private Stream stream;
    private ICheckSumCalculator`1<T> checkSumCalculator;
    private T readCheckSum;
    private T writeCheckSum;
    public Stream Stream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public T ReadCheckSum { get; }
    public T WriteCheckSum { get; }
    public CheckSumStream`1(Stream stream, ICheckSumCalculator`1<T> checkSumCalculator);
    public Stream get_Stream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public T get_ReadCheckSum();
    public T get_WriteCheckSum();
    public void ResetCheckSum();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class DevExpress.Utils.Zip.CompressedStream : object {
    private int crc32;
    private long uncompressedSize;
    private Stream stream;
    public int Crc32 { get; public set; }
    public long UncompressedSize { get; public set; }
    public Stream Stream { get; public set; }
    public int get_Crc32();
    public void set_Crc32(int value);
    public long get_UncompressedSize();
    public void set_UncompressedSize(long value);
    public Stream get_Stream();
    public void set_Stream(Stream value);
}
[CLSCompliantAttribute("False")]
public static class DevExpress.Utils.Zip.Crc32CheckSum : object {
    private static UInt32[] table;
    public static UInt32[] Table { get; }
    private static Crc32CheckSum();
    private static UInt32[] CreateTable();
    public static UInt32[] get_Table();
    public static UInt32 Update(UInt32 checkSum, Byte[] buffer, int offset, int count);
    public static UInt32 Calculate(UInt32 checkSum, byte ch);
    public static UInt32 Calculate(string str);
    public static UInt32 Calculate(Stream stream);
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.Zip.Crc32CheckSumCalculator : object {
    private static Crc32CheckSumCalculator instance;
    public static Crc32CheckSumCalculator Instance { get; }
    public UInt32 InitialCheckSumValue { get; }
    public static Crc32CheckSumCalculator get_Instance();
    public sealed virtual UInt32 get_InitialCheckSumValue();
    public sealed virtual UInt32 UpdateCheckSum(UInt32 value, Byte[] buffer, int offset, int count);
    public sealed virtual UInt32 GetFinalCheckSum(UInt32 value);
}
[CLSCompliantAttribute("False")]
public class DevExpress.Utils.Zip.Crc32Stream : CheckSumStream`1<UInt32> {
    public Crc32Stream(Stream stream);
}
public class DevExpress.Utils.Zip.HashCheckSumCalculator : object {
    private HashAlgorithm hashAlgorithm;
    private Byte[] emptyBlock;
    public Byte[] InitialCheckSumValue { get; }
    public HashCheckSumCalculator(HashAlgorithm hashAlgorithm);
    public sealed virtual Byte[] get_InitialCheckSumValue();
    public sealed virtual Byte[] GetFinalCheckSum(Byte[] value);
    public sealed virtual Byte[] UpdateCheckSum(Byte[] value, Byte[] buffer, int offset, int count);
}
public interface DevExpress.Utils.Zip.ICheckSumCalculator`1 {
    public T InitialCheckSumValue { get; }
    public abstract virtual T get_InitialCheckSumValue();
    public abstract virtual T UpdateCheckSum(T value, Byte[] buffer, int offset, int count);
    public abstract virtual T GetFinalCheckSum(T value);
}
public class DevExpress.Utils.Zip.Internal.CentralDirectoryEntry : object {
    [CompilerGeneratedAttribute]
private short <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Crc32>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CompressedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UncompressedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MsDosDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RelativeOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private IZipExtraFieldCollection <ExtraFields>k__BackingField;
    [CompilerGeneratedAttribute]
private short <GeneralPurposeFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionMethod <CompressionMethod>k__BackingField;
    public short Version { get; public set; }
    public int Crc32 { get; public set; }
    public int CompressedSize { get; public set; }
    public int UncompressedSize { get; public set; }
    public string FileName { get; public set; }
    public int MsDosDateTime { get; public set; }
    public int RelativeOffset { get; public set; }
    public int FileAttributes { get; public set; }
    public string Comment { get; public set; }
    public IZipExtraFieldCollection ExtraFields { get; public set; }
    public short GeneralPurposeFlag { get; public set; }
    public CompressionMethod CompressionMethod { get; public set; }
    [CompilerGeneratedAttribute]
public short get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(short value);
    [CompilerGeneratedAttribute]
public int get_Crc32();
    [CompilerGeneratedAttribute]
public void set_Crc32(int value);
    [CompilerGeneratedAttribute]
public int get_CompressedSize();
    [CompilerGeneratedAttribute]
public void set_CompressedSize(int value);
    [CompilerGeneratedAttribute]
public int get_UncompressedSize();
    [CompilerGeneratedAttribute]
public void set_UncompressedSize(int value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public int get_MsDosDateTime();
    [CompilerGeneratedAttribute]
public void set_MsDosDateTime(int value);
    [CompilerGeneratedAttribute]
public int get_RelativeOffset();
    [CompilerGeneratedAttribute]
public void set_RelativeOffset(int value);
    [CompilerGeneratedAttribute]
public int get_FileAttributes();
    [CompilerGeneratedAttribute]
public void set_FileAttributes(int value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public IZipExtraFieldCollection get_ExtraFields();
    [CompilerGeneratedAttribute]
public void set_ExtraFields(IZipExtraFieldCollection value);
    [CompilerGeneratedAttribute]
public short get_GeneralPurposeFlag();
    [CompilerGeneratedAttribute]
public void set_GeneralPurposeFlag(short value);
    [CompilerGeneratedAttribute]
public CompressionMethod get_CompressionMethod();
    [CompilerGeneratedAttribute]
public void set_CompressionMethod(CompressionMethod value);
}
public enum DevExpress.Utils.Zip.Internal.CompressionMethod : Enum {
    public int value__;
    public static CompressionMethod Store;
    public static CompressionMethod Shrunke;
    public static CompressionMethod Reduce1;
    public static CompressionMethod Reduce2;
    public static CompressionMethod Reduce3;
    public static CompressionMethod Reduce4;
    public static CompressionMethod Implode;
    public static CompressionMethod TokenizingCompression;
    public static CompressionMethod Deflate;
    public static CompressionMethod Deflate64;
    public static CompressionMethod PkWareImplode;
    public static CompressionMethod BZip2;
    public static CompressionMethod LZMA;
    public static CompressionMethod IbmTerse;
    public static CompressionMethod LZ77;
    public static CompressionMethod PPMd11;
    public static CompressionMethod AESEncryption;
}
public class DevExpress.Utils.Zip.Internal.CopyProgressHandler : MulticastDelegate {
    public CopyProgressHandler(object object, IntPtr method);
    public virtual bool Invoke(int bytesCopied);
    public virtual IAsyncResult BeginInvoke(int bytesCopied, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class DevExpress.Utils.Zip.Internal.DeflateCompressionStrategy : object {
    private int crc32;
    public CompressionMethod CompressionMethod { get; }
    public int Crc32 { get; }
    public sealed virtual CompressionMethod get_CompressionMethod();
    public sealed virtual int get_Crc32();
    public sealed virtual void Compress(Stream sourceStream, Stream targetStream, IZipComplexOperationProgress progress);
    private Stream CreateDeflateStream(Stream stream);
    public sealed virtual short GetGeneralPurposeBitFlag();
    public sealed virtual void PrepareExtraFields(IZipExtraFieldCollection extraFields);
}
public class DevExpress.Utils.Zip.Internal.DeflateDecompressionStrategy : object {
    public sealed virtual Stream Decompress(Stream rawStream);
}
[FlagsAttribute]
public enum DevExpress.Utils.Zip.Internal.ExtraFieldType : Enum {
    public int value__;
    public static ExtraFieldType LocalHeader;
    public static ExtraFieldType CentralDirectoryEntry;
    public static ExtraFieldType Both;
}
public class DevExpress.Utils.Zip.Internal.FactorySingleton`1 : object {
    private static T instance;
    public static T Instance { get; }
    public static T get_Instance();
}
public class DevExpress.Utils.Zip.Internal.FixedOffsetSequentialReadOnlyStream : Stream {
    private Stream baseStream;
    private long basePosition;
    private long length;
    private long position;
    private bool isPackedStream;
    public Stream BaseStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public FixedOffsetSequentialReadOnlyStream(Stream baseStream, long length);
    public FixedOffsetSequentialReadOnlyStream(Stream baseStream, long basePosition, long length, bool isPackedStream);
    public Stream get_BaseStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected internal virtual void ValidateBaseStreamPosition();
    public virtual int Read(Byte[] buffer, int offset, int count);
    protected virtual int ReadFromBaseStream(Byte[] buffer, int offset, int count);
    protected void IncrementPosition(long offset);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
}
public interface DevExpress.Utils.Zip.Internal.ICompressionStrategy {
    public CompressionMethod CompressionMethod { get; }
    public int Crc32 { get; }
    public abstract virtual void Compress(Stream sourceStream, Stream targetStream, IZipComplexOperationProgress progress);
    public abstract virtual CompressionMethod get_CompressionMethod();
    public abstract virtual int get_Crc32();
    public abstract virtual short GetGeneralPurposeBitFlag();
    public abstract virtual void PrepareExtraFields(IZipExtraFieldCollection extraFields);
}
public interface DevExpress.Utils.Zip.Internal.IDecompressionStrategy {
    public abstract virtual Stream Decompress(Stream stream);
}
public class DevExpress.Utils.Zip.Internal.InternalZipExtraFieldFactory : object {
    public virtual IZipExtraField Create(int headerId);
}
public class DevExpress.Utils.Zip.Internal.InternalZipExtraFieldFactoryInstance : FactorySingleton`1<InternalZipExtraFieldFactory> {
}
public class DevExpress.Utils.Zip.Internal.InternalZipFileParser : InternalZipFileParserCore`1<InternalZipFile> {
    public InternalZipFileCollection Records { get; }
    public InternalZipFileCollection get_Records();
    protected virtual IList`1<InternalZipFile> CreateRecords();
}
public abstract class DevExpress.Utils.Zip.Internal.InternalZipFileParserCore`1 : object {
    private IList`1<T> records;
    private Dictionary`2<string, T> zipDictionary;
    [CompilerGeneratedAttribute]
private int <ProcessedZipRecordCount>k__BackingField;
    protected IList`1<T> InnerRecords { get; }
    protected Dictionary`2<string, T> ZipDictionary { get; }
    protected bool IsTryToReadBadArchive { get; }
    public int ProcessedZipRecordCount { get; private set; }
    protected IList`1<T> get_InnerRecords();
    protected Dictionary`2<string, T> get_ZipDictionary();
    protected virtual bool get_IsTryToReadBadArchive();
    [CompilerGeneratedAttribute]
public int get_ProcessedZipRecordCount();
    [CompilerGeneratedAttribute]
private void set_ProcessedZipRecordCount(int value);
    public virtual void Parse(Stream stream);
    public void Parse(Stream stream, Encoding fileNameEncoding);
    protected virtual ZipSignatures FindNextSignature(BinaryReader reader);
    private void Add(T item);
    private bool ProcessZipRecord(BinaryReader reader, ZipSignatures signature, Encoding fileNameEncoding);
    protected virtual void ProcessEndOfCentralDirSignature(BinaryReader reader, Encoding fileNameEncoding);
    protected virtual T ProcessZipFile(BinaryReader reader, Encoding fileNameEncoding);
    protected T FindRecordByName(string name);
    protected virtual void PorcessFileEntryRecord(BinaryReader reader, Encoding fileNameEncoding);
    protected virtual T CreateZipFileInstance();
    protected virtual bool CanContinueProcessZipRecord();
    protected abstract virtual IList`1<T> CreateRecords();
}
public interface DevExpress.Utils.Zip.Internal.IZipComplexOperationProgress {
    public abstract virtual void AddOperationProgress(IZipOperationProgress progressItem);
}
public interface DevExpress.Utils.Zip.Internal.IZipExtraField {
    public ExtraFieldType Type { get; }
    public short Id { get; }
    public short ContentSize { get; }
    public abstract virtual ExtraFieldType get_Type();
    public abstract virtual short get_Id();
    public abstract virtual short get_ContentSize();
    public abstract virtual void AssignRawData(BinaryReader reader);
    public abstract virtual void Apply(InternalZipFile zipFile);
    public abstract virtual void Write(BinaryWriter writer);
}
public interface DevExpress.Utils.Zip.Internal.IZipExtraFieldCollection {
    public abstract virtual short CalculateSize(ExtraFieldType fieldType);
    public abstract virtual void Write(BinaryWriter writer, ExtraFieldType fieldType);
    public abstract virtual void Add(IZipExtraField field);
}
public interface DevExpress.Utils.Zip.Internal.IZipExtraFieldFactory {
    public abstract virtual IZipExtraField Create(int headerId);
}
public interface DevExpress.Utils.Zip.Internal.IZipOperationProgress {
    public double CurrentProgress { get; }
    public double Weight { get; }
    public bool IsStopped { get; }
    public abstract virtual double get_CurrentProgress();
    public abstract virtual double get_Weight();
    public abstract virtual bool get_IsStopped();
    [CompilerGeneratedAttribute]
public abstract virtual void add_NotifyProgress(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NotifyProgress(EventHandler value);
    public abstract virtual void Stop();
}
public class DevExpress.Utils.Zip.Internal.NoCompressionDecompressionStrategy : object {
    public sealed virtual Stream Decompress(Stream stream);
}
public class DevExpress.Utils.Zip.Internal.StoreCompressionStrategy : object {
    private int crc32;
    public CompressionMethod CompressionMethod { get; }
    public int Crc32 { get; }
    public sealed virtual CompressionMethod get_CompressionMethod();
    public sealed virtual int get_Crc32();
    public sealed virtual void Compress(Stream sourceStream, Stream targetStream, IZipComplexOperationProgress progress);
    public sealed virtual short GetGeneralPurposeBitFlag();
    public sealed virtual void PrepareExtraFields(IZipExtraFieldCollection extraFields);
}
public static class DevExpress.Utils.Zip.Internal.StreamUtils : object {
    public static void CopyStream(Stream sourceStream, Stream targetStream);
    public static void CopyStream(Stream sourceStream, Stream targetStream, CopyProgressHandler copyDelegate);
    public static void MakeReadingPass(Stream sourceStream, CopyProgressHandler copyDelegate);
}
internal class DevExpress.Utils.Zip.Internal.UseCompressedStreamCompressionStrategy : object {
    private CompressedStream stream;
    public CompressionMethod CompressionMethod { get; }
    public int Crc32 { get; }
    public UseCompressedStreamCompressionStrategy(CompressedStream stream);
    public sealed virtual CompressionMethod get_CompressionMethod();
    public sealed virtual int get_Crc32();
    public sealed virtual void Compress(Stream sourceStream, Stream targetStream, IZipComplexOperationProgress progress);
    public sealed virtual short GetGeneralPurposeBitFlag();
    public sealed virtual void PrepareExtraFields(IZipExtraFieldCollection extraFields);
}
public class DevExpress.Utils.Zip.Internal.ZeroLengthContentDecompressionStrategy : object {
    public sealed virtual Stream Decompress(Stream stream);
}
public class DevExpress.Utils.Zip.Internal.Zip64ExtraField : ZipExtraField {
    public static int HeaderId;
    [CompilerGeneratedAttribute]
private long <UncompressedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CompressedSize>k__BackingField;
    public short Id { get; }
    public ExtraFieldType Type { get; }
    public short ContentSize { get; }
    public long UncompressedSize { get; public set; }
    public long CompressedSize { get; public set; }
    public virtual short get_Id();
    public virtual ExtraFieldType get_Type();
    public virtual short get_ContentSize();
    [CompilerGeneratedAttribute]
public long get_UncompressedSize();
    [CompilerGeneratedAttribute]
public void set_UncompressedSize(long value);
    [CompilerGeneratedAttribute]
public long get_CompressedSize();
    [CompilerGeneratedAttribute]
public void set_CompressedSize(long value);
    public virtual void AssignRawData(BinaryReader reader);
    public virtual void Apply(InternalZipFile zipFile);
    public void Initialize(CentralDirectoryEntry dirEntry, long uncompressedSize, long compressedSize);
    private short CalculateContentSize();
    public virtual void Write(BinaryWriter writer);
}
public class DevExpress.Utils.Zip.Internal.ZipCopyStreamOperationProgress : object {
    private double weight;
    private long totalSize;
    private long totalBytesCopied;
    private double currentProgress;
    private bool isStopped;
    [CompilerGeneratedAttribute]
private EventHandler NotifyProgress;
    public double CurrentProgress { get; }
    public double Weight { get; }
    public long TotalSize { get; }
    public bool IsStopped { get; }
    public ZipCopyStreamOperationProgress(long totalSize);
    public ZipCopyStreamOperationProgress(long totalSize, double weight);
    public sealed virtual double get_CurrentProgress();
    public sealed virtual double get_Weight();
    public long get_TotalSize();
    public sealed virtual bool get_IsStopped();
    [CompilerGeneratedAttribute]
public sealed virtual void add_NotifyProgress(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NotifyProgress(EventHandler value);
    public bool CopyHandler(int bytesCopied);
    public sealed virtual void Stop();
}
public static class DevExpress.Utils.Zip.Internal.ZipDateTimeHelper : object {
    public static int ToMsDosDateTime(DateTime dateTime);
    public static DateTime FromMsDos(int data);
}
public static class DevExpress.Utils.Zip.Internal.ZipEncodingHelper : object {
    public static bool CanCodeToASCII(string sourceString);
    public static bool CanCodeToEncoding(Encoding encoding, string sourceString);
}
public abstract class DevExpress.Utils.Zip.Internal.ZipExtraField : object {
    public short Id { get; }
    public ExtraFieldType Type { get; }
    public short ContentSize { get; }
    public abstract virtual short get_Id();
    public abstract virtual ExtraFieldType get_Type();
    public abstract virtual short get_ContentSize();
    public abstract virtual void Apply(InternalZipFile zipFile);
    public abstract virtual void AssignRawData(BinaryReader reader);
    public abstract virtual void Write(BinaryWriter writer);
}
public class DevExpress.Utils.Zip.Internal.ZipExtraFieldComposition : object {
    private static int HeaderInfoSize;
    private List`1<IZipExtraField> fields;
    public List`1<IZipExtraField> Fields { get; }
    public static ZipExtraFieldComposition Read(BinaryReader reader, long extraFieldsLength, IZipExtraFieldFactory headerFactory);
    private static void SkipUnusedBytes(FixedOffsetSequentialReadOnlyStream dataStream, long bytesToSkip);
    public List`1<IZipExtraField> get_Fields();
    public void Apply(InternalZipFile zipFile);
    public sealed virtual void Add(IZipExtraField field);
    public sealed virtual void Write(BinaryWriter writer, ExtraFieldType type);
    public sealed virtual short CalculateSize(ExtraFieldType type);
}
public enum DevExpress.Utils.Zip.Internal.ZipSignatures : Enum {
    public int value__;
    public static ZipSignatures FileRecord;
    public static ZipSignatures DataDescriptorRecord;
    public static ZipSignatures MultiVolumeArchiveRecord;
    public static ZipSignatures ArchiveExtraDataRecord;
    public static ZipSignatures FileEntryRecord;
    public static ZipSignatures DigitalSignatureRecord;
    public static ZipSignatures EndOfCentralDirSignature;
}
public class DevExpress.Utils.Zip.InternalZipArchive : InternalZipArchiveCore {
    public InternalZipArchive(string zipFileName);
    public InternalZipArchive(Stream stream);
    public static bool IsZipFileSignature(int value);
    public static InternalZipFileCollection Open(Stream stream);
    public static InternalZipFileCollection Open(Stream stream, Encoding fileNameEncoding);
}
public class DevExpress.Utils.Zip.InternalZipArchiveCore : object {
    private static short ZipVersion;
    private static short Zip64Version;
    private Stream zipStream;
    private BinaryWriter writer;
    private List`1<CentralDirectoryEntry> centralDirectory;
    private bool requireDisposeForStream;
    private bool globallyUsed64Zip;
    protected internal List`1<CentralDirectoryEntry> CentralDirectory { get; }
    private BinaryWriter Writer { get; }
    protected internal Stream ZipStream { get; }
    private Encoding UTF8Encoding { get; }
    public InternalZipArchiveCore(string zipFileName);
    public InternalZipArchiveCore(Stream stream);
    protected internal List`1<CentralDirectoryEntry> get_CentralDirectory();
    private BinaryWriter get_Writer();
    protected internal Stream get_ZipStream();
    private Encoding get_UTF8Encoding();
    private void WriteCentralDirectory();
    private Byte[] ConvertToByteArray(string value, bool useUtf);
    protected internal virtual Stream CreateDeflateStream(Stream stream);
    internal CompressionMethod GetDeflateStreamCompressionMethod();
    public void Add(string fileName);
    public void AddCompressed(string name, DateTime fileTime, CompressedStream compressedStream);
    public void AddAsIs(InternalZipFile file);
    private bool Check64Zip(long uncompressedSize);
    private short CalculateGeneralPurposeFlag(string fileName, ICompressionStrategy compressionStrategy);
    protected virtual Encoding GetDefaultEncoding();
    protected virtual CentralDirectoryEntry WriteFile(string name, DateTime fileTime, Stream stream, ICompressionStrategy compressionStrategy, IZipComplexOperationProgress progress);
    protected virtual IZipExtraFieldCollection CreateExtraFieldCollection();
    private void Add64ZipExtraField(CentralDirectoryEntry dirEntry, long uncompressedSize, long compressedSize);
    public void Add(string name, DateTime fileTime, Stream stream);
    private long WriteDirectoryEntry(CentralDirectoryEntry dirEntry, ICompressionStrategy compressionStrategy, bool zeroSized);
    public void Add(string fileName, DateTime fileTime, string content);
    public void Add(string fileName, DateTime fileTime, Byte[] content);
    public void Add(string fileName, DateTime fileTime, Byte[] content, int index, int count);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class DevExpress.Utils.Zip.InternalZipFile : object {
    private Encoding fileNameEncoding;
    private Stream internalFileDataStream;
    [CompilerGeneratedAttribute]
private short <FileNameLength>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LocalHeaderExtraFieldLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Crc32>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipFlags <GeneralPurposeBitFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UncompressedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CompressedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamProxy <ContentRawDataStreamProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionMethod <CompressionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <FileLastModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <CheckByte>k__BackingField;
    [CompilerGeneratedAttribute]
private short <VersionToExtract>k__BackingField;
    protected internal short FileNameLength { get; protected internal set; }
    protected internal short LocalHeaderExtraFieldLength { get; protected internal set; }
    protected internal int Crc32 { get; protected internal set; }
    protected internal ZipFlags GeneralPurposeBitFlag { get; protected internal set; }
    public long UncompressedSize { get; protected internal set; }
    public long CompressedSize { get; protected internal set; }
    protected internal StreamProxy ContentRawDataStreamProxy { get; private set; }
    protected internal CompressionMethod CompressionMethod { get; protected internal set; }
    public Stream FileDataStream { get; }
    public string FileName { get; protected set; }
    public Encoding DefaultEncoding { get; public set; }
    public DateTime FileLastModificationTime { get; public set; }
    public bool IsEncrypted { get; private set; }
    public byte CheckByte { get; private set; }
    protected short VersionToExtract { get; protected set; }
    [CompilerGeneratedAttribute]
protected internal short get_FileNameLength();
    [CompilerGeneratedAttribute]
protected internal void set_FileNameLength(short value);
    [CompilerGeneratedAttribute]
protected internal short get_LocalHeaderExtraFieldLength();
    [CompilerGeneratedAttribute]
protected internal void set_LocalHeaderExtraFieldLength(short value);
    [CompilerGeneratedAttribute]
protected internal int get_Crc32();
    [CompilerGeneratedAttribute]
protected internal void set_Crc32(int value);
    [CompilerGeneratedAttribute]
protected internal ZipFlags get_GeneralPurposeBitFlag();
    [CompilerGeneratedAttribute]
protected internal void set_GeneralPurposeBitFlag(ZipFlags value);
    [CompilerGeneratedAttribute]
public long get_UncompressedSize();
    [CompilerGeneratedAttribute]
protected internal void set_UncompressedSize(long value);
    [CompilerGeneratedAttribute]
public long get_CompressedSize();
    [CompilerGeneratedAttribute]
protected internal void set_CompressedSize(long value);
    [CompilerGeneratedAttribute]
protected internal StreamProxy get_ContentRawDataStreamProxy();
    [CompilerGeneratedAttribute]
private void set_ContentRawDataStreamProxy(StreamProxy value);
    [CompilerGeneratedAttribute]
protected internal CompressionMethod get_CompressionMethod();
    [CompilerGeneratedAttribute]
protected internal void set_CompressionMethod(CompressionMethod value);
    public Stream get_FileDataStream();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
protected void set_FileName(string value);
    public Encoding get_DefaultEncoding();
    public void set_DefaultEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public DateTime get_FileLastModificationTime();
    [CompilerGeneratedAttribute]
public void set_FileLastModificationTime(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsEncrypted();
    [CompilerGeneratedAttribute]
private void set_IsEncrypted(bool value);
    [CompilerGeneratedAttribute]
public byte get_CheckByte();
    [CompilerGeneratedAttribute]
private void set_CheckByte(byte value);
    [CompilerGeneratedAttribute]
protected short get_VersionToExtract();
    [CompilerGeneratedAttribute]
protected void set_VersionToExtract(short value);
    protected internal virtual void ReadLocalHeader(BinaryReader reader);
    protected virtual void ReadLocalHeaderExtraFields(BinaryReader reader, short extraFieldLength);
    protected virtual InternalZipExtraFieldFactory CreateInternalZipExtraFieldFactory();
    protected string ReadString(BinaryReader reader, int count);
    private Encoding GetActualEncoding();
    protected internal virtual void SeekToDataDescriptorData(BinaryReader reader, long compressedSize);
    protected internal int SearchForPattern(Byte[] bytes, Byte[] pattern);
    internal virtual Stream CreateDecompressionStream(StreamProxy streamProxy);
    public virtual Stream CreateDecompressionStream();
    protected virtual IDecompressionStrategy CreateDecompressionStrategy();
}
public class DevExpress.Utils.Zip.InternalZipFileCollection : List`1<InternalZipFile> {
}
public class DevExpress.Utils.Zip.StreamProxy : object {
    private Stream baseStream;
    private long startPositionInBaseStream;
    private long length;
    private bool isPackedStream;
    public Stream BaseStream { get; }
    public long StartPositionInBaseStream { get; }
    public long Length { get; }
    public bool IsPackedStream { get; }
    public StreamProxy(Stream baseStream, long startPositionInBaseStream, long length, bool isPackedStream);
    public static StreamProxy Create(Stream stream);
    public static StreamProxy Create(Stream stream, long position);
    public Stream get_BaseStream();
    public long get_StartPositionInBaseStream();
    public long get_Length();
    public bool get_IsPackedStream();
    public Stream CreateRawStream();
}
[FlagsAttribute]
public enum DevExpress.Utils.Zip.ZipFlags : Enum {
    public int value__;
    public static ZipFlags Encrypted;
    public static ZipFlags ImplodeUse8kSlidingDictionary;
    public static ZipFlags ImplodeUse4kSlidingDictionary;
    public static ZipFlags ImplodeUse3ShannonFanoTrees;
    public static ZipFlags ImplodeUse2ShannonFanoTrees;
    public static ZipFlags DeflateNormalCompression;
    public static ZipFlags DeflateMaximumCompression;
    public static ZipFlags DeflateFastCompression;
    public static ZipFlags DeflateSuperFastCompression;
    public static ZipFlags LZMAEOSIndicatesEndOfStream;
    public static ZipFlags UseDataFromDataDescriptor;
    public static ZipFlags ArchiveContainsCompressedPatchedData;
    public static ZipFlags StrongEncryption;
    public static ZipFlags Unused1;
    public static ZipFlags Unused2;
    public static ZipFlags Unused3;
    public static ZipFlags Unused4;
    public static ZipFlags EFS;
    public static ZipFlags LocalHeaderDataMasked;
}
public class DevExpress.Web.Resources.Native.LocalizationFilesSetBase : object {
    protected List`1<ResourceFileInfo> files;
    public LocalizationFilesSetBase(Type dataAccessResFinder, List`1<ResourceFileInfo> fileSet, ResourceFileInfo[] resFiles);
    public LocalizationFilesSetBase(Type dataAccessResFinder, ResourceFileInfo[] resFiles);
    public sealed virtual IEnumerator`1<ResourceFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Web.Resources.Native.LocalizationGenerator : object {
    public static Dictionary`2<string, string> CreateLocalizationSet(IEnumerable`1<ResourceFileInfo> localizationFilesInfo, CultureInfo culture, Func`3<DictionaryEntry, ResourceFileInfo, bool> addCondition);
    private static string QueryLocalizedString(ResourceManager resourceManager, CultureInfo culture, string dxStringID, string value, bool isInvariantCulture);
}
public class DevExpress.Web.Resources.Native.ResourceFileInfo : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ContainerType>k__BackingField;
    public string Path { get; private set; }
    public Assembly Assembly { get; private set; }
    public string KeyPrefix { get; private set; }
    public Type ContainerType { get; private set; }
    public ResourceFileInfo(string path, Assembly assembly, string keyPrefix, Type containerType);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(Assembly value);
    [CompilerGeneratedAttribute]
public string get_KeyPrefix();
    [CompilerGeneratedAttribute]
private void set_KeyPrefix(string value);
    [CompilerGeneratedAttribute]
public Type get_ContainerType();
    [CompilerGeneratedAttribute]
private void set_ContainerType(Type value);
    public string GetKey(string key);
}
internal static class DevExpress.WebUtils.Internal.WebApp : object {
    private static Nullable`1<bool> shouldTryWebEntryAssembly;
    private static Assembly entryAssembly;
    public static Assembly EntryAssembly { get; }
    public static Assembly get_EntryAssembly();
    private static Assembly EnsureEntryAssembly();
}
public interface DevExpress.WebUtils.IViewBagOwner {
    public abstract virtual T GetViewBagProperty(string objectPath, string propertyName, T value);
    public abstract virtual void SetViewBagProperty(string objectPath, string propertyName, T defaultValue, T value);
}
public class DevExpress.WebUtils.ViewStatePersisterCore : object {
    protected IViewBagOwner ViewBagOwner;
    private string objectPath;
    protected string ViewBagObjectPath { get; }
    public ViewStatePersisterCore(IViewBagOwner viewBagOwner);
    public ViewStatePersisterCore(IViewBagOwner viewBagOwner, string objectPath);
    protected virtual string get_ViewBagObjectPath();
    protected virtual T GetViewBagProperty(string name, T value);
    protected virtual void SetViewBagProperty(string name, T defaultValue, T value);
}
public class DevExpress.Xpo.DB.AlterColumnStatement : UpdateSchemaStatement {
    public DBColumn OldColumn;
    public DBColumn NewColumn;
    public AlterColumnStatement(DBTable table, DBColumn oldColumn, DBColumn newColumn);
}
public enum DevExpress.Xpo.DB.AutoCreateOption : Enum {
    public int value__;
    public static AutoCreateOption DatabaseAndSchema;
    public static AutoCreateOption SchemaOnly;
    public static AutoCreateOption None;
    public static AutoCreateOption SchemaAlreadyExists;
}
public abstract class DevExpress.Xpo.DB.BaseStatement : JoinNode {
    [XmlArrayItemAttribute("DevExpress.Data.Filtering.ContainsOperator")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.BetweenOperator")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.BinaryOperator")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.UnaryOperator")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.InOperator")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.GroupOperator")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.OperandValue")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.ConstantValue")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.OperandProperty")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.AggregateOperand")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.JoinOperand")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.FunctionOperator")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.NotOperator")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.NullOperator")]
[XmlArrayItemAttribute("DevExpress.Xpo.DB.QueryOperand")]
[XmlArrayItemAttribute("DevExpress.Xpo.DB.QuerySubQueryContainer")]
public CriteriaOperatorCollection Operands;
    protected BaseStatement(DBTable table, string alias);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public String[] GetTablesNames();
    public static String[] GetTablesNames(BaseStatement[] statements);
    internal virtual void CollectJoinNodesAndCriteriaInternal(List`1<JoinNode> nodes, List`1<CriteriaOperator> criteria);
    [IteratorStateMachineAttribute("DevExpress.Xpo.DB.BaseStatement/<GetTablesColumns>d__8")]
public static IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> GetTablesColumns(BaseStatement[] statements);
}
public enum DevExpress.Xpo.DB.CommandPoolBehavior : Enum {
    public int value__;
    public static CommandPoolBehavior None;
    public static CommandPoolBehavior TransactionNoPrepare;
    public static CommandPoolBehavior Transaction;
    public static CommandPoolBehavior ConnectionSession;
}
public class DevExpress.Xpo.DB.ConnectionOpenedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDbConnection <Connection>k__BackingField;
    public IDbConnection Connection { get; private set; }
    public ConnectionOpenedEventArgs(IDbConnection connection);
    [CompilerGeneratedAttribute]
public IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IDbConnection value);
}
public class DevExpress.Xpo.DB.ConnectionOpenedEventHandler : MulticastDelegate {
    public ConnectionOpenedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectionOpenedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectionOpenedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.ConnectionOpeningEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDbConnection <Connection>k__BackingField;
    public IDbConnection Connection { get; private set; }
    public ConnectionOpeningEventArgs(IDbConnection connection);
    [CompilerGeneratedAttribute]
public IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IDbConnection value);
}
public class DevExpress.Xpo.DB.ConnectionOpeningEventHandler : MulticastDelegate {
    public ConnectionOpeningEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectionOpeningEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectionOpeningEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class DevExpress.Xpo.DB.ConnectionProviderSql : DataStoreBase {
    private static ConcurrentDictionary`2<Type, bool> oldCreateParameterOverridenByType;
    private bool isOldCreateParameterOverriden;
    [EditorBrowsableAttribute("1")]
public static Nullable`1<bool> GlobalUseLegacyUntypedParameters;
    [EditorBrowsableAttribute("1")]
public Nullable`1<bool> UseLegacyUntypedParameters;
    [EditorBrowsableAttribute("1")]
public static bool GlobalUseLegacyDateOnlyAndTimeOnlySupport;
    public static QueryParameterMode GlobalQueryParameterMode;
    public QueryParameterMode QueryParameterMode;
    private ColumnTypeResolver columnTypeResolver;
    public static bool UseLegacyTimeSpanSupport;
    public static bool EnableConnectionStringArgumentEscaping;
    private NonCryptographicRandom randomizer;
    private bool explicitTransaction;
    private IDbConnection connection;
    private string connectString;
    private ConnectionOpeningEventHandler beforeConnectionOpened;
    private ConnectionOpenedEventHandler afterConnectionOpened;
    public static Nullable`1<int> GlobalDefaultCommandTimeout;
    public Nullable`1<int> DefaultCommandTimeout;
    private Dictionary`2<string, ICustomFunctionOperatorFormattable> customFunctionsByName;
    private Dictionary`2<string, ICustomAggregateFormattable> customAggregatesByName;
    public static string IdentityColumnMagicName;
    private IDbTransaction transaction;
    protected static TraceSwitch xpoSwitch;
    private OrdinaryDictionary`2<IDbCommand, PreparedCommandInfo> acquiredCommands;
    private OrdinaryDictionary`2<Query, PreparedCommandInfo> preparedCommands;
    public static int MaxDeadLockTryCount;
    public static int MaxDeadLockRetryDelayMilliseconds;
    private EventHandler reconnected;
    [EditorBrowsableAttribute("1")]
protected bool IsTypedParametersEnabled { get; }
    protected bool InternalExecuteUpdateSchemaInTransaction { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    private NonCryptographicRandom Randomizer { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public bool CanCreateDatabase { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public bool CanCreateSchema { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public IDbConnection Connection { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public string ConnectionString { get; }
    [ObsoleteAttribute("SyncRoot is obsolette, use LockHelper.Lock() or LockHelper.LockAsync() instead.")]
[DescriptionAttribute("")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object SyncRoot { get; }
    [DescriptionAttribute("")]
public ICollection`1<ICustomFunctionOperatorFormattable> CustomFunctionOperators { get; }
    [DescriptionAttribute("Gets a collection of custom aggregate functions supplied by the current metadata provider.")]
public ICollection`1<ICustomAggregateFormattable> CustomAggregates { get; }
    protected bool NeedsIndexForForeignKey { get; }
    protected string CreateIndexTemplate { get; }
    protected string CreateForeignKeyTemplate { get; }
    protected bool IsFieldTypesNeeded { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public IDbTransaction Transaction { get; }
    [ObsoleteAttribute("Use CommandPoolBehavior instead", "False")]
protected bool SupportCommandPrepare { get; }
    protected CommandPoolBehavior CommandPoolBehavior { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public bool NativeSkipTakeSupported { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public bool BraceJoin { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public bool SupportNamedParameters { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public bool NativeOuterApplySupported { get; }
    protected UpdateSchemaSqlFormatterHelper UpdateSchemaFormatter { get; }
    protected ConnectionProviderSql(IDbConnection connection, AutoCreateOption autoCreateOption);
    private static ConnectionProviderSql();
    private static void IncrementPerformanceCountersCore();
    private static void DecrementPerformanceCountersCore();
    private static IDisposable GetModifyDataPerformanceCountersCore(ModificationStatement[] dmlStatements);
    private static IDisposable GetSelectDataPerformanceCountersCore(SelectStatement[] selects);
    private static IDisposable GetUpdateSchemaPerformanceCountersCore();
    protected bool get_IsTypedParametersEnabled();
    protected internal virtual QueryParameterMode GetQueryParameterMode();
    protected virtual override void Finalize();
    private static void IncrementPerformanceCounters();
    private static void DecrementPerformanceCounters();
    public static string EscapeConnectionStringArgument(string argument);
    protected virtual bool get_InternalExecuteUpdateSchemaInTransaction();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    public virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    protected bool CanRetryIfDeadlock(int tryCount, Exception e);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<ModifyDataAsync>d__29")]
public virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public virtual SelectedData SelectData(SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<SelectDataAsync>d__31")]
public virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    protected virtual Task`1<UpdateSchemaResult> ProcessUpdateSchemaAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    private static IDisposable GetModifyDataPerformanceCounters(ModificationStatement[] dmlStatements);
    private static IDisposable GetSelectDataPerformanceCounters(SelectStatement[] selects);
    private static IDisposable GetUpdateSchemaPerformanceCounters();
    private NonCryptographicRandom get_Randomizer();
    public bool get_CanCreateDatabase();
    public bool get_CanCreateSchema();
    public sealed virtual IDbConnection get_Connection();
    private sealed virtual override void DevExpress.Xpo.DB.ISqlDataStore.add_ConnectionOpening(ConnectionOpeningEventHandler value);
    private sealed virtual override void DevExpress.Xpo.DB.ISqlDataStore.remove_ConnectionOpening(ConnectionOpeningEventHandler value);
    private sealed virtual override void DevExpress.Xpo.DB.ISqlDataStore.add_ConnectionOpened(ConnectionOpenedEventHandler value);
    private sealed virtual override void DevExpress.Xpo.DB.ISqlDataStore.remove_ConnectionOpened(ConnectionOpenedEventHandler value);
    public string get_ConnectionString();
    protected abstract virtual void CreateDataBase();
    protected abstract virtual IDbConnection CreateConnection();
    public virtual object get_SyncRoot();
    public void RegisterCustomFunctionOperators(ICollection`1<ICustomFunctionOperatorFormattable> customFunctions);
    public void RegisterCustomFunctionOperator(ICustomFunctionOperatorFormattable customFunction);
    public bool UnregisterCustomFunctionOperator(ICustomFunctionOperatorFormattable customFunction);
    public bool UnregisterCustomFunctionOperator(string functionName);
    public ICustomFunctionOperatorFormattable GetCustomFunctionOperator(string functionName);
    public ICollection`1<ICustomFunctionOperatorFormattable> get_CustomFunctionOperators();
    public void RegisterCustomAggregates(ICollection`1<ICustomAggregateFormattable> customAggregates);
    public void RegisterCustomAggregate(ICustomAggregateFormattable customAggregate);
    public bool UnregisterCustomAggregate(ICustomAggregateFormattable customAggregate);
    public bool UnregisterCustomAggregate(string functionName);
    public ICustomAggregateFormattable GetCustomAggregate(string aggregateName);
    public ICollection`1<ICustomAggregateFormattable> get_CustomAggregates();
    protected static bool IsSingleColumnPKColumn(DBTable table, DBColumn column);
    public static DBColumnType GetColumnType(DbType type, bool suppressExceptionOnUnknown);
    public static DbType GetDbType(DBColumnType type);
    public virtual string GenerateStoredProceduresInfoOnce();
    public virtual string GenerateStoredProcedures(DBTable table, String& dropLines);
    public virtual DBStoredProcedure[] GetStoredProcedures();
    protected bool IsKey(DBTable table, string column);
    protected DBColumn GetDbColumnByName(DBTable table, string name);
    protected void StringBuilderAppendLine(StringBuilder sb);
    protected void StringBuilderAppendLine(StringBuilder sb, string str);
    protected bool ColumnIsIdentity(DBTable table, string column);
    protected abstract virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForTimeOnly(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForTimeSpan(DBTable table, DBColumn column);
    protected abstract virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    protected string GetSqlCreateColumnType(DBTable table, DBColumn column);
    public abstract virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected void ExecuteSqlSchemaUpdate(string objectTypeName, string objectName, string parentObjectName, string textSql);
    public abstract virtual ICollection CollectTablesToCreate(ICollection tables);
    public abstract virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public abstract virtual String[] GetStorageTablesList(bool includeViews);
    public virtual DBTable[] GetStorageTables(String[] tables);
    private bool IsColumnExists(DBTable table, DBColumn column);
    private bool IsColumnsEqual(StringCollection first, StringCollection second);
    private bool IsIndexExists(DBTable table, DBIndex index);
    private bool IsForeignKeyExists(DBTable table, DBForeignKey foreignKey);
    protected virtual bool get_NeedsIndexForForeignKey();
    protected virtual UpdateSchemaResult ProcessUpdateSchema(bool skipIfFirstTableNotExists, DBTable[] tables);
    public virtual void CreateTable(DBTable table);
    public virtual void CreatePrimaryKey(DBTable table);
    public virtual void CreateColumn(DBTable table, DBColumn column);
    public virtual void CreateIndex(DBTable table, DBIndex index);
    protected virtual string get_CreateIndexTemplate();
    public virtual void CreateForeignKey(DBTable table, DBForeignKey foreignKey);
    protected virtual string get_CreateForeignKeyTemplate();
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected static string GetParametersString(IDbCommand query);
    private int InternalExecSql(IDbCommand command);
    private Task`1<int> InternalExecSqlAsync(IDbCommand command, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual Type ResolveColumnType(CriteriaOperator operand);
    private ReformatReadValueArgs[] FillReformatters(CriteriaOperatorCollection targets);
    private void ReformatReadValues(Object[] values, ReformatReadValueArgs[] converters);
    protected virtual object ReformatReadValue(object value, ReformatReadValueArgs args);
    protected virtual bool get_IsFieldTypesNeeded();
    protected virtual void GetValues(IDataReader reader, Type[] fieldTypes, Object[] values);
    protected SelectStatementResult[] InternalGetData(IDbCommand command, CriteriaOperatorCollection targets, int skipClause, int topClause, bool includeMetadata);
    protected Task`1<SelectStatementResult[]> InternalGetDataAsync(IDbCommand command, CriteriaOperatorCollection targets, int skipClause, int topClause, bool includeMetadata, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private static Type[] FillTypes(IDataReader reader);
    private static Object[][] FillMetaData(IDataReader reader, Type[] fieldTypes);
    protected virtual object InternalGetScalar(IDbCommand command);
    protected virtual Task`1<object> InternalGetScalarAsync(IDbCommand command, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual bool IsDeadLock(Exception e);
    protected virtual bool IsConnectionBroken(Exception e);
    protected virtual void OpenConnectionInternal();
    protected void CloseConnectionInternal();
    private void DoReconnect();
    protected virtual void OnReconnected();
    protected void OpenConnection();
    private IDbTransaction ConnectionBeginTransaction(object il);
    protected virtual void BeginTransactionCore(object il);
    protected virtual void CommitTransactionCore();
    protected virtual void RollbackTransactionCore();
    protected void BeginTransaction();
    protected void CommitTransaction();
    protected void RollbackTransaction();
    public void ExplicitBeginTransaction();
    public void ExplicitBeginTransaction(IsolationLevel isolationLevel);
    public void ExplicitCommitTransaction();
    public void ExplicitRollbackTransaction();
    public virtual IDbTransaction get_Transaction();
    public virtual IDbCommand CreateCommand();
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected object ConvertParameter(object parameter);
    protected virtual IDataParameter CreateParameter(IDbCommand command);
    [ObsoleteAttribute("Use CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size) instead.")]
protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    private void SetParameterTypeAndSize(IDbCommand command, IDataParameter parameter, DBColumnType dbType, string dbTypeName, int size);
    protected virtual void ValidateParameterSize(IDbCommand command, IDbDataParameter parameter);
    protected void ThrowParameterValueOverflow(string sqlCommandText, string parameterName, int parameterSize, int valueActualSize);
    protected void PrepareParameters(IDbCommand command, Query query);
    protected virtual void PreparePooledCommand(IDbCommand command);
    private void PreparePoolParameters(IDbCommand command, Query query);
    protected virtual bool get_SupportCommandPrepare();
    protected virtual CommandPoolBehavior get_CommandPoolBehavior();
    private void CreateCommandPool();
    private void ReleaseCommandPool();
    private IDbCommand GetCommandFromPool(Query query);
    private void RemoveOldestCommand();
    private void ReleasePooledCommand(IDbCommand command);
    protected virtual IDbCommand CreateCommand(Query query);
    protected SelectStatementResult SelectData(Query query);
    protected SelectStatementResult SelectData(Query query, bool includeMetadata);
    private SelectStatementResult SelectData(Query query, CriteriaOperatorCollection targets, bool includeMetadata);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<SelectDataAsync>d__211")]
private Task`1<SelectStatementResult> SelectDataAsync(Query query, CriteriaOperatorCollection targets, bool includeMetadata, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private CriteriaOperatorCollection SelectDataPrepareCustomTargets(Query query, CriteriaOperatorCollection targets);
    private SelectStatementResult SelectDataGetSelectStatementResult(Query query, CriteriaOperatorCollection targets, SelectStatementResult queryResult);
    private SelectStatementResult[] SelectDataSimple(Query query, CriteriaOperatorCollection targets, bool includeMetadata);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<SelectDataSimpleAsync>d__215")]
private Task`1<SelectStatementResult[]> SelectDataSimpleAsync(Query query, CriteriaOperatorCollection targets, bool includeMetadata, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual SelectStatementResult ProcessSelectData(SelectStatement selects);
    protected virtual Task`1<SelectStatementResult> ProcessSelectDataAsync(SelectStatement selects, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private Query GenerateSelectQuery(SelectStatement selects);
    protected virtual long GetIdentity(Query sql);
    protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual long GetIdentity(InsertStatement root, TaggedParametersHolder identities);
    protected virtual Task`1<long> GetIdentityAsync(InsertStatement root, TaggedParametersHolder identities, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected object GetScalar(Query query);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<GetScalarAsync>d__224")]
protected Task`1<object> GetScalarAsync(Query query, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    public int ExecSql(Query query);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<ExecSqlAsync>d__226")]
public Task`1<int> ExecSqlAsync(Query query, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected void ExecSql(QueryCollection queries);
    private ParameterValue DoInsertRecord(InsertStatement root, TaggedParametersHolder identities);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<DoInsertRecordAsync>d__229")]
private Task`1<ParameterValue> DoInsertRecordAsync(InsertStatement root, TaggedParametersHolder identities, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private ParameterValue DoUpdateRecord(UpdateStatement root, TaggedParametersHolder identities);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<DoUpdateRecordAsync>d__231")]
private Task`1<ParameterValue> DoUpdateRecordAsync(UpdateStatement root, TaggedParametersHolder identities, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private ParameterValue DoDeleteRecord(DeleteStatement root, TaggedParametersHolder identities);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<DoDeleteRecordAsync>d__233")]
private Task`1<ParameterValue> DoDeleteRecordAsync(DeleteStatement root, TaggedParametersHolder identities, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected ParameterValue UpdateRecord(ModificationStatement root, TaggedParametersHolder identities);
    protected Task`1<ParameterValue> UpdateRecordAsync(ModificationStatement root, TaggedParametersHolder identities, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual ModificationResult ProcessModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<ProcessModifyDataAsync>d__237")]
protected virtual Task`1<ModificationResult> ProcessModifyDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public void add_Reconnected(EventHandler value);
    public void remove_Reconnected(EventHandler value);
    public abstract virtual string FormatTable(string schema, string tableName);
    public abstract virtual string FormatTable(string schema, string tableName, string tableAlias);
    public abstract virtual string FormatColumn(string columnName);
    public abstract virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    public abstract virtual string FormatInsertDefaultValues(string tableName);
    public abstract virtual string FormatInsert(string tableName, string fields, string values);
    public abstract virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public abstract virtual string FormatDelete(string tableName, string whereClause);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual string FormatUnary(UnaryOperatorType operatorType, string operand);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    private string FormatCustomFunction(String[] operands);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    public virtual string FormatOrder(string sortProperty, SortingDirection direction);
    public abstract virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    public virtual string ComposeSafeTableName(string tableName);
    public virtual string ComposeSafeSchemaName(string tableName);
    public virtual string ComposeSafeColumnName(string columnName);
    public virtual bool get_BraceJoin();
    public virtual bool get_SupportNamedParameters();
    public abstract virtual string FormatConstraint(string constraintName);
    protected static string GetSafeNameAccess(string originalName);
    protected static string GetSafeNameMsSql(string originalName);
    protected static string GetSafeNameDefault(string originalName);
    protected virtual string GetSafeNameRoot(string originalName);
    protected abstract virtual int GetSafeNameTableMaxLength();
    protected virtual int GetSafeNameColumnMaxLength();
    protected virtual int GetSafeNameConstraintMaxLength();
    protected virtual int GetObjectNameEffectiveLength(string objectName);
    public virtual string ComposeSafeConstraintName(string constraintName);
    protected string GetSafeObjectName(string originalName, string patchedName, int maxLength);
    protected string GetDbNameHashString(string dbName);
    protected virtual string GetPrimaryKeyName(DBPrimaryKey cons, DBTable table);
    protected virtual string GetForeignKeyName(DBForeignKey cons, DBTable table);
    protected virtual string GetIndexName(DBIndex cons, DBTable table);
    public string FormatColumnSafe(string columnName);
    public string FormatTableSafe(DBTable table);
    public string FormatConstraintSafe(string constraintName);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<DevExpress-Xpo-Helpers-ICommandChannelAsync-DoAsync>d__287")]
private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
    private Query ProcessSqlQueryCommandArgument(object args);
    protected virtual object DoInternal(string command, object args);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<DoInternalAsync>d__290")]
protected virtual Task`1<object> DoInternalAsync(string command, object args, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected object FixDBNullScalar(object data);
    internal static SelectedData FixDBNull(SelectedData data);
    protected abstract virtual void CommandBuilderDeriveParameters(IDbCommand command);
    protected virtual SelectedData ExecuteSprocInternal(IDbCommand command, IDataParameter returnParameter, List`1<IDataParameter> outParameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<ExecuteSprocInternalAsync>d__295")]
protected virtual Task`1<SelectedData> ExecuteSprocInternalAsync(IDbCommand command, IDataParameter returnParameter, List`1<IDataParameter> outParameters, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual SelectedData ExecuteSprocParametrized(string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<ExecuteSprocParametrizedAsync>d__297")]
protected virtual Task`1<SelectedData> ExecuteSprocParametrizedAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    private void PrepareCommandForExecuteSprocParametrized(IDbCommand command, string sprocName, OperandValue[] parameters, List`1& outParameters, IDataParameter& returnParameter);
    protected void PrepareParametersForExecuteSproc(OperandValue[] parameters, IDbCommand command, List`1& outParameters, IDataParameter& returnParameter);
    protected virtual SelectedData ExecuteSproc(string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<ExecuteSprocAsync>d__301")]
protected virtual Task`1<SelectedData> ExecuteSprocAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    protected List`1<SelectStatementResult> GetSelectedStatmentResults(IDbCommand command);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<GetSelectedStatmentResultsAsync>d__303")]
protected Task`1<List`1<SelectStatementResult>> GetSelectedStatmentResultsAsync(IDbCommand command, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    public virtual bool get_NativeOuterApplySupported();
    public virtual string FormatOuterApply(string sql, string alias);
    protected virtual Task`1<int> CommandExecuteNonQueryAsync(IDbCommand command, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual Task`1<object> CommandExecuteScalarAsync(IDbCommand command, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ConnectionProviderSql/<CommandExecuteReaderAsync>d__309")]
protected virtual Task`1<IDataReader> CommandExecuteReaderAsync(IDbCommand command, CommandBehavior commandBehavior, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual Task`1<bool> ReaderReadAsync(IDataReader reader, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual Task`1<bool> ReaderNextResultAsync(IDataReader reader, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual DBSchemaComparerSql CreateSchemaComparer();
    public sealed virtual UpdateSchemaStatement[] CompareSchema(IEnumerable`1<DBTable> targetSchema, SchemaMigrationOptions options);
    public sealed virtual void ExecuteUpdateSchemaStatements(IEnumerable`1<UpdateSchemaStatement> statements);
    public virtual string FormatUpdateSchemaScript(IEnumerable`1<UpdateSchemaStatement> statements);
    public sealed virtual String[] FormatUpdateSchemaStatements(IEnumerable`1<UpdateSchemaStatement> statements);
    protected virtual UpdateSchemaSqlFormatterHelper get_UpdateSchemaFormatter();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ModificationResult> <>n__0(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<SelectedData> <>n__1(CancellationToken cancellationToken, SelectStatement[] selects);
}
public enum DevExpress.Xpo.DB.ConnectionSecurityMode : Enum {
    public int value__;
    public static ConnectionSecurityMode Default;
    public static ConnectionSecurityMode None;
    public static ConnectionSecurityMode Secured;
}
public class DevExpress.Xpo.DB.CreateColumnStatement : UpdateSchemaStatement {
    public DBColumn Column;
    public CreateColumnStatement(DBTable table, DBColumn column);
}
public class DevExpress.Xpo.DB.CreateForeignKeyStatement : UpdateSchemaStatement {
    public DBForeignKey ForeignKey;
    public CreateForeignKeyStatement(DBTable table, StringCollection foreignKeyColumns, string primaryKeyTable, StringCollection primaryKeyTableKeyColumns);
}
public class DevExpress.Xpo.DB.CreateIndexStatement : UpdateSchemaStatement {
    public DBIndex Index;
    public CreateIndexStatement(DBTable table, StringCollection indexColumns, bool isUnique);
}
public class DevExpress.Xpo.DB.CreatePrimaryKeyStatement : UpdateSchemaStatement {
    public DBColumn[] PrimaryKeyColumns;
    public CreatePrimaryKeyStatement(DBTable table, StringCollection primaryKeyColumns);
}
public class DevExpress.Xpo.DB.CreateTableStatement : UpdateSchemaStatement {
    public CreateTableStatement(DBTable table);
}
public class DevExpress.Xpo.DB.DataCacheNode : DataCacheBase {
    private PerfCountersCounter countersCounter;
    private ICacheToCacheCommunicationCore _nested;
    protected Dictionary`2<string, Dictionary`2<string, CacheRecord>> RecordsByTables;
    protected CacheRecord First;
    protected CacheRecord Last;
    protected DateTime LastUpdateTime;
    public TimeSpan MaxCacheLatency;
    public static long GlobalTotalMemoryPurgeThreshold;
    public long TotalMemoryPurgeThreshold;
    public long TotalMemoryNotPurgeThreshold;
    public int MinCachedRequestsAfterPurge;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isAutoCreateOptionCached;
    private AutoCreateOption _AutoCreateOption;
    private object _AutoCreateOptionLock;
    private int lastPurgeGenCount;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GlobalTotalMemoryPurgeThreshold field instead")]
public static long GlobalTotalMemoryPurgeTreshhold { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use TotalMemoryPurgeThreshold field instead")]
public long TotalMemoryPurgeTreshhold { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use TotalMemoryNotPurgeThreshold field instead")]
public long TotalMemoryNotPurgeTreshhold { get; public set; }
    protected ICacheToCacheCommunicationCore Nested { get; }
    public AutoCreateOption AutoCreateOption { get; }
    protected bool IsCacheFresh { get; }
    public DataCacheNode(ICacheToCacheCommunicationCore parentCache);
    private static DataCacheNode();
    public static long get_GlobalTotalMemoryPurgeTreshhold();
    public static void set_GlobalTotalMemoryPurgeTreshhold(long value);
    public long get_TotalMemoryPurgeTreshhold();
    public void set_TotalMemoryPurgeTreshhold(long value);
    public long get_TotalMemoryNotPurgeTreshhold();
    public void set_TotalMemoryNotPurgeTreshhold(long value);
    protected ICacheToCacheCommunicationCore get_Nested();
    public virtual AutoCreateOption get_AutoCreateOption();
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataCacheNode/<UpdateSchemaCore>d__29")]
protected virtual Task`1<DataCacheUpdateSchemaResult> UpdateSchemaCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataCacheNode/<SelectDataCore>d__30")]
protected virtual Task`1<DataCacheSelectDataResult> SelectDataCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, SelectStatement[] selects);
    private bool IsNotInvalidated(CacheRecord newRecord, DataCacheCookie actualCookie);
    protected virtual bool IsGoodForCache(SelectStatement stmt);
    private bool IsGoodForCacheJoinNode(IndeterminateStatmentFinder indeterminateStatementFinder, JoinNode node);
    protected virtual bool IsGoodForCache(SelectStatement stmt, SelectStatementResult stmtResult);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataCacheNode/<ModifyDataCore>d__35")]
protected virtual Task`1<DataCacheModificationResult> ModifyDataCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataCacheNode/<NotifyDirtyTablesCore>d__36")]
protected virtual Task`1<DataCacheResult> NotifyDirtyTablesCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, String[] dirtyTablesNames);
    public void CatchUp();
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataCacheNode/<ProcessCookieCore>d__38")]
protected virtual Task`1<DataCacheResult> ProcessCookieCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie);
    protected bool get_IsCacheFresh();
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataCacheNode/<ProcessCurrentCookieIfNeeded>d__41")]
protected Task ProcessCurrentCookieIfNeeded(bool enforceSync, CancellationToken cancellationToken);
    protected void ProcessParentResult(DataCacheResult result);
    private void ProcessParentResultCore(DataCacheResult result);
    protected virtual void ResetCore();
    protected CacheRecord GetCachedRecord(CacheRecord sample);
    protected CacheRecord GetCachedRecord(string rootTableName, string statementUniqueString);
    protected void PromoteRecordToMRU(CacheRecord record);
    protected void RegisterNewRecord(CacheRecord newRecord);
    protected void UnregisterRecordsForTable(string table);
    protected void RemoveFromCache(CacheRecord record);
    protected bool IsWorkingSetOverlap(long totalMemory);
    protected virtual void PurgeIfNeeded();
    private bool WasPurgedOnThisGeneration();
    protected virtual void DoPurge();
    protected virtual void Purge();
    public virtual String[] GetStorageTablesList(bool includeViews);
    public virtual DBTable[] GetStorageTables(String[] tables);
    public virtual void Configure(DataCacheConfiguration configuration);
    [CompilerGeneratedAttribute]
private void <DoPurge>b__55_0(object o);
}
public class DevExpress.Xpo.DB.DataCacheNodeLocal : DataCacheNode {
    public DataCacheNodeLocal(ICacheToCacheCommunicationCore parentCache);
    protected virtual bool IsGoodForCache(SelectStatement stmt);
    public static bool IsProbablyGroupByStatement(SelectStatement statement);
}
public class DevExpress.Xpo.DB.DataCacheRoot : DataCacheBase {
    private PerfCountersCounter countersCounter;
    private IDataStore _nested;
    protected IDataStore Nested { get; }
    public AutoCreateOption AutoCreateOption { get; }
    public DataCacheRoot(IDataStore subjectForCache);
    protected IDataStore get_Nested();
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataCacheRoot/<UpdateSchemaCore>d__6")]
protected virtual Task`1<DataCacheUpdateSchemaResult> UpdateSchemaCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataCacheRoot/<SelectDataCore>d__7")]
protected virtual Task`1<DataCacheSelectDataResult> SelectDataCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataCacheRoot/<ModifyDataCore>d__8")]
protected virtual Task`1<DataCacheModificationResult> ModifyDataCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    private void NotifyDirtyTablesCore(String[] dirtyTablesNames);
    protected virtual Task`1<DataCacheResult> NotifyDirtyTablesCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, String[] dirtyTablesNames);
    protected virtual Task`1<DataCacheResult> ProcessCookieCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie);
    public virtual String[] GetStorageTablesList(bool includeViews);
    public virtual DBTable[] GetStorageTables(String[] tables);
    public virtual AutoCreateOption get_AutoCreateOption();
    public virtual void Configure(DataCacheConfiguration configuration);
}
public abstract class DevExpress.Xpo.DB.DataStoreBase : DataStoreSerializedBase {
    private AutoCreateOption _AutoCreateOption;
    private static IDictionary providersCreationByString;
    private static IDictionary providersCreationByConnection;
    private static Dictionary`2<string, ProviderFactory> providersFactory;
    public static string XpoProviderTypeParameterName;
    public AutoCreateOption AutoCreateOption { get; }
    public static ProviderFactory[] Factories { get; }
    protected DataStoreBase(AutoCreateOption autoCreateOption);
    private static DataStoreBase();
    public virtual AutoCreateOption get_AutoCreateOption();
    private sealed virtual override void DevExpress.Xpo.DB.Helpers.IDataStoreForTests.ClearDatabase();
    protected abstract virtual void ProcessClearDatabase();
    public void UpdateSchema(DBTable[] tables);
    protected abstract virtual SelectStatementResult ProcessSelectData(SelectStatement select);
    protected sealed virtual SelectedData ProcessSelectData(SelectStatement[] selects);
    protected abstract virtual Task`1<SelectStatementResult> ProcessSelectDataAsync(SelectStatement select, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreBase/<ProcessSelectDataAsync>d__10")]
protected sealed virtual Task`1<SelectedData> ProcessSelectDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, SelectStatement[] selects);
    public static ProviderFactory[] get_Factories();
    public static void RegisterDataStoreProvider(string providerKey, DataStoreCreationFromStringDelegate createFromStringDelegate);
    public static void RegisterDataStoreProvider(string connectionTypeShortName, DataStoreCreationFromConnectionDelegate createFromConnectionDelegate);
    public static void RegisterFactory(ProviderFactory providerFactory);
    public static IDataStore QueryDataStore(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static IDataStore QueryDataStore(string providerType, string connectionString, AutoCreateOption defaultAutoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
}
public class DevExpress.Xpo.DB.DataStoreFork : DataStoreForkBase {
    private ConcurrentQueue`1<IDataStore> ProvidersQ;
    private SemaphoreSlim ProvidersSemaphore;
    private AutoCreateOption autoCreateOption;
    public AutoCreateOption AutoCreateOption { get; }
    public DataStoreFork(IDataStore[] providers);
    public DataStoreFork(AutoCreateOption autoCreateOption, IDataStore[] providers);
    public virtual AutoCreateOption get_AutoCreateOption();
    public virtual IDataStore AcquireChangeProvider();
    public virtual Task`1<IDataStore> AcquireChangeProviderAsync(CancellationToken cancellationToken);
    public virtual void ReleaseChangeProvider(IDataStore provider);
    public virtual IDataStore AcquireReadProvider();
    public virtual void ReleaseReadProvider(IDataStore provider);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreFork/<AcquireReadProviderAsync>d__12")]
public virtual Task`1<IDataStore> AcquireReadProviderAsync(CancellationToken cancellationToken);
}
public abstract class DevExpress.Xpo.DB.DataStoreForkBase : MarshalByRefObject {
    public AutoCreateOption AutoCreateOption { get; }
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public sealed virtual SelectedData SelectData(SelectStatement[] selects);
    public sealed virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    public abstract virtual AutoCreateOption get_AutoCreateOption();
    public virtual IDataStore AcquireUpdateSchemaProvider();
    public virtual void ReleaseUpdateSchemaProvider(IDataStore provider);
    public abstract virtual IDataStore AcquireChangeProvider();
    public abstract virtual void ReleaseChangeProvider(IDataStore provider);
    public abstract virtual IDataStore AcquireReadProvider();
    public abstract virtual void ReleaseReadProvider(IDataStore provider);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    public virtual Task`1<IDataStore> AcquireUpdateSchemaProviderAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IDataStore> AcquireChangeProviderAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IDataStore> AcquireReadProviderAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreForkBase/<UpdateSchemaAsync>d__15")]
public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreForkBase/<SelectDataAsync>d__16")]
public sealed virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreForkBase/<ModifyDataAsync>d__17")]
public sealed virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreForkBase/<DevExpress-Xpo-Helpers-ICommandChannelAsync-DoAsync>d__18")]
private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
}
public class DevExpress.Xpo.DB.DataStoreForkMultipleReadersSingleWriter : DataStoreFork {
    private IDataStore changesProvider;
    private ReaderWriterLockSlim rwl;
    public DataStoreForkMultipleReadersSingleWriter(IDataStore changesProvider, IDataStore[] readProviders);
    public virtual IDataStore AcquireChangeProvider();
    public virtual void ReleaseChangeProvider(IDataStore provider);
    public virtual IDataStore AcquireReadProvider();
    public virtual void ReleaseReadProvider(IDataStore provider);
}
public class DevExpress.Xpo.DB.DataStoreLogger : DataStoreSerialized {
    private TextWriter _logWriter;
    public TextWriter LogWriter { get; }
    public DataStoreLogger(IDataStore nestedProvider, TextWriter logWriter);
    public TextWriter get_LogWriter();
    protected virtual UpdateSchemaResult ProcessUpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreLogger/<ProcessUpdateSchemaAsync>d__5")]
protected virtual Task`1<UpdateSchemaResult> ProcessUpdateSchemaAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    private void ProcessUpdateSchemaBegin(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    protected virtual SelectedData ProcessSelectData(SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreLogger/<ProcessSelectDataAsync>d__8")]
protected virtual Task`1<SelectedData> ProcessSelectDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, SelectStatement[] selects);
    private void ProcessSelectDataBegin(SelectStatement[] selects);
    private void ProcessSelectDataEnd(SelectedData gdr);
    protected virtual ModificationResult ProcessModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreLogger/<ProcessModifyDataAsync>d__12")]
protected virtual Task`1<ModificationResult> ProcessModifyDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    private void ProcessModifyDataBegin(ModificationStatement[] dmlStatements);
    private void ProcessModifyDataEnd(ModificationResult result);
    protected virtual string GetDisplayValue(object obj);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
    protected virtual object DoInternal(string command, object args);
    protected virtual Task`1<object> DoInternalAsync(string command, object args, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<UpdateSchemaResult> <>n__0(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<SelectedData> <>n__1(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, SelectStatement[] selects);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ModificationResult> <>n__2(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
}
public class DevExpress.Xpo.DB.DataStoreLongrunnersWatch : object {
    public IDataStore Nested;
    public int WatchDelay;
    [CompilerGeneratedAttribute]
private EventHandler`1<LongrunnersReportEventArgs> LongrunnersDetected;
    private Dictionary`2<TraceItem, object> traceItems;
    public AutoCreateOption AutoCreateOption { get; }
    public DataStoreLongrunnersWatch(IDataStore nested, int watchDelay);
    [CompilerGeneratedAttribute]
public void add_LongrunnersDetected(EventHandler`1<LongrunnersReportEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LongrunnersDetected(EventHandler`1<LongrunnersReportEventArgs> value);
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public sealed virtual SelectedData SelectData(SelectStatement[] selects);
    public sealed virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreLongrunnersWatch/<SelectDataAsync>d__10")]
public sealed virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreLongrunnersWatch/<ModifyDataAsync>d__11")]
public sealed virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public sealed virtual String[] GetStorageTablesList(bool includeViews);
    public sealed virtual DBTable[] GetStorageTables(String[] tables);
    public sealed virtual object Do(string command, object args);
    public sealed virtual Task`1<object> DoAsync(string command, object args, CancellationToken cancellationToken);
    protected virtual TraceItem CreateTraceItem(BaseStatement[] stmts);
    private IDisposable Trace(BaseStatement[] stmts);
    private void timer(object state);
    private static int callcomp(Call x, Call y);
}
public class DevExpress.Xpo.DB.DataStoreSerialized : DataStoreSerializedBase {
    private IDataStore _nested;
    [ObsoleteAttribute("SyncRoot is obsolette, use LockHelper.Lock() or LockHelper.LockAsync() instead.")]
public object SyncRoot { get; }
    public IDataStore NestedDataStore { get; }
    public AutoCreateOption AutoCreateOption { get; }
    public DataStoreSerialized(IDataStore nestedProvider);
    public virtual object get_SyncRoot();
    public IDataStore get_NestedDataStore();
    protected virtual UpdateSchemaResult ProcessUpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    protected virtual SelectedData ProcessSelectData(SelectStatement[] selects);
    protected virtual ModificationResult ProcessModifyData(ModificationStatement[] dmlStatements);
    protected virtual Task`1<ModificationResult> ProcessModifyDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    protected virtual Task`1<SelectedData> ProcessSelectDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, SelectStatement[] selects);
    protected virtual Task`1<UpdateSchemaResult> ProcessUpdateSchemaAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public virtual AutoCreateOption get_AutoCreateOption();
}
public abstract class DevExpress.Xpo.DB.DataStoreSerializedBase : MarshalByRefObject {
    private AsyncLockHelper lockHelper;
    [ObsoleteAttribute("SyncRoot is obsolette, use LockHelper.Lock() or LockHelper.LockAsync() instead.")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object SyncRoot { get; }
    protected AsyncLockHelper LockHelper { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public AutoCreateOption AutoCreateOption { get; }
    public abstract virtual object get_SyncRoot();
    protected virtual AsyncLockHelper get_LockHelper();
    protected abstract virtual UpdateSchemaResult ProcessUpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    protected abstract virtual SelectedData ProcessSelectData(SelectStatement[] selects);
    protected abstract virtual ModificationResult ProcessModifyData(ModificationStatement[] dmlStatements);
    public virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public virtual SelectedData SelectData(SelectStatement[] selects);
    public virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreSerializedBase/<UpdateSchemaAsync>d__12")]
public virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreSerializedBase/<SelectDataAsync>d__13")]
public virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreSerializedBase/<ModifyDataAsync>d__14")]
public virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    protected virtual Task`1<UpdateSchemaResult> ProcessUpdateSchemaAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    protected virtual Task`1<SelectedData> ProcessSelectDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, SelectStatement[] selects);
    protected virtual Task`1<ModificationResult> ProcessModifyDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public abstract virtual AutoCreateOption get_AutoCreateOption();
}
public class DevExpress.Xpo.DB.DBColumn : object {
    [XmlAttributeAttribute]
public DBColumnType ColumnType;
    [XmlAttributeAttribute]
public string Name;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int Size;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool IsKey;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool IsIdentity;
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool IsNullable;
    [XmlElementAttribute]
[DefaultValueAttribute("")]
public object DefaultValue;
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string DbDefaultValue;
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string DBTypeName;
    public DBColumn(string name, bool isKey, string dBTypeName, int size, DBColumnType type);
    public DBColumn(string name, bool isKey, string dBTypeName, int size, DBColumnType type, bool isNullable, object defaultValue);
    public static bool IsStorableType(DBColumnType type);
    public static bool IsStorableType(Type type);
    public static DBColumnType GetColumnType(Type type);
    public static DBColumnType GetColumnType(Type type, bool suppressExceptionOnUnknown);
    public static Type GetType(DBColumnType type);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
}
public class DevExpress.Xpo.DB.DBColumnCollection : List`1<DBColumn> {
}
public enum DevExpress.Xpo.DB.DBColumnType : Enum {
    public int value__;
    public static DBColumnType Unknown;
    public static DBColumnType Boolean;
    public static DBColumnType Byte;
    public static DBColumnType SByte;
    public static DBColumnType Char;
    public static DBColumnType Decimal;
    public static DBColumnType Double;
    public static DBColumnType Single;
    public static DBColumnType Int32;
    public static DBColumnType UInt32;
    public static DBColumnType Int16;
    public static DBColumnType UInt16;
    public static DBColumnType Int64;
    public static DBColumnType UInt64;
    public static DBColumnType String;
    public static DBColumnType DateTime;
    public static DBColumnType Guid;
    [ObsoleteAttribute("BC3523")]
public static DBColumnType TimeSpan;
    public static DBColumnType ByteArray;
    public static DBColumnType DateOnly;
    public static DBColumnType TimeOnly;
}
public class DevExpress.Xpo.DB.DBForeignKey : DBTableMultiColumnGadget {
    [XmlAttributeAttribute]
public string PrimaryKeyTable;
    public StringCollection PrimaryKeyTableKeyColumns;
    public DBForeignKey(ICollection columns, string primaryKeyTable, StringCollection primaryKeyTableKeyColumns);
}
public class DevExpress.Xpo.DB.DBForeignKeyCollection : List`1<DBForeignKey> {
}
public class DevExpress.Xpo.DB.DBIndex : DBTableMultiColumnGadget {
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool IsUnique;
    public DBIndex(string name, ICollection columns, bool isUnique);
    public DBIndex(ICollection columns, bool isUnique);
}
public class DevExpress.Xpo.DB.DBIndexCollection : List`1<DBIndex> {
}
public class DevExpress.Xpo.DB.DBNameTypePair : object {
    [XmlAttributeAttribute]
public string Name;
    [XmlAttributeAttribute]
public DBColumnType Type;
    public DBNameTypePair(string name, DBColumnType type);
    public virtual string ToString();
}
public class DevExpress.Xpo.DB.DBPrimaryKey : DBIndex {
    public DBPrimaryKey(string name, ICollection columns);
    public DBPrimaryKey(ICollection columns);
}
public class DevExpress.Xpo.DB.DBProjection : DBTable {
    public SelectStatement Projection;
    private static int HashSeed;
    public DBProjection(SelectStatement projection);
    private static DBProjection();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class DevExpress.Xpo.DB.DbRes : object {
    private ResourceManager manager;
    private static DbRes res;
    public static string ConnectionProvider_TypeMappingMissing;
    public static string ConnectionProvider_UnableToCreateDBObject;
    public static string ConnectionProvider_SqlExecutionError;
    public static string ConnectionProvider_SchemaCorrectionNeeded;
    public static string ConnectionProvider_AtLeastOneColumnExpected;
    public static string ConnectionProvider_Locking;
    public static string ConnectionProvider_UnableToOpenDatabase;
    public static string CommandChannelHelper_CannotDeserializeResponse;
    public static string ConnectionProviderSql_ParameterValueSizeExceedsMaximumSize;
    public static string IsInstanceOfTypeFunction_ParametersMustBeConstants;
    public static string IsInstanceOfTypeFunction_ClassNotFound;
    public static string IsInstanceOfTypeFunction_InvalidArgument_TypeName;
    public static string IsInstanceOfTypeFunction_ShouldNotBeCalledExplicitly;
    public static string IsExactTypeFunction_ShouldNotBeCalledExplicitly;
    private static DbRes GetLoader();
    public static string GetString(CultureInfo culture, string name);
    public static string GetString(CultureInfo culture, string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Object[] args);
}
public class DevExpress.Xpo.DB.DBSchemaComparer : object {
    public bool NeedsIndexForForeignKey;
    public bool IndexForPrimaryKeyIsAutoCreatedByDatabase;
    public bool NeedsSetColumnNotNullableBeforeCreatePrimaryKey;
    public bool NeedsSetColumnToNullableAfterDropPrimaryKey;
    protected StringEqualityComparer ColumnNameEqualityComparer;
    private StringEqualityComparer tableNameEqualityComparer;
    public DBSchemaComparer(Func`2<string, string> tableNameMangling, Func`2<string, string> columnNameMangling);
    public UpdateSchemaStatement[] GenerateUpdateSchemaStatements(IEnumerable`1<DBTable> currentSchema, IEnumerable`1<DBTable> targetSchema, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> ProcessTablesAndColumns(Dictionary`2<string, DBTableHolder> currentTables, Dictionary`2<string, DBTable> targetTables, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> ProcessPrimaryKeys(Dictionary`2<string, DBTableHolder> currentTables, Dictionary`2<string, DBTable> targetTables, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> ProcesIndexesAndForeignKeys(Dictionary`2<string, DBTableHolder> currentTables, Dictionary`2<string, DBTable> targetTables, SchemaMigrationOptions options);
    private T DXClone(T cloneableObject);
    private List`1<UpdateSchemaStatement> ProcessDropTable(DBTable table, Dictionary`2<string, DBTableHolder> currentTables, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> ProcessCreatePrimaryKey(DBTable table, StringCollection primaryKeyColumns, Dictionary`2<string, DBTableHolder> currentTables, Dictionary`2<string, DBTable> targetTables, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> ProcessDropPrimaryKey(DBTable table, Dictionary`2<string, DBTableHolder> currentTables, Dictionary`2<string, DBTable> targetTables, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> ProcessSetColumnNullability(DBTable table, DBColumn column, bool isNullable);
    private CreateIndexStatement ProcessCreateIndex(DBTable table, StringCollection indexColumns, bool isUnique);
    private CreateForeignKeyStatement ProcessCreateForeignKey(DBTable table, StringCollection foreignKeyColumns, string primaryKeyTable, StringCollection primaryKeyTableColumns);
    private StringCollection GetCorrectTableColumnNames(DBTable table, StringCollection columnNames);
    private List`1<UpdateSchemaStatement> ProcessDropForeignKey(DBTable table, DBForeignKey foreignKey, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> ProcessDropColumn(DBTable table, string columnName, Dictionary`2<string, DBTableHolder> currentTables, Dictionary`2<string, DBTable> targetTables, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> ProcessAlterColumn(DBTable table, DBColumn currentColumn, DBColumn targetColumn, Dictionary`2<string, DBTableHolder> currentTables, Dictionary`2<string, DBTable> targetTables, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> RemoveDependentForeignKeys(DBTable table, Dictionary`2<string, DBTableHolder> currentTables, Dictionary`2<string, DBTable> targetTables, SchemaMigrationOptions options);
    private List`1<UpdateSchemaStatement> RemoveDependentIndexes(DBTable table, string columnName, Dictionary`2<string, DBTableHolder> currentTables, Dictionary`2<string, DBTable> targetTables, SchemaMigrationOptions options);
    private bool IsContainsColumn(StringCollection columns, string columnName);
    private bool IsColumnListEquals(StringCollection a, StringCollection b);
    private DBColumn GetColumnByName(DBTable table, string columnName);
    private bool IsIndexExists(IEnumerable`1<DBIndex> indexes, DBIndex index);
    private bool IsForeignKeyExists(IEnumerable`1<DBForeignKey> foreignKeys, DBForeignKey foreignKey);
    private bool IsIndexDatabaseGeneratedForPrimaryKey(DBTable table, DBIndex index);
    private bool IsIndexForForeignKey(DBTable table, DBIndex index);
    protected virtual bool IsColumnsEquals(DBColumn x, DBColumn y, SchemaMigrationOptions options);
    protected virtual bool IsColumnTypeEquals(DBColumn x, DBColumn y);
    private bool IsForegnKeysEquals(DBForeignKey x, DBForeignKey y);
    private bool IsIndexesEquals(DBIndex x, DBIndex y);
    private bool IsPrimaryKeysEquals(DBPrimaryKey x, DBPrimaryKey y);
    [CompilerGeneratedAttribute]
private DBTableHolder <GenerateUpdateSchemaStatements>b__7_2(DBTable t);
}
public class DevExpress.Xpo.DB.DBStoredProcedure : object {
    [XmlAttributeAttribute]
public string Name;
    private List`1<DBStoredProcedureArgument> arguments;
    private List`1<DBStoredProcedureResultSet> resultSets;
    [XmlArrayItemAttribute("DevExpress.Xpo.DB.DBStoredProcedureArgument")]
public List`1<DBStoredProcedureArgument> Arguments { get; }
    [XmlArrayItemAttribute("DevExpress.Xpo.DB.DBStoredProcedureResultSet")]
public List`1<DBStoredProcedureResultSet> ResultSets { get; }
    public List`1<DBStoredProcedureArgument> get_Arguments();
    public List`1<DBStoredProcedureResultSet> get_ResultSets();
    public virtual string ToString();
}
public class DevExpress.Xpo.DB.DBStoredProcedureArgument : DBNameTypePair {
    [XmlAttributeAttribute]
public DBStoredProcedureArgumentDirection Direction;
    public DBStoredProcedureArgument(string name, DBColumnType type);
    public DBStoredProcedureArgument(string name, DBColumnType type, DBStoredProcedureArgumentDirection direction);
    public virtual string ToString();
}
public enum DevExpress.Xpo.DB.DBStoredProcedureArgumentDirection : Enum {
    public int value__;
    public static DBStoredProcedureArgumentDirection In;
    public static DBStoredProcedureArgumentDirection Out;
    public static DBStoredProcedureArgumentDirection InOut;
}
public class DevExpress.Xpo.DB.DBStoredProcedureResultSet : object {
    private List`1<DBNameTypePair> columns;
    [XmlArrayItemAttribute("DevExpress.Xpo.DB.DBNameTypePair")]
public List`1<DBNameTypePair> Columns { get; }
    public DBStoredProcedureResultSet(ICollection`1<DBNameTypePair> columns);
    public List`1<DBNameTypePair> get_Columns();
    public virtual string ToString();
}
[XmlIncludeAttribute("DevExpress.Xpo.DB.DBProjection")]
public class DevExpress.Xpo.DB.DBTable : object {
    private DBColumnCollection columns;
    private DBIndexCollection indexes;
    private DBForeignKeyCollection foreignKeys;
    [XmlAttributeAttribute]
public string Name;
    public DBPrimaryKey PrimaryKey;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool IsView;
    private static int HashSeed;
    [XmlArrayItemAttribute("DevExpress.Xpo.DB.DBColumn")]
public List`1<DBColumn> Columns { get; }
    [XmlArrayItemAttribute("DevExpress.Xpo.DB.DBIndex")]
public List`1<DBIndex> Indexes { get; }
    [XmlArrayItemAttribute("DevExpress.Xpo.DB.DBForeignKey")]
public List`1<DBForeignKey> ForeignKeys { get; }
    public DBTable(string name);
    private static DBTable();
    public List`1<DBColumn> get_Columns();
    public List`1<DBIndex> get_Indexes();
    public List`1<DBForeignKey> get_ForeignKeys();
    public DBColumn GetColumn(string columnName);
    public bool IsForeignKeyIncluded(DBForeignKey foreignKey);
    private bool IsGadgetsEqual(DBTableMultiColumnGadget existingKey, DBTableMultiColumnGadget fk);
    public bool IsIndexIncluded(DBIndex index);
    public void AddColumn(DBColumn column);
    public void AddIndex(DBIndex index);
    public void AddForeignKey(DBForeignKey foreignKey);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
}
public abstract class DevExpress.Xpo.DB.DBTableMultiColumnGadget : object {
    [XmlAttributeAttribute]
public string Name;
    public StringCollection Columns;
    protected DBTableMultiColumnGadget(ICollection columns);
}
public class DevExpress.Xpo.DB.DeleteStatement : ModificationStatement {
    public DeleteStatement(DBTable table, string alias);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class DevExpress.Xpo.DB.DropColumnStatement : UpdateSchemaStatement {
    public string ColumnName;
    public DropColumnStatement(DBTable table, string columnName);
}
public class DevExpress.Xpo.DB.DropForeignKeyStatement : UpdateSchemaStatement {
    public string ForeignKeyName;
    public DropForeignKeyStatement(DBTable table, string foreignKeyName);
}
public class DevExpress.Xpo.DB.DropIndexStatement : UpdateSchemaStatement {
    public string IndexName;
    public DropIndexStatement(DBTable table, string indexName);
}
public class DevExpress.Xpo.DB.DropPrimaryKeyStatement : UpdateSchemaStatement {
    public DropPrimaryKeyStatement(DBTable table);
}
public class DevExpress.Xpo.DB.DropTableStatement : UpdateSchemaStatement {
    public DropTableStatement(DBTable table);
}
public class DevExpress.Xpo.DB.Exceptions.ConstraintViolationException : SqlExecutionErrorException {
    public ConstraintViolationException(string sql, string parameters, Exception innerException);
    protected ConstraintViolationException(SerializationInfo info, StreamingContext context);
}
public class DevExpress.Xpo.DB.Exceptions.LockingException : Exception {
    protected LockingException(SerializationInfo info, StreamingContext context);
}
public class DevExpress.Xpo.DB.Exceptions.PropertyTypeMappingMissingException : Exception {
    private Type propertyType;
    [ObsoleteAttribute("Use Message instead.", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Type PropertyType { get; }
    public PropertyTypeMappingMissingException(Type objectType);
    protected PropertyTypeMappingMissingException(SerializationInfo info, StreamingContext context);
    public Type get_PropertyType();
}
public class DevExpress.Xpo.DB.Exceptions.SchemaCorrectionNeededException : Exception {
    private string sql;
    [ObsoleteAttribute("Use Message instead.", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Sql { get; }
    public SchemaCorrectionNeededException(string sql, Exception innerException);
    public SchemaCorrectionNeededException(Exception innerException);
    public SchemaCorrectionNeededException(string sql);
    protected SchemaCorrectionNeededException(SerializationInfo info, StreamingContext context);
    public string get_Sql();
}
public class DevExpress.Xpo.DB.Exceptions.SqlExecutionErrorException : Exception {
    private string sql;
    private string parameters;
    [ObsoleteAttribute("Use Message instead.", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Sql { get; }
    [ObsoleteAttribute("Use Message instead.", "False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Parameters { get; }
    public SqlExecutionErrorException(string sql, string parameters, Exception innerException);
    protected SqlExecutionErrorException(SerializationInfo info, StreamingContext context);
    public string get_Sql();
    public string get_Parameters();
}
public class DevExpress.Xpo.DB.Exceptions.UnableToCreateDBObjectException : Exception {
    private string objectTypeName;
    private string objectName;
    private string parentObjectName;
    public string ObjectTypeName { get; public set; }
    public string ObjectName { get; public set; }
    public string ParentObjectName { get; public set; }
    public UnableToCreateDBObjectException(string objectTypeName, string objectName, string parentObjectName, Exception innerException);
    protected UnableToCreateDBObjectException(SerializationInfo info, StreamingContext context);
    public string get_ObjectTypeName();
    public void set_ObjectTypeName(string value);
    public string get_ObjectName();
    public void set_ObjectName(string value);
    public string get_ParentObjectName();
    public void set_ParentObjectName(string value);
}
public class DevExpress.Xpo.DB.Exceptions.UnableToOpenDatabaseException : Exception {
    public UnableToOpenDatabaseException(string connectionString, Exception innerException);
    protected UnableToOpenDatabaseException(SerializationInfo info, StreamingContext context);
}
public abstract class DevExpress.Xpo.DB.Helpers.BaseObjectSqlGenerator : BaseSqlGeneratorWithParameters {
    protected BaseObjectSqlGenerator(ISqlGeneratorFormatter formatter, TaggedParametersHolder identities, Dictionary`2<OperandValue, string> parameters);
    public QueryCollection GenerateSql(ModificationStatement[] dmlStatements);
}
public abstract class DevExpress.Xpo.DB.Helpers.BaseSqlGenerator : object {
    private static string XpoOuterApplyForJoinNodePlaceholder;
    private BaseStatement root;
    private bool hasSubQuery;
    private bool inTopLevelAggregate;
    private int outerApplyAliasCounter;
    private int outerApplyResultCounter;
    private bool isOuterApplyDependenciesTakenIntoAccount;
    internal bool EnableNodeAliasEscaping;
    public static bool GlobalDisableNodeAliasEscaping;
    private static Regex xpoOuterApplyForJoinNodePlaceholderRegEx;
    private static Regex validNodeAliasRegEx;
    private Dictionary`2<string, List`1<string>> nodesDependentOnOuterApply;
    private Dictionary`2<OuterApplyCacheItem, OuterApplyInfo> outerApplyCache;
    protected ISqlGeneratorFormatter formatter;
    protected ISqlGeneratorFormatterEx formatterEx;
    private static String[] groupOps;
    private static Regex XpoOuterApplyForJoinNodePlaceholderRegEx { get; }
    private Dictionary`2<string, List`1<string>> NodesDependentOnOuterApply { get; }
    protected int OuterApplyAliasCounter { get; }
    protected int OuterApplyResultCounter { get; }
    private Dictionary`2<OuterApplyCacheItem, OuterApplyInfo> OuterApplyCache { get; }
    protected bool IsOuterApplyDependenciesTakenIntoAccount { get; }
    protected bool TryUseOuterApply { get; }
    protected bool IsSubQuery { get; }
    protected bool ForceOuterApply { get; }
    protected BaseStatement Root { get; }
    internal ISqlGeneratorFormatter Formatter { get; }
    public bool HasSubQuery { get; }
    protected BaseSqlGenerator(ISqlGeneratorFormatter formatter);
    private static BaseSqlGenerator();
    private static Regex get_XpoOuterApplyForJoinNodePlaceholderRegEx();
    private string ComposeSafeNodeAlias(string alias);
    private Dictionary`2<string, List`1<string>> get_NodesDependentOnOuterApply();
    protected int get_OuterApplyAliasCounter();
    protected int get_OuterApplyResultCounter();
    private Dictionary`2<OuterApplyCacheItem, OuterApplyInfo> get_OuterApplyCache();
    protected bool get_IsOuterApplyDependenciesTakenIntoAccount();
    protected virtual bool get_TryUseOuterApply();
    protected virtual bool get_IsSubQuery();
    protected virtual bool get_ForceOuterApply();
    protected BaseStatement get_Root();
    protected void SetUpRootQueryStatement(BaseStatement root);
    internal ISqlGeneratorFormatter get_Formatter();
    public bool get_HasSubQuery();
    public abstract virtual string GetNextParameterName(OperandValue parameter);
    protected string Process(CriteriaOperator operand, bool nullOnNull);
    protected void TakeIntoAccountOuterApplyDependencies();
    private string Process(object operand);
    protected string Process(CriteriaOperator operand);
    private string GetNextOuterApplyAlias();
    protected List`1<string> GetOuterApplyAliasList();
    private void AppendJoinNode(JoinNode node, StringBuilder joins);
    protected virtual void AppendJoinType(JoinNode node, StringBuilder joins);
    private bool GetShouldProccessOuterApplyDependencies();
    private void UpdateAllJoinNodeDependencies(string alias);
    protected StringBuilder BuildJoins();
    public static ISqlGeneratorFormatterSupportOuterApply GetOuterApplyImpl(ISqlGeneratorFormatter formatter);
    protected string BuildOuterApply();
    protected string ReplaceOuterApplyForJoinNodePlaceholders(string sql);
    protected string BuildCriteria();
    private static string GetGroupOpName(GroupOperatorType type);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(OperandValue theOperand);
    private sealed virtual override string DevExpress.Data.Filtering.IQueryCriteriaVisitor<System.String>.Visit(QueryOperand operand);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BetweenOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(BinaryOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(InOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(GroupOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(UnaryOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.ICriteriaVisitor<System.String>.Visit(FunctionOperator theOperator);
    private sealed virtual override string DevExpress.Data.Filtering.IQueryCriteriaVisitor<System.String>.Visit(QuerySubQueryContainer container);
    private static CriteriaOperator GetNodeSingleProperty(BaseStatement node);
    private static string FormatSubQuery(Aggregate aggregateType, string subQuery);
    private static string FormatSubQuery(string subQuery, string alias);
}
public abstract class DevExpress.Xpo.DB.Helpers.BaseSqlGeneratorWithParameters : BaseSqlGenerator {
    private QueryParameterCollection queryParams;
    private List`1<string> queryParamsNames;
    private TaggedParametersHolder identitiesByTag;
    private bool isTypedParametersEnabled;
    private Dictionary`2<OperandValue, string> parameters;
    protected BaseSqlGeneratorWithParameters(ISqlGeneratorFormatter formatter, TaggedParametersHolder identitiesByTag, Dictionary`2<OperandValue, string> parameters);
    public virtual string GetNextParameterName(OperandValue parameter);
    private void SetUpParameters();
    protected virtual Query CreateQuery(string sql, QueryParameterCollection parameters, IList parametersNames);
    public Query GenerateSql(BaseStatement node);
    protected abstract virtual string InternalGenerateSql();
}
public class DevExpress.Xpo.DB.Helpers.CacheRecord : object {
    private String[] tablesInStatement;
    private SelectStatement statement;
    public CacheRecord Prev;
    public CacheRecord Next;
    public string HashString;
    private SelectStatementResult queryResult;
    public String[] TablesInStatement { get; }
    public string TableName { get; }
    public SelectStatementResult QueryResult { get; public set; }
    public CacheRecord(SelectStatement statement);
    public String[] get_TablesInStatement();
    public string get_TableName();
    public SelectStatementResult get_QueryResult();
    public void set_QueryResult(SelectStatementResult value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class DevExpress.Xpo.DB.Helpers.ColumnTypeResolver : CriteriaTypeResolverBase {
    private ConnectionProviderSql provider;
    internal ColumnTypeResolver(ConnectionProviderSql provider);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.IQueryCriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(QueryOperand theOperand);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.IQueryCriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(QuerySubQueryContainer subQueryContainer);
    internal Type ResolveTypeInternal(CriteriaOperator criteria);
    public static Type ResolveType(CriteriaOperator criteria, ConnectionProviderSql provider);
    protected virtual Type GetCustomFunctionType(string functionName, Type[] operands);
    protected virtual Type GetCustomAggregateType(string customAggregateName, Type[] operands);
}
public class DevExpress.Xpo.DB.Helpers.ConnectionStringParser : object {
    private static string DoubleQuotesString;
    private static char DoubleQuotesChar;
    private static string DoubleQuotesInValueString;
    private static string SingleQuoteString;
    private static char SingleQuoteChar;
    private static string SingleQuoteInValueString;
    private Dictionary`2<string, ValuePair> propertyTable;
    internal IEnumerable`1<string> Keys { get; }
    public ConnectionStringParser(string connectionString);
    internal IEnumerable`1<string> get_Keys();
    private String[] ExtractParts(string connectionString);
    private static string UnescapeArgument(string value);
    private static bool IsStringDoubleQuoted(string value);
    private static bool IsStringSingleQuoted(string value);
    public static string EscapeArgument(string value);
    private static string EscapeArgument(string originalValue, string value);
    public string GetPartByName(string partName);
    public string GetOriginalPartByName(string partName);
    public bool PartExists(string partName);
    public void AddPart(string partName, string partValue);
    public void UpdatePartByName(string partName, string partValue);
    public void UpdatePartsByPartialName(string partialName, string partValue);
    public void RemovePartByName(string partName);
    public string GetConnectionString();
}
public abstract class DevExpress.Xpo.DB.Helpers.DataCacheBase : MarshalByRefObject {
    protected DataCacheConfiguration cacheConfiguration;
    protected ICommandChannel nestedCommandChannel;
    public static string LogCategory;
    protected long Age;
    protected Guid MyGuid;
    private ReaderWriterLockSlim _RWL;
    protected Dictionary`2<string, long> TablesAges;
    public AutoCreateOption AutoCreateOption { get; }
    protected DataCacheBase(ICommandChannel nestedCommandChannel);
    protected DataCacheCookie GetCurrentCookie();
    protected DataCacheCookie GetCurrentCookieSafe();
    protected IDisposable LockForRead();
    protected IDisposable LockForChange();
    [ConditionalAttribute("DEBUG")]
protected void ValidateLockedRead();
    [ConditionalAttribute("DEBUG")]
protected void ValidateLockedWrite();
    [ConditionalAttribute("DEBUG")]
protected void ValidateUnlocked();
    public sealed virtual DataCacheUpdateSchemaResult UpdateSchema(DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    public sealed virtual Task`1<DataCacheUpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    public sealed virtual DataCacheSelectDataResult SelectData(DataCacheCookie cookie, SelectStatement[] selects);
    public sealed virtual Task`1<DataCacheSelectDataResult> SelectDataAsync(CancellationToken cancellationToken, DataCacheCookie cookie, SelectStatement[] selects);
    public sealed virtual DataCacheModificationResult ModifyData(DataCacheCookie cookie, ModificationStatement[] statements);
    public sealed virtual Task`1<DataCacheModificationResult> ModifyDataAsync(CancellationToken cancellationToken, DataCacheCookie cookie, ModificationStatement[] statements);
    public sealed virtual DataCacheResult ProcessCookie(DataCacheCookie cookie);
    public sealed virtual Task`1<DataCacheResult> ProcessCookieAsync(CancellationToken cancellationToken, DataCacheCookie cookie);
    public sealed virtual DataCacheResult NotifyDirtyTables(DataCacheCookie cookie, String[] dirtyTablesNames);
    public sealed virtual Task`1<DataCacheResult> NotifyDirtyTablesAsync(CancellationToken cancellationToken, DataCacheCookie cookie, String[] dirtyTablesNames);
    protected abstract virtual Task`1<DataCacheUpdateSchemaResult> UpdateSchemaCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    protected abstract virtual Task`1<DataCacheSelectDataResult> SelectDataCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, SelectStatement[] selects);
    protected abstract virtual Task`1<DataCacheModificationResult> ModifyDataCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, ModificationStatement[] statements);
    protected abstract virtual Task`1<DataCacheResult> ProcessCookieCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie);
    protected abstract virtual Task`1<DataCacheResult> NotifyDirtyTablesCore(bool enforceSync, CancellationToken cancellationToken, DataCacheCookie cookie, String[] dirtyTablesNames);
    public DataCacheResult NotifyDirtyTables(String[] dirtyTablesNames);
    protected void ProcessChildResultSinceCookie(DataCacheResult result, DataCacheCookie cookie);
    protected void ProcessChildResultSinceCookieCore(DataCacheResult result, DataCacheCookie cookie);
    public virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.Helpers.DataCacheBase/<UpdateSchemaAsync>d__34")]
public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public virtual SelectedData SelectData(SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.Helpers.DataCacheBase/<SelectDataAsync>d__36")]
public sealed virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.Helpers.DataCacheBase/<ModifyDataAsync>d__38")]
public sealed virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public abstract virtual AutoCreateOption get_AutoCreateOption();
    public abstract virtual String[] GetStorageTablesList(bool includeViews);
    public abstract virtual DBTable[] GetStorageTables(String[] tables);
    protected virtual void ResetCore();
    public void Reset();
    public abstract virtual void Configure(DataCacheConfiguration configuration);
    public static bool IsBadForCache(DataCacheConfiguration config, JoinNode node);
    public static bool IsBadForCache(DataCacheConfiguration config, string tableName);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
    protected virtual object DoInternal(string command, object args);
    protected virtual Task`1<object> DoInternalAsync(string command, object args, CancellationToken cancellationToken);
    private void ThrowIfCommandNotSupported(string command);
}
public class DevExpress.Xpo.DB.Helpers.DataCacheConfiguration : object {
    private static DataCacheConfiguration empty;
    [ObsoleteAttribute("Caching may work incorrectly with explicit transactions. Connect your data layer to the database directly to use explicit transactions.")]
public static bool SuppressExplicitTransactionExceptions;
    private String[] tables;
    private DataCacheConfigurationCaching caching;
    private Dictionary`2<string, bool> tableDictionary;
    public static DataCacheConfiguration Empty { get; }
    public String[] Tables { get; public set; }
    public DataCacheConfigurationCaching Caching { get; public set; }
    [XmlIgnoreAttribute]
public Dictionary`2<string, bool> TableDictionary { get; }
    public DataCacheConfiguration(DataCacheConfigurationCaching caching, String[] tables);
    private static DataCacheConfiguration();
    public static DataCacheConfiguration get_Empty();
    public String[] get_Tables();
    public void set_Tables(String[] value);
    public DataCacheConfigurationCaching get_Caching();
    public void set_Caching(DataCacheConfigurationCaching value);
    public Dictionary`2<string, bool> get_TableDictionary();
    public static Dictionary`2<string, bool> CreateTableDictionary(String[] tableList);
}
public enum DevExpress.Xpo.DB.Helpers.DataCacheConfigurationCaching : Enum {
    public int value__;
    public static DataCacheConfigurationCaching All;
    public static DataCacheConfigurationCaching InList;
    public static DataCacheConfigurationCaching NotInList;
}
public class DevExpress.Xpo.DB.Helpers.DataCacheCookie : object {
    public Guid Guid;
    public long Age;
    public static DataCacheCookie Empty;
    public DataCacheCookie(Guid guid, long age);
    private static DataCacheCookie();
}
public class DevExpress.Xpo.DB.Helpers.DataCacheModificationResult : DataCacheResult {
    public ModificationResult ModificationResult;
}
internal class DevExpress.Xpo.DB.Helpers.DataCacheReaderLock : object {
    public ReaderWriterLockSlim RWL;
    public DataCacheReaderLock(ReaderWriterLockSlim rwl);
    public sealed virtual void Dispose();
}
public class DevExpress.Xpo.DB.Helpers.DataCacheResult : object {
    public TableAge[] UpdatedTableAges;
    public DataCacheConfiguration CacheConfig;
    public DataCacheCookie Cookie;
}
public class DevExpress.Xpo.DB.Helpers.DataCacheSelectDataResult : DataCacheResult {
    public DataCacheCookie SelectingCookie;
    public SelectedData SelectedData;
}
public class DevExpress.Xpo.DB.Helpers.DataCacheUpdateSchemaResult : DataCacheResult {
    public UpdateSchemaResult UpdateSchemaResult;
}
internal class DevExpress.Xpo.DB.Helpers.DataCacheWriterLock : object {
    public ReaderWriterLockSlim RWL;
    public DataCacheWriterLock(ReaderWriterLockSlim rwl);
    public sealed virtual void Dispose();
}
public static class DevExpress.Xpo.DB.Helpers.DataStoreAsyncFallbackHelper : object {
    private static Task`1<SelectedData> SelectDataAsyncWithSyncFallback(IDataStore ds, CancellationToken cancellationToken, SelectStatement[] selects);
    private static Task`1<SelectedData> SelectDataAsyncWithBkgndFallback(IDataStore ds, CancellationToken cancellationToken, SelectStatement[] selects);
    private static Task`1<ModificationResult> ModifyDataAsyncWithSyncFallback(IDataStore ds, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    private static Task`1<ModificationResult> ModifyDataAsyncWithBkgndFallback(IDataStore ds, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    private static Task`1<UpdateSchemaResult> UpdateSchemaAsyncWithSyncFallback(IDataStore ds, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    private static Task`1<UpdateSchemaResult> UpdateSchemaAsyncWithBkgndFallback(IDataStore ds, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    private static Task`1<object> CommandChannelDoAsyncWithSyncFallback(ICommandChannel cc, string command, object args, CancellationToken cancellationToken);
    private static Task`1<object> CommandChannelDoAsyncWithBkgndFallback(ICommandChannel cc, string command, object args, CancellationToken cancellationToken);
    public static Task`1<SelectedData> SelectDataAsyncWithSmartFallback(IDataStore ds, CancellationToken cancellationToken, SelectStatement[] selects);
    public static Task`1<ModificationResult> ModifyDataAsyncWithSmartFallback(IDataStore ds, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public static Task`1<UpdateSchemaResult> UpdateSchemaAsyncWithSmartFallback(IDataStore ds, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public static Task`1<object> CommandChannelDoAsyncWithSmartFallback(ICommandChannel cc, string command, object args, CancellationToken cancellationToken);
}
public class DevExpress.Xpo.DB.Helpers.DataStoreCreationFromConnectionDelegate : MulticastDelegate {
    public DataStoreCreationFromConnectionDelegate(object object, IntPtr method);
    public virtual IDataStore Invoke(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IAsyncResult BeginInvoke(IDbConnection connection, AutoCreateOption autoCreateOption, AsyncCallback callback, object object);
    public virtual IDataStore EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.Helpers.DataStoreCreationFromStringDelegate : MulticastDelegate {
    public DataStoreCreationFromStringDelegate(object object, IntPtr method);
    public virtual IDataStore Invoke(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual IAsyncResult BeginInvoke(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect, AsyncCallback callback, object object);
    public virtual IDataStore EndInvoke(IDisposable[]& objectsToDisposeOnDisconnect, IAsyncResult result);
}
public class DevExpress.Xpo.DB.Helpers.DBSchemaComparerSql : DBSchemaComparer {
    protected Func`3<DBTable, DBColumn, string> GetSqlCreateColumnType;
    protected Func`2<string, DBTypeInfoBase> ParseSqlType;
    protected Dictionary`2<string, HashSet`1<string>> compatibleSqlTypeMappings;
    public DBSchemaComparerSql(Func`2<string, string> tableNameMangling, Func`2<string, string> columnNameMangling, Func`3<DBTable, DBColumn, string> getSqlCreateColumnType);
    public DBSchemaComparerSql(Func`2<string, string> tableNameMangling, Func`2<string, string> columnNameMangling, Func`3<DBTable, DBColumn, string> getSqlCreateColumnType, Func`2<string, DBTypeInfoBase> parseSqlType);
    protected virtual bool IsColumnTypeEquals(DBColumn x, DBColumn y);
    private bool IsSqlTypesEqual(string sqlTypeX, string sqlTypeY);
    public void AddCompatibleSqlTypeMapping(string sqlTypeA, string sqlTypeB);
    protected virtual bool IsSqlTypesCompatible(string sqlTypeX, string sqlTypeY);
}
public abstract class DevExpress.Xpo.DB.Helpers.DbTypeMapper`2 : DbTypeMapperBase {
    protected Action`2<TSqlParameter, TSqlDbTypeEnum> SetSqlDbTypeHandler;
    protected Func`2<TSqlParameter, TSqlDbTypeEnum> GetSqlDbTypeHandler;
    private ParameterDBTypeInfo[] paramTypeInfoByColumnType;
    protected string ParameterDbTypePropertyName { get; }
    private void FillParamTypesByColumnType();
    private void SetupSetParameterTypeDelegate(ParameterDBTypeInfo<TSqlDbTypeEnum, TSqlParameter> paramTypeInfo);
    private void SetParameterType(IDbDataParameter parameter, ParameterDBTypeInfo<TSqlDbTypeEnum, TSqlParameter> paramTypeInfo, bool setSize);
    private void SetParameterTypeAndSize(IDbDataParameter parameter, ParameterDBTypeInfo<TSqlDbTypeEnum, TSqlParameter> paramTypeInfo, bool setSize);
    private void SetParameterTypeAndPrecision(IDbDataParameter parameter, ParameterDBTypeInfo<TSqlDbTypeEnum, TSqlParameter> paramTypeInfo, bool setSize);
    private void SetParameterTypeAndPrecisionAndScale(IDbDataParameter parameter, ParameterDBTypeInfo<TSqlDbTypeEnum, TSqlParameter> paramTypeInfo, bool setSize);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, string sqlType);
    public virtual void SetParameterType(IDbDataParameter parameter, string sqlType);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    public virtual void SetParameterType(IDbDataParameter parameter, DBColumnType dbColumnType);
    protected virtual DBTypeInfoBase CreateParameterDBTypeInfo(string sqlType, Nullable`1<int> size, Nullable`1<byte> precision, Nullable`1<byte> scale);
    protected abstract virtual string get_ParameterDbTypePropertyName();
    protected abstract virtual string ConvertSqlTypeToParameterType(string sqlType);
    protected abstract virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected abstract virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected abstract virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected abstract virtual string GetParameterTypeNameForDateTime();
    protected abstract virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected abstract virtual string GetParameterTypeNameForTimeSpan();
    protected abstract virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected abstract virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected abstract virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
}
public abstract class DevExpress.Xpo.DB.Helpers.DbTypeMapperBase : object {
    private ConcurrentDictionary`2<string, DBTypeInfoBase> parsedSqlTypesCache;
    public abstract virtual void SetParameterTypeAndSize(IDbDataParameter parameter, string sqlType);
    public abstract virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    public abstract virtual void SetParameterType(IDbDataParameter parameter, string sqlType);
    public abstract virtual void SetParameterType(IDbDataParameter parameter, DBColumnType dbColumnType);
    public DBTypeInfoBase ParseSqlType(string sqlType);
    private DBTypeInfoBase ParseSqlTypeInternal(string sqlType);
    protected virtual DBTypeInfoBase CustomParseSqlType(string sqlTypeWithoutParameters, string sqlTypeParameters, string sqlTypeSuffix);
    protected virtual DBTypeInfoBase CreateParameterDBTypeInfo(string sqlType, Nullable`1<int> size, Nullable`1<byte> precision, Nullable`1<byte> scale);
}
public class DevExpress.Xpo.DB.Helpers.DefaultDbTypeMapper : DbTypeMapperBase {
    private static DbTypeMapperBase instance;
    public static DbTypeMapperBase Instance { get; }
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, string sqlType);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    public virtual void SetParameterType(IDbDataParameter parameter, string sqlType);
    public virtual void SetParameterType(IDbDataParameter parameter, DBColumnType dbColumnType);
    public static DbTypeMapperBase get_Instance();
}
public class DevExpress.Xpo.DB.Helpers.DeleteSqlGenerator : BaseObjectSqlGenerator {
    public DeleteSqlGenerator(ISqlGeneratorFormatter formatter, TaggedParametersHolder identities, Dictionary`2<OperandValue, string> parameters);
    protected virtual string InternalGenerateSql();
}
public class DevExpress.Xpo.DB.Helpers.ExecMethodDelegate : MulticastDelegate {
    public ExecMethodDelegate(object object, IntPtr method);
    public virtual void Invoke(object argument);
    public virtual IAsyncResult BeginInvoke(object argument, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.Helpers.GetPropertyValueDelegate : MulticastDelegate {
    public GetPropertyValueDelegate(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public interface DevExpress.Xpo.DB.Helpers.IDataStoreForTests {
    public abstract virtual void ClearDatabase();
}
public class DevExpress.Xpo.DB.Helpers.InsertSqlGenerator : BaseObjectSqlGenerator {
    public InsertSqlGenerator(ISqlGeneratorFormatter formatter, TaggedParametersHolder identities, Dictionary`2<OperandValue, string> parameters);
    protected virtual string InternalGenerateSql();
}
public interface DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter {
    public bool BraceJoin { get; }
    public bool SupportNamedParameters { get; }
    public abstract virtual string FormatTable(string schema, string tableName);
    public abstract virtual string FormatTable(string schema, string tableName, string tableAlias);
    public abstract virtual string FormatColumn(string columnName);
    public abstract virtual string FormatColumn(string columnName, string tableAlias);
    public abstract virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    public abstract virtual string FormatInsertDefaultValues(string tableName);
    public abstract virtual string FormatInsert(string tableName, string fields, string values);
    public abstract virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public abstract virtual string FormatDelete(string tableName, string whereClause);
    public abstract virtual string FormatUnary(UnaryOperatorType operatorType, string operand);
    public abstract virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public abstract virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public abstract virtual string FormatOrder(string sortProperty, SortingDirection direction);
    public abstract virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    public abstract virtual string ComposeSafeTableName(string tableName);
    public abstract virtual string ComposeSafeSchemaName(string tableName);
    public abstract virtual string ComposeSafeColumnName(string columnName);
    public abstract virtual bool get_BraceJoin();
    public abstract virtual bool get_SupportNamedParameters();
}
public interface DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatterEx {
    public abstract virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
}
public interface DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatterSupportOuterApply {
    public bool NativeOuterApplySupported { get; }
    public abstract virtual bool get_NativeOuterApplySupported();
    public abstract virtual string FormatOuterApply(string sql, string alias);
}
public interface DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatterSupportSkipTake {
    public bool NativeSkipTakeSupported { get; }
    public abstract virtual bool get_NativeSkipTakeSupported();
    public abstract virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
}
public class DevExpress.Xpo.DB.Helpers.ProcessParameter : MulticastDelegate {
    public ProcessParameter(object object, IntPtr method);
    public virtual string Invoke(object parameter);
    public virtual IAsyncResult BeginInvoke(object parameter, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.Helpers.ProcessParameterInvariantCulture : object {
    private ProcessParameter processParameter;
    public ProcessParameterInvariantCulture(ProcessParameter processParameter);
    public sealed virtual object GetFormat(Type formatType);
    public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
}
public class DevExpress.Xpo.DB.Helpers.Query : object {
    private string sqlString;
    private QueryParameterCollection parameters;
    private IList parametersNames;
    private int skipSelectedRecords;
    private int topSelectedRecords;
    private Dictionary`2<int, OperandValue> constantValues;
    private Dictionary`2<int, int> operandIndexes;
    public Dictionary`2<int, OperandValue> ConstantValues { get; }
    public Dictionary`2<int, int> OperandIndexes { get; }
    public string Sql { get; }
    public QueryParameterCollection Parameters { get; }
    public IList ParametersNames { get; }
    public int SkipSelectedRecords { get; }
    public int TopSelectedRecords { get; }
    public Query(string sql);
    public Query(string sql, QueryParameterCollection parameters, IList parametersNames);
    public Query(string sql, QueryParameterCollection parameters, IList parametersNames, int topSelectedRecords);
    public Query(string sql, QueryParameterCollection parameters, IList parametersNames, int skipSelectedRecords, int topSelectedRecords);
    public Query(string sql, QueryParameterCollection parameters, IList parametersNames, int topSelectedRecords, Dictionary`2<int, OperandValue> constantValues, Dictionary`2<int, int> operandIndexes);
    public Query(string sql, QueryParameterCollection parameters, IList parametersNames, int skipSelectedRecords, int topSelectedRecords, Dictionary`2<int, OperandValue> constantValues, Dictionary`2<int, int> operandIndexes);
    public Dictionary`2<int, OperandValue> get_ConstantValues();
    public Dictionary`2<int, int> get_OperandIndexes();
    public string get_Sql();
    public QueryParameterCollection get_Parameters();
    public IList get_ParametersNames();
    public int get_SkipSelectedRecords();
    public int get_TopSelectedRecords();
}
public class DevExpress.Xpo.DB.Helpers.QueryCollection : List`1<Query> {
    public QueryCollection(Query[] queries);
}
public class DevExpress.Xpo.DB.Helpers.QueryStatementToStringFormatter : object {
    public static QueryStatementToStringFormatter Instance;
    private bool DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.BraceJoin { get; }
    private bool DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.SupportNamedParameters { get; }
    private bool DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatterSupportSkipTake.NativeSkipTakeSupported { get; }
    private static QueryStatementToStringFormatter();
    public static string GetString(SelectStatement select);
    public static string GetString(ModificationStatement statement, TaggedParametersHolder identities);
    private static string FormatEscape(string escaped);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatTable(string schema, string tableName);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatTable(string schema, string tableName, string tableAlias);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatColumn(string columnName);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatColumn(string columnName, string tableAlias);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatInsertDefaultValues(string tableName);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatInsert(string tableName, string fields, string values);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatUpdate(string tableName, string sets, string whereClause);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatDelete(string tableName, string whereClause);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatUnary(UnaryOperatorType operatorType, string operand);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatFunction(FunctionOperatorType operatorType, String[] operands);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.FormatOrder(string sortProperty, SortingDirection direction);
    private sealed virtual override bool DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.get_BraceJoin();
    private sealed virtual override bool DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.get_SupportNamedParameters();
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.ComposeSafeTableName(string tableName);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.ComposeSafeSchemaName(string tableName);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.ComposeSafeColumnName(string columnName);
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatter.GetParameterName(OperandValue parameter, int index, Boolean& createPrameter);
    private static string FormatParameters(QueryParameterCollection parameters);
    private static string FormatConstants(Dictionary`2<int, OperandValue> constantValues);
    private sealed virtual override bool DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatterSupportSkipTake.get_NativeSkipTakeSupported();
    private sealed virtual override string DevExpress.Xpo.DB.Helpers.ISqlGeneratorFormatterSupportSkipTake.FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
}
public class DevExpress.Xpo.DB.Helpers.ReflectConnectionHelper : object {
    private Type connectionType;
    private ConstructorInfo connectionConstructor;
    private ReadOnlyCollection`1<Type> exceptionTypes;
    private static Object[] NoArgs;
    public Type ConnectionType { get; }
    public ReadOnlyCollection`1<Type> ExceptionTypes { get; }
    public ReflectConnectionHelper(IDbConnection connection, String[] exceptionTypeNames);
    private static ReflectConnectionHelper();
    public Type get_ConnectionType();
    public ReadOnlyCollection`1<Type> get_ExceptionTypes();
    private static Type GetDBConnectionTypeFromAssembly(String[] assemblyNames, String[] typeNames, bool throwException, Int32& foundAtIndex);
    public IDbConnection GetConnection(string connectionString);
    public bool TryGetExceptionProperty(Exception e, string propertyName, Object& value);
    public bool TryGetExceptionProperty(Exception e, string propertyName, bool declaredOnly, Object& value);
    public bool TryGetExceptionProperties(Exception e, String[] propertyNameList, Object[]& values);
    public bool TryGetExceptionProperties(Exception e, String[] propertyNameList, Boolean[] declaredOnly, Object[]& values);
    public Type GetType(string typeName);
    public static IDbConnection GetConnection(string assemblyName, string typeName, string connectionString);
    public static IDbConnection GetConnection(string assemblyName, string typeName, string connectionString, bool throwException);
    public static IDbConnection GetConnection(string assemblyName, string typeName, bool throwException);
    public static IDbConnection GetConnection(String[] assemblyNames, String[] typeNames, bool throwException, Int32& assemblyFoundIndex);
    public static ExecMethodDelegate GetCommandBuilderDeriveParametersDelegate(string assemblyName, string typeName);
    public static object CreateInstance(Type objectType, Object[] parameters);
    public static object GetPropertyValue(object instance, string propertyName);
    public static object GetPropertyValue(object instance, string propertyName, bool declaredOnly);
    public static void SetPropertyValue(object instance, string propertyName, object value);
    public static void SetPropertyValue(object instance, string propertyName, object value, bool declaredOnly);
    public static object InvokeMethod(object instance, string methodName, Object[] parameters, bool declaredOnly);
    public static object InvokeMethod(object instance, Type type, string methodName, Object[] parameters, bool declaredOnly);
    public static object InvokeStaticMethod(Type type, string methodName, Object[] parameters, bool declaredOnly);
    public static object GetCollectionFirstItem(IEnumerable collection);
    public static GetPropertyValueDelegate CreateGetPropertyDelegate(Type instanceType, string propertyName);
    public static SetPropertyValueDelegate CreateSetPropertyDelegate(Type instanceType, string propertyName);
    public static void CreatePropertyDelegates(Type instanceType, string propertyName, SetPropertyValueDelegate& setProperty, GetPropertyValueDelegate& getProperty);
    public static ExecMethodDelegate CreateStaticMethodDelegate(Type type, string methodName);
    [CompilerGeneratedAttribute]
private Type <.ctor>b__7_0(string x);
}
public class DevExpress.Xpo.DB.Helpers.SelectSqlGenerator : BaseSqlGeneratorWithParameters {
    private BaseSqlGenerator parentGenerator;
    private IList`1<string> propertyAliases;
    private Dictionary`2<int, OperandValue> constantValues;
    private Dictionary`2<int, int> operandIndexes;
    private HashSet`1<string> oaProperties;
    private HashSet`1<string> groupProperties;
    private bool isBuildGrouping;
    protected SelectStatement Root { get; }
    protected bool TryUseOuterApply { get; }
    protected bool ForceOuterApply { get; }
    public SelectSqlGenerator(ISqlGeneratorFormatter formatter);
    public SelectSqlGenerator(ISqlGeneratorFormatter formatter, BaseSqlGenerator parentGenerator, IList`1<string> propertyAliases);
    protected SelectStatement get_Root();
    protected virtual bool get_TryUseOuterApply();
    private string BuildSorting();
    protected virtual bool get_ForceOuterApply();
    private string BuildGrouping();
    private string BuildAdditionalGroupingOuterApply();
    protected virtual string PatchProperty(CriteriaOperator propertyOperator, string propertyString);
    private string BuildProperties();
    private string BuildGroupCriteria();
    public static ISqlGeneratorFormatterSupportSkipTake GetSkipTakeImpl(ISqlGeneratorFormatter formatter);
    protected virtual string InternalGenerateSql();
    protected virtual Query CreateQuery(string sql, QueryParameterCollection parameters, IList parametersNames);
    public virtual string GetNextParameterName(OperandValue parameter);
}
public class DevExpress.Xpo.DB.Helpers.SetPropertyValueDelegate : MulticastDelegate {
    public SetPropertyValueDelegate(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.Helpers.StringListHelper : object {
    public static void AddFormat(StringCollection collection, string s, Object[] parameters);
    public static StringCollection CreateStringCollection(String[] strings);
    public static string DelimitedText(StringCollection collection, string delimiter);
}
public class DevExpress.Xpo.DB.Helpers.SubQueriesFinder : object {
    private JoinNodeCollection result;
    public static JoinNodeCollection FindSubQueries(CriteriaOperator criteria);
    public static JoinNodeCollection FindSubQueries(CriteriaOperatorCollection criterias);
    public static JoinNodeCollection FindSubQueries(QuerySortingCollection sortings);
    private void Process(CriteriaOperator criteria);
    private void Process(IEnumerable`1<CriteriaOperator> criterias);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BetweenOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BinaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(UnaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(InOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(GroupOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(OperandValue theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(FunctionOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.IQueryCriteriaVisitor.Visit(QueryOperand theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.IQueryCriteriaVisitor.Visit(QuerySubQueryContainer theOperand);
}
public class DevExpress.Xpo.DB.Helpers.SubSelectAggregateInfo : ValueType {
    public CriteriaOperator Property;
    public Aggregate AggregateType;
    public string CustomAggregateName;
    public CriteriaOperatorCollection CustomAggregateOperands;
    public string Alias;
    public SubSelectAggregateInfo(CriteriaOperator property, Aggregate aggregateType, string alias);
    public SubSelectAggregateInfo(IEnumerable`1<CriteriaOperator> operands, string customAggregateName, string alias);
}
public class DevExpress.Xpo.DB.Helpers.SubSelectSqlGenerator : BaseSqlGenerator {
    private BaseSqlGenerator parentGenerator;
    private IEnumerable`1<SubSelectAggregateInfo> aggregateProperties;
    private bool forceOuterApply;
    private static String[] agg;
    protected bool TryUseOuterApply { get; }
    protected bool IsSubQuery { get; }
    protected bool ForceOuterApply { get; }
    private static SubSelectSqlGenerator();
    public SubSelectSqlGenerator(BaseSqlGenerator parentGenerator, ISqlGeneratorFormatter formatter, CriteriaOperator aggregateProperty, Aggregate aggregate);
    public SubSelectSqlGenerator(BaseSqlGenerator parentGenerator, ISqlGeneratorFormatter formatter, IEnumerable`1<CriteriaOperator> aggregateOperands, string customAggregateName);
    public SubSelectSqlGenerator(BaseSqlGenerator parentGenerator, ISqlGeneratorFormatter formatter, CriteriaOperator aggregateProperty, Aggregate aggregate, bool forceOuterApply);
    public SubSelectSqlGenerator(BaseSqlGenerator parentGenerator, ISqlGeneratorFormatter formatter, IEnumerable`1<CriteriaOperator> aggregateOperands, string customAggregateName, bool forceOuterApply);
    public SubSelectSqlGenerator(BaseSqlGenerator parentGenerator, ISqlGeneratorFormatter formatter, IEnumerable`1<SubSelectAggregateInfo> aggregateProperties, bool forceOuterApply);
    protected virtual bool get_TryUseOuterApply();
    protected virtual bool get_IsSubQuery();
    protected virtual bool get_ForceOuterApply();
    public string GenerateSelect(BaseStatement node, bool subSelectUseOnly);
    public static string GetSelectValue(CriteriaOperator aggregateProperty, Aggregate aggregate, BaseSqlGenerator generator, string alias);
    public static string GetSelectValue(IEnumerable`1<CriteriaOperator> aggregateOperands, string customAggregateName, BaseSqlGenerator generator, string alias);
    private string GetSelectValue(bool subSelectUseOnly);
    public virtual string GetNextParameterName(OperandValue parameter);
}
public class DevExpress.Xpo.DB.Helpers.TableAge : object {
    public string Name;
    public long Age;
    public TableAge(string name, long age);
}
public class DevExpress.Xpo.DB.Helpers.TaggedParametersHolder : object {
    private Dictionary`2<int, ParameterValue> parametersByTag;
    public OperandValue ConsolidateParameter(OperandValue deserializedParameter);
    public void ConsolidateIdentity(ParameterValue identityInsertParameter);
}
public class DevExpress.Xpo.DB.Helpers.TopLevelQueryOperandsFinder : object {
    private List`1<QueryOperand> result;
    public static List`1<QueryOperand> Find(CriteriaOperator criteria);
    public static List`1<QueryOperand> Find(IEnumerable`1<CriteriaOperator> criteria);
    private void Process(CriteriaOperator criteria);
    private void Process(IEnumerable`1<CriteriaOperator> criterias);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BetweenOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BinaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(UnaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(InOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(GroupOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(OperandValue theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(FunctionOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.IQueryCriteriaVisitor.Visit(QueryOperand theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.IQueryCriteriaVisitor.Visit(QuerySubQueryContainer theOperand);
}
public abstract class DevExpress.Xpo.DB.Helpers.UpdateSchemaSqlFormatterHelper : object {
    protected Func`4<DBTable, DBColumn, bool, string> GetSqlCreateColumnFullAttributes;
    protected Func`2<string, string> FormatConstraintSafe;
    protected Func`3<DBIndex, DBTable, string> GetIndexName;
    protected Func`3<DBForeignKey, DBTable, string> GetForeignKeyName;
    protected Func`3<DBPrimaryKey, DBTable, string> GetPrimaryKeyName;
    protected ISqlGeneratorFormatter SqlGeneratorFormatter;
    protected string CreateForeignKeyTemplate { get; }
    protected string CreateIndexTemplate { get; }
    protected string AlterColumnTemplate { get; }
    protected string DropForeignKeyTemplate { get; }
    protected string DropPrimaryKeyTemplate { get; }
    public UpdateSchemaSqlFormatterHelper(ISqlGeneratorFormatter sqlGeneratorFormatter, Func`4<DBTable, DBColumn, bool, string> getSqlCreateColumnFullAttributes, Func`2<string, string> formatConstraintSafe, Func`3<DBIndex, DBTable, string> getIndexName, Func`3<DBForeignKey, DBTable, string> getForeignKeyName, Func`3<DBPrimaryKey, DBTable, string> getPrimaryKeyName);
    public String[] FormatUpdateSchemaStatement(UpdateSchemaStatement statement);
    protected virtual String[] FormatCreateTable(CreateTableStatement statement);
    protected virtual String[] FormatDropTable(DropTableStatement statement);
    protected abstract virtual String[] FormatRenameTable(RenameTableStatement statement);
    protected virtual String[] FormatCreateColumn(CreateColumnStatement statement);
    protected virtual String[] FormatAlterColumn(AlterColumnStatement statement);
    protected abstract virtual String[] FormatRenameColumn(string tableName, string oldColumnName, string newColumnName);
    protected virtual String[] FormatDropColumn(DropColumnStatement statement);
    protected virtual String[] FormatCreatePrimaryKey(CreatePrimaryKeyStatement statement);
    protected virtual String[] FormatDropPrimaryKey(DropPrimaryKeyStatement statement);
    protected virtual String[] FormatCreateForeignKey(CreateForeignKeyStatement statement);
    protected virtual String[] FormatDropForeignKey(DropForeignKeyStatement statement);
    protected virtual String[] FormatCreateIndex(CreateIndexStatement statement);
    protected virtual String[] FormatDropIndex(DropIndexStatement statement);
    protected string FormatTableSafe(string tableName);
    protected string FormatColumnSafe(string columnName);
    protected virtual string get_CreateForeignKeyTemplate();
    protected virtual string get_CreateIndexTemplate();
    protected virtual string get_AlterColumnTemplate();
    protected virtual string get_DropForeignKeyTemplate();
    protected virtual string get_DropPrimaryKeyTemplate();
}
public class DevExpress.Xpo.DB.Helpers.UpdateSqlGenerator : BaseObjectSqlGenerator {
    public UpdateSqlGenerator(ISqlGeneratorFormatter formatter, TaggedParametersHolder identities, Dictionary`2<OperandValue, string> parameters);
    protected virtual string InternalGenerateSql();
}
public interface DevExpress.Xpo.DB.ICachedDataStore {
}
public interface DevExpress.Xpo.DB.ICachedDataStoreAsync {
}
public interface DevExpress.Xpo.DB.ICacheToCacheCommunicationCore {
    public abstract virtual DataCacheUpdateSchemaResult UpdateSchema(DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    public abstract virtual DataCacheSelectDataResult SelectData(DataCacheCookie cookie, SelectStatement[] selects);
    public abstract virtual DataCacheModificationResult ModifyData(DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    public abstract virtual DataCacheResult ProcessCookie(DataCacheCookie cookie);
    public abstract virtual DataCacheResult NotifyDirtyTables(DataCacheCookie cookie, String[] dirtyTablesNames);
}
public interface DevExpress.Xpo.DB.ICacheToCacheCommunicationCoreAsync {
    public abstract virtual Task`1<DataCacheUpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    public abstract virtual Task`1<DataCacheSelectDataResult> SelectDataAsync(CancellationToken cancellationToken, DataCacheCookie cookie, SelectStatement[] selects);
    public abstract virtual Task`1<DataCacheModificationResult> ModifyDataAsync(CancellationToken cancellationToken, DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    public abstract virtual Task`1<DataCacheResult> ProcessCookieAsync(CancellationToken cancellationToken, DataCacheCookie cookie);
    public abstract virtual Task`1<DataCacheResult> NotifyDirtyTablesAsync(CancellationToken cancellationToken, DataCacheCookie cookie, String[] dirtyTablesNames);
}
[ObsoleteAttribute("Please use ICachedDataStore interface instead", "True")]
public interface DevExpress.Xpo.DB.ICacheToCacheCommuticationInterface {
}
public interface DevExpress.Xpo.DB.IDataStore {
    public AutoCreateOption AutoCreateOption { get; }
    public abstract virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public abstract virtual SelectedData SelectData(SelectStatement[] selects);
    public abstract virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    public abstract virtual AutoCreateOption get_AutoCreateOption();
}
public interface DevExpress.Xpo.DB.IDataStoreAsync {
    public abstract virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public abstract virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public abstract virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
}
public interface DevExpress.Xpo.DB.IDataStoreSchemaExplorer {
    public abstract virtual String[] GetStorageTablesList(bool includeViews);
    public abstract virtual DBTable[] GetStorageTables(String[] tables);
}
public interface DevExpress.Xpo.DB.IDataStoreSchemaExplorerSp {
    public abstract virtual DBStoredProcedure[] GetStoredProcedures();
}
public interface DevExpress.Xpo.DB.IDataStoreSchemaMigrationProvider {
    public abstract virtual UpdateSchemaStatement[] CompareSchema(IEnumerable`1<DBTable> targetSchema, SchemaMigrationOptions options);
    public abstract virtual void ExecuteUpdateSchemaStatements(IEnumerable`1<UpdateSchemaStatement> updateStatements);
}
public class DevExpress.Xpo.DB.IndeterminateStatmentFinder : object {
    private List`1<JoinNode> listToNodeCollection;
    public IndeterminateStatmentFinder(List`1<JoinNode> listToNodeCollection);
    public sealed virtual bool Visit(BetweenOperator theOperator);
    public sealed virtual bool Visit(BinaryOperator theOperator);
    public sealed virtual bool Visit(UnaryOperator theOperator);
    public sealed virtual bool Visit(InOperator theOperator);
    public sealed virtual bool Visit(GroupOperator theOperator);
    public sealed virtual bool Visit(OperandValue theOperand);
    public sealed virtual bool Visit(FunctionOperator theOperator);
    public sealed virtual bool Visit(QueryOperand theOperand);
    public sealed virtual bool Visit(QuerySubQueryContainer theOperand);
    public bool Process(CriteriaOperator operand);
}
public class DevExpress.Xpo.DB.InsertStatement : ModificationStatement {
    public ParameterValue IdentityParameter;
    [XmlAttributeAttribute]
public string IdentityColumn;
    [XmlAttributeAttribute]
public DBColumnType IdentityColumnType;
    public InsertStatement(DBTable table, string alias);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public interface DevExpress.Xpo.DB.ISqlDataStore {
    public IDbConnection Connection { get; }
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual IDbCommand CreateCommand();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionOpening(ConnectionOpeningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionOpening(ConnectionOpeningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionOpened(ConnectionOpenedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionOpened(ConnectionOpenedEventHandler value);
}
public interface DevExpress.Xpo.DB.IUpdateSchemaSqlFormatter {
    public abstract virtual String[] FormatUpdateSchemaStatements(IEnumerable`1<UpdateSchemaStatement> statements);
    public abstract virtual string FormatUpdateSchemaScript(IEnumerable`1<UpdateSchemaStatement> statements);
}
public class DevExpress.Xpo.DB.JoinNode : object {
    public JoinNodeCollection SubNodes;
    [XmlAttributeAttribute]
public string Alias;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public JoinType Type;
    public DBTable Table;
    public CriteriaOperator Condition;
    public JoinNode(DBTable table, string alias, JoinType type);
    public DBColumn GetColumn(string name);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual void CollectJoinNodesAndCriteriaInternal(List`1<JoinNode> nodes, List`1<CriteriaOperator> criteria);
    public void CollectJoinNodesAndCriteria(List`1& nodes, List`1& criteria);
    public virtual string ToString();
}
public class DevExpress.Xpo.DB.JoinNodeCollection : List`1<JoinNode> {
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum DevExpress.Xpo.DB.JoinType : Enum {
    public int value__;
    public static JoinType Inner;
    public static JoinType LeftOuter;
}
public class DevExpress.Xpo.DB.ModificationResult : object {
    public ParameterValue[] Identities;
    public ModificationResult(ParameterValue[] identities);
    public ModificationResult(List`1<ParameterValue> identities);
}
[XmlIncludeAttribute("DevExpress.Xpo.DB.InsertStatement")]
[XmlIncludeAttribute("DevExpress.Xpo.DB.DeleteStatement")]
[XmlIncludeAttribute("DevExpress.Xpo.DB.UpdateStatement")]
public abstract class DevExpress.Xpo.DB.ModificationStatement : BaseStatement {
    [XmlArrayItemAttribute("DevExpress.Data.Filtering.OperandValue")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.ConstantValue")]
[XmlArrayItemAttribute("DevExpress.Xpo.DB.ParameterValue")]
public QueryParameterCollection Parameters;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int RecordsAffected;
    protected ModificationStatement(DBTable table, string alias);
    public virtual string ToString();
}
public class DevExpress.Xpo.DB.ParameterValue : OperandValue {
    [XmlAttributeAttribute]
public int Tag;
    [XmlAttributeAttribute]
public DBColumnType DBType;
    [XmlAttributeAttribute]
public string DBTypeName;
    [XmlAttributeAttribute]
public int Size;
    public ParameterValue(int tag);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual CriteriaOperator CloneCommon();
    public ParameterValue Clone();
}
public abstract class DevExpress.Xpo.DB.ProviderFactory : object {
    public static string UseIntegratedSecurityParamID;
    public static string ServerParamID;
    public static string PortParamID;
    public static string DatabaseParamID;
    public static string UserIDParamID;
    public static string PasswordParamID;
    public static string ReadOnlyParamID;
    public static string EncryptParamID;
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool IsServerbased { get; }
    public bool HasPort { get; }
    public bool IsFilebased { get; }
    public bool HasMultipleDatabases { get; }
    public string ProviderKey { get; }
    public string DisplayName { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public bool SupportStoredProcedures { get; }
    public abstract virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public abstract virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public abstract virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public abstract virtual bool get_HasUserName();
    public abstract virtual bool get_HasPassword();
    public abstract virtual bool get_HasIntegratedSecurity();
    public abstract virtual bool get_IsServerbased();
    public virtual bool get_HasPort();
    public abstract virtual bool get_IsFilebased();
    public abstract virtual bool get_HasMultipleDatabases();
    public abstract virtual string get_ProviderKey();
    public virtual string get_DisplayName();
    public abstract virtual String[] GetDatabases(string server, string userId, string password);
    public virtual String[] GetDatabases(string server, int port, string userId, string password);
    public virtual String[] GetDatabases(string server, string userId, string password, ConnectionSecurityMode securityMode);
    public virtual String[] GetDatabases(string server, int port, string userId, string password, ConnectionSecurityMode securityMode);
    public abstract virtual string get_FileFilter();
    public abstract virtual bool get_MeanSchemaGeneration();
    public virtual bool get_SupportStoredProcedures();
    public abstract virtual string GetConnectionString(Dictionary`2<string, string> parameters);
}
public class DevExpress.Xpo.DB.QueryOperand : CriteriaOperator {
    [XmlAttributeAttribute]
public string ColumnName;
    [XmlAttributeAttribute]
public DBColumnType ColumnType;
    [XmlAttributeAttribute]
public string NodeAlias;
    private static int HashSeed;
    public QueryOperand(DBColumn column, string nodeAlias);
    public QueryOperand(string columnName, string nodeAlias);
    public QueryOperand(string columnName, string nodeAlias, DBColumnType columnType);
    private static QueryOperand();
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual CriteriaOperator CloneCommon();
    public QueryOperand Clone();
}
public class DevExpress.Xpo.DB.QueryOperandCollection : List`1<QueryOperand> {
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Xpo.DB.QueryParameterCollection : List`1<OperandValue> {
    public QueryParameterCollection(OperandValue[] parameters);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum DevExpress.Xpo.DB.QueryParameterMode : Enum {
    public int value__;
    public static QueryParameterMode Default;
    public static QueryParameterMode Legacy;
    public static QueryParameterMode SetType;
    public static QueryParameterMode SetTypeAndSize;
}
public class DevExpress.Xpo.DB.QuerySortingCollection : List`1<SortingColumn> {
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Xpo.DB.QuerySubQueryContainer : CriteriaOperator {
    private BaseStatement node;
    private Aggregate aggregateType;
    private CriteriaOperator aggregateProperty;
    private string customAggregateName;
    private CriteriaOperatorCollection customAggregateOperands;
    private static int HashSeed;
    public BaseStatement Node { get; public set; }
    [XmlAttributeAttribute]
public Aggregate AggregateType { get; public set; }
    public string CustomAggregateName { get; public set; }
    public CriteriaOperator AggregateProperty { get; public set; }
    public CriteriaOperatorCollection CustomAggregateOperands { get; }
    public QuerySubQueryContainer(BaseStatement node, IEnumerable`1<CriteriaOperator> aggregateOperands, string customAggregateName);
    public QuerySubQueryContainer(BaseStatement node, CriteriaOperator aggregateProperty, Aggregate aggregateType);
    private static QuerySubQueryContainer();
    public BaseStatement get_Node();
    public void set_Node(BaseStatement value);
    public Aggregate get_AggregateType();
    public void set_AggregateType(Aggregate value);
    public string get_CustomAggregateName();
    public void set_CustomAggregateName(string value);
    public CriteriaOperator get_AggregateProperty();
    public void set_AggregateProperty(CriteriaOperator value);
    public CriteriaOperatorCollection get_CustomAggregateOperands();
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual CriteriaOperator CloneCommon();
}
public class DevExpress.Xpo.DB.RenameTableStatement : UpdateSchemaStatement {
    public string NewTableName;
    public RenameTableStatement(DBTable table, string newTableName);
}
public class DevExpress.Xpo.DB.SchemaMigrationOptions : object {
    public bool IgnoreColumnNullability;
    public bool IgnoreColumnType;
    public bool DropTablesAbsentInTargetSchema;
    public bool DropColumnsAbsentInTargetSchema;
    public bool DropIndexesAbsentInTargetSchema;
    public bool DropForeignKeysAbsentInTargetSchema;
    public bool DropPrimaryKeysAbsentInTargetSchema;
}
public class DevExpress.Xpo.DB.SelectedData : object {
    public SelectStatementResult[] ResultSet;
    public SelectedData(SelectStatementResult[] resultSet);
}
public class DevExpress.Xpo.DB.SelectStatement : BaseStatement {
    public int SkipSelectedRecords;
    public int TopSelectedRecords;
    private QuerySortingCollection sortProperties;
    private CriteriaOperatorCollection groupProperties;
    public CriteriaOperator GroupCondition;
    public QuerySortingCollection SortProperties { get; }
    public CriteriaOperatorCollection GroupProperties { get; }
    public SelectStatement(DBTable table, string alias);
    public QuerySortingCollection get_SortProperties();
    public CriteriaOperatorCollection get_GroupProperties();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal virtual void CollectJoinNodesAndCriteriaInternal(List`1<JoinNode> nodes, List`1<CriteriaOperator> criteria);
}
public class DevExpress.Xpo.DB.SelectStatementResult : object {
    public SelectStatementResultRow[] Rows;
    public SelectStatementResult(SelectStatementResultRow[] rows);
    public SelectStatementResult(ICollection rows);
    public SelectStatementResult(Object[] testData);
    public SelectStatementResult Clone();
}
public class DevExpress.Xpo.DB.SelectStatementResultRow : object {
    [XmlIgnoreAttribute]
public Object[] Values;
    [XmlArrayItemAttribute("System.Boolean")]
[XmlArrayItemAttribute("System.Byte")]
[XmlArrayItemAttribute("System.SByte")]
[XmlArrayItemAttribute("System.Char")]
[XmlArrayItemAttribute("System.Decimal")]
[XmlArrayItemAttribute("System.Double")]
[XmlArrayItemAttribute("System.Single")]
[XmlArrayItemAttribute("System.Int32")]
[XmlArrayItemAttribute("System.UInt32")]
[XmlArrayItemAttribute("System.Int64")]
[XmlArrayItemAttribute("System.UInt64")]
[XmlArrayItemAttribute("System.Int16")]
[XmlArrayItemAttribute("System.UInt16")]
[XmlArrayItemAttribute("System.Guid")]
[XmlArrayItemAttribute("System.String")]
[XmlArrayItemAttribute("System.DateTime")]
[XmlArrayItemAttribute("System.TimeSpan")]
[XmlArrayItemAttribute("System.Byte[]")]
[XmlArrayItemAttribute("DevExpress.Data.Filtering.NullValue")]
public Object[] XmlValues { get; public set; }
    public SelectStatementResultRow(Object[] values);
    public Object[] get_XmlValues();
    public void set_XmlValues(Object[] value);
    public SelectStatementResultRow Clone();
}
public class DevExpress.Xpo.DB.SortingColumn : object {
    private SortingDirection direction;
    private CriteriaOperator property;
    public SortingDirection Direction { get; public set; }
    public CriteriaOperator Property { get; public set; }
    public SortingColumn(string columnName, string nodeAlias, SortingDirection direction);
    public SortingColumn(CriteriaOperator property, SortingDirection direction);
    public SortingDirection get_Direction();
    public void set_Direction(SortingDirection value);
    public CriteriaOperator get_Property();
    public void set_Property(CriteriaOperator value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum DevExpress.Xpo.DB.SortingDirection : Enum {
    public int value__;
    public static SortingDirection Ascending;
    public static SortingDirection Descending;
}
public class DevExpress.Xpo.DB.SprocParameter : OperandParameter {
    private Nullable`1<int> size;
    private Nullable`1<byte> precision;
    private Nullable`1<byte> scale;
    private Nullable`1<DBColumnType> dbType;
    private SprocParameterDirection direction;
    public Nullable`1<int> Size { get; public set; }
    public Nullable`1<byte> Precision { get; public set; }
    public Nullable`1<byte> Scale { get; public set; }
    public Nullable`1<DBColumnType> DbType { get; public set; }
    public SprocParameterDirection Direction { get; public set; }
    public SprocParameter(string parameterName);
    public SprocParameter(string parameterName, object value);
    public SprocParameter(string parameterName, object value, int size);
    public Nullable`1<int> get_Size();
    public void set_Size(Nullable`1<int> value);
    public Nullable`1<byte> get_Precision();
    public void set_Precision(Nullable`1<byte> value);
    public Nullable`1<byte> get_Scale();
    public void set_Scale(Nullable`1<byte> value);
    public Nullable`1<DBColumnType> get_DbType();
    public void set_DbType(Nullable`1<DBColumnType> value);
    public SprocParameterDirection get_Direction();
    public void set_Direction(SprocParameterDirection value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    protected virtual CriteriaOperator CloneCommon();
    public OperandParameter Clone();
    public static ParameterDirection GetDataParameterDirection(SprocParameterDirection direction);
}
public enum DevExpress.Xpo.DB.SprocParameterDirection : Enum {
    public int value__;
    public static SprocParameterDirection Input;
    public static SprocParameterDirection Output;
    public static SprocParameterDirection InputOutput;
    public static SprocParameterDirection ReturnValue;
}
public enum DevExpress.Xpo.DB.UpdateSchemaResult : Enum {
    public int value__;
    public static UpdateSchemaResult SchemaExists;
    public static UpdateSchemaResult FirstTableNotExists;
}
public abstract class DevExpress.Xpo.DB.UpdateSchemaStatement : object {
    public DBTable Table;
    public UpdateSchemaStatement(DBTable table);
}
public class DevExpress.Xpo.DB.UpdateStatement : ModificationStatement {
    public UpdateStatement(DBTable table, string alias);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class DevExpress.Xpo.Exceptions.ExceptionBundleException : Exception {
    private Exception[] _Exceptions;
    public Exception[] Exceptions { get; public set; }
    public ExceptionBundleException(Exception[] exceptions);
    protected ExceptionBundleException(SerializationInfo info, StreamingContext context);
    public Exception[] get_Exceptions();
    public void set_Exceptions(Exception[] value);
    private static string ExtractMessage(Exception[] exceptions);
    public virtual string ToString();
}
public class DevExpress.Xpo.Helpers.CommandChannelHelper : object {
    public static string Message_CommandIsNotSupported;
    public static string Message_CommandIsNotSupportedEx;
    public static string Message_CommandWrongParameterSet;
    public static string Command_ExplicitBeginTransaction;
    public static string Command_ExplicitCommitTransaction;
    public static string Command_ExplicitRollbackTransaction;
    public static string Command_ExecuteStoredProcedure;
    public static string Command_ExecuteStoredProcedureParametrized;
    public static string Command_ExecuteNonQuerySQL;
    public static string Command_ExecuteNonQuerySQLWithParams;
    public static string Command_ExecuteScalarSQL;
    public static string Command_ExecuteScalarSQLWithParams;
    public static string Command_ExecuteQuerySQL;
    public static string Command_ExecuteQuerySQLWithParams;
    public static string Command_ExecuteQuerySQLWithMetadata;
    public static string Command_ExecuteQuerySQLWithMetadataWithParams;
    public static bool EnableMonoDeserializationFixForSmallAmountsOfData;
    public static SelectedData ExecuteSproc(ICommandChannel commandChannel, string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/<ExecuteSprocAsync>d__19")]
public static Task`1<SelectedData> ExecuteSprocAsync(ICommandChannelAsync commandChannel, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    public static SelectedData ExecuteSprocParametrized(ICommandChannel commandChannel, string sprocName, SprocParameter[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/<ExecuteSprocParametrizedAsync>d__21")]
public static Task`1<SelectedData> ExecuteSprocParametrizedAsync(ICommandChannelAsync commandChannel, CancellationToken cancellationToken, string sprocName, SprocParameter[] parameters);
    public static int ExecuteNonQuery(ICommandChannel commandChannel, string sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/<ExecuteNonQueryAsync>d__24")]
public static Task`1<int> ExecuteNonQueryAsync(ICommandChannelAsync commandChannel, string sql, CancellationToken cancellationToken);
    public static int ExecuteNonQueryWithParams(ICommandChannel commandChannel, string sqlCommand, QueryParameterCollection parameters, String[] parametersNames);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/<ExecuteNonQueryWithParamsAsync>d__26")]
public static Task`1<int> ExecuteNonQueryWithParamsAsync(ICommandChannelAsync commandChannel, string sqlCommand, QueryParameterCollection parameters, String[] parametersNames, CancellationToken cancellationToken);
    public static object ExecuteScalar(ICommandChannel commandChannel, string sql);
    public static Task`1<object> ExecuteScalarAsync(ICommandChannelAsync commandChannel, string sql, CancellationToken cancellationToken);
    public static object ExecuteScalarWithParams(ICommandChannel commandChannel, string sqlCommand, QueryParameterCollection parameters, String[] parametersNames);
    private static T TryFixMonoDeserialization(object res, string operationName);
    private static T DeserializeXmlNodes(XmlNode[] nodes);
    public static Task`1<object> ExecuteScalarWithParamsAsync(ICommandChannelAsync commandChannel, string sqlCommand, QueryParameterCollection parameters, String[] parametersNames, CancellationToken cancellationToken);
    public static SelectedData ExecuteQuery(ICommandChannel commandChannel, string sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/<ExecuteQueryAsync>d__34")]
public static Task`1<SelectedData> ExecuteQueryAsync(ICommandChannelAsync commandChannel, string sql, CancellationToken cancellationToken);
    public static SelectedData ExecuteQueryWithParams(ICommandChannel commandChannel, string sqlCommand, QueryParameterCollection parameters, String[] parametersNames);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/<ExecuteQueryWithParamsAsync>d__36")]
public static Task`1<SelectedData> ExecuteQueryWithParamsAsync(ICommandChannelAsync commandChannel, string sqlCommand, QueryParameterCollection parameters, String[] parametersNames, CancellationToken cancellationToken);
    public static SelectedData ExecuteQueryWithMetadata(ICommandChannel commandChannel, string sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/<ExecuteQueryWithMetadataAsync>d__38")]
public static Task`1<SelectedData> ExecuteQueryWithMetadataAsync(ICommandChannelAsync commandChannel, string sql, CancellationToken cancellationToken);
    public static SelectedData ExecuteQueryWithMetadataWithParams(ICommandChannel commandChannel, string sqlCommand, QueryParameterCollection parameters, String[] parametersNames);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/<ExecuteQueryWithMetadataWithParamsAsync>d__40")]
public static Task`1<SelectedData> ExecuteQueryWithMetadataWithParamsAsync(ICommandChannelAsync commandChannel, string sqlCommand, QueryParameterCollection parameters, String[] parametersNames, CancellationToken cancellationToken);
}
internal static class DevExpress.Xpo.Helpers.DbNameHashHelper : object {
    public static string GetDbNameHashString(string dbName);
}
public interface DevExpress.Xpo.Helpers.ICommandChannel {
    public abstract virtual object Do(string command, object args);
}
public interface DevExpress.Xpo.Helpers.ICommandChannelAsync {
    public abstract virtual Task`1<object> DoAsync(string command, object args, CancellationToken cancellationToken);
}
public class DevExpress.Xpo.Helpers.PerformanceCounters : object {
    private static Counter[] counters;
    private static object syncRoot;
    private static bool inited;
    public static Counter ObjectsInCache { get; }
    public static Counter ObjectsInCacheAdded { get; }
    public static Counter ObjectsInCacheRemoved { get; }
    public static Counter SessionCount { get; }
    public static Counter SessionConnected { get; }
    public static Counter SessionDisconnected { get; }
    public static Counter SqlDataStoreCount { get; }
    public static Counter SqlDataStoreCreated { get; }
    public static Counter SqlDataStoreFinalized { get; }
    public static Counter SqlDataStoreTotalRequests { get; }
    public static Counter SqlDataStoreSchemaUpdateRequests { get; }
    public static Counter SqlDataStoreSelectRequests { get; }
    public static Counter SqlDataStoreModifyRequests { get; }
    public static Counter SqlDataStoreSelectQueries { get; }
    public static Counter SqlDataStoreModifyStatements { get; }
    public static Counter SqlDataStoreTotalQueue { get; }
    public static Counter SqlDataStoreSelectQueue { get; }
    public static Counter SqlDataStoreModifyQueue { get; }
    public static Counter SqlDataStoreSchemaUpdateQueue { get; }
    public static Counter DataCacheNodeCacheHit { get; }
    public static Counter DataCacheNodeCacheMiss { get; }
    public static Counter DataCacheNodeCachePassthrough { get; }
    public static Counter DataCacheNodeCachedCount { get; }
    public static Counter DataCacheNodeCachedAdded { get; }
    public static Counter DataCacheNodeCachedRemoved { get; }
    public static Counter DataCacheNodeCount { get; }
    public static Counter DataCacheNodeCreated { get; }
    public static Counter DataCacheNodeFinalized { get; }
    public static Counter DataCacheRootCount { get; }
    public static Counter DataCacheRootCreated { get; }
    public static Counter DataCacheRootFinalized { get; }
    public static Counter MSSql2005CacheRootDependencyEstablished { get; }
    public static Counter MSSql2005CacheRootDependencyTriggered { get; }
    public static Counter DataCacheRootTotalRequests { get; }
    public static Counter DataCacheRootSchemaUpdateRequests { get; }
    public static Counter DataCacheRootSelectRequests { get; }
    public static Counter DataCacheRootModifyRequests { get; }
    public static Counter DataCacheRootSelectQueries { get; }
    public static Counter DataCacheRootModifyStatements { get; }
    public static Counter DataCacheRootTotalQueue { get; }
    public static Counter DataCacheRootSelectQueue { get; }
    public static Counter DataCacheRootModifyQueue { get; }
    public static Counter DataCacheRootSchemaUpdateQueue { get; }
    public static Counter DataCacheRootProcessCookieQueue { get; }
    public static Counter DataCacheRootNotifyDirtyTablesQueue { get; }
    public static Counter DataCacheRootProcessCookieRequests { get; }
    public static Counter DataCacheRootNotifyDirtyTablesRequests { get; }
    public static Counter DataCacheRootNotifyDirtyTablesTables { get; }
    public static Counter DataCacheNodeTotalRequests { get; }
    public static Counter DataCacheNodeSchemaUpdateRequests { get; }
    public static Counter DataCacheNodeSelectRequests { get; }
    public static Counter DataCacheNodeModifyRequests { get; }
    public static Counter DataCacheNodeSelectQueries { get; }
    public static Counter DataCacheNodeModifyStatements { get; }
    public static Counter DataCacheNodeTotalQueue { get; }
    public static Counter DataCacheNodeSelectQueue { get; }
    public static Counter DataCacheNodeModifyQueue { get; }
    public static Counter DataCacheNodeSchemaUpdateQueue { get; }
    public static Counter DataCacheNodeProcessCookieQueue { get; }
    public static Counter DataCacheNodeNotifyDirtyTablesQueue { get; }
    public static Counter DataCacheNodeProcessCookieRequests { get; }
    public static Counter DataCacheNodeNotifyDirtyTablesRequests { get; }
    public static Counter DataCacheNodeNotifyDirtyTablesTables { get; }
    private static PerformanceCounters();
    public static Counter get_ObjectsInCache();
    public static Counter get_ObjectsInCacheAdded();
    public static Counter get_ObjectsInCacheRemoved();
    public static Counter get_SessionCount();
    public static Counter get_SessionConnected();
    public static Counter get_SessionDisconnected();
    public static Counter get_SqlDataStoreCount();
    public static Counter get_SqlDataStoreCreated();
    public static Counter get_SqlDataStoreFinalized();
    public static Counter get_SqlDataStoreTotalRequests();
    public static Counter get_SqlDataStoreSchemaUpdateRequests();
    public static Counter get_SqlDataStoreSelectRequests();
    public static Counter get_SqlDataStoreModifyRequests();
    public static Counter get_SqlDataStoreSelectQueries();
    public static Counter get_SqlDataStoreModifyStatements();
    public static Counter get_SqlDataStoreTotalQueue();
    public static Counter get_SqlDataStoreSelectQueue();
    public static Counter get_SqlDataStoreModifyQueue();
    public static Counter get_SqlDataStoreSchemaUpdateQueue();
    public static Counter get_DataCacheNodeCacheHit();
    public static Counter get_DataCacheNodeCacheMiss();
    public static Counter get_DataCacheNodeCachePassthrough();
    public static Counter get_DataCacheNodeCachedCount();
    public static Counter get_DataCacheNodeCachedAdded();
    public static Counter get_DataCacheNodeCachedRemoved();
    public static Counter get_DataCacheNodeCount();
    public static Counter get_DataCacheNodeCreated();
    public static Counter get_DataCacheNodeFinalized();
    public static Counter get_DataCacheRootCount();
    public static Counter get_DataCacheRootCreated();
    public static Counter get_DataCacheRootFinalized();
    public static Counter get_MSSql2005CacheRootDependencyEstablished();
    public static Counter get_MSSql2005CacheRootDependencyTriggered();
    public static Counter get_DataCacheRootTotalRequests();
    public static Counter get_DataCacheRootSchemaUpdateRequests();
    public static Counter get_DataCacheRootSelectRequests();
    public static Counter get_DataCacheRootModifyRequests();
    public static Counter get_DataCacheRootSelectQueries();
    public static Counter get_DataCacheRootModifyStatements();
    public static Counter get_DataCacheRootTotalQueue();
    public static Counter get_DataCacheRootSelectQueue();
    public static Counter get_DataCacheRootModifyQueue();
    public static Counter get_DataCacheRootSchemaUpdateQueue();
    public static Counter get_DataCacheRootProcessCookieQueue();
    public static Counter get_DataCacheRootNotifyDirtyTablesQueue();
    public static Counter get_DataCacheRootProcessCookieRequests();
    public static Counter get_DataCacheRootNotifyDirtyTablesRequests();
    public static Counter get_DataCacheRootNotifyDirtyTablesTables();
    public static Counter get_DataCacheNodeTotalRequests();
    public static Counter get_DataCacheNodeSchemaUpdateRequests();
    public static Counter get_DataCacheNodeSelectRequests();
    public static Counter get_DataCacheNodeModifyRequests();
    public static Counter get_DataCacheNodeSelectQueries();
    public static Counter get_DataCacheNodeModifyStatements();
    public static Counter get_DataCacheNodeTotalQueue();
    public static Counter get_DataCacheNodeSelectQueue();
    public static Counter get_DataCacheNodeModifyQueue();
    public static Counter get_DataCacheNodeSchemaUpdateQueue();
    public static Counter get_DataCacheNodeProcessCookieQueue();
    public static Counter get_DataCacheNodeNotifyDirtyTablesQueue();
    public static Counter get_DataCacheNodeProcessCookieRequests();
    public static Counter get_DataCacheNodeNotifyDirtyTablesRequests();
    public static Counter get_DataCacheNodeNotifyDirtyTablesTables();
    private static Counter GetCounter(CounterIndexes index);
    private static void CreateCounters(string category, string instanceName);
    private static void Clear();
    private static Counter CreateCounter(CounterCreationData counter, string category, string instanceName);
    private static string GetInstanceName();
    private static void DomainUnloadEventHandler(object sender, EventArgs e);
    private static void EnusreCategory(string category, CounterCreationDataCollection countersData);
    public static void Init();
    private static void InitIfNeeded();
}
public class DevExpress.Xpo.Helpers.SimpleSqlParser : object {
    private static string AsDelimiterString;
    private string sql;
    private List`1<string> result;
    private StringBuilder curColumn;
    private int inBrackets;
    private bool inQuotes;
    private bool inDoubleQuotes;
    private bool firstQuote;
    private bool quoteEscaped;
    private char chr;
    private Nullable`1<char> nextChr;
    private Nullable`1<char> prevChr;
    private SimpleSqlParser(string sql);
    public static StringBuilder GetExpandedProperties(String[] properties, string expandingAlias);
    public static String[] GetColumns(string sql);
    private String[] GetColumns();
    private bool Comma();
    private void Appender(bool append);
    private bool OpeningBracket();
    private bool ClosingBracket();
    private bool Default();
    private bool Quote();
    private bool DoubleQuotes();
}
public static class DevExpress.Xpo.Helpers.XPTypeActivator : object {
    public static string AssemblyFoundExceptionDataKey;
    public static string AssemblyLoadedExceptionDataKey;
    public static Type GetType(string assemblyName, string typeName);
    public static Type GetType(string assemblyName, string typeName, bool throwException);
    private static TypeLoadException CreateTypeLoadException(string message, bool assemblyFound, bool assemblyLoaded, Exception innerException);
}
public class DevExpress.Xpo.Logger.DummyServer : object {
    public int Count { get; }
    public int LostMessageCount { get; }
    public bool IsServerActive { get; }
    public bool Enabled { get; public set; }
    public int Capacity { get; }
    public sealed virtual int get_Count();
    public sealed virtual int get_LostMessageCount();
    public sealed virtual bool get_IsServerActive();
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    public sealed virtual int get_Capacity();
    public sealed virtual void Log(LogMessage message);
    public sealed virtual void Log(LogMessage[] messages);
    public sealed virtual void ClearLog();
}
public interface DevExpress.Xpo.Logger.ILogger {
    public int Count { get; }
    public int LostMessageCount { get; }
    public bool IsServerActive { get; }
    public bool Enabled { get; public set; }
    public int Capacity { get; }
    public abstract virtual int get_Count();
    public abstract virtual int get_LostMessageCount();
    public abstract virtual bool get_IsServerActive();
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual int get_Capacity();
    public abstract virtual void Log(LogMessage message);
    public abstract virtual void Log(LogMessage[] messages);
    public abstract virtual void ClearLog();
}
public class DevExpress.Xpo.Logger.LogManager : object {
    public static string LogCategorySQL;
    public static string LogParam_StackTrace;
    private static string STR_Dummy;
    private static ILogger logServer;
    private static string serverType;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) hasTransport;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) hasCategoryList;
    private static Dictionary`2<string, bool> categoryList;
    private static bool includeStackTrace;
    public static int LogSessionId;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) initialized;
    private static object initializeSyncRoot;
    public static ILogger LogServer { get; }
    public static string ServerType { get; }
    public static bool HasTransport { get; }
    public static bool HasCategoryList { get; }
    public static bool IncludeStackTrace { get; public set; }
    private static LogManager();
    public static ILogger get_LogServer();
    public static string get_ServerType();
    public static bool get_HasTransport();
    public static bool get_HasCategoryList();
    public static bool HasCategory(string category);
    public static bool get_IncludeStackTrace();
    public static void set_IncludeStackTrace(bool value);
    public static bool IsLogActive(string category);
    public static void SetCategories(string categories);
    public static void SetTransport(ILogger logger);
    public static void SetTransport(ILogger logger, string categories);
    private static void SetTransport(ILogger logger, string serverType, string categories);
    public static void ResetTransport();
    private static void Init();
    public static T LogMany(string category, LogHandler`1<T> handler, MessageHandler`1<LogMessage[]> createMessageHandler);
    public static T Log(string category, LogHandler`1<T> handler, MessageHandler`1<LogMessage> createMessageHandler);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Logger.LogManager/<LogAsync>d__37`1")]
public static Task`1<T> LogAsync(string category, LogHandler`1<Task`1<T>> handler, MessageHandler`1<LogMessage> createMessageHandler);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Logger.LogManager/<LogManyAsync>d__38`1")]
public static Task`1<T> LogManyAsync(string category, LogHandler`1<Task`1<T>> handler, MessageHandler`1<LogMessage[]> createMessageHandler);
    public static void Log(string category, LogHandlerVoid handler, MessageHandler`1<LogMessage> createMessageHandler, ExceptionHandler exceptionHandler);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Logger.LogManager/<LogAsync>d__40")]
public static Task LogAsync(string category, LogHandler`1<Task> handler, MessageHandler`1<LogMessage> createMessageHandler, ExceptionHandler exceptionHandler);
}
public class DevExpress.Xpo.Logger.LogMessage : object {
    public static string LogParam_ConnectionProvider;
    public static string LogParam_CacheElement;
    public static string LogParam_CookieGuid;
    public static string LogParam_CookieAge;
    public static string LogParam_Provider;
    private string error;
    private DateTime date;
    private TimeSpan duration;
    private int threadId;
    private string threadName;
    private LogMessageType messageType;
    private string messageText;
    private List`1<LogMessageParameter> parameterList;
    [OptionalFieldAttribute]
public int LogSessionId;
    public DateTime Date { get; public set; }
    [XmlIgnoreAttribute]
public TimeSpan Duration { get; public set; }
    public int ThreadId { get; public set; }
    public string ThreadName { get; public set; }
    public LogMessageType MessageType { get; public set; }
    public string MessageText { get; public set; }
    public int ParameterCount { get; }
    public string Error { get; public set; }
    [XmlIgnoreAttribute]
public List`1<LogMessageParameter> ParameterList { get; }
    public long DurationTicks { get; public set; }
    [XmlArrayAttribute("parameters")]
public LogMessageParameter[] Parameters { get; public set; }
    public LogMessage(LogMessageType messageType, string messageText, TimeSpan duration);
    public LogMessage(LogMessageType messageType, string messageText);
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public int get_ThreadId();
    public void set_ThreadId(int value);
    public string get_ThreadName();
    public void set_ThreadName(string value);
    public LogMessageType get_MessageType();
    public void set_MessageType(LogMessageType value);
    public string get_MessageText();
    public void set_MessageText(string value);
    public int get_ParameterCount();
    public string get_Error();
    public void set_Error(string value);
    public List`1<LogMessageParameter> get_ParameterList();
    public long get_DurationTicks();
    public void set_DurationTicks(long value);
    public LogMessageParameter[] get_Parameters();
    public void set_Parameters(LogMessageParameter[] value);
    public static LogMessage CreateMessage(object connectionProvider, IDbCommand command, TimeSpan duration);
    public static LogMessage CreateMessage(object cacheElement, DataCacheCookie cookie, string statementResult, TimeSpan duration);
    public static LogMessage CreateMessage(object provider, string statementResult, TimeSpan duration);
    public static string CriteriaOperatorCollectionToString(IEnumerable`1<T> collection);
    public static string CollectionToString(ICollection`1<T> collection, Function`2<string, T> getString);
    public static string CollectionToString(ICollection collection, Function`2<string, object> getString);
    public static string CollectionToString(IList`1<string> nameCollection, IList valueCollection, Function2`3<string, string, object> getParamString);
    public static LogMessage UpdateMessageWithTables(LogMessage message, DBTable[] tables);
    public static LogMessage UpdateMessage(LogMessage message, String[] parameters);
    public virtual string ToString();
}
public class DevExpress.Xpo.Logger.LogMessageCollection : object {
    public List`1<LogMessage> Items;
}
public class DevExpress.Xpo.Logger.LogMessageParameter : object {
    private string name;
    private object parameterValue;
    public string Name { get; public set; }
    public object Value { get; public set; }
    public LogMessageParameter(string name, object value);
    public void set_Name(string value);
    public string get_Name();
    public void set_Value(object value);
    public object get_Value();
    public virtual string ToString();
}
public class DevExpress.Xpo.Logger.LogMessageTimer : object {
    private Stopwatch sw;
    public TimeSpan Elapsed { get; }
    public void Start();
    public TimeSpan get_Elapsed();
    public TimeSpan Stop();
    public void Restart();
    public sealed virtual void Dispose();
}
public enum DevExpress.Xpo.Logger.LogMessageType : Enum {
    public int value__;
    public static LogMessageType DbCommand;
    public static LogMessageType LoggingEvent;
    public static LogMessageType Statement;
    public static LogMessageType SessionEvent;
    public static LogMessageType Exception;
    public static LogMessageType Text;
}
public class DevExpress.Xpo.Logger.ProfilerConfigSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("serverType")]
public string ServerType { get; public set; }
    [ConfigurationPropertyAttribute("serverAssembly")]
public string ServerAssembly { get; public set; }
    [ConfigurationPropertyAttribute("categories")]
public string Categories { get; public set; }
    [ConfigurationPropertyAttribute("port")]
public int Port { get; public set; }
    public string get_ServerType();
    public void set_ServerType(string value);
    public string get_ServerAssembly();
    public void set_ServerAssembly(string value);
    public string get_Categories();
    public void set_Categories(string value);
    public int get_Port();
    public void set_Port(int value);
}
public class DevExpress.Xpo.Providers.STASafeDataStore : object {
    private IDataStore DataStore;
    private static bool IsStaCurrentThread { get; }
    public AutoCreateOption AutoCreateOption { get; }
    public STASafeDataStore(IDataStore dataStore);
    private static bool get_IsStaCurrentThread();
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public sealed virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    public sealed virtual SelectedData SelectData(SelectStatement[] selects);
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public sealed virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public sealed virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public sealed virtual String[] GetStorageTablesList(bool includeViews);
    public sealed virtual DBTable[] GetStorageTables(String[] tables);
    public sealed virtual object Do(string command, object args);
    public sealed virtual Task`1<object> DoAsync(string command, object args, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private AutoCreateOption <get_AutoCreateOption>b__6_0();
}
[TypeConverterAttribute("DevExpress.Xpo.SortProperty/SortPropertyConverter")]
public class DevExpress.Xpo.SortProperty : object {
    private CriteriaOperator property;
    private SortingDirection direction;
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public string PropertyName { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Behavior")]
public CriteriaOperator Property { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Behavior")]
public SortingDirection Direction { get; public set; }
    public SortProperty(CriteriaOperator property, SortingDirection direction);
    public SortProperty(string propertyName, SortingDirection sorting);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public CriteriaOperator get_Property();
    public void set_Property(CriteriaOperator value);
    public SortingDirection get_Direction();
    public void set_Direction(SortingDirection value);
}
public enum DevExpress.XtraEditors.ChangedBoundType : Enum {
    public int value__;
    public static ChangedBoundType None;
    public static ChangedBoundType Minimum;
    public static ChangedBoundType Maximum;
    public static ChangedBoundType Both;
}
public class DevExpress.XtraEditors.ClientRangeChangedEventHandler : MulticastDelegate {
    public ClientRangeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RangeControlClientRangeEventArgs range);
    public virtual IAsyncResult BeginInvoke(object sender, RangeControlClientRangeEventArgs range, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.XtraEditors.Controls.ByteImageConverter : object {
    protected static Image FromByteArray(Byte[] b, int offset);
    public static Image FromByteArray(Byte[] b);
    private static Byte[] MetafileToByteArray(Image img);
    public static ImageFormat GetImageFormatByPixelFormat(Image image);
    private static bool CanSave(ImageFormat format);
    public static Byte[] ToByteArray(Image image, ImageFormat imageFormat);
    public static Byte[] ToByteArray(object obj);
    private static Byte[] FromBinary(object obj);
}
[EditorBrowsableAttribute("1")]
public enum DevExpress.XtraEditors.Controls.CryptoServiceProvider : Enum {
    public int value__;
    public static CryptoServiceProvider MD5;
    public static CryptoServiceProvider SHA1;
}
public class DevExpress.XtraEditors.Controls.DateRange : object {
    [CompilerGeneratedAttribute]
private DateRangeCollection <Collection>k__BackingField;
    private DateTime startDate;
    private DateTime endDate;
    protected internal DateRangeCollection Collection { get; protected internal set; }
    [CategoryAttribute("Behavior")]
public bool IsEmpty { get; }
    [CategoryAttribute("Behavior")]
public DateTime StartDate { get; public set; }
    [CategoryAttribute("Behavior")]
public DateTime EndDate { get; public set; }
    public DateRange(DateTime dateTime);
    public DateRange(DateTime startDate, DateTime endDate);
    [CompilerGeneratedAttribute]
protected internal DateRangeCollection get_Collection();
    [CompilerGeneratedAttribute]
protected internal void set_Collection(DateRangeCollection value);
    public bool get_IsEmpty();
    public bool Contains(DateRange range);
    public bool Contains(DateTime date);
    public bool IsIntersect(DateRange range);
    public DateRange Intersect(DateRange range);
    public DateTime get_StartDate();
    public void set_StartDate(DateTime value);
    protected virtual void OnRangeChanged();
    public DateTime get_EndDate();
    public void set_EndDate(DateTime value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class DevExpress.XtraEditors.Controls.DateRangeCollection : Collection`1<DateRange> {
    [CompilerGeneratedAttribute]
private IDateRangeCollectionOwner <Owner>k__BackingField;
    private DateRangeCollection copyBeforeChange;
    [CompilerGeneratedAttribute]
private int <UpdateCount>k__BackingField;
    public IDateRangeCollectionOwner Owner { get; private set; }
    protected int UpdateCount { get; protected set; }
    public bool IsLockUpdate { get; }
    public DateTime Start { get; }
    public DateTime End { get; }
    public DateRangeCollection(IDateRangeCollectionOwner owner);
    [CompilerGeneratedAttribute]
public IDateRangeCollectionOwner get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(IDateRangeCollectionOwner value);
    public virtual bool IsDateSelected(DateTime date);
    private void MakeDataCopy();
    private bool IsEqualDateRangeCollection(DateRangeCollection collection);
    [CompilerGeneratedAttribute]
protected int get_UpdateCount();
    [CompilerGeneratedAttribute]
protected void set_UpdateCount(int value);
    public bool get_IsLockUpdate();
    public void BeginUpdate();
    public void CancelUpdate();
    public void EndUpdate();
    protected internal virtual void OnSelectionChanged();
    protected virtual void InsertItem(int index, DateRange item);
    protected virtual void RemoveItem(int index);
    public void RemoveRange(DateRange range);
    protected virtual void RemoveEmptyItems();
    protected virtual void ClearItems();
    protected virtual void SetItem(int index, DateRange item);
    public bool IsIntersect(DateTime start, DateTime end);
    public virtual DateTime get_Start();
    public virtual DateTime get_End();
    [EditorBrowsableAttribute("1")]
public bool Contains(DateTime date);
    public void AddRange(IEnumerable`1<DateRange> source);
    public bool ContainsRange(DateRange range);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.XtraEditors.Controls.DatesCollection : CollectionBase {
    [CompilerGeneratedAttribute]
private IDatesCollectionOwner <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LockUpdateCount>k__BackingField;
    protected IDatesCollectionOwner Owner { get; private set; }
    protected int LockUpdateCount { get; protected set; }
    protected bool IsLockUpdate { get; }
    public DateTime Item { get; }
    public DatesCollection(IDatesCollectionOwner owner);
    [CompilerGeneratedAttribute]
protected IDatesCollectionOwner get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(IDatesCollectionOwner value);
    [CompilerGeneratedAttribute]
protected int get_LockUpdateCount();
    [CompilerGeneratedAttribute]
protected void set_LockUpdateCount(int value);
    protected bool get_IsLockUpdate();
    public void BeginUpdate();
    public void CancelUpdate();
    public void EndUpdate();
    protected virtual void OnCollectionChanged();
    public DateTime get_Item(int index);
    protected virtual DateTime ExtractDate(DateTime dt);
    public int Add(DateTime obj);
    public void AddRange(DatesCollection dates);
    public void RemoveRange(DatesCollection dates);
    public bool Contains(DateTime obj);
    public void Remove(DateTime obj);
    public bool IsContinuous();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnClearComplete();
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
}
[AttributeUsageAttribute("32")]
public class DevExpress.XtraEditors.Controls.EditorButtonPreferredConstructorAttribute : Attribute {
}
public class DevExpress.XtraEditors.Controls.EditorButtonTypeConverter : UniversalTypeConverter {
    protected bool AllowBinaryType { get; }
    protected virtual bool get_AllowBinaryType();
    protected virtual ConstructorInfo[] FilterConstructors(ConstructorInfo[] ctors);
    private static bool ConstructorAllowed(ConstructorInfo cInfo);
}
[AttributeUsageAttribute("64")]
public class DevExpress.XtraEditors.Controls.EditorPainterActivatorAttribute : Attribute {
    private Type objectType;
    private Type returnType;
    public Type ObjectType { get; }
    public Type ReturnType { get; }
    public EditorPainterActivatorAttribute(Type objectType, Type returnType);
    public Type get_ObjectType();
    public Type get_ReturnType();
}
public interface DevExpress.XtraEditors.Controls.IDateRangeCollectionOwner {
    public bool UseDataModifiedOptimization { get; }
    public abstract virtual void OnSelectionChanged();
    public abstract virtual bool get_UseDataModifiedOptimization();
}
public interface DevExpress.XtraEditors.Controls.IDatesCollectionOwner {
    public abstract virtual void OnCollectionChanged();
}
public class DevExpress.XtraEditors.Controls.ImagesComparer : object {
    [EditorBrowsableAttribute("1")]
public static CryptoServiceProvider CryptoServiceProvider;
    public static bool AreEqual(Image imageA, Image imageB);
    private static Byte[] ConvertImageToByteArray(Image image);
    private static ImageFormat FindAppropriateImageFormat(ImageFormat imageFormat);
}
public class DevExpress.XtraEditors.DXErrorProvider.ErrorInfo : object {
    private string errorText;
    private ErrorType errorType;
    [DescriptionAttribute("Gets or sets the error text associated with the current property name.")]
public string ErrorText { get; public set; }
    [DescriptionAttribute("Gets or sets the type of error associated with the current property name.")]
public ErrorType ErrorType { get; public set; }
    public ErrorInfo(string errorText, ErrorType errorType);
    public string get_ErrorText();
    public void set_ErrorText(string value);
    public ErrorType get_ErrorType();
    public void set_ErrorType(ErrorType value);
}
public enum DevExpress.XtraEditors.DXErrorProvider.ErrorType : Enum {
    public int value__;
    public static ErrorType None;
    public static ErrorType Default;
    public static ErrorType Information;
    public static ErrorType Warning;
    public static ErrorType Critical;
    public static ErrorType User1;
    public static ErrorType User2;
    public static ErrorType User3;
    public static ErrorType User4;
    public static ErrorType User5;
    public static ErrorType User6;
    public static ErrorType User7;
    public static ErrorType User8;
    public static ErrorType User9;
}
public interface DevExpress.XtraEditors.DXErrorProvider.IDXDataErrorInfo {
    public abstract virtual void GetPropertyError(string propertyName, ErrorInfo info);
    public abstract virtual void GetError(ErrorInfo info);
}
public enum DevExpress.XtraEditors.FilterChangedAction : Enum {
    public int value__;
    public static FilterChangedAction RebuildWholeTree;
    public static FilterChangedAction FilterStringChanged;
    public static FilterChangedAction ValueChanged;
    public static FilterChangedAction FieldNameChange;
    public static FilterChangedAction OperationChanged;
    public static FilterChangedAction GroupTypeChanged;
    public static FilterChangedAction RemoveNode;
    public static FilterChangedAction AddNode;
    public static FilterChangedAction ClearAll;
    public static FilterChangedAction AggregateOperationChanged;
    public static FilterChangedAction AggregatePropertyChanged;
}
public class DevExpress.XtraEditors.FilterChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private FilterChangedAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Node <CurrentNode>k__BackingField;
    public FilterChangedAction Action { get; private set; }
    public Node CurrentNode { get; private set; }
    public FilterChangedEventArgs(FilterChangedAction action, Node node);
    [CompilerGeneratedAttribute]
public FilterChangedAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(FilterChangedAction value);
    [CompilerGeneratedAttribute]
public Node get_CurrentNode();
    [CompilerGeneratedAttribute]
private void set_CurrentNode(Node value);
    public virtual string ToString();
}
public enum DevExpress.XtraEditors.FilterControlAllowAggregateEditing : Enum {
    public int value__;
    public static FilterControlAllowAggregateEditing No;
    public static FilterControlAllowAggregateEditing Aggregate;
    public static FilterControlAllowAggregateEditing AggregateWithCondition;
}
public class DevExpress.XtraEditors.FilterDateElement : object {
    private string caption;
    private string tooltip;
    private CriteriaOperator criteria;
    private bool _checked;
    private FilterDateType filterType;
    public FilterDateType FilterType { get; }
    public string Caption { get; public set; }
    public string Tooltip { get; public set; }
    public CriteriaOperator Criteria { get; }
    public bool Checked { get; public set; }
    public FilterDateElement(string caption, string tooltip, CriteriaOperator criteria);
    [EditorBrowsableAttribute("1")]
public FilterDateElement(string caption, string tooltip, CriteriaOperator criteria, FilterDateType filterType);
    public FilterDateType get_FilterType();
    public string get_Caption();
    public void set_Caption(string value);
    public string get_Tooltip();
    public void set_Tooltip(string value);
    public CriteriaOperator get_Criteria();
    public bool get_Checked();
    public void set_Checked(bool value);
}
[FlagsAttribute]
public enum DevExpress.XtraEditors.FilterDateType : Enum {
    public int value__;
    public static FilterDateType None;
    public static FilterDateType SpecificDate;
    public static FilterDateType BeyondThisYear;
    public static FilterDateType LaterThisYear;
    public static FilterDateType LaterThisMonth;
    public static FilterDateType LaterThisWeek;
    public static FilterDateType NextWeek;
    public static FilterDateType Tomorrow;
    public static FilterDateType Today;
    public static FilterDateType Yesterday;
    public static FilterDateType EarlierThisWeek;
    public static FilterDateType LastWeek;
    public static FilterDateType EarlierThisMonth;
    public static FilterDateType EarlierThisYear;
    public static FilterDateType PriorThisYear;
    public static FilterDateType Empty;
    public static FilterDateType User;
    public static FilterDateType Beyond;
    public static FilterDateType ThisWeek;
    public static FilterDateType ThisMonth;
    public static FilterDateType MonthAfter1;
    public static FilterDateType MonthAfter2;
    public static FilterDateType MonthAgo1;
    public static FilterDateType MonthAgo2;
    public static FilterDateType MonthAgo3;
    public static FilterDateType MonthAgo4;
    public static FilterDateType MonthAgo5;
    public static FilterDateType MonthAgo6;
    public static FilterDateType Earlier;
}
public static class DevExpress.XtraEditors.FilterDateTypeHelper : object {
    private static List`1<IntervalTriplet> Intervals;
    private static Dictionary`2<FilterDateType, FunctionOperatorType> Mappings;
    private static Dictionary`2<FunctionOperatorType, FilterDateType> ReverseMappings;
    private static FilterDateTypeHelper();
    private static void PushInterval(FunctionOperatorType interval, Nullable`1<FunctionOperatorType> intervalEnd, Nullable`1& intervalStart);
    public static DateTime GetMonthAgo(DateTime date, FilterDateType monthAgo);
    public static DateTime GetMonthAgo(DateTime date, int month);
    public static CriteriaOperator ToCriteria(CriteriaOperator property, FilterDateType heap);
    private static CriteriaOperator ToCriteriaAlt(CriteriaOperator property, FilterDateType heap);
    private static int GetMonthAgo(FilterDateType heap);
    public static bool IsFilterValid(FilterDateType filterType);
    private static CriteriaOperator ToCriteriaCore(CriteriaOperator property, FilterDateType heap);
    public static CriteriaOperator ToTooltipCriteria(CriteriaOperator property, FilterDateType heap);
    private static void FromCriteriaRoot(CriteriaOperator currentFilter, CriteriaOperator operand, Boolean[] arra, Nullable`1& startDate, Nullable`1& endDate, Boolean& hasNullValue);
    private static void FromCriteriaCore(CriteriaOperator currentFilter, CriteriaOperator operand, Boolean[] arra, Nullable`1& startDate, Nullable`1& endDate, Boolean& hasNullValue);
    private static void ExtractLess(CriteriaOperator criteriaOperator, Nullable`1& dte, Nullable`1& indexe);
    private static void ExtractGreaterOrEquals(CriteriaOperator criteriaOperator, Nullable`1& dts, Nullable`1& indexs);
    private static int ExtractIntervalIndex(FunctionOperatorType interval);
    public static DateFilterResult FromCriteria(CriteriaOperator currentFilter, string fieldName);
}
public class DevExpress.XtraEditors.Filtering.AggregateNode : ClauseNode {
    private Aggregate _Aggregate;
    private OperandProperty _AggregateOperand;
    private INode _AggregateCondtion;
    private IList`1<INode> children;
    private IBoundPropertyCollection childrenFilterProperties;
    public bool IsList { get; }
    public Aggregate Aggregate { get; public set; }
    public OperandProperty AggregateOperand { get; public set; }
    public INode AggregateCondition { get; public set; }
    public IBoundProperty AggregateProperty { get; }
    public AggregateNode(FilterTreeNodeModel model);
    public virtual bool get_IsList();
    public sealed virtual Aggregate get_Aggregate();
    public void set_Aggregate(Aggregate value);
    public sealed virtual OperandProperty get_AggregateOperand();
    public void set_AggregateOperand(OperandProperty value);
    public sealed virtual INode get_AggregateCondition();
    public sealed virtual void set_AggregateCondition(INode value);
    protected IBoundProperty GetChildByCaption(string caption);
    protected IBoundProperty GetChildByName(string name);
    public IBoundProperty get_AggregateProperty();
    public virtual IList`1<INode> GetChildren();
    private void CreateAggregateCondtion();
    private void AddAggregationToChildren();
    public virtual IBoundProperty GetPropertyForEditing();
    protected virtual IBoundPropertyCollection GetChildrenFilterProperties();
    protected virtual void ClauseNodeFirstOperandChanged(OperandProperty newProp, int elementIndex);
    protected virtual bool IsRequireChangeNodeType(IBoundProperty newProperty);
    protected virtual Type GetValueType();
    public List`1<IBoundProperty> GetAvailableAggregateProperties();
    public List`1<Aggregate> GetAvailableAggregateOperations();
    public virtual List`1<ClauseType> GetAvailableOperations();
    protected List`1<IBoundProperty> GetAvailableAggregateProperties(Aggregate forAggregate);
    public virtual void RebuildElements();
    protected IBoundProperty GetChildrenFilterProperty(OperandProperty property);
    protected string GetAggregatedDisplayText(OperandProperty property);
    protected virtual void ChangeElement(NodeEditableElement element, object value);
    private OperandProperty GetAggregateProperty(string propertyName);
    protected void ValidateAggregate();
    protected void ValidateAggregateProperty();
    protected void ValidateOperation();
    protected virtual object Accept(INodeVisitor visitor);
}
public class DevExpress.XtraEditors.Filtering.ClauseNode : Node {
    private OperandProperty _FirstOperand;
    private ClauseType _Operation;
    private IList`1<CriteriaOperator> _AdditionalOperands;
    private bool disableValueChangedNotification;
    private static int MaxLength;
    public bool IsCollectionValues { get; }
    protected bool IsTwoFieldsClause { get; }
    protected bool IsInRangeClause { get; }
    protected bool IsNotInRangeClause { get; }
    protected bool CanAddCollectionItem { get; }
    public IBoundProperty Property { get; }
    public bool IsShowCollectionValueAsOnEditor { get; }
    public int LastTabElementIndex { get; }
    public OperandProperty FirstOperand { get; public set; }
    public ClauseType Operation { get; public set; }
    public IList`1<CriteriaOperator> AdditionalOperands { get; }
    public bool IsList { get; }
    public string Text { get; }
    public bool ShowOperandTypeIcon { get; }
    public bool ShowParameterTypeIcon { get; }
    public bool ShowTypeIcon { get; }
    public ClauseNode(FilterTreeNodeModel model);
    private void AdditionalOperandsChaged(int index, CriteriaOperator item);
    public bool get_IsCollectionValues();
    protected bool get_IsTwoFieldsClause();
    protected bool get_IsInRangeClause();
    protected bool get_IsNotInRangeClause();
    protected bool get_CanAddCollectionItem();
    public IBoundProperty get_Property();
    public virtual IBoundProperty GetPropertyForEditing();
    public bool get_IsShowCollectionValueAsOnEditor();
    public object GetValue(int index);
    public virtual IBoundProperty GetFocusedFilterProperty(int elementIndex);
    public virtual List`1<ClauseType> GetAvailableOperations();
    protected List`1<ClauseType> GetAvailableOperations(IBoundProperty forProperty);
    private object GetCorrectedValueType(object value);
    protected virtual Type GetValueType();
    public virtual bool TryGetOperandValueType(Type& operandValueType);
    public virtual void AddElement();
    public virtual void DeleteElement();
    public virtual int get_LastTabElementIndex();
    public virtual void RebuildElements();
    protected void BuildOperationAndValueElements();
    protected virtual string GetOperationString();
    protected void BuildValueElements();
    protected virtual void ChangeElement(NodeEditableElement element, object value);
    protected virtual void SetOperation(object value);
    public void ChangeValue(int index, object value);
    protected string StringAdaptation(string text);
    protected string GetDisplayText(OperandProperty property);
    protected string GetDisplayText(OperandProperty firstOperand, CriteriaOperator op);
    protected virtual string GetValueScreenText(OperandProperty firstOperand, OperandValue value);
    private string GetCollectionValuesString();
    private string GetParameterName(string parameterName);
    protected virtual bool IsRequireChangeNodeType(IBoundProperty newProperty);
    protected virtual void ClauseNodeFirstOperandChanged(OperandProperty newProp, int elementIndex);
    public void UpdateAdditionalOperands();
    protected virtual OperandValue GetUpdatedOperandValue(Type editingPropertyType, CriteriaOperator operand, int valueIndex);
    protected virtual OperandValue GetUpdatedOperandValue(Type propertyType, CriteriaOperator operand);
    public virtual void ValidateAdditionalOperands();
    public OperandParameter CreateDefaultParameter();
    public OperandProperty CreateDefaultProperty();
    public sealed virtual OperandProperty get_FirstOperand();
    public void set_FirstOperand(OperandProperty value);
    public sealed virtual ClauseType get_Operation();
    public void set_Operation(ClauseType value);
    public sealed virtual IList`1<CriteriaOperator> get_AdditionalOperands();
    [EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public void AdditionalOperands_AddRange(IEnumerable`1<CriteriaOperator> operands);
    [EditorBrowsableAttribute("1")]
[DXHelpExcludeAttribute("True")]
public void AdditionalOperands_Clear();
    public virtual CriteriaOperator GetAdditionalOperand(int elementIndex);
    public virtual object GetCurrentValue(int elementIndex);
    public virtual bool get_IsList();
    public virtual string get_Text();
    public bool get_ShowOperandTypeIcon();
    public bool get_ShowParameterTypeIcon();
    public bool get_ShowTypeIcon();
    public void SwapAdditionalOperandType(int index, OperandProperty defaultProperty);
    public void SwapAdditionalOperandType(int index, OperandProperty defaultProperty, OperandParameter defaultParameter);
    protected virtual object Accept(INodeVisitor visitor);
}
public class DevExpress.XtraEditors.Filtering.ClauseNodeEx : ClauseNode {
    [CompilerGeneratedAttribute]
private object <FunctionType>k__BackingField;
    public object FunctionType { get; public set; }
    private bool IsCustomFunction { get; }
    public ClauseNodeEx(FilterTreeNodeModel model);
    public ClauseNodeEx(FilterTreeNodeModel model, object functionType);
    [CompilerGeneratedAttribute]
public sealed virtual object get_FunctionType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FunctionType(object value);
    protected virtual string GetOperationString();
    protected virtual void NodeChanged(FilterChangedAction action, Node node);
    protected virtual void SetOperation(object value);
    private void EnsureAdditionalOperandType(Func`2<Type, bool> isValidType);
    public IReadOnlyCollection`1<FunctionOperatorType> GetAvailablePredefinedFunctions();
    public IReadOnlyCollection`1<string> GetAvailableCustomFunctions();
    public IReadOnlyCollection`1<string> GetAvailableGlobalCustomFunctions();
    public bool TryGetCustomFunctionsFromAttributes(IReadOnlyCollection`1& functionNames);
    public bool TryGetFunctionImageFromAttribute(string functionName, String& image);
    public virtual void ValidateAdditionalOperands();
    protected virtual Type GetValueType();
    private bool get_IsCustomFunction();
    public virtual bool TryGetOperandValueType(Type& operandValueType);
    protected virtual OperandValue GetUpdatedOperandValue(Type editingPropertyType, CriteriaOperator operand, int valueIndex);
    private bool TryGetCustomFunctionOperandType(int valueIndex, Type& operandType);
    protected virtual string GetValueScreenText(OperandProperty firstOperand, OperandValue value);
    [CompilerGeneratedAttribute]
private bool <SetOperation>b__8_0(Type type);
}
public class DevExpress.XtraEditors.Filtering.CreateCriteriaCustomParseEventArgs : EventArgs {
    private string filterText;
    [CompilerGeneratedAttribute]
private CriteriaOperator <Criteria>k__BackingField;
    public string FilterText { get; }
    public CriteriaOperator Criteria { get; public set; }
    public CreateCriteriaCustomParseEventArgs(string filterText);
    public string get_FilterText();
    [CompilerGeneratedAttribute]
public CriteriaOperator get_Criteria();
    [CompilerGeneratedAttribute]
public void set_Criteria(CriteriaOperator value);
}
public class DevExpress.XtraEditors.Filtering.CreateCriteriaParseContextEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDisposable <Context>k__BackingField;
    public IDisposable Context { get; public set; }
    [CompilerGeneratedAttribute]
public IDisposable get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(IDisposable value);
}
public enum DevExpress.XtraEditors.Filtering.ElementType : Enum {
    public int value__;
    public static ElementType None;
    public static ElementType Property;
    public static ElementType Value;
    public static ElementType Operation;
    public static ElementType Group;
    public static ElementType FieldAction;
    public static ElementType CollectionAction;
    public static ElementType NodeRemove;
    public static ElementType NodeAction;
    public static ElementType NodeAdd;
    public static ElementType AdditionalOperandProperty;
    public static ElementType AdditionalOperandParameter;
    public static ElementType ItemCollection;
    public static ElementType AggregateOperation;
    public static ElementType AggregateProperty;
    public static ElementType Expression;
}
public class DevExpress.XtraEditors.Filtering.ExpressionNode : Node {
    private string text;
    [CompilerGeneratedAttribute]
private CriteriaOperator <Expression>k__BackingField;
    public CriteriaOperator Expression { get; internal set; }
    public string Text { get; }
    public ExpressionNode(FilterTreeNodeModel model);
    [CompilerGeneratedAttribute]
public sealed virtual CriteriaOperator get_Expression();
    [CompilerGeneratedAttribute]
internal void set_Expression(CriteriaOperator value);
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IExpressionNodeEditable.SetExpression(CriteriaOperator expression);
    public virtual string get_Text();
    public virtual void AddElement();
    public virtual void RebuildElements();
    protected virtual object Accept(INodeVisitor visitor);
}
[EditorBrowsableAttribute("1")]
public enum DevExpress.XtraEditors.Filtering.FilterChangedActionInternal : Enum {
    public int value__;
    public static FilterChangedActionInternal NodeElementsRebuilt;
    public static FilterChangedActionInternal NodeParentChanged;
    public static FilterChangedActionInternal NodeAdded;
    public static FilterChangedActionInternal NodeRemoved;
    public static FilterChangedActionInternal RootNodeReplaced;
}
[EditorBrowsableAttribute("1")]
public class DevExpress.XtraEditors.Filtering.FilterControlFocusInfo : ValueType {
    public Node Node;
    public int ElementIndex;
    public CriteriaOperator AdditionalOperand { get; }
    public IBoundProperty FocusedFilterProperty { get; }
    public ElementType FocusedElementType { get; }
    public FilterControlFocusInfo(Node node, int elementIndex);
    public static bool op_Equality(FilterControlFocusInfo fi1, FilterControlFocusInfo fi2);
    public static bool op_Inequality(FilterControlFocusInfo fi1, FilterControlFocusInfo fi2);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(FilterControlFocusInfo otherInfo);
    public virtual bool Equals(object obj);
    public FilterControlFocusInfo OnRight();
    public FilterControlFocusInfo OnLeft();
    public FilterControlFocusInfo OnUp();
    public FilterControlFocusInfo OnDown();
    public void ChangeElement(ElementType elementType);
    public void ChangeElement(object value);
    public CriteriaOperator get_AdditionalOperand();
    public IBoundProperty get_FocusedFilterProperty();
    public ElementType get_FocusedElementType();
    public object GetCurrentValue();
}
public class DevExpress.XtraEditors.Filtering.FilterControlNodesFactory : object {
    private FilterTreeNodeModel model;
    protected internal FilterTreeNodeModel Model { get; }
    public FilterControlNodesFactory(FilterTreeNodeModel model);
    protected internal FilterTreeNodeModel get_Model();
    public sealed virtual IClauseNode Create(ClauseType type, OperandProperty firstOperand, ICollection`1<CriteriaOperator> operands);
    public sealed virtual IGroupNode Create(GroupType type, ICollection`1<INode> subNodes);
    protected void SetClauseNodeValues(ClauseNode node, ClauseType type, OperandProperty firstOperand, ICollection`1<CriteriaOperator> operands);
    public sealed virtual IAggregateNode Create(OperandProperty firstOperand, Aggregate aggregate, OperandProperty aggregateOperand, ClauseType operation, ICollection`1<CriteriaOperator> operands, INode conditionNode);
    public sealed virtual IExpressionNode Create(CriteriaOperator expression);
}
public abstract class DevExpress.XtraEditors.Filtering.FilterTreeNodeModel : object {
    private FilterControlFocusInfo focusInfo;
    private FilterControlAllowAggregateEditing allowAggregateEditing;
    private bool showGroupCommandsIcon;
    private bool sortProperties;
    private bool showIsNullOperatorsForStrings;
    private int maxOperandsCount;
    private IBoundProperty defaultProperty;
    private GroupNode rootNode;
    private object sourceControl;
    private IFilteredComponent filterSourceControl;
    private bool showOperandTypeIcon;
    private int updaterCounter;
    private FilterCriteriaSubscribers filterCriteriaSubscribers;
    private FilterModelPickManager pickManager;
    private SourceControlNotifier notifier;
    private IBoundPropertyCollection filterProperties;
    [CompilerGeneratedAttribute]
private EventHandler`1<CreateCriteriaParseContextEventArgs> CreateCriteriaParseContext;
    [CompilerGeneratedAttribute]
private EventHandler`1<CreateCriteriaCustomParseEventArgs> CreateCriteriaCustomParse;
    [CompilerGeneratedAttribute]
private NotifyControlDelegate OnNotifyControl;
    private bool werePropertiesCreatedByModel;
    private INodesFactory factoryCore;
    [CompilerGeneratedAttribute]
private bool <AllowCreateDefaultClause>k__BackingField;
    public FilterModelPickManager PickManager { get; }
    public IBoundPropertyCollection FilterProperties { get; public set; }
    public bool IsUpdating { get; }
    public bool ShowIsNullOperatorsForStrings { get; public set; }
    public bool ShowOperandTypeIcon { get; public set; }
    public IFilterParametersOwner ParametersOwner { get; }
    public object SourceControl { get; public set; }
    public CriteriaOperator FilterCriteria { get; public set; }
    private IFilteredComponent FilterSourceControl { get; private set; }
    public GroupNode RootNode { get; public set; }
    public FilterControlFocusInfo FocusInfo { get; public set; }
    public FilterControlAllowAggregateEditing AllowAggregateEditing { get; public set; }
    public bool SortProperties { get; public set; }
    public bool ShowGroupCommandsIcon { get; public set; }
    public int MaxOperandsCount { get; public set; }
    protected INodesFactory Factory { get; }
    public string FilterString { get; public set; }
    public bool AllowCreateDefaultClause { get; public set; }
    protected bool SupportCustomFunctions { get; }
    protected bool SupportExpressions { get; }
    public bool ShowParameterTypeIcon { get; }
    public bool CanAddParameters { get; }
    public sealed virtual void Dispose();
    protected virtual FilterModelPickManager CreateFilterModelPickManager();
    public FilterModelPickManager get_PickManager();
    [CompilerGeneratedAttribute]
public void add_CreateCriteriaParseContext(EventHandler`1<CreateCriteriaParseContextEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CreateCriteriaParseContext(EventHandler`1<CreateCriteriaParseContextEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CreateCriteriaCustomParse(EventHandler`1<CreateCriteriaCustomParseEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CreateCriteriaCustomParse(EventHandler`1<CreateCriteriaCustomParseEventArgs> value);
    public abstract virtual void SetParent(IBoundProperty property, IBoundProperty parent);
    protected abstract virtual IBoundPropertyCollection CreateIBoundPropertyCollection();
    public virtual Type GetFunctionType(string name);
    public List`1<ITreeSelectableItem> GetTreeItemsByProperties();
    public IBoundPropertyCollection get_FilterProperties();
    public void set_FilterProperties(IBoundPropertyCollection value);
    public List`1<ITreeSelectableItem> GetTreeItemsByProperties(IEnumerable properties);
    public bool get_IsUpdating();
    public void BeginUpdate();
    public void CancelUpdate();
    public void EndUpdate(FilterChangedAction action);
    public void EndUpdate(FilterChangedAction action, Node node);
    public void EndUpdate();
    public virtual bool DoesAllowItemCollectionEditor(IBoundProperty property);
    [CompilerGeneratedAttribute]
public void add_OnNotifyControl(NotifyControlDelegate value);
    [CompilerGeneratedAttribute]
public void remove_OnNotifyControl(NotifyControlDelegate value);
    private void NotifyControl(FilterChangedEventArgs info);
    public abstract virtual IBoundProperty CreateProperty(object dataSource, string dataMember, string displayName, bool isList, PropertyDescriptor property);
    public bool get_ShowIsNullOperatorsForStrings();
    public void set_ShowIsNullOperatorsForStrings(bool value);
    protected void RecursiveVisitor(Node node, Action`1<Node> action);
    public void ModelChanged(FilterChangedEventArgs info);
    protected internal abstract virtual FilterColumnClauseClass GetClauseClass(IBoundProperty property);
    public virtual ClauseType GetDefaultOperation(IBoundPropertyCollection properties, OperandProperty operandProperty);
    public bool IsValidClause(IBoundProperty property, ClauseType clause);
    public virtual bool IsValidClause(ClauseType clause, FilterColumnClauseClass clauseClass);
    public bool IsValidFunction(IBoundProperty property, FunctionOperatorType functionType);
    public virtual bool IsValidFunction(FunctionOperatorType functionType, FilterColumnClauseClass clauseClass);
    public bool IsValidFunction(IBoundProperty property, ICustomFunctionOperator function);
    public virtual bool IsValidFunction(ICustomFunctionOperator function, Type propertyType);
    public virtual bool IsValidFunction(FunctionOperatorType functionType, Type propertyType);
    public bool DoAddElement();
    public bool DoSwapPropertyValue();
    public virtual void AddParameter(string parameterName, Type parameterType);
    public virtual bool get_ShowOperandTypeIcon();
    public virtual void set_ShowOperandTypeIcon(bool value);
    public virtual IFilterParametersOwner get_ParametersOwner();
    public object get_SourceControl();
    public void set_SourceControl(object value);
    private void FilterTreeNodeModel_Initialized(object sender, EventArgs e);
    public virtual CriteriaOperator ToCriteria(INode node);
    private void UpdateFilterSourceControl(bool resetCriteria);
    private static void RemoveInterfaceProperties(List`1<IBoundProperty> list, Type interfaceType);
    private void OnSourceControlPropertiesChanged();
    public CriteriaOperator get_FilterCriteria();
    public void set_FilterCriteria(CriteriaOperator value);
    private IFilteredComponent get_FilterSourceControl();
    private void set_FilterSourceControl(IFilteredComponent value);
    protected abstract virtual void SetFilterColumnsCollection(IBoundPropertyCollection propertyCollection);
    private void CreateFilterColumnCollection();
    private void OnSourceControlChanged();
    public void ApplyFilter();
    private void SourceControl_DataSourceChanged(object sender, EventArgs e);
    public GroupNode get_RootNode();
    public void set_RootNode(GroupNode value);
    public IBoundProperty GetDefaultProperty();
    public void SetDefaultProperty(IBoundProperty property);
    public FilterControlFocusInfo get_FocusInfo();
    public void set_FocusInfo(FilterControlFocusInfo value);
    public FilterControlAllowAggregateEditing get_AllowAggregateEditing();
    public void set_AllowAggregateEditing(FilterControlAllowAggregateEditing value);
    public bool get_SortProperties();
    public void set_SortProperties(bool value);
    public bool get_ShowGroupCommandsIcon();
    public void set_ShowGroupCommandsIcon(bool value);
    public int get_MaxOperandsCount();
    public void set_MaxOperandsCount(int value);
    protected INodesFactory get_Factory();
    protected virtual INodesFactory CreateNodesFactory();
    protected virtual Node CreateNodeFromCriteria(CriteriaOperator criteria);
    public Node CreateNodeFromCriteria(CriteriaOperator criteria, List`1<CriteriaOperator> skippedCriteriaOperator);
    public GroupNode CreateGroupNode(GroupNode parent);
    public ExpressionNode CreateExpressionNode(GroupNode parent);
    public GroupNode AddGroup(GroupNode parent);
    public ExpressionNode AddExpression(GroupNode parent);
    public bool DoPasteElement(string clipboardText);
    public void RebuildElements();
    private void RebuildElements(Node node);
    protected virtual void ValidateAdditionalOperands(IClauseNode node);
    protected virtual ClauseNode CreateDefaultClauseNode(IBoundProperty property);
    protected virtual ClauseNode CreateDefaultClauseNode(IBoundProperty property, IBoundPropertyCollection currentFilterProperties);
    public abstract virtual void OnVisualChange(FilterChangedActionInternal action, Node node);
    public CriteriaOperator CriteriaParse(string value);
    protected virtual CriteriaOperator CriteriaFromString(string value);
    public string CriteriaSerialize(CriteriaOperator criteria);
    protected virtual string CriteriaToString(CriteriaOperator criteria);
    protected internal virtual string ExpressionToString(CriteriaOperator criteria);
    public string get_FilterString();
    public void set_FilterString(string value);
    public virtual ClauseNode CreateDefaultClauseNode(IBoundPropertyCollection currentFilterProperties);
    [EditorBrowsableAttribute("1")]
public virtual Node CreateCriteriaByDefaultProperty();
    [CompilerGeneratedAttribute]
public bool get_AllowCreateDefaultClause();
    [CompilerGeneratedAttribute]
public void set_AllowCreateDefaultClause(bool value);
    protected virtual bool get_SupportCustomFunctions();
    protected virtual bool get_SupportExpressions();
    public void CreateTree(CriteriaOperator criteria);
    public virtual ClauseNode CreateClauseNode();
    public virtual GroupNode CreateGroupNode();
    public virtual AggregateNode CreateAggregateNode();
    public virtual ExpressionNode CreateExpressionNode();
    public List`1<IFilterParameter> GetParametersByType(Type type);
    protected virtual IList`1<IFilterParameter> GetParameters();
    public bool get_ShowParameterTypeIcon();
    public virtual bool get_CanAddParameters();
    protected virtual void OnFocusInfoChanged();
    public abstract virtual string GetLocalizedStringForFilterEmptyParameter();
    public abstract virtual string GetLocalizedStringForFilterEmptyEnter();
    public abstract virtual string GetLocalizedStringForFilterClauseBetweenAnd();
    public virtual string GetLocalizedStringForFilterClauseInRangeFrom();
    public virtual string GetLocalizedStringForFilterClauseInRangeTo();
    public abstract virtual string GetLocalizedStringForFilterEmptyValue();
    public virtual string GetLocalizedStringForFilterEmptyExpression();
    public abstract virtual string GetMenuStringByType(GroupType type);
    public abstract virtual string GetMenuStringByType(Aggregate type);
    public abstract virtual string GetMenuStringByType(ClauseType type);
    public virtual string GetMenuStringByFunctionType(object functionType);
    public virtual bool TryGetValueScreenText(ClauseNode node, object value, int elementIndex, String& displayValue);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_0(CriteriaOperator op);
    [CompilerGeneratedAttribute]
private void <ModelChanged>b__53_0(Node child);
    [CompilerGeneratedAttribute]
private void <ModelChanged>b__53_1(Node child);
}
public class DevExpress.XtraEditors.Filtering.GroupNode : Node {
    private GroupType _NodeType;
    private ObservableList`1<INode> _SubNodes;
    public GroupType NodeType { get; public set; }
    public IList`1<INode> SubNodes { get; }
    public string Text { get; }
    public GroupNode(FilterTreeNodeModel model);
    public sealed virtual GroupType get_NodeType();
    public void set_NodeType(GroupType value);
    public sealed virtual IList`1<INode> get_SubNodes();
    public int GetHighestLevelOfChildren();
    public virtual void GetAbsoluteList(List`1<Node> list);
    public Node GetNodeByIndex(int index);
    public void AddNode(INode node);
    public virtual IList`1<INode> GetChildren();
    public virtual void AddElement();
    public virtual void DeleteElement();
    public virtual void RebuildElements();
    protected virtual void ChangeElement(NodeEditableElement element, object value);
    protected internal void ReplaceClauseNodes(ClauseNode oldNode, ClauseNode newNode);
    public virtual string get_Text();
    protected virtual object Accept(INodeVisitor visitor);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.XtraEditors.Filtering.IBoundPropertyCollection {
    public IBoundProperty Item { get; }
    public IBoundProperty Item { get; }
    public int Count { get; }
    public abstract virtual IBoundProperty get_Item(int index);
    public abstract virtual IBoundProperty get_Item(string fieldName);
    public abstract virtual IBoundPropertyCollection CreateChildrenProperties(IBoundProperty listProperty);
    public abstract virtual int get_Count();
    public abstract virtual void Clear();
    public abstract virtual void Add(IBoundProperty property);
    public abstract virtual string GetDisplayPropertyName(OperandProperty property, string fullPath);
    public abstract virtual string GetValueScreenText(OperandProperty property, object value);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class DevExpress.XtraEditors.Filtering.IBoundPropertyCollectionExtension : object {
    [ExtensionAttribute]
private static IBoundProperty GetDefaultColumnOnCreate(IBoundPropertyCollection self, IBoundProperty property);
    [ExtensionAttribute]
public static OperandProperty CreateDefaultProperty(IBoundPropertyCollection self, IBoundProperty property);
    [ExtensionAttribute]
public static IBoundProperty GetProperty(IBoundPropertyCollection self, OperandProperty property);
}
[EditorBrowsableAttribute("1")]
public static class DevExpress.XtraEditors.Filtering.IBoundPropertyDefaults : object {
    public static FilterColumnClauseClass GetDefaultClauseClass(IBoundProperty property);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class DevExpress.XtraEditors.Filtering.IBoundPropertyExtension : object {
    private static char ColumnSeparateChar;
    [ExtensionAttribute]
public static string GetFullName(IBoundProperty self);
    [ExtensionAttribute]
public static string GetFullNameWithLists(IBoundProperty self);
    [ExtensionAttribute]
public static string GetFullDisplayName(IBoundProperty self);
    [ExtensionAttribute]
public static string GetFullDisplayNameWithLists(IBoundProperty self);
    [ExtensionAttribute]
public static int GetLevel(IBoundProperty self);
}
public interface DevExpress.XtraEditors.Filtering.IFilteredComponent {
    public abstract virtual IBoundPropertyCollection CreateFilterColumnCollection();
}
public interface DevExpress.XtraEditors.Filtering.IFilterParameter {
    public string Name { get; }
    public Type Type { get; }
    public abstract virtual string get_Name();
    public abstract virtual Type get_Type();
}
[EditorBrowsableAttribute("1")]
public interface DevExpress.XtraEditors.Filtering.IFilterParametersOwner {
    public IList`1<IFilterParameter> Parameters { get; }
    public bool CanAddParameters { get; }
    public abstract virtual IList`1<IFilterParameter> get_Parameters();
    public abstract virtual bool get_CanAddParameters();
    public abstract virtual void AddParameter(string name, Type type);
}
public abstract class DevExpress.XtraEditors.Filtering.Node : object {
    private static IList`1<INode> emptyChildren;
    private FilterTreeNodeModel model;
    private Node parentNode;
    private List`1<NodeEditableElement> elements;
    private IBoundPropertyCollection filterProperties;
    [CompilerGeneratedAttribute]
private OnElementsChangedDelegate ElementsChanged;
    public int Index { get; }
    public Node RootNode { get; }
    public int Level { get; }
    protected FilterControlFocusInfo FocusInfo { get; protected set; }
    public List`1<NodeEditableElement> Elements { get; }
    public int LastTabElementIndex { get; }
    public string Text { get; }
    public FilterTreeNodeModel Model { get; }
    public IBoundPropertyCollection FilterProperties { get; }
    public Node ParentNode { get; public set; }
    private IGroupNode DevExpress.Data.Filtering.Helpers.INode.ParentNode { get; }
    protected Node(FilterTreeNodeModel model);
    private static Node();
    internal ObservableList`1<INode> CreateObservableListForChildNodes();
    public List`1<Node> GetAbsoluteList();
    public virtual void GetAbsoluteList(List`1<Node> list);
    public int get_Index();
    public Node get_RootNode();
    public int get_Level();
    public virtual IList`1<INode> GetChildren();
    protected FilterControlFocusInfo get_FocusInfo();
    protected void set_FocusInfo(FilterControlFocusInfo value);
    public List`1<NodeEditableElement> get_Elements();
    [CompilerGeneratedAttribute]
public void add_ElementsChanged(OnElementsChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_ElementsChanged(OnElementsChangedDelegate value);
    protected void RaiseElementAddOrDelete();
    public abstract virtual void AddElement();
    public virtual void DeleteElement();
    public virtual int get_LastTabElementIndex();
    public virtual IBoundProperty GetFocusedFilterProperty(int elementIndex);
    [EditorBrowsableAttribute("1")]
public void ChangeElement(int elementIndex, object value);
    [EditorBrowsableAttribute("1")]
public void ChangeElement(ElementType elementType);
    [EditorBrowsableAttribute("1")]
public void ChangeElement(ElementType elementType, object value);
    protected NodeEditableElement GetElement(int elementIndex);
    protected NodeEditableElement GetElement(ElementType elementType);
    protected virtual void ChangeElement(NodeEditableElement element, object value);
    public virtual void RebuildElements();
    [ObsoleteAttribute("Obsolete method. No need to update label infos manually.")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void RecalcLabelInfo();
    protected NodeEditableElement AddEditableElement(ElementType elementType, string text);
    protected void NodeChanged(FilterChangedAction action);
    protected virtual void NodeChanged(FilterChangedAction action, Node node);
    public abstract virtual string get_Text();
    public virtual CriteriaOperator GetAdditionalOperand(int elementIndex);
    public virtual object GetCurrentValue(int elementIndex);
    [ObsoleteAttribute("Use FilterControl.FilterCriteria or FilterControl.ToCriteria instead")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public CriteriaOperator ToCriteria();
    public FilterTreeNodeModel get_Model();
    public IBoundPropertyCollection get_FilterProperties();
    protected virtual IBoundPropertyCollection GetChildrenFilterProperties();
    public Node get_ParentNode();
    public void set_ParentNode(Node value);
    private sealed virtual override IGroupNode DevExpress.Data.Filtering.Helpers.INode.get_ParentNode();
    public Node GetPrevNode();
    public Node GetNextNode();
    private List`1<Node> GetFlatNodeList();
    private void CollectFlatNodeList(List`1<Node> list);
    protected internal void SetParentNode(INode node);
    private void ClearFilterProperties();
    [EditorBrowsableAttribute("1")]
public void ResetFilterProperties();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.INode.SetParentNode(IGroupNode node);
    private sealed virtual override object DevExpress.Data.Filtering.Helpers.INode.Accept(INodeVisitor visitor);
    protected abstract virtual object Accept(INodeVisitor visitor);
    [CompilerGeneratedAttribute]
private void <CreateObservableListForChildNodes>b__5_0(int index, INode item);
    [CompilerGeneratedAttribute]
private void <CreateObservableListForChildNodes>b__5_1(int index, INode item);
}
public class DevExpress.XtraEditors.Filtering.NodeEditableElement : object {
    private Node node;
    private ElementType elementType;
    private string text;
    private string textBefore;
    private string textAfter;
    private bool isEmpty;
    private int valueIndex;
    public ElementType ElementType { get; }
    public string Text { get; }
    public Node Node { get; }
    public int Index { get; }
    public string TextBefore { get; public set; }
    public string TextAfter { get; public set; }
    public bool IsEmpty { get; public set; }
    public int ValueIndex { get; public set; }
    public bool IsValueElement { get; }
    public CriteriaOperator AdditionalOperand { get; }
    public NodeEditableElement(Node node, ElementType elementType, string text);
    public virtual string ToString();
    public ElementType get_ElementType();
    public string get_Text();
    public Node get_Node();
    public int get_Index();
    public string get_TextBefore();
    public void set_TextBefore(string value);
    public string get_TextAfter();
    public void set_TextAfter(string value);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    public int get_ValueIndex();
    public void set_ValueIndex(int value);
    public bool get_IsValueElement();
    public FilterControlFocusInfo CreateFocusInfo();
    public CriteriaOperator get_AdditionalOperand();
}
public class DevExpress.XtraEditors.Helpers.DateFilterResult : object {
    private static FilterDateType DefaultFilterType;
    private FilterDateType filterType;
    private string filterDisplayText;
    private DateTime startDate;
    private DateTime endDate;
    private CriteriaOperator filterCriteria;
    private List`1<CriteriaOperator> userFilters;
    public List`1<CriteriaOperator> UserFilters { get; }
    public FilterDateType FilterType { get; internal set; }
    public string FilterDisplayText { get; internal set; }
    public DateTime StartDate { get; internal set; }
    public DateTime EndDate { get; internal set; }
    public CriteriaOperator FilterCriteria { get; public set; }
    public DateFilterResult(FilterDateType filterType);
    public List`1<CriteriaOperator> get_UserFilters();
    public FilterDateType get_FilterType();
    internal void set_FilterType(FilterDateType value);
    public string get_FilterDisplayText();
    internal void set_FilterDisplayText(string value);
    public DateTime get_StartDate();
    internal void set_StartDate(DateTime value);
    public DateTime get_EndDate();
    internal void set_EndDate(DateTime value);
    public CriteriaOperator get_FilterCriteria();
    public void set_FilterCriteria(CriteriaOperator value);
    [EditorBrowsableAttribute("1")]
public void SetDates(DateTime startDate, DateTime endDate);
}
public interface DevExpress.XtraEditors.IRangeControl {
    public Color BorderColor { get; }
    public Color RulerColor { get; }
    public Color LabelColor { get; }
    public Matrix NormalTransform { get; }
    public double VisibleRangeStartPosition { get; }
    public double VisibleRangeWidth { get; }
    public RangeControlRange SelectedRange { get; public set; }
    public bool AnimateOnDataChange { get; public set; }
    public IRangeControlClient Client { get; public set; }
    public abstract virtual int CalcX(double normalizedValue);
    public abstract virtual Color get_BorderColor();
    public abstract virtual Color get_RulerColor();
    public abstract virtual Color get_LabelColor();
    public abstract virtual Matrix get_NormalTransform();
    public abstract virtual double get_VisibleRangeStartPosition();
    public abstract virtual double get_VisibleRangeWidth();
    public abstract virtual RangeControlRange get_SelectedRange();
    public abstract virtual void set_SelectedRange(RangeControlRange value);
    public abstract virtual void CenterSelectedRange();
    public abstract virtual bool get_AnimateOnDataChange();
    public abstract virtual void set_AnimateOnDataChange(bool value);
    public abstract virtual bool IsValidValue(object value);
    public abstract virtual void OnRangeMinimumChanged(object range);
    public abstract virtual void OnRangeMaximumChanged(object range);
    public abstract virtual double ConstrainRangeMinimum(double value);
    public abstract virtual double ConstrainRangeMaximum(double value);
    public abstract virtual IRangeControlClient get_Client();
    public abstract virtual void set_Client(IRangeControlClient value);
}
public interface DevExpress.XtraEditors.IRangeControlClient {
    public int RangeBoxTopIndent { get; }
    public int RangeBoxBottomIndent { get; }
    public bool IsCustomRuler { get; }
    public object RulerDelta { get; }
    public double NormalizedRulerDelta { get; }
    public bool IsValid { get; }
    public string InvalidText { get; }
    public abstract virtual void DrawContent(RangeControlPaintEventArgs e);
    public abstract virtual Rectangle CalculateSelectionBounds(RangeControlPaintEventArgs e, Rectangle rect);
    public abstract virtual bool DrawRuler(RangeControlPaintEventArgs e);
    public abstract virtual void DrawSelection(RangeControlPaintEventArgs e);
    public abstract virtual int get_RangeBoxTopIndent();
    public abstract virtual int get_RangeBoxBottomIndent();
    public abstract virtual void ValidateRange(NormalizedRangeInfo info);
    public abstract virtual double GetNormalizedValue(object value);
    public abstract virtual object GetValue(double normalizedValue);
    public abstract virtual bool get_IsCustomRuler();
    public abstract virtual List`1<object> GetRuler(RulerInfoArgs e);
    public abstract virtual object get_RulerDelta();
    public abstract virtual double get_NormalizedRulerDelta();
    public abstract virtual string RulerToString(int ruleIndex);
    public abstract virtual bool SupportOrientation(RangeControlClientOrientation orientation);
    public abstract virtual void OnRangeChanged(object rangeMinimum, object rangeMaximum);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RangeChanged(ClientRangeChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RangeChanged(ClientRangeChangedEventHandler value);
    public abstract virtual object GetOptions();
    public abstract virtual bool get_IsValid();
    public abstract virtual string get_InvalidText();
    public abstract virtual void UpdateHotInfo(RangeControlHitInfo hitInfo);
    public abstract virtual void UpdatePressedInfo(RangeControlHitInfo hitInfo);
    public abstract virtual void OnClick(RangeControlHitInfo hitInfo);
    public abstract virtual void OnRangeControlChanged(IRangeControl rangeControl);
    public abstract virtual bool IsValidType(Type type);
    public abstract virtual double ValidateScale(double newScale);
    public abstract virtual void OnResize();
    public abstract virtual void Calculate(Rectangle contentRect);
    public abstract virtual string ValueToString(double normalizedValue);
}
public interface DevExpress.XtraEditors.IRangeControlClientExtension {
    public abstract virtual object NativeValue(double normalizedValue);
}
public interface DevExpress.XtraEditors.IRangeControlClientPainter {
    public bool ShouldRotate { get; }
    public abstract virtual bool get_ShouldRotate();
}
public interface DevExpress.XtraEditors.IRangeControlDiscreteClient {
    public abstract virtual double GetNormalizedMinValue(object minValue);
    public abstract virtual double GetNormalizedMaxValue(object maxValue);
    public abstract virtual object GetMinValue(double normalizedMinValue);
    public abstract virtual object GetMaxValue(double normalizedMaxValue);
    public abstract virtual string MinValueToString(double normalizedMinValue);
    public abstract virtual string MaxValueToString(double normalizedMaxValue);
}
public class DevExpress.XtraEditors.NormalizedRangeInfo : object {
    [CompilerGeneratedAttribute]
private RangeControlValidationType <Type>k__BackingField;
    private RangeControlNormalizedRange range;
    [CompilerGeneratedAttribute]
private ChangedBoundType <ChangedBound>k__BackingField;
    public RangeControlValidationType Type { get; public set; }
    public RangeControlNormalizedRange Range { get; }
    public ChangedBoundType ChangedBound { get; public set; }
    public NormalizedRangeInfo(double minimum, double maximum);
    public NormalizedRangeInfo(double minimum, double maximum, RangeControlValidationType type);
    public NormalizedRangeInfo(double minimum, double maximum, RangeControlValidationType type, ChangedBoundType changedBound);
    [CompilerGeneratedAttribute]
public RangeControlValidationType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(RangeControlValidationType value);
    public RangeControlNormalizedRange get_Range();
    [CompilerGeneratedAttribute]
public ChangedBoundType get_ChangedBound();
    [CompilerGeneratedAttribute]
public void set_ChangedBound(ChangedBoundType value);
}
public enum DevExpress.XtraEditors.RangeControlClientOrientation : Enum {
    public int value__;
    public static RangeControlClientOrientation Horizontal;
    public static RangeControlClientOrientation Vertical;
}
public class DevExpress.XtraEditors.RangeControlClientRangeEventArgs : RangeControlRangeEventArgs {
    [CompilerGeneratedAttribute]
private bool <InvalidateContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MakeRangeVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimatedViewport>k__BackingField;
    public bool InvalidateContent { get; public set; }
    public bool MakeRangeVisible { get; public set; }
    public bool AnimatedViewport { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_InvalidateContent();
    [CompilerGeneratedAttribute]
public void set_InvalidateContent(bool value);
    [CompilerGeneratedAttribute]
public bool get_MakeRangeVisible();
    [CompilerGeneratedAttribute]
public void set_MakeRangeVisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimatedViewport();
    [CompilerGeneratedAttribute]
public void set_AnimatedViewport(bool value);
}
public class DevExpress.XtraEditors.RangeControlHitInfo : object {
    public static Point InvalidPoint;
    public static RangeControlHitInfo Empty;
    [CompilerGeneratedAttribute]
private bool <AllowSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ObjectBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <HitPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeControlHitTest <HitTest>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ClientHitTest>k__BackingField;
    [CompilerGeneratedAttribute]
private object <HitObject>k__BackingField;
    public bool AllowSelection { get; public set; }
    public Rectangle ObjectBounds { get; public set; }
    public Point HitPoint { get; public set; }
    public RangeControlHitTest HitTest { get; public set; }
    public object ClientHitTest { get; public set; }
    public object HitObject { get; public set; }
    public RangeControlHitInfo(Point pt);
    public RangeControlHitInfo(Point pt, bool allowSelection);
    private static RangeControlHitInfo();
    [CompilerGeneratedAttribute]
public bool get_AllowSelection();
    [CompilerGeneratedAttribute]
public void set_AllowSelection(bool value);
    [CompilerGeneratedAttribute]
public Rectangle get_ObjectBounds();
    [CompilerGeneratedAttribute]
public void set_ObjectBounds(Rectangle value);
    [CompilerGeneratedAttribute]
public Point get_HitPoint();
    [CompilerGeneratedAttribute]
public void set_HitPoint(Point value);
    [CompilerGeneratedAttribute]
public RangeControlHitTest get_HitTest();
    [CompilerGeneratedAttribute]
public void set_HitTest(RangeControlHitTest value);
    [CompilerGeneratedAttribute]
public object get_ClientHitTest();
    [CompilerGeneratedAttribute]
public void set_ClientHitTest(object value);
    [CompilerGeneratedAttribute]
public object get_HitObject();
    [CompilerGeneratedAttribute]
public void set_HitObject(object value);
    public bool ContainsSet(Rectangle rect, RangeControlHitTest hitTest);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public enum DevExpress.XtraEditors.RangeControlHitTest : Enum {
    public int value__;
    public static RangeControlHitTest None;
    public static RangeControlHitTest MinRangeThumb;
    public static RangeControlHitTest MaxRangeThumb;
    public static RangeControlHitTest RangeBox;
    public static RangeControlHitTest ScrollBarThumb;
    public static RangeControlHitTest ViewPort;
    public static RangeControlHitTest ScrollBarArea;
    public static RangeControlHitTest LeftScaleThumb;
    public static RangeControlHitTest RightScaleThumb;
    public static RangeControlHitTest RangeIndicator;
    public static RangeControlHitTest Client;
}
public class DevExpress.XtraEditors.RangeControlNormalizedRange : object {
    [CompilerGeneratedAttribute]
private IRangeControl <Owner>k__BackingField;
    private double minimum;
    private double maximum;
    public IRangeControl Owner { get; public set; }
    public double Minimum { get; public set; }
    public double Maximum { get; public set; }
    [CompilerGeneratedAttribute]
public IRangeControl get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(IRangeControl value);
    public double get_Minimum();
    public void set_Minimum(double value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void InternalSetMinimum(double value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void InternalSetMaximum(double value);
    protected virtual double ConstrainMinimum(double value);
    protected virtual void OnMinimumChanged();
    public double get_Maximum();
    public void set_Maximum(double value);
    protected virtual double ConstrainMaximum(double value);
    protected virtual void OnMaximumChanged();
}
public class DevExpress.XtraEditors.RangeControlPaintEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IRangeControl <RangeControl>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphicsCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ContentBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <RulerBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeControlHitInfo <HotInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeControlHitInfo <PressedInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualRangeMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualRangeMaximum>k__BackingField;
    public IRangeControl RangeControl { get; public set; }
    public IGraphicsCache Cache { get; public set; }
    public Graphics Graphics { get; }
    public Rectangle Bounds { get; public set; }
    public Rectangle ContentBounds { get; public set; }
    public Rectangle RulerBounds { get; public set; }
    public Color BorderColor { get; }
    public Color RulerColor { get; }
    public Color LabelColor { get; }
    public Matrix NormalTransform { get; }
    public RangeControlHitInfo HotInfo { get; public set; }
    public RangeControlHitInfo PressedInfo { get; public set; }
    public double ActualRangeMinimum { get; public set; }
    public double ActualRangeMaximum { get; public set; }
    [CompilerGeneratedAttribute]
public IRangeControl get_RangeControl();
    [CompilerGeneratedAttribute]
public void set_RangeControl(IRangeControl value);
    [CompilerGeneratedAttribute]
public IGraphicsCache get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(IGraphicsCache value);
    public virtual Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(Rectangle value);
    [CompilerGeneratedAttribute]
public Rectangle get_ContentBounds();
    [CompilerGeneratedAttribute]
public void set_ContentBounds(Rectangle value);
    [CompilerGeneratedAttribute]
public Rectangle get_RulerBounds();
    [CompilerGeneratedAttribute]
public void set_RulerBounds(Rectangle value);
    public int CalcX(double normalizedValue);
    public Color get_BorderColor();
    public Color get_RulerColor();
    public Color get_LabelColor();
    public Matrix get_NormalTransform();
    [CompilerGeneratedAttribute]
public RangeControlHitInfo get_HotInfo();
    [CompilerGeneratedAttribute]
public void set_HotInfo(RangeControlHitInfo value);
    [CompilerGeneratedAttribute]
public RangeControlHitInfo get_PressedInfo();
    [CompilerGeneratedAttribute]
public void set_PressedInfo(RangeControlHitInfo value);
    [CompilerGeneratedAttribute]
public double get_ActualRangeMinimum();
    [CompilerGeneratedAttribute]
public void set_ActualRangeMinimum(double value);
    [CompilerGeneratedAttribute]
public double get_ActualRangeMaximum();
    [CompilerGeneratedAttribute]
public void set_ActualRangeMaximum(double value);
}
public enum DevExpress.XtraEditors.RangeControlParts : Enum {
    public int value__;
    public static RangeControlParts ScrollArea;
    public static RangeControlParts Range;
    public static RangeControlParts MinRangeThumb;
    public static RangeControlParts MaxRangeThumb;
    public static RangeControlParts MinRangeFlag;
    public static RangeControlParts MaxRangeFlag;
    public static RangeControlParts MinRangeFlagLine;
    public static RangeControlParts MaxRangeFlagLine;
    public static RangeControlParts MinFlagText;
    public static RangeControlParts MaxFlagText;
    public static RangeControlParts Ruler;
    public static RangeControlParts LeftOutOfRangeArea;
    public static RangeControlParts RightOutOfRangeArea;
    public static RangeControlParts ScrollBarArea;
    public static RangeControlParts ScrollBarThumb;
    public static RangeControlParts RangeIndicatorBounds;
    public static RangeControlParts SelectionBounds;
    public static RangeControlParts LeftScaleThumbBounds;
    public static RangeControlParts RightScaleThumbBounds;
    public static RangeControlParts DrawRange;
    public static RangeControlParts ClientArea;
}
public class DevExpress.XtraEditors.RangeControlRange : object {
    [CompilerGeneratedAttribute]
private IRangeControl <Owner>k__BackingField;
    internal object rangeMinimum;
    internal object rangeMaximum;
    public IRangeControl Owner { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("DevExpress.Utils.Editors.UIObjectEditor, DevExpress.Data.Desktop.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Utils.Editors.ObjectEditorTypeConverter")]
public object Minimum { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("DevExpress.Utils.Editors.UIObjectEditor, DevExpress.Data.Desktop.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Utils.Editors.ObjectEditorTypeConverter")]
public object Maximum { get; public set; }
    public RangeControlRange(object minimum, object maximum);
    [CompilerGeneratedAttribute]
public IRangeControl get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(IRangeControl value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void InternalSetMinimum(object value);
    public object get_Minimum();
    public void set_Minimum(object value);
    protected virtual void OnRangeMinimumChanged();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void InternalSetMaximum(object value);
    public object get_Maximum();
    public void set_Maximum(object value);
    protected virtual void OnRangeMaximumChanged();
    public bool ShouldSerialize();
    public void Reset();
}
public class DevExpress.XtraEditors.RangeControlRangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private RangeControlRange <Range>k__BackingField;
    public RangeControlRange Range { get; public set; }
    [CompilerGeneratedAttribute]
public RangeControlRange get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(RangeControlRange value);
}
public enum DevExpress.XtraEditors.RangeControlSelectionType : Enum {
    public int value__;
    public static RangeControlSelectionType Thumb;
    public static RangeControlSelectionType Flag;
    public static RangeControlSelectionType ThumbAndFlag;
}
public enum DevExpress.XtraEditors.RangeControlValidationType : Enum {
    public int value__;
    public static RangeControlValidationType Range;
    public static RangeControlValidationType Selection;
}
public class DevExpress.XtraEditors.RangeControlViewInfoCalcBase : object {
    private Color labelColor;
    [CompilerGeneratedAttribute]
private Rectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ClientRect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CustomRulerHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VisibleRangeScaleFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VisibleRangeStartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VisibleRangeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Size> <TextSizeCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<RangeControlParts, Rectangle> <Rects>k__BackingField;
    public Color BackColor { get; }
    public Color BorderColor { get; }
    public Rectangle Bounds { get; public set; }
    public Rectangle ClientRect { get; public set; }
    public int CustomRulerHeight { get; public set; }
    public Rectangle DrawRangeBounds { get; public set; }
    public Color FlagTextColor { get; }
    public bool IsRightToLeft { get; public set; }
    public Color LabelColor { get; }
    public Rectangle LeftOutOfRangeBounds { get; public set; }
    public Rectangle LeftScaleThumbBounds { get; public set; }
    public Rectangle MaxFlagTextBounds { get; public set; }
    public Rectangle MaxRangeFlagBounds { get; public set; }
    public Rectangle MaxRangeFlagLineBounds { get; public set; }
    public Rectangle MaxRangeThumbBounds { get; public set; }
    public Rectangle MinFlagTextBounds { get; public set; }
    public Rectangle MinRangeFlagBounds { get; public set; }
    public Rectangle MinRangeFlagLineBounds { get; public set; }
    public Rectangle MinRangeThumbBounds { get; public set; }
    public Rectangle RangeBounds { get; public set; }
    public Rectangle RangeClientBounds { get; public set; }
    public Rectangle RangeIndicatorBounds { get; public set; }
    public Rectangle RightOutOfRangeBounds { get; public set; }
    public Rectangle RightScaleThumbBounds { get; public set; }
    public Rectangle RulerBounds { get; public set; }
    public Color RulerColor { get; }
    public int RulerOpacity { get; }
    public int MinIndentBetweenTicks { get; }
    public int RuleTextBottomIndent { get; }
    public int RuleTextTopIndent { get; }
    public int ScrollBarHeight { get; }
    public Rectangle ScrollBarAreaBounds { get; public set; }
    public Rectangle ScrollBarThumbBounds { get; public set; }
    public Rectangle ScrollBounds { get; public set; }
    public Rectangle SelectionBounds { get; public set; }
    public double VisibleRangeScaleFactor { get; public set; }
    public double VisibleRangeStartPosition { get; public set; }
    public double VisibleRangeWidth { get; public set; }
    protected internal Dictionary`2<string, Size> TextSizeCache { get; protected internal set; }
    protected int LineWidth { get; }
    protected Dictionary`2<RangeControlParts, Rectangle> Rects { get; private set; }
    public RangeControlViewInfoCalcBase(Rectangle bounds, Rectangle clientRect, double visibleScaleFactor);
    public virtual Color get_BackColor();
    public virtual Color get_BorderColor();
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(Rectangle value);
    [CompilerGeneratedAttribute]
public Rectangle get_ClientRect();
    [CompilerGeneratedAttribute]
public void set_ClientRect(Rectangle value);
    [CompilerGeneratedAttribute]
public int get_CustomRulerHeight();
    [CompilerGeneratedAttribute]
public void set_CustomRulerHeight(int value);
    public Rectangle get_DrawRangeBounds();
    public void set_DrawRangeBounds(Rectangle value);
    public virtual Color get_FlagTextColor();
    [CompilerGeneratedAttribute]
public bool get_IsRightToLeft();
    [CompilerGeneratedAttribute]
public void set_IsRightToLeft(bool value);
    public virtual Color get_LabelColor();
    public Rectangle get_LeftOutOfRangeBounds();
    public void set_LeftOutOfRangeBounds(Rectangle value);
    public Rectangle get_LeftScaleThumbBounds();
    public void set_LeftScaleThumbBounds(Rectangle value);
    public Rectangle get_MaxFlagTextBounds();
    public void set_MaxFlagTextBounds(Rectangle value);
    public Rectangle get_MaxRangeFlagBounds();
    public void set_MaxRangeFlagBounds(Rectangle value);
    public Rectangle get_MaxRangeFlagLineBounds();
    public void set_MaxRangeFlagLineBounds(Rectangle value);
    public Rectangle get_MaxRangeThumbBounds();
    public void set_MaxRangeThumbBounds(Rectangle value);
    public Rectangle get_MinFlagTextBounds();
    public void set_MinFlagTextBounds(Rectangle value);
    public Rectangle get_MinRangeFlagBounds();
    public void set_MinRangeFlagBounds(Rectangle value);
    public Rectangle get_MinRangeFlagLineBounds();
    public void set_MinRangeFlagLineBounds(Rectangle value);
    public Rectangle get_MinRangeThumbBounds();
    public void set_MinRangeThumbBounds(Rectangle value);
    public Rectangle get_RangeBounds();
    public void set_RangeBounds(Rectangle value);
    public Rectangle get_RangeClientBounds();
    public void set_RangeClientBounds(Rectangle value);
    public Rectangle get_RangeIndicatorBounds();
    public void set_RangeIndicatorBounds(Rectangle value);
    public Rectangle get_RightOutOfRangeBounds();
    public void set_RightOutOfRangeBounds(Rectangle value);
    public Rectangle get_RightScaleThumbBounds();
    public void set_RightScaleThumbBounds(Rectangle value);
    public Rectangle get_RulerBounds();
    public void set_RulerBounds(Rectangle value);
    public virtual Color get_RulerColor();
    public virtual int get_RulerOpacity();
    public virtual int get_MinIndentBetweenTicks();
    public virtual int get_RuleTextBottomIndent();
    public virtual int get_RuleTextTopIndent();
    public virtual int get_ScrollBarHeight();
    public Rectangle get_ScrollBarAreaBounds();
    public void set_ScrollBarAreaBounds(Rectangle value);
    public Rectangle get_ScrollBarThumbBounds();
    public void set_ScrollBarThumbBounds(Rectangle value);
    public Rectangle get_ScrollBounds();
    public void set_ScrollBounds(Rectangle value);
    public Rectangle get_SelectionBounds();
    public void set_SelectionBounds(Rectangle value);
    [CompilerGeneratedAttribute]
public double get_VisibleRangeScaleFactor();
    [CompilerGeneratedAttribute]
public void set_VisibleRangeScaleFactor(double value);
    [CompilerGeneratedAttribute]
public double get_VisibleRangeStartPosition();
    [CompilerGeneratedAttribute]
public void set_VisibleRangeStartPosition(double value);
    [CompilerGeneratedAttribute]
public double get_VisibleRangeWidth();
    [CompilerGeneratedAttribute]
public void set_VisibleRangeWidth(double value);
    [CompilerGeneratedAttribute]
protected internal Dictionary`2<string, Size> get_TextSizeCache();
    [CompilerGeneratedAttribute]
protected internal void set_TextSizeCache(Dictionary`2<string, Size> value);
    protected virtual int get_LineWidth();
    [CompilerGeneratedAttribute]
protected Dictionary`2<RangeControlParts, Rectangle> get_Rects();
    [CompilerGeneratedAttribute]
private void set_Rects(Dictionary`2<RangeControlParts, Rectangle> value);
    [EditorBrowsableAttribute("1")]
public void SetLabelColor(Color labelColor);
    public Rectangle GetRect(RangeControlParts part);
    public void SetRect(RangeControlParts part, Rectangle value);
    public void Reset();
    public Rectangle CalcScrollBarAreaBounds(Rectangle bounds);
    public virtual Rectangle CalcScrollBounds(Rectangle bounds);
    public Rectangle CalcRightOutOfRangeAreaBounds(Rectangle bounds, Rectangle rangeBounds);
    public Rectangle CalcLeftOutOfRangeAreaBounds(Rectangle bounds, Rectangle rangeBounds);
    public int GetRulerIndexBeforeValue(double value, IRangeControlClient Client, List`1<object> Ruler);
    public virtual int Delta2Pixel(double value);
    public virtual double Pixel2Delta(int pixel);
    public virtual int Value2Pixel(double value);
    protected Rectangle CalcFlagTextBounds(Size textSize, Rectangle flagBounds);
    protected virtual Rectangle CalcMaxRangeFlagArea(Size flagSize);
    protected virtual Rectangle CalcMinRangeFlagArea(Size flagSize);
    protected virtual Color GetFlagTextColor();
    protected int GetRulerFirstVisibleValueIndex(IRangeControlClient client, List`1<object> ruler);
    protected int GetRulerLastVisibleValueIndex(IRangeControlClient client, List`1<object> ruler);
    protected int GetRulesCount(IRangeControlClient client, List`1<object> ruler);
    protected bool IsConvertibleValue(object value);
}
public class DevExpress.XtraEditors.RulerInfoArgs : object {
    [CompilerGeneratedAttribute]
private object <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RulerWidthInPixels>k__BackingField;
    public object MinValue { get; private set; }
    public object MaxValue { get; private set; }
    public double RulerWidthInPixels { get; private set; }
    public RulerInfoArgs(object minValue, object maxValue, double rulerWidthInPixels);
    [CompilerGeneratedAttribute]
public object get_MinValue();
    [CompilerGeneratedAttribute]
private void set_MinValue(object value);
    [CompilerGeneratedAttribute]
public object get_MaxValue();
    [CompilerGeneratedAttribute]
private void set_MaxValue(object value);
    [CompilerGeneratedAttribute]
public double get_RulerWidthInPixels();
    [CompilerGeneratedAttribute]
private void set_RulerWidthInPixels(double value);
}
public enum DevExpress.XtraExport.BrushStyle : Enum {
    public int value__;
    public static BrushStyle Clear;
    public static BrushStyle Solid;
}
public class DevExpress.XtraExport.ExportCacheCellBorderStyle : ValueType {
    public bool IsDefault;
    public Color Color_;
    public int Width;
    public BorderDashStyle BorderDashStyle;
    public bool IsEqual(ExportCacheCellBorderStyle borderStyle);
    public sealed virtual bool Equals(ExportCacheCellBorderStyle other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.XtraExport.ExportCacheCellStyle : ValueType {
    private Dictionary`2<ushort, int> types;
    public Color TextColor;
    public Font TextFont;
    public StringAlignment TextAlignment;
    public StringAlignment LineAlignment;
    public string FormatString;
    public string XlsxFormatString;
    public Color BkColor;
    public Color FgColor;
    public BrushStyle BrushStyle_;
    public ExportCacheCellBorderStyle LeftBorder;
    public ExportCacheCellBorderStyle TopBorder;
    public ExportCacheCellBorderStyle RightBorder;
    public ExportCacheCellBorderStyle BottomBorder;
    public short PreparedCellType;
    public bool WrapText;
    public bool RightToLeft;
    private Dictionary`2<ushort, int> Types { get; }
    private Dictionary`2<ushort, int> get_Types();
    public bool IsEqual(ExportCacheCellStyle style);
    public sealed virtual bool Equals(ExportCacheCellStyle style);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal bool WasExportedWithType(ushort type);
    internal void AddExportedType(ushort type, int result);
    internal int GetExportResult(ushort type);
}
public enum DevExpress.XtraExport.ExportCacheDataType : Enum {
    public int value__;
    public static ExportCacheDataType Boolean;
    public static ExportCacheDataType Integer;
    public static ExportCacheDataType Double;
    public static ExportCacheDataType Decimal;
    public static ExportCacheDataType String;
    public static ExportCacheDataType Object;
    public static ExportCacheDataType Single;
}
public class DevExpress.XtraExport.ExportCacheException : ApplicationException {
    public ExportCacheException(string message);
}
public class DevExpress.XtraExport.ExportCacheItem : ValueType {
    public IExportInternalProvider InternalCache;
    public object Data;
    public ExportCacheDataType DataType;
    public int StyleIndex;
    public bool IsUnion;
    public bool IsHidden;
    public int UnionWidth;
    public int UnionHeight;
}
public class DevExpress.XtraExport.ExportCustomProvider : object {
    private string fileName;
    private Stream stream;
    private bool isStreamMode;
    public static string StreamModeName;
    [CompilerGeneratedAttribute]
private ProviderProgressEventHandler ProviderProgress;
    public string FileName { get; }
    public Stream Stream { get; }
    public bool IsStreamMode { get; }
    public ExportCustomProvider(string fileName);
    public ExportCustomProvider(Stream stream);
    protected void OnProviderProgress(int position);
    public static bool IsValidFileName(string fileName);
    public static bool IsValidStream(Stream stream);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public string get_FileName();
    public sealed virtual Stream get_Stream();
    public sealed virtual bool get_IsStreamMode();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProviderProgress(ProviderProgressEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProviderProgress(ProviderProgressEventHandler value);
}
public class DevExpress.XtraExport.ExportDefaultInternalProvider : ExportDefaultProvider {
    public ExportDefaultInternalProvider(string fileName);
    public ExportDefaultInternalProvider(Stream stream);
    public virtual void CommitCache(StreamWriter writer);
    public sealed virtual void SetCacheToCell(int col, int row, IExportInternalProvider cache);
    public sealed virtual void DeleteCacheFromCell(int col, int row);
    public virtual IExportProvider Clone(string fileName, Stream stream);
}
public class DevExpress.XtraExport.ExportDefaultProvider : ExportCustomProvider {
    protected ExportCacheItem[0...,0...] cache;
    protected Int32[] columns;
    protected Int32[] rows;
    protected ExportStyleManagerBase styleManager;
    protected static string rangeError;
    protected static string indexError;
    protected static string unionError;
    public ExportDefaultProvider(string fileName);
    public ExportDefaultProvider(Stream stream);
    private void InternalSetRange(int width, int height, bool isVisible);
    protected void TestIndex(int col, int row);
    protected int CacheWidth();
    protected int CacheHeight();
    protected string GetCloneFileName(string fileName);
    protected Stream GetCloneStream(Stream stream);
    protected int GetCellWidth(int col, int row);
    public virtual void Commit();
    public sealed virtual int RegisterStyle(ExportCacheCellStyle style);
    public sealed virtual void SetDefaultStyle(ExportCacheCellStyle style);
    public sealed virtual void SetStyle(ExportCacheCellStyle style);
    public sealed virtual void SetStyle(int styleIndex);
    public sealed virtual void SetCellStyle(int col, int row, int styleIndex);
    public sealed virtual void SetCellStyle(int col, int row, ExportCacheCellStyle style);
    public sealed virtual void SetCellStyle(int col, int row, int exampleCol, int exampleRow);
    public sealed virtual void SetCellUnion(int col, int row, int width, int height);
    public sealed virtual void SetCellStyleAndUnion(int col, int row, int width, int height, int styleIndex);
    public sealed virtual void SetCellStyleAndUnion(int col, int row, int width, int height, ExportCacheCellStyle style);
    public sealed virtual void SetRange(int width, int height, bool isVisible);
    public sealed virtual void SetColumnWidth(int col, int width);
    public sealed virtual void SetRowHeight(int row, int height);
    public sealed virtual void SetCellData(int col, int row, object data);
    public sealed virtual void SetCellString(int col, int row, string str);
    public sealed virtual ExportCacheCellStyle GetStyle(int styleIndex);
    public sealed virtual ExportCacheCellStyle GetCellStyle(int col, int row);
    public sealed virtual ExportCacheCellStyle GetDefaultStyle();
    public sealed virtual int GetColumnWidth(int col);
    public sealed virtual int GetRowHeight(int row);
    public virtual IExportProvider Clone(string fileName, Stream stream);
    private sealed virtual override ExportStyleManagerBase DevExpress.XtraExport.IExportStyleManagerCreator.CreateInstance(string fileName, Stream stream);
    protected StreamWriter CreateStreamWriter(string fileName);
}
[ObsoleteAttribute("")]
public class DevExpress.XtraExport.ExportHtmlProvider : ExportDefaultInternalProvider {
    public ExportHtmlProvider(string fileName);
    public ExportHtmlProvider(Stream stream);
    private bool IsEmptyString(string str);
    private string ConvertCRLFSymbols(string text);
    private string ConvertSpecialSymbols(string text);
    private string GetHtmlColor(Color color);
    private string GetStyle(ExportCacheCellStyle style);
    private string GetTitle();
    private void CommitStyles(StreamWriter writer);
    private void CommitHtml(StreamWriter writer);
    public virtual void CommitCache(StreamWriter writer);
    public virtual void Commit();
    public virtual IExportProvider Clone(string fileName, Stream stream);
}
public class DevExpress.XtraExport.ExportStyleManager : ExportStyleManagerBase {
    public ExportStyleManager(string fileName, Stream stream);
    protected virtual ExportCacheCellStyle CreateDefaultStyle();
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.XtraExport.ExportStyleManagerBase : object {
    private static Dictionary`2<string, ExportStyleManagerBase> instances;
    private static Dictionary`2<Stream, ExportStyleManagerBase> instances2;
    private IndexedDictionary`1<ExportCacheCellStyle> styles;
    private string fileName;
    private Stream stream;
    public int Count { get; }
    public ExportCacheCellStyle Item { get; }
    public ExportCacheCellStyle DefaultStyle { get; public set; }
    protected ExportStyleManagerBase(string fileName, Stream stream);
    private static ExportStyleManagerBase();
    private static ExportStyleManagerBase GetFileInstance(string fileName, IExportStyleManagerCreator creator);
    private static ExportStyleManagerBase GetStreamInstance(Stream stream, IExportStyleManagerCreator creator);
    public static void DisposeInstance(string fileName, Stream stream);
    public static ExportStyleManagerBase GetInstance(string fileName, Stream stream, IExportStyleManagerCreator creator);
    public int get_Count();
    public ExportCacheCellStyle get_Item(int index);
    public ExportCacheCellStyle get_DefaultStyle();
    public void set_DefaultStyle(ExportCacheCellStyle value);
    protected abstract virtual ExportCacheCellStyle CreateDefaultStyle();
    internal void MarkStyleAsExported(int styleIndex, int result, ushort type);
    public int RegisterStyle(ExportCacheCellStyle style);
    public void Clear();
    internal void DisposeInstance();
}
[ObsoleteAttribute("")]
public class DevExpress.XtraExport.ExportTxtProvider : ExportDefaultProvider {
    private string beginString;
    private string endString;
    private string separator;
    private bool alignColumnWidth;
    private bool quoteData;
    private Int32[] columnMaxWidth;
    public string BeginString { get; public set; }
    public string EndString { get; public set; }
    public string Separator { get; public set; }
    public bool AlignColumnWidth { get; public set; }
    public bool QuoteData { get; public set; }
    public ExportTxtProvider(string fileName);
    public ExportTxtProvider(Stream stream);
    private string GetData(int col, int row);
    private void CalculateColumnMaxWidth();
    private string AppendData(string data, int col);
    private string DoQuoteData(string data);
    private string GetTextData(int i, int j);
    private void CommitTxt(StreamWriter writer);
    public virtual void Commit();
    public virtual IExportProvider Clone(string fileName, Stream stream);
    public string get_BeginString();
    public void set_BeginString(string value);
    public string get_EndString();
    public void set_EndString(string value);
    public string get_Separator();
    public void set_Separator(string value);
    public bool get_AlignColumnWidth();
    public void set_AlignColumnWidth(bool value);
    public bool get_QuoteData();
    public void set_QuoteData(bool value);
}
public class DevExpress.XtraExport.ExportXlsxStyleManager : ExportStyleManagerBase {
    public ExportXlsxStyleManager(string fileName, Stream stream);
    protected virtual ExportCacheCellStyle CreateDefaultStyle();
}
public class DevExpress.XtraExport.ExportXmlProvider : ExportDefaultInternalProvider {
    private string xslFileName;
    public static char EmptyChar;
    public ExportXmlProvider(string fileName);
    public ExportXmlProvider(Stream stream);
    private static ExportXmlProvider();
    private string GetHtmlColor(Color color);
    private bool IsValidChar(char ch);
    private bool IsEmptyString(string str);
    private bool IsEmptyCharOnly(string str);
    private string GetXslFileName(string xmlFileName);
    private string GetAlignText(StringAlignment alignment);
    private string GetFontStyles(Font font);
    private string GetStyle(ExportCacheCellStyle style);
    private string GetBorderStyleContent(ExportCacheCellBorderStyle borderStyle);
    private string GetBorderStyle(ExportCacheCellStyle style);
    private string GetCellParams(int col, int row);
    private string GetData(int col, int row);
    private string ConvertTextToXML(string text);
    private string GetTitle();
    private void CommitStyle(StreamWriter writer);
    private void CommitXml(StreamWriter writer);
    private void CommitXsl(StreamWriter writer);
    private void CommitInStreamMode();
    private void CommitInFileMode();
    public virtual void CommitCache(StreamWriter writer);
    public virtual void Commit();
    public virtual IExportProvider Clone(string fileName, Stream stream);
}
public interface DevExpress.XtraExport.IExportInternalProvider {
    public abstract virtual void CommitCache(StreamWriter writer);
    public abstract virtual void SetCacheToCell(int col, int row, IExportInternalProvider cache);
    public abstract virtual void DeleteCacheFromCell(int col, int row);
}
public interface DevExpress.XtraExport.IExportProvider {
    public bool IsStreamMode { get; }
    public Stream Stream { get; }
    public abstract virtual void Commit();
    public abstract virtual int RegisterStyle(ExportCacheCellStyle style);
    public abstract virtual void SetDefaultStyle(ExportCacheCellStyle style);
    public abstract virtual void SetStyle(ExportCacheCellStyle style);
    public abstract virtual void SetStyle(int styleIndex);
    public abstract virtual void SetCellStyle(int col, int row, int styleIndex);
    public abstract virtual void SetCellStyle(int col, int row, ExportCacheCellStyle style);
    public abstract virtual void SetCellStyle(int col, int row, int exampleCol, int exampleRow);
    public abstract virtual void SetCellUnion(int col, int row, int width, int height);
    public abstract virtual void SetCellStyleAndUnion(int col, int row, int width, int height, int styleIndex);
    public abstract virtual void SetCellStyleAndUnion(int col, int row, int width, int height, ExportCacheCellStyle style);
    public abstract virtual void SetRange(int width, int height, bool isVisible);
    public abstract virtual void SetColumnWidth(int col, int width);
    public abstract virtual void SetRowHeight(int row, int height);
    public abstract virtual void SetCellData(int col, int row, object data);
    public abstract virtual void SetCellString(int col, int row, string str);
    public abstract virtual ExportCacheCellStyle GetStyle(int styleIndex);
    public abstract virtual ExportCacheCellStyle GetCellStyle(int col, int row);
    public abstract virtual ExportCacheCellStyle GetDefaultStyle();
    public abstract virtual int GetColumnWidth(int col);
    public abstract virtual int GetRowHeight(int row);
    public abstract virtual IExportProvider Clone(string fileName, Stream stream);
    public abstract virtual bool get_IsStreamMode();
    public abstract virtual Stream get_Stream();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProviderProgress(ProviderProgressEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProviderProgress(ProviderProgressEventHandler value);
}
public interface DevExpress.XtraExport.IExportStyleManagerCreator {
    public abstract virtual ExportStyleManagerBase CreateInstance(string fileName, Stream stream);
}
public class DevExpress.XtraExport.ProviderProgressEventArgs : EventArgs {
    private int position;
    public int Position { get; }
    public ProviderProgressEventArgs(int position);
    public int get_Position();
}
public class DevExpress.XtraExport.ProviderProgressEventHandler : MulticastDelegate {
    public ProviderProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProviderProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProviderProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum DevExpress.XtraGrid.ColumnFilterMode : Enum {
    public int value__;
    public static ColumnFilterMode Value;
    public static ColumnFilterMode DisplayText;
}
public enum DevExpress.XtraGrid.ColumnGroupInterval : Enum {
    public int value__;
    public static ColumnGroupInterval Default;
    public static ColumnGroupInterval Value;
    public static ColumnGroupInterval Date;
    public static ColumnGroupInterval DateMonth;
    public static ColumnGroupInterval DateYear;
    public static ColumnGroupInterval DateRange;
    public static ColumnGroupInterval Alphabetical;
    public static ColumnGroupInterval DisplayText;
}
public enum DevExpress.XtraGrid.ColumnSortMode : Enum {
    public int value__;
    public static ColumnSortMode Default;
    public static ColumnSortMode Value;
    public static ColumnSortMode DisplayText;
    public static ColumnSortMode Custom;
}
[TypeConverterAttribute("DevExpress.XtraPrinting.Design.BorderDashStyleConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.BorderDashStyle : Enum {
    public byte value__;
    public static BorderDashStyle Solid;
    public static BorderDashStyle Dash;
    public static BorderDashStyle Dot;
    public static BorderDashStyle DashDot;
    public static BorderDashStyle DashDotDot;
    public static BorderDashStyle Double;
}
[TypeConverterAttribute("DevExpress.XtraPrinting.Design.BordersConverter")]
[FlagsAttribute]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.BorderSide : Enum {
    public int value__;
    public static BorderSide None;
    public static BorderSide Left;
    public static BorderSide Top;
    public static BorderSide Right;
    public static BorderSide Bottom;
    public static BorderSide All;
}
public enum DevExpress.XtraPrinting.BrickAlignment : Enum {
    public byte value__;
    public static BrickAlignment None;
    public static BrickAlignment Near;
    public static BrickAlignment Center;
    public static BrickAlignment Far;
}
public enum DevExpress.XtraPrinting.BrickBorderStyle : Enum {
    public byte value__;
    public static BrickBorderStyle Inset;
    public static BrickBorderStyle Outset;
    public static BrickBorderStyle Center;
}
public class DevExpress.XtraPrinting.ChangeEventArgs : EventArgs {
    private string eventName;
    private SortedList infoList;
    public string EventName { get; }
    public ChangeEventArgs(string eventName);
    public string get_EventName();
    public void Add(string name, object value);
    public object ValueOf(string name);
}
public class DevExpress.XtraPrinting.ChangeEventHandler : MulticastDelegate {
    public ChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.CheckBoxState : Enum {
    public byte value__;
    public static CheckBoxState Unchecked;
    public static CheckBoxState Checked;
    public static CheckBoxState Indeterminate;
}
public class DevExpress.XtraPrinting.Design.BorderDashStyleConverter : EnumTypeConverter {
}
public class DevExpress.XtraPrinting.Design.BordersConverter : EnumTypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class DevExpress.XtraPrinting.Design.PaddingInfoTypeConverter : ExpandableObjectConverter {
    private static String[] SortOrderPaddingInfoTypeDescriptor;
    private static PaddingInfoTypeConverter();
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private string GetListSeparator(CultureInfo culture);
    private CultureInfo ValidateCulture(CultureInfo culture);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    private static int ToInt32(object value);
    protected float GetDpi(ITypeDescriptorContext context);
    private float GetDpi(object obj);
    private float GetDpiFromArray(Array array);
    private float GetDpiFromObject(object obj);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
}
[EventSourceAttribute]
public class DevExpress.XtraPrinting.Diagnostics.Telemetry : EventSource {
    public static Telemetry Instance;
    private static Telemetry();
    public static void StartSession();
    public static void StopSession();
    private static void UseSemaphore(string name, Action`1<Semaphore> callback);
    private static void UseSemaphoreCore(string name, Action`1<Semaphore> callback);
    [DebuggerHiddenAttribute]
public void EnterScope(string Name, int Id);
    [DebuggerHiddenAttribute]
public void LeaveScope(string Name, int Id);
    [DebuggerHiddenAttribute]
public void TraceData(int EventType, string Data, int Id);
}
public static class DevExpress.XtraPrinting.Diagnostics.TelemetrySR : object {
    public static string Sem;
}
[ObsoleteAttribute("This class is now obsolete. Use the DXMargins class from the DevExpress.Drawing instead.")]
[TypeConverterAttribute("DevExpress.Utils.Design.MarginsFloatConverter")]
public class DevExpress.XtraPrinting.Drawing.MarginsFloat : MarginsFBase {
    public MarginsFloat(float left, float right, float top, float bottom);
    public MarginsFloat(Margins margins);
    public virtual object Clone();
}
public enum DevExpress.XtraPrinting.ExportTarget : Enum {
    public int value__;
    public static ExportTarget Xls;
    public static ExportTarget Xlsx;
    public static ExportTarget Html;
    public static ExportTarget Mht;
    public static ExportTarget Pdf;
    public static ExportTarget Text;
    public static ExportTarget Rtf;
    public static ExportTarget Csv;
    public static ExportTarget Image;
    public static ExportTarget Docx;
}
public class DevExpress.XtraPrinting.GraphicsConvertHelper : object {
    public static StringAlignment ToHorzStringAlignment(TextAlignment align);
    public static StringAlignment ToHorzStringAlignment(TextAlignment align, bool rightToLeft);
    public static StringAlignment ToVertStringAlignment(TextAlignment align);
    public static BrickAlignment ToHorzBrickAlignment(ImageAlignment align, ImageSizeMode sizeMode);
    public static BrickAlignment ToVertBrickAlignment(ImageAlignment align, ImageSizeMode sizeMode);
    public static ContentAlignment ToContentAlignment(ImageAlignment imageAlignment);
    public static ImageAlignment ToImageAlignment(ContentAlignment contentAlignment);
    public static ContentAlignment RTLContentAlignment(ContentAlignment contentAlignment);
    public static StringAlignment RTLStringAlignment(StringAlignment align);
    public static BrickAlignment ToBrickAlignment(HorzAlignment horzAlignmnet);
    public static BrickAlignment ToBrickAlignment(VertAlignment vertAlignment);
    public static HorzAlignment RTLHorzAlignment(HorzAlignment horzAlignmnet);
    public static TextAlignment ChangeVertTextAlignment(TextAlignment textAlignment, StringAlignment vertAlignment);
    private static TextAlignment ChangeVertTextAlignmentToNear(TextAlignment textAlignment);
    private static TextAlignment ChangeVertTextAlignmentToCenter(TextAlignment textAlignment);
    private static TextAlignment ChangeVertTextAlignmentToFar(TextAlignment textAlignment);
}
public class DevExpress.XtraPrinting.GraphicsDpi : object {
    public static float Display;
    public static float Inch;
    public static float Document;
    public static float Millimeter;
    public static float Point;
    public static float HundredthsOfAnInch;
    public static float TenthsOfAMillimeter;
    public static float Twips;
    public static float EMU;
    public static float DeviceIndependentPixel;
    public static float Pixel;
    private static GraphicsDpi();
    private static void InitPixelValue();
    public static float GetGraphicsDpi(Graphics gr);
    public static float UnitToDpi(GraphicsUnit unit);
    public static float UnitToDpiI(GraphicsUnit unit);
    public static GraphicsUnit DpiToUnit(float dpi);
    public static string UnitToString(GraphicsUnit unit);
}
public class DevExpress.XtraPrinting.GraphicsUnitConverter : object {
    private static double GetScale(float fromDpi, float toDpi);
    private static float ConvF(float val, double scale);
    private static double ConvD(double val, double scale);
    private static int Conv(int val, double scale);
    public static Point Round(PointF point);
    public static Rectangle Round(RectangleF rect);
    public static Rectangle Convert(Rectangle val, GraphicsUnit fromUnit, GraphicsUnit toUnit);
    public static Size Convert(Size val, GraphicsUnit fromUnit, GraphicsUnit toUnit);
    public static Point Convert(Point val, GraphicsUnit fromUnit, GraphicsUnit toUnit);
    public static RectangleF Convert(RectangleF val, GraphicsUnit fromUnit, GraphicsUnit toUnit);
    public static RectangleDF Convert(RectangleDF val, GraphicsUnit fromUnit, GraphicsUnit toUnit);
    public static SizeF Convert(SizeF val, GraphicsUnit fromUnit, GraphicsUnit toUnit);
    public static PointF Convert(PointF val, GraphicsUnit fromUnit, GraphicsUnit toUnit);
    public static MarginsF Convert(MarginsF val, GraphicsUnit fromUnit, GraphicsUnit toUnit);
    public static float Convert(float val, GraphicsUnit fromUnit, GraphicsUnit toUnit);
    public static Rectangle Convert(Rectangle val, float fromDpi, float toDpi);
    public static Size Convert(Size val, float fromDpi, float toDpi);
    public static Point Convert(Point val, float fromDpi, float toDpi);
    public static int Convert(int val, float fromDpi, float toDpi);
    public static RectangleF Convert(RectangleF val, float fromDpi, float toDpi);
    public static RectangleDF Convert(RectangleDF val, float fromDpi, float toDpi);
    public static SizeF Convert(SizeF val, float fromDpi, float toDpi);
    public static PointF Convert(PointF val, float fromDpi, float toDpi);
    internal static PointFloat Convert(PointFloat val, float fromDpi, float toDpi);
    public static float Convert(float val, float fromDpi, float toDpi);
    public static MarginsF Convert(MarginsF val, float fromDpi, float toDpi);
    public static Margins Convert(Margins val, float fromDpi, float toDpi);
    public static RectangleF DeviceDpiToDoc(RectangleF val, float deviceDpi);
    public static SizeF DeviceDpiToDoc(SizeF val, float deviceDpi);
    public static PointF DeviceDpiToDoc(PointF val, float deviceDpi);
    public static float DeviceDpiToDoc(float val, float deviceDpi);
    public static RectangleF DocToDeviceDpi(RectangleF val, float deviceDpi);
    public static SizeF DocToDeviceDpi(SizeF val, float deviceDpi);
    public static PointF DocToDeviceDpi(PointF val, float deviceDpi);
    public static float DocToDeviceDpi(float val, float deviceDpi);
    public static MarginsF DocToDeviceDpi(MarginsF val, float deviceDpi);
    public static RectangleF PixelToDoc(RectangleF val);
    public static SizeF PixelToDoc(SizeF val);
    public static PointF PixelToDoc(PointF val);
    public static float PixelToDoc(float val);
    public static RectangleF DocToPixel(RectangleF val);
    public static SizeF DocToPixel(SizeF val);
    public static PointF DocToPixel(PointF val);
    public static float DocToPixel(float val);
    public static MarginsF DocToPixel(MarginsF val);
    public static RectangleF DipToDoc(RectangleF rect);
    public static SizeF DipToDoc(SizeF size);
    public static float DipToDoc(float val);
    public static float DocToDip(float val);
    public static SizeF DocToDip(SizeF val);
    public static RectangleF DocToDip(RectangleF val);
    public static float DipToTwips(float val);
    public static RectangleF DipToTwips(RectangleF val);
}
[ExtensionAttribute]
public static class DevExpress.XtraPrinting.GraphicsUnitExtensions : object {
    [ExtensionAttribute]
public static float ToDpi(GraphicsUnit unit);
    [ExtensionAttribute]
public static float ToDpiI(GraphicsUnit unit);
}
public static class DevExpress.XtraPrinting.Helpers.ReportSpecificEnumHelper : object {
    public static short GetEnumMaxValue(Type enumType);
}
[TypeConverterAttribute("DevExpress.Utils.Design.HorizontalContentSplittingConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.HorizontalContentSplitting : Enum {
    public int value__;
    public static HorizontalContentSplitting Exact;
    public static HorizontalContentSplitting Smart;
}
public interface DevExpress.XtraPrinting.IBaseBrick {
    public string Hint { get; public set; }
    public RectangleF Rect { get; public set; }
    public string Url { get; public set; }
    public object Value { get; public set; }
    public abstract virtual string get_Hint();
    public abstract virtual void set_Hint(string value);
    public abstract virtual RectangleF get_Rect();
    public abstract virtual void set_Rect(RectangleF value);
    public abstract virtual string get_Url();
    public abstract virtual void set_Url(string value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
public interface DevExpress.XtraPrinting.IBrick {
    public abstract virtual Hashtable GetProperties();
    public abstract virtual void SetProperties(Hashtable properties);
    public abstract virtual void SetProperties(Object[0...,0...] properties);
}
public interface DevExpress.XtraPrinting.ILineBrick {
    public float LineWidth { get; public set; }
    public DashStyle LineStyle { get; public set; }
    public Color ForeColor { get; public set; }
    public abstract virtual float get_LineWidth();
    public abstract virtual void set_LineWidth(float value);
    public abstract virtual DashStyle get_LineStyle();
    public abstract virtual void set_LineStyle(DashStyle value);
    public abstract virtual Color get_ForeColor();
    public abstract virtual void set_ForeColor(Color value);
    public abstract virtual void CalculateDirection(PointF pt1, PointF pt2);
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.ImageAlignment : Enum {
    public int value__;
    public static ImageAlignment Default;
    public static ImageAlignment TopLeft;
    public static ImageAlignment TopCenter;
    public static ImageAlignment TopRight;
    public static ImageAlignment MiddleLeft;
    public static ImageAlignment MiddleCenter;
    public static ImageAlignment MiddleRight;
    public static ImageAlignment BottomLeft;
    public static ImageAlignment BottomCenter;
    public static ImageAlignment BottomRight;
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.ImageSizeMode : Enum {
    public int value__;
    public static ImageSizeMode Normal;
    public static ImageSizeMode StretchImage;
    public static ImageSizeMode AutoSize;
    [EditorBrowsableAttribute("1")]
public static ImageSizeMode CenterImage;
    public static ImageSizeMode ZoomImage;
    public static ImageSizeMode Squeeze;
    public static ImageSizeMode Tile;
    public static ImageSizeMode Cover;
}
public interface DevExpress.XtraPrinting.IPageBrick {
    public BrickAlignment Alignment { get; public set; }
    public BrickAlignment LineAlignment { get; public set; }
    public abstract virtual BrickAlignment get_Alignment();
    public abstract virtual void set_Alignment(BrickAlignment value);
    public abstract virtual BrickAlignment get_LineAlignment();
    public abstract virtual void set_LineAlignment(BrickAlignment value);
}
[ToolboxItemAttribute("False")]
public class DevExpress.XtraPrinting.Localization.PreviewLocalizer : XtraLocalizer`1<PreviewStringId> {
    internal static PreviewLocalizer Default;
    public static XtraLocalizer`1<PreviewStringId> Active { get; public set; }
    private static PreviewLocalizer();
    public static XtraLocalizer`1<PreviewStringId> get_Active();
    public static void set_Active(XtraLocalizer`1<PreviewStringId> value);
    public static XtraLocalizer`1<PreviewStringId> CreateDefaultLocalizer();
    public static string GetString(PreviewStringId id);
    public virtual XtraLocalizer`1<PreviewStringId> CreateResXLocalizer();
    protected virtual void PopulateStringTable();
    private void AddStrings();
}
[ToolboxItemAttribute("False")]
public class DevExpress.XtraPrinting.Localization.PreviewResLocalizer : XtraResXLocalizer`1<PreviewStringId> {
    protected virtual ResourceManager CreateResourceManagerCore();
}
public enum DevExpress.XtraPrinting.Localization.PreviewStringId : Enum {
    public int value__;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You shouldn't use the 'EmptyString' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId EmptyString;
    public static PreviewStringId Button_Cancel;
    public static PreviewStringId Button_Ok;
    public static PreviewStringId Button_Help;
    public static PreviewStringId Button_Apply;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'PreviewForm_Caption' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PPF_Preview_Caption;
    public static PreviewStringId PreviewForm_Caption;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Customize' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_CustomizeBtn_ToolTip;
    public static PreviewStringId TB_TTip_Customize;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Print' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_PrintBtn_ToolTip;
    public static PreviewStringId TB_TTip_Print;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_PrintDirect' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_PrintDirectBtn_ToolTip;
    public static PreviewStringId TB_TTip_PrintDirect;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_PageSetup' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_PageSetupBtn_ToolTip;
    public static PreviewStringId TB_TTip_PageSetup;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Magnifier' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_MagnifierBtn_ToolTip;
    public static PreviewStringId TB_TTip_Magnifier;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_ZoomIn' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_ZoomInBtn_ToolTip;
    public static PreviewStringId TB_TTip_ZoomIn;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_ZoomOut' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_ZoomOutBtn_ToolTip;
    public static PreviewStringId TB_TTip_ZoomOut;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Zoom' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_ZoomBtn_ToolTip;
    public static PreviewStringId TB_TTip_Zoom;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Search' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_SearchBtn_ToolTip;
    public static PreviewStringId TB_TTip_Search;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_FirstPage' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_FirstPageBtn_ToolTip;
    public static PreviewStringId TB_TTip_FirstPage;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_PreviousPage' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_PreviousPageBtn_ToolTip;
    public static PreviewStringId TB_TTip_PreviousPage;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_NextPage' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_NextPageBtn_ToolTip;
    public static PreviewStringId TB_TTip_NextPage;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_LastPage' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_LastPageBtn_ToolTip;
    public static PreviewStringId TB_TTip_LastPage;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_MultiplePages' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_MultiplePagesBtn_ToolTip;
    public static PreviewStringId TB_TTip_MultiplePages;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Backgr' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_BackGroundBtn_ToolTip;
    public static PreviewStringId TB_TTip_Backgr;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Close' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_ClosePreviewBtn_ToolTip;
    public static PreviewStringId TB_TTip_Close;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_EditPageHF' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_EditPageHFBtn_ToolTip;
    public static PreviewStringId TB_TTip_EditPageHF;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_HandTool' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_HandToolBtn_ToolTip;
    public static PreviewStringId TB_TTip_HandTool;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Export' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_ExportBtn_ToolTip;
    public static PreviewStringId TB_TTip_Export;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Send' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_SendBtn_ToolTip;
    public static PreviewStringId TB_TTip_Send;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Map' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_DocMap_ToolTip;
    public static PreviewStringId TB_TTip_Map;
    public static PreviewStringId TB_TTip_Thumbnails;
    public static PreviewStringId TB_TTip_HighlightEditingFields;
    public static PreviewStringId TB_TTip_Parameters;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'TB_TTip_Watermark' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId TB_Watermark_ToolTip;
    public static PreviewStringId TB_TTip_Watermark;
    public static PreviewStringId TB_TTip_Scale;
    public static PreviewStringId TB_TTip_Open;
    public static PreviewStringId TB_TTip_Save;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'MenuItem_PdfDocument' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_PDF_Document;
    public static PreviewStringId MenuItem_PdfDocument;
    public static PreviewStringId MenuItem_PageLayout;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'MenuItem_TxtDocument' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_Text_Document;
    public static PreviewStringId MenuItem_TxtDocument;
    public static PreviewStringId MenuItem_GraphicDocument;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'MenuItem_CsvDocument' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_CSV_Document;
    public static PreviewStringId MenuItem_CsvDocument;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'MenuItem_MhtDocument' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_MHT_Document;
    public static PreviewStringId MenuItem_MhtDocument;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'MenuItem_XlsDocument' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_Excel_Document;
    public static PreviewStringId MenuItem_XlsDocument;
    public static PreviewStringId MenuItem_XlsxDocument;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'MenuItem_RtfDocument' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_RichTextDocument;
    public static PreviewStringId MenuItem_RtfDocument;
    public static PreviewStringId MenuItem_DocxDocument;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'MenuItem_HtmDocument' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_HTMLDocument;
    public static PreviewStringId MenuItem_HtmDocument;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SaveDlg_FilterBmp' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_BMP;
    public static PreviewStringId SaveDlg_FilterBmp;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SaveDlg_FilterGif' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_GIF;
    public static PreviewStringId SaveDlg_FilterGif;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SaveDlg_FilterJpeg' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_JPEG;
    public static PreviewStringId SaveDlg_FilterJpeg;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SaveDlg_FilterPng' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_PNG;
    public static PreviewStringId SaveDlg_FilterPng;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SaveDlg_FilterTiff' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_TIFF;
    public static PreviewStringId SaveDlg_FilterTiff;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SaveDlg_FilterEmf' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_EMF;
    public static PreviewStringId SaveDlg_FilterEmf;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SaveDlg_FilterWmf' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId barExport_WMF;
    public static PreviewStringId SaveDlg_FilterWmf;
    public static PreviewStringId SaveDlg_FilterSvg;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SB_PageOfPages' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId SB_TotalPageNo;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SB_PageOfPages' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId SB_CurrentPageNo;
    public static PreviewStringId SB_PageOfPages;
    public static PreviewStringId SB_ZoomFactor;
    public static PreviewStringId SB_PageNone;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SB_PageInfo' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId SB_PageInfo_OF;
    public static PreviewStringId SB_PageInfo;
    public static PreviewStringId SB_PageOfPagesHint;
    public static PreviewStringId SB_TTip_Stop;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_PageContentEditor_Caption;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_PageNumber_ToolTip;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_PageOfPages_ToolTip;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_DatePrinted_ToolTip;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_TimePrinted_ToolTip;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_UserName_ToolTip;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_Image_ToolTip;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_FontButton;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_FooterLabel;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_HeaderLabel;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_AlignTops_ToolTip;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_AlignMiddles_ToolTip;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization you should localize the HeaderFooterForm.resx file")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId PCE_AlignBottoms_ToolTip;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'MPForm_Lbl_Pages' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId MPE_PagesLabel;
    public static PreviewStringId MPForm_Lbl_Pages;
    public static PreviewStringId WaitForm_Caption;
    public static PreviewStringId Msg_ErrorTitle;
    public static PreviewStringId Msg_Progress_Creating;
    public static PreviewStringId Msg_Progress_Printing;
    public static PreviewStringId Msg_Progress_Exporting;
    public static PreviewStringId Msg_EmptyDocument;
    public static PreviewStringId Msg_CreatingDocument;
    public static PreviewStringId Msg_WaitingForParameterValues;
    public static PreviewStringId Msg_ExportingDocument;
    public static PreviewStringId Msg_UnavailableNetPrinter;
    public static PreviewStringId Msg_NeedPrinter;
    public static PreviewStringId Msg_WrongPrinter;
    public static PreviewStringId Msg_WrongPrinting;
    public static PreviewStringId Msg_WrongPageSettings;
    public static PreviewStringId Msg_CustomDrawWarning;
    public static PreviewStringId Msg_PageMarginsWarning;
    public static PreviewStringId Msg_IncorrectPageRange;
    public static PreviewStringId Msg_FontInvalidNumber;
    public static PreviewStringId Msg_NotSupportedFont;
    public static PreviewStringId Msg_NotSupportedFontException;
    public static PreviewStringId Msg_IncorrectZoomFactor;
    public static PreviewStringId Msg_InvalidMeasurement;
    public static PreviewStringId Msg_CannotAccessFile;
    public static PreviewStringId Msg_CannotFindFile;
    public static PreviewStringId Msg_FileReadOnly;
    public static PreviewStringId Msg_OpenFileQuestion;
    public static PreviewStringId Msg_OpenFileQuestionCaption;
    public static PreviewStringId Msg_CantFitBarcodeToControlBounds;
    public static PreviewStringId Msg_InvalidBarcodeText;
    public static PreviewStringId Msg_InvalidBarcodeTextFormat;
    public static PreviewStringId Msg_InvalidBarcodeData;
    public static PreviewStringId Msg_InvalidIntelligentMailBarcodeDataLength;
    public static PreviewStringId Msg_InvalidBarcodeSymbols;
    public static PreviewStringId Msg_InvalidBarcodeFNCSymbols;
    public static PreviewStringId Msg_InvalidBarcodeEmptyText;
    public static PreviewStringId Msg_InvalidBarcodeOnlyNumbersAllowed;
    public static PreviewStringId Msg_InvalidBarcodeGS1QRCodeNumericContainsFNC;
    public static PreviewStringId Msg_InvalidBarcodeCharsetC;
    public static PreviewStringId Msg_InvalidEPCDataFormat;
    public static PreviewStringId Msg_InvalidEPCIncorrectVersion;
    public static PreviewStringId Msg_InvalidEPCEncoding;
    public static PreviewStringId Msg_InvalidEPCAmount;
    public static PreviewStringId Msg_InvalidEPCFieldLength;
    public static PreviewStringId Msg_InvalidEPCFieldBeneficiaryMissed;
    public static PreviewStringId Msg_InvalidEPCFieldIBANMissed;
    public static PreviewStringId Msg_InvalidEPCFieldVer1BeneficiaryMissed;
    public static PreviewStringId Msg_InvalidEPCFieldMandatoryField;
    public static PreviewStringId Msg_IncompatibleBarcodeSettings;
    public static PreviewStringId Msg_IncompatibleLogoQRCodeSettings;
    public static PreviewStringId Msg_PdfLoadError;
    public static PreviewStringId Msg_ImageLoadError;
    public static PreviewStringId Msg_IgnoredSvgElements;
    public static PreviewStringId Msg_InvPropName;
    public static PreviewStringId Msg_Search_Caption;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Msg_SearchDialogFinishedSearching;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Msg_SearchDialogTotalFound;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Msg_SearchDialogReady;
    public static PreviewStringId Msg_NoDifferentFilesInStream;
    public static PreviewStringId Msg_BigFileToCreate;
    public static PreviewStringId Msg_BigFileToCreateJPEG;
    public static PreviewStringId Msg_BigBitmapToCreate;
    public static PreviewStringId Msg_XlsMoreThanMaxRows;
    public static PreviewStringId Msg_XlsMoreThanMaxColumns;
    public static PreviewStringId Msg_XlsxMoreThanMaxRows;
    public static PreviewStringId Msg_XlsxMoreThanMaxColumns;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'Msg_FileDoesNotHavePrnxExtension' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Msg_FileDosntHavePrnxExtention;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'Msg_FileDoesNotHavePrnxExtension' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Msg_FileDoesNotHavePrnxExtention;
    public static PreviewStringId Msg_FileDoesNotHavePrnxExtension;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'Msg_FileDoesNotContainValidXml' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Msg_FileDosntContainValidXml;
    public static PreviewStringId Msg_FileDoesNotContainValidXml;
    public static PreviewStringId Msg_GoToNonExistentPage;
    public static PreviewStringId Msg_Caption;
    public static PreviewStringId Msg_PathTooLong;
    public static PreviewStringId Msg_CannotLoadDocument;
    public static PreviewStringId Msg_NoParameters;
    public static PreviewStringId Msg_SeparatorCannotBeEmptyString;
    public static PreviewStringId Msg_CannotExportToDocx;
    public static PreviewStringId Msg_InvalidatePath;
    public static PreviewStringId Msg_FileAlreadyExists;
    public static PreviewStringId Msg_EmptyUsefulPageSizeError;
    public static PreviewStringId Msg_EnteredDataDoNotMatchParameterType;
    public static PreviewStringId Msg_ParameterDoesNotAllowEmptyValue;
    public static PreviewStringId Margin_Inch;
    public static PreviewStringId Margin_Millimeter;
    public static PreviewStringId Margin_Pixel;
    public static PreviewStringId Margin_TopMargin;
    public static PreviewStringId Margin_BottomMargin;
    public static PreviewStringId Margin_LeftMargin;
    public static PreviewStringId Margin_RightMargin;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Rectangle;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Ellipse;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Arrow;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_TopArrow;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_BottomArrow;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_LeftArrow;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_RightArrow;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Polygon;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Triangle;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Square;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Pentagon;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Hexagon;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Octagon;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Star;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_ThreePointStar;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_FourPointStar;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_FivePointStar;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_SixPointStar;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_EightPointStar;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Line;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_SlantLine;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_BackslantLine;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_HorizontalLine;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_VerticalLine;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Cross;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Brace;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use the corresponding value of the DevExpress.XtraPrinting.Shape.Native.ShapeId enumeration (from the PropertyNamesRes.resx file of the DevExpress.Printing.Core assemby) instead")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Shapes_Bracket;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'ScrollingInfo_Page' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId Page_Scroll;
    public static PreviewStringId ScrollingInfo_Page;
    public static PreviewStringId PrintDialog_Duplex_Simplex;
    public static PreviewStringId PrintDialog_Duplex_Vertical;
    public static PreviewStringId PrintDialog_Duplex_Horizontal;
    public static PreviewStringId WMForm_PictureDlg_Title;
    public static PreviewStringId WMForm_ImageStretch;
    public static PreviewStringId WMForm_ImageClip;
    public static PreviewStringId WMForm_ImageZoom;
    public static PreviewStringId WMForm_Watermark_Asap;
    public static PreviewStringId WMForm_Watermark_Confidential;
    public static PreviewStringId WMForm_Watermark_Copy;
    public static PreviewStringId WMForm_Watermark_DoNotCopy;
    public static PreviewStringId WMForm_Watermark_Draft;
    public static PreviewStringId WMForm_Watermark_Evaluation;
    public static PreviewStringId WMForm_Watermark_Original;
    public static PreviewStringId WMForm_Watermark_Personal;
    public static PreviewStringId WMForm_Watermark_Sample;
    public static PreviewStringId WMForm_Watermark_TopSecret;
    public static PreviewStringId WMForm_Watermark_Urgent;
    public static PreviewStringId WMForm_Direction_Horizontal;
    public static PreviewStringId WMForm_Direction_Vertical;
    public static PreviewStringId WMForm_Direction_BackwardDiagonal;
    public static PreviewStringId WMForm_Direction_ForwardDiagonal;
    public static PreviewStringId WMForm_VertAlign_Bottom;
    public static PreviewStringId WMForm_VertAlign_Middle;
    public static PreviewStringId WMForm_VertAlign_Top;
    public static PreviewStringId WMForm_HorzAlign_Left;
    public static PreviewStringId WMForm_HorzAlign_Center;
    public static PreviewStringId WMForm_HorzAlign_Right;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization use the DevExpress .NET Localization Service.")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId WMForm_ZOrderRgrItem_InFront;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization use the DevExpress .NET Localization Service.")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId WMForm_ZOrderRgrItem_Behind;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization use the DevExpress .NET Localization Service.")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId WMForm_PageRangeRgrItem_All;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("For localization use the DevExpress .NET Localization Service.")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId WMForm_PageRangeRgrItem_Pages;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'SaveDlg_Title' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId dlgSaveAs;
    public static PreviewStringId SaveDlg_Title;
    public static PreviewStringId SaveDlg_FilterPdf;
    public static PreviewStringId SaveDlg_FilterHtm;
    public static PreviewStringId SaveDlg_FilterMht;
    public static PreviewStringId SaveDlg_FilterRtf;
    public static PreviewStringId SaveDlg_FilterDocx;
    public static PreviewStringId SaveDlg_FilterXls;
    public static PreviewStringId SaveDlg_FilterXlsx;
    public static PreviewStringId SaveDlg_FilterCsv;
    public static PreviewStringId SaveDlg_FilterTxt;
    public static PreviewStringId SaveDlg_FilterNativeFormat;
    public static PreviewStringId SaveDlg_FilterXps;
    public static PreviewStringId MenuItem_File;
    public static PreviewStringId MenuItem_View;
    public static PreviewStringId MenuItem_Background;
    public static PreviewStringId MenuItem_PageSetup;
    public static PreviewStringId MenuItem_Print;
    public static PreviewStringId MenuItem_PrintDirect;
    public static PreviewStringId MenuItem_Export;
    public static PreviewStringId MenuItem_Send;
    public static PreviewStringId MenuItem_Exit;
    public static PreviewStringId MenuItem_ViewToolbar;
    public static PreviewStringId MenuItem_ViewStatusbar;
    public static PreviewStringId MenuItem_ViewContinuous;
    public static PreviewStringId MenuItem_ViewFacing;
    public static PreviewStringId MenuItem_BackgrColor;
    public static PreviewStringId MenuItem_Watermark;
    public static PreviewStringId MenuItem_ZoomPageWidth;
    public static PreviewStringId MenuItem_ZoomTextWidth;
    public static PreviewStringId MenuItem_ZoomWholePage;
    public static PreviewStringId MenuItem_ZoomTwoPages;
    public static PreviewStringId MenuItem_Copy;
    public static PreviewStringId MenuItem_PrintSelection;
    public static PreviewStringId PageInfo_PageNumber;
    public static PreviewStringId PageInfo_PageNumberOfTotal;
    public static PreviewStringId PageInfo_PageTotal;
    public static PreviewStringId PageInfo_PageDate;
    public static PreviewStringId PageInfo_PageTime;
    public static PreviewStringId PageInfo_PageUserName;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You should use the 'EMail_From' member")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId dlgSendFrom;
    public static PreviewStringId EMail_From;
    public static PreviewStringId BarText_Toolbar;
    public static PreviewStringId BarText_MainMenu;
    public static PreviewStringId BarText_StatusBar;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId ScalePopup_GroupText;
    public static PreviewStringId ScalePopup_AdjustTo;
    public static PreviewStringId ScalePopup_NormalSize;
    public static PreviewStringId ScalePopup_FitTo;
    public static PreviewStringId ScalePopup_PagesWide;
    public static PreviewStringId ExportOption_PdfPageRange;
    public static PreviewStringId ExportOption_PdfConvertImagesToJpeg;
    public static PreviewStringId ExportOption_PdfExportEditingFieldsToAcroForms;
    public static PreviewStringId ExportOption_PdfRasterizeImages;
    public static PreviewStringId ExportOption_PdfRasterizationResolution;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This member has become obsolete.")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId ExportOption_PdfCompressed;
    public static PreviewStringId ExportOption_PdfShowPrintDialogOnOpen;
    public static PreviewStringId ExportOption_PdfNeverEmbeddedFonts;
    public static PreviewStringId ExportOption_PdfPasswordSecurityOptions;
    public static PreviewStringId ExportOption_PdfSignatureOptions;
    public static PreviewStringId ExportOption_PdfImageQuality;
    public static PreviewStringId ExportOption_PdfImageQuality_Lowest;
    public static PreviewStringId ExportOption_PdfImageQuality_Low;
    public static PreviewStringId ExportOption_PdfImageQuality_Medium;
    public static PreviewStringId ExportOption_PdfImageQuality_High;
    public static PreviewStringId ExportOption_PdfImageQuality_Highest;
    public static PreviewStringId ExportOption_PdfACompatibility;
    public static PreviewStringId ExportOption_PdfACompatibility_None;
    public static PreviewStringId ExportOption_PdfACompatibility_PdfA1a;
    public static PreviewStringId ExportOption_PdfACompatibility_PdfA1b;
    public static PreviewStringId ExportOption_PdfACompatibility_PdfA2a;
    public static PreviewStringId ExportOption_PdfACompatibility_PdfA2b;
    public static PreviewStringId ExportOption_PdfACompatibility_PdfA3a;
    public static PreviewStringId ExportOption_PdfACompatibility_PdfA3b;
    public static PreviewStringId ExportOption_PdfUACompatibility;
    public static PreviewStringId ExportOption_PdfUACompatibility_None;
    public static PreviewStringId ExportOption_PdfUACompatibility_PdfUA1;
    public static PreviewStringId ExportOption_PdfDocumentAuthor;
    public static PreviewStringId ExportOption_PdfDocumentApplication;
    public static PreviewStringId ExportOption_PdfDocumentTitle;
    public static PreviewStringId ExportOption_PdfDocumentSubject;
    public static PreviewStringId ExportOption_PdfDocumentKeywords;
    public static PreviewStringId ExportOption_PdfPrintingPermissions_None;
    public static PreviewStringId ExportOption_PdfPrintingPermissions_LowResolution;
    public static PreviewStringId ExportOption_PdfPrintingPermissions_HighResolution;
    public static PreviewStringId ExportOption_PdfChangingPermissions_None;
    public static PreviewStringId ExportOption_PdfChangingPermissions_InsertingDeletingRotating;
    public static PreviewStringId ExportOption_PdfChangingPermissions_FillingSigning;
    public static PreviewStringId ExportOption_PdfChangingPermissions_CommentingFillingSigning;
    public static PreviewStringId ExportOption_PdfChangingPermissions_AnyExceptExtractingPages;
    public static PreviewStringId ExportOption_ConfirmOpenPasswordForm_Caption;
    public static PreviewStringId ExportOption_ConfirmOpenPasswordForm_Note;
    public static PreviewStringId ExportOption_ConfirmOpenPasswordForm_Name;
    public static PreviewStringId ExportOption_ConfirmPermissionsPasswordForm_Caption;
    public static PreviewStringId ExportOption_ConfirmPermissionsPasswordForm_Note;
    public static PreviewStringId ExportOption_ConfirmPermissionsPasswordForm_Name;
    public static PreviewStringId ExportOption_ConfirmationDoesNotMatchForm_Msg;
    public static PreviewStringId ExportOption_HtmlExportMode;
    public static PreviewStringId ExportOption_HtmlExportMode_SingleFile;
    public static PreviewStringId ExportOption_HtmlExportMode_SingleFilePageByPage;
    public static PreviewStringId ExportOption_HtmlExportMode_DifferentFiles;
    public static PreviewStringId ExportOption_HtmlCharacterSet;
    public static PreviewStringId ExportOption_HtmlTitle;
    public static PreviewStringId ExportOption_HtmlRemoveSecondarySymbols;
    public static PreviewStringId ExportOption_HtmlEmbedImagesInHTML;
    public static PreviewStringId ExportOption_HtmlPageRange;
    public static PreviewStringId ExportOption_HtmlPageBorderWidth;
    public static PreviewStringId ExportOption_HtmlPageBorderColor;
    public static PreviewStringId ExportOption_HtmlTableLayout;
    public static PreviewStringId ExportOption_HtmlExportWatermarks;
    public static PreviewStringId ExportOption_RtfExportMode;
    public static PreviewStringId ExportOption_RtfExportMode_SingleFile;
    public static PreviewStringId ExportOption_RtfExportMode_SingleFilePageByPage;
    public static PreviewStringId ExportOption_RtfPageRange;
    public static PreviewStringId ExportOption_RtfExportWatermarks;
    public static PreviewStringId ExportOption_DocxExportMode;
    public static PreviewStringId ExportOption_DocxExportMode_SingleFile;
    public static PreviewStringId ExportOption_DocxExportMode_SingleFilePageByPage;
    public static PreviewStringId ExportOption_DocxPageRange;
    public static PreviewStringId ExportOption_DocxTableLayout;
    public static PreviewStringId ExportOption_DocxKeepRowHeight;
    public static PreviewStringId ExportOption_DocxExportWatermarks;
    public static PreviewStringId ExportOption_TextSeparator;
    public static PreviewStringId ExportOption_TextSeparator_TabAlias;
    public static PreviewStringId ExportOption_TextEncoding;
    public static PreviewStringId ExportOption_TextQuoteStringsWithSeparators;
    public static PreviewStringId ExportOption_TextExportMode;
    public static PreviewStringId ExportOption_TextExportMode_Value;
    public static PreviewStringId ExportOption_TextExportMode_Text;
    public static PreviewStringId ExportOption_CsvSeparator_UsingSystem;
    public static PreviewStringId ExportOption_XlsRawDataMode;
    public static PreviewStringId ExportOption_XlsShowGridLines;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This member has become obsolete.")]
[DXHelpExcludeAttribute("True")]
public static PreviewStringId ExportOption_XlsUseNativeFormat;
    public static PreviewStringId ExportOption_XlsExportHyperlinks;
    public static PreviewStringId ExportOption_XlsSheetName;
    public static PreviewStringId ExportOption_XlsExportMode;
    public static PreviewStringId ExportOption_XlsExportMode_SingleFile;
    public static PreviewStringId ExportOption_XlsExportMode_SingleFilePageByPage;
    public static PreviewStringId ExportOption_XlsExportMode_DifferentFiles;
    public static PreviewStringId ExportOption_XlsPageRange;
    public static PreviewStringId ExportOption_XlsxExportMode;
    public static PreviewStringId ExportOption_XlsxExportMode_SingleFile;
    public static PreviewStringId ExportOption_XlsxExportMode_SingleFilePageByPage;
    public static PreviewStringId ExportOption_XlsxExportMode_DifferentFiles;
    public static PreviewStringId ExportOption_XlsxPageRange;
    public static PreviewStringId ExportOption_ImageExportMode;
    public static PreviewStringId ExportOption_ImageExportMode_SingleFile;
    public static PreviewStringId ExportOption_ImageExportMode_SingleFilePageByPage;
    public static PreviewStringId ExportOption_ImageExportMode_DifferentFiles;
    public static PreviewStringId ExportOption_ImagePageRange;
    public static PreviewStringId ExportOption_ImagePageBorderWidth;
    public static PreviewStringId ExportOption_ImagePageBorderColor;
    public static PreviewStringId ExportOption_ImageFormat;
    public static PreviewStringId ExportOption_ImageResolution;
    public static PreviewStringId ExportOption_NativeFormatCompressed;
    public static PreviewStringId ExportOption_XpsPageRange;
    public static PreviewStringId ExportOption_XpsCompression;
    public static PreviewStringId ExportOption_XpsCompression_NotCompressed;
    public static PreviewStringId ExportOption_XpsCompression_Normal;
    public static PreviewStringId ExportOption_XpsCompression_Maximum;
    public static PreviewStringId ExportOption_XpsCompression_Fast;
    public static PreviewStringId ExportOption_XpsCompression_SuperFast;
    public static PreviewStringId ExportOption_XpsDocumentCreator;
    public static PreviewStringId ExportOption_XpsDocumentCategory;
    public static PreviewStringId ExportOption_XpsDocumentTitle;
    public static PreviewStringId ExportOption_XpsDocumentSubject;
    public static PreviewStringId ExportOption_XpsDocumentKeywords;
    public static PreviewStringId ExportOption_XpsDocumentVersion;
    public static PreviewStringId ExportOption_XpsDocumentDescription;
    public static PreviewStringId FolderBrowseDlg_ExportDirectory;
    public static PreviewStringId ExportOptionsForm_CaptionPdf;
    public static PreviewStringId ExportOptionsForm_CaptionXls;
    public static PreviewStringId ExportOptionsForm_CaptionXlsx;
    public static PreviewStringId ExportOptionsForm_CaptionTxt;
    public static PreviewStringId ExportOptionsForm_CaptionCsv;
    public static PreviewStringId ExportOptionsForm_CaptionImage;
    public static PreviewStringId ExportOptionsForm_CaptionHtml;
    public static PreviewStringId ExportOptionsForm_CaptionMht;
    public static PreviewStringId ExportOptionsForm_CaptionRtf;
    public static PreviewStringId ExportOptionsForm_CaptionDocx;
    public static PreviewStringId ExportOptionsForm_CaptionNativeOptions;
    public static PreviewStringId ExportOptionsForm_CaptionXps;
    public static PreviewStringId RibbonPreview_PageText;
    public static PreviewStringId RibbonPreview_PageGroup_Print;
    public static PreviewStringId RibbonPreview_PageGroup_PageSetup;
    public static PreviewStringId RibbonPreview_PageGroup_Navigation;
    public static PreviewStringId RibbonPreview_PageGroup_Zoom;
    public static PreviewStringId RibbonPreview_PageGroup_Background;
    public static PreviewStringId RibbonPreview_PageGroup_Export;
    public static PreviewStringId RibbonPreview_PageGroup_Document;
    public static PreviewStringId RibbonPreview_PageGroup_Close;
    public static PreviewStringId RibbonPreview_DocumentMap_Caption;
    public static PreviewStringId RibbonPreview_Parameters_Caption;
    public static PreviewStringId RibbonPreview_Find_Caption;
    public static PreviewStringId RibbonPreview_Pointer_Caption;
    public static PreviewStringId RibbonPreview_HandTool_Caption;
    public static PreviewStringId RibbonPreview_Customize_Caption;
    public static PreviewStringId RibbonPreview_Print_Caption;
    public static PreviewStringId RibbonPreview_PrintDirect_Caption;
    public static PreviewStringId RibbonPreview_PageSetup_Caption;
    public static PreviewStringId RibbonPreview_EditPageHF_Caption;
    public static PreviewStringId RibbonPreview_Magnifier_Caption;
    public static PreviewStringId RibbonPreview_ZoomOut_Caption;
    public static PreviewStringId RibbonPreview_ZoomExact_Caption;
    public static PreviewStringId RibbonPreview_ZoomIn_Caption;
    public static PreviewStringId RibbonPreview_ShowFirstPage_Caption;
    public static PreviewStringId RibbonPreview_ShowPrevPage_Caption;
    public static PreviewStringId RibbonPreview_ShowNextPage_Caption;
    public static PreviewStringId RibbonPreview_ShowLastPage_Caption;
    public static PreviewStringId RibbonPreview_MultiplePages_Caption;
    public static PreviewStringId RibbonPreview_FillBackground_Caption;
    public static PreviewStringId RibbonPreview_Watermark_Caption;
    public static PreviewStringId RibbonPreview_ExportFile_Caption;
    public static PreviewStringId RibbonPreview_SendFile_Caption;
    public static PreviewStringId RibbonPreview_ClosePreview_Caption;
    public static PreviewStringId RibbonPreview_Scale_Caption;
    public static PreviewStringId RibbonPreview_PageOrientation_Caption;
    public static PreviewStringId RibbonPreview_PaperSize_Caption;
    public static PreviewStringId RibbonPreview_PageMargins_Caption;
    public static PreviewStringId RibbonPreview_Zoom_Caption;
    public static PreviewStringId RibbonPreview_Save_Caption;
    public static PreviewStringId RibbonPreview_Open_Caption;
    public static PreviewStringId RibbonPreview_Thumbnails_Caption;
    public static PreviewStringId RibbonPreview_HighlightEditingFields_Caption;
    public static PreviewStringId RibbonPreview_DocumentMap_STipTitle;
    public static PreviewStringId RibbonPreview_Parameters_STipTitle;
    public static PreviewStringId RibbonPreview_Find_STipTitle;
    public static PreviewStringId RibbonPreview_Pointer_STipTitle;
    public static PreviewStringId RibbonPreview_HandTool_STipTitle;
    public static PreviewStringId RibbonPreview_Customize_STipTitle;
    public static PreviewStringId RibbonPreview_Print_STipTitle;
    public static PreviewStringId RibbonPreview_PrintDirect_STipTitle;
    public static PreviewStringId RibbonPreview_PageSetup_STipTitle;
    public static PreviewStringId RibbonPreview_EditPageHF_STipTitle;
    public static PreviewStringId RibbonPreview_Magnifier_STipTitle;
    public static PreviewStringId RibbonPreview_ZoomOut_STipTitle;
    public static PreviewStringId RibbonPreview_ZoomIn_STipTitle;
    public static PreviewStringId RibbonPreview_ShowFirstPage_STipTitle;
    public static PreviewStringId RibbonPreview_ShowPrevPage_STipTitle;
    public static PreviewStringId RibbonPreview_ShowNextPage_STipTitle;
    public static PreviewStringId RibbonPreview_ShowLastPage_STipTitle;
    public static PreviewStringId RibbonPreview_MultiplePages_STipTitle;
    public static PreviewStringId RibbonPreview_FillBackground_STipTitle;
    public static PreviewStringId RibbonPreview_Watermark_STipTitle;
    public static PreviewStringId RibbonPreview_ExportFile_STipTitle;
    public static PreviewStringId RibbonPreview_SendFile_STipTitle;
    public static PreviewStringId RibbonPreview_ClosePreview_STipTitle;
    public static PreviewStringId RibbonPreview_Scale_STipTitle;
    public static PreviewStringId RibbonPreview_PageOrientation_STipTitle;
    public static PreviewStringId RibbonPreview_PaperSize_STipTitle;
    public static PreviewStringId RibbonPreview_PageMargins_STipTitle;
    public static PreviewStringId RibbonPreview_Zoom_STipTitle;
    public static PreviewStringId RibbonPreview_PageGroup_PageSetup_STipTitle;
    public static PreviewStringId RibbonPreview_Save_STipTitle;
    public static PreviewStringId RibbonPreview_Open_STipTitle;
    public static PreviewStringId RibbonPreview_Thumbnails_STipTitle;
    public static PreviewStringId RibbonPreview_HighlightEditingFields_STipTitle;
    public static PreviewStringId RibbonPreview_DocumentMap_STipContent;
    public static PreviewStringId RibbonPreview_Parameters_STipContent;
    public static PreviewStringId RibbonPreview_Find_STipContent;
    public static PreviewStringId RibbonPreview_Pointer_STipContent;
    public static PreviewStringId RibbonPreview_HandTool_STipContent;
    public static PreviewStringId RibbonPreview_Customize_STipContent;
    public static PreviewStringId RibbonPreview_Print_STipContent;
    public static PreviewStringId RibbonPreview_PrintDirect_STipContent;
    public static PreviewStringId RibbonPreview_PageSetup_STipContent;
    public static PreviewStringId RibbonPreview_EditPageHF_STipContent;
    public static PreviewStringId RibbonPreview_Magnifier_STipContent;
    public static PreviewStringId RibbonPreview_ZoomOut_STipContent;
    public static PreviewStringId RibbonPreview_ZoomIn_STipContent;
    public static PreviewStringId RibbonPreview_ShowFirstPage_STipContent;
    public static PreviewStringId RibbonPreview_ShowPrevPage_STipContent;
    public static PreviewStringId RibbonPreview_ShowNextPage_STipContent;
    public static PreviewStringId RibbonPreview_ShowLastPage_STipContent;
    public static PreviewStringId RibbonPreview_MultiplePages_STipContent;
    public static PreviewStringId RibbonPreview_FillBackground_STipContent;
    public static PreviewStringId RibbonPreview_Watermark_STipContent;
    public static PreviewStringId RibbonPreview_ExportFile_STipContent;
    public static PreviewStringId RibbonPreview_SendFile_STipContent;
    public static PreviewStringId RibbonPreview_ClosePreview_STipContent;
    public static PreviewStringId RibbonPreview_Scale_STipContent;
    public static PreviewStringId RibbonPreview_PageOrientation_STipContent;
    public static PreviewStringId RibbonPreview_PaperSize_STipContent;
    public static PreviewStringId RibbonPreview_PageMargins_STipContent;
    public static PreviewStringId RibbonPreview_Zoom_STipContent;
    public static PreviewStringId RibbonPreview_PageGroup_PageSetup_STipContent;
    public static PreviewStringId RibbonPreview_Save_STipContent;
    public static PreviewStringId RibbonPreview_Open_STipContent;
    public static PreviewStringId RibbonPreview_Thumbnails_STipContent;
    public static PreviewStringId RibbonPreview_HighlightEditingFields_STipContent;
    public static PreviewStringId RibbonPreview_ExportPdf_Caption;
    public static PreviewStringId RibbonPreview_ExportHtm_Caption;
    public static PreviewStringId RibbonPreview_ExportMht_Caption;
    public static PreviewStringId RibbonPreview_ExportRtf_Caption;
    public static PreviewStringId RibbonPreview_ExportDocx_Caption;
    public static PreviewStringId RibbonPreview_ExportXls_Caption;
    public static PreviewStringId RibbonPreview_ExportXlsx_Caption;
    public static PreviewStringId RibbonPreview_ExportCsv_Caption;
    public static PreviewStringId RibbonPreview_ExportTxt_Caption;
    public static PreviewStringId RibbonPreview_ExportGraphic_Caption;
    public static PreviewStringId RibbonPreview_ExportXps_Caption;
    public static PreviewStringId RibbonPreview_SendPdf_Caption;
    public static PreviewStringId RibbonPreview_SendMht_Caption;
    public static PreviewStringId RibbonPreview_SendRtf_Caption;
    public static PreviewStringId RibbonPreview_SendDocx_Caption;
    public static PreviewStringId RibbonPreview_SendXls_Caption;
    public static PreviewStringId RibbonPreview_SendXlsx_Caption;
    public static PreviewStringId RibbonPreview_SendCsv_Caption;
    public static PreviewStringId RibbonPreview_SendTxt_Caption;
    public static PreviewStringId RibbonPreview_SendGraphic_Caption;
    public static PreviewStringId RibbonPreview_SendXps_Caption;
    public static PreviewStringId RibbonPreview_ExportPdf_Description;
    public static PreviewStringId RibbonPreview_ExportHtm_Description;
    public static PreviewStringId RibbonPreview_ExportTxt_Description;
    public static PreviewStringId RibbonPreview_ExportCsv_Description;
    public static PreviewStringId RibbonPreview_ExportMht_Description;
    public static PreviewStringId RibbonPreview_ExportXls_Description;
    public static PreviewStringId RibbonPreview_ExportXlsx_Description;
    public static PreviewStringId RibbonPreview_ExportRtf_Description;
    public static PreviewStringId RibbonPreview_ExportDocx_Description;
    public static PreviewStringId RibbonPreview_ExportGraphic_Description;
    public static PreviewStringId RibbonPreview_ExportXps_Description;
    public static PreviewStringId RibbonPreview_SendPdf_Description;
    public static PreviewStringId RibbonPreview_SendTxt_Description;
    public static PreviewStringId RibbonPreview_SendCsv_Description;
    public static PreviewStringId RibbonPreview_SendMht_Description;
    public static PreviewStringId RibbonPreview_SendXls_Description;
    public static PreviewStringId RibbonPreview_SendXlsx_Description;
    public static PreviewStringId RibbonPreview_SendRtf_Description;
    public static PreviewStringId RibbonPreview_SendDocx_Description;
    public static PreviewStringId RibbonPreview_SendGraphic_Description;
    public static PreviewStringId RibbonPreview_SendXps_Description;
    public static PreviewStringId RibbonPreview_ExportPdf_STipTitle;
    public static PreviewStringId RibbonPreview_ExportHtm_STipTitle;
    public static PreviewStringId RibbonPreview_ExportTxt_STipTitle;
    public static PreviewStringId RibbonPreview_ExportCsv_STipTitle;
    public static PreviewStringId RibbonPreview_ExportMht_STipTitle;
    public static PreviewStringId RibbonPreview_ExportXls_STipTitle;
    public static PreviewStringId RibbonPreview_ExportXlsx_STipTitle;
    public static PreviewStringId RibbonPreview_ExportRtf_STipTitle;
    public static PreviewStringId RibbonPreview_ExportDocx_STipTitle;
    public static PreviewStringId RibbonPreview_ExportGraphic_STipTitle;
    public static PreviewStringId RibbonPreview_SendPdf_STipTitle;
    public static PreviewStringId RibbonPreview_SendTxt_STipTitle;
    public static PreviewStringId RibbonPreview_SendCsv_STipTitle;
    public static PreviewStringId RibbonPreview_SendMht_STipTitle;
    public static PreviewStringId RibbonPreview_SendXls_STipTitle;
    public static PreviewStringId RibbonPreview_SendXlsx_STipTitle;
    public static PreviewStringId RibbonPreview_SendRtf_STipTitle;
    public static PreviewStringId RibbonPreview_SendDocx_STipTitle;
    public static PreviewStringId RibbonPreview_SendGraphic_STipTitle;
    public static PreviewStringId RibbonPreview_ExportPdf_STipContent;
    public static PreviewStringId RibbonPreview_ExportHtm_STipContent;
    public static PreviewStringId RibbonPreview_ExportTxt_STipContent;
    public static PreviewStringId RibbonPreview_ExportCsv_STipContent;
    public static PreviewStringId RibbonPreview_ExportMht_STipContent;
    public static PreviewStringId RibbonPreview_ExportXls_STipContent;
    public static PreviewStringId RibbonPreview_ExportXlsx_STipContent;
    public static PreviewStringId RibbonPreview_ExportRtf_STipContent;
    public static PreviewStringId RibbonPreview_ExportDocx_STipContent;
    public static PreviewStringId RibbonPreview_ExportGraphic_STipContent;
    public static PreviewStringId RibbonPreview_SendPdf_STipContent;
    public static PreviewStringId RibbonPreview_SendTxt_STipContent;
    public static PreviewStringId RibbonPreview_SendCsv_STipContent;
    public static PreviewStringId RibbonPreview_SendMht_STipContent;
    public static PreviewStringId RibbonPreview_SendXls_STipContent;
    public static PreviewStringId RibbonPreview_SendXlsx_STipContent;
    public static PreviewStringId RibbonPreview_SendRtf_STipContent;
    public static PreviewStringId RibbonPreview_SendDocx_STipContent;
    public static PreviewStringId RibbonPreview_SendGraphic_STipContent;
    public static PreviewStringId RibbonPreview_GalleryItem_PageOrientationPortrait_Caption;
    public static PreviewStringId RibbonPreview_GalleryItem_PageOrientationLandscape_Caption;
    public static PreviewStringId RibbonPreview_GalleryItem_PageMarginsNormal_Caption;
    public static PreviewStringId RibbonPreview_GalleryItem_PageMarginsNarrow_Caption;
    public static PreviewStringId RibbonPreview_GalleryItem_PageMarginsModerate_Caption;
    public static PreviewStringId RibbonPreview_GalleryItem_PageMarginsWide_Caption;
    public static PreviewStringId RibbonPreview_GalleryItem_PageOrientationPortrait_Description;
    public static PreviewStringId RibbonPreview_GalleryItem_PageOrientationLandscape_Description;
    public static PreviewStringId RibbonPreview_GalleryItem_PageMarginsNormal_Description;
    public static PreviewStringId RibbonPreview_GalleryItem_PageMarginsNarrow_Description;
    public static PreviewStringId RibbonPreview_GalleryItem_PageMarginsModerate_Description;
    public static PreviewStringId RibbonPreview_GalleryItem_PageMarginsWide_Description;
    public static PreviewStringId RibbonPreview_GalleryItem_PageMargins_Description;
    public static PreviewStringId RibbonPreview_GalleryItem_PaperSize_Description;
    public static PreviewStringId OpenFileDialog_Filter;
    public static PreviewStringId OpenFileDialog_Title;
    public static PreviewStringId ExportOption_PdfPasswordSecurityOptions_DocumentOpenPassword;
    public static PreviewStringId ExportOption_PdfPasswordSecurityOptions_Permissions;
    public static PreviewStringId ExportOption_PdfPasswordSecurityOptions_None;
    public static PreviewStringId ParametersRequest_Submit;
    public static PreviewStringId ParametersRequest_Reset;
    public static PreviewStringId ParametersRequest_Caption;
    public static PreviewStringId ParametersRequest_NullValuePrompt;
    public static PreviewStringId ParametersRequest_AllMultiValuesFormat;
    public static PreviewStringId ParametersRequest_SelectedMultiValuesFormat;
    public static PreviewStringId NoneString;
    public static PreviewStringId WatermarkTypePicture;
    public static PreviewStringId WatermarkTypeText;
    public static PreviewStringId ParameterLookUpSettingsNoLookUp;
    public static PreviewStringId ParameterRangeSettingsNoRange;
    public static PreviewStringId ExportOption_PdfSignatureOptions_Certificate;
    public static PreviewStringId ExportOption_PdfSignatureOptions_Reason;
    public static PreviewStringId ExportOption_PdfSignatureOptions_Location;
    public static PreviewStringId ExportOption_PdfSignatureOptions_ContactInfo;
    public static PreviewStringId ExportOption_PdfSignatureOptions_Image;
    public static PreviewStringId ExportOption_PdfSignatureOptions_None;
    public static PreviewStringId ExportOption_PdfSignature_EmptyCertificate;
    public static PreviewStringId ExportOption_PdfSignature_Issuer;
    public static PreviewStringId ExportOption_PdfSignature_ValidRange;
    public static PreviewStringId NetworkPrinterFormat;
    public static PreviewStringId PrinterStatus_Busy;
    public static PreviewStringId PrinterStatus_DoorOpen;
    public static PreviewStringId PrinterStatus_DriverUpdateNeeded;
    public static PreviewStringId PrinterStatus_Error;
    public static PreviewStringId PrinterStatus_Initializing;
    public static PreviewStringId PrinterStatus_IOActive;
    public static PreviewStringId PrinterStatus_ManualFeed;
    public static PreviewStringId PrinterStatus_NotAvailable;
    public static PreviewStringId PrinterStatus_NoToner;
    public static PreviewStringId PrinterStatus_Offline;
    public static PreviewStringId PrinterStatus_OutOfMemory;
    public static PreviewStringId PrinterStatus_OutputBinFull;
    public static PreviewStringId PrinterStatus_PagePunt;
    public static PreviewStringId PrinterStatus_PaperJam;
    public static PreviewStringId PrinterStatus_PaperOut;
    public static PreviewStringId PrinterStatus_PaperProblem;
    public static PreviewStringId PrinterStatus_Paused;
    public static PreviewStringId PrinterStatus_PendingDeletion;
    public static PreviewStringId PrinterStatus_PowerSave;
    public static PreviewStringId PrinterStatus_Printing;
    public static PreviewStringId PrinterStatus_Processing;
    public static PreviewStringId PrinterStatus_Ready;
    public static PreviewStringId PrinterStatus_ServerOffline;
    public static PreviewStringId PrinterStatus_ServerUnknown;
    public static PreviewStringId PrinterStatus_TonerLow;
    public static PreviewStringId PrinterStatus_UserIntervention;
    public static PreviewStringId PrinterStatus_Waiting;
    public static PreviewStringId PrinterStatus_WarmingUp;
    public static PreviewStringId EditingFieldEditors_Integer;
    public static PreviewStringId EditingFieldEditors_IntegerPositive;
    public static PreviewStringId EditingFieldEditors_FixedPoint;
    public static PreviewStringId EditingFieldEditors_FixedPointPositive;
    public static PreviewStringId EditingFieldEditors_Date;
    public static PreviewStringId EditingFieldEditors_OnlyLetters;
    public static PreviewStringId EditingFieldEditors_OnlyUppercaseLetters;
    public static PreviewStringId EditingFieldEditors_OnlyLowercaseLetters;
    public static PreviewStringId EditingFieldEditors_OnlyLatinLetters;
    public static PreviewStringId EditingFieldEditors_Image;
    public static PreviewStringId EditingFieldEditors_Signature;
    public static PreviewStringId EditingFieldEditors_ImageAndSignature;
    public static PreviewStringId EditingFieldEditorCategories_Numeric;
    public static PreviewStringId EditingFieldEditorCategories_DateTime;
    public static PreviewStringId EditingFieldEditorCategories_Letters;
    public static PreviewStringId ImageEditingFieldEditor_LoadImage;
    public static PreviewStringId ImageEditingFieldEditor_ChooseImage;
    public static PreviewStringId ImageEditingFieldEditor_SizeModeAndAlignment;
    public static PreviewStringId ImageEditingFieldEditor_BrushOptions;
    public static PreviewStringId ImageEditingFieldEditor_Reset;
    public static PreviewStringId ImageEditingFieldEditor_Clear;
    public static PreviewStringId ImageEditingFieldEditor_SizeMode;
    public static PreviewStringId ImageEditingFieldEditor_Alignment;
    public static PreviewStringId ImageEditingFieldEditor_BrushSize;
    public static PreviewStringId ImageEditingFieldEditor_BrushColor;
    public static PreviewStringId DateRangeParameterEditor_Today;
    public static PreviewStringId DateRangeParameterEditor_Yesterday;
    public static PreviewStringId DateRangeParameterEditor_CurrentWeek;
    public static PreviewStringId DateRangeParameterEditor_LastWeek;
    public static PreviewStringId DateRangeParameterEditor_PreviousWeek;
    public static PreviewStringId DateRangeParameterEditor_Last7Days;
    public static PreviewStringId DateRangeParameterEditor_CurrentMonth;
    public static PreviewStringId DateRangeParameterEditor_LastMonth;
    public static PreviewStringId DateRangeParameterEditor_PreviousMonth;
    public static PreviewStringId DateRangeParameterEditor_CurrentQuarter;
    public static PreviewStringId DateRangeParameterEditor_PreviousQuarter;
    public static PreviewStringId DateRangeParameterEditor_CurrentYear;
    public static PreviewStringId DateRangeParameterEditor_LastYear;
    public static PreviewStringId DateRangeParameterEditor_PreviousYear;
    public static PreviewStringId SignatureCaptions_CertificateName;
    public static PreviewStringId SignatureCaptions_DistinguishedName;
    public static PreviewStringId SignatureCaptions_Reason;
    public static PreviewStringId SignatureCaptions_Location;
    public static PreviewStringId SignatureCaptions_Date;
    public static PreviewStringId SignatureFillerText_CertificateName;
    public static PreviewStringId SignatureFillerText_DistinguishedName;
    public static PreviewStringId SignatureFillerText_Reason;
    public static PreviewStringId SignatureFillerText_Location;
    public static PreviewStringId SignatureUnsignedCaption;
    public static PreviewStringId Accessibility_Chart_Name;
    public static PreviewStringId Accessibility_Sparkline_Name;
    public static PreviewStringId Accessibility_Gauge_Name;
    public static PreviewStringId Accessibility_CharacterComb_Name;
    public static PreviewStringId Accessibility_ZipCode_Name;
    public static PreviewStringId Accessibility_Shape_Name;
    public static PreviewStringId Accessibility_Barcode_Name;
    public static PreviewStringId Accessibility_CheckBox_Name;
    public static PreviewStringId Accessibility_CheckBox_DescriptionFormat;
    public static PreviewStringId Accessibility_Line_Name;
    public static PreviewStringId Accessibility_Image_Name;
    public static PreviewStringId Accessibility_ProgressBar_Name;
    public static PreviewStringId Accessibility_PageInfo_Name;
    public static PreviewStringId ReportDesignAnalyzer_Warning;
    public static PreviewStringId ReportDesignAnalyzer_Error;
    public static PreviewStringId ReportDesignAnalyzer_Message;
    public static PreviewStringId ReportDesignAnalyzer_Script;
    public static PreviewStringId ReportDesignAnalyzer_GridColumn_Description;
    public static PreviewStringId ReportDesignAnalyzer_GridColumn_Code;
    public static PreviewStringId ReportDesignAnalyzer_GridColumn_Source;
    public static PreviewStringId ReportDesignAnalyzer_ErrorSource_ShowAll;
    public static PreviewStringId ReportDesignAnalyzer_ErrorSource_HideAll;
    public static PreviewStringId ReportDesignAnalyzer_TTip_Prefix_ErrorSource;
    public static PreviewStringId ReportDesignAnalyzer_TTip_RestoreFiltersToDefaultSettings;
    public static PreviewStringId SearchPanel_EnterTextToSearch;
    public static PreviewStringId SearchPanel_NoDataToDisplay;
    public static PreviewStringId SearchPanel_SearchResults;
    public static PreviewStringId SearchPanel_MatchCase;
    public static PreviewStringId SearchPanel_MatchWholeWord;
}
[ExtensionAttribute]
public static class DevExpress.XtraPrinting.Localization.PreviewStringIdExtensions : object {
    [ExtensionAttribute]
public static string GetString(PreviewStringId id);
    [ExtensionAttribute]
public static string GetString(PreviewStringId id, Object[] args);
}
internal class DevExpress.XtraPrinting.Localization.PrintBarManagerBarNames : object {
    public static string MainMenu;
    public static string Toolbar;
    public static string StatusBar;
}
public static class DevExpress.XtraPrinting.Native.DisplayTypeNameHelper : object {
    private static Dictionary`2<string, DisplayNameAttribute> displayTypeNames;
    private static Dictionary`2<Enum, string> enumDisplayNames;
    private static DisplayTypeNameHelper();
    public static string GetDisplayTypeName(Type type);
    public static string GetDisplayTypeName(Enum value);
    public static Enum GetEnumValueFromDisplayName(Type enumType, string displayName);
}
public class DevExpress.XtraPrinting.Native.EmfMetafilePatcher : object {
    [SecuritySafeCriticalAttribute]
public static Metafile PatchResolution(Metafile metafile, int newResolution, bool allowDisposeOriginalImage);
    private static int Round(double value);
}
public class DevExpress.XtraPrinting.Native.FloatsComparer : object {
    public static double DefaultEpsilon;
    public static FloatsComparer Default;
    private double epsilon;
    private static FloatsComparer();
    protected FloatsComparer(double epsilon);
    public bool FirstEqualsSecond(double first, double second);
    public bool FirstLessSecond(double first, double second);
    public bool FirstLessOrEqualSecond(double first, double second);
    public bool FirstGreaterSecond(double first, double second);
    public bool FirstGreaterOrEqualSecond(double first, double second);
    public bool FirstGreaterSecondLessThird(double first, double second, double third);
    public bool SizeFEquals(SizeF size1, SizeF size2);
    public bool PointFEquals(PointF point1, PointF point2);
    public bool RectangleFEquals(RectangleF rectangle1, RectangleF rectangle2);
    public bool RectangleIsEmpty(RectangleF rect);
    public bool IntersectByX(RectangleF rect1, RectangleF rect2);
    public bool IntersectByY(RectangleF rect1, RectangleF rect2);
    public bool ContainsByX(RectangleF rect1, RectangleF rect2);
    public bool Intersects(RectangleF rect1, RectangleF rect2);
    public bool ContainsByY(RectangleF rect1, RectangleF rect2);
    public bool Contains(RectangleF rect1, RectangleF rect2);
    public int CompareDoubles(double first, double second);
}
public static class DevExpress.XtraPrinting.Native.FontSizeHelper : object {
    public static float GetSizeInPoints(Font font);
    private static float InchesToPointsF(float val);
    private static float DocumentsToPointsF(float val);
    private static float MillimetersToPointsF(float val);
}
public static class DevExpress.XtraPrinting.Native.GraphicsHelper : object {
    [ThreadStaticAttribute]
private static Bitmap staticBitmap;
    [ThreadStaticAttribute]
private static Bitmap staticHiResBitmap;
    private static Nullable`1<bool> canCreateFromZeroHwnd;
    private static Nullable`1<bool> canUseGetHdc;
    private static Nullable`1<bool> canUseFontSizeInPoints;
    public static bool CanCreateFromZeroHwnd { get; }
    public static bool CanUseGetHdc { get; }
    public static bool CanUseFontSizeInPoints { get; }
    public static bool get_CanCreateFromZeroHwnd();
    public static bool get_CanUseGetHdc();
    public static bool get_CanUseFontSizeInPoints();
    public static void ResetCanCreateFromZeroHwnd();
    public static Graphics CreateGraphicsWithoutAspCheck();
    public static Graphics CreateGraphics();
    private static Graphics CreateGraphicsCore(bool checkAsp);
    public static Graphics CreateGraphicsFromImage();
    public static Graphics CreateGraphicsFromHiResImage();
    private static Graphics CreateGraphicsFromZeroHwnd();
}
public static class DevExpress.XtraPrinting.Native.HttpContextAccessor : object {
    private static PropertyInfo pInfo_Current;
    private static object currentServer;
    private static object currentApplicationInstance;
    public static object Current { get; }
    public static object Server { get; }
    public static object ApplicationInstance { get; }
    public static object Request { get; }
    public static Uri Url { get; }
    private static HttpContextAccessor();
    public static void StaticInitialize();
    public static object get_Current();
    public static object get_Server();
    public static object get_ApplicationInstance();
    public static object get_Request();
    public static Uri get_Url();
    private static object GetPropertyValue(object obj, string name);
}
public static class DevExpress.XtraPrinting.Native.HttpRuntimeAccessor : object {
    public static string AppDomainAppVirtualPath;
    private static HttpRuntimeAccessor();
}
public interface DevExpress.XtraPrinting.Native.IObject {
    public string ObjectType { get; }
    public abstract virtual string get_ObjectType();
}
[TypeConverterAttribute("DevExpress.Utils.Design.MarginsFConverter")]
public class DevExpress.XtraPrinting.Native.MarginsF : MarginsFBase {
    private static float scale;
    public Margins Margins { get; }
    public MarginsF(float left, float right, float top, float bottom);
    public MarginsF(Margins margins);
    public MarginsF(Margins margins, float dpi);
    private static MarginsF();
    public static float ToHundredths(float val);
    public static int ToRoundedHundredths(float val);
    private static int ToDpiValue(float val, float dpi);
    public static float FromHundredths(float val);
    public static Margins ToMargins(MarginsF value);
    public static Margins ToMargins(MarginsF value, float dpi);
    public Margins get_Margins();
    public virtual object Clone();
}
public abstract class DevExpress.XtraPrinting.Native.MarginsFBase : object {
    private float left;
    private float right;
    private float top;
    private float bottom;
    public float Left { get; public set; }
    public float Right { get; public set; }
    public float Top { get; public set; }
    public float Bottom { get; public set; }
    public MarginsFBase(float left, float right, float top, float bottom);
    public float get_Left();
    public void set_Left(float value);
    public float get_Right();
    public void set_Right(float value);
    public float get_Top();
    public void set_Top(float value);
    public float get_Bottom();
    public void set_Bottom(float value);
    public Margins Round();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public abstract virtual object Clone();
}
public class DevExpress.XtraPrinting.Native.MathMethods : object {
    public static SizeF Scale(SizeF val, double ratio);
    public static SizeF Scale(SizeF val, float ratio);
    public static PointF Scale(PointF val, double ratio);
    public static PointF Scale(PointF val, float ratio);
    public static RectangleF Scale(RectangleF val, double ratio);
    public static RectangleF Scale(RectangleF val, float ratio);
    public static double Scale(double val, double ratio);
    public static float Scale(float val, double ratio);
    public static SizeF ZoomInto(SizeF outer, SizeF inner);
    public static SizeF ZoomOut(SizeF outer, SizeF inner);
}
public class DevExpress.XtraPrinting.Native.MetafileCreator : object {
    public static Metafile CreateInstance(RectangleF frameRect, MetafileFrameUnit frameUnit);
    public static Metafile CreateInstance(RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, bool createGraphicsFromImage);
    public static Metafile CreateInstance(RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type);
    public static Metafile CreateInstance(Stream stream, int width, int height, MetafileFrameUnit frameUnit);
    public static Metafile CreateInstance(Stream stream, int width, int height, MetafileFrameUnit frameUnit, EmfType type, bool createGraphicsFromImage);
    public static Metafile CreateInstance(Stream stream, int width, int height, MetafileFrameUnit frameUnit, EmfType type);
    public static Metafile CreateInstance(Stream stream, EmfType type);
    public static Metafile CreateInstance(Stream stream);
}
public class DevExpress.XtraPrinting.Native.PaddingInfoConverter : StructIntConverter {
    public static PaddingInfoConverter Instance;
    public Type Type { get; }
    private static PaddingInfoConverter();
    public virtual Type get_Type();
    protected virtual Int32[] GetValues(object obj);
    protected virtual object CreateObject(Int32[] values);
}
public class DevExpress.XtraPrinting.Native.Pair`2 : object {
    private TFirst first;
    private TSecond second;
    public TFirst First { get; public set; }
    public TSecond Second { get; public set; }
    public Pair`2(TFirst first, TSecond second);
    public TFirst get_First();
    public void set_First(TFirst value);
    public TSecond get_Second();
    public void set_Second(TSecond value);
    public Pair`2<TFirst, TSecond> Clone();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.XtraPrinting.Native.PointD : ValueType {
    public double X;
    public double Y;
    public PointD(double x, double y);
    public PointF ToPointF();
    public virtual string ToString();
}
public class DevExpress.XtraPrinting.Native.PSConvert : object {
    private static ImageTool imageTool;
    public static ImageTool ImageTool { get; public set; }
    public static ImageTool get_ImageTool();
    public static void set_ImageTool(ImageTool value);
    public static string ToRomanString(int val);
    public static Byte[] ImageToArray(Image img);
    public static Byte[] ImageToArray(Image img, ImageFormat format);
    public static void SaveImage(Image img, Stream stream, ImageFormat format);
    public static Image ImageFromArray(Byte[] buffer);
    public static StringAlignment ToStringAlignment(HorzAlignment hAlignment);
    public static StringAlignment ToStringAlignment(VertAlignment vAlignment);
    public static HorzAlignment ToHorzAlignment(StringAlignment alignment);
    public static VertAlignment ToVertAlignment(StringAlignment alignment);
}
public class DevExpress.XtraPrinting.Native.PSNativeMethods : object {
    private static IAspDetector predefinedAspDetector;
    public static bool HasHttpContext { get; }
    public static bool AspIsRunning { get; }
    private static IAspDetector EnsureAspDetector();
    public static void SetAspDetector(IAspDetector detector);
    public static bool get_HasHttpContext();
    public static bool get_AspIsRunning();
    public static Color ValidateBackgrColor(Color color);
    public static PointF TranslatePointF(PointF val, float dx, float dy);
    public static PointF TranslatePointF(PointF val, PointF pos);
    public static Array CombineCollections(ICollection items1, ICollection items2, Type type);
    public static bool IsNaN(float value);
    public static bool IsFloatType(Type type);
    public static bool IsIntegerType(Type type);
    public static bool IsNumericalType(Type type);
    public static bool IsNullableNumericalType(Type type);
    public static bool ValueInsideBounds(float value, float lowBound, float highBound);
}
public class DevExpress.XtraPrinting.Native.PSUnitConverter : GraphicsUnitConverter {
    public static PointF PixelToDoc(PointF val, float zoom, PointF scrollPos);
    public static RectangleF PixelToDoc(RectangleF val, float zoom, PointF scrollPos);
    public static RectangleF DocToPixel(RectangleF val, float zoom, PointF scrollPos);
    public static PointF DocToPixel(PointF val, float zoom, PointF scrollPos);
    public static float PixelToDoc(float val, float zoom);
    public static SizeF PixelToDoc(SizeF val, float zoom);
    public static PointF PixelToDoc(PointF val, float zoom);
    public static RectangleF PixelToDoc(RectangleF val, float zoom);
    public static float DocToPixel(float val, float zoom);
    public static SizeF DocToPixel(SizeF val, float zoom);
    public static PointF DocToPixel(PointF val, float zoom);
    public static RectangleF DocToPixel(RectangleF val, float zoom);
    public static PointF DeviceDpiToDoc(PointF val, float deviceDpi, float zoom, PointF scrollPos);
    public static RectangleF DeviceDpiToDoc(RectangleF val, float deviceDpi, float zoom, PointF scrollPos);
    public static RectangleF DocToDeviceDpi(RectangleF val, float deviceDpi, float zoom, PointF scrollPos);
    public static PointF DocToDeviceDpi(PointF val, float deviceDpi, float zoom, PointF scrollPos);
    public static float DeviceDpiToDoc(float val, float deviceDpi, float zoom);
    public static SizeF DeviceDpiToDoc(SizeF val, float deviceDpi, float zoom);
    public static PointF DeviceDpiToDoc(PointF val, float deviceDpi, float zoom);
    public static RectangleF DeviceDpiToDoc(RectangleF val, float deviceDpi, float zoom);
    public static float DocToDeviceDpi(float val, float deviceDpi, float zoom);
    public static SizeF DocToDeviceDpi(SizeF val, float deviceDpi, float zoom);
    public static PointF DocToDeviceDpi(PointF val, float deviceDpi, float zoom);
    public static RectangleF DocToDeviceDpi(RectangleF val, float deviceDpi, float zoom);
}
public class DevExpress.XtraPrinting.Native.RectangleDF : ValueType {
    public static RectangleDF Empty;
    private double x;
    private double y;
    private float width;
    private float height;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Left { get; }
    public double Top { get; }
    public double Right { get; }
    public double Bottom { get; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public bool IsEmpty { get; }
    public RectangleDF(double x, double y, float width, float height);
    private static RectangleDF();
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public double get_Left();
    public double get_Top();
    public double get_Right();
    public double get_Bottom();
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public bool get_IsEmpty();
    public bool IntersectsWith(RectangleDF rect);
    public static RectangleDF Offset(RectangleF val, double dx, double dy);
    public static RectangleDF Offset(RectangleDF val, double dx, double dy);
    public void Offset(double dx, double dy);
    public static RectangleDF FromLTRB(double left, double top, double right, double bottom);
    public static RectangleDF FromRectangleF(RectangleF val);
    public RectangleF ToRectangleF();
    public Rectangle ToRectangle();
    public void Intersect(RectangleDF rect);
    public static RectangleDF Intersect(RectangleDF a, RectangleDF b);
    public static RectangleDF op_Implicit(Rectangle r);
    public virtual string ToString();
}
public class DevExpress.XtraPrinting.Native.RectF : RectFBase {
    public static bool Contains(RectangleF baseRect, RectangleF rect);
    public static RectangleF DeflateRect(RectangleF rect, MarginsF margins);
    public static RectangleF Align(RectangleF rect, RectangleF baseRect, BrickAlignment alignment, BrickAlignment lineAlignment);
    public static RectangleF AlignHorz(RectangleF rect, RectangleF baseRect, BrickAlignment alignment);
    public static RectangleF AlignVert(RectangleF rect, RectangleF baseRect, BrickAlignment alignment);
}
public class DevExpress.XtraPrinting.Native.RectFBase : object {
    public static RectangleF FromPoints(PointF pt1, PointF pt2);
    public static RectangleF Offset(RectangleF val, float dx, float dy);
    public static RectangleF Center(RectangleF rect, RectangleF baseRect);
    public static Rectangle Round(RectangleF value);
    public static bool IntersectByX(RectangleF rect1, RectangleF rect2);
    public static bool IntersectByY(RectangleF rect1, RectangleF rect2);
    public static bool ContainsByX(RectangleF rect1, RectangleF rect2);
    public static bool ContainsByY(RectangleF rect1, RectangleF rect2);
    public static bool IntersectAbove(RectangleF baseRect, RectangleF rect);
    public static bool IntersectBelow(RectangleF baseRect, RectangleF rect);
}
public class DevExpress.XtraPrinting.Native.RuntimeTypeDescriptorContext : object {
    private object instance;
    private PropertyDescriptor propDesc;
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public IContainer Container { get; }
    public RuntimeTypeDescriptorContext(PropertyDescriptor propDesc, object instance);
    public static Object[] GetStandardValues(ITypeDescriptorContext context, TypeConverter converter);
    public sealed virtual object get_Instance();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public virtual IContainer get_Container();
    public virtual void OnComponentChanged();
    public virtual bool OnComponentChanging();
    public virtual object GetService(Type serviceType);
}
internal static class DevExpress.XtraPrinting.Native.SystemWebAssemblyLoader : object {
    private static Assembly systemWeb;
    public static Assembly SystemWeb { get; }
    private static Assembly LoadWebAssembly();
    public static Assembly get_SystemWeb();
}
public class DevExpress.XtraPrinting.Native.TextAlignmentConverter : object {
    public static TextAlignment ToTextAlignment(StringAlignment alignment, StringAlignment lineAlignment);
    public static StringAlignment ToAlignment(TextAlignment textAlignment);
    public static StringAlignment ToLineAlignment(TextAlignment textAlignment);
    public static TextAlignment ToTextAlignment(HorzAlignment alignment, VertAlignment lineAlignment);
}
internal class DevExpress.XtraPrinting.Native.UnitName : object {
    internal string name;
    internal GraphicsUnit unit;
    internal static UnitName[] names;
    internal UnitName(string name, GraphicsUnit unit);
    private static UnitName();
}
public static class DevExpress.XtraPrinting.Native.Win32 : object {
    public static int EM_CHARFROMPOS;
    public static int EM_REPLACESEL;
    public static int GWL_EXSTYLE;
    public static int WS_EX_TOOLWINDOW;
    public static int WS_EX_CLIENTEDGE;
    public static int WS_EX_STATICEDGE;
    public static int WS_BORDER;
    public static int WM_DESTROY;
    public static int WM_SETFOCUS;
    public static int WM_KILLFOCUS;
    public static int WM_CONTEXTMENU;
    public static int WM_HSCROLL;
    public static int WM_VSCROLL;
    public static int WM_MOUSEACTIVATE;
    public static int WM_MOUSEFIRST;
    public static int WM_MOUSEMOVE;
    public static int WM_LBUTTONDOWN;
    public static int WM_LBUTTONUP;
    public static int WM_LBUTTONDBLCLK;
    public static int WM_RBUTTONDOWN;
    public static int WM_RBUTTONUP;
    public static int WM_RBUTTONDBLCLK;
    public static int WM_MBUTTONDOWN;
    public static int WM_MBUTTONUP;
    public static int WM_MBUTTONDBLCLK;
    public static int WM_XBUTTONDOWN;
    public static int WM_XBUTTONUP;
    public static int WM_XBUTTONDBLCLK;
    public static int WM_MOUSEWHEEL;
    public static int WM_MOUSELAST;
    public static int WM_CAPTURECHANGED;
    public static int WM_USER;
    public static int EM_FORMATRANGE;
    public static int EM_SETZOOM;
    public static int MM_ISOTROPIC;
    public static int SC_SIZE;
    public static int WM_SYSCOMMAND;
    public static int ROP_DSTINVERT;
    private static Win32();
    public static IntPtr MakeLParam(int low, int high);
    public static int HiWord(IntPtr n);
    private static int HiWord(int n);
    public static int LoWord(IntPtr n);
    private static int LoWord(int n);
    [SuppressUnmanagedCodeSecurityAttribute]
private static bool MoveWindowCore(IntPtr hWnd, int x, int y, int width, int height, bool needRepaint);
    [SecuritySafeCriticalAttribute]
public static bool MoveWindow(IntPtr hWnd, int x, int y, int width, int height, bool needRepaint);
    private static IntPtr GetActiveWindowCore();
    [SecuritySafeCriticalAttribute]
public static IntPtr GetActiveWindow();
    private static IntPtr SetActiveWindowCore(IntPtr hWnd);
    [SecuritySafeCriticalAttribute]
public static IntPtr SetActiveWindow(IntPtr hWnd);
    private static int GetWindowLongCore(IntPtr hWnd, int nIndex);
    [SecuritySafeCriticalAttribute]
public static int GetWindowLong(IntPtr hWnd, int nIndex);
    private static IntPtr SetWindowLongCore(IntPtr hWnd, int nIndex, IntPtr dwNewLong);
    [SecuritySafeCriticalAttribute]
public static IntPtr SetWindowLong(IntPtr hWnd, int nIndex, IntPtr dwNewLong);
    private static bool ShowScrollBarCore(IntPtr hWnd, int wBar, bool bShow);
    [SecuritySafeCriticalAttribute]
public static bool ShowScrollBar(IntPtr hWnd, int wBar, bool bShow);
    private static int SendMessageCore(IntPtr hWnd, int msg, int wParam, IntPtr lParam);
    [SecuritySafeCriticalAttribute]
public static int SendMessage(IntPtr hWnd, int msg, int wParam, IntPtr lParam);
    private static IntPtr SendMessageCore(HandleRef hWnd, int msg, int wParam, IntPtr lParam);
    [SecuritySafeCriticalAttribute]
public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, IntPtr lParam);
    private static IntPtr SendMessageCore(HandleRef hWnd, int msg, int wParam, string s);
    [SecuritySafeCriticalAttribute]
public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, string s);
    private static IntPtr CreateDCCore(string lpszDriver, string lpszDevice, IntPtr lpszOutput, IntPtr lpInitData);
    [SecuritySafeCriticalAttribute]
public static IntPtr CreateDC(string lpszDriver, string lpszDevice, IntPtr lpszOutput, IntPtr lpInitData);
    private static bool DeleteDCCore(IntPtr hdc);
    [SecuritySafeCriticalAttribute]
public static bool DeleteDC(IntPtr hdc);
    private static int SetMapModeCore(HandleRef hDC, int nMapMode);
    [SecuritySafeCriticalAttribute]
public static int SetMapMode(HandleRef hDC, int nMapMode);
    private static bool SetWindowExtExCore(HandleRef hDC, int x, int y, SIZE size);
    [SecuritySafeCriticalAttribute]
public static bool SetWindowExtEx(HandleRef hDC, int x, int y, SIZE size);
    private static bool SetViewportExtExCore(HandleRef hDC, int x, int y, SIZE size);
    [SecuritySafeCriticalAttribute]
public static bool SetViewportExtEx(HandleRef hDC, int x, int y, SIZE size);
    private static bool SetViewportOrgExCore(IntPtr hDC, int x, int y, SIZE size);
    [SecuritySafeCriticalAttribute]
public static bool SetViewportOrgEx(IntPtr hDC, int x, int y, SIZE size);
    private static int BitBltCore(IntPtr hDC, int x, int y, int nWidth, int nHeight, IntPtr hSrcDC, int xSrc, int ySrc, int dwRop);
    [SecuritySafeCriticalAttribute]
public static int BitBlt(IntPtr hDC, int x, int y, int nWidth, int nHeight, IntPtr hSrcDC, int xSrc, int ySrc, int dwRop);
    private static short GetAsyncKeyStateCore(int keyCode);
    [SecuritySafeCriticalAttribute]
public static short GetAsyncKeyState(int keyCode);
    private static void WaitMessageCore();
    [SecuritySafeCriticalAttribute]
public static void WaitMessage();
    private static IntPtr GlobalAllocCore(int uFlags, IntPtr dwBytes);
    [SecuritySafeCriticalAttribute]
public static IntPtr GlobalAlloc(int uFlags, IntPtr dwBytes);
    private static IntPtr GlobalFreeCore(HandleRef handle);
    [SecuritySafeCriticalAttribute]
public static IntPtr GlobalFree(HandleRef handle);
    private static IntPtr GlobalLockCore(HandleRef handle);
    [SecuritySafeCriticalAttribute]
public static IntPtr GlobalLock(HandleRef handle);
    private static bool GlobalUnlockCore(HandleRef handle);
    [SecuritySafeCriticalAttribute]
public static bool GlobalUnlock(HandleRef handle);
    private static IntPtr SetFocusCore(HandleRef hWnd);
    [SecuritySafeCriticalAttribute]
public static IntPtr SetFocus(HandleRef hWnd);
    private static IntPtr GetFocusCore();
    [SecuritySafeCriticalAttribute]
public static IntPtr GetFocus();
}
public class DevExpress.XtraPrinting.Native.XtraSerializableArray`1 : object {
    private T[] values;
    [XtraSerializableProperty]
public T[] Values { get; public set; }
    public T[] get_Values();
    public void set_Values(T[] value);
}
[TypeConverterAttribute("DevExpress.XtraPrinting.Design.PaddingInfoTypeConverter")]
public class DevExpress.XtraPrinting.PaddingInfo : ValueType {
    internal static PaddingInfo Undefined;
    public static PaddingInfo Empty;
    private float left;
    private float right;
    private float top;
    private float bottom;
    private float dpi;
    internal float LeftF { get; internal set; }
    internal float RightF { get; internal set; }
    internal float TopF { get; internal set; }
    internal float BottomF { get; internal set; }
    [DXLocalizedDescriptionAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.All")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.All")]
[RefreshPropertiesAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int All { get; public set; }
    [DXLocalizedDescriptionAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.Left")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.Left")]
[RefreshPropertiesAttribute("1")]
public int Left { get; public set; }
    [DXLocalizedDescriptionAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.Right")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.Right")]
[RefreshPropertiesAttribute("1")]
public int Right { get; public set; }
    [DXLocalizedDescriptionAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.Top")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.Top")]
[RefreshPropertiesAttribute("1")]
public int Top { get; public set; }
    [DXLocalizedDescriptionAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.Bottom")]
[DXDisplayNameAttribute("DevExpress.Data.ResFinder", "DevExpress.XtraPrinting.PaddingInfo.Bottom")]
[RefreshPropertiesAttribute("1")]
public int Bottom { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public float Dpi { get; public set; }
    [BrowsableAttribute("False")]
public bool IsEmpty { get; }
    public PaddingInfo(int left, int right, int top, int bottom);
    public PaddingInfo(int left, int right, int top, int bottom, float dpi);
    private PaddingInfo(float left, float right, float top, float bottom, float dpi);
    public PaddingInfo(float dpi);
    public PaddingInfo(int all, float dpi);
    public PaddingInfo(PaddingInfo src, float dpi);
    public PaddingInfo(PaddingInfo src);
    public PaddingInfo(int left, int right, int top, int bottom, GraphicsUnit graphicsUnit);
    public PaddingInfo(GraphicsUnit graphicsUnit);
    private static PaddingInfo();
    public static PaddingInfo op_Implicit(int offset);
    public static bool op_Inequality(PaddingInfo pad1, PaddingInfo pad2);
    public static bool op_Equality(PaddingInfo pad1, PaddingInfo pad2);
    private static float ValidateZeroRestrictedValue(float value, string paramName);
    internal float get_LeftF();
    internal void set_LeftF(float value);
    internal float get_RightF();
    internal void set_RightF(float value);
    internal float get_TopF();
    internal void set_TopF(float value);
    internal float get_BottomF();
    internal void set_BottomF(float value);
    public int get_All();
    public void set_All(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public float get_Dpi();
    public void set_Dpi(float value);
    public bool get_IsEmpty();
    private void Update(float dpi);
    public sealed virtual bool Equals(PaddingInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void RotatePaddingCounterclockwise(int numberOfTimes);
    public RectangleF Deflate(RectangleF rect, float dpi);
    private float Convert(float val, float toDpi);
    private int ConvertToInt32(float val, float toDpi);
    public RectangleF Inflate(RectangleF rect, float dpi);
    public SizeF Inflate(SizeF size, float dpi);
    public SizeF Deflate(SizeF size, float dpi);
    public float InflateWidth(float width, float dpi);
    public float DeflateWidth(float width, float dpi);
    public float InflateHeight(float height, float dpi);
    public float DeflateHeight(float height, float dpi);
    public float InflateWidth(float width);
    public float DeflateWidth(float width);
    public float InflateHeight(float height);
    public float DeflateHeight(float height);
    internal PaddingInfo Scale(float scaleFactor);
    private void SetLeft(float value);
    private void SetRight(float value);
    private void SetTop(float value);
    private void SetBottom(float value);
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.PageInfo : Enum {
    public byte value__;
    public static PageInfo None;
    public static PageInfo Number;
    public static PageInfo NumberOfTotal;
    public static PageInfo RomLowNumber;
    public static PageInfo RomHiNumber;
    public static PageInfo DateTime;
    public static PageInfo UserName;
    public static PageInfo Total;
}
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.PrintingSystemCommand : Enum {
    public int value__;
    public static PrintingSystemCommand None;
    public static PrintingSystemCommand DocumentMap;
    public static PrintingSystemCommand Parameters;
    public static PrintingSystemCommand Pointer;
    public static PrintingSystemCommand HandTool;
    public static PrintingSystemCommand Customize;
    public static PrintingSystemCommand Print;
    public static PrintingSystemCommand PrintDirect;
    public static PrintingSystemCommand PageSetup;
    public static PrintingSystemCommand EditPageHF;
    public static PrintingSystemCommand Magnifier;
    public static PrintingSystemCommand ZoomIn;
    public static PrintingSystemCommand ZoomOut;
    public static PrintingSystemCommand Zoom;
    public static PrintingSystemCommand ZoomTrackBar;
    public static PrintingSystemCommand ViewWholePage;
    public static PrintingSystemCommand ShowFirstPage;
    public static PrintingSystemCommand ShowPrevPage;
    public static PrintingSystemCommand ShowNextPage;
    public static PrintingSystemCommand ScrollPageUp;
    public static PrintingSystemCommand ScrollPageDown;
    public static PrintingSystemCommand ShowLastPage;
    public static PrintingSystemCommand MultiplePages;
    public static PrintingSystemCommand FillBackground;
    public static PrintingSystemCommand Find;
    public static PrintingSystemCommand ClosePreview;
    public static PrintingSystemCommand Watermark;
    public static PrintingSystemCommand ExportFile;
    public static PrintingSystemCommand SendFile;
    public static PrintingSystemCommand ExportGraphic;
    public static PrintingSystemCommand ExportPdf;
    public static PrintingSystemCommand ExportTxt;
    public static PrintingSystemCommand ExportCsv;
    public static PrintingSystemCommand ExportMht;
    public static PrintingSystemCommand ExportXls;
    public static PrintingSystemCommand ExportXlsx;
    public static PrintingSystemCommand ExportRtf;
    public static PrintingSystemCommand ExportDocx;
    public static PrintingSystemCommand ExportHtm;
    public static PrintingSystemCommand ExportXps;
    public static PrintingSystemCommand SendGraphic;
    public static PrintingSystemCommand SendPdf;
    public static PrintingSystemCommand SendTxt;
    public static PrintingSystemCommand SendCsv;
    public static PrintingSystemCommand SendMht;
    public static PrintingSystemCommand SendXls;
    public static PrintingSystemCommand SendXlsx;
    public static PrintingSystemCommand SendRtf;
    public static PrintingSystemCommand SendDocx;
    public static PrintingSystemCommand SendXps;
    public static PrintingSystemCommand ZoomToPageWidth;
    public static PrintingSystemCommand ZoomToTextWidth;
    public static PrintingSystemCommand ZoomToWholePage;
    public static PrintingSystemCommand ZoomToTwoPages;
    public static PrintingSystemCommand PageLayout;
    public static PrintingSystemCommand PageLayoutFacing;
    public static PrintingSystemCommand PageLayoutContinuous;
    public static PrintingSystemCommand File;
    public static PrintingSystemCommand View;
    public static PrintingSystemCommand Background;
    public static PrintingSystemCommand Scale;
    public static PrintingSystemCommand PaperSize;
    public static PrintingSystemCommand PageOrientation;
    public static PrintingSystemCommand PageMargins;
    public static PrintingSystemCommand Open;
    public static PrintingSystemCommand Save;
    public static PrintingSystemCommand StopPageBuilding;
    public static PrintingSystemCommand SubmitParameters;
    public static PrintingSystemCommand Copy;
    public static PrintingSystemCommand PrintSelection;
    public static PrintingSystemCommand GoToPage;
    public static PrintingSystemCommand Thumbnails;
    public static PrintingSystemCommand HighlightEditingFields;
}
[ExtensionAttribute]
[ObsoleteAttribute("Use the GraphicsUnitConverter class methods.", "True")]
[EditorBrowsableAttribute("1")]
public static class DevExpress.XtraPrinting.RectangleFExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use the GraphicsUnitConverter.Convert method.", "True")]
[EditorBrowsableAttribute("1")]
public static RectangleF Convert(RectangleF rect, float fromDpi, float toDpi);
}
public class DevExpress.XtraPrinting.StringUtils : object {
    public static string Join(string separator, string str1, string str2);
    public static string Join(string separator, String[] array);
    public static string Join(string separator, List`1<string> list);
    public static bool IsAllLettersUpper(string input);
}
[FlagsAttribute]
public enum DevExpress.XtraPrinting.StyleProperty : Enum {
    public int value__;
    public static StyleProperty None;
    public static StyleProperty BackColor;
    public static StyleProperty ForeColor;
    public static StyleProperty BorderColor;
    public static StyleProperty Font;
    public static StyleProperty BorderDashStyle;
    public static StyleProperty Borders;
    public static StyleProperty BorderWidth;
    public static StyleProperty TextAlignment;
    public static StyleProperty Padding;
    public static StyleProperty All;
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.TextAlignment : Enum {
    public int value__;
    public static TextAlignment TopLeft;
    public static TextAlignment TopCenter;
    public static TextAlignment TopRight;
    public static TextAlignment MiddleLeft;
    public static TextAlignment MiddleCenter;
    public static TextAlignment MiddleRight;
    public static TextAlignment BottomLeft;
    public static TextAlignment BottomCenter;
    public static TextAlignment BottomRight;
    public static TextAlignment TopJustify;
    public static TextAlignment MiddleJustify;
    public static TextAlignment BottomJustify;
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.TextRenderingMode : Enum {
    public int value__;
    public static TextRenderingMode SystemDefault;
    public static TextRenderingMode SingleBitPerPixelGridFit;
    public static TextRenderingMode SingleBitPerPixel;
    public static TextRenderingMode AntiAliasGridFit;
    public static TextRenderingMode AntiAlias;
    public static TextRenderingMode ClearTypeGridFit;
}
public static class DevExpress.XtraPrinting.Tracer : object {
    private static object locker;
    private static Dictionary`2<string, TraceSource> traceSources;
    private static Dictionary`2<string, TraceSource> TraceSources { get; }
    private static Tracer();
    private static Dictionary`2<string, TraceSource> get_TraceSources();
    public static TraceSource GetSource(string traceSourceName);
    public static TraceSource GetSource(string traceSourceName, SourceLevels mandatoryLevel);
    public static bool TryGetSource(string traceSourceName, TraceSource& ts);
    [ConditionalAttribute("DEBUGTEST")]
public static void InitializeSourceForDebug(string traceSourceName);
    private static void RemoveListener(TraceSource ts, string name);
    public static void TraceWarning(string traceSourceName, object data);
    public static void TraceInformation(string traceSourceName, object data);
    [ConditionalAttribute("DEBUG")]
public static void TraceInformationTest(string traceSourceName, object data);
    public static void TraceError(string traceSourceName, object data);
    public static void TraceData(string traceSourceName, TraceEventType eventType, object data, int id);
    public static void TraceData(string traceSourceName, Action`1<TraceSource> callback);
}
[TypeConverterAttribute("DevExpress.Utils.Design.VerticalContentSplittingConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraPrinting.VerticalContentSplitting : Enum {
    public int value__;
    public static VerticalContentSplitting Exact;
    public static VerticalContentSplitting Smart;
}
[DataContractAttribute]
public class DevExpress.XtraReports.Configuration.DataSourceSettings : object {
    [CompilerGeneratedAttribute]
private bool <AllowAddDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRemoveDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEditDataSource>k__BackingField;
    [DataMemberAttribute]
public bool AllowAddDataSource { get; public set; }
    [DataMemberAttribute]
public bool AllowRemoveDataSource { get; public set; }
    [DataMemberAttribute]
public bool AllowEditDataSource { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowAddDataSource();
    [CompilerGeneratedAttribute]
public void set_AllowAddDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowRemoveDataSource();
    [CompilerGeneratedAttribute]
public void set_AllowRemoveDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEditDataSource();
    [CompilerGeneratedAttribute]
public void set_AllowEditDataSource(bool value);
    public void Assign(DataSourceSettings source);
}
public static class DevExpress.XtraReports.Design.AttributeSR : object {
    public static string ToolboxItemFilter;
    public static string SchedulerToolboxItem;
    public static string SchedulerToolboxItemFilter;
}
public class DevExpress.XtraReports.Design.Commands.CommandExecuteEventArgs : EventArgs {
    private Object[] args;
    public Object[] Args { get; }
    public CommandExecuteEventArgs(Object[] args);
    public Object[] get_Args();
}
public class DevExpress.XtraReports.Design.Commands.CommandSetItem : MenuCommand {
    private MenuCommand menuCommand;
    private EventHandler statusHandler;
    private EventHandler`1<CommandExecuteEventArgs> execHandler;
    [CompilerGeneratedAttribute]
private IMenuCommandService <MenuService>k__BackingField;
    private bool locked;
    protected IMenuCommandService MenuService { get; private set; }
    public bool Locked { get; public set; }
    public CommandSetItem(IMenuCommandService menuService, EventHandler`1<CommandExecuteEventArgs> invokeHandler, EventHandler statusHandler, CommandID commandID);
    [CompilerGeneratedAttribute]
protected IMenuCommandService get_MenuService();
    [CompilerGeneratedAttribute]
private void set_MenuService(IMenuCommandService value);
    public bool get_Locked();
    public void set_Locked(bool value);
    public virtual void Invoke(Object[] args);
    public virtual void Invoke(object arg);
    public virtual void Invoke();
    public void UpdateStatus();
    public void Disable();
    private MenuCommand GetActualCommand();
}
public static class DevExpress.XtraReports.Design.Commands.FieldListCommands : object {
    private static int cmdidAddCalculatedField;
    private static int cmdidDeleteCalculatedField;
    private static int cmdidEditCalculatedFields;
    private static int cmdidEditExpressionCalculatedField;
    private static int cmdidAddParameter;
    private static int cmdidEditParameters;
    private static int cmdidDeleteParameter;
    private static int cmdidClearCalculatedFields;
    private static int cmdidClearParameters;
    private static Guid fieldListCommandSet;
    public static CommandID AddCalculatedField;
    public static CommandID DeleteCalculatedField;
    public static CommandID EditCalculatedFields;
    public static CommandID EditExpressionCalculatedField;
    public static CommandID AddParameter;
    public static CommandID EditParameters;
    public static CommandID DeleteParameter;
    public static CommandID ClearCalculatedFields;
    public static CommandID ClearParameters;
    public static CommandID[] AllCommands { get; }
    private static FieldListCommands();
    public static CommandID[] get_AllCommands();
}
public interface DevExpress.XtraReports.Design.Commands.ICommandExecutor {
    public abstract virtual void ExecCommand(CommandID cmdID, Object[] parameters);
}
public class DevExpress.XtraReports.Design.Commands.MenuCommandEventArgs : EventArgs {
    private MenuCommand menuCommand;
    public MenuCommand MenuCommand { get; }
    public MenuCommandEventArgs(MenuCommand menuCommand);
    public MenuCommand get_MenuCommand();
}
public class DevExpress.XtraReports.Design.Commands.MenuCommandEventHandler : MulticastDelegate {
    public MenuCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MenuCommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MenuCommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class DevExpress.XtraReports.Design.Commands.MenuCommandHandlerBase : object {
    protected CommandSetItemCollection commands;
    protected MenuCommandEventHandler onCommandStatusChanged;
    protected Dictionary`2<CommandID, ICommandExecutor> execHT;
    protected EventHandler`1<CommandExecuteEventArgs> commandHandler;
    protected IMenuCommandService menuService;
    public MenuCommandHandlerBase(IServiceProvider serviceProvider);
    public static void InvokeCommandEx(MenuCommand command, Object[] args);
    public void add_CommandStatusChanged(MenuCommandEventHandler value);
    public void remove_CommandStatusChanged(MenuCommandEventHandler value);
    private void OnMenuCommand(object sender, CommandExecuteEventArgs e);
    private void ExecuteCommand(CommandID cmdID, Object[] parameters);
    private void OnCommandStatusChanged(object sender, MenuCommandEventArgs e);
    public void AddCommandExecutor(ICommandExecutor executor, EventHandler statusHandler, bool supported, CommandID[] ids);
    protected void OnCommandChanged(object sender, EventArgs e);
    public void AddCommand(CommandSetItem cmd);
    public virtual void UpdateCommandStatus();
    public virtual void Dispose();
}
public enum DevExpress.XtraReports.Design.ShowComplexProperties : Enum {
    public int value__;
    public static ShowComplexProperties Default;
    public static ShowComplexProperties First;
    public static ShowComplexProperties Last;
}
public class DevExpress.XtraReports.Native.ClientCriteriaVisitorBase : object {
    protected CriteriaOperator Process(CriteriaOperator criteriaOperator);
    private void ProcessCollection(CriteriaOperatorCollection operands);
    public virtual CriteriaOperator Visit(OperandProperty theOperand);
    public virtual CriteriaOperator Visit(AggregateOperand theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(JoinOperand theOperand);
    public virtual CriteriaOperator Visit(FunctionOperator theOperator);
    public virtual CriteriaOperator Visit(OperandValue theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(GroupOperator theOperator);
    public virtual CriteriaOperator Visit(InOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(UnaryOperator theOperator);
    public virtual CriteriaOperator Visit(BinaryOperator theOperator);
    public virtual CriteriaOperator Visit(BetweenOperator theOperator);
}
public static class DevExpress.XtraReports.Native.CriteriaFieldNameConverterCore : object {
    public static string Convert(string source, Func`2<string, string> convertFunc);
    public static string Convert(string source, FilterStringVisitorBase visitor);
    public static string EscapeFieldName(string fieldName);
    private static string CorrectBackRefs(string src, string replacement);
}
public class DevExpress.XtraReports.Native.CriteriaNameExtractor : object {
    private CriteriaOperator criteria;
    private String[] columnNames;
    private String[] columnFullNames;
    private String[] paramNames;
    private IDictionary`2<string, string> propertyFullNames;
    private String[] parameterNames;
    public String[] ColumnFullNames { get; }
    public CriteriaNameExtractor(CriteriaOperator criteria);
    public CriteriaNameExtractor(string expression, bool throwException);
    public String[] get_ColumnFullNames();
    public String[] GetColumnNames();
    public String[] GetParameterNames();
    protected void EnsureNames();
    private static string AdjustName(string name);
    private static bool TryGetVariableName(string path, String& name);
    private void UpdateNamesCore(CriteriaOperator criteria);
    protected virtual void OnVisitorCompleted(FullNameFilterStringVisitor visitor);
    protected virtual FullNameFilterStringVisitor CreateFullNameFilterStringVisitor();
}
public class DevExpress.XtraReports.Native.CriteriaTokenWrapper : object {
    internal static int OpenBrace;
    internal static int CloseBrace;
    internal static int UpSymbol;
    [CompilerGeneratedAttribute]
private List`1<WrappedCriteriaToken> <WrappedTokens>k__BackingField;
    public List`1<WrappedCriteriaToken> WrappedTokens { get; public set; }
    public CriteriaTokenWrapper(CriteriaLexerTokenHelper criteriaLexerTokenHelper);
    [CompilerGeneratedAttribute]
public List`1<WrappedCriteriaToken> get_WrappedTokens();
    [CompilerGeneratedAttribute]
public void set_WrappedTokens(List`1<WrappedCriteriaToken> value);
    private int ProcessTokens(List`1<CriteriaLexerToken> tokens, List`1<WrappedCriteriaToken> fullPathTokens, IEnumerable`1<string> dataMember, int position);
    public static int GetDepth(string s);
}
public class DevExpress.XtraReports.Native.Data.AggregatedPropertyDescriptor : PropertyDescriptorWrapper {
    private Type propertyType;
    private string displayName;
    private string name;
    public string Name { get; }
    public string DisplayName { get; }
    public Type PropertyType { get; }
    public AggregatedPropertyDescriptor(PropertyDescriptor oldPropertyDescriptor, Type propertyType);
    public AggregatedPropertyDescriptor(PropertyDescriptor oldPropertyDescriptor, Type propertyType, string name);
    public virtual string get_Name();
    public virtual string get_DisplayName();
    public virtual Type get_PropertyType();
}
public class DevExpress.XtraReports.Native.Data.CustomDataBrowser : DataBrowser {
    private CustomPropertiesContainer customPropertiesContainer;
    public CustomDataBrowser(object dataSource, bool suppressListFilling);
    public virtual PropertyDescriptorCollection GetItemProperties();
    private sealed virtual override void DevExpress.XtraReports.Native.Data.IPropertiesContainer.SetCustomProperties(PropertyDescriptor[] customProperties);
}
public class DevExpress.XtraReports.Native.Data.CustomListBrowser : ListBrowser {
    private CustomPropertiesContainer customPropertiesContainer;
    public CustomListBrowser(object dataSource, IListController listController, bool suppressListFilling);
    protected CustomListBrowser(IListController listController, bool suppressListFilling);
    public virtual PropertyDescriptorCollection GetItemProperties();
    protected virtual bool IsStandardType(Type propType);
    private sealed virtual override void DevExpress.XtraReports.Native.Data.IPropertiesContainer.SetCustomProperties(PropertyDescriptor[] customProperties);
}
public class DevExpress.XtraReports.Native.Data.CustomPropertiesContainer : object {
    private PropertyDescriptor[] customProperties;
    public CustomPropertiesContainer(PropertyDescriptor[] customProperties);
    public PropertyDescriptorCollection MergeProperties(PropertyDescriptorCollection properties);
}
internal class DevExpress.XtraReports.Native.Data.CustomPropertyDescriptorCollection : PropertyDescriptorCollection {
    private PropertyDescriptorCollection source;
    public CustomPropertyDescriptorCollection(PropertyDescriptorCollection source, PropertyDescriptor[] properties);
    public virtual PropertyDescriptor Find(string name, bool ignoreCase);
}
public class DevExpress.XtraReports.Native.Data.CustomRelatedListBrowser : RelatedListBrowser {
    private CustomPropertiesContainer customPropertiesContainer;
    public CustomRelatedListBrowser(DataBrowser parent, PropertyDescriptor listAccessor, IListController listController, bool suppressListFilling);
    protected CustomRelatedListBrowser(IListController listController, bool suppressListFilling);
    public virtual PropertyDescriptorCollection GetItemProperties();
    private sealed virtual override void DevExpress.XtraReports.Native.Data.IPropertiesContainer.SetCustomProperties(PropertyDescriptor[] customProperties);
}
public class DevExpress.XtraReports.Native.Data.DataContextServiceBase : object {
    internal static ColumnSortOrder DefaultSortOrder;
    protected Dictionary`2<DataContextOptions, DataContext> dictionary;
    private ColumnSortOrder propertiesSortOrder;
    private ShowComplexProperties showComplexProperties;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataContextFilterPropertiesEventArgs> PrefilterProperties;
    public ShowComplexProperties ShowComplexProperties { get; public set; }
    public ColumnSortOrder PropertiesSortOrder { get; public set; }
    protected IEnumerable`1<ICalculatedField> CalculatedFields { get; }
    protected bool SuppressListFilling { get; }
    public ShowComplexProperties get_ShowComplexProperties();
    public void set_ShowComplexProperties(ShowComplexProperties value);
    public ColumnSortOrder get_PropertiesSortOrder();
    public void set_PropertiesSortOrder(ColumnSortOrder value);
    protected virtual IEnumerable`1<ICalculatedField> get_CalculatedFields();
    protected virtual bool get_SuppressListFilling();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PrefilterProperties(EventHandler`1<DataContextFilterPropertiesEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PrefilterProperties(EventHandler`1<DataContextFilterPropertiesEventArgs> value);
    protected void DisposeDataContext();
    public virtual void Dispose();
    private sealed virtual override PropertyDescriptor[] DevExpress.Data.Browsing.Design.IDataContextService.FilterProperties(PropertyDescriptor[] properties, object dataSource, string dataMember, DataContext dataContext);
    protected virtual PropertyDescriptor[] FilterProperties(PropertyDescriptor[] properties, object dataSource, string dataMember, DataContext dataContext);
    public virtual void SortProperties(IPropertyDescriptor[] properties);
    private static int ToFactor(IPropertyDescriptor property);
    public sealed virtual DataContext CreateDataContext(DataContextOptions options, bool useCache);
    public sealed virtual DataContext CreateDataContext(DataContextOptions options);
    protected virtual DataContext CreateDataContextInternal(DataContextOptions options);
}
public class DevExpress.XtraReports.Native.Data.DataSortedPropertiesProvider : DataSortedPropertiesNativeProvider {
    public DataSortedPropertiesProvider(DataContext dataContext, IDataContextService serv);
}
public interface DevExpress.XtraReports.Native.Data.ICalculatedFieldsApplicator {
    public abstract virtual void ApplyCalculatedFields();
}
public interface DevExpress.XtraReports.Native.Data.IPropertiesContainer {
    public abstract virtual void SetCustomProperties(PropertyDescriptor[] customProperties);
}
public class DevExpress.XtraReports.Native.Data.PropertyAggregator : object {
    public static string ReferenceAsObjectTail;
    public static string ReferenceAsKeyTail;
    private DataContext dataContext;
    public PropertyAggregator(DataContext dataContext);
    public static PropertyDescriptor[] Aggregate(ICollection properties);
    public PropertyDescriptor[] Aggregate(ICollection properties, object dataSource, string dataMember);
    protected string GetName(PropertyDescriptor property);
    protected virtual bool IsXpoDescriptor(PropertyDescriptor property);
    private PropertyDescriptor GetProperty(List`1<PropertyDescriptor> list, object dataSource, string dataMember);
    protected virtual PropertyDescriptor GetAggregatedProperty(PropertyDescriptor property, List`1<PropertyDescriptor> list, object dataSource, string dataMember);
}
public class DevExpress.XtraReports.Native.Data.XRDataContextBase : DataContext {
    private bool isCalculatedFieldsApplied;
    private bool isCalculatedFieldsApplying;
    protected IEnumerable`1<IParameter> parameters;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ICalculatedField> <CalculatedFields>k__BackingField;
    internal IEnumerable`1<IParameter> Parameters { get; }
    internal IEnumerable`1<ICalculatedField> CalculatedFields { get; private set; }
    public XRDataContextBase(IEnumerable`1<ICalculatedField> calculatedFields);
    public XRDataContextBase(IEnumerable`1<ICalculatedField> calculatedFields, bool suppressListFilling);
    public XRDataContextBase(IEnumerable`1<ICalculatedField> calculatedFields, IEnumerable`1<IParameter> parameters, bool suppressListFilling);
    internal IEnumerable`1<IParameter> get_Parameters();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<ICalculatedField> get_CalculatedFields();
    [CompilerGeneratedAttribute]
private void set_CalculatedFields(IEnumerable`1<ICalculatedField> value);
    public void ApplyCalculatedFields(IEnumerable`1<ICalculatedField> calculatedFields);
    public virtual void Clear();
    protected internal void ResetCalculatedFieldsApplied();
    protected internal virtual XRDataContextBase Clone();
    protected virtual void EnsureCalculatedFields();
    protected virtual RelatedListBrowser CreateRelatedListBrowser(DataPair data, DataBrowser parent, PropertyDescriptor prop, ListControllerBase listController);
    protected virtual ListBrowser CreateListBrowser(DataPair data, ListControllerBase listController);
    protected virtual CalculatedPropertyDescriptorBase CreateCalculatedPropertyDescriptor(ICalculatedField calculatedField);
    public bool IsDataMemberValid(object dataSource, string dataMember);
    public string GetDataMemberFromDisplayName(object dataSource, string dataMember, string displayName);
    public List`1<PropertyDescriptor> GetSplittedDataMember(object dataSource, string parentDataMember, string dataMember);
    private static string ConcatStrings(string s1, string s2);
    public ObjectNameCollection GetItemDisplayNames(object dataSource, string dataMember);
    public ObjectNameCollection GetItemDisplayNames(object dataSource, string dataMember, bool forceList);
    private string GetActualDataMember(object dataSource, string parentDataMember, string dataMember);
    public string GetActualDataMember(object dataSource, string dataMember);
    protected virtual bool IsIDisplayNameProviderSupported(PropertyDescriptor property);
}
public class DevExpress.XtraReports.Native.Data.XRTypeSpecificService : TypeSpecificsService {
    private Dictionary`2<TypeSpecifics, TypeSpecifics> calcDict;
    public virtual TypeSpecifics GetPropertyTypeSpecifics(PropertyDescriptor property);
    public virtual TypeSpecifics GetTypeSpecifics(Type type);
}
public class DevExpress.XtraReports.Native.DeserializationFilterStringVisitor : ClientCriteriaVisitorBase {
    private IExtensionsProvider rootComponent;
    private DataContext dataContext;
    private object dataSource;
    private string dataMember;
    private Stack`1<string> prefixElements;
    public DeserializationFilterStringVisitor(IExtensionsProvider rootComponent, DataContext dataContext, object dataSource, string dataMember);
    public virtual CriteriaOperator Visit(BinaryOperator theOperator);
    public virtual CriteriaOperator Visit(InOperator theOperator);
    public virtual CriteriaOperator Visit(BetweenOperator theOperator);
    public virtual CriteriaOperator Visit(AggregateOperand theOperand);
    private void TryConvertOperand(OperandProperty leftOperand, CriteriaOperator criteriaOperator);
    private string GetFullName(string property);
    private Type DetectType(string dataMember);
    private static void SplitDataMember(string dataMember, String& first, String& second);
}
public static class DevExpress.XtraReports.Native.FieldNameTransformer : object {
    public static string GetColumnName(string reportDataMember, string dataMember);
    public static string GetLongFieldDisplayName(XRDataContextBase dataContext, object dataSource, string dataMember, string fieldName);
    public static string GetShortFieldDisplayName(XRDataContextBase dataContext, object dataSource, string dataMember, string fieldName);
    private static string GetShortFieldDisplayNameCore(XRDataContextBase dataContext, object dataSource, string dataMember, string fieldName);
    public static string GetLongFieldRealName(XRDataContextBase dataContext, object dataSource, string dataMember, string displayName);
    public static string GetShortFieldRealName(XRDataContextBase dataContext, object dataSource, string dataMember, string displayName);
}
public abstract class DevExpress.XtraReports.Native.FilterStringVisitorBase : ClientCriteriaVisitorBase {
    private List`1<string> propertyElements;
    [CompilerGeneratedAttribute]
private IList`1<string> <ResultNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ResultFullNames>k__BackingField;
    public IList`1<string> ResultNames { get; private set; }
    public IDictionary`2<string, string> ResultFullNames { get; private set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_ResultNames();
    [CompilerGeneratedAttribute]
private void set_ResultNames(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ResultFullNames();
    [CompilerGeneratedAttribute]
private void set_ResultFullNames(IDictionary`2<string, string> value);
    public abstract virtual string ConvertNameCore(string name);
    public virtual CriteriaOperator Visit(OperandProperty theOperand);
    public virtual CriteriaOperator Visit(AggregateOperand theOperand);
    private void AddName(string name);
    private string SkipPrefix(string displayName, int upDepth);
    private string GetPropertyName(string propertyName);
    private string GetPropertyName(string propertyName, int upDepth);
    private int GetUpDepth(String& propertyName);
}
public class DevExpress.XtraReports.Native.FullNameFilterStringVisitor : FilterStringVisitorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <ParameterNames>k__BackingField;
    public IList`1<string> ParameterNames { get; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_ParameterNames();
    public virtual string ConvertNameCore(string name);
    public virtual CriteriaOperator Visit(OperandValue theOperand);
}
public interface DevExpress.XtraReports.Native.ICalculatedField {
    public string Name { get; }
    public string DisplayName { get; }
    public string Expression { get; }
    public FieldType FieldType { get; }
    public object DataSource { get; }
    public string DataMember { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Expression();
    public abstract virtual FieldType get_FieldType();
    public abstract virtual object get_DataSource();
    public abstract virtual string get_DataMember();
}
[ObsoleteAttribute("Use IParameterSupplierBase interface instead")]
public interface DevExpress.XtraReports.Native.ICalculatedFieldsOwner {
    public IEnumerable`1<IParameter> Parameters { get; }
    public abstract virtual IEnumerable`1<IParameter> get_Parameters();
}
public interface DevExpress.XtraReports.Native.IDataSerializer {
    public abstract virtual bool CanSerialize(object data, object extensionProvider);
    public abstract virtual string Serialize(object data, object extensionProvider);
    public abstract virtual bool CanDeserialize(string value, string typeName, object extensionProvider);
    public abstract virtual object Deserialize(string value, string typeName, object extensionProvider);
}
public interface DevExpress.XtraReports.Native.IExtensionsProvider {
    public IDictionary`2<string, string> Extensions { get; }
    public abstract virtual IDictionary`2<string, string> get_Extensions();
}
public class DevExpress.XtraReports.Native.InstanceProvider`1 : object {
    private Dictionary`2<string, InstanceType> repository;
    protected void SetInstance(string contextName, InstanceType value);
    protected bool RemoveInstance(string contextName);
    protected InstanceType GetInstance(string contextName);
}
internal interface DevExpress.XtraReports.Native.IWinControlWrapper {
    public Size Size { get; public set; }
    public RectangleF Bounds { get; }
    public object Control { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_SizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SizeChanged(EventHandler value);
    public abstract virtual Size get_Size();
    public abstract virtual void set_Size(Size value);
    public abstract virtual RectangleF get_Bounds();
    public abstract virtual object get_Control();
    public abstract virtual void ForceHandle();
    public abstract virtual void ClearDataBindings();
    public abstract virtual void RemoveFromDummyForm();
    public abstract virtual void ValidateControlForm(Color reportPageColor);
    public abstract virtual Image GetImage(WinControlDrawMethod_Utils drawMethod, WinControlImageType_Utils imageType);
}
public class DevExpress.XtraReports.Native.ObjectName : object {
    private string displayName;
    private string name;
    private string dataMember;
    public string Name { get; }
    public string FullName { get; }
    public string DisplayName { get; }
    public ObjectName(string name, string displayName);
    public ObjectName(string name, string displayName, string dataMember);
    public string get_Name();
    public string get_FullName();
    public string get_DisplayName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.XtraReports.Native.ObjectNameCollection : CollectionBase {
    public ObjectName Item { get; }
    public ObjectName get_Item(int index);
    public void CopyFrom(ObjectNameCollection source);
    public int Add(string name, string displayName);
    public void AddRange(ObjectNameCollection items);
    public int Add(ObjectName item);
    public int IndexOf(string displayName);
    public int IndexOfByName(string name);
    public ObjectName GetItemByName(string name);
    public void Sort(IComparer comparer);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.XtraReports.Native.ObjectNameCollectionsSet : CollectionBase {
    public ObjectNameCollection Item { get; public set; }
    public ObjectNameCollection get_Item(int index);
    public void set_Item(int index, ObjectNameCollection value);
    public int Add(ObjectNameCollection collection);
    public void AddRange(ObjectNameCollectionsSet c);
}
public class DevExpress.XtraReports.Native.Parameters.ParameterPropertyDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]
private IParameter <Parameter>k__BackingField;
    private object temporaryValue;
    private object initialValue;
    private bool changed;
    private bool resetToInitialValue;
    internal IParameter Parameter { get; }
    private object DevExpress.Services.Internal.IContainerComponent.Component { get; }
    public Type ComponentType { get; }
    public TypeConverter Converter { get; }
    public Type PropertyType { get; }
    public bool IsReadOnly { get; }
    public AttributeCollection Attributes { get; }
    internal bool IsRangeParameter { get; }
    public ParameterPropertyDescriptor(IParameter parameter);
    public ParameterPropertyDescriptor(IParameter parameter, bool resetToInitialValue);
    public static bool GetAllowNull(IParameter parameter);
    [CompilerGeneratedAttribute]
internal IParameter get_Parameter();
    private sealed virtual override object DevExpress.Services.Internal.IContainerComponent.get_Component();
    public virtual Type get_ComponentType();
    public virtual TypeConverter get_Converter();
    public virtual Type get_PropertyType();
    public virtual bool get_IsReadOnly();
    public virtual AttributeCollection get_Attributes();
    internal bool get_IsRangeParameter();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public void Commit();
    public void Reset();
    public bool CanReset();
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.XtraReports.Native.Parameters.ParametersDataSource : object {
    private IEnumerable`1<IParameter> parameters;
    private List`1<object> innerList;
    private string listName;
    public IEnumerable`1<IParameter> Parameters { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ParametersDataSource(IEnumerable`1<IParameter> parameters, string listName);
    public IEnumerable`1<IParameter> get_Parameters();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.XtraReports.Native.Parameters.ParametersReplacer : ClientCriteriaVisitorBase {
    private static string parameterPrefix;
    private static Regex inOperandRegex;
    private static ParametersReplacer();
    internal static string GetParameterName(string s);
    internal static string GetParameterFormattedName(string name);
    internal static string GetParameterFullName(string name);
    public static string UpgradeFilterString(string filterString);
    public virtual CriteriaOperator Visit(OperandProperty theOperand);
    public virtual CriteriaOperator Visit(OperandValue theOperand);
    private static CriteriaOperator[] CreateConcatParams(string prefix, string parameterName, string suffix);
}
public class DevExpress.XtraReports.Native.Parameters.ParametersValueSetter : ClientCriteriaVisitorBase {
    private IEnumerable`1<IParameter> parameters;
    private Action`1<string> onInvalidParameterName;
    protected IEnumerable`1<IParameter> Parameters { get; }
    public ParametersValueSetter(IEnumerable`1<IParameter> parameters);
    public ParametersValueSetter(IEnumerable`1<IParameter> parameters, Action`1<string> onInvalidParameterName);
    public static void Process(CriteriaOperator criteriaOperator, IEnumerable`1<IParameter> parameters);
    public static void Process(ParametersValueSetter setter, CriteriaOperator criteriaOperator);
    protected IEnumerable`1<IParameter> get_Parameters();
    public virtual CriteriaOperator Visit(OperandValue theOperand);
    public virtual CriteriaOperator Visit(InOperator theOperator);
    private void SubstituteMultivalueParameters(CriteriaOperatorCollection operands);
    private bool IsMultivalueParameter(CriteriaOperator operand);
}
public class DevExpress.XtraReports.Native.PropertyDescriptorWrapper : PropertyDescriptor {
    protected PropertyDescriptor oldPropertyDescriptor;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public PropertyDescriptorWrapper(PropertyDescriptor oldPropertyDescriptor);
    public PropertyDescriptorWrapper(PropertyDescriptor oldPropertyDescriptor, Attribute[] attrs);
    public virtual bool CanResetValue(object component);
    public virtual Type get_ComponentType();
    public virtual object GetValue(object component);
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.XtraReports.Native.SerializationService : InstanceProvider`1<IDataSerializer> {
    public static string Guid;
    private static object padlock;
    private static SerializationService instance;
    private static SerializationService();
    public static void RegisterSerializer(string contextName, IDataSerializer serializer);
    public static bool UnregisterSerializer(string contextName);
    public static bool TryGetSerializer(string contextName, IDataSerializer& value);
    public static bool SerializeObject(object value, String& result, IExtensionsProvider extensionProvider);
    public static bool DeserializeObject(string value, Type destType, Object& result, IExtensionsProvider extensionProvider);
    public static bool DeserializeObject(string value, string typeName, Object& result, IExtensionsProvider rootComponent);
    private IDataSerializer GetSerializer(IExtensionsProvider extensionsProvider);
    private bool Serialize(object value, String& result, IExtensionsProvider extensionProvider);
    private bool Deserialize(string value, string typeName, Object& result, IExtensionsProvider extensionProvider);
}
public class DevExpress.XtraReports.Native.WrappedCriteriaToken : object {
    [CompilerGeneratedAttribute]
private List`1<string> <CurrentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ContextPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentName>k__BackingField;
    [CompilerGeneratedAttribute]
private CriteriaLexerToken <Token>k__BackingField;
    public IEnumerable`1<string> FullPath { get; }
    public List`1<string> CurrentPath { get; public set; }
    public IEnumerable`1<string> ContextPath { get; public set; }
    public string CurrentName { get; public set; }
    public CriteriaLexerToken Token { get; public set; }
    public IEnumerable`1<string> get_FullPath();
    [CompilerGeneratedAttribute]
public List`1<string> get_CurrentPath();
    [CompilerGeneratedAttribute]
public void set_CurrentPath(List`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ContextPath();
    [CompilerGeneratedAttribute]
public void set_ContextPath(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_CurrentName();
    [CompilerGeneratedAttribute]
public void set_CurrentName(string value);
    [CompilerGeneratedAttribute]
public CriteriaLexerToken get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(CriteriaLexerToken value);
    public string GetConvertedName(Func`2<string, string> convertFunc);
}
public interface DevExpress.XtraReports.Parameters.Native.IParameterAllValuesService {
    public abstract virtual void Suppress(IDataContainerBase dataContainer);
    public abstract virtual bool IsSuppressed(IDataContainerBase dataContainer);
}
public interface DevExpress.XtraReports.Parameters.Native.IParameterExpressionValueService {
}
public interface DevExpress.XtraReports.Parameters.Native.IParameterServiceBase {
    public abstract virtual bool IsSupported(IParameter parameter);
    public abstract virtual void Suppress(IParameter parameter);
    public abstract virtual bool IsSuppressed(IParameter parameter);
    public abstract virtual bool Update(IParameter parameter, DataContext dataContext);
    public abstract virtual Task`1<bool> UpdateAsync(IParameter parameter, DataContext dataContext, CancellationToken cancellationToken);
    public abstract virtual void Reset();
}
public interface DevExpress.XtraReports.Parameters.Native.IRange {
    public object Start { get; }
    public object End { get; }
    public abstract virtual object get_Start();
    public abstract virtual object get_End();
}
[ExtensionAttribute]
public static class DevExpress.XtraReports.Parameters.Native.ParameterServiceBaseExtensions : object {
    [ExtensionAttribute]
public static void UpdateAndSuppress(IParameterServiceBase service, IParameter parameter, DataContext dataContext);
    [AsyncStateMachineAttribute("DevExpress.XtraReports.Parameters.Native.ParameterServiceBaseExtensions/<UpdateAndSuppressAsync>d__1")]
[ExtensionAttribute]
public static Task UpdateAndSuppressAsync(IParameterServiceBase service, IParameter parameter, DataContext dataContext, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class DevExpress.XtraReports.Parameters.ParameterHelper : object {
    public static string ParametersPrefix;
    public static bool TryConvertValue(object value, Object& result, Type type, CultureInfo culture);
    public static IEnumerable EnsureEnumerable(object value);
    public static bool TryConvertEnumerable(IEnumerable value, Object& result, Type type, CultureInfo culture);
    public static bool TryGetParameterName(string path, String& parameterName);
    [ExtensionAttribute]
public static T GetByName(IEnumerable`1<T> parameters, string parameterName);
    private static object CreateDefaultValue(Type type);
    public static object GetDefaultValue(Type type);
    public static bool ShouldConvertValue(object value, Type type);
    public static object ConvertFrom(object value, Type type, object defaultValue);
    public static object ConvertFrom(object value, Type type, object defaultValue, CultureInfo culture);
    private static bool TryConvertFrom(object value, Object& result, Type type, CultureInfo culture);
    private static bool TryConvertTo(object value, Object& result, Type type);
    public static string ConvertValueToString(object value);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetAllParameters(IEnumerable`1<T> rootParameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetActualParameters(IEnumerable`1<T> rootParameters);
    [IteratorStateMachineAttribute("DevExpress.XtraReports.Parameters.ParameterHelper/<GetParameters>d__16`1")]
private static IEnumerable`1<T> GetParameters(IEnumerable`1<T> rootParameters, bool includeRangeRoot);
}
public static class DevExpress.XtraReports.Parameters.Range : object {
    public static Range`1<T> Create(T start, T end);
}
[DebuggerDisplayAttribute("Range({Start},{End})")]
[DataContractAttribute]
public class DevExpress.XtraReports.Parameters.Range`1 : ValueType {
    [DataMemberAttribute]
private T start;
    [DataMemberAttribute]
private T end;
    public T Start { get; }
    public T End { get; }
    private object DevExpress.XtraReports.Parameters.Native.IRange.Start { get; }
    private object DevExpress.XtraReports.Parameters.Native.IRange.End { get; }
    public Range`1(T start, T end);
    public T get_Start();
    public T get_End();
    private sealed virtual override object DevExpress.XtraReports.Parameters.Native.IRange.get_Start();
    private sealed virtual override object DevExpress.XtraReports.Parameters.Native.IRange.get_End();
    public sealed virtual bool Equals(Range`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[TypeConverterAttribute("DevExpress.Utils.Design.EnumTypeConverter")]
[ResourceFinderAttribute("DevExpress.Data.ResFinder")]
public enum DevExpress.XtraReports.UI.FieldType : Enum {
    public int value__;
    public static FieldType None;
    public static FieldType String;
    public static FieldType DateTime;
    public static FieldType TimeSpan;
    public static FieldType Byte;
    public static FieldType Int16;
    public static FieldType Int32;
    public static FieldType Float;
    public static FieldType Double;
    public static FieldType Decimal;
    public static FieldType Boolean;
    public static FieldType Guid;
}
public enum DevExpress.XtraReports.UI.WinControlDrawMethod_Utils : Enum {
    public int value__;
    public static WinControlDrawMethod_Utils UseWMPaint;
    public static WinControlDrawMethod_Utils UseWMPrint;
    public static WinControlDrawMethod_Utils UseWMPaintRecursive;
    public static WinControlDrawMethod_Utils UseWMPrintRecursive;
}
public enum DevExpress.XtraReports.UI.WinControlImageType_Utils : Enum {
    public int value__;
    public static WinControlImageType_Utils Metafile;
    public static WinControlImageType_Utils Bitmap;
}
public interface DevExpress.XtraReports.UserDesigner.ISupportCommand {
    public CommandID CommandID { get; }
    public abstract virtual CommandID get_CommandID();
}
public interface DevExpress.XtraReports.UserDesigner.ISupportCommandParameters {
    public Object[] Parameters { get; public set; }
    public abstract virtual Object[] get_Parameters();
    public abstract virtual void set_Parameters(Object[] value);
}
public class DevExpress.XtraReports.Web.ParametersPanel.ParametersPanelControlSettings : ParametersPanelSettingsBase {
    [CompilerGeneratedAttribute]
private string <ReportUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestOptions <RequestOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ParametersPanelClientSideEvents <Callbacks>k__BackingField;
    public string ReportUrl { get; public set; }
    public RequestOptions RequestOptions { get; }
    public ParametersPanelClientSideEvents Callbacks { get; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_ReportUrl();
    [CompilerGeneratedAttribute]
public void set_ReportUrl(string value);
    [CompilerGeneratedAttribute]
public RequestOptions get_RequestOptions();
    [CompilerGeneratedAttribute]
public ParametersPanelClientSideEvents get_Callbacks();
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.XtraReports.Web.ParametersPanel.ParametersPanelSettingsBase : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private bool <AccessibilityCompliant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    public bool AccessibilityCompliant { get; public set; }
    public bool RightToLeft { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_AccessibilityCompliant();
    [CompilerGeneratedAttribute]
public void set_AccessibilityCompliant(bool value);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.ReportDesigner.DataContracts.ReportDesignerParameterEditingSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private bool <AllowReorderParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEditParameterCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEditProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEditParameterGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEditParameterSeparators>k__BackingField;
    [DataMemberAttribute]
public bool AllowReorderParameters { get; public set; }
    [DataMemberAttribute]
public bool AllowEditParameterCollection { get; public set; }
    [DataMemberAttribute]
public bool AllowEditProperties { get; public set; }
    [DataMemberAttribute]
public bool AllowEditParameterGroups { get; public set; }
    [DataMemberAttribute]
public bool AllowEditParameterSeparators { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_AllowReorderParameters();
    [CompilerGeneratedAttribute]
public void set_AllowReorderParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEditParameterCollection();
    [CompilerGeneratedAttribute]
public void set_AllowEditParameterCollection(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEditProperties();
    [CompilerGeneratedAttribute]
public void set_AllowEditProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEditParameterGroups();
    [CompilerGeneratedAttribute]
public void set_AllowEditParameterGroups(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEditParameterSeparators();
    [CompilerGeneratedAttribute]
public void set_AllowEditParameterSeparators(bool value);
    public void Assign(ReportDesignerParameterEditingSettings source);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.ReportDesigner.DataContracts.ReportDesignerRequestOptions : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private string <GetDesignerModelAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetLocalizationAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [DataMemberAttribute]
public string GetDesignerModelAction { get; public set; }
    [DataMemberAttribute]
public string GetLocalizationAction { get; public set; }
    [DataMemberAttribute]
public string Host { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_GetDesignerModelAction();
    [CompilerGeneratedAttribute]
public void set_GetDesignerModelAction(string value);
    [CompilerGeneratedAttribute]
public string get_GetLocalizationAction();
    [CompilerGeneratedAttribute]
public void set_GetLocalizationAction(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    public void Assign(ReportDesignerRequestOptions options);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.ReportDesigner.DataContracts.ReportPreviewSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private ExportSettings <ExportSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressBarSettings <ProgressBarSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchSettings <SearchSettings>k__BackingField;
    [DataMemberAttribute]
public ExportSettings ExportSettings { get; public set; }
    [DataMemberAttribute]
public ProgressBarSettings ProgressBarSettings { get; public set; }
    [DataMemberAttribute]
public SearchSettings SearchSettings { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public ExportSettings get_ExportSettings();
    [CompilerGeneratedAttribute]
public void set_ExportSettings(ExportSettings value);
    [CompilerGeneratedAttribute]
public ProgressBarSettings get_ProgressBarSettings();
    [CompilerGeneratedAttribute]
public void set_ProgressBarSettings(ProgressBarSettings value);
    [CompilerGeneratedAttribute]
public SearchSettings get_SearchSettings();
    [CompilerGeneratedAttribute]
public void set_SearchSettings(SearchSettings value);
    public void Assign(ReportPreviewSettings source);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.XtraReports.Web.ReportDesigner.DataContracts.ReportWizardTemplatesSearchBoxVisibilityConverter : EnumTypeConverter {
}
public enum DevExpress.XtraReports.Web.ReportDesigner.DataContracts.SearchBoxVisibility : Enum {
    public int value__;
    public static SearchBoxVisibility Auto;
    public static SearchBoxVisibility Always;
    public static SearchBoxVisibility Never;
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.ReportDesigner.DataContracts.WizardSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private bool <UseMasterDetailWizard>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableJsonDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSqlDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableObjectDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableFederationDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFullscreenWizard>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchBoxVisibility <ReportWizardTemplatesSearchBoxVisibility>k__BackingField;
    internal static bool DefaultUseFullscreenWizard;
    internal static bool DefaultUseMasterDetailWizard;
    internal static bool DefaultJsonDataSourceWizardEnabled;
    internal static bool DefaultObjectDataSourceEnabled;
    internal static bool DefaultSqlDataSourceEnabled;
    internal static bool DefaultFederationDataSourceEnabled;
    internal static SearchBoxVisibility DefaultReportWizardTemplatesSearchBoxVisibility;
    [DataMemberAttribute]
public bool UseMasterDetailWizard { get; public set; }
    [DataMemberAttribute]
public bool EnableJsonDataSource { get; public set; }
    [DataMemberAttribute]
public bool EnableSqlDataSource { get; public set; }
    [DataMemberAttribute]
public bool EnableObjectDataSource { get; public set; }
    [DataMemberAttribute]
public bool EnableFederationDataSource { get; public set; }
    [DataMemberAttribute]
public bool UseFullscreenWizard { get; public set; }
    [DataMemberAttribute]
[TypeConverterAttribute("DevExpress.XtraReports.Web.ReportDesigner.DataContracts.ReportWizardTemplatesSearchBoxVisibilityConverter")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SearchBoxVisibility ReportWizardTemplatesSearchBoxVisibility { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_UseMasterDetailWizard();
    [CompilerGeneratedAttribute]
public void set_UseMasterDetailWizard(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableJsonDataSource();
    [CompilerGeneratedAttribute]
public void set_EnableJsonDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSqlDataSource();
    [CompilerGeneratedAttribute]
public void set_EnableSqlDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableObjectDataSource();
    [CompilerGeneratedAttribute]
public void set_EnableObjectDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableFederationDataSource();
    [CompilerGeneratedAttribute]
public void set_EnableFederationDataSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseFullscreenWizard();
    [CompilerGeneratedAttribute]
public void set_UseFullscreenWizard(bool value);
    [CompilerGeneratedAttribute]
public SearchBoxVisibility get_ReportWizardTemplatesSearchBoxVisibility();
    [CompilerGeneratedAttribute]
public void set_ReportWizardTemplatesSearchBoxVisibility(SearchBoxVisibility value);
    public void Assign(WizardSettings source);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.XtraReports.Web.ReportDesigner.ReportDesignerControlSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private string <ReportUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DevelopmentMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportDesignerSettingsBase <DesignerModelSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportDesignerRequestOptions <RequestOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportDesignerClientSideEvents <Callbacks>k__BackingField;
    public string ReportUrl { get; public set; }
    public bool DevelopmentMode { get; public set; }
    public ReportDesignerSettingsBase DesignerModelSettings { get; public set; }
    public ReportDesignerRequestOptions RequestOptions { get; }
    public ReportDesignerClientSideEvents Callbacks { get; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_ReportUrl();
    [CompilerGeneratedAttribute]
public void set_ReportUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_DevelopmentMode();
    [CompilerGeneratedAttribute]
public void set_DevelopmentMode(bool value);
    [CompilerGeneratedAttribute]
public ReportDesignerSettingsBase get_DesignerModelSettings();
    [CompilerGeneratedAttribute]
public void set_DesignerModelSettings(ReportDesignerSettingsBase value);
    [CompilerGeneratedAttribute]
public ReportDesignerRequestOptions get_RequestOptions();
    [CompilerGeneratedAttribute]
public ReportDesignerClientSideEvents get_Callbacks();
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public class DevExpress.XtraReports.Web.ReportDesigner.ReportDesignerSettingsBase : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private bool <AllowMDI>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private WizardSettings <WizardSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportPreviewSettings <ReportPreviewSettings>k__BackingField;
    internal static bool AllowMDIDefault;
    internal static bool RightToLeftDefault;
    [CompilerGeneratedAttribute]
private DataSourceSettings <DataSourceSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportDesignerParameterEditingSettings <ParameterEditingSettings>k__BackingField;
    [DataMemberAttribute]
public bool AllowMDI { get; public set; }
    [DataMemberAttribute]
public bool RightToLeft { get; public set; }
    public WizardSettings WizardSettings { get; public set; }
    public ReportPreviewSettings ReportPreviewSettings { get; public set; }
    public DataSourceSettings DataSourceSettings { get; public set; }
    public ReportDesignerParameterEditingSettings ParameterEditingSettings { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_AllowMDI();
    [CompilerGeneratedAttribute]
public void set_AllowMDI(bool value);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public WizardSettings get_WizardSettings();
    [CompilerGeneratedAttribute]
public void set_WizardSettings(WizardSettings value);
    [CompilerGeneratedAttribute]
public ReportPreviewSettings get_ReportPreviewSettings();
    [CompilerGeneratedAttribute]
public void set_ReportPreviewSettings(ReportPreviewSettings value);
    public void Assign(ReportDesignerSettingsBase settings);
    [CompilerGeneratedAttribute]
public DataSourceSettings get_DataSourceSettings();
    [CompilerGeneratedAttribute]
public void set_DataSourceSettings(DataSourceSettings value);
    [CompilerGeneratedAttribute]
public ReportDesignerParameterEditingSettings get_ParameterEditingSettings();
    [CompilerGeneratedAttribute]
public void set_ParameterEditingSettings(ReportDesignerParameterEditingSettings value);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.WebDocumentViewer.DataContracts.ExportSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private bool <UseAsynchronousExport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSameTab>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPrintNotificationDialog>k__BackingField;
    internal static bool DefaultUseAsynchronousExport;
    internal static bool DefaultUseSameTab;
    internal static bool DefaultShowPrintNotificationDialog;
    [DataMemberAttribute]
public bool UseAsynchronousExport { get; public set; }
    [DataMemberAttribute]
public bool UseSameTab { get; public set; }
    [DataMemberAttribute]
public bool ShowPrintNotificationDialog { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_UseAsynchronousExport();
    [CompilerGeneratedAttribute]
public void set_UseAsynchronousExport(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSameTab();
    [CompilerGeneratedAttribute]
public void set_UseSameTab(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowPrintNotificationDialog();
    [CompilerGeneratedAttribute]
public void set_ShowPrintNotificationDialog(bool value);
    public void Assign(ExportSettings settings);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.WebDocumentViewer.DataContracts.MobileViewerSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private bool <ReaderMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationEnabled>k__BackingField;
    private static bool ReaderModeDefault;
    private static bool AnimationEnabledDefault;
    [DataMemberAttribute]
public bool ReaderMode { get; public set; }
    [DataMemberAttribute]
public bool AnimationEnabled { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_ReaderMode();
    [CompilerGeneratedAttribute]
public void set_ReaderMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationEnabled();
    [CompilerGeneratedAttribute]
public void set_AnimationEnabled(bool value);
    public void Assign(MobileViewerSettings settings);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.WebDocumentViewer.DataContracts.ProgressBarSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private bool <KeepOnVisibleArea>k__BackingField;
    internal static bool DefaultKeepOnVisibleArea;
    internal static ProgressBarPosition DefaultProgressBarPosition;
    [CompilerGeneratedAttribute]
private ProgressBarPosition <Position>k__BackingField;
    [DataMemberAttribute]
public bool KeepOnVisibleArea { get; public set; }
    [DataMemberAttribute]
[EditorBrowsableAttribute("1")]
public string PositionString { get; public set; }
    public ProgressBarPosition Position { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_KeepOnVisibleArea();
    [CompilerGeneratedAttribute]
public void set_KeepOnVisibleArea(bool value);
    public string get_PositionString();
    public void set_PositionString(string value);
    [CompilerGeneratedAttribute]
public ProgressBarPosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(ProgressBarPosition value);
    public void Assign(ProgressBarSettings settings);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.WebDocumentViewer.DataContracts.RemoteSourceSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private string <ServerUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthToken>k__BackingField;
    [DataMemberAttribute]
public string ServerUri { get; public set; }
    [DataMemberAttribute]
public string AuthToken { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_ServerUri();
    [CompilerGeneratedAttribute]
public void set_ServerUri(string value);
    [CompilerGeneratedAttribute]
public string get_AuthToken();
    [CompilerGeneratedAttribute]
public void set_AuthToken(string value);
    public void Assign(RemoteSourceSettings settings);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.WebDocumentViewer.DataContracts.RequestOptions : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private string <InvokeAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetLocalizationAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [DataMemberAttribute]
public string InvokeAction { get; public set; }
    [DataMemberAttribute]
public string GetLocalizationAction { get; public set; }
    [DataMemberAttribute]
public string Host { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_InvokeAction();
    [CompilerGeneratedAttribute]
public void set_InvokeAction(string value);
    [CompilerGeneratedAttribute]
public string get_GetLocalizationAction();
    [CompilerGeneratedAttribute]
public void set_GetLocalizationAction(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    public void Assign(RequestOptions options);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.WebDocumentViewer.DataContracts.SearchSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private bool <SearchEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAsyncSearch>k__BackingField;
    private static bool SearchEnabledDefault;
    private static bool UseAsyncSearchDefault;
    [DataMemberAttribute]
public bool SearchEnabled { get; public set; }
    [DataMemberAttribute]
public bool UseAsyncSearch { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_SearchEnabled();
    [CompilerGeneratedAttribute]
public void set_SearchEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseAsyncSearch();
    [CompilerGeneratedAttribute]
public void set_UseAsyncSearch(bool value);
    public void Assign(SearchSettings settings);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[DataContractAttribute]
public class DevExpress.XtraReports.Web.WebDocumentViewer.DataContracts.TabPanelSettings : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Position>k__BackingField;
    [DataMemberAttribute]
public int Width { get; public set; }
    [DataMemberAttribute]
public string Position { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public string get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(string value);
    public void Assign(TabPanelSettings settings);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public enum DevExpress.XtraReports.Web.WebDocumentViewer.ProgressBarPosition : Enum {
    public int value__;
    public static ProgressBarPosition Default;
    public static ProgressBarPosition BottomLeft;
    public static ProgressBarPosition TopLeft;
    public static ProgressBarPosition TopRight;
    public static ProgressBarPosition BottomRight;
}
public class DevExpress.XtraReports.Web.WebDocumentViewer.WebDocumentViewerControlSettings : WebDocumentViewerSettingsBase {
    [CompilerGeneratedAttribute]
private string <ReportUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestOptions <RequestOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private WebDocumentViewerClientSideEvents <Callbacks>k__BackingField;
    public string ReportUrl { get; public set; }
    public RequestOptions RequestOptions { get; }
    public WebDocumentViewerClientSideEvents Callbacks { get; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public string get_ReportUrl();
    [CompilerGeneratedAttribute]
public void set_ReportUrl(string value);
    [CompilerGeneratedAttribute]
public RequestOptions get_RequestOptions();
    [CompilerGeneratedAttribute]
public WebDocumentViewerClientSideEvents get_Callbacks();
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
public abstract class DevExpress.XtraReports.Web.WebDocumentViewer.WebDocumentViewerSettingsBase : SerializableSettingsBase {
    [CompilerGeneratedAttribute]
private bool <MobileMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AccessibilityCompliant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private MobileViewerSettings <MobileModeSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteSourceSettings <RemoteSourceSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private TabPanelSettings <TabPanelSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressBarSettings <ProgressBarSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ExportSettings <ExportSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchSettings <SearchSettings>k__BackingField;
    public bool MobileMode { get; public set; }
    public bool AccessibilityCompliant { get; public set; }
    public bool RightToLeft { get; public set; }
    public MobileViewerSettings MobileModeSettings { get; public set; }
    public RemoteSourceSettings RemoteSourceSettings { get; public set; }
    public TabPanelSettings TabPanelSettings { get; public set; }
    public ProgressBarSettings ProgressBarSettings { get; public set; }
    public ExportSettings ExportSettings { get; public set; }
    public SearchSettings SearchSettings { get; public set; }
    internal Dictionary`2<string, string> ClientToServerApiMap { get; }
    [CompilerGeneratedAttribute]
public bool get_MobileMode();
    [CompilerGeneratedAttribute]
public void set_MobileMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_AccessibilityCompliant();
    [CompilerGeneratedAttribute]
public void set_AccessibilityCompliant(bool value);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public MobileViewerSettings get_MobileModeSettings();
    [CompilerGeneratedAttribute]
public void set_MobileModeSettings(MobileViewerSettings value);
    [CompilerGeneratedAttribute]
public RemoteSourceSettings get_RemoteSourceSettings();
    [CompilerGeneratedAttribute]
public void set_RemoteSourceSettings(RemoteSourceSettings value);
    [CompilerGeneratedAttribute]
public TabPanelSettings get_TabPanelSettings();
    [CompilerGeneratedAttribute]
public void set_TabPanelSettings(TabPanelSettings value);
    [CompilerGeneratedAttribute]
public ProgressBarSettings get_ProgressBarSettings();
    [CompilerGeneratedAttribute]
public void set_ProgressBarSettings(ProgressBarSettings value);
    [CompilerGeneratedAttribute]
public ExportSettings get_ExportSettings();
    [CompilerGeneratedAttribute]
public void set_ExportSettings(ExportSettings value);
    [CompilerGeneratedAttribute]
public SearchSettings get_SearchSettings();
    [CompilerGeneratedAttribute]
public void set_SearchSettings(SearchSettings value);
    internal virtual Dictionary`2<string, string> get_ClientToServerApiMap();
}
[AttributeUsageAttribute("1028")]
public class DevExpress.XtraReports.XRDesignerAttribute : Attribute {
    private string designerTypeName;
    private Type designerBaseType;
    private string typeId;
    public string DesignerBaseTypeName { get; }
    public string DesignerTypeName { get; }
    public object TypeId { get; }
    public XRDesignerAttribute(string designerTypeName);
    public XRDesignerAttribute(string designerTypeName, Type designerBaseType);
    public string get_DesignerBaseTypeName();
    public string get_DesignerTypeName();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface DevExpress.XtraScheduler.Internal.IReminderInfo {
    public TimeSpan TimeBeforeStart { get; public set; }
    public DateTime AlertTime { get; public set; }
    public abstract virtual TimeSpan get_TimeBeforeStart();
    public abstract virtual void set_TimeBeforeStart(TimeSpan value);
    public abstract virtual DateTime get_AlertTime();
    public abstract virtual void set_AlertTime(DateTime value);
}
public class DevExpress.XtraSpellChecker.AfterCheckWordEventArgs : EventArgs {
    private object editControl;
    private string originalWord;
    private string changedWord;
    private SpellCheckOperation operation;
    private Position startPosition;
    public object EditControl { get; }
    public string OriginalWord { get; }
    public string ChangedWord { get; }
    public SpellCheckOperation Operation { get; }
    public Position StartPosition { get; }
    public AfterCheckWordEventArgs(object editControl, string originalWord, string changedWord, SpellCheckOperation result, Position startPosition);
    public object get_EditControl();
    public string get_OriginalWord();
    public string get_ChangedWord();
    public SpellCheckOperation get_Operation();
    public Position get_StartPosition();
}
public class DevExpress.XtraSpellChecker.AfterCheckWordEventHandler : MulticastDelegate {
    public AfterCheckWordEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AfterCheckWordEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AfterCheckWordEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum DevExpress.XtraSpellChecker.CheckSpellingResultType : Enum {
    public int value__;
    public static CheckSpellingResultType Misspelling;
    public static CheckSpellingResultType Repeating;
    public static CheckSpellingResultType Success;
}
public enum DevExpress.XtraSpellChecker.CheckWordResult : Enum {
    public int value__;
    public static CheckWordResult Misspelled;
    public static CheckWordResult Correct;
    public static CheckWordResult Ignored;
}
public interface DevExpress.XtraSpellChecker.ICheckSpellingResult {
    public string Text { get; }
    public bool HasError { get; }
    public int Index { get; }
    public int Length { get; }
    public string Value { get; }
    public CheckSpellingResultType Result { get; }
    public abstract virtual string get_Text();
    public abstract virtual bool get_HasError();
    public abstract virtual int get_Index();
    public abstract virtual int get_Length();
    public abstract virtual string get_Value();
    public abstract virtual CheckSpellingResultType get_Result();
}
public interface DevExpress.XtraSpellChecker.IIgnoreItem {
    public Position Start { get; }
    public Position End { get; }
    public string Word { get; }
    public abstract virtual Position get_Start();
    public abstract virtual Position get_End();
    public abstract virtual string get_Word();
}
public interface DevExpress.XtraSpellChecker.IIgnoreList {
    public abstract virtual void Add(string word);
    public abstract virtual void Add(Position start, Position end, string word);
    public abstract virtual bool Contains(Position start, Position end, string word);
    public abstract virtual bool Contains(string word);
    public abstract virtual void Remove(string word);
    public abstract virtual void Remove(Position start, Position end, string word);
    public abstract virtual void Clear();
}
public interface DevExpress.XtraSpellChecker.IOptionsSpellings {
    public DefaultBoolean CheckFromCursorPos { get; public set; }
    public DefaultBoolean CheckSelectedTextFirst { get; public set; }
    public DefaultBoolean IgnoreEmails { get; public set; }
    public DefaultBoolean IgnoreMarkupTags { get; public set; }
    public DefaultBoolean IgnoreMixedCaseWords { get; public set; }
    public DefaultBoolean IgnoreRepeatedWords { get; public set; }
    public DefaultBoolean IgnoreUpperCaseWords { get; public set; }
    public DefaultBoolean IgnoreUrls { get; public set; }
    public DefaultBoolean IgnoreWordsWithNumbers { get; public set; }
    public abstract virtual DefaultBoolean get_CheckFromCursorPos();
    public abstract virtual void set_CheckFromCursorPos(DefaultBoolean value);
    public abstract virtual DefaultBoolean get_CheckSelectedTextFirst();
    public abstract virtual void set_CheckSelectedTextFirst(DefaultBoolean value);
    public abstract virtual DefaultBoolean get_IgnoreEmails();
    public abstract virtual void set_IgnoreEmails(DefaultBoolean value);
    public abstract virtual DefaultBoolean get_IgnoreMarkupTags();
    public abstract virtual void set_IgnoreMarkupTags(DefaultBoolean value);
    public abstract virtual DefaultBoolean get_IgnoreMixedCaseWords();
    public abstract virtual void set_IgnoreMixedCaseWords(DefaultBoolean value);
    public abstract virtual DefaultBoolean get_IgnoreRepeatedWords();
    public abstract virtual void set_IgnoreRepeatedWords(DefaultBoolean value);
    public abstract virtual DefaultBoolean get_IgnoreUpperCaseWords();
    public abstract virtual void set_IgnoreUpperCaseWords(DefaultBoolean value);
    public abstract virtual DefaultBoolean get_IgnoreUrls();
    public abstract virtual void set_IgnoreUrls(DefaultBoolean value);
    public abstract virtual DefaultBoolean get_IgnoreWordsWithNumbers();
    public abstract virtual void set_IgnoreWordsWithNumbers(DefaultBoolean value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OptionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OptionChanged(EventHandler value);
    public abstract virtual void BeginUpdate();
    public abstract virtual void EndUpdate();
}
public interface DevExpress.XtraSpellChecker.ISpellChecker {
    public bool IsChecking { get; }
    public SpellCheckMode SpellCheckMode { get; public set; }
    public CultureInfo Culture { get; public set; }
    public abstract virtual bool get_IsChecking();
    public abstract virtual SpellCheckMode get_SpellCheckMode();
    public abstract virtual void set_SpellCheckMode(SpellCheckMode value);
    public abstract virtual CultureInfo get_Culture();
    public abstract virtual void set_Culture(CultureInfo value);
    public abstract virtual void Check(object control);
    public abstract virtual ISpellingErrorInfo Check(object control, ISpellCheckTextController controller, Position from, Position to);
    public abstract virtual ICheckSpellingResult CheckText(object control, string text, int index, CultureInfo culture);
    public abstract virtual void RegisterIgnoreList(object control, IIgnoreList ignoreList);
    public abstract virtual void UnregisterIgnoreList(object control);
    public abstract virtual bool CanAddToDictionary();
    public abstract virtual bool CanAddToDictionary(CultureInfo culture);
    public abstract virtual void AddToDictionary(string word);
    public abstract virtual void AddToDictionary(string word, CultureInfo culture);
    public abstract virtual void Ignore(object control, string word, Position start, Position end);
    public abstract virtual void IgnoreAll(object control, string word);
    public abstract virtual IOptionsSpellings GetOptions(object control);
    public abstract virtual String[] GetSuggestions(string word, CultureInfo culture);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CultureChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CultureChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SpellCheckModeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SpellCheckModeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterCheckWord(AfterCheckWordEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterCheckWord(AfterCheckWordEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WordAdded(WordAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WordAdded(WordAddedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CustomDictionaryChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CustomDictionaryChanged(EventHandler value);
}
public interface DevExpress.XtraSpellChecker.ISpellingErrorInfo {
    public SpellingError Error { get; }
    public Position WordStartPosition { get; }
    public Position WordEndPosition { get; }
    public string Word { get; }
    public abstract virtual SpellingError get_Error();
    public abstract virtual Position get_WordStartPosition();
    public abstract virtual Position get_WordEndPosition();
    public abstract virtual string get_Word();
}
public interface DevExpress.XtraSpellChecker.ISupportSpellCheckerNotifications {
    public abstract virtual void DoBeforeCheck();
    public abstract virtual void DoAfterCheck();
}
public class DevExpress.XtraSpellChecker.Native.ControlToSpellCheckTextControllerMapper : TypeMapper {
    [CompilerGeneratedAttribute]
private static ControlToSpellCheckTextControllerMapper <Instance>k__BackingField;
    public static ControlToSpellCheckTextControllerMapper Instance { get; }
    private static ControlToSpellCheckTextControllerMapper();
    [CompilerGeneratedAttribute]
public static ControlToSpellCheckTextControllerMapper get_Instance();
}
public class DevExpress.XtraSpellChecker.Native.ControlToUndoControllerMapper : TypeMapper {
    [CompilerGeneratedAttribute]
private static ControlToUndoControllerMapper <Instance>k__BackingField;
    public static ControlToUndoControllerMapper Instance { get; }
    private static ControlToUndoControllerMapper();
    [CompilerGeneratedAttribute]
public static ControlToUndoControllerMapper get_Instance();
}
public interface DevExpress.XtraSpellChecker.Native.ISpellCheckTextControlController {
    public string EditControlText { get; public set; }
    public Position SelectionStart { get; }
    public Position SelectionFinish { get; }
    public bool HasSelection { get; }
    public bool IsReadOnly { get; }
    public abstract virtual void HideSelection();
    public abstract virtual void ShowSelection();
    public abstract virtual bool IsSelectionVisible();
    public abstract virtual void Select(Position start, Position finish);
    public abstract virtual void ScrollToCaretPos();
    public abstract virtual void UpdateText();
    public abstract virtual string get_EditControlText();
    public abstract virtual void set_EditControlText(string value);
    public abstract virtual Position get_SelectionStart();
    public abstract virtual Position get_SelectionFinish();
    public abstract virtual bool get_HasSelection();
    public abstract virtual bool get_IsReadOnly();
}
public interface DevExpress.XtraSpellChecker.Native.IUriRecognitionSupport {
    public bool IgnoreUri { get; public set; }
    public abstract virtual bool get_IgnoreUri();
    public abstract virtual void set_IgnoreUri(bool value);
}
public class DevExpress.XtraSpellChecker.Native.TypeMapper : object {
    private ConcurrentDictionary`2<Type, Type> typeDictionary;
    public bool Register(Type key, Type value);
    public Type Unregister(Type key);
    public bool ContainsKey(Type key);
    public bool TryGetValue(Type key, Type& value);
}
public static class DevExpress.XtraSpellChecker.Native.UriHelper : object {
    private static HashSet`1<string> knownExtensions;
    private static HashSet`1<string> subdomainPrefixes;
    private static HashSet`1<string> topLevelDomains;
    private static HashSet`1<string> schemes;
    private static HashSet`1<char> uriCharacters;
    private static UriHelper();
    private static HashSet`1<char> CreateUriCharacters();
    private static HashSet`1<string> CreateKnownExtensions();
    private static HashSet`1<string> CreateSubdomainPrefixes();
    private static HashSet`1<string> CreateTopLevelDomains();
    private static HashSet`1<string> CreateSchemas();
    private static bool IsFileExtension(string value);
    private static bool IsSubdomainPrefix(string value);
    private static bool IsTopLevelDomain(string value);
    private static bool IsKnownScheme(string value);
    public static bool IsUri(string uriString);
    public static bool IsAbsoluteFileUri(string uriString);
    public static bool IsFileUri(string uriString);
    public static bool IsWebUri(string urlString);
    public static bool IsUriCharacter(char ch);
    public static bool IsUriString(string uriString);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.XtraSpellChecker.Parser.ISpellCheckTextController {
    public string Text { get; public set; }
    public char Item { get; }
    public abstract virtual bool CanDoNextStep(Position position);
    public abstract virtual bool DeleteWord(Position& start, Position& finish);
    public abstract virtual string GetWord(Position start, Position finish);
    public abstract virtual string GetPreviousWord(Position pos);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual char get_Item(Position position);
    public abstract virtual bool ReplaceWord(Position start, Position finish, string word);
    public abstract virtual Position GetNextPosition(Position pos);
    public abstract virtual Position GetPrevPosition(Position pos);
    public abstract virtual Position GetWordStartPosition(Position pos);
    public abstract virtual Position GetTextLength(string text);
    public abstract virtual bool HasLetters(Position start, Position finish);
    public abstract virtual Position GetSentenceStartPosition(Position pos);
    public abstract virtual Position GetSentenceEndPosition(Position pos);
}
public interface DevExpress.XtraSpellChecker.Parser.ISupportMultiCulture {
    public abstract virtual CultureInfo GetCulture(Position start, Position end);
    public abstract virtual bool ShouldCheckWord(Position start, Position end);
}
public interface DevExpress.XtraSpellChecker.Parser.IUndoController {
    public abstract virtual IUndoItem GetUndoItemForReplace();
    public abstract virtual IUndoItem GetUndoItemForSilentReplace();
    public abstract virtual IUndoItem GetUndoItemForDelete();
    public abstract virtual IUndoItem GetUndoItemForIgnore();
    public abstract virtual IUndoItem GetUndoItemForIgnoreAll();
}
public interface DevExpress.XtraSpellChecker.Parser.IUndoItem {
    public Position StartPosition { get; public set; }
    public Position FinishPosition { get; public set; }
    public string OldText { get; public set; }
    public bool NeedRecheckWord { get; }
    public bool ShouldUpdateItemPosition { get; }
    public abstract virtual void DoUndo();
    public abstract virtual Position get_StartPosition();
    public abstract virtual void set_StartPosition(Position value);
    public abstract virtual Position get_FinishPosition();
    public abstract virtual void set_FinishPosition(Position value);
    public abstract virtual string get_OldText();
    public abstract virtual void set_OldText(string value);
    public abstract virtual bool get_NeedRecheckWord();
    public abstract virtual bool get_ShouldUpdateItemPosition();
}
public abstract class DevExpress.XtraSpellChecker.Parser.Position : object {
    public static Position Null { get; }
    public static Position Undefined { get; }
    protected object ActualPosition { get; protected set; }
    protected Position Zero { get; }
    public bool IsZero { get; }
    public bool IsNegative { get; }
    public bool IsPositive { get; }
    protected Position(object actualPosition);
    public static Position get_Null();
    public static Position get_Undefined();
    public static Position Add(Position position1, Position position2);
    public static Position Subtract(Position position1, Position position2);
    public static int Compare(Position position1, Position position2);
    public static bool IsGreater(Position position1, Position position2);
    public static bool IsGreaterOrEqual(Position position1, Position position2);
    public static bool Equals(Position position1, Position position2);
    public static bool IsLess(Position position1, Position position2);
    public static bool IsLessOrEqual(Position position1, Position position2);
    public static Position op_Subtraction(Position position1, Position position2);
    public static Position op_Addition(Position position1, Position position2);
    public static Position op_Increment(Position position);
    public static Position op_Decrement(Position position);
    protected abstract virtual object get_ActualPosition();
    protected abstract virtual void set_ActualPosition(object value);
    protected virtual Position get_Zero();
    public bool get_IsZero();
    public bool get_IsNegative();
    public bool get_IsPositive();
    public abstract virtual Position Clone();
    public abstract virtual int ToInt();
    protected abstract virtual int InternalCompare(Position position);
    protected abstract virtual Position InternalAdd(Position position);
    protected abstract virtual Position InternalSubtract(Position position);
    protected abstract virtual Position InternalSubtractFromNull();
    protected abstract virtual Position MoveBackward();
    protected abstract virtual Position MoveForward();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum DevExpress.XtraSpellChecker.SpellCheckMode : Enum {
    public int value__;
    public static SpellCheckMode OnDemand;
    public static SpellCheckMode AsYouType;
}
public enum DevExpress.XtraSpellChecker.SpellCheckOperation : Enum {
    public int value__;
    public static SpellCheckOperation AddToDictionary;
    public static SpellCheckOperation Cancel;
    public static SpellCheckOperation Change;
    public static SpellCheckOperation SilentChange;
    public static SpellCheckOperation ChangeAll;
    public static SpellCheckOperation Delete;
    public static SpellCheckOperation Ignore;
    public static SpellCheckOperation SilentIgnore;
    public static SpellCheckOperation IgnoreAll;
    public static SpellCheckOperation Options;
    public static SpellCheckOperation Recheck;
    public static SpellCheckOperation Undo;
    public static SpellCheckOperation Custom;
    public static SpellCheckOperation None;
}
public enum DevExpress.XtraSpellChecker.SpellingError : Enum {
    public int value__;
    public static SpellingError Unknown;
    public static SpellingError Misspelling;
    public static SpellingError Repeating;
    public static SpellingError Syntax;
}
public class DevExpress.XtraSpellChecker.WordAddedEventArgs : EventArgs {
    private string word;
    public string Word { get; }
    public WordAddedEventArgs(string word);
    public string get_Word();
}
public class DevExpress.XtraSpellChecker.WordAddedEventHandler : MulticastDelegate {
    public WordAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WordAddedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WordAddedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum DevExpress.XtraSpellChecker.WordType : Enum {
    public int value__;
    public static WordType Misspelled;
    public static WordType Repeated;
    public static WordType Correct;
}
[AttributeUsageAttribute("32767")]
internal class PreserveAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Conditional>k__BackingField;
    public bool Conditional { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Conditional();
    [CompilerGeneratedAttribute]
public void set_Conditional(bool value);
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.AutoFormatCannotBeEmptyAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.AutoFormatCssUrlPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.AutoFormatDisableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.AutoFormatDisableClearAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.AutoFormatEnableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.AutoFormatImageFolderPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.AutoFormatUrlPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.AutoFormatUrlPropertyClassAttribute : Attribute {
}
[AttributeUsageAttribute("384")]
public class System.ComponentModel.DataAnnotations.DateOnlyEditMaskAttribute : DateTimeEditMaskAttributeBase {
    public DateOnlyEditMaskAttribute(string dateOnlyMask);
}
[AttributeUsageAttribute("384")]
public class System.ComponentModel.DataAnnotations.DateTimeEditMaskAttribute : DateTimeEditMaskAttributeBase {
    public DateTimeEditMaskAttribute(string dateTimeMask);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("384")]
public abstract class System.ComponentModel.DataAnnotations.DateTimeEditMaskAttributeBase : EditMaskWithAdvancingCaretAttribute {
    public bool SpinWithCarry { get; public set; }
    protected DateTimeEditMaskAttributeBase(Type maskManagerType, string mask);
    public bool get_SpinWithCarry();
    public void set_SpinWithCarry(bool value);
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.DateTimeEditMaskAttributeBase/<GetNonLocalizableProperties>d__4")]
protected virtual IEnumerable`1<KeyValuePair`2<string, Type>> GetNonLocalizableProperties();
    protected virtual object GetDefaultValue(string property, Type type);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<string, Type>> <>n__0();
}
[AttributeUsageAttribute("384")]
public class System.ComponentModel.DataAnnotations.DateTimeOffsetEditMaskAttribute : DateTimeEditMaskAttributeBase {
    public DateTimeOffsetEditMaskAttribute(string dateTimeOffsetMask);
}
[AttributeUsageAttribute("388")]
public class System.ComponentModel.DataAnnotations.EditMaskAttribute : Attribute {
    private Type maskManagerType;
    private string nameOrMaskManagerTypeName;
    private Type resourceTypeCore;
    private Dictionary`2<string, LocalizableString> localizableProperties;
    private Dictionary`2<string, object> nonLocalizableProperties;
    protected static object DefaultTrue;
    protected static object DefaultFalse;
    public string Name { get; }
    public string Mask { get; }
    public bool UseMaskAsDisplayFormat { get; public set; }
    public Type ResourceType { get; public set; }
    public EditMaskAttribute(string mask);
    protected EditMaskAttribute(string nameOrMaskManagerTypeName, string mask);
    protected EditMaskAttribute(Type maskManagerType, string mask);
    private static EditMaskAttribute();
    public string get_Name();
    public string get_Mask();
    public string GetMask();
    public bool get_UseMaskAsDisplayFormat();
    public void set_UseMaskAsDisplayFormat(bool value);
    public Type get_ResourceType();
    public void set_ResourceType(Type value);
    private void OnResourceTypeChanged(Type value);
    private void RegisterLocalizableProperties();
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.EditMaskAttribute/<GetLocalizableProperties>d__19")]
protected virtual IEnumerable`1<string> GetLocalizableProperties();
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.EditMaskAttribute/<GetNonLocalizableProperties>d__20")]
protected virtual IEnumerable`1<KeyValuePair`2<string, Type>> GetNonLocalizableProperties();
    protected string GetLocalizableValue(string property);
    protected string GetLocalizablePropertyValue(string property);
    protected void SetLocalizablePropertyValue(string property, string value);
    protected T GetValue(string property);
    protected void SetValue(T value, string property);
    protected virtual object GetDefaultValue(string property, Type type);
    private sealed virtual override IEnumerator`1<Tuple`3<string, Type, object>> System.Collections.Generic.IEnumerable<System.Tuple<System.String,System.Type,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.EditMaskAttribute/<GetProperties>d__31")]
private IEnumerator`1<Tuple`3<string, Type, object>> GetProperties();
    internal Type ResolveMaskManagerType(Type propertyType);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("384")]
public abstract class System.ComponentModel.DataAnnotations.EditMaskWithAdvancingCaretAttribute : EditMaskWithCultureAttribute {
    public bool UseAdvancingCaret { get; public set; }
    protected EditMaskWithAdvancingCaretAttribute(Type maskManagerType, string mask);
    public bool get_UseAdvancingCaret();
    public void set_UseAdvancingCaret(bool value);
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.EditMaskWithAdvancingCaretAttribute/<GetNonLocalizableProperties>d__4")]
protected virtual IEnumerable`1<KeyValuePair`2<string, Type>> GetNonLocalizableProperties();
    protected virtual object GetDefaultValue(string property, Type type);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<string, Type>> <>n__0();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("384")]
public abstract class System.ComponentModel.DataAnnotations.EditMaskWithCultureAttribute : EditMaskAttribute {
    public string Culture { get; public set; }
    protected EditMaskWithCultureAttribute(Type maskManagerType, string mask);
    public string get_Culture();
    public void set_Culture(string value);
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.EditMaskWithCultureAttribute/<GetNonLocalizableProperties>d__4")]
protected virtual IEnumerable`1<KeyValuePair`2<string, Type>> GetNonLocalizableProperties();
    protected virtual object GetDefaultValue(string property, Type type);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<string, Type>> <>n__0();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("384")]
public abstract class System.ComponentModel.DataAnnotations.LegacyEditMaskAttribute : EditMaskWithCultureAttribute {
    internal static object DefaultPlaceholder;
    public char Placeholder { get; public set; }
    public bool SaveLiterals { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IgnoreMaskBlank { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool AllowBlankInput { get; public set; }
    protected LegacyEditMaskAttribute(Type maskManagerType, string mask);
    private static LegacyEditMaskAttribute();
    public char get_Placeholder();
    public void set_Placeholder(char value);
    public bool get_SaveLiterals();
    public void set_SaveLiterals(bool value);
    public bool get_IgnoreMaskBlank();
    public void set_IgnoreMaskBlank(bool value);
    public bool get_AllowBlankInput();
    public void set_AllowBlankInput(bool value);
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.LegacyEditMaskAttribute/<GetNonLocalizableProperties>d__13")]
protected virtual IEnumerable`1<KeyValuePair`2<string, Type>> GetNonLocalizableProperties();
    protected virtual object GetDefaultValue(string property, Type type);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<string, Type>> <>n__0();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.DataAnnotations.MaskMetadataTypeAttribute : Attribute {
    private Type metadataClassType;
    public Type MetadataClassType { get; }
    public MaskMetadataTypeAttribute(Type metadataClassType);
    public Type get_MetadataClassType();
}
[AttributeUsageAttribute("384")]
public class System.ComponentModel.DataAnnotations.NumericEditMaskAttribute : EditMaskWithCultureAttribute {
    public bool AutoHideDecimalSeparator { get; public set; }
    public bool HideInsignificantZeros { get; public set; }
    public ValueAfterDelete ValueAfterDelete { get; public set; }
    public Type ValueType { get; public set; }
    public NumericEditMaskAttribute(string numericMask);
    public bool get_AutoHideDecimalSeparator();
    public void set_AutoHideDecimalSeparator(bool value);
    public bool get_HideInsignificantZeros();
    public void set_HideInsignificantZeros(bool value);
    public ValueAfterDelete get_ValueAfterDelete();
    public void set_ValueAfterDelete(ValueAfterDelete value);
    public Type get_ValueType();
    public void set_ValueType(Type value);
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.NumericEditMaskAttribute/<GetNonLocalizableProperties>d__13")]
protected virtual IEnumerable`1<KeyValuePair`2<string, Type>> GetNonLocalizableProperties();
    protected virtual object GetDefaultValue(string property, Type type);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<string, Type>> <>n__0();
}
[AttributeUsageAttribute("384")]
public class System.ComponentModel.DataAnnotations.RegExEditMaskAttribute : EditMaskWithCultureAttribute {
    [EditorBrowsableAttribute("1")]
public bool ReverseDfa { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool IsOptimistic { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool IsAutoComplete { get; public set; }
    public bool ShowPlaceholders { get; public set; }
    public char Placeholder { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool AllowBlankInput { get; public set; }
    [DXHelpExcludeAttribute("True")]
[EditorBrowsableAttribute("1")]
public Nullable`1<bool> AllowBlankInputNullable { get; }
    public RegExEditMaskAttribute(string regExMask);
    public bool get_ReverseDfa();
    public void set_ReverseDfa(bool value);
    public bool get_IsOptimistic();
    public void set_IsOptimistic(bool value);
    public bool get_IsAutoComplete();
    public void set_IsAutoComplete(bool value);
    public bool get_ShowPlaceholders();
    public void set_ShowPlaceholders(bool value);
    public char get_Placeholder();
    public void set_Placeholder(char value);
    public bool get_AllowBlankInput();
    public void set_AllowBlankInput(bool value);
    public Nullable`1<bool> get_AllowBlankInputNullable();
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.RegExEditMaskAttribute/<GetNonLocalizableProperties>d__21")]
protected virtual IEnumerable`1<KeyValuePair`2<string, Type>> GetNonLocalizableProperties();
    protected virtual object GetDefaultValue(string property, Type type);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<string, Type>> <>n__0();
}
[AttributeUsageAttribute("384")]
public class System.ComponentModel.DataAnnotations.RegularEditMaskAttribute : LegacyEditMaskAttribute {
    public RegularEditMaskAttribute(string regularMask);
}
[AttributeUsageAttribute("384")]
public class System.ComponentModel.DataAnnotations.SimpleEditMaskAttribute : LegacyEditMaskAttribute {
    public SimpleEditMaskAttribute(string simpleMask);
}
[AttributeUsageAttribute("384")]
public class System.ComponentModel.DataAnnotations.TimeOnlyEditMaskAttribute : DateTimeEditMaskAttributeBase {
    public TimeOnlyEditMaskAttribute(string timeOnlyMask);
}
[AttributeUsageAttribute("384")]
public class System.ComponentModel.DataAnnotations.TimeSpanEditMaskAttribute : EditMaskWithAdvancingCaretAttribute {
    private static object InputModeNotRestrictedLargestUnit;
    private static object DefaultDayDuration;
    [EditorBrowsableAttribute("1")]
public bool EnableMnemonics { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool SpinWithCarry { get; public set; }
    public bool AllowNegativeValues { get; public set; }
    public bool HideInsignificantPartsOnly { get; public set; }
    public TimeSpanMaskPart DefaultPart { get; public set; }
    public TimeSpanMaskInputMode InputMode { get; public set; }
    [EditorBrowsableAttribute("1")]
public TimeSpan DayDuration { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool ResetPartsOnSelectAllInput { get; public set; }
    public TimeSpanEditMaskAttribute(string timeSpanMask);
    private static TimeSpanEditMaskAttribute();
    public bool get_EnableMnemonics();
    public void set_EnableMnemonics(bool value);
    public bool get_SpinWithCarry();
    public void set_SpinWithCarry(bool value);
    public bool get_AllowNegativeValues();
    public void set_AllowNegativeValues(bool value);
    public bool get_HideInsignificantPartsOnly();
    public void set_HideInsignificantPartsOnly(bool value);
    public TimeSpanMaskPart get_DefaultPart();
    public void set_DefaultPart(TimeSpanMaskPart value);
    public TimeSpanMaskInputMode get_InputMode();
    public void set_InputMode(TimeSpanMaskInputMode value);
    public TimeSpan get_DayDuration();
    public void set_DayDuration(TimeSpan value);
    public bool get_ResetPartsOnSelectAllInput();
    public void set_ResetPartsOnSelectAllInput(bool value);
    [IteratorStateMachineAttribute("System.ComponentModel.DataAnnotations.TimeSpanEditMaskAttribute/<GetNonLocalizableProperties>d__25")]
protected virtual IEnumerable`1<KeyValuePair`2<string, Type>> GetNonLocalizableProperties();
    protected virtual object GetDefaultValue(string property, Type type);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<string, Type>> <>n__0();
}
[EditorBrowsableAttribute("1")]
public class System.ComponentModel.DateOnlyConverter : TypeConverter {
    private static ConstructorInfo fromDateConstructor;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private static object CreateDateOnlyDescriptor(DateOnly date);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.DXDescriptionAttribute : Attribute {
    private string description;
    public string Description { get; }
    public DXDescriptionAttribute(string description);
    public string get_Description();
}
[AttributeUsageAttribute("196")]
public class System.ComponentModel.DXDisplayNameAttribute : DisplayNameAttribute {
    public static string DefaultResourceFile;
    private LocalizedValueContainer valueContainer;
    [EditorBrowsableAttribute("1")]
public static bool UseResourceManager { get; public set; }
    public string ResourceFile { get; }
    public string ResourceName { get; }
    public Type ResourceFinder { get; }
    public string DisplayName { get; }
    public DXDisplayNameAttribute(Type resourceFinder, string resourceName);
    public DXDisplayNameAttribute(Type resourceFinder, string resourceFile, string resourceName);
    public DXDisplayNameAttribute(Type resourceFinder, string resourceFile, string resourceName, string defaultDisplayName);
    public static bool get_UseResourceManager();
    public static void set_UseResourceManager(bool value);
    public string get_ResourceFile();
    public string get_ResourceName();
    public Type get_ResourceFinder();
    public sealed virtual string get_DisplayName();
    public string GetLocalizedDisplayName();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[AttributeUsageAttribute("132")]
public class System.ComponentModel.DXDisplayNameIgnoreAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IgnoreRecursionOnly>k__BackingField;
    public bool IgnoreRecursionOnly { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreRecursionOnly();
    [CompilerGeneratedAttribute]
public void set_IgnoreRecursionOnly(bool value);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.DXHelpExcludeAttribute : Attribute {
    private bool exclude;
    public bool Exclude { get; }
    public DXHelpExcludeAttribute(bool exclude);
    public bool get_Exclude();
}
[AttributeUsageAttribute("140")]
public class System.ComponentModel.DXLocalizedDescriptionAttribute : DescriptionAttribute {
    public static string DefaultResourceFile;
    private static string ResourceNameSuffix;
    private LocalizedValueContainer valueContainer;
    public string Description { get; }
    public DXLocalizedDescriptionAttribute(Type resourceFinder, string resourceName);
    public DXLocalizedDescriptionAttribute(Type resourceFinder, string resourceFile, string resourceName);
    public DXLocalizedDescriptionAttribute(Type resourceFinder, string resourceName, string resourceFile, string defaultDescription);
    public sealed virtual string get_Description();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[AttributeUsageAttribute("4")]
[ClassInterfaceAttribute("0")]
public class System.ComponentModel.DXToolboxItemAttribute : ToolboxItemAttribute {
    public object TypeId { get; }
    protected DXToolboxItemAttribute(DXToolboxItemKind kind, string toolboxTypeName);
    public DXToolboxItemAttribute(DXToolboxItemKind kind);
    public DXToolboxItemAttribute(bool defaultType);
    protected virtual int Check();
    private void Disable();
    public virtual object get_TypeId();
}
public enum System.ComponentModel.DXToolboxItemKind : Enum {
    public int value__;
    public static DXToolboxItemKind Free;
    public static DXToolboxItemKind Regular;
    public static DXToolboxItemKind Hidden;
}
public class System.ComponentModel.DXWebToolboxItemAttribute : DXToolboxItemAttribute {
    public object TypeId { get; }
    public DXWebToolboxItemAttribute(DXToolboxItemKind kind);
    public DXWebToolboxItemAttribute(bool defaultType);
    protected virtual int Check();
    public virtual object get_TypeId();
}
internal class System.ComponentModel.LocalizedValueContainer : object {
    private static bool useResourceManager;
    public Type resourceFinder;
    public string resourceName;
    public string resourceFile;
    private string defaultValue;
    private string cultureNameCore;
    private string localizedValueCore;
    private static ConcurrentDictionary`2<ResourceManagerKey, ResourceManager> resourceManagersCache;
    public static bool UseResourceManager { get; public set; }
    public string DefaultValue { get; }
    public LocalizedValueContainer(Type resourceFinder, string resourceFile, string resourceName, string defaultValue, string resourceNameSuffix);
    private static LocalizedValueContainer();
    public static bool get_UseResourceManager();
    public static void set_UseResourceManager(bool value);
    private static string ExtractDefaultValue(string resourceName);
    public string get_DefaultValue();
    public string GetLocalizedValueOrDefault();
    public string GetLocalizedValue();
    private void EnsureLocalizedValue();
    public static string GetResourceString(Type resourceFinder, string resourceFileName, string resourceName, string defaultString);
    private static string GetResourceStringCore(CultureInfo culture, Type resourceFinder, string resourceFileName, string resourceName, string defaultString);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private static ResourceManager GetResourceManager(Type resourceFinder, string resourceFileName);
}
[AttributeUsageAttribute("196")]
public class System.ComponentModel.ResDisplayNameAttribute : DisplayNameAttribute {
    public ResDisplayNameAttribute(Type resourceFinder, string resourceFile, string resourceName);
    public ResDisplayNameAttribute(Type resourceFinder, string resourceFile, string resourceName, string defaultDisplayName);
}
[EditorBrowsableAttribute("1")]
public class System.ComponentModel.TimeOnlyConverter : TypeConverter {
    private static ConstructorInfo fromTicksConstructor;
    private static ConstructorInfo fromTimeConstructor;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private static object CreateTimeOnlyDescriptor();
    private static object CreateTimeOnlyDescriptor(TimeOnly time);
}
[TypeConverterAttribute("System.ComponentModel.DateOnlyConverter")]
public class System.DateOnly : ValueType {
    private static int MinDayNumber;
    private static int MaxDayNumber;
    private int _dayNumber;
    private static string OFormat;
    private static string RFormat;
    public static DateOnly MinValue { get; }
    public static DateOnly MaxValue { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public DayOfWeek DayOfWeek { get; }
    public int DayOfYear { get; }
    public int DayNumber { get; }
    private DateOnly(int dayNumber);
    public DateOnly(int year, int month, int day);
    public DateOnly(int year, int month, int day, Calendar calendar);
    public static DateOnly get_MinValue();
    public static DateOnly get_MaxValue();
    public static DateOnly FromDayNumber(int dayNumber);
    private static int DayNumberFromDateTime(DateTime dt);
    private DateTime UnderlyingDateTime();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public DayOfWeek get_DayOfWeek();
    public int get_DayOfYear();
    public int get_DayNumber();
    public DateOnly AddDays(int value);
    public DateOnly AddMonths(int value);
    public DateOnly AddYears(int value);
    public static bool op_Equality(DateOnly left, DateOnly right);
    public static bool op_Inequality(DateOnly left, DateOnly right);
    public static bool op_GreaterThan(DateOnly left, DateOnly right);
    public static bool op_GreaterThanOrEqual(DateOnly left, DateOnly right);
    public static bool op_LessThan(DateOnly left, DateOnly right);
    public static bool op_LessThanOrEqual(DateOnly left, DateOnly right);
    public DateTime ToDateTime(TimeOnly time);
    public DateTime ToDateTime(TimeOnly time, DateTimeKind kind);
    public static DateOnly FromDateTime(DateTime dateTime);
    public sealed virtual int CompareTo(DateOnly value);
    public sealed virtual int CompareTo(object value);
    public sealed virtual bool Equals(DateOnly value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public string ToLongDateString();
    public string ToShortDateString();
    public virtual string ToString();
    public string ToString(string format);
    public string ToString(IFormatProvider provider);
    public sealed virtual string ToString(string format, IFormatProvider provider);
    public static bool TryParse(string s, DateOnly& result);
    public static bool TryParse(string s, IFormatProvider provider, DateTimeStyles style, DateOnly& result);
    public static bool TryParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style, DateOnly& result);
    public static bool TryParseExact(string s, String[] formats, IFormatProvider provider, DateTimeStyles style, DateOnly& result);
    public static DateOnly Parse(string s);
    public static DateOnly Parse(string s, IFormatProvider provider);
    public static DateOnly Parse(string s, IFormatProvider provider, DateTimeStyles style);
    public static DateOnly Parse(string s, string format, IFormatProvider provider);
    public static DateOnly ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style);
    public static DateOnly ParseExact(string s, String[] formats, IFormatProvider provider, DateTimeStyles style);
}
internal class System.Drawing.Design.EnsureNamespaceExistsInAssembly : object {
}
[TypeConverterAttribute("System.ComponentModel.TimeOnlyConverter")]
public class System.TimeOnly : ValueType {
    private static int HoursPerDay;
    private static int MicrosecondsPerMillisecond;
    private static int MillisecondsPerSecond;
    private static long NanosecondsPerTick;
    private static long TicksPerMicrosecond;
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private static long MinTimeTicks;
    private static long MaxTimeTicks;
    private long _ticks;
    private static string OFormat;
    private static string RFormat;
    public static TimeOnly MinValue { get; }
    public static TimeOnly MaxValue { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Millisecond { get; }
    public int Microsecond { get; }
    public int Nanosecond { get; }
    public long Ticks { get; }
    private TimeOnly(ulong ticks);
    public TimeOnly(int hour, int minute);
    public TimeOnly(int hour, int minute, int second);
    public TimeOnly(int hour, int minute, int second, int millisecond);
    public TimeOnly(int hour, int minute, int second, int millisecond, int microsecond);
    public TimeOnly(long ticks);
    public static TimeOnly get_MinValue();
    public static TimeOnly get_MaxValue();
    private static ulong TimeToTicks(int hour, int minute, int second);
    private static ulong TimeToTicks(int hour, int minute, int second, int millisecond);
    internal static ulong TimeToTicks(int hour, int minute, int second, int millisecond, int microsecond);
    private static void ThrowOutOfRangeMillisecond();
    private static void ThrowOutOfRangeMicrosecond();
    private static void ThrowOutOfRangeTicks();
    private static void ThrowBadHourMinuteSecond();
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public int get_Millisecond();
    public int get_Microsecond();
    public int get_Nanosecond();
    public long get_Ticks();
    private TimeOnly AddTicks(long ticks);
    private TimeOnly AddTicks(long ticks, Int32& wrappedDays);
    public TimeOnly Add(TimeSpan value);
    public TimeOnly Add(TimeSpan value, Int32& wrappedDays);
    public TimeOnly AddHours(double value);
    public TimeOnly AddHours(double value, Int32& wrappedDays);
    public TimeOnly AddMinutes(double value);
    public TimeOnly AddMinutes(double value, Int32& wrappedDays);
    public bool IsBetween(TimeOnly start, TimeOnly end);
    public static bool op_Equality(TimeOnly left, TimeOnly right);
    public static bool op_Inequality(TimeOnly left, TimeOnly right);
    public static bool op_GreaterThan(TimeOnly left, TimeOnly right);
    public static bool op_GreaterThanOrEqual(TimeOnly left, TimeOnly right);
    public static bool op_LessThan(TimeOnly left, TimeOnly right);
    public static bool op_LessThanOrEqual(TimeOnly left, TimeOnly right);
    public static TimeSpan op_Subtraction(TimeOnly t1, TimeOnly t2);
    public static TimeOnly FromTimeSpan(TimeSpan timeSpan);
    public static TimeOnly FromDateTime(DateTime dateTime);
    public TimeSpan ToTimeSpan();
    private DateTime UnderlyingDateTime();
    public sealed virtual int CompareTo(TimeOnly value);
    public sealed virtual int CompareTo(object value);
    public sealed virtual bool Equals(TimeOnly value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public string ToLongTimeString();
    public string ToShortTimeString();
    public virtual string ToString();
    public string ToString(string format);
    public string ToString(IFormatProvider provider);
    public sealed virtual string ToString(string format, IFormatProvider provider);
    public static bool TryParse(string s, TimeOnly& result);
    public static bool TryParse(string s, IFormatProvider provider, DateTimeStyles style, TimeOnly& result);
    public static bool TryParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style, TimeOnly& result);
    public static bool TryParseExact(string s, String[] formats, IFormatProvider provider, DateTimeStyles style, TimeOnly& result);
    public static TimeOnly Parse(string s);
    public static TimeOnly Parse(string s, IFormatProvider provider);
    public static TimeOnly Parse(string s, IFormatProvider provider, DateTimeStyles style);
    public static TimeOnly Parse(string s, string format, IFormatProvider provider);
    public static TimeOnly ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style);
    public static TimeOnly ParseExact(string s, String[] formats, IFormatProvider provider, DateTimeStyles style);
}
internal class System.Windows.Forms.EnsureNamespaceExistsInAssembly : object {
}
