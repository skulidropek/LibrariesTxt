internal class DevExpress.NonCoverAttribute : Attribute {
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.AggregatedAttribute : Attribute {
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.AssociationAttribute : Attribute {
    private string name;
    private string assemblyName;
    private string elementTypeName;
    private Type elementType;
    private bool _UseAssociationNameAsIntermediateTableName;
    [DescriptionAttribute("Gets the name of the association.")]
public string Name { get; }
    [DescriptionAttribute("Gets or sets the full name of the type which describes the object on the opposite end of the association.")]
public string ElementTypeName { get; public set; }
    internal Type ElementType { get; }
    [DescriptionAttribute("Gets or sets the assembly name where the type which is associated with the object at the opposite end of the association is declared.")]
public string AssemblyName { get; public set; }
    [DescriptionAttribute("Gets or sets whether the association’s name is used as the name of a junction table in a many-to-many relationship.")]
public bool UseAssociationNameAsIntermediateTableName { get; public set; }
    private AssociationAttribute(XmlNode attributeNode);
    public AssociationAttribute(string name, string elementAssemblyName, string elementTypeName);
    public AssociationAttribute(string name);
    public AssociationAttribute(string name, Type elementType);
    public AssociationAttribute(Type elementType);
    public string get_Name();
    public string get_ElementTypeName();
    public void set_ElementTypeName(string value);
    internal Type get_ElementType();
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public bool get_UseAssociationNameAsIntermediateTableName();
    public void set_UseAssociationNameAsIntermediateTableName(bool value);
}
public enum DevExpress.Xpo.AsyncBehavior : Enum {
    public int value__;
    public static AsyncBehavior Default;
    public static AsyncBehavior ThrowIfNotSupported;
    public static AsyncBehavior WrapIfNotSupported;
    public static AsyncBehavior WrapAlways;
}
public class DevExpress.Xpo.AsyncCommitCallback : MulticastDelegate {
    public AsyncCommitCallback(object object, IntPtr method);
    public virtual void Invoke(Exception ex);
    public virtual IAsyncResult BeginInvoke(Exception ex, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.AsyncSelectDataCallback : MulticastDelegate {
    public AsyncSelectDataCallback(object object, IntPtr method);
    public virtual void Invoke(List`1<Object[]> result, Exception ex);
    public virtual IAsyncResult BeginInvoke(List`1<Object[]> result, Exception ex, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("Use IdentityMapBehavior instead")]
public enum DevExpress.Xpo.CacheBehavior : Enum {
    public int value__;
    public static CacheBehavior Default;
    public static CacheBehavior Weak;
    public static CacheBehavior Strong;
}
[FlagsAttribute]
public enum DevExpress.Xpo.CollectionBindingBehavior : Enum {
    public int value__;
    public static CollectionBindingBehavior AllowNone;
    public static CollectionBindingBehavior AllowNew;
    public static CollectionBindingBehavior AllowRemove;
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.ColumnDbDefaultValueAttribute : Attribute {
    private string dbDefaultValue;
    public string DbDefaultValue { get; public set; }
    public ColumnDbDefaultValueAttribute(string dbDefaultValue);
    private ColumnDbDefaultValueAttribute(XmlNode attributeNode);
    public string get_DbDefaultValue();
    public void set_DbDefaultValue(string value);
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.ColumnDefaultValueAttribute : Attribute {
    private object defaultValue;
    public object DefaultValue { get; public set; }
    public ColumnDefaultValueAttribute(object defaultValue);
    public ColumnDefaultValueAttribute(int dateYear, int dateMonth, int dateDay, int dateHour, int dateMinute, int dateSecond, int dateMillisecond);
    public ColumnDefaultValueAttribute(int guidPartA, short guidPartB, short guidPartC, byte guidPartD, byte guidPartE, byte guidPartF, byte guidPartG, byte guidPartH, byte guidPartI, byte guidPartJ, byte guidPartK);
    private ColumnDefaultValueAttribute(XmlNode attributeNode);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
}
public enum DevExpress.Xpo.CommitChangesMode : Enum {
    public int value__;
    public static CommitChangesMode None;
    public static CommitChangesMode InTransaction;
    public static CommitChangesMode NotInTransactionUnitOfWork;
    public static CommitChangesMode NotInTransactionSession;
}
[XmlTypeAttribute("CommitObjectsResult")]
public class DevExpress.Xpo.CommitObjectStubsResult : object {
    private object key;
    private object olf;
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public object Key { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public object OptimisticLockField { get; public set; }
    public CommitObjectStubsResult(object key, object optimisticLockField);
    public object get_Key();
    public void set_Key(object value);
    public object get_OptimisticLockField();
    public void set_OptimisticLockField(object value);
}
[AttributeUsageAttribute("1412")]
public class DevExpress.Xpo.CustomAttribute : Attribute {
    private string theName;
    private string theValue;
    [DescriptionAttribute("Gets the attribute’s name.")]
public string Name { get; }
    [DescriptionAttribute("Gets the attribute’s value.")]
public string Value { get; }
    private CustomAttribute(XmlNode attributeNode);
    public CustomAttribute(string theName, string theValue);
    public string get_Name();
    public string get_Value();
}
public class DevExpress.Xpo.CustomCriteriaCollection : CustomDictionaryCollection`2<MethodInfo, ICustomCriteriaOperatorQueryable> {
    protected virtual MethodInfo GetKey(ICustomCriteriaOperatorQueryable item);
}
public static class DevExpress.Xpo.CustomCriteriaManager : object {
    private static CustomCriteriaCollection registeredCustomCriteria;
    [DescriptionAttribute("Returns custom criteria registered in an application via the CustomCriteriaManager.RegisterCriterion and CustomCriteriaManager.RegisterCriteria method calls.")]
public static int RegisteredCriterionCount { get; }
    private static CustomCriteriaManager();
    public static void RegisterCriterion(ICustomCriteriaOperatorQueryable customCriterion);
    public static void RegisterCriteria(IEnumerable`1<ICustomCriteriaOperatorQueryable> customCriteria);
    public static bool UnregisterCriterion(ICustomCriteriaOperatorQueryable customCriterion);
    public static bool UnregisterCriterion(MethodInfo methodInfo);
    public static int get_RegisteredCriterionCount();
    public static ICustomCriteriaOperatorQueryable GetCriteria(MethodInfo methodInfo);
    public static CustomCriteriaCollection GetRegisteredCriteria();
}
public class DevExpress.Xpo.CustomSecurityCriteriaPatcherEventArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
private XPClassInfo <ClassInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityContext <SecurityContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ISecurityCriteriaPatcher <CustomSecurityCriteriaPatcher>k__BackingField;
    public XPClassInfo ClassInfo { get; public set; }
    public SecurityContext SecurityContext { get; public set; }
    public ISecurityCriteriaPatcher CustomSecurityCriteriaPatcher { get; public set; }
    public CustomSecurityCriteriaPatcherEventArgs(XPClassInfo xPClassInfo, SecurityContext securityContext);
    [CompilerGeneratedAttribute]
public XPClassInfo get_ClassInfo();
    [CompilerGeneratedAttribute]
public void set_ClassInfo(XPClassInfo value);
    [CompilerGeneratedAttribute]
public SecurityContext get_SecurityContext();
    [CompilerGeneratedAttribute]
public void set_SecurityContext(SecurityContext value);
    [CompilerGeneratedAttribute]
public ISecurityCriteriaPatcher get_CustomSecurityCriteriaPatcher();
    [CompilerGeneratedAttribute]
public void set_CustomSecurityCriteriaPatcher(ISecurityCriteriaPatcher value);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("0")]
[EditorAttribute("DevExpress.Xpo.Design.DataViewPropertiesCollectionEditor,DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class DevExpress.Xpo.DataViewPropertiesCollection : CollectionBase {
    private XPDataView owner;
    public DataViewProperty Item { get; }
    public DataViewProperty Item { get; }
    public DataViewPropertiesCollection(XPDataView owner);
    public void Add(DataViewProperty sortProperty);
    public void AddRange(DataViewProperty[] sortProperties);
    public void Add(DataViewPropertiesCollection sortProperties);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    public DataViewProperty get_Item(int index);
    public DataViewProperty get_Item(string name);
}
[TypeConverterAttribute("DevExpress.Xpo.DataViewPropertyConverter")]
public class DevExpress.Xpo.DataViewProperty : object {
    private string name;
    private Type valueType;
    private XPDataView owner;
    [DescriptionAttribute("Gets or sets the column’s name.")]
[CategoryAttribute("Data")]
public string Name { get; public set; }
    [DescriptionAttribute("Gets or sets the column’s type.")]
[CategoryAttribute("Data")]
[EditorAttribute("DevExpress.Utils.Editors.SimpleTypeEditor, DevExpress.Data.Desktop.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Utils.Editors.SimpleToStringTypeConverter,DevExpress.Data.Desktop.v24.2, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
public Type ValueType { get; public set; }
    public DataViewProperty(string name);
    public DataViewProperty(string name, Type valueType);
    protected internal void SetOwner(XPDataView owner);
    private void ResetView();
    public string get_Name();
    public void set_Name(string value);
    public Type get_ValueType();
    public void set_ValueType(Type value);
}
internal class DevExpress.Xpo.DataViewPropertyConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destinationType);
}
internal class DevExpress.Xpo.DataViewPropertyDescriptor : PropertyDescriptor {
    private int index;
    private Type reportedType;
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public DataViewPropertyDescriptor(string name, Type type, int index);
    public virtual bool get_IsReadOnly();
    public virtual object GetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.DataViewRecord : object {
    private XPDataView view;
    private Object[] data;
    internal Object[] Data { get; }
    [DescriptionAttribute("Gets the data view to which the current record belongs.")]
public XPDataView View { get; }
    public object Item { get; }
    public object Item { get; }
    public DataViewRecord(XPDataView view, Object[] data);
    internal Object[] get_Data();
    public XPDataView get_View();
    public object get_Item(int index);
    public object get_Item(string name);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
public class DevExpress.Xpo.DB.Access2007ProviderFactory : Access97ProviderFactory {
    public bool HasUserName { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual bool get_HasUserName();
    public virtual string get_ProviderKey();
    public virtual string get_FileFilter();
}
public class DevExpress.Xpo.DB.Access97ProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.AccessConnectionProvider : OleDBConnectionProvider {
    public static string XpoProviderTypeString;
    public static int MaximumStringSize;
    private static String[] parameterNameCache;
    private DbTypeMapperBase dbTypeMapper;
    protected bool NeedsIndexForForeignKey { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    private static AccessConnectionProvider();
    public AccessConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static string GetConnectionString(string database, string userId, string password);
    public static string GetConnectionStringACE(string database, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AccessConnectionProvider/<GetIdentityAsync>d__30")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    private bool ExtractMajorPartOfNativeErrorCode(Exception e, Int32& errorCode);
    protected virtual IDbConnection CreateConnection();
    [SecuritySafeCriticalAttribute]
[SupportedOSPlatformAttribute("windows")]
protected virtual void CreateDataBase();
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual string GetSafeNameRoot(string originalName);
    public virtual void CreateForeignKey(DBTable table, DBForeignKey foreignKey);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string GetParameterType(OperandValue parameter);
    protected virtual IDbCommand CreateCommand(Query query);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    public virtual string FormatConstraint(string constraintName);
    public static string GetConnectionString(string database);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected virtual bool get_NeedsIndexForForeignKey();
    protected virtual SelectedData ExecuteSproc(string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AccessConnectionProvider/<ExecuteSprocAsync>d__61")]
protected virtual Task`1<SelectedData> ExecuteSprocAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    private void PrepareCommandForSprocCall(IDbCommand command, string sprocName, OperandValue[] parameters);
    public virtual DBStoredProcedure[] GetStoredProcedures();
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    protected virtual DbTypeMapperBase get_DbTypeMapper();
}
public class DevExpress.Xpo.DB.AccessConnectionProviderMultiUserThreadSafe : MarshalByRefObject {
    public static string XpoProviderTypeString;
    public string ConnectionString;
    private AutoCreateOption _AutoCreateOption;
    [DescriptionAttribute("Returns which operations are performed when a session is connected to a data store.")]
[BrowsableAttribute("False")]
public AutoCreateOption AutoCreateOption { get; }
    private static AccessConnectionProviderMultiUserThreadSafe();
    public AccessConnectionProviderMultiUserThreadSafe(string connectionString, AutoCreateOption autoCreateOption);
    public static string GetConnectionString(string database, string userId, string password);
    public static string GetConnectionString(string database);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static void Register();
    protected IDbConnection GetConnection();
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public sealed virtual SelectedData SelectData(SelectStatement[] selects);
    public sealed virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AccessConnectionProviderMultiUserThreadSafe/<SelectDataAsync>d__14")]
public sealed virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AccessConnectionProviderMultiUserThreadSafe/<ModifyDataAsync>d__15")]
public sealed virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public sealed virtual DBTable[] GetStorageTables(String[] tables);
    public sealed virtual String[] GetStorageTablesList(bool includeViews);
    private sealed virtual override void DevExpress.Xpo.DB.Helpers.IDataStoreForTests.ClearDatabase();
    private void ThrowIfCommandNotSupported(string command, IDataStore provider);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AccessConnectionProviderMultiUserThreadSafe/<DevExpress-Xpo-Helpers-ICommandChannelAsync-DoAsync>d__23")]
private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
}
public class DevExpress.Xpo.DB.AdvantageConnectionProvider : ConnectionProviderSql {
    private bool isADS10;
    private ReflectConnectionHelper helper;
    private DbTypeMapperBase dbTypeMapper;
    public static string XpoProviderTypeString;
    public static int MaximumStringSize;
    private static string CastToTimestampBegin;
    private static string CastToTimestampEnd;
    private GetPropertyValueDelegate getAdsCommandLastAutoinc;
    private ExecMethodDelegate commandBuilderDeriveParametersHandler;
    private static Char[] achtungChars;
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    private GetPropertyValueDelegate GetAdsCommandLastAutoinc { get; }
    private static AdvantageConnectionProvider();
    public AdvantageConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    public static string GetConnectionString(string database);
    public static string GetConnectionString(string database, string password);
    public static string GetConnectionString(string database, string username, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    private void CheckVersion(IDbConnection connection);
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ReformatReadValue(object value, ReformatReadValueArgs args);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    private GetPropertyValueDelegate get_GetAdsCommandLastAutoinc();
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AdvantageConnectionProvider/<GetIdentityAsync>d__45")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private void InitDelegates();
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual void CreateDataBase();
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private string GetTypeNameFromCode(int code);
    private string GetFullTypeName(string typeName, short size, short scale);
    private DBColumnType GetTypeFromCode(int code, Boolean& isIdentity, Int16& size);
    private ParameterValue CreateParameterForSystemQuery(int tag, string value, int size);
    private void GetColumns(DBTable table);
    private bool TryExtractTimestampFromSTOTSFunction(string expression, DateTime& outDateTime);
    public virtual void CreatePrimaryKey(DBTable table);
    private void AddParameter(IDbCommand cmd, string name, object value);
    private void GetPrimaryKey(DBTable table);
    private bool IsColumnsEqual(StringCollection first, StringCollection second);
    public virtual void CreateIndex(DBTable table, DBIndex index);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void CreateForeignKey(DBTable table, DBForeignKey fk);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual int GetSafeNameTableMaxLength();
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    protected virtual SelectedData ExecuteSproc(string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AdvantageConnectionProvider/<ExecuteSprocAsync>d__83")]
protected virtual Task`1<SelectedData> ExecuteSprocAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    private void PrepareCommandForExecuteSproc(IDbCommand command, string sprocName, OperandValue[] parameters);
    public virtual DBStoredProcedure[] GetStoredProcedures();
    private static string FormatMod(string arg, int multiplier, int divider);
    private static string FormatGetInt(string arg, int multiplier, int divider);
    private static string FnAddDateTime(string datetimeOperand, string dayPart, string secondPart);
    private static string WrapWithCastAsTimestamp(string arg);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FnConcat(String[] operands);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    private string FormatString(object value);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    public virtual string FormatConstraint(string constraintName);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    private void ClearDatabase(IDbCommand command);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
}
public class DevExpress.Xpo.DB.AdvantageProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.AsaConnectionProvider : ConnectionProviderSql {
    private ReflectConnectionHelper helper;
    private DbTypeMapperBase dbTypeMapper;
    private string currentNamespace;
    private string currentAssembly;
    public static string XpoProviderTypeString;
    private static string AnywhereNamespace;
    private static string SapNamespace;
    private static string ConnectionTypeNameWithDot;
    public static int MaximumStringSize;
    private static String[][] assemblyNames;
    private static int assemblyNameFoundIndex;
    private ExecMethodDelegate commandBuilderDeriveParametersHandler;
    private static Char[] achtungChars;
    private static Char[] restrictedCharsInIdentifier;
    private bool hasIdentityes;
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    public string CurrentNamespace { get; }
    public string CurrentAssembly { get; }
    protected bool NeedsIndexForForeignKey { get; }
    public bool NativeSkipTakeSupported { get; }
    public bool SupportNamedParameters { get; }
    public bool NativeOuterApplySupported { get; }
    private static AsaConnectionProvider();
    public AsaConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    public string get_CurrentNamespace();
    public string get_CurrentAssembly();
    public static string GetConnectionString(string databaseFile, string userId, string password);
    public static string GetConnectionString(string server, string database, string userId, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AsaConnectionProvider/<GetIdentityAsync>d__45")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual void CreateDataBase();
    private ParameterValue CreateParameterForSystemQuery(int tag, string value, int size);
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private Type GetTypeFromString(string typeName, int length);
    private DBColumnType GetDbTypeFromString(string typeStr, int length);
    private DBColumnType GetTypeFromNumber(byte type, short userType, int length, byte charSize, Int32& effectiveLength);
    private void GetColumns(DBTable table);
    private static string GetFullTypeName(string typeName, Nullable`1<byte> precision, byte scale, int length);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    private string FnConcat(String[] operands);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual string GetSafeNameRoot(string originalName);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual int GetObjectNameEffectiveLength(string objectName);
    protected virtual bool get_NeedsIndexForForeignKey();
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    private string FormatString(object value);
    public virtual bool get_SupportNamedParameters();
    public virtual bool get_NativeOuterApplySupported();
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    public virtual string FormatConstraint(string constraintName);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    private void ClearDatabase(IDbCommand command);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected virtual ModificationResult ProcessModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AsaConnectionProvider/<ModifyDataAsync>d__104")]
public virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public virtual string GenerateStoredProcedures(DBTable table, String& dropLines);
    private void GenerateView(DBTable table, StringBuilder result);
    private void GenerateInsertSP(DBTable table, StringBuilder result);
    private void GenerateUpdateSP(DBTable table, StringBuilder result);
    private void GenerateDeleteSP(DBTable table, StringBuilder result);
    private void GenerateInsteadOfInsertTrigger(DBTable table, StringBuilder result);
    private void GenerateInsteadOfUpdateTrigger(DBTable table, StringBuilder result);
    private void GenerateInsteadOfDeleteTrigger(DBTable table, StringBuilder result);
    private void AppendKeys(DBTable table, StringBuilder result);
    private void AppendWhere(DBTable table, StringBuilder result);
    private void InitTrigger(DBTable table, StringBuilder result);
    private void InitTriggerCore(DBTable table, StringBuilder result);
    private void FinalizeTrigger(DBTable table, StringBuilder result);
    private void FinalizeTriggerCore(StringBuilder result);
    public virtual DBStoredProcedure[] GetStoredProcedures();
}
public class DevExpress.Xpo.DB.AsaProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public bool SupportStoredProcedures { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
    public virtual bool get_SupportStoredProcedures();
}
public class DevExpress.Xpo.DB.AseConnectionProvider : ConnectionProviderSql {
    public static string XpoProviderTypeString;
    private static string MulticolumnIndexesAreNotSupported;
    private ReflectConnectionHelper helper;
    private DbTypeMapperBase dbTypeMapper;
    public static Nullable`1<bool> GlobalExecuteUpdateSchemaInTransaction;
    public Nullable`1<bool> ExecuteUpdateSchemaInTransaction;
    public static int MaximumStringSize;
    private static int MaxVarLength;
    private static String[] assemblyNames;
    private static int assemblyFoundIndex;
    private static Char[] achtungChars;
    private ExecMethodDelegate commandBuilderDeriveParametersHandler;
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    protected bool InternalExecuteUpdateSchemaInTransaction { get; }
    private static AseConnectionProvider();
    public AseConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    protected virtual bool get_InternalExecuteUpdateSchemaInTransaction();
    public static string GetConnectionString(string server, string database, string userId, string password);
    public static string GetConnectionString(string server, int port, string database, string userId, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    private string GetSqlCreateColumnTypeSp(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.AseConnectionProvider/<GetIdentityAsync>d__43")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual void CreateDataBase();
    protected virtual bool IsConnectionBroken(Exception e);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private ParameterValue CreateParameterForSystemQuery(int tag, string value, int size);
    private DBColumnType GetTypeFromNumber(byte type, byte prec, int length, short userType, byte charSize, Int32& effectiveLength);
    private static string GetFullTypeName(string typeName, byte precision, byte scale, int length);
    private void GetColumns(DBTable table);
    private string GetColumnDefaultValueSqlExpression(string dbDefaultValueName);
    private void GetPrimaryKey(DBTable table);
    public virtual void CreateIndex(DBTable table, DBIndex index);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual int GetSafeNameTableMaxLength();
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FnRemove(String[] operands);
    private string FnRpad(String[] operands);
    private string FnLpad(String[] operands);
    private string FnLog(String[] operands);
    private string FnCharIndex(String[] operands);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    private string FormatString(object value);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    public virtual string FormatConstraint(string constraintName);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    private void ClearDatabase(IDbCommand command);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual DBStoredProcedure[] GetStoredProcedures();
}
public class DevExpress.Xpo.DB.AseProviderFactory : ProviderFactory {
    public bool HasPort { get; }
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public bool SupportStoredProcedures { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasPort();
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual String[] GetDatabases(string server, int port, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
    public virtual bool get_SupportStoredProcedures();
}
public abstract class DevExpress.Xpo.DB.BaseODPConnectionProvider : BaseOracleConnectionProvider {
    private ReflectConnectionHelper helper;
    private SetPropertyValueDelegate setOracleCommandBindByName;
    private SetPropertyValueDelegate setOracleInitialLONGFetchSize;
    public static bool VarcharParameterFixEnabled;
    private ReflectionGetValuesHelperBase getValuesHelper;
    private DbTypeMapperBase dbTypeMapper;
    private ExecMethodDelegate commandBuilderDeriveParametersHandler;
    protected string OracleAssemblyName { get; }
    protected string OracleDbTypeName { get; }
    protected string OracleDecimanlTypeName { get; }
    protected string OracleCommandTypeName { get; }
    protected string OracleExceptionTypeName { get; }
    protected string OracleParameterTypeName { get; }
    protected string OracleDataReaderTypeName { get; }
    protected string OracleCommandBuilderTypeName { get; }
    protected string OracleGlobalizationTypeName { get; }
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected bool IsODPv10 { get; }
    protected bool IsFieldTypesNeeded { get; }
    private ReflectionGetValuesHelperBase GetValuesHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    public BaseODPConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private static BaseODPConnectionProvider();
    protected abstract virtual string get_OracleAssemblyName();
    protected abstract virtual string get_OracleDbTypeName();
    protected abstract virtual string get_OracleDecimanlTypeName();
    protected abstract virtual string get_OracleCommandTypeName();
    protected abstract virtual string get_OracleExceptionTypeName();
    protected abstract virtual string get_OracleParameterTypeName();
    protected abstract virtual string get_OracleDataReaderTypeName();
    protected abstract virtual string get_OracleCommandBuilderTypeName();
    protected abstract virtual string get_OracleGlobalizationTypeName();
    private ReflectConnectionHelper get_ConnectionHelper();
    protected abstract virtual bool get_IsODPv10();
    protected virtual void PrepareDelegates();
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    private int GetValueSize(object value);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual bool IsConnectionBroken(Exception e);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual IDbConnection CreateConnection();
    public virtual IDbCommand CreateCommand();
    protected virtual bool get_IsFieldTypesNeeded();
    private ReflectionGetValuesHelperBase get_GetValuesHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    protected virtual void GetValues(IDataReader reader, Type[] fieldTypes, Object[] values);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    protected virtual SelectedData ExecuteSprocParametrized(string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.BaseODPConnectionProvider/<ExecuteSprocParametrizedAsync>d__47")]
protected virtual Task`1<SelectedData> ExecuteSprocParametrizedAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    protected virtual SelectedData ExecuteSproc(string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.BaseODPConnectionProvider/<ExecuteSprocAsync>d__49")]
protected virtual Task`1<SelectedData> ExecuteSprocAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    private void PrepareCommandForSprocCall(IDbCommand command, string sprocName, OperandValue[] parameters);
    private void PrepareCommandForSprocCallParametrized(IDbCommand command, string sprocName, OperandValue[] parameters);
    private string FormatSprocCall(string sprocName, String[] listParams);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<SelectedData> <>n__0(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<SelectedData> <>n__1(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
}
public abstract class DevExpress.Xpo.DB.BaseOracleConnectionProvider : ConnectionProviderSql {
    private UpdateSchemaSqlFormatterHelper updateSchemaSqlFormatter;
    public static int MaximumStringSize;
    public static int MaximumBinarySize;
    private static int DefaultFloatPrecistion;
    private bool getForeignKeysHasNoRights;
    private static string IdentitySequencePrefix;
    public string ObjectsOwner;
    public bool SysUsersAvailable;
    public bool IsUtf8Charset;
    protected UpdateSchemaSqlFormatterHelper UpdateSchemaFormatter { get; }
    public bool NativeSkipTakeSupported { get; }
    public BaseOracleConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    protected virtual UpdateSchemaSqlFormatterHelper get_UpdateSchemaFormatter();
    protected virtual DBSchemaComparerSql CreateSchemaComparer();
    protected virtual void PrepareDelegates();
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForTimeOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual long GetIdentity(InsertStatement root, TaggedParametersHolder identitiesByTag);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.BaseOracleConnectionProvider/<GetIdentityAsync>d__31")]
protected virtual Task`1<long> GetIdentityAsync(InsertStatement root, TaggedParametersHolder identitiesByTag, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private IDataParameter ExecPrepareReturnParameter(IDbCommand command);
    private bool ExecProcessReturnParameter(IDbCommand command, Dictionary`2<OperandValue, string> parameters, IDataParameter returnParameter);
    private bool Exec(IDbCommand command, Dictionary`2<OperandValue, string> parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.BaseOracleConnectionProvider/<ExecAsync>d__35")]
private Task`1<bool> ExecAsync(IDbCommand command, Dictionary`2<OperandValue, string> parameters, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private bool HasLob(BaseStatement query);
    protected virtual bool IsBatchingForbidden(ModificationStatement dml);
    private void ProcessModificationStatement(ModificationStatement dml, IDbCommand command, TaggedParametersHolder identitiesByTag, List`1<ParameterValue> result, Dictionary`2<OperandValue, string> parameters, StringBuilder sql);
    private void ProcessIdentityParameters(ModificationStatement[] dmlStatements);
    protected virtual ModificationResult ProcessModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.BaseOracleConnectionProvider/<ProcessModifyDataAsync>d__41")]
protected virtual Task`1<ModificationResult> ProcessModifyDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    protected virtual Query GenerateBatchedIdentityInsert(InsertStatement insert, string identityParameterName, TaggedParametersHolder identitiesByTag, Dictionary`2<OperandValue, string> parameters);
    protected virtual void CreateDataBase();
    protected virtual string GetSeqName(string tableName);
    protected virtual string GetSeqViewName(string tableName);
    public virtual void CreateTable(DBTable table);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    private ParameterValue CreateParameterForSystemQuery(int tag, string value, int size);
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private DBColumnType GetTypeFromString(string typeName, int size, Nullable`1<int> precision, int scale, string charLength, String& fullTypeName);
    private void GetColumns(DBTable table);
    private void GetPrimaryKey(DBTable table);
    private bool IsSequenceForTableExists(string schema, string safeTableName);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual int GetObjectNameEffectiveLength(string objectName);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string FormatOrder(string sortProperty, SortingDirection direction);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    public virtual string FormatConstraint(string constraintName);
    public void ClearDatabase(IDbCommand command);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    public virtual string GetCurrentUser();
    public virtual bool CheckSysUsers();
    private void ReadDbCharset();
    private string GetSchemaName(string table);
    private string GetTableName(string table);
    public virtual string GenerateStoredProcedures(DBTable table, String& dropLines);
    private void GenerateView(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateInsertSP(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateUpdateSP(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateDeleteSP(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateInsteadOfInsertTrigger(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateInsteadOfUpdateTrigger(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateInsteadOfDeleteTrigger(DBTable table, StringBuilder result, List`1<string> dropList);
    private static string GetRawType(string type);
    private void AppendKeys(DBTable table, StringBuilder result);
    private void AppendWhere(DBTable table, StringBuilder result);
    public virtual DBStoredProcedure[] GetStoredProcedures();
}
public class DevExpress.Xpo.DB.CachedDataStoreClient : CachedDataStoreClientBase`1<ICachedDataStoreWarpService> {
    private bool needCustomChannel;
    public CachedDataStoreClient(string configName);
    public CachedDataStoreClient(Binding binding, EndpointAddress remoteAddress);
    protected virtual ICachedDataStoreWarpService CreateChannel();
}
public class DevExpress.Xpo.DB.CachedDataStoreClientAsync : CachedDataStoreClientAsyncBase`1<ICachedDataStoreWarpServiceAsync> {
    private bool needCustomChannel;
    public CachedDataStoreClientAsync(string configName);
    public CachedDataStoreClientAsync(Binding binding, EndpointAddress remoteAddress);
    protected virtual ICachedDataStoreWarpServiceAsync CreateChannel();
}
public class DevExpress.Xpo.DB.CachedDataStoreClientAsyncBase`1 : DataStoreClientAsyncBase`1<TContractType> {
    private bool selectDataRawFound;
    private bool selectDataRawNotFound;
    public CachedDataStoreClientAsyncBase`1(string configName);
    public CachedDataStoreClientAsyncBase`1(Binding binding, EndpointAddress remoteAddress);
    private sealed virtual override DataCacheModificationResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.ModifyData(DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    private sealed virtual override DataCacheResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.NotifyDirtyTables(DataCacheCookie cookie, String[] dirtyTablesNames);
    private sealed virtual override DataCacheResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.ProcessCookie(DataCacheCookie cookie);
    private sealed virtual override DataCacheSelectDataResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.SelectData(DataCacheCookie cookie, SelectStatement[] selects);
    private sealed virtual override DataCacheUpdateSchemaResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.UpdateSchema(DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.CachedDataStoreClientAsyncBase`1/<DevExpress-Xpo-DB-ICacheToCacheCommunicationCoreAsync-ModifyDataAsync>d__9")]
private sealed virtual override Task`1<DataCacheModificationResult> DevExpress.Xpo.DB.ICacheToCacheCommunicationCoreAsync.ModifyDataAsync(CancellationToken cancellationToken, DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.CachedDataStoreClientAsyncBase`1/<DevExpress-Xpo-DB-ICacheToCacheCommunicationCoreAsync-NotifyDirtyTablesAsync>d__10")]
private sealed virtual override Task`1<DataCacheResult> DevExpress.Xpo.DB.ICacheToCacheCommunicationCoreAsync.NotifyDirtyTablesAsync(CancellationToken cancellationToken, DataCacheCookie cookie, String[] dirtyTablesNames);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.CachedDataStoreClientAsyncBase`1/<DevExpress-Xpo-DB-ICacheToCacheCommunicationCoreAsync-ProcessCookieAsync>d__11")]
private sealed virtual override Task`1<DataCacheResult> DevExpress.Xpo.DB.ICacheToCacheCommunicationCoreAsync.ProcessCookieAsync(CancellationToken cancellationToken, DataCacheCookie cookie);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.CachedDataStoreClientAsyncBase`1/<DevExpress-Xpo-DB-ICacheToCacheCommunicationCoreAsync-SelectDataAsync>d__12")]
private sealed virtual override Task`1<DataCacheSelectDataResult> DevExpress.Xpo.DB.ICacheToCacheCommunicationCoreAsync.SelectDataAsync(CancellationToken cancellationToken, DataCacheCookie cookie, SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.CachedDataStoreClientAsyncBase`1/<DevExpress-Xpo-DB-ICacheToCacheCommunicationCoreAsync-UpdateSchemaAsync>d__13")]
private sealed virtual override Task`1<DataCacheUpdateSchemaResult> DevExpress.Xpo.DB.ICacheToCacheCommunicationCoreAsync.UpdateSchemaAsync(CancellationToken cancellationToken, DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    protected virtual bool HandleCacheToCacheCommunicationException(Exception ex);
}
public class DevExpress.Xpo.DB.CachedDataStoreClientBase`1 : DataStoreClientBase`1<TContractType> {
    private bool selectDataRawFound;
    private bool selectDataRawNotFound;
    public CachedDataStoreClientBase`1(string configName);
    public CachedDataStoreClientBase`1(Binding binding, EndpointAddress remoteAddress);
    private sealed virtual override DataCacheModificationResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.ModifyData(DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    private sealed virtual override DataCacheResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.NotifyDirtyTables(DataCacheCookie cookie, String[] dirtyTablesNames);
    private sealed virtual override DataCacheResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.ProcessCookie(DataCacheCookie cookie);
    private sealed virtual override DataCacheSelectDataResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.SelectData(DataCacheCookie cookie, SelectStatement[] selects);
    private sealed virtual override DataCacheUpdateSchemaResult DevExpress.Xpo.DB.ICacheToCacheCommunicationCore.UpdateSchema(DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    protected virtual bool HandleCacheToCacheCommunicationException(Exception ex);
}
public class DevExpress.Xpo.DB.CachedDataStoreService : DataStoreService {
    private ICachedDataStore cachedProvider;
    public CachedDataStoreService(ICachedDataStore provider);
    public virtual OperationResult`1<DataCacheModificationResult> ModifyDataCached(DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    public virtual OperationResult`1<DataCacheResult> NotifyDirtyTables(DataCacheCookie cookie, String[] dirtyTablesNames);
    public virtual OperationResult`1<DataCacheResult> ProcessCookie(DataCacheCookie cookie);
    public virtual OperationResult`1<DataCacheSelectDataResult> SelectDataCached(DataCacheCookie cookie, SelectStatement[] selects);
    public virtual OperationResult`1<DataCacheUpdateSchemaResult> UpdateSchemaCached(DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    public virtual OperationResult`1<DataCacheWarpSelectDataResult> WarpSelectDataCached(DataCacheCookie cookie, SelectStatement[] selects);
}
public class DevExpress.Xpo.DB.ClientChannelCreatedEventArgs : EventArgs {
    private object channel;
    public object Channel { get; }
    public ClientChannelCreatedEventArgs(object channel);
    public object get_Channel();
}
public class DevExpress.Xpo.DB.ClientChannelCreatedHandler : MulticastDelegate {
    public ClientChannelCreatedHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ClientChannelCreatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ClientChannelCreatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.DataCacheWarpSelectDataResult : DataCacheResult {
    public Byte[] SelectResult;
    public DataCacheCookie SelectingCookie;
    public DataCacheWarpSelectDataResult(DataCacheSelectDataResult selectedData);
    public DataCacheSelectDataResult GetResult();
}
public class DevExpress.Xpo.DB.DataSetDataStore : DataStoreBase {
    public static string XpoProviderTypeString;
    private bool caseSensitive;
    private DataSet data;
    private CustomFunctionCollection customFunctionCollection;
    private CustomAggregateCollection customAggregateCollection;
    private Hashtable descriptors;
    public bool CanCreateSchema { get; }
    public DataSet Data { get; }
    [ObsoleteAttribute("SyncRoot is obsolette, use LockHelper.Lock() or LockHelper.LockAsync() instead.")]
public object SyncRoot { get; }
    private static DataSetDataStore();
    public DataSetDataStore(DataSet data, AutoCreateOption autoCreateOption);
    public DataSetDataStore(DataSet data, AutoCreateOption autoCreateOption, bool caseSensitive);
    public static string GetConnectionString(string path);
    public static string GetConnectionString(string path, bool readOnly);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static void Register();
    public bool get_CanCreateSchema();
    public DataSet get_Data();
    public virtual object get_SyncRoot();
    protected virtual UpdateSchemaResult ProcessUpdateSchema(bool skipIfFirstTableNotExists, DBTable[] tables);
    protected virtual Task`1<UpdateSchemaResult> ProcessUpdateSchemaAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public void RegisterCustomFunctionOperators(ICollection`1<ICustomFunctionOperator> customFunctions);
    public void RegisterCustomFunctionOperator(ICustomFunctionOperator customFunction);
    public void RegisterCustomAggregates(ICollection`1<ICustomAggregate> customAggregates);
    public void RegisterCustomAggregate(ICustomAggregate customAggregate);
    private static ExpressionEvaluator PrepareDataEvaluator(QueryCriteriaReprocessor processor, CriteriaOperator operand, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    private static ExpressionEvaluator[] PrepareDataEvaluators(QueryCriteriaReprocessor processor, CriteriaOperatorCollection operands, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    private static SortingComparer PrepareSortingComparer(QueryCriteriaReprocessor processor, QuerySortingCollection sortProperties, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    protected SelectStatementResult GetDataNormal(SelectStatement root);
    protected SelectStatementResult GetDataGrouped(SelectStatement root);
    protected virtual SelectStatementResult ProcessSelectData(SelectStatement selects);
    protected virtual Task`1<SelectStatementResult> ProcessSelectDataAsync(SelectStatement selects, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private DataViewEvaluatorContextDescriptor GetDescriptor(DataTable table);
    protected virtual ModificationResult ProcessModifyData(ModificationStatement[] dmlStatements);
    protected virtual Task`1<ModificationResult> ProcessModifyDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    private ICollection`1<DataRow> GetUniqe(List`1<DataRow> affectedRows);
    protected virtual void DoCommit(ICollection`1<DataRow> affectedRows);
    protected virtual void DoRollback(ICollection`1<DataRow> affectedRows);
    public static void ClearDataSet(DataSet dataSet);
    protected virtual void ProcessClearDatabase();
    public DBTable GetTableSchema(string tableName);
    public sealed virtual String[] GetStorageTablesList(bool includeViews);
    public sealed virtual DBTable[] GetStorageTables(String[] tables);
    public sealed virtual DBStoredProcedure[] GetStoredProcedures();
}
public class DevExpress.Xpo.DB.DataSetProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.DataStoreClient : DataStoreClientBase`1<IDataStoreWarpService> {
    private bool needCustomChannel;
    public DataStoreClient(string configName);
    public DataStoreClient(Binding binding, EndpointAddress remoteAddress);
    protected virtual IDataStoreWarpService CreateChannel();
}
public class DevExpress.Xpo.DB.DataStoreClientAsync : DataStoreClientAsyncBase`1<IDataStoreWarpServiceAsync> {
    private bool needCustomChannel;
    public DataStoreClientAsync(string configName);
    public DataStoreClientAsync(Binding binding, EndpointAddress remoteAddress);
    protected virtual IDataStoreWarpServiceAsync CreateChannel();
}
public class DevExpress.Xpo.DB.DataStoreClientAsyncBase`1 : DataStoreClientBase`1<TContractType> {
    private bool selectDataRawFound;
    private bool selectDataRawNotFound;
    public DataStoreClientAsyncBase`1(string configName);
    public DataStoreClientAsyncBase`1(Binding binding, EndpointAddress remoteAddress);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreClientAsyncBase`1/<SelectDataAsync>d__4")]
public sealed virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreClientAsyncBase`1/<ModifyDataAsync>d__5")]
public sealed virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreClientAsyncBase`1/<UpdateSchemaAsync>d__6")]
public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStoreClientAsyncBase`1/<DoAsync>d__7")]
public sealed virtual Task`1<object> DoAsync(string command, object args, CancellationToken cancellationToken);
}
public class DevExpress.Xpo.DB.DataStoreClientBase`1 : ClientBase`1<TContractType> {
    [CompilerGeneratedAttribute]
private ClientChannelCreatedHandler ClientChannelCreated;
    [CompilerGeneratedAttribute]
private static ClientChannelCreatedHandler GlobalDataClientChannelCreated;
    private bool selectDataRawFound;
    private bool selectDataRawNotFound;
    private TContractType channel;
    protected TContractType Channel { get; }
    private AutoCreateOption DevExpress.Xpo.DB.IDataStore.AutoCreateOption { get; }
    public DataStoreClientBase`1(string configName);
    public DataStoreClientBase`1(Binding binding, EndpointAddress remoteAddress);
    [CompilerGeneratedAttribute]
public void add_ClientChannelCreated(ClientChannelCreatedHandler value);
    [CompilerGeneratedAttribute]
public void remove_ClientChannelCreated(ClientChannelCreatedHandler value);
    [CompilerGeneratedAttribute]
public static void add_GlobalDataClientChannelCreated(ClientChannelCreatedHandler value);
    [CompilerGeneratedAttribute]
public static void remove_GlobalDataClientChannelCreated(ClientChannelCreatedHandler value);
    protected virtual void OnClientChannelCreated(object channel);
    protected TContractType get_Channel();
    private sealed virtual override ModificationResult DevExpress.Xpo.DB.IDataStore.ModifyData(ModificationStatement[] dmlStatements);
    private sealed virtual override SelectedData DevExpress.Xpo.DB.IDataStore.SelectData(SelectStatement[] selects);
    private sealed virtual override UpdateSchemaResult DevExpress.Xpo.DB.IDataStore.UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    private sealed virtual override AutoCreateOption DevExpress.Xpo.DB.IDataStore.get_AutoCreateOption();
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    public OperationResult`1<R> ExecuteClient(OperationResultChannelPredicate`1<R> predicate);
    public OperationResult`1<R> ExecuteClient(OperationResultChannelPredicate`1<R> predicate, Func`2<Exception, bool> exceptionHandler);
    protected Task`1<OperationResult`1<R>> ExecuteClientAsync(OperationResultChannelPredicateAsync`1<R> predicate);
    protected Task`1<OperationResult`1<R>> ExecuteClientAsync(OperationResultChannelPredicateAsync`1<R> predicate, Func`2<Exception, bool> exceptionHandler);
    protected virtual bool HandleModifyDataException(Exception ex);
    protected virtual bool HandleSelectDataException(Exception ex);
    protected virtual bool HandleUpdateSchemaException(Exception ex);
    protected virtual bool HandleCommandChannelException(Exception ex);
    [CompilerGeneratedAttribute]
private OperationResult`1<AutoCreateOption> <DevExpress.Xpo.DB.IDataStore.get_AutoCreateOption>b__18_0();
    [CompilerGeneratedAttribute]
private void <ExecuteClientAsync>b__23_0();
}
public class DevExpress.Xpo.DB.DataStorePool : DataStoreForkBase {
    private AutoCreateOption aco;
    private string ConnectionString;
    private Queue`1<IDataStore> freiPool;
    private Dictionary`2<IDataStore, IDisposable[]> garbage;
    private int PoolSize;
    private int MaxConnections;
    private int threads;
    private int connections;
    private AsyncManualResetEvent freeProvider;
    private bool isDisposed;
    public static int DefaultPoolSize;
    public static int DefaultMaxConnections;
    public static string XpoPoolParameterName;
    public static string XpoPoolSizeParameterName;
    public static string XpoPoolMaxConnectionsParameterName;
    public object SyncRoot { get; }
    public AutoCreateOption AutoCreateOption { get; }
    public DataStorePool(AutoCreateOption autoCreateOption, string connectionString);
    public DataStorePool(AutoCreateOption autoCreateOption, string connectionString, Nullable`1<int> poolSize);
    public DataStorePool(AutoCreateOption autoCreateOption, string connectionString, Nullable`1<int> poolSize, Nullable`1<int> maxConnections);
    private static DataStorePool();
    public object get_SyncRoot();
    public virtual AutoCreateOption get_AutoCreateOption();
    public virtual IDataStore AcquireChangeProvider();
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DataStorePool/<AcquireChangeProviderAsync>d__23")]
public virtual Task`1<IDataStore> AcquireChangeProviderAsync(CancellationToken cancellationToken);
    public virtual void ReleaseChangeProvider(IDataStore provider);
    private IDataStore CreateProvider();
    private void DestroyProvider(IDataStore provider);
    public virtual IDataStore AcquireReadProvider();
    public virtual Task`1<IDataStore> AcquireReadProviderAsync(CancellationToken cancellationToken);
    public virtual void ReleaseReadProvider(IDataStore provider);
    public sealed virtual void Dispose();
}
public class DevExpress.Xpo.DB.DataStoreService : ServiceBase {
    protected IDataStore provider;
    protected ICommandChannel commandChannel;
    public DataStoreService(IDataStore provider);
    public virtual OperationResult`1<ModificationResult> ModifyData(ModificationStatement[] dmlStatements);
    public virtual OperationResult`1<SelectedData> SelectData(SelectStatement[] selects);
    public virtual OperationResult`1<Byte[]> WarpSelectData(SelectStatement[] selects);
    public virtual OperationResult`1<UpdateSchemaResult> UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public virtual OperationResult`1<AutoCreateOption> GetAutoCreateOption();
    public virtual OperationResult`1<object> Do(string command, object args);
    [CompilerGeneratedAttribute]
private AutoCreateOption <GetAutoCreateOption>b__7_0();
}
public class DevExpress.Xpo.DB.DB2ConnectionProvider : ConnectionProviderSql {
    public static string XpoProviderTypeString;
    public static string DefaultObjectsOwner;
    public string ObjectsOwner;
    private string currentUser;
    private ReflectConnectionHelper helper;
    private static string ProviderAssemblyName;
    private static string ProviderRootNamespace;
    private DbTypeMapperBase dbTypeMapper;
    public static int MaximumStringSize;
    private static Char[] achtungChars;
    private bool hasIdentityes;
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    public bool NativeSkipTakeSupported { get; }
    private static DB2ConnectionProvider();
    public DB2ConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    public static string GetConnectionString(string server, string database, string userId, string password);
    public static string GetConnectionString(string server, int port, string database, string userId, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    public virtual string ComposeSafeSchemaName(string tableName);
    private string CorrectSchemaName(string schemaName);
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ReformatReadValue(object value, ReformatReadValueArgs args);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.DB2ConnectionProvider/<GetIdentityAsync>d__45")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual void CreateDataBase();
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private DBColumnType GetTypeFromString(string typeName, int size);
    private ParameterValue CreateParameterForSystemQuery(int tag, string value);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    private void GetColumns(DBTable table);
    private static string GetFullTypeName(string typeName, int size, short scale);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual int GetSafeNameColumnMaxLength();
    protected virtual int GetSafeNameConstraintMaxLength();
    private string FormatOwnedDBObject(string schema, string objectName);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FnPadLeft(String[] operands);
    private string FnPadRight(String[] operands);
    private string FnCharIndex(String[] operands);
    private string FnLog(String[] operands);
    private string FnRemove(String[] operands);
    private string FnConcat(String[] operands);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    protected string FormatString(object value);
    public virtual string FormatConstraint(string constraintName);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    public void ClearDatabase(IDbCommand command);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    public virtual string GetCurrentUser();
    private void GenerateView(DBTable table, StringBuilder result);
    private void GenerateInsertSP(DBTable table, StringBuilder result);
    private void GenerateUpdateSP(DBTable table, StringBuilder result);
    private void GenerateDeleteSP(DBTable table, StringBuilder result);
    private void GenerateInsteadOfInsertTrigger(DBTable table, StringBuilder result);
    private void GenerateInsteadOfUpdateTrigger(DBTable table, StringBuilder result);
    private void GenerateInsteadOfDeleteTrigger(DBTable table, StringBuilder result);
    private void AppendWhere(DBTable table, StringBuilder result);
    private void AppendKeys(DBTable table, StringBuilder result);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual DBStoredProcedure[] GetStoredProcedures();
}
public class DevExpress.Xpo.DB.DB2ProviderFactory : ProviderFactory {
    public bool HasPort { get; }
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public bool SupportStoredProcedures { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasPort();
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual String[] GetDatabases(string server, int port, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
    public virtual bool get_SupportStoredProcedures();
}
public abstract class DevExpress.Xpo.DB.DBTableHelper : object {
    private static DBColumn AddColumn(DBTable table, XPMemberInfo mi, string name, bool isKey, bool isReferenceKeyMember);
    public static void ProcessClassInfo(DBTable table, XPClassInfo classInfo);
    private static void ValidateMembers(XPClassInfo classInfo);
    private static void ProcessMembers(DBTable table, XPClassInfo classInfo, Dictionary`2<XPMemberInfo, List`1<DBColumn>> memberColumns);
    private static void ProcessIndexes(DBTable table, XPClassInfo classInfo, Dictionary`2<XPMemberInfo, List`1<DBColumn>> memberColumns);
    private static List`1<DBColumn> ProcessMemberColumns(DBTable table, XPClassInfo classInfo, XPMemberInfo memberInfo);
    private static List`1<DBColumn> ProcessMemberColumns(DBTable table, XPMemberInfo processedMemberInfo, string mappingPath, bool isKey, bool processFk, bool isReferenceKeyMember);
    private static void ProcessForeignKey(DBTable table, XPMemberInfo memberInfo, List`1<DBColumn> columns);
    private static void ProcessPrimaryKey(DBTable table, List`1<DBColumn> columns, XPClassInfo classInfo);
    public static DBColumn CreateColumn(DBTable table, XPMemberInfo memberInfo, string name, bool isReferenceKeyMember);
    private static bool IsColumnNullable(XPMemberInfo memberInfo);
    private static object GetDefaultValueForColumn(DBColumnType type);
}
public class DevExpress.Xpo.DB.DroneDataStore : object {
    public static string XpoProviderTypeString;
    public AutoCreateOption AutoCreateOption { get; }
    private static DroneDataStore();
    public static string GetConnectionString();
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static void Register();
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public sealed virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    public sealed virtual SelectedData SelectData(SelectStatement[] selects);
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
}
public class DevExpress.Xpo.DB.FirebirdConnectionProvider : ConnectionProviderSql {
    public static string XpoProviderTypeString;
    public static string GlobalDefaultCharacterSet;
    public string DefaultCharacterSet;
    private static string CharacterSetIfDefaultNotSet;
    private ReflectConnectionHelper helper;
    private DbTypeMapperBase dbTypeMapper;
    private Nullable`1<decimal> versionMajor;
    private int versionMinor;
    public static int MaximumStringSize;
    private Version firebirdClientVersion;
    private static Char[] achtungChars;
    private ExecMethodDelegate commandBuilderDeriveParametersHandler;
    private string CharacterSet { get; }
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    public bool NativeSkipTakeSupported { get; }
    public bool SupportNamedParameters { get; }
    protected string CreateForeignKeyTemplate { get; }
    private static FirebirdConnectionProvider();
    public FirebirdConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private string get_CharacterSet();
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    public static string GetConnectionString(string server, string userId, string password, string database, FirebirdServerType serverType, string charset);
    public static string GetConnectionString(string userId, string password, string database);
    public static string GetConnectionString(string server, string userId, string password, string database);
    public static string GetConnectionString(string server, int port, string userId, string password, string database);
    public static string GetConnectionString(string server, string userId, string password, string database, string charset);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    private void ReadDbVersion(IDbConnection conn);
    private bool SetServerVersionInternal(string versionString);
    private bool SupportVersion(decimal major, int minor);
    public void SetServerVersion(string versionString);
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForTimeOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ReformatReadValue(object value, ReformatReadValueArgs args);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual string GetSeqName(string tableName);
    private Query GetIdentityPrepareQuery(InsertStatement root, object identityValue, TaggedParametersHolder identitiesByTag, Int64& outResultId);
    protected virtual long GetIdentity(InsertStatement root, TaggedParametersHolder identitiesByTag);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.FirebirdConnectionProvider/<GetIdentityAsync>d__56")]
protected virtual Task`1<long> GetIdentityAsync(InsertStatement root, TaggedParametersHolder identitiesByTag, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    private bool SupportFirebirdClientVersion(int major, int minor, int build);
    protected virtual void CreateDataBase();
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private string GetTypeNameFromCode(FirebirdDType type, short subType, short size, short precision, short scale);
    private DBColumnType GetTypeFromCode(FirebirdDType type, short subType, short size, short scale);
    private short GetValue(object value);
    private void GetColumns(DBTable table);
    private void GetPrimaryKey(DBTable table);
    public virtual void CreateIndex(DBTable table, DBIndex index);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void CreateTable(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual int GetObjectNameEffectiveLength(string objectName);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual string FormatOrder(string sortProperty, SortingDirection direction);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    private string GetFunctionStrLenName();
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FormatFunctionDateOnly(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FormatFunctionTimeOnly(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FnLog(String[] operands);
    private string FnLpad(String[] operands);
    private string FnRpad(String[] operands);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    protected string FormatString(object value);
    private static string DecodeStrParam(string operand);
    public virtual bool get_SupportNamedParameters();
    public virtual string FormatConstraint(string constraintName);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    protected virtual string get_CreateForeignKeyTemplate();
    private void ClearDatabase(IDbCommand command);
    protected virtual void ProcessClearDatabase();
    protected virtual SelectedData ExecuteSprocParametrized(string sprocName, OperandValue[] parameters);
    protected virtual Task`1<SelectedData> ExecuteSprocParametrizedAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual DBStoredProcedure[] GetStoredProcedures();
}
public class DevExpress.Xpo.DB.FirebirdProviderFactory : ProviderFactory {
    public bool HasPort { get; }
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasPort();
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual String[] GetDatabases(string server, int port, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public enum DevExpress.Xpo.DB.FirebirdServerType : Enum {
    public int value__;
    public static FirebirdServerType Server;
    public static FirebirdServerType Embedded;
}
public class DevExpress.Xpo.DB.HanaConnectionProvider : ConnectionProviderSql {
    private ReflectConnectionHelper helper;
    public string ObjectsOwner;
    public static string XpoProviderTypeString;
    private static string HanaAssemblyName;
    private ReflectConnectionHelper ConnectionHelper { get; }
    public bool NativeSkipTakeSupported { get; }
    public bool SupportNamedParameters { get; }
    public HanaConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private static HanaConnectionProvider();
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual IDbConnection CreateConnection();
    protected virtual void CreateDataBase();
    protected virtual void ProcessClearDatabase();
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    private string GetSchemaName(string table);
    private string GetTableName(string table);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatConstraint(string constraintName);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.HanaConnectionProvider/<GetIdentityAsync>d__18")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    protected string FormatString(object value);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    private string FnIsNull(String[] operands);
    private string FnLog(String[] operands);
    private string FnRound(String[] operands);
    private string FnPadLeft(String[] operands);
    private string FnPadRight(String[] operands);
    private string FnSubstring(String[] operands);
    private string FnRemove(String[] operands);
    private string FnCharIndex(String[] operands);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual void CreateColumn(DBTable table, DBColumn column);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected Dictionary`2<string, bool> GetStorageTablesList(bool includeViews, bool stripKnownSchema);
    [IteratorStateMachineAttribute("DevExpress.Xpo.DB.HanaConnectionProvider/<GetStorageTablesList>d__44")]
private IEnumerable`1<string> GetStorageTablesList(string sql, bool stripKnownSchema);
    protected virtual object ReformatReadValue(object value, ReformatReadValueArgs args);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected ParameterValue CreateParameterForSystemQuery(int tag, string value);
    private Nullable`1<T> GetValueOrNull(object value);
    protected DBColumnType GetTypeFromString(string typeName, Nullable`1<int> size, Nullable`1<int> scale, String& fullTypeName);
    protected virtual ObjectName ComposeSafeObjectName(string name);
    private void GetColumns(DBTable table);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual int GetObjectNameEffectiveLength(string objectName);
    public virtual bool get_SupportNamedParameters();
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    public static string GetConnectionString(string server, int port, string userId, string password, string database);
    public static string GetConnectionString(string server, int port, string userId, string password);
    public static IDbConnection CreateConnection(string connectionString);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
}
public class DevExpress.Xpo.DB.HanaProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public bool HasMultipleDatabases { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public bool HasPort { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual bool get_HasMultipleDatabases();
    public virtual string get_ProviderKey();
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
    public virtual bool get_HasPort();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual String[] GetDatabases(string server, int port, string userId, string password);
}
public static class DevExpress.Xpo.DB.Helpers.BatchBreaker : object {
    public static Dictionary`2<int, int> Do(IList`1<T> statements, IEqualityComparer`1<T> comparer);
    public static Dictionary`2<int, int> Do(IList`1<T> statements, IEqualityComparer`1<T> comparer, int MaxRepeatableBatchLength, Predicate`1<T> isBatcheableStatement, GetValidBatchLengthCallback`1<T> isValidBatch);
    private static int GetValidBatchLength(IList`1<T> statements, GetValidBatchLengthCallback`1<T> isValidBatch, int currentBatchStart, int batchLength, int batchesCount);
    private static IEnumerable`1<BatchStartsCounter> GenerateStartsByBatches(int batchLength, IList`1<int> batchesStarts, IEqualityComparer`1<Batch> batchesMatcher);
    private static SortedList`2<int, byte> GenerateBatchesStarts(Boolean[] used, int batchLength);
}
public class DevExpress.Xpo.DB.Helpers.BatchBreakerModificationStatementStub : object {
    public static int DefaultMaxRepeatableBatchLength;
    public static Predicate`1<BatchBreakerModificationStatementStub> DefaultIsBatcheableStatement;
    public static GetValidBatchLengthCallback`1<BatchBreakerModificationStatementStub> DefaultGetValidBatchLength;
    public object Token;
    public ModificationStatement Statement;
    public int ApproxParametersCount;
    private Nullable`1<int> HashCode;
    public BatchBreakerModificationStatementStub(ModificationStatement original);
    private static BatchBreakerModificationStatementStub();
    private static int CalculateParameters(ModificationStatement stmt);
    public int FastGetHashCode();
    private int SlowGetHashCode();
    private int GetParamsHashes();
    private bool SlowEquals(BatchBreakerModificationStatementStub another);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Xpo.DB.Helpers.BonusProvidersRegistrator : object {
    private static BonusProvidersRegistrator();
    public static void Register();
}
public class DevExpress.Xpo.DB.Helpers.ContextDependenceChecker : object {
    private HashSet`1<string> upNodes;
    public ContextDependenceChecker(HashSet`1<string> upNodes);
    public bool Process(JoinNode root);
    public static bool Process(HashSet`1<string> upNodes, JoinNode root);
    private bool Process(CriteriaOperator criteria);
    public sealed virtual bool Visit(QuerySubQueryContainer theOperand);
    public sealed virtual bool Visit(QueryOperand theOperand);
    public sealed virtual bool Visit(FunctionOperator theOperator);
    private bool ProcessOperands(CriteriaOperatorCollection operands);
    public sealed virtual bool Visit(OperandValue theOperand);
    public sealed virtual bool Visit(GroupOperator theOperator);
    public sealed virtual bool Visit(InOperator theOperator);
    public sealed virtual bool Visit(UnaryOperator theOperator);
    public sealed virtual bool Visit(BinaryOperator theOperator);
    public sealed virtual bool Visit(BetweenOperator theOperator);
}
public class DevExpress.Xpo.DB.Helpers.DataSetStoreHelpers : object {
    private static string GetRelationName(DataTable table, DBForeignKey fk);
    private static string Escape(string name);
    private static DataColumn[] GetColumns(DataTable table, StringCollection columns);
    private static string GetIndexName(DataTable table, DBIndex index);
    private static bool IsEqual(DBIndex index, UniqueConstraint constraint);
    private static bool IsExists(DataTable table, DBIndex index);
    private static bool IsExists(DataTable table, DBPrimaryKey index);
    private static bool GetIsReferenceContainsColumnsPair(ReferenceElement[] res, DataColumn parentColumn, DataColumn childColumn);
    private static bool IsEqual(DBForeignKey fk, ForeignKeyConstraint constraint);
    private static bool IsExists(DataTable table, DBForeignKey fk);
    private static bool IsExists(DataTable table, DBColumn column);
    public static DataTable QueryTable(DataSet dataSet, string tableName);
    public static DataTable GetTable(DataSet dataSet, string tableName);
    private static void Create(DataTable table, DBIndex index);
    private static void Create(DataTable table, DBPrimaryKey index);
    private static void Create(DataTable table, DBForeignKey fk);
    private static void Create(DataTable table, DBColumn column);
    private static DataTable Create(DataSet dataSet, DBTable table);
    public static void CreateIfNotExists(DataTable table, DBForeignKey dbObj);
    public static void CreateIfNotExists(DataTable table, DBIndex dbObj);
    public static void CreateIfNotExists(DataTable table, DBPrimaryKey dbObj);
    public static void CreateIfNotExists(DataTable table, DBColumn dbObj);
    public static DataTable CreateIfNotExists(DataSet dataSet, DBTable table);
    private static void UpdateRow(DataRow row, Object[] values, DataColumn[] columns);
    private static void RandomSort(IList rows);
    private static List`1<DataRow> FindRows(DataViewEvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, int count);
    private static List`1<DataRow> FindRows(DataViewEvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates, int count);
    private static Object[] GetResultRow(object row, ExpressionEvaluator[] evaluators);
    public static SelectStatementResult DoGetData(DataViewEvaluatorContextDescriptor descriptor, CriteriaOperator condition, ExpressionEvaluator[] dataEvaluators, SortingComparer sortingComparer, int skipRecords, int topRecords, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunction);
    public static SelectStatementResult DoGetData(DataViewEvaluatorContextDescriptor descriptor, CriteriaOperator condition, ExpressionEvaluator[] dataEvaluators, SortingComparer sortingComparer, int skipRecords, int topRecords, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunction, ICollection`1<ICustomAggregate> customAggregates);
    public static int DoInsertRecord(DataTable table, QueryParameterCollection parameters, CriteriaOperatorCollection operands, ParameterValue identityParameter, TaggedParametersHolder identitiesByTag, List`1<DataRow> affectedRows);
    private static object FixTimeSpan(object value, DataColumn dColumn);
    public static int DoUpdateRecord(DataViewEvaluatorContextDescriptor descriptor, QueryCriteriaReprocessor processor, QueryParameterCollection parameters, CriteriaOperatorCollection operands, TaggedParametersHolder identitiesByTag, CriteriaOperator condition, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunction, List`1<DataRow> affectedRows);
    public static int DoUpdateRecord(DataViewEvaluatorContextDescriptor descriptor, QueryCriteriaReprocessor processor, QueryParameterCollection parameters, CriteriaOperatorCollection operands, TaggedParametersHolder identitiesByTag, CriteriaOperator condition, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunction, ICollection`1<ICustomAggregate> customAggregates, List`1<DataRow> affectedRows);
    public static int DoDeleteRecord(DataViewEvaluatorContextDescriptor descriptor, CriteriaOperator condition, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, List`1<DataRow> affectedRows);
    public static int DoDeleteRecord(DataViewEvaluatorContextDescriptor descriptor, CriteriaOperator condition, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates, List`1<DataRow> affectedRows);
    public static SelectStatementResult DoGetGroupedData(DataViewEvaluatorContextDescriptor descriptor, CriteriaOperator condition, ExpressionEvaluator[] groupEvaluators, ExpressionEvaluator havingEvaluator, SortingComparer sortingComparer, int skipRecords, int topRecords, ExpressionEvaluator[] dataEvaluators, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public static SelectStatementResult DoGetGroupedData(DataViewEvaluatorContextDescriptor descriptor, CriteriaOperator condition, ExpressionEvaluator[] groupEvaluators, ExpressionEvaluator havingEvaluator, SortingComparer sortingComparer, int skipRecords, int topRecords, ExpressionEvaluator[] dataEvaluators, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
}
public class DevExpress.Xpo.DB.Helpers.DataSetStoreHelpersFull : object {
    private static InMemoryColumn[] GetColumns(InMemoryTable table, StringCollection columns);
    private static string GetIndexName(InMemoryTable table, DBIndex index);
    private static bool IsEqual(DBIndex index, InMemoryIndexWrapper constraint);
    private static string IsExists(InMemoryTable table, DBIndex index);
    private static bool IsExists(InMemoryTable table, DBPrimaryKey index);
    private static bool IsEqual(DBForeignKey fk, InMemoryRelation relation);
    private static bool IsExists(InMemoryTable table, DBForeignKey fk);
    private static bool IsExists(InMemoryTable table, DBColumn column);
    public static InMemoryTable QueryTable(InMemorySet dataSet, string tableName);
    public static InMemoryTable GetTable(InMemorySet dataSet, string tableName);
    private static string Create(InMemoryTable table, DBIndex index);
    private static void Create(InMemoryTable table, DBPrimaryKey index);
    private static void Create(InMemoryTable table, DBForeignKey fk);
    private static void Create(InMemoryTable table, DBColumn column);
    private static InMemoryTable Create(InMemorySet inMemorySet, DBTable table);
    public static void CreateIfNotExists(InMemoryTable table, DBForeignKey dbObj);
    public static string CreateIfNotExists(InMemoryTable table, DBIndex dbObj);
    public static void CreateIfNotExists(InMemoryTable table, DBPrimaryKey dbObj);
    public static void CreateIfNotExists(InMemoryTable table, DBColumn dbObj);
    public static InMemoryTable CreateIfNotExists(InMemorySet inMemorySet, DBTable table);
    private static void UpdateRow(IInMemoryRow row, Object[] values, InMemoryColumn[] columns);
    public static Object[] GetResultRow(InMemoryComplexRow row, ExpressionEvaluator[] evaluators);
    public static Object[] GetResultRow(List`1<InMemoryComplexRow> rows, ExpressionEvaluator[] evaluators);
    public static SelectStatementResult DoGetData(IInMemoryDataElector dataElector, InMemoryDataElectorContextDescriptor descriptor, ExpressionEvaluator[] dataEvaluators, SortingComparerFull sortingComparer, int skipRecords, int topRecords);
    public static int DoInsertRecord(InMemoryTable table, QueryParameterCollection parameters, CriteriaOperatorCollection operands, ParameterValue identityParameter, TaggedParametersHolder identitiesByTag);
    public static int DoUpdateRecord(IInMemoryPlanner planner, InMemoryTable table, QueryParameterCollection parameters, CriteriaOperatorCollection operands, TaggedParametersHolder identitiesByTag, CriteriaOperator condition, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public static int DoUpdateRecord(IInMemoryPlanner planner, InMemoryTable table, QueryParameterCollection parameters, CriteriaOperatorCollection operands, TaggedParametersHolder identitiesByTag, CriteriaOperator condition, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public static int DoDeleteRecord(IInMemoryPlanner planner, InMemoryTable table, CriteriaOperator condition, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public static int DoDeleteRecord(IInMemoryPlanner planner, InMemoryTable table, CriteriaOperator condition, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public static List`1<List`1<InMemoryComplexRow>> DoGetGroupedDataCore(ExpressionEvaluator[] groupEvaluators, ExpressionEvaluator havingEvaluator, SortingListComparerFull sortingComparer, int skipRecords, int topRecords, InMemoryComplexSet rows, bool doRandomizeIfNoSorting);
    public static SelectStatementResult DoGetGroupedData(IInMemoryDataElector dataElector, InMemoryDataElectorContextDescriptor descriptor, ExpressionEvaluator[] groupEvaluators, ExpressionEvaluator havingEvaluator, SortingListComparerFull sortingComparer, int skipRecords, int topRecords, ExpressionEvaluator[] dataEvaluators);
    public static List`1<NodeInfo> GetAllNodes(JoinNode node);
    private static void GetAllNodesInternal(JoinNode node, List`1<NodeInfo> nodes);
    public static ExpressionEvaluator PrepareDataEvaluator(CriteriaOperator operand, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public static ExpressionEvaluator PrepareDataEvaluator(CriteriaOperator operand, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public static ExpressionEvaluator[] PrepareDataEvaluators(CriteriaOperatorCollection operands, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public static ExpressionEvaluator[] PrepareDataEvaluators(CriteriaOperatorCollection operands, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public static SortingComparerFull PrepareSortingComparer(QuerySortingCollection sortProperties, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public static SortingComparerFull PrepareSortingComparer(QuerySortingCollection sortProperties, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public static SortingListComparerFull PrepareSortingListComparer(QuerySortingCollection sortProperties, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public static SortingListComparerFull PrepareSortingListComparer(QuerySortingCollection sortProperties, EvaluatorContextDescriptor descriptor, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
}
public static class DevExpress.Xpo.DB.Helpers.DataStoreServiceInvokeHelper : object {
    public static object SafeInvoke(Func`5<string, Object[], AsyncCallback, object, IAsyncResult> beginInvoke, Func`4<string, Object[], IAsyncResult, object> endInvoke, string methodName, Object[] args);
    public static Task`1<object> SafeInvokeAsync(Func`5<string, Object[], AsyncCallback, object, IAsyncResult> beginInvoke, Func`4<string, Object[], IAsyncResult, object> endInvoke, string methodName, Object[] args);
}
public class DevExpress.Xpo.DB.Helpers.DataViewEvaluatorContextDescriptor : EvaluatorContextDescriptor {
    private Hashtable children;
    private object cache;
    private bool contextCaching;
    public DataTable Table;
    private DataRelation relation;
    private static object noResult;
    unknown bool ContextCaching {public set; }
    public DataViewEvaluatorContextDescriptor(DataRelation relation);
    public DataViewEvaluatorContextDescriptor(DataTable table);
    private static DataViewEvaluatorContextDescriptor();
    public void set_ContextCaching(bool value);
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual IEnumerable GetQueryContexts(object source, string queryTypeName, CriteriaOperator condition, int top);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperAccess`2 : DbTypeMapper`2<TOleDbType, TOleDbParameter> {
    private static TOleDbType oledDbTypeLongVarChar;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperAccess`2();
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    public sealed virtual DBColumnType GetDbColumnType(object oleDbType);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperAdvantage`1 : DbTypeMapper`2<DbType, TSqlParameter> {
    protected string ParameterDbTypePropertyName { get; }
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperAsa`2 : DbTypeMapper`2<TSqlDbTypeEnum, TSqlParameter> {
    private static TSqlDbTypeEnum asDbTypeText;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperAsa`2();
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperAse`2 : DbTypeMapper`2<TSqlDbTypeEnum, TSqlParameter> {
    private static TSqlDbTypeEnum aseDbTypeUniText;
    private static TSqlDbTypeEnum aseDbTypeUniVarChar;
    private static TSqlDbTypeEnum aseDbTypeImage;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperAse`2();
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    public sealed virtual void SetParameterTypeUniText(IDbDataParameter parameter);
    public sealed virtual void SetParameterTypeUniVarChar(IDbDataParameter parameter);
    public sealed virtual void SetParameterTypeImage(IDbDataParameter parameter);
}
internal abstract class DevExpress.Xpo.DB.Helpers.DbTypeMapperBaseOracle`2 : DbTypeMapper`2<TSqlDbTypeEnum, TSqlParameter> {
    protected static TSqlDbTypeEnum OracleDbTypeChar;
    protected static TSqlDbTypeEnum OracleDbTypeNClob;
    protected static TSqlDbTypeEnum OracleDbTypeBlob;
    private static DbTypeMapperBaseOracle`2();
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    protected virtual DBTypeInfoBase CustomParseSqlType(string sqlTypeWithoutParameters, string sqlTypeParameters, string sqlTypeSuffix);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperDB2`2 : DbTypeMapper`2<TSqlDbTypeEnum, TSqlParameter> {
    private static TSqlDbTypeEnum db2TypeDbClob;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperDB2`2();
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    public sealed virtual void SetParameterTypeDbClob(IDataParameter parameter);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperFirebird`2 : DbTypeMapper`2<TSqlDbTypeEnum, TSqlParameter> {
    private static TSqlDbTypeEnum fbTypeBinary;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperFirebird`2();
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    protected virtual DBTypeInfoBase CustomParseSqlType(string sqlTypeWithoutParameters, string sqlTypeParameters, string sqlTypeSuffix);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperMsSql`1 : DbTypeMapper`2<SqlDbType, TSqlParameter> {
    protected string ParameterDbTypePropertyName { get; }
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    protected virtual DBTypeInfoBase CustomParseSqlType(string sqlTypeWithoutParameters, string sqlTypeParameters, string sqlTypeSuffix);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    protected virtual void SetParameterTypeAndSizeForVarcharMax(TSqlParameter parameter);
    protected virtual void SetParameterTypeAndSizeForVarbinaryMax(TSqlParameter parameter);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperMsSql2005`1 : DbTypeMapperMsSql`1<TSqlParameter> {
    protected virtual void SetParameterTypeAndSizeForVarcharMax(TSqlParameter parameter);
    protected virtual void SetParameterTypeAndSizeForVarbinaryMax(TSqlParameter parameter);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperMsSqlCe`1 : DbTypeMapper`2<SqlDbType, TSqlParameter> {
    protected string ParameterDbTypePropertyName { get; }
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    protected virtual DBTypeInfoBase CustomParseSqlType(string sqlTypeWithoutParameters, string sqlTypeParameters, string sqlTypeSuffix);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    public sealed virtual void SetParameterType(IDbDataParameter parameter, SqlDbType type);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperMySql`2 : DbTypeMapper`2<TSqlDbTypeEnum, TSqlParameter> {
    private bool isSupport80;
    private static TSqlDbTypeEnum mySqlTypeLongText;
    private static TSqlDbTypeEnum mySqlTypeMediumText;
    private static TSqlDbTypeEnum mySqlTypeText;
    private static TSqlDbTypeEnum mySqlTypeLongBlob;
    private static TSqlDbTypeEnum mySqlTypeMediumBlob;
    private static TSqlDbTypeEnum mySqlTypeTinyBlob;
    private static TSqlDbTypeEnum mySqlTypeBlob;
    private static TSqlDbTypeEnum mySqlTypeBit;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperMySql`2();
    public DbTypeMapperMySql`2(bool isSupport80);
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    protected virtual DBTypeInfoBase CustomParseSqlType(string sqlTypeWithoutParameters, string sqlTypeParameters, string sqlTypeSuffix);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    public sealed virtual bool IsByteArraySqlDbType(IDataParameter parameter);
    public sealed virtual bool IsBoolSqlDbType(IDataParameter parameter);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperODP`2 : DbTypeMapperBaseOracle`2<TSqlDbTypeEnum, TSqlParameter> {
    private static TSqlDbTypeEnum OracleDbTypeVarchar2;
    private static TSqlDbTypeEnum OracleDbTypeNVarchar2;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperODP`2();
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    public sealed virtual void SetOracleDbTypeChar(IDbDataParameter parameter, int size);
    public sealed virtual void FixVarcharParameterType(IDbDataParameter parameter);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperOracle`2 : DbTypeMapperBaseOracle`2<TSqlDbTypeEnum, TSqlParameter> {
    private static TSqlDbTypeEnum OracleDbTypeVarchar;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperOracle`2();
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    public sealed virtual void SetOracleDbTypeChar(IDbDataParameter parameter, int size);
    public sealed virtual void FixVarcharParameterType(IDbDataParameter parameter);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperPervasive`2 : DbTypeMapper`2<TSqlDbTypeEnum, TSqlParameter> {
    private static TSqlDbTypeEnum psqlTypeLongVarChar;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperPervasive`2();
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperPostgresql`2 : DbTypeMapper`2<TSqlDbTypeEnum, TSqlParameter> {
    private static TSqlDbTypeEnum NpgSqlTypeText;
    private static TSqlDbTypeEnum NpgSqlTypeChar;
    private static TSqlDbTypeEnum NpgSqlTypeInterval;
    private bool legacyGuidSupport;
    protected string ParameterDbTypePropertyName { get; }
    private static DbTypeMapperPostgresql`2();
    public DbTypeMapperPostgresql`2(bool legacyGuidSupport);
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    public virtual void SetParameterType(IDbDataParameter parameter, DBColumnType dbColumnType);
    public sealed virtual void SetNpgsqlDbTypeChar(IDbDataParameter param, int size);
    public sealed virtual void SetNpgsqlDbTypeInterval(IDbDataParameter param);
    public sealed virtual void ResetNpgsqlDbType(IDbDataParameter param);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperSqlite`1 : DbTypeMapper`2<DbType, TSqlParameter> {
    protected string ParameterDbTypePropertyName { get; }
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperSqliteMicrosoft`2 : DbTypeMapper`2<TSqlDbType, TSqlParameter> {
    protected string ParameterDbTypePropertyName { get; }
    protected virtual string get_ParameterDbTypePropertyName();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperVistaDb`2 : DbTypeMapperVistaDbBase`2<TSqlDbTypeEnum, TSqlParameter> {
    public string MaxStringDataType { get; }
    public string MaxBinaryDataType { get; }
    public string SingleDataType { get; }
    public int MaxStringSize { get; }
    public int MaxBinarySize { get; }
    public virtual string get_MaxStringDataType();
    public virtual string get_MaxBinaryDataType();
    public virtual string get_SingleDataType();
    public virtual int get_MaxStringSize();
    public virtual int get_MaxBinarySize();
}
internal class DevExpress.Xpo.DB.Helpers.DbTypeMapperVistaDb5`2 : DbTypeMapperVistaDbBase`2<TSqlDbTypeEnum, TSqlParameter> {
    public string MaxStringDataType { get; }
    public string MaxBinaryDataType { get; }
    public string SingleDataType { get; }
    public int MaxStringSize { get; }
    public int MaxBinarySize { get; }
    public virtual string get_MaxStringDataType();
    public virtual string get_MaxBinaryDataType();
    public virtual string get_SingleDataType();
    public virtual int get_MaxStringSize();
    public virtual int get_MaxBinarySize();
}
internal abstract class DevExpress.Xpo.DB.Helpers.DbTypeMapperVistaDbBase`2 : DbTypeMapper`2<TSqlDbTypeEnum, TSqlParameter> {
    private TSqlDbTypeEnum maxStringDbType;
    private TSqlDbTypeEnum maxBinaryDbType;
    protected string ParameterDbTypePropertyName { get; }
    public string MaxStringDataType { get; }
    public string MaxBinaryDataType { get; }
    public string SingleDataType { get; }
    public int MaxStringSize { get; }
    public int MaxBinarySize { get; }
    protected virtual string get_ParameterDbTypePropertyName();
    public abstract virtual string get_MaxStringDataType();
    public abstract virtual string get_MaxBinaryDataType();
    public abstract virtual string get_SingleDataType();
    public abstract virtual int get_MaxStringSize();
    public abstract virtual int get_MaxBinarySize();
    protected virtual string GetParameterTypeNameForBoolean(Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForByteArray(Nullable`1& size);
    protected virtual string GetParameterTypeNameForChar(Nullable`1& size);
    protected virtual string GetParameterTypeNameForDateTime();
    protected virtual string GetParameterTypeNameForDecimal(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDouble(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSingle(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForGuid(Nullable`1& size);
    protected virtual string GetParameterTypeNameForInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForSByte(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForString(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeSpan();
    protected virtual string GetParameterTypeNameForUInt16(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt32(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForUInt64(Nullable`1& precision, Nullable`1& scale);
    protected virtual string GetParameterTypeNameForDateOnly(Nullable`1& size);
    protected virtual string GetParameterTypeNameForTimeOnly(Nullable`1& size);
    protected virtual string ConvertSqlTypeToParameterType(string sqlType);
    public virtual void SetParameterTypeAndSize(IDbDataParameter parameter, DBColumnType dbColumnType, int size);
    public sealed virtual string GetDBTypeString(DBColumn column, Int16& size);
}
public class DevExpress.Xpo.DB.Helpers.GetValidBatchLengthCallback`1 : MulticastDelegate {
    public GetValidBatchLengthCallback`1(object object, IntPtr method);
    public virtual int Invoke(IList`1<T> items, int batchStart, int desiredLength, int batchesCount);
    public virtual IAsyncResult BeginInvoke(IList`1<T> items, int batchStart, int desiredLength, int batchesCount, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.Helpers.HttpClientHelper : object {
    private HttpClient http;
    private IWebApiDataFormatter formatter;
    private bool staSafe;
    private Encoding outputEncoding;
    public Encoding OutputEncoding { get; public set; }
    public HttpClientHelper(HttpClient http, IWebApiDataFormatter formatter);
    public HttpClientHelper(HttpClient http, IWebApiDataFormatter formatter, bool staSafe);
    public Encoding get_OutputEncoding();
    public void set_OutputEncoding(Encoding value);
    private LifeTime<HttpResult`1<TResult>> CreateLifetime();
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.Helpers.HttpClientHelper/<GetAsync>d__10`1")]
public Task`1<TResult> GetAsync(string action, CancellationToken cancellationToken);
    private TResult ExecuteSynchronously(Func`1<Task`1<TResult>> asyncAction);
    private void ExecuteSynchronously(Func`1<Task> asyncAction);
    public TResult Get(string action);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.Helpers.HttpClientHelper/<InvokeAsync>d__14")]
public Task InvokeAsync(string action, CancellationToken cancellationToken);
    public void Invoke(string action);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.Helpers.HttpClientHelper/<InvokeAsync>d__16`1")]
public Task`1<TResult> InvokeAsync(string action, CancellationToken cancellationToken);
    public TResult Invoke(string action);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.Helpers.HttpClientHelper/<UploadAsync>d__18`1")]
public Task UploadAsync(string action, TData data, CancellationToken cancellationToken);
    public void Upload(string action, TData data);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.Helpers.HttpClientHelper/<PostAsync>d__20`2")]
public Task`1<TResult> PostAsync(string action, TData data, CancellationToken cancellationToken);
    public TResult Post(string action, TData data);
    private HttpContent CreateContent(TData data);
    public static string BuildQueryString(string key, object value);
    public static string BuildQueryString(IDictionary`2<string, object> parameters);
    public static string BuildQueryString(string path, string key, object value);
    public static string BuildQueryString(string path, IDictionary`2<string, object> parameters);
}
internal interface DevExpress.Xpo.DB.Helpers.IDbTypeMapperAccess {
    public abstract virtual DBColumnType GetDbColumnType(object oleDbType);
}
internal interface DevExpress.Xpo.DB.Helpers.IDbTypeMapperAse {
    public abstract virtual void SetParameterTypeUniText(IDbDataParameter parameter);
    public abstract virtual void SetParameterTypeUniVarChar(IDbDataParameter parameter);
    public abstract virtual void SetParameterTypeImage(IDbDataParameter parameter);
}
internal interface DevExpress.Xpo.DB.Helpers.IDbTypeMapperBaseOracle {
    public abstract virtual void SetOracleDbTypeChar(IDbDataParameter parameter, int size);
    public abstract virtual void FixVarcharParameterType(IDbDataParameter parameter);
}
internal interface DevExpress.Xpo.DB.Helpers.IDbTypeMapperDB2 {
    public abstract virtual void SetParameterTypeDbClob(IDataParameter parameter);
}
internal interface DevExpress.Xpo.DB.Helpers.IDbTypeMapperMsSqlCe {
    public abstract virtual void SetParameterType(IDbDataParameter parameter, SqlDbType type);
}
internal interface DevExpress.Xpo.DB.Helpers.IDbTypeMapperMySql {
    public abstract virtual bool IsByteArraySqlDbType(IDataParameter parameter);
    public abstract virtual bool IsBoolSqlDbType(IDataParameter parameter);
}
internal interface DevExpress.Xpo.DB.Helpers.IDbTypeMapperPostgreSql {
    public abstract virtual void SetNpgsqlDbTypeChar(IDbDataParameter param, int size);
    public abstract virtual void SetNpgsqlDbTypeInterval(IDbDataParameter param);
    public abstract virtual void ResetNpgsqlDbType(IDbDataParameter param);
}
internal interface DevExpress.Xpo.DB.Helpers.IDbTypeMapperVistaDb {
    public string MaxStringDataType { get; }
    public string MaxBinaryDataType { get; }
    public string SingleDataType { get; }
    public int MaxStringSize { get; }
    public int MaxBinarySize { get; }
    public abstract virtual string get_MaxStringDataType();
    public abstract virtual string get_MaxBinaryDataType();
    public abstract virtual string get_SingleDataType();
    public abstract virtual int get_MaxStringSize();
    public abstract virtual int get_MaxBinarySize();
    public abstract virtual string GetDBTypeString(DBColumn column, Int16& size);
}
public interface DevExpress.Xpo.DB.Helpers.IInMemoryDataElector {
    public abstract virtual InMemoryComplexSet Process(InMemoryDataElectorContextDescriptor descriptor);
}
internal interface DevExpress.Xpo.DB.Helpers.IInMemoryIndex {
    public string Name { get; }
    public bool Unique { get; }
    public ReadOnlyCollection`1<InMemoryColumn> Columns { get; }
    public InMemoryIndexWrapper Wrapper { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_Unique();
    public abstract virtual ReadOnlyCollection`1<InMemoryColumn> get_Columns();
    public abstract virtual InMemoryIndexWrapper get_Wrapper();
    public abstract virtual void AddRow(InMemoryRow row);
    public abstract virtual void RemoveRow(InMemoryRow row);
    public abstract virtual void Clear();
    public abstract virtual InMemoryRow[] Find(Object[] values, bool returnDeleted);
    public abstract virtual bool EqualsColumns(InMemoryColumn[] columns);
    public abstract virtual void FixColumnsOrder();
}
public interface DevExpress.Xpo.DB.Helpers.IInMemoryPlanner {
    public abstract virtual IInMemoryDataElector GetPlan(JoinNode root);
    public abstract virtual IInMemoryDataElector GetPlan(JoinNode subSelectNode, IEnumerable`1<string> existsNodeAliases);
    public abstract virtual IInMemoryDataElector GetPlan(string alias, InMemoryTable table, CriteriaOperator condition);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Xpo.DB.Helpers.IInMemoryRow {
    public IInMemoryTable Table { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public abstract virtual IInMemoryTable get_Table();
    public abstract virtual object get_Item(int columnIndex);
    public abstract virtual void set_Item(int columnIndex, object value);
    public abstract virtual object get_Item(string columnName);
    public abstract virtual void set_Item(string columnName, object value);
    public abstract virtual void BeginEdit();
    public abstract virtual void EndEdit();
    public abstract virtual void CancelEdit();
}
public interface DevExpress.Xpo.DB.Helpers.IInMemoryTable {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool ExistsColumn(string columnName);
    public abstract virtual IEnumerable`1<string> GetColumnNames();
}
public class DevExpress.Xpo.DB.Helpers.IndexFinder : object {
    private string alias;
    private InMemoryTable table;
    private Dictionary`2<string, InMemoryColumn> columnsWithIndecies;
    private bool returnProperies;
    public IndexFinder(string alias, InMemoryTable table, bool returnProperies);
    public IndexFinder(string alias, InMemoryTable table);
    private object Process(CriteriaOperator criteria);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(FunctionOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(OperandValue theOperand);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(GroupOperator theOperator);
    private object VisitGroupAnd(CriteriaOperatorCollection operands);
    private object VisitGroupOr(CriteriaOperatorCollection operands);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(InOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(UnaryOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(BinaryOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(BetweenOperator theOperator);
    public static IndexFinderResult Find(string alias, InMemoryTable table, CriteriaOperator criteria);
    public static IndexFinderResult Find(string alias, InMemoryTable table, CriteriaOperator criteria, bool returnProperties);
    public IndexFinderResult Find(CriteriaOperator criteria);
    private static List`1<IndexFinderItem> GetIndexIntersection(InMemoryIndexWrapper index, List`1<IndexFinderItem> list);
    private sealed virtual override object DevExpress.Data.Filtering.IQueryCriteriaVisitor<System.Object>.Visit(QuerySubQueryContainer theOperand);
    private sealed virtual override object DevExpress.Data.Filtering.IQueryCriteriaVisitor<System.Object>.Visit(QueryOperand theOperand);
    public static IndexFinderItem[][] GetFullIndexResult(IndexFinderItem[][] inputResult);
    private static void FillResultList(List`1<IndexFinderItem[]> resultList, IndexFinderItem[][] inputResult, List`1<IndexFinderItem> vector, int level);
    public static bool HasQueryOperand(IndexFinderResult keys);
    public static InMemoryIndexWrapper[] GetIndexList(InMemoryTable table, IndexFinderResult keys);
}
public class DevExpress.Xpo.DB.Helpers.IndexFinderItem : object {
    public InMemoryColumn Column;
    public object Value;
    public bool ValueIsQueryOperand;
    public IndexFinderItem(InMemoryColumn column, object value, bool valueIsQueryOperand);
    public virtual string ToString();
}
public class DevExpress.Xpo.DB.Helpers.IndexFinderItemComparerByColumnIndex : object {
    public sealed virtual int Compare(IndexFinderItem left, IndexFinderItem right);
}
public class DevExpress.Xpo.DB.Helpers.IndexFinderResult : object {
    public IndexFinderItem[][] Result;
    public IndexFinderResult(IndexFinderItem[][] result);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryAutoIncrementValue : ValueType {
    private static InMemoryAutoIncrementValue value;
    public static InMemoryAutoIncrementValue Value { get; }
    private static InMemoryAutoIncrementValue();
    public static InMemoryAutoIncrementValue get_Value();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryColumn : object {
    private string name;
    private int columnIndex;
    private Type type;
    private bool allowNull;
    private bool autoIncrement;
    private object autoIncrementNextValue;
    private object defaultValue;
    private int maxLength;
    private InMemoryTable table;
    private InMemoryItemState state;
    private InMemoryColumn columnForUpdate;
    private ReadOnlyCollection`1<InMemoryRelation> pRelations;
    private ReadOnlyCollection`1<InMemoryRelation> fRelations;
    private InMemoryIndexesHolder indexes;
    public string Name { get; }
    public Type Type { get; }
    public bool AllowNull { get; }
    public object DefaultValue { get; }
    public InMemoryTable Table { get; }
    public InMemoryItemState State { get; }
    public int ColumnIndex { get; }
    public InMemoryColumn ColumnForUpdate { get; }
    public ReadOnlyCollection`1<InMemoryRelation> PRelations { get; }
    public ReadOnlyCollection`1<InMemoryRelation> FRelations { get; }
    internal InMemoryIndexesHolder Indexes { get; }
    public bool HasIndexes { get; }
    public int MaxLength { get; public set; }
    public bool AutoIncrement { get; }
    public InMemoryColumn(InMemoryTable table, string name, Type type);
    public InMemoryColumn(InMemoryTable table, string name, Type type, bool autoIncrement);
    public InMemoryColumn(InMemoryTable table, string name, Type type, bool allowNull, object defaultValue);
    private InMemoryColumn(InMemoryTable table, string name, Type type, bool autoIncrement, bool allowNull, object defaultValue);
    public string get_Name();
    public Type get_Type();
    public bool get_AllowNull();
    public object get_DefaultValue();
    public InMemoryTable get_Table();
    public InMemoryItemState get_State();
    public int get_ColumnIndex();
    public InMemoryColumn get_ColumnForUpdate();
    public ReadOnlyCollection`1<InMemoryRelation> get_PRelations();
    public ReadOnlyCollection`1<InMemoryRelation> get_FRelations();
    internal InMemoryIndexesHolder get_Indexes();
    public bool get_HasIndexes();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public bool get_AutoIncrement();
    internal void UpdateAutoIncrementValue(object value);
    public object GetAutoIncrementNextValue();
    private object IncrementNum(object value);
    public void Delete();
    public void Update(string name, Type type);
    public void Update(string name, Type type, bool autoIncrement);
    public void Update(string name, Type type, bool allowNull, object defaultValue);
    public void Reset();
    internal void ColumnsCommitted();
    internal void FixColumnRelations();
    internal void FixIndexes();
    public void CheckPRelations(InMemoryRow row, object oldValue);
    public void CheckFRelations(InMemoryRow row, object newValue);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryColumnIndexComparer : object {
    public sealed virtual int Compare(InMemoryColumn x, InMemoryColumn y);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.DB.Helpers.InMemoryColumnList : object {
    private InMemoryTable table;
    private Dictionary`2<string, int> indexDict;
    private List`1<InMemoryColumn> columns;
    public InMemoryTable Table { get; }
    public InMemoryColumn Item { get; }
    public InMemoryColumn Item { get; }
    public int Count { get; }
    public InMemoryColumnList(InMemoryTable table);
    public InMemoryTable get_Table();
    public InMemoryColumn get_Item(int index);
    public InMemoryColumn get_Item(string name);
    public int get_Count();
    public void Add(string name, Type type);
    public void Add(string name, Type type, bool autoIncrement);
    public void Add(string name, Type type, bool allowNull, object defaultValue);
    public void Insert(int index, string name, Type type);
    public void Insert(int index, string name, Type type, bool autoIncrement);
    public void Insert(int index, string name, Type type, bool allowNull, object defaultValue);
    private void AddColumn(InMemoryColumn column);
    private void InsertColumn(int index, InMemoryColumn column);
    private void UpdateIndexDict();
    public int FindColumnIndex(string name);
    private InMemoryColumn FindColunm(string name);
    public sealed virtual IEnumerator`1<InMemoryColumn> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void SetAllDeleted();
    public bool Contains(InMemoryColumn column);
    public bool Contains(string columnName);
    public void CommitColumnsChanges();
    public InMemoryColumn[] ToArray();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.DB.Helpers.InMemoryComplexRow : object {
    private InMemoryComplexSet complexSet;
    private List`1<IInMemoryRow> tablesRows;
    public InMemoryComplexSet ComplexSet { get; }
    public IInMemoryRow Item { get; public set; }
    public IInMemoryRow Item { get; }
    public InMemoryComplexRow(InMemoryComplexSet resultSet);
    public InMemoryComplexRow(InMemoryComplexSet resultSet, InMemoryComplexRow otherRow);
    public InMemoryComplexRow(InMemoryComplexRow complexRow);
    public InMemoryComplexSet get_ComplexSet();
    public IInMemoryRow get_Item(int tableIndex);
    public void set_Item(int tableIndex, IInMemoryRow value);
    public IInMemoryRow get_Item(string tableAlias);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Xpo.DB.Helpers.InMemoryComplexRowAccessList : object {
    private string alias;
    private int tableIndex;
    private InMemoryComplexSet complexSet;
    public IInMemoryRow Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public InMemoryComplexRowAccessList(InMemoryComplexSet complexSet, string alias);
    public sealed virtual IInMemoryRow get_Item(int index);
    public sealed virtual void set_Item(int index, IInMemoryRow value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(IInMemoryRow item);
    public sealed virtual void Insert(int index, IInMemoryRow item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(IInMemoryRow item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IInMemoryRow item);
    public sealed virtual void CopyTo(IInMemoryRow[] array, int arrayIndex);
    public sealed virtual bool Remove(IInMemoryRow item);
    public sealed virtual IEnumerator`1<IInMemoryRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryComplexRowFitHandler : MulticastDelegate {
    public InMemoryComplexRowFitHandler(object object, IntPtr method);
    public virtual List`1<InMemoryRow> Invoke(InMemoryComplexRow resultRow);
    public virtual IAsyncResult BeginInvoke(InMemoryComplexRow resultRow, AsyncCallback callback, object object);
    public virtual List`1<InMemoryRow> EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryComplexRowsFitHandler : MulticastDelegate {
    public InMemoryComplexRowsFitHandler(object object, IntPtr method);
    public virtual List`1<InMemoryComplexRow> Invoke(InMemoryComplexRow resultRow);
    public virtual IAsyncResult BeginInvoke(InMemoryComplexRow resultRow, AsyncCallback callback, object object);
    public virtual List`1<InMemoryComplexRow> EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.DB.Helpers.InMemoryComplexSet : object {
    private HashSet`1<string> projectionSet;
    private Dictionary`2<ProjectionColumnItem, int> projectionColumnDict;
    private Dictionary`2<string, int> complexDict;
    private List`1<string> aliasList;
    private List`1<IInMemoryTable> tableList;
    private List`1<InMemoryComplexRow> rows;
    public InMemoryComplexRow Item { get; }
    public int TableCount { get; }
    public int Count { get; }
    public InMemoryComplexSet(int capacity);
    public InMemoryComplexRow get_Item(int rowIndex);
    public int get_TableCount();
    public int get_Count();
    public void MakeProjection(string projectionAlias);
    private void CreateProjectionDicts();
    public void AddProjectionFromSet(InMemoryComplexSet set);
    public ReadOnlyCollection`1<string> GetProjectionList();
    public ReadOnlyCollection`1<IInMemoryTable> GetTableList();
    public ReadOnlyCollection`1<string> GetAliasList();
    public int AddTableIfNotExists(string alias, IInMemoryTable table);
    public int AddTable(string alias, IInMemoryTable table);
    public int GetTableIndex(string alias);
    public int GetTableIndex(string projectionAlias, string columnName);
    public IInMemoryTable GetTable(int index);
    public IInMemoryTable GetTable(string alias);
    public IInMemoryTable GetTable(string projectionAlias, string columnName);
    public void AddRows(IEnumerable`1<InMemoryComplexRow> collection);
    public void AddRow(InMemoryComplexRow row);
    public InMemoryComplexRow AddNewRow();
    public InMemoryComplexRow AddNewRow(int tableIndex, InMemoryRow row);
    public InMemoryComplexRow AddNewRow(string tableAlias, InMemoryRow row);
    public void RemoveAt(int rowIndex);
    public void RemoveRange(int rowIndex, int rowCount);
    public void Sort();
    public void Sort(IComparer`1<InMemoryComplexRow> comparer);
    public void Clear();
    public void Randomize();
    public sealed virtual InMemoryComplexSet Process(InMemoryDataElectorContextDescriptor descriptor);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<InMemoryComplexRow> GetEnumerator();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryConstraintException : InMemorySetException {
    public InMemoryConstraintException(string message);
    public InMemoryConstraintException(string message, Exception innerException);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDataElectorContextDescriptor : QuereableEvaluatorContextDescriptor {
    private IInMemoryPlanner planner;
    private bool caseSensitive;
    private ICollection`1<ICustomFunctionOperator> customFunctions;
    private ICollection`1<ICustomAggregate> customAggregates;
    private List`1<object> nestedSource;
    private Dictionary`2<JoinNode, InMemoryPlanCacheItem> existsPlanCashe;
    public bool CaseSensitive { get; }
    public ICollection`1<ICustomFunctionOperator> CustomFunctions { get; }
    public ICollection`1<ICustomAggregate> CustomAggregates { get; }
    public InMemoryDataElectorContextDescriptor(IInMemoryPlanner planner, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public InMemoryDataElectorContextDescriptor(IInMemoryPlanner planner, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public bool get_CaseSensitive();
    public ICollection`1<ICustomFunctionOperator> get_CustomFunctions();
    public ICollection`1<ICustomAggregate> get_CustomAggregates();
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public virtual IEnumerable GetQueryContexts(object source, string queryTypeName, CriteriaOperator condition, int top);
    public virtual object GetOperandValue(object currentSource, QueryOperand theOperand);
    private static bool GetComplexRowData(string alias, QueryOperand theOperand, InMemoryComplexRow complexRow, Object& result);
    public virtual object GetQueryResult(JoinNode root);
    public virtual void PushNestedSource(object source);
    public virtual void PopNestedSource();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDataElectorContextSource : object {
    public string NodeAlias;
    public InMemoryRow Row;
    public InMemoryTable Table;
    public InMemoryComplexRow ComplexRow;
    public InMemoryComplexRow ComplexRowRight;
    public InMemoryDataElectorContextSource(InMemoryComplexRow complexRow, InMemoryComplexRow complexRowRight);
    public InMemoryDataElectorContextSource(string nodeAlias, InMemoryRow row, InMemoryTable table);
    public InMemoryDataElectorContextSource(string nodeAlias, InMemoryRow row, InMemoryTable table, InMemoryComplexRow complexRow);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDataElectorResultJoinSearch : object {
    private IInMemoryDataElector inputDataLeft;
    private IInMemoryDataElector inputDataRight;
    private CriteriaOperator criteria;
    private JoinType joinType;
    public InMemoryDataElectorResultJoinSearch(IInMemoryDataElector inputDataLeft, IInMemoryDataElector inputDataRight, CriteriaOperator criteria, JoinType joinType);
    public sealed virtual InMemoryComplexSet Process(InMemoryDataElectorContextDescriptor descriptor);
    private static void AddRowToRow(InMemoryComplexRow leftRow, InMemoryComplexRow rightRow, int leftCount, int rightCount);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDataElectorResultSearch : object {
    private IInMemoryDataElector inputData;
    private CriteriaOperator criteria;
    public InMemoryDataElectorResultSearch(IInMemoryDataElector inputData, CriteriaOperator criteria);
    public sealed virtual InMemoryComplexSet Process(InMemoryDataElectorContextDescriptor descriptor);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDataElectorSource : object {
    private static string WrongSource;
    private object source;
    public object Source { get; public set; }
    public InMemoryDataElectorSource(object source);
    public object get_Source();
    public void set_Source(object value);
    public static void FillNodesDict(object source, HashSet`1<string> nodesSet);
    public sealed virtual InMemoryComplexSet Process(InMemoryDataElectorContextDescriptor descriptor);
    private static InMemoryComplexSet ProcessContextSource(InMemoryDataElectorContextSource source);
    private static InMemoryComplexSet ProcessComplexRow(InMemoryComplexRow row);
    private static InMemoryComplexSet ProcessComplexRowList(List`1<InMemoryComplexRow> list);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDataElectorTableJoinSearch : object {
    private bool isTableLeft;
    private string tableAlias;
    private InMemoryTable table;
    private IInMemoryDataElector inputData;
    private CriteriaOperator criteria;
    private JoinType joinType;
    private IndexFinderResult keys;
    private InMemoryIndexWrapper[] indexList;
    public InMemoryDataElectorTableJoinSearch(string tableAlias, InMemoryTable table, IInMemoryDataElector inputData, CriteriaOperator criteria, JoinType joinType, bool isTableLeft);
    public sealed virtual InMemoryComplexSet Process(InMemoryDataElectorContextDescriptor descriptor);
    private InMemoryComplexSet ProcessIfTableLeft(InMemoryDataElectorContextDescriptor descriptor);
    private InMemoryComplexSet ProcessIfTableRightOrInnerJoin(InMemoryDataElectorContextDescriptor descriptor);
    private object ProcessKey(InMemoryDataElectorContextDescriptor descriptor, IndexFinderItem keyItem, InMemoryComplexRow resultRow);
    private void ComplexSetFitIfTableLeft(InMemoryComplexSet resultSet, IEnumerable`1<InMemoryRow> rows, int rowsCount, int tableIndex, InMemoryRowFitHandler fit);
    private void ComplexSetFitIfTableRight(InMemoryComplexSet resultSet, int tableIndex, InMemoryComplexRowFitHandler fit);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDataElectorTableSearch : object {
    private string tableAlias;
    private InMemoryTable table;
    private CriteriaOperator criteria;
    private IndexFinderResult keys;
    private InMemoryIndexWrapper[] indexList;
    public InMemoryDataElectorTableSearch(string tableAlias, InMemoryTable table, CriteriaOperator criteria);
    public sealed virtual InMemoryComplexSet Process(InMemoryDataElectorContextDescriptor descriptor);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDataElectorTablesJoinSearch : object {
    private string tableLeftAlias;
    private InMemoryTable tableLeft;
    private string tableRightAlias;
    private InMemoryTable tableRight;
    private CriteriaOperator criteria;
    private JoinType joinType;
    private IndexFinderResult keysLeft;
    private IndexFinderResult keysRight;
    private InMemoryIndexWrapper[] indexListLeft;
    private InMemoryIndexWrapper[] indexListRight;
    private bool queryOperandDetectedRight;
    private bool queryOperandDetectedLeft;
    public InMemoryDataElectorTablesJoinSearch(string tableLeftAlias, InMemoryTable tableLeft, string tableRightAlias, InMemoryTable tableRight, CriteriaOperator criteria, JoinType joinType);
    public sealed virtual InMemoryComplexSet Process(InMemoryDataElectorContextDescriptor descriptor);
    private InMemoryComplexSet ProcessIfLeftJoin(InMemoryDataElectorContextDescriptor descriptor);
    private static bool AddRow(ExpressionEvaluator eval, InMemoryComplexSet resultSet, int tableLeftIndex, int tableRightIndex, InMemoryRow leftRow, InMemoryRow rightRow);
    private static IEnumerable`1<InMemoryRow> GetRows(IndexFinderResult keys, InMemoryIndexWrapper[] indexList, InMemoryTable table);
    private static void GetRows(IndexFinderResult keys, InMemoryIndexWrapper[] indexList, InMemoryTable table, QuereableEvaluatorContextDescriptor descriptor, InMemoryDataElectorContextSource source, ProcessRow process);
    private InMemoryComplexSet ProcessIfInnerJoin(InMemoryDataElectorContextDescriptor descriptor);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDictionaryIndex : object {
    private string name;
    private bool caseSensitive;
    private bool unique;
    private InMemoryTable table;
    private InMemoryColumn[] columns;
    private InMemoryIndexWrapper wrapper;
    private ReadOnlyCollection`1<InMemoryColumn> columnsReadOnly;
    private Dictionary`2<int, object> dictionary;
    private HashSet`1<InMemoryRow> nullList;
    public string Name { get; }
    public bool Unique { get; }
    public ReadOnlyCollection`1<InMemoryColumn> Columns { get; }
    public InMemoryIndexWrapper Wrapper { get; }
    public InMemoryDictionaryIndex(InMemoryTable table, InMemoryColumn[] columns, bool unique);
    public sealed virtual string get_Name();
    public sealed virtual bool get_Unique();
    public sealed virtual ReadOnlyCollection`1<InMemoryColumn> get_Columns();
    private static string GetName(InMemoryColumn[] columns);
    public sealed virtual void AddRow(InMemoryRow row);
    public sealed virtual void RemoveRow(InMemoryRow row);
    public sealed virtual InMemoryRow[] Find(Object[] findValues, bool returnDeleted);
    public sealed virtual void Clear();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool EqualsColumns(InMemoryColumn[] needColumns);
    public sealed virtual void FixColumnsOrder();
    public sealed virtual InMemoryIndexWrapper get_Wrapper();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryDuplicateNameException : InMemorySetException {
    public InMemoryDuplicateNameException(string message);
    public InMemoryDuplicateNameException(string message, Exception innerException);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryGroup : object {
    public Object[] GroupValues;
    public InMemoryGroup(Object[] groupValues);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryGroupDescriptor : EvaluatorContextDescriptor {
    public EvaluatorContextDescriptor InnerDescriptor;
    public bool IsTopLevelCollectionSource { get; }
    public InMemoryGroupDescriptor(EvaluatorContextDescriptor innerDescriptor);
    private object GetInnerSource(object outerSource);
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual IEnumerable GetQueryContexts(object source, string queryTypeName, CriteriaOperator condition, int top);
    public virtual bool get_IsTopLevelCollectionSource();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryGroupFull : object {
    public Object[] GroupValues;
    public InMemoryGroupFull(Object[] groupValues);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class DevExpress.Xpo.DB.Helpers.InMemoryHelper : object {
    public static string NullsAreNotAllowed;
    public static Object[] GetValues(InMemoryRow row, InMemoryColumn[] columns);
    public static bool IsNullRow(Object[] values);
    public static bool IsNullRow(InMemoryRow row, InMemoryColumn[] columns);
    public static int GetValueHash(object value, bool caseSensitive);
    private static bool AreEqualValues(bool caseSensitive, object valueLeft, object valueRight);
    public static int GetRowHashCode(Object[] values, bool caseSensitive);
    public static int GetRowHashCode(InMemoryRow row, InMemoryColumn[] columns, bool caseSensitive);
    public static bool AreEqualRows(InMemoryRow rowLeft, InMemoryRow rowRight, InMemoryColumn[] columns, bool caseSensitive);
    public static bool AreEqualRows(InMemoryRow row, InMemoryColumn[] columns, Object[] valuesLeft, bool caseSensitive);
    public static bool FindAnyRow(InMemoryRow row, InMemoryColumn[] columns, List`1<InMemoryRow> rows, bool caseSensitive);
    public static List`1<InMemoryRow> FindInRows(List`1<InMemoryRow> rows, InMemoryColumn[] columns, Object[] values, bool findFirst, bool returnDeleted, bool caseSensitive);
    public static object Convert(object value, InMemoryColumn column);
    public static object Convert(object value, Type oldType, Type newType, bool allowNull);
    public static Object[] PrepareKey(object key);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Xpo.DB.Helpers.InMemoryIndexesHolder : object {
    private List`1<IInMemoryIndex> indexes;
    public bool HasIndexes { get; }
    public int Count { get; }
    public IInMemoryIndex Item { get; }
    public InMemoryIndexesHolder(List`1<IInMemoryIndex> indexes);
    public bool get_HasIndexes();
    public int get_Count();
    public IInMemoryIndex get_Item(int i);
    public void AddRow(InMemoryRow row);
    public void RemoveRow(InMemoryRow row);
    public void Clear();
    public IInMemoryIndex GetIndex(InMemoryColumn[] columns);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryIndexWrapper : object {
    private IInMemoryIndex index;
    public bool Unique { get; }
    public string Name { get; }
    public ReadOnlyCollection`1<InMemoryColumn> Columns { get; }
    internal InMemoryIndexWrapper(IInMemoryIndex index);
    public bool get_Unique();
    public string get_Name();
    public ReadOnlyCollection`1<InMemoryColumn> get_Columns();
    public InMemoryRow[] Find(Object[] values, bool returnDeleted);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.DB.Helpers.InMemoryIndexWrapperCollection : object {
    private Dictionary`2<string, IInMemoryIndex> indexes;
    public InMemoryIndexWrapper Item { get; }
    public IEnumerable`1<string> Names { get; }
    public int Count { get; }
    internal InMemoryIndexWrapperCollection(Dictionary`2<string, IInMemoryIndex> indexes);
    public InMemoryIndexWrapper get_Item(string name);
    public IEnumerable`1<string> get_Names();
    public int get_Count();
    public bool Contains(string name);
    [IteratorStateMachineAttribute("DevExpress.Xpo.DB.Helpers.InMemoryIndexWrapperCollection/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<InMemoryIndexWrapper> GetEnumerator();
    [IteratorStateMachineAttribute("DevExpress.Xpo.DB.Helpers.InMemoryIndexWrapperCollection/<System-Collections-IEnumerable-GetEnumerator>d__10")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum DevExpress.Xpo.DB.Helpers.InMemoryItemState : Enum {
    public int value__;
    public static InMemoryItemState Default;
    public static InMemoryItemState Inserted;
    public static InMemoryItemState Deleted;
    public static InMemoryItemState Updated;
}
public class DevExpress.Xpo.DB.Helpers.InMemoryNoAutoIncrementAllowedException : InMemorySetException {
    public InMemoryNoAutoIncrementAllowedException(string message);
    public InMemoryNoAutoIncrementAllowedException(string message, Exception innerException);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryNoNullAllowedException : InMemorySetException {
    public InMemoryNoNullAllowedException(string message);
    public InMemoryNoNullAllowedException(string message, Exception innerException);
}
internal class DevExpress.Xpo.DB.Helpers.InMemoryProjectionElector : object {
    private string projectionAlias;
    private DBProjection projection;
    private IInMemoryDataElector inputData;
    private Func`2<InMemoryComplexSet, InMemoryComplexSet> makeProjectionHandler;
    public InMemoryProjectionElector(IInMemoryDataElector inputData, DBProjection projection, string projectionAlias);
    private static void PrepareRowsBeforeProjection(InMemoryComplexSet rows, SelectStatement select, SortingComparerFull sortingComparer);
    public sealed virtual InMemoryComplexSet Process(InMemoryDataElectorContextDescriptor descriptor);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Xpo.DB.Helpers.InMemoryProjectionRow : object {
    private InMemoryProjectionTable table;
    private Object[] data;
    public IInMemoryTable Table { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public InMemoryProjectionRow(InMemoryProjectionTable table);
    public InMemoryProjectionRow(InMemoryProjectionTable table, Object[] data);
    public sealed virtual IInMemoryTable get_Table();
    public sealed virtual object get_Item(int columnIndex);
    public sealed virtual void set_Item(int columnIndex, object value);
    public sealed virtual object get_Item(string columnName);
    public sealed virtual void set_Item(string columnName, object value);
    public sealed virtual void BeginEdit();
    public sealed virtual void EndEdit();
    public sealed virtual void CancelEdit();
}
internal class DevExpress.Xpo.DB.Helpers.InMemoryProjectionTable : object {
    private string name;
    private List`1<string> columns;
    private Dictionary`2<string, int> columnDictionary;
    public bool IsTransitive;
    public string Name { get; }
    public int ColumnsCount { get; }
    public InMemoryProjectionTable(DBProjection projection, string projectionAlias);
    public sealed virtual string get_Name();
    public sealed virtual bool ExistsColumn(string columnName);
    public sealed virtual IEnumerable`1<string> GetColumnNames();
    public bool TryGetColumnIndex(string columnName, Int32& columnIndex);
    public int get_ColumnsCount();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRelation : object {
    private string name;
    private InMemoryRelationPair[] pairs;
    private InMemoryRelationPair[] pairsSortedByPIndex;
    private InMemoryRelationPair[] pairsSortedByFIndex;
    private InMemoryTable pTable;
    private InMemoryTable fTable;
    private bool fCounterDictReady;
    private Dictionary`2<InMemoryRow, int> fCountersDict;
    public string Name { get; }
    public InMemoryRelationPair[] Pairs { get; }
    public InMemoryRelationPair[] PairsSortedByPIndex { get; }
    public InMemoryRelationPair[] PairsSortedByFIndex { get; }
    public InMemoryTable PTable { get; }
    public InMemoryTable FTable { get; }
    public InMemoryRelation(InMemoryRelationPair[] pairs);
    public string get_Name();
    public InMemoryRelationPair[] get_Pairs();
    public InMemoryRelationPair[] get_PairsSortedByPIndex();
    public InMemoryRelationPair[] get_PairsSortedByFIndex();
    public InMemoryTable get_PTable();
    public InMemoryTable get_FTable();
    public virtual bool Equals(object obj);
    private static InMemoryRelationPair[] ClonePairs(InMemoryRelationPair[] pairs);
    private string GetName();
    public void CheckPAssociation(InMemoryColumn col, InMemoryRow row, object oldValue);
    private void RaiseConstraintException(InMemoryColumn[] columns);
    public InMemoryRow[] CheckFAssociation(InMemoryColumn col, InMemoryRow row, object newValue);
    public void CheckPAssociation(InMemoryRow row, Object[] rowOldData, Boolean[] modified);
    public InMemoryRow[] CheckFAssociation(Object[] rowNewData);
    public void CheckRelation();
    public void EnterFAssociation(InMemoryRow[] fRows);
    public void LeaveFAssociation(InMemoryRow row, Object[] rowOldData);
    private bool FastFCheck(InMemoryRow foundRow);
    private void IncrementRowFCounter(InMemoryRow foundRow);
    private void DecrementRowFCounter(InMemoryRow foundRow);
    public InMemoryRow[] GetRows(InMemoryRow row);
    public InMemoryColumn[] GetPColumns();
    public InMemoryRow[] GetPRows(InMemoryRow row);
    public InMemoryRow[] GetFRows(InMemoryRow row);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRelationCollection : List`1<InMemoryRelation> {
    public InMemoryRelationCollection(IEnumerable`1<InMemoryRelation> collection);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRelationPair : object {
    private InMemoryColumn pKey;
    private InMemoryColumn fKey;
    public InMemoryColumn PKey { get; }
    public InMemoryColumn FKey { get; }
    public InMemoryRelationPair(InMemoryColumn pKey, InMemoryColumn fKey);
    public InMemoryColumn get_PKey();
    public InMemoryColumn get_FKey();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRelationPairFIndexComparer : object {
    public sealed virtual int Compare(InMemoryRelationPair x, InMemoryRelationPair y);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRelationPairPIndexComparer : object {
    public sealed virtual int Compare(InMemoryRelationPair x, InMemoryRelationPair y);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRelationPairPNameComparer : object {
    public sealed virtual int Compare(InMemoryRelationPair x, InMemoryRelationPair y);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRollbackItem : object {
    public bool Updated;
    public object Data;
    public void Reset();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRollbackOrderInfo : object {
    private InMemoryItemState oldState;
    private InMemoryItemState newState;
    private InMemoryRow row;
    private bool isNewRow;
    public bool IsNewRow { get; }
    public InMemoryRow Row { get; }
    public InMemoryItemState OldState { get; }
    public InMemoryItemState NewState { get; }
    public InMemoryRollbackOrderInfo(InMemoryRow row, InMemoryItemState oldState, InMemoryItemState newState, bool isNewRow);
    public bool get_IsNewRow();
    public InMemoryRow get_Row();
    public InMemoryItemState get_OldState();
    public InMemoryItemState get_NewState();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRollBackOrderList : List`1<InMemoryRollbackOrderInfo> {
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.DB.Helpers.InMemoryRow : object {
    private static string StringValueIsTooLong;
    private static string ColumnIsAutoincremented;
    private static string RowIsDeleted;
    private static string NotInEditMode;
    private InMemoryTable table;
    private Object[] data;
    private InMemoryRowModificationInfo editInfo;
    private InMemoryRowModificationInfo modificationInfo;
    private InMemoryItemState state;
    public InMemoryItemState State { get; }
    public InMemoryTable Table { get; }
    private IInMemoryTable DevExpress.Xpo.DB.Helpers.IInMemoryRow.Table { get; }
    public bool EditMode { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public InMemoryRow(InMemoryTable table);
    public InMemoryRow(InMemoryTable table, ICollection`1<object> initData);
    public InMemoryItemState get_State();
    public InMemoryTable get_Table();
    private sealed virtual override IInMemoryTable DevExpress.Xpo.DB.Helpers.IInMemoryRow.get_Table();
    public bool get_EditMode();
    private void CheckValues(bool setDefaults, bool checkAutoIncrement);
    internal void CheckAndEnterFRelations();
    internal void CheckAndEnterFRelationsOldData();
    private void CheckAndEnterFRelations(Object[] newData);
    internal void CheckPRelations();
    internal void CheckPRelationsModified();
    private void CheckPRelations(Object[] oldDataList, Boolean[] modifiedList);
    internal void LeaveFRelations();
    internal void LeaveFRelationsOldData();
    private void LeaveFRelations(Object[] leaveData);
    public sealed virtual object get_Item(int columnIndex);
    public sealed virtual void set_Item(int columnIndex, object value);
    private void AddToIndex();
    private void RemoveFromIndex();
    public sealed virtual void BeginEdit();
    public sealed virtual void EndEdit();
    public sealed virtual void CancelEdit();
    private void SetData(int index, object value);
    private bool ModifyOneValue(InMemoryColumn column, object oldValue, object newValue);
    private void SetRollbackData(InMemoryItemState oldState, InMemoryItemState newState);
    private void AcceptChanges(InMemoryColumn column);
    private void RejectChanges();
    public sealed virtual object get_Item(string columnName);
    public sealed virtual void set_Item(string columnName, object value);
    private T[] ArrayInsert(T[] array, int index, T item);
    private T[] ArrayRemoveAt(T[] array, int index);
    internal void FixColumns();
    internal void Commit(InMemoryRollbackOrderInfo info);
    internal void Rollback(InMemoryRollbackOrderInfo info);
    internal void Delete();
    public sealed virtual void Dispose();
    public virtual string ToString();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRowFitHandler : MulticastDelegate {
    public InMemoryRowFitHandler(object object, IntPtr method);
    public virtual List`1<InMemoryComplexRow> Invoke(InMemoryRow row);
    public virtual IAsyncResult BeginInvoke(InMemoryRow row, AsyncCallback callback, object object);
    public virtual List`1<InMemoryComplexRow> EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.DB.Helpers.InMemoryRowList : object {
    private InMemoryTable table;
    private List`1<InMemoryRow> rows;
    public InMemoryRow Item { get; }
    public int Count { get; }
    public InMemoryRowList(InMemoryTable table);
    public InMemoryRow get_Item(int index);
    public int get_Count();
    public InMemoryRow AddNewRow(ICollection`1<object> initData);
    private void CommitIfNotInTransaction();
    public InMemoryRow AddNewRow();
    public InMemoryRow InsertNewRow(int index, ICollection`1<object> initData);
    public InMemoryRow InsertNewRow(int index);
    internal void RemoveInternal(InMemoryRow row);
    private void RemoveAtInternal(int index, InMemoryRow row);
    public bool Remove(InMemoryRow row);
    public void RemoveAt(int index);
    public void Clear();
    public InMemoryRow FindFirst(InMemoryColumn column, object value);
    public InMemoryRow[] Find(InMemoryColumn column, object value);
    public InMemoryRow[] FindWithDeleted(InMemoryColumn column, object value);
    public InMemoryRow FindFirst(InMemoryColumn[] columns, Object[] values);
    public InMemoryRow[] Find(InMemoryColumn[] columns, Object[] values);
    public InMemoryRow[] FindWithDeleted(InMemoryColumn[] columns, Object[] values);
    private InMemoryRow[] Find(InMemoryColumn[] columns, Object[] values, bool findFirst, bool returnDeleted);
    public InMemoryIndexWrapper FindIndex(InMemoryColumn[] columns);
    [IteratorStateMachineAttribute("DevExpress.Xpo.DB.Helpers.InMemoryRowList/<GetEnumerator>d__25")]
public sealed virtual IEnumerator`1<InMemoryRow> GetEnumerator();
    [IteratorStateMachineAttribute("DevExpress.Xpo.DB.Helpers.InMemoryRowList/<System-Collections-IEnumerable-GetEnumerator>d__26")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRowModificationInfo : object {
    public Object[] OldData;
    public Boolean[] Modified;
    public InMemoryRowModificationInfo(Object[] data);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryRowsFitHandler : MulticastDelegate {
    public InMemoryRowsFitHandler(object object, IntPtr method);
    public virtual List`1<InMemoryRow> Invoke(InMemoryRow row);
    public virtual IAsyncResult BeginInvoke(InMemoryRow row, AsyncCallback callback, object object);
    public virtual List`1<InMemoryRow> EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.Helpers.InMemorySet : object {
    private bool isLoadingMode;
    private bool inTransaction;
    private UpdatingSchemaStatus updatingSchemaStatus;
    private bool caseSensitive;
    private string inMemorySetName;
    private Dictionary`2<string, InMemoryTable> tables;
    private Dictionary`2<string, InMemoryRelation> relationsUniqueDict;
    private Dictionary`2<InMemoryColumn, List`1<InMemoryRelation>> pDict;
    private Dictionary`2<InMemoryColumn, List`1<InMemoryRelation>> fDict;
    private InMemoryRollBackOrderList rollbackOrder;
    private List`1<InMemoryRelation> emptyRelationList;
    private static string xs;
    private static string xsi;
    private static string msdata;
    private static char hexUpperAChar;
    private static char hexLowerAChar;
    private static char hexZeroChar;
    private static string xsHexBinaryString;
    private static string xsBase64String;
    private static string xsAnyTypeString;
    private static string xsStringTypeString;
    public string InMemorySetName { get; public set; }
    public bool CaseSensitive { get; }
    internal bool IsLoadingMode { get; }
    internal InMemoryRollBackOrderList RollbackOrder { get; }
    public bool InTransaction { get; }
    public IEnumerable`1<InMemoryTable> Tables { get; }
    public IEnumerable`1<InMemoryRelation> Relations { get; }
    public int TablesCount { get; }
    public int RelationsCount { get; }
    public InMemorySet(bool caseSensitive);
    public InMemorySet(string inMemorySetName);
    public InMemorySet(string inMemorySetName, bool caseSensitive);
    public string get_InMemorySetName();
    public void set_InMemorySetName(string value);
    public bool get_CaseSensitive();
    internal bool get_IsLoadingMode();
    internal InMemoryRollBackOrderList get_RollbackOrder();
    public bool get_InTransaction();
    public IEnumerable`1<InMemoryTable> get_Tables();
    public IEnumerable`1<InMemoryRelation> get_Relations();
    public int get_TablesCount();
    public int get_RelationsCount();
    public InMemoryRelationCollection GetRelationList();
    public InMemoryTable CreateTable(string name);
    public bool DropTable(string name);
    public InMemoryTable GetTable(string name);
    public void BeginTransaction();
    public void Commit();
    public void Rollback();
    public void BeginUpdateSchema();
    public void EndUpdateSchema();
    public void AddRelation(InMemoryRelationPair[] pairs);
    public List`1<InMemoryRelation> GetPRelations(InMemoryColumn pKey);
    public List`1<InMemoryRelation> GetFRelations(InMemoryColumn fKey);
    public InMemoryRelation GetRelation(string name);
    public bool RemoveRelation(InMemoryRelationPair[] pairs);
    public void RemoveRelations(InMemoryColumn column);
    public void RemoveRelations(IEnumerable`1<InMemoryColumn> columns);
    private void RemoveRelations(InMemoryColumn column, bool doFix);
    private void FixRelations();
    public void ClearRelations();
    public void ClearRelations(bool doFixRelations);
    public void ClearTables();
    private static List`1<InMemoryRelation> GetRelationsInternal(Dictionary`2<InMemoryColumn, List`1<InMemoryRelation>> dict, InMemoryColumn column);
    private static void AddColumnToDictionary(Dictionary`2<InMemoryColumn, List`1<InMemoryRelation>> dict, InMemoryColumn column, InMemoryRelation relation);
    private static string GetTypeString(Type type, Int32& size);
    private static Type GetTypeFromString(string str, Type& convertFromType);
    private static string GetObjectTypeString(Type type);
    public sealed virtual XmlSchema GetSchema();
    public string GetXmlSchema();
    private void GetXmlSchemaCore(XmlWriter writer);
    public void WriteXml(string fileName);
    public sealed virtual void WriteXml(XmlWriter writer);
    public void ReadXml(string fileName);
    public sealed virtual void ReadXml(XmlReader rdr);
    private static bool TryConvertFromHexBinary(string value, Byte[]& result);
    private static bool HexCharToInt(char value, Int32& result);
    private static object ReadXmlValue(XmlReader rdr, Type currentColumnType, Type convertFromColumnType, string columnTypeString);
    public void ReadFromInMemorySet(InMemorySet otherSet);
}
public class DevExpress.Xpo.DB.Helpers.InMemorySetException : Exception {
    public InMemorySetException(string message);
    public InMemorySetException(string message, Exception innerException);
}
public class DevExpress.Xpo.DB.Helpers.InMemoryTable : object {
    private string name;
    private InMemoryColumnList columns;
    private InMemoryRowList rows;
    private InMemorySet baseSet;
    private InMemoryIndexWrapper primaryKey;
    private InMemoryIndexWrapperCollection indexWrappers;
    private Dictionary`2<string, IInMemoryIndex> indexes;
    private ReadOnlyCollection`1<InMemoryRelation> pRelations;
    private ReadOnlyCollection`1<InMemoryRelation> fRelations;
    private ReadOnlyCollection`1<InMemoryRelation> allRelations;
    public InMemoryIndexWrapper PrimaryKey { get; }
    internal IEnumerable`1<IInMemoryIndex> IndexesInternal { get; }
    public InMemoryIndexWrapperCollection Indexes { get; }
    public string Name { get; }
    public InMemoryColumnList Columns { get; }
    public InMemoryRowList Rows { get; }
    public InMemorySet BaseSet { get; }
    public ReadOnlyCollection`1<InMemoryRelation> PRelations { get; }
    public ReadOnlyCollection`1<InMemoryRelation> FRelations { get; }
    public ReadOnlyCollection`1<InMemoryRelation> AllRelations { get; }
    public InMemoryTable(InMemorySet set, string name);
    public InMemoryIndexWrapper get_PrimaryKey();
    internal IEnumerable`1<IInMemoryIndex> get_IndexesInternal();
    public InMemoryIndexWrapperCollection get_Indexes();
    public sealed virtual string get_Name();
    public InMemoryColumnList get_Columns();
    public InMemoryRowList get_Rows();
    public InMemorySet get_BaseSet();
    public ReadOnlyCollection`1<InMemoryRelation> get_PRelations();
    public ReadOnlyCollection`1<InMemoryRelation> get_FRelations();
    public ReadOnlyCollection`1<InMemoryRelation> get_AllRelations();
    public void SetPrimaryKey(string name);
    public InMemoryColumn GetNewColumn(string name, Type type);
    public string CreateIndex(InMemoryColumn[] columns, bool unique);
    public bool RemoveIndex(string name);
    public InMemoryRelation GetPRelation(string name);
    public InMemoryRelation GetFRelation(string name);
    private InMemoryRelation[] GetPRelations();
    private InMemoryRelation[] GetFRelations();
    private InMemoryRelation[] GetAllRelations();
    internal void FixColumns();
    internal void FixRelations();
    private void FixIndexes();
    private void FillIndex(IInMemoryIndex index);
    public virtual string ToString();
    private sealed virtual override bool DevExpress.Xpo.DB.Helpers.IInMemoryTable.ExistsColumn(string columnName);
    private sealed virtual override IEnumerable`1<string> DevExpress.Xpo.DB.Helpers.IInMemoryTable.GetColumnNames();
}
internal class DevExpress.Xpo.DB.Helpers.InMemoryWeighedPlanner : object {
    private static ReadOnlySet`1<string> emptySet;
    private InMemorySet dataSet;
    public InMemoryWeighedPlanner(InMemorySet dataSet);
    private static InMemoryWeighedPlanner();
    public sealed virtual IInMemoryDataElector GetPlan(JoinNode root);
    public sealed virtual IInMemoryDataElector GetPlan(JoinNode subSelectNode, IEnumerable`1<string> existsNodeAliases);
    public sealed virtual IInMemoryDataElector GetPlan(string alias, InMemoryTable table, CriteriaOperator condition);
    private IInMemoryDataElector GetPlanInternal(JoinNode root, ISet`1<string> outerNodes);
    private static Dictionary`2<string, List`1<PlanRelationInfo>> FindRelations(Dictionary`2<string, PlanNodeInfo> nodes, IEnumerable`1<PlanAliasCriteriaInfo> aliasCriteriaDict);
    private static void TryAddRelationInfo(Dictionary`2<string, List`1<PlanRelationInfo>> relationDict, PlanRelationInfo newRelation);
    private IInMemoryDataElector CreateElector(IPlanPathItem plan, Dictionary`2<string, PlanNodeInfo> nodes, Dictionary`2<string, PlanAliasCriteriaInfo> criteriaDict, ISet`1<string> outerNodes);
    private static CriteriaOperator TakeCriteria(JoinType currentJoinType, ISet`1<string> usedNodes, Dictionary`2<string, PlanNodeInfo> nodes, Dictionary`2<string, PlanAliasCriteriaInfo> criteriaDict, ISet`1<string> outerNodes);
    private InMemoryTable GetTable(string tableName);
}
internal class DevExpress.Xpo.DB.Helpers.IntComparer : object {
    public static IntComparer Default;
    private static IntComparer();
    public sealed virtual bool Equals(int x, int y);
    public sealed virtual int GetHashCode(int obj);
}
public class DevExpress.Xpo.DB.Helpers.IsTopLevelAggregateChecker : object {
    public sealed virtual bool Visit(QuerySubQueryContainer theOperand);
    public sealed virtual bool Visit(QueryOperand theOperand);
    public sealed virtual bool Visit(FunctionOperator theOperator);
    public sealed virtual bool Visit(OperandValue theOperand);
    public sealed virtual bool Visit(GroupOperator theOperator);
    public sealed virtual bool Visit(InOperator theOperator);
    public sealed virtual bool Visit(UnaryOperator theOperator);
    public sealed virtual bool Visit(BinaryOperator theOperator);
    public sealed virtual bool Visit(BetweenOperator theOperator);
    private bool Process(IEnumerable ops);
    private bool Process(CriteriaOperator op);
    public static bool IsTopLevelAggregate(CriteriaOperator op);
    public static bool IsGrouped(SelectStatement selectStatement);
}
public class DevExpress.Xpo.DB.Helpers.IsTopLevelAggregateCheckerFull : object {
    public sealed virtual bool Visit(QuerySubQueryContainer theOperand);
    public sealed virtual bool Visit(QueryOperand theOperand);
    public sealed virtual bool Visit(FunctionOperator theOperator);
    public sealed virtual bool Visit(OperandValue theOperand);
    public sealed virtual bool Visit(GroupOperator theOperator);
    public sealed virtual bool Visit(InOperator theOperator);
    public sealed virtual bool Visit(UnaryOperator theOperator);
    public sealed virtual bool Visit(BinaryOperator theOperator);
    public sealed virtual bool Visit(BetweenOperator theOperator);
    private bool Process(IEnumerable ops);
    private bool Process(CriteriaOperator op);
    public static bool IsTopLevelAggregate(CriteriaOperator op);
    public static bool IsGrouped(SelectStatement selectStatement);
}
public interface DevExpress.Xpo.DB.Helpers.IWebApiDataFormatter {
    public abstract virtual Stream Serialize(T value, Encoding encoding);
    public abstract virtual T Deserialize(Stream stream, Encoding encoding);
}
public class DevExpress.Xpo.DB.Helpers.KeyFinder : object {
    private DataTable table;
    private static object key;
    public KeyFinder(DataTable table);
    private static KeyFinder();
    private object Process(CriteriaOperator criteria);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(FunctionOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(OperandValue theOperand);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(GroupOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(InOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(UnaryOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(BinaryOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(BetweenOperator theOperator);
    public IList Find(CriteriaOperator criteria);
    private sealed virtual override object DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Object>.Visit(OperandProperty theOperand);
    private sealed virtual override object DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Object>.Visit(AggregateOperand theOperand);
    private sealed virtual override object DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Object>.Visit(JoinOperand theOperand);
}
public class DevExpress.Xpo.DB.Helpers.MSSql2005SqlDependencyCacheRoot : object {
    public static string XpoProviderTypeString_CacheRoot;
    public static string XpoProviderTypeString_WithCache;
    private SqlDependencyReflectionHelperBase sqlDependencyHelper;
    protected ICacheToCacheCommunicationCore Root;
    [ObsoleteAttribute("Use DbConnection field instead.", "False")]
protected SqlConnection Connection;
    protected IDbConnection DbConnection;
    protected bool isDisposed;
    protected string ConnectionString;
    protected ISqlGeneratorFormatter SqlFormatter;
    private DataCacheConfiguration _CacheConfiguration;
    private Guid _CacheGuid;
    private object CacheConfigLock;
    private Dictionary`2<string, TableInfo> Infos;
    private ReaderWriterLock InfosLock;
    private bool isAutoCreateOptionCached;
    private AutoCreateOption _AutoCreateOption;
    private SqlDependencyReflectionHelperBase SqlDependencyHelper { get; }
    private DataCacheConfiguration CacheConfiguration { get; }
    [DescriptionAttribute("Returns which operations are performed when a session connects a cached data store for the first time.")]
[BrowsableAttribute("False")]
public AutoCreateOption AutoCreateOption { get; }
    private static MSSql2005SqlDependencyCacheRoot();
    [ObsoleteAttribute("Use MSSql2005SqlDependencyCacheRoot(IDbConnection connection, ICacheToCacheCommunicationCore root, string connectionString, ISqlGeneratorFormatter formatter) instead.", "False")]
protected MSSql2005SqlDependencyCacheRoot(ICacheToCacheCommunicationCore root, SqlConnection connection, string connectionString, ISqlGeneratorFormatter formatter);
    protected MSSql2005SqlDependencyCacheRoot(IDbConnection connection, ICacheToCacheCommunicationCore root, string connectionString, ISqlGeneratorFormatter formatter);
    public static void Register();
    public static IDataStore CreateProviderFromString_WithCache(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromString_CacheRoot(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    private SqlDependencyReflectionHelperBase get_SqlDependencyHelper();
    [ObsoleteAttribute("Use CreateSqlDependencyCacheRoot(IDbConnection connection, IDataStore nonCachedProvider, ISqlGeneratorFormatter formatter, out IDisposable[] objectsToDisposeOnDisconnect) instead.", "False")]
public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(IDataStore nonCachedProvider, SqlConnection connection, ISqlGeneratorFormatter formatter, IDisposable[]& objectsToDisposeOnDisconnect);
    [ObsoleteAttribute("Use CreateSqlDependencyCacheRoot(IDbConnection connection, IDataStore nonCachedProvider, string originalConnectionString, ISqlGeneratorFormatter formatter, out IDisposable[] objectsToDisposeOnDisconnect) instead.", "False")]
public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(IDataStore nonCachedProvider, SqlConnection connection, string originalConnectionString, ISqlGeneratorFormatter formatter, IDisposable[]& objectsToDisposeOnDisconnect);
    [ObsoleteAttribute("Use CreateSqlDependencyCacheRoot(IDbConnection connection, IDataStore nonCachedProvider, ISqlGeneratorFormatter formatter, DataCacheConfiguration cacheConfiguration, out IDisposable[] objectsToDisposeOnDisconnect) instead.", "False")]
public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(IDataStore nonCachedProvider, SqlConnection connection, ISqlGeneratorFormatter formatter, DataCacheConfiguration cacheConfiguration, IDisposable[]& objectsToDisposeOnDisconnect);
    [ObsoleteAttribute("Use CreateSqlDependencyCacheRoot(IDbConnection connection, IDataStore nonCachedProvider, string originalConnectionString, ISqlGeneratorFormatter formatter, DataCacheConfiguration cacheConfiguration, out IDisposable[] objectsToDisposeOnDisconnect) instead.", "False")]
public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(IDataStore nonCachedProvider, SqlConnection connection, string originalConnectionString, ISqlGeneratorFormatter formatter, DataCacheConfiguration cacheConfiguration, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(IDbConnection connection, IDataStore nonCachedProvider, ISqlGeneratorFormatter formatter, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(IDbConnection connection, IDataStore nonCachedProvider, string originalConnectionString, ISqlGeneratorFormatter formatter, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(IDbConnection connection, IDataStore nonCachedProvider, ISqlGeneratorFormatter formatter, DataCacheConfiguration cacheConfiguration, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(IDbConnection connection, IDataStore nonCachedProvider, string originalConnectionString, ISqlGeneratorFormatter formatter, DataCacheConfiguration cacheConfiguration, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(MSSqlConnectionProvider nonCachedProvider, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(MSSqlConnectionProvider nonCachedProvider, string originalConnectionString, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(MSSqlConnectionProvider nonCachedProvider, DataCacheConfiguration cacheConfiguration, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(MSSqlConnectionProvider nonCachedProvider, string originalConnectionString, DataCacheConfiguration cacheConfiguration, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(string sqlConnectionConnectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static ICacheToCacheCommunicationCore CreateSqlDependencyCacheRoot(string sqlConnectionConnectionString, AutoCreateOption autoCreateOption, DataCacheConfiguration cacheConfiguration, IDisposable[]& objectsToDisposeOnDisconnect);
    public sealed virtual DataCacheModificationResult ModifyData(DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    public sealed virtual DataCacheResult NotifyDirtyTables(DataCacheCookie cookie, String[] dirtyTablesNames);
    public sealed virtual DataCacheResult ProcessCookie(DataCacheCookie cookie);
    public sealed virtual DataCacheSelectDataResult SelectData(DataCacheCookie cookie, SelectStatement[] selects);
    public sealed virtual DataCacheUpdateSchemaResult UpdateSchema(DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    private sealed virtual override DBTable[] DevExpress.Xpo.DB.IDataStoreSchemaExplorer.GetStorageTables(String[] tables);
    private sealed virtual override String[] DevExpress.Xpo.DB.IDataStoreSchemaExplorer.GetStorageTablesList(bool includeViews);
    private DataCacheConfiguration get_CacheConfiguration();
    private T UpdateConfigIfNeeded(T rootCallResult);
    protected void ProcessPossibleAging();
    private void MarkModified(String[] tableNames);
    private TableInfo TryGetInfo(string selectedTable);
    private TableInfo GetInfo(string selectedTable);
    private void ReallyExtendAgeTracker(object data);
    private void ExtendAgeTrackers(SelectStatement[] selects);
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public sealed virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    public sealed virtual SelectedData SelectData(SelectStatement[] selects);
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public virtual object Do(string command, object args);
}
public class DevExpress.Xpo.DB.Helpers.MSSqlLocalDBApi : object {
    private static string installedVersionsKey;
    private static string apiDllPath;
    private IntPtr handle;
    private LocalDBGetInstanceInfoDelegate getInstanceInfo;
    private LocalDBGetInstancesDelegate getInstances;
    private LocalDBGetVersionInfoDelegate getVersionInfo;
    private LocalDBGetVersionsDelegate getVersions;
    private LocalDBCreateInstanceDelegate createInstance;
    private LocalDBDeleteInstanceDelegate deleteInstance;
    private LocalDBStartInstanceDelegate startInstance;
    private LocalDBStopInstanceDelegate stopInstance;
    private LocalDBTracingDelegate startTracing;
    private LocalDBTracingDelegate stopTracing;
    private LocalDBShareInstanceDelegate shareInstance;
    private LocalDBUnshareInstanceDelegate unshareInstance;
    private LocalDBFormatMessageDelegate formatMessage;
    public static int MAX_LOCALDB_INSTANCE_NAME_LENGTH;
    public static int LOCALDB_MAX_SQLCONNECTION_BUFFER_SIZE;
    public static int MAX_STRING_SID_LENGTH;
    public static int MAX_LOCALDB_VERSION_LENGTH;
    public MSSqlLocalDBApi(string fileName);
    private static MSSqlLocalDBApi();
    [SecuritySafeCriticalAttribute]
private bool TryLoadLibrary(string fileName);
    private void PrepareDelegates();
    [SecuritySafeCriticalAttribute]
private T GetDelegate(string procName);
    private void RaiseLocalDBException(int hResult);
    [SecuritySafeCriticalAttribute]
public MSSqlLocalDBVersionInfo GetVersionInfo(string versionName);
    [SecuritySafeCriticalAttribute]
public String[] GetVersions();
    [SecuritySafeCriticalAttribute]
public MSSqlLocalDBInstanceInfo GetInstanceInfo(string instanceName);
    [SecuritySafeCriticalAttribute]
public String[] GetInstances();
    [SecuritySafeCriticalAttribute]
public void CreateInstance(string versionName, string instanceName);
    [SecuritySafeCriticalAttribute]
public void DeleteInstance(string instanceName);
    [SecuritySafeCriticalAttribute]
public void StartInstance(string instanceName, String& connectionString);
    [SecuritySafeCriticalAttribute]
public void StopInstance(string instanceName, MSSqlLocalDBShutdownFlags shutdownFlags, long timeout);
    [SecuritySafeCriticalAttribute]
public void StartTracing();
    [SecuritySafeCriticalAttribute]
public void StopTracing();
    [SecuritySafeCriticalAttribute]
[SupportedOSPlatformAttribute("windows")]
public void ShareInstance(SecurityIdentifier sid, string instancePrivateName, string instanceSharedName);
    [SecuritySafeCriticalAttribute]
public void UnshareInstance(string instanceSharedName);
    [SecuritySafeCriticalAttribute]
public void CheckHandler();
    public sealed virtual void Dispose();
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    private static IntPtr LoadLibrary(string libname);
    private static bool FreeLibrary(IntPtr hModule);
    private static IntPtr GetProcAddress(IntPtr hModule, string lpProcName);
}
public class DevExpress.Xpo.DB.Helpers.MSSqlLocalDBInstanceInfo : ValueType {
    public int LocalDBInstanceInfoSize;
    public string InstanceName;
    public bool Exists;
    public bool ConfigurationCorrupted;
    public bool IsRunning;
    public int Major;
    public int Minor;
    public int Build;
    public int Revision;
    public FILETIME LastStartUTC;
    public string Connection;
    public bool IsShared;
    public string SharedInstanceName;
    public string OwnerSID;
    public bool IsAutomatic;
}
internal class DevExpress.Xpo.DB.Helpers.MSSqlLocalDBInstanceName : ValueType {
    public string Value;
}
[FlagsAttribute]
public enum DevExpress.Xpo.DB.Helpers.MSSqlLocalDBShutdownFlags : Enum {
    public int value__;
    public static MSSqlLocalDBShutdownFlags None;
    public static MSSqlLocalDBShutdownFlags KillProcess;
    public static MSSqlLocalDBShutdownFlags WithNoWait;
}
public class DevExpress.Xpo.DB.Helpers.MSSqlLocalDBVersionInfo : ValueType {
    public int LocalDBVersionInfoSize;
    public string Version;
    public bool Exists;
    public int Major;
    public int Minor;
    public int Build;
    public int Revision;
}
internal class DevExpress.Xpo.DB.Helpers.MSSqlLocalDBVersionName : ValueType {
    public string Value;
}
internal class DevExpress.Xpo.DB.Helpers.MsSqlReflectionHelper`6 : MsSqlReflectionHelperBase {
    private static GetPropertyValueDelegate getServerVersionHandler;
    private static GetPropertyValueDelegate getExceptionNumberHandler;
    private static GetPropertyValueDelegate getSqlErrorsHandler;
    private static GetPropertyValueDelegate getSqlErrorNumberHandler;
    private static GetPropertyValueDelegate getSqlErrorMessageHandler;
    private static Action`1<TSqlCommand> commandBuilderDeriveParametersHandler;
    private static Func`3<string, SqlDbType, TSqlParameter> createSqlParameterHandler;
    private static MsSqlReflectionHelper`6();
    public virtual string GetServerVersion(IDbConnection connection);
    public virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual IDbDataParameter CreateSqlParameter(string paramName, SqlDbType paramType);
    public virtual int GetSqlExceptionNumber(Exception ex);
    public virtual string GetSqlErrorMessage(Exception ex);
    public virtual int GetSqlErrorNumber(Exception ex);
    private TSqlError GetSqlError(Exception ex);
    public virtual bool IsSqlException(Exception ex);
}
internal abstract class DevExpress.Xpo.DB.Helpers.MsSqlReflectionHelperBase : object {
    public abstract virtual string GetServerVersion(IDbConnection connection);
    public abstract virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public abstract virtual IDbDataParameter CreateSqlParameter(string paramName, SqlDbType paramType);
    public abstract virtual int GetSqlExceptionNumber(Exception ex);
    public abstract virtual string GetSqlErrorMessage(Exception ex);
    public abstract virtual int GetSqlErrorNumber(Exception ex);
    public abstract virtual bool IsSqlException(Exception ex);
    public static bool IsExactType(Type type, String[] expectedTypeNames);
}
public class DevExpress.Xpo.DB.Helpers.MSSqlServer2005CacheRootProviderFactory : MSSqlProviderFactory {
    public string ProviderKey { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual string get_ProviderKey();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.Helpers.MSSqlServer2005WithCacheProviderFactory : MSSqlProviderFactory {
    public string ProviderKey { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual string get_ProviderKey();
    public virtual bool get_MeanSchemaGeneration();
}
internal class DevExpress.Xpo.DB.Helpers.MsSqlUpdateSchemaSqlFormatterHelper : UpdateSchemaSqlFormatterHelper {
    private MSSqlServerVersion serverVersion;
    public MsSqlUpdateSchemaSqlFormatterHelper(ISqlGeneratorFormatter sqlGeneratorFormatter, Func`4<DBTable, DBColumn, bool, string> getSqlCreateColumnFullAttributes, Func`2<string, string> formatConstraintSafe, Func`3<DBIndex, DBTable, string> getIndexName, Func`3<DBForeignKey, DBTable, string> getForeignKeyName, Func`3<DBPrimaryKey, DBTable, string> getPrimaryKeyName, MSSqlServerVersion serverVersion);
    protected virtual String[] FormatCreateTable(CreateTableStatement statement);
    protected virtual String[] FormatRenameTable(RenameTableStatement statement);
    protected virtual String[] FormatRenameColumn(string tableName, string oldColumnName, string newColumnName);
    protected virtual String[] FormatDropIndex(DropIndexStatement statement);
    protected virtual String[] FormatAlterColumn(AlterColumnStatement statement);
}
internal class DevExpress.Xpo.DB.Helpers.MySqlUpdateSchemaSqlFormatterHelper : UpdateSchemaSqlFormatterHelper {
    protected string AlterColumnTemplate { get; }
    protected string DropForeignKeyTemplate { get; }
    protected string DropPrimaryKeyTemplate { get; }
    public MySqlUpdateSchemaSqlFormatterHelper(ISqlGeneratorFormatter sqlGeneratorFormatter, Func`4<DBTable, DBColumn, bool, string> getSqlCreateColumnFullAttributes, Func`2<string, string> formatConstraintSafe, Func`3<DBIndex, DBTable, string> getIndexName, Func`3<DBForeignKey, DBTable, string> getForeignKeyName, Func`3<DBPrimaryKey, DBTable, string> getPrimaryKeyName);
    protected virtual String[] FormatRenameTable(RenameTableStatement statement);
    protected virtual String[] FormatRenameColumn(string tableName, string oldColumnName, string newColumnName);
    protected virtual String[] FormatCreateTable(CreateTableStatement statement);
    protected virtual String[] FormatAlterColumn(AlterColumnStatement statement);
    protected virtual String[] FormatCreatePrimaryKey(CreatePrimaryKeyStatement statement);
    protected virtual String[] FormatDropPrimaryKey(DropPrimaryKeyStatement statement);
    protected virtual string get_AlterColumnTemplate();
    protected virtual string get_DropForeignKeyTemplate();
    protected virtual string get_DropPrimaryKeyTemplate();
}
public class DevExpress.Xpo.DB.Helpers.NodeCriteriaFinder : object {
    private int inAtomicGroupLevel;
    private Dictionary`2<string, PlanAliasCriteriaInfo> criteriaDict;
    private string currentNodeAlias;
    public static Dictionary`2<string, PlanAliasCriteriaInfo> FindCriteria(string currentNodeAlias, CriteriaOperator criteria);
    public static void FindCriteria(string currentNodeAlias, CriteriaOperator criteria, Dictionary`2<string, PlanAliasCriteriaInfo> previousDict);
    public Dictionary`2<string, PlanAliasCriteriaInfo> Find(string currentNodeAlias, CriteriaOperator criteria);
    public void Find(string currentNodeAlias, CriteriaOperator criteria, Dictionary`2<string, PlanAliasCriteriaInfo> previousDict);
    private NodeCriteriaFinderResult Process(CriteriaOperator criteria);
    private sealed virtual override NodeCriteriaFinderResult DevExpress.Data.Filtering.IQueryCriteriaVisitor<DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult>.Visit(QuerySubQueryContainer theOperand);
    private sealed virtual override NodeCriteriaFinderResult DevExpress.Data.Filtering.IQueryCriteriaVisitor<DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult>.Visit(QueryOperand theOperand);
    private sealed virtual override NodeCriteriaFinderResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult>.Visit(FunctionOperator theOperator);
    private sealed virtual override NodeCriteriaFinderResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult>.Visit(OperandValue theOperand);
    private sealed virtual override NodeCriteriaFinderResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult>.Visit(GroupOperator theOperator);
    private NodeCriteriaFinderResult ProcessAddOperands(CriteriaOperator[] operands);
    private NodeCriteriaFinderResult ProcessOperands(List`1<CriteriaOperator> operands);
    private sealed virtual override NodeCriteriaFinderResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult>.Visit(InOperator theOperator);
    private sealed virtual override NodeCriteriaFinderResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult>.Visit(UnaryOperator theOperator);
    private sealed virtual override NodeCriteriaFinderResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult>.Visit(BinaryOperator theOperator);
    private sealed virtual override NodeCriteriaFinderResult DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult>.Visit(BetweenOperator theOperator);
}
public class DevExpress.Xpo.DB.Helpers.NodeCriteriaFinderResult : ValueType {
    public bool Processed;
    public string MainAlias;
    public List`1<string> List;
    public NodeCriteriaFinderResult(bool processed, string mainAlias, List`1<string> list);
    public static NodeCriteriaFinderResult New(bool processed);
    public void Union(NodeCriteriaFinderResult anotherResult);
    public string ProcessNodesString();
}
public class DevExpress.Xpo.DB.Helpers.OfflineDataStore : DataSetDataStore {
    public DataSet OfflineData;
    public OfflineDataStore(DataSet offlineData);
    protected virtual void DoCommit(ICollection`1<DataRow> rowsAffected);
}
internal class DevExpress.Xpo.DB.Helpers.OleDbReflectionHelper`4 : OleDbReflectionHelperBase {
    private static Func`4<TOleDbConnection, Guid, Object[], DataTable> getOldDbSchemaTableHandler;
    private static GetPropertyValueDelegate getSqlErrorsHandler;
    private static GetPropertyValueDelegate getSqlErrorNativeErrorHandler;
    private static OleDbReflectionHelper`4();
    protected virtual DataTable GetOleDbSchemaTable(IDbConnection connection, Guid schema, Object[] restrictions);
    public virtual int GetOleDbExceptionNativeError(Exception ex);
    public virtual bool IsOleDbException(Exception ex);
}
public abstract class DevExpress.Xpo.DB.Helpers.OleDbReflectionHelperBase : object {
    protected static Guid OleDbSchemaGuidTables;
    protected static Guid OleDbSchemaGuidProcedures;
    protected static Guid OleDbSchemaGuidColumns;
    protected static Guid OleDbSchemaGuidPrimaryKeys;
    protected static Guid OleDbSchemaGuidIndexes;
    protected static Guid OleDbSchemaGuidForeignKeys;
    public DataTable GetTables(IDbConnection connection, Object[] restrictions);
    public DataTable GetProcedures(IDbConnection connection, Object[] restrictions);
    public DataTable GetColumns(IDbConnection connection, Object[] restrictions);
    public DataTable GetPrimaryKeys(IDbConnection connection, Object[] restrictions);
    public DataTable GetIndexes(IDbConnection connection, Object[] restrictions);
    public DataTable GetForeignKeys(IDbConnection connection, Object[] restrictions);
    protected abstract virtual DataTable GetOleDbSchemaTable(IDbConnection connection, Guid schema, Object[] restrictions);
    public abstract virtual int GetOleDbExceptionNativeError(Exception ex);
    public abstract virtual bool IsOleDbException(Exception ex);
}
internal class DevExpress.Xpo.DB.Helpers.OracleUpdateSchemaSqlFormatterHelper : UpdateSchemaSqlFormatterHelper {
    private Func`2<string, string> GetSequenceNameForTable;
    protected string AlterColumnTemplate { get; }
    public OracleUpdateSchemaSqlFormatterHelper(ISqlGeneratorFormatter sqlGeneratorFormatter, Func`4<DBTable, DBColumn, bool, string> getSqlCreateColumnFullAttributes, Func`2<string, string> formatConstraintSafe, Func`3<DBIndex, DBTable, string> getIndexName, Func`3<DBForeignKey, DBTable, string> getForeignKeyName, Func`3<DBPrimaryKey, DBTable, string> getPrimaryKeyName, Func`2<string, string> getSequenceNameForTable);
    protected virtual String[] FormatCreateTable(CreateTableStatement statement);
    protected virtual String[] FormatRenameTable(RenameTableStatement statement);
    protected virtual String[] FormatRenameColumn(string tableName, string oldColumnName, string newColumnName);
    protected virtual String[] FormatAlterColumn(AlterColumnStatement statement);
    protected virtual String[] FormatDropTable(DropTableStatement statement);
    protected virtual String[] FormatDropColumn(DropColumnStatement statement);
    protected virtual String[] FormatDropIndex(DropIndexStatement statement);
    private string FormatCreateSequence(string tableName);
    private string FormatDropSequence(string tableName);
    protected virtual string get_AlterColumnTemplate();
}
public class DevExpress.Xpo.DB.Helpers.PlanAliasCriteriaInfo : object {
    public string MainAlias;
    public String[] Aliases;
    public List`1<CriteriaOperator> Criteria;
    public PlanAliasCriteriaInfo(string mainAlias, String[] aliases, List`1<CriteriaOperator> criteria);
}
internal class DevExpress.Xpo.DB.Helpers.PostgreSqlDBSchemaComparer : DBSchemaComparerSql {
    public PostgreSqlDBSchemaComparer(Func`2<string, string> tableNameMangling, Func`2<string, string> columnNameMangling, Func`3<DBTable, DBColumn, string> getSqlCreateColumnType);
    public PostgreSqlDBSchemaComparer(Func`2<string, string> tableNameMangling, Func`2<string, string> columnNameMangling, Func`3<DBTable, DBColumn, string> getSqlCreateColumnType, Func`2<string, DBTypeInfoBase> parseSqlType);
    protected virtual bool IsSqlTypesCompatible(string sqlTypeX, string sqlTypeY);
    private void SplitSqlType(string sqlType, String& type, String& size, String& suffix);
}
internal class DevExpress.Xpo.DB.Helpers.PostgreSqlUpdateSchemaSqlFormatterHelper : UpdateSchemaSqlFormatterHelper {
    private Func`3<DBTable, DBColumn, string> getSqlCreateColumnType;
    protected string AlterColumnTemplate { get; }
    public PostgreSqlUpdateSchemaSqlFormatterHelper(ISqlGeneratorFormatter sqlGeneratorFormatter, Func`4<DBTable, DBColumn, bool, string> getSqlCreateColumnFullAttributes, Func`2<string, string> formatConstraintSafe, Func`3<DBIndex, DBTable, string> getIndexName, Func`3<DBForeignKey, DBTable, string> getForeignKeyName, Func`3<DBPrimaryKey, DBTable, string> getPrimaryKeyName, Func`3<DBTable, DBColumn, string> getSqlCreateColumnType);
    protected virtual String[] FormatRenameTable(RenameTableStatement statement);
    protected virtual String[] FormatRenameColumn(string tableName, string oldColumnName, string newColumnName);
    protected virtual String[] FormatCreateTable(CreateTableStatement statement);
    private string ChangeColumnSqlTypeToCompatible(string sqlType);
    protected virtual String[] FormatAlterColumn(AlterColumnStatement statement);
    protected virtual String[] FormatDropIndex(DropIndexStatement statement);
    protected virtual string get_AlterColumnTemplate();
}
public class DevExpress.Xpo.DB.Helpers.QueryCriteriaReprocessor : object {
    private JoinNode root;
    private TaggedParametersHolder identitiesByTag;
    private NodeInfo[] localRoot;
    private IDictionary NodesInfos;
    public QueryCriteriaReprocessor(DataSet dataSet, JoinNode root);
    public QueryCriteriaReprocessor(DataSet dataSet, JoinNode root, TaggedParametersHolder identitiesByTag);
    private NodeInfo GetNodeInfo(string alias);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandValue theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IQueryCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(QueryOperand operand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IQueryCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(QuerySubQueryContainer container);
    public CriteriaOperator Process(CriteriaOperator op);
    private CriteriaOperator[] Process(CriteriaOperatorCollection operands);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BetweenOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BinaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(InOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(GroupOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(UnaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(FunctionOperator theOperator);
    private string GetName(QueryOperand operand);
}
public class DevExpress.Xpo.DB.Helpers.QueryParamsReprocessor : object {
    private TaggedParametersHolder identitiesByTag;
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandValue theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IQueryCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(QueryOperand operand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IQueryCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(QuerySubQueryContainer container);
    public static CriteriaOperator ReprocessCriteria(CriteriaOperator op, TaggedParametersHolder identitiesByTag);
    public CriteriaOperator Reprocess(CriteriaOperator op, TaggedParametersHolder identitiesByTag);
    private CriteriaOperator Process(CriteriaOperator op);
    private CriteriaOperator[] Process(CriteriaOperatorCollection operands);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BetweenOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BinaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(InOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(GroupOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(UnaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(FunctionOperator theOperator);
}
public class DevExpress.Xpo.DB.Helpers.ReferenceColumnsFinder : object {
    private string SubNodeAlias;
    private string ParentNodeAlias;
    private List`1<ReferenceElement> References;
    private ReferenceColumnsFinder(string subNodeAlias, string parentNodeAlias);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BetweenOperator theOperator);
    private void ProcessBinary(BinaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BinaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(UnaryOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(InOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(GroupOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(OperandValue theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(FunctionOperator theOperator);
    private sealed virtual override void DevExpress.Data.Filtering.IQueryCriteriaVisitor.Visit(QueryOperand theOperand);
    private sealed virtual override void DevExpress.Data.Filtering.IQueryCriteriaVisitor.Visit(QuerySubQueryContainer theOperand);
    private void SearchAt(CriteriaOperator criteria);
    public static ReferenceElement[] FindJoinReferences(JoinNode subNode, JoinNode parentNode);
}
public class DevExpress.Xpo.DB.Helpers.ReferenceElement : object {
    public QueryOperand NodeColumn;
    public QueryOperand SubNodeColumn;
    public ReferenceElement(QueryOperand nodeColumn, QueryOperand subNodeColumn);
}
internal class DevExpress.Xpo.DB.Helpers.ReflectionGetValuesHelper`3 : ReflectionGetValuesHelperBase {
    private static OD oracleDecimalMax;
    private static OD oracleDecimalMin;
    private static OD oracleDecimalZero;
    private static OracleDataReaderGetOracleDecimalDelegate<R, OD, OG> getOracleDecimal;
    private static OracleDecimalComparisonDelegate<R, OD, OG> oDGreaterThan;
    private static OracleDecimalComparisonDelegate<R, OD, OG> oDEquals;
    private static OracleDecimalToDouble<R, OD, OG> oDToDouble;
    private static OracleDecimalToDecimal<R, OD, OG> oDToDecimal;
    private static OracleDecimalOperationWithInt<R, OD, OG> oDSetPrecision;
    private static bool BugWithSetPrecisionExistsInODP;
    private static OracleGlobalizationGetThreadInfoDelegate<R, OD, OG> oracleGlobalizationGetThreadInfo;
    private static OracleGlobalizationGetNumericCharactersDelegate<R, OD, OG> oracleGlobalizationGetNumericCharacters;
    private ThreadLocal`1<char> currentOracleDecimalSeparator;
    private static ReflectionGetValuesHelper`3();
    public virtual bool GetValues(IDataReader reader, Type[] fieldTypes, Object[] values);
    private static char GetOracleDecimalSeparator();
    private object GetDecimal(R dataReader, int index);
}
internal class DevExpress.Xpo.DB.Helpers.ReflectionGetValuesHelperBase : object {
    public virtual bool GetValues(IDataReader reader, Type[] fieldTypes, Object[] values);
}
public class DevExpress.Xpo.DB.Helpers.SortingComparer : object {
    private ExpressionEvaluator[] evaluators;
    private QuerySortingCollection operands;
    public SortingComparer(ExpressionEvaluator[] sortingEvaluators, QuerySortingCollection operands);
    private sealed virtual override int System.Collections.Generic.IComparer<System.Data.DataRow>.Compare(DataRow x, DataRow y);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
public class DevExpress.Xpo.DB.Helpers.SortingComparerFull : object {
    private ExpressionEvaluator[] evaluators;
    private QuerySortingCollection operands;
    public SortingComparerFull(ExpressionEvaluator[] sortingEvaluators, QuerySortingCollection operands);
    private sealed virtual override int System.Collections.Generic.IComparer<DevExpress.Xpo.DB.Helpers.InMemoryComplexRow>.Compare(InMemoryComplexRow x, InMemoryComplexRow y);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
public class DevExpress.Xpo.DB.Helpers.SortingListComparerFull : object {
    private ExpressionEvaluator[] evaluators;
    private QuerySortingCollection operands;
    private SortingComparerFull sortComparer;
    public SortingListComparerFull(ExpressionEvaluator[] sortingEvaluators, QuerySortingCollection operands);
    private sealed virtual override int System.Collections.Generic.IComparer<System.Collections.Generic.List<DevExpress.Xpo.DB.Helpers.InMemoryComplexRow>>.Compare(List`1<InMemoryComplexRow> x, List`1<InMemoryComplexRow> y);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
internal class DevExpress.Xpo.DB.Helpers.SqlDependencyReflectionHelper`2 : SqlDependencyReflectionHelperBase {
    private TSqlDependency instance;
    private static Func`2<TSqlDependency, bool> hasChangesHandler;
    private static Func`2<TSqlCommand, TSqlDependency> createSqlDependencyHandler;
    private static Func`2<string, bool> startHandler;
    private static Func`2<string, bool> stopHandler;
    public bool HasChanges { get; }
    [SecuritySafeCriticalAttribute]
private static SqlDependencyReflectionHelper`2();
    public virtual bool Start(string connectionString);
    public virtual bool Stop(string connectionString);
    public virtual bool get_HasChanges();
    public virtual SqlDependencyReflectionHelperBase CreateNew(IDbCommand command);
}
public abstract class DevExpress.Xpo.DB.Helpers.SqlDependencyReflectionHelperBase : object {
    public bool HasChanges { get; }
    public abstract virtual bool Start(string connectionString);
    public abstract virtual bool Stop(string connectionString);
    public abstract virtual bool get_HasChanges();
    public abstract virtual SqlDependencyReflectionHelperBase CreateNew(IDbCommand command);
}
internal class DevExpress.Xpo.DB.Helpers.StringComparer : object {
    public static StringComparer Default;
    private static StringComparer();
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string obj);
}
public class DevExpress.Xpo.DB.Helpers.WebApiDataContainer`1 : object {
    [CompilerGeneratedAttribute]
private DataCacheCookie <DataCacheCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private T <DataCacheData>k__BackingField;
    public DataCacheCookie DataCacheCookie { get; public set; }
    public T DataCacheData { get; public set; }
    public WebApiDataContainer`1(DataCacheCookie cookie, T data);
    [CompilerGeneratedAttribute]
public DataCacheCookie get_DataCacheCookie();
    [CompilerGeneratedAttribute]
public void set_DataCacheCookie(DataCacheCookie value);
    [CompilerGeneratedAttribute]
public T get_DataCacheData();
    [CompilerGeneratedAttribute]
public void set_DataCacheData(T value);
}
public class DevExpress.Xpo.DB.Helpers.WebApiDataContractXmlDataFormatter : WebApiXmlDataFormatterBase {
    private static ConcurrentDictionary`2<Type, DataContractSerializer> Serializers;
    private static Type[] DefaultKnownTypes;
    public static IWebApiDataFormatter Default;
    private Type[] knownTypes;
    public WebApiDataContractXmlDataFormatter(Type[] knownTypes);
    private static WebApiDataContractXmlDataFormatter();
    public static DataContractSerializer GetSerializer(Type objectType, Type[] knownTypes);
    protected virtual T Deserialize(Stream stream, Encoding encoding);
    protected virtual Stream Serialize(T value, Encoding encoding);
}
public class DevExpress.Xpo.DB.Helpers.WebApiXmlDataFormatter : WebApiXmlDataFormatterBase {
    protected virtual T Deserialize(Stream stream, Encoding encoding);
    protected virtual Stream Serialize(T value, Encoding encoding);
}
public abstract class DevExpress.Xpo.DB.Helpers.WebApiXmlDataFormatterBase : object {
    private static int DefaultBufferSize;
    protected abstract virtual T Deserialize(Stream stream, Encoding encoding);
    protected abstract virtual Stream Serialize(T value, Encoding encoding);
    private sealed virtual override T DevExpress.Xpo.DB.Helpers.IWebApiDataFormatter.Deserialize(Stream stream, Encoding encoding);
    private sealed virtual override Stream DevExpress.Xpo.DB.Helpers.IWebApiDataFormatter.Serialize(T value, Encoding encoding);
    protected StreamReader CreateStreamReader(Stream stream, Encoding encoding);
    protected XmlWriter CreateXmlWriter(Stream stream, Encoding encoding);
}
public abstract class DevExpress.Xpo.DB.Helpers.XPVistaDBColumnAttributes : object {
    public string Name { get; }
    public int MaxLength { get; }
    public Type SystemType { get; }
    public bool AllowNull { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_MaxLength();
    public abstract virtual Type get_SystemType();
    public abstract virtual bool get_AllowNull();
}
public class DevExpress.Xpo.DB.Helpers.XPVistaDBColumnAttributes`1 : XPVistaDBColumnAttributes {
    private static Int32Handler<VDBCA> maxLength;
    private static StringHandler<VDBCA> name;
    private static TypeHandler<VDBCA> systemType;
    private static BoolHandler<VDBCA> allowNull;
    private VDBCA vistaCA;
    public int MaxLength { get; }
    public string Name { get; }
    public Type SystemType { get; }
    public bool AllowNull { get; }
    private static XPVistaDBColumnAttributes`1();
    public XPVistaDBColumnAttributes`1(VDBCA vistaCA);
    public virtual int get_MaxLength();
    public virtual string get_Name();
    public virtual Type get_SystemType();
    public virtual bool get_AllowNull();
}
public abstract class DevExpress.Xpo.DB.Helpers.XPVistaDBDA : object {
    public object InternalObject { get; }
    public int Error_sql_ColumnDoesNotExist { get; }
    public int Error_sql_TableNotExist { get; }
    public int Error_dda_DeleteRow { get; }
    public int Error_dda_CreateRow { get; }
    public int Error_dda_OpenDatabase { get; }
    public abstract virtual object get_InternalObject();
    public abstract virtual XPVistaDBDatabase CreateDatabase(string fileName, bool stayExclusive, string encryptionKeyString, int pageSize, int LCID, bool caseSensitive);
    public abstract virtual XPVistaDBDatabase OpenDatabase(string fileName, string mode, string encryptionKeyString);
    public abstract virtual int get_Error_sql_ColumnDoesNotExist();
    public abstract virtual int get_Error_sql_TableNotExist();
    public abstract virtual int get_Error_dda_DeleteRow();
    public abstract virtual int get_Error_dda_CreateRow();
    public abstract virtual int get_Error_dda_OpenDatabase();
    public abstract virtual string GetConnectionSource(IDbConnection vistaDBConnection);
    public abstract virtual string GetConnectionPassword(IDbConnection vistaDBConnection);
    public abstract virtual string GetConnectionOpenmode(IDbConnection vistaDBConnection);
    public static XPVistaDBDA GetVistaDBDA(Type vistaDBConnectionType);
}
public class DevExpress.Xpo.DB.Helpers.XPVistaDBDA`5 : XPVistaDBDA {
    private static VDBEngine engine;
    private static GetDBDAHandler<VDBEngine, VDBDA, VDBDatabase, VDBDatabaseOpenMode, VDBConnection> getDBDA;
    private static CreateDatabaseHandler<VDBEngine, VDBDA, VDBDatabase, VDBDatabaseOpenMode, VDBConnection> createDataBase;
    private static OpenDatabaseHandler<VDBEngine, VDBDA, VDBDatabase, VDBDatabaseOpenMode, VDBConnection> openDataBase;
    private static GetConnectionProperty<VDBEngine, VDBDA, VDBDatabase, VDBDatabaseOpenMode, VDBConnection> getConnectionSource;
    private static GetConnectionProperty<VDBEngine, VDBDA, VDBDatabase, VDBDatabaseOpenMode, VDBConnection> getConnectionPassword;
    private static GetConnectionOpenmodeHandler<VDBEngine, VDBDA, VDBDatabase, VDBDatabaseOpenMode, VDBConnection> getConnectionOpenmode;
    private static CreateXPDatabaseInstanceHandler<VDBEngine, VDBDA, VDBDatabase, VDBDatabaseOpenMode, VDBConnection> createXPDatabaseInstance;
    private static Dictionary`2<string, VDBDatabaseOpenMode> vDBDatabaseOpenModeDict;
    private static Dictionary`2<VDBDatabaseOpenMode, string> vDBDatabaseOpenModeStringDict;
    private static Type xpVistaDBDatabaseType;
    private static int sql_ColumnDoesNotExist;
    private static int dda_DeleteRow;
    private static int sql_TableNotExist;
    private static int dda_CreateRow;
    private static int dda_OpenDatabase;
    private VDBDA vistaDBDA;
    public object InternalObject { get; }
    public int Error_dda_CreateRow { get; }
    public int Error_dda_DeleteRow { get; }
    public int Error_sql_ColumnDoesNotExist { get; }
    public int Error_sql_TableNotExist { get; }
    public int Error_dda_OpenDatabase { get; }
    private static XPVistaDBDA`5();
    public virtual object get_InternalObject();
    public virtual XPVistaDBDatabase CreateDatabase(string fileName, bool stayExclusive, string encryptionKeyString, int pageSize, int LCID, bool caseSensitive);
    public virtual XPVistaDBDatabase OpenDatabase(string fileName, string mode, string encryptionKeyString);
    public virtual string GetConnectionOpenmode(IDbConnection vistaDBConnection);
    public virtual int get_Error_dda_CreateRow();
    public virtual int get_Error_dda_DeleteRow();
    public virtual int get_Error_sql_ColumnDoesNotExist();
    public virtual int get_Error_sql_TableNotExist();
    public virtual int get_Error_dda_OpenDatabase();
    public virtual string GetConnectionPassword(IDbConnection vistaDBConnection);
    public virtual string GetConnectionSource(IDbConnection vistaDBConnection);
}
public abstract class DevExpress.Xpo.DB.Helpers.XPVistaDBDatabase : object {
    public object InternalObject { get; }
    public abstract virtual object get_InternalObject();
    public abstract virtual IEnumerable`1<string> GetTableNames();
    public abstract virtual XPVistaDBTableSchema NewTable(string name);
    public abstract virtual XPVistaDBTableSchema TableSchema(string name);
    public abstract virtual void AlterTable(string oldName, XPVistaDBTableSchema schema);
    public abstract virtual XPVistaDBTable CreateTable(XPVistaDBTableSchema schema, bool exclusive, bool readOnly);
    public abstract virtual XPVistaDBTable OpenTable(string name, bool exclusive, bool readOnly);
    public abstract virtual void DropTable(string name);
    public abstract virtual void Close();
}
public class DevExpress.Xpo.DB.Helpers.XPVistaDBDatabase`4 : XPVistaDBDatabase {
    private static AlterTableHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> alterTable;
    private static CreateTableHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> createTable;
    private static DropTableHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> dropTable;
    private static GetTableNamesHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> getTableNames;
    private static NewTableHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> newTable;
    private static OpenTableHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> openTable;
    private static TableSchemaHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> tableSchema;
    private static CloseHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> close;
    private static Type xpVistaDBTableType;
    private static Type xpVistaDBTableSchemaType;
    private static CreateXPTableSchemaInstanceHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> createXPSchemaInstance;
    private static CreateXPTableInstanceHandler<VDBDatabase, VDBTableSchema, VDBTable, VDBTableNameCollection> createXPTableInstance;
    private VDBDatabase vistaDatabase;
    public object InternalObject { get; }
    private static XPVistaDBDatabase`4();
    public XPVistaDBDatabase`4(VDBDatabase vistaDatabase);
    public static XPVistaDBDatabase CreateInstance(VDBDatabase vistaDatabase);
    public virtual object get_InternalObject();
    public virtual void AlterTable(string oldName, XPVistaDBTableSchema schema);
    public virtual XPVistaDBTable CreateTable(XPVistaDBTableSchema schema, bool exclusive, bool readOnly);
    public virtual void DropTable(string name);
    public virtual IEnumerable`1<string> GetTableNames();
    public virtual XPVistaDBTableSchema NewTable(string name);
    public virtual XPVistaDBTable OpenTable(string name, bool exclusive, bool readOnly);
    public virtual XPVistaDBTableSchema TableSchema(string name);
    public virtual void Close();
}
public abstract class DevExpress.Xpo.DB.Helpers.XPVistaDBDefaultValueInformation : object {
    public string ColumnName { get; }
    public string Expression { get; }
    public bool UseInUpdate { get; }
    public abstract virtual string get_ColumnName();
    public abstract virtual string get_Expression();
    public abstract virtual bool get_UseInUpdate();
}
public class DevExpress.Xpo.DB.Helpers.XPVistaDBDefaultValueInformation`1 : XPVistaDBDefaultValueInformation {
    private static StringHandler<VDBDVI> getColumnName;
    private static StringHandler<VDBDVI> getExpression;
    private static BoolHandler<VDBDVI> getUseInUpdate;
    private VDBDVI vistaDVI;
    public string ColumnName { get; }
    public string Expression { get; }
    public bool UseInUpdate { get; }
    private static XPVistaDBDefaultValueInformation`1();
    public XPVistaDBDefaultValueInformation`1(VDBDVI vistaDVI);
    public virtual string get_ColumnName();
    public virtual string get_Expression();
    public virtual bool get_UseInUpdate();
}
public abstract class DevExpress.Xpo.DB.Helpers.XPVistaDBIdentityInformation : object {
    public string ColumnName { get; }
    public abstract virtual string get_ColumnName();
}
public class DevExpress.Xpo.DB.Helpers.XPVistaDBIdentityInformation`1 : XPVistaDBIdentityInformation {
    private static StringHandler<VBIDI> columnName;
    private VBIDI vistaIDI;
    public string ColumnName { get; }
    private static XPVistaDBIdentityInformation`1();
    public XPVistaDBIdentityInformation`1(VBIDI vistaIDI);
    public virtual string get_ColumnName();
}
public abstract class DevExpress.Xpo.DB.Helpers.XPVistaDBIndexInformation : object {
    public bool Primary { get; }
    public string Name { get; }
    public string KeyExpression { get; }
    public bool Unique { get; }
    public abstract virtual bool get_Primary();
    public abstract virtual string get_Name();
    public abstract virtual string get_KeyExpression();
    public abstract virtual bool get_Unique();
}
public class DevExpress.Xpo.DB.Helpers.XPVistaDBIndexInformation`1 : XPVistaDBIndexInformation {
    private static StringHandler<VDBII> name;
    private static StringHandler<VDBII> keyExpression;
    private static BoolHandler<VDBII> primary;
    private static BoolHandler<VDBII> unique;
    private VDBII vistaII;
    public string Name { get; }
    public string KeyExpression { get; }
    public bool Primary { get; }
    public bool Unique { get; }
    private static XPVistaDBIndexInformation`1();
    public XPVistaDBIndexInformation`1(VDBII vistaII);
    public virtual string get_Name();
    public virtual string get_KeyExpression();
    public virtual bool get_Primary();
    public virtual bool get_Unique();
}
public abstract class DevExpress.Xpo.DB.Helpers.XPVistaDBRelationshipInformation : object {
    public string Name { get; }
    public string PrimaryTable { get; }
    public string ForeignKey { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_PrimaryTable();
    public abstract virtual string get_ForeignKey();
}
public class DevExpress.Xpo.DB.Helpers.XPVistaDBRelationshipInformation`1 : XPVistaDBRelationshipInformation {
    private static StringHandler<VDBRI> primaryTable;
    private static StringHandler<VDBRI> foreignKey;
    private static StringHandler<VDBRI> name;
    private VDBRI vistaRI;
    public string Name { get; }
    public string PrimaryTable { get; }
    public string ForeignKey { get; }
    private static XPVistaDBRelationshipInformation`1();
    public XPVistaDBRelationshipInformation`1(VDBRI vistaRI);
    public virtual string get_Name();
    public virtual string get_PrimaryTable();
    public virtual string get_ForeignKey();
}
public abstract class DevExpress.Xpo.DB.Helpers.XPVistaDBTable : object {
    public object InternalObject { get; }
    public abstract virtual object get_InternalObject();
    public abstract virtual void CreateIndex(string name, string keyExpression, bool primary, bool unique);
    public abstract virtual void CreateForeignKey(string constraintName, string foreignKey, string primaryTable, string updateIntegrity, string deleteIntegrity, string description);
    public abstract virtual void DropForeignKey(string constraintName);
    public abstract virtual void Close();
}
public class DevExpress.Xpo.DB.Helpers.XPVistaDBTable`2 : XPVistaDBTable {
    private static Dictionary`2<string, VDBReferentialIntegrity> vistaDBRIDict;
    private static CloseHandler<VDBTable, VDBReferentialIntegrity> close;
    private static CreateForeignKeyHandler<VDBTable, VDBReferentialIntegrity> createForeignKey;
    private static CreateIndexHandler<VDBTable, VDBReferentialIntegrity> createIndex;
    private static DropForeignKeyHandler<VDBTable, VDBReferentialIntegrity> dropForeignKey;
    private VDBTable vistaTable;
    public object InternalObject { get; }
    private static XPVistaDBTable`2();
    public XPVistaDBTable`2(VDBTable vistaTable);
    public static XPVistaDBTable CreateInstance(VDBTable vistaTable);
    public virtual void Close();
    public virtual void CreateForeignKey(string constraintName, string foreignKey, string primaryTable, string updateIntegrityStr, string deleteIntegrityStr, string description);
    public virtual void CreateIndex(string name, string keyExpression, bool primary, bool unique);
    public virtual void DropForeignKey(string constraintName);
    public virtual object get_InternalObject();
}
public abstract class DevExpress.Xpo.DB.Helpers.XPVistaDBTableSchema : object {
    public object InternalObject { get; }
    public abstract virtual object get_InternalObject();
    public abstract virtual XPVistaDBColumnAttributes AddColumn(string name, string vistaDbType, int maxLen, int codePage);
    public abstract virtual XPVistaDBColumnAttributes DefineColumnAttributes(string name, bool allowNull, bool readOnly, bool encrypted, bool packed, string description);
    public abstract virtual void DefineIdentity(string columnName, string seedValue, string stepExpression);
    public abstract virtual void DefineDefaultValue(string columnName, string scriptExpression, bool useInUpdate, string description);
    public abstract virtual List`1<XPVistaDBColumnAttributes> GetColumns();
    public abstract virtual List`1<XPVistaDBIndexInformation> GetIndices();
    public abstract virtual Dictionary`2<string, XPVistaDBDefaultValueInformation> GetDefaultValues();
    public abstract virtual List`1<XPVistaDBRelationshipInformation> GetForeignKeys();
    public abstract virtual List`1<XPVistaDBIdentityInformation> GetIdentities();
}
public class DevExpress.Xpo.DB.Helpers.XPVistaDBTableSchema`11 : XPVistaDBTableSchema {
    private static AddColumnHandler<VDBTableSchema, VistaDbType, VDBCA, VDBII, VDBRI, VDBIDI, VDBIIC, VDBRIC, VDBIDIC, VDBDVI, VDBDVIC> addColumn;
    private static DefineColumnAttributesHandler4<VDBTableSchema, VistaDbType, VDBCA, VDBII, VDBRI, VDBIDI, VDBIIC, VDBRIC, VDBIDIC, VDBDVI, VDBDVIC> defineColumnAttributes4;
    private static DefineColumnAttributesHandler5<VDBTableSchema, VistaDbType, VDBCA, VDBII, VDBRI, VDBIDI, VDBIIC, VDBRIC, VDBIDIC, VDBDVI, VDBDVIC> defineColumnAttributes5;
    private static DefineIdentityHandler<VDBTableSchema, VistaDbType, VDBCA, VDBII, VDBRI, VDBIDI, VDBIIC, VDBRIC, VDBIDIC, VDBDVI, VDBDVIC> defineIdentity;
    private static DefineDefaultValueHandler<VDBTableSchema, VistaDbType, VDBCA, VDBII, VDBRI, VDBIDI, VDBIIC, VDBRIC, VDBIDIC, VDBDVI, VDBDVIC> defineDefaultValue;
    private static DefaultValuesHandler<VDBTableSchema, VistaDbType, VDBCA, VDBII, VDBRI, VDBIDI, VDBIIC, VDBRIC, VDBIDIC, VDBDVI, VDBDVIC> getDefaultValues;
    private static IndexInfoHandler<VDBTableSchema, VistaDbType, VDBCA, VDBII, VDBRI, VDBIDI, VDBIIC, VDBRIC, VDBIDIC, VDBDVI, VDBDVIC> getIndeces;
    private static IdentityInfoHandler<VDBTableSchema, VistaDbType, VDBCA, VDBII, VDBRI, VDBIDI, VDBIIC, VDBRIC, VDBIDIC, VDBDVI, VDBDVIC> getIdentities;
    private static RelationInfoHandler<VDBTableSchema, VistaDbType, VDBCA, VDBII, VDBRI, VDBIDI, VDBIIC, VDBRIC, VDBIDIC, VDBDVI, VDBDVIC> getForeignKeys;
    private static Dictionary`2<string, VistaDbType> vistaDBTypeDict;
    private VDBTableSchema vistaTableSchema;
    public object InternalObject { get; }
    private static XPVistaDBTableSchema`11();
    public XPVistaDBTableSchema`11(VDBTableSchema vistaTableSchema);
    public static XPVistaDBTableSchema CreateInstance(VDBTableSchema vistaTableSchema);
    public virtual XPVistaDBColumnAttributes AddColumn(string name, string vistaDbTypeString, int maxLen, int codePage);
    public virtual XPVistaDBColumnAttributes DefineColumnAttributes(string name, bool allowNull, bool readOnly, bool encrypted, bool packed, string description);
    public virtual void DefineIdentity(string columnName, string seedValue, string stepExpression);
    public virtual void DefineDefaultValue(string columnName, string scriptExpression, bool useInUpdate, string description);
    public virtual Dictionary`2<string, XPVistaDBDefaultValueInformation> GetDefaultValues();
    public virtual List`1<XPVistaDBColumnAttributes> GetColumns();
    public virtual List`1<XPVistaDBIndexInformation> GetIndices();
    public virtual List`1<XPVistaDBRelationshipInformation> GetForeignKeys();
    public virtual List`1<XPVistaDBIdentityInformation> GetIdentities();
    public virtual object get_InternalObject();
}
[ServiceContractAttribute]
[XmlSerializerFormatAttribute]
public interface DevExpress.Xpo.DB.ICachedDataStoreService {
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.DeleteStatement")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.InsertStatement")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.UpdateStatement")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.AggregateOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BetweenOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BinaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.ContainsOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.FunctionOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.GroupOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.InOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NotOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NullOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandProperty")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.ParameterValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QueryOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.UnaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.JoinOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandParameter")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QuerySubQueryContainer")]
public abstract virtual OperationResult`1<DataCacheModificationResult> ModifyDataCached(DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<DataCacheResult> NotifyDirtyTables(DataCacheCookie cookie, String[] dirtyTablesNames);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<DataCacheResult> ProcessCookie(DataCacheCookie cookie);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.AggregateOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BetweenOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BinaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.ContainsOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.FunctionOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.GroupOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.InOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NotOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NullOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandProperty")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.ParameterValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QueryOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.UnaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.JoinOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandParameter")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QuerySubQueryContainer")]
public abstract virtual OperationResult`1<DataCacheSelectDataResult> SelectDataCached(DataCacheCookie cookie, SelectStatement[] selects);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<DataCacheUpdateSchemaResult> UpdateSchemaCached(DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
}
[ServiceContractAttribute]
[XmlSerializerFormatAttribute]
public interface DevExpress.Xpo.DB.ICachedDataStoreServiceAsync {
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<DataCacheModificationResult>> ModifyDataCachedAsync(DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<DataCacheResult>> NotifyDirtyTablesAsync(DataCacheCookie cookie, String[] dirtyTablesNames);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<DataCacheResult>> ProcessCookieAsync(DataCacheCookie cookie);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<DataCacheSelectDataResult>> SelectDataCachedAsync(DataCacheCookie cookie, SelectStatement[] selects);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<DataCacheUpdateSchemaResult>> UpdateSchemaCachedAsync(DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
}
[ServiceContractAttribute]
[XmlSerializerFormatAttribute]
public interface DevExpress.Xpo.DB.ICachedDataStoreWarpService {
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.AggregateOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BetweenOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BinaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.ContainsOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.FunctionOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.GroupOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.InOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NotOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NullOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandProperty")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.ParameterValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QueryOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.UnaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.JoinOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandParameter")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QuerySubQueryContainer")]
public abstract virtual OperationResult`1<DataCacheWarpSelectDataResult> WarpSelectDataCached(DataCacheCookie cookie, SelectStatement[] selects);
}
[ServiceContractAttribute]
[XmlSerializerFormatAttribute]
public interface DevExpress.Xpo.DB.ICachedDataStoreWarpServiceAsync {
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<DataCacheWarpSelectDataResult>> WarpSelectDataCachedAsync(DataCacheCookie cookie, SelectStatement[] selects);
}
[ServiceContractAttribute]
[XmlSerializerFormatAttribute]
public interface DevExpress.Xpo.DB.IDataStoreService {
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.DeleteStatement")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.InsertStatement")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.UpdateStatement")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.AggregateOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BetweenOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BinaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.ContainsOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.FunctionOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.GroupOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.InOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NotOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NullOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandProperty")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.ParameterValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QueryOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.UnaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.JoinOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandParameter")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QuerySubQueryContainer")]
public abstract virtual OperationResult`1<ModificationResult> ModifyData(ModificationStatement[] dmlStatements);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.AggregateOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BetweenOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BinaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.ContainsOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.FunctionOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.GroupOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.InOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NotOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NullOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandProperty")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.ParameterValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QueryOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.UnaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.JoinOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandParameter")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QuerySubQueryContainer")]
public abstract virtual OperationResult`1<SelectedData> SelectData(SelectStatement[] selects);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<UpdateSchemaResult> UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<AutoCreateOption> GetAutoCreateOption();
    [ServiceKnownTypeAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/SprocQuery")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.Helpers.CommandChannelHelper/SqlQuery")]
[OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<object> Do(string command, object args);
}
[ServiceContractAttribute]
[XmlSerializerFormatAttribute]
public interface DevExpress.Xpo.DB.IDataStoreServiceAsync {
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<ModificationResult>> ModifyDataAsync(ModificationStatement[] dmlStatements);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<SelectedData>> SelectDataAsync(SelectStatement[] selects);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<UpdateSchemaResult>> UpdateSchemaAsync(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<AutoCreateOption>> GetAutoCreateOptionAsync();
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<object>> DoAsync(string command, object args);
}
[ServiceContractAttribute]
[XmlSerializerFormatAttribute]
public interface DevExpress.Xpo.DB.IDataStoreWarpService {
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<Byte[]> WarpSelectData(SelectStatement[] selects);
}
[ServiceContractAttribute]
[XmlSerializerFormatAttribute]
public interface DevExpress.Xpo.DB.IDataStoreWarpServiceAsync {
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual Task`1<OperationResult`1<Byte[]>> WarpSelectDataAsync(SelectStatement[] selects);
}
public class DevExpress.Xpo.DB.InMemoryDataStore : DataStoreBase {
    public static string XpoProviderTypeString;
    private bool caseSensitive;
    private InMemorySet InMemorySet;
    private IInMemoryPlanner planner;
    private CustomFunctionCollection customFunctionCollection;
    private CustomAggregateCollection customAggregateCollection;
    [DescriptionAttribute("Gets whether the InMemoryDataStore performs case-sensitive comparisons for strings during expression evaluations or sorting.")]
[BrowsableAttribute("False")]
public bool CaseSensitive { get; }
    [DescriptionAttribute("Gets whether the InMemoryDataStore object is allowed to create a schema in the associated DataSet.")]
[BrowsableAttribute("False")]
public bool CanCreateSchema { get; }
    [DescriptionAttribute("Gets an object that can be used to synchronize access to the InMemoryDataStore.")]
[ObsoleteAttribute("SyncRoot is obsolette, use LockHelper.Lock() or LockHelper.LockAsync() instead.")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object SyncRoot { get; }
    [ObsoleteAttribute("Use DataSetDataStore class instead of InMemoryDataStore", "True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DataSet Data { get; }
    private static InMemoryDataStore();
    public InMemoryDataStore(AutoCreateOption autoCreateOption);
    public InMemoryDataStore(AutoCreateOption autoCreateOption, bool caseSensitive);
    public InMemoryDataStore(InMemoryDataStore originalStore, AutoCreateOption autoCreateOption);
    [ObsoleteAttribute("Use DataSetDataStore class or .ctor without DataSet instead")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public InMemoryDataStore(DataSet data, AutoCreateOption autoCreateOption);
    [ObsoleteAttribute("Use DataSetDataStore class or .ctor without DataSet instead")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public InMemoryDataStore(DataSet data, AutoCreateOption autoCreateOption, bool caseSensitive);
    public static string GetConnectionString(string path);
    public static string GetConnectionString(string path, bool readOnly);
    public static string GetConnectionStringInMemory(bool caseSensitive);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static void Register();
    public bool get_CaseSensitive();
    public bool get_CanCreateSchema();
    public virtual object get_SyncRoot();
    protected virtual UpdateSchemaResult ProcessUpdateSchema(bool skipIfFirstTableNotExists, DBTable[] tables);
    protected virtual Task`1<UpdateSchemaResult> ProcessUpdateSchemaAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public void RegisterCustomFunctionOperators(ICollection`1<ICustomFunctionOperator> customFunctions);
    public void RegisterCustomFunctionOperator(ICustomFunctionOperator customFunction);
    public void RegisterCustomAggregates(ICollection`1<ICustomAggregate> customAggregates);
    public void RegisterCustomAggregate(ICustomAggregate customAggregate);
    protected SelectStatementResult GetDataNormal(SelectStatement root);
    protected SelectStatementResult GetDataGrouped(SelectStatement root);
    protected virtual SelectStatementResult ProcessSelectData(SelectStatement selects);
    protected virtual Task`1<SelectStatementResult> ProcessSelectDataAsync(SelectStatement selects, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual ModificationResult ProcessModifyData(ModificationStatement[] dmlStatements);
    protected virtual Task`1<ModificationResult> ProcessModifyDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    protected virtual void BeginTransaction();
    protected virtual void DoCommit();
    protected virtual void DoRollback();
    private static void ClearDataSet(InMemorySet dataSet);
    protected virtual void ProcessClearDatabase();
    public DBTable GetTableSchema(string tableName);
    public sealed virtual String[] GetStorageTablesList(bool includeViews);
    public sealed virtual DBTable[] GetStorageTables(String[] tables);
    public void WriteXml(string fileName);
    public void WriteXml(XmlWriter writer);
    public void ReadXml(string fileName);
    public void ReadXml(XmlReader reader);
    public void ReadFromInMemoryDataStore(InMemoryDataStore dataStore);
    public DataSet get_Data();
    public sealed virtual DBStoredProcedure[] GetStoredProcedures();
}
public class DevExpress.Xpo.DB.InMemoryProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
[ServiceKnownTypeAttribute("DevExpress.Xpo.Helpers.IdList")]
[ServiceContractAttribute]
[XmlSerializerFormatAttribute]
public interface DevExpress.Xpo.DB.ISerializableObjectLayerService {
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<bool> GetCanLoadCollectionObjects();
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<CommitObjectStubsResult[]> CommitObjects(XPDictionaryStub dictionary, XPObjectStubCollection objectsForDelete, XPObjectStubCollection objectsForSave, LockingOption lockingOption);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<object> CreateObjectType(string assemblyName, string typeName);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection[]>> GetObjectsByKey(XPDictionaryStub dictionary, GetObjectStubsByKeyQuery[] queries);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection>> LoadCollectionObjects(XPDictionaryStub dictionary, string refPropertyName, XPObjectStub ownerObject);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.DeleteStatement")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.InsertStatement")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.UpdateStatement")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.AggregateOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BetweenOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BinaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.ContainsOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.FunctionOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.GroupOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.InOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NotOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NullOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandProperty")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandValue")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.ConstantValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.Helpers.XPStubOperandValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.ParameterValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QueryOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.UnaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.JoinOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandParameter")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QuerySubQueryContainer")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.XPObjectStub")]
public abstract virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection[]>> LoadObjects(XPDictionaryStub dictionary, ObjectStubsQuery[] queries);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<PurgeResult> Purge();
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.DeleteStatement")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.InsertStatement")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.UpdateStatement")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.AggregateOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BetweenOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.BinaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.ContainsOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.FunctionOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.GroupOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.InOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NotOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.NullOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandProperty")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandValue")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.ConstantValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.Helpers.XPStubOperandValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.ParameterValue")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QueryOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.UnaryOperator")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.JoinOperand")]
[ServiceKnownTypeAttribute("DevExpress.Data.Filtering.OperandParameter")]
[ServiceKnownTypeAttribute("DevExpress.Xpo.DB.QuerySubQueryContainer")]
public abstract virtual OperationResult`1<Object[][]> SelectData(XPDictionaryStub dictionary, ObjectStubsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection>> GetParentObjectsToDelete();
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection>> GetParentObjectsToSave();
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<String[]> GetParentTouchedClassInfos();
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<bool> IsParentObjectToDelete(XPDictionaryStub dictionary, XPObjectStub theObject);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<bool> IsParentObjectToSave(XPDictionaryStub dictionary, XPObjectStub theObject);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<SerializableObjectLayerResult`1<Object[]>> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStub theObject, String[] props);
    [OperationContractAttribute]
[XmlSerializerFormatAttribute]
public abstract virtual OperationResult`1<SerializableObjectLayerResult`1<Object[]>> LoadDelayedProperty(XPDictionaryStub dictionary, XPObjectStubCollection objects, string property);
}
public class DevExpress.Xpo.DB.MSSqlCEConnectionProvider : ConnectionProviderSql {
    public static string XpoProviderTypeString;
    private ReflectConnectionHelper helper;
    public static int MaximumStringSize;
    public static int MaximumVarbinarySize;
    private static Char[] achtungChars;
    public string ObjectsOwner;
    private DbTypeMapperBase dbTypeMapper;
    private ReflectConnectionHelper ConnectionHelper { get; }
    public bool SupportNamedParameters { get; }
    protected CommandPoolBehavior CommandPoolBehavior { get; }
    public bool NativeOuterApplySupported { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    private static MSSqlCEConnectionProvider();
    public MSSqlCEConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private ReflectConnectionHelper get_ConnectionHelper();
    public static string GetConnectionString(string database, string password);
    public static string GetConnectionString(string database);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MSSqlCEConnectionProvider/<GetIdentityAsync>d__34")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual IDbConnection CreateConnection();
    protected static IDbConnection CreateConnection(string connectionString);
    public virtual IDbCommand CreateCommand();
    protected virtual void CreateDataBase();
    private void CreateDatabaseThroughSqlCeEngine();
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private DBColumnType GetTypeFromString(string typeName, int length);
    private ParameterValue CreateParameterForSystemQuery(int tag, string value, int size);
    private void GetColumns(DBTable table);
    private string GetFullTypeName(string typeName, int size, int precision, int scale);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    private string FormatDBObject(string objectName);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    private string FnUtcNow(ProcessParameter processParameter);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    protected string FormatString(object value);
    public virtual bool get_SupportNamedParameters();
    protected virtual CommandPoolBehavior get_CommandPoolBehavior();
    public virtual string FormatConstraint(string constraintName);
    protected virtual int GetSafeNameTableMaxLength();
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected virtual string GetSafeNameRoot(string originalName);
    public virtual bool get_NativeOuterApplySupported();
    protected virtual SelectedData ExecuteSproc(string sprocName, OperandValue[] parameters);
    protected virtual Task`1<SelectedData> ExecuteSprocAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual DBStoredProcedure[] GetStoredProcedures();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
}
public class DevExpress.Xpo.DB.MSSqlCEProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.MSSqlConnectionProvider : ConnectionProviderSql {
    public static string XpoProviderTypeString;
    [EditorBrowsableAttribute("1")]
public static bool GlobalUseLegacySqlClient;
    private static string ConnectionStringParameterInitialCatalog;
    private static string ConnectionStringParameterAttachDbFilename;
    private static string ConnectionStringParameterUserInstance;
    private static string ConnectionStringParameterDatabase;
    public static bool IsNotForReplication;
    private static String[] assemblyNames;
    private static String[] connectionTypes;
    private ReflectConnectionHelper connectionHelper;
    private MsSqlReflectionHelperBase reflectionHelper;
    private DbTypeMapperBase dbTypeMapper;
    private UpdateSchemaSqlFormatterHelper updateSchemaSqlFormatter;
    public static int MaximumStringSize;
    public static int MaximumBinarySize;
    private static int assemblyFoundIndex;
    private bool is2000;
    private bool is2005;
    private bool is2008;
    private bool is2012;
    private Nullable`1<bool> isAzure;
    private bool isColumnEncryptionEnabled;
    [ThreadStaticAttribute]
private static String[] parameterNameCache;
    public string ObjectsOwner;
    private Dictionary`2<string, string> safeNames;
    private bool hasIdentityes;
    private bool IsNativeDateOnlySupported { get; }
    private ReflectConnectionHelper ConnectionHelper { get; }
    private MsSqlReflectionHelperBase ReflectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    protected UpdateSchemaSqlFormatterHelper UpdateSchemaFormatter { get; }
    [DescriptionAttribute("Indicates whether the connection provider supports the SKIP and TAKE (TOP) operators.")]
public bool NativeSkipTakeSupported { get; }
    [DescriptionAttribute("Indicates whether the connection provider supports the OUTER APPLY operators.")]
public bool NativeOuterApplySupported { get; }
    protected string CreateForeignKeyTemplate { get; }
    private static MSSqlConnectionProvider();
    public MSSqlConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private bool get_IsNativeDateOnlySupported();
    private ReflectConnectionHelper get_ConnectionHelper();
    private MsSqlReflectionHelperBase get_ReflectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    protected virtual UpdateSchemaSqlFormatterHelper get_UpdateSchemaFormatter();
    protected virtual QueryParameterMode GetQueryParameterMode();
    protected virtual DBSchemaComparerSql CreateSchemaComparer();
    protected static string GetConnectionStringForType(string providerTypeString, string server, string userId, string password, string database);
    protected static string GetConnectionStringForType(string providerTypeString, string server, int port, string userId, string password, string database);
    protected static string GetConnectionStringForType(string providerTypeString, string server, string database);
    protected static string GetConnectionStringForType(string providerTypeString, string server, int port, string database);
    protected static string GetConnectionStringForTypeWithAttach(string providerTypeString, string server, string userId, string password, string attachDbFilename, bool userInstance);
    protected static string GetConnectionStringForTypeWithAttach(string providerTypeString, string server, string attachDbFilename, bool userInstance);
    protected static string GetConnectionStringForTypeWithAttachForLocalDB(string providerTypeString, string server, string database, string attachDbFilename);
    public static string GetConnectionStringWithoutIntegratedSecurity(string providerTypeString, string server, string database);
    public static string GetConnectionStringWithoutIntegratedSecurity(string providerTypeString, string server, string database, string userId);
    public static string GetConnectionString(string server, string userId, string password, string database);
    public static string GetConnectionString(string server, int port, string userId, string password, string database);
    public static string GetConnectionString(string server, string database);
    public static string GetConnectionString(string server, int port, string database);
    public static string GetConnectionStringWithAttach(string server, string userId, string password, string attachDbFilename, bool userInstance);
    public static string GetConnectionStringWithAttach(string server, string attachDbFilename, bool userInstance);
    public static string GetConnectionStringWithAttachForLocalDB(string server, string database, string attachDbFilename);
    public static string GetConnectionString2005WithCache(string server, string userId, string password, string database);
    public static string GetConnectionString2005WithCache(string server, string database);
    public static string GetConnectionString2005CacheRoot(string server, string userId, string password, string database);
    public static string GetConnectionString2005CacheRoot(string server, string database);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    public virtual string ComposeSafeSchemaName(string tableName);
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForTimeOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    private Query GetQueryForIdentity(Query sql);
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MSSqlConnectionProvider/<GetIdentityAsync>d__77")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual bool IsDeadLock(Exception e);
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual void CreateDataBase();
    private void CreateDataBase(IDbConnection conn);
    private bool CreateDb();
    private void ReadDbVersion();
    private bool GetIsAzure();
    private void GetIsColumnEncryptionEnabled();
    private IDbDataParameter ExecPrepareReturnParameter(IDbCommand command, IDictionary parameters);
    private bool ExecProcessReturnParameter(IDbCommand command, IDictionary parameters, IDbDataParameter returnParameter);
    private bool Exec(IDbCommand command, IDictionary parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MSSqlConnectionProvider/<ExecAsync>d__99")]
private Task`1<bool> ExecAsync(IDbCommand command, IDictionary parameters, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private void ProcessModificationStatement(ModificationStatement dml, IDbCommand command, TaggedParametersHolder identities, List`1<ParameterValue> result, Dictionary`2<OperandValue, string> parameters, StringBuilder sql);
    protected virtual ModificationResult ProcessModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MSSqlConnectionProvider/<ProcessModifyDataAsync>d__103")]
protected virtual Task`1<ModificationResult> ProcessModifyDataAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    private ParameterValue CreateParameterForSystemQuery(int tag, string value, int size);
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private DBColumnType GetTypeFromString(string typeName, int length);
    private void GetColumns(DBTable table);
    private string GetFullTypeName(string typeName, int size, int precision, int scale);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    private string FormatOwnedDBObject(string schema, string objectName);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual bool get_NativeOuterApplySupported();
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    private void AdjustParameterSize(IDbDataParameter param, object value);
    private int GetStringSize(int p);
    private int GetBinarySize(int p);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    public virtual string FormatConstraint(string constraintName);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual string get_CreateForeignKeyTemplate();
    public static void ClearDatabase(IDbCommand command);
    public static void EmptyAllTablesInDatabase(IDbCommand command);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected virtual string GetSafeNameRoot(string originalName);
    public virtual string GenerateStoredProcedures(DBTable table, String& dropLines);
    private void GenerateView(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateInsertSP(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateUpdateSP(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateDeleteSP(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateInsteadOfInsertTrigger(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateInsteadOfUpdateTrigger(DBTable table, StringBuilder result, List`1<string> dropList);
    private void GenerateInsteadOfDeleteTrigger(DBTable table, StringBuilder result, List`1<string> dropList);
    private void InitTrigger(DBTable table, StringBuilder result);
    private void InitTriggerCore(DBTable table, StringBuilder result);
    private void FinalizeTrigger(DBTable table, StringBuilder result);
    private void FinalizeTriggerCore(StringBuilder result);
    private void AppendWhere(DBTable table, StringBuilder result);
    private void AppendKeys(DBTable table, StringBuilder result);
    public virtual DBStoredProcedure[] GetStoredProcedures();
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MSSqlConnectionProvider/<CommandExecuteNonQueryAsync>d__165")]
protected virtual Task`1<int> CommandExecuteNonQueryAsync(IDbCommand command, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MSSqlConnectionProvider/<CommandExecuteScalarAsync>d__166")]
protected virtual Task`1<object> CommandExecuteScalarAsync(IDbCommand command, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MSSqlConnectionProvider/<CommandExecuteReaderAsync>d__167")]
protected virtual Task`1<IDataReader> CommandExecuteReaderAsync(IDbCommand command, CommandBehavior commandBehavior, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MSSqlConnectionProvider/<ReaderReadAsync>d__168")]
protected virtual Task`1<bool> ReaderReadAsync(IDataReader reader, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MSSqlConnectionProvider/<ReaderNextResultAsync>d__169")]
protected virtual Task`1<bool> ReaderNextResultAsync(IDataReader reader, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0(IDbCommand command, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<object> <>n__1(IDbCommand command, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IDataReader> <>n__2(IDbCommand command, CommandBehavior commandBehavior, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<bool> <>n__3(IDataReader reader, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<bool> <>n__4(IDataReader reader, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
}
public class DevExpress.Xpo.DB.MSSqlProviderFactory : ProviderFactory {
    public bool HasPort { get; }
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public bool SupportStoredProcedures { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    private static string GetActiveDirectoryConnectionString(Dictionary`2<string, string> parameters, string server);
    private static string AppendOptionalParameters(Dictionary`2<string, string> parameters, string connectionString);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasPort();
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual bool get_SupportStoredProcedures();
    private string GetConnectionString(string server, int port, string userId, string password, ConnectionSecurityMode securityMode, Dictionary`2<string, object> parameters);
    public virtual String[] GetDatabases(string server, int port, string userId, string password, ConnectionSecurityMode securityMode);
    public String[] GetDatabases(string server, int port, string userId, string password, ConnectionSecurityMode securityMode, Dictionary`2<string, object> parameters);
    public virtual String[] GetDatabases(string server, int port, string userId, string password);
    public virtual String[] GetDatabases(string server, string userId, string password, ConnectionSecurityMode securityMode);
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.MySqlConnectionProvider : ConnectionProviderSql {
    public static string XpoProviderTypeString;
    private static int foundConnectorIndex;
    private static ConnectorInfo[] connectors;
    private Nullable`1<int> connectorIndex;
    private ReflectConnectionHelper helper;
    private DbTypeMapperBase dbTypeMapper;
    private UpdateSchemaSqlFormatterHelper updateSchemaSqlFormatter;
    public static int MaximumStringSize;
    private MethodInfo miServerVersion;
    private Nullable`1<decimal> versionMajor;
    private int versionMinor;
    private ExecMethodDelegate commandBuilderDeriveParametersHandler;
    private static Char[] achtungChars;
    private Dictionary`2<char, string> escapeChars;
    private int ConnectionIndex { get; }
    protected string ProviderAssemblyName { get; }
    protected string ExceptionTypeName { get; }
    protected string DbTypeTypeName { get; }
    protected string ParameterTypeName { get; }
    protected string CommandBuilderTypeName { get; }
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    protected UpdateSchemaSqlFormatterHelper UpdateSchemaFormatter { get; }
    private string DateTimeColumnSqlType { get; }
    private string TimeColumnSqlType { get; }
    public bool NativeSkipTakeSupported { get; }
    protected string CreateForeignKeyTemplate { get; }
    private static MySqlConnectionProvider();
    public MySqlConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static string GetConnectionString(string server, string userId, string password, string database);
    public static string GetConnectionString(string server, int port, string userId, string password, string database);
    public static IDbConnection CreateConnection(string connectionString);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    private int get_ConnectionIndex();
    protected string get_ProviderAssemblyName();
    protected string get_ExceptionTypeName();
    protected string get_DbTypeTypeName();
    protected string get_ParameterTypeName();
    protected string get_CommandBuilderTypeName();
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    protected virtual UpdateSchemaSqlFormatterHelper get_UpdateSchemaFormatter();
    protected virtual DBSchemaComparerSql CreateSchemaComparer();
    protected virtual void PrepareDelegates();
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    private string get_DateTimeColumnSqlType();
    private string get_TimeColumnSqlType();
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForTimeOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.MySqlConnectionProvider/<GetIdentityAsync>d__63")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private void ReadDbVersion(IDbConnection conn);
    private bool SetServerVersionInternal(string versionString);
    protected bool SupportVersion(decimal major, int minor);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual IDbConnection CreateConnection();
    protected virtual void CreateDataBase();
    private DBColumnType GetTypeFromString(string typeName, Int32& size);
    private static string RemoveBrackets(string typeName);
    private void GetColumns(DBTable table);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual DBStoredProcedure[] GetStoredProcedures();
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual int GetObjectNameEffectiveLength(string objectName);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    private static string FormatMod(string arg, int multiplier, int divider);
    private static string FormatGetInt(string arg, int multiplier, int divider);
    private string FnAddDateTime(string datetimeOperand, string dayPart, string secondPart);
    private string FnAddTime(string timeOperand, string secondPart);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FormatFunctionTimeOnly(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    protected virtual object ReformatReadValue(object value, ReformatReadValueArgs args);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    protected string FormatString(object value);
    public virtual string FormatConstraint(string constraintName);
    protected virtual string get_CreateForeignKeyTemplate();
    private void ClearDatabase(IDbCommand command);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    private void DeriveParametersCore(IDbCommand sourceCommand);
    private T ConvertDBNull(object v, Func`2<object, T> converter);
    private ParameterDirection ParseDirection(string v);
}
public class DevExpress.Xpo.DB.MySqlProviderFactory : ProviderFactory {
    public string ProviderKey { get; }
    public bool HasPort { get; }
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    private string GetConnectionString(string server, string userId, string password, string database, Nullable`1<int> port);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual String[] GetDatabases(string server, int port, string userId, string password);
    public virtual string get_ProviderKey();
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasPort();
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.NexusDBConnectionProvider : ConnectionProviderSql {
    public static string XpoProviderTypeString;
    public static int MaximumStringSize;
    private static NexusDBConnectionProvider();
    public NexusDBConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static string GetConnectionString(string server, string userId, string password, string database);
    public static string GetConnectionString(string server, int port, string userId, string password, string database);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual long GetIdentity(InsertStatement root, TaggedParametersHolder identitiesByTag);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.NexusDBConnectionProvider/<GetIdentityAsync>d__29")]
protected virtual Task`1<long> GetIdentityAsync(InsertStatement root, TaggedParametersHolder identitiesByTag, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    public virtual void CreateTable(DBTable table);
    public virtual void CreateIndex(DBTable table, DBIndex index);
    protected virtual void CreateDataBase();
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    public static DBColumnType TypeFromString(string enmNxType, Int32& size);
    private void GetColumns(DBTable table);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual int GetSafeNameColumnMaxLength();
    protected virtual int GetSafeNameConstraintMaxLength();
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    public virtual string FormatConstraint(string constraintName);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    public virtual void CreatePrimaryKey(DBTable table);
    public virtual void CreateColumn(DBTable table, DBColumn column);
    public virtual void CreateForeignKey(DBTable table, DBForeignKey fk);
    public void ClearDatabase(IDbCommand command);
    private void GetForeignKeys(DBTable table);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
}
public class DevExpress.Xpo.DB.NexusDBProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.ODPConnectionProvider : BaseODPConnectionProvider {
    public static string XpoProviderTypeString;
    private bool isODP10;
    protected string OracleAssemblyName { get; }
    protected string OracleDbTypeName { get; }
    protected string OracleDecimanlTypeName { get; }
    protected string OracleCommandTypeName { get; }
    protected string OracleExceptionTypeName { get; }
    protected string OracleParameterTypeName { get; }
    protected string OracleDataReaderTypeName { get; }
    protected string OracleCommandBuilderTypeName { get; }
    protected string OracleGlobalizationTypeName { get; }
    protected bool IsODPv10 { get; }
    private static ODPConnectionProvider();
    public ODPConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static string GetConnectionString(string server, string userId, string password);
    public static IDbConnection CreateConnection(string connectionString);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    protected virtual string get_OracleAssemblyName();
    protected virtual string get_OracleDbTypeName();
    protected virtual string get_OracleDecimanlTypeName();
    protected virtual string get_OracleCommandTypeName();
    protected virtual string get_OracleExceptionTypeName();
    protected virtual string get_OracleParameterTypeName();
    protected virtual string get_OracleDataReaderTypeName();
    protected virtual string get_OracleCommandBuilderTypeName();
    protected virtual string get_OracleGlobalizationTypeName();
    protected virtual bool get_IsODPv10();
}
public class DevExpress.Xpo.DB.ODPManagedConnectionProvider : BaseODPConnectionProvider {
    public static string XpoProviderTypeString;
    protected string OracleAssemblyName { get; }
    protected string OracleDbTypeName { get; }
    protected string OracleDecimanlTypeName { get; }
    protected string OracleCommandTypeName { get; }
    protected string OracleExceptionTypeName { get; }
    protected string OracleParameterTypeName { get; }
    protected string OracleDataReaderTypeName { get; }
    protected string OracleCommandBuilderTypeName { get; }
    protected string OracleGlobalizationTypeName { get; }
    protected bool IsODPv10 { get; }
    private static ODPManagedConnectionProvider();
    public ODPManagedConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static string GetConnectionString(string server, string userId, string password);
    public static IDbConnection CreateConnection(string connectionString);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    protected virtual string get_OracleAssemblyName();
    protected virtual string get_OracleDbTypeName();
    protected virtual string get_OracleDecimanlTypeName();
    protected virtual string get_OracleCommandTypeName();
    protected virtual string get_OracleExceptionTypeName();
    protected virtual string get_OracleParameterTypeName();
    protected virtual string get_OracleDataReaderTypeName();
    protected virtual string get_OracleCommandBuilderTypeName();
    protected virtual string get_OracleGlobalizationTypeName();
    protected virtual bool get_IsODPv10();
}
public class DevExpress.Xpo.DB.ODPManagedProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public bool SupportStoredProcedures { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
    public virtual bool get_SupportStoredProcedures();
}
public abstract class DevExpress.Xpo.DB.OleDBConnectionProvider : ConnectionProviderSql {
    public static bool SortColumnsAlphabetically;
    private ReflectConnectionHelper helper;
    private OleDbReflectionHelperBase reflectionHelper;
    private static ConcurrentDictionary`2<Type, MethodInfo> getProviderNameMethods;
    protected ReflectConnectionHelper ConnectionHelper { get; }
    protected OleDbReflectionHelperBase ReflectionHelper { get; }
    public OleDBConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private static OleDBConnectionProvider();
    protected ReflectConnectionHelper get_ConnectionHelper();
    protected OleDbReflectionHelperBase get_ReflectionHelper();
    protected static string GetOleDbProviderName(IDbConnection connection);
    protected internal static IDbConnection CreateConnection(string connectionString);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected bool ProcedureContainsParameters(string sourceString);
    private void GetColumns(DBTable table);
    protected DBColumn GetColumnFromOleDbMetadata(DataRow colDefinition);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
}
public class DevExpress.Xpo.DB.OperationResult : object {
    private static string SerializeSeparator;
    public ServiceException ErrorType;
    public string Error;
    public static int ExecuteClientMaxRetryCount;
    public OperationResult(ServiceException errorType, string error);
    private static OperationResult();
    public static string SerializeSecurityException(ObjectLayerSecurityException securityException);
    public static ObjectLayerSecurityException DeserializeSecurityException(string data);
    public static OperationResult`1<T> ExecuteClient(OperationResultChannelPredicate`1<T> predicate, Func`2<Exception, bool> exceptionHandler, N& channel);
    public static OperationResult`1<T> ExecuteClient(OperationResultChannelPredicate`1<T> predicate, N& channel);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.OperationResult/<ExecuteClientAsync>d__10`1")]
public static Task`1<OperationResult`1<R>> ExecuteClientAsync(OperationResultChannelPredicateAsync`1<R> predicate, Func`2<Exception, bool> exceptionHandler, Action resetChannelAction);
    public static Task`1<OperationResult`1<R>> ExecuteClientAsync(OperationResultChannelPredicateAsync`1<R> predicate, Action resetChannelAction);
}
public class DevExpress.Xpo.DB.OperationResult`1 : OperationResult {
    public T Result;
    public OperationResult`1(ServiceException errorType, string error);
    public OperationResult`1(T result);
    public T HandleError();
}
public class DevExpress.Xpo.DB.OperationResultChannelPredicate`1 : MulticastDelegate {
    public OperationResultChannelPredicate`1(object object, IntPtr method);
    public virtual OperationResult`1<T> Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual OperationResult`1<T> EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.OperationResultChannelPredicateAsync`1 : MulticastDelegate {
    public OperationResultChannelPredicateAsync`1(object object, IntPtr method);
    public virtual Task`1<OperationResult`1<T>> Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Task`1<OperationResult`1<T>> EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.OperationResultPredicate`1 : MulticastDelegate {
    public OperationResultPredicate`1(object object, IntPtr method);
    public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.OracleConnectionProvider : BaseOracleConnectionProvider {
    public static string XpoProviderTypeString;
    private ReflectConnectionHelper helper;
    private ReflectionGetValuesHelperBase getValuesHelper;
    private DbTypeMapperBase dbTypeMapper;
    private ExecMethodDelegate commandBuilderDeriveParametersHandler;
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected bool IsFieldTypesNeeded { get; }
    private ReflectionGetValuesHelperBase GetValuesHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    private static OracleConnectionProvider();
    public OracleConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private ReflectConnectionHelper get_ConnectionHelper();
    public static string GetConnectionString(string server, string userId, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    private bool HasUnicode(string value);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    protected virtual bool IsConnectionBroken(Exception e);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual bool get_IsFieldTypesNeeded();
    private ReflectionGetValuesHelperBase get_GetValuesHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    protected virtual void GetValues(IDataReader reader, Type[] fieldTypes, Object[] values);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
}
public class DevExpress.Xpo.DB.OracleProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public bool SupportStoredProcedures { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
    public virtual bool get_SupportStoredProcedures();
}
public class DevExpress.Xpo.DB.PervasiveProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.PervasiveSqlConnectionProvider : ConnectionProviderSql {
    public static int PervasiveErrorCode;
    public static string XpoProviderTypeString;
    private static int PervasiveDataTypeKeyColumn;
    private static int PervasiveDataTypeIndexColumn;
    private ReflectConnectionHelper helper;
    private DbTypeMapperBase dbTypeMapper;
    public static int MaximumStringSize;
    private ExecMethodDelegate commandBuilderDeriveParametersHandler;
    private static Char[] achtungChars;
    private bool inSchemaUpdate;
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    public bool SupportNamedParameters { get; }
    private static PervasiveSqlConnectionProvider();
    public PervasiveSqlConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    public static string GetConnectionString(string server, string userId, string password, string database);
    public static string GetConnectionString(string server, string userId, string password, string database, string encoding);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.PervasiveSqlConnectionProvider/<GetIdentityAsync>d__39")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual void CreateDataBase();
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    protected virtual SelectedData ExecuteSproc(string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.PervasiveSqlConnectionProvider/<ExecuteSprocAsync>d__46")]
protected virtual Task`1<SelectedData> ExecuteSprocAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    private void PrepareCommandForSprocCall(IDbCommand command, string sprocName, OperandValue[] parameters);
    public virtual DBStoredProcedure[] GetStoredProcedures();
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private string GetDBColumnTypeNameByDBInfo(byte dataType, ushort size, byte dec, ColumnTypeFlags flags);
    private DBColumnType GetDBColumnTypeByDBInfo(byte dataType, ushort size, byte dec, ColumnTypeFlags flags, Int32& columnSize, Boolean& isIdentity);
    private void GetColumns(DBTable table);
    private bool TryEvaluateSqlExpression(string sqlExpr, Object& result);
    private bool TryParseDecimal(string expr, Decimal& result);
    private void GetPrimaryKey(DBTable table);
    public virtual void CreateIndex(DBTable table, DBIndex index);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual int GetObjectNameEffectiveLength(string objectName);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    protected string FormatString(object value);
    public virtual bool get_SupportNamedParameters();
    public virtual void CreateForeignKey(DBTable table, DBForeignKey fk);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    public virtual string FormatConstraint(string constraintName);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    private void ClearDatabase(IDbCommand command);
    protected virtual object ReformatReadValue(object value, ReformatReadValueArgs args);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected virtual void BeginTransactionCore(object il);
    protected virtual void CommitTransactionCore();
    protected virtual void RollbackTransactionCore();
    protected virtual UpdateSchemaResult ProcessUpdateSchema(bool skipIfFirstTableNotExists, DBTable[] tables);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.PervasiveSqlConnectionProvider/<ProcessUpdateSchemaAsync>d__97")]
protected virtual Task`1<UpdateSchemaResult> ProcessUpdateSchemaAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool skipIfFirstTableNotExists, DBTable[] tables);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<UpdateSchemaResult> <>n__0(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
}
public class DevExpress.Xpo.DB.PostgreSqlConnectionProvider : ConnectionProviderSql {
    public static string XpoProviderTypeString;
    private static string ConectionStringEncodingParameterName;
    private static string ConectionStringEncodingParameterValue;
    private ReflectConnectionHelper helper;
    private static string NpgsqlExceptionTypeName;
    private static string PostgresExceptionTypeName;
    public static Nullable`1<bool> GlobalUseLegacyGuidSupport;
    public Nullable`1<bool> UseLegacyGuidSupport;
    private UpdateSchemaSqlFormatterHelper updateSchemaSqlFormatter;
    private Nullable`1<decimal> versionMajor;
    private int versionMinor;
    private Version npgSqlVersion;
    public static int MaximumStringSize;
    private DbTypeMapperBase dbTypeMapper;
    public static Nullable`1<CommandPoolBehavior> GlobalCommandPoolBehavior;
    private Nullable`1<CommandPoolBehavior> commandPoolBehavior;
    private static Char[] achtungChars;
    public string ObjectsOwner;
    private ExecMethodDelegate commandBuilderDeriveParametersHandler;
    private bool IsLegacyGuidSupport { get; }
    private bool IsNativeDateOnlySupported { get; }
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected UpdateSchemaSqlFormatterHelper UpdateSchemaFormatter { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    protected CommandPoolBehavior CommandPoolBehavior { get; }
    public bool NativeSkipTakeSupported { get; }
    public bool NativeOuterApplySupported { get; }
    private static PostgreSqlConnectionProvider();
    public PostgreSqlConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private bool get_IsLegacyGuidSupport();
    private bool get_IsNativeDateOnlySupported();
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual UpdateSchemaSqlFormatterHelper get_UpdateSchemaFormatter();
    protected virtual DBSchemaComparerSql CreateSchemaComparer();
    public static string GetConnectionString(string server, string userId, string password, string database);
    public static string GetConnectionString(string server, int port, string userId, string password, string database);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    private void ReadDbVersion(IDbConnection conn);
    private bool SetServerVersionInternal(string versionString);
    private bool SupportNpgsqlVersion(int major, int minor, int build);
    private bool SupportVersion(decimal major, int minor);
    public void SetServerVersion(string versionString);
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForTimeOnly(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    private ParameterValue CreateParameterForSystemQuery(int tag, string value);
    private Query GetIdentityPrepareQuery(InsertStatement root, TaggedParametersHolder identitiesByTag);
    protected virtual long GetIdentity(InsertStatement root, TaggedParametersHolder identitiesByTag);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.PostgreSqlConnectionProvider/<GetIdentityAsync>d__59")]
protected virtual Task`1<long> GetIdentityAsync(InsertStatement root, TaggedParametersHolder identitiesByTag, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual IDbConnection CreateConnection();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    protected virtual void PreparePooledCommand(IDbCommand command);
    protected virtual CommandPoolBehavior get_CommandPoolBehavior();
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    public virtual void CreateTable(DBTable table);
    protected virtual void CreateDataBase();
    protected virtual string GetSeqName(string tableName, string columnName);
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private DBColumnType GetTypeFromString(string typeName, int length);
    private void GetColumns(DBTable table);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual int GetObjectNameEffectiveLength(string objectName);
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual bool get_NativeOuterApplySupported();
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    private static string FormatMod(string arg, int multiplier, int divider, bool useFloor);
    private static string FormatGetInt(string arg, int multiplier, int divider);
    private string FnAddDateTime(string datetimeOperand, string dayPart, string secondPart, string millisecondPart);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FnLpad(String[] operands);
    private string FnRpad(String[] operands);
    private string FnRemove(String[] operands);
    private string FnLog(String[] operands);
    private string FnCharIndex(String[] operands);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    protected string FormatString(object value);
    public virtual string FormatConstraint(string constraintName);
    public virtual string FormatOrder(string sortProperty, SortingDirection direction);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    public virtual string FormatOuterApply(string sql, string alias);
    public void ClearDatabase(IDbCommand command);
    private string GetSchemaName(string table);
    private string GetTableName(string table);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    private void GenerateView(DBTable table, StringBuilder result);
    private void GenerateInsertSP(DBTable table, StringBuilder result);
    private void GenerateUpdateSP(DBTable table, StringBuilder result);
    private void GenerateDeleteSP(DBTable table, StringBuilder result);
    private void GenerateInsteadOfInsertRule(DBTable table, StringBuilder result);
    private void GenerateInsteadOfUpdateRule(DBTable table, StringBuilder result);
    private void GenerateInsteadOfDeleteRule(DBTable table, StringBuilder result);
    private static string GetRawType(string type);
    private void AppendKeys(DBTable table, StringBuilder result);
    private void AppendWhere(DBTable table, StringBuilder result);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual DBStoredProcedure[] GetStoredProcedures();
}
public class DevExpress.Xpo.DB.PostgreSqlProviderFactory : ProviderFactory {
    public bool HasPort { get; }
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public bool SupportStoredProcedures { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasPort();
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, int port, string userId, string password);
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
    public virtual bool get_SupportStoredProcedures();
}
public class DevExpress.Xpo.DB.SerializableObjectLayerMarshalByRefObject : MarshalByRefObject {
    public static ISerializableObjectLayer SerializableObjectLayer;
    public bool CanLoadCollectionObjects { get; }
    public ISerializableObjectLayer ObjectLayer { get; }
    public sealed virtual bool get_CanLoadCollectionObjects();
    public sealed virtual CommitObjectStubsResult[] CommitObjects(XPDictionaryStub dictionary, XPObjectStubCollection objectsForDelete, XPObjectStubCollection objectsForSave, LockingOption lockingOption);
    public sealed virtual void CreateObjectType(string assemblyName, string typeName);
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> GetObjectsByKey(XPDictionaryStub dictionary, GetObjectStubsByKeyQuery[] queries);
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection> LoadCollectionObjects(XPDictionaryStub dictionary, string refPropertyName, XPObjectStub ownerObject);
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> LoadObjects(XPDictionaryStub dictionary, ObjectStubsQuery[] queries);
    public sealed virtual PurgeResult Purge();
    public sealed virtual Object[][] SelectData(XPDictionaryStub dictionary, ObjectStubsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    public sealed virtual ISerializableObjectLayer get_ObjectLayer();
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToDelete();
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToSave();
    public sealed virtual String[] GetParentTouchedClassInfos();
    public sealed virtual bool IsParentObjectToDelete(XPDictionaryStub dictionary, XPObjectStub theObject);
    public sealed virtual bool IsParentObjectToSave(XPDictionaryStub dictionary, XPObjectStub theObject);
    public sealed virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStubCollection objects, string property);
    public sealed virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStub theObject, String[] props);
}
public abstract class DevExpress.Xpo.DB.SerializableObjectLayerProxyBase : object {
    [DescriptionAttribute("Obtains the value from the SerializableObjectLayer.CanLoadCollectionObjects property of an object layer instance returned by the SerializableObjectLayerProxyBase.GetObjectLayer method implementation.")]
[BrowsableAttribute("False")]
public bool CanLoadCollectionObjects { get; }
    [DescriptionAttribute("Obtains the value from the SerializableObjectLayer.ObjectLayer property of an object layer instance returned by the SerializableObjectLayerProxyBase.GetObjectLayer method implementation.")]
[BrowsableAttribute("False")]
public ISerializableObjectLayer ObjectLayer { get; }
    protected abstract virtual SerializableObjectLayer GetObjectLayer();
    public virtual bool get_CanLoadCollectionObjects();
    public virtual CommitObjectStubsResult[] CommitObjects(XPDictionaryStub dictionary, XPObjectStubCollection objectsForDelete, XPObjectStubCollection objectsForSave, LockingOption lockingOption);
    public virtual void CreateObjectType(string assemblyName, string typeName);
    public virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> GetObjectsByKey(XPDictionaryStub dictionary, GetObjectStubsByKeyQuery[] queries);
    public virtual SerializableObjectLayerResult`1<XPObjectStubCollection> LoadCollectionObjects(XPDictionaryStub dictionary, string refPropertyName, XPObjectStub ownerObject);
    public virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> LoadObjects(XPDictionaryStub dictionary, ObjectStubsQuery[] queries);
    public virtual PurgeResult Purge();
    public virtual Object[][] SelectData(XPDictionaryStub dictionary, ObjectStubsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    public virtual ISerializableObjectLayer get_ObjectLayer();
    public virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToDelete();
    public virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToSave();
    public virtual String[] GetParentTouchedClassInfos();
    public virtual bool IsParentObjectToDelete(XPDictionaryStub dictionary, XPObjectStub theObject);
    public virtual bool IsParentObjectToSave(XPDictionaryStub dictionary, XPObjectStub theObject);
    public virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStubCollection objects, string property);
    public virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStub theObject, String[] props);
    public virtual object Do(string command, object args);
}
public class DevExpress.Xpo.DB.SerializableObjectLayerService : ServiceBase {
    private ISerializableObjectLayer serializableObjectLayer;
    [DescriptionAttribute("Returns a serializable object layer used to initialize the current SerializableObjectLayerService instance.")]
public ISerializableObjectLayer SerializableObjectLayer { get; }
    public SerializableObjectLayerService(ISerializableObjectLayer serializableObjectLayer);
    public ISerializableObjectLayer get_SerializableObjectLayer();
    public virtual OperationResult`1<bool> GetCanLoadCollectionObjects();
    public virtual OperationResult`1<CommitObjectStubsResult[]> CommitObjects(XPDictionaryStub dictionary, XPObjectStubCollection objectsForDelete, XPObjectStubCollection objectsForSave, LockingOption lockingOption);
    public virtual OperationResult`1<object> CreateObjectType(string assemblyName, string typeName);
    public virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection[]>> GetObjectsByKey(XPDictionaryStub dictionary, GetObjectStubsByKeyQuery[] queries);
    public virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection>> LoadCollectionObjects(XPDictionaryStub dictionary, string refPropertyName, XPObjectStub ownerObject);
    public virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection[]>> LoadObjects(XPDictionaryStub dictionary, ObjectStubsQuery[] queries);
    public virtual OperationResult`1<PurgeResult> Purge();
    public virtual OperationResult`1<Object[][]> SelectData(XPDictionaryStub dictionary, ObjectStubsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    public virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection>> GetParentObjectsToDelete();
    public virtual OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection>> GetParentObjectsToSave();
    public virtual OperationResult`1<String[]> GetParentTouchedClassInfos();
    public virtual OperationResult`1<bool> IsParentObjectToDelete(XPDictionaryStub dictionary, XPObjectStub theObject);
    public virtual OperationResult`1<bool> IsParentObjectToSave(XPDictionaryStub dictionary, XPObjectStub theObject);
    public virtual OperationResult`1<SerializableObjectLayerResult`1<Object[]>> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStub theObject, String[] props);
    public virtual OperationResult`1<SerializableObjectLayerResult`1<Object[]>> LoadDelayedProperty(XPDictionaryStub dictionary, XPObjectStubCollection objects, string property);
    [CompilerGeneratedAttribute]
private bool <GetCanLoadCollectionObjects>b__4_0();
    [CompilerGeneratedAttribute]
private PurgeResult <Purge>b__10_0();
    [CompilerGeneratedAttribute]
private SerializableObjectLayerResult`1<XPObjectStubCollection> <GetParentObjectsToDelete>b__12_0();
    [CompilerGeneratedAttribute]
private SerializableObjectLayerResult`1<XPObjectStubCollection> <GetParentObjectsToSave>b__13_0();
    [CompilerGeneratedAttribute]
private String[] <GetParentTouchedClassInfos>b__14_0();
}
public class DevExpress.Xpo.DB.SerializableObjectLayerServiceClient : SerializableObjectLayerServiceClientBase`1<ISerializableObjectLayerService> {
    private bool needCustomChannel;
    public SerializableObjectLayerServiceClient(string configName);
    public SerializableObjectLayerServiceClient(Binding binding, EndpointAddress remoteAddress);
    protected virtual ISerializableObjectLayerService CreateChannel();
}
public class DevExpress.Xpo.DB.SerializableObjectLayerServiceClientBase`1 : ClientBase`1<IContractType> {
    [CompilerGeneratedAttribute]
private ClientChannelCreatedHandler ClientChannelCreated;
    [CompilerGeneratedAttribute]
private static ClientChannelCreatedHandler GlobalObjectClientChannelCreated;
    private IContractType channel;
    protected IContractType Channel { get; }
    public bool CanLoadCollectionObjects { get; }
    [DescriptionAttribute("")]
public ISerializableObjectLayer ObjectLayer { get; }
    public SerializableObjectLayerServiceClientBase`1(string configName);
    public SerializableObjectLayerServiceClientBase`1(Binding binding, EndpointAddress remoteAddress);
    [CompilerGeneratedAttribute]
public void add_ClientChannelCreated(ClientChannelCreatedHandler value);
    [CompilerGeneratedAttribute]
public void remove_ClientChannelCreated(ClientChannelCreatedHandler value);
    [CompilerGeneratedAttribute]
public static void add_GlobalObjectClientChannelCreated(ClientChannelCreatedHandler value);
    [CompilerGeneratedAttribute]
public static void remove_GlobalObjectClientChannelCreated(ClientChannelCreatedHandler value);
    protected virtual void OnClientChannelCreated(object channel);
    protected IContractType get_Channel();
    public sealed virtual bool get_CanLoadCollectionObjects();
    public sealed virtual CommitObjectStubsResult[] CommitObjects(XPDictionaryStub dictionary, XPObjectStubCollection objectsForDelete, XPObjectStubCollection objectsForSave, LockingOption lockingOption);
    public sealed virtual void CreateObjectType(string assemblyName, string typeName);
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> GetObjectsByKey(XPDictionaryStub dictionary, GetObjectStubsByKeyQuery[] queries);
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection> LoadCollectionObjects(XPDictionaryStub dictionary, string refPropertyName, XPObjectStub ownerObject);
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> LoadObjects(XPDictionaryStub dictionary, ObjectStubsQuery[] queries);
    public sealed virtual PurgeResult Purge();
    public sealed virtual Object[][] SelectData(XPDictionaryStub dictionary, ObjectStubsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    public sealed virtual ISerializableObjectLayer get_ObjectLayer();
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToDelete();
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToSave();
    public sealed virtual String[] GetParentTouchedClassInfos();
    public sealed virtual bool IsParentObjectToDelete(XPDictionaryStub dictionary, XPObjectStub theObject);
    public sealed virtual bool IsParentObjectToSave(XPDictionaryStub dictionary, XPObjectStub theObject);
    public sealed virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStubCollection objects, string property);
    public sealed virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStub theObject, String[] props);
    public OperationResult`1<R> ExecuteClient(OperationResultChannelPredicate`1<R> predicate);
    public OperationResult`1<R> ExecuteClient(OperationResultChannelPredicate`1<R> predicate, Func`2<Exception, bool> exceptionHandler);
    protected virtual bool HandleModifyDataException(Exception ex);
    protected virtual bool HandleSelectDataException(Exception ex);
    [CompilerGeneratedAttribute]
private OperationResult`1<bool> <get_CanLoadCollectionObjects>b__13_0();
    [CompilerGeneratedAttribute]
private OperationResult`1<PurgeResult> <Purge>b__19_0();
    [CompilerGeneratedAttribute]
private OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection>> <GetParentObjectsToDelete>b__23_0();
    [CompilerGeneratedAttribute]
private OperationResult`1<SerializableObjectLayerResult`1<XPObjectStubCollection>> <GetParentObjectsToSave>b__24_0();
    [CompilerGeneratedAttribute]
private OperationResult`1<String[]> <GetParentTouchedClassInfos>b__25_0();
}
public class DevExpress.Xpo.DB.ServiceBase : object {
    [CompilerGeneratedAttribute]
private static ServiceExceptionHandler GlobalServiceExceptionThrown;
    [CompilerGeneratedAttribute]
private ServiceExceptionHandler ServiceExceptionThrown;
    [CompilerGeneratedAttribute]
public static void add_GlobalServiceExceptionThrown(ServiceExceptionHandler value);
    [CompilerGeneratedAttribute]
public static void remove_GlobalServiceExceptionThrown(ServiceExceptionHandler value);
    [CompilerGeneratedAttribute]
public void add_ServiceExceptionThrown(ServiceExceptionHandler value);
    [CompilerGeneratedAttribute]
public void remove_ServiceExceptionThrown(ServiceExceptionHandler value);
    protected virtual void OnServiceExceptionThrown(Exception ex);
    protected OperationResult`1<T> Execute(OperationResultPredicate`1<T> predicate);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.ServiceBase/<ExecuteAsync>d__8`1")]
protected Task`1<OperationResult`1<T>> ExecuteAsync(Task`1<T> resultAwaiter);
    protected OperationResult`1<T> WrapException(Exception ex);
}
public enum DevExpress.Xpo.DB.ServiceException : Enum {
    public int value__;
    public static ServiceException None;
    public static ServiceException Unknown;
    public static ServiceException Schema;
    public static ServiceException NotSupported;
    public static ServiceException Locking;
    public static ServiceException ObjectLayerSecurity;
}
public class DevExpress.Xpo.DB.ServiceExceptionEventArgs : EventArgs {
    private Exception exception;
    public Exception Exception { get; }
    public ServiceExceptionEventArgs(Exception exception);
    public Exception get_Exception();
}
public class DevExpress.Xpo.DB.ServiceExceptionHandler : MulticastDelegate {
    public ServiceExceptionHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ServiceExceptionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ServiceExceptionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.DB.SQLiteConnectionProvider : ConnectionProviderSql {
    public static string XpoProviderTypeString;
    private ReflectConnectionHelper helper;
    private DbTypeMapperBase dbTypeMapper;
    public static int MaximumStringSize;
    private static string SystemSQLiteAssemblyName;
    private static string MicrosoftSQLiteAssemblyName;
    private static SQLiteAssemblyInfo[] assemblyNames;
    private int providerAssemblyIndex;
    private static int assemblyNameFoundIndex;
    private static Char[] achtungChars;
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    protected CommandPoolBehavior CommandPoolBehavior { get; }
    private SQLiteAssemblyInfo ProviderAssemblyInfo { get; }
    public bool NativeSkipTakeSupported { get; }
    public bool BraceJoin { get; }
    private static SQLiteConnectionProvider();
    public SQLiteConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    public static string GetConnectionString(string database);
    public static string GetConnectionString(string database, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static void Register();
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForTimeOnly(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column, bool forTableCreate);
    protected virtual object ReformatReadValue(object value, ReformatReadValueArgs args);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    protected virtual bool IsConnectionBroken(Exception e);
    protected virtual CommandPoolBehavior get_CommandPoolBehavior();
    protected virtual long GetIdentity(Query sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.SQLiteConnectionProvider/<GetIdentityAsync>d__45")]
protected virtual Task`1<long> GetIdentityAsync(Query sql, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual IDbConnection CreateConnection();
    private SQLiteAssemblyInfo get_ProviderAssemblyInfo();
    public static IDbConnection CreateConnection(string connectionString);
    protected virtual void CreateDataBase();
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    private SelectStatementResult GetDataForTables(ICollection tables, TablesFilter filter, string queryText);
    private DBColumnType GetTypeFromString(string typeName, Int32& size);
    private void GetColumns(DBTable table);
    private bool TryParseDbDecimal(string decimalValueString, Decimal& outValue);
    public virtual void CreatePrimaryKey(DBTable table);
    private void GetPrimaryKey(DBTable table);
    private void GetIndexes(DBTable table);
    public virtual void CreateForeignKey(DBTable table, DBForeignKey fk);
    private void GetForeignKeys(DBTable table);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    public virtual void CreateTable(DBTable table);
    protected virtual int GetSafeNameTableMaxLength();
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FormatFunctionDateOnly(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    private string FormatFunctionTimeOnly(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual bool get_NativeSkipTakeSupported();
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual bool get_BraceJoin();
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    protected string FormatString(object value);
    public virtual string FormatConstraint(string constraintName);
    protected string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected virtual SelectedData ExecuteSproc(string sprocName, OperandValue[] parameters);
    protected virtual Task`1<SelectedData> ExecuteSprocAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual DBStoredProcedure[] GetStoredProcedures();
}
public class DevExpress.Xpo.DB.SQLiteProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.VistaDB5ConnectionProvider : VistaDBConnectionProviderBase {
    public static string XpoProviderTypeString;
    public bool NativeSkipTakeSupported { get; }
    private static VistaDB5ConnectionProvider();
    public VistaDB5ConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static string GetConnectionString(string database);
    public static string GetConnectionString(string database, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static IDbConnection CreateConnection(string connectionString);
    public static void Register();
    protected virtual IDbConnection CreateConnection();
    public virtual bool get_NativeSkipTakeSupported();
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    protected virtual string FormatConstant(object value);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    private DBColumn CreateColumnFromSchemaDataRow(DataRow dataRow);
    private DBColumnType GetDBColumnType(string columnType, short size);
    protected virtual DbTypeMapperBase CreateDbTypeMapper(Type vistaDbTypeEnumType, Type vistaDbParameterType);
}
public class DevExpress.Xpo.DB.VistaDB5ProviderFactory : VistaDBProviderFactory {
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public string DisplayName { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual string get_ProviderKey();
    public virtual string get_FileFilter();
    public virtual string get_DisplayName();
}
public class DevExpress.Xpo.DB.VistaDB6ConnectionProvider : VistaDBConnectionProviderBase {
    public static string XpoProviderTypeString;
    public bool NativeSkipTakeSupported { get; }
    private static VistaDB6ConnectionProvider();
    public VistaDB6ConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static string GetConnectionString(string database);
    public static string GetConnectionString(string database, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static IDbConnection CreateConnection(string connectionString);
    public static void Register();
    protected virtual IDbConnection CreateConnection();
    public virtual bool get_NativeSkipTakeSupported();
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int skipSelectedRecords, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    protected virtual string FormatConstant(object value);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    private DBColumn CreateColumnFromSchemaDataRow(DataRow dataRow);
    private DBColumnType GetDBColumnType(string columnType, short size);
    protected virtual DbTypeMapperBase CreateDbTypeMapper(Type vistaDbTypeEnumType, Type vistaDbParameterType);
}
public class DevExpress.Xpo.DB.VistaDB6ProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public string DisplayName { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_ProviderKey();
    public virtual string get_FileFilter();
    public virtual string get_DisplayName();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.VistaDBConnectionProvider : VistaDBConnectionProviderBase {
    public static string XpoProviderTypeString;
    private static VistaDBConnectionProvider();
    public VistaDBConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static string GetConnectionString(string database);
    public static string GetConnectionString(string database, string password);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static IDbConnection CreateConnection(string connectionString);
    public static void Register();
    protected virtual IDbConnection CreateConnection();
    protected virtual DbTypeMapperBase CreateDbTypeMapper(Type vistaDbTypeEnumType, Type vistaDbParameterType);
}
public abstract class DevExpress.Xpo.DB.VistaDBConnectionProviderBase : ConnectionProviderSql {
    private static string VistaDBExclusiveReadWriteString;
    private static string VistaDBNonexclusiveReadWriteString;
    private static string VistaDBSingleProcessReadWriteString;
    private static string VistaDBSingleProcessReadOnlyString;
    private static string VistaDBMultiProcessReadWriteString;
    private static string VistaDBMultiProcessReadOnlyString;
    protected static string VistaDB4AssemblyName;
    protected static string VistaDB5AssemblyName;
    protected static string VistaDB6AssemblyName;
    private ReflectConnectionHelper helper;
    private DbTypeMapperBase dbTypeMapper;
    private static ConcurrentDictionary`2<Type, XPVistaDBDA> engineDictionary;
    private XPVistaDBDatabase fDataBase;
    private bool inSchemaUpdate;
    private static Char[] achtungChars;
    private ReflectConnectionHelper ConnectionHelper { get; }
    protected DbTypeMapperBase DbTypeMapper { get; }
    public bool BraceJoin { get; }
    private XPVistaDBDatabase DataBase { get; }
    protected string MaxStringDataType { get; }
    protected string MaxBinaryDataType { get; }
    protected string SingleDataType { get; }
    protected int MaxStringSize { get; }
    protected int MaxBinarySize { get; }
    protected bool NeedsIndexForForeignKey { get; }
    public VistaDBConnectionProviderBase(IDbConnection connection, AutoCreateOption autoCreateOption);
    private static VistaDBConnectionProviderBase();
    internal static IDataStore CreateProviderFromConnectionSelector(IDbConnection connection, AutoCreateOption autoCreateOption);
    private ReflectConnectionHelper get_ConnectionHelper();
    protected virtual DbTypeMapperBase get_DbTypeMapper();
    protected abstract virtual DbTypeMapperBase CreateDbTypeMapper(Type vistaDbTypeEnumType, Type vistaDbParameterType);
    private static XPVistaDBDA GetEngine(Type connectionType);
    protected virtual string GetSqlCreateColumnTypeForBoolean(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSByte(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForChar(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDecimal(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDouble(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForSingle(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt32(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt16(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForUInt64(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForString(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForDateTime(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForGuid(DBTable table, DBColumn column);
    protected virtual string GetSqlCreateColumnTypeForByteArray(DBTable table, DBColumn column);
    public virtual string GetSqlCreateColumnFullAttributes(DBTable table, DBColumn column);
    protected virtual object ConvertToDbParameter(object clientValue, TypeCode clientValueTypeCode);
    public virtual bool get_BraceJoin();
    protected virtual long GetIdentity(InsertStatement root, TaggedParametersHolder identitiesByTag);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.VistaDBConnectionProviderBase/<GetIdentityAsync>d__42")]
protected virtual Task`1<long> GetIdentityAsync(InsertStatement root, TaggedParametersHolder identitiesByTag, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    protected virtual IDataParameter CreateParameter(IDbCommand command, object value, string name, DBColumnType dbType, string dbTypeName, int size);
    protected virtual Exception WrapException(Exception e, IDbCommand query);
    protected virtual void OpenConnectionInternal();
    private XPVistaDBDatabase get_DataBase();
    protected virtual void CreateDataBase();
    protected virtual void BeginTransactionCore(object il);
    protected virtual void CommitTransactionCore();
    protected virtual void RollbackTransactionCore();
    protected virtual UpdateSchemaResult ProcessUpdateSchema(bool skipIfFirstTableNotExists, DBTable[] tables);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.VistaDBConnectionProviderBase/<ProcessUpdateSchemaAsync>d__55")]
protected virtual Task`1<UpdateSchemaResult> ProcessUpdateSchemaAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool skipIfFirstTableNotExists, DBTable[] tables);
    private void CloseDatabase();
    protected virtual string get_MaxStringDataType();
    protected virtual string get_MaxBinaryDataType();
    protected virtual string get_SingleDataType();
    protected virtual int get_MaxStringSize();
    protected virtual int get_MaxBinarySize();
    protected string GetDBTypeString(DBColumn column, Int16& size);
    public virtual void CreateTable(DBTable table);
    public virtual void CreateColumn(DBTable table, DBColumn column);
    private XPVistaDBColumnAttributes AddColumnToTableSchema(DBTable table, DBColumn column, XPVistaDBTableSchema vistaTableSchema);
    public virtual void CreateIndex(DBTable table, DBIndex index);
    public virtual void CreatePrimaryKey(DBTable table);
    public virtual void CreateForeignKey(DBTable table, DBForeignKey fk);
    private void GetColumns(DBTable table, XPVistaDBTableSchema vtable);
    private void GetPrimaryKey(DBTable table, XPVistaDBTableSchema vtable);
    private void GetIndexes(DBTable table, XPVistaDBTableSchema vtable);
    private void GetForeignKeys(DBTable table, XPVistaDBTableSchema vtable);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    public virtual ICollection CollectTablesToCreate(ICollection tables);
    protected virtual bool get_NeedsIndexForForeignKey();
    public virtual string FormatTable(string schema, string tableName);
    public virtual string FormatTable(string schema, string tableName, string tableAlias);
    public virtual string FormatColumn(string columnName);
    public virtual string FormatColumn(string columnName, string tableAlias);
    public virtual string FormatSelect(string selectedPropertiesSql, string fromSql, string whereSql, string orderBySql, string groupBySql, string havingSql, int topSelectedRecords);
    public virtual string FormatInsertDefaultValues(string tableName);
    public virtual string FormatInsert(string tableName, string fields, string values);
    public virtual string FormatUpdate(string tableName, string sets, string whereClause);
    public virtual string FormatDelete(string tableName, string whereClause);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
    public virtual string FormatFunction(ProcessParameter processParameter, FunctionOperatorType operatorType, Object[] operands);
    public virtual string FormatBinary(BinaryOperatorType operatorType, string leftOperand, string rightOperand);
    public virtual string GetParameterName(OperandValue parameter, int index, Boolean& createParameter);
    private string FormatString(object value);
    public virtual string FormatConstraint(string constraintName);
    protected virtual string FormatConstant(object value);
    private string FixNonFixedText(string toFix);
    protected virtual int GetSafeNameTableMaxLength();
    protected virtual void ProcessClearDatabase();
    public virtual String[] GetStorageTablesList(bool includeViews);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    public virtual DBStoredProcedure[] GetStoredProcedures();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<UpdateSchemaResult> <>n__0(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
}
public class DevExpress.Xpo.DB.VistaDBProviderFactory : ProviderFactory {
    public bool HasUserName { get; }
    public bool HasPassword { get; }
    public bool HasIntegratedSecurity { get; }
    public bool HasMultipleDatabases { get; }
    public bool IsServerbased { get; }
    public bool IsFilebased { get; }
    public string ProviderKey { get; }
    public string FileFilter { get; }
    public string DisplayName { get; }
    public bool MeanSchemaGeneration { get; }
    public virtual IDataStore CreateProviderFromConnection(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual string GetConnectionString(Dictionary`2<string, string> parameters);
    public virtual IDataStore CreateProvider(Dictionary`2<string, string> parameters, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public virtual bool get_HasUserName();
    public virtual bool get_HasPassword();
    public virtual bool get_HasIntegratedSecurity();
    public virtual bool get_HasMultipleDatabases();
    public virtual bool get_IsServerbased();
    public virtual bool get_IsFilebased();
    public virtual string get_ProviderKey();
    public virtual String[] GetDatabases(string server, string userId, string password);
    public virtual string get_FileFilter();
    public virtual string get_DisplayName();
    public virtual bool get_MeanSchemaGeneration();
}
public class DevExpress.Xpo.DB.WebApiDataStoreClient : object {
    public static string XpoProviderTypeString;
    private static string UriPartName;
    [EditorBrowsableAttribute("1")]
public static bool IgnoreIllegalXmlCharacters;
    private AutoCreateOption autoCreateOption;
    private HttpClient httpClient;
    private IWebApiDataFormatter fFormatter;
    private HttpClientHelper httpHelper;
    private AutoCreateOption DevExpress.Xpo.DB.IDataStore.AutoCreateOption { get; }
    public HttpClient HttpClient { get; }
    protected IWebApiDataFormatter Formatter { get; }
    protected HttpClientHelper HttpHelper { get; }
    public WebApiDataStoreClient(HttpClient httpClient, AutoCreateOption autoCreateOption);
    private static WebApiDataStoreClient();
    public static string GetConnectionString(string url);
    public static IDataStore CreateProviderFromString(string connectionString, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    public static void Register();
    private sealed virtual override AutoCreateOption DevExpress.Xpo.DB.IDataStore.get_AutoCreateOption();
    public HttpClient get_HttpClient();
    protected IWebApiDataFormatter get_Formatter();
    protected HttpClientHelper get_HttpHelper();
    protected virtual IWebApiDataFormatter CreateDataFormatter();
    private sealed virtual override UpdateSchemaResult DevExpress.Xpo.DB.IDataStore.UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    private sealed virtual override SelectedData DevExpress.Xpo.DB.IDataStore.SelectData(SelectStatement[] selects);
    private sealed virtual override ModificationResult DevExpress.Xpo.DB.IDataStore.ModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.WebApiDataStoreClient/<DevExpress-Xpo-DB-IDataStoreAsync-SelectDataAsync>d__24")]
private sealed virtual override Task`1<SelectedData> DevExpress.Xpo.DB.IDataStoreAsync.SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.WebApiDataStoreClient/<DevExpress-Xpo-DB-IDataStoreAsync-ModifyDataAsync>d__25")]
private sealed virtual override Task`1<ModificationResult> DevExpress.Xpo.DB.IDataStoreAsync.ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.WebApiDataStoreClient/<DevExpress-Xpo-DB-IDataStoreAsync-UpdateSchemaAsync>d__26")]
private sealed virtual override Task`1<UpdateSchemaResult> DevExpress.Xpo.DB.IDataStoreAsync.UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public sealed virtual DataCacheUpdateSchemaResult UpdateSchema(DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    public sealed virtual DataCacheSelectDataResult SelectData(DataCacheCookie cookie, SelectStatement[] selects);
    public sealed virtual DataCacheModificationResult ModifyData(DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    public sealed virtual DataCacheResult ProcessCookie(DataCacheCookie cookie);
    public sealed virtual DataCacheResult NotifyDirtyTables(DataCacheCookie cookie, String[] dirtyTablesNames);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.WebApiDataStoreClient/<UpdateSchemaAsync>d__32")]
public sealed virtual Task`1<DataCacheUpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, DataCacheCookie cookie, DBTable[] tables, bool doNotCreateIfFirstTableNotExist);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.WebApiDataStoreClient/<SelectDataAsync>d__33")]
public sealed virtual Task`1<DataCacheSelectDataResult> SelectDataAsync(CancellationToken cancellationToken, DataCacheCookie cookie, SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.WebApiDataStoreClient/<ModifyDataAsync>d__34")]
public sealed virtual Task`1<DataCacheModificationResult> ModifyDataAsync(CancellationToken cancellationToken, DataCacheCookie cookie, ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.WebApiDataStoreClient/<ProcessCookieAsync>d__35")]
public sealed virtual Task`1<DataCacheResult> ProcessCookieAsync(CancellationToken cancellationToken, DataCacheCookie cookie);
    [AsyncStateMachineAttribute("DevExpress.Xpo.DB.WebApiDataStoreClient/<NotifyDirtyTablesAsync>d__36")]
public sealed virtual Task`1<DataCacheResult> NotifyDirtyTablesAsync(CancellationToken cancellationToken, DataCacheCookie cookie, String[] dirtyTablesNames);
}
public class DevExpress.Xpo.DB.WebApiDataStoreService : ServiceBase {
    private IDataStore Inner;
    public WebApiDataStoreService(IDataStore inner);
    private ICacheToCacheCommunicationCore GetDataCacheRoot();
    public OperationResult`1<ModificationResult> ModifyData(ModificationStatement[] dmlStatements);
    public Task`1<OperationResult`1<ModificationResult>> ModifyDataAsync(ModificationStatement[] dmlStatements, CancellationToken cancellationToken);
    public OperationResult`1<SelectedData> SelectData(SelectStatement[] selects);
    public Task`1<OperationResult`1<SelectedData>> SelectDataAsync(SelectStatement[] selects, CancellationToken cancellationToken);
    public OperationResult`1<UpdateSchemaResult> UpdateSchema(bool doNotCreateIfFirstTableNotExist, DBTable[] tables);
    public Task`1<OperationResult`1<UpdateSchemaResult>> UpdateSchemaAsync(bool doNotCreateIfFirstTableNotExist, DBTable[] tables, CancellationToken cancellationToken);
    public OperationResult`1<DataCacheModificationResult> ModifyDataWithCookie(WebApiDataContainer`1<ModificationStatement[]> data);
    public OperationResult`1<DataCacheSelectDataResult> SelectDataWithCookie(WebApiDataContainer`1<SelectStatement[]> data);
    public OperationResult`1<DataCacheUpdateSchemaResult> UpdateSchemaWithCookie(bool doNotCreateIfFirstTableNotExist, WebApiDataContainer`1<DBTable[]> data);
    public OperationResult`1<DataCacheResult> ProcessCookie(DataCacheCookie data);
    public OperationResult`1<DataCacheResult> NotifyDirtyTables(WebApiDataContainer`1<String[]> data);
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.DbTypeAttribute : Attribute {
    private string dbColumnTypeName;
    [DescriptionAttribute("Gets or sets the database type of the column which a property marked with DbTypeAttribute is mapped to.")]
public string DbColumnTypeName { get; public set; }
    public DbTypeAttribute(string dbColumnTypeName);
    private DbTypeAttribute(XmlNode attributeNode);
    public string get_DbColumnTypeName();
    public void set_DbColumnTypeName(string value);
}
public enum DevExpress.Xpo.DefaultMembersPersistence : Enum {
    public int value__;
    public static DefaultMembersPersistence Default;
    public static DefaultMembersPersistence OnlyDeclaredAsPersistent;
}
[AttributeUsageAttribute("4")]
public class DevExpress.Xpo.DefaultMembersPersistenceAttribute : Attribute {
    private DefaultMembersPersistence defaultPersistence;
    [DescriptionAttribute("Gets a value that determines which members are persistent by default.")]
public DefaultMembersPersistence DefaultMembersPersistence { get; }
    public DefaultMembersPersistenceAttribute(DefaultMembersPersistence defaultPersistence);
    private DefaultMembersPersistenceAttribute(XmlNode attributeNode);
    public DefaultMembersPersistence get_DefaultMembersPersistence();
}
[AttributeUsageAttribute("1028")]
public class DevExpress.Xpo.DeferredDeletionAttribute : Attribute {
    private bool enabled;
    [DescriptionAttribute("Gets or sets whether deferred object deletion is enabled.")]
public bool Enabled { get; public set; }
    public DeferredDeletionAttribute(bool enabled);
    private DeferredDeletionAttribute(XmlNode attributeNode);
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
[AttributeUsageAttribute("128")]
public class DevExpress.Xpo.DelayedAttribute : Attribute {
    private bool updateModifiedOnly;
    private string fieldName;
    private string groupName;
    [DescriptionAttribute("Gets the name of the field which stores the value of the delayed property.")]
public string FieldName { get; }
    [DescriptionAttribute("Gets the group’s name.")]
public string GroupName { get; }
    [DescriptionAttribute("Gets whether the delayed property stores all or only modified values to a data store.")]
public bool UpdateModifiedOnly { get; }
    private DelayedAttribute(XmlNode attributeNode);
    public DelayedAttribute(bool updateModifiedOnly);
    public DelayedAttribute(string fieldName);
    public DelayedAttribute(string fieldName, bool updateModifiedOnly);
    public DelayedAttribute(string fieldName, string groupName);
    public DelayedAttribute(string fieldName, string groupName, bool updateModifiedOnly);
    public string get_FieldName();
    public string get_GroupName();
    public bool get_UpdateModifiedOnly();
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.DisplayNameAttribute : Attribute {
    private string displayName;
    [DescriptionAttribute("Gets the member’s display name.")]
public string DisplayName { get; }
    private DisplayNameAttribute(XmlNode attributeNode);
    public DisplayNameAttribute(string displayName);
    public virtual string get_DisplayName();
}
public class DevExpress.Xpo.Exceptions.AssociationElementTypeMissingException : Exception {
    private string propertyName;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the name of the collection property that caused the current exception.")]
public string PropertyName { get; }
    public AssociationElementTypeMissingException(string propertyName);
    public string get_PropertyName();
}
public class DevExpress.Xpo.Exceptions.AssociationInvalidException : Exception {
    public AssociationInvalidException(string message);
}
public class DevExpress.Xpo.Exceptions.CannotChangePropertyWhenSessionIsConnectedException : Exception {
    public CannotChangePropertyWhenSessionIsConnectedException(string propertyName);
}
public class DevExpress.Xpo.Exceptions.CannotFindAppropriateConnectionProviderException : Exception {
    public CannotFindAppropriateConnectionProviderException(string connectionString);
}
public class DevExpress.Xpo.Exceptions.CannotLoadInvalidTypeException : Exception {
    private string typeName;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the name of the type that cannot be loaded.")]
public string TypeName { get; }
    public CannotLoadInvalidTypeException(string typeName);
    public string get_TypeName();
}
public class DevExpress.Xpo.Exceptions.CannotLoadObjectsException : Exception {
    public CannotLoadObjectsException(string objects);
}
[ObsoleteAttribute("Use CannotLoadObjectsException instead", "True")]
public class DevExpress.Xpo.Exceptions.CannotReloadPurgedObjectException : Exception {
}
public class DevExpress.Xpo.Exceptions.CannotResolveClassInfoException : Exception {
    private string typeName;
    private string assemblyName;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the name of the type whose XPClassInfo cannot be obtained.")]
public string TypeName { get; }
    private string AssemblyName { get; }
    public CannotResolveClassInfoException(string assemblyName, string typeName);
    public string get_TypeName();
    private string get_AssemblyName();
}
public class DevExpress.Xpo.Exceptions.DifferentObjectsWithSameKeyException : Exception {
}
public class DevExpress.Xpo.Exceptions.DuplicateKeyPropertyException : Exception {
    private string className;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the name of the persistent class in which the key property is declared twice.")]
public string ClassName { get; }
    public DuplicateKeyPropertyException(string className);
    public string get_ClassName();
}
public class DevExpress.Xpo.Exceptions.KeyPropertyAbsentException : Exception {
    private string className;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the string that specifies the class name.")]
public string ClassName { get; }
    public KeyPropertyAbsentException(string className);
    public string get_ClassName();
}
public class DevExpress.Xpo.Exceptions.KeysAutogenerationNonSupportedTypeException : Exception {
    private string typeName;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the string that specifies the object type name.")]
public string TypeName { get; }
    public KeysAutogenerationNonSupportedTypeException(string typeName);
    public string get_TypeName();
}
public class DevExpress.Xpo.Exceptions.MSSqlLocalDBApiException : InvalidOperationException {
    private Nullable`1<int> errorCode;
    public Nullable`1<int> ErrorCode { get; public set; }
    public MSSqlLocalDBApiException(string message);
    public MSSqlLocalDBApiException(string message, int errorCode);
    public MSSqlLocalDBApiException(string message, Exception innerException);
    public Nullable`1<int> get_ErrorCode();
    public void set_ErrorCode(Nullable`1<int> value);
}
public class DevExpress.Xpo.Exceptions.NonPersistentReferenceFoundException : Exception {
    private string objectType;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the name of the non-persistent object’s type which you are about to reference.")]
public string ObjectType { get; }
    public NonPersistentReferenceFoundException(string objectType);
    public string get_ObjectType();
}
public class DevExpress.Xpo.Exceptions.ObjectCacheException : Exception {
    private object obj;
    [DescriptionAttribute("Gets the object which is associated with the exception.")]
public object Object { get; }
    public ObjectCacheException(object id, object theObject, object oldObject);
    public object get_Object();
}
public class DevExpress.Xpo.Exceptions.ObjectLayerSecurityException : InvalidOperationException {
    private string typeName;
    private string propertyName;
    private bool isDeletion;
    public string TypeName { get; public set; }
    public string PropertyName { get; public set; }
    public bool IsDeletion { get; public set; }
    public ObjectLayerSecurityException(string typeName, bool isDeletion);
    public ObjectLayerSecurityException(string typeName, string propertyName);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public bool get_IsDeletion();
    public void set_IsDeletion(bool value);
}
public class DevExpress.Xpo.Exceptions.PropertyMissingException : Exception {
    private string objectType;
    private string propertyName;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the object type that doesn’t contain the DevExpress.Xpo.Exceptions.PropertyMissingException.PropertyName property.")]
public string ObjectType { get; }
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("")]
public string PropertyName { get; }
    public PropertyMissingException(string objectType, string propertyName);
    public string get_ObjectType();
    public string get_PropertyName();
}
[ObsoleteAttribute("Use AssociationInvalidException instead", "True")]
public class DevExpress.Xpo.Exceptions.PropertyTypeMismatchException : AssociationInvalidException {
    public PropertyTypeMismatchException(string message);
}
public class DevExpress.Xpo.Exceptions.RequiredAttributeMissingException : Exception {
    private string propertyName;
    private string attributeName;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the name of the property that is not marked with the specified attribute.")]
public string PropertyName { get; }
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the name of the attribute that is missing in the metadata.")]
public string AttributeName { get; }
    public RequiredAttributeMissingException(string propertyName, string attributeName);
    public string get_PropertyName();
    public string get_AttributeName();
}
public class DevExpress.Xpo.Exceptions.SameTableNameException : Exception {
    public SameTableNameException(XPClassInfo firstClass, XPClassInfo secondClass);
}
public class DevExpress.Xpo.Exceptions.SessionCtorAbsentException : Exception {
    private string objectType;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("Gets the name of the currently processed object type.")]
public string ObjectType { get; }
    public SessionCtorAbsentException(XPClassInfo classInfo);
    public string get_ObjectType();
}
public class DevExpress.Xpo.Exceptions.SessionMixingException : Exception {
    private Session session;
    private object obj;
    [DescriptionAttribute("Gets the current Session object.")]
public Session Session { get; }
    [DescriptionAttribute("Gets the persistent object which conflicts with the current session.")]
public object Object { get; }
    public SessionMixingException(Session session, object obj);
    public Session get_Session();
    public object get_Object();
}
public class DevExpress.Xpo.Exceptions.TransactionSequenceException : Exception {
    public TransactionSequenceException(string explanation);
}
public class DevExpress.Xpo.Exceptions.TypeFieldIsEmptyException : Exception {
    private string baseType;
    [ObsoleteAttribute("Use Message instead.", "False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DescriptionAttribute("For internal use.")]
public string BaseType { get; }
    public TypeFieldIsEmptyException(string baseType);
    public string get_BaseType();
}
public class DevExpress.Xpo.Exceptions.TypeNotFoundException : Exception {
    private int typeId;
    [DescriptionAttribute("Gets the object type identifier.")]
public int TypeId { get; public set; }
    public TypeNotFoundException(int typeId);
    public int get_TypeId();
    public void set_TypeId(int value);
}
public class DevExpress.Xpo.Exceptions.UnableToFillRefTypeException : Exception {
    private string objectName;
    private string memberName;
    [DescriptionAttribute("Gets the name of the object type that causes the exception.")]
public string ObjectName { get; public set; }
    [DescriptionAttribute("Gets the property name of the currently processed object.")]
public string MemberName { get; public set; }
    public UnableToFillRefTypeException(string objectName, string memberName, Exception innerException);
    public string get_ObjectName();
    public void set_ObjectName(string value);
    public string get_MemberName();
    public void set_MemberName(string value);
}
public class DevExpress.Xpo.Exceptions.XMLDictionaryException : Exception {
    public XMLDictionaryException(string message);
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.ExplicitLoadingAttribute : Attribute {
    private int depth;
    [DescriptionAttribute("Gets or sets the reference depth of the current class from the root class.")]
public int Depth { get; public set; }
    public ExplicitLoadingAttribute(int depth);
    private ExplicitLoadingAttribute(XmlNode attributeNode);
    public int get_Depth();
    public void set_Depth(int value);
}
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[ToolboxBitmapAttribute("DevExpress.Xpo.ExplicitUnitOfWork")]
public class DevExpress.Xpo.ExplicitUnitOfWork : UnitOfWork {
    private bool inTransaction;
    [DescriptionAttribute("Indicates whether the explicit unit of work has started a database level transaction or tracked data modifications.")]
public bool InTransaction { get; }
    protected bool IsInTransactionMode { get; }
    public ExplicitUnitOfWork(IServiceProvider serviceProvider);
    public ExplicitUnitOfWork(IContainer container);
    public ExplicitUnitOfWork(IServiceProvider serviceProvider, IContainer container);
    public ExplicitUnitOfWork(XPDictionary dictionary);
    public ExplicitUnitOfWork(IServiceProvider serviceProvider, XPDictionary dictionary);
    public ExplicitUnitOfWork(IDataLayer layer, IDisposable[] disposeOnDisconnect);
    public ExplicitUnitOfWork(IServiceProvider serviceProvider, IDataLayer layer, IDisposable[] disposeOnDisconnect);
    public ExplicitUnitOfWork(IObjectLayer layer, IDisposable[] disposeOnDisconnect);
    public ExplicitUnitOfWork(IServiceProvider serviceProvider, IObjectLayer layer, IDisposable[] disposeOnDisconnect);
    public virtual bool get_InTransaction();
    public virtual void BeginTransaction();
    public virtual void RollbackTransaction();
    public Task RollbackTransactionAsync(CancellationToken cancellationToken);
    public virtual void CommitTransaction();
    public virtual Task CommitTransactionAsync(CancellationToken cancellationToken);
    public virtual object CommitTransactionAsync(AsyncCommitCallback callback);
    protected virtual bool get_IsInTransactionMode();
    protected virtual void OnBeforeBeginTrackingChanges();
    protected virtual void OnAfterBeginTrackingChanges();
    protected virtual void OnBeforeFlushChanges();
    protected virtual void OnAfterFlushChanges();
    protected virtual void OnBeforeDropChanges();
    protected virtual void OnAfterDropChanges();
    protected virtual bool OnFailedFlushChanges(Exception ex);
    protected virtual IList BeginFlushChanges();
    protected virtual Task`1<IList> BeginFlushChangesAsync(int asyncOperationId, CancellationToken cancellationToken);
    internal virtual List`1<Object[]> SelectDataInternal(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    [AsyncStateMachineAttribute("DevExpress.Xpo.ExplicitUnitOfWork/<SelectDataInternalAsync>d__31")]
internal virtual Task`1<List`1<Object[]>> SelectDataInternalAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    internal virtual object SelectDataInternalAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, AsyncSelectDataCallback callback);
    internal virtual ICollection[] GetObjectsInternal(ObjectsQuery[] queries);
    [AsyncStateMachineAttribute("DevExpress.Xpo.ExplicitUnitOfWork/<GetObjectsInternalAsync>d__34")]
internal virtual Task`1<ICollection[]> GetObjectsInternalAsync(ObjectsQuery[] queries, CancellationToken cancellationToken);
    internal virtual object GetObjectsInternalAsync(ObjectsQuery[] queries, AsyncLoadObjectsCallback callback);
    private bool IsFlushRequired(ObjectsQuery[] queries);
    [CompilerGeneratedAttribute]
private void <BeginTransaction>b__13_0();
    [CompilerGeneratedAttribute]
private LogMessage <BeginTransaction>b__13_1(TimeSpan d);
    [CompilerGeneratedAttribute]
private void <RollbackTransaction>b__14_0();
    [CompilerGeneratedAttribute]
private LogMessage <RollbackTransaction>b__14_1(TimeSpan d);
    [CompilerGeneratedAttribute]
private void <CommitTransaction>b__16_0();
    [CompilerGeneratedAttribute]
private LogMessage <CommitTransaction>b__16_1(TimeSpan d);
    [CompilerGeneratedAttribute]
private bool <CommitTransaction>b__16_2(Exception ex);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ICollection[]> <>n__0(ObjectsQuery[] queries, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.FetchOnlyAttribute : Attribute {
    private FetchOnlyAttribute(XmlNode attributeNode);
}
public abstract class DevExpress.Xpo.Generators.BaseObjectQueryGenerator : BaseQueryGenerator {
    protected object theObject;
    protected MemberInfoCollection properties;
    protected BatchWideDataHolder4Modification BatchWideData { get; }
    protected BaseObjectQueryGenerator(XPDictionary dictionary, BatchWideDataHolder4Modification batchWideData, object theObject);
    protected BaseObjectQueryGenerator(XPClassInfo classInfo, BatchWideDataHolder4Modification batchWideData);
    protected BatchWideDataHolder4Modification get_BatchWideData();
    protected List`1<ModificationStatement> GenerateSql(ObjectGeneratorCriteriaSet criteriaSet, MemberInfoCollection properties);
    protected List`1<ModificationStatement> GenerateSql(ObjectGeneratorCriteriaSet criteriaSet, MemberInfoCollection properties, bool reverse);
    protected List`1<XPClassInfo> GetClasses();
    private OperandValue GetMemberParameter(XPMemberInfo member, object theObject);
    protected virtual bool ShoudPersist(XPMemberInfo member);
    protected virtual void AddParameter(OperandValue parameter);
    protected void BuildFieldList();
    protected static CriteriaOperator BuildKeyCriteria(XPDictionary dictionary, object theObject);
    protected virtual void InitData();
}
public abstract class DevExpress.Xpo.Generators.BaseQueryGenerator : object {
    private Dictionary`2<string, Dictionary`2<DBTable, JoinNode>> inheritanceSubNodes;
    private Dictionary`2<string, Dictionary`2<string, JoinNode>> referenceSubNodes;
    private Dictionary`2<string, Dictionary`2<string, JoinNode>> reverseSubNodes;
    private Dictionary`2<string, Dictionary`2<SingleAggregateItem, JoinNode>> singleAggregateSubNodes;
    private Dictionary`2<string, JoinNode> nakedSingleNodes;
    private Dictionary`2<string, JoinNode> projectedSingleNodes;
    private Dictionary`2<string, ProjectionNodeItem> projectionNodes;
    private Dictionary`2<CriteriaOperator, PropertyAlias> multiColumnAliases;
    private int singleNesting;
    private int indexCount;
    private Stack`1<XPClassInfo> classInfoStack;
    private Stack`1<JoinNode> nodeStack;
    private HashSet`1<string> nodeStackHashSet;
    private XPClassInfo classInfo;
    private JoinNode rootNode;
    private BaseStatement root;
    private QueryParameterCollection queryParameters;
    protected BatchWideDataHolder BatchWideData;
    private CollectionCriteriaPatcher collectionCriteriaPatcher;
    private static String[] nodeAliasCache;
    protected JoinType currentJoinType;
    protected GroupOperatorType currentLeftJoinEnforcer;
    public Stack`1<XPClassInfo> ClassInfoStack { get; }
    public Stack`1<JoinNode> NodeStack { get; }
    public HashSet`1<string> NodeStackHashSet { get; }
    public XPClassInfo ClassInfo { get; public set; }
    protected XPDictionary Dictionary { get; }
    protected BaseStatement Root { get; }
    protected bool IsGrouped { get; }
    protected BaseQueryGenerator(XPClassInfo objectInfo, BatchWideDataHolder batchWideData);
    protected BaseQueryGenerator(XPClassInfo objectInfo, BatchWideDataHolder batchWideData, CollectionCriteriaPatcher collectionCriteriaPatcher);
    private static BaseQueryGenerator();
    public Stack`1<XPClassInfo> get_ClassInfoStack();
    public Stack`1<JoinNode> get_NodeStack();
    public HashSet`1<string> get_NodeStackHashSet();
    protected QueryOperand CreateOperand(XPMemberInfo member, string nodeAlias);
    protected QueryOperand CreateOperand(string mappingField, string nodeAlias);
    private CriteriaOperator GetJoinCondition(string leftAlias, string rightAlias, XPMemberInfo leftMember, XPMemberInfo rightMember);
    public void TryAddNodeIntoProjection(JoinNode prevnode, JoinNode node);
    private JoinNode AppendInheritanceJoinNode(XPClassInfo branch, XPMemberInfo property, JoinNode prevnode);
    private static void SetJoinTypeWithSubNodes(JoinNode node, JoinType type);
    private JoinNode AppendJoinNode(XPMemberInfo property, JoinNode prevnode, JoinType type);
    private JoinNode AppendReverseJoinNode(XPMemberInfo property, JoinNode prevnode, JoinType type);
    private JoinNode AppendSingleAggregateJoinNode(XPClassInfo ci, XPMemberInfo collectionProperty, CriteriaOperator condition, JoinNode prevnode, JoinType type);
    private JoinNode AppendSingleAggregateManyToManyJoinNode(XPClassInfo ci, XPMemberInfo firstProperty, XPMemberInfo secondProperty, XPMemberInfo collectionProperty, CriteriaOperator condition, JoinNode prevNode, JoinType type);
    protected abstract virtual BaseStatement CreateRootStatement(DBTable table, string alias);
    protected virtual void InitData();
    protected CriteriaOperator Process(CriteriaOperator operand);
    protected BaseStatement GenerateSql(CriteriaOperator criteria);
    protected void BuildAssociationTree(CriteriaOperator criteria);
    public XPClassInfo get_ClassInfo();
    public void set_ClassInfo(XPClassInfo value);
    protected XPDictionary get_Dictionary();
    protected BaseStatement get_Root();
    protected internal virtual string GetNextNodeAlias();
    protected PropertyAlias GetPropertyNode(MemberInfoCollection propertyPath, JoinType type);
    protected abstract virtual void InternalGenerateSql(CriteriaOperator criteria);
    public bool ConvertViaDefaultValueConverter(Object& operandValue);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandValue theOperand);
    protected internal virtual PropertyAlias GetPropertyNode(OperandProperty property, JoinType type);
    protected CriteriaOperator ExecuteWithPropertyNameDiving(string propertyName, Func`2<string, CriteriaOperator> worker, bool throwOnEmptyStack);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandProperty theOperand);
    private QuerySubQueryContainer ProcessSubSelectOperator(string joinTypeName, CriteriaOperator operandClause, CriteriaOperator aggregateProperty, Aggregate aggregateType);
    private QuerySubQueryContainer ProcessSubSelectOperator(string joinTypeName, CriteriaOperator operandClause, IEnumerable`1<CriteriaOperator> aggregateProperties, string customAggregateName);
    private QuerySubQueryContainer ProcessSubSelectOperator(OperandProperty collectionProperty, CriteriaOperator operandClause, CriteriaOperator aggregateProperty, Aggregate aggregateType);
    private QuerySubQueryContainer ProcessSubSelectOperator(OperandProperty collectionProperty, CriteriaOperator operandClause, IEnumerable`1<CriteriaOperator> aggregateProperties, string customAggregateName);
    protected virtual bool get_IsGrouped();
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(AggregateOperand theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(JoinOperand theOperator);
    public CriteriaOperator ProcessSingleAggregateOperand(OperandProperty collectionProperty, CriteriaOperator condition, CriteriaOperator aggregatedExpression);
    public CriteriaOperator ProcessSingleJoinOperand(string joinTypeName, CriteriaOperator condition, CriteriaOperator aggregatedExpression);
    private QuerySubQueryContainer ProcessTopSubSelect(CriteriaOperator aggregateProperty, CriteriaOperator operandClause, Aggregate aggregateType);
    private QuerySubQueryContainer ProcessTopSubSelect(IEnumerable`1<CriteriaOperator> aggregateProperties, CriteriaOperator operandClause, string customAggregateName);
    protected virtual CriteriaOperator GetSubJoinCriteria(SubSelectQueryGenerator gena);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BetweenOperator theOperator);
    private BinaryOperator CreateBinary(CriteriaOperator left, PropertyAlias leftMembers, CriteriaOperator right, PropertyAlias rightMembers, BinaryOperatorType opType, int index);
    private CriteriaOperator CreateBinaryGroup(PropertyAlias subMembers, CriteriaOperator left, PropertyAlias leftMembers, CriteriaOperator right, PropertyAlias rightMembers, BinaryOperatorType opType);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BinaryOperator theOperator);
    protected CriteriaOperator CreateBinary(BinaryOperatorType type, CriteriaOperator left, CriteriaOperator right);
    private PropertyAlias CollectInValues(ICollection operands, IList`1<CriteriaOperator> values);
    private DBColumnType CorrectParameterType(object value, DBColumnType memberType);
    private OperandValue GetConstParameter(XPMemberInfo member, OperandValue operand, XPMemberInfo targetMember);
    protected OperandValue GetConstParameter(object value, DBColumnType dbType, string dbTypeName, int size);
    [ObsoleteAttribute("Use GetConstParameter(object value, DBColumnType dbType, string dbTypeName, int size) instead.")]
protected OperandValue GetConstParameter(object value);
    protected CriteriaOperator GetParameter(CriteriaOperator param, PropertyAlias alias, int index);
    protected CriteriaOperator GetQueryOperandFromAlias(PropertyAlias aliasFromParam, PropertyAlias alias, int index);
    internal static DBColumn GetProjectedMemberColumn(string mappingField, JoinNode node, List`1<JoinNode> projectedNodeList);
    private CriteriaOperator BuildInGroup(PropertyAlias defaultMembers, List`1<CriteriaOperator> values, CriteriaOperator left);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(InOperator theOperator);
    protected CriteriaOperator ProcessLogicalInContext(XPClassInfo ci, JoinNode singleNode, CriteriaOperator criteria);
    protected CriteriaOperator ProcessLogical(CriteriaOperator operand);
    private void AddMultiColumnAlias(CriteriaOperator op, PropertyAlias alias);
    private bool TryGetMultiColumnAlias(CriteriaOperator op, PropertyAlias& alias);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(GroupOperator theOperator);
    protected List`1<XPMemberInfo> GetSubMembers(XPMemberInfo member, string prefix);
    protected List`1<XPMemberInfo> GetMembers(XPMemberInfo member, String& prefix);
    protected PropertyAlias GetMembers(JoinNode node, XPMemberInfo member);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(UnaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(FunctionOperator theOperator);
    private static bool IsFunctionOperatorNeedLeftJoin(FunctionOperatorType operatorType);
    protected CriteriaOperator PatchCriteria(CriteriaOperator originalCriteria);
    protected CriteriaOperator PatchCriteria(CriteriaOperator originalCriteria, XPClassInfo classInfo);
}
public abstract class DevExpress.Xpo.Generators.BatchWideDataHolder : object {
    private int currentTag;
    public XPDictionary Dictionary;
    protected BatchWideDataHolder(IXPDictionaryProvider dictionary);
    public int GetNextTag();
    public abstract virtual OperandValue GetParameter(object value);
    public abstract virtual OperandValue GetParameter(object value, DBColumnType dbType, string dbTypeName, int size);
}
public class DevExpress.Xpo.Generators.BatchWideDataHolder4Modification : BatchWideDataHolder {
    private ICollection deletedObjects;
    private ObjectSet insertedObjects;
    private ObjectDictionary`1<ParameterValue> identityParameters;
    private ObjectDictionary`1<MemberInfoCollection> updatedMembersBeforeDeleteDict;
    private Dictionary`2<QueryOperand, QueryOperand> queryOperandsCache;
    public ICollection InsertedObjects { get; }
    public ICollection DeletedObjects { get; }
    public BatchWideDataHolder4Modification(IXPDictionaryProvider dictionary);
    public void RegisterDeletedObjects(IEnumerable objects4Delete);
    public ParameterValue CreateIdentityParameter(object theObject);
    public bool IsObjectAlreadyInserted(object theObject);
    public void RegisterInsertedObject(object theObject);
    public ICollection get_InsertedObjects();
    public ICollection get_DeletedObjects();
    public virtual OperandValue GetParameter(object value);
    public virtual OperandValue GetParameter(object value, DBColumnType dbType, string dbTypeName, int size);
    public void RegisterUpdatedMembersBeforeDelete(object theObject, MemberInfoCollection members);
    public bool TryGetUpdatedMembersBeforeDelete(object theObject, MemberInfoCollection& members);
    public QueryOperand CacheQueryOperand(QueryOperand toCache);
}
public class DevExpress.Xpo.Generators.BatchWideDataHolder4Select : BatchWideDataHolder {
    private Dictionary`2<ParameterValueDescriptor, ParameterValue> parametersByValues;
    private ObjectDictionary`1<ParameterValue> parametersByObjects;
    public BatchWideDataHolder4Select(IXPDictionaryProvider dictionary);
    public virtual OperandValue GetParameter(object value);
    public virtual OperandValue GetParameter(object value, DBColumnType dbType, string dbTypeName, int size);
}
public class DevExpress.Xpo.Generators.ClientSelectSqlGenerator : BaseQueryGenerator {
    private CriteriaOperatorCollection grouping;
    private CriteriaOperator groupCriteria;
    private CriteriaOperatorCollection properties;
    private SortingCollection sorting;
    private CriteriaOperatorCollection Properties { get; }
    protected SelectStatement Root { get; }
    protected bool IsGrouped { get; }
    private ClientSelectSqlGenerator(XPClassInfo objectInfo, BatchWideDataHolder4Select batchWideData, CriteriaOperatorCollection properties, SortingCollection sorting, CriteriaOperatorCollection grouping, CriteriaOperator groupCriteria, CollectionCriteriaPatcher collectionCriteriaPatcher);
    private CriteriaOperatorCollection get_Properties();
    protected SelectStatement get_Root();
    protected virtual BaseStatement CreateRootStatement(DBTable table, string alias);
    private void BuildAssociationByGrouping();
    protected virtual bool get_IsGrouped();
    protected virtual CriteriaOperator GetSubJoinCriteria(SubSelectQueryGenerator gena);
    private List`1<CriteriaOperator> BuildAssociation(CriteriaOperatorCollection properties);
    private void BuildAssociationByGroupCriteria();
    private void BuildAssociationBySorting();
    private void BuildAssociationByProperties(CriteriaOperatorCollection properties);
    protected virtual void InternalGenerateSql(CriteriaOperator criteria);
    public static SelectStatement GenerateSelect(XPClassInfo objectInfo, CriteriaOperator criteria, CriteriaOperatorCollection properties, SortingCollection sorting, CriteriaOperatorCollection grouping, CriteriaOperator groupCriteria, CollectionCriteriaPatcher collectionCriteriaPatcher, int topSelectedRecords);
    public static SelectStatement GenerateSelect(XPClassInfo objectInfo, CriteriaOperator criteria, CriteriaOperatorCollection properties, SortingCollection sorting, CriteriaOperatorCollection grouping, CriteriaOperator groupCriteria, CollectionCriteriaPatcher collectionCriteriaPatcher, int skipSelectedRecords, int topSelectedRecords);
    public static SelectStatement GenerateSelect(XPClassInfo objectInfo, CriteriaOperator criteria, MemberPathCollection properties, SortingCollection sorting, CriteriaOperatorCollection grouping, CriteriaOperator groupCriteria, CollectionCriteriaPatcher collectionCriteriaPatcher, int topSelectedRecords);
    public static SelectStatement GenerateSelect(XPClassInfo objectInfo, CriteriaOperator criteria, MemberPathCollection properties, SortingCollection sorting, CriteriaOperatorCollection grouping, CriteriaOperator groupCriteria, CollectionCriteriaPatcher collectionCriteriaPatcher, int skipSelectedRecords, int topSelectedRecords);
}
public class DevExpress.Xpo.Generators.CollectionCriteriaPatcher : object {
    public bool SelectDeleted;
    public XPObjectTypesManager TypesPatchManager;
    public CollectionCriteriaPatcher(bool selectDeleted, XPObjectTypesManager typesPatchManager);
    public CriteriaOperator PatchCriteria(XPClassInfo classInfo, CriteriaOperator originalCriteria);
    public static CollectionCriteriaPatcher CloneToAnotherSession(CollectionCriteriaPatcher original, Session targetSession);
}
public class DevExpress.Xpo.Generators.DeleteQueryGenerator : BaseObjectQueryGenerator {
    protected DeleteStatement Root { get; }
    private DeleteQueryGenerator(XPDictionary dictionary, object theObject, BatchWideDataHolder4Modification batchWideData);
    private DeleteQueryGenerator(XPClassInfo classInfo, BatchWideDataHolder4Modification batchWideData);
    protected DeleteStatement get_Root();
    protected virtual void InitData();
    protected virtual void InternalGenerateSql(CriteriaOperator criteria);
    public static List`1<ModificationStatement> GenerateDelete(XPDictionary dictionary, object theObject, LockingOption locking, BatchWideDataHolder4Modification batchWideData);
    private static void GenerateDeletes(XPClassInfo classInfo, ObjectGeneratorCriteriaSet criteriaSet, List`1<ModificationStatement> res, int count, BatchWideDataHolder4Modification batchWideData);
    private static List`1<ModificationStatement> GenerateDelete(XPClassInfo classInfo, IList keys, LockingOption locking, BatchWideDataHolder4Modification batchWideData);
    private static List`1<ModificationStatement> GenerateDeleteCore(XPClassInfo classInfo, IList keys, LockingOption locking, BatchWideDataHolder4Modification batchWideData);
    private static bool AreReferences(XPClassInfo ci, ICollection classInfos);
    private static XPClassInfo GetNonReferencedClassInfo(ICollection classInfos);
    public static List`1<ModificationStatement> GenerateDelete(XPDictionary dictionary, ICollection objects, LockingOption locking, BatchWideDataHolder4Modification batchWideData);
    public static List`1<ModificationStatement> GenerateDelete(XPClassInfo classInfo, ObjectGeneratorCriteriaSet criteriaSet, BatchWideDataHolder4Modification batchWideData);
    protected virtual BaseStatement CreateRootStatement(DBTable table, string alias);
}
public class DevExpress.Xpo.Generators.GetRangeHelper : object {
    public static List`1<object> GetRange(List`1<object> src, int index, int count);
    public static List`1<object> GetRange(IList src, int index, int count);
}
public class DevExpress.Xpo.Generators.InsertQueryGenerator : BaseObjectQueryGenerator {
    private bool autoIncrement;
    protected InsertStatement Root { get; }
    private InsertQueryGenerator(XPDictionary dictionary, BatchWideDataHolder4Modification batchWideData, object theObject);
    protected InsertStatement get_Root();
    protected virtual void InitData();
    protected virtual void AddParameter(OperandValue parameter);
    protected virtual bool ShoudPersist(XPMemberInfo member);
    protected virtual void InternalGenerateSql(CriteriaOperator criteria);
    [ObsoleteAttribute("Use overload with BatchWideDataHolder instead")]
public static List`1<ModificationStatement> GenerateInsert(XPDictionary dictionary, object theObject, MemberInfoCollection properties);
    public static List`1<ModificationStatement> GenerateInsert(XPDictionary dictionary, BatchWideDataHolder4Modification batchWideData, object theObject, MemberInfoCollection properties);
    protected virtual BaseStatement CreateRootStatement(DBTable table, string alias);
}
public class DevExpress.Xpo.Generators.ManySubSelectQueryGenerator : SubSelectQueryGenerator {
    private XPMemberInfo refProperty;
    public ManySubSelectQueryGenerator(XPMemberInfo refProperty, BaseQueryGenerator parent, BatchWideDataHolder batchWideData, string propertyName, CriteriaOperator aggregateProperty, Aggregate aggregate, CollectionCriteriaPatcher collectionCriteriaPatcher);
    public ManySubSelectQueryGenerator(XPMemberInfo refProperty, BaseQueryGenerator parent, BatchWideDataHolder batchWideData, string propertyName, IEnumerable`1<CriteriaOperator> aggregatedExpressions, string customAggregateName, CollectionCriteriaPatcher collectionCriteriaPatcher);
    protected internal virtual PropertyAlias GetPropertyNode(OperandProperty property, JoinType type);
    public string GetManyToManyPath(IntermediateClassInfo classInfo, string memberName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private PropertyAlias <>n__0(OperandProperty property, JoinType type);
}
internal class DevExpress.Xpo.Generators.MemberPathOperand : OperandProperty {
    private MemberInfoCollection mic;
    public MemberInfoCollection Path { get; }
    public MemberPathOperand(MemberInfoCollection path);
    public MemberInfoCollection get_Path();
}
public class DevExpress.Xpo.Generators.ObjectGeneratorCriteriaSet : object {
    private CriteriaOperator commonCriteria;
    private Dictionary`2<string, CriteriaOperator> criteriaDict;
    public CriteriaOperator CommonCriteria { get; }
    public CriteriaOperator get_CommonCriteria();
    public bool TryGetCriteria(string tableName, CriteriaOperator& criteria);
    public CriteriaOperator GetCompleteCriteria(string tableName);
    public void UpdateCriteria(string tableName, CriteriaOperator criteria);
    public void UpdateCommonCriteria(CriteriaOperator criteria);
    public static ObjectGeneratorCriteriaSet GetCommonCriteriaSet(CriteriaOperator commonCriteria);
    public static ObjectGeneratorCriteriaSet GetCriteriaSet(string tableName, CriteriaOperator criteria);
    public static ObjectGeneratorCriteriaSet GetCriteriaSet(string tableName, CriteriaOperator criteria, CriteriaOperator commonCriteria);
}
public class DevExpress.Xpo.Generators.ProjectionAliasPatcher : object {
    private BaseStatement root;
    private Dictionary`2<string, JoinNode> projectedNodes;
    private Dictionary`2<string, ProjectionNodeItem> projectionNodes;
    private HashSet`1<string> usedProjectionNodes;
    private QueryOperandCollector queryOperandCollector;
    public ProjectionAliasPatcher(BaseStatement root, Dictionary`2<string, JoinNode> projectedNodes, Dictionary`2<string, ProjectionNodeItem> projectionNodes);
    public static void Patch(BaseStatement root, Dictionary`2<string, JoinNode> projectedNodes, Dictionary`2<string, ProjectionNodeItem> projectionNodes);
    public void Patch();
    private void PatchInternal(BaseStatement statement);
}
public class DevExpress.Xpo.Generators.ProjectionNodeItem : object {
    public JoinNode Node;
    public List`1<JoinNode> ProjectedNodes;
    public ProjectionNodeItem(JoinNode node, List`1<JoinNode> projectedNodes);
}
internal class DevExpress.Xpo.Generators.SingleAggregateItem : ValueType {
    public XPMemberInfo CollectionProperty;
    public CriteriaOperator Condition;
    public XPClassInfo ClassInfo;
    public SingleAggregateItem(CriteriaOperator condition, XPClassInfo classInfo, XPMemberInfo collectionProperty);
}
internal class DevExpress.Xpo.Generators.SingleAggregateItemComparer : object {
    public sealed virtual bool Equals(SingleAggregateItem x, SingleAggregateItem y);
    public sealed virtual int GetHashCode(SingleAggregateItem obj);
}
public class DevExpress.Xpo.Generators.StatementNormalizer : object {
    private BaseStatement root;
    private Dictionary`2<string, JoinNode> nodeDict;
    private Dictionary`2<string, IEnumerable`1<PlanAliasCriteriaInfo>> nodeCriteriaInfoDict;
    public StatementNormalizer(BaseStatement root);
    public void ProcessStatement();
    private void FindNodes(JoinNode node);
    private void FindNode(JoinNode subNode, JoinNode parentNode);
    private static void CollectNodes(JoinNode node, Dictionary`2<string, JoinNode> collectedNodes);
    private static void ClearNodes(JoinNode node);
    private void NormalizeNodeTree(JoinNode parentNode, JoinNode subNode, Dictionary`2<string, JoinNode> collectedNodes, Dictionary`2<string, JoinNode> collectedRootSubNodes);
    public static void Normalize(BaseStatement statement);
}
public class DevExpress.Xpo.Generators.SubSelectQueryGenerator : BaseQueryGenerator {
    private String[] propertyName;
    private BaseQueryGenerator parent;
    private Aggregate aggregateType;
    private CriteriaOperator aggregateProperty;
    private CriteriaOperatorCollection customAggregateOperands;
    public SubSelectQueryGenerator(BaseQueryGenerator parent, BatchWideDataHolder batchWideData, string propertyName, XPClassInfo objectInfo, CriteriaOperator aggregateProperty, Aggregate aggregate, CollectionCriteriaPatcher collectionCriteriaPatcher);
    public SubSelectQueryGenerator(BaseQueryGenerator parent, BatchWideDataHolder batchWideData, string propertyName, XPClassInfo objectInfo, IEnumerable`1<CriteriaOperator> aggregatedExpressions, string customAggregateName, CollectionCriteriaPatcher collectionCriteriaPatcher);
    protected virtual void InternalGenerateSql(CriteriaOperator criteria);
    private void AddSelectValue();
    protected internal virtual string GetNextNodeAlias();
    protected internal virtual PropertyAlias GetPropertyNode(OperandProperty property, JoinType type);
    public BaseStatement GenerateSelect(CriteriaOperator criteria);
    protected virtual BaseStatement CreateRootStatement(DBTable table, string alias);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private PropertyAlias <>n__0(OperandProperty property, JoinType type);
}
public class DevExpress.Xpo.Generators.UpdateQueryGenerator : BaseObjectQueryGenerator {
    protected UpdateStatement Root { get; }
    private UpdateQueryGenerator(XPDictionary dictionary, BatchWideDataHolder4Modification batchWideData, object theObject);
    private UpdateQueryGenerator(XPClassInfo classInfo, BatchWideDataHolder4Modification batchWideData);
    protected UpdateStatement get_Root();
    protected virtual void InitData();
    protected virtual void AddParameter(OperandValue parameter);
    protected virtual void InternalGenerateSql(CriteriaOperator criteria);
    public static List`1<ModificationStatement> GenerateUpdate(XPDictionary dictionary, BatchWideDataHolder4Modification batchWideData, object theObject, MemberInfoCollection properties, ObjectGeneratorCriteriaSet criteriaSet);
    [ObsoleteAttribute("Use overload with BatchWideDataHolder instead")]
public static List`1<ModificationStatement> GenerateUpdate(XPDictionary dictionary, object theObject, MemberInfoCollection properties, ObjectGeneratorCriteriaSet criteriaSet);
    public static List`1<ModificationStatement> GenerateUpdate(XPClassInfo classInfo, MemberInfoCollection properties, ObjectGeneratorCriteriaSet criteriaSet, BatchWideDataHolder4Modification batchWideData);
    public static List`1<ModificationStatement> GenerateUpdate(XPDictionary dictionary, BatchWideDataHolder4Modification batchWideData, object theObject, MemberInfoCollection properties);
    protected virtual BaseStatement CreateRootStatement(DBTable table, string alias);
}
[XmlTypeAttribute("GetObjectsByKeyQuery")]
[XmlIncludeAttribute("DevExpress.Xpo.Helpers.IdList")]
public class DevExpress.Xpo.GetObjectStubsByKeyQuery : object {
    private XPClassInfoStub classInfo;
    private ICollection idCollection;
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public XPClassInfoStub ClassInfo { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[XmlArrayItemAttribute("id")]
public Object[] IdArray { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
[XmlIgnoreAttribute]
public ICollection IdCollection { get; }
    public GetObjectStubsByKeyQuery(XPClassInfoStub classInfo, ICollection idCollection);
    public XPClassInfoStub get_ClassInfo();
    public void set_ClassInfo(XPClassInfoStub value);
    public Object[] get_IdArray();
    public void set_IdArray(Object[] value);
    public ICollection get_IdCollection();
    public static GetObjectStubsByKeyQuery FromObjectQuery(ObjectsByKeyQuery query, XPObjectClassInfoStubCache classInfoCache);
}
public enum DevExpress.Xpo.GuidGenerationMode : Enum {
    public int value__;
    public static GuidGenerationMode FrameworkDefault;
    public static GuidGenerationMode UuidCreateSequential;
    public static GuidGenerationMode Custom;
}
public class DevExpress.Xpo.Helpers.AnalyzeCriteriaCleaner : ClientCriteriaVisitorBase {
    private static AnalyzeCriteriaCleaner instance;
    private static AnalyzeCriteriaCleaner Instance { get; }
    private static AnalyzeCriteriaCleaner get_Instance();
    public static CriteriaOperator Clean(CriteriaOperator op);
    private sealed virtual override CriteriaOperator DevExpress.Xpo.Helpers.IAnalyzeCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(AnalyzeOperator criteria);
}
public class DevExpress.Xpo.Helpers.AnalyzeCriteriaCreator : object {
    public static AnalyzeInfoKey NodeNameKey;
    public static AnalyzeInfoKey ClassInfoKey;
    public static AnalyzeInfoKey TransitionInfoKey;
    public static AnalyzeInfoKey OperatorIdKey;
    private string currentNodeName;
    private XPClassInfo currentClassInfo;
    private Stack`1<XPClassInfo> classInfoStack;
    private Stack`1<string> nodeNameStack;
    private Dictionary`2<string, Dictionary`2<AnalyzeTransitionInfo, string>> nodeToNodeMoveDict;
    private Dictionary`2<string, XPClassInfo> nodeClassInfoDict;
    private int nodeNameCounter;
    private bool topLevelAggregateDetected;
    public bool TopLevelAggregateDetected { get; }
    public AnalyzeCriteriaCreator(XPClassInfo classInfo);
    private static AnalyzeCriteriaCreator();
    public bool get_TopLevelAggregateDetected();
    public void RaiseIfTopLevelAggregate();
    public static AnalyzeResult Process(XPClassInfo classInfo, CriteriaOperator co);
    private AnalyzeResult Process(CriteriaOperator co);
    private AnalyzeOperator ProcessInternal(CriteriaOperator co);
    private string GetNextNodeName(AnalyzeTransitionInfo ati, XPClassInfo nextNodeClassInfo);
    private Dictionary`2<AnalyzeTransitionInfo, string> GetNodeDict(string nodeName);
    internal static Dictionary`2<AnalyzeInfoKey, object> CreateAnalyzeInfo();
    internal static Dictionary`2<AnalyzeInfoKey, object> CreateAnalyzeInfo(XPClassInfo classInfo, string nodeName);
    internal static Dictionary`2<AnalyzeInfoKey, object> CreateAnalyzeInfo(Guid operatorId, XPClassInfo classInfo, string nodeName);
    internal static Dictionary`2<AnalyzeInfoKey, object> CreateAnalyzeInfo(XPClassInfo classInfo, string nodeName, AnalyzeTransitionInfo transitionInfo);
    public sealed virtual AnalyzeOperator Visit(JoinOperand theOperand);
    public sealed virtual AnalyzeOperator Visit(OperandProperty theOperand);
    public static bool IsUpCasting(XPClassInfo currentClassInfo, XPMemberInfo memberInfo);
    public static XPClassInfo GetUpClass(XPClassInfo left, XPClassInfo right);
    public static XPClassInfo GetDownClass(XPClassInfo left, XPClassInfo right);
    public sealed virtual AnalyzeOperator Visit(AggregateOperand theOperand);
    public sealed virtual AnalyzeOperator Visit(FunctionOperator theOperator);
    public sealed virtual AnalyzeOperator Visit(OperandValue theOperand);
    public sealed virtual AnalyzeOperator Visit(GroupOperator theOperator);
    public sealed virtual AnalyzeOperator Visit(InOperator theOperator);
    public sealed virtual AnalyzeOperator Visit(UnaryOperator theOperator);
    public sealed virtual AnalyzeOperator Visit(BinaryOperator theOperator);
    public sealed virtual AnalyzeOperator Visit(BetweenOperator theOperator);
    private CriteriaOperatorCollection ProcessOperands(CriteriaOperatorCollection collection);
    [CompilerGeneratedAttribute]
private AnalyzeOperator <Visit>b__25_0(CriteriaOperator t);
    [CompilerGeneratedAttribute]
private AnalyzeOperator <Visit>b__30_0(CriteriaOperator t);
}
public class DevExpress.Xpo.Helpers.AnalyzeCriteriaToBasicStyleParameterlessProcessor : CriteriaToBasicStyleParameterlessProcessor {
    public sealed virtual CriteriaToStringVisitResult Visit(AnalyzeOperator criteria);
    public static string ToAnalyzeString(CriteriaOperator criteria);
}
public class DevExpress.Xpo.Helpers.AnalyzeInfoKey : object {
    private string showInfo;
    public AnalyzeInfoKey(string showInfo);
    public virtual string ToString();
}
public class DevExpress.Xpo.Helpers.AnalyzeNodePathItem : object {
    public AnalyzeTransitionInfo TransitionInfo;
    public AnalyzeNodePathItemType Type;
    public string Node;
    public AnalyzeNodePathItem(AnalyzeTransitionInfo transitionInfo, string node);
    public AnalyzeNodePathItem(AnalyzeTransitionInfo transitionInfo, string node, AnalyzeNodePathItemType type);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum DevExpress.Xpo.Helpers.AnalyzeNodePathItemType : Enum {
    public int value__;
    public static AnalyzeNodePathItemType Direct;
    public static AnalyzeNodePathItemType Reverse;
}
public class DevExpress.Xpo.Helpers.AnalyzeOperator : CriteriaOperator {
    private CriteriaOperator original;
    private Dictionary`2<AnalyzeInfoKey, object> analyzeInfo;
    public CriteriaOperator Original { get; }
    public Dictionary`2<AnalyzeInfoKey, object> AnalyzeInfo { get; }
    public AnalyzeOperator(CriteriaOperator original);
    public AnalyzeOperator(CriteriaOperator original, Dictionary`2<AnalyzeInfoKey, object> analyzeInfo);
    public CriteriaOperator get_Original();
    public Dictionary`2<AnalyzeInfoKey, object> get_AnalyzeInfo();
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public AnalyzeOperator CloneCriteria();
    protected virtual CriteriaOperator CloneCommon();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Xpo.Helpers.AnalyzeOperator`1 : AnalyzeOperator {
    public T Original { get; }
    public AnalyzeOperator`1(T original, Dictionary`2<AnalyzeInfoKey, object> analyzeInfo);
    public T get_Original();
    public AnalyzeOperator`1<T> Clone();
    protected virtual CriteriaOperator CloneCommon();
}
public class DevExpress.Xpo.Helpers.AnalyzeResult : object {
    public AnalyzeOperator ResultOperator;
    public Dictionary`2<string, Dictionary`2<AnalyzeTransitionInfo, string>> NodeToNodeMoveDictByMember;
    public Dictionary`2<string, Dictionary`2<string, AnalyzeNodePathItem>> NodeToNodeMoveDict;
    public Dictionary`2<string, XPClassInfo> NodeClassInfoDict;
    public Dictionary`2<XPClassInfo, List`1<string>> ClassInfoNodeDict;
    public Dictionary`2<XPClassInfo, List`1<string>> AffectedNodeDict;
    public bool TopLevelAggregateDetected;
    public AnalyzeResult(AnalyzeOperator resultOperator, Dictionary`2<string, Dictionary`2<AnalyzeTransitionInfo, string>> nodeToNodeMoveDictByMember, Dictionary`2<string, XPClassInfo> nodeClassInfoDict, bool topLevelAggregateDetected);
    public void RaiseIfTopLevelAggregate();
    public AnalyzeNodePathItem[] GetNodePath(string startNode, string endNode);
    public static string NodePathToString(AnalyzeNodePathItem[] nodePath);
    private List`1<AnalyzeNodePathItem> FindNodePath(string node, string endNode, Dictionary`2<string, bool> usedNodes);
    public String[] GetModifiedNodes(Session session);
    public static HashSet`1<XPClassInfo> GetAllModifiedClassInfo(Session session, ICollection objectsToSave, ICollection objectsToDelete);
    public String[] GetModifiedNodes(Session session, ICollection objectsToSave, ICollection objectsToDelete);
    public ModifiedNodesInfo[] GetModifiedNodesInfo(Session session);
    public ModifiedNodesInfo[] GetModifiedNodesInfo(Session session, ICollection objectsToSave, ICollection objectsToDelete);
    public virtual string ToString();
}
public class DevExpress.Xpo.Helpers.AnalyzeTransitionInfo : object {
    public Guid JoinOperandId;
    public XPClassInfo JoinClassInfo;
    public XPMemberInfo MemberInfo;
    public bool UpCasting;
    public bool CantWrapCollection;
    public bool IsMemberInfo { get; }
    public AnalyzeTransitionInfo(XPMemberInfo memberInfo, bool cantWrapCollection);
    public AnalyzeTransitionInfo(XPMemberInfo memberInfo, XPClassInfo classInfo, bool upCasting, bool cantWrapCollection);
    public AnalyzeTransitionInfo(Guid joinOperandId, XPClassInfo joinClassInfo, bool cantWrapCollection);
    public bool get_IsMemberInfo();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class DevExpress.Xpo.Helpers.AssociatedCollectionCriteriaHelper : object {
    public static Result ResolveDataForCollection(object instance, XPMemberInfo member);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.Helpers.AssociationXmlSerializationHelper : object {
    public XPBaseCollection BaseCollection;
    public IList BaseIList { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public AssociationXmlSerializationHelper(XPBaseCollection baseColection);
    public IList get_BaseIList();
    protected void PrepareBaseCollectionForDeserializationActions();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
internal class DevExpress.Xpo.Helpers.AsyncExecuteQueue : object {
    private int syncRequestsCount;
    private AutoResetEvent syncExecuteEvent;
    private SendOrPostCallback syncExecuteDelegate;
    private object syncExecuteState;
    private Thread executingThread;
    private bool asyncThreadWorking;
    private bool asyncThreadNotWorkingButHasExecTask;
    private bool asyncThreadWorkingButAllAreIdle;
    private PriorityRequestQueue asyncQueue;
    private AsyncRequest currentRequest;
    public bool ContainsRequest(AsyncRequest request, bool includeCurrentRequest);
    public WaitForAsyncOperationResult WaitForAsyncOperationEnd();
    public WaitForAsyncOperationResult WaitForAsyncOperationEnd(AsyncRequest request);
    public void Invoke(SynchronizationContext syncContext, SendOrPostCallback d, object state, bool operationEnd);
    private void ExecuteInvoke(object state);
    public void ExecRequest(AsyncRequest request);
    public void NotifyPriorityChanged(AsyncRequest request);
    private void AsyncWorkCycle(object state);
}
public class DevExpress.Xpo.Helpers.AsyncFindObjectCallback : MulticastDelegate {
    public AsyncFindObjectCallback(object object, IntPtr method);
    public virtual void Invoke(object result, Exception ex);
    public virtual IAsyncResult BeginInvoke(object result, Exception ex, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.Helpers.AsyncLoadObjectsCallback : MulticastDelegate {
    public AsyncLoadObjectsCallback(object object, IntPtr method);
    public virtual void Invoke(ICollection[] result, Exception ex);
    public virtual IAsyncResult BeginInvoke(ICollection[] result, Exception ex, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class DevExpress.Xpo.Helpers.AsyncOperationsHelper : object {
    public static SynchronizationContext CaptureSynchronizationContextOrFail();
    public static void FailIfSynchronizationContextUnavailable();
}
internal class DevExpress.Xpo.Helpers.AsyncRequest : object {
    private bool isCanceled;
    private AsyncExecuteQueue queue;
    private AsyncRequestPriority priority;
    private SynchronizationContext syncContext;
    private AsyncRequestExec exec;
    private List`1<AsyncRequest> nestedRequests;
    public SynchronizationContext SyncContext { get; }
    public AsyncRequestPriority Priority { get; }
    public bool IsCanceled { get; }
    public AsyncRequest(SynchronizationContext syncContext);
    public AsyncRequest(SynchronizationContext syncContext, AsyncRequestExec exec);
    public SynchronizationContext get_SyncContext();
    public AsyncRequestPriority get_Priority();
    public bool get_IsCanceled();
    public AsyncRequest AddNestedRequest(AsyncRequest nested);
    public AsyncRequest RemoveNestedRequest(AsyncRequest nested);
    public void Cancel();
    public void SetPriority(AsyncRequestPriority priority);
    public virtual bool IsInQueue(AsyncExecuteQueue q);
    public virtual bool IsInQueueOrCurrent(AsyncExecuteQueue q);
    public void Exec();
    public AsyncRequest Start(AsyncExecuteQueue queue);
    public AsyncRequest StartWithPriority(AsyncExecuteQueue queue, AsyncRequestPriority priority);
}
internal class DevExpress.Xpo.Helpers.AsyncRequestExec : MulticastDelegate {
    public AsyncRequestExec(object object, IntPtr method);
    public virtual void Invoke(AsyncRequest request);
    public virtual IAsyncResult BeginInvoke(AsyncRequest request, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum DevExpress.Xpo.Helpers.AsyncRequestPriority : Enum {
    public int value__;
    public static AsyncRequestPriority Normal;
    public static AsyncRequestPriority Idle;
    public static AsyncRequestPriority High;
}
public abstract class DevExpress.Xpo.Helpers.BaseDataLayer : object {
    protected Dictionary`2<XPClassInfo, XPClassInfo> EnsuredTypes;
    private XPDictionary dictionary;
    private IDataStore provider;
    private ICommandChannel nestedCommandChannel;
    private ICommandChannelAsync nestedCommandChannelAsync;
    private Nullable`1<AutoCreateOption> autoCreateOption;
    [CompilerGeneratedAttribute]
private SchemaInitEventHandler SchemaInit;
    private static int seq;
    private int seqNum;
    private Dictionary`2<object, object> staticData;
    private static object loadedTypesKey;
    private static object staticTypesKey;
    private static object staticCacheKey;
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public IDataStore ConnectionProvider { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public XPDictionary Dictionary { get; }
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public AutoCreateOption AutoCreateOption { get; }
    public IDbConnection Connection { get; }
    private IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.DataLayer { get; }
    protected BaseDataLayer(XPDictionary dictionary, IDataStore provider, Action`1<XPDictionary> dictionaryInit);
    private static BaseDataLayer();
    protected virtual void BeforeClassInfoSubscribe();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public IDataStore get_ConnectionProvider();
    public sealed virtual XPDictionary get_Dictionary();
    protected abstract virtual void OnClassInfoChanged(object sender, ClassInfoEventArgs e);
    protected void RegisterEnsuredTypes(ICollection`1<XPClassInfo> justEnsuredTypes);
    protected void RaiseSchemaInit(ICollection`1<XPClassInfo> justEnsuredTypes);
    public abstract virtual UpdateSchemaResult UpdateSchema(bool doNotCreate, XPClassInfo[] types);
    public abstract virtual SelectedData SelectData(SelectStatement[] selects);
    public abstract virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    public abstract virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public abstract virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public abstract virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreate, XPClassInfo[] types);
    public virtual AutoCreateOption get_AutoCreateOption();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SchemaInit(SchemaInitEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SchemaInit(SchemaInitEventHandler value);
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual IDbCommand CreateCommand();
    public virtual string ToString();
    private sealed virtual override IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.get_DataLayer();
    protected void ClearStaticData();
    public sealed virtual void SetDataLayerWideData(object key, object data);
    public sealed virtual object GetDataLayerWideData(object key);
    public static void SetDataLayerWideObjectTypes(IDataLayer layer, Dictionary`2<XPClassInfo, XPObjectType> loadedTypes);
    public static Dictionary`2<XPClassInfo, XPObjectType> GetDataLayerWideObjectTypes(IDataLayer layer);
    private static Dictionary`2<XPClassInfo, XPClassInfo> GetStaticTypesDictionary(IDataLayer layer);
    public static void RegisterStaticTypes(IDataLayer layer, XPClassInfo[] types);
    public static bool IsStaticType(IDataLayer layer, XPClassInfo type);
    public static IObjectMap GetStaticCache(IDataLayer layer, XPClassInfo info);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    protected virtual object Do(string command, object args);
    private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
    protected virtual Task`1<object> DoAsync(string command, object args, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Xpo.Helpers.BaseListMorpher`2 : object {
    public IList`1<T> Morphed;
    public I Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected BaseListMorpher`2(IList`1<T> morphed);
    protected abstract virtual I DownCast(T value);
    protected abstract virtual T UpCast(I value);
    public sealed virtual int IndexOf(I item);
    public sealed virtual void Insert(int index, I item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual I get_Item(int index);
    public sealed virtual void set_Item(int index, I value);
    public sealed virtual void Add(I item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(I item);
    public sealed virtual void CopyTo(I[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(I item);
    [IteratorStateMachineAttribute("DevExpress.Xpo.Helpers.BaseListMorpher`2/<GetEnumerator>d__19")]
public sealed virtual IEnumerator`1<I> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
internal class DevExpress.Xpo.Helpers.CachedQuery`1 : CachedQueryBase {
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public Type ElementType { get; }
    private CachedQuery`1(CachedQueryBase baseQuery);
    public CachedQuery`1(MethodInfo method);
    protected virtual object Process(IQueryProvider provider, MethodCallExpression e, Expression values);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual Type get_ElementType();
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual object Execute(Expression expression);
}
internal abstract class DevExpress.Xpo.Helpers.CachedQueryBase : object {
    private MethodCallExpression nextExpression;
    protected CachedQueryBase next;
    private String[] names;
    private MethodInfo[] converters;
    private Expression[] arguments;
    private static Expression emptyParams;
    private static MethodInfo mi;
    private static CachedQueryBase();
    protected CachedQueryBase(MethodInfo method);
    protected CachedQueryBase(CachedQueryBase baseQuery);
    protected void SetExpression(Expression expression);
    private static T GetFirst(T value, ParamExpression param);
    public object Process(IQueryable source, Object[] values);
    public object Process(IQueryable source);
    protected object Process(IQueryable source, Expression values);
    protected abstract virtual object Process(IQueryProvider iQueryProvider, MethodCallExpression e, Expression values);
}
public static class DevExpress.Xpo.Helpers.CannotLoadObjectsHelper : object {
    public static Results Analize(Session session);
    private static Tuple`2[] CollectOrphanedReferences(Session session, Tuple`2<XPClassInfo, XPMemberInfo> reference);
    private static Tuple`3[] CollectOrphanedReferences(Session session, IEnumerable`1<Tuple`2<XPClassInfo, XPMemberInfo>> references);
}
public class DevExpress.Xpo.Helpers.ChangesSet`1 : ChangesSetBase {
    public ChangesSet`1(XPDictionary dictionary);
    public void Patch(Session session, TModel original);
    public void Put(Session session, TModel original);
}
public abstract class DevExpress.Xpo.Helpers.ChangesSetBase : object {
    private XPClassInfo classInfo;
    private IDictionary`2<string, object> data;
    public ChangesSetBase(XPClassInfo classInfo);
    internal XPClassInfo GetClassInfo();
    public bool TryGetPropertyValue(string propertyName, Object& value);
    public bool TryGetKeyPropertyValue(Object& value);
    public bool TrySetPropertyValue(string propertyName, object value);
    public bool TryGetPropertyType(string propertyName, Type& type);
    public bool TryGetMemberInfo(string propertyName, XPMemberInfo& memberInfo);
    public String[] GetChangedPropertyNames();
    protected void PatchCore(Session session, object original);
    protected void PutCore(Session session, object original);
    private static void FillCollection(Session session, IList collection, XPMemberInfo mi, IEnumerable value);
    private static object GetDefaultValue(Type valueType);
}
public class DevExpress.Xpo.Helpers.ChangesSetJsonConverter`1 : JsonConverter`1<TImpl> {
    private static string SpecialPropertyODataType;
    private XPDictionary dictionary;
    public ChangesSetJsonConverter`1(XPDictionary dictionary);
    private static Type GetModelType(Type changeSetType);
    protected virtual void ValidateMemberInfo(XPMemberInfo xpMemberInfo);
    public virtual TImpl Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, TImpl value, JsonSerializerOptions options);
    private TImpl CreateChangesSet();
}
public class DevExpress.Xpo.Helpers.ChangesSetJsonConverterFactory : JsonConverterFactory {
    private IServiceProvider serviceProvider;
    public ChangesSetJsonConverterFactory(IServiceProvider serviceProvider);
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
}
public class DevExpress.Xpo.Helpers.ClassMetadataHelper : object {
    internal static PropertyDescriptorCollection GetItemProperties(ItemProperties props, PropertyDescriptor[] listAccessors);
    private static XPPropertyDescriptorCollection GetDescriptorCollection(ItemProperties props, XPMemberInfo mem, XPClassInfo info);
    private static XPMemberInfo GetMember(IXPDictionaryProvider dictionary, PropertyDescriptor prop);
    private static XPClassInfo GetMemberType(IXPDictionaryProvider dictionary, PropertyDescriptor[] listAccessors);
    public static string GetListName(PropertyDescriptor[] listAccessors);
    private static bool IsGoodDefaultProperty(XPMemberInfo mi);
    public static StringCollection GetDefaultDisplayableProperties(XPClassInfo objectInfo);
}
public class DevExpress.Xpo.Helpers.ClonerHelper : object {
    private IDictionary Mapping;
    private Session Src;
    private Session Dst;
    private ClonerHelper(Session src, Session dst);
    private object Clone(object proto);
    public static object Clone(Session sourceSession, object sourceObject, Session destinationSession);
    public static object Clone(IXPSimpleObject sourceObject, Session destinationSession);
    public static IDictionary Clone(Session sourceSession, Session destinationSession, ICollection[] prototypes);
    public static IDictionary Clone(Session sourceSession, Session destinationSession, XPClassInfo[] prototypes);
    public static IDictionary Clone(Session sourceSession, Session destinationSession, Type[] prototypes);
}
public class DevExpress.Xpo.Helpers.CollectionClonerHelper : object {
    public static XPBaseCollection Clone(XPBaseCollection source, Session destination);
    public static object Clone(Session srcSession, object obj, Session dstSession);
}
public class DevExpress.Xpo.Helpers.ComplexityAnalyzer : ContextClientCriteriaVisitorBase`1<int> {
    private XPClassInfo xpObjectTypeClassInfo;
    private XPClassInfo XPObjectTypeClassInfo { get; }
    public ComplexityAnalyzer(XPClassInfo classInfo);
    public ComplexityAnalyzer(XPClassInfo[] upLevels);
    public virtual int Process(CriteriaOperator criteria);
    public int ProcessFixProperty(CriteriaOperator criteria);
    public static int Analyze(XPClassInfo classInfo, CriteriaOperator criteria);
    public static int Analyze(XPClassInfo[] upLevels, CriteriaOperator criteria);
    public static int Analyze(AnalyzeNodePathItem[] path);
    public virtual int VisitInternalJoinOperand(int conditionResult, int agregatedResult, Aggregate aggregateType);
    public virtual int VisitInternalJoinOperand(int conditionResult, IEnumerable`1<int> agregatedResult, string customAggregateName);
    public virtual int VisitInternalAggregate(int collectionPropertyResult, int aggregateResult, Aggregate aggregateType, int conditionResult);
    public virtual int VisitInternalAggregate(int collectionPropertyResult, IEnumerable`1<int> aggregateResult, string customAggregateName, int conditionResult);
    public virtual int VisitInternalFunction(FunctionOperator theOperator);
    public virtual int VisitInternalUnary(UnaryOperator theOperator);
    public virtual int VisitInternalBetween(BetweenOperator theOperator);
    public virtual int VisitInternalInOperator(InOperator theOperator);
    public virtual int VisitInternalBinary(int leftResult, int rightResult, BinaryOperatorType operatorType);
    private XPClassInfo get_XPObjectTypeClassInfo();
    public virtual int VisitInternalProperty(string propertyName);
    public virtual int VisitInternalOperand(object value);
    public virtual int VisitInternalGroup(GroupOperatorType operatorType, List`1<int> results);
    public int ProcessOperands(CriteriaOperatorCollection operands);
}
[XmlRootAttribute("DevExpressXpoGeneratorSettings")]
public class DevExpress.Xpo.Helpers.ConnectionPageSettings : object {
    private string providerKey;
    private Dictionary`2<string, string> paramDict;
    [XmlAttributeAttribute("providerKey")]
public string ProviderKey { get; public set; }
    [XmlIgnoreAttribute]
public Dictionary`2<string, string> ParamDict { get; }
    [XmlArrayAttribute("parameter")]
public ConnectionPageSettingsItem[] Parameters { get; public set; }
    public ConnectionPageSettings(string providerKey, Dictionary`2<string, string> paramDict);
    public string get_ProviderKey();
    public void set_ProviderKey(string value);
    public Dictionary`2<string, string> get_ParamDict();
    public ConnectionPageSettingsItem[] get_Parameters();
    public void set_Parameters(ConnectionPageSettingsItem[] value);
}
public static class DevExpress.Xpo.Helpers.ConnectionParameter : object {
    private static string GenerateConnectionHelperParameterName;
    public static Dictionary`2<string, string> GetParamsDict(IConnectionPage connPage);
    public static void SetParamsDict(string providerKey, Dictionary`2<string, string> paramDict, IConnectionPage connPage);
    private static ConnectionPageSettings GetSettings(IConnectionPage connPage);
    public static void SetSettings(ConnectionPageSettings settings, IConnectionPage connPage);
    public static void TryToLoadSettingsFromBase64(IConnectionPage connPage, string base64String);
    public static void TryToLoadSettings(IConnectionPage connPage, Stream stream);
    public static string SaveSettingsToBase64(IConnectionPage connPage);
    public static void SaveSettings(IConnectionPage connPage, Stream stream);
}
public class DevExpress.Xpo.Helpers.ConstantCompiler : RefCompiler {
    private Expression e;
    private Func`1<object> expression;
    public Expression Expression { get; }
    public object Value { get; }
    public ConstantCompiler(XPDictionary dictionary, Expression expression);
    public Expression get_Expression();
    private object GetBaseValue();
    public virtual object get_Value();
}
public class DevExpress.Xpo.Helpers.ConstantDescriptor : EvaluatorContextDescriptor {
    public static EvaluatorContextDescriptor Instance;
    private static ConstantDescriptor();
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual IEnumerable GetQueryContexts(object source, string queryTypeName, CriteriaOperator condition, int top);
}
public abstract class DevExpress.Xpo.Helpers.ContextClientCriteriaVisitorBase`1 : object {
    private ContextState<T> currentState;
    private bool hasJoinOperand;
    private int hasJoinOperandOnStack;
    private Stack`1<ContextState<T>> stateStack;
    protected XPClassInfo CurrentClassInfo { get; }
    protected int InAtomOperation { get; }
    protected bool IsInJoinOperand { get; }
    protected bool HasJoinOperandOnStack { get; }
    public bool HasJoinOperand { get; }
    public ContextClientCriteriaVisitorBase`1(XPClassInfo currentClassInfo);
    public ContextClientCriteriaVisitorBase`1(XPClassInfo[] upLevelsClassInfo);
    protected XPClassInfo get_CurrentClassInfo();
    protected int get_InAtomOperation();
    protected bool get_IsInJoinOperand();
    protected bool get_HasJoinOperandOnStack();
    public bool get_HasJoinOperand();
    public abstract virtual T Process(CriteriaOperator criteria);
    public List`1<T> ProcessCollection(CriteriaOperatorCollection operands);
    public abstract virtual T VisitInternalJoinOperand(T conditionResult, T agregatedResult, Aggregate aggregateType);
    public virtual T VisitInternalJoinOperand(T conditionResult, IEnumerable`1<T> agregatedResult, string customAggregateName);
    public abstract virtual T VisitInternalFunction(FunctionOperator theOperator);
    public abstract virtual T VisitInternalProperty(string propertyName);
    public abstract virtual T VisitInternalAggregate(T collectionPropertyResult, T aggregateResult, Aggregate aggregateType, T conditionResult);
    public virtual T VisitInternalAggregate(T collectionPropertyResult, IEnumerable`1<T> aggregateResult, string customAggregateName, T conditionResult);
    public abstract virtual T VisitInternalInOperator(InOperator theOperator);
    public abstract virtual T VisitInternalUnary(UnaryOperator theOperator);
    public abstract virtual T VisitInternalBetween(BetweenOperator theOperator);
    public abstract virtual T VisitInternalGroup(GroupOperatorType operatorType, List`1<T> results);
    public abstract virtual T VisitInternalBinary(T left, T right, BinaryOperatorType operatorType);
    public abstract virtual T VisitInternalOperand(object value);
    public sealed virtual T Visit(JoinOperand theOperand);
    public sealed virtual T Visit(OperandValue theOperand);
    public sealed virtual T Visit(OperandProperty theOperand);
    public sealed virtual T Visit(AggregateOperand theOperand);
    public sealed virtual T Visit(FunctionOperator theOperator);
    public sealed virtual T Visit(GroupOperator theOperator);
    public sealed virtual T Visit(InOperator theOperator);
    public sealed virtual T Visit(UnaryOperator theOperator);
    public sealed virtual T Visit(BinaryOperator theOperator);
    public sealed virtual T Visit(BetweenOperator theOperator);
}
public class DevExpress.Xpo.Helpers.CriteriaToDifferentSession : ClientCriteriaVisitorBase {
    protected Session Session;
    private CriteriaToDifferentSession(Session target);
    protected virtual CriteriaOperator Visit(OperandValue theOperand);
    public static CriteriaOperator Rebase(Session targetSession, CriteriaOperator criteria);
}
public class DevExpress.Xpo.Helpers.DataLayerWrapperS18452 : object {
    public IDataLayer Nested;
    private ICommandChannel nestedCommandChannel;
    private ICommandChannelAsync nestedCommandChannelAsync;
    protected IDisposable[] ToDispose;
    public IDbConnection Connection { get; }
    public AutoCreateOption AutoCreateOption { get; }
    public IDataLayer DataLayer { get; }
    public XPDictionary Dictionary { get; }
    public DataLayerWrapperS18452(IDataLayer nested, IDisposable[] toDispose);
    public sealed virtual void ClearDatabase();
    private IDataLayerAsync GetNestedDataLayerAsync();
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public sealed virtual SelectedData SelectData(SelectStatement[] selects);
    public sealed virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    public sealed virtual void add_SchemaInit(SchemaInitEventHandler value);
    public sealed virtual void remove_SchemaInit(SchemaInitEventHandler value);
    public sealed virtual IDbConnection get_Connection();
    public sealed virtual IDbCommand CreateCommand();
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public sealed virtual void Dispose();
    public sealed virtual IDataLayer get_DataLayer();
    public sealed virtual XPDictionary get_Dictionary();
    public sealed virtual void SetDataLayerWideData(object key, object data);
    public sealed virtual object GetDataLayerWideData(object key);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    public sealed virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public sealed virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
}
internal class DevExpress.Xpo.Helpers.DefaultComparer : object {
    public static int Compare(object a, object b);
}
[ToolboxItemAttribute("False")]
public class DevExpress.Xpo.Helpers.DefaultSession : Session {
    public XPDictionary Dictionary { get; }
    public DefaultSession(ISite site);
    public virtual XPDictionary get_Dictionary();
}
internal class DevExpress.Xpo.Helpers.DownLevelReprocessor : object {
    private Dictionary`2<JoinOperandInfo, bool> joinOperandList;
    public Dictionary`2<JoinOperandInfo, bool> JoinOperandList { get; }
    public Dictionary`2<JoinOperandInfo, bool> get_JoinOperandList();
    public static CriteriaOperator Reprocess(CriteriaOperator criteria, Dictionary`2& joinOperandList);
    public CriteriaOperator Process(CriteriaOperator criteria);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(JoinOperand theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(AggregateOperand theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandProperty theOperand);
    private void ProcessOperands(CriteriaOperatorCollection newCollection, CriteriaOperatorCollection oldCollection);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(FunctionOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandValue theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(GroupOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(InOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(UnaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BinaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BetweenOperator theOperator);
}
internal class DevExpress.Xpo.Helpers.EnumerableWrapper`1 : object {
    private IEnumerable`1<T> parent;
    public EnumerableWrapper`1(IEnumerable`1<T> parent);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
}
public class DevExpress.Xpo.Helpers.EvaluatorContextDescriptorXpoStub : EvaluatorContextDescriptor {
    private XPObjectClassInfoStubCache ciCache;
    public EvaluatorContextDescriptorXpoStub(IXPDictionaryProvider dictionaryProvider);
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual IEnumerable GetQueryContexts(object source, string queryTypeName, CriteriaOperator condition, int top);
}
public class DevExpress.Xpo.Helpers.ExpandedCriteriaHolder : object {
    public static CriteriaOperator AlwaysFalseCriteria;
    public CriteriaOperator ExpandedCriteria;
    public string PostProcessingCause;
    public bool IsConstant;
    private static CriteriaOperator NullOperandValue;
    public static ExpandedCriteriaHolder True;
    public static ExpandedCriteriaHolder False;
    public bool RequiresPostProcessing { get; }
    public bool IsTrue { get; }
    public bool IsFalse { get; }
    public bool IsNullValue { get; }
    public ExpandedCriteriaHolder(CriteriaOperator expandedCriteria);
    public ExpandedCriteriaHolder(CriteriaOperator expandedCriteria, string postProcessingCause);
    public ExpandedCriteriaHolder(CriteriaOperator expandedCriteria, bool isConstant);
    public ExpandedCriteriaHolder(CriteriaOperator expandedCriteria, string postProcessingCause, bool isConstant);
    private static ExpandedCriteriaHolder();
    public bool get_RequiresPostProcessing();
    public bool get_IsTrue();
    public bool get_IsFalse();
    public bool get_IsNullValue();
    public static ExpandedCriteriaHolder Indeterminate(string causeProperty);
    public static ExpandedCriteriaHolder Indeterminate(OperandProperty indeterminateProperty);
    public static ExpandedCriteriaHolder TryConvertToLogicalConstant(CriteriaOperator operand, bool isConstantIfFail);
    public static CriteriaOperator IfNeededConvertToLogicalOperator(CriteriaOperator operand);
    public static Lazy`1<CriteriaOperator> IfNeededConvertToLogicalOperator(Lazy`1<CriteriaOperator> operand);
    public static Lazy`1<CriteriaOperator> IfNeededConvertToBoolOperator(Lazy`1<CriteriaOperator> operand);
    public static CriteriaOperator IfNeededConvertToBoolOperator(CriteriaOperator operand);
    public static ExpandedCriteriaHolder IfNeededConvertToLogicalHolder(ExpandedCriteriaHolder holder);
    public static ExpandedCriteriaHolder IfNeededConvertToBoolHolder(ExpandedCriteriaHolder holder);
}
public class DevExpress.Xpo.Helpers.ExpressionAccessOperator : CriteriaOperator {
    public Expression LinqExpression;
    public bool InsertFirstNull;
    public CriteriaOperator[] SourceItems;
    private Type[] cachedSourceTypes;
    public ExpressionAccessOperator(Expression linqExpression, CriteriaOperator[] sourceItems);
    public ExpressionAccessOperator(Expression linqExpression, bool insertFirstNull, CriteriaOperator[] sourceItems);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    protected virtual CriteriaOperator CloneCommon();
    private Type GetSourceType(CriteriaTypeResolver resolver, CriteriaOperator prop);
    public Type[] GetSourceTypes(Type type, CriteriaTypeResolver resolver);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Xpo.Helpers.FailedToReverseOperator : CriteriaOperator {
    private Exception ex;
    public Exception Ex { get; }
    public FailedToReverseOperator(Exception ex);
    public Exception get_Ex();
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    protected virtual CriteriaOperator CloneCommon();
}
public class DevExpress.Xpo.Helpers.FieldsClassBase : OperandProperty {
    public FieldsClassBase(string propertyName);
    protected string GetNestedName(string nestedPropertyName);
}
public class DevExpress.Xpo.Helpers.FreeQuerySet : QuerySet {
    public Type JoinType;
    private JoinOperandInfo MasterJoin;
    private List`1<FreeJoinPair> MasterJoinEqualsOperands;
    public bool HasMasterJoin { get; }
    public FreeQuerySet(Type joinType, CriteriaOperator upLevelOperand, CriteriaOperator operand);
    public FreeQuerySet(Type joinType, CriteriaOperator upLevelOperand, CriteriaOperator operand, CriteriaOperator condition);
    public FreeQuerySet(Type joinType, CriteriaOperator condition);
    public bool get_HasMasterJoin();
    public virtual CriteriaOperator CreateCriteriaOperator(CriteriaOperator condition, CriteriaOperator expression, Aggregate aggregateType);
    public virtual CriteriaOperator CreateCriteriaOperator(CriteriaOperator condition, IEnumerable`1<CriteriaOperator> expressions, string customAggregateName);
    private static GroupOperator GetGroup(CriteriaOperator condition, List`1<FreeJoinPair> joinOperands);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    protected virtual CriteriaOperator CloneCommon();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class DevExpress.Xpo.Helpers.GetObjectsHelper : object {
    public static ICollection GetObjectsFromData(Session session, XPClassInfo classInfo, List`1<XPMemberInfo> memberInfos, LoadDataMemberOrderItem[] membersOrder, SelectedData sprocResultData, Dictionary`2<XPMemberInfo, int> referenceIndexDict);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.GetObjectsHelper/<GetObjectsFromDataAsync>d__1")]
public static Task`1<ICollection> GetObjectsFromDataAsync(Session session, XPClassInfo classInfo, List`1<XPMemberInfo> memberInfos, LoadDataMemberOrderItem[] membersOrder, SelectedData sprocResultData, Dictionary`2<XPMemberInfo, int> referenceIndexDict, CancellationToken cancellationToken);
    private static ICollection GetObjectsFromDataCore(Session session, XPClassInfo classInfo, List`1<XPMemberInfo> memberInfos, LoadDataMemberOrderItem[] membersOrder, SelectedData sprocResultData, Dictionary`2<XPMemberInfo, int> referenceIndexDict, List`1[]& referenceKeyList, List`1& primaryObjects);
    private static ObjectsByKeyQuery[] BeginLoadReferenceObjects(Dictionary`2<XPMemberInfo, int> referenceIndexDict, List`1[] referenceKeyList);
    private static void EndLoadReferenceObjects(Dictionary`2<XPMemberInfo, int> referenceIndexDict, ICollection[] referenceObjects, List`1<object> primaryObjects);
    public static object ChangeDbTypeToMemberType(object value, Type memberType);
}
internal class DevExpress.Xpo.Helpers.GetTimeOfDayValueFinder : object {
    private static GetTimeOfDayValueFinder instance;
    private static GetTimeOfDayValueFinder();
    public static bool TryToFind(CriteriaOperator criteria);
    private bool Process(CriteriaOperator criteria);
    private sealed virtual override bool DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Boolean>.Visit(JoinOperand theOperand);
    private sealed virtual override bool DevExpress.Data.Filtering.ICriteriaVisitor<System.Boolean>.Visit(BinaryOperator theOperator);
    private sealed virtual override bool DevExpress.Data.Filtering.ICriteriaVisitor<System.Boolean>.Visit(InOperator theOperator);
    private sealed virtual override bool DevExpress.Data.Filtering.ICriteriaVisitor<System.Boolean>.Visit(OperandValue theOperand);
    private sealed virtual override bool DevExpress.Data.Filtering.ICriteriaVisitor<System.Boolean>.Visit(FunctionOperator theOperator);
    private sealed virtual override bool DevExpress.Data.Filtering.ICriteriaVisitor<System.Boolean>.Visit(GroupOperator theOperator);
    private sealed virtual override bool DevExpress.Data.Filtering.ICriteriaVisitor<System.Boolean>.Visit(UnaryOperator theOperator);
    private sealed virtual override bool DevExpress.Data.Filtering.ICriteriaVisitor<System.Boolean>.Visit(BetweenOperator theOperator);
    private sealed virtual override bool DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Boolean>.Visit(OperandProperty theOperand);
    private sealed virtual override bool DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Boolean>.Visit(AggregateOperand theOperand);
}
public class DevExpress.Xpo.Helpers.GroupSet : QuerySet {
    public CriteriaOperator Key;
    public GroupSet(MemberInitOperator projection, CriteriaOperator key);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    protected virtual CriteriaOperator CloneCommon();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public interface DevExpress.Xpo.Helpers.IAnalyzeCriteriaVisitor`1 {
    public abstract virtual T Visit(AnalyzeOperator criteria);
}
public interface DevExpress.Xpo.Helpers.IConnectionPage {
    public bool IsServerbased { get; }
    public ProviderFactory Factory { get; }
    public string FileName { get; public set; }
    public string UserName { get; public set; }
    public bool GenerateConnectionHelper { get; }
    public string ServerName { get; public set; }
    public string DatabaseName { get; public set; }
    public bool AuthType { get; public set; }
    public string Password { get; public set; }
    public string CustomConStrTag { get; }
    public string CustomConStr { get; }
    public bool CeConnectionHelper { get; public set; }
    public string LastConStr { get; public set; }
    public abstract virtual bool get_IsServerbased();
    public abstract virtual ProviderFactory get_Factory();
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
    public abstract virtual string get_UserName();
    public abstract virtual void set_UserName(string value);
    public abstract virtual bool get_GenerateConnectionHelper();
    public abstract virtual string get_ServerName();
    public abstract virtual void set_ServerName(string value);
    public abstract virtual string get_DatabaseName();
    public abstract virtual void set_DatabaseName(string value);
    public abstract virtual bool get_AuthType();
    public abstract virtual void set_AuthType(bool value);
    public abstract virtual string get_Password();
    public abstract virtual void set_Password(string value);
    public abstract virtual string get_CustomConStrTag();
    public abstract virtual string get_CustomConStr();
    public abstract virtual void SetProvider(string providerKey);
    public abstract virtual bool get_CeConnectionHelper();
    public abstract virtual void set_CeConnectionHelper(bool value);
    public abstract virtual string get_LastConStr();
    public abstract virtual void set_LastConStr(string value);
}
public interface DevExpress.Xpo.Helpers.IConnectionPageEx {
    public abstract virtual Dictionary`2<string, object> GetParameters();
    public abstract virtual object GetParameterValue(string parameterName);
    public abstract virtual void SetParameterValue(string parameterName, object parameterValue);
}
public interface DevExpress.Xpo.Helpers.IDataLayerForTests {
    public abstract virtual void ClearDatabase();
}
public interface DevExpress.Xpo.Helpers.IDataLayerProvider {
    public IDataLayer DataLayer { get; }
    public abstract virtual IDataLayer get_DataLayer();
}
[CollectionDataContractAttribute]
public class DevExpress.Xpo.Helpers.IdList : List`1<object> {
    public IdList(ICollection list);
    public virtual bool Equals(object anotherObject);
    public virtual int GetHashCode();
    private sealed virtual override int System.IComparable.CompareTo(object anotherObject);
}
public interface DevExpress.Xpo.Helpers.ILinqExtendedCriteriaVisitor`1 {
    public abstract virtual T Visit(MemberInitOperator theOperand);
    public abstract virtual T Visit(ExpressionAccessOperator theOperand);
    public abstract virtual T Visit(QuerySet theOperand);
}
public class DevExpress.Xpo.Helpers.InOperatorCompiler : InOperator {
    private OperandValue e;
    private XPDictionary dictionary;
    private Func`1<CriteriaOperatorCollection> expression;
    public CriteriaOperatorCollection Operands { get; }
    public InOperatorCompiler(XPDictionary dictionary, CriteriaOperator leftOperand, OperandValue expression);
    private CriteriaOperatorCollection GetBaseOperands();
    public virtual CriteriaOperatorCollection get_Operands();
    [CompilerGeneratedAttribute]
private CriteriaOperatorCollection <.ctor>b__3_0();
    [CompilerGeneratedAttribute]
private CriteriaOperatorCollection <get_Operands>b__7_0();
}
public class DevExpress.Xpo.Helpers.InTransactionLoader : object {
    private Session session;
    private VirtualAsyncRequest mainRequest;
    private InTransactionMode currentMode;
    private InTransactionState currentState;
    private ICollection objectsToSave;
    private ICollection objectsToDelete;
    private AsyncLoadObjectsCallback loadObjectsCallback;
    private AsyncSelectDataCallback selectDataCallback;
    private SelectDataState selectDataState;
    private LoadObjectsState loadObjectsState;
    private GetOriginalObjectsState getOriginalObjectsState;
    private ObjectsQuery[] queriesForExecute;
    private ICollection[] queriesForExecuteResult;
    private Nullable`1<bool> caseSensitive;
    public bool CaseSensitive { get; }
    private bool IsSelectDataMode { get; }
    private IServiceProvider DevExpress.Xpo.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    private InTransactionLoader(Session session);
    private InTransactionLoader(Session session, bool caseSensitive);
    public sealed virtual bool get_CaseSensitive();
    private bool get_IsSelectDataMode();
    public static ICollection[] GetObjects(Session session, ObjectsQuery[] queries);
    public static ICollection[] GetObjects(Session session, ObjectsQuery[] queries, bool caseSensitive);
    public static object GetObjectsAsync(Session session, ObjectsQuery[] queries, AsyncLoadObjectsCallback callback);
    public static object GetObjectsAsync(Session session, ObjectsQuery[] queries, AsyncLoadObjectsCallback callback, bool caseSensitive);
    public static Task`1<ICollection[]> GetObjectsAsync(Session session, ObjectsQuery[] queries, CancellationToken cancellationToken);
    public static Task`1<ICollection[]> GetObjectsAsync(Session session, ObjectsQuery[] queries, bool caseSensitive, CancellationToken cancellationToken);
    public static List`1<Object[]> SelectData(Session session, XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    public static List`1<Object[]> SelectData(Session session, XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, bool caseSensitive);
    public static object SelectDataAsync(Session session, XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, AsyncSelectDataCallback callback);
    public static object SelectDataAsync(Session session, XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, AsyncSelectDataCallback callback, bool caseSensitive);
    public static Task`1<List`1<Object[]>> SelectDataAsync(Session session, XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    public static Task`1<List`1<Object[]>> SelectDataAsync(Session session, XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, bool caseSensitive, CancellationToken cancellationToken);
    public ICollection[] GetObjects(ObjectsQuery[] queries);
    public object GetObjectsAsync(ObjectsQuery[] queries, AsyncLoadObjectsCallback callback);
    public Task`1<ICollection[]> GetObjectsAsync(ObjectsQuery[] queries, CancellationToken cancellationToken);
    public List`1<Object[]> SelectData(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    public object SelectDataAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, AsyncSelectDataCallback callback);
    public Task`1<List`1<Object[]>> SelectDataAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    private void Process();
    private void ProcessAsync();
    private void ExecDirectSelectData();
    private void ExecQueries(ObjectsQuery[] query, InTransactionState stateAfterExecute);
    private ObjectsQuery GetQueryForSelectData(XPClassInfo classInfo, CriteriaOperator criteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    private void StateSelectData(ObjectsQuery originalQuery, XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    private void StateQuery(ObjectsQuery[] queries, ObjectsQuery[] originalQueries);
    private void StateNextQuery();
    private void StateSelectDataReturnResult(List`1<Object[]> result);
    private void ProcessSelectDataPostProcessing();
    private List`1<Object[]> ProcessPostProcessingGrouped();
    private static Object[] GetResultRow(object obj, Func`2[] evaluators);
    private List`1<Object[]> ProcessPostProcessingNormal();
    private void ProcessSelectDataReturnResult();
    private void ProcessReturnResult();
    private void ProcessException(Exception ex);
    private void ProcessAfterAnalyzeQueryDirectGetObjects();
    private void ProcessAfterAnalyzeQueryNullCriteria();
    private ObjectsQuery SanitizeQuery(ObjectsQuery query);
    private void ProcessAnalyzeAndExecQuery();
    public static String[] GetModifiedNodes(Session session, ICollection objectsToSave, ICollection objectsToDelete, ObjectsQuery objectsQuery, AnalyzeResult& analyzeResult);
    private void SaveCurrentResult(ICollection result, CriteriaOperator actualCondition);
    private void ProcessGetOriginalObjects();
    private void StateNextGetOriginalPathItem(ICollection nextCollection);
    private void ProcessAfterGetOriginalObjectsThroughtCollection();
    private ICollection FilterObjects(XPClassInfo classInfo, ICollection objects, CriteriaOperator filterCriteria, bool selectDeleted);
    private ICollection FilterObjects(XPClassInfo classInfo, ICollection objects, CriteriaOperator filterCriteria, SortingCollection sorting, int skipRecords, int topRecords, bool selectDeleted);
    private static void TryCollectObjectsFromIntermediateClass(object theObject, ObjectSet preparedResult, Session session, XPClassInfo currentClassInfo, bool selectDeleted);
    private ICollection ReSort(ICollection rows, XPClassInfo classInfo, SortingCollection sorting);
    private Func`2<object, object> PrepareDataEvaluator(CriteriaOperator operand, CriteriaCompilerDescriptor descriptor);
    private Func`2<object, bool> PrepareDataPredicate(CriteriaOperator operand, CriteriaCompilerDescriptor descriptor);
    private Func`2[] PrepareDataEvaluators(CriteriaOperatorCollection operands, CriteriaCompilerDescriptor descriptor);
    private SelectDataSortingListComparer PrepareSortingComparer(SortingCollection sortProperties, XPClassInfo classInfo);
    public sealed virtual object ExtractPersistentValue(object criterionValue);
    private sealed virtual override IServiceProvider DevExpress.Xpo.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    [CompilerGeneratedAttribute]
private void <ProcessAsync>b__41_0(object obj);
    [CompilerGeneratedAttribute]
private void <ProcessAsync>b__41_1(object o);
    [CompilerGeneratedAttribute]
private void <ExecDirectSelectData>b__42_0(List`1<Object[]> result, Exception ex);
    [CompilerGeneratedAttribute]
private void <ExecQueries>b__43_0(ICollection[] result, Exception ex);
}
public interface DevExpress.Xpo.Helpers.IObjectChange {
    public abstract virtual void OnObjectChanged(object sender, ObjectChangeEventArgs args);
}
public interface DevExpress.Xpo.Helpers.IObjectLayerForTests {
    public abstract virtual void ClearDatabase();
}
public interface DevExpress.Xpo.Helpers.IObjectLayerProvider {
    public IObjectLayer ObjectLayer { get; }
    public abstract virtual IObjectLayer get_ObjectLayer();
}
public interface DevExpress.Xpo.Helpers.IObjectMap {
    public abstract virtual void Add(object theObject, object id);
    public abstract virtual object Get(object id);
    public abstract virtual void Remove(object id);
    public abstract virtual int CompactCache();
    public abstract virtual void ClearCache();
}
public interface DevExpress.Xpo.Helpers.IPersistentInterface`1 {
    public IPersistentInterfaceData`1<T> PersistentInterfaceData { get; }
    public abstract virtual IPersistentInterfaceData`1<T> get_PersistentInterfaceData();
}
public interface DevExpress.Xpo.Helpers.IPersistentInterfaceData`1 {
    public T Instance { get; }
    public abstract virtual T get_Instance();
}
public interface DevExpress.Xpo.Helpers.IPersistentValueExtractor {
    public bool CaseSensitive { get; }
    public abstract virtual object ExtractPersistentValue(object criterionValue);
    public abstract virtual bool get_CaseSensitive();
}
public interface DevExpress.Xpo.Helpers.ISerializableObjectLayerProvider {
    public ISerializableObjectLayer ObjectLayer { get; }
    public abstract virtual ISerializableObjectLayer get_ObjectLayer();
}
public interface DevExpress.Xpo.Helpers.ISessionProvider {
    public Session Session { get; }
    public abstract virtual Session get_Session();
}
public class DevExpress.Xpo.Helpers.IsTopLevelAggregateCheckerClient : object {
    public sealed virtual bool Visit(AggregateOperand theOperand);
    public sealed virtual bool Visit(JoinOperand theOperand);
    public sealed virtual bool Visit(OperandProperty theOperand);
    public sealed virtual bool Visit(FunctionOperator theOperator);
    public sealed virtual bool Visit(OperandValue theOperand);
    public sealed virtual bool Visit(GroupOperator theOperator);
    public sealed virtual bool Visit(InOperator theOperator);
    public sealed virtual bool Visit(UnaryOperator theOperator);
    public sealed virtual bool Visit(BinaryOperator theOperator);
    public sealed virtual bool Visit(BetweenOperator theOperator);
    private bool Process(IEnumerable ops);
    private bool Process(CriteriaOperator op);
    public static bool IsTopLevelAggregate(CriteriaOperator op);
}
public interface DevExpress.Xpo.Helpers.IWideDataStorage {
    public abstract virtual bool WideDataContainsKey(object key);
    public abstract virtual void SetWideDataItem(object key, object value);
    public abstract virtual object GetWideDataItem(object key);
    public abstract virtual bool TryGetWideDataItem(object key, Object& value);
}
public interface DevExpress.Xpo.Helpers.IXPAssociationList {
}
public interface DevExpress.Xpo.Helpers.IXPBulkLoadableCollection {
    public abstract virtual ObjectsQuery BeginLoad();
    public abstract virtual void EndLoad(IEnumerable queriedObjects);
}
public interface DevExpress.Xpo.Helpers.IXPClassInfoAndSessionProvider {
}
public interface DevExpress.Xpo.Helpers.IXPClassInfoProvider {
    public XPClassInfo ClassInfo { get; }
    public abstract virtual XPClassInfo get_ClassInfo();
}
public interface DevExpress.Xpo.Helpers.IXPImmutableHashCode {
    public abstract virtual int GetImmutableHashCode();
}
public interface DevExpress.Xpo.Helpers.IXpoServerModeGridDataSource {
    public abstract virtual void SetFixedCriteria(CriteriaOperator fixedCriteria);
}
public interface DevExpress.Xpo.Helpers.IXPOServiceClass {
}
public interface DevExpress.Xpo.Helpers.IXPPrefetchableAssociationList {
    public abstract virtual bool NeedPrefetch();
    public abstract virtual void FinishPrefetch(ICollection hint);
}
public interface DevExpress.Xpo.Helpers.IXPUnloadableAssociationList {
    public bool IsLoaded { get; }
    public abstract virtual bool get_IsLoaded();
    public abstract virtual void Unload();
}
public class DevExpress.Xpo.Helpers.JoinOperandExpander : ClientCriteriaVisitorBase {
    private JoinOperandExpanderState currentState;
    private Stack`1<JoinOperandExpanderState> stateStack;
    private static object objectZero;
    public JoinOperandExpander(XPClassInfo currentClassInfo);
    public JoinOperandExpander(XPClassInfo[] upLevelsClassInfo);
    private static JoinOperandExpander();
    public static CriteriaOperator Expand(XPClassInfo currentClassInfo, CriteriaOperator criteria);
    public static CriteriaOperator Expand(XPClassInfo[] upLevelsClassInfo, CriteriaOperator criteria);
    protected virtual CriteriaOperator Visit(JoinOperand theOperand);
    protected virtual CriteriaOperator Visit(OperandProperty theOperand);
    protected virtual CriteriaOperator Visit(AggregateOperand theOperand, bool processCollectionProperty);
    protected virtual CriteriaOperator Visit(FunctionOperator theOperator);
    protected virtual CriteriaOperator Visit(GroupOperator theOperator);
    protected virtual CriteriaOperator Visit(InOperator theOperator);
    protected virtual CriteriaOperator Visit(UnaryOperator theOperator);
    protected virtual CriteriaOperator Visit(BinaryOperator theOperatorArg);
    protected virtual CriteriaOperator Visit(BetweenOperator theOperator);
}
internal class DevExpress.Xpo.Helpers.JoinOperandInfo : object {
    public Aggregate AggregateType;
    public string CustomAggregateName;
    public CriteriaOperator Condition;
    public string JoinTypeName;
    private JoinOperandInfo(string joinTypeName, CriteriaOperator condition, Aggregate aggregateType, string customAggregateName);
    public JoinOperandInfo(string joinTypeName, CriteriaOperator condition, Aggregate aggregateType);
    public JoinOperandInfo(string joinTypeName, CriteriaOperator condition, string customAggregateName);
    public JoinOperandInfo(JoinOperand joinOperand);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class DevExpress.Xpo.Helpers.LinkedUniqueQueue`1 : object {
    private Dictionary`2<T, LinkedQueueItem<T>> linksDictionary;
    private LinkedQueueItem<T> head;
    private LinkedQueueItem<T> tail;
    public int Count { get; }
    public bool EnqueueItem(T data);
    public bool DequeueItem(T& data);
    public bool Remove(T data);
    public bool Contains(T data);
    public int get_Count();
}
internal class DevExpress.Xpo.Helpers.ListHelper : object {
    public static List`1<object> FromCollection(ICollection collection);
    public static List`1<T> FromCollection(ICollection collection);
}
public class DevExpress.Xpo.Helpers.ListMorpher`2 : BaseListMorpher`2<I, T> {
    public ListMorpher`2(IList`1<T> morphed);
    protected virtual I DownCast(T value);
    protected virtual T UpCast(I value);
}
public class DevExpress.Xpo.Helpers.listServerGetTag : object {
    public ResolveSessionEventArgs Args;
    public Session OurSession;
    public XPServerCollectionSource Src;
}
public class DevExpress.Xpo.Helpers.listServerViewGetTag : object {
    public ResolveSessionEventArgs Args;
    public Session OurSession;
    public XPServerModeView View;
}
internal class DevExpress.Xpo.Helpers.LockingHelper : object {
    public static CriteriaOperator GetLockingCriteria(Nullable`1<int> dbVersion, XPMemberInfo optimisticLock);
    private static bool IsPropertyToCheckLocking(OptimisticLockingBehavior option, XPMemberInfo mi, bool isModified);
    public static ObjectGeneratorCriteriaSet GetLockingCriteria(XPClassInfo ci, IEnumerable properties, object theObject, OptimisticLockingBehavior option);
    public static ObjectGeneratorCriteriaSet GetLockingCriteria(XPClassInfo ci, IEnumerable properties, object theObject, OptimisticLockingBehavior option, IList exclude);
    private static void AddLockingPropertyCriteria(object theObject, ObjectGeneratorCriteriaSet result, bool isModified, string tableName, Func`3<XPMemberInfo, object, object> getOldValue, XPMemberInfo memberInfo);
    public static object GetNestedValue(XPClassInfoStub classInfoStub, XPObjectStub obj, int memberIndex, Boolean& isModified);
    private static object GetNestedValue(object theObject, XPMemberInfo mi, bool isModified);
    private static object GetParentValue(object parentObject, XPMemberInfo mi);
    public static bool HasModified(XPClassInfoStub classInfoStub, XPObjectStub obj, IEnumerable properties, object parentObject, OptimisticLockingBehavior option);
    public static bool HasModified(XPClassInfo ci, IEnumerable properties, object theObject, object parentObject, OptimisticLockingBehavior option);
    private static bool BytesAreEquals(Byte[] oldValue, Byte[] newValue);
    public static bool IsModifiedInDataLayer(XPMemberInfo member, object nestedValue, object parentValue);
}
public class DevExpress.Xpo.Helpers.MemberAccessOperator : RefCompiler {
    private static Dictionary`2<MemberInfo, Func`2<object, object>> compiledExpressions;
    private MemberExpression memberExpression;
    private Func`2<object, object> expression;
    public object Value { get; }
    public MemberAccessOperator(MemberExpression expression);
    private static MemberAccessOperator();
    private object GetBaseValue(object value);
    public virtual object get_Value();
    public static Func`2<object, object> GetExpression(MemberInfo member, Type t);
}
public class DevExpress.Xpo.Helpers.MemberInitOperator : CriteriaOperator {
    private ConstructorInfo constructor;
    private Type[] cachedSourceTypes;
    [XmlAttributeAttribute]
public string DeclaringTypeAssemblyName;
    [XmlAttributeAttribute]
public string DeclaringTypeName;
    [XmlAttributeAttribute]
public bool UseConstructor;
    [XmlAttributeAttribute]
public bool CreateNewObject;
    public XPMemberAssignmentCollection Members;
    [EditorBrowsableAttribute("1")]
public static bool EnableUnsafeDeserialization;
    public MemberInitOperator(MemberInitOperator source, XPMemberAssignmentCollection newMembers);
    public MemberInitOperator(string declaringTypeAssemblyName, string declaringTypeName, XPMemberAssignmentCollection members, bool createNewObject);
    public MemberInitOperator(Type declaringType, XPMemberAssignmentCollection members, bool createNewObject);
    public MemberInitOperator(bool useConstructor, XPMemberAssignmentCollection members, ConstructorInfo constructor);
    internal static Type GetMemberType(MemberInfo mi);
    private Type GetDeclaringTypeInternal();
    public Type GetDeclaringType();
    private Type GetSourceType(CriteriaTypeResolver resolver, CriteriaOperator prop);
    public Type[] GetSourceTypes(Type type, CriteriaTypeResolver resolver);
    public ConstructorInfo GetConstructor(Type type);
    public bool TryGetSingleQuerySet(QuerySet& set);
    public bool TryGetSingleProperty(CriteriaOperator& property);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    protected virtual CriteriaOperator CloneCommon();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    internal static MemberInitOperator CreateUntypedMemberInitOperator(CriteriaOperator operand);
}
[EditorBrowsableAttribute("1")]
public class DevExpress.Xpo.Helpers.MemeberAccessOperator : MemberAccessOperator {
}
public class DevExpress.Xpo.Helpers.MergeXmlSerializationHelper : object {
    public static object MergeChanges(UnitOfWork mergeDestination, XPClassInfo classInfo, object originalObject, object changedObject);
    private static object UpdateObject(UnitOfWork mergeDestination, XPClassInfo ci, object mergeObject, object originalObject, object changedObject);
    public static void MergeChanges(UnitOfWork mergeDestination, XPClassInfo classInfo, ICollection originalImages, ICollection changedImages);
    public static object MergeChanges(UnitOfWork mergeDestination, Type objType, object originalObject, object changedObject);
    public static void MergeChanges(UnitOfWork mergeDestination, Type objType, ICollection originalImages, ICollection changedImages);
}
[SecuritySafeCriticalAttribute]
public class DevExpress.Xpo.Helpers.NakedObjectRecord : ObjectRecord {
    private Dictionary`2<XPMemberInfo, object> customPropertyStore;
    private Dictionary`2<XPMemberInfo, object> modificationsStore;
    private Dictionary`2<XPMemberInfo, object> CustomPropertyStore { get; }
    public bool HasCustomPropertyStore { get; }
    internal Dictionary`2<XPMemberInfo, object> ModificationsStore { get; }
    internal bool HasModificationStore { get; }
    public NakedObjectRecord(object theObject);
    private Dictionary`2<XPMemberInfo, object> get_CustomPropertyStore();
    public bool get_HasCustomPropertyStore();
    private sealed virtual override object DevExpress.Xpo.IXPCustomPropertyStore.GetCustomPropertyValue(XPMemberInfo property);
    private sealed virtual override bool DevExpress.Xpo.IXPCustomPropertyStore.SetCustomPropertyValue(XPMemberInfo property, object theValue);
    internal Dictionary`2<XPMemberInfo, object> get_ModificationsStore();
    internal bool get_HasModificationStore();
    private sealed virtual override void DevExpress.Xpo.IXPModificationsStore.ClearModifications();
    private sealed virtual override void DevExpress.Xpo.IXPModificationsStore.SetPropertyModified(XPMemberInfo property, object oldValue);
    private sealed virtual override bool DevExpress.Xpo.IXPModificationsStore.GetPropertyModified(XPMemberInfo property);
    private sealed virtual override object DevExpress.Xpo.IXPModificationsStore.GetPropertyOldValue(XPMemberInfo property);
    private sealed virtual override void DevExpress.Xpo.IXPModificationsStore.ResetPropertyModified(XPMemberInfo property);
    private sealed virtual override bool DevExpress.Xpo.IXPModificationsStore.HasModifications();
}
public abstract class DevExpress.Xpo.Helpers.NestedGuidParentMap : object {
    public abstract virtual void Add(object parent, Guid nestedGuid, bool hasValidKey);
    public abstract virtual object GetParent(Guid nestedGuid);
    public abstract virtual Guid GetNested(object parent);
    public abstract virtual void KickOut(object parent);
    public abstract virtual void KickOut(Guid nestedGuid);
}
public class DevExpress.Xpo.Helpers.NestedLoader : object {
    private Queue`1<ObjectPair> toProcess;
    private NestedParentMap Map;
    private SecurityContext SecurityContext;
    public Session Owner;
    public Session OwnerParent;
    private static Func`2<object, object> ReturnArgument;
    public NestedLoader(Session owner, Session ownerParent, NestedParentMap map, SecurityContext securityContext);
    public NestedLoader(Session owner, Session ownerParent, NestedParentMap map);
    public NestedLoader(NestedUnitOfWork owner);
    private static NestedLoader();
    private void BeginCloneObjects(ObjectDictionary`1<object> processedPairs, List`1<object> toFireLoaded, IDictionary`2<XPClassInfo, ObjectGroup> processed);
    private ObjectGroup GetProcessedGroup(XPClassInfo classInfo, IDictionary`2<XPClassInfo, ObjectGroup> processed);
    private void ProcessObjectPropertiesToCloneObject(object source, ObjectDictionary`1<object> processedPairs);
    private void ProcessCollectionPropertiesToCloneObject(object source, ObjectDictionary`1<object> processedPairs);
    private void EndCloneObjects(IDictionary`2<XPClassInfo, ObjectGroup> processed, ObjectDictionary`1<object> processedPairs);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.NestedLoader/<EndCloneObjectsAsync>d__15")]
private Task EndCloneObjectsAsync(IDictionary`2<XPClassInfo, ObjectGroup> processed, ObjectDictionary`1<object> processedPairs, int asyncOperationId, CancellationToken cancellationToken);
    private void EndCloneObjectsCore(IDictionary`2<XPClassInfo, ObjectGroup> processed, ObjectDictionary`1<object> processedPairs);
    private void CloneData(object source, object destination, OptimisticLockingReadMergeBehavior loadMerge, ObjectDictionary`1<object> processedPairs);
    private object CreateNestedObject(object pObject, bool forceLoad);
    public bool IsObjectVersionChanged(object nestedObject, object parentObject);
    private object GetNestedObjectCore(object parentObject, bool forceLoad);
    public ICollection[] GetNestedObjects(ICollection[] parentObjects);
    public Task`1<ICollection[]> GetNestedObjectsAsync(ICollection[] parentObjects, int asyncOperationId, CancellationToken cancellationToken);
    public ICollection[] GetNestedObjects(ICollection[] parentObjects, Boolean[] force);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.NestedLoader/<GetNestedObjectsAsync>d__25")]
public Task`1<ICollection[]> GetNestedObjectsAsync(ICollection[] parentObjects, Boolean[] force, int asyncOperationId, CancellationToken cancellationToken);
    private ICollection[] GetNestedObjectsCore(ICollection[] parentObjects, Boolean[] force, List`1<object> outObjectsToFireLoaded);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.NestedLoader/<GetNestedObjectsCoreAsync>d__27")]
private Task`1<ICollection[]> GetNestedObjectsCoreAsync(ICollection[] parentObjects, Boolean[] force, List`1<object> outObjectsToFireLoaded, int asyncOperationId, CancellationToken cancellationToken);
    private ICollection[] ProcessParentObjectsForGetNestedObjects(ICollection[] parentObjects, Boolean[] force, List`1<object> outObjectsToFireLoaded);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.NestedLoader/<ProcessParentObjectsForGetNestedObjectsAsync>d__29")]
private Task`1<ICollection[]> ProcessParentObjectsForGetNestedObjectsAsync(ICollection[] parentObjects, Boolean[] force, List`1<object> outObjectsToFireLoaded, int asyncOperationId, CancellationToken cancellationToken);
    private ICollection[] BeginProcessParentObjectsForGetNestedObjects(ICollection[] parentObjects, Boolean[] force, ObjectDictionary`1<object> processedPairs, List`1<object> toFireLoaded, IDictionary`2<XPClassInfo, ObjectGroup> processed);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.NestedLoader/<BeginProcessParentObjectsForGetNestedObjectsAsync>d__31")]
private Task`1<ICollection[]> BeginProcessParentObjectsForGetNestedObjectsAsync(ICollection[] parentObjects, Boolean[] force, ObjectDictionary`1<object> processedPairs, List`1<object> toFireLoaded, IDictionary`2<XPClassInfo, ObjectGroup> processed, int asyncOperationId, CancellationToken cancellationToken);
    private ICollection[] BeginProcessParentObjectsForGetNestedObjectsCore(ICollection[] parentObjects, Boolean[] force, ObjectDictionary`1<object> processedPairs, List`1<object> toFireLoaded, IDictionary`2<XPClassInfo, ObjectGroup> processed);
    private void ProcessObjectsToFireLoadedForGetNestedObjects(IList objectsToFireLoaded);
    public object GetNestedObject(object parentObject);
}
public abstract class DevExpress.Xpo.Helpers.NestedParentGuidMap : object {
    protected NestedParentGuidMap(Session session);
    public static NestedParentMap Extract(NestedUnitOfWork source);
    private void AfterDropIdentityMapHandler(object sender, SessionManipulationEventArgs e);
    public abstract virtual void Add(Guid parentGuid, object nested, bool hasValidKey);
    public abstract virtual Guid GetParent(object nested);
    public abstract virtual object GetNested(Guid parentGuid);
    public abstract virtual void KickOut(object nested);
    public abstract virtual void Clear();
}
public abstract class DevExpress.Xpo.Helpers.NestedParentMap : object {
    protected NestedParentMap(Session session);
    public static NestedParentMap Extract(NestedUnitOfWork source);
    private void AfterDropIdentityMapHandler(object sender, SessionManipulationEventArgs e);
    public abstract virtual void Add(object parent, object nested, bool hasValidKey);
    public abstract virtual object GetParent(object nested);
    public abstract virtual object GetNested(object parent);
    public abstract virtual void KickOut(object nested);
    public abstract virtual void Clear();
}
public class DevExpress.Xpo.Helpers.NestedStubLoader : object {
    private ObjectSet forced;
    private Queue`1<ObjectPair> toProcess;
    private NestedParentGuidMap Map;
    public Session Owner;
    public Session OwnerParent;
    private XPObjectClassInfoStubCache ciCache;
    private static Func`2<object, object> ReturnArgument;
    public NestedStubLoader(Session owner, NestedParentGuidMap map, XPObjectClassInfoStubCache ciCache);
    private static NestedStubLoader();
    private void CloneObjects(IList& toFireLoaded);
    private void CloneData(XPObjectStub source, object destination, OptimisticLockingReadMergeBehavior loadMerge);
    private object CreateNestedObject(XPObjectStub pObject, bool forceLoad);
    private object GetNestedObjectCore(XPObjectStub parentObject, bool forceLoad);
    public bool IsObjectVersionChanged(object nestedObject, XPObjectStub parentObject);
    public ICollection[] GetNestedObjects(XPObjectStubCollection[] parentObjects, Boolean[] force);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.NestedStubLoader/<GetNestedObjectsAsync>d__15")]
public Task`1<ICollection[]> GetNestedObjectsAsync(XPObjectStubCollection[] parentObjects, Boolean[] force, CancellationToken cancellationToken);
    public ICollection[] GetNestedObjectsCore(XPObjectStubCollection[] parentObjects, Boolean[] force, IList& objectsToFireLoaded);
    public object GetNestedObject(XPObjectStub parentObject);
}
public static class DevExpress.Xpo.Helpers.NestedStubWorksHelper : object {
    [ThreadStaticAttribute]
private static Dictionary`2<Guid, bool> createNestedStubDictionary;
    [ThreadStaticAttribute]
private static Dictionary`2<Guid, bool> createParentStubDictionary;
    public static Dictionary`2<Guid, bool> CreateNestedStubDictionary { get; }
    public static Dictionary`2<Guid, bool> CreateParentStubDictionary { get; }
    public static object CommitObjectProperties(Session parentSession, NestedGuidParentMap map, XPObjectClassInfoStubCache ciCache, XPClassInfo ci, XPObjectStub obj, object parent);
    public static void CommitDeletedObjects(Session parentSession, NestedGuidParentMap map, XPObjectClassInfoStubCache ciCache, XPClassInfo[] classInfoList, XPObjectStubCollection objectList);
    public static Object[] CreateParentObjects(Session parentSession, NestedGuidParentMap map, XPClassInfo[] classInfoList, XPObjectStubCollection objectList);
    public static object CreateParentObject(Session parentSession, NestedGuidParentMap map, XPClassInfo ci, XPObjectStub obj);
    public static void ValidateVersions(Session parentSession, NestedGuidParentMap map, XPObjectClassInfoStubCache ciCache, ObjectSet lockedParentsObjects, XPClassInfo[] objectClassInfoList, XPObjectStubCollection nestedObjects, LockingOption lockingOption, bool objectsToDelete);
    public static Object[] GetParentObjects(Session parentSession, NestedGuidParentMap map, XPClassInfo[] classInfoList, XPObjectStubCollection objectList);
    public static object GetParentObject(Session parentSession, NestedGuidParentMap map, XPClassInfo ci, XPObjectStub obj);
    public static Dictionary`2<Guid, bool> get_CreateNestedStubDictionary();
    public static XPObjectStub CreateNestedStubObjectJustWithIdentities(Session session, NestedGuidParentMap map, XPObjectClassInfoStubCache ciCache, object obj);
    public static XPObjectStub CreateNestedStubObject(Session session, NestedGuidParentMap map, XPObjectStubCache objCache, XPObjectClassInfoStubCache ciCache, object obj);
    public static XPObjectStub CreateParentStubObjectJustWithIdentities(Session session, NestedParentGuidMap map, XPObjectClassInfoStubCache ciCache, object obj);
    public static Dictionary`2<Guid, bool> get_CreateParentStubDictionary();
    public static XPObjectStub CreateParentStubObject(Session session, NestedParentGuidMap map, XPObjectStubCache objCache, XPObjectClassInfoStubCache ciCache, object obj);
    private static object PrepareMemberValue(Session session, NestedParentGuidMap map, XPObjectStubCache objCache, XPObjectClassInfoStubCache ciCache, XPMemberInfo mi, object value);
}
internal static class DevExpress.Xpo.Helpers.NestedWorksHelper : object {
    public static object CommitObject(Session session, Session parentSession, NestedParentMap map, object obj, XPMemberInfo[] membersNotToSave);
    public static void CommitDeletedObject(Session session, Session parentSession, NestedParentMap map, object obj);
    public static object CreateParentObject(Session session, Session parentSession, NestedParentMap map, object obj);
    public static void ValidateVersions(Session session, Session parentSession, NestedParentMap map, ObjectSet lockedParentsObjects, ICollection nestedObjects, LockingOption lockingOption, bool objectsForDelete);
    public static object GetParentObject(Session session, Session parentSession, NestedParentMap map, object obj);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.NestedWorksHelper/<GetParentObjectAsync>d__5")]
public static Task`1<object> GetParentObjectAsync(Session session, Session parentSession, NestedParentMap map, object obj, CancellationToken cancellationToken);
    public static object GetNestedObject(Session session, Session parentSession, NestedParentMap map, object obj);
    public static object GetNestedObject(Session session, Session parentSession, NestedParentMap map, object obj, SecurityContext securityContext);
    public static object TryGetNestedObject(Session parent, NestedParentMap map, object obj);
    public static object CommitObject2(Session session, Session parentSession, NestedParentMap map, object obj, XPMemberInfo[] membersNotToSave, Dictionary`2& modifyMembers);
}
internal class DevExpress.Xpo.Helpers.NodeCriteriaPatcher : ClientCriteriaVisitorBase {
    private Guid currentNodeId;
    private AnalyzeNodePathItem[] currentAnalyzePathItems;
    private Dictionary`2<Guid, NodeCriteriaPatcherItem> patchItemDict;
    public NodeCriteriaPatcher(Guid patchOperatorId, CriteriaOperator orPatch, CriteriaOperator andPatch);
    public NodeCriteriaPatcher(IEnumerable patchItems);
    public NodeCriteriaPatcher(IEnumerable`1<NodeCriteriaPatcherItem> patchItems);
    public static CriteriaOperator Patch(CriteriaOperator op, Guid patchOperatorId, CriteriaOperator orPatch, CriteriaOperator andPatch);
    private sealed virtual override CriteriaOperator DevExpress.Xpo.Helpers.IAnalyzeCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(AnalyzeOperator criteria);
}
internal class DevExpress.Xpo.Helpers.NodeCriteriaPatcherItem : object {
    public Guid PatchOperatorId;
    public CriteriaOperator OrPatch;
    public CriteriaOperator AndPatch;
    public NodeCriteriaPatcherItem(Guid patchOperatorId, CriteriaOperator orPatch, CriteriaOperator andPatch);
}
public class DevExpress.Xpo.Helpers.NodePathCriteriaAnalyzer : object {
    private string nodeName;
    public NodePathCriteriaAnalyzer(string nodeName);
    public static List`1<Guid> Process(string nodeName, CriteriaOperator criteria);
    public List`1<Guid> Process(CriteriaOperator criteria);
    public sealed virtual List`1<Guid> Visit(AnalyzeOperator criteria);
    public sealed virtual List`1<Guid> Visit(JoinOperand theOperand);
    public sealed virtual List`1<Guid> Visit(OperandProperty theOperand);
    public sealed virtual List`1<Guid> Visit(AggregateOperand theOperand);
    public sealed virtual List`1<Guid> Visit(FunctionOperator theOperator);
    public sealed virtual List`1<Guid> Visit(OperandValue theOperand);
    public sealed virtual List`1<Guid> Visit(GroupOperator theOperator);
    public sealed virtual List`1<Guid> Visit(InOperator theOperator);
    public sealed virtual List`1<Guid> Visit(UnaryOperator theOperator);
    public sealed virtual List`1<Guid> Visit(BinaryOperator theOperator);
    public sealed virtual List`1<Guid> Visit(BetweenOperator theOperator);
    private List`1<Guid> ProcessOperands(CriteriaOperatorCollection operands);
}
internal class DevExpress.Xpo.Helpers.ObjectCollectionLoader : object {
    private IDataLayer dataLayer;
    private Session session;
    private Dictionary`2<XPClassInfo, StubMap> stubObjects;
    private Dictionary`2<XPClassInfo, IDictionary`2<object, object>> delayedObjects;
    public ObjectSet objectsToFireLoaded;
    private static IDictionary`2<object, object> emptyList;
    private LoadObjectsContext asyncLoadObjectsContext;
    private AsyncLoadObjectsCallback asyncCallback;
    private SynchronizationContext syncContext;
    private bool DoEnsureIsTypedObjectValid;
    public IDataLayer DataLayer { get; }
    private Session Session { get; }
    public ObjectCollectionLoader(Session session, IDataLayer dataLayer);
    private static ObjectCollectionLoader();
    public IDataLayer get_DataLayer();
    private Session get_Session();
    private IDataLayerAsync GetDataLayerAsync();
    private IDictionary`2<object, object> GetDelayedList(XPClassInfo type);
    private IDictionary`2<object, object> CreateDelayedList(XPClassInfo type);
    private void DelayLoading(XPClassInfo type, object id, object obj);
    private void ProcessLoaded(XPClassInfo classInfo, object id);
    private bool IsDelayed(XPClassInfo classInfo, object id);
    private IObjectMap CreateStubMap(XPClassInfo type);
    public static bool NeedReload(Session session, XPClassInfo ci, bool forceReload, OptimisticLockingReadMergeBehavior& loadMergeState, Func`1<bool> isObjectVersionChanged);
    public static bool AcceptLoadPropertyAndResetModified(bool trackPropertiesModifications, OptimisticLockingReadMergeBehavior loadMerge, object currentObject, XPClassInfo classInfo, XPMemberInfo member, Func`2<object, object> getNewValue, object getNewValueArgument);
    public object LoadObjectsAsync(ObjectsQuery[] queries, AsyncLoadObjectsCallback callback, SynchronizationContext syncContext);
    private void LoadObjectsExecRequest(AsyncRequest ar);
    private void LoadDelayedObjectsAsync();
    private void PrepareLoadObjectsInStack(object param);
    private void EndLoadObjectsAndCallBack(object param);
    private void InternalLoadObjectsInStack(object param);
    private void EndLoadDelayedObjectsInStack(object param);
    private void CallBackException(object param);
    private void LoadDelayedObjects(bool useStubs);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.ObjectCollectionLoader/<LoadDelayedObjectsAsync>d__38")]
private Task LoadDelayedObjectsAsync(bool useStubs, CancellationToken cancellationToken);
    public ICollection[] LoadObjects(ObjectsQuery[] queries);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.ObjectCollectionLoader/<LoadObjectsAsync>d__40")]
public Task`1<ICollection[]> LoadObjectsAsync(ObjectsQuery[] queries, CancellationToken cancellationToken);
    private ObjectsQuery[] PrepareLoadDelayedObjects(ObjectSet toLoad);
    private void EndLoadDelayedObjects(LoadDataResult loadDataResult, ObjectSet toLoad, bool useStubs);
    private LoadDataResult InternalLoadData(ObjectsQuery[] queries);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.ObjectCollectionLoader/<InternalLoadDataAsync>d__45")]
private Task`1<LoadDataResult> InternalLoadDataAsync(ObjectsQuery[] queries, CancellationToken cancellationToken);
    private ICollection[] InternalLoadObjects(LoadDataResult loadResult, bool useStubs);
    private LoadObjectsContext PrepareLoadObjects(ObjectsQuery[] queries);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.ObjectCollectionLoader/<PrepareLoadObjectsAsync>d__48")]
private Task`1<LoadObjectsContext> PrepareLoadObjectsAsync(ObjectsQuery[] queries, CancellationToken cancellationToken);
    private bool PrepareLoadObjectsProcessQuery(ObjectsQuery query, ExpandedCriteriaHolder expanded, List`1<ObjectsQuery> loadDataQuery);
    private ICollection[] ProcessStubs(ICollection[] objs);
    private object ProcessStub(StubMap map, LoadStub stub);
    private object ReturnArgument(object arg);
    private ObjectSet ProcessFileLoaded(ObjectSet fileLoaded);
    private ICollection[] EndLoadObjects(LoadObjectsContext loadObjectsContext, ICollection[] objs, bool proceesStubs);
    private ICollection GetSkipTopRows(ICollection rows, ObjectsQuery currentQuery);
    private ICollection ReSort(ICollection rows, ObjectsQuery currentQuery);
    private ICollection ReFilter(ICollection rows, ObjectsQuery currentQuery);
    public bool HasObjectLoaded(object theObject);
    [CompilerGeneratedAttribute]
private void <LoadObjectsExecRequest>b__30_0(object param);
}
public class DevExpress.Xpo.Helpers.ObjectDictionary`1 : Dictionary`2<object, T> {
    public ObjectDictionary`1(int capacity);
}
public abstract class DevExpress.Xpo.Helpers.ObjectIdentityMap : object {
    private IObjectLayer objectLayer;
    protected Dictionary`2<XPClassInfo, IObjectMap> classes;
    protected XPDictionary Dictionary { get; }
    protected IObjectLayer ObjectLayer { get; }
    public ObjectIdentityMap(IObjectLayerProvider objectLayerProvider);
    protected XPDictionary get_Dictionary();
    protected IObjectLayer get_ObjectLayer();
    protected abstract virtual IObjectMap CreateMap();
    public IObjectMap GetObjects(XPClassInfo classInfo);
    public object Get(IObjectMap objects, object id);
    public object Get(XPClassInfo objectClass, object id);
    public void Add(IObjectMap objects, object theObject, object id);
    public void Add(object theObject, object id);
    public void Remove(object theObject);
    public abstract virtual void Clear();
    public virtual void Compact();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.Helpers.ObjectList : object {
    public IList List;
    public static int TerminalSize;
    private ObjectDictionary`1<int> _Index;
    private int firstInvalidIndex;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ObjectList(int suggestedSize);
    public ObjectList(ICollection fillBy);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    private void ClearIndex();
    private void InvalidateIndexAt(int index, object valueForRemove);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[SecuritySafeCriticalAttribute]
public class DevExpress.Xpo.Helpers.ObjectRecord : object {
    private int hash;
    private GCHandle handle;
    private static GCHandle zeroHandle;
    private ChangeHandler changeHandler;
    private static ObjectRecordsHashTable nonSavedObjects;
    private static int _lastCollection;
    public static int CompactPeriodicity;
    private static object lockObject;
    public bool IsAlive { get; }
    public object Object { get; }
    private static ObjectRecord();
    protected ObjectRecord(object theObject);
    public virtual int GetHashCode();
    public void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    private static bool FindObjectRecord(object theObject, ObjectRecord& rec);
    public bool get_IsAlive();
    public object get_Object();
    [IteratorStateMachineAttribute("DevExpress.Xpo.Helpers.ObjectRecord/<FilterDead>d__16")]
private static IEnumerator`1<ObjectRecord> FilterDead(IEnumerable`1<ObjectRecord> whole);
    private static void CompactBeforeOverflow();
    public static void Compact();
    public static void MayBeCompact();
    private static ObjectRecord InternalCreateObjectRecord(object theObject);
    public static ObjectRecord GetObjectRecord(object theObject);
    private static ObjectRecord GetChangeHandler(ObjectChangeEventHandler handler);
    public static void AddChangeHandler(object theObject, ObjectRecord target);
    public static void AddChangeHandler(ObjectRecord record, ObjectRecord target);
    public static void AddChangeHandler(object theObject, ObjectChangeEventHandler handler);
    public static void RemoveChangeHandler(ObjectRecord record, ObjectRecord target);
    private static void RemoveChangeHandler(ObjectRecord record, ObjectRecord target, ObjectChangeEventHandler handler_);
    public static void RemoveChangeHandler(object theObject, ObjectRecord target);
    public static void RemoveChangeHandler(object theObject, ObjectChangeEventHandler handler);
    private static void RemoveChangeHandler(ObjectRecord record, ObjectChangeEventHandler handler);
    private void OnChange(object sender, ObjectChangeEventArgs args);
    public static void OnChange(object sender, object theObject, ObjectChangeEventArgs args);
}
internal class DevExpress.Xpo.Helpers.ObjectRecordsHashTable : OrdinaryDictionary`2<object, ObjectRecord> {
    public int BucketsLength { get; }
    public ObjectRecordsHashTable(int size);
    public int get_BucketsLength();
}
public class DevExpress.Xpo.Helpers.ObjectSet : object {
    private ObjectDictionary`1<byte> Dict;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ObjectSet(int capacity);
    public void Add(object item);
    public void Clear();
    public bool Contains(object item);
    public sealed virtual void CopyTo(Array array, int arrayIndex);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public bool Remove(object item);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
}
public class DevExpress.Xpo.Helpers.ParameterOperandValue : OperandValue {
    private Func`2<object, object> getter;
    public Func`2<object, object> Getter { get; }
    public object BaseValue { get; }
    public object Value { get; }
    public ParameterOperandValue(object value);
    public ParameterOperandValue(object value, Func`2<object, object> getter);
    public Func`2<object, object> get_Getter();
    public object get_BaseValue();
    public virtual object get_Value();
    [CompilerGeneratedAttribute]
private object <.ctor>b__5_0(object o);
}
internal class DevExpress.Xpo.Helpers.ParamExpression : object {
    private String[] names;
    private Object[] values;
    private bool used;
    public ParamExpression(String[] names, Object[] values);
    public bool Use();
    public bool UnUse(bool value);
    public void SetUsed();
    public bool MemeberAccessOperator(MemberExpression expression, Object& value);
}
public class DevExpress.Xpo.Helpers.ParentCriteriaGenerator : ClientCriteriaVisitorBase {
    protected Session session;
    protected Session parent;
    protected NestedParentMap map;
    protected ISecurityRuleProvider securityDictionary;
    protected object securityContext;
    protected ParentCriteriaGenerator(NestedUnitOfWork nuow);
    protected ParentCriteriaGenerator(Session session, Session parentSession, NestedParentMap map, SecurityContext securityContext);
    protected virtual CriteriaOperator Visit(OperandValue theOperand);
    public static CriteriaOperator GetNestedCriteria(NestedUnitOfWork nuow, CriteriaOperator op);
    public static CriteriaOperator GetNestedCriteria(Session session, Session parent, NestedParentMap map, SecurityContext securityContext, CriteriaOperator op);
}
public class DevExpress.Xpo.Helpers.PersistentBaseConverter`1 : JsonConverter`1<T> {
    private IServiceProvider _serviceProvider;
    public PersistentBaseConverter`1(IServiceProvider serviceProvider);
    private UnitOfWork GetUnitOfWork();
    public virtual T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    private static PersistentBase PopulateObjectProperties(PersistentBase persistentObject, Dictionary`2<string, object> propertyValues, UnitOfWork uow, XPClassInfo classInfo);
    private static void PopulateScalarProperty(PersistentBase theObject, object theValue, XPMemberInfo memberInfo);
    private static void PopulateReferenceProperty(PersistentBase parent, UnitOfWork uow, object theValue, XPMemberInfo memberInfo);
    private static Dictionary`2<string, object> CollectPropertyValues(Utf8JsonReader& reader, JsonSerializerOptions options, XPClassInfo classInfo, UnitOfWork uow);
    private static void ReadPropertyValue(Utf8JsonReader& reader, JsonSerializerOptions options, XPClassInfo classInfo, UnitOfWork uow, Dictionary`2<string, object> propertyValues);
    private static void SetOptimisticLockField(PersistentBase obj, int newValue);
    public virtual void Write(Utf8JsonWriter writer, T Value, JsonSerializerOptions options);
    private static bool CanSerializeProperty(XPMemberInfo member);
    public virtual bool CanConvert(Type typeToConvert);
}
public class DevExpress.Xpo.Helpers.PersistentBaseConverterFactory : JsonConverterFactory {
    private IServiceProvider serviceProvider;
    public PersistentBaseConverterFactory(IServiceProvider serviceProvider);
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
}
public class DevExpress.Xpo.Helpers.PersistentCriterionExpander : UnknownCriteriaEleminatorBase {
    public static PersistentCriterionExpanderRequiresPostProcessingAction PersistentCriterionExpanderRequiresPostProcessingAction;
    private bool DoDetectPostProcessing;
    private IPersistentValueExtractor PersistentValuesSource;
    private Lazy`1<IFunctionOperatorPatcher> externalFunctionOperatorPatcher;
    private int AliasDepthWatchDog;
    protected PersistentCriterionExpander(XPClassInfo[] upLevels, IPersistentValueExtractor persistentValuesSource, int aliasDepthWatchDog, bool doDetectPostProcessing);
    protected PersistentCriterionExpander(XPClassInfo[] upLevels, IPersistentValueExtractor persistentValuesSource, int aliasDepthWatchDog);
    protected virtual ExpandedCriteriaHolder Visit(BinaryOperator theOperator);
    private bool CheckInterfaceEquality(Type interfaceType, Type objectType, CriteriaOperator objectCriteria, Object& interfaceObject);
    private static bool IsNullConstant(CriteriaOperator criteria);
    private static bool IsSingle(CriteriaOperator criteria);
    private static bool IsIif(CriteriaOperator criteria);
    private static bool IsTwoArgumentIsNull(CriteriaOperator criteria);
    public ExpandedCriteriaHolder ProcessSingleAlias(XPClassInfo[] upLevelsWithReference, CriteriaOperator alias, MemberInfoCollection path, int start);
    public ExpandedCriteriaHolder ProcessIifAlias(XPClassInfo[] upLevelsWithReference, CriteriaOperator expression, MemberInfoCollection path, int start);
    public ExpandedCriteriaHolder ProcessTwoArgumentIsNullAlias(XPClassInfo[] upLevelsWithReference, CriteriaOperator expression, MemberInfoCollection path, int start);
    private ExpandedCriteriaHolder MergeAlias(XPClassInfo[] upLevelsWithReference, MemberInfoCollection path, int start, XPMemberInfo mi, CriteriaOperator expression);
    protected virtual ExpandedCriteriaHolder Visit(OperandProperty theOriginalOperand);
    internal static OperandProperty FixPropertyExclamation(OperandProperty theOriginalOperand, Boolean& addKeyTail);
    protected virtual ExpandedCriteriaHolder Visit(AggregateOperand theOperand);
    public static CriteriaOperator Prefix(string p, CriteriaOperator criteriaOperator);
    protected virtual bool IsValidForPersistentCriterion(XPMemberInfo mi);
    protected virtual ExpandedCriteriaHolder Visit(OperandValue theOperand);
    protected virtual ExpandedCriteriaHolder ProcessInContext(XPClassInfo[] upLevels, CriteriaOperator operand);
    protected static ExpandedCriteriaHolder Expand(XPClassInfo[] upLevels, IPersistentValueExtractor persistentValuesSource, CriteriaOperator op, int aliasDepthWatchDog, bool doDetectPostProcessing);
    protected static ExpandedCriteriaHolder Expand(XPClassInfo[] upLevels, IPersistentValueExtractor persistentValuesSource, CriteriaOperator op, bool doDetectPostProcessing);
    public static ExpandedCriteriaHolder ExpandToLogical(XPClassInfo ci, IPersistentValueExtractor persistentValuesSource, CriteriaOperator op, bool doDetectPostProcessing);
    public static ExpandedCriteriaHolder ExpandToLogical(IPersistentValueExtractor persistentValuesSource, XPClassInfo ci, CriteriaOperator op, bool doDetectPostProcessing);
    public static ExpandedCriteriaHolder ExpandToValue(XPClassInfo ci, IPersistentValueExtractor persistentValuesSource, CriteriaOperator op, bool doDetectPostProcessing);
    public static ExpandedCriteriaHolder ExpandToValue(IPersistentValueExtractor persistentValuesSource, XPClassInfo ci, CriteriaOperator op, bool doDetectPostProcessing);
    public static ExpandedCriteriaHolder Expand(XPClassInfo ci, IPersistentValueExtractor persistentValuesSource, CriteriaOperator op);
    public static ExpandedCriteriaHolder Expand(XPClassInfo ci, IPersistentValueExtractor persistentValuesSource, CriteriaOperator op, bool doDetectPostProcessing);
    public static ExpandedCriteriaHolder Expand(IPersistentValueExtractor persistentValuesSource, XPClassInfo ci, CriteriaOperator op);
    public static ExpandedCriteriaHolder Expand(IPersistentValueExtractor persistentValuesSource, XPClassInfo ci, CriteriaOperator op, bool doDetectPostProcessing);
    protected virtual ExpandedCriteriaHolder Visit(FunctionOperator theOperator);
    private IFunctionOperatorPatcher FindExternalFunctionOperatorPatcher();
}
public enum DevExpress.Xpo.Helpers.PersistentCriterionExpanderRequiresPostProcessingAction : Enum {
    public int value__;
    public static PersistentCriterionExpanderRequiresPostProcessingAction None;
    public static PersistentCriterionExpanderRequiresPostProcessingAction WriteToConsole;
    public static PersistentCriterionExpanderRequiresPostProcessingAction ThrowException;
    public static PersistentCriterionExpanderRequiresPostProcessingAction WriteToLog;
}
public class DevExpress.Xpo.Helpers.PersistentInterfaceMorpher`1 : BaseListMorpher`2<T, IPersistentInterfaceData`1<T>> {
    private bool DevExpress.Xpo.Helpers.IXPUnloadableAssociationList.IsLoaded { get; }
    public PersistentInterfaceMorpher`1(IList`1<IPersistentInterfaceData`1<T>> morphed);
    protected virtual T DownCast(IPersistentInterfaceData`1<T> value);
    protected virtual IPersistentInterfaceData`1<T> UpCast(T value);
    private sealed virtual override void DevExpress.Xpo.Helpers.IXPUnloadableAssociationList.Unload();
    private sealed virtual override bool DevExpress.Xpo.Helpers.IXPUnloadableAssociationList.get_IsLoaded();
}
public static class DevExpress.Xpo.Helpers.PersistentInterfaceTypedHelper : object {
    private static Dictionary`2<Type, ExtractorBase> cache;
    private static PersistentInterfaceTypedHelper();
    public static object ExtractDataObject(Type interfaceType, object interfaceObject);
    public static object ExtractInterfaceObject(Type interfaceType, object dataObject);
    private static ExtractorBase GetExtractor(Type t);
}
internal class DevExpress.Xpo.Helpers.PriorityRequestQueue : object {
    private LinkedUniqueQueue`1<AsyncRequest> idleQueue;
    private LinkedUniqueQueue`1<AsyncRequest> normalQueue;
    private LinkedUniqueQueue`1<AsyncRequest> highQueue;
    public int Count { get; }
    public bool HasOnlyIdle { get; }
    public void Enqueue(AsyncRequest request);
    public AsyncRequest Dequeue();
    public void NotifyPriorityChanged(AsyncRequest request);
    public bool Contains(AsyncRequest request);
    public int get_Count();
    public bool get_HasOnlyIdle();
}
internal class DevExpress.Xpo.Helpers.ProcessingSave : object {
    private List`1<object> processedObjectsList;
    private Session session;
    private List`1<object> insertList;
    private BatchWideDataHolder4Modification BatchWideData;
    private Session Session { get; }
    public ProcessingSave(Session session, BatchWideDataHolder4Modification batchWideData);
    private Session get_Session();
    private void InternalInsertObject(List`1<ModificationStatement> insertList, List`1<InsertUpdate> updateList, object theObject);
    private void InternalUpdateObject(List`1<ModificationStatement> updateList, object theObject);
    public List`1<ModificationStatement> Process();
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.ProcessingSave/<ProcessAsync>d__11")]
public Task`1<List`1<ModificationStatement>> ProcessAsync(CancellationToken cancellationToken);
    private List`1<XPClassInfo> ProcessBegin();
    private List`1<ModificationStatement> ProcessEnd();
    public void ProcessResults(ModificationResult result);
}
internal class DevExpress.Xpo.Helpers.PropertyNameFixCriteriaAnalyzer : ClientCriteriaVisitorBase {
    private Guid currentNodeId;
    private AnalyzeNodePathItem[] currentAnalyzePathItems;
    private Stack`1<AnalyzeNodePathItem[]> pathsStack;
    private HashSet`1<string> DetectedInvalidPropertyPaths;
    private static ConcurrentDictionary`2<int, string> prefixDictionary;
    private static PropertyNameFixCriteriaAnalyzer();
    public static CriteriaOperator Fix(CriteriaOperator op, ICollection`1& detectedInvalidPropertyPaths);
    private sealed virtual override CriteriaOperator DevExpress.Xpo.Helpers.IAnalyzeCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(AnalyzeOperator criteria);
    protected virtual CriteriaOperator Visit(JoinOperand theOperand);
    protected virtual CriteriaOperator Visit(OperandProperty theOperand);
    private static string GetPrefix(int prefixCount);
    protected virtual CriteriaOperator Visit(AggregateOperand theOperand, bool processCollectionProperty);
    private string GetPathString(AnalyzeNodePathItem[] path);
    private string GetPathString(AnalyzeNodePathItem[] path, int start, int count);
    private void DetectInvalidPropertyPath(AnalyzeNodePathItem[] path, string propertyName);
    private void DetectInvalidPropertyPath(AnalyzeNodePathItem[] path, int start, int count, string propertyName);
}
public class DevExpress.Xpo.Helpers.PropertyValueConverterFinder : ContextClientCriteriaVisitorBase`1<ValueConverter> {
    public PropertyValueConverterFinder(XPClassInfo classInfo);
    public virtual ValueConverter Process(CriteriaOperator criteria);
    public virtual ValueConverter VisitInternalProperty(string propertyName);
    public virtual ValueConverter VisitInternalAggregate(ValueConverter collectionPropertyResult, ValueConverter aggregateResult, Aggregate aggregateType, ValueConverter conditionResult);
    public virtual ValueConverter VisitInternalAggregate(ValueConverter collectionPropertyResult, IEnumerable`1<ValueConverter> aggregateResult, string customAggregateName, ValueConverter conditionResult);
    public virtual ValueConverter VisitInternalJoinOperand(ValueConverter conditionResult, ValueConverter agregatedResult, Aggregate aggregateType);
    public virtual ValueConverter VisitInternalJoinOperand(ValueConverter conditionResult, IEnumerable`1<ValueConverter> agregatedResult, string customAggregateName);
    public virtual ValueConverter VisitInternalBetween(BetweenOperator theOperator);
    public virtual ValueConverter VisitInternalBinary(ValueConverter left, ValueConverter right, BinaryOperatorType operatorType);
    public virtual ValueConverter VisitInternalFunction(FunctionOperator theOperator);
    public virtual ValueConverter VisitInternalGroup(GroupOperatorType operatorType, List`1<ValueConverter> results);
    public virtual ValueConverter VisitInternalInOperator(InOperator theOperator);
    public virtual ValueConverter VisitInternalOperand(object value);
    public virtual ValueConverter VisitInternalUnary(UnaryOperator theOperator);
}
public class DevExpress.Xpo.Helpers.PurgeFK : object {
    public XPMemberInfo Reference;
    public XPClassInfo MappingClass;
    public PurgeFK(XPMemberInfo reference, XPClassInfo mappingClass);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Xpo.Helpers.Purger : object {
    private IDataLayer PurgeDataLayer;
    private Session PurgeSession;
    private Dictionary`2<PurgerObjectUid, PurgerObjectRecord> RecordsByUid;
    private IList`1<PurgeFK> ReferenceMembers;
    private PurgeResult Result;
    protected Purger(IObjectLayer objectLayer, IDataLayer dataLayer);
    public static PurgeResult Purge(IObjectLayer objectLayer, IDataLayer dataLayer);
    public PurgeResult Purge();
    public static void FillProps(CriteriaOperatorCollection props, string prefix, XPMemberInfo member);
    private void FillReferencedAndReferredBy();
    private void RealPurge();
    private void ExcludeReferencedByNonMarked(PurgeFK fk);
    private void ExcludeReferencedByNonMarked();
    private void FillReferenceMembers();
    private void Register(PurgerObjectRecord newRecord);
    private void UnRegister(PurgerObjectRecord record);
    private void UnRegister(PurgerObjectUid uid);
    private void FillRecords();
    private void EnsureTypes();
    private PurgerObjectRecord DeleteAllNonReferredByAndGetLeastReferred();
    private static ICollection GetCriteriasFromKeys(XPClassInfo ci, List`1<object> keys);
    private static ICollection GetCriteriasFromRecordsCollection(IEnumerable records);
    private void DoDeletes(ICollection recordsToDelete);
    private void KillReferences(ICollection recordsToUpdate);
    private static object ExtractSimpleValue(string extractedPropertyName, CriteriaOperatorCollection requiredProperties, Object[] requestResult);
    public static object ExtractValue(string extractedPropertyPrefix, XPMemberInfo member, CriteriaOperatorCollection requiredProperties, Object[] requestResult);
    private ICollection GetMarkDeletedObjects();
    private PurgerObjectRecord CreateNewObjectRecord(XPClassInfo baseClassInfo, CriteriaOperatorCollection requiredProperties, Object[] selectResult);
}
public class DevExpress.Xpo.Helpers.PurgeResult : object {
    public int Processed;
    public int Purged;
    public int NonPurged;
    public int ReferencedByNonDeletedObjects;
}
public class DevExpress.Xpo.Helpers.PurgerObjectRecord : object {
    public Purger Owner;
    public XPClassInfo ClassInfo;
    public object Key;
    private List`1<object> _ReferencedObjects;
    private List`1<object> _ReferredByObjects;
    public IList`1<object> ReferencedObjects { get; }
    public bool IsReferredBy { get; }
    public IList`1<object> ReferredByObjects { get; }
    public PurgerObjectRecord(Purger owner, XPClassInfo classInfo, object key);
    public IList`1<object> get_ReferencedObjects();
    public bool get_IsReferredBy();
    public IList`1<object> get_ReferredByObjects();
    public PurgerObjectUid GetUid();
    public void ClearReferencedObjects();
    public void ClearReferredByObjects();
}
public class DevExpress.Xpo.Helpers.PurgerObjectUid : object {
    public XPClassInfo IdClass;
    public object Key;
    public PurgerObjectUid(XPClassInfo classInfo, object key);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public abstract class DevExpress.Xpo.Helpers.QuereableEvaluatorContextDescriptor : EvaluatorContextDescriptor {
    public abstract virtual object GetQueryResult(JoinNode root);
    public abstract virtual object GetOperandValue(object source, QueryOperand theOperand);
    public abstract virtual void PushNestedSource(object source);
    public abstract virtual void PopNestedSource();
}
internal class DevExpress.Xpo.Helpers.QueryableEvaluatorContext : EvaluatorContext {
    public QueryableEvaluatorContext(EvaluatorContextDescriptor descriptor, object source);
    public object GetOperandValue(QueryOperand theOperand);
}
internal class DevExpress.Xpo.Helpers.QueryableExpressionEvaluator : ExpressionEvaluator {
    private ExpressionEvaluatorCoreBase evaluatorCore;
    protected ExpressionEvaluatorCoreBase EvaluatorCore { get; }
    public QueryableExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive);
    public QueryableExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria);
    public QueryableExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public QueryableExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public QueryableExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, ICollection`1<ICustomFunctionOperator> customFunctions);
    public QueryableExpressionEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, bool caseSensitive);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, string criteria, bool caseSensitive);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, string criteria);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, ICollection`1<ICustomFunctionOperator> customFunctions);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, string criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, string criteria, ICollection`1<ICustomFunctionOperator> customFunctions);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, CriteriaOperator criteria, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, string criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    public QueryableExpressionEvaluator(PropertyDescriptorCollection properties, string criteria, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    protected virtual ExpressionEvaluatorCoreBase get_EvaluatorCore();
    protected virtual EvaluatorContext PrepareContext(object valuesSource);
}
internal class DevExpress.Xpo.Helpers.QueryableExpressionEvaluatorCore : ExpressionEvaluatorCoreBase {
    private QueryableEvaluatorContext defaultContext;
    private Dictionary`2<CriteriaOperator, InOperatorCacheItem> inOperatorOptimizer;
    protected bool Is3ValuedLogic { get; }
    protected bool HasContext { get; }
    public QueryableExpressionEvaluatorCore(bool caseSensitive);
    public QueryableExpressionEvaluatorCore(bool caseSensitive, EvaluateCustomFunctionHandler evaluateCustomFunction);
    public QueryableExpressionEvaluatorCore(bool caseSensitive, EvaluateCustomFunctionHandler evaluateCustomFunction, CustomAggregateResolveHandler customAggregateResolveHandler);
    protected virtual bool get_Is3ValuedLogic();
    public virtual object Visit(QuerySubQueryContainer theOperand);
    public virtual object Visit(InOperator theOperator);
    public virtual object Visit(QueryOperand theOperand);
    protected sealed virtual void SetContext(EvaluatorContext context);
    protected sealed virtual EvaluatorContext GetContext(int upDepth);
    protected sealed virtual EvaluatorContext GetContext();
    protected sealed virtual void ClearContext();
    protected sealed virtual bool get_HasContext();
}
public class DevExpress.Xpo.Helpers.QueryData : object {
    private MemberPathCollection properties;
    private Dictionary`2<XPMemberInfo, ValueAccessor> members;
    private SelectStatementResult data;
    private int pos;
    private SelectStatementResultRow row;
    private Dictionary`2<XPMemberInfo, QueryData> nestedDatas;
    private XPClassInfo classInfo;
    private List`1<ValueAccessor> linearMembers;
    public MemberPathCollection Properties { get; }
    public int Count { get; }
    public QueryData(XPClassInfo classInfo);
    public QueryData(XPClassInfo classInfo, CriteriaOperatorCollection properties);
    public MemberPathCollection get_Properties();
    public void SetData(SelectStatementResult data);
    public static ValueConverter CreateDataConverter(XPMemberInfo member);
    public QueryData GetNestedData(XPMemberInfo mi);
    public int get_Count();
    public bool MoveNext();
    private void AddMember(XPMemberInfo mi, QueryData root, MemberInfoCollection parentPath, Int32& index);
    private void Init(QueryData root, XPClassInfo classInfo, MemberInfoCollection parentPath, Int32& index);
    public ValueAccessor GetAccessor(int index);
    public object GetValue(XPMemberInfo member);
    public ValueAccessor GetAccessor(XPMemberInfo member);
}
public class DevExpress.Xpo.Helpers.QueryProviderEx : object {
    public static IQueryable CreateQuery(IQueryProvider provider, Expression e);
}
public class DevExpress.Xpo.Helpers.QuerySet : CriteriaOperator {
    public CriteriaOperator Condition;
    public OperandProperty Property;
    public MemberInitOperator Projection;
    internal static QuerySet Empty;
    public bool IsEmpty { get; }
    public QuerySet(string name);
    public QuerySet(OperandProperty property, CriteriaOperator condition);
    public QuerySet(MemberInitOperator projection);
    private static QuerySet();
    public bool TryGetProjectionSingleProperty(CriteriaOperator& property);
    public virtual void Accept(ICriteriaVisitor visitor);
    public virtual T Accept(ICriteriaVisitor`1<T> visitor);
    public CriteriaOperator CreateCriteriaOperator(CriteriaOperator expression, Aggregate aggregateType);
    public virtual CriteriaOperator CreateCriteriaOperator(CriteriaOperator condition, CriteriaOperator expression, Aggregate aggregateType);
    public CriteriaOperator CreateCriteriaOperator(IEnumerable`1<CriteriaOperator> expressions, string customAggregateName);
    public virtual CriteriaOperator CreateCriteriaOperator(CriteriaOperator condition, IEnumerable`1<CriteriaOperator> expressions, string customAggregateName);
    private OperandProperty GetPropertyForVisitor(OperandProperty operandProperty);
    protected virtual CriteriaOperator CloneCommon();
    public bool get_IsEmpty();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Xpo.Helpers.RefCompiler : OperandValue {
    private XPDictionary dictionary;
    public RefCompiler(XPDictionary dictionary);
    public RefCompiler(XPDictionary dictionary, object value);
    protected virtual object GetXmlValue();
}
public class DevExpress.Xpo.Helpers.ReverseCriteriaAnalyzer : object {
    private bool removeAnotherModified;
    private Session session;
    public static AnalyzeInfoKey NodePathItemsKey;
    private string baseNodeName;
    private AnalyzeResult analyzeResult;
    private HashSet`1<string> modifiedNodesDict;
    private string currentNode;
    private XPClassInfo originalCriteriaRootClassInfo;
    private Guid currentNodeId;
    private AnalyzeTransitionInfo currentNodeTransitionInfo;
    private XPClassInfo currentNodeClassInfo;
    private AnalyzeNodePathItem[] currentAnalyzePathItems;
    private bool removeSign;
    private bool existsGroupingSign;
    private bool inNot;
    public ReverseCriteriaAnalyzer(string baseNodeName, AnalyzeResult analyzeResult);
    public ReverseCriteriaAnalyzer(string baseNodeName, AnalyzeResult analyzeResult, Session session, bool removeAnotherModified);
    public ReverseCriteriaAnalyzer(string baseNodeName, AnalyzeResult analyzeResult, String[] modifiedNodes, bool removeAnotherModified);
    private static ReverseCriteriaAnalyzer();
    public static CriteriaOperator ReverseAndRemoveModified(string baseNodeName, AnalyzeResult analyzeResult, Session session);
    public static CriteriaOperator ReverseAndRemoveModified(string baseNodeName, AnalyzeResult analyzeResult, String[] modifiedNodes);
    public static CriteriaOperator Reverse(string baseNodeName, AnalyzeResult analyzeResult);
    public static bool ReverseAndRemoveModifiedNoException(string baseNodeName, AnalyzeResult analyzeResult, Session session, CriteriaOperator& result);
    public static bool ReverseAndRemoveModifiedNoException(string baseNodeName, AnalyzeResult analyzeResult, String[] modifiedNodes, CriteriaOperator& result);
    public static bool ReverseNoException(string baseNodeName, AnalyzeResult analyzeResult, CriteriaOperator& result);
    public CriteriaOperator Process();
    public bool ProcessNoException(CriteriaOperator& result);
    private CriteriaOperator Process(CriteriaOperator criteria);
    private sealed virtual override CriteriaOperator DevExpress.Xpo.Helpers.IAnalyzeCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(AnalyzeOperator criteria);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandProperty theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(OperandValue theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(JoinOperand theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(AggregateOperand theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(GroupOperator theOperator);
    private CriteriaOperator GroupLevelProcess(GroupOperatorType operatorType, CriteriaOperatorCollection resultOperands, List`1<AnalyzeNodePathItem[]> analyzePathList, AnalyzeNodePathItem[] additionalPath, bool forceCollections);
    private static CriteriaOperator FillAnalyzeInfoForGroup(CriteriaOperatorCollection resultOperands, GroupOperator result);
    private CriteriaOperator GroupLevelProcessPrepare(List`1<int> group, GroupOperatorType operatorType, CriteriaOperatorCollection allOperands, List`1<AnalyzeNodePathItem[]> allAnalyzePathList, List`1<int> firstCollectionPosList, AnalyzeNodePathItem[] additionalPath, bool forceCollections);
    private static CriteriaOperator WrapCollection(AnalyzeNodePathItem[] collectionPath, CriteriaOperator criteria);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(InOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(UnaryOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(FunctionOperator theOperator);
    private CriteriaOperatorCollection ProcessPathSimple(CriteriaOperatorCollection operands, FailedToReverseOperator& failedOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BinaryOperator theOperator);
    private static AnalyzeNodePathItem[] SlicePathHard(AnalyzeNodePathItem[] pathItems, int sliceCount);
    private static AnalyzeNodePathItem[] SlicePath(AnalyzeNodePathItem[] pathItems);
    private static AnalyzeNodePathItem[] MergePaths(AnalyzeNodePathItem[] left, AnalyzeNodePathItem[] right);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BetweenOperator theOperator);
}
public class DevExpress.Xpo.Helpers.SaveOrderer : object {
    public XPDictionary Dictionary;
    public IDictionary NonSavedObjects;
    public ObjectDictionary`1<ObjectSet> ReferredBy;
    public ObjectDictionary`1<ObjectSet> References;
    public List`1<object> Result;
    private List`1<object> NonReferencedObjects;
    private SaveOrderer(XPDictionary dictionary, ICollection newObjectsToSave);
    public void MarkObjectAsSaved(object obj);
    public void Do();
    private void ProcessGoodObjects();
    private void EleminateLoop(object nextObject);
    private static List`1<object> DoOrder(XPDictionary dictionary, ICollection newObjectsToSave);
    public static IList PrepareSaveOrder(Session session);
}
public class DevExpress.Xpo.Helpers.ServerModeForPersistentInterfacesWrapper : XpoServerCollectionWrapperBase {
    public ServerModeForPersistentInterfacesWrapper(Type interfaceType, IXpoServerModeGridDataSource nested);
    public virtual object DXClone();
    private static IXpoServerModeGridDataSource GetNestedSource(Type interfaceType, IXpoServerModeGridDataSource nested);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.Helpers.ServerModeForPersistentInterfacesWrapper`1 : XpoServerCollectionWrapperBase {
    private XPClassInfo _ClassInfo;
    private XPPropertyDescriptorCollection props;
    public XPClassInfo ClassInfo { get; }
    public object Item { get; public set; }
    public ServerModeForPersistentInterfacesWrapper`1(IXpoServerModeGridDataSource nested);
    public virtual object DXClone();
    protected IPersistentInterfaceData`1<T> ToData(IPersistentInterface`1<T> i);
    protected T ToInterface(IPersistentInterfaceData`1<T> d);
    protected IPersistentInterfaceData`1<T> ToData(object i);
    protected T ToInterface(object d);
    public virtual XPClassInfo get_ClassInfo();
    public virtual bool Contains(object value);
    public virtual void Insert(int index, object value);
    public virtual int IndexOf(object value);
    public virtual void Remove(object value);
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public virtual void CopyTo(Array array, int index);
    [IteratorStateMachineAttribute("DevExpress.Xpo.Helpers.ServerModeForPersistentInterfacesWrapper`1/<GetEnumerator>d__17")]
public virtual IEnumerator GetEnumerator();
    public virtual object AddNew();
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
}
public class DevExpress.Xpo.Helpers.SessionIdentityMap : object {
    private ObjectIdentityMap loadedObjects;
    public SessionIdentityMap(IObjectLayerProvider objectLayerProvider, IdentityMapBehavior cacheBehavior);
    public void Clear();
    public void Compact();
    private IObjectMap GetMap(XPClassInfo ci);
    private object GetLoadedObjectByKey(XPClassInfo ci, object key);
    private void RegisterObject(object theObject, object key);
    private void UnregisterObject(object theObject);
    public static SessionIdentityMap Extract(Session session);
    public static IObjectMap GetMap(Session session, XPClassInfo ci);
    public static void RegisterObject(Session session, object theObject, object key);
    public static void UnregisterObject(Session session, object theObject);
    public static object GetLoadedObjectByKey(Session session, XPClassInfo ci, object key);
}
[FlagsAttribute]
public enum DevExpress.Xpo.Helpers.SessionState : Enum {
    public int value__;
    public static SessionState Empty;
    public static SessionState GetObjectsNonReenterant;
    public static SessionState BeginTransaction;
    public static SessionState CommitTransactionNonReenterant;
    public static SessionState CommitChangesToDataLayer;
    public static SessionState RollbackTransaction;
    public static SessionState LoadingObjectsIntoNestedUow;
    public static SessionState ReceivingObjectsFromNestedUow;
    public static SessionState CancelEdit;
    public static SessionState CreateObjectLoadingEnforcer;
    public static SessionState OptimisticLockFieldsProcessing;
    public static SessionState ApplyIdentities;
    public static SessionState LoadingStates;
    public static SessionState SavingStates;
    public static SessionState ProhibitedForGetObjects;
    public static SessionState ProhibitedForCancelEdit;
    public static SessionState ProhibitedGeneric;
    public static SessionState SessionObjectsToSaveOrDeleteChanging;
    public static SessionState ProhibitedSessionObjectsToSaveOrDeleteChanging;
    public static SessionState CommitChangesToDataLayerInner;
    public static SessionState CrossThreadFailure;
}
public static class DevExpress.Xpo.Helpers.SessionStateStack : object {
    private static bool _SuppressCrossThreadFailuresDetection;
    private static int asyncOperationSequenceId;
    [ObsoleteAttribute("CrossThread Failures Detection suppressed")]
public static bool SuppressCrossThreadFailuresDetection { get; public set; }
    public static void ThrowIfCantEnter(Session session, SessionState newState);
    public static bool get_SuppressCrossThreadFailuresDetection();
    public static void set_SuppressCrossThreadFailuresDetection(bool value);
    public static void Enter(Session session, SessionState newState);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.SessionStateStack/<EnterAsync>d__6")]
public static Task EnterAsync(Session session, SessionState newState, int asyncOperationId, CancellationToken cancellationToken);
    private static void ThrowIfCrossThreadFailureOnEnter(Session session, SessionState newState, int asyncOperationId);
    public static void Leave(Session session, SessionState state, int asyncOperationId);
    public static bool IsInAnyOf(Session session, SessionState states);
    internal static int GetNewAsyncOperationId();
}
public class DevExpress.Xpo.Helpers.SmellingJoinOperandFinder : object {
    private XPClassInfo currentClassInfo;
    private CriteriaOperator originalCriteria;
    public SmellingJoinOperandFinder(XPClassInfo currentClassInfo, CriteriaOperator originalCriteria);
    public sealed virtual bool Visit(AggregateOperand theOperand);
    public sealed virtual bool Visit(JoinOperand theOperand);
    public sealed virtual bool Visit(OperandProperty theOperand);
    public sealed virtual bool Visit(FunctionOperator theOperator);
    public sealed virtual bool Visit(OperandValue theOperand);
    public sealed virtual bool Visit(GroupOperator theOperator);
    public sealed virtual bool Visit(InOperator theOperator);
    public sealed virtual bool Visit(UnaryOperator theOperator);
    public sealed virtual bool Visit(BinaryOperator theOperator);
    public sealed virtual bool Visit(BetweenOperator theOperator);
    private bool Process(IEnumerable ops);
    public bool Process(CriteriaOperator op);
}
public abstract class DevExpress.Xpo.Helpers.StronglyTypedCriteriaVisitorBase`1 : object {
    protected XPDictionary Dictionary;
    protected XPClassInfo[] UpLevelsClassInfos;
    protected StronglyTypedCriteriaVisitorBase`1(XPClassInfo[] upLevelsClassInfos);
    protected static XPClassInfo[] GetUpLevels(XPClassInfo[] upLevels, EvaluatorProperty prop);
    protected XPClassInfo[] GetUpLevels(OperandProperty collection);
    protected static XPClassInfo[] GetUpLevels(XPClassInfo[] upLevels, string className);
    protected XPClassInfo[] GetUpLevels(string className);
    protected abstract virtual T Visit(OperandProperty theOperand);
    protected abstract virtual T Visit(AggregateOperand theOperand);
    protected abstract virtual T Visit(JoinOperand theOperand);
    protected abstract virtual T Visit(FunctionOperator theOperator);
    protected abstract virtual T Visit(OperandValue theOperand);
    protected abstract virtual T Visit(GroupOperator theOperator);
    protected abstract virtual T Visit(InOperator theOperator);
    protected abstract virtual T Visit(UnaryOperator theOperator);
    protected abstract virtual T Visit(BinaryOperator theOperator);
    protected abstract virtual T Visit(BetweenOperator theOperator);
    private sealed virtual override T DevExpress.Data.Filtering.IClientCriteriaVisitor<T>.Visit(OperandProperty theOperand);
    private sealed virtual override T DevExpress.Data.Filtering.IClientCriteriaVisitor<T>.Visit(AggregateOperand theOperand);
    private sealed virtual override T DevExpress.Data.Filtering.IClientCriteriaVisitor<T>.Visit(JoinOperand theOperand);
    private sealed virtual override T DevExpress.Data.Filtering.ICriteriaVisitor<T>.Visit(FunctionOperator theOperator);
    private sealed virtual override T DevExpress.Data.Filtering.ICriteriaVisitor<T>.Visit(OperandValue theOperand);
    private sealed virtual override T DevExpress.Data.Filtering.ICriteriaVisitor<T>.Visit(GroupOperator theOperator);
    private sealed virtual override T DevExpress.Data.Filtering.ICriteriaVisitor<T>.Visit(InOperator theOperator);
    private sealed virtual override T DevExpress.Data.Filtering.ICriteriaVisitor<T>.Visit(UnaryOperator theOperator);
    private sealed virtual override T DevExpress.Data.Filtering.ICriteriaVisitor<T>.Visit(BinaryOperator theOperator);
    private sealed virtual override T DevExpress.Data.Filtering.ICriteriaVisitor<T>.Visit(BetweenOperator theOperator);
}
public class DevExpress.Xpo.Helpers.StrongNestedGuidParentMap : NestedGuidParentMap {
    private Dictionary`2<Guid, object> Parents;
    private ObjectDictionary`1<Guid> Nesteds;
    public virtual void Add(object parent, Guid nestedGuid, bool hasValidKey);
    public virtual object GetParent(Guid nestedGuid);
    public virtual Guid GetNested(object parent);
    public virtual void KickOut(Guid nestedGuid);
    public virtual void KickOut(object parent);
}
public class DevExpress.Xpo.Helpers.StrongNestedParentGuidMap : NestedParentGuidMap {
    private ObjectDictionary`1<Guid> Parents;
    private Dictionary`2<Guid, object> Nesteds;
    public StrongNestedParentGuidMap(Session session);
    public virtual void Add(Guid parentGuid, object nested, bool hasValidKey);
    public virtual Guid GetParent(object nested);
    public virtual object GetNested(Guid parentGuid);
    public virtual void KickOut(object nested);
    public virtual void Clear();
}
public class DevExpress.Xpo.Helpers.StrongNestedParentMap : NestedParentMap {
    private ObjectDictionary`1<object> Parents;
    private ObjectDictionary`1<object> Nesteds;
    public StrongNestedParentMap(Session session);
    public virtual void Add(object parent, object nested, bool hasValidKey);
    public virtual object GetParent(object nested);
    public virtual object GetNested(object parent);
    public virtual void KickOut(object nested);
    public virtual void Clear();
}
public class DevExpress.Xpo.Helpers.StrongObjectIdentityMap : ObjectIdentityMap {
    public StrongObjectIdentityMap(IObjectLayerProvider objectLayerProvider);
    protected virtual IObjectMap CreateMap();
    public virtual void Clear();
}
[ToolboxItemAttribute("False")]
internal class DevExpress.Xpo.Helpers.StrongSession : Session {
    public StrongSession(IObjectLayer layer);
}
internal class DevExpress.Xpo.Helpers.TopLevelPropertiesPrefixer : ClientCriteriaVisitorBase {
    protected string Prefix;
    private int inAggregateOperand;
    private int patchedLevels;
    private TopLevelPropertiesPrefixer(string prefix);
    protected virtual CriteriaOperator Visit(OperandProperty theOperand);
    protected virtual CriteriaOperator Visit(AggregateOperand theOperand, bool processCollectionProperty);
    protected virtual CriteriaOperator Visit(JoinOperand theOperand);
    private static CriteriaOperator GetPrefixed(string prefix, CriteriaOperator criteriaOperator);
    public static CriteriaOperator PatchAliasPrefix(string persistentPrefix, CriteriaOperator criteriaOperator);
}
public abstract class DevExpress.Xpo.Helpers.UnknownCriteriaEleminatorBase : StronglyTypedCriteriaVisitorBase`1<ExpandedCriteriaHolder> {
    private bool underNot;
    private bool caseSensitive;
    protected UnknownCriteriaEleminatorBase(XPClassInfo[] upLevelsClassInfo, bool caseSensitive);
    protected virtual ExpandedCriteriaHolder Visit(AggregateOperand theOperand);
    public static ExpandedCriteriaHolder GetFalseConditionAggregate(Aggregate aggregate, string customAggregateName);
    public static ExpandedCriteriaHolder GetFalseConditionAggregate(Aggregate aggregate);
    protected virtual ExpandedCriteriaHolder Visit(JoinOperand theOperand);
    protected virtual ExpandedCriteriaHolder Visit(FunctionOperator theOperator);
    protected sealed virtual ExpandedCriteriaHolder Visit(GroupOperator theOperator);
    protected sealed virtual ExpandedCriteriaHolder Visit(InOperator theOperator);
    protected sealed virtual ExpandedCriteriaHolder Visit(UnaryOperator theOperator);
    protected virtual ExpandedCriteriaHolder Visit(BinaryOperator theOperator);
    protected sealed virtual ExpandedCriteriaHolder Visit(BetweenOperator theOperator);
    protected ExpandedCriteriaHolder Process(CriteriaOperator operand);
    protected abstract virtual ExpandedCriteriaHolder ProcessInContext(XPClassInfo[] upLevels, CriteriaOperator operand);
    private OperandValue Evaluate(CriteriaOperator theOperator);
}
internal class DevExpress.Xpo.Helpers.VirtualAsyncRequest : AsyncRequest {
    private bool executed;
    public VirtualAsyncRequest(SynchronizationContext context);
    public void Stop();
    public virtual bool IsInQueue(AsyncExecuteQueue q);
    public virtual bool IsInQueueOrCurrent(AsyncExecuteQueue q);
}
public enum DevExpress.Xpo.Helpers.WaitForAsyncOperationResult : Enum {
    public int value__;
    public static WaitForAsyncOperationResult EmptyQueue;
    public static WaitForAsyncOperationResult ThreadReentrancy;
    public static WaitForAsyncOperationResult IdleQueue;
    public static WaitForAsyncOperationResult OperationComplete;
}
public static class DevExpress.Xpo.Helpers.WcfUsedAsDumbPipeHelper : object {
    private static string UnpackedSignature;
    private static string GzPackedSignature;
    public static Byte[] Warp(SelectStatementResult[] resultSet);
    public static SelectStatementResult[] Unwarp(Byte[] warped);
    private static bool CanTryPackWhole(Byte[] load);
    private static void SelectResultsToStream(Stream stream, SelectStatementResult[] resultSet);
    private static SelectStatementResult[] SelectResultsFromStream(Stream stream);
    private static void WriteObject(BinaryWriter wr, object value);
    private static object ReadObject(BinaryReader rd);
}
public class DevExpress.Xpo.Helpers.WeakNestedGuidParentMap : StrongNestedGuidParentMap {
    private Dictionary`2<Guid, ObjectRecord> Parents;
    private Dictionary`2<ObjectRecord, Guid> Nesteds;
    public virtual void Add(object parent, Guid nestedGuid, bool hasValidKey);
    public virtual object GetParent(Guid nestedGuid);
    public virtual Guid GetNested(object parent);
    public virtual void KickOut(Guid nestedGuid);
    public virtual void KickOut(object parent);
}
public class DevExpress.Xpo.Helpers.WeakNestedParentGuidMap : StrongNestedParentGuidMap {
    private Dictionary`2<ObjectRecord, Guid> Parents;
    private Dictionary`2<Guid, ObjectRecord> Nesteds;
    public WeakNestedParentGuidMap(Session session);
    public virtual void Add(Guid parentGuid, object nested, bool hasValidKey);
    public virtual Guid GetParent(object nested);
    public virtual object GetNested(Guid parentGuid);
    public virtual void KickOut(object nested);
    public virtual void Clear();
}
public class DevExpress.Xpo.Helpers.WeakNestedParentMap : StrongNestedParentMap {
    private Dictionary`2<ObjectRecord, ObjectRecord> Parents;
    private Dictionary`2<ObjectRecord, ObjectRecord> Nesteds;
    public WeakNestedParentMap(Session session);
    public virtual void Add(object parent, object nested, bool hasValidKey);
    public virtual object GetParent(object nested);
    public virtual object GetNested(object parent);
    public virtual void KickOut(object nested);
    public virtual void Clear();
}
public class DevExpress.Xpo.Helpers.WeakObjectIdentityMap : ObjectIdentityMap {
    private int count;
    private int _lastCompactGC;
    public WeakObjectIdentityMap(IObjectLayerProvider objectLayerProvider);
    protected virtual IObjectMap CreateMap();
    private void CompactCache();
    public virtual void Compact();
    public virtual void Clear();
    protected virtual override void Finalize();
}
public class DevExpress.Xpo.Helpers.XPAssociationList : object {
    protected object OwnerObject;
    protected XPMemberInfo Member;
    private Session _Session;
    private ObjectList _InnerList;
    private static Nullable`1<bool> _DoNotSetAssociatedMemberToNullWhenRemovingDeletedObjectFromAssociationList;
    private static int seq;
    private int seqNum;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    protected IList InnerList { get; }
    public bool IsLoaded { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public static Nullable`1<bool> DoNotSetAssociatedMemberToNullWhenRemovingDeletedObjectFromAssociationList { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public XPClassInfo ClassInfo { get; }
    public Session Session { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    private IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.ObjectLayer { get; }
    private IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.DataLayer { get; }
    public XPAssociationList(Session session, object owner, XPMemberInfo collectionMember);
    protected IList get_InnerList();
    public void Load();
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.XPAssociationList/<LoadAsync>d__8")]
public Task LoadAsync(CancellationToken cancellationToken);
    public sealed virtual bool get_IsLoaded();
    public sealed virtual void Unload();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    private static bool IsKeyOrInKey(XPMemberInfo mi);
    public static Nullable`1<bool> get_DoNotSetAssociatedMemberToNullWhenRemovingDeletedObjectFromAssociationList();
    public static void set_DoNotSetAssociatedMemberToNullWhenRemovingDeletedObjectFromAssociationList(Nullable`1<bool> value);
    internal static bool CanNullifyAssociatedMember(Session session, XPMemberInfo associatedMi, object objectRemoved);
    public sealed virtual void Remove(object value);
    private void PatchObjectOnRemove(object value);
    public sealed virtual void RemoveAt(int index);
    public object Indexer(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    [IteratorStateMachineAttribute("DevExpress.Xpo.Helpers.XPAssociationList/<GetEnumerator>d__41")]
public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual XPClassInfo get_ClassInfo();
    public sealed virtual Session get_Session();
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
    private sealed virtual override IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.get_ObjectLayer();
    private sealed virtual override IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.get_DataLayer();
    public sealed virtual bool NeedPrefetch();
    public sealed virtual void FinishPrefetch(ICollection queriedObjects);
    public sealed virtual ObjectsQuery BeginLoad();
    private CriteriaOperator GetFillCriteria();
    public sealed virtual void EndLoad(IEnumerable queriedObjects);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public CriteriaOperator GetRealFetchCriteria();
    public virtual string ToString();
    protected virtual void OnAdd(int index, object value);
    protected virtual void OnRemove(int index, object obj);
    protected virtual void OnUnload();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.Helpers.XPAssociationList`1 : XPAssociationList {
    public T Item { get; public set; }
    private int System.Collections.Generic.ICollection<T>.Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public XPAssociationList`1(Session session, object owner, XPMemberInfo collectionMember);
    private sealed virtual override int System.Collections.Generic.IList<T>.IndexOf(T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<T>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    [IteratorStateMachineAttribute("DevExpress.Xpo.Helpers.XPAssociationList`1/<System-Collections-Generic-IEnumerable<T>-GetEnumerator>d__16")]
private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
}
public class DevExpress.Xpo.Helpers.XPAsyncListServerCore : AsyncListServerCore {
    protected bool AllowInvalidFilterCriteria { get; }
    public XPAsyncListServerCore(SynchronizationContext context);
    protected virtual bool get_AllowInvalidFilterCriteria();
    protected virtual CommandQueue CreateCommandQueue(SynchronizationContext context, SendOrPostCallback somethingInTheOutputQueueCallback, EventHandler`1<ListServerGetOrFreeEventArgs> listServerGet, EventHandler`1<ListServerGetOrFreeEventArgs> listServerFree, EventHandler`1<GetTypeInfoEventArgs> getTypeInfo, EventHandler`1<GetWorkerThreadRowInfoEventArgs> getWorkerThreadRowInfo);
}
public static class DevExpress.Xpo.Helpers.XPCollectionCompareHelper : object {
    public static IComparer CreateComparer(SortingCollection sortColumns, CriteriaCompilerDescriptor descriptor, CriteriaCompilerAuxSettings settings);
    public static IComparer CreateDesignTimeComparer();
    private static object GetObjectFromPuncturedCollection(IList objects, int puncturedAt, int x);
    public static int GetPos(IComparer cmp, object obj, IList objects, int puncturedAt, int dreamPos);
}
public class DevExpress.Xpo.Helpers.XPCollectionHelper : object {
    private ChangeSubscriber _EventHandler;
    protected XPBaseCollection ParentCollection;
    public XPClassInfo ObjectClassInfo;
    public Session Session;
    private IList objList;
    private ChangeSubscriber EventHandler { get; }
    public IList ObjList { get; }
    public XPClassInfo FetchObjectsClassInfo { get; }
    public ICollection IntObjList { get; }
    public bool LoadCollectionOnModify { get; }
    protected bool LoadCollectionOnModifyCore { get; }
    public XPCollectionHelper(XPBaseCollection owner);
    private ChangeSubscriber get_EventHandler();
    public IList get_ObjList();
    public virtual int Add(object newObject);
    public virtual void Remove(object theObject);
    public virtual void BeforeAfterRemove(object theObject);
    public virtual XPClassInfo get_FetchObjectsClassInfo();
    public virtual int InternalAddObject(object newObject);
    public void ClearObjList();
    public virtual ICollection get_IntObjList();
    public virtual void Reload();
    public virtual CriteriaOperator PatchCriteriaFromUserToFetch(CriteriaOperator fetchCriteria);
    public virtual IEnumerable PatchLoadedCollectionWithChangesWhileNotLoaded(IEnumerable objects);
    public virtual IEnumerable GetContentWithoutQueryIfPossible();
    public virtual Task`1<IEnumerable> GetContentWithoutQueryIfPossibleAsync(CancellationToken cancellation);
    public bool get_LoadCollectionOnModify();
    protected virtual bool get_LoadCollectionOnModifyCore();
    public virtual bool IsThereForDelete(object theObject);
    public virtual CriteriaOperator GetHardcodedCriterion();
    public virtual void KickOutCancelledAddNew(object sender);
}
public class DevExpress.Xpo.Helpers.XPCommandQueue : CommandQueue {
    public XPCommandQueue(SynchronizationContext context, SendOrPostCallback somethingInTheOutputQueueCallback, EventHandler`1<ListServerGetOrFreeEventArgs> listServerGet, EventHandler`1<ListServerGetOrFreeEventArgs> listServerFree, EventHandler`1<GetTypeInfoEventArgs> getTypeInfo, EventHandler`1<GetWorkerThreadRowInfoEventArgs> getWorkerThreadRowInfo);
    protected virtual void Visit(CommandRefresh result);
}
public class DevExpress.Xpo.Helpers.XPCursorEnumerator : object {
    private PageSelector pageSelector;
    private int posInCurrentCollection;
    private int currentCollectionBase;
    private int pageSize;
    private Session session;
    private List`1<object> currentCollection;
    private SortingCollection sorting;
    private bool IsAfterLastElement { get; }
    private bool IsBeforeFirstElement { get; }
    public object Current { get; }
    public XPCursorEnumerator(Session session, XPClassInfo objectClassInfo, PageSelector pageSelector, int pageSize, SortingCollection sorting);
    public XPCursorEnumerator(Session session, XPClassInfo objectClassInfo, PageSelector pageSelector);
    private bool get_IsAfterLastElement();
    private bool get_IsBeforeFirstElement();
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public static class DevExpress.Xpo.Helpers.XPDelayedPropertyHelper : object {
    public static XPDelayedProperty GetDelayedPropertyContainer(object theObject, XPMemberInfo mi);
    public static object GetInternalValue(XPDelayedProperty container);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.Helpers.XPDesignTimePropertyDescriptorCollection : PropertyDescriptorCollection {
    private XPClassInfo objectType;
    public PropertyDescriptor Item { get; }
    public PropertyDescriptor Item { get; }
    public XPDesignTimePropertyDescriptorCollection(XPClassInfo objectType);
    public virtual PropertyDescriptor Find(string name, bool ignoreCase);
    public virtual PropertyDescriptor get_Item(string itemIndex);
    public virtual PropertyDescriptor get_Item(int itemIndex);
    public PropertyDescriptor FindCaseSmart(string name);
}
public class DevExpress.Xpo.Helpers.XPInstantFeedbackSourceObjectTypeConverter : TypeListConverter {
    public static string None;
    private SortedList`2<string, Type> typesCache;
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    private SortedList`2<string, Type> GetAvailableTypes(ITypeDescriptorContext context, bool showErrorMessage);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object val);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destType);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
public class DevExpress.Xpo.Helpers.XPInstantListDesignTimeWrapper : object {
    private DefaultSession DesignSession;
    private ISite Site;
    private Type _ElementType;
    private string _DisplayableProperties;
    private PropertyDescriptorCollection _Descriptors;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    public Type ElementType { get; public set; }
    public string DisplayableProperties { get; public set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public XPInstantListDesignTimeWrapper(ISite site, Type type, string dispProps);
    public Type get_ElementType();
    public void set_ElementType(Type value);
    public string get_DisplayableProperties();
    public void set_DisplayableProperties(string value);
    private void InvalidateDescriptors();
    public static XPInstantPropertyDescriptorJustMessage GetMessagingDescriptorIfUnsafe(string name, PropertyDescriptor prototype);
    private PropertyDescriptorCollection GetDescriptors();
    private PropertyDescriptorCollection GetDescriptorsCore();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static IEnumerable`1<string> GetDefaultDisplayableProperties(XPClassInfo classInfo);
    public static IEnumerable`1<string> GetDefaultDisplayableProperties(XPClassInfo classInfo, int depthOfReferences);
    [IteratorStateMachineAttribute("DevExpress.Xpo.Helpers.XPInstantListDesignTimeWrapper/<GetDefProps>d__69")]
private static IEnumerable`1<string> GetDefProps(int depthLeft, XPClassInfo ci);
    public static XPDictionary GetDesignDictionary(ISite site);
}
public class DevExpress.Xpo.Helpers.XPInstantPropertyDescriptorJustMessage : PropertyDescriptor {
    private string Message;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public XPInstantPropertyDescriptorJustMessage(string name, string message);
    public virtual bool CanResetValue(object component);
    public virtual Type get_ComponentType();
    public virtual object GetValue(object component);
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class DevExpress.Xpo.Helpers.XPInstantViewDesignTimeWrapper : object {
    private DefaultSession DesignSession;
    private ISite Site;
    private Type _ElementType;
    private PropertyDescriptorCollection _Descriptors;
    private ServerViewPropertiesCollection viewProperties;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    public Type ElementType { get; public set; }
    public ServerViewPropertiesCollection Properties { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public XPInstantViewDesignTimeWrapper(ISite site, Type type, ServerViewPropertiesCollection properties);
    public Type get_ElementType();
    public void set_ElementType(Type value);
    public ServerViewPropertiesCollection get_Properties();
    private void InvalidateDescriptors();
    public static XPInstantPropertyDescriptorJustMessage GetMessagingDescriptorIfUnsafe(string name, PropertyDescriptor prototype);
    private PropertyDescriptorCollection GetDescriptors();
    private PropertyDescriptorCollection GetDescriptorsCore();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static XPDictionary GetDesignDictionary(ISite site);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Properties>b__10_0(object sender, NotifyCollectionChangedEventArgs e);
}
public class DevExpress.Xpo.Helpers.XPManyToManyAliasList : object {
    private Session _Session;
    public IList AliasedList;
    public XPMemberInfo SkippedReference;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public XPClassInfo ClassInfo { get; }
    public XPDictionary Dictionary { get; }
    public Session Session { get; }
    public IObjectLayer ObjectLayer { get; }
    public IDataLayer DataLayer { get; }
    private bool DevExpress.Xpo.Helpers.IXPUnloadableAssociationList.IsLoaded { get; }
    public XPManyToManyAliasList(Session session, IList aliasedCollection, XPMemberInfo skippedProperty);
    protected virtual object CreateIntermediateObject();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public object Indexer(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    [IteratorStateMachineAttribute("DevExpress.Xpo.Helpers.XPManyToManyAliasList/<GetEnumerator>d__27")]
public sealed virtual IEnumerator GetEnumerator();
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.XPManyToManyAliasList/<EnumerateAsync>d__28")]
public Task`1<IList> EnumerateAsync(CancellationToken cancellationToken);
    public sealed virtual XPClassInfo get_ClassInfo();
    public sealed virtual XPDictionary get_Dictionary();
    public sealed virtual Session get_Session();
    public sealed virtual IObjectLayer get_ObjectLayer();
    public sealed virtual IDataLayer get_DataLayer();
    private sealed virtual override void DevExpress.Xpo.Helpers.IXPUnloadableAssociationList.Unload();
    private sealed virtual override bool DevExpress.Xpo.Helpers.IXPUnloadableAssociationList.get_IsLoaded();
    private void AliasedListCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private IList ConvertList(IList objects);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public CriteriaOperator GetRealFetchCriteria(object owner, XPMemberInfo manyToManyAliasProperty);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.Helpers.XPManyToManyAliasList`1 : XPManyToManyAliasList {
    public T Item { get; public set; }
    private int System.Collections.Generic.ICollection<T>.Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public XPManyToManyAliasList`1(Session session, IList aliasedCollection, XPMemberInfo skippedProperty);
    private sealed virtual override int System.Collections.Generic.IList<T>.IndexOf(T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<T>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    [IteratorStateMachineAttribute("DevExpress.Xpo.Helpers.XPManyToManyAliasList`1/<System-Collections-Generic-IEnumerable<T>-GetEnumerator>d__16")]
private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
}
public class DevExpress.Xpo.Helpers.XPMemberAssignment : object {
    private MemberInfo member;
    private string memberName;
    private CriteriaOperator property;
    [XmlAttributeAttribute]
public string MemberName { get; public set; }
    public CriteriaOperator Property { get; public set; }
    public XPMemberAssignment(MemberInfo member, CriteriaOperator property);
    public XPMemberAssignment(XPMemberAssignment source, CriteriaOperator property);
    public XPMemberAssignment(CriteriaOperator property);
    public MemberInfo GetMember(Type type);
    public string get_MemberName();
    public void set_MemberName(string value);
    public CriteriaOperator get_Property();
    public void set_Property(CriteriaOperator value);
}
public class DevExpress.Xpo.Helpers.XPMemberAssignmentCollection : List`1<XPMemberAssignment> {
    public XPMemberAssignmentCollection(IEnumerable`1<XPMemberAssignment> colletcion);
}
public class DevExpress.Xpo.Helpers.XPObjectStubCriteriaGenerator : ClientCriteriaVisitorBase {
    protected Session session;
    protected NestedParentGuidMap npgMap;
    protected NestedGuidParentMap ngpMap;
    protected XPObjectClassInfoStubCache ciCache;
    protected XPObjectStubCriteriaGenerator(Session session, NestedParentGuidMap map, XPObjectClassInfoStubCache ciCache);
    protected XPObjectStubCriteriaGenerator(Session session, NestedGuidParentMap map, XPObjectClassInfoStubCache ciCache);
    protected virtual CriteriaOperator Visit(InOperator theOperator);
    protected virtual CriteriaOperator Visit(OperandValue theOperand);
    public static SortingCollection PreprocessSortingCollection(Session session, NestedParentGuidMap map, XPObjectClassInfoStubCache ciCache, SortingCollection sortingCollection);
    public static CriteriaOperator GetStubCriteria(Session session, NestedParentGuidMap map, XPObjectClassInfoStubCache ciCache, CriteriaOperator op);
    public static CriteriaOperator GetSessionCriteria(Session session, NestedGuidParentMap map, XPObjectClassInfoStubCache ciCache, CriteriaOperator op);
}
public class DevExpress.Xpo.Helpers.XPObjectTypesManager : object {
    private IObjectLayer managedLayer;
    private Dictionary`2<XPClassInfo, XPObjectType> loadedTypes;
    private IObjectMap objects;
    public Dictionary`2<XPClassInfo, XPObjectType> AllTypes { get; }
    public XPObjectTypesManager(Session session);
    public XPObjectTypesManager(IObjectLayer layer);
    private IObjectLayerAsync GetObjectLayerAsync();
    private Dictionary`2<XPClassInfo, XPObjectType> GetAllTypes();
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.XPObjectTypesManager/<GetAllTypesAsync>d__7")]
private Task`1<Dictionary`2<XPClassInfo, XPObjectType>> GetAllTypesAsync(AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    private void FillLoadedTypes(ICollection objectTypesList);
    public void EnsureIsTypedObjectValid();
    public Task EnsureIsTypedObjectValidAsync(CancellationToken cancellationToken);
    public Dictionary`2<XPClassInfo, XPObjectType> get_AllTypes();
    public XPObjectType GetObjectType(int id);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.XPObjectTypesManager/<GetObjectTypeAsync>d__14")]
public Task`1<XPObjectType> GetObjectTypeAsync(int id, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    public XPObjectType GetObjectType(XPClassInfo objectType);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.XPObjectTypesManager/<GetObjectTypeAsync>d__16")]
public Task`1<XPObjectType> GetObjectTypeAsync(XPClassInfo objectType, AsyncOperationIdentifier asyncOperationId, CancellationToken cancellationToken);
    public XPObjectType TryGetObjectType(XPClassInfo objectType);
}
internal class DevExpress.Xpo.Helpers.XpoExpressionEvaluator : ExpressionEvaluator {
    public XpoExpressionEvaluator(Session session, EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.Helpers.XpoServerCollectionAdderRemover : XpoServerCollectionWrapperBase {
    private bool deleteOnRemove;
    private List`1<object> addedItems;
    private ObjectSet addedItemsDictionary;
    private ObjectSet removedItemsDictionary;
    private int currentGroupDepth;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler _ListChanged;
    private object nowAdding;
    private bool CollectionInModifiedState { get; }
    private bool AddingRemovingAllowed { get; }
    public int Count { get; }
    public object Item { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool AllowRemove { get; }
    public bool AllowNew { get; }
    public bool SupportsChangeNotification { get; }
    public XpoServerCollectionAdderRemover(IXpoServerModeGridDataSource nested, bool deleteOnRemove);
    private bool get_CollectionInModifiedState();
    private bool get_AddingRemovingAllowed();
    public virtual object DXClone();
    public virtual int Add(object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual int get_Count();
    public virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public virtual int GetRowIndexByKey(object key);
    public virtual object GetRowKey(int index);
    public virtual List`1<object> GetTotalSummary();
    public virtual int IndexOf(object value);
    protected int IndexFromBase(int baseIndex);
    protected int IndexToBase(int outerIndex);
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    public virtual void Insert(int index, object value);
    public virtual bool get_AllowRemove();
    public virtual bool get_AllowNew();
    public virtual void Refresh();
    private void ValidateLists();
    private void OnNestedListChanged(object sender, ListChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void add__ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ListChanged(ListChangedEventHandler value);
    public virtual void add_ListChanged(ListChangedEventHandler value);
    public virtual void remove_ListChanged(ListChangedEventHandler value);
    protected virtual void RaiseChanged(ListChangedEventArgs e);
    public virtual bool get_SupportsChangeNotification();
    protected virtual object CreateAddNewInstance();
    public virtual object AddNew();
    private void SubscribeNewlyAdded(object obj);
    private void UnsubscribeNewlyAdded(object obj);
    private void NewAddedObjectChangedHandler(object sender, ObjectChangeEventArgs e);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool AllowAction(string fieldName, ColumnServerActionType action);
}
public class DevExpress.Xpo.Helpers.XpoServerCollectionChangeTracker : XpoServerCollectionWrapperBase {
    [CompilerGeneratedAttribute]
private ListChangedEventHandler _ListChanged;
    public bool SupportsChangeNotification { get; }
    public XpoServerCollectionChangeTracker(IXpoServerModeGridDataSource nested);
    public virtual object DXClone();
    private void OnNestedSessionCommiting(object sender, SessionManipulationEventArgs e);
    private void OnNestedSessionCommited(object sender, SessionManipulationEventArgs e);
    private void OnNestedListChanged(object sender, ListChangedEventArgs e);
    private void OnObjectChanged(object sender, ObjectChangeEventArgs e);
    private void OnObjectLoaded(object sender, ObjectManipulationEventArgs e);
    private void NotifyObjectChangedIfNeeded(object obj);
    [CompilerGeneratedAttribute]
private void add__ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ListChanged(ListChangedEventHandler value);
    public virtual void add_ListChanged(ListChangedEventHandler value);
    public virtual void remove_ListChanged(ListChangedEventHandler value);
    private void EventsSubscribeUnSubscribe();
    protected virtual void RaiseChanged(ListChangedEventArgs e);
    public virtual bool get_SupportsChangeNotification();
}
public class DevExpress.Xpo.Helpers.XpoServerCollectionFlagger : XpoServerCollectionWrapperBase {
    private bool allowEdit;
    private bool allowAddNew;
    private bool allowRemove;
    public bool AllowEdit { get; }
    public bool AllowNew { get; }
    public bool AllowRemove { get; }
    public bool IsReadOnly { get; }
    public XpoServerCollectionFlagger(IXpoServerModeGridDataSource nested, bool allowEdit, bool allowAddNew, bool allowRemove);
    public virtual object DXClone();
    public virtual bool get_AllowEdit();
    public virtual bool get_AllowNew();
    public virtual bool get_AllowRemove();
    public virtual bool get_IsReadOnly();
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Xpo.Helpers.XpoServerCollectionWrapperBase : object {
    public IXpoServerModeGridDataSource Nested;
    public XPClassInfo ClassInfo { get; }
    public XPDictionary Dictionary { get; }
    public Session Session { get; }
    public IObjectLayer ObjectLayer { get; }
    public IDataLayer DataLayer { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool AllowEdit { get; }
    public bool AllowNew { get; }
    public bool AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    public bool SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private CriteriaOperator DevExpress.Data.Filtering.Helpers.IFilteredDataSource.Filter { get; private set; }
    public bool RefreshSupported { get; }
    protected XpoServerCollectionWrapperBase(IXpoServerModeGridDataSource nested);
    public virtual XPClassInfo get_ClassInfo();
    public sealed virtual XPDictionary get_Dictionary();
    public sealed virtual Session get_Session();
    public sealed virtual IObjectLayer get_ObjectLayer();
    public sealed virtual IDataLayer get_DataLayer();
    public sealed virtual void add_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void remove_InconsistencyDetected(EventHandler`1<ServerModeInconsistencyDetectedEventArgs> value);
    public sealed virtual void add_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public sealed virtual void remove_ExceptionThrown(EventHandler`1<ServerModeExceptionThrownEventArgs> value);
    public virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public virtual string GetListName(PropertyDescriptor[] listAccessors);
    public virtual void Apply(CriteriaOperator filterCriteria, ICollection`1<ServerModeOrderDescriptor[]> sortInfo, int groupCount, ICollection`1<ServerModeSummaryDescriptor> summaryInfo, ICollection`1<ServerModeSummaryDescriptor> totalSummaryInfo);
    public virtual int FindIncremental(CriteriaOperator expression, string value, int startIndex, bool searchUp, bool ignoreStartRow, bool allowLoop);
    public virtual int LocateByValue(CriteriaOperator expression, object value, int startIndex, bool searchUp);
    public virtual int LocateByExpression(CriteriaOperator expression, int startIndex, bool searchUp);
    public virtual List`1<ListSourceGroupInfo> GetGroupInfo(ListSourceGroupInfo parentGroup);
    public virtual int GetRowIndexByKey(object key);
    public virtual object GetRowKey(int index);
    public virtual List`1<object> GetTotalSummary();
    public virtual Object[] GetUniqueColumnValues(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    public virtual int Add(object value);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    public virtual object AddNew();
    public virtual bool get_AllowEdit();
    public virtual bool get_AllowNew();
    public virtual bool get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    public virtual bool get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.Helpers.IFilteredDataSource.get_Filter();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IFilteredDataSource.set_Filter(CriteriaOperator value);
    public virtual void add_ListChanged(ListChangedEventHandler value);
    public virtual void remove_ListChanged(ListChangedEventHandler value);
    public virtual void Refresh();
    public virtual bool get_RefreshSupported();
    public virtual void SetFixedCriteria(CriteriaOperator fixedCriteria);
    public virtual bool AllowAction(string fieldName, ColumnServerActionType action);
    public virtual IList GetAllFilteredAndSortedRows();
    public virtual bool PrefetchRows(ListSourceGroupInfo[] groupsToPrefetch, CancellationToken cancellationToken);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintGridIsPaged(int pageSize);
    private sealed virtual override void DevExpress.Data.Helpers.IListServerHints.HintMaxVisibleRowsInGrid(int rowsInGrid);
    public abstract virtual object DXClone();
}
public class DevExpress.Xpo.Helpers.XpoServerModeCache : ServerModeKeyedCache {
    public Session Session;
    public XPClassInfo ClassInfo;
    public CriteriaOperator ExternalCriteria;
    private bool UseGetObjectsByKeysForFetchRowsByKeys { get; }
    protected int MagicNumberMaxPageSizeForFillKeysToFetchListWeb { get; }
    public XpoServerModeCache(Session session, XPClassInfo classInfo, CriteriaOperator externalCriteria, CriteriaOperator[] keyCriteria, ServerModeOrderDescriptor[][] sortInfo, int groupCount, ServerModeSummaryDescriptor[] summary, ServerModeSummaryDescriptor[] totalSummary);
    protected virtual Func`2<object, object> GetOnInstanceEvaluator(CriteriaOperator criteriaOperator);
    public static SortingCollection OrderDescriptorsToSortingCollection(IEnumerable`1<ServerModeOrderDescriptor> order);
    protected virtual Object[] FetchKeys(CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    protected virtual Object[] FetchRows(CriteriaOperator where, ServerModeOrderDescriptor[] order, int take);
    private bool get_UseGetObjectsByKeysForFetchRowsByKeys();
    protected virtual int get_MagicNumberMaxPageSizeForFillKeysToFetchListWeb();
    protected virtual Object[] FetchRowsByKeys(Object[] keys);
    protected virtual int GetCount(CriteriaOperator criteriaOperator);
    protected virtual Func`2<object, object> GetKeyComponentFromRowGetter(CriteriaOperator keyComponent);
    internal static Type ExtractKeyPropertyType(XPMemberInfo mi);
    protected virtual Type ResolveKeyType(CriteriaOperator singleKeyCriterion);
    protected virtual Type ResolveRowType();
    public static XPClassInfo ObjectExpressionType(XPClassInfo ci, CriteriaOperator expression);
    internal static ServerModeGroupInfoData[] PrepareChildrenCommon(Session session, XPClassInfo classInfo, CriteriaOperator externalFilter, Func`2<CriteriaOperator, XPClassInfo> objectExpressionTypeGetter, CriteriaOperator groupWhere, CriteriaOperator[] groupByCriteria, CriteriaOperator[] orderByCriteria, Boolean[] isDescOrder, ServerModeSummaryDescriptor[] summaries);
    protected virtual ServerModeGroupInfoData[] PrepareChildren(CriteriaOperator groupWhere, CriteriaOperator[] groupByCriteria, CriteriaOperator[] orderByCriteria, Boolean[] isDescOrder, ServerModeSummaryDescriptor[] summaries);
    internal static ServerModeGroupInfoData PrepareTopGroupInfoCommon(ServerModeSummaryDescriptor[] summaries, Session session, XPClassInfo classInfo, CriteriaOperator externalFilter);
    protected virtual ServerModeGroupInfoData PrepareTopGroupInfo(ServerModeSummaryDescriptor[] summaries);
    private static CriteriaOperator ConvertToAggregate(ServerModeSummaryDescriptor d);
    [CompilerGeneratedAttribute]
private XPClassInfo <PrepareChildren>b__20_0(CriteriaOperator c);
}
public class DevExpress.Xpo.Helpers.XpoServerModeCore : ServerModeCore {
    private CriteriaOperator _FixedCriteria;
    private Session _Session;
    private XPClassInfo _ClassInfo;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    private static OperandProperty ThisCriterion;
    private string _DisplayableProperties;
    private ItemProperties itemProperties;
    public bool AllowInvalidFilterCriteria { get; }
    public CriteriaOperator FixedCriteria { get; }
    private CriteriaOperator DevExpress.Data.Filtering.Helpers.IFilteredDataSource.Filter { get; private set; }
    public Session Session { get; }
    public XPClassInfo ClassInfo { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    public XPDictionary Dictionary { get; }
    public IObjectLayer ObjectLayer { get; }
    public IDataLayer DataLayer { get; }
    public string DisplayableProperties { get; }
    public XpoServerModeCore(Session initialSession, XPClassInfo initialClassInfo, CriteriaOperator initialFixedCriteria, string displayableProps, string defaultSorting);
    private static XpoServerModeCore();
    internal static CriteriaOperator[] GetKeyCriteria(XPClassInfo ci);
    public virtual bool get_AllowInvalidFilterCriteria();
    protected virtual ServerModeCore DXClone();
    protected virtual ServerModeCore DXCloneCreate();
    protected virtual ServerModeCache CreateCacheCore();
    public virtual void SetFixedCriteria(CriteriaOperator op);
    public CriteriaOperator get_FixedCriteria();
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.Helpers.IFilteredDataSource.get_Filter();
    private sealed virtual override void DevExpress.Data.Filtering.Helpers.IFilteredDataSource.set_Filter(CriteriaOperator value);
    protected CriteriaOperator ExpandFilter(IPersistentValueExtractor session, XPClassInfo ci, CriteriaOperator op);
    public sealed virtual Session get_Session();
    public sealed virtual XPClassInfo get_ClassInfo();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    public sealed virtual XPDictionary get_Dictionary();
    public sealed virtual IObjectLayer get_ObjectLayer();
    public sealed virtual IDataLayer get_DataLayer();
    public static bool IColumnsServerActionsAllowAction(Session session, XPClassInfo ci, string fieldName);
    private sealed virtual override bool DevExpress.Data.Helpers.IColumnsServerActions.AllowAction(string fieldName, ColumnServerActionType action);
    protected virtual CriteriaOperator ExtractExpressionCore(CriteriaOperator input);
    public string get_DisplayableProperties();
    public virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public virtual string GetListName(PropertyDescriptor[] listAccessors);
    public virtual Object[] GetUniqueColumnValuesCore(CriteriaOperator valuesExpression, int maxCount, CriteriaOperator filterExpression, bool ignoreAppliedFilter);
    protected virtual Object[] GetUniqueValues(CriteriaOperator expression, int maxCount, CriteriaOperator filter);
    private Object[] GetUniqueValues(CriteriaOperator originalExpression, CriteriaOperator expandedExpression, int maxCount, CriteriaOperator filter);
    private XPClassInfo GetObjectExpressionType(CriteriaOperator originalExpression);
    public virtual void Refresh();
    public virtual IList GetAllFilteredAndSortedRows();
}
public class DevExpress.Xpo.Helpers.XpoViewServerModeCache : ServerModeKeyedCache {
    public Session Session;
    public XPClassInfo ClassInfo;
    public CriteriaOperator ExternalCriteria;
    private CriteriaOperator[] SelectProperties;
    public XpoViewServerModeCache(Session session, XPClassInfo classInfo, CriteriaOperator externalCriteria, CriteriaOperator[] displayableProps, CriteriaOperator[] keyCriteria, ServerModeOrderDescriptor[][] sortInfo, int groupCount, ServerModeSummaryDescriptor[] summary, ServerModeSummaryDescriptor[] totalSummary);
    protected virtual Object[] FetchKeys(CriteriaOperator where, ServerModeOrderDescriptor[] order, int skip, int take);
    protected virtual Object[] FetchRows(CriteriaOperator where, ServerModeOrderDescriptor[] order, int take);
    protected virtual int GetCount(CriteriaOperator criteriaOperator);
    protected virtual ServerModeGroupInfoData PrepareTopGroupInfo(ServerModeSummaryDescriptor[] summaries);
    protected virtual Type ResolveKeyType(CriteriaOperator singleKeyCriterion);
    protected virtual Type ResolveRowType();
    protected virtual Func`2<object, object> GetOnInstanceEvaluator(CriteriaOperator toEvaluate);
    protected virtual ServerModeGroupInfoData[] PrepareChildren(CriteriaOperator groupWhere, CriteriaOperator[] groupByCriteria, CriteriaOperator[] orderByCriteria, Boolean[] isDescOrder, ServerModeSummaryDescriptor[] summaries);
}
public class DevExpress.Xpo.Helpers.XpoViewServerModeCore : ServerModeCore {
    private Session Session;
    private XPClassInfo ClassInfo;
    private CriteriaOperator _FixedCriteria;
    private CriteriaOperator[] SelectExpressions;
    private String[] PDNames;
    private bool lastPropertyIsExtraKey;
    private ViewProps2ClassPropsConverter _ConverterInstance;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    private PropertyDescriptorCollection propertyDescriptors;
    public bool AllowInvalidFilterCriteria { get; }
    private CriteriaOperator FixedCriteria { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    public XpoViewServerModeCore(Session initialSession, XPClassInfo initialClassInfo, CriteriaOperator initialFixedCriteria, IEnumerable`1<Tuple`2<string, CriteriaOperator>> props, string defaultSorting);
    public XpoViewServerModeCore(Session initialSession, XPClassInfo initialClassInfo, CriteriaOperator initialFixedCriteria, IEnumerable`1<Tuple`2<string, CriteriaOperator>> props, string defaultSorting, bool lastPropertyIsExtraKey);
    public virtual bool get_AllowInvalidFilterCriteria();
    protected virtual CriteriaOperator ExtractExpressionCore(CriteriaOperator d);
    protected virtual Func`2<object, object> GetOnInstanceEvaluator(CriteriaOperator dirtyExpression, CriteriaOperator extractedExpression);
    protected virtual ServerModeCore DXClone();
    protected virtual ServerModeCore DXCloneCreate();
    protected virtual ServerModeCache CreateCacheCore();
    public virtual void SetFixedCriteria(CriteriaOperator op);
    private CriteriaOperator get_FixedCriteria();
    protected CriteriaOperator EnsurePersistent(CriteriaOperator op);
    private CriteriaOperator ExpandFixedFilter(CriteriaOperator op);
    public virtual IList GetAllFilteredAndSortedRows();
    protected virtual Object[] GetUniqueValues(CriteriaOperator expression, int maxCount, CriteriaOperator filter);
    public virtual void Refresh();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    [CompilerGeneratedAttribute]
private Tuple`2<string, CriteriaOperator> <DXCloneCreate>b__16_0(string name, int i);
}
internal class DevExpress.Xpo.Helpers.XpoViewServerModePropertyDescriptor : PropertyDescriptor {
    private int index;
    private Type reportedType;
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public XpoViewServerModePropertyDescriptor(string name, Type type, int index);
    public virtual bool get_IsReadOnly();
    public virtual object GetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
}
public class DevExpress.Xpo.Helpers.XPPropertyDescriptor : XPPropertyDescriptorBase {
    private static bool _NonAggregatedPathsEditable;
    private XPMemberInfo targetMember;
    private XPClassInfo objectType;
    private MemberInfoCollection path;
    private Type propertyType;
    private ValueAccessor accessor;
    private string displayName;
    private string memberName;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This property provides backward compatibility with XPO v1.5. It must not be switched to true in a situation other than that. If you set it to True to make subproperties of a referenced object editable, you must implement proper saving or canceling changes made to the referenced object, when it is being edited in UI as a part of its parent object.")]
public static bool NonAggregatedPathsEditable { get; public set; }
    public string DisplayName { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public XPMemberInfo MemberInfo { get; }
    private bool DevExpress.Data.Access.IReferenceAsCollectionPropertyDescriptorMarker.IsReferenceAsCollectionPropertyDescriptor { get; }
    public XPPropertyDescriptor(XPClassInfo objectType, string propertyName);
    public XPPropertyDescriptor(Session session, XPClassInfo objectType, string propertyName);
    public static bool get_NonAggregatedPathsEditable();
    public static void set_NonAggregatedPathsEditable(bool value);
    public virtual string get_DisplayName();
    public virtual bool get_IsReadOnly();
    protected virtual void FillAttributes(IList attributeList);
    public virtual object GetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public XPMemberInfo get_MemberInfo();
    public virtual void AddValueChanged(object component, EventHandler handler);
    public virtual void RemoveValueChanged(object component, EventHandler handler);
    private sealed virtual override void DevExpress.Xpo.Helpers.IObjectChange.OnObjectChanged(object sender, ObjectChangeEventArgs arg);
    private sealed virtual override bool DevExpress.Data.Access.IReferenceAsCollectionPropertyDescriptorMarker.get_IsReferenceAsCollectionPropertyDescriptor();
}
public abstract class DevExpress.Xpo.Helpers.XPPropertyDescriptorBase : PropertyDescriptor {
    public static string ReferenceAsObjectTail;
    public static string ReferenceAsKeyTail;
    public XPPropertyDescriptorBase(string propertyName);
    public static string GetMemberName(string propertyName);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.Helpers.XPPropertyDescriptorCollection : PropertyDescriptorCollection {
    private XPClassInfo objectType;
    private Session session;
    public PropertyDescriptor Item { get; }
    public PropertyDescriptor Item { get; }
    public XPPropertyDescriptorCollection(Session session, XPClassInfo objectType, ICollection descriptors);
    public XPPropertyDescriptorCollection(Session session, XPClassInfo objectType, PropertyDescriptor[] descriptors);
    public XPPropertyDescriptorCollection(Session session, XPClassInfo objectType);
    public virtual PropertyDescriptor Find(string name, bool ignoreCase);
    public virtual PropertyDescriptor get_Item(string itemIndex);
    public virtual PropertyDescriptor get_Item(int itemIndex);
    public PropertyDescriptor FindCaseSmart(string name);
}
[XmlIncludeAttribute("DevExpress.Xpo.Helpers.MemberAccessOperator")]
[XmlIncludeAttribute("DevExpress.Xpo.Helpers.MemeberAccessOperator")]
[XmlIncludeAttribute("DevExpress.Xpo.Helpers.ConstantCompiler")]
[XmlIncludeAttribute("DevExpress.Data.Filtering.ConstantValue")]
[XmlIncludeAttribute("DevExpress.Xpo.Helpers.QuerySet")]
[XmlIncludeAttribute("DevExpress.Xpo.Helpers.FreeQuerySet")]
[XmlIncludeAttribute("DevExpress.Xpo.Helpers.GroupSet")]
[XmlIncludeAttribute("DevExpress.Xpo.Helpers.ParameterOperandValue")]
[XmlIncludeAttribute("DevExpress.Xpo.Helpers.InOperatorCompiler")]
public class DevExpress.Xpo.Helpers.XPQueryData : object {
    private CriteriaOperator criteria;
    private CriteriaOperator groupKey;
    private CriteriaOperator groupCriteria;
    private MemberInitOperator projection;
    private SortingCollection sorting;
    private string objectTypeName;
    private Nullable`1<int> top;
    private Nullable`1<int> skip;
    private bool inTransaction;
    private bool withDeleted;
    private HashSet`1<CriteriaOperator> existingJoins;
    public CriteriaOperator Criteria { get; public set; }
    public CriteriaOperator GroupKey { get; public set; }
    public CriteriaOperator GroupCriteria { get; public set; }
    public MemberInitOperator Projection { get; public set; }
    public SortingCollection Sorting { get; public set; }
    [XmlAttributeAttribute]
public string ObjectTypeName { get; public set; }
    [XmlIgnoreAttribute]
public Nullable`1<int> Top { get; public set; }
    [XmlIgnoreAttribute]
public Nullable`1<int> Skip { get; public set; }
    [XmlAttributeAttribute]
public string TopValue { get; public set; }
    [XmlAttributeAttribute]
public string SkipValue { get; public set; }
    [XmlAttributeAttribute]
public bool InTransaction { get; public set; }
    [XmlAttributeAttribute]
public bool WithDeleted { get; public set; }
    public HashSet`1<CriteriaOperator> ExistingJoins { get; public set; }
    public CriteriaOperator get_Criteria();
    public void set_Criteria(CriteriaOperator value);
    public CriteriaOperator get_GroupKey();
    public void set_GroupKey(CriteriaOperator value);
    public CriteriaOperator get_GroupCriteria();
    public void set_GroupCriteria(CriteriaOperator value);
    public MemberInitOperator get_Projection();
    public void set_Projection(MemberInitOperator value);
    public SortingCollection get_Sorting();
    public void set_Sorting(SortingCollection value);
    public string get_ObjectTypeName();
    public void set_ObjectTypeName(string value);
    public Nullable`1<int> get_Top();
    public void set_Top(Nullable`1<int> value);
    public Nullable`1<int> get_Skip();
    public void set_Skip(Nullable`1<int> value);
    public string get_TopValue();
    public void set_TopValue(string value);
    public string get_SkipValue();
    public void set_SkipValue(string value);
    public bool get_InTransaction();
    public void set_InTransaction(bool value);
    public bool get_WithDeleted();
    public void set_WithDeleted(bool value);
    public HashSet`1<CriteriaOperator> get_ExistingJoins();
    public void set_ExistingJoins(HashSet`1<CriteriaOperator> value);
}
public class DevExpress.Xpo.Helpers.XPQueryExecutePreprocessor : ClientCriteriaVisitorBase {
    private static XPQueryExecutePreprocessor Instance;
    private static XPQueryExecutePreprocessor();
    public static CriteriaOperator Preprocess(CriteriaOperator criteria);
    public static CriteriaOperatorCollection Preprocess(CriteriaOperatorCollection criteriaCollection);
    public static SortingCollection Preprocess(SortingCollection sortingCollection);
    public sealed virtual CriteriaOperator Visit(MemberInitOperator theOperand);
    public sealed virtual CriteriaOperator Visit(ExpressionAccessOperator theOperand);
    public sealed virtual CriteriaOperator Visit(QuerySet theOperand);
    private bool CheckOperandValueEqualToNullSafe(CriteriaOperator co);
    protected virtual CriteriaOperator Visit(BinaryOperator theOperator);
    protected virtual CriteriaOperator Visit(UnaryOperator theOperator);
}
public abstract class DevExpress.Xpo.Helpers.XPRefCollectionHelper : XPCollectionHelper {
    public object OwnerObject;
    public XPMemberInfo RefProperty;
    protected XPRefCollectionHelper(XPBaseCollection parentCollection, object ownerObject, XPMemberInfo refProperty);
    public virtual IEnumerable GetContentWithoutQueryIfPossible();
    [AsyncStateMachineAttribute("DevExpress.Xpo.Helpers.XPRefCollectionHelper/<GetContentWithoutQueryIfPossibleAsync>d__4")]
public virtual Task`1<IEnumerable> GetContentWithoutQueryIfPossibleAsync(CancellationToken cancellationToken);
    public abstract virtual void ClearChangesCache();
    public abstract virtual void Save();
    public static T GetRefCollectionHelperChecked(XPBaseCollection collection, object ownerObject, XPMemberInfo collectionMember);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable> <>n__0(CancellationToken cancellation);
}
public class DevExpress.Xpo.Helpers.XPRefCollectionHelperManyToMany : XPRefCollectionHelper {
    private ObjectDictionary`1<IntermediateObject> hash;
    private List`1<IntermediateObject> added;
    private List`1<IntermediateObject> removed;
    private ObjectDictionary`1<IntermediateObject> Hash { get; }
    public ICollection IntObjList { get; }
    public XPClassInfo FetchObjectsClassInfo { get; }
    public XPRefCollectionHelperManyToMany(XPBaseCollection parentCollection, object ownerObject, XPMemberInfo refProperty);
    private ObjectDictionary`1<IntermediateObject> get_Hash();
    public virtual ICollection get_IntObjList();
    public virtual CriteriaOperator GetHardcodedCriterion();
    private IntermediateObject GetIntermediateObject(object referred);
    public virtual CriteriaOperator PatchCriteriaFromUserToFetch(CriteriaOperator fetchCriteria);
    internal void AddIntermediateObject(IntermediateObject iObject, object referred);
    private IntermediateObject CreateIntermediateObject(object referred);
    private object GetReferredObject(IntermediateObject io);
    private XPBaseCollection GetReferredCollection(IntermediateObject io);
    private XPBaseCollection GetReferredCollection(object obj);
    private XPRefCollectionHelperManyToMany GetReferredHelper(IntermediateObject io);
    public virtual void ClearChangesCache();
    public virtual void Save();
    public virtual int Add(object newObject);
    public virtual void Remove(object theObject);
    public virtual XPClassInfo get_FetchObjectsClassInfo();
    public virtual int InternalAddObject(object newObject);
}
public class DevExpress.Xpo.Helpers.XPRefCollectionHelperOneToMany : XPRefCollectionHelper {
    private ObjectSet added;
    private ObjectSet removed;
    public object AssocRefChangeRemovingObject;
    protected bool LoadCollectionOnModifyCore { get; }
    public XPRefCollectionHelperOneToMany(XPBaseCollection parentCollection, object ownerObject, XPMemberInfo refProperty);
    public virtual CriteriaOperator GetHardcodedCriterion();
    public virtual IEnumerable PatchLoadedCollectionWithChangesWhileNotLoaded(IEnumerable objects);
    public virtual void ClearChangesCache();
    public virtual void Save();
    private void SetObjectPropertyValue(object theObject, object newValue);
    private object GetObjectPropertyValue(object theObject);
    private XPMemberInfo GetObjectProperty();
    public virtual int Add(object newObject);
    public virtual void Remove(object theObject);
    public virtual void BeforeAfterRemove(object theObject);
    public virtual void Reload();
    protected virtual bool get_LoadCollectionOnModifyCore();
    public virtual bool IsThereForDelete(object theObject);
    public virtual void KickOutCancelledAddNew(object removedNew);
}
public class DevExpress.Xpo.Helpers.XPStubOperandValue : OperandValue {
    private bool isConstant;
    private XPObjectStub objectValue;
    public bool IsConstant { get; public set; }
    public XPObjectStub ObjectValue { get; public set; }
    public object Value { get; public set; }
    public XPStubOperandValue(XPObjectStub value, bool isConstant);
    protected virtual object GetXmlValue();
    public bool get_IsConstant();
    public void set_IsConstant(bool value);
    public XPObjectStub get_ObjectValue();
    public void set_ObjectValue(XPObjectStub value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
}
public interface DevExpress.Xpo.ICustomAggregateQueryable {
    public abstract virtual MethodInfo GetMethodInfo();
}
public interface DevExpress.Xpo.ICustomCriteriaOperatorQueryable {
    public abstract virtual CriteriaOperator GetCriteria(CriteriaOperator[] operands);
    public abstract virtual MethodInfo GetMethodInfo();
}
public interface DevExpress.Xpo.ICustomFunctionOperatorQueryable {
    public abstract virtual MethodInfo GetMethodInfo();
}
public interface DevExpress.Xpo.ICustomNonDeterministicFunctionOperatorQueryable {
}
public interface DevExpress.Xpo.IDataLayer {
    public IDbConnection Connection { get; }
    public AutoCreateOption AutoCreateOption { get; }
    public abstract virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public abstract virtual SelectedData SelectData(SelectStatement[] selects);
    public abstract virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SchemaInit(SchemaInitEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SchemaInit(SchemaInitEventHandler value);
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual IDbCommand CreateCommand();
    public abstract virtual AutoCreateOption get_AutoCreateOption();
    public abstract virtual void SetDataLayerWideData(object key, object data);
    public abstract virtual object GetDataLayerWideData(object key);
}
public interface DevExpress.Xpo.IDataLayerAsync {
    public abstract virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public abstract virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public abstract virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
}
public enum DevExpress.Xpo.IdentityMapBehavior : Enum {
    public int value__;
    public static IdentityMapBehavior Default;
    public static IdentityMapBehavior Weak;
    public static IdentityMapBehavior Strong;
}
public interface DevExpress.Xpo.IGenericSecurityRule {
    public abstract virtual bool ValidateObjectsOnCommit(SecurityContext context, SecurityContextValidateItem[] objectsToSave, SecurityContextValidateItem[] objectsToDelete);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public interface DevExpress.Xpo.IList2`1 {
}
public interface DevExpress.Xpo.IMemberValueProvider {
    public abstract virtual object GetMemberValue(SecurityContext context, XPClassInfo classInfo, XPMemberInfo memberInfo, object targetObject);
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.IndexedAttribute : Attribute {
    private bool unique;
    private string name;
    private StringCollection additionalFields;
    [DescriptionAttribute("Gets or sets whether the index created by a property or field is a unique one.")]
public bool Unique { get; public set; }
    [DescriptionAttribute("Gets or sets the name of the index.")]
public string Name { get; public set; }
    [DescriptionAttribute("Gets the names of additional columns that affect index creation.")]
public StringCollection AdditionalFields { get; }
    private IndexedAttribute(XmlNode attributeNode);
    public IndexedAttribute(string additionalFields);
    public IndexedAttribute(String[] additionalFields);
    public IndexedAttribute(string additionalField1, string additionalField2);
    public IndexedAttribute(string additionalField1, string additionalField2, string additionalField3);
    public bool get_Unique();
    public void set_Unique(bool value);
    public string get_Name();
    public void set_Name(string value);
    public StringCollection get_AdditionalFields();
}
[AttributeUsageAttribute("4")]
public class DevExpress.Xpo.IndicesAttribute : Attribute {
    private static Char[] splitter;
    private IList`1<StringCollection> indices;
    public IList`1<StringCollection> Indices { get; }
    public IndicesAttribute(string index);
    public IndicesAttribute(string index1, string index2);
    public IndicesAttribute(string index1, string index2, string index3);
    public IndicesAttribute(String[] indices);
    private static IndicesAttribute();
    public IList`1<StringCollection> get_Indices();
}
[EditorBrowsableAttribute("1")]
public interface DevExpress.Xpo.Infrastructure.IInfrastructure`1 {
    public T Instance { get; }
    public abstract virtual T get_Instance();
}
public interface DevExpress.Xpo.IObjectLayer {
    public bool CanLoadCollectionObjects { get; }
    public abstract virtual ICollection[] LoadObjects(Session session, ObjectsQuery[] queries);
    public abstract virtual object LoadObjectsAsync(Session session, ObjectsQuery[] queries, AsyncLoadObjectsCallback callback);
    public abstract virtual List`1<Object[]> SelectData(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    public abstract virtual object SelectDataAsync(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, AsyncSelectDataCallback callback);
    public abstract virtual ICollection[] GetObjectsByKey(Session session, ObjectsByKeyQuery[] queries);
    public abstract virtual void CommitChanges(Session session, ICollection fullListForDelete, ICollection completeListForSave);
    public abstract virtual object CommitChangesAsync(Session session, ICollection fullListForDelete, ICollection completeListForSave, AsyncCommitCallback callback);
    public abstract virtual PurgeResult Purge();
    public abstract virtual void SetObjectLayerWideObjectTypes(Dictionary`2<XPClassInfo, XPObjectType> loadedTypes);
    public abstract virtual void CreateObjectType(XPObjectType objectType);
    public abstract virtual Dictionary`2<XPClassInfo, XPObjectType> GetObjectLayerWideObjectTypes();
    public abstract virtual void RegisterStaticTypes(XPClassInfo[] types);
    public abstract virtual bool IsStaticType(XPClassInfo type);
    public abstract virtual IObjectMap GetStaticCache(XPClassInfo info);
    public abstract virtual bool get_CanLoadCollectionObjects();
    public abstract virtual Object[] LoadCollectionObjects(Session session, XPMemberInfo refProperty, object ownerObject);
}
public interface DevExpress.Xpo.IObjectLayerAsync {
    public bool CanLoadCollectionObjectsAsynchronously { get; }
    public abstract virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public abstract virtual Task`1<ICollection[]> LoadObjectsAsync(Session session, ObjectsQuery[] queries, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<Object[]>> SelectDataAsync(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, CancellationToken cancellationToken);
    public abstract virtual Task`1<ICollection[]> GetObjectsByKeyAsync(Session session, ObjectsByKeyQuery[] queries, CancellationToken cancellationToken);
    public abstract virtual Task CommitChangesAsync(Session session, ICollection fullListForDelete, ICollection completeListForSave, CancellationToken cancellationToken);
    public abstract virtual Task`1<ObjectDictionary`1<object>> LoadDelayedPropertiesAsync(Session session, IList objects, XPMemberInfo property, CancellationToken cancellationToken);
    public abstract virtual Task`1<Object[]> LoadDelayedPropertiesAsync(Session session, object theObject, MemberPathCollection props, CancellationToken cancellationToken);
    public abstract virtual bool get_CanLoadCollectionObjectsAsynchronously();
    public abstract virtual Task`1<Object[]> LoadCollectionObjectsAsync(Session session, XPMemberInfo refProperty, object ownerObject, CancellationToken cancellationToken);
    public abstract virtual Task CreateObjectTypeAsync(XPObjectType objectType, CancellationToken cancellationToken);
}
public interface DevExpress.Xpo.IObjectLayerEx {
    public IDbConnection Connection { get; }
    public AutoCreateOption AutoCreateOption { get; }
    public abstract virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SchemaInit(SchemaInitEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SchemaInit(SchemaInitEventHandler value);
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual Object[] LoadDelayedProperties(Session session, object theObject, MemberPathCollection props);
    public abstract virtual ObjectDictionary`1<object> LoadDelayedProperties(Session session, IList objects, XPMemberInfo property);
    public abstract virtual AutoCreateOption get_AutoCreateOption();
}
public interface DevExpress.Xpo.IObjectLayerOnSession {
    public abstract virtual bool IsParentObjectToSave(Session session, object theObject);
    public abstract virtual bool IsParentObjectToDelete(Session session, object theObject);
    public abstract virtual ICollection GetParentObjectsToSave(Session session);
    public abstract virtual ICollection GetParentObjectsToDelete(Session session);
    public abstract virtual ICollection GetParentTouchedClassInfos(Session session);
}
public interface DevExpress.Xpo.ISecuredPropertyAccessor {
    public abstract virtual void SetPropertyValue(object obj, string propertyName, T value);
    public abstract virtual void EnterObjectSaving(IXPObject obj);
    public abstract virtual void ExitObjectSaving(IXPObject obj);
    public abstract virtual void ClearChangedSecuredProperties(object obj);
    public abstract virtual void ClearAllChangedSecuredProperties();
    public abstract virtual IEnumerable`1<string> GetChangedSecuredProperties(object obj);
}
public interface DevExpress.Xpo.ISecurityCriteriaPatcher {
    public abstract virtual CriteriaOperator Process(CriteriaOperator input);
}
public interface DevExpress.Xpo.ISecurityRule {
    public XPClassInfo[] SupportedObjectTypes { get; }
    public abstract virtual XPClassInfo[] get_SupportedObjectTypes();
    public abstract virtual bool GetSelectFilterCriteria(SecurityContext context, XPClassInfo classInfo, CriteriaOperator& criteria);
    public abstract virtual bool GetSelectMemberExpression(SecurityContext context, XPClassInfo classInfo, XPMemberInfo memberInfo, CriteriaOperator& expression);
    public abstract virtual bool ValidateObjectOnSelect(SecurityContext context, XPClassInfo classInfo, object realObjectOnLoad);
    public abstract virtual bool ValidateObjectOnSave(SecurityContext context, XPClassInfo classInfo, object theObject, object realObjectOnLoad);
    public abstract virtual bool ValidateObjectOnDelete(SecurityContext context, XPClassInfo classInfo, object theObject, object realObjectOnLoad);
    public abstract virtual ValidateMemberOnSaveResult ValidateMemberOnSave(SecurityContext context, XPMemberInfo memberInfo, object theObject, object realObjectOnLoad, object value, object valueOnLoad, object realValueOnLoad);
}
public interface DevExpress.Xpo.ISecurityRule2 {
    public abstract virtual bool ValidateObjectOnSave(SecurityContext context, object targetObject);
    public abstract virtual bool ValidateMemberOnSave(SecurityContext context, XPMemberInfo memberInfo, object targetObject);
    public abstract virtual bool IsDoNotSaveMember(SecurityContext securityContext, object realObject, XPMemberInfo mi, object value, object valueOnLoad);
    public abstract virtual bool ValidateObjectOnDelete(SecurityContext context, XPClassInfo classInfo, object realObjectOnLoad);
    public abstract virtual bool ValidateObjectOnSelect(SecurityContext context, XPClassInfo classInfo, object realObjectOnLoad);
    public abstract virtual bool GetSelectMemberExpression(SecurityContext context, XPClassInfo classInfo, XPMemberInfo memberInfo, CriteriaOperator& expression);
    public abstract virtual bool GetSelectFilterCriteria(SecurityContext context, XPClassInfo classInfo, CriteriaOperator& criteria);
}
public interface DevExpress.Xpo.ISecurityRuleProvider {
    public abstract virtual ISecurityRule GetRule(XPClassInfo classInfo);
}
public interface DevExpress.Xpo.ISecurityRuleProvider2 {
    public bool Enabled { get; }
    public abstract virtual bool get_Enabled();
    public abstract virtual ISecurityRule2 GetRule(XPClassInfo classInfo);
}
public interface DevExpress.Xpo.ISerializableObjectLayer {
    public bool CanLoadCollectionObjects { get; }
    public abstract virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> LoadObjects(XPDictionaryStub dictionary, ObjectStubsQuery[] queries);
    public abstract virtual CommitObjectStubsResult[] CommitObjects(XPDictionaryStub dictionary, XPObjectStubCollection objectsForDelete, XPObjectStubCollection objectsForSave, LockingOption lockingOption);
    public abstract virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> GetObjectsByKey(XPDictionaryStub dictionary, GetObjectStubsByKeyQuery[] queries);
    public abstract virtual Object[][] SelectData(XPDictionaryStub dictionary, ObjectStubsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    public abstract virtual void CreateObjectType(string assemblyName, string typeName);
    public abstract virtual bool get_CanLoadCollectionObjects();
    public abstract virtual SerializableObjectLayerResult`1<XPObjectStubCollection> LoadCollectionObjects(XPDictionaryStub dictionary, string refPropertyName, XPObjectStub ownerObject);
    public abstract virtual PurgeResult Purge();
}
public interface DevExpress.Xpo.ISerializableObjectLayerEx {
    public abstract virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStub theObject, String[] props);
    public abstract virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStubCollection objects, string property);
    public abstract virtual bool IsParentObjectToSave(XPDictionaryStub dictionary, XPObjectStub theObject);
    public abstract virtual bool IsParentObjectToDelete(XPDictionaryStub dictionary, XPObjectStub theObject);
    public abstract virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToSave();
    public abstract virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToDelete();
    public abstract virtual String[] GetParentTouchedClassInfos();
}
[ObsoleteAttribute("Use IXPReceiveOnChangedFromDelayedProperty and/or IXPReceiveOnChangedFromXPPropertyDescriptor and/or IXPCustomPropertyStore and/or IXPObjectWithChangedEvent interfaces instead", "True")]
public interface DevExpress.Xpo.IXPChangeableObject {
}
public interface DevExpress.Xpo.IXPCustomPropertyStore {
    public abstract virtual object GetCustomPropertyValue(XPMemberInfo property);
    public abstract virtual bool SetCustomPropertyValue(XPMemberInfo property, object theValue);
}
public interface DevExpress.Xpo.IXPInvalidateableObject {
    public bool IsInvalidated { get; }
    public abstract virtual bool get_IsInvalidated();
    public abstract virtual void Invalidate();
}
public interface DevExpress.Xpo.IXPModificationsStore {
    public abstract virtual bool HasModifications();
    public abstract virtual void ClearModifications();
    public abstract virtual void SetPropertyModified(XPMemberInfo property, object oldValue);
    public abstract virtual bool GetPropertyModified(XPMemberInfo property);
    public abstract virtual object GetPropertyOldValue(XPMemberInfo property);
    public abstract virtual void ResetPropertyModified(XPMemberInfo property);
}
public interface DevExpress.Xpo.IXPObject {
    public abstract virtual void OnLoading();
    public abstract virtual void OnLoaded();
    public abstract virtual void OnSaving();
    public abstract virtual void OnSaved();
    public abstract virtual void OnDeleting();
    public abstract virtual void OnDeleted();
}
public interface DevExpress.Xpo.IXPObjectWithChangedEvent {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(ObjectChangeEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(ObjectChangeEventHandler value);
}
public interface DevExpress.Xpo.IXPReceiveOnChangedFromArbitrarySource {
    public abstract virtual void FireChanged(string propertyName);
}
public interface DevExpress.Xpo.IXPReceiveOnChangedFromDelayedProperty {
    public abstract virtual void FireChangedByDelayedPropertySetter(XPMemberInfo member, object oldValue, object newValue);
}
public interface DevExpress.Xpo.IXPReceiveOnChangedFromXPPropertyDescriptor {
    public abstract virtual void FireChangedByXPPropertyDescriptor(string memberName);
    public abstract virtual void BeforeChangeByXPPropertyDescriptor();
    public abstract virtual void AfterChangeByXPPropertyDescriptor();
}
public interface DevExpress.Xpo.IXPSimpleObject {
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.KeyAttribute : Attribute {
    private bool autoGenerate;
    [DescriptionAttribute("Gets or sets whether the key is generated automatically.")]
public bool AutoGenerate { get; public set; }
    public KeyAttribute(bool autoGenerate);
    private KeyAttribute(XmlNode attributeNode);
    public bool get_AutoGenerate();
    public void set_AutoGenerate(bool value);
}
public class DevExpress.Xpo.LoadDataMemberOrderItem : ValueType {
    public int IndexInResultSet;
    public string ClassMemberName;
    public LoadDataMemberOrderItem(int indexInResultSet, string classMemberName);
}
public enum DevExpress.Xpo.LockingOption : Enum {
    public int value__;
    public static LockingOption None;
    public static LockingOption Optimistic;
}
public class DevExpress.Xpo.Logger.LoggerBase : object {
    private int capacity;
    private LogMessage[] messageArray;
    private long headtail;
    private int lostMessageCount;
    private bool enabled;
    public int Count { get; }
    public int Capacity { get; }
    public int LostMessageCount { get; }
    public bool Enabled { get; public set; }
    public bool IsServerActive { get; }
    public LoggerBase(int capacity);
    public sealed virtual int get_Count();
    public sealed virtual int get_Capacity();
    public sealed virtual int get_LostMessageCount();
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    private static void GetHeadAndTail(long headTail, Int32& head, Int32& tail);
    private static long GetHeadTail(int head, int tail);
    public sealed virtual void Log(LogMessage message);
    public sealed virtual void Log(LogMessage[] messages);
    public sealed virtual LogMessage GetMessage();
    public sealed virtual LogMessage[] GetMessages(int messagesAmount);
    public sealed virtual LogMessage[] GetCompleteLog();
    public sealed virtual void ClearLog();
    public sealed virtual bool get_IsServerActive();
}
internal class DevExpress.Xpo.Logger.LogHelpers : object {
    public static string QueryToString(ObjectsQuery query);
    public static string ObjectsByKeyQueryToString(ObjectsByKeyQuery query);
    public static string SortingCollectionToString(SortingCollection collection);
}
public class DevExpress.Xpo.Logger.Transport.Host : object {
    public string HostAddress;
    public int Port;
    public NetBinding Binding;
    public string ServiceName;
    public string VisibleName { get; }
    public Host(string host, int port);
    public Host(string host, int port, NetBinding binding, string serviceName);
    public string get_VisibleName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Host host1, Host host2);
    public static bool op_Inequality(Host host1, Host host2);
}
[ServiceContractAttribute]
public interface DevExpress.Xpo.Logger.Transport.ILogActivationServer {
    [OperationContractAttribute]
public abstract virtual bool Open(int port);
    [OperationContractAttribute]
public abstract virtual bool Close(int port);
    [OperationContractAttribute]
public abstract virtual bool IsOpened(int port);
}
public interface DevExpress.Xpo.Logger.Transport.ILogClient {
    public abstract virtual bool Start();
    public abstract virtual bool Stop();
}
[ServiceContractAttribute]
public interface DevExpress.Xpo.Logger.Transport.ILogSource {
    [OperationContractAttribute]
public abstract virtual LogMessage GetMessage();
    [OperationContractAttribute]
public abstract virtual LogMessage[] GetMessages(int messageAmount);
    [OperationContractAttribute]
public abstract virtual LogMessage[] GetCompleteLog();
}
public class DevExpress.Xpo.Logger.Transport.LogClient : object {
    private ChannelFactory`1<ILogSource> myChannelFactory;
    private ChannelFactory`1<ILogActivationServer> activationChannelFactory;
    private ILogSource xpoLogClient;
    private ILogActivationServer activationChannelClient;
    private string auxPath;
    private string activationPath;
    private bool useRemoteProxy;
    private int port;
    private NetBinding binding;
    private Mutex mutex;
    private bool active;
    public bool Active { get; }
    public string ChannelState { get; }
    public LogClient(string host, int port);
    [SecuritySafeCriticalAttribute]
public LogClient(Host host);
    public bool get_Active();
    public string get_ChannelState();
    public static bool IsLocalhost(string hostOrIP);
    private void InitializeChannel();
    private void InitializeActivationChannel();
    public sealed virtual void Dispose();
    public sealed virtual LogMessage GetMessage();
    public sealed virtual LogMessage[] GetMessages(int messagesAmount);
    public sealed virtual LogMessage[] GetCompleteLog();
    public sealed virtual bool Start();
    private bool StartInternal();
    public sealed virtual bool Stop();
}
public static class DevExpress.Xpo.Logger.Transport.LogParams : object {
    public static int LogLength;
    public static string MutexName;
    public static int LogLengthLimit;
    public static string LocalUriString;
    public static string UriString;
    public static string UriHttpString;
    public static string UriHttpStringPortless;
    public static int ServicePort;
    private static LogParams();
    public static NetTcpBinding GetBinding();
    public static Binding GetBinding(NetBinding binding);
    public static ServiceEndpoint CreateEndpoint(EndpointAddress address, Type contractType);
}
public class DevExpress.Xpo.Logger.Transport.NamedPipeLogger : object {
    private static int defaultCapacity;
    private LoggerBase logger;
    private NamedPipeLogServer logServer;
    public int Count { get; }
    public int LostMessageCount { get; }
    public bool IsServerActive { get; }
    public bool Enabled { get; public set; }
    public int Capacity { get; }
    public NamedPipeLogger(string pipeName);
    public sealed virtual int get_Count();
    public sealed virtual int get_LostMessageCount();
    public sealed virtual bool get_IsServerActive();
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    public sealed virtual int get_Capacity();
    public sealed virtual void ClearLog();
    public sealed virtual void Log(LogMessage message);
    public sealed virtual void Log(LogMessage[] messages);
    public sealed virtual void Dispose();
}
internal class DevExpress.Xpo.Logger.Transport.NamedPipeLogServer : object {
    private NamedPipeServerStream namedPipeServer;
    private string pipeName;
    private ILogSource logger;
    private bool isDisposed;
    public NamedPipeLogServer(string pipeName, ILogSource logSource);
    private void CreateNamedPipe();
    private void DisposeNamedPipe();
    private void RecreateNamedPipe();
    private void NamedPipeClientConnectedHandler(IAsyncResult ar);
    private void WriteResponseToNamedPipe(LogMessage[] data);
    public sealed virtual void Dispose();
}
public enum DevExpress.Xpo.Logger.Transport.NetBinding : Enum {
    public int value__;
    public static NetBinding NetTcpBinding;
    public static NetBinding BasicHttpBinding;
    public static NetBinding WebApi;
    public static NetBinding NamedPipes;
}
[AttributeUsageAttribute("128")]
public class DevExpress.Xpo.ManyToManyAliasAttribute : Attribute {
    private string _OneToManyCollectionName;
    private string _ReferenceInTheIntermediateTableName;
    public string OneToManyCollectionName { get; public set; }
    public string ReferenceInTheIntermediateTableName { get; public set; }
    private ManyToManyAliasAttribute(XmlNode attributeNode);
    public ManyToManyAliasAttribute(string oneToManyCollectionName, string referenceInTheIntermediateTableName);
    public string get_OneToManyCollectionName();
    public void set_OneToManyCollectionName(string value);
    public string get_ReferenceInTheIntermediateTableName();
    public void set_ReferenceInTheIntermediateTableName(string value);
}
[AttributeUsageAttribute("1028")]
public class DevExpress.Xpo.MapInheritanceAttribute : Attribute {
    private MapInheritanceType mapType;
    [DescriptionAttribute("Gets a value which specifies the table that persistent properties and fields are saved to.")]
public MapInheritanceType MapType { get; }
    public MapInheritanceAttribute(MapInheritanceType mapType);
    private MapInheritanceAttribute(XmlNode attributeNode);
    public MapInheritanceType get_MapType();
}
public enum DevExpress.Xpo.MapInheritanceType : Enum {
    public int value__;
    public static MapInheritanceType ParentTable;
    public static MapInheritanceType OwnTable;
}
[ObsoleteAttribute("Please use Persistent attribute with mapTo parameter instead")]
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class DevExpress.Xpo.MapToAttribute : Attribute {
    private string mappingName;
    [DescriptionAttribute("")]
public string MappingName { get; }
    private MapToAttribute(XmlNode attributeNode);
    [ObsoleteAttribute("Please use Persistent attribute with mapTo parameter instead")]
public MapToAttribute(string mappingName);
    public string get_MappingName();
}
[AttributeUsageAttribute("388")]
public class DevExpress.Xpo.MemberDesignTimeVisibilityAttribute : Attribute {
    private bool isVisible;
    [DescriptionAttribute("Gets whether a property or class is visible at design time.")]
public bool IsVisible { get; }
    private MemberDesignTimeVisibilityAttribute(XmlNode attributeNode);
    public MemberDesignTimeVisibilityAttribute(bool isVisible);
    public bool get_IsVisible();
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.MergeCollisionBehaviorAttribute : Attribute {
    private OptimisticLockingReadMergeBehavior behavior;
    public OptimisticLockingReadMergeBehavior Behavior { get; }
    public MergeCollisionBehaviorAttribute(OptimisticLockingReadMergeBehavior behavior);
    public OptimisticLockingReadMergeBehavior get_Behavior();
}
public class DevExpress.Xpo.Metadata.CanGetClassInfoByTypeEventArgs : EventArgs {
    public ReflectionDictionary Dictionary;
    public Type ClassType;
    public Nullable`1<bool> CanGetClassInfo;
    public CanGetClassInfoByTypeEventArgs(ReflectionDictionary dictionary, Type classType);
}
public class DevExpress.Xpo.Metadata.ClassInfoEventArgs : EventArgs {
    private XPClassInfo ci;
    public XPClassInfo ClassInfo { get; }
    public ClassInfoEventArgs(XPClassInfo classInfo);
    public XPClassInfo get_ClassInfo();
}
public class DevExpress.Xpo.Metadata.ClassInfoEventHandler : MulticastDelegate {
    public ClassInfoEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ClassInfoEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ClassInfoEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class DevExpress.Xpo.Metadata.DataModelWizardDictionary : ReflectionDictionary {
    protected internal bool UseStrictMetadataValidation { get; }
    protected internal virtual bool get_UseStrictMetadataValidation();
}
public class DevExpress.Xpo.Metadata.DesignTimeReflection : ReflectionDictionary {
    private IDesignerHost host;
    private ITypeResolutionService typeResolution;
    private ISolutionTypesProvider solutionTypesProvider;
    private Dictionary`2<AssemblyName, bool> list;
    private bool inited;
    private Dictionary`2<XPClassInfo, XPCollection> designCollections;
    protected internal bool UseStrictMetadataValidation { get; }
    public ICollection Classes { get; }
    public DesignTimeReflection(IServiceProvider provider);
    public DesignTimeReflection(IServiceProvider provider, bool useSolutionTypesProvider);
    protected internal virtual bool get_UseStrictMetadataValidation();
    private bool Init(AssemblyName name);
    private bool Init(Assembly assembly);
    public virtual ICollection get_Classes();
    private void Init();
    private void InitUsingITypeDiscoveryService(bool resetClasses);
    private void InitUsingISolutionTypesProvider(bool resetClasses);
    protected virtual XPClassInfo ResolveClassInfoByName(string assemblyName, string typeName);
    protected virtual void DropDescendantsCache(XPClassInfo changedClassInfo);
    internal object GetDesignCollection(XPClassInfo classInfo, Session session);
}
public class DevExpress.Xpo.Metadata.Helpers.ClassInfoByFullNameComparer : object {
    public static ClassInfoByFullNameComparer Instance;
    private static ClassInfoByFullNameComparer();
    public sealed virtual int Compare(XPClassInfo x, XPClassInfo y);
}
public class DevExpress.Xpo.Metadata.Helpers.CriteriaCompilerDescriptorXpo : CriteriaCompilerDescriptor {
    public XPClassInfo Owner;
    public Session Session;
    private static Func`3<object, XPClassInfo, bool> isReallyUpCasted;
    public Type ObjectType { get; }
    public CriteriaCompilerDescriptorXpo(XPClassInfo owner, Session session);
    private static CriteriaCompilerDescriptorXpo();
    public virtual Type get_ObjectType();
    public virtual Expression MakePropertyAccess(Expression baseExpression, string propertyPath);
    public virtual Type ResolvePropertyType(Expression baseExpression, string propertyPath);
    private KeyValuePair`2<XPMemberInfo, string> ResolveDiveStep(string path);
    private Expression MakePropertyAccessCore(Expression baseExpression, XPMemberInfo mi);
    public virtual CriteriaCompilerRefResult DiveIntoCollectionProperty(Expression baseExpression, string collectionPropertyPath);
    public static object FreeJoinDo(Session session, XPClassInfo classInfo, CriteriaOperator topLevelExpression, CriteriaOperator condition, OperandParameter[] parameters, Object[] parameterValues);
    private LambdaExpression MakeFreeJoinLambdaInternal(string joinTypeName, CriteriaOperator condition, OperandParameter[] conditionParameters, Aggregate aggregateType, string customAggregateName, CriteriaOperator[] aggregateExpressions, OperandParameter[] aggregateExpresssionsParameters, Type[] invokeTypes);
    public virtual LambdaExpression MakeFreeJoinLambda(string joinTypeName, CriteriaOperator condition, OperandParameter[] conditionParameters, Aggregate aggregateType, CriteriaOperator aggregateExpression, OperandParameter[] aggregateExpresssionParameters, Type[] invokeTypes);
    public virtual LambdaExpression MakeFreeJoinLambda(string joinTypeName, CriteriaOperator condition, OperandParameter[] conditionParameters, string customAggregateName, IEnumerable`1<CriteriaOperator> aggregateExpressions, OperandParameter[] aggregateExpresssionsParameters, Type[] invokeTypes);
}
public enum DevExpress.Xpo.Metadata.Helpers.CriteriaTypeResolveKeyBehavior : Enum {
    public int value__;
    public static CriteriaTypeResolveKeyBehavior AsIs;
    public static CriteriaTypeResolveKeyBehavior AlwaysKey;
    public static CriteriaTypeResolveKeyBehavior AlwaysReference;
}
public class DevExpress.Xpo.Metadata.Helpers.CriteriaTypeResolver : CriteriaTypeResolverBase {
    private CriteriaTypeResolveKeyBehavior resolveKeyBehavior;
    private XPClassInfo[] upLevels;
    private XPDictionary dictionary;
    public CriteriaTypeResolver(XPClassInfo info);
    public CriteriaTypeResolver(XPClassInfo info, CriteriaTypeResolveKeyBehavior resolveKeyBehavior);
    public CriteriaTypeResolver(XPClassInfo[] upLevels, XPDictionary dictionary, CriteriaTypeResolveKeyBehavior resolveKeyBehavior);
    public CriteriaTypeResolver(XPClassInfo[] upLevels, XPDictionary dictionary);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(OperandProperty theOriginalOperand);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(AggregateOperand theOperand);
    private string GetPropertyContext(string originalPropertyName, Int32& level, MemberInfoCollection& path);
    private sealed virtual override CriteriaTypeResolverResult DevExpress.Data.Filtering.IClientCriteriaVisitor<DevExpress.Data.Filtering.Helpers.CriteriaTypeResolverResult>.Visit(JoinOperand theOperand);
    private CriteriaTypeResolverResult ResolveTypeInContext(XPClassInfo joinedCi, int level, CriteriaOperator criteria, CriteriaTypeResolveKeyBehavior resolveKeyBehavior);
    public sealed virtual Type Resolve(CriteriaOperator criteria);
    public static Type ResolveType(XPClassInfo info, CriteriaOperator criteria);
    public static Type ResolveType(XPClassInfo[] upLevels, XPDictionary dictionary, CriteriaOperator criteria);
    public static Type ResolveType(XPClassInfo info, CriteriaOperator criteria, CriteriaTypeResolveKeyBehavior resolveKeyBehavior);
    public static Type ResolveType(XPClassInfo[] upLevels, XPDictionary dictionary, CriteriaOperator criteria, CriteriaTypeResolveKeyBehavior resolveKeyBehavior);
    public static CriteriaTypeResolverResult ResolveTypeResult(XPClassInfo info, CriteriaOperator criteria);
    public static CriteriaTypeResolverResult ResolveTypeResult(XPClassInfo[] upLevels, XPDictionary dictionary, CriteriaOperator criteria);
    public static CriteriaTypeResolverResult ResolveTypeResult(XPClassInfo info, CriteriaOperator criteria, CriteriaTypeResolveKeyBehavior resolveKeyBehavior);
    public static CriteriaTypeResolverResult ResolveTypeResult(XPClassInfo[] upLevels, XPDictionary dictionary, CriteriaOperator criteria, CriteriaTypeResolveKeyBehavior resolveKeyBehavior);
    protected virtual Type GetCustomFunctionType(string functionName, Type[] operands);
    protected virtual Type GetCustomAggregateType(string customAggregateName, Type[] operands);
}
public class DevExpress.Xpo.Metadata.Helpers.DefaultTimeSpanConverter : ValueConverter {
    public Type StorageType { get; }
    public virtual object ConvertFromStorageType(object value);
    public virtual object ConvertToStorageType(object value);
    public virtual Type get_StorageType();
}
public class DevExpress.Xpo.Metadata.Helpers.EnumsConverter : ValueConverter {
    private Type enumType;
    public Type StorageType { get; }
    public EnumsConverter(Type enumType);
    public virtual object ConvertFromStorageType(object value);
    public virtual object ConvertToStorageType(object value);
    public virtual Type get_StorageType();
}
public class DevExpress.Xpo.Metadata.Helpers.EvaluatorContextDescriptorXpo : EvaluatorContextDescriptor {
    public XPClassInfo Owner;
    public bool IsInTransaction;
    public EvaluatorContextDescriptorXpo(XPClassInfo owner);
    public EvaluatorContextDescriptorXpo(XPClassInfo owner, bool inTransaction);
    public virtual object GetPropertyValue(object source, EvaluatorProperty propertyPath);
    public virtual EvaluatorContext GetNestedContext(object source, string propertyPath);
    public virtual IEnumerable GetCollectionContexts(object source, string collectionName);
    public virtual IEnumerable GetQueryContexts(object source, string queryTypeName, CriteriaOperator condition, int top);
}
public class DevExpress.Xpo.Metadata.Helpers.GCRecordField : ServiceField {
    public static Nullable`1<bool> CreateIndex;
    public static string StaticName { get; }
    public string Name { get; }
    public Type MemberType { get; }
    public GCRecordField(XPClassInfo owner);
    public static string get_StaticName();
    public virtual string get_Name();
    public virtual Type get_MemberType();
    public virtual object GetValue(object theObject);
    public virtual void SetValue(object theObject, object theValue);
    public virtual bool GetModified(object theObject);
    public virtual void SetModified(object theObject, object oldValue);
    public virtual object GetOldValue(object theObject);
    public virtual void ResetModified(object theObject);
}
internal interface DevExpress.Xpo.Metadata.Helpers.ICriteriaTypeResolver {
    public abstract virtual Type Resolve(CriteriaOperator criteria);
}
public class DevExpress.Xpo.Metadata.Helpers.IntermediateClassInfo : XPClassInfo {
    private MembersCollection ownMembers;
    private string name;
    internal IntermediateObjectFieldInfo intermediateObjectFieldInfoLeft;
    internal IntermediateObjectFieldInfo intermediateObjectFieldInfoRight;
    public static string IntermediateObjectAssemblyName;
    public XPClassInfo BaseClass { get; }
    public ICollection`1<XPMemberInfo> OwnMembers { get; }
    public string FullName { get; }
    public string AssemblyName { get; }
    protected bool CanPersist { get; }
    public Type ClassType { get; }
    public bool CanGetByClassType { get; }
    public IntermediateClassInfo(XPMemberInfo refProperty, XPMemberInfo relatedProperty, XPDictionary dictionary, string name);
    private void internalCollectMembers(Type currentType);
    public virtual bool HasModifications(object theObject);
    public virtual void ClearModifications(object theObject);
    public virtual void AddMember(XPMemberInfo newMember);
    public virtual XPClassInfo get_BaseClass();
    public virtual ICollection`1<XPMemberInfo> get_OwnMembers();
    public virtual string get_FullName();
    public virtual string get_AssemblyName();
    protected virtual bool get_CanPersist();
    public virtual Type get_ClassType();
    public virtual bool get_CanGetByClassType();
    protected internal virtual object CreateObjectInstance(Session session, XPClassInfo instantiationClassInfo);
    public IntermediateObjectFieldInfo GetFieldInfo(XPMemberInfo refProperty);
}
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
public class DevExpress.Xpo.Metadata.Helpers.IntermediateObject : XPBaseObject {
    [NonPersistentAttribute]
public object LeftIntermediateObjectField;
    [NonPersistentAttribute]
public object RightIntermediateObjectField;
    [NonPersistentAttribute]
public object IntermediateObjectOid;
    public IntermediateObject(Session session, XPClassInfo classInfo);
}
public class DevExpress.Xpo.Metadata.Helpers.IntermediateObjectFieldInfo : XPMemberInfo {
    internal XPMemberInfo refProperty;
    private bool isLeft;
    public string Name { get; }
    public XPClassInfo ReferenceType { get; }
    protected bool CanPersist { get; }
    public bool IsPublic { get; }
    public Type MemberType { get; }
    public IntermediateObjectFieldInfo(XPMemberInfo refProperty, XPClassInfo owner, bool isLeft);
    public virtual string get_Name();
    public virtual XPClassInfo get_ReferenceType();
    protected virtual bool get_CanPersist();
    public virtual bool get_IsPublic();
    public virtual Type get_MemberType();
    public virtual object GetValue(object theObject);
    public virtual void SetValue(object theObject, object theValue);
    public virtual bool GetModified(object theObject);
    public virtual void SetModified(object theObject, object oldValue);
    public virtual object GetOldValue(object theObject);
    public virtual void ResetModified(object theObject);
    public virtual Expression MakeGetExpression(Expression ownerExpression);
}
public class DevExpress.Xpo.Metadata.Helpers.IntermediateObjectKeyFieldInfo : XPMemberInfo {
    private Type keyType;
    public string Name { get; }
    protected bool CanPersist { get; }
    public bool IsPublic { get; }
    public Type MemberType { get; }
    public IntermediateObjectKeyFieldInfo(XPClassInfo owner, Type keyType);
    public virtual string get_Name();
    protected virtual bool get_CanPersist();
    public virtual bool get_IsPublic();
    public virtual Type get_MemberType();
    public virtual object GetValue(object theObject);
    public virtual void SetValue(object theObject, object theValue);
    public virtual bool GetModified(object theObject);
    public virtual void SetModified(object theObject, object oldValue);
    public virtual object GetOldValue(object theObject);
    public virtual void ResetModified(object theObject);
    public virtual Expression MakeGetExpression(Expression ownerExpression);
}
public interface DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider {
    public XPDictionary Dictionary { get; }
    public abstract virtual XPDictionary get_Dictionary();
}
public class DevExpress.Xpo.Metadata.Helpers.MemberInfoCollection : List`1<XPMemberInfo> {
    private XPClassInfo classInfo;
    private bool hasNonPersistent;
    private static Char[] upcastSymbols;
    private static Char[] namespaceSplitters;
    public bool HasNonPersistent { get; }
    public MemberInfoCollection(XPClassInfo classInfo, int count);
    public MemberInfoCollection(XPClassInfo classInfo);
    public MemberInfoCollection(XPClassInfo classInfo, XPMemberInfo[] members);
    public MemberInfoCollection(XPClassInfo classInfo, string path);
    public MemberInfoCollection(XPClassInfo classInfo, string path, bool addNonPersistent);
    public MemberInfoCollection(XPClassInfo classInfo, string path, bool addNonPersistent, bool throwOnError);
    public MemberInfoCollection(XPClassInfo classInfo, String[] matches, bool addNonPersistent, bool throwOnError);
    private static MemberInfoCollection();
    public bool get_HasNonPersistent();
    public static MemberInfoCollection ParsePath(XPClassInfo classInfo, string path);
    public static MemberInfoCollection ParsePersistentPath(XPClassInfo classInfo, string path);
    public static XPMemberInfo FindMember(XPClassInfo currentClassInfo, string match);
    public virtual string ToString();
    public static String[] SplitPath(string path);
    public static int LastIndexOfSplittingDotInPath(string path);
    public static int GetSplitPartsCount(string path);
    public static bool TryResolveType(string className, XPClassInfo rootClassInfo, XPClassInfo& classInfo);
    public static bool TryResolveTypeAlsoByShortName(string className, XPClassInfo rootClassInfo, XPClassInfo& classInfo);
}
public class DevExpress.Xpo.Metadata.Helpers.MemberPathCollection : List`1<MemberInfoCollection> {
    public MemberPathCollection(XPClassInfo classInfo, XPMemberInfo member);
    public MemberPathCollection(XPClassInfo classInfo, string pathes);
    public void AddRange(ICollection range);
}
internal class DevExpress.Xpo.Metadata.Helpers.MembersCollection : ReadOnlyCollection`1<XPMemberInfo> {
    public void Add(XPMemberInfo member);
}
public class DevExpress.Xpo.Metadata.Helpers.ObjectTypeField : ServiceField {
    public string Name { get; }
    public Type MemberType { get; }
    internal ObjectTypeField(XPClassInfo owner);
    public virtual string get_Name();
    public virtual Type get_MemberType();
    public virtual object GetValue(object theObject);
    public virtual void SetValue(object theObject, object theValue);
    public virtual bool GetModified(object theObject);
    public virtual object GetOldValue(object theObject);
    public virtual void ResetModified(object theObject);
    public virtual void SetModified(object theObject, object oldValue);
}
public class DevExpress.Xpo.Metadata.Helpers.OptimisticLockField : ServiceField {
    private string name;
    public string Name { get; }
    public Type MemberType { get; }
    public OptimisticLockField(XPClassInfo owner, string name);
    public virtual string get_Name();
    public virtual Type get_MemberType();
    internal static object ConvertDbVersionToInt(object dbVersion);
    public virtual object GetValue(object theObject);
    public virtual void SetValue(object theObject, object theValue);
    public virtual bool GetModified(object theObject);
    public virtual object GetOldValue(object theObject);
    public virtual void ResetModified(object theObject);
    public virtual void SetModified(object theObject, object oldValue);
}
public class DevExpress.Xpo.Metadata.Helpers.OptimisticLockFieldInDataLayer : ServiceField {
    private string name;
    public string Name { get; }
    public Type MemberType { get; }
    protected bool CanPersist { get; }
    public OptimisticLockFieldInDataLayer(XPClassInfo owner, string name);
    public virtual string get_Name();
    public virtual Type get_MemberType();
    protected virtual bool get_CanPersist();
    public virtual object GetValue(object theObject);
    public virtual void SetValue(object theObject, object theValue);
    public virtual bool GetModified(object theObject);
    public virtual object GetOldValue(object theObject);
    public virtual void ResetModified(object theObject);
    public virtual void SetModified(object theObject, object oldValue);
}
public abstract class DevExpress.Xpo.Metadata.Helpers.ServiceField : XPMemberInfo {
    protected bool CanPersist { get; }
    public bool IsPublic { get; }
    protected ServiceField(XPClassInfo owner, bool isReadOnly);
    protected virtual bool get_CanPersist();
    public virtual bool get_IsPublic();
}
public interface DevExpress.Xpo.Metadata.IFieldAccessor {
    public abstract virtual void SetValue(object theObject, object value);
    public abstract virtual object GetValue(object theObject);
}
public class DevExpress.Xpo.Metadata.ImageValueConverter : ValueConverter {
    private static TypeConverter imageConverterInstance;
    [DescriptionAttribute("Gets the type that the property’s value is converted to when it’s saved in a data store.")]
public Type StorageType { get; }
    private static ImageValueConverter();
    public virtual Type get_StorageType();
    public virtual object ConvertToStorageType(object value);
    public virtual object ConvertFromStorageType(object value);
    private object CallConvertFunction(Func`1<object> fn);
}
internal static class DevExpress.Xpo.Metadata.IsExactTypeFunctionXpoHelper : object {
    public static Nullable`1<bool> Evaluate(object obj, string typeString);
}
internal static class DevExpress.Xpo.Metadata.IsInstanceOfTypeFunctionXpoHelper : object {
    public static Nullable`1<bool> Evaluate(object obj, string typeString);
    public static bool IsInstanceOfType(string typeString, XPClassInfo objectClassInfo);
    public static bool IsInstanceOfType(string typeString, XPClassInfo objectClassInfo, XPClassInfo& searchedClassInfo);
}
public class DevExpress.Xpo.Metadata.ReflectionClassInfo : XPClassInfo {
    private Type classType;
    private bool constructed;
    private MembersCollection ownMembers;
    private Dictionary`2<string, XPMemberInfo> membersCache;
    private static bool _SuppressSuspiciousMemberInheritanceCheck;
    private IConstructor creator;
    private XPClassInfo baseClass;
    [DescriptionAttribute("Specifies whether exceptions are thrown when overridden properties have attributes from the Xpo namespace applied.")]
[ObsoleteAttribute("SuppressSuspiciousMemberInheritanceCheck accessed")]
public static bool SuppressSuspiciousMemberInheritanceCheck { get; public set; }
    private IConstructor Creator { get; }
    [DescriptionAttribute("Gets the metadata information of the base class.")]
public XPClassInfo BaseClass { get; }
    [DescriptionAttribute("Gets a collection of XPMemberInfo objects that provide metadata information on all the members owned by the class.")]
public ICollection`1<XPMemberInfo> OwnMembers { get; }
    [DescriptionAttribute("Gets the full name of a class.")]
public string FullName { get; }
    [DescriptionAttribute("Gets the name of the assembly that the class is declared in.")]
public string AssemblyName { get; }
    protected bool CanPersist { get; }
    [DescriptionAttribute("Gets the type of the class whose metadata is provided by this ReflectionClassInfo object.")]
public Type ClassType { get; }
    [DescriptionAttribute("Gets the rule that determines which members are persistent by default.")]
public DefaultMembersPersistence DefaultMembersPersistence { get; }
    protected bool IsInterface { get; }
    public ReflectionClassInfo(Type classType, XPDictionary dictionary);
    protected virtual void DropCache();
    private bool IsNullableType(Type currentType);
    private void InternalCollectMembers(Type currentType, XPMemberInfo currentValueParent, bool inherited);
    private bool IsSameMemberInBase(MemberInfo mi);
    private static bool IsBaseMemberSuppressCurrent(MemberInfo currentMember, XPMemberInfo baseMember);
    public static bool get_SuppressSuspiciousMemberInheritanceCheck();
    public static void set_SuppressSuspiciousMemberInheritanceCheck(bool value);
    private void CollectMembers(Type currentType);
    public virtual void AddMember(XPMemberInfo newMember);
    protected internal virtual XPMemberInfo QueryOwnMember(string memberName);
    private Object[] GetCustomAttributes(Type classType);
    private IConstructor get_Creator();
    private IConstructor CreateConstructor();
    public virtual XPClassInfo get_BaseClass();
    public virtual ICollection`1<XPMemberInfo> get_OwnMembers();
    public virtual string get_FullName();
    public virtual string get_AssemblyName();
    protected virtual string GetDefaultTableName();
    protected virtual bool get_CanPersist();
    public virtual Type get_ClassType();
    protected internal virtual object CreateObjectInstance(Session session, XPClassInfo instantiationClassInfo);
    public DefaultMembersPersistence get_DefaultMembersPersistence();
    protected virtual bool get_IsInterface();
    public virtual bool HasModifications(object theObject);
    public virtual void ClearModifications(object theObject);
}
public class DevExpress.Xpo.Metadata.ReflectionDictionary : XPDictionary {
    public EventHandler`1<CanGetClassInfoByTypeEventArgs> CanGetClassInfoByTypeHandler;
    public static EventHandler`1<CanGetClassInfoByTypeEventArgs> CanGetClassInfoByTypeGlobalHandler;
    public EventHandler`1<ResolveClassInfoByTypeEventArgs> ResolveClassInfoByTypeHandler;
    public static EventHandler`1<ResolveClassInfoByTypeEventArgs> ResolveClassInfoByTypeGlobalHandler;
    protected Dictionary`2<string, XPClassInfo> classesByName;
    protected Dictionary`2<Type, XPClassInfo> classesByType;
    [DescriptionAttribute("Gets a collection of the XPClassInfo objects that are supplied by the current ReflectionDictionary instance.")]
public ICollection Classes { get; }
    public static bool DefaultCanGetClassInfoByType(Type classType);
    public virtual bool CanGetClassInfoByType(Type classType);
    protected virtual XPClassInfo ResolveClassInfoByType(Type classType);
    protected virtual XPClassInfo CreateClassInfo(Type classType);
    protected virtual XPClassInfo ResolveClassInfoByName(string assemblyName, string typeName);
    public virtual ICollection get_Classes();
    protected virtual void DropDescendantsCache(XPClassInfo changedClassInfo);
    protected virtual bool HasDescendantsCore(XPClassInfo classInfo);
    protected virtual void AddClassInfoCore(XPClassInfo info);
    public virtual XPClassInfo QueryClassInfo(Type classType);
    internal static string GetFullName(Type classType);
    public virtual XPClassInfo QueryClassInfo(string assemblyName, string className);
    private void ClearClasses();
}
public class DevExpress.Xpo.Metadata.ReflectionFieldInfo : ReflectionMemberInfo {
    private MemberInfo[] infoArray;
    private FieldInfo info;
    protected MemberInfo Info { get; }
    protected bool CanPersist { get; }
    [DescriptionAttribute("Indicates whether the field is public.")]
public bool IsPublic { get; }
    [DescriptionAttribute("Gets the type of this field.")]
public Type MemberType { get; }
    public ReflectionFieldInfo(XPClassInfo owner, FieldInfo fieldInfo, XPMemberInfo valueParent);
    protected virtual MemberInfo get_Info();
    protected virtual bool get_CanPersist();
    public virtual bool get_IsPublic();
    public virtual Type get_MemberType();
    private sealed virtual override object DevExpress.Xpo.Metadata.IFieldAccessor.GetValue(object theObject);
    private sealed virtual override void DevExpress.Xpo.Metadata.IFieldAccessor.SetValue(object theObject, object theValue);
}
public abstract class DevExpress.Xpo.Metadata.ReflectionMemberInfo : XPMemberInfo {
    private static Dictionary`2<MemberInfo, IFieldAccessor> accessors;
    private IFieldAccessor fieldAccessor;
    private string name;
    private static object emtpyNullValue;
    private object nullValue;
    private Nullable`1<bool> isStruct;
    protected bool CanUseFastAccessors { get; }
    protected MemberInfo Info { get; }
    private bool Constructed { get; }
    private IFieldAccessor Accessor { get; }
    private object NullValue { get; }
    [DescriptionAttribute("Gets the member’s name.")]
public string Name { get; }
    [DescriptionAttribute("Gets whether the member represents a data structure.")]
public bool IsStruct { get; }
    protected ReflectionMemberInfo(XPClassInfo owner, MemberInfo info, XPMemberInfo valueParent, bool isReadOnly);
    private static ReflectionMemberInfo();
    protected virtual IFieldAccessor CreateAccessorInternal();
    protected virtual bool get_CanUseFastAccessors();
    protected abstract virtual MemberInfo get_Info();
    private bool get_Constructed();
    private void CreateAccessor();
    private IFieldAccessor get_Accessor();
    protected virtual void DropCache();
    private object get_NullValue();
    private Object[] GetCustomAttributes(XPClassInfo owner, MemberInfo info);
    private object GetNullValue();
    public virtual string get_Name();
    public virtual object GetConst(object target, XPMemberInfo targetMember);
    public virtual object GetValue(object theObject);
    public virtual void SetValue(object theObject, object theValue);
    public virtual bool GetModified(object theObject);
    public virtual void SetModified(object theObject, object oldValue);
    public virtual object GetOldValue(object theObject);
    public virtual void ResetModified(object theObject);
    protected virtual string GetDefaultMappingField();
    public virtual bool get_IsStruct();
    public virtual Expression MakeGetExpression(Expression ownerExpression);
    private Expression GetExpressionFinalTouch(Expression expression);
}
public class DevExpress.Xpo.Metadata.ReflectionPropertyInfo : ReflectionMemberInfo {
    private PropertyInfo info;
    private static bool isVista;
    protected MemberInfo Info { get; }
    protected bool CanUseFastAccessors { get; }
    [DescriptionAttribute("Gets whether the property is declared as public.")]
public bool IsPublic { get; }
    protected bool CanPersist { get; }
    [DescriptionAttribute("Gets the type of this property.")]
public Type MemberType { get; }
    public ReflectionPropertyInfo(XPClassInfo owner, PropertyInfo propertyInfo, XPMemberInfo valueParent);
    private static ReflectionPropertyInfo();
    protected virtual MemberInfo get_Info();
    protected virtual bool get_CanUseFastAccessors();
    protected virtual IFieldAccessor CreateAccessorInternal();
    public virtual bool get_IsPublic();
    protected virtual bool get_CanPersist();
    public virtual Type get_MemberType();
    private sealed virtual override object DevExpress.Xpo.Metadata.IFieldAccessor.GetValue(object theObject);
    private sealed virtual override void DevExpress.Xpo.Metadata.IFieldAccessor.SetValue(object theObject, object theValue);
}
public class DevExpress.Xpo.Metadata.ResolveClassInfoByTypeEventArgs : EventArgs {
    public ReflectionDictionary Dictionary;
    public Type ClassType;
    public XPClassInfo ClassInfo;
    public ResolveClassInfoByTypeEventArgs(ReflectionDictionary dictionary, Type classType);
}
public class DevExpress.Xpo.Metadata.UtcDateTimeConverter : ValueConverter {
    [DescriptionAttribute("Gets the type that the property’s value will be converted to when it’s saved in a data store.")]
public Type StorageType { get; }
    public virtual object ConvertFromStorageType(object value);
    public virtual object ConvertToStorageType(object value);
    public virtual Type get_StorageType();
}
public abstract class DevExpress.Xpo.Metadata.ValueConverter : object {
    [DescriptionAttribute("When overridden in a derived class, gets the type that the property’s value is converted to when it’s saved in a data store.")]
public Type StorageType { get; }
    public abstract virtual Type get_StorageType();
    public abstract virtual object ConvertToStorageType(object value);
    public abstract virtual object ConvertFromStorageType(object value);
}
public abstract class DevExpress.Xpo.Metadata.XPClassInfo : XPTypeInfo {
    private string tableName;
    private IList`1<XPMemberInfo> members;
    private IEnumerable objects;
    private IEnumerable collections;
    private IEnumerable assocLists;
    private XPMemberInfo key;
    private EvaluatorContextDescriptor _evaluatorContextDescriptor;
    private EvaluatorContextDescriptor _evaluatorContextDescriptorInTransaction;
    private XPDictionary dictionary;
    protected OptimisticLockingCacheItem optimisticLockingCache;
    private OptimisticLockingReadBehaviorAttributeCacheItem optimisticLockingReadBehaviorCache;
    private Dictionary`2<object, object> cache;
    private bool isNullableBehaviorCached;
    private NullableBehavior nullableBehaviorCachedItem;
    private Dictionary`2<string, MemberInfoCollection> cachedpaths;
    protected static XPClassInfo[] EmptyClassInfos;
    private ICollection directlyRefTypes;
    private List`1<XPClassInfo> childrenWithRelationsMappedToMe;
    private DBTable modreq(System.Runtime.CompilerServices.IsVolatile) table;
    private XPClassInfo idClass;
    private IEnumerable persistentMembers;
    private bool hasDelayedProperties;
    private MemberInfoCollection propertiesForInsert;
    private MemberInfoCollection propertiesForUpdate;
    private bool isTypedObject;
    [DescriptionAttribute("Gets a collection of XPMemberInfo objects that are owned by the current persistent class metadata information and all its ancestors.")]
public ICollection`1<XPMemberInfo> Members { get; }
    public Nullable`1<bool> TrackPropertiesModifications { get; }
    public OptimisticLockingReadBehavior OptimisticLockingReadBehavior { get; }
    [DescriptionAttribute("Gets the name of the system field that is used to control object locking for objects that have the object locking option enabled.")]
public string OptimisticLockFieldName { get; }
    [DescriptionAttribute("This member supports the .NET Framework infrastructure and cannot be used directly from your code.")]
public string OptimisticLockFieldInDataLayerName { get; }
    public OptimisticLockingBehavior OptimisticLockingBehavior { get; }
    [DescriptionAttribute("Gets the metadata of the member that represents the optimistic lock field.")]
public XPMemberInfo OptimisticLockField { get; }
    [DescriptionAttribute("This member supports the .NET Framework infrastructure and cannot be used directly from your code.")]
public XPMemberInfo OptimisticLockFieldInDataLayer { get; }
    public NullableBehavior NullableBehavior { get; }
    [DescriptionAttribute("When implemented in a derived class, returns the full name of the class.")]
public string FullName { get; }
    [DescriptionAttribute("Gets the name of the table in the data layer in which the object’s data is stored.")]
public string TableName { get; }
    [DescriptionAttribute("Gets the DBTable object which the public properties and public fields are saved in.")]
public DBTable Table { get; }
    [DescriptionAttribute("Determines whether an instance of the current type is abstract.")]
public bool IsAbstract { get; }
    [DescriptionAttribute("When implemented in a derived class, gets the type of the class which is described by the current XPClassInfo object.")]
public Type ClassType { get; }
    protected internal Type RealInstanceType { get; }
    public bool CanGetByClassType { get; }
    [DescriptionAttribute("Gets information on the key property or key field.")]
public XPMemberInfo KeyProperty { get; }
    [DescriptionAttribute("Gets a value that specifies which table persistent properties and fields are saved to.")]
public MapInheritanceType TableMapType { get; }
    [DescriptionAttribute("When implemented in a derived class, gets the metadata information of the base class.")]
public XPClassInfo BaseClass { get; }
    [DescriptionAttribute("Gets the information about the nearest persistent parent class in the inheritance hierarchy.")]
public XPClassInfo PersistentBaseClass { get; }
    [DescriptionAttribute("Gets the metadata information for the persistent class which provides the key value for the current object.")]
public XPClassInfo IdClass { get; }
    protected bool IsInterface { get; }
    [DescriptionAttribute("Gets the collection of persistent properties and fields owned by the current persistent class metadata information.")]
public IEnumerable PersistentProperties { get; }
    [DescriptionAttribute("Returns the IEnumerable interface which populates XPMemberInfo objects for properties with the IXPSimpleObject interface declaration.")]
public IEnumerable ObjectProperties { get; }
    [DescriptionAttribute("Gets the IEnumerable interface which populates XPMemberInfo objects for the XPCollection type properties.")]
public IEnumerable CollectionProperties { get; }
    [DescriptionAttribute("Gets a list of members that represent the “many” side of the association.")]
public IEnumerable AssociationListProperties { get; }
    [DescriptionAttribute("Gets the XPDictionary object which the current XPClassInfo object belongs to.")]
public XPDictionary Dictionary { get; }
    [DescriptionAttribute("Gets a collection of XPMemberInfo objects that provide metadata information on all the members owned by the class.")]
public ICollection`1<XPMemberInfo> OwnMembers { get; }
    internal bool IsTypedObject { get; }
    [DescriptionAttribute("Gets whether the class described by the current XPClassInfo object has descendants.")]
public bool HasDescendants { get; }
    internal bool IsGCRecordObject { get; }
    internal bool IsDesignTimeReflection { get; }
    [DescriptionAttribute("Gets the name of the assembly that the class is declared in.")]
public string AssemblyName { get; }
    [ObsoleteAttribute("Use session.IsObjectsLoading instead", "True")]
[EditorBrowsableAttribute("1")]
public bool IsObjectLoading { get; }
    protected internal bool SupportObjectsReferencesFromCustomMembers { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    private XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.ClassInfo { get; }
    public XPClassInfo(XPDictionary dictionary);
    private static XPClassInfo();
    internal T CreateCache(Func`1<T> creator);
    protected virtual void DropCache();
    public ICollection`1<XPMemberInfo> get_Members();
    private XPMemberInfo GetKeyPropertyOfIdClass();
    private MapInheritanceType GetTableMapType();
    public virtual void AddMember(XPMemberInfo newMember);
    protected internal virtual XPMemberInfo QueryOwnMember(string memberName);
    private void InitOptimisticLockingReadBehavior();
    public Nullable`1<bool> get_TrackPropertiesModifications();
    public OptimisticLockingReadBehavior get_OptimisticLockingReadBehavior();
    public string get_OptimisticLockFieldName();
    public string get_OptimisticLockFieldInDataLayerName();
    public OptimisticLockingBehavior get_OptimisticLockingBehavior();
    public XPMemberInfo get_OptimisticLockField();
    public XPMemberInfo get_OptimisticLockFieldInDataLayer();
    public NullableBehavior get_NullableBehavior();
    protected void InitServiceMembers();
    protected void CheckMembers();
    public XPMemberInfo FindMember(string memberName);
    public XPMemberInfo GetMember(string memberName);
    internal MemberInfoCollection ParsePersistentPath(string path);
    internal MemberInfoCollection ParsePath(string path);
    public XPMemberInfo GetPersistentMember(string memberName);
    public abstract virtual string get_FullName();
    public virtual string ToString();
    public string get_TableName();
    protected virtual string GetDefaultTableName();
    protected virtual string GetTableName();
    private static void AddClassToDirectlyRefTypes(Dictionary`2<XPClassInfo, object> targetList, XPClassInfo info, string refClassName, string refMemberName);
    private ICollection GetDirectlyRefTypes();
    private void FillRefTypes(Dictionary`2<XPClassInfo, object> filled);
    public ICollection GetRefTypes();
    public DBTable get_Table();
    private void CreateTable();
    public virtual bool get_IsAbstract();
    public abstract virtual Type get_ClassType();
    protected internal virtual Type get_RealInstanceType();
    public virtual bool get_CanGetByClassType();
    public XPMemberInfo get_KeyProperty();
    public MapInheritanceType get_TableMapType();
    public abstract virtual XPClassInfo get_BaseClass();
    public XPClassInfo get_PersistentBaseClass();
    public XPClassInfo get_IdClass();
    private bool IsAssignableToCore(XPClassInfo classInfo);
    public bool IsAssignableTo(XPClassInfo classInfo);
    protected virtual bool get_IsInterface();
    public IEnumerable get_PersistentProperties();
    private MemberInfoCollection GetPropertiesListForUpdateInsert(object theObject, bool isUpdate, bool addDelayedReference);
    public static MemberInfoCollection GetPropertiesListForUpdateInsert(Session session, object theObject, bool isUpdate, bool addDelayedReference);
    public abstract virtual bool HasModifications(object theObject);
    public abstract virtual void ClearModifications(object theObject);
    public IEnumerable get_ObjectProperties();
    public IEnumerable get_CollectionProperties();
    public IEnumerable get_AssociationListProperties();
    public void CheckAbstractReference();
    public XPDictionary get_Dictionary();
    public abstract virtual ICollection`1<XPMemberInfo> get_OwnMembers();
    internal bool get_IsTypedObject();
    public bool get_HasDescendants();
    internal bool get_IsGCRecordObject();
    internal bool get_IsDesignTimeReflection();
    internal bool HasPurgebleObjectReferences();
    public abstract virtual string get_AssemblyName();
    public bool get_IsObjectLoading();
    [ObsoleteAttribute("Use session.IsObjectsLoading instead", "True")]
[EditorBrowsableAttribute("1")]
public bool GetObjectLoading(Session session);
    public virtual object CreateObject(Session session);
    public virtual object CreateNewObject(Session session);
    protected internal abstract virtual object CreateObjectInstance(Session session, XPClassInfo instantiationClassInfo);
    protected internal virtual bool get_SupportObjectsReferencesFromCustomMembers();
    private XPCustomMemberInfo CreateMember(string propertyName, Type propertyType, XPClassInfo referenceType, bool nonPersistent, bool nonPublic, Attribute[] attributes);
    public XPCustomMemberInfo CreateMember(string propertyName, Type propertyType, bool nonPersistent, bool nonPublic, Attribute[] attributes);
    public XPCustomMemberInfo CreateMember(string propertyName, Type propertyType, bool nonPersistent, Attribute[] attributes);
    public XPCustomMemberInfo CreateMember(string propertyName, Type propertyType, Attribute[] attributes);
    public XPCustomMemberInfo CreateMember(string propertyName, XPClassInfo referenceType, bool nonPersistent, bool nonPublic, Attribute[] attributes);
    public XPCustomMemberInfo CreateMember(string propertyName, XPClassInfo referenceType, bool nonPersistent, Attribute[] attributes);
    public XPCustomMemberInfo CreateMember(string propertyName, XPClassInfo referenceType, Attribute[] attributes);
    public object GetId(object obj);
    public EvaluatorContextDescriptor GetEvaluatorContextDescriptor();
    public CriteriaCompilerDescriptor GetCriteriaCompilerDescriptor(Session session);
    public EvaluatorContextDescriptor GetEvaluatorContextDescriptorInTransaction();
    internal void TouchRecursive(Dictionary`2<XPClassInfo, XPClassInfo> processedClassInfos);
    public static string GetShortAssemblyName(Assembly assembly);
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
    private sealed virtual override XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.get_ClassInfo();
}
public class DevExpress.Xpo.Metadata.XPCustomMemberInfo : XPMemberInfo {
    private string propertyName;
    private Type propertyType;
    private XPClassInfo referenceType;
    private bool isPublic;
    private bool isPersistent;
    [DescriptionAttribute("Gets the XPClassInfo of the referenced object if the member is a reference to another persistent object.")]
public XPClassInfo ReferenceType { get; }
    [DescriptionAttribute("Gets the member’s name.")]
public string Name { get; }
    [DescriptionAttribute("Gets whether the member is public.")]
public bool IsPublic { get; }
    [DescriptionAttribute("Gets the member’s type.")]
public Type MemberType { get; }
    protected bool CanPersist { get; }
    public XPCustomMemberInfo(XPClassInfo owner, string propertyName, Type propertyType, XPClassInfo referenceType, bool nonPersistent, bool nonPublic);
    public virtual XPClassInfo get_ReferenceType();
    public virtual string get_Name();
    public virtual bool get_IsPublic();
    public virtual Type get_MemberType();
    protected virtual bool get_CanPersist();
    protected virtual IXPCustomPropertyStore GetStore(object theObject);
    public virtual object GetValue(object theObject);
    public virtual void SetValue(object theObject, object theValue);
    public virtual bool GetModified(object theObject);
    public virtual void SetModified(object theObject, object oldValue);
    public virtual object GetOldValue(object theObject);
    public virtual void ResetModified(object theObject);
}
public class DevExpress.Xpo.Metadata.XPDataObjectClassInfo : XPClassInfo {
    private MembersCollection _ownMembers;
    private XPClassInfo baseClass;
    private string className;
    public static string DataObjectsAssembly;
    public static Type DataObjectsBaseType;
    [DescriptionAttribute("Gets the metadata information of the base class.")]
public XPClassInfo BaseClass { get; }
    [DescriptionAttribute("Gets the full name of a class.")]
public string FullName { get; }
    [DescriptionAttribute("Gets the type of the class.")]
public Type ClassType { get; }
    public bool CanGetByClassType { get; }
    protected internal bool SupportObjectsReferencesFromCustomMembers { get; }
    [DescriptionAttribute("Gets the name of the assembly that the class is declared in.")]
public string AssemblyName { get; }
    protected bool CanPersist { get; }
    [DescriptionAttribute("Gets a collection of XPMemberInfo objects that provide metadata information on all the members owned by the class.")]
public ICollection`1<XPMemberInfo> OwnMembers { get; }
    public XPDataObjectClassInfo(XPDictionary dictionary, XPClassInfo baseClass, string className, Attribute[] attributes);
    public XPDataObjectClassInfo(XPDictionary dictionary, string className, Attribute[] attributes);
    public XPDataObjectClassInfo(XPClassInfo baseClass, string className, Attribute[] attributes);
    public XPDataObjectClassInfo(XPDictionary dictionary, XmlNode node);
    private static XPDataObjectClassInfo();
    private static XPClassInfo ExtractBaseClassInfo(XPDictionary dictionary, XmlNode node);
    protected internal virtual object CreateObjectInstance(Session session, XPClassInfo instantiationClassInfo);
    public virtual XPClassInfo get_BaseClass();
    public virtual string get_FullName();
    public virtual Type get_ClassType();
    public virtual bool get_CanGetByClassType();
    protected internal virtual bool get_SupportObjectsReferencesFromCustomMembers();
    public virtual string get_AssemblyName();
    protected virtual bool get_CanPersist();
    public virtual void AddMember(XPMemberInfo newMember);
    public virtual ICollection`1<XPMemberInfo> get_OwnMembers();
    public virtual bool HasModifications(object theObject);
    public virtual void ClearModifications(object theObject);
}
public class DevExpress.Xpo.Metadata.XPDataObjectMemberInfo : XPCustomMemberInfo {
    protected XPDataObjectMemberInfo(XPClassInfo owner, string propertyName, Type propertyType, XPClassInfo referenceType);
    public XPDataObjectMemberInfo(XPClassInfo owner, XmlNode node);
    private static string ExtractPropertyName(XmlNode node);
    private static XPClassInfo ExtractReferenceType(XPClassInfo ownerInfo, XmlNode node);
    private static Type ExtractPropertyType(XPClassInfo ownerInfo, XmlNode node);
}
public class DevExpress.Xpo.Metadata.XPDataTableClassInfo : XPClassInfo {
    private IList`1<XPMemberInfo> _ownMembers;
    private XPClassInfo baseClass;
    private string className;
    private Type type;
    private string tableName;
    public Type ClassType { get; }
    protected internal Type RealInstanceType { get; }
    public XPClassInfo BaseClass { get; }
    public string FullName { get; }
    public string AssemblyName { get; }
    protected bool CanPersist { get; }
    public ICollection`1<XPMemberInfo> OwnMembers { get; }
    public XPDataTableClassInfo(XPDictionary dictionary, Type type);
    protected virtual string GetTableName();
    public virtual Type get_ClassType();
    protected internal virtual Type get_RealInstanceType();
    protected internal virtual object CreateObjectInstance(Session session, XPClassInfo instantiationClassInfo);
    public virtual XPClassInfo get_BaseClass();
    public virtual string get_FullName();
    public virtual string get_AssemblyName();
    protected virtual bool get_CanPersist();
    public virtual void AddMember(XPMemberInfo newMember);
    public virtual ICollection`1<XPMemberInfo> get_OwnMembers();
    public virtual bool HasModifications(object theObject);
    public virtual void ClearModifications(object theObject);
}
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
[OptimisticLockingAttribute("False")]
public class DevExpress.Xpo.Metadata.XPDataTableObject : XPBaseObject {
    public XPDataTableObject(Session session, XPClassInfo classInfo);
}
public abstract class DevExpress.Xpo.Metadata.XPDictionary : object {
    private NullableBehavior nullableBehavior;
    internal AsyncLockHelper LockObject;
    [CompilerGeneratedAttribute]
private ClassInfoEventHandler ClassInfoChanged;
    private Dictionary`2<Type, ValueConverter> converters;
    private static string xpoName;
    private static bool couldNotCollectClassInfoFromAssemblyWarningThrown;
    private static int seq;
    private int seqNum;
    private CustomFunctionCollection customFunctionCollection;
    private CustomAggregateCollection customAggregateCollection;
    public NullableBehavior NullableBehavior { get; public set; }
    protected internal bool UseStrictMetadataValidation { get; }
    [DescriptionAttribute("When implemented by a class, gets a collection of the XPClassInfo objects that are supplied by the current metadata provider.")]
public ICollection Classes { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    [DescriptionAttribute("Gets a collection of custom function operators supplied by the current metadata provider.")]
public CustomFunctionCollection CustomFunctionOperators { get; }
    [DescriptionAttribute("Gets a collection of custom function operators supplied by the current metadata provider.")]
public CustomAggregateCollection CustomAggregates { get; }
    private static XPDictionary();
    public NullableBehavior get_NullableBehavior();
    public void set_NullableBehavior(NullableBehavior value);
    protected internal virtual bool get_UseStrictMetadataValidation();
    [ObsoleteAttribute("We do not recommend that you use this method due to potential vulnerabilities if the input XML document contains names of untrusted assemblies and types. Validate or sanitize the input XML documents even in testing and non-production environments for the best security.", "False")]
private void LoadXmlMetadata(XmlDocument doc);
    private void LoadAttributes(XmlNode parentNode, XPTypeInfo info, XmlNamespaceManager nsmgr);
    public abstract virtual ICollection get_Classes();
    public void AddClassInfo(XPClassInfo info);
    protected abstract virtual void AddClassInfoCore(XPClassInfo info);
    public abstract virtual XPClassInfo QueryClassInfo(Type classType);
    public abstract virtual XPClassInfo QueryClassInfo(string assemblyName, string className);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public abstract virtual bool CanGetClassInfoByType(Type classType);
    public XPClassInfo GetClassInfo(string assemblyName, string className);
    public XPClassInfo GetClassInfo(Type classType);
    public XPClassInfo QueryClassInfo(object theObject);
    public XPClassInfo GetClassInfo(object theObject);
    [ObsoleteAttribute("We do not recommend that you use this method due to potential vulnerabilities if the input XML document contains names of untrusted assemblies and types. Validate or sanitize the input XML documents even in testing and non-production environments for the best security.", "False")]
public void LoadXmlMetadata(XmlReader reader);
    [ObsoleteAttribute("We do not recommend that you use this method due to potential vulnerabilities if the input XML document contains names of untrusted assemblies and types. Validate or sanitize the input XML documents even in testing and non-production environments for the best security.", "False")]
public void LoadXmlMetadata(TextReader txtReader);
    [ObsoleteAttribute("We do not recommend that you use this method due to potential vulnerabilities if the input XML document contains names of untrusted assemblies and types. Validate or sanitize the input XML documents even in testing and non-production environments for the best security.", "False")]
public void LoadXmlMetadata(string filename);
    [CompilerGeneratedAttribute]
public void add_ClassInfoChanged(ClassInfoEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ClassInfoChanged(ClassInfoEventHandler value);
    private void TriggerClassInfoChanged(XPClassInfo changedClassInfo);
    internal void OnClassInfoCacheDropped(XPClassInfo changedClassInfo);
    protected virtual void DropDescendantsCache(XPClassInfo changedClassInfo);
    public bool HasDescendants(XPClassInfo classInfo);
    protected virtual bool HasDescendantsCore(XPClassInfo classInfo);
    public ValueConverter GetConverter(Type memberType);
    public void RegisterValueConverter(ValueConverter converter, Type memberType);
    public object GetId(object obj);
    protected virtual bool CanAssemblyContainPersistentClasses(Assembly assembly);
    public XPClassInfo[] CollectClassInfos(bool addNonPersistent, Assembly[] assemblies);
    public XPClassInfo[] CollectClassInfos(bool addNonPersistent, IEnumerable`1<Assembly> assemblies);
    private static void ThrowCouldNotCollectClassInfoFromAssemblyWarning(string assemblyName, Exception innerException);
    public XPClassInfo[] CollectClassInfos(Assembly[] assemblies);
    public XPClassInfo[] CollectClassInfos(IEnumerable`1<Assembly> assemblies);
    public XPClassInfo[] CollectClassInfos(Type[] types);
    public XPClassInfo[] CollectClassInfos(IEnumerable`1<Type> types);
    private static void CheckDuplicateNames(ICollection`1<XPClassInfo> newTypes, ICollection`1<XPClassInfo> alreadyEnsuredTypes);
    internal ICollection`1<XPClassInfo> ExpandTypesToEnsure(ICollection`1<XPClassInfo> inputTypesToEnsure);
    internal ICollection`1<XPClassInfo> ExpandTypesToEnsure(ICollection`1<XPClassInfo> inputTypesToEnsure, IDictionary`2<XPClassInfo, XPClassInfo> alreadyEnsuredTypes);
    internal static DBTable[] CollectTables(ICollection`1<XPClassInfo> classInfos);
    public DBTable[] GetDataStoreSchema(XPClassInfo[] types);
    public DBTable[] GetDataStoreSchema(IEnumerable`1<XPClassInfo> types);
    public DBTable[] GetDataStoreSchema(Assembly[] assemblies);
    public DBTable[] GetDataStoreSchema(IEnumerable`1<Assembly> assemblies);
    public DBTable[] GetDataStoreSchema(Type[] types);
    public DBTable[] GetDataStoreSchema(IEnumerable`1<Type> types);
    public XPClassInfo CreateClass(XPClassInfo baseClassInfo, string className, Attribute[] attributes);
    public XPClassInfo CreateClass(string className, Attribute[] attributes);
    public virtual string ToString();
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void Validate(XPClassInfo[] inputInfos);
    public CustomFunctionCollection get_CustomFunctionOperators();
    public CustomAggregateCollection get_CustomAggregates();
}
public abstract class DevExpress.Xpo.Metadata.XPMemberInfo : XPTypeInfo {
    protected static List`1<XPMemberInfo> EmptyList;
    protected List`1<XPMemberInfo> subMembersArray;
    private bool isReadOnly;
    private Nullable`1<bool> isNullable;
    private bool isNullableCached;
    private object defaultValue;
    private bool isDefaultValueCached;
    private string dbDefaultValue;
    private bool isDbDefaultValueCached;
    private Nullable`1<bool> isFetchOnly;
    protected XPMemberInfo valueParent;
    private bool isDelayedCached;
    private bool isDelayed;
    private bool isAliasedCached;
    private bool isAliased;
    private string mappingField;
    private bool isMappingFieldInitialized;
    private int mappingFieldSize;
    private DBColumnType mappingFieldDBType;
    private string mappingFieldDBTypeName;
    private XPClassInfo owner;
    private XPMemberInfo associatedMember;
    private Nullable`1<bool> isCollection;
    private Nullable`1<bool> isAssociationList;
    private Nullable`1<bool> isNonAssociationList;
    private Nullable`1<bool> isManyToManyAlias;
    private XPClassInfo collectionElementType;
    private IntermediateClassInfo intermediateClass;
    private bool isReferenceTypeCached;
    private XPClassInfo referenceType;
    private Nullable`1<OptimisticLockingReadMergeBehavior> mergeCollisionBehavior;
    private Nullable`1<bool> isOptimisticLockingIgnored;
    [DescriptionAttribute("Gets whether the member is read-only.")]
public bool IsReadOnly { get; }
    [DescriptionAttribute("Gets whether the member represents a key member.")]
public bool IsKey { get; }
    [DescriptionAttribute("Gets whether the member is the auto-generated key.")]
public bool IsAutoGenerate { get; }
    [DescriptionAttribute("Gets whether the member is an auto-generated integer key.")]
public bool IsIdentity { get; }
    public Nullable`1<bool> IsNullable { get; }
    public object DefaultValue { get; }
    public string DbDefaultValue { get; }
    public bool IsFetchOnly { get; }
    [DescriptionAttribute("Gets a collection of sub members.")]
public IList SubMembers { get; }
    internal XPMemberInfo ValueParent { get; }
    [DescriptionAttribute("Gets whether the property is marked as delayed.")]
public bool IsDelayed { get; }
    [DescriptionAttribute("Gets whether a PersistentAliasAttribute attribute is applied to the property.")]
public bool IsAliased { get; }
    [DescriptionAttribute("When implemented in a derived class, gets whether the member is declared as public.")]
public bool IsPublic { get; }
    [DescriptionAttribute("When implemented in a derived class, gets the member’s type.")]
public Type MemberType { get; }
    [DescriptionAttribute("Gets the value converter.")]
public ValueConverter Converter { get; }
    [DescriptionAttribute("Gets the type that the member’s value is saved as in the data store.")]
public Type StorageType { get; }
    [DescriptionAttribute("Gets the column’s name in the data store which the member’s value is stored in.")]
public string MappingField { get; }
    [DescriptionAttribute("Gets the maximum number of characters that can be stored in a field which the member is mapped to.")]
public int MappingFieldSize { get; }
    [DescriptionAttribute("Gets the XPMemberInfo.MappingField‘s data type.")]
public DBColumnType MappingFieldDBType { get; }
    [DescriptionAttribute("Gets the XPMemberInfo.MappingField‘s SQL type name.")]
public string MappingFieldDBTypeName { get; }
    [DescriptionAttribute("Gets the XPClassInfo object which owns this XPMemberInfo object.")]
public XPClassInfo Owner { get; }
    [DescriptionAttribute("When implemented in a derived class, gets the member’s name.")]
public string Name { get; }
    [DescriptionAttribute("Gets the member’s display name.")]
public string DisplayName { get; }
    [DescriptionAttribute("Gets whether the member represents a collection and is involved in associations.")]
public bool IsCollection { get; }
    [DescriptionAttribute("Indicates whether the current member represents the “many” side of the association.")]
public bool IsAssociationList { get; }
    [DescriptionAttribute("Indicates whether the current member represents a collection that is not decorated with AssociationAttribute.")]
public bool IsNonAssociationList { get; }
    [DescriptionAttribute("Indicates whether the ManyToManyAliasAttribute attribute is applied.")]
public bool IsManyToManyAlias { get; }
    [DescriptionAttribute("Gets the XPClassInfo of the persistent object if the current member is a collection of these persistent objects.")]
public XPClassInfo CollectionElementType { get; }
    [DescriptionAttribute("Gets whether the member sets up the relation.")]
public bool IsAssociation { get; }
    [DescriptionAttribute("Gets whether a member is involved in a many-to-many association.")]
public bool IsManyToMany { get; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public IntermediateClassInfo IntermediateClass { get; }
    [ObsoleteAttribute("Use GetAssociatedMember method instead", "True")]
[EditorBrowsableAttribute("1")]
public XPMemberInfo ManyToManyRelatedProperty { get; }
    [DescriptionAttribute("Gets the XPClassInfo of the referenced object if the member is a reference to another persistent object.")]
public XPClassInfo ReferenceType { get; }
    [DescriptionAttribute("Gets whether the member represents a data structure.")]
public bool IsStruct { get; }
    [DescriptionAttribute("Gets whether the member references other aggregated persistent objects.")]
public bool IsAggregated { get; }
    public OptimisticLockingReadMergeBehavior MergeCollisionBehavior { get; }
    public bool IsOptimisticLockingIgnored { get; }
    public bool IsExpandableToPersistent { get; }
    protected XPMemberInfo(XPClassInfo owner, bool isReadOnly);
    private static XPMemberInfo();
    protected virtual void DropCache();
    public bool get_IsReadOnly();
    public bool get_IsKey();
    public bool get_IsAutoGenerate();
    public bool get_IsIdentity();
    public Nullable`1<bool> get_IsNullable();
    public object get_DefaultValue();
    public string get_DbDefaultValue();
    public bool get_IsFetchOnly();
    public IList get_SubMembers();
    internal XPMemberInfo get_ValueParent();
    public bool get_IsDelayed();
    public bool get_IsAliased();
    public abstract virtual bool get_IsPublic();
    public abstract virtual Type get_MemberType();
    public ValueConverter get_Converter();
    public Type get_StorageType();
    public string get_MappingField();
    protected virtual string GetDefaultMappingField();
    private void InitializeMappingField();
    private void InitializeMappingFieldSize();
    private void InitializeMappingFieldDBType();
    private void InitializeMappingFieldDBTypeName();
    public int get_MappingFieldSize();
    public DBColumnType get_MappingFieldDBType();
    public string get_MappingFieldDBTypeName();
    public virtual object GetConst(object target, XPMemberInfo targetMember);
    public abstract virtual object GetValue(object theObject);
    public abstract virtual void SetValue(object theObject, object theValue);
    public abstract virtual bool GetModified(object theObject);
    public abstract virtual object GetOldValue(object theObject);
    public abstract virtual void SetModified(object theObject, object oldValue);
    public abstract virtual void ResetModified(object theObject);
    public XPClassInfo get_Owner();
    public bool IsMappingClass(XPClassInfo branch);
    public abstract virtual string get_Name();
    public string get_DisplayName();
    public virtual string ToString();
    public XPClassInfo GetMappingClass(XPClassInfo branch);
    public XPMemberInfo GetAssociatedMember();
    [ObsoleteAttribute("Use GetAssociatedMember method instead", "True")]
[EditorBrowsableAttribute("1")]
public XPMemberInfo GetAssociatedProperty();
    public bool get_IsCollection();
    public bool get_IsAssociationList();
    public bool get_IsNonAssociationList();
    private static Type GetGenericIListTypeArgument(Type elementType);
    private bool IsAssociationListType();
    public bool get_IsManyToManyAlias();
    public XPClassInfo get_CollectionElementType();
    [ObsoleteAttribute("Use GetAssociatedMember method instead", "True")]
[EditorBrowsableAttribute("1")]
public XPMemberInfo GetAssociatedCollectionProperty();
    public void ProcessAssociationRefChange(Session session, object referenceMemberOwner, object oldValue, object newValue);
    internal void ProcessAssociationRefChange(Session session, object referenceMemberOwner, object oldValue, object newValue, bool skipNonLoadedCollections);
    protected AssociationAttribute FindAssociationAttributeInfo();
    protected AssociationAttribute GetAssociationAttributeInfo();
    public bool get_IsAssociation();
    public bool get_IsManyToMany();
    public IntermediateClassInfo get_IntermediateClass();
    private void InitIntermediateClassInfo(XPMemberInfo relatedProperty, string tableNameOverload);
    private string GetRelationTableName(Boolean& isLeft, XPMemberInfo relatedProperty, string tableNameOverload);
    public XPMemberInfo get_ManyToManyRelatedProperty();
    public virtual XPClassInfo get_ReferenceType();
    public virtual bool get_IsStruct();
    public object ExpandId(object id);
    public bool get_IsAggregated();
    public virtual Expression MakeGetExpression(Expression ownerExpression);
    public OptimisticLockingReadMergeBehavior get_MergeCollisionBehavior();
    public bool get_IsOptimisticLockingIgnored();
    public bool get_IsExpandableToPersistent();
}
public abstract class DevExpress.Xpo.Metadata.XPTypeInfo : object {
    private Dictionary`2<string, Attribute> attributes;
    private Dictionary`2<Type, Attribute> typedAttributes;
    private Nullable`1<bool> _IsPersistent;
    [DescriptionAttribute("Gets the attributes for this type.")]
public Attribute[] Attributes { get; }
    protected bool CanPersist { get; }
    [DescriptionAttribute("Gets whether a class or member of this type is persistent.")]
public bool IsPersistent { get; }
    [DescriptionAttribute("Gets whether a property or class is visible at design time.")]
public bool IsVisibleInDesignTime { get; }
    private static string GetAttributeName(Attribute attribute);
    public bool HasAttribute(Type attributeType);
    public bool HasAttribute(string name);
    public Attribute FindAttributeInfo(Type attributeType);
    public Attribute FindAttributeInfo(string attributeName);
    public Attribute GetAttributeInfo(string name);
    public Attribute GetAttributeInfo(Type attributeType);
    public void RemoveAttribute(Type attributeType);
    public void AddAttribute(Attribute attribute);
    internal void DoDrop();
    protected virtual void DropCache();
    public Attribute[] get_Attributes();
    protected abstract virtual bool get_CanPersist();
    public bool get_IsPersistent();
    public bool get_IsVisibleInDesignTime();
}
[ToolboxItemAttribute("False")]
public class DevExpress.Xpo.NestedUnitOfWork : UnitOfWork {
    private Session parent;
    private NestedParentMap map;
    [DescriptionAttribute("Gets the parent session or unit of work.")]
[CategoryAttribute("Data")]
public Session Parent { get; }
    internal NestedParentMap Map { get; }
    protected internal NestedUnitOfWork(Session parent);
    public Session get_Parent();
    internal NestedParentMap get_Map();
    public T GetParentObject(T obj);
    public object GetParentObject(object obj);
    public object TryGetNestedObject(object obj);
    public T GetNestedObject(T obj);
    public object GetNestedObject(object obj);
    public Object[] GetNestedObjects(Object[] parentObjects);
    protected virtual void OnBeforeCommitTransaction();
    protected virtual void OnAfterCommitTransaction();
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.NoForeignKeyAttribute : Attribute {
}
[AttributeUsageAttribute("1412")]
public class DevExpress.Xpo.NonPersistentAttribute : Attribute {
    public static Type AttributeType;
    private static NonPersistentAttribute();
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.NullableAttribute : Attribute {
    private bool isNullable;
    public bool IsNullable { get; public set; }
    public NullableAttribute(bool isNullable);
    private NullableAttribute(XmlNode attributeNode);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
}
public enum DevExpress.Xpo.NullableBehavior : Enum {
    public int value__;
    public static NullableBehavior Default;
    public static NullableBehavior AlwaysAllowNulls;
    public static NullableBehavior ByUnderlyingType;
}
[AttributeUsageAttribute("4")]
public class DevExpress.Xpo.NullableBehaviorAttribute : Attribute {
    private NullableBehavior nullableBehavior;
    public NullableBehavior NullableBehavior { get; }
    public NullableBehaviorAttribute(NullableBehavior nullableBehavior);
    private NullableBehaviorAttribute(XmlNode attributeNode);
    public NullableBehavior get_NullableBehavior();
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.NullValueAttribute : Attribute {
    private object attributeValue;
    [DescriptionAttribute("Gets or sets a null value for a property or a field.")]
public object Value { get; public set; }
    public NullValueAttribute(object attributeValue);
    public NullValueAttribute(byte attributeValue);
    public NullValueAttribute(short attributeValue);
    public NullValueAttribute(int attributeValue);
    public NullValueAttribute(long attributeValue);
    public NullValueAttribute(float attributeValue);
    public NullValueAttribute(double attributeValue);
    public NullValueAttribute(char attributeValue);
    public NullValueAttribute(string attributeValue);
    public NullValueAttribute(bool attributeValue);
    public NullValueAttribute(Type type, string attributeValue);
    public object get_Value();
    public void set_Value(object value);
}
public class DevExpress.Xpo.ObjectChangeEventArgs : EventArgs {
    private ObjectChangeReason reason;
    private string propertyName;
    private object oldValue;
    private object newValue;
    private object _Object;
    private Session _Session;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static bool DisableObjectChangeEventArgsCache;
    public ObjectChangeReason Reason { get; }
    public string PropertyName { get; }
    public object OldValue { get; public set; }
    public object NewValue { get; public set; }
    public object Object { get; public set; }
    public Session Session { get; public set; }
    [ObsoleteAttribute("Use ObjectChangeEventArgs(Session session, object theObject, ObjectChangeReason reason) instead")]
public ObjectChangeEventArgs(ObjectChangeReason reason);
    [ObsoleteAttribute("Use ObjectChangeEventArgs(Session session, object theObject, ObjectChangeReason reason, string propertyName, object oldValue, object newValue) instead")]
public ObjectChangeEventArgs(ObjectChangeReason reason, string propertyName);
    [ObsoleteAttribute("Use ObjectChangeEventArgs(Session session, object theObject, string propertyName, object oldValue, object newValue) instead")]
public ObjectChangeEventArgs(string propertyName, object oldValue, object newValue);
    public ObjectChangeEventArgs(Session session, object theObject, ObjectChangeReason reason, string propertyName, object oldValue, object newValue);
    public ObjectChangeEventArgs(Session session, object theObject, string propertyName, object oldValue, object newValue);
    public ObjectChangeEventArgs(Session session, object theObject, ObjectChangeReason reason);
    internal void Init(Session session, object theObject, ObjectChangeReason reason, string propertyName, object oldValue, object newValue);
    internal void Clear();
    public ObjectChangeReason get_Reason();
    public string get_PropertyName();
    public object get_OldValue();
    public void set_OldValue(object value);
    public object get_NewValue();
    public void set_NewValue(object value);
    public object get_Object();
    public void set_Object(object value);
    public Session get_Session();
    public void set_Session(Session value);
}
public class DevExpress.Xpo.ObjectChangeEventHandler : MulticastDelegate {
    public ObjectChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum DevExpress.Xpo.ObjectChangeReason : Enum {
    public int value__;
    public static ObjectChangeReason PropertyChanged;
    public static ObjectChangeReason Reset;
    public static ObjectChangeReason Delete;
    public static ObjectChangeReason EndEdit;
    public static ObjectChangeReason CancelEdit;
    public static ObjectChangeReason BeginEdit;
    public static ObjectChangeReason BeforePropertyDescriptorChangeWithinBeginEdit;
}
public class DevExpress.Xpo.ObjectManipulationEventArgs : EventArgs {
    private object theObject;
    private Session session;
    public object Object { get; }
    public Session Session { get; }
    public ObjectManipulationEventArgs(object theObject);
    public ObjectManipulationEventArgs(Session session, object theObject);
    public object get_Object();
    public Session get_Session();
}
public class DevExpress.Xpo.ObjectManipulationEventHandler : MulticastDelegate {
    public ObjectManipulationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectManipulationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectManipulationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.ObjectsByKeyQuery : object {
    private XPClassInfo classInfo;
    private ICollection idCollection;
    [DescriptionAttribute("Gets the persistent class’s metadata information for persistent objects to include in the query.")]
public XPClassInfo ClassInfo { get; }
    [DescriptionAttribute("Gets a collection of key property values of persistent objects to include in the query.")]
public ICollection IdCollection { get; }
    public ObjectsByKeyQuery(XPClassInfo classInfo, ICollection idCollection);
    public XPClassInfo get_ClassInfo();
    public ICollection get_IdCollection();
}
public class DevExpress.Xpo.ObjectsLoadedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ICollection <ParentObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection <NestedObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private NestedParentMap <NestedParentMap>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityContext <SecurityContext>k__BackingField;
    public ICollection ParentObjects { get; private set; }
    public ICollection NestedObjects { get; private set; }
    public NestedParentMap NestedParentMap { get; private set; }
    public SecurityContext SecurityContext { get; private set; }
    public ObjectsLoadedEventArgs(ICollection parentObjects, ICollection nestedObjects, NestedParentMap nestedParentMap, SecurityContext securityContext);
    [CompilerGeneratedAttribute]
public ICollection get_ParentObjects();
    [CompilerGeneratedAttribute]
private void set_ParentObjects(ICollection value);
    [CompilerGeneratedAttribute]
public ICollection get_NestedObjects();
    [CompilerGeneratedAttribute]
private void set_NestedObjects(ICollection value);
    [CompilerGeneratedAttribute]
public NestedParentMap get_NestedParentMap();
    [CompilerGeneratedAttribute]
private void set_NestedParentMap(NestedParentMap value);
    [CompilerGeneratedAttribute]
public SecurityContext get_SecurityContext();
    [CompilerGeneratedAttribute]
private void set_SecurityContext(SecurityContext value);
}
public class DevExpress.Xpo.ObjectsManipulationEventArgs : EventArgs {
    private ICollection objects;
    private Session session;
    public ICollection Objects { get; }
    public Session Session { get; }
    public ObjectsManipulationEventArgs(Session session, ICollection objects);
    public ICollection get_Objects();
    public Session get_Session();
}
public class DevExpress.Xpo.ObjectsManipulationEventHandler : MulticastDelegate {
    public ObjectsManipulationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectsManipulationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectsManipulationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.ObjectsQuery : object {
    private XPClassInfo classInfo;
    private CriteriaOperator criteria;
    private SortingCollection sorting;
    private int topSelectedRecords;
    private int skipSelectedRecords;
    private CollectionCriteriaPatcher collectionCriteriaPatcher;
    private bool force;
    private bool skipDuplicateCheck;
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public XPClassInfo ClassInfo { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public CriteriaOperator Criteria { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public SortingCollection Sorting { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public int TopSelectedRecords { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public int SkipSelectedRecords { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public CollectionCriteriaPatcher CollectionCriteriaPatcher { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public bool Force { get; public set; }
    public bool SkipDuplicateCheck { get; public set; }
    public ObjectsQuery(XPClassInfo classInfo, CriteriaOperator criteria, SortingCollection sorting, int topSelectedRecords, CollectionCriteriaPatcher collectionCriteriaPatcher, bool force);
    public ObjectsQuery(XPClassInfo classInfo, CriteriaOperator criteria, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, CollectionCriteriaPatcher collectionCriteriaPatcher, bool force);
    public XPClassInfo get_ClassInfo();
    public void set_ClassInfo(XPClassInfo value);
    public CriteriaOperator get_Criteria();
    public void set_Criteria(CriteriaOperator value);
    public SortingCollection get_Sorting();
    public void set_Sorting(SortingCollection value);
    public int get_TopSelectedRecords();
    public void set_TopSelectedRecords(int value);
    public int get_SkipSelectedRecords();
    public void set_SkipSelectedRecords(int value);
    public CollectionCriteriaPatcher get_CollectionCriteriaPatcher();
    public void set_CollectionCriteriaPatcher(CollectionCriteriaPatcher value);
    public bool get_Force();
    public void set_Force(bool value);
    public bool get_SkipDuplicateCheck();
    public void set_SkipDuplicateCheck(bool value);
}
[XmlRootAttribute("ObjectsQuery")]
public class DevExpress.Xpo.ObjectStubsQuery : object {
    private XPClassInfoStub classInfo;
    private CriteriaOperator criteria;
    private String[] sortingStrings;
    private SortingCollection sorting;
    private int topSelectedRecords;
    private int skipSelectedRecords;
    private bool selectDeleted;
    private bool force;
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public XPClassInfoStub ClassInfo { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public CriteriaOperator Criteria { get; public set; }
    [XmlArrayItemAttribute("sorting")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public String[] SortingStrings { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
[XmlIgnoreAttribute]
public SortingCollection Sorting { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public int TopSelectedRecords { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public int SkipSelectedRecords { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public bool SelectDeleted { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public bool Force { get; public set; }
    public ObjectStubsQuery(ObjectsQuery query, Session session, NestedParentGuidMap map, XPObjectClassInfoStubCache classInfoCache);
    public ObjectStubsQuery(XPClassInfoStub classInfo, CriteriaOperator criteria, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, bool selectDeleted, bool force);
    public XPClassInfoStub get_ClassInfo();
    public void set_ClassInfo(XPClassInfoStub value);
    public CriteriaOperator get_Criteria();
    public void set_Criteria(CriteriaOperator value);
    public String[] get_SortingStrings();
    public void set_SortingStrings(String[] value);
    public SortingCollection get_Sorting();
    public void set_Sorting(SortingCollection value);
    public int get_TopSelectedRecords();
    public void set_TopSelectedRecords(int value);
    public int get_SkipSelectedRecords();
    public void set_SkipSelectedRecords(int value);
    public bool get_SelectDeleted();
    public void set_SelectDeleted(bool value);
    public bool get_Force();
    public void set_Force(bool value);
    [OnSerializingAttribute]
internal void OnSerializingMethod(StreamingContext context);
    [OnSerializedAttribute]
internal void OnSerializedMethod(StreamingContext context);
    [OnDeserializedAttribute]
internal void OnDeserializedMethod(StreamingContext context);
}
[AttributeUsageAttribute("1028")]
public class DevExpress.Xpo.OptimisticLockingAttribute : Attribute {
    private OptimisticLockingBehavior lockingKind;
    public static string DefaultFieldName;
    private string fieldName;
    [DescriptionAttribute("Gets or sets whether optimistic locking is enabled.")]
public bool Enabled { get; public set; }
    [DescriptionAttribute("Gets the name of the system field which is used to control object locking for objects that have the object locking option enabled.")]
public string FieldName { get; }
    public OptimisticLockingBehavior LockingKind { get; public set; }
    public OptimisticLockingAttribute(bool enabled);
    public OptimisticLockingAttribute(string fieldName);
    public OptimisticLockingAttribute(OptimisticLockingBehavior lockingKind);
    private OptimisticLockingAttribute(XmlNode attributeNode);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_FieldName();
    public OptimisticLockingBehavior get_LockingKind();
    public void set_LockingKind(OptimisticLockingBehavior value);
}
public enum DevExpress.Xpo.OptimisticLockingBehavior : Enum {
    public int value__;
    public static OptimisticLockingBehavior NoLocking;
    public static OptimisticLockingBehavior ConsiderOptimisticLockingField;
    public static OptimisticLockingBehavior LockModified;
    public static OptimisticLockingBehavior LockAll;
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.OptimisticLockingIgnoredAttribute : Attribute {
}
public enum DevExpress.Xpo.OptimisticLockingReadBehavior : Enum {
    public int value__;
    public static OptimisticLockingReadBehavior Default;
    public static OptimisticLockingReadBehavior Ignore;
    public static OptimisticLockingReadBehavior ReloadObject;
    public static OptimisticLockingReadBehavior Mixed;
    public static OptimisticLockingReadBehavior ThrowException;
    public static OptimisticLockingReadBehavior MergeCollisionIgnore;
    public static OptimisticLockingReadBehavior MergeCollisionThrowException;
    public static OptimisticLockingReadBehavior MergeCollisionReload;
}
[AttributeUsageAttribute("1028")]
public class DevExpress.Xpo.OptimisticLockingReadBehaviorAttribute : Attribute {
    private Nullable`1<bool> trackPropertiesModifications;
    private OptimisticLockingReadBehavior behavior;
    public Nullable`1<bool> TrackPropertiesModifications { get; }
    public OptimisticLockingReadBehavior Behavior { get; }
    public OptimisticLockingReadBehaviorAttribute(OptimisticLockingReadBehavior behavior);
    public OptimisticLockingReadBehaviorAttribute(OptimisticLockingReadBehavior behavior, bool trackPropertiesModifications);
    public Nullable`1<bool> get_TrackPropertiesModifications();
    public OptimisticLockingReadBehavior get_Behavior();
}
public enum DevExpress.Xpo.OptimisticLockingReadMergeBehavior : Enum {
    public int value__;
    public static OptimisticLockingReadMergeBehavior Default;
    public static OptimisticLockingReadMergeBehavior Ignore;
    public static OptimisticLockingReadMergeBehavior ThrowException;
    public static OptimisticLockingReadMergeBehavior Reload;
}
public class DevExpress.Xpo.PageSelector : object {
    private IList keys;
    private XPClassInfo objectClassInfo;
    private int currentPageBase;
    private int currentPageSize;
    private CriteriaOperator criteria;
    public XPClassInfo ObjectClassInfo { get; }
    public int Count { get; }
    public PageSelector(XPClassInfo objectClassInfo, IList keysList);
    public PageSelector(Session session, XPClassInfo objectClassInfo, CriteriaOperator criteria, int topReturnedObjects, bool selectDeleted, SortingCollection sorting);
    public XPClassInfo get_ObjectClassInfo();
    public int get_Count();
    public CriteriaOperator GetPageCriteria(int pageBase, int pageSize);
    public int GetElementsInPage(int pageBase, int pageSize);
    public ICollection FillCollectionWithPageVerified(Session session, SortingCollection sorting, int pageBase, int pageSize);
}
internal class DevExpress.Xpo.Parser : object {
    internal static OperandProperty ThisCriteria;
    internal static OperandProperty UpThisCriteria;
    private Dictionary`2<ParameterExpression, CriteriaOperator> parameters;
    private XPClassInfo[] upDepthList;
    private XPClassInfo classInfo;
    private CustomCriteriaCollection customCriteriaCollection;
    private Dictionary`2<Expression, CriteriaOperator> cache;
    private ParamExpression Resolver;
    private int forceExpressionOperatorForConversion;
    private int forceExpressionOperatorForQuerySet;
    private static ConcurrentDictionary`2<Type, object> typeDefaultValues;
    private static object boxedZero;
    private static HashSet`1<Type> containsDeclearingTypes;
    private XPDictionary Dictionary { get; }
    private static HashSet`1<Type> ContainsDeclearingTypes { get; }
    private Parser(XPClassInfo[] upDepthList, CustomCriteriaCollection customCriteriaCollection, ParamExpression resolver, Dictionary`2<ParameterExpression, CriteriaOperator> parameters);
    private Parser(XPClassInfo classInfo, CustomCriteriaCollection customCriteriaCollection, ParamExpression resolver, Dictionary`2<ParameterExpression, CriteriaOperator> parameters);
    private static Parser();
    private static bool IsNull(object val);
    private XPDictionary get_Dictionary();
    internal static bool HasExpressionAccess(CriteriaOperator[] operands);
    internal static bool HasExpressionAccess(CriteriaOperator operand);
    internal static ExpressionAccessOperator GetCauseOfExpressionAccess(CriteriaOperator operand);
    internal static string GetCauseStringOfExpressionAccess(CriteriaOperator operand);
    internal static bool HasExpressionAccess(CriteriaOperator operand1, CriteriaOperator operand2);
    internal static bool HasExpressionAccess(CriteriaOperator operand1, CriteriaOperator operand2, CriteriaOperator operand3);
    internal static bool IsNotParsableQuerySet(CriteriaOperator co);
    internal static bool HasExpressionOrMemberInitOrQuerySet(CriteriaOperator[] operands);
    internal static bool HasExpressionOrMemberInitOrQuerySet(CriteriaOperator operand);
    internal static bool HasExpressionOrMemberInitOrQuerySet(CriteriaOperator operand1, CriteriaOperator operand2);
    internal static bool HasExpressionOrMemberInitOrQuerySet(CriteriaOperator operand1, CriteriaOperator operand2, CriteriaOperator operand3);
    private static IList`1<ParameterExpression> GetLambdaParams(Expression call, int count);
    private static Expression ExtractLambdaExpressionIfNeeded(Expression call);
    private CriteriaOperator ParseExpression(Type type, Expression expression, CriteriaOperator[] maps);
    private static ParamExpression GetResolver(Expression& expression);
    private CriteriaOperator ParseExpression(OperandProperty col, Expression expression, CriteriaOperator[] maps);
    public static CriteriaOperator ParseObjectExpression(XPClassInfo classInfo, CustomCriteriaCollection customCriteriaCollection, Expression expression, CriteriaOperator[] maps);
    public static CriteriaOperator ParseExpression(XPClassInfo classInfo, CustomCriteriaCollection customCriteriaCollection, Expression expression, CriteriaOperator[] maps);
    private static void AddMaps(Expression expression, CriteriaOperator[] maps, Dictionary`2<ParameterExpression, CriteriaOperator> parameters);
    private CriteriaOperator ParseWithExpressionOperatorForceForConversion(Expression expression);
    private CriteriaOperator ParseWithExpressionOperatorForceForQuerySet(Expression expression);
    private CriteriaOperator ParseExpression(Expression expression);
    public CriteriaOperator ParseExpressionCore(Expression expression);
    public CriteriaOperator ParseInvoke(InvocationExpression invoke);
    private static bool IsLogical(BinaryExpression binaryExpression);
    private CriteriaOperator ArrayLength(UnaryExpression expression);
    private CriteriaOperator ArrayIndex(BinaryExpression expression);
    private CriteriaOperator TypeIs(TypeBinaryExpression expression);
    private CriteriaOperator TypeAs(UnaryExpression expression);
    private CriteriaOperator Group(BinaryExpression expression, GroupOperatorType type);
    private bool TryCallConvertClass(MethodCallExpression call, CriteriaOperator& outCriteriaOperator);
    private CriteriaOperator ParseDefault(DefaultExpression expression);
    private CriteriaOperator Unary(UnaryExpression expression, UnaryOperatorType type);
    public bool BinaryDetectCompare(Expression expression, Expression leftExpression, Expression rightExpression, CriteriaOperator right, BinaryOperatorType type, bool rightIsExpressionAccess, CriteriaOperator& result);
    private CriteriaOperator Binary(BinaryExpression expression, BinaryOperatorType type);
    private CriteriaOperator Conditional(ConditionalExpression expression);
    private CriteriaOperator Coalesce(BinaryExpression expression);
    private CriteriaOperator Constant(ConstantExpression expression);
    public static bool IsPrimitive(Type type);
    private static HashSet`1<Type> get_ContainsDeclearingTypes();
    private CriteriaOperator Call(MethodCallExpression call);
    private CriteriaOperator FnToStr(MethodCallExpression toStringCall, Expression argument);
    private bool CheckMethodIsContains(MethodInfo method, ReadOnlyCollection`1<Expression> arguments);
    private CriteriaOperator CallSqlMethods(MethodCallExpression call);
    private CriteriaOperator CallString(MethodCallExpression call);
    private CriteriaOperator CallMath(MethodCallExpression call);
    private CriteriaOperator CallDateTime(MethodCallExpression call);
    private CriteriaOperator CallDateAddTimeSpan(MethodCallExpression call);
    private CriteriaOperator DefaultIfEmpty(MethodCallExpression call);
    private CriteriaOperator CallQueryable(MethodCallExpression call);
    public CriteriaOperator FnCompareTo(CriteriaOperator obj, CriteriaOperator argument);
    private CriteriaOperator FnConcat(BinaryExpression binary, Expression left, Expression right);
    private CriteriaOperator FnConcatList(Expression expression, IList`1<Expression> arguments);
    private CriteriaOperator FnIndexOf(MethodCallExpression call);
    private CriteriaOperator FunctionUniversal(MethodCallExpression call, FunctionOperatorType fType, bool obj, int minCount, int maxCount);
    private CriteriaOperator Select(MethodCallExpression call);
    private CriteriaOperator OfType(MethodCallExpression call);
    private CriteriaOperator Where(MethodCallExpression call);
    private CriteriaOperator CallDefault(MethodCallExpression call);
    private CriteriaOperator CallCustomFunction(MethodCallExpression call);
    private CriteriaOperator CallCustomAggregate(MethodCallExpression call);
    private static bool IsValidCustomFunctionQueryable(MethodCallExpression call, ICustomFunctionOperator customFunction, FunctionOperatorType& customFunctionType);
    private static bool IsValidCustomAggregateQueryable(MethodCallExpression call, ICustomAggregate customAggregate);
    private CriteriaOperator CallCustomCriteria(MethodCallExpression call);
    private CriteriaOperator LogicalBinary(BinaryExpression expression, BinaryOperatorType type);
    public static bool IsImplementsInterface(Type classType, Type interfaceType);
    private CriteriaOperator Convert(UnaryExpression expression);
    private CriteriaOperator ConvertCore(Expression expression, Expression expressionOperand, Type resultType, XPClassInfo currentClassInfo);
    private CriteriaOperator ConvertCore(Expression expression, CriteriaOperator operandCriteriaOperantor, Type operandType, Type resultType, XPClassInfo currentClassInfo);
    private static OperandProperty ConvertPropertyCore(OperandProperty property, Type resultType);
    private CriteriaOperator NewArrayInit(NewArrayExpression expression);
    private bool TryGetNewXPQueryCriteria(Expression expression, CriteriaOperator& criteria);
    private CriteriaOperator New(NewExpression expression);
    private bool IsStructType(Type type);
    private CriteriaOperator ConvertStructAccessIfNeeded(Expression expression, CriteriaOperator criteria);
    private CriteriaOperator MemberInit(MemberInitExpression expression);
    private CriteriaOperator ParseObjectExpression(Expression expression);
    private CriteriaOperator NotEqual(BinaryExpression expression);
    private CriteriaOperator CompareVB(MethodCallExpression expression, BinaryOperatorType type);
    private CriteriaOperator Parameter(ParameterExpression expression);
    private CriteriaOperator Equal(BinaryExpression expression);
    private CriteriaOperator EqualsCore(Expression expression, Expression leftExpression, Expression rightExpression, bool negation);
    private bool BinaryDetectCheckCollectionIsNull(Expression left, Expression right);
    private bool BinaryDetectCheckIsInstanceOfType(Expression left, Expression right, bool negation, CriteriaOperator& result);
    private CriteriaOperator MemberAccess(MemberExpression expression);
    internal static bool TryExtractXPQuery(Expression expression, XPQueryBase& xpQueryBase);
    private CriteriaOperator MemberAccess(MemberExpression expression, CriteriaOperator parent, XPClassInfo currentClassInfo);
    private static bool IsStructProperty(string name, XPClassInfo currentClassInfo, XPMemberInfo& structMemberInfo);
    private static bool IsPropertyAssociationList(string name, XPClassInfo currentClassInfo, XPClassInfo& collectionElementClassInfo);
    private static bool IsPropertyNonPersistent(string name, XPClassInfo currentClassInfo);
    private static bool AccessDateTime(CriteriaOperator parent, string name, CriteriaOperator& result);
    private static CriteriaOperator AccessNullable(CriteriaOperator parent, string name);
    private static CriteriaOperator AccessString(CriteriaOperator parent, string name);
    internal static bool TryConvertToQuerySet(CriteriaOperator op, XPClassInfo classInfo, QuerySet& querySet);
    private CriteriaOperator AggregateCall(MethodCallExpression call, Aggregate type);
    private CriteriaOperator AggregateCall(MethodCallExpression call, string customAggregateName);
    private QuerySet GetCollectionPropertyForAggregateCall(MethodCallExpression aggregateCallExpression);
    private CriteriaOperator Sum(MethodCallExpression call);
    private CriteriaOperator Average(MethodCallExpression call);
    private CriteriaOperator Min(MethodCallExpression call);
    private CriteriaOperator Max(MethodCallExpression call);
    private CriteriaOperator All(MethodCallExpression call);
    private CriteriaOperator Any(MethodCallExpression call);
    private bool AnyCore(MethodCallExpression call, QuerySet col, CriteriaOperator& result);
    private Expression ExtractLambdaBody(Expression lambda);
    private CriteriaOperator Contains(MethodCallExpression call);
    private CriteriaOperator ListContains(MethodCallExpression call);
    private CriteriaOperator Count(MethodCallExpression call);
    private CriteriaOperator CountCore(MethodCallExpression call, QuerySet path);
    private Dictionary`2<ParameterExpression, CriteriaOperator> PrepareParametersForJoin();
    private Dictionary`2<ParameterExpression, CriteriaOperator> PrepareParameters(Expression call, OperandProperty path, int upDepth);
    private Dictionary`2<ParameterExpression, CriteriaOperator> PatchParameters(string pathStr);
    private static CriteriaOperator PatchParameter(string pathStr, CriteriaOperator p);
    private bool IsVBStringCompare(BinaryExpression expression);
}
[AttributeUsageAttribute("128")]
public class DevExpress.Xpo.PersistentAliasAttribute : Attribute {
    private string _aliasExpression;
    private CriteriaOperator _expression;
    [DescriptionAttribute("Gets the expression  which determines how the property’s value is calculated.")]
public string AliasExpression { get; }
    internal CriteriaOperator Criteria { get; }
    private PersistentAliasAttribute(XmlNode attributeNode);
    public PersistentAliasAttribute(string aliasExpression);
    public string get_AliasExpression();
    internal CriteriaOperator get_Criteria();
}
[AttributeUsageAttribute("1412")]
public class DevExpress.Xpo.PersistentAttribute : Attribute {
    private string mapTo;
    public static Type AttributeType;
    [DescriptionAttribute("Gets the name of the table or column to which to map a class or a property/field.")]
public string MapTo { get; }
    public PersistentAttribute(string mapTo);
    private PersistentAttribute(XmlNode attributeNode);
    private static PersistentAttribute();
    public string get_MapTo();
}
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
[OptimisticLockingAttribute("True")]
public class DevExpress.Xpo.PersistentBase : object {
    [EditorBrowsableAttribute("1")]
public static bool UseUnsafeCreateCollectionStrategy;
    [EditorBrowsableAttribute("1")]
public static bool DisableSmartCreateAssociationListStrategy;
    private Session _Session;
    private XPClassInfo _ClassInfo;
    private Dictionary`2<XPMemberInfo, object> modificationsStore;
    private Dictionary`2<XPMemberInfo, object> customPropertyStore;
    private static ObjectChangeEventArgs cachedObjectChangeEventArgs;
    private PropertyChangedEventHandler propertyChanged;
    [MemberDesignTimeVisibilityAttribute("False")]
[BrowsableAttribute("False")]
public XPClassInfo ClassInfo { get; }
    [MemberDesignTimeVisibilityAttribute("False")]
[BrowsableAttribute("False")]
public Session Session { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    private IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.ObjectLayer { get; }
    protected bool IsInvalidated { get; }
    private bool DevExpress.Xpo.IXPInvalidateableObject.IsInvalidated { get; }
    private Dictionary`2<XPMemberInfo, object> ModificationsStore { get; }
    internal bool HasModificationStore { get; }
    private bool HasCustomPropertyStore { get; }
    internal Dictionary`2<XPMemberInfo, object> CustomPropertyStore { get; }
    [MemberDesignTimeVisibilityAttribute("False")]
[BrowsableAttribute("False")]
public bool IsLoading { get; }
    [MemberDesignTimeVisibilityAttribute("False")]
[BrowsableAttribute("False")]
protected bool IsSaving { get; }
    [BrowsableAttribute("False")]
[MemberDesignTimeVisibilityAttribute("False")]
public bool IsDeleted { get; }
    [DescriptionAttribute("Gets an object that contains field identifiers for Simplified Criteria Syntax.")]
public static FieldsClass Fields { get; }
    private IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.DataLayer { get; }
    protected PersistentBase(Session session);
    public PersistentBase(Session session, XPClassInfo classInfo);
    private void Init(Session session, XPClassInfo classInfo);
    public virtual void AfterConstruction();
    public sealed virtual XPClassInfo get_ClassInfo();
    public sealed virtual Session get_Session();
    protected virtual void ThrowObjectDisposedException();
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
    private sealed virtual override IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.get_ObjectLayer();
    protected virtual void Invalidate(bool disposing);
    private sealed virtual override void DevExpress.Xpo.IXPInvalidateableObject.Invalidate();
    protected virtual bool get_IsInvalidated();
    private sealed virtual override bool DevExpress.Xpo.IXPInvalidateableObject.get_IsInvalidated();
    private Dictionary`2<XPMemberInfo, object> get_ModificationsStore();
    internal bool get_HasModificationStore();
    private sealed virtual override void DevExpress.Xpo.IXPModificationsStore.ClearModifications();
    private sealed virtual override void DevExpress.Xpo.IXPModificationsStore.SetPropertyModified(XPMemberInfo property, object oldValue);
    private sealed virtual override bool DevExpress.Xpo.IXPModificationsStore.GetPropertyModified(XPMemberInfo property);
    private sealed virtual override object DevExpress.Xpo.IXPModificationsStore.GetPropertyOldValue(XPMemberInfo property);
    private sealed virtual override void DevExpress.Xpo.IXPModificationsStore.ResetPropertyModified(XPMemberInfo property);
    private sealed virtual override bool DevExpress.Xpo.IXPModificationsStore.HasModifications();
    public static IXPModificationsStore GetModificationsStore(object theObject);
    private bool get_HasCustomPropertyStore();
    internal Dictionary`2<XPMemberInfo, object> get_CustomPropertyStore();
    private sealed virtual override object DevExpress.Xpo.IXPCustomPropertyStore.GetCustomPropertyValue(XPMemberInfo property);
    internal object GetCustomPropertyValue(XPMemberInfo property);
    private object CreateDefValue(XPMemberInfo property);
    private object CheckPropertyValue(XPMemberInfo property, object value);
    private static bool CanCreateGenericList(Type memberType);
    private sealed virtual override bool DevExpress.Xpo.IXPCustomPropertyStore.SetCustomPropertyValue(XPMemberInfo property, object theValue);
    internal bool SetCustomPropertyValue(XPMemberInfo property, object theValue);
    public static IXPCustomPropertyStore GetCustomPropertyStore(object theObject);
    internal static bool CanSkipAssignment(object oldValue, object newValue);
    protected IList GetList(string propertyName);
    protected virtual IList CreateAssociationList(XPMemberInfo property);
    protected virtual IList CreateManyToManyAliasList(IList aliasedCollection, XPMemberInfo skippedProperty);
    private IList CreateManyToManyAliasList(XPMemberInfo property);
    protected IList`1<T> GetList(string propertyName);
    protected virtual XPCollection`1<T> CreateCollection(XPMemberInfo property);
    protected virtual IList`1<T> CreateAssociationList(XPMemberInfo property);
    protected virtual IList`1<T> CreateManyToManyAliasList(IList aliasedCollection, XPMemberInfo skippedProperty);
    protected virtual XPCollection CreateCollection(XPMemberInfo property);
    protected virtual XPBaseCollection CustomCreateCollection(XPMemberInfo property);
    internal int GetImmutableHashCode();
    private sealed virtual override int DevExpress.Xpo.Helpers.IXPImmutableHashCode.GetImmutableHashCode();
    public static BinaryOperator op_Equality(CriteriaOperator prop, PersistentBase obj);
    public static BinaryOperator op_Inequality(CriteriaOperator prop, PersistentBase obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual void OnChanged(string propertyName, object oldValue, object newValue);
    protected virtual void TriggerObjectChanged(ObjectChangeEventArgs args);
    internal void TriggerObjectChangedCached(ObjectChangeReason reason, string propertyName, object oldValue, object newValue);
    internal void TriggerObjectChangedCached(ObjectChangeReason reason);
    protected bool SetPropertyValue(string propertyName, object newValue);
    protected bool SetPropertyValue(string propertyName, T newValue);
    protected bool SetPropertyValue(string propertyName, DateTime& propertyValueHolder, DateTime newValue);
    protected bool SetPropertyValue(string propertyName, Decimal& propertyValueHolder, decimal newValue);
    protected bool SetPropertyValue(string propertyName, Double& propertyValueHolder, double newValue);
    protected bool SetPropertyValue(string propertyName, Int32& propertyValueHolder, int newValue);
    protected bool SetPropertyValue(string propertyName, Int64& propertyValueHolder, long newValue);
    protected bool SetPropertyValue(string propertyName, Guid& propertyValueHolder, Guid newValue);
    protected bool SetPropertyValue(string propertyName, Nullable`1& propertyValueHolder, Nullable`1<DateTime> newValue);
    protected bool SetPropertyValue(string propertyName, Nullable`1& propertyValueHolder, Nullable`1<decimal> newValue);
    protected bool SetPropertyValue(string propertyName, Nullable`1& propertyValueHolder, Nullable`1<double> newValue);
    protected bool SetPropertyValue(string propertyName, Nullable`1& propertyValueHolder, Nullable`1<int> newValue);
    protected bool SetPropertyValue(string propertyName, Nullable`1& propertyValueHolder, Nullable`1<long> newValue);
    protected bool SetPropertyValue(string propertyName, Nullable`1& propertyValueHolder, Nullable`1<Guid> newValue);
    protected bool SetPropertyValue(string propertyName, String& propertyValueHolder, string newValue);
    private bool SetPropertyEquatableValue(string propertyName, T& propertyValueHolder, T newValue);
    private bool SetPropertyNullableEquatableValue(string propertyName, Nullable`1& propertyValueHolder, Nullable`1<T> newValue);
    protected bool SetPropertyValue(string propertyName, Boolean& propertyValueHolder, bool newValue);
    protected bool SetPropertyValue(string propertyName, Nullable`1& propertyValueHolder, Nullable`1<bool> newValue);
    protected bool SetPropertyValue(string propertyName, T& propertyValueHolder, T newValue);
    protected bool SetDelayedPropertyValue(string propertyName, object newValue);
    protected bool SetDelayedPropertyValue(string propertyName, T newValue);
    protected object GetPropertyValue(string propertyName);
    protected T GetPropertyValue(string propertyName);
    protected object GetDelayedPropertyValue(string propertyName);
    protected T GetDelayedPropertyValue(string propertyName);
    public virtual string ToString();
    public bool get_IsLoading();
    protected bool get_IsSaving();
    public bool get_IsDeleted();
    private sealed virtual override void DevExpress.Xpo.IXPObject.OnLoading();
    private sealed virtual override void DevExpress.Xpo.IXPObject.OnLoaded();
    private sealed virtual override void DevExpress.Xpo.IXPObject.OnSaving();
    private sealed virtual override void DevExpress.Xpo.IXPObject.OnSaved();
    private sealed virtual override void DevExpress.Xpo.IXPObject.OnDeleting();
    private sealed virtual override void DevExpress.Xpo.IXPObject.OnDeleted();
    protected virtual void OnLoading();
    protected virtual void OnLoaded();
    protected virtual void OnSaving();
    protected virtual void OnSaved();
    protected virtual void OnDeleting();
    protected virtual void OnDeleted();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
protected internal virtual void OnSessionProcessingProcessProcessed();
    private sealed virtual override void DevExpress.Xpo.IXPReceiveOnChangedFromDelayedProperty.FireChangedByDelayedPropertySetter(XPMemberInfo member, object oldValue, object newValue);
    private sealed virtual override void DevExpress.Xpo.IXPReceiveOnChangedFromArbitrarySource.FireChanged(string propertyName);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void RaisePropertyChangedEvent(string propertyName);
    public static FieldsClass get_Fields();
    private sealed virtual override IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.get_DataLayer();
}
public enum DevExpress.Xpo.PersistentCriteriaEvaluationBehavior : Enum {
    public int value__;
    public static PersistentCriteriaEvaluationBehavior BeforeTransaction;
    public static PersistentCriteriaEvaluationBehavior InTransaction;
}
public class DevExpress.Xpo.ProcessReferenceHandler : MulticastDelegate {
    public ProcessReferenceHandler(object object, IntPtr method);
    public virtual object Invoke(object theObject, XPMemberInfo member);
    public virtual IAsyncResult BeginInvoke(object theObject, XPMemberInfo member, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class DevExpress.Xpo.Res : object {
    private ResourceManager manager;
    private static Res res;
    public static string Common_MethodOrOperationNotImplemented;
    public static string Async_OperationCannotBePerformedBecauseNoSyncContext;
    public static string Async_CanChangeProperties;
    public static string Async_CanChangeViewProperties;
    public static string Async_InternalErrorAsyncActionIsAlreadyDisposed;
    public static string Async_ObjectLayerDoesNotImplementIObjectLayerAsync;
    public static string Async_DataLayerDoesNotImplementIDataLayerAsync;
    public static string Async_CommandChannelDoesNotImplementICommandChannelAsync;
    public static string Async_ConnectionProviderDoesNotImplementIDataStoreAsync;
    public static string Filtering_TheIifFunctionOperatorRequiresThree;
    public static string Filtering_TheTypeNameArgumentOfTheX0FunctionIsNotFound;
    public static string Collections_InvalidCastOnAdd;
    public static string Collections_CannotAssignProperty;
    public static string Collections_CannotResolvePropertyTypeComparer;
    public static string Collections_CriteriaEvaluationBehaviorIsNotSupported;
    public static string Collections_RecurringObjectAdd;
    public static string Collections_NotCollectionProperty;
    public static string Collections_WantNotDeleteFilteredAggregateCollection;
    public static string Collections_GeneralPurposeCollectionInsteadOfRefCollection;
    public static string LinqToXpo_DuplicateJoinOperatorFound;
    public static string LinqToXpo_WithDeletedOptionNotSupported;
    public static string ConnectionProvider_UnableToFillRefType;
    public static string ConnectionProvider_KeysAutogenerationNonSupportedTypeException;
    public static string ConnectionProvider_TheAutoIncrementedKeyWithX0TypeIsNotSuppor;
    public static string CriteriaAnalizer_ClassesAreNotAssignable;
    public static string CriteriaAnalizer_PathNotFound;
    public static string CriteriaAnalizer_NullTransitionMemberInfo;
    public static string CriteriaAnalizer_EmptyJoinOperandId;
    public static string CriteriaAnalizer_NullJoinClassInfo;
    public static string CriteriaAnalizer_TopLevelAggregateNotSupported;
    public static string DirectSQL_WrongColumnCount;
    public static string DataView_ReferenceMembersWithCompoundKeyAreNotSupported;
    public static string DirectSQL_CollectionMembersAreNotSupported;
    public static string Generator_OneOfBinaryOperatorsOperandsIsNull;
    public static string Generator_TheUseOfNestedSingleAggregatesIsProhibited;
    public static string Generator_TheUseOfATopLevelSingleAggregateIsProhibit;
    public static string Helpers_DifferentObjectsKeys;
    public static string Helpers_SameDictionaryExpected;
    public static string Helpers_CloningObjectModified;
    public static string Helpers_ResolveDataForCollection;
    public static string InMemory_SingleRowExpected;
    public static string InMemory_NotACollection;
    public static string InMemory_CannotFindParentRelationForNode;
    public static string InMemory_MalformedAggregate;
    public static string InMemory_DataSetUncommited;
    public static string InMemory_IsReadOnly;
    public static string InMemoryFull_DifferentColumnListLengths;
    public static string InMemoryFull_CannotPrepareQueryPlan;
    public static string InMemoryFull_CannotPrepareQueryPlanX0;
    public static string InMemoryFull_TableNotFound;
    public static string InMemoryFull_WrongIndexInfo;
    public static string InMemoryFull_UseDataSetDataStoreOrCtor;
    public static string InMemorySet_AddRelation;
    public static string InMemorySet_InvalidTypeString;
    public static string InMemorySet_XMLException_SchemaNodeNotFound;
    public static string InMemorySet_XMLException_ElementNodeNotFound;
    public static string InMemorySet_XMLException_NotDataSetNode;
    public static string InMemorySet_XMLException_ComplexTypeNodeNotFound;
    public static string InMemorySet_XMLException_choiceNodeNotFound;
    public static string InMemorySet_XMLException_TableNameIsNotSpecified;
    public static string InMemorySet_XMLException_XScomplexTypeExpected;
    public static string InMemorySet_XMLException_XSsequenceExpected;
    public static string InMemorySet_XMLException_ColumnNameIsNotSpecified;
    public static string InMemorySet_XMLException_XSsimpleTypeExpected;
    public static string InMemorySet_XMLException_XSrestrictionExpected;
    public static string InMemorySet_XMLException_InvalidBaseAttributeValue;
    public static string InMemorySet_XMLException_InvalidValueAttributeValue;
    public static string InMemorySet_XMLException_XSlengthExpected;
    public static string InMemorySet_XMLException_InvalidColumnTypeDeclaration;
    public static string InMemorySet_XMLException_DataTypeAttributeNotFound;
    public static string InMemorySet_XMLException_CantGetColumnType;
    public static string InMemorySet_XMLException_NameAttributeExpected;
    public static string InMemorySet_XMLException_XSselectorNodeExpected;
    public static string InMemorySet_XMLException_XpathAttributeExpected;
    public static string InMemorySet_XMLException_XpathAttributeWrongFormat;
    public static string InMemorySet_XMLException_TableNotDeclared;
    public static string InMemorySet_XMLException_ReferAttributeExpected;
    public static string InMemorySet_XMLException_ReferNotFound;
    public static string InMemorySet_XMLException_NullPrimaryColumns;
    public static string InMemorySet_XMLException_InconsistentForeignKeyCount;
    public static string InMemorySet_XMLException_CantRestoreObjectFromXML;
    public static string InMemorySet_CantUpdateRelationColumn;
    public static string InMemorySet_WrongInitData;
    public static string InMemorySet_InsertingDataIntoAutoincrementColumn;
    public static string InMemorySet_InEditMode;
    public static string InMemorySet_ColumnNotFound;
    public static string InMemorySet_WrongCommitInfo;
    public static string InMemorySet_WrongRollbackInfo;
    public static string InMemorySet_NullDefaultValueNotAllowed;
    public static string InMemorySet_NotLoadingMode;
    public static string InMemorySet_UniqueIndex;
    public static string InMemorySet_WrongDictionaryIndex;
    public static string InMemorySet_DifferentTypes;
    public static string InMemorySet_ConstraintConflict;
    public static string InMemorySet_DifferentComplexSet;
    public static string InMemorySet_AliasNotFound;
    public static string InMemorySet_OperationNotAllowed;
    public static string InTransactionLoader_NotInSelectDataMode;
    public static string InTransactionLoader_ProcessReturnResultError;
    public static string Loader_ReloadError;
    public static string Loader_InternalErrorOrUnsupportedReferenceStructure;
    public static string MetaData_IncorrectPath;
    public static string MetaData_IncorrectPathMemberNotExists;
    public static string MetaData_IncorrectPathNonPersistentMember;
    public static string MetaData_IncorrectPathNonReferenceMember;
    public static string MetaData_KeyPropertyAbsent;
    public static string MetaData_DuplicateKeyProperty;
    public static string MetaData_CannotResolveClassInfo;
    public static string MetaData_XMLLoadError;
    public static string MetaData_XMLLoadErrorCannotFindClassinfoType;
    public static string MetaData_XMLLoadErrorCannotFindConstructor;
    public static string MetaData_XMLLoadErrorModelTagAbsent;
    public static string MetaData_XMLLoadErrorCannotResolveClassinfoInstanceType;
    public static string MetaData_XMLLoadErrorCannotLoadMember;
    public static string MetaData_XMLLoadErrorUnknownAttribute;
    public static string MetaData_PropertyTypeMismatch;
    public static string MetaData_PropertyMissing;
    public static string MetaData_AssociationElementTypeMissing;
    public static string MetaData_RequiredAttributeMissing;
    public static string MetaData_NonPersistentReferenceFound;
    public static string MetaData_PersistentReferenceFound;
    public static string MetaData_SessionCtorAbsent;
    public static string MetaData_ReferenceTooComplex;
    public static string Metadata_SameTableName;
    public static string Metadata_CustomProperties_PersistentAndNonStorableType;
    public static string Metadata_CustomProperties_ReferenceOrCollectionInSessionStore;
    public static string Metadata_CantPersistGenericType;
    public static string Metadata_DictionaryMixing;
    public static string Metadata_SeveralClassesWithSameName;
    public static string Metadata_PersistentAliasCircular;
    public static string Metadata_AssociationInvalid_AssociationAttributeOnlyForListOrReference;
    public static string Metadata_AssociationInvalid_MoreThenOneAssociatedMemberFound;
    public static string Metadata_AssociationInvalid_NoAssociationListInAssociation;
    public static string Metadata_AssociationInvalid_TwoAssociationListsInAssociation;
    public static string Metadata_AssociationInvalid_UseAssociationNameAsIntermediateTableNameMismatch;
    public static string Metadata_AssociationInvalid_PropertyTypeMismatch;
    public static string Metadata_AssociationInvalid_NotFound;
    public static string Metadata_AssociationInvalid_NonPersistentClassInTheAssociation;
    public static string Metadata_NullSessionProvider;
    public static string Metadata_DuplicateMappingField;
    public static string Metadata_NonpesistentKey;
    public static string Metadata_ConverterOnKeyOrReference;
    public static string Metadata_NotCollection;
    public static string Metadata_ClassAttributeExclusive;
    public static string Metadata_MemberAttributeExclusive;
    public static string Metadata_AssociationListExpected;
    public static string Metadata_TypeNotFound;
    public static string Metadata_SuppressSuspiciousMemberInheritanceCheckError;
    public static string Metadata_WrongObjectType;
    public static string MetaData_PropertyIsDuplicatedInIndexDeclaration;
    public static string Metadata_AmbiguousClassName;
    public static string Metadata_YouCannotApplyTheMapInheritanceParentTable;
    public static string Metadata_NullableAttributeNotApplicable;
    public static string Metadata_FetchOnlyAttributeNotApplicable;
    public static string Metadata_FetchOnlyAttributeNotApplicableToReference;
    public static string MsSql_RootIsNotInsertStatement;
    public static string NestedSession_NotClonable;
    public static string Object_ReferencePropertyViaCollectionAccessor;
    public static string Object_CorrectPIinUOW;
    public static string Object_PersistentOrThis;
    public static string Object_DelayedPropertyContainerCannotBeAssigned;
    public static string Object_EmptyMemberInstance;
    public static string Object_NullInstance;
    public static string Object_DelayedPropertyDoesNotContainProperObject;
    public static string ObjectLayer_MemberNotFound;
    public static string ObjectLayer_XPClassInfoNotFound;
    public static string Paging_PageSizeShouldBeGreaterThanZero;
    public static string Paging_CurrentPageShouldBeGreaterOrEqualZero;
    public static string Paging_CurrentPageShouldBeLessThanPageCount;
    public static string Paging_EnumeratorPositioning;
    public static string Paging_EnumeratorObjectModifiedOrDeleted;
    public static string PersistentAliasExpander_ReferenceOrCollectionExpectedInTheMiddleOfThePath;
    public static string PersistentAliasExpander_NonPersistentCriteria;
    public static string PersistentAliasExpander_NonPersistentCriteriaThisValueMember;
    public static string Security_TheCommitOperationWasProhibitedByTheRules;
    public static string Security_SavingAnObjectWasProhibitedByTheRulesX0;
    public static string Security_SavingThePropertyWasProhibitedByTheRulesX0X1;
    public static string Security_DeletingAnObjectWasProhibitedByTheRulesX0;
    public static string Security_ICommandChannel_TransferringRequestsIsProhibited;
    public static string SerializableObjectLayer_OptimisticLockFieldNotExists;
    public static string SerializableObjectLayer_OptimisticLockFieldInDLNotExists;
    public static string SerializableObjectLayer_OLDoesNotImplementptISerializableObjectLayerEx;
    public static string SerOLHelpers_NestedParentMapIsNull;
    public static string ServerModeGridSource_WrongTopLevelAggregate;
    public static string ServerModeGridSource_SummaryItemTypeNotSupported;
    public static string ServerModeGridSource_GroupAndAddOrRemoveIsNotAllwed;
    public static string Session_TypeNotFound;
    public static string Session_TypeFieldIsEmpty;
    public static string Session_ObjectCannotBePurged;
    public static string Session_WrongConnectionString;
    public static string Session_CannotReloadPurgedObject;
    public static string Session_SessionMixing;
    public static string Session_CannotAddObjectToObjectCache;
    public static string Session_TranSequenceBegin;
    public static string Session_TranSequenceCommit;
    public static string Session_TranSequenceRollback;
    public static string Session_CannotLoadInvalidType;
    public static string Session_CannotChangePropertyWhenSessionIsConnected;
    public static string Session_DifferentObjectsWithSameKey;
    public static string Session_IncompatibleIdType;
    public static string Session_AlreadyConnected;
    public static string Session_AssociationCollectionWithDisabledLoading;
    public static string Session_LengthsOfTheCollectionsAreDifferentInArgs;
    public static string Session_InternalXPOError;
    public static string Session_UnexpectedState;
    public static string Session_UnexpectedPersistentCriteriaEvaluationBehavior;
    public static string Session_ObjectModificationIsNotAllowed;
    public static string Session_AssociationListExpected;
    public static string Session_NotClassMember;
    public static string Session_EnteringTheX0StateFromTheX1StateIsProhibit;
    public static string Session_MostProbablyYouAreTryingToInitiateAnObject;
    public static string Session_MostProbablyYouAreTryingToInitiateAnObjectEx;
    public static string Session_CrossThreadFailureDetected;
    public static string Session_DictConstractor;
    public static string ThreadSafeDataLayer_DictionaryModified;
    public static string View_AtLeastOneFetchProperptyShouldBeDefined;
    public static string View_PropertyNotFetched;
    public static string View_View_IsInLoading;
    public static string XpoDefault_CannotAssignPropertyWhileAnotherIsNotNull;
    public static string XPWeakReference_SavedObjectExpected;
    public static string DroneDataStore_CommitNotSupported;
    public static string LinqToXpo_X0OperatorAfterSkipOrTakeIsNotSupported;
    public static string LinqToXpo_X0OverGroupingIsNotSupported;
    public static string LinqToXpo_X0WithSoManyParametersIsNotSupported;
    public static string LinqToXpo_SkipOperationIsNotSupportedWithoutSorting;
    public static string LinqToXpo_ElemAtOperationIsNotSupportedWithoutSorting;
    public static string LinqToXpo_SequenceContainsNoMatchingElement;
    public static string LinqToXpo_SequenceContainsMoreThanOneElement;
    public static string LinqToXpo_ComplexDataSelectionIsNotSupportedPerhapsY;
    public static string LinqToXpo_X0WithSkipOrTakeOrGroupingIsNotSupported;
    public static string LinqToXpo_IncorrectDeclaringTypeX0InTheMethodCallQue;
    public static string LinqToXpo_ExpressionX0IsNotSupportedInX1;
    public static string LinqToXpo_ExpressionX0IsNotSupported;
    public static string LinqToXpo_MethodX0ForX1IsNotSupported;
    public static string LinqToXpo_SpecifiedJoinKeySelectorsNotCompatibleX0X1;
    public static string LinqToXpo_TheJoinWithManyTablesSimultaneouslyInASing;
    public static string LinqToXpo_DoesnTSupportNestedJoinsWithLevel;
    public static string LinqToXpo_TheDeclaringTypeAssemblyNamePropertyIsEmpt;
    public static string LinqToXpo_TheDeclaringTypeNamePropertyIsEmpty;
    public static string LinqToXpo_SessionIsNull;
    public static string LinqToXpo_QueryWithAppliedTheSkipOrTheTakeOperations;
    public static string LinqToXpo_SortingIsNotSupportedForSelectManyOperatio;
    public static string LinqToXpo_CurrentExpressionWithX0IsNotSupported;
    public static string LinqToXpo_GroupingWithACustomComparerIsNotSupported;
    public static string LinqToXpo_TheLambdaExpressionWithSuchParametersIsNot;
    public static string LinqToXpo_LambdaExpressionIsExpectedX0;
    public static string LinqToXpo_TheCallExpressionIsExpectedX0;
    public static string LinqToXpo_TheCallExpressionReturnTypeX0;
    public static string LinqToXpo_TheCallExpressionGenericReturnTypeX0;
    public static string LinqToXpo_TheCallExpressionXPQueryX0;
    public static string LinqToXpo_TheX0MethodIsNotSupported;
    public static string LinqToXpo_CachedExpressionIsIncompatible;
    public static string VistaDB_UpdatingSchemaIsForbiddenWhileExplicitTran;
    public static string SqlConnectionProvider_CannotCreateAColumnForTheX0FieldWithTheX1D;
    public static string ASE_CommandNotAllowedWithinMultiStatementTransaction;
    public static string ServiceCollectionExtensions_ConnectionPoolCannotBeUsed;
    public static string ServiceCollectionExtensions_ConnectionStringEmpty;
    public static string ServiceCollectionExtensions_EntityTypesEmpty;
    public static string ServiceCollectionExtensions_NoConstructor;
    public static string Postgresql_LegacyGuidDetected;
    public static string Postgresql_CommandPoolNotSupported;
    public static string XPBindingSource_BadClassInfo_DataSource;
    public static string XPBindingSource_BadClassInfo_DataSourceDictionary;
    public static string XPBindingSource_BadClassInfo_Dictionary;
    public static string XPBindingSource_BadObjectType_DataSource;
    public static string XpoDefault_CustomGuidGenerationHandlerCannotBeNull;
    public static string CustomAggregate_NotFound;
    public static string CustomAggregate_DoesNotImplementInterface;
    public static string WebApi_ICacheToCacheCommunicationCore_NotImplemented;
    public static string ImageValueConverter_NotPresent;
    public static string XpoServerMode_NonPersistentIsNotSupported;
    public static string JsonConverter_UnexpectedToken;
    public static string JsonConverter_CouldNotResolvePropertyType;
    public static string JsonConverter_CouldNotAssignPropertyValue;
    public static string JsonConverter_CouldNotFindAppropriateConstructor;
    public static string JsonConverter_ODataType_Mismatch;
    public static string CreateCollection_InvalidCastException;
    public static string CollectClassInfos_CouldNotLoadAssembly;
    public static string InitOperator_DeserializationProhibitedDueSecurityIssue;
    private static Res GetLoader();
    public static string GetString(CultureInfo culture, string name);
    public static string GetString(CultureInfo culture, string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Object[] args);
}
public class DevExpress.Xpo.ResolveSessionEventArgs : EventArgs {
    private ISessionProvider provider;
    public object Tag;
    public ISessionProvider Session { get; public set; }
    public ISessionProvider get_Session();
    public void set_Session(ISessionProvider value);
}
public class DevExpress.Xpo.ResolveSessionEventHandler : MulticastDelegate {
    public ResolveSessionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResolveSessionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResolveSessionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.SchemaInitEventArgs : EventArgs {
    private XPClassInfo table;
    private IDbCommand command;
    public XPClassInfo Table { get; }
    public IDbCommand Command { get; }
    public SchemaInitEventArgs(XPClassInfo table, IDbCommand command);
    public XPClassInfo get_Table();
    public IDbCommand get_Command();
}
public class DevExpress.Xpo.SchemaInitEventHandler : MulticastDelegate {
    public SchemaInitEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SchemaInitEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SchemaInitEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.SecurityContext : object {
    private object customContext;
    private IGenericSecurityRule genericSecurityRule;
    private ISecurityRuleProvider securityRuleProvider;
    private Session nestedSession;
    private SessionObjectLayer parentObjectLayer;
    private Dictionary`2<ExpressionEvaluatorCacheItem, ExpressionEvaluator> evaluatorDictionary;
    private Dictionary`2<SelectMemberExpressionCacheItem, SelectMemberExpressionCacheItemResult> selectMemberExpressionDictionary;
    private XPDictionary Dictionary { get; }
    public object CustomContext { get; }
    public IGenericSecurityRule GenericSecurityRule { get; }
    public ISecurityRuleProvider SecurityRuleProvider { get; }
    public Session ParentSession { get; }
    public SecurityContext(SessionObjectLayer parentObjectLayer, IGenericSecurityRule genericSecurityRule, ISecurityRuleProvider securityRuleProvide, object customContext);
    public SecurityContext(SessionObjectLayer parentObjectLayer, IGenericSecurityRule genericSecurityRule, ISecurityRuleProvider securityRuleProvide, object customContext, Session nestedSession);
    private XPDictionary get_Dictionary();
    public object get_CustomContext();
    public IGenericSecurityRule get_GenericSecurityRule();
    public ISecurityRuleProvider get_SecurityRuleProvider();
    public Session get_ParentSession();
    public ExpressionEvaluator GetEvaluator(XPClassInfo classInfo, CriteriaOperator criteria);
    public CriteriaOperator ParseCriteria(string expressionString, OperandValue[]& criteriaParameterList);
    public CriteriaOperator ParseCriteria(string expressionString, Object[] parameters);
    public CriteriaOperator ParseCriteriaOnParentSession(string expressionString, OperandValue[]& criteriaParameterList);
    public CriteriaOperator ParseCriteriaOnParentSession(string expressionString, Object[] parameters);
    public object Evaluate(XPClassInfo classInfo, CriteriaOperator expression, object theObject);
    public bool Fit(XPClassInfo classInfo, CriteriaOperator criteria, object theObject);
    public object EvaluateOnParentSession(XPClassInfo classInfo, CriteriaOperator expression, CriteriaOperator criteria);
    public CriteriaOperator ExpandToLogical(XPClassInfo classInfo, CriteriaOperator op);
    public CriteriaOperator ExpandToValue(XPClassInfo classInfo, CriteriaOperator op);
    public CriteriaOperator Expand(XPClassInfo classInfo, CriteriaOperator op);
    public XPClassInfo GetClassInfo(object theObject);
    public SecurityContext Clone(Session nestedSession);
    public bool IsObjectMarkedDeleted(object theObject);
    public static bool IsSystemProperty(XPMemberInfo mi);
    public static bool IsSystemClass(XPClassInfo ci);
    public bool GetSelectMemberExpression(ISecurityRule rule, XPClassInfo ci, XPMemberInfo mi, CriteriaOperator& memberExpression);
    public bool GetSelectMemberExpression(ISecurityRule2 rule, XPClassInfo ci, XPMemberInfo mi, CriteriaOperator& memberExpression);
    public bool GetSelectMemberExpression(XPClassInfo ci, XPMemberInfo mi, CriteriaOperator& memberExpression);
    public object GetValueBySecurityRule(object source, XPMemberInfo mi);
    public static String[] FindDelayedProperties(XPClassInfo classInfo, CriteriaOperator expression, Boolean& hasJoinOperand);
}
public class DevExpress.Xpo.SecurityContextValidateItem : ValueType {
    public XPClassInfo ClassInfo;
    public object TheObject;
    public object RealObject;
    internal SecurityContextValidateItem(XPClassInfo classInfo, object theObject, object realObject);
}
public class DevExpress.Xpo.SecurityCriteriaBuilder : ClientCriteriaVisitorBase {
    private XPClassInfo currentState;
    private SecurityContext securityContext;
    private Stack`1<XPClassInfo> stateStack;
    private SecurityExpressionCleaner securityExpressionCleaner;
    private bool memberGranted;
    public SecurityCriteriaBuilder(XPClassInfo currentClassInfo, SecurityContext securityContext);
    public static CriteriaOperator Patch(XPClassInfo currentClassInfo, SecurityContext securityContext, CriteriaOperator criteria);
    protected CriteriaOperator Process(CriteriaOperator input);
    protected virtual CriteriaOperator Visit(OperandValue theOperand);
    private CriteriaOperator TryAccept(CriteriaOperator criteriaOperator);
    protected virtual CriteriaOperator Visit(BinaryOperator theOperator);
    protected virtual CriteriaOperator Visit(UnaryOperator theOperator);
    protected virtual CriteriaOperator Visit(JoinOperand theOperand);
    protected virtual CriteriaOperator Visit(BetweenOperator theOperator);
    protected virtual CriteriaOperator Visit(FunctionOperator theOperator);
    protected virtual CriteriaOperator Visit(InOperator theOperator);
    protected virtual CriteriaOperator Visit(GroupOperator theOperator);
    protected virtual CriteriaOperator Visit(OperandProperty theOperand);
    protected virtual CriteriaOperator Visit(AggregateOperand theOperand, bool processCollectionProperty);
    private sealed virtual override CriteriaOperator DevExpress.Xpo.ISecurityCriteriaPatcher.Process(CriteriaOperator input);
    [CompilerGeneratedAttribute]
private CriteriaOperator <Visit>b__12_0(CriteriaOperator t);
}
public class DevExpress.Xpo.SecurityCriteriaPatcher : ClientCriteriaVisitorBase {
    private XPClassInfo currentState;
    private SecurityContext securityContext;
    private XPClassInfo classInfo;
    private Stack`1<XPClassInfo> stateStack;
    private SecurityExpressionCleaner securityExpressionCleaner;
    public SecurityCriteriaPatcher(XPClassInfo currentClassInfo, SecurityContext securityContext);
    private SecurityExpressionCleaner GetSecurityExpressionCleaner();
    public static CriteriaOperator Patch(XPClassInfo currentClassInfo, SecurityContext securityContext, CriteriaOperator criteria);
    private sealed virtual override CriteriaOperator DevExpress.Xpo.ISecurityCriteriaPatcher.Process(CriteriaOperator input);
    protected virtual CriteriaOperator Visit(JoinOperand theOperand);
    protected virtual CriteriaOperator Visit(OperandProperty theOperand);
    protected virtual CriteriaOperator Visit(AggregateOperand theOperand, bool processCollectionProperty);
}
public class DevExpress.Xpo.SecurityExpressionCleaner : ClientCriteriaVisitorBase {
    private CriteriaOperator baseFilterCriteria;
    public SecurityExpressionCleaner(CriteriaOperator baseFilterCriteria);
    public static CriteriaOperator Clean(CriteriaOperator baseFilterCriteria, CriteriaOperator securityExpression);
    public CriteriaOperator Clean(CriteriaOperator securityExpression);
    protected virtual CriteriaOperator Visit(FunctionOperator theOperator);
}
public class DevExpress.Xpo.SecurityOneRuleProvider : object {
    private ISecurityRule rule;
    public SecurityOneRuleProvider(ISecurityRule rule);
    public sealed virtual ISecurityRule GetRule(XPClassInfo classInfo);
}
public class DevExpress.Xpo.SecurityRuleDictionary : CustomMultiKeyDictionaryCollection`2<XPClassInfo, ISecurityRule> {
    public SecurityRuleDictionary(IEqualityComparer`1<XPClassInfo> comparer);
    protected virtual XPClassInfo[] GetKey(ISecurityRule item);
    public sealed virtual ISecurityRule GetRule(XPClassInfo classInfo);
}
public class DevExpress.Xpo.SerializableObjectLayer : object {
    private Session parentSession;
    private NestedGuidParentMap map;
    private ICommandChannel nestedCommandChannel;
    private ICommandChannelAsync nestedCommandChannelAsync;
    public bool ThroughCommitMode;
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public Session ParentSession { get; }
    [DescriptionAttribute("Indicates if an object layer can call the SerializableObjectLayer.LoadCollectionObjects method to load collection properties.")]
[BrowsableAttribute("False")]
public bool CanLoadCollectionObjects { get; }
    [DescriptionAttribute("Returns the current SerializableObjectLayer object.")]
[BrowsableAttribute("False")]
public ISerializableObjectLayer ObjectLayer { get; }
    public SerializableObjectLayer(Session parentSession);
    public SerializableObjectLayer(Session parentSession, bool throughCommitMode);
    public Session get_ParentSession();
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> LoadObjects(XPDictionaryStub dictionary, ObjectStubsQuery[] queries);
    public sealed virtual CommitObjectStubsResult[] CommitObjects(XPDictionaryStub dictionary, XPObjectStubCollection objectsForDelete, XPObjectStubCollection objectsForSave, LockingOption lockingOption);
    private void Commit(XPObjectClassInfoStubCache ciCache, XPObjectStubCollection objectsForDelete, XPObjectStubCollection objectsForSave, XPClassInfo[] classInfoForDelete, XPClassInfo[] classInfoForSave);
    public sealed virtual void CreateObjectType(string assemblyName, string typeName);
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection[]> GetObjectsByKey(XPDictionaryStub dictionary, GetObjectStubsByKeyQuery[] queries);
    public sealed virtual Object[][] SelectData(XPDictionaryStub dictionary, ObjectStubsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    protected virtual void SelectingData(XPClassInfo classInfo, CriteriaOperatorCollection& properties, CriteriaOperator& criteria, CriteriaOperatorCollection& groupProperties, CriteriaOperator& groupCriteria, SortingCollection& sorting);
    protected virtual void SelectedData(IList`1<CriteriaOperator> properties, List`1& data);
    protected virtual bool IsAuditEnabled(Session session);
    public sealed virtual bool get_CanLoadCollectionObjects();
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection> LoadCollectionObjects(XPDictionaryStub dictionary, string refPropertyName, XPObjectStub ownerObject);
    protected virtual void ObjectRetrievedFromParentSession(object obj);
    public sealed virtual PurgeResult Purge();
    public sealed virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStub theObject, String[] props);
    public sealed virtual SerializableObjectLayerResult`1<Object[]> LoadDelayedProperties(XPDictionaryStub dictionary, XPObjectStubCollection objects, string property);
    public sealed virtual ISerializableObjectLayer get_ObjectLayer();
    public sealed virtual bool IsParentObjectToSave(XPDictionaryStub dictionary, XPObjectStub theObject);
    public sealed virtual bool IsParentObjectToDelete(XPDictionaryStub dictionary, XPObjectStub theObject);
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToSave();
    public sealed virtual SerializableObjectLayerResult`1<XPObjectStubCollection> GetParentObjectsToDelete();
    public sealed virtual String[] GetParentTouchedClassInfos();
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
}
public class DevExpress.Xpo.SerializableObjectLayerClient : object {
    private ISerializableObjectLayer objectLayer;
    private XPDictionary dictionary;
    private ICommandChannel nestedCommandChannel;
    private ICommandChannelAsync nestedCommandChannelAsync;
    private static object nestedParentGuidMapKeyObject;
    private static object loadedTypesKey;
    private static object staticTypesKey;
    private static object staticCacheKey;
    private Dictionary`2<object, object> staticData;
    [DescriptionAttribute("")]
[BrowsableAttribute("False")]
public ISerializableObjectLayer SerializableObjectLayer { get; }
    [DescriptionAttribute("Indicates if an object layer can call the SerializableObjectLayerClient.LoadCollectionObjects method to load collection properties.")]
[BrowsableAttribute("False")]
public bool CanLoadCollectionObjects { get; }
    [DescriptionAttribute("Indicates if an object layer can call the SerializableObjectLayerClient.LoadCollectionObjectsAsync method to asynchronously load collection properties.")]
[BrowsableAttribute("False")]
public bool CanLoadCollectionObjectsAsynchronously { get; }
    [DescriptionAttribute("Returns the current SerializableObjectLayerClient object.")]
[BrowsableAttribute("False")]
public IObjectLayer ObjectLayer { get; }
    [DescriptionAttribute("Gets an object providing metadata on persistent objects stored in a data store.")]
[BrowsableAttribute("False")]
public XPDictionary Dictionary { get; }
    [DescriptionAttribute("Returns an AutoCreateOption value associated with the current object layer.")]
[BrowsableAttribute("False")]
public AutoCreateOption AutoCreateOption { get; }
    [DescriptionAttribute("Provides access to the current object layer’s IDbConnection object that is used to access a database.")]
[BrowsableAttribute("False")]
public IDbConnection Connection { get; }
    [DescriptionAttribute("Provides access to the current object layer’s data access layer which is used to access a data store.")]
[BrowsableAttribute("False")]
public IDataLayer DataLayer { get; }
    private ISecuredPropertyAccessor DevExpress.Xpo.Infrastructure.IInfrastructure<DevExpress.Xpo.ISecuredPropertyAccessor>.Instance { get; }
    public SerializableObjectLayerClient(ISerializableObjectLayer objectLayer);
    public SerializableObjectLayerClient(ISerializableObjectLayer objectLayer, XPDictionary dictionary);
    private static SerializableObjectLayerClient();
    public ISerializableObjectLayer get_SerializableObjectLayer();
    internal static NestedParentGuidMap GetNestedParentGuidMap(Session session);
    public sealed virtual ICollection[] LoadObjects(Session session, ObjectsQuery[] queries);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SerializableObjectLayerClient/<LoadObjectsAsync>d__11")]
public sealed virtual Task`1<ICollection[]> LoadObjectsAsync(Session session, ObjectsQuery[] queries, CancellationToken cancellationToken);
    public sealed virtual object LoadObjectsAsync(Session session, ObjectsQuery[] queries, AsyncLoadObjectsCallback callback);
    public sealed virtual List`1<Object[]> SelectData(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SerializableObjectLayerClient/<SelectDataAsync>d__14")]
public sealed virtual Task`1<List`1<Object[]>> SelectDataAsync(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, CancellationToken cancellationToken);
    private static void PrepareSelectDataResult(XPClassInfo classInfo, CriteriaOperatorCollection properties, Object[][] result);
    private static CriteriaOperatorCollection PrepareProperties(Session session, CriteriaOperatorCollection properties, XPObjectClassInfoStubCache classInfoCache, NestedParentGuidMap map);
    public sealed virtual object SelectDataAsync(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, AsyncSelectDataCallback callback);
    public sealed virtual ICollection[] GetObjectsByKey(Session session, ObjectsByKeyQuery[] queries);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SerializableObjectLayerClient/<GetObjectsByKeyAsync>d__19")]
public sealed virtual Task`1<ICollection[]> GetObjectsByKeyAsync(Session session, ObjectsByKeyQuery[] queries, CancellationToken cancellationToken);
    private ICollection FilterListForDelete(Session session, NestedParentGuidMap map, ICollection fullListForDelete);
    public sealed virtual void CommitChanges(Session session, ICollection fullListForDelete, ICollection completeListForSave);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SerializableObjectLayerClient/<CommitChangesAsync>d__22")]
public sealed virtual Task CommitChangesAsync(Session session, ICollection fullListForDelete, ICollection completeListForSave, CancellationToken cancellationToken);
    public sealed virtual object CommitChangesAsync(Session session, ICollection fullListForDelete, ICollection completeListForSave, AsyncCommitCallback callback);
    public sealed virtual void CreateObjectType(XPObjectType type);
    public sealed virtual Task CreateObjectTypeAsync(XPObjectType type, CancellationToken cancellationToken);
    public sealed virtual PurgeResult Purge();
    public sealed virtual bool get_CanLoadCollectionObjects();
    public sealed virtual bool get_CanLoadCollectionObjectsAsynchronously();
    public sealed virtual Object[] LoadCollectionObjects(Session session, XPMemberInfo refProperty, object ownerObject);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SerializableObjectLayerClient/<LoadCollectionObjectsAsync>d__32")]
public sealed virtual Task`1<Object[]> LoadCollectionObjectsAsync(Session session, XPMemberInfo refProperty, object ownerObject, CancellationToken cancellationToken);
    public sealed virtual IObjectLayer get_ObjectLayer();
    public sealed virtual XPDictionary get_Dictionary();
    public sealed virtual void SetObjectLayerWideObjectTypes(Dictionary`2<XPClassInfo, XPObjectType> loadedTypes);
    public sealed virtual Dictionary`2<XPClassInfo, XPObjectType> GetObjectLayerWideObjectTypes();
    public sealed virtual void RegisterStaticTypes(XPClassInfo[] types);
    public sealed virtual bool IsStaticType(XPClassInfo type);
    public sealed virtual IObjectMap GetStaticCache(XPClassInfo info);
    protected void ClearStaticData();
    private void SetObjectLayerWideData(object key, object data);
    private object GetObjectLayerWideData(object key);
    private Dictionary`2<XPClassInfo, XPClassInfo> GetStaticTypesDictionary();
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public sealed virtual Object[] LoadDelayedProperties(Session session, object theObject, MemberPathCollection props);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SerializableObjectLayerClient/<LoadDelayedPropertiesAsync>d__54")]
public sealed virtual Task`1<Object[]> LoadDelayedPropertiesAsync(Session session, object theObject, MemberPathCollection props, CancellationToken cancellationToken);
    public sealed virtual ObjectDictionary`1<object> LoadDelayedProperties(Session session, IList objects, XPMemberInfo property);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SerializableObjectLayerClient/<LoadDelayedPropertiesAsync>d__56")]
public sealed virtual Task`1<ObjectDictionary`1<object>> LoadDelayedPropertiesAsync(Session session, IList objects, XPMemberInfo property, CancellationToken cancellationToken);
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public sealed virtual void add_SchemaInit(SchemaInitEventHandler value);
    public sealed virtual void remove_SchemaInit(SchemaInitEventHandler value);
    public sealed virtual IDbConnection get_Connection();
    public sealed virtual IDataLayer get_DataLayer();
    public sealed virtual bool IsParentObjectToSave(Session session, object theObject);
    public sealed virtual bool IsParentObjectToDelete(Session session, object theObject);
    public sealed virtual ICollection GetParentObjectsToSave(Session session);
    public sealed virtual ICollection GetParentObjectsToDelete(Session session);
    public sealed virtual ICollection GetParentTouchedClassInfos(Session session);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
    private sealed virtual override ISecuredPropertyAccessor DevExpress.Xpo.Infrastructure.IInfrastructure<DevExpress.Xpo.ISecuredPropertyAccessor>.get_Instance();
}
public class DevExpress.Xpo.SerializableObjectLayerResult`1 : object {
    public XPDictionaryStub Dictionary;
    public T Result;
    public SerializableObjectLayerResult`1(XPDictionaryStub dictionary, T result);
}
public enum DevExpress.Xpo.ServerExceptionThrownAction : Enum {
    public int value__;
    public static ServerExceptionThrownAction Skip;
    public static ServerExceptionThrownAction Rethrow;
}
public class DevExpress.Xpo.ServerExceptionThrownEventArgs : EventArgs {
    private Exception _Exception;
    private ServerExceptionThrownAction _Action;
    public ServerExceptionThrownAction Action { get; public set; }
    public Exception Exception { get; }
    public ServerExceptionThrownEventArgs(Exception exception, ServerExceptionThrownAction action);
    public ServerExceptionThrownEventArgs(Exception exception);
    public ServerExceptionThrownAction get_Action();
    public void set_Action(ServerExceptionThrownAction value);
    public Exception get_Exception();
}
public class DevExpress.Xpo.ServerExceptionThrownEventHandler : MulticastDelegate {
    public ServerExceptionThrownEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ServerExceptionThrownEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ServerExceptionThrownEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("0")]
[EditorAttribute("DevExpress.Xpo.Design.ServerViewPropertiesCollectionEditor,DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class DevExpress.Xpo.ServerViewPropertiesCollection : CollectionBase {
    private IXPClassInfoProvider owner;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public ServerViewProperty Item { get; }
    public ServerViewProperty Item { get; }
    public ServerViewProperty Item { get; }
    public ServerViewPropertiesCollection(IXPClassInfoProvider owner);
    public void Add(ServerViewProperty property);
    public void AddRange(ServerViewProperty[] properties);
    public void AddRangeAsCopy(IEnumerable properties);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    public ServerViewProperty get_Item(int index);
    public ServerViewProperty get_Item(CriteriaOperator expression);
    public ServerViewProperty get_Item(string name);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void OnItemPropertyChanged(object sender, PropertyChangedEventArgs e);
}
[TypeConverterAttribute("DevExpress.Xpo.ServerViewPropertyConverter")]
public class DevExpress.Xpo.ServerViewProperty : object {
    private string name;
    private SortDirection sorting;
    private CriteriaOperator property;
    private IXPClassInfoProvider owner;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [DescriptionAttribute("Gets or sets the property’s name.")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string Name { get; public set; }
    [DescriptionAttribute("Gets or sets the sort order for the property values to be retrieved from the data server.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public SortDirection Sorting { get; public set; }
    [DescriptionAttribute("Gets or sets the criteria to calculate property values.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[EditorAttribute("DevExpress.Xpo.Design.XPViewExpressionEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("Data")]
public CriteriaOperator Property { get; public set; }
    public ServerViewProperty(string name, string property);
    public ServerViewProperty(string name, SortDirection sorting, CriteriaOperator property);
    public ServerViewProperty(string name, SortDirection sorting, string property);
    protected internal void SetOwner(IXPClassInfoProvider owner);
    public string get_Name();
    public void set_Name(string value);
    public SortDirection get_Sorting();
    public void set_Sorting(SortDirection value);
    public CriteriaOperator get_Property();
    public void set_Property(CriteriaOperator value);
    private bool ShouldSerializeProperty();
    private sealed virtual override IDataColumnInfo DevExpress.Data.IDataColumnInfoProvider.GetInfo(object arguments);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
internal class DevExpress.Xpo.ServerViewPropertyConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destinationType);
}
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DesignerAttribute("DevExpress.Xpo.Design.SessionDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
[DefaultPropertyAttribute("Connection")]
[DefaultEventAttribute("SchemaInit")]
[DescriptionAttribute("Loads and saves persistent objects.")]
public class DevExpress.Xpo.Session : Component {
    private Nullable`1<bool> trackPropertiesModifications;
    public static string LogCategory;
    public static string LogParam_SessionType;
    public static string LogParam_SessionID;
    public static string LogParam_ClassInfo;
    public static string LogParam_Expression;
    public static string LogParam_Criteria;
    public static string LogParam_InTransaction;
    public static string LogParam_Condition;
    public static string LogParam_Sorting;
    public static string LogParam_SkipSelectedRecords;
    public static string LogParam_TopSelectedRecords;
    public static string LogParam_SelectDeleted;
    public static string LogParam_TheObject;
    public static string LogParam_Props;
    public static string LogParam_Objects;
    public static string LogParam_Property;
    public static string LogParam_ObjectID;
    public static string LogParam_AlwaysGetFromDataStore;
    public static string LogParam_CriteriaEvaluationBehavior;
    public static string LogParam_Members;
    public static string LogParam_SprocName;
    public static string LogParam_Parameters;
    public static string LogParam_Sql;
    public static string LogParam_GroupProps;
    public static string LogParam_GroupCriteria;
    public static string LogParam_IsInTransactionMode;
    internal SessionState _StateStack;
    private Thread _ThreadWatch;
    private int _AsyncOperationIdWatch;
    internal SemaphoreSlim _AsyncLockSemaphore;
    private IDbConnection _connection;
    private bool closeConnectionOnDisconnect;
    private IdentityMapBehavior _IdentityMapBehavior;
    private Nullable`1<bool> caseSensitive;
    private string _connectionString;
    private IDisposable[] _DisposeOnDisconnect;
    private AutoCreateOption _autoCreateOption;
    private LockingOption _lockingOption;
    private OptimisticLockingReadBehavior _OptimisticLockingReadBehavior;
    private bool trackingChanges;
    private IServiceProvider serviceProvider;
    private static bool inTransactionMode;
    private XPObjectTypesManager typesManager;
    private IObjectLayer objectLayer;
    internal SessionIdentityMap _IdentityMap;
    private AsyncExecuteQueue asyncExecuteQueue;
    private static bool _SuppressThrowingAssociationCollectionWithDisabledLoading;
    private ObjectSet objectsMarkedSaved;
    private ObjectSet objectsMarkedDeleted;
    internal Dictionary`2<XPRefCollectionHelper, object> collectionsMarkedSaved;
    protected XPDictionary dict;
    private bool isDisposed;
    private Nullable`1<bool> isObjectModifiedOnNonPersistentPropertyChange;
    private IDictionary props;
    private Dictionary`2<object, object> wideDataDictionary;
    [CompilerGeneratedAttribute]
private ObjectManipulationEventHandler ObjectSaving;
    [CompilerGeneratedAttribute]
private ObjectManipulationEventHandler ObjectSaved;
    [CompilerGeneratedAttribute]
private ObjectManipulationEventHandler ObjectLoading;
    [CompilerGeneratedAttribute]
private ObjectManipulationEventHandler ObjectLoaded;
    [CompilerGeneratedAttribute]
private ObjectManipulationEventHandler ObjectDeleting;
    [CompilerGeneratedAttribute]
private ObjectManipulationEventHandler ObjectDeleted;
    [CompilerGeneratedAttribute]
private ObjectChangeEventHandler ObjectChanged;
    [CompilerGeneratedAttribute]
private ObjectsManipulationEventHandler ObjectsSaved;
    [CompilerGeneratedAttribute]
private ObjectsManipulationEventHandler ObjectsLoaded;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforeConnect;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterConnect;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforeDisconnect;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterDisconnect;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforeBeginTransaction;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterBeginTransaction;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforePreProcessCommitedList;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforeCommitTransaction;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterCommitTransaction;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforeCommitNestedUnitOfWork;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterCommitNestedUnitOfWork;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforeRollbackTransaction;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterRollbackTransaction;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforeBeginTrackingChanges;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterBeginTrackingChanges;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforeFlushChanges;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterFlushChanges;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler BeforeDropChanges;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterDropChanges;
    [CompilerGeneratedAttribute]
private SessionOperationFailEventHandler FailedCommitTransaction;
    [CompilerGeneratedAttribute]
private SessionOperationFailEventHandler FailedFlushChanges;
    [CompilerGeneratedAttribute]
private SessionManipulationEventHandler AfterDropIdentityMap;
    private static int seq;
    private int seqNum;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static bool GlobalSuppressExceptionOnReferredObjectAbsentInDataStore;
    private Nullable`1<bool> _isDesignMode;
    private IDictionary`2<XPBaseCollection, object> mutedCollections;
    [DescriptionAttribute("Enables the mode in which querying a data store for objects includes all in-memory changes into query results.")]
public static bool InTransactionMode { get; public set; }
    protected bool IsInTransactionMode { get; }
    [DescriptionAttribute("Gets or sets whether string comparisons evaluated by the session on the client are case-sensitive.")]
[CategoryAttribute("Options")]
public bool CaseSensitive { get; public set; }
    [DescriptionAttribute("Specifies whether or not the current Session tracks persistent object property modifications.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool TrackPropertiesModifications { get; public set; }
    internal AsyncExecuteQueue AsyncExecuteQueue { get; }
    [BrowsableAttribute("False")]
public bool IsObjectsLoading { get; }
    [BrowsableAttribute("False")]
public bool IsObjectsSaving { get; }
    [DescriptionAttribute("Specifies whether exceptions are thrown when committing changes in a collection whose XPBaseCollection.LoadingEnabled property is set to false.")]
[ObsoleteAttribute("Using that property will suppress detection of some potential problems with associated collections. Use it at your own risk.")]
public static bool SuppressThrowingAssociationCollectionWithDisabledLoading { get; public set; }
    [DescriptionAttribute("Specifies whether or not a persistent object is marked modified when its non-persistent property value is changed.")]
[CategoryAttribute("Options")]
public Nullable`1<bool> IsObjectModifiedOnNonPersistentPropertyChange { get; public set; }
    [DescriptionAttribute("Gets the pre-initialized default session for simple applications.")]
public static Session DefaultSession { get; }
    [ObsoleteAttribute("Use SessionIdentityMap.Extract method instead", "True")]
[EditorBrowsableAttribute("1")]
protected SessionIdentityMap Cache { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Please use GetObjectsToSave() instead", "True")]
public ICollection ObjectsSavedInCurrentTransaction { get; }
    [DescriptionAttribute("Gets or sets the action which is performed when the session is connected to a data store.")]
[CategoryAttribute("Data")]
[DefaultValueAttribute]
public AutoCreateOption AutoCreateOption { get; public set; }
    [DescriptionAttribute("Gets or sets an IDbConnection object associated with the session.")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public IDbConnection Connection { get; public set; }
    [DescriptionAttribute("Gets or sets a connection string.")]
[CategoryAttribute("Data")]
public string ConnectionString { get; public set; }
    [DescriptionAttribute("Gets or sets a value which controls the persistent object’s locking during a session.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Options")]
public LockingOption LockingOption { get; public set; }
    [DescriptionAttribute("Gets or sets a value which specifies how XPO behaves when reloading changed objects (objects with different versions).")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Options")]
public OptimisticLockingReadBehavior OptimisticLockingReadBehavior { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ObsoleteAttribute("Use IdentityMapBehavior instead")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public CacheBehavior CacheBehavior { get; public set; }
    [DescriptionAttribute("Gets or sets the session’s Identity Map behavior.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Options")]
public IdentityMapBehavior IdentityMapBehavior { get; public set; }
    private Dictionary`2<object, object> WideDataDictionary { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IObjectLayer ObjectLayer { get; }
    [BrowsableAttribute("False")]
public XPDictionary Dictionary { get; }
    [BrowsableAttribute("False")]
public bool IsConnected { get; }
    [BrowsableAttribute("False")]
public XPObjectTypesManager TypesManager { get; }
    [BrowsableAttribute("False")]
public bool InTransaction { get; }
    [BrowsableAttribute("False")]
public bool TrackingChanges { get; }
    protected internal bool IsUnitOfWork { get; }
    private Session DevExpress.Xpo.Helpers.ISessionProvider.Session { get; }
    protected internal bool SuppressExceptionOnReferredObjectAbsentInDataStore { get; }
    internal bool IsDesignMode { get; }
    private bool IsDesignMode2 { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IDataLayer DataLayer { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IServiceProvider ServiceProvider { get; }
    private IServiceProvider DevExpress.Xpo.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    private ISecuredPropertyAccessor DevExpress.Xpo.Infrastructure.IInfrastructure<DevExpress.Xpo.ISecuredPropertyAccessor>.Instance { get; }
    public Session(IServiceProvider serviceProvider);
    public Session(IContainer container);
    public Session(IServiceProvider serviceProvider, IContainer container);
    public Session(XPDictionary dictionary);
    public Session(IServiceProvider serviceProvider, XPDictionary dictionary);
    public Session(IDataLayer layer, IDisposable[] disposeOnDisconnect);
    public Session(IServiceProvider serviceProvider, IDataLayer layer, IDisposable[] disposeOnDisconnect);
    public Session(IObjectLayer layer, IDisposable[] disposeOnDisconnect);
    public Session(IServiceProvider serviceProvider, IObjectLayer layer, IDisposable[] disposeOnDisconnect);
    internal Thread _ExchangeThreadWatch(Thread newThreadWatchValue);
    internal int _ExchangeAsyncOperationWatch(int newAsyncOperationId);
    protected static XPDictionary CreateDesignTimeDictionary(IServiceProvider provider);
    protected virtual void BeginInit();
    protected virtual void EndInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    public static bool get_InTransactionMode();
    public static void set_InTransactionMode(bool value);
    protected virtual bool get_IsInTransactionMode();
    public sealed virtual bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public bool get_TrackPropertiesModifications();
    public void set_TrackPropertiesModifications(bool value);
    private bool ShouldSerializeCaseSensitive();
    private void ResetCaseSensitive();
    public static void SetAsyncRequestPriority(object asyncResult, AsyncRequestPriority priority);
    public static void CancelAsyncRequest(object asyncResult);
    public static WaitForAsyncOperationResult WaitForAsyncRequestComplete(Session session, object asyncResult);
    public List`1<Object[]> SelectData(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, bool selectDeleted, int topSelectedRecords, SortingCollection sorting);
    public List`1<Object[]> SelectData(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    public Task`1<List`1<Object[]>> SelectDataAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, bool selectDeleted, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    public Task`1<List`1<Object[]>> SelectDataAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    private static ExpandedCriteriaHolder ExpandToLogical(CriteriaOperator criteria, XPClassInfo classInfo, bool doDetectPostProcessing, IPersistentValueExtractor persistentValueExtractor);
    private static ExpandedCriteriaHolder ExpandToValue(CriteriaOperator criteria, XPClassInfo classInfo, bool doDetectPostProcessing, IPersistentValueExtractor persistentValueExtractor);
    private static bool IsNull(object op);
    public List`1<Object[]> SelectData(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int topSelectedRecords, SortingCollection sorting);
    public Task`1<List`1<Object[]>> SelectDataAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    public List`1<Object[]> SelectData(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    public Task`1<List`1<Object[]>> SelectDataAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    public List`1<Object[]> SelectDataInTransaction(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    public Task`1<List`1<Object[]>> SelectDataInTransactionAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    internal virtual List`1<Object[]> SelectDataInternal(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<SelectDataInternalAsync>d__83")]
internal virtual Task`1<List`1<Object[]>> SelectDataInternalAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    internal ObjectsQuery[] PrepareQueries(ObjectsQuery[] queries, bool doDetectPostProcessing, IPersistentValueExtractor persistentValueExtractor);
    private ObjectsQuery PrepareQuery(ObjectsQuery objectsQuery, bool doDetectPostProcessing, IPersistentValueExtractor persistentValueExtractor);
    internal List`1<Object[]> PrepareSelectData(XPClassInfo classInfo, CriteriaOperatorCollection& properties, CriteriaOperator& criteria, CriteriaOperatorCollection& groupProperties, CriteriaOperator& groupCriteria, SortingCollection& sorting, bool doDetectPostProcessing, IPersistentValueExtractor persistentValueExtractor);
    internal static List`1<Object[]> PrepareSelectDataInternal(XPClassInfo classInfo, CriteriaOperatorCollection& properties, CriteriaOperator& criteria, CriteriaOperatorCollection& groupProperties, CriteriaOperator& groupCriteria, SortingCollection& sorting, bool doDetectPostProcessing, IPersistentValueExtractor persistentValueExtractor);
    public object SelectDataAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, AsyncSelectDataCallback callback);
    internal virtual object SelectDataInternalAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, bool selectDeleted, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, AsyncSelectDataCallback callback);
    public object Evaluate(Type objectType, CriteriaOperator expression, CriteriaOperator criteria);
    public Task`1<object> EvaluateAsync(Type objectType, CriteriaOperator expression, CriteriaOperator criteria, CancellationToken cancellationToken);
    public object Evaluate(XPClassInfo classInfo, CriteriaOperator expression, CriteriaOperator criteria);
    public Task`1<object> EvaluateAsync(XPClassInfo classInfo, CriteriaOperator expression, CriteriaOperator criteria, CancellationToken cancellationToken);
    public object EvaluateInTransaction(XPClassInfo classInfo, CriteriaOperator expression, CriteriaOperator criteria);
    public Task`1<object> EvaluateInTransactionAsync(XPClassInfo classInfo, CriteriaOperator expression, CriteriaOperator criteria, CancellationToken cancellationToken);
    private object Evaluate(XPClassInfo classInfo, CriteriaOperator expression, CriteriaOperator criteria, bool inTransaction);
    private Task`1<object> EvaluateAsync(XPClassInfo classInfo, CriteriaOperator expression, CriteriaOperator criteria, bool inTransaction, CancellationToken cancellationToken);
    internal static List`1<Object[]> PrepareEvaluate(XPClassInfo classInfo, CriteriaOperator& expression, CriteriaOperator& criteria, IPersistentValueExtractor extractor, bool caseSensitive);
    public object Evaluate(CriteriaOperator expression, CriteriaOperator criteria);
    public object EvaluateInTransaction(Type objectType, CriteriaOperator expression, CriteriaOperator criteria);
    public Task`1<object> EvaluateInTransactionAsync(Type objectType, CriteriaOperator expression, CriteriaOperator criteria, CancellationToken cancellationToken);
    public object EvaluateInTransaction(CriteriaOperator expression, CriteriaOperator criteria);
    public Task`1<object> EvaluateInTransactionAsync(CriteriaOperator expression, CriteriaOperator criteria, CancellationToken cancellationToken);
    internal AsyncExecuteQueue get_AsyncExecuteQueue();
    internal WaitForAsyncOperationResult WaitForAsyncOperationEnd();
    internal ICollection GetObjects(ObjectsQuery query);
    public virtual ICollection[] GetObjects(ObjectsQuery[] queries);
    internal virtual ICollection[] GetObjectsInternal(ObjectsQuery[] queries);
    public virtual object GetObjectsAsync(ObjectsQuery[] queries, AsyncLoadObjectsCallback callback);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsAsync>d__113")]
internal Task`1<ICollection> GetObjectsAsync(ObjectsQuery query, CancellationToken cancellationToken);
    public virtual Task`1<ICollection[]> GetObjectsAsync(ObjectsQuery[] queries, CancellationToken cancellationToken);
    internal virtual object GetObjectsInternalAsync(ObjectsQuery[] queries, AsyncLoadObjectsCallback callback);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsInternalAsync>d__116")]
internal virtual Task`1<ICollection[]> GetObjectsInternalAsync(ObjectsQuery[] queries, CancellationToken cancellationToken);
    public object GetObjectsAsync(XPClassInfo classInfo, CriteriaOperator criteria, SortingCollection sorting, int topSelectedRecords, bool selectDeleted, bool force, AsyncLoadObjectsCallback callback);
    public object GetObjectsAsync(XPClassInfo classInfo, CriteriaOperator criteria, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, bool selectDeleted, bool force, AsyncLoadObjectsCallback callback);
    public Task`1<ICollection> GetObjectsAsync(XPClassInfo classInfo, CriteriaOperator criteria, SortingCollection sorting, int topSelectedRecords, bool selectDeleted, bool force, CancellationToken cancellationToken);
    public Task`1<ICollection> GetObjectsAsync(XPClassInfo classInfo, CriteriaOperator criteria, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, bool selectDeleted, bool force, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the method's overload with 'bool selectDeleted' parameter instead of 'CollectionCriteriaPatcher collectionCriteriaPatcher'")]
[EditorBrowsableAttribute("1")]
public ICollection GetObjects(XPClassInfo classInfo, CriteriaOperator criteria, SortingCollection sorting, int topSelectedRecords, CollectionCriteriaPatcher collectionCriteriaPatcher, bool force);
    public ICollection GetObjects(XPClassInfo classInfo, CriteriaOperator criteria, SortingCollection sorting, int topSelectedRecords, bool selectDeleted, bool force);
    public ICollection GetObjects(XPClassInfo classInfo, CriteriaOperator criteria, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, bool selectDeleted, bool force);
    [ObsoleteAttribute("Use the method's overload without 'bool caseSensitive' parameter")]
[EditorBrowsableAttribute("1")]
public ICollection GetObjectsInTransaction(XPClassInfo classInfo, CriteriaOperator condition, bool selectDeleted, bool caseSensitive);
    public ICollection GetObjectsInTransaction(XPClassInfo classInfo, CriteriaOperator condition, bool selectDeleted);
    public Task`1<ICollection> GetObjectsInTransactionAsync(XPClassInfo classInfo, CriteriaOperator condition, bool selectDeleted, CancellationToken cancellationToken);
    public ICollection GetObjectsInTransaction(XPClassInfo classInfo, CriteriaOperator condition, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, bool selectDeleted);
    public object GetObjectsInTransactionAsync(XPClassInfo classInfo, CriteriaOperator condition, bool selectDeleted, AsyncLoadObjectsCallback callback);
    public object GetObjectsInTransactionAsync(XPClassInfo classInfo, CriteriaOperator condition, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, bool selectDeleted, AsyncLoadObjectsCallback callback);
    public Task`1<ICollection> GetObjectsInTransactionAsync(XPClassInfo classInfo, CriteriaOperator condition, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, bool selectDeleted, CancellationToken cancellationToken);
    public bool get_IsObjectsLoading();
    public bool get_IsObjectsSaving();
    protected internal virtual Object[] LoadDelayedProperties(object theObject, MemberPathCollection props);
    protected internal virtual ObjectDictionary`1<object> LoadDelayedProperties(IList objects, XPMemberInfo property);
    protected internal virtual Task`1<ObjectDictionary`1<object>> LoadDelayedPropertiesAsync(IList objects, XPMemberInfo property, CancellationToken cancellationToken);
    public void Reload(object theObject);
    public Task ReloadAsync(object theObject, CancellationToken cancellationToken);
    public void Reload(object theObject, bool forceAggregatesReload);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<ReloadAsync>d__141")]
public Task ReloadAsync(object theObject, bool forceAggregatesReload, CancellationToken cancellationToken);
    public static bool get_SuppressThrowingAssociationCollectionWithDisabledLoading();
    public static void set_SuppressThrowingAssociationCollectionWithDisabledLoading(bool value);
    private void PreProcessSavedList();
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<PreProcessSavedListAsync>d__147")]
private Task PreProcessSavedListAsync(CancellationToken cancellationToken);
    private void ProcessingProcessNextObject(ObjectSet markedObjectsHolder, object theObject);
    private void ProcessingProcessObjectListOrCollection(ObjectSet markedObjectsHolder, object theObjectOrCollection);
    private void ProcessingProcess(ObjectSet markedObjectsHolder, object theObject);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<ProcessingProcessAsync>d__151")]
private Task ProcessingProcessAsync(ObjectSet markedObjectsHolder, object theObject, CancellationToken cancellationToken);
    public void Save(object theObject);
    public Task SaveAsync(object theObject, CancellationToken cancellationToken);
    public void Save(ICollection objects);
    private static int NextGCRecordValue();
    private void DeleteObject(object theObject);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<DeleteObjectAsync>d__160")]
private Task DeleteObjectAsync(object theObject, CancellationToken cancellationToken);
    private void DeleteObjectOrCollection(object theObject);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<DeleteObjectOrCollectionAsync>d__162")]
private Task DeleteObjectOrCollectionAsync(object theObject, CancellationToken cancellationToken);
    private void DeleteCore(XPClassInfo classInfo, object theObject);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<DeleteCoreAsync>d__164")]
private Task DeleteCoreAsync(XPClassInfo classInfo, object theObject, CancellationToken cancellationToken);
    private void LoadAggregatedMembers(XPClassInfo classInfo, object theObject);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<LoadAggregatedMembersAsync>d__166")]
private Task LoadAggregatedMembersAsync(XPClassInfo classInfo, object theObject, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<LoadAssociationListAsync>d__167")]
private Task LoadAssociationListAsync(object list, CancellationToken cancellationToken);
    private static void CheckFilteredAggregateDeletion(object theObject, XPMemberInfo mi, XPBaseCollection collection);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void RemoveFromDeleteList(object theObject);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void RemoveFromSaveList(object theObject);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void RemoveFromLists(object theObject);
    public void Delete(object theObject);
    public Task DeleteAsync(object theObject, CancellationToken cancellationToken);
    public void Delete(ICollection objects);
    public Task DeleteAsync(ICollection objects, CancellationToken cancellationToken);
    public PurgeResult PurgeDeletedObjects();
    public static PurgeResult PurgeDeletedObjects(IObjectLayer objectLayer);
    private void InternalBeforeSave(object theObject);
    private Task InternalBeforeSaveAsync(object theObject, CancellationToken cancellationToken);
    internal void CheckDuplicateObjectInIdentityMap(object theObject);
    internal void RegisterInsertedObject(object theObject);
    public void add_SchemaInit(SchemaInitEventHandler value);
    public void remove_SchemaInit(SchemaInitEventHandler value);
    protected virtual void Dispose(bool disposing);
    private void TriggerObjectsSaved(ICollection objects);
    protected virtual void OnObjectsSaved(ObjectsManipulationEventArgs e);
    internal void TriggerObjectsLoaded(ICollection objects);
    protected virtual void OnObjectsLoaded(ObjectsManipulationEventArgs e);
    internal void TriggerObjectSaving(object theObject);
    protected virtual void OnObjectSaving(ObjectManipulationEventArgs e);
    private void TriggerObjectSaved(object theObject);
    protected virtual void OnObjectSaved(ObjectManipulationEventArgs e);
    internal void TriggerObjectLoading(object theObject);
    protected virtual void OnObjectLoading(ObjectManipulationEventArgs e);
    private void TriggerObjectLoaded(object theObject);
    protected virtual void OnObjectLoaded(ObjectManipulationEventArgs e);
    internal void TriggerObjectDeleting(object theObject);
    protected virtual void OnObjectDeleting(ObjectManipulationEventArgs e);
    internal void TriggerObjectDeleted(object theObject);
    protected virtual void OnObjectDeleted(ObjectManipulationEventArgs e);
    protected virtual void OnBeforeConnect();
    protected virtual void OnAfterConnect();
    protected virtual void OnBeforeDisconnect();
    protected virtual void OnAfterDisconnect();
    protected virtual void OnBeforeBeginTransaction();
    protected virtual void OnAfterBeginTransaction();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
protected virtual void OnBeforePreProcessCommitedList();
    protected virtual void OnBeforeCommitTransaction();
    protected virtual void OnAfterCommitTransaction();
    protected internal virtual void OnBeforeCommitNestedUnitOfWork(SessionManipulationEventArgs e);
    protected internal virtual void OnAfterCommitNestedUnitOfWork(SessionManipulationEventArgs e);
    protected virtual void OnBeforeRollbackTransaction();
    protected virtual void OnAfterRollbackTransaction();
    protected virtual void OnBeforeBeginTrackingChanges();
    protected void OnBeforeBeginTrackingChangesInternal();
    protected virtual void OnAfterBeginTrackingChanges();
    protected void OnAfterBeginTrackingChangesInternal();
    protected virtual void OnBeforeFlushChanges();
    protected void OnBeforeFlushChangesInternal();
    protected virtual void OnAfterFlushChanges();
    protected void OnAfterFlushChangesInternal();
    protected virtual void OnBeforeDropChanges();
    protected void OnBeforeDropChangesInternal();
    protected virtual void OnAfterDropChanges();
    protected void OnAfterDropChangesInternal();
    protected virtual bool OnFailedCommitTransaction(Exception ex);
    protected virtual bool OnFailedFlushChanges(Exception ex);
    protected bool OnFailedFlushChangesInternal(Exception ex);
    protected internal void OnAfterDropIdentityMap();
    public Nullable`1<bool> get_IsObjectModifiedOnNonPersistentPropertyChange();
    public void set_IsObjectModifiedOnNonPersistentPropertyChange(Nullable`1<bool> value);
    private bool ShouldSerializeIsObjectModifiedOnNonPersistentPropertyChange();
    [EditorBrowsableAttribute("1")]
public void TriggerObjectChanged(object changedObject, ObjectChangeEventArgs e);
    protected virtual void OnObjectChanged(object changedObject, ObjectChangeEventArgs e);
    public static Session get_DefaultSession();
    protected SessionIdentityMap get_Cache();
    private void SessionInitCommon();
    private void SessionInitDisconnected(XPDictionary dictionary);
    private void SessionInitConnected(IObjectLayer layer, IDisposable[] disposeOnDisconnect);
    public object GetLoadedObjectByKey(Type classType, object id);
    public object GetLoadedObjectByKey(XPClassInfo classInfo, object id);
    public object GetObjectByKey(Type classType, object id);
    public object GetObjectByKey(XPClassInfo classInfo, object id);
    public object GetObjectByKey(Type classType, object id, bool alwaysGetFromDataStore);
    public Task`1<object> GetObjectByKeyAsync(Type classType, object id, CancellationToken cancellationToken);
    public Task`1<object> GetObjectByKeyAsync(XPClassInfo classInfo, object id, CancellationToken cancellationToken);
    public Task`1<object> GetObjectByKeyAsync(Type classType, object id, bool alwaysGetFromDataStore, CancellationToken cancellationToken);
    public ICollection[] GetObjectsByKey(ObjectsByKeyQuery[] queries, bool alwaysGetFromDataStore);
    public Task`1<ICollection[]> GetObjectsByKeyAsync(ObjectsByKeyQuery[] queries, bool alwaysGetFromDataStore, CancellationToken cancellationToken);
    private ObjectsByKeyQuery[] OptimizeGetObjectsByKeyQueries(List`1<ObjectsByKeyQuery> queries);
    public ICollection GetObjectsByKey(XPClassInfo classInfo, ICollection idCollection, bool alwaysGetFromDataStore);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsByKeyAsync>d__269")]
public Task`1<ICollection> GetObjectsByKeyAsync(XPClassInfo classInfo, ICollection idCollection, bool alwaysGetFromDataStore, CancellationToken cancellationToken);
    public object GetObjectByKey(XPClassInfo classInfo, object id, bool alwaysGetFromDataStore);
    public Task`1<object> GetObjectByKeyAsync(XPClassInfo classInfo, object id, bool alwaysGetFromDataStore, CancellationToken cancellationToken);
    public ClassType GetLoadedObjectByKey(object id);
    public ClassType GetObjectByKey(object id);
    public ClassType GetObjectByKey(object id, bool alwaysGetFromDataStore);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectByKeyAsync>d__275`1")]
public Task`1<ClassType> GetObjectByKeyAsync(object id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectByKeyAsync>d__276`1")]
public Task`1<ClassType> GetObjectByKeyAsync(object id, bool alwaysGetFromDataStore, CancellationToken cancellationToken);
    public object FindObject(Type classType, CriteriaOperator criteria);
    public object FindObject(XPClassInfo classInfo, CriteriaOperator criteria);
    public Task`1<object> FindObjectAsync(Type classType, CriteriaOperator criteria, CancellationToken cancellationToken);
    public Task`1<object> FindObjectAsync(XPClassInfo classInfo, CriteriaOperator criteria, CancellationToken cancellationToken);
    private ObjectsQuery GetQueryForFindObject(XPClassInfo classInfo, CriteriaOperator criteria, bool selectDeleted);
    public object FindObject(XPClassInfo classInfo, CriteriaOperator criteria, bool selectDeleted);
    public Task`1<object> FindObjectAsync(XPClassInfo classInfo, CriteriaOperator criteria, bool selectDeleted, CancellationToken cancellationToken);
    private static void FindObjectAsyncResultProcess(ICollection[] res, Exception ex, AsyncFindObjectCallback callback);
    public object FindObjectAsync(CriteriaOperator criteria, AsyncFindObjectCallback callback);
    public object FindObjectAsync(CriteriaOperator criteria, bool selectDeleted, AsyncFindObjectCallback callback);
    public object FindObjectAsync(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, CriteriaOperator criteria, AsyncFindObjectCallback callback);
    public object FindObjectAsync(XPClassInfo classInfo, CriteriaOperator criteria, AsyncFindObjectCallback callback);
    public object FindObjectAsync(XPClassInfo classInfo, CriteriaOperator criteria, bool selectDeleted, AsyncFindObjectCallback callback);
    public object FindObjectAsync(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, XPClassInfo classInfo, CriteriaOperator criteria, AsyncFindObjectCallback callback);
    public object FindObjectAsync(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, XPClassInfo classInfo, CriteriaOperator criteria, bool selectDeleted, AsyncFindObjectCallback callback);
    public object FindObject(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, XPClassInfo classInfo, CriteriaOperator criteria);
    public object FindObject(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, XPClassInfo classInfo, CriteriaOperator criteria, bool selectDeleted);
    public Task`1<object> FindObjectAsync(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, XPClassInfo classInfo, CriteriaOperator criteria, bool selectDeleted, CancellationToken cancellationToken);
    public object FindObject(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Type objType, CriteriaOperator criteria);
    public object FindObject(Type classType, CriteriaOperator criteria, bool selectDeleted);
    public ClassType FindObject(CriteriaOperator criteria);
    public ClassType FindObject(CriteriaOperator criteria, bool selectDeleted);
    public ClassType FindObject(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, CriteriaOperator criteria);
    public Task`1<object> FindObjectAsync(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Type objType, CriteriaOperator criteria, CancellationToken cancellationToken);
    public Task`1<object> FindObjectAsync(Type classType, CriteriaOperator criteria, bool selectDeleted, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<FindObjectAsync>d__302`1")]
public Task`1<ClassType> FindObjectAsync(CriteriaOperator criteria, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<FindObjectAsync>d__303`1")]
public Task`1<ClassType> FindObjectAsync(CriteriaOperator criteria, bool selectDeleted, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<FindObjectAsync>d__304`1")]
public Task`1<ClassType> FindObjectAsync(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, CriteriaOperator criteria, CancellationToken cancellationToken);
    public ICollection get_ObjectsSavedInCurrentTransaction();
    public ICollection GetObjectsToSave();
    public ICollection GetObjectsToDelete();
    public virtual ICollection GetObjectsToSave(bool includeParent);
    public virtual ICollection GetObjectsToDelete(bool includeParent);
    public ICollection CollectReferencingObjects(object target, PersistentCriteriaEvaluationBehavior behavior, bool selectDeleted);
    public ICollection CollectReferencingObjects(object target);
    public IList ProcessReferences(object target, ProcessReferenceHandler process);
    public bool IsObjectToSave(object theObject);
    public bool IsObjectToDelete(object theObject);
    public bool IsNewObject(object theObject);
    public virtual bool IsObjectToSave(object theObject, bool includeParent);
    public virtual bool IsObjectToDelete(object theObject, bool includeParent);
    [ObsoleteAttribute("Use IsNewObject(object theObject) instead", "True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public virtual bool IsNewObject(object theObject, bool includeParent);
    public bool IsObjectMarkedDeleted(object theObject);
    protected internal virtual ICollection GetTouchedClassInfosIncludeParent();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void ClearDatabase();
    protected virtual NestedUnitOfWork CreateNestedUnitOfWork();
    public NestedUnitOfWork BeginNestedUnitOfWork();
    public virtual void BeginTransaction();
    public void BeginTrackingChanges();
    private void FlushChangesInsideTransaction();
    private Task FlushChangesInsideTransactionAsync(CancellationToken cancellationToken);
    private void ThrowIfCommitChangesToDataLayerInner();
    public virtual object CommitTransactionAsync(AsyncCommitCallback callback);
    public object FlushChangesAsync(AsyncCommitCallback callback);
    public virtual Task CommitTransactionAsync(CancellationToken cancellationToken);
    public virtual void CommitTransaction();
    public void FlushChanges();
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<FlushChangesAsync>d__335")]
public Task FlushChangesAsync(CancellationToken cancellationToken);
    protected virtual IList BeginFlushChanges();
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<BeginFlushChangesAsync>d__337")]
protected virtual Task`1<IList> BeginFlushChangesAsync(int asyncOperationId, CancellationToken cancellationToken);
    private void EndFlushChanges(IList objectsToFireSaved);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<EndFlushChangesAsync>d__339")]
private Task EndFlushChangesAsync(IList objectsToFireSaved, int asyncOperationId, CancellationToken cancellationToken);
    private IList BeginFlushChangesCore(IList objectsToFireSaved);
    private void EndFlushChangesCore(IList objectsToFireSaved);
    private void RollbackVersions();
    public virtual void RollbackTransaction();
    public void DropChanges();
    public void ExplicitBeginTransaction();
    public Task ExplicitBeginTransactionAsync(CancellationToken cancellationToken);
    public void ExplicitBeginTransaction(IsolationLevel isolationLevel);
    public Task ExplicitBeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public void ExplicitCommitTransaction();
    public Task ExplicitCommitTransactionAsync(CancellationToken cancellationToken);
    public void ExplicitRollbackTransaction();
    public Task ExplicitRollbackTransactionAsync(CancellationToken cancellationToken);
    public XPObjectType GetObjectType(int id);
    private Task`1<XPObjectType> GetObjectTypeAsync(int id, CancellationToken cancellationToken);
    public XPObjectType GetObjectType(object theObject);
    public XPObjectType GetObjectType(XPClassInfo objectType);
    private Task`1<XPObjectType> GetObjectTypeAsync(XPClassInfo objectType, CancellationToken cancellationToken);
    public XPClassInfo GetClassInfo(string assemblyName, string className);
    public XPClassInfo GetClassInfo(Type classType);
    public XPClassInfo GetClassInfo();
    public XPClassInfo GetClassInfo(object theObject);
    public PropertyDescriptorCollection GetProperties(XPClassInfo classInfo);
    public AutoCreateOption get_AutoCreateOption();
    public void set_AutoCreateOption(AutoCreateOption value);
    public IDbConnection get_Connection();
    public void set_Connection(IDbConnection value);
    private bool ShouldSerializeConnectionString();
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public LockingOption get_LockingOption();
    public void set_LockingOption(LockingOption value);
    public OptimisticLockingReadBehavior get_OptimisticLockingReadBehavior();
    public void set_OptimisticLockingReadBehavior(OptimisticLockingReadBehavior value);
    [ObsoleteAttribute("Use GetIdentityMapBehavior() instead")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public CacheBehavior GetCacheBehavior();
    public IdentityMapBehavior GetIdentityMapBehavior();
    public CacheBehavior get_CacheBehavior();
    public void set_CacheBehavior(CacheBehavior value);
    public IdentityMapBehavior get_IdentityMapBehavior();
    public void set_IdentityMapBehavior(IdentityMapBehavior value);
    public void Connect(IDataLayer layer, IDisposable[] disposeOnDisconnect);
    public void Connect(IObjectLayer layer, IDisposable[] disposeOnDisconnect);
    private void ConnectOldStyle();
    public void Connect();
    [ObsoleteAttribute("Use DropIdentityMap() instead")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void DropCache();
    public void DropIdentityMap();
    private void Clear();
    public void Disconnect();
    private Dictionary`2<object, object> get_WideDataDictionary();
    private sealed virtual override bool DevExpress.Xpo.Helpers.IWideDataStorage.WideDataContainsKey(object key);
    private sealed virtual override void DevExpress.Xpo.Helpers.IWideDataStorage.SetWideDataItem(object key, object value);
    private sealed virtual override object DevExpress.Xpo.Helpers.IWideDataStorage.GetWideDataItem(object key);
    private sealed virtual override bool DevExpress.Xpo.Helpers.IWideDataStorage.TryGetWideDataItem(object key, Object& value);
    public sealed virtual IObjectLayer get_ObjectLayer();
    protected IObjectLayerAsync GetObjectLayerAsync();
    public UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public void UpdateSchema(XPClassInfo[] types);
    public Task UpdateSchemaAsync(CancellationToken cancellationToken, XPClassInfo[] types);
    public void UpdateSchema(Type[] types);
    public Task UpdateSchemaAsync(CancellationToken cancellationToken, Type[] types);
    public void UpdateSchema(Assembly[] assemblies);
    public Task UpdateSchemaAsync(CancellationToken cancellationToken, Assembly[] assemblies);
    private static Assembly[] GetNonXpoAssemblies(Assembly[] input);
    internal static Assembly[] GetNonXpoAssemblies();
    public void UpdateSchema();
    public Task UpdateSchemaAsync(CancellationToken cancellationToken);
    public void CreateObjectTypeRecords();
    public Task CreateObjectTypeRecordsAsync(CancellationToken cancellationToken);
    public void CreateObjectTypeRecords(bool createOnlyNecessary);
    public Task CreateObjectTypeRecordsAsync(bool createOnlyNecessary, CancellationToken cancellationToken);
    public void CreateObjectTypeRecords(XPClassInfo[] types);
    public Task CreateObjectTypeRecordsAsync(CancellationToken cancellationToken, XPClassInfo[] types);
    public void CreateObjectTypeRecords(bool createOnlyNecessary, XPClassInfo[] types);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<CreateObjectTypeRecordsAsync>d__425")]
public Task CreateObjectTypeRecordsAsync(CancellationToken cancellationToken, bool createOnlyNecessary, XPClassInfo[] types);
    public void CreateObjectTypeRecords(Type[] types);
    public Task CreateObjectTypeRecordsAsync(CancellationToken cancellationToken, Type[] types);
    public void CreateObjectTypeRecords(bool createOnlyNecessary, Type[] types);
    public Task CreateObjectTypeRecordsAsync(CancellationToken cancellationToken, bool createOnlyNecessary, Type[] types);
    public void CreateObjectTypeRecords(Assembly[] assemblies);
    public Task CreateObjectTypeRecordsAsync(CancellationToken cancellationToken, Assembly[] assemblies);
    public void CreateObjectTypeRecords(bool createOnlyNecessary, Assembly[] assemblies);
    public Task CreateObjectTypeRecordsAsync(CancellationToken cancellationToken, bool createOnlyNecessary, Assembly[] assemblies);
    public virtual XPDictionary get_Dictionary();
    public bool get_IsConnected();
    public XPObjectTypesManager get_TypesManager();
    public virtual bool get_InTransaction();
    public bool get_TrackingChanges();
    public void add_BeforeSave(ObjectManipulationEventHandler value);
    public void remove_BeforeSave(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectSaving(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectSaving(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectSaved(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectSaved(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectLoading(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectLoading(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectLoaded(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectLoaded(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectDeleting(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectDeleting(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectDeleted(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectDeleted(ObjectManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectChanged(ObjectChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectChanged(ObjectChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectsSaved(ObjectsManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectsSaved(ObjectsManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectsLoaded(ObjectsManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectsLoaded(ObjectsManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeConnect(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeConnect(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterConnect(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterConnect(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeDisconnect(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeDisconnect(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterDisconnect(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterDisconnect(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeBeginTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeBeginTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterBeginTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterBeginTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforePreProcessCommitedList(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforePreProcessCommitedList(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeCommitTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeCommitTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterCommitTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterCommitTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeCommitNestedUnitOfWork(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeCommitNestedUnitOfWork(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterCommitNestedUnitOfWork(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterCommitNestedUnitOfWork(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeRollbackTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeRollbackTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterRollbackTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterRollbackTransaction(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeBeginTrackingChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeBeginTrackingChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterBeginTrackingChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterBeginTrackingChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeFlushChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeFlushChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterFlushChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterFlushChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeDropChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeDropChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterDropChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterDropChanges(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_FailedCommitTransaction(SessionOperationFailEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FailedCommitTransaction(SessionOperationFailEventHandler value);
    [CompilerGeneratedAttribute]
public void add_FailedFlushChanges(SessionOperationFailEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FailedFlushChanges(SessionOperationFailEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_AfterDropIdentityMap(SessionManipulationEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_AfterDropIdentityMap(SessionManipulationEventHandler value);
    public object GetKeyValue(object theObject);
    public void SetKeyValue(object theObject, object keyValue);
    [ObsoleteAttribute("Use BulkLoad method instead", "True")]
[EditorBrowsableAttribute("1")]
public void Load(XPBaseCollection[] collections);
    public void BulkLoad(XPBaseCollection[] collections);
    public Task BulkLoadAsync(CancellationToken cancellationToken, XPBaseCollection[] collections);
    public void BulkLoad(IXPBulkLoadableCollection[] collections);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<BulkLoadAsync>d__546")]
public Task BulkLoadAsync(CancellationToken cancellationToken, IXPBulkLoadableCollection[] collections);
    protected internal virtual bool get_IsUnitOfWork();
    public virtual string ToString();
    protected internal virtual MemberInfoCollection GetPropertiesListForUpdateInsert(object theObject, bool isUpdate, bool addDelayedReference);
    private sealed virtual override object DevExpress.Xpo.Helpers.IPersistentValueExtractor.ExtractPersistentValue(object criterionValue);
    private sealed virtual override Session DevExpress.Xpo.Helpers.ISessionProvider.get_Session();
    [ObsoleteAttribute("Use PreFetch method instead", "True")]
[EditorBrowsableAttribute("1")]
public void Load(IEnumerable`1<T> objects, String[] collections);
    public void PreFetch(IEnumerable`1<T> objects, String[] propertyPaths);
    public Task PreFetchAsync(IEnumerable`1<T> objects, CancellationToken cancellationToken, String[] propertyPaths);
    [ObsoleteAttribute("Use PreFetch method instead", "True")]
[EditorBrowsableAttribute("1")]
public void Load(XPClassInfo classInfo, IEnumerable objects, String[] collections);
    public void PreFetch(XPClassInfo classInfo, IEnumerable objects, String[] propertyPaths);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<PreFetchAsync>d__561")]
public Task PreFetchAsync(XPClassInfo classInfo, IEnumerable objects, CancellationToken cancellationToken, String[] propertyPaths);
    private void ObjectsUniquer(ICollection& uniqueObjects, IEnumerable nonUniqueObjects);
    internal void ThrowIfObjectFromDifferentSession(object obj);
    private void PreFetchCore(XPClassInfo classInfo, IEnumerable objects, XPMemberInfo member);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<PreFetchCoreAsync>d__565")]
private Task PreFetchCoreAsync(XPClassInfo classInfo, IEnumerable objects, XPMemberInfo member, CancellationToken cancellationToken);
    private bool PreFetchCoreBegin(XPClassInfo classInfo, IEnumerable objects, XPMemberInfo member, List`1& queries, ObjectDictionary`1& objectsByOwners, XPClassInfo& loadedClassInfo);
    private void PreFetchCoreEnd(XPClassInfo classInfo, IEnumerable objects, XPMemberInfo member, XPClassInfo loadedClassInfo, ObjectDictionary`1<ObjectSet> objectsByOwners, ICollection[] results);
    public void PreFetch(IEnumerable objects, XPMemberInfo collectionInObjects, IEnumerable collectionsContent);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<PreFetchAsync>d__569")]
public Task PreFetchAsync(IEnumerable objects, XPMemberInfo collectionInObjects, IEnumerable collectionsContent, CancellationToken cancellationToken);
    public void PreFetch(IEnumerable`1<T> objects, string collectionInObjects, IEnumerable collectionsContent);
    public Task PreFetchAsync(IEnumerable`1<T> objects, string collectionInObjects, IEnumerable collectionsContent, CancellationToken cancellationToken);
    protected internal virtual bool get_SuppressExceptionOnReferredObjectAbsentInDataStore();
    internal bool get_IsDesignMode();
    private bool get_IsDesignMode2();
    internal void MuteCollection(XPBaseCollection c);
    private void UnMuteCollections();
    public sealed virtual IDataLayer get_DataLayer();
    public IServiceProvider get_ServiceProvider();
    public ICollection`1<T> GetObjectsFromSprocParametrized(string sprocName, SprocParameter[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromSprocParametrizedAsync>d__588`1")]
public Task`1<ICollection`1<T>> GetObjectsFromSprocParametrizedAsync(CancellationToken cancellationToken, string sprocName, SprocParameter[] parameters);
    public ICollection GetObjectsFromSprocParametrized(XPClassInfo classInfo, string sprocName, SprocParameter[] parameters);
    public Task`1<ICollection> GetObjectsFromSprocParametrizedAsync(CancellationToken cancellationToken, XPClassInfo classInfo, string sprocName, SprocParameter[] parameters);
    public ICollection`1<T> GetObjectsFromSprocParametrized(List`1<XPMemberInfo> members, string sprocName, SprocParameter[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromSprocParametrizedAsync>d__592`1")]
public Task`1<ICollection`1<T>> GetObjectsFromSprocParametrizedAsync(CancellationToken cancellationToken, List`1<XPMemberInfo> members, string sprocName, SprocParameter[] parameters);
    public ICollection GetObjectsFromSprocParametrized(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sprocName, SprocParameter[] parameters);
    public Task`1<ICollection> GetObjectsFromSprocParametrizedAsync(CancellationToken cancellationToken, XPClassInfo classInfo, List`1<XPMemberInfo> members, string sprocName, SprocParameter[] parameters);
    public ICollection`1<T> GetObjectsFromSproc(string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromSprocAsync>d__596`1")]
public Task`1<ICollection`1<T>> GetObjectsFromSprocAsync(CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    public ICollection GetObjectsFromSproc(XPClassInfo classInfo, string sprocName, OperandValue[] parameters);
    public Task`1<ICollection> GetObjectsFromSprocAsync(CancellationToken cancellationToken, XPClassInfo classInfo, string sprocName, OperandValue[] parameters);
    public ICollection`1<T> GetObjectsFromSproc(List`1<XPMemberInfo> members, string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromSprocAsync>d__600`1")]
public Task`1<ICollection`1<T>> GetObjectsFromSprocAsync(CancellationToken cancellationToken, List`1<XPMemberInfo> members, string sprocName, OperandValue[] parameters);
    public ICollection GetObjectsFromSproc(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sprocName, OperandValue[] parameters);
    public Task`1<ICollection> GetObjectsFromSprocAsync(CancellationToken cancellationToken, XPClassInfo classInfo, List`1<XPMemberInfo> members, string sprocName, OperandValue[] parameters);
    public ICollection`1<T> GetObjectsFromQuery(string sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__604`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(string sql, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(string sql, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__606`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(string sql, QueryParameterCollection parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__608`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(string sql, String[] parameterNames, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__610`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(string sql, String[] parameterNames, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(string sql, String[] parameterNames, QueryParameterCollection parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__612`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(string sql, String[] parameterNames, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, string sql);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, string sql, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, string sql, Object[] parameterValues);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, string sql, QueryParameterCollection parameters);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, string sql, String[] parameterNames, Object[] parameterValues);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, string sql, String[] parameterNames, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, string sql, String[] parameterNames, QueryParameterCollection parameters);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, string sql, String[] parameterNames, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(List`1<XPMemberInfo> members, string sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__624`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(List`1<XPMemberInfo> members, string sql, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(List`1<XPMemberInfo> members, string sql, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__626`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(List`1<XPMemberInfo> members, string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(List`1<XPMemberInfo> members, string sql, QueryParameterCollection parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__628`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(List`1<XPMemberInfo> members, string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(List`1<XPMemberInfo> members, string sql, String[] parameterNames, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__630`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(List`1<XPMemberInfo> members, string sql, String[] parameterNames, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(List`1<XPMemberInfo> members, string sql, String[] parameterNames, QueryParameterCollection parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__632`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(List`1<XPMemberInfo> members, string sql, String[] parameterNames, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql, CancellationToken cancellationToken);
    private static string ParametersToString(String[] parameterNames, QueryParameterCollection parameters);
    private static string ParametersToString(QueryParameterCollection parameters);
    private static string ParametersToString(String[] parameterNames, Object[] parameterValues);
    private static string ParametersToString(Object[] parameterValues);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__640")]
public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql, QueryParameterCollection parameters);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql, String[] parameterNames, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__644")]
public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql, String[] parameterNames, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql, String[] parameterNames, QueryParameterCollection parameters);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, List`1<XPMemberInfo> members, string sql, String[] parameterNames, QueryParameterCollection parameters, CancellationToken cancellationToken);
    private static Dictionary`2<XPMemberInfo, int> CheckClassInfoAndMembers(XPClassInfo classInfo, List`1<XPMemberInfo> members);
    public ICollection`1<T> GetObjectsFromSprocParametrized(LoadDataMemberOrderItem[] members, string sprocName, SprocParameter[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromSprocParametrizedAsync>d__649`1")]
public Task`1<ICollection`1<T>> GetObjectsFromSprocParametrizedAsync(CancellationToken cancellationToken, LoadDataMemberOrderItem[] members, string sprocName, SprocParameter[] parameters);
    public ICollection GetObjectsFromSprocParametrized(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sprocName, SprocParameter[] parameters);
    public Task`1<ICollection> GetObjectsFromSprocParametrizedAsync(CancellationToken cancellationToken, XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sprocName, SprocParameter[] parameters);
    public ICollection`1<T> GetObjectsFromSproc(LoadDataMemberOrderItem[] members, string sprocName, OperandValue[] parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromSprocAsync>d__653`1")]
public Task`1<ICollection`1<T>> GetObjectsFromSprocAsync(CancellationToken cancellationToken, LoadDataMemberOrderItem[] members, string sprocName, OperandValue[] parameters);
    public ICollection GetObjectsFromSproc(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sprocName, OperandValue[] parameters);
    public Task`1<ICollection> GetObjectsFromSprocAsync(CancellationToken cancellationToken, XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sprocName, OperandValue[] parameters);
    public ICollection`1<T> GetObjectsFromQuery(LoadDataMemberOrderItem[] members, string sql);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__657`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(LoadDataMemberOrderItem[] members, string sql, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(LoadDataMemberOrderItem[] members, string sql, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__659`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(LoadDataMemberOrderItem[] members, string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(LoadDataMemberOrderItem[] members, string sql, QueryParameterCollection parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__661`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(LoadDataMemberOrderItem[] members, string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(LoadDataMemberOrderItem[] members, string sql, String[] parameterNames, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__663`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(LoadDataMemberOrderItem[] members, string sql, String[] parameterNames, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection`1<T> GetObjectsFromQuery(LoadDataMemberOrderItem[] members, string sql, String[] parameterNames, QueryParameterCollection parameters);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__665`1")]
public Task`1<ICollection`1<T>> GetObjectsFromQueryAsync(LoadDataMemberOrderItem[] members, string sql, String[] parameterNames, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__669")]
public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql, QueryParameterCollection parameters);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql, String[] parameterNames, Object[] parameterValues);
    [AsyncStateMachineAttribute("DevExpress.Xpo.Session/<GetObjectsFromQueryAsync>d__673")]
public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql, String[] parameterNames, Object[] parameterValues, CancellationToken cancellationToken);
    public ICollection GetObjectsFromQuery(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql, String[] parameterNames, QueryParameterCollection parameters);
    public Task`1<ICollection> GetObjectsFromQueryAsync(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, string sql, String[] parameterNames, QueryParameterCollection parameters, CancellationToken cancellationToken);
    private static List`1<XPMemberInfo> CheckClassInfoAndMembers(XPClassInfo classInfo, LoadDataMemberOrderItem[] members, Dictionary`2& referenceIndexDict);
    public ICollection GetObjectsByKeyFromSproc(XPClassInfo classInfo, bool alwaysGetFromDataStore, string sprocName, OperandValue[] parameters);
    public ICollection GetObjectsByKeyFromSprocParametrized(XPClassInfo classInfo, bool alwaysGetFromDataStore, string sprocName, SprocParameter[] parameters);
    public ICollection GetObjectsByKeyFromQuery(XPClassInfo classInfo, bool alwaysGetFromDataStore, string sql);
    private ICollection GetObjectsByKeyFromQuery(XPClassInfo classInfo, bool alwaysGetFromDataStore, SelectedData sprocResultData);
    public SelectedData ExecuteSproc(string sprocName, OperandValue[] parameters);
    public Task`1<SelectedData> ExecuteSprocAsync(CancellationToken cancellationToken, string sprocName, OperandValue[] parameters);
    public SelectedData ExecuteSprocParametrized(string sprocName, SprocParameter[] parameters);
    public Task`1<SelectedData> ExecuteSprocParametrizedAsync(CancellationToken cancellationToken, string sprocName, SprocParameter[] parameters);
    public int ExecuteNonQuery(string sql);
    public Task`1<int> ExecuteNonQueryAsync(string sql, CancellationToken cancellationToken);
    public int ExecuteNonQuery(string sql, String[] parameterNames, Object[] parameterValues);
    public int ExecuteNonQuery(string sql, String[] parameterNames, QueryParameterCollection parameters);
    public Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken, string sql, String[] parameterNames, Object[] parameterValues);
    public Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken, string sql, String[] parameterNames, QueryParameterCollection parameters);
    public int ExecuteNonQuery(string sql, Object[] parameterValues);
    public int ExecuteNonQuery(string sql, QueryParameterCollection parameters);
    public Task`1<int> ExecuteNonQueryAsync(string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public Task`1<int> ExecuteNonQueryAsync(string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public object ExecuteScalar(string sql);
    public Task`1<object> ExecuteScalarAsync(string sql, CancellationToken cancellationToken);
    public object ExecuteScalar(string sql, String[] parameterNames, Object[] parameterValues);
    public object ExecuteScalar(string sql, String[] parameterNames, QueryParameterCollection parameters);
    public Task`1<object> ExecuteScalarAsync(string sql, String[] parameterNames, Object[] parameterValues, CancellationToken cancellationToken);
    public Task`1<object> ExecuteScalarAsync(string sql, String[] parameterNames, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public object ExecuteScalar(string sql, Object[] parameterValues);
    public object ExecuteScalar(string sql, QueryParameterCollection parameters);
    public Task`1<object> ExecuteScalarAsync(string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public Task`1<object> ExecuteScalarAsync(string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public SelectedData ExecuteQuery(string sql);
    public Task`1<SelectedData> ExecuteQueryAsync(string sql, CancellationToken cancellationToken);
    public SelectedData ExecuteQuery(string sql, String[] parameterNames, Object[] parameterValues);
    public SelectedData ExecuteQuery(string sql, String[] parameterNames, QueryParameterCollection parameters);
    public Task`1<SelectedData> ExecuteQueryAsync(string sql, String[] parameterNames, Object[] parameterValues, CancellationToken cancellationToken);
    public Task`1<SelectedData> ExecuteQueryAsync(string sql, String[] parameterNames, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public SelectedData ExecuteQuery(string sql, Object[] parameterValues);
    public SelectedData ExecuteQuery(string sql, QueryParameterCollection parameters);
    public Task`1<SelectedData> ExecuteQueryAsync(string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public Task`1<SelectedData> ExecuteQueryAsync(string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public SelectedData ExecuteQueryWithMetadata(string sql);
    public Task`1<SelectedData> ExecuteQueryWithMetadataAsync(string sql, CancellationToken cancellationToken);
    public SelectedData ExecuteQueryWithMetadata(string sql, String[] parameterNames, Object[] parameterValues);
    public SelectedData ExecuteQueryWithMetadata(string sql, String[] parameterNames, QueryParameterCollection parameters);
    public Task`1<SelectedData> ExecuteQueryWithMetadataAsync(string sql, String[] parameterNames, Object[] parameterValues, CancellationToken cancellationToken);
    public Task`1<SelectedData> ExecuteQueryWithMetadataAsync(string sql, String[] parameterNames, QueryParameterCollection parameters, CancellationToken cancellationToken);
    public SelectedData ExecuteQueryWithMetadata(string sql, Object[] parameterValues);
    public SelectedData ExecuteQueryWithMetadata(string sql, QueryParameterCollection parameters);
    public Task`1<SelectedData> ExecuteQueryWithMetadataAsync(string sql, Object[] parameterValues, CancellationToken cancellationToken);
    public Task`1<SelectedData> ExecuteQueryWithMetadataAsync(string sql, QueryParameterCollection parameters, CancellationToken cancellationToken);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
    protected LogMessage CreateLogMessage(string title, TimeSpan duration, Object[] parameters);
    protected string GetObjectString(object theObject);
    private sealed virtual override IServiceProvider DevExpress.Xpo.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    private sealed virtual override ISecuredPropertyAccessor DevExpress.Xpo.Infrastructure.IInfrastructure<DevExpress.Xpo.ISecuredPropertyAccessor>.get_Instance();
    [CompilerGeneratedAttribute]
private void <BeginTransaction>b__325_0();
    [CompilerGeneratedAttribute]
private LogMessage <BeginTransaction>b__325_1(TimeSpan d);
    [CompilerGeneratedAttribute]
private void <CommitTransaction>b__333_0();
    [CompilerGeneratedAttribute]
private LogMessage <CommitTransaction>b__333_1(TimeSpan d);
    [CompilerGeneratedAttribute]
private void <RollbackTransaction>b__343_0();
    [CompilerGeneratedAttribute]
private LogMessage <RollbackTransaction>b__343_1(TimeSpan d);
}
public class DevExpress.Xpo.SessionManipulationEventArgs : EventArgs {
    private Session session;
    public Session Session { get; }
    public SessionManipulationEventArgs(Session session);
    public Session get_Session();
}
public class DevExpress.Xpo.SessionManipulationEventHandler : MulticastDelegate {
    public SessionManipulationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SessionManipulationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SessionManipulationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.SessionObjectLayer : object {
    public bool ThroughCommitMode;
    public Session ParentSession;
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomSecurityCriteriaPatcherEventArgs> CustomSecurityCriteriaPatcher;
    [CompilerGeneratedAttribute]
private EventHandler`1<ObjectsLoadedEventArgs> ObjectsLoaded;
    private ICommandChannel nestedCommandChannel;
    private ICommandChannelAsync nestedCommandChannelAsync;
    private SecurityContext securityContextMain;
    private static object nestedParentMapKeyObject;
    [DescriptionAttribute("Provides access to the current object layer’s IDbConnection object that is used to access a database.")]
[BrowsableAttribute("False")]
public IDbConnection Connection { get; }
    [DescriptionAttribute("Returns an AutoCreateOption value associated with the current object layer.")]
[BrowsableAttribute("False")]
public AutoCreateOption AutoCreateOption { get; }
    [DescriptionAttribute("Returns the current SessionObjectLayer object.")]
[BrowsableAttribute("False")]
public IObjectLayer ObjectLayer { get; }
    [DescriptionAttribute("Gets an object providing metadata on persistent objects stored in a data store.")]
[BrowsableAttribute("False")]
public XPDictionary Dictionary { get; }
    [DescriptionAttribute("Provides access to the current object layer’s data access layer that is used to access a data store.")]
[BrowsableAttribute("False")]
public IDataLayer DataLayer { get; }
    [DescriptionAttribute("Indicates if an object layer can call the SessionObjectLayer.LoadCollectionObjects method to load collection properties.")]
[BrowsableAttribute("False")]
public bool CanLoadCollectionObjects { get; }
    [DescriptionAttribute("Indicates if an object layer can call the SessionObjectLayer.LoadCollectionObjectsAsync method to asynchronously load collection properties.")]
[BrowsableAttribute("False")]
public bool CanLoadCollectionObjectsAsynchronously { get; }
    protected bool AllowICommandChannelDoWithSecurityContext { get; }
    public SessionObjectLayer(Session parentSession);
    public SessionObjectLayer(Session parentSession, bool throughCommitMode);
    public SessionObjectLayer(Session parentSession, bool throughCommitMode, IGenericSecurityRule genericSecurityRule, ISecurityRuleProvider securityDictionary, object securityCustomContext);
    private static SessionObjectLayer();
    [CompilerGeneratedAttribute]
public void add_CustomSecurityCriteriaPatcher(EventHandler`1<CustomSecurityCriteriaPatcherEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomSecurityCriteriaPatcher(EventHandler`1<CustomSecurityCriteriaPatcherEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ObjectsLoaded(EventHandler`1<ObjectsLoadedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ObjectsLoaded(EventHandler`1<ObjectsLoadedEventArgs> value);
    private SecurityContext GetSecurityContext(Session nestedSession);
    public sealed virtual void ClearDatabase();
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    protected internal NestedParentMap GetNestedParentMap(Session session);
    public sealed virtual ICollection[] LoadObjects(Session session, ObjectsQuery[] queries);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SessionObjectLayer/<LoadObjectsAsync>d__21")]
public sealed virtual Task`1<ICollection[]> LoadObjectsAsync(Session session, ObjectsQuery[] queries, CancellationToken cancellationToken);
    public sealed virtual object LoadObjectsAsync(Session session, ObjectsQuery[] queries, AsyncLoadObjectsCallback callback);
    private Boolean[] GetForceList(ObjectsQuery[] queries);
    private ObjectsQuery[] GetParentQueries(Session session, ObjectsQuery[] queries, SecurityContext securityContext);
    private ISecurityCriteriaPatcher GetSecurityCriteriaPatcher(SecurityContext securityContext, XPClassInfo classInfo);
    public sealed virtual List`1<Object[]> SelectData(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    public sealed virtual Task`1<List`1<Object[]>> SelectDataAsync(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, CancellationToken cancellationToken);
    private CriteriaOperatorCollection SecurityPatchProperties(ISecurityCriteriaPatcher securityCriteriaPatcher, CriteriaOperatorCollection properties);
    public sealed virtual object SelectDataAsync(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, AsyncSelectDataCallback callback);
    private ICollection FilterListForDelete(Session session, NestedParentMap map, ICollection fullListForDelete);
    private void InvalidateDeletedObjects(AsyncCommitContext context);
    public sealed virtual void CommitChanges(Session session, ICollection fullListForDelete, ICollection completeListForSave);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SessionObjectLayer/<CommitChangesAsync>d__35")]
public sealed virtual Task CommitChangesAsync(Session session, ICollection fullListForDelete, ICollection completeListForSave, CancellationToken cancellationToken);
    public sealed virtual object CommitChangesAsync(Session session, ICollection fullListForDelete, ICollection completeListForSave, AsyncCommitCallback callback);
    private void ThroughCommitExec(AsyncCommitContext context);
    private void BeginCommitChanges(AsyncCommitContext context);
    private void EndCommitChanges(AsyncCommitContext context);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SessionObjectLayer/<EndCommitChangesAsync>d__40")]
private Task EndCommitChangesAsync(AsyncCommitContext context, CancellationToken cancellationToken);
    private void Commit(AsyncCommitContext context);
    private void ValidateDeleteObjects(AsyncCommitContext context, ISecurityRuleProvider2 ruleProvider2, object objToDel);
    private void ValidateObjectsOnCommit(AsyncCommitContext context);
    private void ValidateAfterCommitObject(ISecurityRuleProvider2 ruleProvider2, AsyncCommitContext context, object realObject, Dictionary`2<XPMemberInfo, object> modifyMember, Boolean& abortChangesInParentSession);
    private void RollbackParentObjects(AsyncCommitContext context, ObjectDictionary`1<Dictionary`2<XPMemberInfo, object>> modifiedObjects);
    private void RollbackModifiedObjects(AsyncCommitContext context, ObjectDictionary`1<Dictionary`2<XPMemberInfo, object>> modifiedObjects);
    private void RollbackDeletedObjects(AsyncCommitContext context);
    private void RemoveParentObjects(AsyncCommitContext context);
    private XPMemberInfo[] ValidateBeforeCommitObject(ISecurityRuleProvider2 securityRuleProvider2, ISecurityRule2 rulev2, AsyncCommitContext context, object objToSave, object realObject);
    private bool PersistentPropertiesEquals(AsyncCommitContext context, XPMemberInfo mi, object value, object valueOnLoad);
    private void ValidateObjectOnCommitGenericSecurityRule(AsyncCommitContext context);
    private void ValidateDeleteObjectsBeforeCommit(ISecurityRuleProvider2 securityRuleProvider2, AsyncCommitContext context, object realObject);
    private void ValidateDeleteObjectsOnCommit(ISecurityRuleProvider2 securityRuleProvider2, AsyncCommitContext context, object realObject);
    public sealed virtual void CreateObjectType(XPObjectType type);
    public sealed virtual Task CreateObjectTypeAsync(XPObjectType type, CancellationToken cancellationToken);
    public sealed virtual ICollection[] GetObjectsByKey(Session session, ObjectsByKeyQuery[] queries);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SessionObjectLayer/<GetObjectsByKeyAsync>d__57")]
public sealed virtual Task`1<ICollection[]> GetObjectsByKeyAsync(Session session, ObjectsByKeyQuery[] queries, CancellationToken cancellationToken);
    public sealed virtual Object[] LoadDelayedProperties(Session session, object theObject, MemberPathCollection props);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SessionObjectLayer/<LoadDelayedPropertiesAsync>d__59")]
public sealed virtual Task`1<Object[]> LoadDelayedPropertiesAsync(Session session, object theObject, MemberPathCollection props, CancellationToken cancellationToken);
    public sealed virtual ObjectDictionary`1<object> LoadDelayedProperties(Session session, IList objects, XPMemberInfo property);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SessionObjectLayer/<LoadDelayedPropertiesAsync>d__61")]
public sealed virtual Task`1<ObjectDictionary`1<object>> LoadDelayedPropertiesAsync(Session session, IList objects, XPMemberInfo property, CancellationToken cancellationToken);
    public sealed virtual PurgeResult Purge();
    public sealed virtual void SetObjectLayerWideObjectTypes(Dictionary`2<XPClassInfo, XPObjectType> loadedTypes);
    public sealed virtual Dictionary`2<XPClassInfo, XPObjectType> GetObjectLayerWideObjectTypes();
    public sealed virtual void RegisterStaticTypes(XPClassInfo[] types);
    public sealed virtual bool IsStaticType(XPClassInfo type);
    public sealed virtual IObjectMap GetStaticCache(XPClassInfo info);
    public sealed virtual void add_SchemaInit(SchemaInitEventHandler value);
    public sealed virtual void remove_SchemaInit(SchemaInitEventHandler value);
    public sealed virtual IDbConnection get_Connection();
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public sealed virtual IObjectLayer get_ObjectLayer();
    public sealed virtual XPDictionary get_Dictionary();
    private CriteriaOperator GetNestedCriteria(Session session, CriteriaOperator criteria, SecurityContext securityContext);
    public sealed virtual IDataLayer get_DataLayer();
    public sealed virtual bool IsParentObjectToSave(Session session, object theObject);
    public sealed virtual bool IsParentObjectToDelete(Session session, object theObject);
    public sealed virtual ICollection GetParentObjectsToSave(Session session);
    public sealed virtual ICollection GetParentObjectsToDelete(Session session);
    public sealed virtual ICollection GetParentTouchedClassInfos(Session session);
    public sealed virtual bool get_CanLoadCollectionObjects();
    public sealed virtual bool get_CanLoadCollectionObjectsAsynchronously();
    public sealed virtual Object[] LoadCollectionObjects(Session session, XPMemberInfo refProperty, object owner);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SessionObjectLayer/<LoadCollectionObjectsAsync>d__92")]
public sealed virtual Task`1<Object[]> LoadCollectionObjectsAsync(Session session, XPMemberInfo refProperty, object owner, CancellationToken cancellationToken);
    protected virtual void OnLoadedObjects(ICollection[] parentObjects, ICollection[] nestedObjects, NestedParentMap nestedParentMap, SecurityContext securityContext);
    protected virtual bool get_AllowICommandChannelDoWithSecurityContext();
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
    private void ThrowIfNotAllowICommandChannelDo();
    private IEnumerable`1<string> GetPropertiesForBypassSecurity(object obj);
}
public class DevExpress.Xpo.SessionOperationFailEventArgs : EventArgs {
    private Exception exception;
    private bool handled;
    public Exception Exception { get; }
    public bool Handled { get; public set; }
    public SessionOperationFailEventArgs(Exception exception);
    public Exception get_Exception();
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class DevExpress.Xpo.SessionOperationFailEventHandler : MulticastDelegate {
    public SessionOperationFailEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SessionOperationFailEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SessionOperationFailEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Xpo.SimpleDataLayer : BaseDataLayer {
    private int roadBlock;
    private static string ReentrancyOrCrossThreadFailureMessage;
    private static bool _SuppressReentrancyAndThreadSafetyCheck;
    [DescriptionAttribute("A IDbConnection object that specifies the connection to the data store if it allows commands to be created.")]
[BrowsableAttribute("False")]
public IDbConnection Connection { get; }
    [ObsoleteAttribute("Reentrancy and thread safety check suppressed")]
public static bool SuppressReentrancyAndThreadSafetyCheck { get; public set; }
    public SimpleDataLayer(IDataStore provider);
    public SimpleDataLayer(XPDictionary dictionary, IDataStore provider);
    protected virtual void OnClassInfoChanged(object sender, ClassInfoEventArgs e);
    public virtual UpdateSchemaResult UpdateSchema(bool doNotCreate, XPClassInfo[] types);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleDataLayer/<UpdateSchemaAsync>d__4")]
public virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreate, XPClassInfo[] types);
    private ICollection`1<XPClassInfo> UpdateSchemaBegin(XPClassInfo[] types);
    public virtual SelectedData SelectData(SelectStatement[] selects);
    public virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    public virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public sealed virtual void ClearDatabase();
    public virtual IDbConnection get_Connection();
    public virtual IDbCommand CreateCommand();
    public static bool get_SuppressReentrancyAndThreadSafetyCheck();
    public static void set_SuppressReentrancyAndThreadSafetyCheck(bool value);
    private T ReentrancyAndThreadSafetyChecked(Func`1<T> action);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleDataLayer/<ReentrancyAndThreadSafetyCheckedAsync>d__21`1")]
private Task`1<T> ReentrancyAndThreadSafetyCheckedAsync(Func`1<Task`1<T>> action);
    [CompilerGeneratedAttribute]
private object <ClearDatabase>b__10_0();
    [CompilerGeneratedAttribute]
private IDbCommand <CreateCommand>b__13_0();
}
public class DevExpress.Xpo.SimpleObjectLayer : object {
    private IDataLayer dataLayer;
    private ICommandChannel nestedCommandChannel;
    private ICommandChannelAsync nestedCommandChannelAsync;
    [DescriptionAttribute("Gets an object providing metadata on persistent objects stored in a data store.")]
[BrowsableAttribute("False")]
public XPDictionary Dictionary { get; }
    [DescriptionAttribute("Returns the current SimpleObjectLayer object.")]
[BrowsableAttribute("False")]
public IObjectLayer ObjectLayer { get; }
    [DescriptionAttribute("Provides access to the current object layer’s IDbConnection object that is used to access a database.")]
[BrowsableAttribute("False")]
public IDbConnection Connection { get; }
    [DescriptionAttribute("Returns an AutoCreateOption value associated with the current object layer.")]
[BrowsableAttribute("False")]
public AutoCreateOption AutoCreateOption { get; }
    [DescriptionAttribute("Provides access to the current object layer’s data access layer that is used to access a data store.")]
[BrowsableAttribute("False")]
public IDataLayer DataLayer { get; }
    [DescriptionAttribute("Indicates if an object layer can call the SimpleObjectLayer.LoadCollectionObjects method to load collection properties.")]
[BrowsableAttribute("False")]
public bool CanLoadCollectionObjects { get; }
    [DescriptionAttribute("Indicates if an object layer can call the SimpleObjectLayer.LoadCollectionObjectsAsync method to asynchronously load collection properties.")]
[BrowsableAttribute("False")]
public bool CanLoadCollectionObjectsAsynchronously { get; }
    public SimpleObjectLayer(IDataLayer dataLayer);
    public static SimpleObjectLayer FromDataLayer(IDataLayer dataLayer);
    private static IDataLayerAsync GetDataLayerAsync(IDataLayer dataLayer);
    public sealed virtual ICollection[] LoadObjects(Session session, ObjectsQuery[] queries);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleObjectLayer/<LoadObjectsAsync>d__7")]
public sealed virtual Task`1<ICollection[]> LoadObjectsAsync(Session session, ObjectsQuery[] queries, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<Object[]>> SelectDataAsync(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleObjectLayer/<GetObjectsByKeyAsync>d__9")]
public sealed virtual Task`1<ICollection[]> GetObjectsByKeyAsync(Session session, ObjectsByKeyQuery[] queries, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleObjectLayer/<CommitChangesAsync>d__10")]
public sealed virtual Task CommitChangesAsync(Session session, ICollection fullListForDelete, ICollection completeListForSave, CancellationToken cancellationToken);
    public sealed virtual object LoadObjectsAsync(Session session, ObjectsQuery[] queries, AsyncLoadObjectsCallback callback);
    public sealed virtual List`1<Object[]> SelectData(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    internal static List`1<Object[]> SelectDataInternal(IDataLayer dataLayer, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleObjectLayer/<SelectDataInternalAsync>d__14")]
internal static Task`1<List`1<Object[]>> SelectDataInternalAsync(IDataLayer dataLayer, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, CancellationToken cancellationToken);
    public sealed virtual object SelectDataAsync(Session session, ObjectsQuery query, CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, AsyncSelectDataCallback callback);
    public sealed virtual XPDictionary get_Dictionary();
    public sealed virtual IObjectLayer get_ObjectLayer();
    public sealed virtual void add_SchemaInit(SchemaInitEventHandler value);
    public sealed virtual void remove_SchemaInit(SchemaInitEventHandler value);
    public sealed virtual IDbConnection get_Connection();
    public sealed virtual ICollection[] GetObjectsByKey(Session session, ObjectsByKeyQuery[] queries);
    private static ICollection GetObjectProcessGroup(ICollection[] results);
    private static List`1<ObjectsQuery> GetQueriesByKeys(Session session, ObjectsByKeyQuery getQuery);
    private ICollection FilterListForDelete(Session session, ICollection fullListForDelete);
    public sealed virtual void CommitChanges(Session session, ICollection fullListForDelete, ICollection completeListForSave);
    public sealed virtual object CommitChangesAsync(Session session, ICollection fullListForDelete, ICollection completeListForSave, AsyncCommitCallback callback);
    private void CommitTransactionAsyncExec(AsyncRequest ar);
    private void BeginCommitChangesInsideTransaction(CommitChangesContext context, ICollection fullListForDelete, ICollection completeListForSave);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleObjectLayer/<BeginCommitChangesInsideTransactionAsync>d__35")]
private Task BeginCommitChangesInsideTransactionAsync(CommitChangesContext context, ICollection fullListForDelete, ICollection completeListForSave, CancellationToken cancellationToken);
    private void EndCommitChangesInsideTransaction(CommitChangesContext context);
    public sealed virtual void CreateObjectType(XPObjectType objectType);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleObjectLayer/<CreateObjectTypeAsync>d__38")]
public sealed virtual Task CreateObjectTypeAsync(XPObjectType objectType, CancellationToken cancellationToken);
    private void CollectClassInfosFormObjects(Session session, Dictionary`2<XPClassInfo, XPClassInfo> collector, IEnumerable objects);
    private Dictionary`2<XPClassInfo, XPClassInfo> CollectClassInfosFormObjects(Session session, IEnumerable objects);
    private void ProcessDeletedObjects(CommitChangesContext context, ICollection fullListForDelete, ICollection completeListForSave, List`1& beforeInserts, List`1& afterUpdates);
    public sealed virtual UpdateSchemaResult UpdateSchema(bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public sealed virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreateIfFirstTableNotExist, XPClassInfo[] types);
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public sealed virtual Object[] LoadDelayedProperties(Session session, object theObject, MemberPathCollection props);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleObjectLayer/<LoadDelayedPropertiesAsync>d__47")]
public sealed virtual Task`1<Object[]> LoadDelayedPropertiesAsync(Session session, object theObject, MemberPathCollection props, CancellationToken cancellationToken);
    public sealed virtual ObjectDictionary`1<object> LoadDelayedProperties(Session session, IList objects, XPMemberInfo property);
    [AsyncStateMachineAttribute("DevExpress.Xpo.SimpleObjectLayer/<LoadDelayedPropertiesAsync>d__49")]
public sealed virtual Task`1<ObjectDictionary`1<object>> LoadDelayedPropertiesAsync(Session session, IList objects, XPMemberInfo property, CancellationToken cancellationToken);
    public sealed virtual void SetObjectLayerWideObjectTypes(Dictionary`2<XPClassInfo, XPObjectType> loadedTypes);
    public sealed virtual Dictionary`2<XPClassInfo, XPObjectType> GetObjectLayerWideObjectTypes();
    public sealed virtual void RegisterStaticTypes(XPClassInfo[] types);
    public sealed virtual bool IsStaticType(XPClassInfo type);
    public sealed virtual IObjectMap GetStaticCache(XPClassInfo info);
    public sealed virtual void ClearDatabase();
    public sealed virtual PurgeResult Purge();
    public sealed virtual IDataLayer get_DataLayer();
    public sealed virtual bool get_CanLoadCollectionObjects();
    public sealed virtual bool get_CanLoadCollectionObjectsAsynchronously();
    public sealed virtual Object[] LoadCollectionObjects(Session session, XPMemberInfo refProperty, object ownerObject);
    public sealed virtual Task`1<Object[]> LoadCollectionObjectsAsync(Session session, XPMemberInfo refProperty, object ownerObject, CancellationToken cancellationToken);
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    private sealed virtual override Task`1<object> DevExpress.Xpo.Helpers.ICommandChannelAsync.DoAsync(string command, object args, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.SizeAttribute : Attribute {
    private int size;
    public static int Unlimited;
    public static int DefaultStringMappingFieldSize;
    [DescriptionAttribute("Gets the size of the database column which the member’s data is stored in.")]
public int Size { get; }
    private SizeAttribute(XmlNode attributeNode);
    public SizeAttribute(int size);
    public int get_Size();
}
public enum DevExpress.Xpo.SortDirection : Enum {
    public int value__;
    public static SortDirection None;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("0")]
[EditorAttribute("DevExpress.Xpo.Design.SortingCollectionEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class DevExpress.Xpo.SortingCollection : object {
    private List`1<SortProperty> list;
    private EventHandler changed;
    public SortProperty Item { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    [DescriptionAttribute("Gets the number of elements contained within the collection.")]
public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public SortingCollection(SortProperty[] sortProperties);
    public SortingCollection(object owner, SortProperty[] sortProperties);
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    public void AddRange(SortProperty[] sortProperties);
    public void Add(SortingCollection sortProperties);
    public void Add(SortProperty sortProperty);
    public SortProperty get_Item(int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private void FireChanded();
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<SortProperty> System.Collections.Generic.IEnumerable<DevExpress.Xpo.SortProperty>.GetEnumerator();
}
public class DevExpress.Xpo.SortingCollectionSerializer : object {
    private static string SortingCollectionSerializerV2Prefix;
    public static String[] Serialize(SortingCollection collection);
    public static SortingCollection Deserialize(String[] collection);
    private static string Serialize(SortProperty property);
    private static SortProperty Deserialize(string strProperty);
}
public class DevExpress.Xpo.ThreadSafeDataLayer : BaseDataLayer {
    private AsyncReaderWriterLock ensuredTypesRwl;
    [DescriptionAttribute("This property always returns  null (Nothing in Visual Basic).")]
[BrowsableAttribute("False")]
public IDbConnection Connection { get; }
    public ThreadSafeDataLayer(XPDictionary dictionary, IDataStore provider, Action`1<XPDictionary> dictionaryInit);
    public ThreadSafeDataLayer(XPDictionary dictionary, IDataStore provider);
    public ThreadSafeDataLayer(XPDictionary dictionary, IDataStore provider, Assembly[] assemblies);
    public ThreadSafeDataLayer(XPDictionary dictionary, IDataStore provider, IEnumerable`1<Assembly> assemblies);
    public ThreadSafeDataLayer(XPDictionary dictionary, IDataStore provider, Type[] types);
    public ThreadSafeDataLayer(XPDictionary dictionary, IDataStore provider, IEnumerable`1<Type> types);
    public ThreadSafeDataLayer(IDataStore provider, Assembly[] assemblies);
    public ThreadSafeDataLayer(IDataStore provider, IEnumerable`1<Assembly> assemblies);
    public ThreadSafeDataLayer(IDataStore provider, Type[] types);
    public ThreadSafeDataLayer(IDataStore provider, IEnumerable`1<Type> types);
    public ThreadSafeDataLayer(IDataStore provider);
    protected virtual void OnClassInfoChanged(object sender, ClassInfoEventArgs e);
    public virtual UpdateSchemaResult UpdateSchema(bool doNotCreate, XPClassInfo[] types);
    [AsyncStateMachineAttribute("DevExpress.Xpo.ThreadSafeDataLayer/<UpdateSchemaAsync>d__14")]
public virtual Task`1<UpdateSchemaResult> UpdateSchemaAsync(CancellationToken cancellationToken, bool doNotCreate, XPClassInfo[] types);
    public virtual SelectedData SelectData(SelectStatement[] selects);
    [AsyncStateMachineAttribute("DevExpress.Xpo.ThreadSafeDataLayer/<SelectDataAsync>d__16")]
public virtual Task`1<SelectedData> SelectDataAsync(CancellationToken cancellationToken, SelectStatement[] selects);
    public virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    [AsyncStateMachineAttribute("DevExpress.Xpo.ThreadSafeDataLayer/<ModifyDataAsync>d__18")]
public virtual Task`1<ModificationResult> ModifyDataAsync(CancellationToken cancellationToken, ModificationStatement[] dmlStatements);
    public virtual IDbConnection get_Connection();
    public virtual IDbCommand CreateCommand();
    protected virtual void BeforeClassInfoSubscribe();
    protected virtual object Do(string command, object args);
    protected virtual Task`1<object> DoAsync(string command, object args, CancellationToken cancellationToken);
    private static void InitializeDictionary(XPDictionary dictionary, ICollection`1<XPClassInfo> types);
    public static void InitializeDictionary(XPDictionary dictionary, Type[] types);
    public static void InitializeDictionary(XPDictionary dictionary, IEnumerable`1<Type> types);
    public static void InitializeDictionary(XPDictionary dictionary, Assembly[] assemblies);
    public static void InitializeDictionary(XPDictionary dictionary, IEnumerable`1<Assembly> assemblies);
    public static void InitializeDictionary(XPDictionary dictionary);
    public static void PrepareDataStore(IDataStore dataStore, XPDictionary dictionary, XPClassInfo[] types);
    public static void PrepareDataStore(IDataStore dataStore, XPDictionary dictionary, IEnumerable`1<XPClassInfo> types);
    public static void PrepareDataStore(IDataStore dataStore, XPDictionary dictionary, Type[] types);
    public static void PrepareDataStore(IDataStore dataStore, XPDictionary dictionary, IEnumerable`1<Type> types);
    public static void PrepareDataStore(IDataStore dataStore, XPDictionary dictionary, Assembly[] assemblies);
    public static void PrepareDataStore(IDataStore dataStore, XPDictionary dictionary, IEnumerable`1<Assembly> assemblies);
    public static void PrepareDataStore(IDataStore dataStore, XPDictionary dictionary);
    public static void PrepareDataStore(IDataStore dataStore, Type[] types);
    public static void PrepareDataStore(IDataStore dataStore, IEnumerable`1<Type> types);
    public static void PrepareDataStore(IDataStore dataStore, Assembly[] assemblies);
    public static void PrepareDataStore(IDataStore dataStore, IEnumerable`1<Assembly> assemblies);
    public static void PrepareDataStore(IDataStore dataStore);
}
[DescriptionAttribute("Loads and saves persistent objects keeping track of every change to every persistent object during a transaction.")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[ToolboxBitmapAttribute("DevExpress.Xpo.UnitOfWork")]
public class DevExpress.Xpo.UnitOfWork : Session {
    protected internal bool IsUnitOfWork { get; }
    public UnitOfWork(IServiceProvider serviceProvider);
    public UnitOfWork(IContainer container);
    public UnitOfWork(IServiceProvider serviceProvider, IContainer container);
    public UnitOfWork(XPDictionary dictionary);
    public UnitOfWork(IServiceProvider serviceProvider, XPDictionary dictionary);
    public UnitOfWork(IDataLayer layer, IDisposable[] disposeOnDisconnect);
    public UnitOfWork(IServiceProvider serviceProvider, IDataLayer layer, IDisposable[] disposeOnDisconnect);
    public UnitOfWork(IObjectLayer layer, IDisposable[] disposeOnDisconnect);
    public UnitOfWork(IServiceProvider serviceProvider, IObjectLayer layer, IDisposable[] disposeOnDisconnect);
    protected internal virtual bool get_IsUnitOfWork();
    public void CommitChanges();
    public object CommitChangesAsync(AsyncCommitCallback callback);
    public Task CommitChangesAsync(CancellationToken cancellationToken);
    public void ReloadChangedObjects();
}
public enum DevExpress.Xpo.ValidateMemberOnSaveResult : Enum {
    public int value__;
    public static ValidateMemberOnSaveResult DoSaveMember;
    public static ValidateMemberOnSaveResult DoNotSaveMember;
    public static ValidateMemberOnSaveResult DoRaiseException;
}
[AttributeUsageAttribute("384")]
public class DevExpress.Xpo.ValueConverterAttribute : Attribute {
    private Type converterType;
    private ValueConverter converter;
    [DescriptionAttribute("Gets the converter’s type.")]
public Type ConverterType { get; public set; }
    [DescriptionAttribute("Gets the value converter.")]
public ValueConverter Converter { get; }
    public ValueConverterAttribute(Type converterType);
    private ValueConverterAttribute(XmlNode attributeNode);
    public Type get_ConverterType();
    public void set_ConverterType(Type value);
    public ValueConverter get_Converter();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("0")]
[EditorAttribute("DevExpress.Xpo.Design.ViewPropertiesCollectionEditor,DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class DevExpress.Xpo.ViewPropertiesCollection : CollectionBase {
    private XPView owner;
    public ViewProperty Item { get; }
    public ViewProperty Item { get; }
    public ViewProperty Item { get; }
    public ViewPropertiesCollection(XPView owner);
    public void Add(ViewProperty sortProperty);
    public void AddRange(ViewProperty[] sortProperties);
    public void Add(ViewPropertiesCollection sortProperties);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    public ViewProperty get_Item(int index);
    public ViewProperty get_Item(CriteriaOperator expression);
    public ViewProperty get_Item(string name);
}
[TypeConverterAttribute("DevExpress.Xpo.ViewPropertyConverter")]
public class DevExpress.Xpo.ViewProperty : object {
    private string name;
    private SortDirection sorting;
    private CriteriaOperator property;
    private bool group;
    private bool fetch;
    private XPView owner;
    [DescriptionAttribute("Gets or sets the property’s name.")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string Name { get; public set; }
    [DescriptionAttribute("Gets or sets the column’s sort order.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public SortDirection Sorting { get; public set; }
    [DescriptionAttribute("Gets or sets the expression used to filter rows, calculate the values in a column, or create an aggregate column.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[EditorAttribute("DevExpress.Xpo.Design.XPViewExpressionEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("Data")]
public CriteriaOperator Property { get; public set; }
    [DescriptionAttribute("Gets or sets whether the view is grouped by the values of this property (column).")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Data")]
public bool Group { get; public set; }
    [DescriptionAttribute("Gets or sets whether to retrieve data for the property from a data store.")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Data")]
public bool Fetch { get; public set; }
    public ViewProperty(string name, SortDirection sorting, CriteriaOperator property, bool group, bool fetch);
    public ViewProperty(string name, SortDirection sorting, string property, bool group, bool fetch);
    protected internal void SetOwner(XPView owner);
    private void ResetView();
    public string get_Name();
    public void set_Name(string value);
    public SortDirection get_Sorting();
    public void set_Sorting(SortDirection value);
    public CriteriaOperator get_Property();
    public void set_Property(CriteriaOperator value);
    public bool get_Group();
    public void set_Group(bool value);
    public bool get_Fetch();
    public void set_Fetch(bool value);
    private bool ShouldSerializeProperty();
    private sealed virtual override IDataColumnInfo DevExpress.Data.IDataColumnInfoProvider.GetInfo(object arguments);
}
internal class DevExpress.Xpo.ViewPropertyConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destinationType);
}
internal class DevExpress.Xpo.ViewPropertyDescriptor : PropertyDescriptor {
    private int index;
    private Type reportedType;
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public ViewPropertyDescriptor(string name, Type type, int index);
    public virtual bool get_IsReadOnly();
    public virtual object GetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Xpo.ViewRecord : object {
    private XPView view;
    private Object[] data;
    internal Object[] Data { get; }
    [DescriptionAttribute("Gets the view to which this record belongs.")]
public XPView View { get; }
    public object Item { get; }
    public object Item { get; }
    public object Item { get; }
    public ViewRecord(XPView view, Object[] data);
    internal Object[] get_Data();
    public XPView get_View();
    public object get_Item(int index);
    public object get_Item(string name);
    public object get_Item(CriteriaOperator property);
    public object GetObject();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[DesignerAttribute("DevExpress.Xpo.Design.XPCollectionDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
public abstract class DevExpress.Xpo.XPBaseCollection : Component {
    protected internal XPCollectionHelper Helper;
    private Nullable`1<bool> _CaseSensitive;
    private bool _DeleteObjectOnRemove;
    private XPDictionary designDictionary;
    private CollectionBindingBehavior bindingBehavior;
    private string _DisplayableProperties;
    private bool hasChangesDuringInit;
    protected bool Initializing;
    private IList filtered;
    private IList sorted;
    private IComparer sortedComparer;
    private bool _loadingEnabled;
    private int suspendChangesCount;
    private static ConcurrentDictionary`2<Type, bool> oldInvokeListChangedOverridenByType;
    private Nullable`1<bool> isOldInvokeListChangedOverriden;
    private static object EventListChanged;
    private UpdateStrategy strategy;
    private bool isDisposed;
    private Nullable`1<bool> _isDesignMode;
    private object newAdding;
    private IDictionary objectsEditingStarted;
    private static bool _EnableObjectChangedNotificationsWhileEditing;
    private long _ClearCount;
    private bool _IsLoaded;
    private bool isAsyncLoading;
    private object nowAdding;
    private object nowRemoving;
    private SortingCollection _Sorting;
    private bool _SelectDeleted;
    internal CriteriaOperator _Criteria;
    private Func`2<object, bool> validator;
    private CriteriaOperator _Filter;
    private static object EventResolveSession;
    private int _TopReturnedObjects;
    private int _SkipReturnedObjects;
    private ItemProperties itemProperties;
    private static XPBaseCollection rootDesignCollection;
    private static object EventCollectionChanged;
    private IEnumerable _HintCollection;
    private static int seq;
    private int seqNum;
    internal XPDictionary DesignDictionary { get; }
    protected IList Objects { get; }
    private UpdateStrategy Strategy { get; }
    protected bool CanFireChangedEvents { get; }
    protected bool IsDesignMode { get; }
    protected bool IsDesignMode2 { get; }
    [DescriptionAttribute("Specifies whether object changed notifications occur when editing a property.")]
[ObsoleteAttribute("That property breaks XPCollection's compatibility with DataSet. Use it at your own risk.")]
public static bool EnableObjectChangedNotificationsWhileEditing { get; public set; }
    [BrowsableAttribute("False")]
public long ClearCount { get; }
    [BrowsableAttribute("False")]
public bool IsLoaded { get; }
    [DescriptionAttribute("For internal use.")]
[BrowsableAttribute("False")]
public bool IsAsyncLoading { get; }
    [DescriptionAttribute("Gets or sets the sort settings for the current collection.")]
[MergablePropertyAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[CategoryAttribute("Data")]
public SortingCollection Sorting { get; public set; }
    [DescriptionAttribute("Gets or sets whether objects that are marked as deleted are retrieved by a collection from a data store.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool SelectDeleted { get; public set; }
    [DescriptionAttribute("Defines which operations a bound control can perform on a collection.
This enumeration has a FlagsAttribute that allows a bitwise combination of its member values.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[EditorAttribute("DevExpress.Xpo.Design.FlagsEnumEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("Options")]
public CollectionBindingBehavior BindingBehavior { get; public set; }
    [DescriptionAttribute("Gets or sets whether string comparisons during sorting and filtering of the XPBaseCollection are case-sensitive.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool CaseSensitive { get; public set; }
    [DescriptionAttribute("Gets or sets the criteria used to filter objects on the data store side.")]
[EditorAttribute("DevExpress.Xpo.Design.XPCollectionCriteriaEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public CriteriaOperator Criteria { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string CriteriaString { get; public set; }
    [DescriptionAttribute("Gets or sets whether the persistent object is deleted from the data store when it is removed from the collection.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool DeleteObjectOnRemove { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CriteriaOperator Filter { get; public set; }
    [DescriptionAttribute("Gets or sets the Session used by the current collection.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.SessionReferenceConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Data")]
public Session Session { get; public set; }
    [DescriptionAttribute("Gets or sets the displayable properties list for a bound control.")]
[EditorAttribute("DevExpress.Xpo.Design.DisplayablePropertiesEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[LocalizableAttribute("False")]
[CategoryAttribute("View")]
public string DisplayableProperties { get; public set; }
    [DescriptionAttribute("Gets or sets the maximum number of objects retrieved by the collection from a data store.")]
[DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public int TopReturnedObjects { get; public set; }
    [DescriptionAttribute("Gets or sets the number of objects to exclude when populating the collection with objects from a data store.")]
[DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public int SkipReturnedObjects { get; public set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    [DescriptionAttribute("Gets or sets whether loading of data from a data store to the collection is enabled.")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Options")]
public bool LoadingEnabled { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IEnumerable HintCollection { get; public set; }
    private Session DevExpress.Xpo.Helpers.ISessionProvider.Session { get; }
    private IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.ObjectLayer { get; }
    private IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.DataLayer { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    private XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.ClassInfo { get; }
    protected XPBaseCollection(XPCollectionHelper helper);
    protected XPBaseCollection(Session session, object theOwner, XPMemberInfo refProperty);
    protected XPBaseCollection(bool loadingEnabled);
    protected XPBaseCollection(Session session, XPClassInfo objType, CriteriaOperator theCriteria, SortProperty[] sortProperties);
    protected XPBaseCollection(Session session, XPClassInfo objType, bool loadingEnabled);
    protected XPBaseCollection(Session session, XPClassInfo objType, Session originalSession, IEnumerable originalCollection, CriteriaOperator copyFilter, bool caseSensitive);
    protected XPBaseCollection(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, XPClassInfo objType, CriteriaOperator condition, bool selectDeleted);
    private static XPBaseCollection();
    internal XPDictionary get_DesignDictionary();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private bool IsFilterFit(object theObject);
    protected IList get_Objects();
    private bool IsFilteringAndSortingEnsured();
    private IList EnsureFilteredAndSorted();
    private void ClearFilteredSortedStrategy();
    protected void Clear();
    [ObsoleteAttribute("Use InvokeListChanged(ListChangedType changeType, string propertyName, int newIndex) instead.")]
protected virtual void InvokeListChanged(ListChangedType changeType, int newIndex);
    protected virtual void InvokeListChanged(ListChangedType changeType, string propertyName, int newIndex);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private void InvokeListChanged(ListChangedType changeType, string propertyName, int newIndex, int oldIndex);
    protected virtual void GoMuteIfNeeded();
    private void OnListChanged(ListChangedType changeType, string propertyName, int newIndex, int oldIndex);
    private void ValidateBindingListChanged(ListChangedType changeType, int newIndex, int oldIndex);
    private UpdateStrategy get_Strategy();
    protected virtual void OnCollectionChanged(XPCollectionChangedEventArgs args);
    public void SuspendChangedEvents();
    public void ResumeChangedEvents();
    protected bool get_CanFireChangedEvents();
    protected virtual void Dispose(bool disposing);
    private bool CanAddNewObject();
    private void InitData();
    internal void SortingChanged();
    private void Reset();
    protected bool get_IsDesignMode();
    protected bool get_IsDesignMode2();
    public static bool get_EnableObjectChangedNotificationsWhileEditing();
    public static void set_EnableObjectChangedNotificationsWhileEditing(bool value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
protected virtual void SuppressEvents(object sender);
    private void UnsuppressEvents(object sender);
    private bool IsEventsSuppressed(object sender);
    private sealed virtual override void DevExpress.Xpo.Helpers.IObjectChange.OnObjectChanged(object sender, ObjectChangeEventArgs args);
    private void PersistentCriteriaEvaluationBehaviorFillInTransaction(CriteriaOperator condition);
    private void PersistentCriteriaEvaluationBehaviorFillBeforeTransaction(CriteriaOperator condition);
    public long get_ClearCount();
    public bool get_IsLoaded();
    public sealed virtual ObjectsQuery BeginLoad();
    public ObjectsQuery BeginLoad(bool force);
    public Task`1<ObjectsQuery> BeginLoadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPBaseCollection/<BeginLoadAsync>d__87")]
public Task`1<ObjectsQuery> BeginLoadAsync(bool force, CancellationToken cancellationToken);
    private ObjectsQuery CreateObjectsQueryForLoad();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public XPClassInfo GetRealFetchClassInfo();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public CriteriaOperator GetRealFetchCriteria();
    public int EvaluateDatastoreCount();
    private IEnumerable GetHintContentCore();
    private static ICollection FilterList(Session session, XPClassInfo objType, IEnumerable originalCollection, CriteriaOperator copyFilter, bool caseSensitive);
    internal static Func`2<object, bool> CreatePredicate(Session session, XPClassInfo objType, CriteriaOperator criteria, bool caseSensitive);
    public sealed virtual void EndLoad(IEnumerable objects);
    public virtual void Load();
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPBaseCollection/<LoadAsync>d__97")]
public virtual Task LoadAsync(CancellationToken cancellationToken);
    public bool get_IsAsyncLoading();
    public virtual bool LoadAsync();
    public virtual bool LoadAsync(AsyncLoadObjectsCallback callback);
    private XPPropertyDescriptorCollection GetProps(IList objects);
    private XPClassInfo GetTargetClass();
    private IComparer CreateComparer();
    public virtual void Reload();
    public virtual int BaseIndexOf(object value);
    public virtual int BaseAdd(object newObject);
    public virtual bool BaseRemove(object theObject);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPBaseCollection/<BaseRemoveAsync>d__112")]
public Task`1<bool> BaseRemoveAsync(object theObject, CancellationToken cancellationToken);
    private bool ProcessBaseRemove(object theObject);
    public virtual object BaseIndexer(int index);
    public void BaseAddRange(ICollection objects);
    private void AddRangeCore(ICollection c);
    public SortingCollection get_Sorting();
    public void set_Sorting(SortingCollection value);
    private bool ShouldSerializeSorting();
    private void sortingCollection_ListChanged(object sender, EventArgs e);
    private void SetSorting(SortingCollection value);
    public bool get_SelectDeleted();
    public void set_SelectDeleted(bool value);
    public CollectionBindingBehavior get_BindingBehavior();
    public void set_BindingBehavior(CollectionBindingBehavior value);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public CriteriaOperator get_Criteria();
    public void set_Criteria(CriteriaOperator value);
    public string get_CriteriaString();
    public void set_CriteriaString(string value);
    public bool get_DeleteObjectOnRemove();
    public void set_DeleteObjectOnRemove(bool value);
    public sealed virtual CriteriaOperator get_Filter();
    public sealed virtual void set_Filter(CriteriaOperator value);
    public Session get_Session();
    public void set_Session(Session value);
    private bool ShouldSerializeSession();
    private bool ShouldSerializeCaseSensitive();
    private void ResetCaseSensitive();
    private Session DoResolveSession();
    protected virtual void OnResolveSession(ResolveSessionEventArgs args);
    public void add_ResolveSession(ResolveSessionEventHandler value);
    public void remove_ResolveSession(ResolveSessionEventHandler value);
    public abstract virtual XPClassInfo GetObjectClassInfo();
    protected virtual void RenewObjectClassInfoOnSessionChange();
    public string get_DisplayableProperties();
    public void set_DisplayableProperties(string value);
    public static StringCollection GetDefaultDisplayableProperties(XPClassInfo objectInfo);
    private bool ShouldSerializeDisplayableProperties();
    public int get_TopReturnedObjects();
    public void set_TopReturnedObjects(int value);
    public int get_SkipReturnedObjects();
    public void set_SkipReturnedObjects(int value);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    protected virtual object CreateAddNewInstance();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    public void add_CollectionChanged(XPCollectionChangedEventHandler value);
    public void remove_CollectionChanged(XPCollectionChangedEventHandler value);
    public bool get_LoadingEnabled();
    public void set_LoadingEnabled(bool value);
    public IEnumerable get_HintCollection();
    public void set_HintCollection(IEnumerable value);
    private sealed virtual override bool DevExpress.Xpo.Helpers.IXPPrefetchableAssociationList.NeedPrefetch();
    private sealed virtual override void DevExpress.Xpo.Helpers.IXPPrefetchableAssociationList.FinishPrefetch(ICollection hint);
    public void PreFetch(String[] propertyPaths);
    private sealed virtual override Session DevExpress.Xpo.Helpers.ISessionProvider.get_Session();
    public virtual string ToString();
    private sealed virtual override IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.get_ObjectLayer();
    private sealed virtual override IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.get_DataLayer();
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
    private sealed virtual override XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.get_ClassInfo();
}
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
[OptimisticLockingAttribute("True")]
public abstract class DevExpress.Xpo.XPBaseObject : PersistentBase {
    private ObjectState _state;
    private List`1<object> _values;
    public static bool AutoSaveOnEndEdit;
    private ObjectChangeEventHandler handler;
    [BrowsableAttribute("False")]
public object This { get; }
    [ObsoleteAttribute("Use the XPBaseObject.IsLoading property instead.", "True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[MemberDesignTimeVisibilityAttribute("False")]
public bool Loading { get; }
    protected XPBaseObject(Session session);
    protected XPBaseObject(Session session, XPClassInfo classInfo);
    private static XPBaseObject();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    private sealed virtual override void System.ComponentModel.IEditableObject.BeginEdit();
    private sealed virtual override void System.ComponentModel.IEditableObject.EndEdit();
    private sealed virtual override void System.ComponentModel.IEditableObject.CancelEdit();
    protected void RaiseChangeEvent(ObjectChangeEventArgs args);
    private bool GetState(ObjectState state);
    private void SetState(ObjectState state, bool value);
    protected virtual void BeginEdit();
    private void SaveState();
    private bool IsGoodForIEditableObjectSaveRestoreState(XPMemberInfo mi);
    private void SaveState(object target, ObjectSet objects);
    private void RestoreState();
    private void RestoreState(object target, Int32& index, ObjectSet objects);
    protected virtual void EndEdit();
    protected virtual void DoEndEditAction();
    protected virtual void CancelEdit();
    protected void OnChanged();
    protected void OnChanged(string propertyName);
    protected virtual void OnChanged(string propertyName, object oldValue, object newValue);
    [ObsoleteAttribute("Use GetPropertyValue<T> instead", "True")]
[EditorBrowsableAttribute("1")]
protected object GetPropertyValueWithDefault(string propertyName, object defaultValue);
    private void CommonCtorCode();
    public object get_This();
    public static void AddChangedEventHandler(object persistentObject, ObjectChangeEventHandler handler);
    public static void RemoveChangedEventHandler(object persistentObject, ObjectChangeEventHandler handler);
    public static void AddChangedEventHandler(object persistentObject, IObjectChange handler);
    public static void RemoveChangedEventHandler(object persistentObject, IObjectChange handler);
    protected virtual void TriggerObjectChanged(ObjectChangeEventArgs args);
    public static void RaiseChangedEvent(object persistentObject, ObjectChangeEventArgs args);
    public void add_Changed(ObjectChangeEventHandler value);
    public void remove_Changed(ObjectChangeEventHandler value);
    public void Save();
    public void Delete();
    public void Reload();
    private sealed virtual override int System.IComparable.CompareTo(object value);
    [ObsoleteAttribute("Use the XPBaseObject.OnLoaded method instead.", "True")]
[EditorBrowsableAttribute("1")]
protected virtual void AfterLoad();
    [ObsoleteAttribute("Use the XPBaseObject.OnSaving method instead.", "True")]
[EditorBrowsableAttribute("1")]
protected virtual void BeforeSave();
    [ObsoleteAttribute("Use the XPBaseObject.OnLoading method instead.", "True")]
[EditorBrowsableAttribute("1")]
protected virtual void BeginLoad();
    [ObsoleteAttribute("Use the XPBaseObject.OnLoaded method instead.", "True")]
[EditorBrowsableAttribute("1")]
protected virtual void EndLoad();
    public bool get_Loading();
    protected virtual void OnDeleting();
    protected virtual void OnSaved();
    protected virtual void OnLoaded();
    protected XPCollection GetCollection(string propertyName);
    protected XPCollection`1<T> GetCollection(string propertyName);
    public void SetMemberValue(string propertyName, object newValue);
    public object GetMemberValue(string propertyName);
    protected virtual void Invalidate(bool disposing);
    public object Evaluate(CriteriaOperator expression);
    public bool Fit(CriteriaOperator condition);
    public object Evaluate(string expression);
    public bool Fit(string condition);
    public object EvaluateAlias(string memberName);
    protected virtual void FireChangedByCustomPropertyStore(XPMemberInfo member, object oldValue, object newValue);
    protected virtual void FireChangedByXPPropertyDescriptor(string memberName);
    protected virtual void BeforeChangeByXPPropertyDescriptor();
    protected virtual void AfterChangeByXPPropertyDescriptor();
    private sealed virtual override void DevExpress.Xpo.IXPReceiveOnChangedFromXPPropertyDescriptor.FireChangedByXPPropertyDescriptor(string memberName);
    private sealed virtual override void DevExpress.Xpo.IXPReceiveOnChangedFromXPPropertyDescriptor.BeforeChangeByXPPropertyDescriptor();
    private sealed virtual override void DevExpress.Xpo.IXPReceiveOnChangedFromXPPropertyDescriptor.AfterChangeByXPPropertyDescriptor();
}
[DefaultMemberAttribute("Object")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DefaultPropertyAttribute("DataSource")]
[DefaultEventAttribute("ListChanged")]
[DescriptionAttribute("A bindable collection of persistent objects. Can serve as a data source for data-aware controls.")]
[DesignerSerializerAttribute("DevExpress.Xpo.Design.XPBindingSourceSerializer, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "Microsoft.DotNet.DesignTools.Serialization.CodeDomSerializer, Microsoft.DotNet.DesignTools.Server")]
[DesignerAttribute("DevExpress.Xpo.Design.XPBindingSourceDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
public class DevExpress.Xpo.XPBindingSource : Component {
    protected bool Initializing;
    private bool hasChangesDuringInit;
    private IServiceProvider serviceProvider;
    private Nullable`1<bool> _isDesignMode;
    private bool disableDesignModeDetection;
    private object dataSource;
    private bool isSingleObjectDataSource;
    private IList innerList;
    private CollectionBindingBehavior bindingBehavior;
    private string displayableProperties;
    private Type objectType;
    private Session inMemorySession;
    private XPDictionary designDictionary;
    private XPDictionary dictionary;
    private XPClassInfo objectClassInfo;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    [CompilerGeneratedAttribute]
private EventHandler DataSourceChanged;
    private object nowAddingObject;
    private bool IsDesignMode { get; }
    [DescriptionAttribute("Gets or sets a data source the XPBindingSource binds to a control.")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Xpo.Design.XPBindingSourceDataSourceReferenceConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Data")]
public object DataSource { get; public set; }
    private IList InnerList { get; }
    [DescriptionAttribute("Defines operations the bound control can perform with the data source.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[EditorAttribute("DevExpress.Xpo.Design.FlagsEnumEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("Options")]
public CollectionBindingBehavior BindingBehavior { get; public set; }
    [DescriptionAttribute("Gets or sets a list of properties available for binding.")]
[EditorAttribute("DevExpress.Xpo.Design.DisplayablePropertiesEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("View")]
[LocalizableAttribute("False")]
public string DisplayableProperties { get; public set; }
    [DescriptionAttribute("Gets or sets the XPClassInfo metadata that describes the type of items the data source contains.")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Xpo.Design.ObjectClassInfoTypeConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[MergablePropertyAttribute("False")]
[RefreshPropertiesAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public XPClassInfo ObjectClassInfo { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("1")]
public Type ObjectType { get; public set; }
    [BrowsableAttribute("False")]
private Session DevExpress.Xpo.Helpers.ISessionProvider.Session { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public XPDictionary Dictionary { get; public set; }
    private IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.ObjectLayer { get; }
    private IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.DataLayer { get; }
    private XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.ClassInfo { get; }
    [BrowsableAttribute("False")]
public object Object { get; public set; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    [BrowsableAttribute("False")]
public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public XPBindingSource(IServiceProvider serviceProvider);
    public XPBindingSource(IContainer container);
    public XPBindingSource(IServiceProvider serviceProvider, IContainer container);
    private void InitData();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private bool get_IsDesignMode();
    [EditorBrowsableAttribute("1")]
public void DisableDesignModeDetection();
    private bool IsDesignerHosted(bool useSession);
    private ISite GetDesignerHostSite(bool useSession);
    private bool IsDesignerHostSite(ISite site);
    public object get_DataSource();
    public void set_DataSource(object value);
    private Type GetEnumerableElementType(IEnumerable enumerable);
    private void SubscribeDataSourceEvents();
    private void UnsubscribeDataSourceEvents();
    private IList get_InnerList();
    public CollectionBindingBehavior get_BindingBehavior();
    public void set_BindingBehavior(CollectionBindingBehavior value);
    public string get_DisplayableProperties();
    public void set_DisplayableProperties(string value);
    private String[] GetDefaultDisplayableProperties();
    private String[] GetClassInfoDisplayableProperties(XPClassInfo classInfo);
    private String[] GetDataSourceDisplayableProperties();
    public XPClassInfo get_ObjectClassInfo();
    public void set_ObjectClassInfo(XPClassInfo value);
    private void ThrowIfBadClassInfo(XPClassInfo newClassInfo);
    private void ThrowIfBadObjectType(Type newObjectType);
    private bool CanSetObjectClassInfo();
    public Type get_ObjectType();
    public void set_ObjectType(Type value);
    private sealed virtual override Session DevExpress.Xpo.Helpers.ISessionProvider.get_Session();
    public sealed virtual XPDictionary get_Dictionary();
    public void set_Dictionary(XPDictionary value);
    private sealed virtual override IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.get_ObjectLayer();
    private sealed virtual override IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.get_DataLayer();
    private sealed virtual override XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.get_ClassInfo();
    private Session GetSession();
    private XPDictionary GetDictionary(bool useSession);
    private XPClassInfo GetObjectClassInfo();
    private void Reset();
    private void PropertyDescriptorChanged();
    private void InvokeListChanged(ListChangedType changeType, int newIndex, int oldIndex);
    private void InvokeDataSourceChanged();
    private void OnInnerListChanged(object sender, ListChangedEventArgs e);
    private void OnInnerObjectNotifyPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnInnerListNotifyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DataSourceChanged(EventHandler value);
    private bool ShouldSerializeDisplayableProperties();
    private bool ShouldSerializeObjectType();
    private sealed virtual override void DevExpress.Xpo.Helpers.IObjectChange.OnObjectChanged(object sender, ObjectChangeEventArgs args);
    public object get_Object(int index);
    public void set_Object(int index, object value);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
internal class DevExpress.Xpo.XPBindingSourcePropertyDescriptor : XPPropertyDescriptorBase {
    private XPMemberInfo targetMember;
    private XPClassInfo objectType;
    private MemberInfoCollection path;
    private Type propertyType;
    private ValueAccessor accessor;
    private string displayName;
    private string memberName;
    public string DisplayName { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public XPMemberInfo MemberInfo { get; }
    public XPBindingSourcePropertyDescriptor(XPClassInfo objectType, string propertyName, ISessionProvider sessionProvider);
    public virtual string get_DisplayName();
    public virtual bool get_IsReadOnly();
    protected virtual void FillAttributes(IList attributeList);
    public virtual object GetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public XPMemberInfo get_MemberInfo();
    public virtual void AddValueChanged(object component, EventHandler handler);
    public virtual void RemoveValueChanged(object component, EventHandler handler);
    private sealed virtual override void DevExpress.Xpo.Helpers.IObjectChange.OnObjectChanged(object sender, ObjectChangeEventArgs arg);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Xpo.XPBindingSourcePropertyDescriptorCollection : PropertyDescriptorCollection {
    private XPClassInfo objectType;
    private ISessionProvider sessionProvider;
    public PropertyDescriptor Item { get; }
    public PropertyDescriptor Item { get; }
    public XPBindingSourcePropertyDescriptorCollection(XPClassInfo objectType, String[] displayableProperties, ISessionProvider sessionProvider);
    public virtual PropertyDescriptor Find(string name, bool ignoreCase);
    public virtual PropertyDescriptor get_Item(string itemIndex);
    public virtual PropertyDescriptor get_Item(int itemIndex);
    public PropertyDescriptor FindCaseSmart(string name);
}
[XmlTypeAttribute("XPClassInfo")]
public class DevExpress.Xpo.XPClassInfoStub : object {
    private string className;
    private Dictionary`2<string, int> members;
    private string keyFieldName;
    private string optimisticLockFieldName;
    private string optimisticLockFieldInDataLayerName;
    private XPClassInfoStubMemberItem[] membersList;
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public string ClassName { get; public set; }
    [XmlIgnoreAttribute]
private Dictionary`2<string, int> Members { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[XmlArrayAttribute]
public XPClassInfoStubMemberItem[] MembersList { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public string KeyFieldName { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public string OptimisticLockFieldName { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public string OptimisticLockFieldInDataLayerName { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public int MemberCount { get; }
    public XPClassInfoStub(string className);
    public string get_ClassName();
    public void set_ClassName(string value);
    private Dictionary`2<string, int> get_Members();
    public XPClassInfoStubMemberItem[] get_MembersList();
    public void set_MembersList(XPClassInfoStubMemberItem[] value);
    public string get_KeyFieldName();
    public void set_KeyFieldName(string value);
    public string get_OptimisticLockFieldName();
    public void set_OptimisticLockFieldName(string value);
    public string get_OptimisticLockFieldInDataLayerName();
    public void set_OptimisticLockFieldInDataLayerName(string value);
    private static Dictionary`2<string, int> GetMembers(XPClassInfoStubMemberItem[] newMembersList);
    public int get_MemberCount();
    public int GetMemberIndex(string memberName, bool raiseException);
    public object GetMemberValue(XPObjectStub obj, string memberName);
    public void SetMemberValue(XPObjectStub obj, string memberName, object value);
    public object GetMemberOldValue(XPObjectStub obj, string memberName);
    public object GetMemberHasOldValue(XPObjectStub obj, string memberName);
    public void SetMemberOldValue(XPObjectStub obj, string memberName, object value);
    public bool IsMemberChanged(XPObjectStub obj, string memberName);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static XPClassInfoStub FromClassInfo(XPClassInfo classInfo);
}
[XmlTypeAttribute("XPMember")]
public class DevExpress.Xpo.XPClassInfoStubMemberItem : ValueType {
    public string Name;
    public int Index;
    public XPClassInfoStubMemberItem(string name, int index);
}
[XmlTypeAttribute("OldValueContainer")]
public class DevExpress.Xpo.XPClassInfoStubOldValueContainer : object {
    public object Data;
    public XPClassInfoStubOldValueContainer(object data);
}
[DefaultMemberAttribute("Object")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DefaultPropertyAttribute("Session")]
[DefaultEventAttribute("ListChanged")]
[DesignerSerializerAttribute("DevExpress.Xpo.Design.XPCollectionSerializer, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "Microsoft.DotNet.DesignTools.Serialization.CodeDomSerializer, Microsoft.DotNet.DesignTools.Server")]
[DescriptionAttribute("Represents a collection of persistent objects. Can serve as a data source for data-aware controls.")]
public class DevExpress.Xpo.XPCollection : XPBaseCollection {
    private Type objectType;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
public Type ObjectType { get; public set; }
    [DescriptionAttribute("Gets or sets the metadata information that describes the type of objects stored in the current collection.")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("DevExpress.Xpo.Design.ObjectClassInfoTypeConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[MergablePropertyAttribute("False")]
[RefreshPropertiesAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public XPClassInfo ObjectClassInfo { get; public set; }
    [BrowsableAttribute("False")]
public object Object { get; }
    protected XPCollection(XPCollectionHelper helper);
    public XPCollection(IContainer container);
    public XPCollection(Session session, object theOwner, XPMemberInfo refProperty);
    public XPCollection(Type objType);
    public XPCollection(Type objType, CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XPCollection(Session session, Type objType);
    public XPCollection(Session session, XPClassInfo objType);
    public XPCollection(Session session, Type objType, CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XPCollection(Session session, XPClassInfo objType, CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XPCollection(Session session, XPClassInfo objType, bool loadingEnabled);
    public XPCollection(Session session, Type objType, bool loadingEnabled);
    public XPCollection(Session session, XPClassInfo objType, IEnumerable originalCollection, CriteriaOperator copyFilter, bool caseSensitive);
    public XPCollection(Session session, XPClassInfo objType, IEnumerable originalCollection, CriteriaOperator copyFilter);
    public XPCollection(Session session, XPClassInfo objType, IEnumerable originalCollection);
    public XPCollection(Session session, XPBaseCollection originalCollection, CriteriaOperator copyFilter);
    public XPCollection(Session session, XPBaseCollection originalCollection, CriteriaOperator copyFilter, bool caseSensitive);
    public XPCollection(XPBaseCollection originalCollection, CriteriaOperator filter);
    public XPCollection(XPBaseCollection originalCollection, CriteriaOperator filter, bool caseSensitive);
    public XPCollection(XPBaseCollection originalCollection);
    public XPCollection(Session session, XPBaseCollection originalCollection);
    public XPCollection(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, XPClassInfo objType, CriteriaOperator condition, bool selectDeleted);
    public XPCollection(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, XPClassInfo objType, CriteriaOperator condition);
    public XPCollection(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, Type objType, CriteriaOperator condition);
    public Type get_ObjectType();
    public void set_ObjectType(Type value);
    protected virtual void RenewObjectClassInfoOnSessionChange();
    public virtual XPClassInfo GetObjectClassInfo();
    public XPClassInfo get_ObjectClassInfo();
    public void set_ObjectClassInfo(XPClassInfo value);
    public object Lookup(object key);
    public int Add(object newObject);
    public int IndexOf(object theObject);
    public void Remove(object theObject);
    public object get_Object(int index);
    public void AddRange(ICollection objects);
}
[DefaultMemberAttribute("Object")]
[DefaultPropertyAttribute("Session")]
[DefaultEventAttribute("ListChanged")]
[DesignerSerializerAttribute("DevExpress.Xpo.Design.XPCollectionSerializer, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "Microsoft.DotNet.DesignTools.Serialization.CodeDomSerializer, Microsoft.DotNet.DesignTools.Server")]
public class DevExpress.Xpo.XPCollection`1 : XPBaseCollection {
    [BrowsableAttribute("False")]
public T Object { get; }
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    private int System.Collections.Generic.ICollection<T>.Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public XPCollection`1(Session session, object theOwner, XPMemberInfo refProperty);
    public XPCollection`1(CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XPCollection`1(Session session);
    public XPCollection`1(Session session, CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XPCollection`1(Session session, bool loadingEnabled);
    public XPCollection`1(Session session, IEnumerable originalCollection, CriteriaOperator copyFilter, bool caseSensitive);
    public XPCollection`1(Session session, IEnumerable originalCollection, CriteriaOperator copyFilter);
    public XPCollection`1(Session session, IEnumerable originalCollection);
    public XPCollection`1(Session session, XPBaseCollection originalCollection, CriteriaOperator copyFilter, bool caseSensitive);
    public XPCollection`1(Session session, XPBaseCollection originalCollection, CriteriaOperator copyFilter);
    public XPCollection`1(XPBaseCollection originalCollection, CriteriaOperator filter);
    public XPCollection`1(XPBaseCollection originalCollection, CriteriaOperator filter, bool caseSensitive);
    public XPCollection`1(XPBaseCollection originalCollection);
    public XPCollection`1(Session session, XPBaseCollection originalCollection);
    public XPCollection`1(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, CriteriaOperator condition, bool selectDeleted);
    public XPCollection`1(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, CriteriaOperator condition);
    protected virtual void RenewObjectClassInfoOnSessionChange();
    public virtual XPClassInfo GetObjectClassInfo();
    public T Lookup(object key);
    public sealed virtual void Add(T newObject);
    public sealed virtual int IndexOf(T theObject);
    public sealed virtual bool Remove(T theObject);
    public T get_Object(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<T>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    [IteratorStateMachineAttribute("DevExpress.Xpo.XPCollection`1/<System-Collections-Generic-IEnumerable<T>-GetEnumerator>d__37")]
private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public void AddRange(IEnumerable`1<T> objects);
}
public class DevExpress.Xpo.XPCollectionChangedEventArgs : EventArgs {
    public XPCollectionChangedType CollectionChangedType;
    public object ChangedObject;
    public int NewIndex;
    public XPCollectionChangedEventArgs(XPCollectionChangedType collectionChangedType, object changedObject, int newIndex);
    public XPCollectionChangedEventArgs(XPCollectionChangedType collectionChangedType, object changedObject);
}
public class DevExpress.Xpo.XPCollectionChangedEventHandler : MulticastDelegate {
    public XPCollectionChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XPCollectionChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XPCollectionChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum DevExpress.Xpo.XPCollectionChangedType : Enum {
    public int value__;
    public static XPCollectionChangedType BeforeAdd;
    public static XPCollectionChangedType AfterAdd;
    public static XPCollectionChangedType BeforeRemove;
    public static XPCollectionChangedType AfterRemove;
}
public class DevExpress.Xpo.XPCursor : object {
    private Session session;
    private int topReturnedObjects;
    private XPClassInfo objInfo;
    private SortingCollection sorting;
    private CriteriaOperator criteria;
    private int pageSize;
    private bool selectDeleted;
    private PageSelector pageSelector;
    private bool IsLoaded { get; }
    [DescriptionAttribute("Gets the number of persistent objects within the collection.")]
public int Count { get; }
    [DescriptionAttribute("Gets or sets the maximum number of persistent objects that can be contained in a single page.")]
public int PageSize { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    [DescriptionAttribute("Provides access to the collection whose elements identify the sorted columns in a data store.")]
public SortingCollection Sorting { get; }
    [DescriptionAttribute("Gets or sets the maximum number of objects retrieved by the XPCursor collection.")]
public int TopReturnedObjects { get; public set; }
    [DescriptionAttribute("Gets the metadata information for the persistent objects retrieved by the collection.")]
public XPClassInfo ObjectClassInfo { get; }
    [DescriptionAttribute("Gets the session which is used to load and save persistent objects.")]
public Session Session { get; }
    [DescriptionAttribute("Gets or sets whether deleted objects are retrieved by the XPCursor the next time it is reloaded.")]
public bool SelectDeleted { get; public set; }
    public XPCursor(Type objType);
    public XPCursor(Type objType, CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XPCursor(Session session, Type objType);
    public XPCursor(Session session, XPClassInfo objType);
    public XPCursor(Session session, Type objType, CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XPCursor(Session session, XPClassInfo objType, CriteriaOperator theCriteria);
    public XPCursor(Session session, XPClassInfo objType, CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XPCursor(Session session, XPClassInfo objType, IList keysList);
    public XPCursor(Session session, Type objType, IList keysList);
    private bool get_IsLoaded();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public int get_PageSize();
    public void set_PageSize(int value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public SortingCollection get_Sorting();
    public int get_TopReturnedObjects();
    public void set_TopReturnedObjects(int value);
    public XPClassInfo get_ObjectClassInfo();
    public Session get_Session();
    public bool get_SelectDeleted();
    public void set_SelectDeleted(bool value);
    protected void Clear();
    protected void Load();
}
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
[DeferredDeletionAttribute]
public abstract class DevExpress.Xpo.XPCustomObject : XPBaseObject {
    protected XPCustomObject(Session session);
    protected XPCustomObject(Session session, XPClassInfo classInfo);
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
[DeferredDeletionAttribute]
public class DevExpress.Xpo.XPDataObject : XPBaseObject {
    public XPDataObject(Session session, XPClassInfo classInfo);
}
[DefaultMemberAttribute("Item")]
[DescriptionAttribute("Represents the data view that displays result set contents.")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DesignerAttribute("DevExpress.Xpo.Design.XPDataViewDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
public class DevExpress.Xpo.XPDataView : Component {
    private Nullable`1<bool> _isDesignMode;
    private ArrayList objects;
    private bool Initializing;
    private Nullable`1<bool> caseSensitive;
    private bool hasChangesDuringInit;
    private XPDictionary designDictionary;
    private DataViewPropertiesCollection props;
    private Func`2<object, bool> fitPredicate;
    private CriteriaOperator filter;
    private ArrayList sorted;
    private ArrayList filtered;
    private SortingCollection sorting;
    private PropertyDescriptorCollection displayProps;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler listChanged;
    private XPDictionary dictionary;
    protected bool IsDesignMode { get; }
    private ArrayList Objects { get; }
    [DescriptionAttribute("Gets or sets whether string comparisons evaluated by the XPDataView on the client are case-sensitive.")]
[CategoryAttribute("Data")]
public bool CaseSensitive { get; public set; }
    private ArrayList Sorted { get; }
    private ArrayList Filtered { get; }
    public DataViewRecord Item { get; }
    internal XPDictionary DesignDictionary { get; }
    [DescriptionAttribute("Provides access to the data view’s columns.")]
[DesignerSerializationVisibilityAttribute("2")]
[CategoryAttribute("View")]
public DataViewPropertiesCollection Properties { get; }
    [DescriptionAttribute("Gets or sets the criteria used to perform client-side filtering of data view rows.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("DevExpress.Xpo.Design.XPDataViewCriteriaEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("Data")]
public CriteriaOperator Filter { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string FilterString { get; public set; }
    [DescriptionAttribute("Provides access to the collection whose elements specify sorting options for the data view.")]
[DesignerSerializationVisibilityAttribute("2")]
[EditorAttribute("DevExpress.Xpo.Design.XPViewSortingCollectionEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("Data")]
public SortingCollection Sorting { get; public set; }
    internal PropertyDescriptorCollection DisplayProps { get; }
    [BrowsableAttribute("False")]
public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public XPDictionary Dictionary { get; public set; }
    public XPDataView(IContainer container);
    public XPDataView(XPDictionary dictionary);
    public XPDataView(XPDictionary dictionary, IList`1<string> names, IList`1<Type> types);
    public XPDataView(XPDictionary dictionary, XPClassInfo classInfo);
    public XPDataView(XPDictionary dictionary, XPClassInfo classInfo, SelectedData data);
    public XPDataView(XPDictionary dictionary, List`1<XPMemberInfo> memberInfoList);
    public XPDataView(XPDictionary dictionary, XPClassInfo classInfo, String[] members);
    public XPDataView(XPDictionary dictionary, XPClassInfo classInfo, LoadDataMemberOrderItem[] members, SelectedData data);
    protected bool get_IsDesignMode();
    private ArrayList get_Objects();
    private ArrayList GetSampleData();
    internal void Clear();
    internal void ClearProps();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private IComparer CreateComparer();
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    private bool ShouldSerializeCaseSensitive();
    private void ResetCaseSensitive();
    private ArrayList get_Sorted();
    private bool IsFilterFit(object theObject);
    private ArrayList get_Filtered();
    public void LoadData(SelectedData data);
    public static SelectStatementResult GetTargetResultSet(SelectedData data);
    private ArrayList LoadDataInternal(SelectedData data);
    public void LoadOrderedData(LoadDataMemberOrderItem[] members, SelectedData data);
    private ArrayList LoadOrderedDataInternal(LoadDataMemberOrderItem[] members, SelectedData data);
    public DataViewRecord get_Item(int index);
    internal XPDictionary get_DesignDictionary();
    public DataViewPropertiesCollection get_Properties();
    public sealed virtual CriteriaOperator get_Filter();
    public sealed virtual void set_Filter(CriteriaOperator value);
    public string get_FilterString();
    public void set_FilterString(string value);
    private void ResetValidator();
    private void Reset(bool metadataChanged);
    public SortingCollection get_Sorting();
    public void set_Sorting(SortingCollection value);
    private bool ShouldSerializeSorting();
    public void PopulateProperties(XPClassInfo classInfo);
    public void PopulateProperties(List`1<XPMemberInfo> memberInfoList);
    public void PopulateProperties(XPClassInfo classInfo, String[] members);
    public void PopulatePropertiesOrdered(XPClassInfo classInfo, LoadDataMemberOrderItem[] members);
    private void AddProperty(XPMemberInfo mi);
    public DataViewProperty AddProperty(string name, Type valueType);
    private PropertyDescriptorCollection GetProperties(DataViewPropertiesCollection properties);
    internal PropertyDescriptorCollection get_DisplayProps();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    [CompilerGeneratedAttribute]
private void add_listChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void remove_listChanged(ListChangedEventHandler value);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public sealed virtual XPDictionary get_Dictionary();
    public void set_Dictionary(XPDictionary value);
}
public class DevExpress.Xpo.XPDelayedProperty : object {
    private object _value;
    private bool isLoaded;
    private object owner;
    private XPMemberInfo property;
    private Session session;
    private bool _IsChanged;
    internal object InternalValue { get; internal set; }
    [DescriptionAttribute("Gets the value of the property which is delayed for loading.")]
public object Value { get; public set; }
    [DescriptionAttribute("Gets whether the property’s value remains unassigned after the persistent object has been loaded from the data store.")]
public bool IsLoaded { get; }
    [DescriptionAttribute("Gets the property value’s modified status.")]
public bool IsModified { get; }
    internal XPDelayedProperty(Session session, object theObject, XPMemberInfo mi);
    internal static string GetGroupName(XPMemberInfo mi);
    internal static bool UpdateModifiedOnly(XPMemberInfo mi);
    internal static XPDelayedProperty GetDelayedPropertyContainer(object theObject, XPMemberInfo mi);
    internal static void Init(Session session, object theObject, XPMemberInfo mi, object val);
    internal object get_InternalValue();
    internal void set_InternalValue(object value);
    internal static void PreFetchRefProps(Session session, IEnumerable objects, XPMemberInfo property);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPDelayedProperty/<PreFetchRefPropsAsync>d__16")]
internal static Task PreFetchRefPropsAsync(Session session, IEnumerable objects, XPMemberInfo property, CancellationToken cancellationToken);
    internal static void PreFetchGenericProps(Session session, IEnumerable objects, XPMemberInfo property);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPDelayedProperty/<PreFetchGenericPropsAsync>d__18")]
internal static Task PreFetchGenericPropsAsync(Session session, IEnumerable objects, XPMemberInfo property, CancellationToken cancellationToken);
    private void LoadValue();
    private static void LoadDelayedGroup(Session session, object owner, string groupName);
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsLoaded();
    internal bool SetValue(object newValue);
    public bool get_IsModified();
    internal void ResetIsModified();
}
[XmlTypeAttribute("XPDictionary")]
public class DevExpress.Xpo.XPDictionaryStub : object {
    private XPClassInfoStub[] classInfoList;
    [XmlArrayItemAttribute("classInfo")]
public XPClassInfoStub[] ClassInfoList { get; public set; }
    public XPDictionaryStub(XPClassInfoStub[] classInfoList);
    public XPClassInfoStub[] get_ClassInfoList();
    public void set_ClassInfoList(XPClassInfoStub[] value);
}
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DefaultEventAttribute("ResolveSession")]
[DesignerAttribute("DevExpress.Xpo.Design.XPInstantFeedbackSourceDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
[DescriptionAttribute("A data source that binds controls to XPO persistent classes in Instant Feedback Mode.")]
public class DevExpress.Xpo.XPInstantFeedbackSource : Component {
    private IServiceProvider serviceProvider;
    private Type _ElementType;
    private string _AssemblyName;
    private string _TypeName;
    private CriteriaOperator _FixedFilter;
    private string _DisplayableProperties;
    private string _DefaultSorting;
    [CompilerGeneratedAttribute]
private EventHandler`1<ResolveSessionEventArgs> ResolveSession;
    [CompilerGeneratedAttribute]
private EventHandler`1<ResolveSessionEventArgs> DismissSession;
    private Nullable`1<bool> _isDesignMode;
    private AsyncListServer2DatacontrollerProxy _AsyncListServer;
    private XPInstantListDesignTimeWrapper _DTWrapper;
    private IList _List;
    private bool IsDisposed;
    [DescriptionAttribute("Specifies the persistent class describing the target database table.")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("DevExpress.Xpo.Helpers.XPInstantFeedbackSourceObjectTypeConverter")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public Type ObjectType { get; public set; }
    [DescriptionAttribute("Specifies the properties that are available for binding in bound data-aware controls.")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("DevExpress.Xpo.Design.DisplayablePropertiesEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("View")]
public string DisplayableProperties { get; public set; }
    [DescriptionAttribute("Specifies how data source contents are sorted by default, when sort order is not specified by the bound control.")]
[EditorAttribute("DevExpress.Xpo.Design.DefaultSortingCollectionEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("Data")]
public string DefaultSorting { get; public set; }
    protected bool IsDesignMode { get; }
    [DescriptionAttribute("Specifies the criteria used to filter objects on the data store side. These criteria are never affected by bound data-aware controls.")]
[EditorAttribute("DevExpress.Xpo.Design.XPInstantFeedbackSourceCriteriaEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public CriteriaOperator FixedFilterCriteria { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string FixedFilterString { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CanChangeProperties { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.ClassInfo { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    public XPInstantFeedbackSource(IServiceProvider serviceProvider);
    public XPInstantFeedbackSource(IContainer container);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, IContainer container);
    public XPInstantFeedbackSource(Type objectType, string displayableProperties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, Type objectType, string displayableProperties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(string assemblyName, string typeName, string displayableProperties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, string assemblyName, string typeName, string displayableProperties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(XPClassInfo classInfo, string displayableProperties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, XPClassInfo classInfo, string displayableProperties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(Type objectType, string displayableProperties, CriteriaOperator fixedCriteria, Action`1<ResolveSessionEventArgs> resolveSession, Action`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, Type objectType, string displayableProperties, CriteriaOperator fixedCriteria, Action`1<ResolveSessionEventArgs> resolveSession, Action`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(string assemblyName, string typeName, string displayableProperties, CriteriaOperator fixedCriteria, Action`1<ResolveSessionEventArgs> resolveSession, Action`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, string assemblyName, string typeName, string displayableProperties, CriteriaOperator fixedCriteria, Action`1<ResolveSessionEventArgs> resolveSession, Action`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(XPClassInfo classInfo, string displayableProperties, CriteriaOperator fixedCriteria, Action`1<ResolveSessionEventArgs> resolveSession, Action`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, XPClassInfo classInfo, string displayableProperties, CriteriaOperator fixedCriteria, Action`1<ResolveSessionEventArgs> resolveSession, Action`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackSource(Type objectType, string displayableProperties, CriteriaOperator fixedCriteria);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, Type objectType, string displayableProperties, CriteriaOperator fixedCriteria);
    public XPInstantFeedbackSource(string assemblyName, string typeName, string displayableProperties, CriteriaOperator fixedCriteria);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, string assemblyName, string typeName, string displayableProperties, CriteriaOperator fixedCriteria);
    public XPInstantFeedbackSource(XPClassInfo classInfo, string displayableProperties, CriteriaOperator fixedCriteria);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, XPClassInfo classInfo, string displayableProperties, CriteriaOperator fixedCriteria);
    public XPInstantFeedbackSource(Type objectType);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, Type objectType);
    public XPInstantFeedbackSource(string assemblyName, string typeName);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, string assemblyName, string typeName);
    public XPInstantFeedbackSource(XPClassInfo classInfo);
    public XPInstantFeedbackSource(IServiceProvider serviceProvider, XPClassInfo classInfo);
    private void Init(IServiceProvider serviceProvider, Type objectType, string assemblyName, string typeName, string displayableProperties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    private static string FillDefaultDisplayablePropertiesIfNotProvided(XPClassInfo ci, string providedDiplayableProperties);
    private static EventHandler`1<T> ToEventHandler(Action`1<T> action);
    [CompilerGeneratedAttribute]
public void add_ResolveSession(EventHandler`1<ResolveSessionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ResolveSession(EventHandler`1<ResolveSessionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DismissSession(EventHandler`1<ResolveSessionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DismissSession(EventHandler`1<ResolveSessionEventArgs> value);
    public Type get_ObjectType();
    public void set_ObjectType(Type value);
    private bool ShouldSerializeDisplayableProperties();
    public string get_DisplayableProperties();
    public void set_DisplayableProperties(string value);
    private bool ShouldSerializeDefaultSorting();
    public string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    protected bool get_IsDesignMode();
    private XPDictionary GetDesignDictionary();
    private string GetDefaultDisplayableProperties();
    private static string GetDefaultDisplayableProperties(XPClassInfo ci);
    public CriteriaOperator get_FixedFilterCriteria();
    public void set_FixedFilterCriteria(CriteriaOperator value);
    public string get_FixedFilterString();
    public void set_FixedFilterString(string value);
    public bool get_CanChangeProperties();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private XPInstantListDesignTimeWrapper CreateDesignTimeWrapper();
    private AsyncListServer2DatacontrollerProxy GetRunTimeProxy();
    protected virtual AsyncListServer2DatacontrollerProxy CreateRuntimeProxy(XPAsyncListServerCore core);
    protected virtual XPAsyncListServerCore CreateRuntimeCore();
    private void listServerGet(object sender, ListServerGetOrFreeEventArgs e);
    private void listServerFree(object sender, ListServerGetOrFreeEventArgs e);
    private void getTypeInfo(object sender, GetTypeInfoEventArgs e);
    private void getPropertyDescriptors(object sender, GetPropertyDescriptorsEventArgs e);
    private void getWorkerRowInfo(object sender, GetWorkerThreadRowInfoEventArgs e);
    private void getUIRow(object sender, GetUIThreadRowEventArgs e);
    private void TestCanChangeProperties();
    private void ForceCatchUp();
    protected virtual void Dispose(bool disposing);
    public void Refresh();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual XPInstantFeedbackSource DXCloneCreate();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object ExtractOriginalRow(object uiThreadRow);
    private XPClassInfo GetDesignClassInfo();
    private sealed virtual override XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.get_ClassInfo();
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
}
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DefaultEventAttribute("ResolveSession")]
[DesignerAttribute("DevExpress.Xpo.Design.XPInstantFeedbackViewDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
[DescriptionAttribute("Allows arbitrary combinations of calculated and aggregated values to be retrieved from a data store. Can serve as a data source for data-aware controls in Instant Feedback mode (working with large datasets).")]
public class DevExpress.Xpo.XPInstantFeedbackView : Component {
    private IServiceProvider serviceProvider;
    private Type _ElementType;
    private string _AssemblyName;
    private string _TypeName;
    private CriteriaOperator _FixedFilter;
    [CompilerGeneratedAttribute]
private EventHandler`1<ResolveSessionEventArgs> ResolveSession;
    [CompilerGeneratedAttribute]
private EventHandler`1<ResolveSessionEventArgs> DismissSession;
    private Nullable`1<bool> _isDesignMode;
    private ServerViewPropertiesCollection viewProperties;
    private AsyncListServer2DatacontrollerProxy _AsyncListServer;
    private XPInstantViewDesignTimeWrapper _DTWrapper;
    private IList _List;
    private bool IsDisposed;
    [DescriptionAttribute("Gets or sets the type of items the target data table contains.")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("DevExpress.Xpo.Helpers.XPInstantFeedbackSourceObjectTypeConverter")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public Type ObjectType { get; public set; }
    protected bool IsDesignMode { get; }
    [DescriptionAttribute("Specifies the criteria used to filter items on the data store side. Bound data-aware controls never affect the criteria.")]
[EditorAttribute("DevExpress.Xpo.Design.XPCollectionCriteriaEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public CriteriaOperator FixedFilterCriteria { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string FixedFilterString { get; public set; }
    [DescriptionAttribute("Gets a ServerViewPropertiesCollection object that contains information on a persistent type’s property names, criteria, and sort order.")]
[DesignerSerializationVisibilityAttribute("2")]
[CategoryAttribute("View")]
public ServerViewPropertiesCollection Properties { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CanChangeProperties { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.ClassInfo { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    public XPInstantFeedbackView(IContainer container);
    public XPInstantFeedbackView(IServiceProvider serviceProvider);
    public XPInstantFeedbackView(IContainer container, IServiceProvider serviceProvider);
    public XPInstantFeedbackView(Type objectType, ServerViewProperty[] properties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackView(string assemblyName, string typeName, ServerViewProperty[] properties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackView(XPClassInfo classInfo, ServerViewProperty[] properties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackView(Type objectType, ServerViewProperty[] properties, CriteriaOperator fixedCriteria, Action`1<ResolveSessionEventArgs> resolveSession, Action`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackView(string assemblyName, string typeName, ServerViewProperty[] properties, CriteriaOperator fixedCriteria, Action`1<ResolveSessionEventArgs> resolveSession, Action`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackView(XPClassInfo classInfo, ServerViewProperty[] properties, CriteriaOperator fixedCriteria, Action`1<ResolveSessionEventArgs> resolveSession, Action`1<ResolveSessionEventArgs> dismissSession);
    public XPInstantFeedbackView(Type objectType, ServerViewProperty[] properties, CriteriaOperator fixedCriteria);
    public XPInstantFeedbackView(string assemblyName, string typeName, ServerViewProperty[] properties, CriteriaOperator fixedCriteria);
    public XPInstantFeedbackView(XPClassInfo classInfo, ServerViewProperty[] properties, CriteriaOperator fixedCriteria);
    public XPInstantFeedbackView(Type objectType);
    public XPInstantFeedbackView(string assemblyName, string typeName);
    public XPInstantFeedbackView(XPClassInfo classInfo);
    private void Init(Type objectType, string assemblyName, string typeName, ServerViewProperty[] properties, CriteriaOperator fixedCriteria, EventHandler`1<ResolveSessionEventArgs> resolveSession, EventHandler`1<ResolveSessionEventArgs> dismissSession);
    private static ServerViewProperty[] FillDefaultPropertiesIfNotProvided(XPClassInfo ci, ServerViewProperty[] providedProperties);
    private static ServerViewProperty[] GetDefaultProperties(XPClassInfo ci);
    private static EventHandler`1<T> ToEventHandler(Action`1<T> action);
    [CompilerGeneratedAttribute]
public void add_ResolveSession(EventHandler`1<ResolveSessionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ResolveSession(EventHandler`1<ResolveSessionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DismissSession(EventHandler`1<ResolveSessionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DismissSession(EventHandler`1<ResolveSessionEventArgs> value);
    public Type get_ObjectType();
    public void set_ObjectType(Type value);
    protected bool get_IsDesignMode();
    private XPDictionary GetDesignDictionary();
    public CriteriaOperator get_FixedFilterCriteria();
    public void set_FixedFilterCriteria(CriteriaOperator value);
    public string get_FixedFilterString();
    public void set_FixedFilterString(string value);
    public ServerViewPropertiesCollection get_Properties();
    public bool get_CanChangeProperties();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private XPInstantViewDesignTimeWrapper CreateDesignTimeWrapper();
    private AsyncListServer2DatacontrollerProxy GetRunTimeProxy();
    protected virtual AsyncListServer2DatacontrollerProxy CreateRuntimeProxy(XPAsyncListServerCore core);
    protected virtual XPAsyncListServerCore CreateRuntimeCore();
    private void listServerGet(object sender, ListServerGetOrFreeEventArgs e);
    private void listServerFree(object sender, ListServerGetOrFreeEventArgs e);
    private void getTypeInfo(object sender, GetTypeInfoEventArgs e);
    private void getPropertyDescriptors(object sender, GetPropertyDescriptorsEventArgs e);
    private void getWorkerRowInfo(object sender, GetWorkerThreadRowInfoEventArgs e);
    private void getUIRow(object sender, GetUIThreadRowEventArgs e);
    private void TestCanChangeProperties();
    public void PopulateProperties();
    private void ForceCatchUp();
    protected virtual void Dispose(bool disposing);
    public void Refresh();
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual XPInstantFeedbackView DXCloneCreate();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object ExtractOriginalRow(object uiThreadRow);
    private XPClassInfo GetDesignClassInfo();
    private sealed virtual override XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.get_ClassInfo();
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Properties>b__46_0(object sender, NotifyCollectionChangedEventArgs e);
}
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
[OptimisticLockingAttribute("False")]
public abstract class DevExpress.Xpo.XPLiteObject : XPBaseObject {
    protected XPLiteObject(Session session);
    protected XPLiteObject(Session session, XPClassInfo classInfo);
}
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
public abstract class DevExpress.Xpo.XPObject : XPCustomObject {
    private int _oid;
    [DescriptionAttribute("Gets or set a value which identifies the persistent object.")]
[PersistentAttribute("OID")]
[KeyAttribute]
public int Oid { get; public set; }
    [DescriptionAttribute("Gets an object that contains field identifies for Simplified Criteria Syntax.")]
public static FieldsClass Fields { get; }
    protected XPObject(Session session);
    protected XPObject(Session session, XPClassInfo classInfo);
    public int get_Oid();
    public void set_Oid(int value);
    public static FieldsClass get_Fields();
}
public class DevExpress.Xpo.XPObjectClassInfoStubCache : object {
    private XPDictionary dictionary;
    private Dictionary`2<XPClassInfo, XPClassInfoStub> classInfoDict;
    private Dictionary`2<string, XPClassInfo> classNameDict;
    private List`1<XPClassInfoStub> newItems;
    public XPDictionary Dictionary { get; }
    public XPObjectClassInfoStubCache(IXPDictionaryProvider dictionaryProvider);
    public XPObjectClassInfoStubCache(IXPDictionaryProvider dictionaryProvider, XPDictionaryStub dictionaryStub);
    public XPDictionaryStub GetNewDictionaryStub();
    public void UpdateClasses(XPDictionaryStub dictionaryStub);
    public XPClassInfoStub GetStub(XPClassInfo classInfo);
    public XPClassInfo GetClassInfo(XPClassInfoStub classInfoStub);
    public XPClassInfo GetClassInfo(string className);
    public XPClassInfoStub GetStub(string className);
    public sealed virtual XPDictionary get_Dictionary();
}
[XmlTypeAttribute("XPObject")]
public class DevExpress.Xpo.XPObjectStub : object {
    private Guid guid;
    private object key;
    private Object[] data;
    private XPClassInfoStubOldValueContainer[] oldData;
    private Boolean[] changed;
    private string className;
    private object optimisticLockFieldInDataLayer;
    private bool isNew;
    private bool isIntermediate;
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
[XmlIgnoreAttribute]
public bool HasGuid { get; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public Guid Guid { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public string ClassName { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public object Key { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[XmlArrayAttribute]
public Object[] Data { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[XmlArrayAttribute]
public XPClassInfoStubOldValueContainer[] OldData { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[XmlArrayAttribute]
public Boolean[] Changed { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public bool IsNew { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public bool IsIntermediate { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
public object OptimisticLockFieldInDataLayer { get; public set; }
    public XPObjectStub(XPClassInfoStub classInfo);
    public XPObjectStub(XPClassInfoStub classInfo, Object[] data);
    public XPObjectStub(string className, Object[] data, XPClassInfoStubOldValueContainer[] oldData, Boolean[] changed);
    public XPObjectStub(XPClassInfoStub classInfo, Guid guid);
    public XPObjectStub(XPClassInfoStub classInfo, Guid guid, Object[] data);
    public XPObjectStub(string className, Guid guid, Object[] data, XPClassInfoStubOldValueContainer[] oldData, Boolean[] changed);
    public bool get_HasGuid();
    public Guid get_Guid();
    public void set_Guid(Guid value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public object get_Key();
    public void set_Key(object value);
    public Object[] get_Data();
    public void set_Data(Object[] value);
    public XPClassInfoStubOldValueContainer[] get_OldData();
    public void set_OldData(XPClassInfoStubOldValueContainer[] value);
    public Boolean[] get_Changed();
    public void set_Changed(Boolean[] value);
    public bool get_IsNew();
    public void set_IsNew(bool value);
    public bool get_IsIntermediate();
    public void set_IsIntermediate(bool value);
    public object get_OptimisticLockFieldInDataLayer();
    public void set_OptimisticLockFieldInDataLayer(object value);
    public void MarkAsNew();
    public void MarkAsIntermediate();
    public static EvaluatorContextDescriptor GetEvaluatorContextDescriptor(IXPDictionaryProvider dictionaryProvider);
    private int GetClassNameHashCode();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class DevExpress.Xpo.XPObjectStubCache : object {
    private Dictionary`2<Guid, XPObjectStub> objectDict;
    public XPObjectStub GetStub(Guid guid);
    public void Add(Guid guid, XPObjectStub objectStub);
}
[DefaultMemberAttribute("Item")]
[XmlTypeAttribute("XPObjectCollection")]
public class DevExpress.Xpo.XPObjectStubCollection : object {
    private List`1<XPObjectStub> innerList;
    [CompilerGeneratedAttribute]
private Object[] <ReferencedObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[][] <ReferenceMap>k__BackingField;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[XmlArrayAttribute]
public XPObjectStub[] Items { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Object[] ReferencedObjects { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Int32[][] ReferenceMap { get; public set; }
    [XmlIgnoreAttribute]
public XPObjectStub Item { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
[XmlIgnoreAttribute]
public int Count { get; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
[XmlIgnoreAttribute]
public bool IsReadOnly { get; }
    public XPObjectStubCollection(int capacity);
    public XPObjectStubCollection(IEnumerable`1<XPObjectStub> collection);
    public XPObjectStub[] get_Items();
    public void set_Items(XPObjectStub[] value);
    [CompilerGeneratedAttribute]
public Object[] get_ReferencedObjects();
    [CompilerGeneratedAttribute]
public void set_ReferencedObjects(Object[] value);
    [CompilerGeneratedAttribute]
public Int32[][] get_ReferenceMap();
    [CompilerGeneratedAttribute]
public void set_ReferenceMap(Int32[][] value);
    public int IndexOf(XPObjectStub item);
    public void Insert(int index, XPObjectStub item);
    public void RemoveAt(int index);
    public List`1<XPObjectStub> GetInnerList();
    public XPObjectStub get_Item(int index);
    public void set_Item(int index, XPObjectStub value);
    public void AddRange(IEnumerable`1<XPObjectStub> collection);
    public ReadOnlyCollection`1<XPObjectStub> AsReadOnly();
    public void Add(XPObjectStub item);
    public void Clear();
    public bool Contains(XPObjectStub item);
    public void CopyTo(XPObjectStub[] array, int arrayIndex);
    public int get_Count();
    public bool get_IsReadOnly();
    public bool Remove(XPObjectStub item);
    public IEnumerator`1<XPObjectStub> GetEnumerator();
}
internal class DevExpress.Xpo.XPObjectStubEqualsComparerByGuid : object {
    public sealed virtual bool Equals(XPObjectStub x, XPObjectStub y);
    public sealed virtual int GetHashCode(XPObjectStub obj);
}
[PersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
public class DevExpress.Xpo.XPObjectType : object {
    private XPDictionary dictionary;
    private Type systemType;
    private string typeName;
    private string assemblyName;
    private XPClassInfo classInfo;
    public static string ObjectTypePropertyName;
    [PersistentAttribute("OID")]
[KeyAttribute]
public int Oid;
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
[SizeAttribute("254")]
[IndexedAttribute]
public string TypeName { get; public set; }
    [DescriptionAttribute("This member supports the internal infrastructure and is not intended to be used directly from your code.")]
[SizeAttribute("254")]
public string AssemblyName { get; public set; }
    [BrowsableAttribute("False")]
public bool IsValidType { get; }
    [BrowsableAttribute("False")]
public Type SystemType { get; }
    [BrowsableAttribute("False")]
public XPClassInfo TypeClassInfo { get; }
    [DescriptionAttribute("Gets an object that contains field identifiers for Simplified Criteria Syntax.")]
public static FieldsClass Fields { get; }
    public XPObjectType(Session session);
    public XPObjectType(Session session, string assemblyName, string typeName);
    public XPObjectType(XPDictionary dictionary, string assemblyName, string typeName);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public bool get_IsValidType();
    public Type get_SystemType();
    public XPClassInfo get_TypeClassInfo();
    public XPClassInfo GetClassInfo();
    public static FieldsClass get_Fields();
}
public static class DevExpress.Xpo.XpoDefault : object {
    private static bool trackPropertiesModifications;
    private static NullableBehavior nullableBehavior;
    private static AsyncBehavior dataStoreAsyncBehavior;
    internal static object SyncRoot;
    private static Session session;
    private static IDataLayer dataLayer;
    private static IObjectLayer objectLayer;
    private static XPDictionary dictionary;
    private static string connectionString;
    private static OptimisticLockingReadBehavior _OptimisticLockingReadBehavior;
    public static OptimisticLockingReadBehavior DefaultOptimisticLockingReadBehavior;
    private static IdentityMapBehavior _IdentityMapBehavior;
    public static IdentityMapBehavior DefaultIdentityMapBehavior;
    private static bool useFastAccessors;
    private static bool defaultCaseSensitive;
    private static bool isObjectModifiedOnNonPersistentPropertyChange;
    private static int defaultStringMappingFieldSize;
    public static GuidGenerationMode GuidGenerationMode;
    public static Func`1<Guid> CustomGuidGenerationHandler;
    private static bool uuidbroken;
    private static string AspDataDirectory;
    private static int maxInSize;
    private static Int32[] terminalInSizes;
    [DescriptionAttribute("Gets or sets the default session.")]
public static Session Session { get; public set; }
    [DescriptionAttribute("Gets or sets the default data access layer which is used by Session objects by default, to access a data store.")]
public static IDataLayer DataLayer { get; public set; }
    [DescriptionAttribute("Specifies the default object access layer which is used by Session objects by default, to retrieve and update object data in a data store.")]
public static IObjectLayer ObjectLayer { get; public set; }
    [DescriptionAttribute("Gets or sets metadata on the persistent objects in a data store.")]
public static XPDictionary Dictionary { get; public set; }
    [DescriptionAttribute("Gets or sets the string which is used to open a database, by default.")]
public static string ConnectionString { get; public set; }
    [DescriptionAttribute("Specifies the default setting of the Session.CaseSensitive and XPDataView.CaseSensitive properties.")]
public static bool DefaultCaseSensitive { get; public set; }
    public static bool IsObjectModifiedOnNonPersistentPropertyChange { get; public set; }
    public static bool TrackPropertiesModifications { get; public set; }
    public static int DefaultStringMappingFieldSize { get; public set; }
    public static NullableBehavior NullableBehavior { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public static AsyncBehavior DataStoreAsyncBehavior { get; public set; }
    [DescriptionAttribute("Gets the connection string which is used by newly created connection providers.")]
public static string ActiveConnectionString { get; }
    [DescriptionAttribute("Gets or sets a value which specifies how XPO behaves by default when reloading changed objects (objects with different versions).")]
public static OptimisticLockingReadBehavior OptimisticLockingReadBehavior { get; public set; }
    [DescriptionAttribute("Gets or sets the Identity Map behavior used by Sessions by default.")]
public static IdentityMapBehavior IdentityMapBehavior { get; public set; }
    [DescriptionAttribute("Gets or sets whether XPO uses its internal mechanism to create new instances of persistent classes, and to set and retrieve object property values.")]
public static bool UseFastAccessors { get; public set; }
    [EditorBrowsableAttribute("1")]
public static int MaxInSize { get; }
    private static XpoDefault();
    public static Session get_Session();
    public static void set_Session(Session value);
    internal static Session GetSession();
    public static IDataLayer get_DataLayer();
    public static void set_DataLayer(IDataLayer value);
    public static IObjectLayer get_ObjectLayer();
    public static void set_ObjectLayer(IObjectLayer value);
    public static XPDictionary get_Dictionary();
    public static void set_Dictionary(XPDictionary value);
    public static string get_ConnectionString();
    public static void set_ConnectionString(string value);
    public static bool get_DefaultCaseSensitive();
    public static void set_DefaultCaseSensitive(bool value);
    public static bool get_IsObjectModifiedOnNonPersistentPropertyChange();
    public static void set_IsObjectModifiedOnNonPersistentPropertyChange(bool value);
    public static bool get_TrackPropertiesModifications();
    public static void set_TrackPropertiesModifications(bool value);
    public static int get_DefaultStringMappingFieldSize();
    public static void set_DefaultStringMappingFieldSize(int value);
    public static NullableBehavior get_NullableBehavior();
    public static void set_NullableBehavior(NullableBehavior value);
    public static AsyncBehavior get_DataStoreAsyncBehavior();
    public static void set_DataStoreAsyncBehavior(AsyncBehavior value);
    public static XPDictionary GetDictionary();
    public static string get_ActiveConnectionString();
    private static int UuidCreateSequential(Guid& guid);
    [SecuritySafeCriticalAttribute]
private static Guid NewGuidSequential();
    public static Guid NewGuid();
    public static OptimisticLockingReadBehavior get_OptimisticLockingReadBehavior();
    public static void set_OptimisticLockingReadBehavior(OptimisticLockingReadBehavior value);
    public static void ForcePerformanceCountersCreation();
    public static IdentityMapBehavior get_IdentityMapBehavior();
    public static void set_IdentityMapBehavior(IdentityMapBehavior value);
    public static bool get_UseFastAccessors();
    public static void set_UseFastAccessors(bool value);
    public static IDataStore GetConnectionProvider(AutoCreateOption defaultAutoCreateOption);
    public static IDataStore GetConnectionProvider(string connectionString, AutoCreateOption defaultAutoCreateOption);
    private static void GetPoolParameters(ConnectionStringParser helper, String& plainConnectionString, Nullable`1& pool, Nullable`1& poolSize, Nullable`1& poolMaxConnections);
    public static IDataStore GetConnectionProvider(string connectionString, AutoCreateOption defaultAutoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    internal static string ConnectionStringRemovePassword(string connectionString);
    internal static string ConnectionStringRemovePassword(ConnectionStringParser helper);
    private static IDataStore CreateWCFWebServiceStore(string connectionString);
    private static IDataStore CreateWCFTcpServiceStore(string connectionString);
    private static IDataStore CreateWcfServiceStore(string connectionString, EndpointAddress address, Binding binding);
    private static string ClearPoolConnectionString(string connectionString);
    public static string GetConnectionPoolString(string connectionString);
    public static string GetConnectionPoolString(string connectionString, int poolSize);
    public static string GetConnectionPoolString(string connectionString, int poolSize, int maxConnections);
    public static IDataStore GetConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static IDataLayer GetDataLayer(AutoCreateOption defaultAutoCreateOption);
    public static IDataLayer GetDataLayer(XPDictionary dictionary, AutoCreateOption defaultAutoCreateOption);
    public static IDataLayer GetDataLayer(string connectionString, AutoCreateOption defaultAutoCreateOption);
    public static IDataLayer GetDataLayer(string connectionString, XPDictionary dictionary, AutoCreateOption defaultAutoCreateOption);
    public static IDataLayer GetDataLayer(string connectionString, XPDictionary dictionary, AutoCreateOption defaultAutoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    internal static bool TryResolveAspDataDirectory(String& filename);
    public static IDataLayer GetDataLayer(IDbConnection connection, AutoCreateOption autoCreateOption);
    public static IDataLayer GetDataLayer(IDbConnection connection, XPDictionary dictionary, AutoCreateOption autoCreateOption);
    public static IDataLayer GetDataLayer(IDbConnection connection, XPDictionary dictionary, AutoCreateOption autoCreateOption, IDisposable[]& objectsToDisposeOnDisconnect);
    private static void RegisterDefaultProviders();
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static void RegisterBonusProviders();
    public static int get_MaxInSize();
    [EditorBrowsableAttribute("1")]
public static int GetTerminalInSize(int size, int parametersPerObject);
    [EditorBrowsableAttribute("1")]
public static int GetTerminalInSize(int size);
}
[ExtensionAttribute]
public static class DevExpress.Xpo.XpoObjectInCriteriaProcessingHelper : object {
    public static string TagXpoObject;
    [ThreadStaticAttribute]
private static Session CurrentContext;
    private static XpoObjectInCriteriaProcessingHelper();
    internal static void Register();
    private static void CriteriaOperator_UserValueToString(object sender, UserValueProcessingEventArgs e);
    private static void CriteriaOperator_UserValueParse(object sender, UserValueProcessingEventArgs e);
    private static void CriteriaOperator_UserValueParse_Core(UserValueProcessingEventArgs e);
    [ExtensionAttribute]
public static IDisposable CreateParseCriteriaSessionScope(Session session);
    [ExtensionAttribute]
public static CriteriaOperator ParseCriteria(Session session, string stringCriteria, OperandValue[]& criteriaParametersList);
    [ExtensionAttribute]
public static CriteriaOperator ParseCriteria(Session session, string stringCriteria, Object[] parameters);
}
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DefaultPropertyAttribute("Collection")]
[DescriptionAttribute("Allows the contents of an XPCollection to be split into pages. Can serve as a data source for data-aware controls.")]
[DesignerAttribute("DevExpress.Xpo.Design.XPPageSelectorDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
public class DevExpress.Xpo.XPPageSelector : Component {
    private XPBaseCollection collection;
    private PageSelector pageSelector;
    private int pageSize;
    private int currentPage;
    private int Count { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int CurrentPage { get; public set; }
    [BrowsableAttribute("False")]
public int PageCount { get; }
    [DescriptionAttribute("Gets or sets the maximum number of persistent objects that can be contained in a single page.")]
[DefaultValueAttribute("10")]
[CategoryAttribute("Data")]
public int PageSize { get; public set; }
    [DescriptionAttribute("Gets or sets the collection of persistent objects that the page selector is bound to.")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public XPBaseCollection Collection { get; public set; }
    public XPPageSelector(IContainer container);
    public XPPageSelector(XPBaseCollection collection);
    private int get_Count();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private void UpdateCollection();
    public int get_CurrentPage();
    public void set_CurrentPage(int value);
    public int get_PageCount();
    public int get_PageSize();
    public void set_PageSize(int value);
    public XPBaseCollection get_Collection();
    public void set_Collection(XPBaseCollection value);
}
public class DevExpress.Xpo.XPQuery`1 : XPQueryBase {
    private static CriteriaOperator[] ThisParams;
    private static ConcurrentDictionary`2<Type, CreateQueryHandler> createQueryMethods;
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public XPQuery`1(IDataLayer dataLayer);
    public XPQuery`1(Session session);
    public XPQuery`1(XPDictionary dictionary);
    public XPQuery`1(Session session, bool inTransaction);
    public XPQuery`1(XPDictionary dictionary, bool inTransaction);
    private XPQuery`1(XPQuery`1<T> baseQuery);
    private XPQuery`1(XPQuery`1<T> baseQuery, Nullable`1<bool> inTransaction, Nullable`1<bool> withDeleted);
    private XPQuery`1(XPQuery`1<T> baseQuery, CustomCriteriaCollection customCriteriaCollection);
    internal XPQuery`1(Session session, IDataLayer dataLayer, XPDictionary dictionary);
    internal XPQuery`1(Session session, IDataLayer dataLayer, XPDictionary dictionary, string data);
    internal XPQuery`1(XPDictionary dictionary, string data);
    private static XPQuery`1();
    public static XPQuery`1<T> Deserialize(Session session, string data);
    public static XPQuery`1<T> Deserialize(IDataLayer dataLayer, string data);
    public static XPQuery`1<T> Deserialize(XPDictionary dictionary, string data);
    public CriteriaOperator TransformExpression(Expression`1<Func`2<T, bool>> expression);
    public CriteriaOperator TransformExpression(Expression`1<Func`2<T, bool>> expression, CustomCriteriaCollection customCriteriaCollection);
    public static CriteriaOperator TransformExpression(Session session, Expression`1<Func`2<T, bool>> expression);
    public static CriteriaOperator TransformExpression(XPDictionary dictionary, Expression`1<Func`2<T, bool>> expression, CustomCriteriaCollection customCriteriaCollection);
    public static CriteriaOperator TransformExpression(Session session, Expression`1<Func`2<T, bool>> expression, CustomCriteriaCollection customCriteriaCollection);
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private static CreateQueryHandler GetCreateQueryMethod(Type type);
    private sealed virtual override IQueryable`1<S> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private IQueryable`1<S> CallGeneric(MethodCallExpression e);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override S System.Linq.IQueryProvider.Execute(Expression expression);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQuery`1/<ExecuteAsync>d__27`1")]
public Task`1<S> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private IEnumerator`1<T> GetEnumerator();
    protected virtual object CloneCore();
    public XPQuery`1<T> Clone();
    public XPQuery`1<T> InTransaction();
    public XPQuery`1<T> WithDeleted();
    public XPQuery`1<T> WithCustomCriteria(CustomCriteriaCollection customCriteriaCollection);
    public XPQuery`1<T> WithCustomCriteria(ICustomCriteriaOperatorQueryable customCriteria);
}
public abstract class DevExpress.Xpo.XPQueryBase : object {
    private static CriteriaOperator oneConstantValue;
    private XPQueryData query;
    private Session session;
    private IDataLayer layer;
    private XPDictionary dictionary;
    public static bool SuppressNonPersistentPropertiesCheck;
    private XPClassInfo objectClassInfo;
    private CustomCriteriaCollection customCriteriaCollection;
    private CreateItemDelegate create;
    private static Dictionary`2<CreateItemCommonKey, CreateItemDelegate> createItemCommonCache;
    private static Dictionary`2<Type, Delegate> elementwiseConversionCache;
    private int isInsideNestedXPQueryCounter;
    private static Type[] convertedInterfaces;
    private static ConstructorInfo timeSpanFromTicksConstructor;
    private static object projectionSamplePropsStart;
    private static object projectionSamplePropsNull;
    private static object projectionSamplePropsEnd;
    private static object projectionSampleMIO;
    private static object projectionSampleEAO;
    private static object projectionSampleBegin;
    private static object projectionFreeQueryThis;
    private static object projectionSampleEnd;
    [DescriptionAttribute("Gets or sets the XPDictionary class descendant’s instance which provides metadata on persistent objects in a data store.")]
public XPDictionary Dictionary { get; }
    [DescriptionAttribute("Gets or sets the session that is used to retrieve persistent objects in queries.")]
public Session Session { get; public set; }
    protected IDataLayer DataLayer { get; }
    private CriteriaOperator Criteria { get; private set; }
    internal CriteriaOperator GroupKey { get; internal set; }
    private bool IsGroup { get; }
    private CriteriaOperator GroupCriteria { get; private set; }
    internal MemberInitOperator Projection { get; internal set; }
    private SortingCollection Sorting { get; private set; }
    protected XPClassInfo ObjectClassInfo { get; }
    private Nullable`1<int> Top { get; private set; }
    private Nullable`1<int> Skip { get; private set; }
    private bool InTransaction { get; private set; }
    private bool WithDeleted { get; private set; }
    private HashSet`1<CriteriaOperator> ExistingJoins { get; private set; }
    internal CustomCriteriaCollection CustomCriteriaCollection { get; }
    private bool DevExpress.Xpo.Helpers.IPersistentValueExtractor.CaseSensitive { get; }
    private bool ZeroTop { get; }
    private IServiceProvider DevExpress.Xpo.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    protected XPQueryBase(XPQueryBase baseQuery);
    protected XPQueryBase(XPQueryBase baseQuery, Nullable`1<bool> inTransaction, Nullable`1<bool> withDeleted);
    protected XPQueryBase(XPQueryBase baseQuery, CustomCriteriaCollection customCriteriaCollection);
    protected XPQueryBase(IDataLayer layer, Type type);
    protected XPQueryBase(Session session, Type type, bool inTransaction);
    protected XPQueryBase(XPDictionary dictionary, Type type, bool inTransaction);
    protected XPQueryBase(Session session, IDataLayer dataLayer, XPDictionary dictionary);
    protected XPQueryBase(Session session, IDataLayer dataLayer, XPDictionary dictionary, string data);
    protected XPQueryBase(XPDictionary dictionary, string data);
    private static XPQueryBase();
    public XPDictionary get_Dictionary();
    private Session GetSession();
    private IDataLayer GetLayer();
    public Session get_Session();
    public void set_Session(Session value);
    protected IDataLayer get_DataLayer();
    private CriteriaOperator get_Criteria();
    private void set_Criteria(CriteriaOperator value);
    internal CriteriaOperator get_GroupKey();
    internal void set_GroupKey(CriteriaOperator value);
    private bool get_IsGroup();
    private CriteriaOperator get_GroupCriteria();
    private void set_GroupCriteria(CriteriaOperator value);
    internal MemberInitOperator get_Projection();
    internal void set_Projection(MemberInitOperator value);
    private SortingCollection get_Sorting();
    private void set_Sorting(SortingCollection value);
    protected XPClassInfo get_ObjectClassInfo();
    private Nullable`1<int> get_Top();
    private void set_Top(Nullable`1<int> value);
    private Nullable`1<int> get_Skip();
    private void set_Skip(Nullable`1<int> value);
    private bool get_InTransaction();
    private void set_InTransaction(bool value);
    private bool get_WithDeleted();
    private void set_WithDeleted(bool value);
    private HashSet`1<CriteriaOperator> get_ExistingJoins();
    private void set_ExistingJoins(HashSet`1<CriteriaOperator> value);
    internal CustomCriteriaCollection get_CustomCriteriaCollection();
    private sealed virtual override object DevExpress.Xpo.Helpers.IPersistentValueExtractor.ExtractPersistentValue(object criterionValue);
    private sealed virtual override bool DevExpress.Xpo.Helpers.IPersistentValueExtractor.get_CaseSensitive();
    private List`1<Object[]> SessionSelectData(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting);
    private Task`1<List`1<Object[]>> SessionSelectDataAsync(XPClassInfo classInfo, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperatorCollection groupProperties, CriteriaOperator groupCriteria, int skipSelectedRecords, int topSelectedRecords, SortingCollection sorting, CancellationToken cancellationToken);
    private ICollection SessionGetObjects(XPClassInfo classInfo, CriteriaOperator condition, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords);
    private Task`1<ICollection> SessionGetObjectsAsync(XPClassInfo classInfo, CriteriaOperator condition, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, CancellationToken cancellationToken);
    private void SessionGetObjectsAsync(XPClassInfo classInfo, CriteriaOperator condition, SortingCollection sorting, int skipSelectedRecords, int topSelectedRecords, AsyncLoadObjectsCallback callback);
    private object SessionEvaluate(XPClassInfo classInfo, CriteriaOperator expression, CriteriaOperator condition);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<SessionEvaluateAsync>d__62")]
private Task`1<object> SessionEvaluateAsync(XPClassInfo classInfo, CriteriaOperator expression, CriteriaOperator condition, CancellationToken cancellationToken);
    private object SessionFindObject(XPClassInfo classInfo, CriteriaOperator criteria);
    private Task`1<object> SessionFindObjectAsync(XPClassInfo classInfo, CriteriaOperator criteria, CancellationToken cancellationToken);
    internal static CriteriaOperator GetFreeQuerySet(XPQueryBase query);
    public string Serialize();
    protected internal void Call(MethodCallExpression call, XPQueryBase prev);
    protected void Assign(XPQueryBase prev);
    protected static bool IsNull(object val);
    private CriteriaOperator ParseExpression(Expression expression, CriteriaOperator[] maps);
    private CriteriaOperator ParseObjectExpression(Expression expression, CriteriaOperator[] maps);
    private void Call(MethodCallExpression call);
    protected bool CanIntersect();
    private void Union(MethodCallExpression call);
    private void Intersect(MethodCallExpression call);
    private void SelectMany(MethodCallExpression call);
    private CriteriaOperator PatchParentCriteria(CriteriaOperator criteria, string p);
    private void OfType(MethodCallExpression call);
    private void Join(MethodCallExpression call, bool groupJoin);
    private void CheckJoinExists(CriteriaOperator operand);
    private void Take(MethodCallExpression call);
    private void SkipFn(MethodCallExpression call);
    private void GroupBy(MethodCallExpression call);
    private void Distinct(MethodCallExpression call);
    private void Select(MethodCallExpression call);
    private void Reverse();
    private void Order(MethodCallExpression call, bool thenBy, SortingDirection direction);
    private void Where(MethodCallExpression call);
    protected object Execute(Expression expression);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<ExecuteAsync>d__99")]
protected internal Task`1<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    internal ICustomAggregate GetCustomAggregate(string customAggregateName);
    private static bool IsValidCustomAggregateQueryable(MethodCallExpression call, ICustomAggregate customAggregate);
    private bool Contains(MethodCallExpression call);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<ContainsAsync>d__103")]
private Task`1<bool> ContainsAsync(MethodCallExpression call, CancellationToken cancellationToken);
    private long LongCount(MethodCallExpression call);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<LongCountAsync>d__105")]
private Task`1<long> LongCountAsync(MethodCallExpression call, CancellationToken cancellationToken);
    private object CountCore(MethodCallExpression call);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<CountCoreAsync>d__107")]
private Task`1<object> CountCoreAsync(MethodCallExpression call, CancellationToken cancellationToken);
    private static int GetSafeInt(object obj);
    private static bool GetSafeBool(object obj);
    private bool get_ZeroTop();
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<CountAsync>d__112")]
private Task`1<int> CountAsync(MethodCallExpression call, CancellationToken cancellationToken);
    private int Count(MethodCallExpression call);
    private object AggregateCall(MethodCallExpression call);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<AggregateCallAsync>d__115")]
private Task`1<object> AggregateCallAsync(MethodCallExpression call, CancellationToken cancellationToken);
    private object Average(MethodCallExpression call);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<AverageAsync>d__117")]
private Task`1<object> AverageAsync(MethodCallExpression call, CancellationToken cancellationToken);
    private bool All(MethodCallExpression call);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<AllAsync>d__119")]
private Task`1<bool> AllAsync(MethodCallExpression call, CancellationToken cancellationToken);
    private bool Any(MethodCallExpression call);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<AnyAsync>d__121")]
private Task`1<bool> AnyAsync(MethodCallExpression call, CancellationToken cancellationToken);
    private bool TryParseValue(Expression expr, Object& value);
    private void ParseSingleCallArgs(MethodCallExpression call, bool allowDefault, CriteriaOperator& condition, Object& defaultValue);
    private object ExecuteSingle(MethodCallExpression call, bool allowDefault, SortAction sort);
    private Task`1<object> ExecuteSingleAsync(MethodCallExpression call, bool allowDefault, SortAction sort, CancellationToken cancellationToken);
    private object ExecuteElementAt(MethodCallExpression call, bool allowDefault);
    private Task`1<object> ExecuteElementAtAsync(MethodCallExpression call, bool allowDefault, CancellationToken cancellationToken);
    private CriteriaOperatorCollection GetGrouping();
    private void PopulateGroupingRecursive(MemberInitOperator init, CriteriaOperatorCollection groupProperties);
    private object GetSingleData(Type type, CriteriaOperator val, bool allowDefault, SortAction sort, bool single, Nullable`1<int> elementAt, object defaultValue);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<GetSingleDataAsync>d__132")]
private Task`1<object> GetSingleDataAsync(Type type, CriteriaOperator val, bool allowDefault, SortAction sort, bool single, Nullable`1<int> elementAt, CancellationToken cancellationToken);
    private void DataPostProcessingBegin(DataPostProcessingContext context, int propertyIndex);
    private void GetAggregatedPropertyForPostProcess(CriteriaOperator currentProperty, XPClassInfo currentClassInfo, Stack`1<XPClassInfo> classInfoStack, CriteriaOperator& outAggregatedProperty, XPClassInfo& outAggregatedPropertyClassInfo);
    private void DataPostProcessingEnd(DataPostProcessingContext context, int propertyIndex);
    private Type GroupDataPostProcessingBegin(GroupSet group);
    private void GroupDataPostProcessingEnd(DataPostProcessingContext context, int i, Type groupType);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<DataPostProcessingAsync>d__140")]
private Task DataPostProcessingAsync(CriteriaOperatorCollection props, List`1<Object[]> data, Type type, CancellationToken cancellationToken);
    private void DataPostProcessing(CriteriaOperatorCollection props, List`1<Object[]> data, Type type);
    protected void DivePropertyName(Stack`1<XPClassInfo> classInfoStack, String& propertyName, XPClassInfo& classInfo, bool throwOnEmptyStack);
    private object GetSingleObject(CriteriaOperator val, bool allowDefault, SortAction sort, bool single, Nullable`1<int> elementAt, object defaultValue);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<GetSingleObjectAsync>d__144")]
private Task`1<object> GetSingleObjectAsync(CriteriaOperator val, bool allowDefault, SortAction sort, bool single, Nullable`1<int> elementAt, CancellationToken cancellationToken);
    private CreateItemDelegate CreateItem(Type type, MemberInitOperator last, CriteriaOperatorCollection effectiveProps);
    private static Expression ConvertToType(Expression exp, Type targetType, Type sourceType);
    private static Type GetSourceType(CriteriaTypeResolver resolver, CriteriaOperator prop);
    private Expression GetArrayIndexExpression(ParameterExpression row, int rowIndex, Type sourceType);
    private Expression CreateSubItemCore(Type subType, MemberInitOperator last, CriteriaTypeResolver resolver, ParameterExpression row, Int32& rowIndex);
    private static Expression[] GetArgumentExpressions(Expression[] init, MethodInfo method, bool shiftArguments, bool isLifted);
    private static Expression[] GetArgumentExpressions(Expression[] arguments, Type[] parameterTypes, Type[] sourceTypes);
    private Expression CreateBinaryItemWithMethod(BinaryExpression bin, Expression[] init, Type[] sourceTypes);
    private Expression TryMakeNullSafeIif(Expression expression, Expression nullableInstance);
    private Expression CreateSubItemCore(Type subType, ExpressionAccessOperator expressionOperator, CriteriaTypeResolver resolver, ParameterExpression row, Int32& rowIndex);
    private Expression CreateTimeStampFromTicksExpression(Expression ticksEpression);
    private static Delegate GetElementwiseConversionDelegate(Type destTypeArgument, Type sourceTypeArgument, ParameterExpression parameter, Type& delegateType);
    private static Expression MakeElementwiseConversionExpression(Expression source, Type targetTypeArgument, Type sourceTypeArgument);
    private static Expression ElementwiseConversion(Expression source, Type targetType);
    private CreateItemDelegate CreateItemCore(Type type, MemberInitOperator last, CriteriaOperatorCollection effectiveProps);
    private CreateItemDelegate CreateCreateItemDelegate(Type type, MemberInitOperator last, CriteriaTypeResolver resolver);
    private bool GetProjectionSample(Type type, CriteriaTypeResolver resolver, CriteriaOperator property, CriteriaOperatorCollection effectiveProps, List`1<object> projectionSample);
    private ICollection GetData(Type type);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<GetDataAsync>d__182")]
private Task`1<ICollection> GetDataAsync(Type type, CancellationToken cancellationToken);
    private ICollection GetObjects();
    private Task`1<ICollection> GetObjectsAsync(CancellationToken cancellationToken);
    internal void EnumerateAsync(Type type, AsyncLoadObjectsCallback callback);
    protected ICollection Enumerate(Type type);
    internal Task`1<ICollection> EnumerateAsync(Type type, CancellationToken cancellationToken);
    private ICollection EnumerateGroups(Type type);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryBase/<EnumerateGroupsAsync>d__189")]
private Task`1<ICollection> EnumerateGroupsAsync(Type type, CancellationToken cancellationToken);
    private CreateItemDelegate CreateGroupItem(Type type, MemberInitOperator last);
    private CreateItemDelegate CreateGroupItemCore(Type type, MemberInitOperator last);
    protected abstract virtual object CloneCore();
    private sealed virtual override IServiceProvider DevExpress.Xpo.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
}
[ExtensionAttribute]
public static class DevExpress.Xpo.XPQueryExtensions : object {
    private static MethodInfo miCount;
    private static MethodInfo miCountWithPredicate;
    private static MethodInfo miLongCount;
    private static MethodInfo miLongCountWithPredicate;
    private static MethodInfo miContains;
    private static MethodInfo miElementAt;
    private static MethodInfo miElementAtOrDefault;
    private static MethodInfo miAny;
    private static MethodInfo miAnyWithPredicate;
    private static MethodInfo miAllWithPredicate;
    private static MethodInfo miFirst;
    private static MethodInfo miFirstWithPredicate;
    private static MethodInfo miFirstOrDefault;
    private static MethodInfo miFirstOrDefaultWithPredicate;
    private static MethodInfo miLast;
    private static MethodInfo miLastWithPredicate;
    private static MethodInfo miLastOrDefault;
    private static MethodInfo miLastOrDefaultWithPredicate;
    private static MethodInfo miSingle;
    private static MethodInfo miSingleWithPredicate;
    private static MethodInfo miSingleOrDefault;
    private static MethodInfo miSingleOrDefaultWithPredicate;
    private static MethodInfo miMin;
    private static MethodInfo miMinWithSelector;
    private static MethodInfo miMax;
    private static MethodInfo miMaxWithSelector;
    private static MethodInfo miSumDecimal;
    private static MethodInfo miSumNullableDecimal;
    private static MethodInfo miSumDecimalWithSelector;
    private static MethodInfo miSumNullableDecimalWithSelector;
    private static MethodInfo miSumInt;
    private static MethodInfo miSumNullableInt;
    private static MethodInfo miSumIntWithSelector;
    private static MethodInfo miSumNullableIntWithSelector;
    private static MethodInfo miSumLong;
    private static MethodInfo miSumNullableLong;
    private static MethodInfo miSumLongWithSelector;
    private static MethodInfo miSumNullableLongWithSelector;
    private static MethodInfo miSumFloat;
    private static MethodInfo miSumNullableFloat;
    private static MethodInfo miSumFloatWithSelector;
    private static MethodInfo miSumNullableFloatWithSelector;
    private static MethodInfo miSumDouble;
    private static MethodInfo miSumNullableDouble;
    private static MethodInfo miSumDoubleWithSelector;
    private static MethodInfo miSumNullableDoubleWithSelector;
    private static MethodInfo miAverageDecimal;
    private static MethodInfo miAverageDecimalWithSelector;
    private static MethodInfo miAverageInt;
    private static MethodInfo miAverageIntWithSelector;
    private static MethodInfo miAverageLong;
    private static MethodInfo miAverageLongWithSelector;
    private static MethodInfo miAverageFloat;
    private static MethodInfo miAverageFloatWithSelector;
    private static MethodInfo miAverageDouble;
    private static MethodInfo miAverageDoubleWithSelector;
    private static void ThrowIfNotXPQuery(IQueryable`1<T> query);
    [ExtensionAttribute]
public static void EnumerateAsync(IQueryable`1<T> query, AsyncEnumerateCallback`1<T> callback);
    [ExtensionAttribute]
public static void EnumerateAsync(IQueryable`1<T> query, AsyncEnumerateCallback callback);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<EnumerateAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> EnumerateAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static XPQuery`1<T> Query(Session session);
    [ExtensionAttribute]
public static XPQuery`1<T> Query(IDataLayer layer);
    [ExtensionAttribute]
public static XPQuery`1<T> QueryInTransaction(Session session);
    [ExtensionAttribute]
public static TResult CachedExpression(IQueryable`1<TSource> source, Func`2<IQueryable`1<TSource>, TResult> f);
    [ExtensionAttribute]
public static TResult CachedExpression(IQueryable`1<TSource> source, Func`3<IQueryable`1<TSource>, TArg1, TResult> f, TArg1 a1);
    [ExtensionAttribute]
public static TResult CachedExpression(IQueryable`1<TSource> source, Func`4<IQueryable`1<TSource>, TArg1, TArg2, TResult> f, TArg1 a1, TArg2 a2);
    [ExtensionAttribute]
public static TResult CachedExpression(IQueryable`1<TSource> source, Func`5<IQueryable`1<TSource>, TArg1, TArg2, TArg3, TResult> f, TArg1 a1, TArg2 a2, TArg3 a3);
    [ExtensionAttribute]
public static TResult CachedExpression(IQueryable`1<TSource> source, Func`6<IQueryable`1<TSource>, TArg1, TArg2, TArg3, TArg4, TResult> f, TArg1 a1, TArg2 a2, TArg3 a3, TArg4 a4);
    [ExtensionAttribute]
public static TResult CachedExpression(IQueryable`1<TSource> source, Func`7<IQueryable`1<TSource>, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> f, TArg1 a1, TArg2 a2, TArg3 a3, TArg4 a4, TArg5 a5);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToListAsync>d__16`1")]
[ExtensionAttribute]
public static Task`1<List`1<T>> ToListAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToArrayAsync>d__17`1")]
[ExtensionAttribute]
public static Task`1<T[]> ToArrayAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToDictionaryAsync>d__18`2")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, T>> ToDictionaryAsync(IQueryable`1<T> query, Func`2<T, TKey> keySelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToDictionaryAsync>d__19`3")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<T> query, Func`2<T, TKey> keySelector, Func`2<T, TElement> elementSelector, IEqualityComparer`1<TKey> equalityComparer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToDictionaryAsync>d__20`3")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<T> query, Func`2<T, TKey> keySelector, Func`2<T, TElement> elementSelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToDictionaryAsync>d__21`2")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, T>> ToDictionaryAsync(IQueryable`1<T> query, Func`2<T, TKey> keySelector, IEqualityComparer`1<TKey> equalityComparer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToLookupAsync>d__22`2")]
[ExtensionAttribute]
public static Task`1<ILookup`2<TKey, T>> ToLookupAsync(IQueryable`1<T> query, Func`2<T, TKey> keySelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToLookupAsync>d__23`3")]
[ExtensionAttribute]
public static Task`1<ILookup`2<TKey, TElement>> ToLookupAsync(IQueryable`1<T> query, Func`2<T, TKey> keySelector, Func`2<T, TElement> elementSelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToLookupAsync>d__24`3")]
[ExtensionAttribute]
public static Task`1<ILookup`2<TKey, TElement>> ToLookupAsync(IQueryable`1<T> query, Func`2<T, TKey> keySelector, Func`2<T, TElement> elementSelector, IEqualityComparer`1<TKey> equalityComparer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ToLookupAsync>d__25`2")]
[ExtensionAttribute]
public static Task`1<ILookup`2<TKey, T>> ToLookupAsync(IQueryable`1<T> query, Func`2<T, TKey> keySelector, IEqualityComparer`1<TKey> equalityComparer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ElementAtAsync(IQueryable`1<T> query, int index, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ElementAtOrDefaultAsync(IQueryable`1<T> query, int index, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> ContainsAsync(IQueryable`1<T> query, T item, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AllAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> LastAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> LastAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> LastOrDefaultAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> LastOrDefaultAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> query, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> MinAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MinAsync(IQueryable`1<T> query, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> MaxAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MaxAsync(IQueryable`1<T> query, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<int> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<long> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<decimal> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<float> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<double> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<T> query, Expression`1<Func`2<T, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<int> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<T> query, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<long> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<T> query, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<decimal> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<T> query, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<float> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<T> query, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<double> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<T> query, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    private static Task`1<TResult> ExecuteWithTopLevelFunctionAsync(IQueryable`1<T> query, MethodInfo topLevelMethodInfo, CancellationToken cancellationToken);
    private static Task`1<TResult> ExecuteWithTopLevelFunctionAsync(IQueryable`1<T> query, MethodInfo topLevelMethodInfo, LambdaExpression expression, CancellationToken cancellationToken);
    private static Task`1<TResult> ExecuteWithTopLevelFunctionAsync(IQueryable`1<T> query, MethodInfo topLevelMethodInfo, LambdaExpression[] expressions, CancellationToken cancellationToken);
    private static Task`1<TResult> ExecuteWithTopLevelFunctionAsync(IQueryable`1<T> query, MethodInfo topLevelMethodInfo, Expression argument, CancellationToken cancellationToken);
    private static Task`1<TResult> ExecuteWithTopLevelFunctionAsync(IQueryable`1<T> query, MethodInfo topLevelMethodInfo, Expression[] arguments, CancellationToken cancellationToken);
    private static TResult ExecuteWithTopLevelFunction(IQueryable`1<T> query, MethodInfo topLevelMethodInfo, LambdaExpression[] arguments);
    private static Expression[] CombineExpressions(Expression firstArgument, Expression[] otherArguments);
    [AsyncStateMachineAttribute("DevExpress.Xpo.XPQueryExtensions/<ExecuteAsync>d__145`1")]
private static Task`1<TResult> ExecuteAsync(XPQueryBase query, Expression expression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static object CustomAggregate(IQueryable`1<T> query, string customAggregateName, Expression`1[] arguments);
    [ExtensionAttribute]
public static Task`1<object> CustomAggregateAsync(IQueryable`1<T> query, string customAggregateName, Expression`1[] arguments);
    [ExtensionAttribute]
public static Task`1<object> CustomAggregateAsync(IQueryable`1<T> query, string customAggregateName, Expression`1<Func`2<T, object>> argument, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> CustomAggregateAsync(IQueryable`1<T> query, string customAggregateName, Expression`1[] arguments, CancellationToken cancellationToken);
}
internal class DevExpress.Xpo.XPQueryPostEvaluator : ExpressionEvaluator {
    private ExpressionEvaluatorCoreBase evalCore;
    protected ExpressionEvaluatorCoreBase EvaluatorCore { get; }
    public XPQueryPostEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions);
    public XPQueryPostEvaluator(EvaluatorContextDescriptor descriptor, CriteriaOperator criteria, bool caseSensitive, ICollection`1<ICustomFunctionOperator> customFunctions, ICollection`1<ICustomAggregate> customAggregates);
    protected virtual ExpressionEvaluatorCoreBase get_EvaluatorCore();
}
internal class DevExpress.Xpo.XPQueryPostEvaluatorCore : ExpressionEvaluatorCore {
    public XPQueryPostEvaluatorCore(bool caseSensitive, EvaluateCustomFunctionHandler customFunctionHandler);
    public XPQueryPostEvaluatorCore(bool caseSensitive, EvaluateCustomFunctionHandler customFunctionHandler, CustomAggregateResolveHandler customAggregateResolveHandler);
    public virtual object Visit(OperandProperty theOperand);
}
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DesignerAttribute("DevExpress.Xpo.Design.XPServerCollectionSourceDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
[DescriptionAttribute("Serves as a data source for data-aware controls in server mode (working with large datasets).")]
public class DevExpress.Xpo.XPServerCollectionSource : Component {
    private Session _Session;
    private string displayableProperties;
    private XPClassInfo _ClassInfo;
    private Type _Type;
    private string _DefaultSorting;
    private CriteriaOperator _FixedFilter;
    private IList _List;
    private bool _TrackChanges;
    private bool _AllowEdit;
    private bool _AllowRemove;
    private bool _DeleteObjectOnRemove;
    private bool _AllowNew;
    private Nullable`1<bool> _isDesignMode;
    [CompilerGeneratedAttribute]
private ResolveSessionEventHandler _ResolveSession;
    private XPDictionary designDictionary;
    protected bool IsInit;
    [CompilerGeneratedAttribute]
private EventHandler Initialized;
    [CompilerGeneratedAttribute]
private ServerExceptionThrownEventHandler _ServerExceptionThrown;
    private IList List { get; }
    [DescriptionAttribute("Gets or sets whether the XPServerCollectionSource tracks item changes.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool TrackChanges { get; public set; }
    [DescriptionAttribute("Gets or sets whether data editing is allowed.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool AllowEdit { get; public set; }
    [DescriptionAttribute("Gets or sets whether items can be removed from a collection by a bound control.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool AllowRemove { get; public set; }
    [DescriptionAttribute("Gets or sets whether the persistent object is deleted from the data store when it is removed from the collection.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool DeleteObjectOnRemove { get; public set; }
    [DescriptionAttribute("Gets or sets whether new items can be added to a collection by a bound control.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool AllowNew { get; public set; }
    protected bool IsDesignMode { get; }
    [DescriptionAttribute("Gets or sets the Session used by the current XPServerCollectionSource object.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.SessionReferenceConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Data")]
public Session Session { get; public set; }
    [DescriptionAttribute("Gets or sets properties that are available for binding in a bound data-aware control at design time.")]
[EditorAttribute("DevExpress.Xpo.Design.DisplayablePropertiesEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("View")]
public string DisplayableProperties { get; public set; }
    [DescriptionAttribute("Specifies how data source contents are sorted by default, when sort order is not specified by the bound control.")]
[CategoryAttribute("Data")]
public string DefaultSorting { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
public Type ObjectType { get; public set; }
    internal XPDictionary DesignDictionary { get; }
    [DescriptionAttribute("Gets a XPClassInfo object that describes the target data table in the data store.")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("DevExpress.Xpo.Design.ObjectClassInfoTypeConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[MergablePropertyAttribute("False")]
[CategoryAttribute("Data")]
public XPClassInfo ObjectClassInfo { get; public set; }
    [DescriptionAttribute("Gets or sets the criteria used to filter objects on the data store side. These criteria are never affected by the data-aware control that is bound to the current XPServerCollectionSource object.")]
[EditorAttribute("DevExpress.Xpo.Design.XPCollectionCriteriaEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public CriteriaOperator FixedFilterCriteria { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string FixedFilterString { get; public set; }
    private bool System.ComponentModel.ISupportInitializeNotification.IsInitialized { get; }
    private Session DevExpress.Xpo.Helpers.ISessionProvider.Session { get; }
    private IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.ObjectLayer { get; }
    private IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.DataLayer { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.ClassInfo { get; }
    public XPServerCollectionSource(IContainer container);
    public XPServerCollectionSource(Session session, XPClassInfo objectClassInfo, CriteriaOperator fixedFilterCriteria);
    public XPServerCollectionSource(Session session, XPClassInfo objectClassInfo);
    public XPServerCollectionSource(Session session, Type objectType, CriteriaOperator fixedFilterCriteria);
    public XPServerCollectionSource(Session session, Type objectType);
    private IList get_List();
    public bool get_TrackChanges();
    public void set_TrackChanges(bool value);
    public bool get_AllowEdit();
    public void set_AllowEdit(bool value);
    public bool get_AllowRemove();
    public void set_AllowRemove(bool value);
    public bool get_DeleteObjectOnRemove();
    public void set_DeleteObjectOnRemove(bool value);
    public bool get_AllowNew();
    public void set_AllowNew(bool value);
    protected bool get_IsDesignMode();
    private IList CreateList();
    protected virtual IXpoServerModeGridDataSource EquipServerModeCore(IXpoServerModeGridDataSource result);
    protected virtual IXpoServerModeGridDataSource CreateServerModeCore();
    private void KillList();
    private bool ShouldSerializeSession();
    public Session get_Session();
    public void set_Session(Session value);
    private Session DoResolveSession();
    protected virtual void OnResolveSession(ResolveSessionEventArgs args);
    [CompilerGeneratedAttribute]
private void add__ResolveSession(ResolveSessionEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ResolveSession(ResolveSessionEventHandler value);
    public void add_ResolveSession(ResolveSessionEventHandler value);
    public void remove_ResolveSession(ResolveSessionEventHandler value);
    private bool ShouldSerializeDisplayableProperties();
    public string get_DisplayableProperties();
    public void set_DisplayableProperties(string value);
    private bool ShouldSerializeDefaultSorting();
    public string get_DefaultSorting();
    public void set_DefaultSorting(string value);
    public Type get_ObjectType();
    public void set_ObjectType(Type value);
    internal XPDictionary get_DesignDictionary();
    public XPClassInfo get_ObjectClassInfo();
    public void set_ObjectClassInfo(XPClassInfo value);
    public CriteriaOperator get_FixedFilterCriteria();
    public void set_FixedFilterCriteria(CriteriaOperator value);
    public string get_FixedFilterString();
    public void set_FixedFilterString(string value);
    [CompilerGeneratedAttribute]
private void add_Initialized(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_Initialized(EventHandler value);
    private sealed virtual override void System.ComponentModel.ISupportInitializeNotification.add_Initialized(EventHandler value);
    private sealed virtual override void System.ComponentModel.ISupportInitializeNotification.remove_Initialized(EventHandler value);
    private sealed virtual override bool System.ComponentModel.ISupportInitializeNotification.get_IsInitialized();
    protected bool IsInitialized();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private sealed virtual override Session DevExpress.Xpo.Helpers.ISessionProvider.get_Session();
    private sealed virtual override IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.get_ObjectLayer();
    private sealed virtual override IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.get_DataLayer();
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public void Reload();
    protected virtual void OnServerExceptionThrown(ServerExceptionThrownEventArgs e);
    [CompilerGeneratedAttribute]
private void add__ServerExceptionThrown(ServerExceptionThrownEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ServerExceptionThrown(ServerExceptionThrownEventHandler value);
    public void add_ServerExceptionThrown(ServerExceptionThrownEventHandler value);
    public void remove_ServerExceptionThrown(ServerExceptionThrownEventHandler value);
    private void result_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    protected virtual void FatalException(Exception e);
    private void result_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    protected virtual void Inconsistent(ServerModeInconsistencyDetectedEventArgs e);
    private sealed virtual override XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.get_ClassInfo();
    private sealed virtual override bool DevExpress.Data.Helpers.IColumnsServerActions.AllowAction(string fieldName, ColumnServerActionType action);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual XPServerCollectionSource DXCloneCreate();
    [CompilerGeneratedAttribute]
private void <result_InconsistencyDetected>b__110_0();
}
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DesignerAttribute("DevExpress.Xpo.Design.XPServerModeViewDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
[DescriptionAttribute("Allows arbitrary combinations of calculated and aggregated values to be retrieved from a data store. Can serve as a data source for data-aware controls in server mode (working with large datasets).")]
[DefaultPropertyAttribute("ObjectClassInfo")]
public class DevExpress.Xpo.XPServerModeView : Component {
    private Session _Session;
    private XPClassInfo _ClassInfo;
    private Type _Type;
    private CriteriaOperator _FixedFilter;
    private IList _List;
    private Nullable`1<bool> _isDesignMode;
    [CompilerGeneratedAttribute]
private ResolveSessionEventHandler _ResolveSession;
    private XPDictionary designDictionary;
    protected bool IsInit;
    [CompilerGeneratedAttribute]
private EventHandler Initialized;
    private ServerViewPropertiesCollection viewProperties;
    [CompilerGeneratedAttribute]
private ServerExceptionThrownEventHandler _ServerExceptionThrown;
    private IList List { get; }
    protected bool IsDesignMode { get; }
    [DescriptionAttribute("Gets or sets a session used to load persistent objects.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.SessionReferenceConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Data")]
public Session Session { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
public Type ObjectType { get; public set; }
    internal XPDictionary DesignDictionary { get; }
    [DescriptionAttribute("Gets or sets the XPClassInfo that describes the type of items the target data table contains.")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("DevExpress.Xpo.Design.ObjectClassInfoTypeConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[MergablePropertyAttribute("False")]
[CategoryAttribute("Data")]
public XPClassInfo ObjectClassInfo { get; public set; }
    [DescriptionAttribute("Specifies the criteria used to filter items on the data store side. Bound data-aware controls never affect the criteria.")]
[EditorAttribute("DevExpress.Xpo.Design.XPCollectionCriteriaEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public CriteriaOperator FixedFilterCriteria { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string FixedFilterString { get; public set; }
    private bool System.ComponentModel.ISupportInitializeNotification.IsInitialized { get; }
    private Session DevExpress.Xpo.Helpers.ISessionProvider.Session { get; }
    private IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.ObjectLayer { get; }
    private IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.DataLayer { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [DescriptionAttribute("Gets a ServerViewPropertiesCollection object that contains information on a persistent type’s property names, criteria, and sort order.")]
[DesignerSerializationVisibilityAttribute("2")]
[CategoryAttribute("View")]
public ServerViewPropertiesCollection Properties { get; }
    private XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.ClassInfo { get; }
    public XPServerModeView(IContainer container);
    public XPServerModeView(Session session, XPClassInfo objectClassInfo, CriteriaOperator fixedFilterCriteria);
    public XPServerModeView(Session session, XPClassInfo objectClassInfo);
    public XPServerModeView(Session session, Type objectType, CriteriaOperator fixedFilterCriteria);
    public XPServerModeView(Session session, Type objectType);
    private IList get_List();
    protected bool get_IsDesignMode();
    private IList CreateList();
    protected virtual XpoViewServerModeCore CreateServerModeCore();
    private List`1<Tuple`2<string, CriteriaOperator>> GetPropertiesForServerModeCore(Boolean& isKeyAddedToLastItem);
    private string GetSortingForServerModeCore();
    private void KillList();
    private void Reset();
    private void SetupDesignViewProperties();
    public void PopulateProperties();
    private bool ShouldSerializeSession();
    public Session get_Session();
    public void set_Session(Session value);
    private Session DoResolveSession();
    protected virtual void OnResolveSession(ResolveSessionEventArgs args);
    [CompilerGeneratedAttribute]
private void add__ResolveSession(ResolveSessionEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ResolveSession(ResolveSessionEventHandler value);
    public void add_ResolveSession(ResolveSessionEventHandler value);
    public void remove_ResolveSession(ResolveSessionEventHandler value);
    public Type get_ObjectType();
    public void set_ObjectType(Type value);
    internal XPDictionary get_DesignDictionary();
    public XPClassInfo get_ObjectClassInfo();
    public void set_ObjectClassInfo(XPClassInfo value);
    public CriteriaOperator get_FixedFilterCriteria();
    public void set_FixedFilterCriteria(CriteriaOperator value);
    public string get_FixedFilterString();
    public void set_FixedFilterString(string value);
    [CompilerGeneratedAttribute]
private void add_Initialized(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_Initialized(EventHandler value);
    private sealed virtual override void System.ComponentModel.ISupportInitializeNotification.add_Initialized(EventHandler value);
    private sealed virtual override void System.ComponentModel.ISupportInitializeNotification.remove_Initialized(EventHandler value);
    private sealed virtual override bool System.ComponentModel.ISupportInitializeNotification.get_IsInitialized();
    protected bool IsInitialized();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private sealed virtual override Session DevExpress.Xpo.Helpers.ISessionProvider.get_Session();
    private sealed virtual override IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.get_ObjectLayer();
    private sealed virtual override IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.get_DataLayer();
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public ServerViewPropertiesCollection get_Properties();
    public ServerViewProperty AddProperty(CriteriaOperator property);
    public ServerViewProperty AddProperty(string property);
    public ServerViewProperty AddProperty(string name, string property);
    public ServerViewProperty AddProperty(string name, CriteriaOperator property);
    public ServerViewProperty AddProperty(string name, string property, SortDirection sorting);
    public ServerViewProperty AddProperty(string name, CriteriaOperator property, SortDirection sorting);
    public void Reload();
    protected virtual void OnServerExceptionThrown(ServerExceptionThrownEventArgs e);
    [CompilerGeneratedAttribute]
private void add__ServerExceptionThrown(ServerExceptionThrownEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__ServerExceptionThrown(ServerExceptionThrownEventHandler value);
    public void add_ServerExceptionThrown(ServerExceptionThrownEventHandler value);
    public void remove_ServerExceptionThrown(ServerExceptionThrownEventHandler value);
    private void result_ExceptionThrown(object sender, ServerModeExceptionThrownEventArgs e);
    protected virtual void FatalException(Exception e);
    private void result_InconsistencyDetected(object sender, ServerModeInconsistencyDetectedEventArgs e);
    protected virtual void Inconsistent(ServerModeInconsistencyDetectedEventArgs e);
    private sealed virtual override XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.get_ClassInfo();
    private sealed virtual override bool DevExpress.Data.Helpers.IColumnsServerActions.AllowAction(string fieldName, ColumnServerActionType action);
    private sealed virtual override object DevExpress.Data.Helpers.IDXCloneable.DXClone();
    protected virtual object DXClone();
    protected virtual XPServerModeView DXCloneCreate();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Properties>b__76_0(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <result_InconsistencyDetected>b__93_0();
}
[DefaultMemberAttribute("Item")]
[DXToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("DX.24.2: ORM Components")]
[DesignerSerializerAttribute("DevExpress.Xpo.Design.XPViewSerializer, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "Microsoft.DotNet.DesignTools.Serialization.CodeDomSerializer, Microsoft.DotNet.DesignTools.Server")]
[DesignerAttribute("DevExpress.Xpo.Design.XPViewDesigner, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.ComponentModel.Design.IDesigner, System.ComponentModel.TypeConverter")]
[DefaultPropertyAttribute("ObjectClassInfo")]
[DescriptionAttribute("Allows arbitrary combinations of calculated and aggregated values to be retrieved from a data store. Can serve as a data source for data-aware controls.")]
public class DevExpress.Xpo.XPView : Component {
    private bool selectDeleted;
    private Session session;
    private XPClassInfo info;
    private List`1<object> objects;
    private bool Initializing;
    private Nullable`1<bool> caseSensitive;
    private bool hasChangesDuringInit;
    private bool isInAsyncLoading;
    private Nullable`1<bool> _isDesignMode;
    private static object EventResolveSession;
    private XPDictionary designDictionary;
    private Type objectType;
    private ViewPropertiesCollection props;
    private Func`2<object, bool> fitPredicate;
    private CriteriaOperator filter;
    private int skipReturnedRecords;
    private int topReturnedRecords;
    private List`1<object> sorted;
    private List`1<object> filtered;
    private SortingCollection sorting;
    private CriteriaOperator criteria;
    private CriteriaOperator groupCriteria;
    private PropertyDescriptorCollection displayProps;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler listChanged;
    private List`1<object> Objects { get; }
    [DescriptionAttribute("Gets or sets whether string comparisons evaluated by the XPView on the client are case-sensitive.")]
[CategoryAttribute("Options")]
public bool CaseSensitive { get; public set; }
    private List`1<object> Sorted { get; }
    private List`1<object> Filtered { get; }
    public ViewRecord Item { get; }
    [DescriptionAttribute("Gets or sets the session which is used to load and save persistent objects.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.SessionReferenceConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[CategoryAttribute("Data")]
public Session Session { get; public set; }
    protected bool IsDesignMode { get; }
    internal XPDictionary DesignDictionary { get; }
    [DescriptionAttribute("Gets the metadata information for the persistent objects retrieved by the view.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.ObjectClassInfoTypeConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public XPClassInfo ObjectClassInfo { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
public Type ObjectType { get; public set; }
    [DescriptionAttribute("Gets a collection of ViewProperty objects that represent view columns.")]
[DesignerSerializationVisibilityAttribute("2")]
[CategoryAttribute("View")]
public ViewPropertiesCollection Properties { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CriteriaOperator Filter { get; public set; }
    [DescriptionAttribute("Gets or sets the number of records to exclude when populating the view.")]
[DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public int SkipReturnedRecords { get; public set; }
    [DescriptionAttribute("Gets or sets the maximum number of records retrieved by the view.")]
[DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public int TopReturnedRecords { get; public set; }
    [DescriptionAttribute("Provides access to the collection whose elements identify the sorted columns within the view.")]
[DesignerSerializationVisibilityAttribute("2")]
[EditorAttribute("DevExpress.Xpo.Design.XPViewSortingCollectionEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("Data")]
public SortingCollection Sorting { get; public set; }
    [DescriptionAttribute("Gets or sets the criteria associated with the view.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[EditorAttribute("DevExpress.Xpo.Design.XPViewCriteriaEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public CriteriaOperator Criteria { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string CriteriaString { get; public set; }
    [DescriptionAttribute("Specifies whether objects marked as deleted are retrieved by the XPView.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Options")]
public bool SelectDeleted { get; public set; }
    [DescriptionAttribute("Gets or sets the grouping criteria which is associated with the view.")]
[TypeConverterAttribute("DevExpress.Xpo.Design.CriteriaConverter, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a")]
[EditorAttribute("DevExpress.Xpo.Design.XPViewCriteriaEditor, DevExpress.Xpo.v24.2.Design, Version=24.2.1.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Data")]
public CriteriaOperator GroupCriteria { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string GroupCriteriaString { get; public set; }
    internal PropertyDescriptorCollection DisplayProps { get; }
    [BrowsableAttribute("False")]
public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.ObjectLayer { get; }
    private IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.DataLayer { get; }
    private XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.Dictionary { get; }
    private XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.ClassInfo { get; }
    public XPView(IContainer container);
    public XPView(Session session, XPClassInfo info, CriteriaOperatorCollection properties, CriteriaOperator criteria);
    public XPView(Session session, XPClassInfo info, CriteriaOperatorCollection properties, CriteriaOperator criteria, CriteriaOperator groupCriteria);
    public XPView(Session session, Type objType);
    public XPView(Session session, XPClassInfo info);
    public XPView(Session session, Type objType, CriteriaOperatorCollection properties, CriteriaOperator criteria);
    public XPView(Session session, Type objType, string properties, CriteriaOperator criteria);
    public XPView(Session session, XPClassInfo info, string properties, CriteriaOperator criteria);
    private static XPView();
    private List`1<object> get_Objects();
    private List`1<object> GetSampleData();
    internal void Clear();
    internal void ClearProps();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private IComparer CreateComparer();
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    private List`1<object> get_Sorted();
    private List`1<object> get_Filtered();
    public bool LoadAsync();
    public bool LoadAsync(AsyncLoadObjectsCallback callback);
    private List`1<object> Load();
    private void PrepareLoad(CriteriaOperatorCollection& properties, CriteriaOperatorCollection& groupProperties, SortingCollection& sorting);
    private List`1<object> EndLoad(CriteriaOperatorCollection properties, CriteriaOperatorCollection groupProperties, SortingCollection sorting);
    public void Reload();
    public ViewRecord get_Item(int index);
    public sealed virtual Session get_Session();
    public void set_Session(Session value);
    private bool ShouldSerializeSession();
    private bool ShouldSerializeCaseSensitive();
    private void ResetCaseSensitive();
    protected bool get_IsDesignMode();
    private Session DoResolveSession();
    protected virtual void OnResolveSession(ResolveSessionEventArgs args);
    public void add_ResolveSession(ResolveSessionEventHandler value);
    public void remove_ResolveSession(ResolveSessionEventHandler value);
    internal XPDictionary get_DesignDictionary();
    public XPClassInfo get_ObjectClassInfo();
    public void set_ObjectClassInfo(XPClassInfo value);
    public Type get_ObjectType();
    public void set_ObjectType(Type value);
    public ViewPropertiesCollection get_Properties();
    public sealed virtual CriteriaOperator get_Filter();
    public sealed virtual void set_Filter(CriteriaOperator value);
    public int get_SkipReturnedRecords();
    public void set_SkipReturnedRecords(int value);
    public int get_TopReturnedRecords();
    public void set_TopReturnedRecords(int value);
    internal void Reset(bool metadataChanged);
    public SortingCollection get_Sorting();
    public void set_Sorting(SortingCollection value);
    private bool ShouldSerializeSorting();
    public CriteriaOperator get_Criteria();
    public void set_Criteria(CriteriaOperator value);
    public string get_CriteriaString();
    public void set_CriteriaString(string value);
    public bool get_SelectDeleted();
    public void set_SelectDeleted(bool value);
    public CriteriaOperator get_GroupCriteria();
    public void set_GroupCriteria(CriteriaOperator value);
    public string get_GroupCriteriaString();
    public void set_GroupCriteriaString(string value);
    private static CriteriaOperatorCollection GetProperties(XPClassInfo info, string properties);
    public ViewProperty AddProperty(CriteriaOperator property);
    public ViewProperty AddProperty(string property);
    public ViewProperty AddProperty(string name, string property);
    public ViewProperty AddProperty(string name, CriteriaOperator property);
    public ViewProperty AddProperty(string name, string property, bool group);
    public ViewProperty AddProperty(string name, CriteriaOperator property, bool group);
    public ViewProperty AddProperty(string name, string property, bool group, bool fetch, SortDirection sorting);
    public ViewProperty AddProperty(string name, CriteriaOperator property, bool group, bool fetch, SortDirection sorting);
    private PropertyDescriptorCollection GetProperties(ViewPropertiesCollection properties);
    internal PropertyDescriptorCollection get_DisplayProps();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    [CompilerGeneratedAttribute]
private void add_listChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void remove_listChanged(ListChangedEventHandler value);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override IObjectLayer DevExpress.Xpo.Helpers.IObjectLayerProvider.get_ObjectLayer();
    private sealed virtual override IDataLayer DevExpress.Xpo.Helpers.IDataLayerProvider.get_DataLayer();
    private sealed virtual override XPDictionary DevExpress.Xpo.Metadata.Helpers.IXPDictionaryProvider.get_Dictionary();
    private sealed virtual override XPClassInfo DevExpress.Xpo.Helpers.IXPClassInfoProvider.get_ClassInfo();
}
[MemberDesignTimeVisibilityAttribute("False")]
public class DevExpress.Xpo.XPWeakReference : XPCustomObject {
    [KeyAttribute("True")]
public Guid Oid;
    [NonPersistentAttribute]
protected object TargetKeyValue;
    private XPObjectType _TargetType;
    [DescriptionAttribute("Gets whether the object referenced by this instance has been garbage collected.")]
[NonPersistentAttribute]
public bool IsAlive { get; }
    [DescriptionAttribute("Gets or sets the object referenced by the current XPWeakReference instance.")]
[NonPersistentAttribute]
public object Target { get; public set; }
    [PersistentAttribute("TargetType")]
[ObsoleteAttribute("For internal use only (Medium Trust)", "True")]
[BrowsableAttribute("False")]
[MemberDesignTimeVisibilityAttribute("False")]
[EditorBrowsableAttribute("1")]
public XPObjectType TargetType_ { get; public set; }
    [PersistentAttribute("TargetKey")]
[ObsoleteAttribute("For internal use only (Medium Trust)", "True")]
[BrowsableAttribute("False")]
[MemberDesignTimeVisibilityAttribute("False")]
[EditorBrowsableAttribute("1")]
public string TargetKey_ { get; public set; }
    [PersistentAliasAttribute("TargetType_")]
protected XPObjectType TargetType { get; protected set; }
    [PersistentAliasAttribute("TargetKey_")]
protected string TargetKey { get; protected set; }
    public XPWeakReference(Session session);
    public XPWeakReference(Session session, object target);
    public XPWeakReference(IXPSimpleObject target);
    public bool get_IsAlive();
    public object get_Target();
    public void set_Target(object value);
    public XPObjectType get_TargetType_();
    public void set_TargetType_(XPObjectType value);
    public string get_TargetKey_();
    public void set_TargetKey_(string value);
    protected XPObjectType get_TargetType();
    protected void set_TargetType(XPObjectType value);
    protected virtual string get_TargetKey();
    protected virtual void set_TargetKey(string value);
    public static string KeyToString(object key);
    public static object StringToKey(string s);
    private static ICollection SplitStringToSimplePairs(string s);
    private static string SimpleKeyToString(object key);
    private static object SimpleStringToKey(string typeCodeString, string value);
}
internal static class Microsoft.Extensions.DependencyInjection.DataLayerFactory : object {
    private static ConcurrentDictionary`2<DataLayerOptions, Func`1<IDataLayer>> dataLayerFactoryFuncCache;
    private static DataLayerFactory();
    public static Func`1<IDataLayer> GetDataLayerFactory(DataLayerOptions options);
    private static Func`1<IDataLayer> PrepareDataLayerFactoryFunc(DataLayerOptions options);
    private static void AddAction(List`1<Action`1<Context>> actionList, Action`1<Context> action);
}
public class Microsoft.Extensions.DependencyInjection.DataLayerOptions : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <EntityTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoCreateOption <AutoCreateOption>k__BackingField;
    [CompilerGeneratedAttribute]
private NullableBehavior <NullableBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseThreadSafeDataLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseInMemoryDataStore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseThreadSafeDataLayerSchemaInitialization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseConnectionPool>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConnectionPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConnectionPoolMaxConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<XPDictionary> <CustomDictionaryFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<XpoDataStoreResult> <CustomDataStoreFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<XPDictionary> <DictionaryInitializedHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IDataStore> <DataStoreInitializedHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IDataLayer> <DataLayerInitializedHandler>k__BackingField;
    public string ConnectionString { get; internal set; }
    public Type[] EntityTypes { get; internal set; }
    public AutoCreateOption AutoCreateOption { get; internal set; }
    public NullableBehavior NullableBehavior { get; public set; }
    public bool UseThreadSafeDataLayer { get; internal set; }
    public bool UseInMemoryDataStore { get; internal set; }
    public bool UseThreadSafeDataLayerSchemaInitialization { get; internal set; }
    public bool UseConnectionPool { get; internal set; }
    public Nullable`1<int> ConnectionPoolSize { get; internal set; }
    public Nullable`1<int> ConnectionPoolMaxConnections { get; internal set; }
    public Func`1<XPDictionary> CustomDictionaryFactory { get; internal set; }
    public Func`1<XpoDataStoreResult> CustomDataStoreFactory { get; internal set; }
    public Action`1<XPDictionary> DictionaryInitializedHandler { get; internal set; }
    public Action`1<IDataStore> DataStoreInitializedHandler { get; internal set; }
    public Action`1<IDataLayer> DataLayerInitializedHandler { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
internal void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public Type[] get_EntityTypes();
    [CompilerGeneratedAttribute]
internal void set_EntityTypes(Type[] value);
    [CompilerGeneratedAttribute]
public AutoCreateOption get_AutoCreateOption();
    [CompilerGeneratedAttribute]
internal void set_AutoCreateOption(AutoCreateOption value);
    [CompilerGeneratedAttribute]
public NullableBehavior get_NullableBehavior();
    [CompilerGeneratedAttribute]
public void set_NullableBehavior(NullableBehavior value);
    [CompilerGeneratedAttribute]
public bool get_UseThreadSafeDataLayer();
    [CompilerGeneratedAttribute]
internal void set_UseThreadSafeDataLayer(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseInMemoryDataStore();
    [CompilerGeneratedAttribute]
internal void set_UseInMemoryDataStore(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseThreadSafeDataLayerSchemaInitialization();
    [CompilerGeneratedAttribute]
internal void set_UseThreadSafeDataLayerSchemaInitialization(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseConnectionPool();
    [CompilerGeneratedAttribute]
internal void set_UseConnectionPool(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConnectionPoolSize();
    [CompilerGeneratedAttribute]
internal void set_ConnectionPoolSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConnectionPoolMaxConnections();
    [CompilerGeneratedAttribute]
internal void set_ConnectionPoolMaxConnections(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Func`1<XPDictionary> get_CustomDictionaryFactory();
    [CompilerGeneratedAttribute]
internal void set_CustomDictionaryFactory(Func`1<XPDictionary> value);
    [CompilerGeneratedAttribute]
public Func`1<XpoDataStoreResult> get_CustomDataStoreFactory();
    [CompilerGeneratedAttribute]
internal void set_CustomDataStoreFactory(Func`1<XpoDataStoreResult> value);
    [CompilerGeneratedAttribute]
public Action`1<XPDictionary> get_DictionaryInitializedHandler();
    [CompilerGeneratedAttribute]
internal void set_DictionaryInitializedHandler(Action`1<XPDictionary> value);
    [CompilerGeneratedAttribute]
public Action`1<IDataStore> get_DataStoreInitializedHandler();
    [CompilerGeneratedAttribute]
internal void set_DataStoreInitializedHandler(Action`1<IDataStore> value);
    [CompilerGeneratedAttribute]
public Action`1<IDataLayer> get_DataLayerInitializedHandler();
    [CompilerGeneratedAttribute]
internal void set_DataLayerInitializedHandler(Action`1<IDataLayer> value);
    public sealed virtual object Clone();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Microsoft.Extensions.DependencyInjection.DataLayerOptionsBuilder : object {
    [CompilerGeneratedAttribute]
private DataLayerOptions <DataLayerOptions>k__BackingField;
    public DataLayerOptions DataLayerOptions { get; private set; }
    [CompilerGeneratedAttribute]
public DataLayerOptions get_DataLayerOptions();
    [CompilerGeneratedAttribute]
private void set_DataLayerOptions(DataLayerOptions value);
    public DataLayerOptionsBuilder UseConnectionString(string connectionString);
    public DataLayerOptionsBuilder UseEntityTypes(Type[] entityTypes);
    public DataLayerOptionsBuilder UseAutoCreationOption(AutoCreateOption autoCreateOption);
    public DataLayerOptionsBuilder UseThreadSafeDataLayer(bool isThreadSafe);
    public DataLayerOptionsBuilder UseInMemoryDataStore(bool useInMemoryDataStore);
    public DataLayerOptionsBuilder UseThreadSafeDataLayerSchemaInitialization(bool useThreadSafeDataLayerSchemaInitialization);
    public DataLayerOptionsBuilder UseConnectionPool(bool useConnectionPool);
    public DataLayerOptionsBuilder UseCustomDictionaryFactory(Func`1<XPDictionary> factory);
    public DataLayerOptionsBuilder UseCustomDataStoreFactory(Func`1<XpoDataStoreResult> factory);
    public DataLayerOptionsBuilder UseConnectionPoolSize(int size);
    public DataLayerOptionsBuilder UseConnectionPoolSizeAndMaxConnections(int size, int maxConnections);
    public DataLayerOptionsBuilder UseNullableBehavior(NullableBehavior nullableBehavior);
    public DataLayerOptionsBuilder UseDictionaryInitializedHandler(Action`1<XPDictionary> action);
    public DataLayerOptionsBuilder UseDataStoreInitializedHandler(Action`1<IDataStore> action);
    public DataLayerOptionsBuilder UseDataLayerInitializedHandler(Action`1<IDataLayer> action);
}
internal static class Microsoft.Extensions.DependencyInjection.SessionFactory : object {
    private static ConcurrentDictionary`2<Type, Func`4<IServiceProvider, IDataLayer, IDisposable[], object>> sessionCompiledConstructorWithDatalayerCacheWithDisposableAndServiceProvider;
    private static ConcurrentDictionary`2<Type, Func`4<IServiceProvider, IObjectLayer, IDisposable[], object>> sessionCompiledConstructorsWithObjectlayerCacheWithDisposableAndServiceProvider;
    private static ConcurrentDictionary`2<Type, Func`3<IServiceProvider, IDataLayer, object>> sessionCompiledConstructorWithDatalayerCacheAndServiceProvider;
    private static ConcurrentDictionary`2<Type, Func`3<IServiceProvider, IObjectLayer, object>> sessionCompiledConstructorsWithObjectlayerCacheAndServiceProvider;
    private static ConcurrentDictionary`2<Type, Func`3<IDataLayer, IDisposable[], object>> sessionCompiledConstructorWithDatalayerCacheWithDisposable;
    private static ConcurrentDictionary`2<Type, Func`3<IObjectLayer, IDisposable[], object>> sessionCompiledConstructorsWithObjectlayerCacheWithDisposable;
    private static ConcurrentDictionary`2<Type, Func`2<IDataLayer, object>> sessionCompiledConstructorWithDatalayerCache;
    private static ConcurrentDictionary`2<Type, Func`2<IObjectLayer, object>> sessionCompiledConstructorsWithObjectlayerCache;
    private static ConcurrentDictionary`2<Type, Func`2<IServiceProvider, object>> sessionCompiledConstructorsWithIServiceProviderCache;
    private static SessionFactory();
    public static object CreateSessionInstance(IServiceProvider serviceProvider, Type sessionType, IDataLayer dataLayer, IDisposable[] disposeOnDisconnect);
    public static object CreateSessionInstance(IServiceProvider serviceProvider, Type sessionType, IDataLayer dataLayer);
    public static object CreateSessionInstance(IServiceProvider serviceProvider, Type sessionType, IObjectLayer objectLayer, IDisposable[] disposeOnDisconnect);
    public static object CreateSessionInstance(IServiceProvider serviceProvider, Type sessionType, IObjectLayer objectLayer);
    public static object CreateSessionInstance(IServiceProvider serviceProvider);
    private static Func`2<IServiceProvider, object> GetCompiledSessionConstructorWithServiceProvider(Type sessionType);
    private static Func`4<IServiceProvider, IDataLayer, IDisposable[], object> GetCompiledSessionConstructorWithServiceProviderAndDataLayerAndDisposable(Type sessionType);
    private static Func`3<IDataLayer, IDisposable[], object> GetCompiledSessionConstructorWithDataLayerAndDisposable(Type sessionType);
    private static Func`4<IServiceProvider, IObjectLayer, IDisposable[], object> GetCompiledSessionConstructorWithServiceProviderAndObjectLayerAndDisposable(Type sessionType);
    private static Func`3<IObjectLayer, IDisposable[], object> GetCompiledSessionConstructorWithObjectLayerAndDisposable(Type sessionType);
    private static Func`3<IServiceProvider, IDataLayer, object> GetCompiledSessionConstructorWithServiceProviderAndDataLayer(Type sessionType);
    private static Func`2<IDataLayer, object> GetCompiledSessionConstructorWithDataLayer(Type sessionType);
    private static Func`3<IServiceProvider, IObjectLayer, object> GetCompiledSessionConstructorWithServiceProviderAndObjectLayer(Type sessionType);
    private static Func`2<IObjectLayer, object> GetCompiledSessionConstructorWithObjectLayer(Type sessionType);
    private static Func`2<TArg1, object> CreateCompiledConstructor(Type type);
    private static Func`3<TArg1, TArg2, object> CreateCompiledConstructor(Type type);
    private static Func`4<TArg1, TArg2, TArg3, object> CreateCompiledConstructor(Type type);
}
public class Microsoft.Extensions.DependencyInjection.XpoDataStoreResult : object {
    [CompilerGeneratedAttribute]
private IDataStore <DataStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IDisposable[] <ObjectsToDisposeOnDisconnect>k__BackingField;
    public IDataStore DataStore { get; public set; }
    public IDisposable[] ObjectsToDisposeOnDisconnect { get; public set; }
    public XpoDataStoreResult(IDataStore dataStore, IDisposable[] objectsToDisposeOnDisconnect);
    [CompilerGeneratedAttribute]
public IDataStore get_DataStore();
    [CompilerGeneratedAttribute]
public void set_DataStore(IDataStore value);
    [CompilerGeneratedAttribute]
public IDisposable[] get_ObjectsToDisposeOnDisconnect();
    [CompilerGeneratedAttribute]
public void set_ObjectsToDisposeOnDisconnect(IDisposable[] value);
}
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.Extensions.DependencyInjection.XpoServiceCollectionExtensions : object {
    private static ConcurrentDictionary`2<Guid, IDataLayer> dataLayerSingletonCache;
    private static ConcurrentDictionary`2<Guid, IObjectLayer> objectLayerSingletonCache;
    private static XpoServiceCollectionExtensions();
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultDataLayer(IServiceCollection serviceCollection, ServiceLifetime lifetime, Action`1<DataLayerOptionsBuilder> dataLayerOptionsBuildAction);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultDataLayer(IServiceCollection serviceCollection, ServiceLifetime lifetime, Func`2<IServiceProvider, IDataLayer> dataLayerFactory);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultObjectLayer(IServiceCollection serviceCollection, ServiceLifetime lifetime, Func`2<IServiceProvider, IObjectLayer> objectLayerFactory);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultUnitOfWork(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultUnitOfWork(IServiceCollection serviceCollection, bool useDataLayerAsSingleton, Action`1<DataLayerOptionsBuilder> dataLayerOptionsBuildAction);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultUnitOfWork(IServiceCollection serviceCollection, bool useDataLayerAsSingleton, Func`2<IServiceProvider, IDataLayer> dataLayerFactory);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultUnitOfWork(IServiceCollection serviceCollection, bool useObjectLayerAsSingleton, Func`2<IServiceProvider, IObjectLayer> objectLayerFactory);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultSession(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultSession(IServiceCollection serviceCollection, bool useDataLayerAsSingleton, Action`1<DataLayerOptionsBuilder> dataLayerOptionsBuildAction);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultSession(IServiceCollection serviceCollection, bool useDataLayerAsSingleton, Func`2<IServiceProvider, IDataLayer> dataLayerFactory);
    [ExtensionAttribute]
public static IServiceCollection AddXpoDefaultSession(IServiceCollection serviceCollection, bool useObjectLayerAsSingleton, Func`2<IServiceProvider, IObjectLayer> objectLayerFactory);
    [ExtensionAttribute]
public static IServiceCollection AddXpoCustomSession(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddXpoCustomSession(IServiceCollection serviceCollection, bool useDataLayerAsSingleton, Action`1<DataLayerOptionsBuilder> dataLayerOptionsBuildAction);
    [ExtensionAttribute]
public static IServiceCollection AddXpoCustomSession(IServiceCollection serviceCollection, bool useDataLayerAsSingleton, Func`2<IServiceProvider, IDataLayer> dataLayerFactory);
    [ExtensionAttribute]
public static IServiceCollection AddXpoCustomSession(IServiceCollection serviceCollection, bool useObjectLayerAsSingleton, Func`2<IServiceProvider, IObjectLayer> objectLayerFactory);
}
