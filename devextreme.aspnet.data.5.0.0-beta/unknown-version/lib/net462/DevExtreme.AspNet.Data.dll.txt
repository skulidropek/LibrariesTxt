internal static class DevExtreme.AspNet.Data.Aggregation.Accumulators.AccumulatorFactory : object {
    public static IAccumulator Create(Type type);
}
internal class DevExtreme.AspNet.Data.Aggregation.Accumulators.DecimalAccumulator : object {
    private decimal _value;
    public sealed virtual void Add(object value);
    public sealed virtual void Divide(int divider);
    public sealed virtual object GetValue();
}
internal class DevExtreme.AspNet.Data.Aggregation.Accumulators.DoubleAccumulator : object {
    private double _value;
    public sealed virtual void Add(object value);
    public sealed virtual void Divide(int divider);
    public sealed virtual object GetValue();
}
internal interface DevExtreme.AspNet.Data.Aggregation.Accumulators.IAccumulator {
    public abstract virtual void Add(object value);
    public abstract virtual void Divide(int divider);
    public abstract virtual object GetValue();
}
internal class DevExtreme.AspNet.Data.Aggregation.Accumulators.TimeSpanAccumulator : object {
    private TimeSpan _value;
    public sealed virtual void Add(object value);
    public sealed virtual void Divide(int divider);
    public sealed virtual object GetValue();
}
internal class DevExtreme.AspNet.Data.Aggregation.AggregateCalculator`1 : object {
    private IEnumerable _data;
    private IAccessor`1<T> _accessor;
    private SumFix _sumFix;
    private IReadOnlyList`1<SummaryInfo> _totalSummary;
    private IReadOnlyList`1<SummaryInfo> _groupSummary;
    private Aggregator`1[] _totalAggregators;
    private Stack`1<Aggregator`1[]> _groupAggregatorsStack;
    public AggregateCalculator`1(IEnumerable data, IAccessor`1<T> accessor, IReadOnlyList`1<SummaryInfo> totalSummary, IReadOnlyList`1<SummaryInfo> groupSummary, SumFix sumFix);
    public Object[] Run();
    private void ProcessItem(object item);
    private void ProcessGroup(Group group);
    private void Step(object obj, Aggregator`1[] aggregators, IReadOnlyList`1<SummaryInfo> summary);
    private Object[] Finish(Aggregator`1[] aggregators);
    private Aggregator`1<T> CreateAggregator(SummaryInfo summaryInfo);
}
internal static class DevExtreme.AspNet.Data.Aggregation.AggregateName : object {
    public static string MIN;
    public static string MAX;
    public static string SUM;
    public static string AVG;
    public static string COUNT;
    public static string COUNT_NOT_NULL;
    public static string REMOTE_COUNT;
    public static string REMOTE_AVG;
}
public abstract class DevExtreme.AspNet.Data.Aggregation.Aggregator`1 : object {
    [CompilerGeneratedAttribute]
private IAccessor`1<T> <Accessor>k__BackingField;
    protected IAccessor`1<T> Accessor { get; private set; }
    protected Aggregator`1(IAccessor`1<T> accessor);
    [CompilerGeneratedAttribute]
protected IAccessor`1<T> get_Accessor();
    [CompilerGeneratedAttribute]
private void set_Accessor(IAccessor`1<T> value);
    public abstract virtual void Step(T container, string selector);
    public abstract virtual object Finish();
}
internal class DevExtreme.AspNet.Data.Aggregation.AvgAggregator`1 : Aggregator`1<T> {
    private Aggregator`1<T> _counter;
    private SumAggregator`1<T> _summator;
    public AvgAggregator`1(IAccessor`1<T> accessor);
    public virtual void Step(T container, string selector);
    public virtual object Finish();
}
internal class DevExtreme.AspNet.Data.Aggregation.CountAggregator`1 : Aggregator`1<T> {
    private int _count;
    private bool _skipNulls;
    public CountAggregator`1(IAccessor`1<T> accessor, bool skipNulls);
    public virtual void Step(T container, string selector);
    public virtual object Finish();
}
public static class DevExtreme.AspNet.Data.Aggregation.CustomAggregators : object {
    private static Dictionary`2<string, Type> _aggregatorTypes;
    private static CustomAggregators();
    public static void RegisterAggregator(string summaryType, Type aggregatorType);
    internal static Aggregator`1<T> CreateAggregator(string summaryType, IAccessor`1<T> accessor);
    internal static bool IsRegistered(string summaryType);
}
internal static class DevExtreme.AspNet.Data.Aggregation.DynamicSum : object {
    public static object Calculate(IEnumerable`1<T> source, Func`2<T, object> selector);
}
internal class DevExtreme.AspNet.Data.Aggregation.MaxAggregator`1 : Aggregator`1<T> {
    private object _max;
    public MaxAggregator`1(IAccessor`1<T> accessor);
    public virtual void Step(T container, string selector);
    public virtual object Finish();
}
internal class DevExtreme.AspNet.Data.Aggregation.MinAggregator`1 : Aggregator`1<T> {
    private object _min;
    public MinAggregator`1(IAccessor`1<T> accessor);
    public virtual void Step(T container, string selector);
    public virtual object Finish();
}
internal class DevExtreme.AspNet.Data.Aggregation.SumAggregator`1 : Aggregator`1<T> {
    private IAccumulator _accumulator;
    public SumAggregator`1(IAccessor`1<T> accessor);
    public virtual void Step(T container, string selector);
    public virtual object Finish();
    public IAccumulator GetAccumulator();
}
internal class DevExtreme.AspNet.Data.Aggregation.SumFix : ExpressionCompiler {
    private IReadOnlyList`1<SummaryInfo> _totalSummary;
    private IReadOnlyList`1<SummaryInfo> _groupSummary;
    private IDictionary`2<string, object> _defaultValues;
    public SumFix(Type itemType, IReadOnlyList`1<SummaryInfo> totalSummary, IReadOnlyList`1<SummaryInfo> groupSummary);
    public void ApplyToTotal(Object[] values);
    public void ApplyToGroup(Object[] values);
    private void Apply(IReadOnlyList`1<SummaryInfo> summary, Object[] values);
    private object GetDefaultValue(string selector);
}
internal class DevExtreme.AspNet.Data.Async.AsyncOverSyncAdapter : object {
    public static IAsyncAdapter Instance;
    private static AsyncOverSyncAdapter();
    private sealed virtual override Task`1<int> DevExtreme.AspNet.Data.Async.IAsyncAdapter.CountAsync(IQueryProvider queryProvider, Expression expr, CancellationToken _);
    private sealed virtual override Task`1<IEnumerable`1<T>> DevExtreme.AspNet.Data.Async.IAsyncAdapter.ToEnumerableAsync(IQueryProvider queryProvider, Expression expr, CancellationToken _);
}
public static class DevExtreme.AspNet.Data.Async.CustomAsyncAdapters : object {
    private static List`1<Tuple`2<Func`2<Type, bool>, IAsyncAdapter>> _registeredAdapters;
    private static CustomAsyncAdapters();
    public static void RegisterAdapter(Func`2<Type, bool> queryProviderTypePredicate, IAsyncAdapter adapter);
    public static void RegisterAdapter(Type queryProviderType, IAsyncAdapter adapter);
    internal static IAsyncAdapter GetAdapter(Type queryProviderType);
}
public interface DevExtreme.AspNet.Data.Async.IAsyncAdapter {
    public abstract virtual Task`1<int> CountAsync(IQueryProvider queryProvider, Expression expr, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<T>> ToEnumerableAsync(IQueryProvider queryProvider, Expression expr, CancellationToken cancellationToken);
}
internal class DevExtreme.AspNet.Data.Async.ReflectionAsyncAdapter : object {
    private QueryProviderInfo _providerInfo;
    public ReflectionAsyncAdapter(QueryProviderInfo providerInfo);
    public static bool SupportsProvider(QueryProviderInfo providerInfo);
    private static bool IsEF6(QueryProviderInfo providerInfo);
    public sealed virtual Task`1<int> CountAsync(IQueryProvider provider, Expression expr, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<T>> ToEnumerableAsync(IQueryProvider provider, Expression expr, CancellationToken cancellationToken);
    private static MethodInfo FindCountAsyncMethod(Type extensionsType);
    private static MethodInfo FindToArrayAsyncMethod(Type extensionsType);
    private static MethodInfo FindToListAsyncMethod(Type extensionsType);
    private static MethodInfo FindQueryExtensionMethod(Type extensionsType, string name);
    private static Task`1<int> InvokeCountAsync(MethodInfo method, IQueryProvider provider, Expression expr, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.Async.ReflectionAsyncAdapter/<InvokeToArrayAsync>d__15`1")]
private static Task`1<IEnumerable`1<T>> InvokeToArrayAsync(MethodInfo method, IQueryProvider provider, Expression expr, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.Async.ReflectionAsyncAdapter/<InvokeToListAsync>d__16`1")]
private static Task`1<IEnumerable`1<T>> InvokeToListAsync(MethodInfo method, IQueryProvider provider, Expression expr, CancellationToken cancellationToken);
    private static object InvokeQueryExtensionMethod(MethodInfo method, Type elementType, IQueryable query, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private MethodInfo <CountAsync>g__GetCountAsyncMethod|4_0();
}
internal static class DevExtreme.AspNet.Data.Compatibility : object {
    public static IList UnwrapList(IList deserializedList);
    private static object UnwrapJsonElement(object deserializeObject);
}
internal class DevExtreme.AspNet.Data.DataSourceExpressionBuilder : object {
    private Expression Expr;
    private DataSourceLoadContext Context;
    public DataSourceExpressionBuilder(Expression expr, DataSourceLoadContext context);
    public Expression BuildLoadExpr(bool paginate, IList filterOverride, IReadOnlyList`1<string> selectOverride);
    public Expression BuildCountExpr();
    public Expression BuildLoadGroupsExpr(bool paginate, bool suppressGroups, bool suppressTotals);
    public Expression BuildGroupCountExpr();
    private void AddFilter(IList filterOverride);
    private void AddSort();
    private void AddSelect(IReadOnlyList`1<string> selectOverride);
    private void AddPaging();
    private void AddRemoteGrouping(bool suppressGroups, bool suppressTotals);
    private void AddCount();
    private SelectExpressionCompiler CreateSelectCompiler();
    private Expression QueryableCall(string methodName);
    private Expression QueryableCall(string methodName, Expression arg);
    private Type[] GetQueryableGenericArguments();
    private Type GetItemType();
}
internal class DevExtreme.AspNet.Data.DataSourceLoadContext : object {
    private DataSourceLoadOptionsBase _options;
    private QueryProviderInfo _providerInfo;
    private Type _itemType;
    private Nullable`1<bool> _shouldEmptyGroups;
    private Nullable`1<bool> _useRemoteGrouping;
    private bool _primaryKeyAndDefaultSortEnsured;
    private String[] _primaryKey;
    private string _defaultSort;
    private Nullable`1<bool> _summaryIsTotalCountOnly;
    private String[] _fullSelect;
    private Nullable`1<bool> _useRemoteSelect;
    public bool GuardNulls { get; }
    public bool RequireQueryableChainBreak { get; }
    public bool RequireTotalCount { get; }
    public bool IsCountQuery { get; }
    public int Skip { get; }
    public int Take { get; }
    public bool HasPaging { get; }
    public bool PaginateViaPrimaryKey { get; }
    public IList Filter { get; }
    public bool HasFilter { get; }
    public bool UseStringToLower { get; }
    public bool SupportsEqualsMethod { get; }
    public bool RequireGroupCount { get; }
    public IReadOnlyList`1<GroupingInfo> Group { get; }
    public bool HasGroups { get; }
    public bool ShouldEmptyGroups { get; }
    public bool UseRemoteGrouping { get; }
    public bool HasAnySort { get; }
    private bool HasSort { get; }
    public IReadOnlyList`1<string> PrimaryKey { get; }
    private string DefaultSort { get; }
    public bool HasPrimaryKey { get; }
    private bool HasDefaultSort { get; }
    private bool ShouldSortByPrimaryKey { get; }
    public IReadOnlyList`1<SummaryInfo> TotalSummary { get; }
    public IReadOnlyList`1<SummaryInfo> GroupSummary { get; }
    public bool HasSummary { get; }
    public bool HasTotalSummary { get; }
    public bool HasGroupSummary { get; }
    public bool SummaryIsTotalCountOnly { get; }
    public bool ExpandLinqSumType { get; }
    public bool IsSummaryQuery { get; }
    public bool IsRemoteTotalSummary { get; }
    public bool HasAnySelect { get; }
    public bool UseRemoteSelect { get; }
    public IReadOnlyList`1<string> FullSelect { get; }
    public DataSourceLoadContext(DataSourceLoadOptionsBase options, QueryProviderInfo providerInfo, Type itemType);
    public bool get_GuardNulls();
    public bool get_RequireQueryableChainBreak();
    public AnonTypeNewTweaks CreateAnonTypeNewTweaks();
    private static bool IsEmpty(IReadOnlyCollection`1<T> collection);
    private static bool IsEmptyList(IList list);
    public bool get_RequireTotalCount();
    public bool get_IsCountQuery();
    public int get_Skip();
    public int get_Take();
    public bool get_HasPaging();
    public bool get_PaginateViaPrimaryKey();
    public IList get_Filter();
    public bool get_HasFilter();
    public bool get_UseStringToLower();
    public bool get_SupportsEqualsMethod();
    public bool get_RequireGroupCount();
    public IReadOnlyList`1<GroupingInfo> get_Group();
    public bool get_HasGroups();
    public bool get_ShouldEmptyGroups();
    public bool get_UseRemoteGrouping();
    public bool get_HasAnySort();
    private bool get_HasSort();
    public IReadOnlyList`1<string> get_PrimaryKey();
    private string get_DefaultSort();
    public bool get_HasPrimaryKey();
    private bool get_HasDefaultSort();
    private bool get_ShouldSortByPrimaryKey();
    public IEnumerable`1<SortingInfo> GetFullSort();
    private void EnsurePrimaryKeyAndDefaultSort();
    public IReadOnlyList`1<SummaryInfo> get_TotalSummary();
    public IReadOnlyList`1<SummaryInfo> get_GroupSummary();
    public bool get_HasSummary();
    public bool get_HasTotalSummary();
    public bool get_HasGroupSummary();
    public bool get_SummaryIsTotalCountOnly();
    public bool get_ExpandLinqSumType();
    public bool get_IsSummaryQuery();
    public bool get_IsRemoteTotalSummary();
    public bool get_HasAnySelect();
    public bool get_UseRemoteSelect();
    public IReadOnlyList`1<string> get_FullSelect();
    [CompilerGeneratedAttribute]
internal static bool <get_UseRemoteGrouping>g__HasAvg|42_0(IEnumerable`1<SummaryInfo> summary);
    [CompilerGeneratedAttribute]
private bool <get_UseRemoteGrouping>g__ShouldUseRemoteGrouping|42_1();
    [CompilerGeneratedAttribute]
private String[] <get_FullSelect>g__Init|88_0();
}
public class DevExtreme.AspNet.Data.DataSourceLoader : object {
    public static LoadResult Load(IEnumerable`1<T> source, DataSourceLoadOptionsBase options);
    public static LoadResult Load(IQueryable`1<T> source, DataSourceLoadOptionsBase options);
    public static Task`1<LoadResult> LoadAsync(IQueryable`1<T> source, DataSourceLoadOptionsBase options, CancellationToken cancellationToken);
    private static Task`1<LoadResult> LoadAsync(IQueryable`1<T> source, DataSourceLoadOptionsBase options, CancellationToken ct, bool sync);
}
internal class DevExtreme.AspNet.Data.DataSourceLoaderImpl`1 : object {
    private IQueryable Source;
    private DataSourceLoadContext Context;
    private Func`2<Expression, ExpressionExecutor> CreateExecutor;
    public DataSourceLoaderImpl`1(IQueryable source, DataSourceLoadOptionsBase options, CancellationToken cancellationToken, bool sync);
    private DataSourceExpressionBuilder CreateBuilder();
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.DataSourceLoaderImpl`1/<LoadAsync>d__5")]
public Task`1<LoadResult> LoadAsync();
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.DataSourceLoaderImpl`1/<LoadAggregatesOnlyAsync>d__6")]
private Task`1<LoadResult> LoadAggregatesOnlyAsync();
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.DataSourceLoaderImpl`1/<ExecWithSelectAsync>d__7")]
private Task`1<IEnumerable`1<ExpandoObject>> ExecWithSelectAsync(Expression loadExpr);
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.DataSourceLoaderImpl`1/<ContinueWithGroupingAsync>d__8`1")]
private Task ContinueWithGroupingAsync(IEnumerable`1<R> loadResult, LoadResult result);
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.DataSourceLoaderImpl`1/<ContinueWithAggregationAsync>d__9`1")]
private Task ContinueWithAggregationAsync(IEnumerable data, IAccessor`1<R> accessor, LoadResult result, bool includeData);
    private Task`1<int> ExecCountAsync(Expression expr);
    private Task`1<int> ExecTotalCountAsync();
    private Task`1<RemoteGroupingResult> ExecRemoteTotalsAsync();
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.DataSourceLoaderImpl`1/<ExecRemoteGroupingAsync>d__13")]
private Task`1<RemoteGroupingResult> ExecRemoteGroupingAsync(bool remotePaging, bool suppressGroups, bool suppressTotals);
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.DataSourceLoaderImpl`1/<ExecExprAsync>d__14`1")]
private Task`1<IEnumerable`1<R>> ExecExprAsync(Expression expr);
    [AsyncStateMachineAttribute("DevExtreme.AspNet.Data.DataSourceLoaderImpl`1/<ExecExprAnonAsync>d__15")]
private Task`1<IEnumerable`1<AnonType>> ExecExprAnonAsync(Expression expr);
    private IList FilterFromKeys(IEnumerable`1<AnonType> keyTuples);
    private static IEnumerable Buffer(IEnumerable data);
    private static IEnumerable Paginate(IEnumerable data, int skip, int take);
    private static void EmptyGroups(IEnumerable groups, int level);
    [CompilerGeneratedAttribute]
internal static void <FilterFromKeys>g__AddCondition|16_0(IList container, int index, <>c__DisplayClass16_0& , <>c__DisplayClass16_1& );
}
public class DevExtreme.AspNet.Data.DataSourceLoadOptionsBase : object {
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <StringToLowerDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireTotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireGroupCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCountQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSummaryQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private SortingInfo[] <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupingInfo[] <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private IList <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private SummaryInfo[] <TotalSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private SummaryInfo[] <GroupSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PreSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RemoteSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RemoteGrouping>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExpandLinqSumType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StringToLower>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PaginateViaPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SortByPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAsyncOverSync>k__BackingField;
    public static Nullable`1<bool> StringToLowerDefault { get; public set; }
    public bool RequireTotalCount { get; public set; }
    public bool RequireGroupCount { get; public set; }
    public bool IsCountQuery { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsSummaryQuery { get; public set; }
    public int Skip { get; public set; }
    public int Take { get; public set; }
    public SortingInfo[] Sort { get; public set; }
    public GroupingInfo[] Group { get; public set; }
    [JsonConverterAttribute("DevExtreme.AspNet.Data.ListConverter")]
public IList Filter { get; public set; }
    public SummaryInfo[] TotalSummary { get; public set; }
    public SummaryInfo[] GroupSummary { get; public set; }
    public String[] Select { get; public set; }
    public String[] PreSelect { get; public set; }
    public Nullable`1<bool> RemoteSelect { get; public set; }
    public Nullable`1<bool> RemoteGrouping { get; public set; }
    public Nullable`1<bool> ExpandLinqSumType { get; public set; }
    public String[] PrimaryKey { get; public set; }
    public string DefaultSort { get; public set; }
    public Nullable`1<bool> StringToLower { get; public set; }
    public Nullable`1<bool> PaginateViaPrimaryKey { get; public set; }
    public Nullable`1<bool> SortByPrimaryKey { get; public set; }
    public bool AllowAsyncOverSync { get; public set; }
    [CompilerGeneratedAttribute]
public static Nullable`1<bool> get_StringToLowerDefault();
    [CompilerGeneratedAttribute]
public static void set_StringToLowerDefault(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_RequireTotalCount();
    [CompilerGeneratedAttribute]
public void set_RequireTotalCount(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireGroupCount();
    [CompilerGeneratedAttribute]
public void set_RequireGroupCount(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCountQuery();
    [CompilerGeneratedAttribute]
public void set_IsCountQuery(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSummaryQuery();
    [CompilerGeneratedAttribute]
public void set_IsSummaryQuery(bool value);
    [CompilerGeneratedAttribute]
public int get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(int value);
    [CompilerGeneratedAttribute]
public int get_Take();
    [CompilerGeneratedAttribute]
public void set_Take(int value);
    [CompilerGeneratedAttribute]
public SortingInfo[] get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(SortingInfo[] value);
    [CompilerGeneratedAttribute]
public GroupingInfo[] get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(GroupingInfo[] value);
    [CompilerGeneratedAttribute]
public IList get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(IList value);
    [CompilerGeneratedAttribute]
public SummaryInfo[] get_TotalSummary();
    [CompilerGeneratedAttribute]
public void set_TotalSummary(SummaryInfo[] value);
    [CompilerGeneratedAttribute]
public SummaryInfo[] get_GroupSummary();
    [CompilerGeneratedAttribute]
public void set_GroupSummary(SummaryInfo[] value);
    [CompilerGeneratedAttribute]
public String[] get_Select();
    [CompilerGeneratedAttribute]
public void set_Select(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PreSelect();
    [CompilerGeneratedAttribute]
public void set_PreSelect(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RemoteSelect();
    [CompilerGeneratedAttribute]
public void set_RemoteSelect(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RemoteGrouping();
    [CompilerGeneratedAttribute]
public void set_RemoteGrouping(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExpandLinqSumType();
    [CompilerGeneratedAttribute]
public void set_ExpandLinqSumType(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(String[] value);
    [CompilerGeneratedAttribute]
public string get_DefaultSort();
    [CompilerGeneratedAttribute]
public void set_DefaultSort(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StringToLower();
    [CompilerGeneratedAttribute]
public void set_StringToLower(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PaginateViaPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PaginateViaPrimaryKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SortByPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_SortByPrimaryKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAsyncOverSync();
    [CompilerGeneratedAttribute]
public void set_AllowAsyncOverSync(bool value);
}
internal static class DevExtreme.AspNet.Data.DynamicBindingHelper : object {
    private static IEnumerable`1<CSharpArgumentInfo> EMPTY_ARGUMENT_INFO;
    private static DynamicBindingHelper();
    public static bool ShouldUseDynamicBinding(Type type);
    public static Expression CompileGetMember(Expression target, string clientExpr);
}
internal abstract class DevExtreme.AspNet.Data.ExpressionCompiler : object {
    protected Type ItemType;
    protected bool GuardNulls;
    public ExpressionCompiler(Type itemType, bool guardNulls);
    protected internal Expression CompileAccessorExpression(Expression target, string clientExpr, Action`1<List`1<Expression>> customizeProgression, bool liftToNullable);
    private Expression CompileNullGuard(IEnumerable`1<Expression> progression);
    protected ParameterExpression CreateItemParam();
    internal static void ForceToString(List`1<Expression> progression);
    private static Expression ReadExpando(Expression expando, string member);
    internal static MemberExpression GetPropertyOrField(Expression expression, string propertyOrFieldName);
    private static MemberExpression GetDeclaredOnlyProperty(Expression expression, string propertyOrFieldName);
    private static MemberExpression FixReflectedType(MemberExpression expr);
}
internal class DevExtreme.AspNet.Data.ExpressionExecutor : object {
    private IQueryProvider Provider;
    private Expression Expr;
    private QueryProviderInfo ProviderInfo;
    private CancellationToken CancellationToken;
    private bool Sync;
    private bool AllowAsyncOverSync;
    public ExpressionExecutor(IQueryProvider provider, Expression expr, QueryProviderInfo providerInfo, CancellationToken cancellationToken, bool sync, bool allowAsyncOverSync);
    public void BreakQueryableChain();
    public Task`1<IEnumerable`1<T>> ToEnumerableAsync();
    public Task`1<int> CountAsync();
    private IAsyncAdapter CreateAsyncAdapter();
    private static Exception ProviderNotSupported(Type providerType);
}
internal class DevExtreme.AspNet.Data.FilterExpressionCompiler : ExpressionCompiler {
    private static string CONTAINS;
    private static string NOT_CONTAINS;
    private static string STARTS_WITH;
    private static string ENDS_WITH;
    private bool _stringToLower;
    private bool _supportsEqualsMethod;
    public FilterExpressionCompiler(Type itemType, bool guardNulls, bool stringToLower, bool supportsEqualsMethod);
    public LambdaExpression Compile(IList criteriaJson);
    private Expression CompileCore(ParameterExpression dataItemExpr, IList criteriaJson);
    private Expression CompileBinary(ParameterExpression dataItemExpr, IList criteriaJson);
    private bool IsInequality(ExpressionType type);
    private bool HasEqualityOperator(Type type);
    private bool HasComparisonOperator(Type type);
    private Expression CompileCompareToCall(Expression accessorExpr, ExpressionType expressionType, object clientValue, MethodInfo compareToMethod);
    private Expression CompileStringFunction(Expression accessorExpr, string clientOperation, string value);
    private Expression CompileGroup(ParameterExpression dataItemExpr, IList criteriaJson);
    private Expression CompileUnary(ParameterExpression dataItemExpr, IList criteriaJson);
    private ExpressionType TranslateBinaryOperation(string clientOperation);
    private bool IsCriteria(object item);
    internal bool IsUnary(IList criteriaJson);
    private string GetStringOperationMethodName(string clientOperation);
    private static void AddToLower(List`1<Expression> progression);
    private static void EnumToUnderlyingType(Expression& accessorExpr, Expression& valueExpr);
}
internal class DevExtreme.AspNet.Data.GroupHelper`1 : object {
    private static object NULL_KEY;
    private IAccessor`1<T> _accessor;
    public GroupHelper`1(IAccessor`1<T> accessor);
    private static GroupHelper`1();
    public List`1<Group> Group(IEnumerable`1<T> data, IEnumerable`1<GroupingInfo> groupInfo);
    private List`1<Group> Group(IEnumerable`1<T> data, GroupingInfo groupInfo);
    private object GetKey(T obj, GroupingInfo groupInfo);
    private static DateTime ToDateTime(object value);
}
public class DevExtreme.AspNet.Data.GroupingInfo : SortingInfo {
    [CompilerGeneratedAttribute]
private string <GroupInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsExpanded>k__BackingField;
    [JsonConverterAttribute("DevExtreme.AspNet.Data.NumericAndStringConverter")]
public string GroupInterval { get; public set; }
    public Nullable`1<bool> IsExpanded { get; public set; }
    [CompilerGeneratedAttribute]
public string get_GroupInterval();
    [CompilerGeneratedAttribute]
public void set_GroupInterval(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsExpanded();
    [CompilerGeneratedAttribute]
public void set_IsExpanded(Nullable`1<bool> value);
    public bool GetIsExpanded();
}
public static class DevExtreme.AspNet.Data.Helpers.CustomAccessorCompilers : object {
    private static ICollection`1<CompilerFunc> _compilers;
    private static CustomAccessorCompilers();
    public static void Register(CompilerFunc compilerFunc);
    internal static Expression TryCompile(Expression expr, string accessorText);
}
public static class DevExtreme.AspNet.Data.Helpers.CustomFilterCompilers : object {
    public static void RegisterBinaryExpressionCompiler(Func`2<IBinaryExpressionInfo, Expression> compilerFunc);
}
public static class DevExtreme.AspNet.Data.Helpers.DataSourceLoadOptionsParser : object {
    private static JsonSerializerOptions DEFAULT_SERIALIZER_OPTIONS;
    public static string KEY_REQUIRE_TOTAL_COUNT;
    public static string KEY_REQUIRE_GROUP_COUNT;
    public static string KEY_IS_COUNT_QUERY;
    public static string KEY_SKIP;
    public static string KEY_TAKE;
    public static string KEY_SORT;
    public static string KEY_GROUP;
    public static string KEY_FILTER;
    public static string KEY_TOTAL_SUMMARY;
    public static string KEY_GROUP_SUMMARY;
    public static string KEY_SELECT;
    private static DataSourceLoadOptionsParser();
    public static void Parse(DataSourceLoadOptionsBase loadOptions, Func`2<string, string> valueSource);
}
internal class DevExtreme.AspNet.Data.Helpers.DefaultAccessor`1 : ExpressionCompiler {
    private IDictionary`2<string, Func`2<T, object>> _accessors;
    public sealed virtual object Read(T obj, string selector);
}
internal static class DevExtreme.AspNet.Data.Helpers.EFSorting : object {
    private static IEnumerable`1<Type> ORDERED_SORTABLE_TYPES;
    private static EFSorting();
    public static string FindSortableMember(Type entityType);
    private static bool IsEFCodeFirstConventionalKey(Candidate candidate);
    [CompilerGeneratedAttribute]
internal static bool <FindSortableMember>g__IsPublicReadable|2_0(PropertyInfo p);
    [CompilerGeneratedAttribute]
internal static bool <FindSortableMember>g__IsPublicWritable|2_1(PropertyInfo p);
}
public interface DevExtreme.AspNet.Data.Helpers.IAccessor`1 {
    public abstract virtual object Read(T container, string selector);
}
public interface DevExtreme.AspNet.Data.Helpers.IBinaryExpressionInfo {
    public Expression DataItemExpression { get; }
    public string AccessorText { get; }
    public string Operation { get; }
    public object Value { get; }
    public bool StringToLower { get; }
    public abstract virtual Expression get_DataItemExpression();
    public abstract virtual string get_AccessorText();
    public abstract virtual string get_Operation();
    public abstract virtual object get_Value();
    public abstract virtual bool get_StringToLower();
}
internal class DevExtreme.AspNet.Data.ListConverter : JsonConverter`1<IList> {
    public virtual IList Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, IList value, JsonSerializerOptions options);
}
internal class DevExtreme.AspNet.Data.NumericAndStringConverter : JsonConverter`1<string> {
    public virtual string Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    private static object GetNumber(Utf8JsonReader& reader);
    public virtual void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options);
}
internal class DevExtreme.AspNet.Data.QueryProviderInfo : object {
    public bool IsLinqToObjects;
    public bool IsEFClassic;
    public bool IsEFCore;
    public bool IsXPO;
    public bool IsNH;
    public bool IsL2S;
    public bool IsMongoDB;
    public Version Version;
    public QueryProviderInfo(IQueryProvider provider);
}
internal class DevExtreme.AspNet.Data.RemoteGrouping.RemoteAvgAggregator`1 : Aggregator`1<T> {
    private Aggregator`1<T> _countAggregator;
    private SumAggregator`1<T> _valueAggregator;
    public RemoteAvgAggregator`1(IAccessor`1<T> accessor);
    public virtual void Step(T container, string selector);
    public virtual object Finish();
}
internal class DevExtreme.AspNet.Data.RemoteGrouping.RemoteCountAggregator`1 : Aggregator`1<T> {
    private int _count;
    public RemoteCountAggregator`1(IAccessor`1<T> accessor);
    public virtual void Step(T dataitem, string selector);
    public virtual object Finish();
}
internal class DevExtreme.AspNet.Data.RemoteGrouping.RemoteGroupExpressionCompiler : ExpressionCompiler {
    private bool _expandSumType;
    private AnonTypeNewTweaks _anonTypeNewTweaks;
    private IEnumerable`1<GroupingInfo> _grouping;
    private IEnumerable`1<SummaryInfo> _totalSummary;
    private IEnumerable`1<SummaryInfo> _groupSummary;
    public RemoteGroupExpressionCompiler(Type itemType, bool guardNulls, bool expandSumType, AnonTypeNewTweaks anonTypeNewTweaks, IEnumerable`1<GroupingInfo> grouping, IEnumerable`1<SummaryInfo> totalSummary, IEnumerable`1<SummaryInfo> groupSummary);
    public Expression Compile(Expression target);
    private Expression MakeAggregatingProjection(Expression target, Type groupingType, AnonTypeFacade groupKeyTypeFacade);
    [IteratorStateMachineAttribute("DevExtreme.AspNet.Data.RemoteGrouping.RemoteGroupExpressionCompiler/<MakeAggregates>d__8")]
private IEnumerable`1<Expression> MakeAggregates(Expression aggregateTarget, IEnumerable`1<SummaryInfo> summary);
    private Expression MakeAggregate(Expression aggregateTarget, SummaryInfo s);
    private static bool IsWellKnownAggregateDataType(Type type);
    private Expression ConvertSumSelector(Expression expr);
    internal static Type GetSumType(Type type, bool expand);
    private static string GetPreAggregateMethodName(string summaryType);
    private Expression CompileGroupInterval(Expression target, string selector, string intervalString);
    private Expression CompileNumericGroupInterval(Expression target, string selector, string intervalString);
    private Expression CompileDateGroupInterval(Expression target, string selector, string intervalString);
    [IteratorStateMachineAttribute("DevExtreme.AspNet.Data.RemoteGrouping.RemoteGroupExpressionCompiler/<TransformSummary>d__17")]
private static IEnumerable`1<SummaryInfo> TransformSummary(IEnumerable`1<SummaryInfo> source);
}
internal class DevExtreme.AspNet.Data.RemoteGrouping.RemoteGroupingResult : object {
    public List`1<Group> Groups;
    public Object[] Totals;
    public int TotalCount;
}
internal class DevExtreme.AspNet.Data.RemoteGrouping.RemoteGroupTransformer : object {
    public static RemoteGroupingResult Run(Type sourceItemType, IEnumerable`1<AnonType> flatGroups, int groupCount, IReadOnlyList`1<SummaryInfo> totalSummary, IReadOnlyList`1<SummaryInfo> groupSummary);
    private static List`1<SummaryInfo> TransformSummary(IReadOnlyList`1<SummaryInfo> original, Int32& fieldIndex);
}
public class DevExtreme.AspNet.Data.ResponseModel.Group : object {
    [CompilerGeneratedAttribute]
private object <key>k__BackingField;
    [CompilerGeneratedAttribute]
private IList <items>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <count>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <summary>k__BackingField;
    public object key { get; public set; }
    public IList items { get; public set; }
    [JsonIgnoreAttribute]
public Nullable`1<int> count { get; public set; }
    [JsonIgnoreAttribute]
public Object[] summary { get; public set; }
    [CompilerGeneratedAttribute]
public object get_key();
    [CompilerGeneratedAttribute]
public void set_key(object value);
    [CompilerGeneratedAttribute]
public IList get_items();
    [CompilerGeneratedAttribute]
public void set_items(IList value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_count();
    [CompilerGeneratedAttribute]
public void set_count(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Object[] get_summary();
    [CompilerGeneratedAttribute]
public void set_summary(Object[] value);
}
public class DevExtreme.AspNet.Data.ResponseModel.LoadResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable <data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <totalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <groupCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <summary>k__BackingField;
    public IEnumerable data { get; public set; }
    [DefaultValueAttribute("-1")]
public int totalCount { get; public set; }
    [DefaultValueAttribute("-1")]
public int groupCount { get; public set; }
    [JsonIgnoreAttribute]
public Object[] summary { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable get_data();
    [CompilerGeneratedAttribute]
public void set_data(IEnumerable value);
    [CompilerGeneratedAttribute]
public int get_totalCount();
    [CompilerGeneratedAttribute]
public void set_totalCount(int value);
    [CompilerGeneratedAttribute]
public int get_groupCount();
    [CompilerGeneratedAttribute]
public void set_groupCount(int value);
    [CompilerGeneratedAttribute]
public Object[] get_summary();
    [CompilerGeneratedAttribute]
public void set_summary(Object[] value);
}
internal class DevExtreme.AspNet.Data.SelectExpressionCompiler : ExpressionCompiler {
    private AnonTypeNewTweaks _anonTypeNewTweaks;
    public SelectExpressionCompiler(Type itemType, bool guardNulls, AnonTypeNewTweaks anonTypeNewTweaks);
    public Expression Compile(Expression target, IEnumerable`1<string> clientExprList);
    public Expression CompileSingle(Expression target, string clientExpr);
    private Expression Compile(Expression target, IEnumerable`1<string> clientExprList, bool useNew);
}
internal static class DevExtreme.AspNet.Data.SelectHelper : object {
    [IteratorStateMachineAttribute("DevExtreme.AspNet.Data.SelectHelper/<Evaluate>d__0`1")]
public static IEnumerable`1<ExpandoObject> Evaluate(IEnumerable`1<T> data, IEnumerable`1<string> select);
    [IteratorStateMachineAttribute("DevExtreme.AspNet.Data.SelectHelper/<ConvertRemoteResult>d__1")]
public static IEnumerable`1<ExpandoObject> ConvertRemoteResult(IEnumerable`1<AnonType> remoteResult, IEnumerable`1<string> select);
    private static String[][] SelectToPaths(IEnumerable`1<string> select);
    private static ExpandoObject PathsToExpando(String[][] paths, Func`2<int, object> pathValueByIndex);
    private static void Shrink(IDictionary`2<string, object> target, String[] path, object value, int index);
}
internal class DevExtreme.AspNet.Data.SortExpressionCompiler : ExpressionCompiler {
    public SortExpressionCompiler(Type itemType, bool guardNulls);
    public Expression Compile(Expression target, IEnumerable`1<SortingInfo> clientExprList);
}
public class DevExtreme.AspNet.Data.SortingInfo : object {
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Desc>k__BackingField;
    public string Selector { get; public set; }
    public bool Desc { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(string value);
    [CompilerGeneratedAttribute]
public bool get_Desc();
    [CompilerGeneratedAttribute]
public void set_Desc(bool value);
}
public class DevExtreme.AspNet.Data.SummaryInfo : object {
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SummaryType>k__BackingField;
    public string Selector { get; public set; }
    public string SummaryType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(string value);
    [CompilerGeneratedAttribute]
public string get_SummaryType();
    [CompilerGeneratedAttribute]
public void set_SummaryType(string value);
}
[DefaultMemberAttribute("Item")]
internal class DevExtreme.AspNet.Data.Types.AnonType : object {
    internal static int MAX_SIZE;
    protected int Size { get; }
    internal object Item { get; }
    protected virtual int get_Size();
    internal virtual object get_Item(int index);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Type Get(IList`1<Type> typeArguments);
    public static Expression CreateNewExpression(IReadOnlyCollection`1<Expression> expressions, AnonTypeNewTweaks tweaks);
    public static Expression CreateNewExpression(Type type, Type[] typeArguments, IEnumerable`1<Expression> expressions, bool useFields);
    public static string IndexToField(int index);
    public static int FieldToIndex(string field);
    private static IReadOnlyCollection`1<Expression> Pad(IReadOnlyCollection`1<Expression> collection, int totalCount);
    private static Type GetTemplate(int size);
    private static int SnapSize(int size);
}
[DefaultMemberAttribute("Item")]
internal class DevExtreme.AspNet.Data.Types.AnonType`1 : AnonType {
    public T0 I0;
    protected int Size { get; }
    internal object Item { get; }
    public AnonType`1(T0 i0);
    protected virtual int get_Size();
    internal virtual object get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class DevExtreme.AspNet.Data.Types.AnonType`16 : AnonType {
    public T0 I0;
    public T1 I1;
    public T2 I2;
    public T3 I3;
    public T4 I4;
    public T5 I5;
    public T6 I6;
    public T7 I7;
    public T8 I8;
    public T9 I9;
    public T10 I10;
    public T11 I11;
    public T12 I12;
    public T13 I13;
    public T14 I14;
    public T15 I15;
    protected int Size { get; }
    internal object Item { get; }
    public AnonType`16(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8);
    public AnonType`16(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9);
    public AnonType`16(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10);
    public AnonType`16(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11);
    public AnonType`16(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12);
    public AnonType`16(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13);
    public AnonType`16(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14);
    public AnonType`16(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15);
    protected virtual int get_Size();
    internal virtual object get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class DevExtreme.AspNet.Data.Types.AnonType`2 : AnonType {
    public T0 I0;
    public T1 I1;
    protected int Size { get; }
    internal object Item { get; }
    public AnonType`2(T0 i0, T1 i1);
    protected virtual int get_Size();
    internal virtual object get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class DevExtreme.AspNet.Data.Types.AnonType`32 : AnonType {
    public T0 I0;
    public T1 I1;
    public T2 I2;
    public T3 I3;
    public T4 I4;
    public T5 I5;
    public T6 I6;
    public T7 I7;
    public T8 I8;
    public T9 I9;
    public T10 I10;
    public T11 I11;
    public T12 I12;
    public T13 I13;
    public T14 I14;
    public T15 I15;
    public T16 I16;
    public T17 I17;
    public T18 I18;
    public T19 I19;
    public T20 I20;
    public T21 I21;
    public T22 I22;
    public T23 I23;
    public T24 I24;
    public T25 I25;
    public T26 I26;
    public T27 I27;
    public T28 I28;
    public T29 I29;
    public T30 I30;
    public T31 I31;
    protected int Size { get; }
    internal object Item { get; }
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22, T23 i23);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22, T23 i23, T24 i24);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22, T23 i23, T24 i24, T25 i25);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22, T23 i23, T24 i24, T25 i25, T26 i26);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22, T23 i23, T24 i24, T25 i25, T26 i26, T27 i27);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22, T23 i23, T24 i24, T25 i25, T26 i26, T27 i27, T28 i28);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22, T23 i23, T24 i24, T25 i25, T26 i26, T27 i27, T28 i28, T29 i29);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22, T23 i23, T24 i24, T25 i25, T26 i26, T27 i27, T28 i28, T29 i29, T30 i30);
    public AnonType`32(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7, T8 i8, T9 i9, T10 i10, T11 i11, T12 i12, T13 i13, T14 i14, T15 i15, T16 i16, T17 i17, T18 i18, T19 i19, T20 i20, T21 i21, T22 i22, T23 i23, T24 i24, T25 i25, T26 i26, T27 i27, T28 i28, T29 i29, T30 i30, T31 i31);
    protected virtual int get_Size();
    internal virtual object get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class DevExtreme.AspNet.Data.Types.AnonType`4 : AnonType {
    public T0 I0;
    public T1 I1;
    public T2 I2;
    public T3 I3;
    protected int Size { get; }
    internal object Item { get; }
    public AnonType`4(T0 i0, T1 i1, T2 i2);
    public AnonType`4(T0 i0, T1 i1, T2 i2, T3 i3);
    protected virtual int get_Size();
    internal virtual object get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class DevExtreme.AspNet.Data.Types.AnonType`8 : AnonType {
    public T0 I0;
    public T1 I1;
    public T2 I2;
    public T3 I3;
    public T4 I4;
    public T5 I5;
    public T6 I6;
    public T7 I7;
    protected int Size { get; }
    internal object Item { get; }
    public AnonType`8(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4);
    public AnonType`8(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5);
    public AnonType`8(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6);
    public AnonType`8(T0 i0, T1 i1, T2 i2, T3 i3, T4 i4, T5 i5, T6 i6, T7 i7);
    protected virtual int get_Size();
    internal virtual object get_Item(int index);
}
internal class DevExtreme.AspNet.Data.Types.AnonTypeAccessor : object {
    public static AnonTypeAccessor Instance;
    private static AnonTypeAccessor();
    public sealed virtual object Read(AnonType container, string selector);
}
internal class DevExtreme.AspNet.Data.Types.AnonTypeFacade : object {
    private IReadOnlyCollection`1<Expression> MemberExpressions;
    public int MemberCount { get; }
    private bool UseBuiltInTypes { get; }
    public AnonTypeFacade(IReadOnlyCollection`1<Expression> memberExpressions);
    public int get_MemberCount();
    private bool get_UseBuiltInTypes();
    public Expression CreateNewExpression(AnonTypeNewTweaks tweaks);
    public MemberExpression CreateMemberAccessor(Expression expr, int index);
}
internal class DevExtreme.AspNet.Data.Types.AnonTypeNewTweaks : object {
    public bool AllowEmpty;
    public bool AllowUnusedMembers;
}
[DefaultMemberAttribute("Item")]
internal class DevExtreme.AspNet.Data.Types.DynamicClassAdapter : AnonType {
    private object Obj;
    internal object Item { get; }
    protected int Size { get; }
    public DynamicClassAdapter(object obj);
    internal virtual object get_Item(int index);
    protected virtual int get_Size();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class DevExtreme.AspNet.Data.Types.DynamicClassBridge : object {
    private static Type FACTORY_TYPE;
    private static Type CLASS_TYPE;
    private static Type PROP_TYPE;
    private static MethodInfo CREATE_TYPE_METHOD;
    private static MethodInfo INDEXER_METHOD;
    private static DynamicClassBridge();
    public static Type CreateType(Type[] memberTypes);
    public static object GetMember(object obj, int index);
}
internal static class DevExtreme.AspNet.Data.Utils : object {
    public static bool CanAssignNull(Type type);
    public static bool IsNullable(Type type);
    public static Type MakeNullable(Type type);
    public static object GetDefaultValue(Type type);
    public static object ConvertClientValue(object value, Type type);
    public static Type StripNullableType(Type type);
    public static string GetSortMethod(bool first, bool desc);
    public static IEnumerable`1<SortingInfo> AddRequiredSort(IEnumerable`1<SortingInfo> sort, IEnumerable`1<string> requiredSelectors);
    public static String[] GetPrimaryKey(Type type);
    public static int DynamicCompare(object selectorResult, object clientValue, bool stringToLower);
    public static object UnwrapNewtonsoftValue(object value);
    private static bool IsIntegralType(Type type);
}
