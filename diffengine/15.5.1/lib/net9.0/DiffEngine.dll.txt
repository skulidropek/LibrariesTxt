internal class DiffEngine_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Caseless;
}
public class DiffEngine.BuildArguments : MulticastDelegate {
    public BuildArguments(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(string tempFile, string targetFile);
    public virtual IAsyncResult BeginInvoke(string tempFile, string targetFile, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public static class DiffEngine.BuildServerDetector : object {
    [CompilerGeneratedAttribute]
private static bool <Detected>k__BackingField;
    public static bool Detected { get; public set; }
    private static BuildServerDetector();
    [CompilerGeneratedAttribute]
public static bool get_Detected();
    [CompilerGeneratedAttribute]
public static void set_Detected(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class DiffEngine.ContinuousTestingDetector : object {
    [CompilerGeneratedAttribute]
private static bool <IsNCrunchExplicitRun>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <Detected>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsNCrunch>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <NCrunchOriginalProjectDirectory>k__BackingField;
    public static bool IsNCrunchExplicitRun { get; }
    public static bool Detected { get; public set; }
    public static bool IsNCrunch { get; }
    public static string NCrunchOriginalProjectDirectory { get; }
    private static ContinuousTestingDetector();
    [CompilerGeneratedAttribute]
public static bool get_IsNCrunchExplicitRun();
    [CompilerGeneratedAttribute]
public static bool get_Detected();
    [CompilerGeneratedAttribute]
public static void set_Detected(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsNCrunch();
    [CompilerGeneratedAttribute]
public static string get_NCrunchOriginalProjectDirectory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DiffEngine.Definition : object {
    [CompilerGeneratedAttribute]
private DiffTool <Tool>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRefresh>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMdi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BinaryExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cost>k__BackingField;
    [CompilerGeneratedAttribute]
private OsSupport <OsSupport>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public DiffTool Tool { get; public set; }
    public string Url { get; public set; }
    public bool AutoRefresh { get; public set; }
    public bool IsMdi { get; public set; }
    public bool SupportsText { get; public set; }
    public bool RequiresTarget { get; public set; }
    public String[] BinaryExtensions { get; public set; }
    public string Cost { get; public set; }
    public OsSupport OsSupport { get; public set; }
    [NullableAttribute("2")]
public string Notes { get; public set; }
    public Definition(DiffTool Tool, string Url, bool AutoRefresh, bool IsMdi, bool SupportsText, bool RequiresTarget, String[] BinaryExtensions, string Cost, OsSupport OsSupport, string Notes);
    [CompilerGeneratedAttribute]
protected Definition(Definition original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public DiffTool get_Tool();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tool(DiffTool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Url(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoRefresh();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AutoRefresh(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMdi();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsMdi(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsText();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SupportsText(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequiresTarget();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RequiresTarget(bool value);
    [CompilerGeneratedAttribute]
public String[] get_BinaryExtensions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BinaryExtensions(String[] value);
    [CompilerGeneratedAttribute]
public string get_Cost();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Cost(string value);
    [CompilerGeneratedAttribute]
public OsSupport get_OsSupport();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OsSupport(OsSupport value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Notes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Notes(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Definition left, Definition right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Definition left, Definition right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(Definition other);
    [CompilerGeneratedAttribute]
public virtual Definition <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(DiffTool& Tool, String& Url, Boolean& AutoRefresh, Boolean& IsMdi, Boolean& SupportsText, Boolean& RequiresTarget, String[]& BinaryExtensions, String& Cost, OsSupport& OsSupport, String& Notes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DiffEngine.Definitions : object {
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<Definition> <Tools>k__BackingField;
    public static IReadOnlyCollection`1<Definition> Tools { get; }
    private static Definitions();
    [CompilerGeneratedAttribute]
public static IReadOnlyCollection`1<Definition> get_Tools();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DiffEngine.DiffEngineTray : object {
    [CompilerGeneratedAttribute]
private static bool <IsRunning>k__BackingField;
    public static bool IsRunning { get; }
    private static DiffEngineTray();
    [CompilerGeneratedAttribute]
public static bool get_IsRunning();
    public static void AddDelete(string file);
    public static void AddMove(string tempFile, string targetFile, string exe, string arguments, bool canKill, Nullable`1<int> processId);
    public static Task AddDeleteAsync(string file, CancellationToken cancel);
    public static Task AddMoveAsync(string tempFile, string targetFile, string exe, string arguments, bool canKill, Nullable`1<int> processId, CancellationToken cancel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DiffEngine.DiffRunner : object {
    [CompilerGeneratedAttribute]
private static bool <Disabled>k__BackingField;
    public static bool Disabled { get; public set; }
    private static DiffRunner();
    [CompilerGeneratedAttribute]
public static bool get_Disabled();
    [CompilerGeneratedAttribute]
public static void set_Disabled(bool value);
    public static void MaxInstancesToLaunch(int value);
    public static LaunchResult Launch(DiffTool tool, string tempFile, string targetFile, Encoding encoding);
    public static Task`1<LaunchResult> LaunchAsync(DiffTool tool, string tempFile, string targetFile, Encoding encoding);
    public static LaunchResult Launch(string tempFile, string targetFile, Encoding encoding);
    public static Task`1<LaunchResult> LaunchAsync(string tempFile, string targetFile, Encoding encoding);
    public static LaunchResult Launch(ResolvedTool tool, string tempFile, string targetFile, Encoding encoding);
    public static Task`1<LaunchResult> LaunchAsync(ResolvedTool tool, string tempFile, string targetFile, Encoding encoding);
    private static LaunchResult InnerLaunch(TryResolveTool tryResolveTool, string tempFile, string targetFile, Encoding encoding);
    [AsyncStateMachineAttribute("DiffEngine.DiffRunner/<InnerLaunchAsync>d__12")]
private static Task`1<LaunchResult> InnerLaunchAsync(TryResolveTool tryResolveTool, string tempFile, string targetFile, Encoding encoding);
    private static bool ShouldExitLaunch(TryResolveTool tryResolveTool, string targetFile, Encoding encoding, ResolvedTool& tool, Nullable`1& result);
    private static bool TryCreate(ResolvedTool tool, string targetFile, Encoding encoding);
    private static int LaunchProcess(ResolvedTool tool, string arguments);
    private static void KillIfNotMdi(ResolvedTool tool, string command);
    private static void GuardFiles(string tempFile, string targetFile);
    public static void Kill(string tempFile, string targetFile);
}
public enum DiffEngine.DiffTool : Enum {
    public int value__;
    public static DiffTool BeyondCompare;
    public static DiffTool P4Merge;
    public static DiffTool Kaleidoscope;
    public static DiffTool DeltaWalker;
    public static DiffTool WinMerge;
    public static DiffTool TortoiseMerge;
    public static DiffTool TortoiseGitMerge;
    public static DiffTool TortoiseGitIDiff;
    public static DiffTool TortoiseIDiff;
    public static DiffTool KDiff3;
    public static DiffTool TkDiff;
    public static DiffTool Guiffy;
    public static DiffTool ExamDiff;
    public static DiffTool Diffinity;
    public static DiffTool Rider;
    public static DiffTool Vim;
    public static DiffTool Neovim;
    public static DiffTool AraxisMerge;
    public static DiffTool Meld;
    public static DiffTool SublimeMerge;
    public static DiffTool VisualStudioCode;
    public static DiffTool VisualStudio;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DiffEngine.DiffTools : object {
    private static Dictionary`2<string, ResolvedTool> ExtensionLookup;
    private static Dictionary`2<string, ResolvedTool> PathLookup;
    private static List`1<ResolvedTool> resolved;
    public static IEnumerable`1<ResolvedTool> Resolved { get; }
    private static DiffTools();
    public static IEnumerable`1<ResolvedTool> get_Resolved();
    internal static void Reset();
    public static void UseOrder(DiffTool[] order);
    public static void UseOrder(Boolean& throwForNoTool, DiffTool[] order);
    public static bool IsDetectedForFile(DiffTool diffTool, string path);
    public static bool IsDetectedForExtension(DiffTool diffTool, string extension);
    [NullableContextAttribute("2")]
public static ResolvedTool AddToolBasedOn(DiffTool basedOn, string name, Nullable`1<bool> autoRefresh, Nullable`1<bool> isMdi, Nullable`1<bool> supportsText, Nullable`1<bool> requiresTarget, LaunchArguments launchArguments, string exePath, IEnumerable`1<string> binaryExtensions);
    public static ResolvedTool AddTool(string name, bool autoRefresh, bool isMdi, bool supportsText, bool requiresTarget, IEnumerable`1<string> binaryExtensions, OsSupport osSupport);
    public static ResolvedTool AddTool(string name, bool autoRefresh, bool isMdi, bool supportsText, bool requiresTarget, LaunchArguments launchArguments, string exePath, IEnumerable`1<string> binaryExtensions);
    private static ResolvedTool AddTool(string name, Nullable`1<DiffTool> diffTool, bool autoRefresh, bool isMdi, bool supportsText, bool requiresTarget, IEnumerable`1<string> binaryExtensions, OsSupport osSupport);
    private static ResolvedTool AddInner(string name, Nullable`1<DiffTool> diffTool, bool autoRefresh, bool isMdi, bool supportsText, bool requiresTarget, IEnumerable`1<string> binaries, string exePath, LaunchArguments launchArguments);
    private static void AddResolvedToolAtStart(ResolvedTool resolvedTool);
    private static void InitTools(bool throwForNoTool, IEnumerable`1<DiffTool> order);
    public static bool TryFindByPath(string path, ResolvedTool& tool);
    public static bool TryFindByExtension(string extension, ResolvedTool& tool);
    [NullableContextAttribute("2")]
public static bool TryFindByName(DiffTool tool, ResolvedTool& resolvedTool);
    public static bool TryFindByName(string name, ResolvedTool& resolvedTool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DiffEngine.LaunchArguments : object {
    [CompilerGeneratedAttribute]
private BuildArguments <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildArguments <Right>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public BuildArguments Left { get; public set; }
    public BuildArguments Right { get; public set; }
    public LaunchArguments(BuildArguments Left, BuildArguments Right);
    [CompilerGeneratedAttribute]
protected LaunchArguments(LaunchArguments original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public BuildArguments get_Left();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Left(BuildArguments value);
    [CompilerGeneratedAttribute]
public BuildArguments get_Right();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Right(BuildArguments value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LaunchArguments left, LaunchArguments right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LaunchArguments left, LaunchArguments right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(LaunchArguments other);
    [CompilerGeneratedAttribute]
public virtual LaunchArguments <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BuildArguments& Left, BuildArguments& Right);
}
public enum DiffEngine.LaunchResult : Enum {
    public int value__;
    public static LaunchResult NoEmptyFileForExtension;
    public static LaunchResult AlreadyRunningAndSupportsRefresh;
    public static LaunchResult StartedNewInstance;
    public static LaunchResult TooManyRunningDiffTools;
    public static LaunchResult NoDiffToolFound;
    public static LaunchResult Disabled;
}
public static class DiffEngine.Logging : object {
    internal static bool enabled;
    public static void Enable();
    [NullableContextAttribute("1")]
internal static void Write(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DiffEngine.OsSupport : object {
    [CompilerGeneratedAttribute]
private OsSettings <Windows>k__BackingField;
    [CompilerGeneratedAttribute]
private OsSettings <Linux>k__BackingField;
    [CompilerGeneratedAttribute]
private OsSettings <Osx>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public OsSettings Windows { get; public set; }
    public OsSettings Linux { get; public set; }
    public OsSettings Osx { get; public set; }
    public OsSupport(OsSettings Windows, OsSettings Linux, OsSettings Osx);
    [CompilerGeneratedAttribute]
protected OsSupport(OsSupport original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public OsSettings get_Windows();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Windows(OsSettings value);
    [CompilerGeneratedAttribute]
public OsSettings get_Linux();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Linux(OsSettings value);
    [CompilerGeneratedAttribute]
public OsSettings get_Osx();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Osx(OsSettings value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(OsSupport left, OsSupport right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(OsSupport left, OsSupport right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(OsSupport other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual OsSupport <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(OsSettings& Windows, OsSettings& Linux, OsSettings& Osx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DiffEngine.ProcessCleanup : object {
    private static List`1<ProcessCommand> commands;
    private static Func`1<List`1<ProcessCommand>> findAll;
    private static Func`2<int, bool> tryTerminateProcess;
    public static IReadOnlyCollection`1<ProcessCommand> Commands { get; }
    private static ProcessCleanup();
    public static IReadOnlyCollection`1<ProcessCommand> get_Commands();
    [MemberNotNullAttribute("commands")]
public static void Refresh();
    public static void Kill(string command);
    private static string TrimCommand(string command);
    public static bool IsRunning(string command);
    public static bool TryGetProcessInfo(string command, ProcessCommand& process);
    private static void TerminateProcessIfExists(Int32& processId);
    public static IEnumerable`1<ProcessCommand> FindAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Command} | Process = {Process}")]
public class DiffEngine.ProcessCommand : ValueType {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Process>k__BackingField;
    public string Command { get; }
    public int Process { get; }
    public ProcessCommand(string command, Int32& process);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public int get_Process();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DiffEngine.ResolvedTool : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DiffTool> <Tool>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private LaunchArguments <LaunchArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMdi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRefresh>k__BackingField;
    [CompilerGeneratedAttribute]
private FrozenSet`1<string> <BinaryExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsText>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    public Nullable`1<DiffTool> Tool { get; public set; }
    public string ExePath { get; public set; }
    public LaunchArguments LaunchArguments { get; public set; }
    public bool IsMdi { get; public set; }
    public bool AutoRefresh { get; public set; }
    public FrozenSet`1<string> BinaryExtensions { get; public set; }
    public bool RequiresTarget { get; public set; }
    public bool SupportsText { get; public set; }
    public ResolvedTool(string name, string exePath, LaunchArguments launchArguments, bool isMdi, bool autoRefresh, IReadOnlyCollection`1<string> binaryExtensions, bool requiresTarget, bool supportsText);
    public ResolvedTool(string name, Nullable`1<DiffTool> tool, string exePath, LaunchArguments launchArguments, bool isMdi, bool autoRefresh, IReadOnlyCollection`1<string> binaryExtensions, bool requiresTarget, bool supportsText);
    [CompilerGeneratedAttribute]
protected ResolvedTool(ResolvedTool original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    internal void CommandAndArguments(string tempFile, string targetFile, String& arguments, String& command);
    public string BuildCommand(string tempFile, string targetFile);
    public string GetArguments(string tempFile, string targetFile);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DiffTool> get_Tool();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tool(Nullable`1<DiffTool> value);
    [CompilerGeneratedAttribute]
public string get_ExePath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExePath(string value);
    [CompilerGeneratedAttribute]
public LaunchArguments get_LaunchArguments();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LaunchArguments(LaunchArguments value);
    [CompilerGeneratedAttribute]
public bool get_IsMdi();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsMdi(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoRefresh();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AutoRefresh(bool value);
    [CompilerGeneratedAttribute]
public FrozenSet`1<string> get_BinaryExtensions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BinaryExtensions(FrozenSet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_RequiresTarget();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RequiresTarget(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsText();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SupportsText(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ResolvedTool left, ResolvedTool right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ResolvedTool left, ResolvedTool right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ResolvedTool other);
    [CompilerGeneratedAttribute]
public virtual ResolvedTool <Clone>$();
}
internal static class DisabledChecker : object {
    public static bool IsDisable();
}
internal static class EnvironmentHelper : object {
    [NullableContextAttribute("1")]
public static void Set(string name, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Guard : object {
    public static void AgainstNegativeAndZero(int value, string argumentName);
    public static void FileExists(string path, string argumentName);
    public static void AgainstEmpty(string value, string argumentName);
    public static void AgainstEmpty(T[] value, string argumentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Implementation : object {
    public static Definition AraxisMerge();
    public static Definition BeyondCompare();
    public static Definition DeltaWalker();
    public static Definition Diffinity();
    public static Definition ExamDiff();
    public static Definition Guiffy();
    public static Definition Kaleidoscope();
    public static Definition KDiff3();
    public static Definition Meld();
    public static Definition Neovim();
    public static Definition P4Merge();
    public static Definition Rider();
    public static Definition SublimeMerge();
    public static Definition TkDiff();
    public static Definition TortoiseGitIDiff();
    public static Definition TortoiseGitMerge();
    public static Definition TortoiseIDiff();
    public static Definition TortoiseMerge();
    public static Definition Vim();
    public static Definition VisualStudio();
    public static Definition VisualStudioCode();
    public static Definition WinMerge();
    [CompilerGeneratedAttribute]
internal static string <BeyondCompare>g__LeftWindowsArguments|1_0(string temp, string target);
    [CompilerGeneratedAttribute]
internal static string <BeyondCompare>g__RightWindowsArguments|1_1(string temp, string target);
    [CompilerGeneratedAttribute]
internal static string <BeyondCompare>g__LeftOsxLinuxArguments|1_2(string temp, string target);
    [CompilerGeneratedAttribute]
internal static string <BeyondCompare>g__RightOsxLinuxArguments|1_3(string temp, string target);
    [CompilerGeneratedAttribute]
internal static string <ExamDiff>g__LeftArguments|4_0(string temp, string target);
    [CompilerGeneratedAttribute]
internal static string <ExamDiff>g__RightArguments|4_1(string temp, string target);
    [CompilerGeneratedAttribute]
internal static string <VisualStudio>g__LeftArguments|19_0(string temp, string target);
    [CompilerGeneratedAttribute]
internal static string <VisualStudio>g__RightArguments|19_1(string temp, string target);
    [CompilerGeneratedAttribute]
internal static string <WinMerge>g__LeftArguments|21_0(string temp, string target);
    [CompilerGeneratedAttribute]
internal static string <WinMerge>g__RightArguments|21_1(string temp, string target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class JsonEscaping : object {
    private static bool NeedEscape(string src, int i);
    private static bool IsValidJson(char c);
    private static bool IsStartOfScriptTag(string src, int i, char c);
    private static bool IsBrokenTailSurrogate(string src, int i, char c);
    private static bool IsBrokenLeadSurrogate(string src, int i, char c);
    [ExtensionAttribute]
public static string JsonEscape(string contents);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class LinuxOsxProcess : object {
    public static bool TryTerminateProcess(int processId);
    public static List`1<ProcessCommand> FindAll();
    public static bool TryParse(string line, Nullable`1& processCommand);
    [NullableContextAttribute("2")]
private static bool TryRunPs(String& result);
    [ExtensionAttribute]
private static bool DoubleWaitForExit(Process process);
}
internal static class MaxInstance : object {
    private static Nullable`1<int> capturedMaxInstancesToLaunch;
    private static Nullable`1<int> appDomainMaxInstancesToLaunch;
    private static int launchedInstances;
    private static int defaultMax;
    public static int MaxInstancesToLaunch { get; }
    public static int get_MaxInstancesToLaunch();
    private static int GetMaxInstances();
    private static Nullable`1<int> GetEnvironmentValue();
    private static void ResetCapturedValue();
    public static void SetForAppDomain(int value);
    public static void SetForUser(int value);
    public static bool Reached();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OrderReader : object {
    private static Result defaultResult;
    private static Char[] environmentSeparators;
    private static OrderReader();
    public static Result ReadToolOrder();
    [IteratorStateMachineAttribute("OrderReader/<ParseEnvironment>d__4")]
internal static IEnumerable`1<DiffTool> ParseEnvironment(string diffOrder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OsSettings : object {
    [CompilerGeneratedAttribute]
private string <ExeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathCommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private LaunchArguments <LaunchArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SearchDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string ExeName { get; public set; }
    public string PathCommandName { get; public set; }
    public LaunchArguments LaunchArguments { get; public set; }
    public String[] SearchDirectories { get; public set; }
    public OsSettings(string ExeName, string PathCommandName, LaunchArguments LaunchArguments, String[] SearchDirectories);
    public OsSettings(string exeName, string pathCommandName, LaunchArguments launchArguments, string searchDirectory);
    public OsSettings(string exeName, LaunchArguments launchArguments, String[] searchDirectories);
    public OsSettings(string exeName, LaunchArguments launchArguments, string searchDirectory);
    public OsSettings(string exeName, string pathCommandName, LaunchArguments launchArguments);
    public OsSettings(string exeName, LaunchArguments launchArguments);
    [CompilerGeneratedAttribute]
protected OsSettings(OsSettings original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ExeName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExeName(string value);
    [CompilerGeneratedAttribute]
public string get_PathCommandName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PathCommandName(string value);
    [CompilerGeneratedAttribute]
public LaunchArguments get_LaunchArguments();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LaunchArguments(LaunchArguments value);
    [CompilerGeneratedAttribute]
public String[] get_SearchDirectories();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SearchDirectories(String[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(OsSettings left, OsSettings right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(OsSettings left, OsSettings right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(OsSettings other);
    [CompilerGeneratedAttribute]
public virtual OsSettings <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ExeName, String& PathCommandName, LaunchArguments& LaunchArguments, String[]& SearchDirectories);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OsSettingsResolver : object {
    private static String[] envPaths;
    private static OsSettingsResolver();
    public static bool Resolve(string tool, OsSupport osSupport, String& path, LaunchArguments& launchArguments);
    [NullableContextAttribute("2")]
private static bool TryResolveForOs(string tool, OsSettings os, String& path, OSPlatform platform);
    public static bool TryFindForEnvironmentVariable(string tool, string exeName, String& envPath);
    [IteratorStateMachineAttribute("OsSettingsResolver/<ExpandProgramFiles>d__5")]
public static IEnumerable`1<string> ExpandProgramFiles(IEnumerable`1<string> paths);
    private static bool TryFindExe(string exeName, string pathCommandName, IEnumerable`1<string> searchDirectories, String& exePath);
    public static bool TryFindInEnvPath(string pathCommandName, String& commandPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class PiperClient : object {
    public static int Port;
    private static PiperClient();
    public static void SendDelete(string file);
    public static Task SendDeleteAsync(string file, CancellationToken cancel);
    private static string BuildDeletePayload(string file);
    public static void SendMove(string tempFile, string targetFile, string exe, string arguments, bool canKill, Nullable`1<int> processId);
    public static Task SendMoveAsync(string tempFile, string targetFile, string exe, string arguments, bool canKill, Nullable`1<int> processId, CancellationToken cancel);
    public static string BuildMovePayload(string tempFile, string targetFile, string exe, string arguments, bool canKill, Nullable`1<int> processId);
    private static void Send(string payload);
    [AsyncStateMachineAttribute("PiperClient/<SendAsync>d__8")]
private static Task SendAsync(string payload);
    private static void HandleSendException(string payload, Exception exception);
    private static void InnerSend(string payload);
    [AsyncStateMachineAttribute("PiperClient/<InnerSendAsync>d__11")]
private static Task InnerSendAsync(string payload);
    private static IPEndPoint GetEndpoint();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.BytePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-string-system-iformatprovider-system-byte@)")]
public static bool TryParse(string target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Byte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.DoublePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-string-system-iformatprovider-system-double@)")]
public static bool TryParse(string target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Double& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.EnumPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getvalues")]
public static TEnum[] GetValues();
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getnames")]
public static String[] GetNames();
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-string-system-boolean)")]
public static TEnum Parse(string value);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-string-system-boolean)")]
public static TEnum Parse(string value, bool ignoreCase);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-readonlyspan((system-char)))")]
public static TEnum Parse(ReadOnlySpan`1<char> value);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-readonlyspan((system-char))-system-boolean)")]
public static TEnum Parse(ReadOnlySpan`1<char> value, bool ignoreCase);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse#system-enum-tryparse-1(system-readonlyspan((system-char))-0@)")]
public static bool TryParse(ReadOnlySpan`1<char> value, TEnum& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse#system-enum-tryparse-1(system-readonlyspan((system-char))-system-boolean-0@)")]
public static bool TryParse(ReadOnlySpan`1<char> value, bool ignoreCase, TEnum& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.Guard : object {
    public static void FileExists(string path, string argumentName);
    public static void DirectoryExists(string path, string argumentName);
    public static void NotEmpty(string value, string argumentName);
    public static void NotEmpty(ReadOnlySpan`1<T> value, string argumentName);
    public static void NotEmpty(Span`1<T> value, string argumentName);
    public static void NotEmpty(Nullable`1<Memory`1<T>> value, string argumentName);
    public static void NotEmpty(Memory`1<T> value, string argumentName);
    public static void NotEmpty(Nullable`1<ReadOnlyMemory`1<T>> value, string argumentName);
    public static void NotEmpty(ReadOnlyMemory`1<T> value, string argumentName);
    public static void NotEmpty(T value, string argumentName);
    public static T NotNull(T argument, string name);
    [NullableContextAttribute("2")]
public static string NotNull(string argument, string name);
    public static string NotNullOrEmpty(string value, string argumentName);
    public static T NotNullOrEmpty(T value, string argumentName);
    public static Memory`1<char> NotNullOrEmpty(Nullable`1<Memory`1<char>> value, string argumentName);
    public static ReadOnlyMemory`1<char> NotNullOrEmpty(Nullable`1<ReadOnlyMemory`1<char>> value, string argumentName);
    public static string NotNullOrWhiteSpace(string value, string argumentName);
    public static Memory`1<char> NotNullOrWhiteSpace(Nullable`1<Memory`1<char>> value, string argumentName);
    public static ReadOnlyMemory`1<char> NotNullOrWhiteSpace(Nullable`1<ReadOnlyMemory`1<char>> value, string argumentName);
    public static void NotWhiteSpace(string value, string argumentName);
    public static void NotWhiteSpace(ReadOnlySpan`1<char> value, string argumentName);
    public static void NotWhiteSpace(Nullable`1<Memory`1<char>> value, string argumentName);
    public static void NotWhiteSpace(Nullable`1<ReadOnlyMemory`1<char>> value, string argumentName);
    public static void NotWhiteSpace(Span`1<char> value, string argumentName);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.GuidPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.guid.tryparse#system-guid-tryparse(system-string-system-iformatprovider-system-guid@)")]
public static bool TryParse(string target, IFormatProvider provider, Guid& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Byte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.IntPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-string-system-iformatprovider-system-int32@)")]
public static bool TryParse(string target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int32& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.LongPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-string-system-iformatprovider-system-int64@)")]
public static bool TryParse(string target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int32& result);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.Polyfill : object {
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource[] items);
    [IteratorStateMachineAttribute("Polyfills.Polyfill/<Except>d__2`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, IEqualityComparer`1<TSource> comparer, TSource[] items);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.nanoseconds")]
public static int Nanoseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.nanosecond")]
public static int Nanosecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.nanosecond")]
public static int Nanosecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.microsecond")]
public static int Microseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.microsecond")]
public static int Microsecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.microsecond")]
public static int Microsecond(DateTimeOffset target);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.isgenericmethodparameter")]
public static bool IsGenericMethodParameter(Type target);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type target);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type target);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.RegexPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.SBytePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-string-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(string target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, SByte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.ShortPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-string-system-iformatprovider-system-int16@)")]
public static bool TryParse(string target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int16& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.StringPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string())")]
public static string Join(char separator, String[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-object())")]
public static string Join(char separator, Object[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string()-system-int32-system-int32)")]
public static string Join(char separator, String[] value, int startIndex, int count);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join-1(system-char-system-collections-generic-ienumerable((-0)))")]
public static string Join(char separator, IEnumerable`1<T> values);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.UIntPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-string-system-iformatprovider-system-uint32@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt32& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.ULongPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-string-system-iformatprovider-system-uint64@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt64& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.UShortPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-string-system-iformatprovider-system-uint16@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt16& result);
}
internal static class TargetPosition : object {
    [CompilerGeneratedAttribute]
private static bool <TargetOnLeft>k__BackingField;
    public static bool TargetOnLeft { get; private set; }
    private static TargetPosition();
    [CompilerGeneratedAttribute]
public static bool get_TargetOnLeft();
    [CompilerGeneratedAttribute]
private static void set_TargetOnLeft(bool value);
    private static Nullable`1<bool> ReadTargetOnLeft();
    public static void SetTargetOnLeft(bool value);
}
internal static class ToolsOrder : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ToolsOrder/<Sort>d__0")]
public static IEnumerable`1<Definition> Sort(bool throwForNoTool, IEnumerable`1<DiffTool> order);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class WildcardFileFinder : object {
    private static Char[] separators;
    private static WildcardFileFinder();
    private static IEnumerable`1<string> EnumerateDirectories(string directory);
    public static bool TryFind(string path, String& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class WindowsProcess : object {
    private static SafeProcessHandle OpenProcess(int access, bool inherit, int processId);
    private static bool TerminateProcess(SafeProcessHandle processHandle, int exitCode);
    public static bool TryTerminateProcess(int processId);
    public static List`1<ProcessCommand> FindAll();
}
