[ExtensionAttribute]
internal static class DiffMatchPatch.CompatibilityExtensions : object {
    [ExtensionAttribute]
public static List`1<T> Splice(List`1<T> input, int start, int count, T[] objects);
    [ExtensionAttribute]
public static string JavaSubstring(string s, int begin, int end);
}
public class DiffMatchPatch.Diff : object {
    public Operation operation;
    public string text;
    public Diff(Operation operation, string text);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(Diff obj);
    public virtual int GetHashCode();
}
public class DiffMatchPatch.diff_match_patch : object {
    public float Diff_Timeout;
    public short Diff_EditCost;
    public float Match_Threshold;
    public int Match_Distance;
    public float Patch_DeleteThreshold;
    public short Patch_Margin;
    private short Match_MaxBits;
    private Regex BLANKLINEEND;
    private Regex BLANKLINESTART;
    public List`1<Diff> diff_main(string text1, string text2);
    public List`1<Diff> diff_main(string text1, string text2, bool checklines);
    private List`1<Diff> diff_main(string text1, string text2, bool checklines, DateTime deadline);
    private List`1<Diff> diff_compute(string text1, string text2, bool checklines, DateTime deadline);
    private List`1<Diff> diff_lineMode(string text1, string text2, DateTime deadline);
    protected List`1<Diff> diff_bisect(string text1, string text2, DateTime deadline);
    private List`1<Diff> diff_bisectSplit(string text1, string text2, int x, int y, DateTime deadline);
    protected Object[] diff_linesToChars(string text1, string text2);
    private string diff_linesToCharsMunge(string text, List`1<string> lineArray, Dictionary`2<string, int> lineHash, int maxLines);
    protected void diff_charsToLines(ICollection`1<Diff> diffs, IList`1<string> lineArray);
    public int diff_commonPrefix(string text1, string text2);
    public int diff_commonSuffix(string text1, string text2);
    protected int diff_commonOverlap(string text1, string text2);
    protected String[] diff_halfMatch(string text1, string text2);
    private String[] diff_halfMatchI(string longtext, string shorttext, int i);
    public void diff_cleanupSemantic(List`1<Diff> diffs);
    public void diff_cleanupSemanticLossless(List`1<Diff> diffs);
    private int diff_cleanupSemanticScore(string one, string two);
    public void diff_cleanupEfficiency(List`1<Diff> diffs);
    public void diff_cleanupMerge(List`1<Diff> diffs);
    public int diff_xIndex(List`1<Diff> diffs, int loc);
    public string diff_prettyHtml(List`1<Diff> diffs);
    public string diff_text1(List`1<Diff> diffs);
    public string diff_text2(List`1<Diff> diffs);
    public int diff_levenshtein(List`1<Diff> diffs);
    public string diff_toDelta(List`1<Diff> diffs);
    public List`1<Diff> diff_fromDelta(string text1, string delta);
    public int match_main(string text, string pattern, int loc);
    protected int match_bitap(string text, string pattern, int loc);
    private double match_bitapScore(int e, int x, int loc, string pattern);
    protected Dictionary`2<char, int> match_alphabet(string pattern);
    protected void patch_addContext(Patch patch, string text);
    public List`1<Patch> patch_make(string text1, string text2);
    public List`1<Patch> patch_make(List`1<Diff> diffs);
    public List`1<Patch> patch_make(string text1, string text2, List`1<Diff> diffs);
    public List`1<Patch> patch_make(string text1, List`1<Diff> diffs);
    public List`1<Patch> patch_deepCopy(List`1<Patch> patches);
    public Object[] patch_apply(List`1<Patch> patches, string text);
    public string patch_addPadding(List`1<Patch> patches);
    public void patch_splitMax(List`1<Patch> patches);
    public string patch_toText(List`1<Patch> patches);
    public List`1<Patch> patch_fromText(string textline);
    public static string encodeURI(string str);
}
public enum DiffMatchPatch.Operation : Enum {
    public int value__;
    public static Operation DELETE;
    public static Operation INSERT;
    public static Operation EQUAL;
}
public class DiffMatchPatch.Patch : object {
    public List`1<Diff> diffs;
    public int start1;
    public int start2;
    public int length1;
    public int length2;
    public virtual string ToString();
}
