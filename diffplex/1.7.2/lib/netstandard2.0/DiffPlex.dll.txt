public class DiffPlex.Chunkers.CharacterChunker : object {
    [CompilerGeneratedAttribute]
private static CharacterChunker <Instance>k__BackingField;
    public static CharacterChunker Instance { get; }
    private static CharacterChunker();
    [CompilerGeneratedAttribute]
public static CharacterChunker get_Instance();
    public sealed virtual String[] Chunk(string text);
}
public class DiffPlex.Chunkers.CustomFunctionChunker : object {
    private Func`2<string, String[]> customChunkerFunc;
    public CustomFunctionChunker(Func`2<string, String[]> customChunkerFunc);
    public sealed virtual String[] Chunk(string text);
}
public class DiffPlex.Chunkers.DelimiterChunker : object {
    private Char[] delimiters;
    public DelimiterChunker(Char[] delimiters);
    public sealed virtual String[] Chunk(string str);
}
public class DiffPlex.Chunkers.LineChunker : object {
    private String[] lineSeparators;
    [CompilerGeneratedAttribute]
private static LineChunker <Instance>k__BackingField;
    public static LineChunker Instance { get; }
    private static LineChunker();
    [CompilerGeneratedAttribute]
public static LineChunker get_Instance();
    public sealed virtual String[] Chunk(string text);
}
public class DiffPlex.Chunkers.LineEndingsPreservingChunker : object {
    private String[] emptyArray;
    [CompilerGeneratedAttribute]
private static LineEndingsPreservingChunker <Instance>k__BackingField;
    public static LineEndingsPreservingChunker Instance { get; }
    private static LineEndingsPreservingChunker();
    [CompilerGeneratedAttribute]
public static LineEndingsPreservingChunker get_Instance();
    public sealed virtual String[] Chunk(string text);
}
public class DiffPlex.Chunkers.WordChunker : DelimiterChunker {
    [CompilerGeneratedAttribute]
private static Char[] <WordSeparaters>k__BackingField;
    [CompilerGeneratedAttribute]
private static WordChunker <Instance>k__BackingField;
    private static Char[] WordSeparaters { get; }
    public static WordChunker Instance { get; }
    private static WordChunker();
    [CompilerGeneratedAttribute]
private static Char[] get_WordSeparaters();
    [CompilerGeneratedAttribute]
public static WordChunker get_Instance();
}
public interface DiffPlex.DiffBuilder.IInlineDiffBuilder {
    public abstract virtual DiffPaneModel BuildDiffModel(string oldText, string newText);
    public abstract virtual DiffPaneModel BuildDiffModel(string oldText, string newText, bool ignoreWhitespace, bool ignoreCase, IChunker chunker);
}
public class DiffPlex.DiffBuilder.InlineDiffBuilder : object {
    private IDiffer differ;
    [CompilerGeneratedAttribute]
private static InlineDiffBuilder <Instance>k__BackingField;
    public static InlineDiffBuilder Instance { get; }
    public InlineDiffBuilder(IDiffer differ);
    private static InlineDiffBuilder();
    [CompilerGeneratedAttribute]
public static InlineDiffBuilder get_Instance();
    public sealed virtual DiffPaneModel BuildDiffModel(string oldText, string newText);
    public DiffPaneModel BuildDiffModel(string oldText, string newText, bool ignoreWhitespace);
    public sealed virtual DiffPaneModel BuildDiffModel(string oldText, string newText, bool ignoreWhitespace, bool ignoreCase, IChunker chunker);
    public static DiffPaneModel Diff(string oldText, string newText, bool ignoreWhiteSpace, bool ignoreCase, IChunker chunker);
    public static DiffPaneModel Diff(IDiffer differ, string oldText, string newText, bool ignoreWhiteSpace, bool ignoreCase, IChunker chunker);
    private static void BuildDiffPieces(DiffResult diffResult, List`1<DiffPiece> pieces);
}
public interface DiffPlex.DiffBuilder.ISideBySideDiffBuilder {
    public abstract virtual SideBySideDiffModel BuildDiffModel(string oldText, string newText);
}
public enum DiffPlex.DiffBuilder.Model.ChangeType : Enum {
    public int value__;
    public static ChangeType Unchanged;
    public static ChangeType Deleted;
    public static ChangeType Inserted;
    public static ChangeType Imaginary;
    public static ChangeType Modified;
}
public class DiffPlex.DiffBuilder.Model.DiffPaneModel : object {
    [CompilerGeneratedAttribute]
private List`1<DiffPiece> <Lines>k__BackingField;
    public List`1<DiffPiece> Lines { get; }
    public bool HasDifferences { get; }
    [CompilerGeneratedAttribute]
public List`1<DiffPiece> get_Lines();
    public bool get_HasDifferences();
}
public class DiffPlex.DiffBuilder.Model.DiffPiece : object {
    [CompilerGeneratedAttribute]
private ChangeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DiffPiece> <SubPieces>k__BackingField;
    public ChangeType Type { get; public set; }
    public Nullable`1<int> Position { get; public set; }
    public string Text { get; public set; }
    public List`1<DiffPiece> SubPieces { get; public set; }
    public DiffPiece(string text, ChangeType type, Nullable`1<int> position);
    [CompilerGeneratedAttribute]
public ChangeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ChangeType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public List`1<DiffPiece> get_SubPieces();
    [CompilerGeneratedAttribute]
public void set_SubPieces(List`1<DiffPiece> value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DiffPiece other);
    public virtual int GetHashCode();
    private bool SubPiecesEqual(DiffPiece other);
}
public class DiffPlex.DiffBuilder.Model.SideBySideDiffModel : object {
    [CompilerGeneratedAttribute]
private DiffPaneModel <OldText>k__BackingField;
    [CompilerGeneratedAttribute]
private DiffPaneModel <NewText>k__BackingField;
    public DiffPaneModel OldText { get; }
    public DiffPaneModel NewText { get; }
    [CompilerGeneratedAttribute]
public DiffPaneModel get_OldText();
    [CompilerGeneratedAttribute]
public DiffPaneModel get_NewText();
}
public class DiffPlex.DiffBuilder.SideBySideDiffBuilder : object {
    private IDiffer differ;
    private IChunker lineChunker;
    private IChunker wordChunker;
    [CompilerGeneratedAttribute]
private static SideBySideDiffBuilder <Instance>k__BackingField;
    public static SideBySideDiffBuilder Instance { get; }
    public SideBySideDiffBuilder(IDiffer differ, IChunker lineChunker, IChunker wordChunker);
    public SideBySideDiffBuilder(IDiffer differ);
    public SideBySideDiffBuilder(IDiffer differ, Char[] wordSeparators);
    private static SideBySideDiffBuilder();
    [CompilerGeneratedAttribute]
public static SideBySideDiffBuilder get_Instance();
    public sealed virtual SideBySideDiffModel BuildDiffModel(string oldText, string newText);
    public SideBySideDiffModel BuildDiffModel(string oldText, string newText, bool ignoreWhitespace);
    public SideBySideDiffModel BuildDiffModel(string oldText, string newText, bool ignoreWhitespace, bool ignoreCase);
    public static SideBySideDiffModel Diff(string oldText, string newText, bool ignoreWhiteSpace, bool ignoreCase);
    public static SideBySideDiffModel Diff(IDiffer differ, string oldText, string newText, bool ignoreWhiteSpace, bool ignoreCase, IChunker lineChunker, IChunker wordChunker);
    private static ChangeType BuildWordDiffPiecesInternal(string oldText, string newText, List`1<DiffPiece> oldPieces, List`1<DiffPiece> newPieces, bool ignoreWhiteSpace, bool ignoreCase);
    private SideBySideDiffModel BuildLineDiff(string oldText, string newText, bool ignoreWhiteSpace, bool ignoreCase);
    private ChangeType BuildWordDiffPieces(string oldText, string newText, List`1<DiffPiece> oldPieces, List`1<DiffPiece> newPieces, bool ignoreWhiteSpace, bool ignoreCase);
    private static ChangeType BuildDiffPieces(DiffResult diffResult, List`1<DiffPiece> oldPieces, List`1<DiffPiece> newPieces, PieceBuilder subPieceBuilder, bool ignoreWhiteSpace, bool ignoreCase);
}
public class DiffPlex.Differ : object {
    private static String[] emptyStringArray;
    [CompilerGeneratedAttribute]
private static Differ <Instance>k__BackingField;
    public static Differ Instance { get; }
    private static Differ();
    [CompilerGeneratedAttribute]
public static Differ get_Instance();
    public sealed virtual DiffResult CreateLineDiffs(string oldText, string newText, bool ignoreWhitespace);
    public sealed virtual DiffResult CreateLineDiffs(string oldText, string newText, bool ignoreWhitespace, bool ignoreCase);
    public sealed virtual DiffResult CreateCharacterDiffs(string oldText, string newText, bool ignoreWhitespace);
    public sealed virtual DiffResult CreateCharacterDiffs(string oldText, string newText, bool ignoreWhitespace, bool ignoreCase);
    public sealed virtual DiffResult CreateWordDiffs(string oldText, string newText, bool ignoreWhitespace, Char[] separators);
    public sealed virtual DiffResult CreateWordDiffs(string oldText, string newText, bool ignoreWhitespace, bool ignoreCase, Char[] separators);
    public sealed virtual DiffResult CreateCustomDiffs(string oldText, string newText, bool ignoreWhiteSpace, Func`2<string, String[]> chunker);
    public sealed virtual DiffResult CreateCustomDiffs(string oldText, string newText, bool ignoreWhiteSpace, bool ignoreCase, Func`2<string, String[]> chunker);
    public sealed virtual DiffResult CreateDiffs(string oldText, string newText, bool ignoreWhiteSpace, bool ignoreCase, IChunker chunker);
    protected static EditLengthResult CalculateEditLength(Int32[] A, int startA, int endA, Int32[] B, int startB, int endB);
    private static EditLengthResult CalculateEditLength(Int32[] A, int startA, int endA, Int32[] B, int startB, int endB, Int32[] forwardDiagonal, Int32[] reverseDiagonal);
    protected static void BuildModificationData(ModificationData A, ModificationData B);
    private static void BuildModificationData(ModificationData A, int startA, int endA, ModificationData B, int startB, int endB, Int32[] forwardDiagonal, Int32[] reverseDiagonal);
    private static void BuildPieceHashes(IDictionary`2<string, int> pieceHash, ModificationData data, bool ignoreWhitespace, IChunker chunker);
}
public interface DiffPlex.IChunker {
    public abstract virtual String[] Chunk(string text);
}
public interface DiffPlex.IDiffer {
    [ObsoleteAttribute("Use CreateDiffs method instead", "False")]
public abstract virtual DiffResult CreateLineDiffs(string oldText, string newText, bool ignoreWhitespace);
    [ObsoleteAttribute("Use CreateDiffs method instead", "False")]
public abstract virtual DiffResult CreateLineDiffs(string oldText, string newText, bool ignoreWhitespace, bool ignoreCase);
    [ObsoleteAttribute("Use CreateDiffs method instead", "False")]
public abstract virtual DiffResult CreateCharacterDiffs(string oldText, string newText, bool ignoreWhitespace);
    [ObsoleteAttribute("Use CreateDiffs method instead", "False")]
public abstract virtual DiffResult CreateCharacterDiffs(string oldText, string newText, bool ignoreWhitespace, bool ignoreCase);
    [ObsoleteAttribute("Use CreateDiffs method instead", "False")]
public abstract virtual DiffResult CreateWordDiffs(string oldText, string newText, bool ignoreWhitespace, Char[] separators);
    [ObsoleteAttribute("Use CreateDiffs method instead", "False")]
public abstract virtual DiffResult CreateWordDiffs(string oldText, string newText, bool ignoreWhitespace, bool ignoreCase, Char[] separators);
    [ObsoleteAttribute("Use CreateDiffs method instead", "False")]
public abstract virtual DiffResult CreateCustomDiffs(string oldText, string newText, bool ignoreWhiteSpace, Func`2<string, String[]> chunker);
    [ObsoleteAttribute("Use CreateDiffs method instead", "False")]
public abstract virtual DiffResult CreateCustomDiffs(string oldText, string newText, bool ignoreWhiteSpace, bool ignoreCase, Func`2<string, String[]> chunker);
    public abstract virtual DiffResult CreateDiffs(string oldText, string newText, bool ignoreWhiteSpace, bool ignoreCase, IChunker chunker);
}
internal static class DiffPlex.Log : object {
    [ConditionalAttribute("LOG")]
public static void WriteLine(string format, Object[] args);
    [ConditionalAttribute("LOG")]
public static void Write(string format, Object[] args);
}
public class DiffPlex.Model.DiffBlock : object {
    [CompilerGeneratedAttribute]
private int <DeleteStartA>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeleteCountA>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InsertStartB>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InsertCountB>k__BackingField;
    public int DeleteStartA { get; }
    public int DeleteCountA { get; }
    public int InsertStartB { get; }
    public int InsertCountB { get; }
    public DiffBlock(int deleteStartA, int deleteCountA, int insertStartB, int insertCountB);
    [CompilerGeneratedAttribute]
public int get_DeleteStartA();
    [CompilerGeneratedAttribute]
public int get_DeleteCountA();
    [CompilerGeneratedAttribute]
public int get_InsertStartB();
    [CompilerGeneratedAttribute]
public int get_InsertCountB();
}
public class DiffPlex.Model.DiffResult : object {
    [CompilerGeneratedAttribute]
private String[] <PiecesOld>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PiecesNew>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DiffBlock> <DiffBlocks>k__BackingField;
    public String[] PiecesOld { get; }
    public String[] PiecesNew { get; }
    public IList`1<DiffBlock> DiffBlocks { get; }
    public DiffResult(String[] peicesOld, String[] piecesNew, IList`1<DiffBlock> blocks);
    [CompilerGeneratedAttribute]
public String[] get_PiecesOld();
    [CompilerGeneratedAttribute]
public String[] get_PiecesNew();
    [CompilerGeneratedAttribute]
public IList`1<DiffBlock> get_DiffBlocks();
}
public enum DiffPlex.Model.Edit : Enum {
    public int value__;
    public static Edit None;
    public static Edit DeleteRight;
    public static Edit DeleteLeft;
    public static Edit InsertDown;
    public static Edit InsertUp;
}
public class DiffPlex.Model.EditLengthResult : object {
    [CompilerGeneratedAttribute]
private int <EditLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndY>k__BackingField;
    [CompilerGeneratedAttribute]
private Edit <LastEdit>k__BackingField;
    public int EditLength { get; public set; }
    public int StartX { get; public set; }
    public int EndX { get; public set; }
    public int StartY { get; public set; }
    public int EndY { get; public set; }
    public Edit LastEdit { get; public set; }
    [CompilerGeneratedAttribute]
public int get_EditLength();
    [CompilerGeneratedAttribute]
public void set_EditLength(int value);
    [CompilerGeneratedAttribute]
public int get_StartX();
    [CompilerGeneratedAttribute]
public void set_StartX(int value);
    [CompilerGeneratedAttribute]
public int get_EndX();
    [CompilerGeneratedAttribute]
public void set_EndX(int value);
    [CompilerGeneratedAttribute]
public int get_StartY();
    [CompilerGeneratedAttribute]
public void set_StartY(int value);
    [CompilerGeneratedAttribute]
public int get_EndY();
    [CompilerGeneratedAttribute]
public void set_EndY(int value);
    [CompilerGeneratedAttribute]
public Edit get_LastEdit();
    [CompilerGeneratedAttribute]
public void set_LastEdit(Edit value);
}
public class DiffPlex.Model.ModificationData : object {
    [CompilerGeneratedAttribute]
private Int32[] <HashedPieces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawData>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <Modifications>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Pieces>k__BackingField;
    public Int32[] HashedPieces { get; public set; }
    public string RawData { get; }
    public Boolean[] Modifications { get; public set; }
    public String[] Pieces { get; public set; }
    public ModificationData(string str);
    [CompilerGeneratedAttribute]
public Int32[] get_HashedPieces();
    [CompilerGeneratedAttribute]
public void set_HashedPieces(Int32[] value);
    [CompilerGeneratedAttribute]
public string get_RawData();
    [CompilerGeneratedAttribute]
public Boolean[] get_Modifications();
    [CompilerGeneratedAttribute]
public void set_Modifications(Boolean[] value);
    [CompilerGeneratedAttribute]
public String[] get_Pieces();
    [CompilerGeneratedAttribute]
public void set_Pieces(String[] value);
}
