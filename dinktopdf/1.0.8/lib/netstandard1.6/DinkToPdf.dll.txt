public class DinkToPdf.BasicConverter : object {
    public ITools Tools;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDocument <ProcessingDocument>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<PhaseChangedArgs> PhaseChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ProgressChangedArgs> ProgressChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<FinishedArgs> Finished;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ErrorArgs> Error;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<WarningArgs> Warning;
    public IDocument ProcessingDocument { get; private set; }
    public BasicConverter(ITools tools);
    [CompilerGeneratedAttribute]
public IDocument get_ProcessingDocument();
    [CompilerGeneratedAttribute]
private void set_ProcessingDocument(IDocument value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PhaseChanged(EventHandler`1<PhaseChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PhaseChanged(EventHandler`1<PhaseChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProgressChanged(EventHandler`1<ProgressChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProgressChanged(EventHandler`1<ProgressChangedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Finished(EventHandler`1<FinishedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Finished(EventHandler`1<FinishedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Error(EventHandler`1<ErrorArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Error(EventHandler`1<ErrorArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Warning(EventHandler`1<WarningArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Warning(EventHandler`1<WarningArgs> value);
    public virtual Byte[] Convert(IDocument document);
    private void OnPhaseChanged(IntPtr converter);
    private void OnProgressChanged(IntPtr converter);
    private void OnFinished(IntPtr converter, int success);
    private void OnError(IntPtr converter, string message);
    private void OnWarning(IntPtr converter, string message);
    private IntPtr CreateConverter(IDocument document);
    private void ApplyConfig(IntPtr config, ISettings settings, bool isGlobal);
    private void Apply(IntPtr config, string name, object value, bool isGlobal);
}
public enum DinkToPdf.ColorMode : Enum {
    public int value__;
    public static ColorMode Color;
    public static ColorMode Grayscale;
}
public enum DinkToPdf.ContentErrorHandling : Enum {
    public int value__;
    public static ContentErrorHandling Abort;
    public static ContentErrorHandling Skip;
    public static ContentErrorHandling Ignore;
}
public interface DinkToPdf.Contracts.IConverter {
    public abstract virtual Byte[] Convert(IDocument document);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PhaseChanged(EventHandler`1<PhaseChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PhaseChanged(EventHandler`1<PhaseChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProgressChanged(EventHandler`1<ProgressChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProgressChanged(EventHandler`1<ProgressChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Finished(EventHandler`1<FinishedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Finished(EventHandler`1<FinishedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(EventHandler`1<ErrorArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(EventHandler`1<ErrorArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Warning(EventHandler`1<WarningArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Warning(EventHandler`1<WarningArgs> value);
}
public interface DinkToPdf.Contracts.IDocument {
    public abstract virtual IEnumerable`1<IObject> GetObjects();
}
public interface DinkToPdf.Contracts.IObject {
    public abstract virtual Byte[] GetContent();
}
public interface DinkToPdf.Contracts.ISettings {
}
public interface DinkToPdf.Contracts.ITools {
    public bool IsLoaded { get; }
    public abstract virtual void Load();
    public abstract virtual bool get_IsLoaded();
    public abstract virtual bool ExtendedQt();
    public abstract virtual string GetLibraryVersion();
    public abstract virtual IntPtr CreateGlobalSettings();
    public abstract virtual int SetGlobalSetting(IntPtr settings, string name, string value);
    public abstract virtual string GetGlobalSetting(IntPtr settings, string name);
    public abstract virtual void DestroyGlobalSetting(IntPtr settings);
    public abstract virtual IntPtr CreateObjectSettings();
    public abstract virtual int SetObjectSetting(IntPtr settings, string name, string value);
    public abstract virtual string GetObjectSetting(IntPtr settings, string name);
    public abstract virtual void DestroyObjectSetting(IntPtr settings);
    public abstract virtual IntPtr CreateConverter(IntPtr globalSettings);
    public abstract virtual void AddObject(IntPtr converter, IntPtr objectSettings, Byte[] data);
    public abstract virtual void AddObject(IntPtr converter, IntPtr objectSettings, string data);
    public abstract virtual bool DoConversion(IntPtr converter);
    public abstract virtual void DestroyConverter(IntPtr converter);
    public abstract virtual Byte[] GetConversionResult(IntPtr converter);
    public abstract virtual int SetPhaseChangedCallback(IntPtr converter, VoidCallback callback);
    public abstract virtual int SetProgressChangedCallback(IntPtr converter, VoidCallback callback);
    public abstract virtual int SetFinishedCallback(IntPtr converter, IntCallback callback);
    public abstract virtual int SetWarningCallback(IntPtr converter, StringCallback callback);
    public abstract virtual int SetErrorCallback(IntPtr converter, StringCallback callback);
    public abstract virtual int GetPhaseCount(IntPtr converter);
    public abstract virtual int GetCurrentPhase(IntPtr converter);
    public abstract virtual string GetPhaseDescription(IntPtr converter, int phase);
    public abstract virtual string GetProgressString(IntPtr converter);
}
public enum DinkToPdf.CustomUnmanagedType : Enum {
    public int value__;
    public static CustomUnmanagedType LPUTF8Str;
}
public class DinkToPdf.EventDefinitions.ErrorArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    public IDocument Document { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public IDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(IDocument value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class DinkToPdf.EventDefinitions.FinishedArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Success>k__BackingField;
    public IDocument Document { get; public set; }
    public bool Success { get; public set; }
    [CompilerGeneratedAttribute]
public IDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(IDocument value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
}
public class DinkToPdf.EventDefinitions.PhaseChangedArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PhaseCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CurrentPhase>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    public IDocument Document { get; public set; }
    public int PhaseCount { get; public set; }
    public int CurrentPhase { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public IDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(IDocument value);
    [CompilerGeneratedAttribute]
public int get_PhaseCount();
    [CompilerGeneratedAttribute]
public void set_PhaseCount(int value);
    [CompilerGeneratedAttribute]
public int get_CurrentPhase();
    [CompilerGeneratedAttribute]
public void set_CurrentPhase(int value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public class DinkToPdf.EventDefinitions.ProgressChangedArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    public IDocument Document { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public IDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(IDocument value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public class DinkToPdf.EventDefinitions.WarningArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    public IDocument Document { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public IDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(IDocument value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class DinkToPdf.FooterSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Left>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Center>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Right>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<double> <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HtmUrl>k__BackingField;
    [WkHtmlAttribute("footer.fontSize")]
public Nullable`1<int> FontSize { get; public set; }
    [WkHtmlAttribute("footer.fontName")]
public string FontName { get; public set; }
    [WkHtmlAttribute("footer.left")]
public string Left { get; public set; }
    [WkHtmlAttribute("footer.center")]
public string Center { get; public set; }
    [WkHtmlAttribute("footer.right")]
public string Right { get; public set; }
    [WkHtmlAttribute("footer.line")]
public Nullable`1<bool> Line { get; public set; }
    [WkHtmlAttribute("footer.spacing")]
public Nullable`1<double> Spacing { get; public set; }
    [WkHtmlAttribute("footer.htmlUrl")]
public string HtmUrl { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
    [CompilerGeneratedAttribute]
public string get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(string value);
    [CompilerGeneratedAttribute]
public string get_Center();
    [CompilerGeneratedAttribute]
public void set_Center(string value);
    [CompilerGeneratedAttribute]
public string get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public string get_HtmUrl();
    [CompilerGeneratedAttribute]
public void set_HtmUrl(string value);
}
public class DinkToPdf.GlobalSettings : object {
    private MarginSettings margins;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<Orientation> <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ColorMode> <ColorMode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <UseCompression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <DPI>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <PageOffset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Copies>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Collate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Outline>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <OutlineDepth>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DumpOutline>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Out>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DocumentTitle>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <ImageDPI>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <ImageQuality>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CookieJar>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PechkinPaperSize <PaperSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewportSize>k__BackingField;
    [WkHtmlAttribute("orientation")]
public Nullable`1<Orientation> Orientation { get; public set; }
    [WkHtmlAttribute("colorMode")]
public Nullable`1<ColorMode> ColorMode { get; public set; }
    [WkHtmlAttribute("useCompression")]
public Nullable`1<bool> UseCompression { get; public set; }
    [WkHtmlAttribute("dpi")]
public Nullable`1<int> DPI { get; public set; }
    [WkHtmlAttribute("pageOffset")]
public Nullable`1<int> PageOffset { get; public set; }
    [WkHtmlAttribute("copies")]
public Nullable`1<int> Copies { get; public set; }
    [WkHtmlAttribute("collate")]
public Nullable`1<bool> Collate { get; public set; }
    [WkHtmlAttribute("outline")]
public Nullable`1<bool> Outline { get; public set; }
    [WkHtmlAttribute("outlineDepth")]
public Nullable`1<int> OutlineDepth { get; public set; }
    [WkHtmlAttribute("dumpOutline")]
public string DumpOutline { get; public set; }
    [WkHtmlAttribute("out")]
public string Out { get; public set; }
    [WkHtmlAttribute("documentTitle")]
public string DocumentTitle { get; public set; }
    [WkHtmlAttribute("imageDPI")]
public Nullable`1<int> ImageDPI { get; public set; }
    [WkHtmlAttribute("imageQuality")]
public Nullable`1<int> ImageQuality { get; public set; }
    [WkHtmlAttribute("load.cookieJar")]
public string CookieJar { get; public set; }
    public PechkinPaperSize PaperSize { get; public set; }
    [WkHtmlAttribute("size.height")]
private string PaperHeight { get; }
    [WkHtmlAttribute("size.width")]
private string PaperWidth { get; }
    public MarginSettings Margins { get; public set; }
    [WkHtmlAttribute("margin.left")]
private string MarginLeft { get; }
    [WkHtmlAttribute("margin.right")]
private string MarginRight { get; }
    [WkHtmlAttribute("margin.top")]
private string MarginTop { get; }
    [WkHtmlAttribute("margin.bottom")]
private string MarginBottom { get; }
    [WkHtmlAttribute("viewportSize")]
public string ViewportSize { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<Orientation> get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Nullable`1<Orientation> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ColorMode> get_ColorMode();
    [CompilerGeneratedAttribute]
public void set_ColorMode(Nullable`1<ColorMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseCompression();
    [CompilerGeneratedAttribute]
public void set_UseCompression(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DPI();
    [CompilerGeneratedAttribute]
public void set_DPI(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageOffset();
    [CompilerGeneratedAttribute]
public void set_PageOffset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Copies();
    [CompilerGeneratedAttribute]
public void set_Copies(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Collate();
    [CompilerGeneratedAttribute]
public void set_Collate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Outline();
    [CompilerGeneratedAttribute]
public void set_Outline(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OutlineDepth();
    [CompilerGeneratedAttribute]
public void set_OutlineDepth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_DumpOutline();
    [CompilerGeneratedAttribute]
public void set_DumpOutline(string value);
    [CompilerGeneratedAttribute]
public string get_Out();
    [CompilerGeneratedAttribute]
public void set_Out(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentTitle();
    [CompilerGeneratedAttribute]
public void set_DocumentTitle(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ImageDPI();
    [CompilerGeneratedAttribute]
public void set_ImageDPI(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ImageQuality();
    [CompilerGeneratedAttribute]
public void set_ImageQuality(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_CookieJar();
    [CompilerGeneratedAttribute]
public void set_CookieJar(string value);
    [CompilerGeneratedAttribute]
public PechkinPaperSize get_PaperSize();
    [CompilerGeneratedAttribute]
public void set_PaperSize(PechkinPaperSize value);
    private string get_PaperHeight();
    private string get_PaperWidth();
    public MarginSettings get_Margins();
    public void set_Margins(MarginSettings value);
    private string get_MarginLeft();
    private string get_MarginRight();
    private string get_MarginTop();
    private string get_MarginBottom();
    [CompilerGeneratedAttribute]
public string get_ViewportSize();
    [CompilerGeneratedAttribute]
public void set_ViewportSize(string value);
}
public class DinkToPdf.HeaderSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Left>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Center>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Right>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<double> <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HtmUrl>k__BackingField;
    [WkHtmlAttribute("header.fontSize")]
public Nullable`1<int> FontSize { get; public set; }
    [WkHtmlAttribute("header.fontName")]
public string FontName { get; public set; }
    [WkHtmlAttribute("header.left")]
public string Left { get; public set; }
    [WkHtmlAttribute("header.center")]
public string Center { get; public set; }
    [WkHtmlAttribute("header.right")]
public string Right { get; public set; }
    [WkHtmlAttribute("header.line")]
public Nullable`1<bool> Line { get; public set; }
    [WkHtmlAttribute("header.spacing")]
public Nullable`1<double> Spacing { get; public set; }
    [WkHtmlAttribute("header.htmlUrl")]
public string HtmUrl { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
    [CompilerGeneratedAttribute]
public string get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(string value);
    [CompilerGeneratedAttribute]
public string get_Center();
    [CompilerGeneratedAttribute]
public void set_Center(string value);
    [CompilerGeneratedAttribute]
public string get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public string get_HtmUrl();
    [CompilerGeneratedAttribute]
public void set_HtmUrl(string value);
}
public class DinkToPdf.HtmlToPdfDocument : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<ObjectSettings> <Objects>k__BackingField;
    private GlobalSettings globalSettings;
    public List`1<ObjectSettings> Objects { get; private set; }
    public GlobalSettings GlobalSettings { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ObjectSettings> get_Objects();
    [CompilerGeneratedAttribute]
private void set_Objects(List`1<ObjectSettings> value);
    public GlobalSettings get_GlobalSettings();
    public void set_GlobalSettings(GlobalSettings value);
    public sealed virtual IEnumerable`1<IObject> GetObjects();
}
[UnmanagedFunctionPointerAttribute("2")]
public class DinkToPdf.IntCallback : MulticastDelegate {
    public IntCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr converter, int integer);
    public virtual IAsyncResult BeginInvoke(IntPtr converter, int integer, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DinkToPdf.LoadSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <JSDelay>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<double> <ZoomFactor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <BlockLocalFileAccess>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <StopSlowScript>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <DebugJavascript>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ContentErrorHandling> <LoadErrorHandling>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <CustomHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <RepeatCustomHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <Cookies>k__BackingField;
    [WkHtmlAttribute("load.username")]
public string Username { get; public set; }
    [WkHtmlAttribute("load.password")]
public string Password { get; public set; }
    [WkHtmlAttribute("load.jsdelay")]
public Nullable`1<int> JSDelay { get; public set; }
    [WkHtmlAttribute("load.zoomFactor")]
public Nullable`1<double> ZoomFactor { get; public set; }
    [WkHtmlAttribute("load.blockLocalFileAccess")]
public Nullable`1<bool> BlockLocalFileAccess { get; public set; }
    [WkHtmlAttribute("load.stopSlowScript")]
public Nullable`1<bool> StopSlowScript { get; public set; }
    [WkHtmlAttribute("load.debugJavascript")]
public Nullable`1<bool> DebugJavascript { get; public set; }
    [WkHtmlAttribute("load.loadErrorHandling")]
public Nullable`1<ContentErrorHandling> LoadErrorHandling { get; public set; }
    [WkHtmlAttribute("load.proxy")]
public string Proxy { get; public set; }
    [WkHtmlAttribute("load.customHeaders")]
public Dictionary`2<string, string> CustomHeaders { get; public set; }
    [WkHtmlAttribute("load.repeatCustomHeaders")]
public Nullable`1<bool> RepeatCustomHeaders { get; public set; }
    [WkHtmlAttribute("load.cookies")]
public Dictionary`2<string, string> Cookies { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_JSDelay();
    [CompilerGeneratedAttribute]
public void set_JSDelay(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ZoomFactor();
    [CompilerGeneratedAttribute]
public void set_ZoomFactor(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BlockLocalFileAccess();
    [CompilerGeneratedAttribute]
public void set_BlockLocalFileAccess(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StopSlowScript();
    [CompilerGeneratedAttribute]
public void set_StopSlowScript(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DebugJavascript();
    [CompilerGeneratedAttribute]
public void set_DebugJavascript(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ContentErrorHandling> get_LoadErrorHandling();
    [CompilerGeneratedAttribute]
public void set_LoadErrorHandling(Nullable`1<ContentErrorHandling> value);
    [CompilerGeneratedAttribute]
public string get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CustomHeaders();
    [CompilerGeneratedAttribute]
public void set_CustomHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RepeatCustomHeaders();
    [CompilerGeneratedAttribute]
public void set_RepeatCustomHeaders(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(Dictionary`2<string, string> value);
}
public class DinkToPdf.MarginSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Unit <Unit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<double> <Top>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<double> <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<double> <Left>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<double> <Right>k__BackingField;
    public Unit Unit { get; public set; }
    public Nullable`1<double> Top { get; public set; }
    public Nullable`1<double> Bottom { get; public set; }
    public Nullable`1<double> Left { get; public set; }
    public Nullable`1<double> Right { get; public set; }
    public MarginSettings(double top, double right, double bottom, double left);
    [CompilerGeneratedAttribute]
public Unit get_Unit();
    [CompilerGeneratedAttribute]
public void set_Unit(Unit value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(Nullable`1<double> value);
    public string GetMarginValue(Nullable`1<double> value);
}
public class DinkToPdf.ObjectSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Page>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <UseExternalLinks>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <UseLocalLinks>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <ProduceForms>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IncludeInOutline>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <PagesCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HtmlContent>k__BackingField;
    private WebSettings webSettings;
    private HeaderSettings headerSettings;
    private FooterSettings footerSettings;
    private LoadSettings loadSettings;
    [WkHtmlAttribute("page")]
public string Page { get; public set; }
    [WkHtmlAttribute("useExternalLinks")]
public Nullable`1<bool> UseExternalLinks { get; public set; }
    [WkHtmlAttribute("useLocalLinks")]
public Nullable`1<bool> UseLocalLinks { get; public set; }
    [WkHtmlAttribute("produceForms")]
public Nullable`1<bool> ProduceForms { get; public set; }
    [WkHtmlAttribute("includeInOutline")]
public Nullable`1<bool> IncludeInOutline { get; public set; }
    [WkHtmlAttribute("pagesCount")]
public Nullable`1<bool> PagesCount { get; public set; }
    public string HtmlContent { get; public set; }
    public WebSettings WebSettings { get; public set; }
    public HeaderSettings HeaderSettings { get; public set; }
    public FooterSettings FooterSettings { get; public set; }
    public LoadSettings LoadSettings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseExternalLinks();
    [CompilerGeneratedAttribute]
public void set_UseExternalLinks(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseLocalLinks();
    [CompilerGeneratedAttribute]
public void set_UseLocalLinks(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ProduceForms();
    [CompilerGeneratedAttribute]
public void set_ProduceForms(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeInOutline();
    [CompilerGeneratedAttribute]
public void set_IncludeInOutline(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PagesCount();
    [CompilerGeneratedAttribute]
public void set_PagesCount(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_HtmlContent();
    [CompilerGeneratedAttribute]
public void set_HtmlContent(string value);
    public WebSettings get_WebSettings();
    public void set_WebSettings(WebSettings value);
    public HeaderSettings get_HeaderSettings();
    public void set_HeaderSettings(HeaderSettings value);
    public FooterSettings get_FooterSettings();
    public void set_FooterSettings(FooterSettings value);
    public LoadSettings get_LoadSettings();
    public void set_LoadSettings(LoadSettings value);
    public sealed virtual Byte[] GetContent();
}
public enum DinkToPdf.Orientation : Enum {
    public int value__;
    public static Orientation Landscape;
    public static Orientation Portrait;
}
public enum DinkToPdf.PaperKind : Enum {
    public int value__;
    public static PaperKind Custom;
    public static PaperKind Letter;
    public static PaperKind LetterSmall;
    public static PaperKind Tabloid;
    public static PaperKind Ledger;
    public static PaperKind Legal;
    public static PaperKind Statement;
    public static PaperKind Executive;
    public static PaperKind A3;
    public static PaperKind A4;
    public static PaperKind A4Small;
    public static PaperKind A5;
    public static PaperKind B4;
    public static PaperKind B5;
    public static PaperKind Folio;
    public static PaperKind Quarto;
    public static PaperKind Standard10x14;
    public static PaperKind Standard11x17;
    public static PaperKind Note;
    public static PaperKind Number9Envelope;
    public static PaperKind Number10Envelope;
    public static PaperKind Number11Envelope;
    public static PaperKind Number12Envelope;
    public static PaperKind Number14Envelope;
    public static PaperKind CSheet;
    public static PaperKind DSheet;
    public static PaperKind ESheet;
    public static PaperKind DLEnvelope;
    public static PaperKind C5Envelope;
    public static PaperKind C3Envelope;
    public static PaperKind C4Envelope;
    public static PaperKind C6Envelope;
    public static PaperKind C65Envelope;
    public static PaperKind B4Envelope;
    public static PaperKind B5Envelope;
    public static PaperKind B6Envelope;
    public static PaperKind ItalyEnvelope;
    public static PaperKind MonarchEnvelope;
    public static PaperKind PersonalEnvelope;
    public static PaperKind USStandardFanfold;
    public static PaperKind GermanStandardFanfold;
    public static PaperKind GermanLegalFanfold;
    public static PaperKind IsoB4;
    public static PaperKind JapanesePostcard;
    public static PaperKind Standard9x11;
    public static PaperKind Standard10x11;
    public static PaperKind Standard15x11;
    public static PaperKind InviteEnvelope;
    public static PaperKind LetterExtra;
    public static PaperKind LegalExtra;
    public static PaperKind TabloidExtra;
    public static PaperKind A4Extra;
    public static PaperKind LetterTransverse;
    public static PaperKind A4Transverse;
    public static PaperKind LetterExtraTransverse;
    public static PaperKind APlus;
    public static PaperKind BPlus;
    public static PaperKind LetterPlus;
    public static PaperKind A4Plus;
    public static PaperKind A5Transverse;
    public static PaperKind B5Transverse;
    public static PaperKind A3Extra;
    public static PaperKind A5Extra;
    public static PaperKind B5Extra;
    public static PaperKind A2;
    public static PaperKind A3Transverse;
    public static PaperKind A3ExtraTransverse;
    public static PaperKind JapaneseDoublePostcard;
    public static PaperKind A6;
    public static PaperKind JapaneseEnvelopeKakuNumber2;
    public static PaperKind JapaneseEnvelopeKakuNumber3;
    public static PaperKind JapaneseEnvelopeChouNumber3;
    public static PaperKind JapaneseEnvelopeChouNumber4;
    public static PaperKind LetterRotated;
    public static PaperKind A3Rotated;
    public static PaperKind A4Rotated;
    public static PaperKind A5Rotated;
    public static PaperKind B4JisRotated;
    public static PaperKind B5JisRotated;
    public static PaperKind JapanesePostcardRotated;
    public static PaperKind JapaneseDoublePostcardRotated;
    public static PaperKind A6Rotated;
    public static PaperKind JapaneseEnvelopeKakuNumber2Rotated;
    public static PaperKind JapaneseEnvelopeKakuNumber3Rotated;
    public static PaperKind JapaneseEnvelopeChouNumber3Rotated;
    public static PaperKind JapaneseEnvelopeChouNumber4Rotated;
    public static PaperKind B6Jis;
    public static PaperKind B6JisRotated;
    public static PaperKind Standard12x11;
    public static PaperKind JapaneseEnvelopeYouNumber4;
    public static PaperKind JapaneseEnvelopeYouNumber4Rotated;
    public static PaperKind Prc16K;
    public static PaperKind Prc32K;
    public static PaperKind Prc32KBig;
    public static PaperKind PrcEnvelopeNumber1;
    public static PaperKind PrcEnvelopeNumber2;
    public static PaperKind PrcEnvelopeNumber3;
    public static PaperKind PrcEnvelopeNumber4;
    public static PaperKind PrcEnvelopeNumber5;
    public static PaperKind PrcEnvelopeNumber6;
    public static PaperKind PrcEnvelopeNumber7;
    public static PaperKind PrcEnvelopeNumber8;
    public static PaperKind PrcEnvelopeNumber9;
    public static PaperKind PrcEnvelopeNumber10;
    public static PaperKind Prc16KRotated;
    public static PaperKind Prc32KRotated;
    public static PaperKind Prc32KBigRotated;
    public static PaperKind PrcEnvelopeNumber1Rotated;
    public static PaperKind PrcEnvelopeNumber2Rotated;
    public static PaperKind PrcEnvelopeNumber3Rotated;
    public static PaperKind PrcEnvelopeNumber4Rotated;
    public static PaperKind PrcEnvelopeNumber5Rotated;
    public static PaperKind PrcEnvelopeNumber6Rotated;
    public static PaperKind PrcEnvelopeNumber7Rotated;
    public static PaperKind PrcEnvelopeNumber8Rotated;
    public static PaperKind PrcEnvelopeNumber9Rotated;
    public static PaperKind PrcEnvelopeNumber10Rotated;
}
public class DinkToPdf.PdfTools : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLoaded>k__BackingField;
    private bool disposedValue;
    public bool IsLoaded { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLoaded();
    [CompilerGeneratedAttribute]
private void set_IsLoaded(bool value);
    public sealed virtual void Load();
    public sealed virtual bool ExtendedQt();
    public sealed virtual string GetLibraryVersion();
    public sealed virtual IntPtr CreateGlobalSettings();
    public sealed virtual int SetGlobalSetting(IntPtr settings, string name, string value);
    public sealed virtual string GetGlobalSetting(IntPtr settings, string name);
    public sealed virtual void DestroyGlobalSetting(IntPtr settings);
    public sealed virtual IntPtr CreateObjectSettings();
    public sealed virtual int SetObjectSetting(IntPtr settings, string name, string value);
    public sealed virtual string GetObjectSetting(IntPtr settings, string name);
    public sealed virtual void DestroyObjectSetting(IntPtr settings);
    public sealed virtual IntPtr CreateConverter(IntPtr globalSettings);
    public sealed virtual void AddObject(IntPtr converter, IntPtr objectSettings, Byte[] data);
    public sealed virtual void AddObject(IntPtr converter, IntPtr objectSettings, string data);
    public sealed virtual bool DoConversion(IntPtr converter);
    public sealed virtual void DestroyConverter(IntPtr converter);
    public sealed virtual Byte[] GetConversionResult(IntPtr converter);
    public sealed virtual int SetPhaseChangedCallback(IntPtr converter, VoidCallback callback);
    public sealed virtual int SetProgressChangedCallback(IntPtr converter, VoidCallback callback);
    public sealed virtual int SetFinishedCallback(IntPtr converter, IntCallback callback);
    public sealed virtual int SetWarningCallback(IntPtr converter, StringCallback callback);
    public sealed virtual int SetErrorCallback(IntPtr converter, StringCallback callback);
    public sealed virtual int GetPhaseCount(IntPtr converter);
    public sealed virtual int GetCurrentPhase(IntPtr converter);
    public sealed virtual string GetPhaseDescription(IntPtr converter, int phase);
    public sealed virtual string GetProgressString(IntPtr converter);
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    private string GetString(Byte[] buffer);
}
public class DinkToPdf.PechkinPaperSize : object {
    private static Dictionary`2<PaperKind, PechkinPaperSize> dictionary;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Width>k__BackingField;
    public string Height { get; public set; }
    public string Width { get; public set; }
    public PechkinPaperSize(string width, string height);
    private static PechkinPaperSize();
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    public static PechkinPaperSize op_Implicit(PaperKind paperKind);
}
[UnmanagedFunctionPointerAttribute("2")]
public class DinkToPdf.StringCallback : MulticastDelegate {
    public StringCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr converter, string str);
    public virtual IAsyncResult BeginInvoke(IntPtr converter, string str, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DinkToPdf.SynchronizedConverter : BasicConverter {
    private Thread conversionThread;
    private BlockingCollection`1<Task> conversions;
    private bool kill;
    private object startLock;
    public SynchronizedConverter(ITools tools);
    public virtual Byte[] Convert(IDocument document);
    public TResult Invoke(Func`1<TResult> delegate);
    private void StartThread();
    private void StopThread();
    private void Run();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Byte[] <>n__0(IDocument document);
}
public enum DinkToPdf.Unit : Enum {
    public int value__;
    public static Unit Inches;
    public static Unit Millimeters;
    public static Unit Centimeters;
}
[UnmanagedFunctionPointerAttribute("2")]
public class DinkToPdf.VoidCallback : MulticastDelegate {
    public VoidCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr converter);
    public virtual IAsyncResult BeginInvoke(IntPtr converter, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DinkToPdf.WebSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Background>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <LoadImages>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <EnableJavascript>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <EnableIntelligentShrinking>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MinimumFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <PrintMediaType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UserStyleSheet>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <enablePlugins>k__BackingField;
    [WkHtmlAttribute("web.background")]
public Nullable`1<bool> Background { get; public set; }
    [WkHtmlAttribute("web.loadImages")]
public Nullable`1<bool> LoadImages { get; public set; }
    [WkHtmlAttribute("web.enableJavascript")]
public Nullable`1<bool> EnableJavascript { get; public set; }
    [WkHtmlAttribute("web.enableIntelligentShrinking")]
public Nullable`1<bool> EnableIntelligentShrinking { get; public set; }
    [WkHtmlAttribute("web.minimumFontSize")]
public Nullable`1<int> MinimumFontSize { get; public set; }
    [WkHtmlAttribute("web.printMediaType")]
public Nullable`1<bool> PrintMediaType { get; public set; }
    [WkHtmlAttribute("web.defaultEncoding")]
public string DefaultEncoding { get; public set; }
    [WkHtmlAttribute("web.userStyleSheet")]
public string UserStyleSheet { get; public set; }
    [WkHtmlAttribute("web.enablePlugins")]
public Nullable`1<bool> enablePlugins { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LoadImages();
    [CompilerGeneratedAttribute]
public void set_LoadImages(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableJavascript();
    [CompilerGeneratedAttribute]
public void set_EnableJavascript(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableIntelligentShrinking();
    [CompilerGeneratedAttribute]
public void set_EnableIntelligentShrinking(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumFontSize();
    [CompilerGeneratedAttribute]
public void set_MinimumFontSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PrintMediaType();
    [CompilerGeneratedAttribute]
public void set_PrintMediaType(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DefaultEncoding();
    [CompilerGeneratedAttribute]
public void set_DefaultEncoding(string value);
    [CompilerGeneratedAttribute]
public string get_UserStyleSheet();
    [CompilerGeneratedAttribute]
public void set_UserStyleSheet(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_enablePlugins();
    [CompilerGeneratedAttribute]
public void set_enablePlugins(Nullable`1<bool> value);
}
[AttributeUsageAttribute("128")]
public class DinkToPdf.WkHtmlAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public WkHtmlAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public static class DinkToPdf.WkHtmlToXBindings : object {
    private static string DLLNAME;
    private static CharSet CHARSET;
    public static int wkhtmltopdf_extended_qt();
    public static IntPtr wkhtmltopdf_version();
    public static int wkhtmltopdf_init(int useGraphics);
    public static int wkhtmltopdf_deinit();
    public static IntPtr wkhtmltopdf_create_global_settings();
    public static int wkhtmltopdf_set_global_setting(IntPtr settings, string name, string value);
    public static int wkhtmltopdf_get_global_setting(IntPtr settings, string name, Byte* value, int valueSize);
    public static int wkhtmltopdf_destroy_global_settings(IntPtr settings);
    public static IntPtr wkhtmltopdf_create_object_settings();
    public static int wkhtmltopdf_set_object_setting(IntPtr settings, string name, string value);
    public static int wkhtmltopdf_get_object_setting(IntPtr settings, string name, Byte* value, int valueSize);
    public static int wkhtmltopdf_destroy_object_settings(IntPtr settings);
    public static IntPtr wkhtmltopdf_create_converter(IntPtr globalSettings);
    public static void wkhtmltopdf_add_object(IntPtr converter, IntPtr objectSettings, Byte[] data);
    public static void wkhtmltopdf_add_object(IntPtr converter, IntPtr objectSettings, string data);
    public static bool wkhtmltopdf_convert(IntPtr converter);
    public static void wkhtmltopdf_destroy_converter(IntPtr converter);
    public static int wkhtmltopdf_get_output(IntPtr converter, IntPtr& data);
    public static int wkhtmltopdf_set_phase_changed_callback(IntPtr converter, VoidCallback callback);
    public static int wkhtmltopdf_set_progress_changed_callback(IntPtr converter, VoidCallback callback);
    public static int wkhtmltopdf_set_finished_callback(IntPtr converter, IntCallback callback);
    public static int wkhtmltopdf_set_warning_callback(IntPtr converter, StringCallback callback);
    public static int wkhtmltopdf_set_error_callback(IntPtr converter, StringCallback callback);
    public static int wkhtmltopdf_phase_count(IntPtr converter);
    public static int wkhtmltopdf_current_phase(IntPtr converter);
    public static IntPtr wkhtmltopdf_phase_description(IntPtr converter, int phase);
    public static IntPtr wkhtmltopdf_progress_string(IntPtr converter);
    public static int wkhtmltopdf_http_error_code(IntPtr converter);
}
