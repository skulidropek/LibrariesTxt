[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Threading.Redis.Primitives.RedisMutexPrimitive : object {
    private RedisKey _key;
    private RedisValue _lockId;
    private RedLockTimeouts _timeouts;
    private static RedisScript`1<RedisMutexPrimitive> ReleaseScript;
    private static RedisScript`1<RedisMutexPrimitive> ExtendScript;
    public TimeoutValue AcquireTimeout { get; }
    public RedisMutexPrimitive(RedisKey key, RedisValue lockId, RedLockTimeouts timeouts);
    private static RedisMutexPrimitive();
    public sealed virtual TimeoutValue get_AcquireTimeout();
    public sealed virtual void Release(IDatabase database, bool fireAndForget);
    public sealed virtual Task ReleaseAsync(IDatabaseAsync database, bool fireAndForget);
    public sealed virtual bool TryAcquire(IDatabase database);
    public sealed virtual Task`1<bool> TryAcquireAsync(IDatabaseAsync database);
    public sealed virtual Task`1<bool> TryExtendAsync(IDatabaseAsync database);
    public sealed virtual bool IsConnected(IDatabase database);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Threading.Redis.Primitives.RedisReadLockPrimitive : object {
    private RedisValue _lockId;
    private RedisKey _readerKey;
    private RedisKey _writerKey;
    private RedLockTimeouts _timeouts;
    private static RedisScript`1<RedisReadLockPrimitive> ReleaseReadScript;
    private static RedisScript`1<RedisReadLockPrimitive> TryExtendReadScript;
    private static RedisScript`1<RedisReadLockPrimitive> TryAcquireReadScript;
    public TimeoutValue AcquireTimeout { get; }
    public RedisReadLockPrimitive(RedisKey readerKey, RedisKey writerKey, RedLockTimeouts timeouts);
    private static RedisReadLockPrimitive();
    public sealed virtual TimeoutValue get_AcquireTimeout();
    public sealed virtual void Release(IDatabase database, bool fireAndForget);
    public sealed virtual Task ReleaseAsync(IDatabaseAsync database, bool fireAndForget);
    public sealed virtual Task`1<bool> TryExtendAsync(IDatabaseAsync database);
    public sealed virtual Task`1<bool> TryAcquireAsync(IDatabaseAsync database);
    public sealed virtual bool TryAcquire(IDatabase database);
    public sealed virtual bool IsConnected(IDatabase database);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Threading.Redis.Primitives.RedisScript`1 : object {
    [CompilerGeneratedAttribute]
private Func`2<TArgument, object> <parameters>P;
    private LuaScript _script;
    public RedisScript`1(string script, Func`2<TArgument, object> parameters);
    public RedisResult Execute(IDatabase database, TArgument argument, bool fireAndForget);
    public Task`1<RedisResult> ExecuteAsync(IDatabaseAsync database, TArgument argument, bool fireAndForget);
    private static string RemoveExtraneousWhitespace(string script);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Threading.Redis.Primitives.RedisSemaphorePrimitive : object {
    private static string GetNowMillisScriptFragment;
    private static string RenewSetScriptFragment;
    private RedisValue _lockId;
    private RedisKey _key;
    private int _maxCount;
    private RedLockTimeouts _timeouts;
    private static RedisScript`1<RedisSemaphorePrimitive> AcquireScript;
    private static RedisScript`1<RedisSemaphorePrimitive> ExtendScript;
    public TimeoutValue AcquireTimeout { get; }
    private TimeoutValue SetExpiry { get; }
    public RedisSemaphorePrimitive(RedisKey key, int maxCount, RedLockTimeouts timeouts);
    private static RedisSemaphorePrimitive();
    public sealed virtual TimeoutValue get_AcquireTimeout();
    private TimeoutValue get_SetExpiry();
    public sealed virtual void Release(IDatabase database, bool fireAndForget);
    public sealed virtual Task ReleaseAsync(IDatabaseAsync database, bool fireAndForget);
    public sealed virtual bool TryAcquire(IDatabase database);
    public sealed virtual Task`1<bool> TryAcquireAsync(IDatabaseAsync database);
    public sealed virtual Task`1<bool> TryExtendAsync(IDatabaseAsync database);
    public sealed virtual bool IsConnected(IDatabase database);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Threading.Redis.Primitives.RedisWriteLockPrimitive : object {
    private RedisKey _readerKey;
    private RedisKey _writerKey;
    private RedisValue _lockId;
    private RedLockTimeouts _timeouts;
    private RedisMutexPrimitive _mutexPrimitive;
    private static RedisScript`1<RedisWriteLockPrimitive> TryAcquireWriteScript;
    public TimeoutValue AcquireTimeout { get; }
    public RedisWriteLockPrimitive(RedisKey readerKey, RedisKey writerKey, RedisValue lockId, RedLockTimeouts timeouts);
    private static RedisWriteLockPrimitive();
    public sealed virtual TimeoutValue get_AcquireTimeout();
    public sealed virtual void Release(IDatabase database, bool fireAndForget);
    public sealed virtual Task ReleaseAsync(IDatabaseAsync database, bool fireAndForget);
    public sealed virtual bool TryAcquire(IDatabase database);
    public sealed virtual Task`1<bool> TryAcquireAsync(IDatabaseAsync database);
    public sealed virtual Task`1<bool> TryExtendAsync(IDatabaseAsync database);
    public sealed virtual bool IsConnected(IDatabase database);
}
internal class Medallion.Threading.Redis.Primitives.RedisWriterWaitingPrimitive : RedisMutexPrimitive {
    [NullableAttribute("1")]
public static string LockIdSuffix;
    public RedisWriterWaitingPrimitive(RedisKey writerKey, RedisValue baseLockId, RedLockTimeouts timeouts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.Redis.RedisDistributedLock : object {
    private IReadOnlyList`1<IDatabase> _databases;
    private RedisDistributedLockOptions _options;
    [CompilerGeneratedAttribute]
private RedisKey <Key>k__BackingField;
    public RedisKey Key { get; }
    public string Name { get; }
    public RedisDistributedLock(RedisKey key, IDatabase database, Action`1<RedisDistributedSynchronizationOptionsBuilder> options);
    public RedisDistributedLock(RedisKey key, IEnumerable`1<IDatabase> databases, Action`1<RedisDistributedSynchronizationOptionsBuilder> options);
    internal static IReadOnlyList`1<IDatabase> ValidateDatabases(IEnumerable`1<IDatabase> databases);
    [CompilerGeneratedAttribute]
public RedisKey get_Key();
    public sealed virtual string get_Name();
    private sealed virtual override ValueTask`1<RedisDistributedLockHandle> Medallion.Threading.Internal.IInternalDistributedLock<Medallion.Threading.Redis.RedisDistributedLockHandle>.InternalTryAcquireAsync(TimeoutValue timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedisDistributedLock/<TryAcquireAsync>d__11")]
private ValueTask`1<RedisDistributedLockHandle> TryAcquireAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedLock.TryAcquire(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedLock.Acquire(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedLock.TryAcquireAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedLock.AcquireAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual RedisDistributedLockHandle TryAcquire(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual RedisDistributedLockHandle Acquire(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<RedisDistributedLockHandle> TryAcquireAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<RedisDistributedLockHandle> AcquireAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
}
public class Medallion.Threading.Redis.RedisDistributedLockHandle : object {
    [NullableAttribute("2")]
private RedLockHandle _innerHandle;
    public CancellationToken HandleLostToken { get; }
    [NullableContextAttribute("1")]
internal RedisDistributedLockHandle(RedLockHandle innerHandle);
    public sealed virtual CancellationToken get_HandleLostToken();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
}
[IsReadOnlyAttribute]
internal class Medallion.Threading.Redis.RedisDistributedLockOptions : ValueType {
    [CompilerGeneratedAttribute]
private RedLockTimeouts <RedLockTimeouts>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeoutValue <ExtensionCadence>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeoutValue <MinBusyWaitSleepTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeoutValue <MaxBusyWaitSleepTime>k__BackingField;
    public RedLockTimeouts RedLockTimeouts { get; }
    public TimeoutValue ExtensionCadence { get; }
    public TimeoutValue MinBusyWaitSleepTime { get; }
    public TimeoutValue MaxBusyWaitSleepTime { get; }
    public RedisDistributedLockOptions(RedLockTimeouts redLockTimeouts, TimeoutValue extensionCadence, TimeoutValue minBusyWaitSleepTime, TimeoutValue maxBusyWaitSleepTime);
    [CompilerGeneratedAttribute]
public RedLockTimeouts get_RedLockTimeouts();
    [CompilerGeneratedAttribute]
public TimeoutValue get_ExtensionCadence();
    [CompilerGeneratedAttribute]
public TimeoutValue get_MinBusyWaitSleepTime();
    [CompilerGeneratedAttribute]
public TimeoutValue get_MaxBusyWaitSleepTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.Redis.RedisDistributedReaderWriterLock : object {
    private IReadOnlyList`1<IDatabase> _databases;
    private RedisDistributedLockOptions _options;
    [CompilerGeneratedAttribute]
private RedisKey <ReaderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisKey <WriterKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    internal RedisKey ReaderKey { get; }
    internal RedisKey WriterKey { get; }
    public string Name { get; }
    public RedisDistributedReaderWriterLock(string name, IDatabase database, Action`1<RedisDistributedSynchronizationOptionsBuilder> options);
    public RedisDistributedReaderWriterLock(string name, IEnumerable`1<IDatabase> databases, Action`1<RedisDistributedSynchronizationOptionsBuilder> options);
    [CompilerGeneratedAttribute]
internal RedisKey get_ReaderKey();
    [CompilerGeneratedAttribute]
internal RedisKey get_WriterKey();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    private sealed virtual override ValueTask`1<RedisDistributedReaderWriterLockHandle> Medallion.Threading.Internal.IInternalDistributedReaderWriterLock<Medallion.Threading.Redis.RedisDistributedReaderWriterLockHandle>.InternalTryAcquireAsync(TimeoutValue timeout, CancellationToken cancellationToken, bool isWrite);
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedisDistributedReaderWriterLock/<TryAcquireWriteLockAsync>d__14")]
private ValueTask`1<RedisDistributedReaderWriterLockHandle> TryAcquireWriteLockAsync(TimeoutValue timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedisDistributedReaderWriterLock/<TryAcquireWriteLockAsync>d__15")]
private ValueTask`1<RedisDistributedReaderWriterLockHandle> TryAcquireWriteLockAsync(AcquireWriteLockState state, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedisDistributedReaderWriterLock/<TryAcquireAsync>d__16`1")]
private ValueTask`1<RedisDistributedReaderWriterLockHandle> TryAcquireAsync(TPrimitive primitive, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedReaderWriterLock.TryAcquireReadLock(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedReaderWriterLock.AcquireReadLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedReaderWriterLock.TryAcquireReadLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedReaderWriterLock.AcquireReadLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedReaderWriterLock.TryAcquireWriteLock(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedReaderWriterLock.AcquireWriteLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedReaderWriterLock.TryAcquireWriteLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedReaderWriterLock.AcquireWriteLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual RedisDistributedReaderWriterLockHandle TryAcquireReadLock(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual RedisDistributedReaderWriterLockHandle AcquireReadLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<RedisDistributedReaderWriterLockHandle> TryAcquireReadLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<RedisDistributedReaderWriterLockHandle> AcquireReadLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual RedisDistributedReaderWriterLockHandle TryAcquireWriteLock(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual RedisDistributedReaderWriterLockHandle AcquireWriteLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<RedisDistributedReaderWriterLockHandle> TryAcquireWriteLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<RedisDistributedReaderWriterLockHandle> AcquireWriteLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private ValueTask`1<RedisDistributedReaderWriterLockHandle> <TryAcquireWriteLockAsync>g__TryAcquireWriteLockAsync|15_0(RedisValue lockId, <>c__DisplayClass15_0& );
}
public class Medallion.Threading.Redis.RedisDistributedReaderWriterLockHandle : object {
    [NullableAttribute("2")]
private RedLockHandle _innerHandle;
    public CancellationToken HandleLostToken { get; }
    [NullableContextAttribute("1")]
internal RedisDistributedReaderWriterLockHandle(RedLockHandle innerHandle);
    public sealed virtual CancellationToken get_HandleLostToken();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.Redis.RedisDistributedSemaphore : object {
    private IReadOnlyList`1<IDatabase> _databases;
    private RedisDistributedLockOptions _options;
    [CompilerGeneratedAttribute]
private RedisKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxCount>k__BackingField;
    internal RedisKey Key { get; }
    public string Name { get; }
    public int MaxCount { get; }
    public RedisDistributedSemaphore(RedisKey key, int maxCount, IDatabase database, Action`1<RedisDistributedSynchronizationOptionsBuilder> options);
    [CompilerGeneratedAttribute]
internal RedisKey get_Key();
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxCount();
    private sealed virtual override ValueTask`1<RedisDistributedSemaphoreHandle> Medallion.Threading.Internal.IInternalDistributedSemaphore<Medallion.Threading.Redis.RedisDistributedSemaphoreHandle>.InternalTryAcquireAsync(TimeoutValue timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedisDistributedSemaphore/<TryAcquireAsync>d__12")]
private ValueTask`1<RedisDistributedSemaphoreHandle> TryAcquireAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedSemaphore.TryAcquire(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedSemaphore.Acquire(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedSemaphore.TryAcquireAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedSemaphore.AcquireAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual RedisDistributedSemaphoreHandle TryAcquire(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual RedisDistributedSemaphoreHandle Acquire(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<RedisDistributedSemaphoreHandle> TryAcquireAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<RedisDistributedSemaphoreHandle> AcquireAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
}
public class Medallion.Threading.Redis.RedisDistributedSemaphoreHandle : object {
    [NullableAttribute("2")]
private RedLockHandle _innerHandle;
    public CancellationToken HandleLostToken { get; }
    [NullableContextAttribute("1")]
internal RedisDistributedSemaphoreHandle(RedLockHandle innerHandle);
    public sealed virtual CancellationToken get_HandleLostToken();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.Redis.RedisDistributedSynchronizationOptionsBuilder : object {
    internal static TimeoutValue DefaultExpiry;
    internal static TimeoutValue MinimumExpiry;
    private Nullable`1<TimeoutValue> _expiry;
    private Nullable`1<TimeoutValue> _extensionCadence;
    private Nullable`1<TimeoutValue> _minValidityTime;
    private Nullable`1<TimeoutValue> _minBusyWaitSleepTime;
    private Nullable`1<TimeoutValue> _maxBusyWaitSleepTime;
    private static RedisDistributedSynchronizationOptionsBuilder();
    public RedisDistributedSynchronizationOptionsBuilder Expiry(TimeSpan expiry);
    public RedisDistributedSynchronizationOptionsBuilder ExtensionCadence(TimeSpan extensionCadence);
    public RedisDistributedSynchronizationOptionsBuilder MinValidityTime(TimeSpan minValidityTime);
    public RedisDistributedSynchronizationOptionsBuilder BusyWaitSleepTime(TimeSpan min, TimeSpan max);
    internal static RedisDistributedLockOptions GetOptions(Action`1<RedisDistributedSynchronizationOptionsBuilder> optionsBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.Redis.RedisDistributedSynchronizationProvider : object {
    private IReadOnlyList`1<IDatabase> _databases;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<RedisDistributedSynchronizationOptionsBuilder> _options;
    public RedisDistributedSynchronizationProvider(IDatabase database, Action`1<RedisDistributedSynchronizationOptionsBuilder> options);
    public RedisDistributedSynchronizationProvider(IEnumerable`1<IDatabase> databases, Action`1<RedisDistributedSynchronizationOptionsBuilder> options);
    public RedisDistributedLock CreateLock(RedisKey key);
    private sealed virtual override IDistributedLock Medallion.Threading.IDistributedLockProvider.CreateLock(string name);
    public RedisDistributedReaderWriterLock CreateReaderWriterLock(string name);
    private sealed virtual override IDistributedReaderWriterLock Medallion.Threading.IDistributedReaderWriterLockProvider.CreateReaderWriterLock(string name);
    public RedisDistributedSemaphore CreateSemaphore(RedisKey key, int maxCount);
    private sealed virtual override IDistributedSemaphore Medallion.Threading.IDistributedSemaphoreProvider.CreateSemaphore(string name, int maxCount);
}
[NullableContextAttribute("1")]
internal interface Medallion.Threading.Redis.RedLock.IRedLockAcquirableSynchronizationPrimitive {
    public TimeoutValue AcquireTimeout { get; }
    public abstract virtual TimeoutValue get_AcquireTimeout();
    public abstract virtual Task`1<bool> TryAcquireAsync(IDatabaseAsync database);
    public abstract virtual bool TryAcquire(IDatabase database);
    public abstract virtual bool IsConnected(IDatabase database);
}
internal interface Medallion.Threading.Redis.RedLock.IRedLockExtensibleSynchronizationPrimitive {
    public TimeoutValue AcquireTimeout { get; }
    public abstract virtual TimeoutValue get_AcquireTimeout();
    [NullableContextAttribute("1")]
public abstract virtual Task`1<bool> TryExtendAsync(IDatabaseAsync database);
}
[NullableContextAttribute("1")]
internal interface Medallion.Threading.Redis.RedLock.IRedLockReleasableSynchronizationPrimitive {
    public abstract virtual Task ReleaseAsync(IDatabaseAsync database, bool fireAndForget);
    public abstract virtual void Release(IDatabase database, bool fireAndForget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Medallion.Threading.Redis.RedLock.RedLockAcquire : ValueType {
    private IRedLockAcquirableSynchronizationPrimitive _primitive;
    private IReadOnlyList`1<IDatabase> _databases;
    private CancellationToken _cancellationToken;
    public RedLockAcquire(IRedLockAcquirableSynchronizationPrimitive primitive, IReadOnlyList`1<IDatabase> databases, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedLock.RedLockAcquire/<TryAcquireAsync>d__4")]
public ValueTask`1<Dictionary`2<IDatabase, Task`1<bool>>> TryAcquireAsync();
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedLock.RedLockAcquire/<WaitForAcquireAsync>d__5")]
private Task`1<bool> WaitForAcquireAsync(IReadOnlyDictionary`2<IDatabase, Task`1<bool>> tryAcquireTasks);
    private Dictionary`2<IDatabase, Task`1<bool>> TrySingleFullySynchronousAcquire();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static Task <WaitForAcquireAsync>g__TryResolveDisconnectedDatabaseAsFaulted|5_0(RedLockAcquire this, <>c__DisplayClass5_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Medallion.Threading.Redis.RedLock.RedLockExtend : ValueType {
    private IRedLockExtensibleSynchronizationPrimitive _primitive;
    private Dictionary`2<IDatabase, Task`1<bool>> _tryAcquireOrRenewTasks;
    private CancellationToken _cancellationToken;
    public RedLockExtend(IRedLockExtensibleSynchronizationPrimitive primitive, Dictionary`2<IDatabase, Task`1<bool>> tryAcquireOrRenewTasks, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedLock.RedLockExtend/<TryExtendAsync>d__4")]
public Task`1<Nullable`1<bool>> TryExtendAsync();
}
internal class Medallion.Threading.Redis.RedLock.RedLockHandle : object {
    [NullableAttribute("1")]
private IRedLockExtensibleSynchronizationPrimitive _primitive;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IDatabase, Task`1<bool>> _tryAcquireTasks;
    private TimeoutValue _extensionCadence;
    private TimeoutValue _expiry;
    [NullableAttribute("1")]
private LeaseMonitor _monitor;
    public CancellationToken HandleLostToken { get; }
    private TimeoutValue Medallion.Threading.Internal.LeaseMonitor.ILeaseHandle.LeaseDuration { get; }
    private TimeoutValue Medallion.Threading.Internal.LeaseMonitor.ILeaseHandle.MonitoringCadence { get; }
    [NullableContextAttribute("1")]
public RedLockHandle(IRedLockExtensibleSynchronizationPrimitive primitive, Dictionary`2<IDatabase, Task`1<bool>> tryAcquireTasks, TimeoutValue extensionCadence, TimeoutValue expiry);
    public sealed virtual CancellationToken get_HandleLostToken();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedLock.RedLockHandle/<DisposeAsync>d__9")]
public sealed virtual ValueTask DisposeAsync();
    private sealed virtual override TimeoutValue Medallion.Threading.Internal.LeaseMonitor.ILeaseHandle.get_LeaseDuration();
    private sealed virtual override TimeoutValue Medallion.Threading.Internal.LeaseMonitor.ILeaseHandle.get_MonitoringCadence();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Medallion.Threading.Redis.RedLock.RedLockHandle/<Medallion-Threading-Internal-LeaseMonitor-ILeaseHandle-RenewOrValidateLeaseAsync>d__14")]
private sealed virtual override Task`1<LeaseState> Medallion.Threading.Internal.LeaseMonitor.ILeaseHandle.RenewOrValidateLeaseAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Medallion.Threading.Redis.RedLock.RedLockHelper : object {
    private static string LockIdPrefix;
    private static RedLockHelper();
    public static bool HasSufficientSuccesses(int successCount, int databaseCount);
    public static bool HasTooManyFailuresOrFaults(int failureOrFaultCount, int databaseCount);
    public static RedisValue CreateLockId();
    public static bool ReturnedFalse(Task`1<bool> task);
    public static void FireAndForgetReleaseUponCompletion(IRedLockReleasableSynchronizationPrimitive primitive, IDatabase database, Task`1<bool> acquireOrRenewTask);
    public static CommandFlags GetCommandFlags(bool fireAndForget);
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedLock.RedLockHelper/<AsBooleanTask>d__8")]
[ExtensionAttribute]
public static Task`1<bool> AsBooleanTask(Task`1<RedisResult> redisResultTask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Medallion.Threading.Redis.RedLock.RedLockRelease : ValueType {
    [CompilerGeneratedAttribute]
private IRedLockReleasableSynchronizationPrimitive <primitive>P;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<IDatabase, Task`1<bool>> <tryAcquireOrRenewTasks>P;
    public RedLockRelease(IRedLockReleasableSynchronizationPrimitive primitive, IReadOnlyDictionary`2<IDatabase, Task`1<bool>> tryAcquireOrRenewTasks);
    [AsyncStateMachineAttribute("Medallion.Threading.Redis.RedLock.RedLockRelease/<ReleaseAsync>d__3")]
public ValueTask ReleaseAsync();
}
[IsReadOnlyAttribute]
internal class Medallion.Threading.Redis.RedLock.RedLockTimeouts : ValueType {
    [CompilerGeneratedAttribute]
private TimeoutValue <Expiry>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeoutValue <MinValidityTime>k__BackingField;
    public TimeoutValue Expiry { get; }
    public TimeoutValue MinValidityTime { get; }
    public TimeoutValue AcquireTimeout { get; }
    public RedLockTimeouts(TimeoutValue expiry, TimeoutValue minValidityTime);
    [CompilerGeneratedAttribute]
public TimeoutValue get_Expiry();
    [CompilerGeneratedAttribute]
public TimeoutValue get_MinValidityTime();
    public TimeoutValue get_AcquireTimeout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Medallion.Threading.Redis.TimeoutTask : ValueType {
    private CancellationTokenSource _cleanupTokenSource;
    [NullableAttribute("2")]
private CancellationTokenSource _linkedTokenSource;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public Task Task { get; }
    public TimeoutTask(TimeoutValue timeout, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public Task get_Task();
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
