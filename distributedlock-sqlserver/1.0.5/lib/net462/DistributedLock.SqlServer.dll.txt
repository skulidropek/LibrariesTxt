[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Threading.SqlServer.SqlApplicationLock : object {
    public static int TimeoutExitCode;
    public static int AlreadyHeldExitCode;
    public static int InvalidUpgradeExitCode;
    public static SqlApplicationLock SharedLock;
    public static SqlApplicationLock UpdateLock;
    public static SqlApplicationLock ExclusiveLock;
    public static SqlApplicationLock UpgradeLock;
    private static object Cookie;
    private Mode _mode;
    private bool _isUpgrade;
    private bool Medallion.Threading.Internal.Data.IDbSynchronizationStrategy<System.Object>.IsUpgradeable { get; }
    private SqlApplicationLock(Mode mode, bool isUpgrade);
    private static SqlApplicationLock();
    private sealed virtual override bool Medallion.Threading.Internal.Data.IDbSynchronizationStrategy<System.Object>.get_IsUpgradeable();
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlApplicationLock/<Medallion-Threading-Internal-Data-IDbSynchronizationStrategy<System-Object>-TryAcquireAsync>d__13")]
private sealed virtual override ValueTask`1<object> Medallion.Threading.Internal.Data.IDbSynchronizationStrategy<System.Object>.TryAcquireAsync(DatabaseConnection connection, string resourceName, TimeoutValue timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Medallion.Threading.Internal.Data.IDbSynchronizationStrategy<System.Object>.ReleaseAsync(DatabaseConnection connection, string resourceName, object lockCookie);
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlApplicationLock/<ExecuteAcquireCommandAsync>d__15")]
private Task`1<bool> ExecuteAcquireCommandAsync(DatabaseConnection connection, string lockName, TimeoutValue timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlApplicationLock/<ExecuteReleaseCommandAsync>d__16")]
private static ValueTask ExecuteReleaseCommandAsync(DatabaseConnection connection, string lockName, bool isTry);
    private DatabaseCommand CreateAcquireCommand(DatabaseConnection connection, string lockName, TimeoutValue timeout, IDbDataParameter& returnValue);
    private static DatabaseCommand CreateReleaseCommand(DatabaseConnection connection, string lockName, bool isTry, IDbDataParameter& returnValue);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlApplicationLock/<ParseExitCodeAsync>d__19")]
public static ValueTask`1<bool> ParseExitCodeAsync(int exitCode, TimeoutValue timeout, CancellationToken cancellationToken);
    private static string GetErrorMessage(int exitCode, string type);
    private static string GetModeString(Mode mode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.SqlServer.SqlConnectionOptionsBuilder : object {
    private Nullable`1<TimeoutValue> _keepaliveCadence;
    private Nullable`1<bool> _useTransaction;
    private Nullable`1<bool> _useMultiplexing;
    public SqlConnectionOptionsBuilder KeepaliveCadence(TimeSpan keepaliveCadence);
    public SqlConnectionOptionsBuilder UseTransaction(bool useTransaction);
    public SqlConnectionOptionsBuilder UseMultiplexing(bool useMultiplexing);
    [NullableContextAttribute("0")]
internal static ValueTuple`3<TimeoutValue, bool, bool> GetOptions(Action`1<SqlConnectionOptionsBuilder> optionsBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Threading.SqlServer.SqlDatabaseConnection : DatabaseConnection {
    public bool ShouldPrepareCommands { get; }
    public SqlDatabaseConnection(IDbConnection connection, bool isExternallyOwned);
    public SqlDatabaseConnection(IDbTransaction transaction);
    public SqlDatabaseConnection(string connectionString);
    public virtual bool get_ShouldPrepareCommands();
    public virtual bool IsCommandCancellationException(Exception exception);
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlDatabaseConnection/<SleepAsync>d__6")]
public virtual Task SleepAsync(TimeSpan sleepTime, CancellationToken cancellationToken, Func`3<DatabaseCommand, CancellationToken, ValueTask`1<int>> executor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.SqlServer.SqlDistributedLock : object {
    private IDbDistributedLock _internalLock;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    internal static int MaxNameLength { get; }
    public string Name { get; }
    public SqlDistributedLock(string name, string connectionString, Action`1<SqlConnectionOptionsBuilder> options, bool exactName);
    public SqlDistributedLock(string name, IDbConnection connection, bool exactName);
    public SqlDistributedLock(string name, IDbTransaction transaction, bool exactName);
    private SqlDistributedLock(string name, bool exactName, Func`2<string, IDbDistributedLock> internalLockFactory);
    internal static int get_MaxNameLength();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    internal static string GetSafeName(string name);
    private sealed virtual override ValueTask`1<SqlDistributedLockHandle> Medallion.Threading.Internal.IInternalDistributedLock<Medallion.Threading.SqlServer.SqlDistributedLockHandle>.InternalTryAcquireAsync(TimeoutValue timeout, CancellationToken cancellationToken);
    internal static IDbDistributedLock CreateInternalLock(string name, string connectionString, Action`1<SqlConnectionOptionsBuilder> optionsBuilder);
    internal static IDbDistributedLock CreateInternalLock(string name, IDbConnection connection);
    internal static IDbDistributedLock CreateInternalLock(string name, IDbTransaction transaction);
    [NullableContextAttribute("2")]
private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedLock.TryAcquire(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedLock.Acquire(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedLock.TryAcquireAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedLock.AcquireAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual SqlDistributedLockHandle TryAcquire(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual SqlDistributedLockHandle Acquire(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedLockHandle> TryAcquireAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedLockHandle> AcquireAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
}
public class Medallion.Threading.SqlServer.SqlDistributedLockHandle : object {
    [NullableAttribute("2")]
private IDistributedSynchronizationHandle _innerHandle;
    public CancellationToken HandleLostToken { get; }
    [NullableContextAttribute("1")]
internal SqlDistributedLockHandle(IDistributedSynchronizationHandle innerHandle);
    public sealed virtual CancellationToken get_HandleLostToken();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.SqlServer.SqlDistributedReaderWriterLock : object {
    private IDbDistributedLock _internalLock;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    internal static int MaxNameLength { get; }
    public SqlDistributedReaderWriterLock(string name, string connectionString, Action`1<SqlConnectionOptionsBuilder> options, bool exactName);
    public SqlDistributedReaderWriterLock(string name, IDbConnection connection, bool exactName);
    public SqlDistributedReaderWriterLock(string name, IDbTransaction transaction, bool exactName);
    private SqlDistributedReaderWriterLock(string name, bool exactName, Func`2<string, IDbDistributedLock> internalLockFactory);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    internal static int get_MaxNameLength();
    internal static string GetSafeName(string name);
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlDistributedReaderWriterLock/<Medallion-Threading-Internal-IInternalDistributedUpgradeableReaderWriterLock<Medallion-Threading-SqlServer-SqlDistributedReaderWriterLockHandle,Medallion-Threading-SqlServer-SqlDistributedReaderWriterLockUpgradeableHandle>-InternalTryAcquireUpgradeableReadLockAsync>d__11")]
private sealed virtual override ValueTask`1<SqlDistributedReaderWriterLockUpgradeableHandle> Medallion.Threading.Internal.IInternalDistributedUpgradeableReaderWriterLock<Medallion.Threading.SqlServer.SqlDistributedReaderWriterLockHandle,Medallion.Threading.SqlServer.SqlDistributedReaderWriterLockUpgradeableHandle>.InternalTryAcquireUpgradeableReadLockAsync(TimeoutValue timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlDistributedReaderWriterLock/<Medallion-Threading-Internal-IInternalDistributedReaderWriterLock<Medallion-Threading-SqlServer-SqlDistributedReaderWriterLockHandle>-InternalTryAcquireAsync>d__12")]
private sealed virtual override ValueTask`1<SqlDistributedReaderWriterLockHandle> Medallion.Threading.Internal.IInternalDistributedReaderWriterLock<Medallion.Threading.SqlServer.SqlDistributedReaderWriterLockHandle>.InternalTryAcquireAsync(TimeoutValue timeout, CancellationToken cancellationToken, bool isWrite);
    [NullableContextAttribute("2")]
private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedReaderWriterLock.TryAcquireReadLock(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedReaderWriterLock.AcquireReadLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedReaderWriterLock.TryAcquireReadLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedReaderWriterLock.AcquireReadLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private sealed virtual override IDistributedLockUpgradeableHandle Medallion.Threading.IDistributedUpgradeableReaderWriterLock.TryAcquireUpgradeableReadLock(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IDistributedLockUpgradeableHandle Medallion.Threading.IDistributedUpgradeableReaderWriterLock.AcquireUpgradeableReadLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedLockUpgradeableHandle> Medallion.Threading.IDistributedUpgradeableReaderWriterLock.TryAcquireUpgradeableReadLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedLockUpgradeableHandle> Medallion.Threading.IDistributedUpgradeableReaderWriterLock.AcquireUpgradeableReadLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedReaderWriterLock.TryAcquireWriteLock(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedReaderWriterLock.AcquireWriteLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedReaderWriterLock.TryAcquireWriteLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedReaderWriterLock.AcquireWriteLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual SqlDistributedReaderWriterLockHandle TryAcquireReadLock(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual SqlDistributedReaderWriterLockHandle AcquireReadLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedReaderWriterLockHandle> TryAcquireReadLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedReaderWriterLockHandle> AcquireReadLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual SqlDistributedReaderWriterLockUpgradeableHandle TryAcquireUpgradeableReadLock(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual SqlDistributedReaderWriterLockUpgradeableHandle AcquireUpgradeableReadLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedReaderWriterLockUpgradeableHandle> TryAcquireUpgradeableReadLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedReaderWriterLockUpgradeableHandle> AcquireUpgradeableReadLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual SqlDistributedReaderWriterLockHandle TryAcquireWriteLock(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual SqlDistributedReaderWriterLockHandle AcquireWriteLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedReaderWriterLockHandle> TryAcquireWriteLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedReaderWriterLockHandle> AcquireWriteLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
}
public abstract class Medallion.Threading.SqlServer.SqlDistributedReaderWriterLockHandle : object {
    public CancellationToken HandleLostToken { get; }
    public abstract virtual CancellationToken get_HandleLostToken();
    public sealed virtual void Dispose();
    public abstract virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Medallion.Threading.SqlServer.SqlDistributedReaderWriterLockNonUpgradeableHandle : SqlDistributedReaderWriterLockHandle {
    private IDistributedSynchronizationHandle _innerHandle;
    public CancellationToken HandleLostToken { get; }
    internal SqlDistributedReaderWriterLockNonUpgradeableHandle(IDistributedSynchronizationHandle handle);
    public virtual CancellationToken get_HandleLostToken();
    public virtual ValueTask DisposeAsync();
}
public class Medallion.Threading.SqlServer.SqlDistributedReaderWriterLockUpgradeableHandle : SqlDistributedReaderWriterLockHandle {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private RefBox`1<ValueTuple`3<IDistributedSynchronizationHandle, IDbDistributedLock, IDistributedSynchronizationHandle>> _box;
    public CancellationToken HandleLostToken { get; }
    [NullableContextAttribute("1")]
internal SqlDistributedReaderWriterLockUpgradeableHandle(IDistributedSynchronizationHandle innerHandle, IDbDistributedLock lock);
    public virtual CancellationToken get_HandleLostToken();
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlDistributedReaderWriterLockUpgradeableHandle/<DisposeAsync>d__4")]
public virtual ValueTask DisposeAsync();
    public sealed virtual bool TryUpgradeToWriteLock(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<bool> TryUpgradeToWriteLockAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual void UpgradeToWriteLock(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask UpgradeToWriteLockAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<bool> Medallion.Threading.Internal.IInternalDistributedLockUpgradeableHandle.InternalTryUpgradeToWriteLockAsync(TimeoutValue timeout, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.SqlServer.SqlDistributedSemaphore : object {
    private IDbDistributedLock _internalLock;
    private SqlSemaphore _strategy;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public int MaxCount { get; }
    public SqlDistributedSemaphore(string name, int maxCount, string connectionString, Action`1<SqlConnectionOptionsBuilder> options);
    public SqlDistributedSemaphore(string name, int maxCount, IDbConnection connection);
    public SqlDistributedSemaphore(string name, int maxCount, IDbTransaction transaction);
    private SqlDistributedSemaphore(string name, int maxCount, Func`2<string, IDbDistributedLock> createInternalLockFromName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual int get_MaxCount();
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlDistributedSemaphore/<Medallion-Threading-Internal-IInternalDistributedSemaphore<Medallion-Threading-SqlServer-SqlDistributedSemaphoreHandle>-InternalTryAcquireAsync>d__11")]
private sealed virtual override ValueTask`1<SqlDistributedSemaphoreHandle> Medallion.Threading.Internal.IInternalDistributedSemaphore<Medallion.Threading.SqlServer.SqlDistributedSemaphoreHandle>.InternalTryAcquireAsync(TimeoutValue timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedSemaphore.TryAcquire(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IDistributedSynchronizationHandle Medallion.Threading.IDistributedSemaphore.Acquire(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedSemaphore.TryAcquireAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IDistributedSynchronizationHandle> Medallion.Threading.IDistributedSemaphore.AcquireAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual SqlDistributedSemaphoreHandle TryAcquire(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual SqlDistributedSemaphoreHandle Acquire(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedSemaphoreHandle> TryAcquireAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<SqlDistributedSemaphoreHandle> AcquireAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
}
public class Medallion.Threading.SqlServer.SqlDistributedSemaphoreHandle : object {
    [NullableAttribute("2")]
private IDistributedSynchronizationHandle _innerHandle;
    public CancellationToken HandleLostToken { get; }
    [NullableContextAttribute("1")]
internal SqlDistributedSemaphoreHandle(IDistributedSynchronizationHandle innerHandle);
    public sealed virtual CancellationToken get_HandleLostToken();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Medallion.Threading.SqlServer.SqlDistributedSynchronizationProvider : object {
    private Func`3<string, bool, SqlDistributedLock> _lockFactory;
    private Func`3<string, bool, SqlDistributedReaderWriterLock> _readerWriterLockFactory;
    private Func`3<string, int, SqlDistributedSemaphore> _semaphoreFactory;
    public SqlDistributedSynchronizationProvider(string connectionString, Action`1<SqlConnectionOptionsBuilder> options);
    public SqlDistributedSynchronizationProvider(IDbConnection connection);
    public SqlDistributedSynchronizationProvider(IDbTransaction transaction);
    public SqlDistributedLock CreateLock(string name, bool exactName);
    private sealed virtual override IDistributedLock Medallion.Threading.IDistributedLockProvider.CreateLock(string name);
    public SqlDistributedReaderWriterLock CreateReaderWriterLock(string name, bool exactName);
    private sealed virtual override IDistributedUpgradeableReaderWriterLock Medallion.Threading.IDistributedUpgradeableReaderWriterLockProvider.CreateUpgradeableReaderWriterLock(string name);
    private sealed virtual override IDistributedReaderWriterLock Medallion.Threading.IDistributedReaderWriterLockProvider.CreateReaderWriterLock(string name);
    public SqlDistributedSemaphore CreateSemaphore(string name, int maxCount);
    private sealed virtual override IDistributedSemaphore Medallion.Threading.IDistributedSemaphoreProvider.CreateSemaphore(string name, int maxCount);
}
internal static class Medallion.Threading.SqlServer.SqlMultiplexedConnectionLockPool : object {
    [NullableAttribute("1")]
public static MultiplexedConnectionLockPool Instance;
    private static SqlMultiplexedConnectionLockPool();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Threading.SqlServer.SqlSemaphore : object {
    [CompilerGeneratedAttribute]
private int <MaxCount>k__BackingField;
    private static string SemaphoreNameParameter;
    private static string MaxCountParameter;
    private static string ResultCodeParameter;
    private static string TimeoutMillisParameter;
    private static string MarkerTableNameParameter;
    private static string TicketLockNameParameter;
    private static string LockResultVariable;
    private static string LockScopeVariable;
    private static string PreambleLockNameVariable;
    private static string BusyWaitLockNameVariable;
    private static int SuccessCode;
    private static int FinishedPreambleWithoutAcquiringCode;
    private static int FailedToAcquireWithSpaceRemainingCode;
    private static int BusyWaitTimeoutCode;
    private static int AllTicketsHeldByCurrentSessionCode;
    private static Lazy`1<string> AcquireNonCancelableQuery;
    private static Lazy`1<string> AcquireCancelablePreambleQuery;
    private static Lazy`1<string> AcquireCancelableQuery;
    private static Lazy`1<string> CancellationCleanupQuery;
    private static Lazy`1<string> ReleaseQuery;
    private static string IntentMarkerTablePrefix;
    [NullableAttribute("2")]
private static object C;
    public int MaxCount { get; }
    private bool Medallion.Threading.Internal.Data.IDbSynchronizationStrategy<Medallion.Threading.SqlServer.SqlSemaphore.Cookie>.IsUpgradeable { get; }
    public SqlSemaphore(int maxCount);
    private static SqlSemaphore();
    [CompilerGeneratedAttribute]
public int get_MaxCount();
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlSemaphore/<TryAcquireAsync>d__4")]
public sealed virtual ValueTask`1<Cookie> TryAcquireAsync(DatabaseConnection connection, string resourceName, TimeoutValue timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Medallion.Threading.SqlServer.SqlSemaphore/<ReleaseAsync>d__5")]
public sealed virtual ValueTask ReleaseAsync(DatabaseConnection connection, string resourceName, Cookie lockCookie);
    private sealed virtual override bool Medallion.Threading.Internal.Data.IDbSynchronizationStrategy<Medallion.Threading.SqlServer.SqlSemaphore.Cookie>.get_IsUpgradeable();
    [NullableContextAttribute("2")]
private static ValueTask`1<bool> ProcessAcquireResultAsync(IDataParameterCollection parameters, TimeoutValue timeout, CancellationToken cancellationToken, String& markerTableName, String& ticketLockName);
    private static DatabaseCommand CreateTextCommand(DatabaseConnection connection, TimeoutValue operationTimeout);
    private void AddCommonParameters(DatabaseCommand command, string semaphoreName, Nullable`1<TimeoutValue> timeout, string markerTableName, string ticketLockName);
    public static string ToSafeName(string semaphoreName);
    private static string ReplaceInvalidCharacters(string semaphoreName);
    private static bool IsAsciiLetterOrDigit(char char);
    private static string HashName(string name);
    private static string CreateAcquirePreambleSql(Nullable`1<bool> willRetryInSeparateQueryAfterPreamble);
    private static string CreateAcquireSql(bool cancelable);
    private static string CreateCancellationCleanupSql();
    private static string CreateReleaseSql();
    private static string CreateCommonVariableDeclarationsSql(bool includePreambleLock, bool includeBusyWaitLock, bool includeTryAcquireOnceVariables);
    private static string CreateTryAcquireOnceSql(bool allowOneWait, bool cancelable);
    private static string CreateCodaSql(bool includePreambleLockRelease, bool includeBusyWaitLockRelease);
    private static string Merge(String[] parts);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
