[AttributeUsageAttribute("1")]
[ComVisibleAttribute("False")]
public class CommandLine.AssemblyLicenseAttribute : MultilineTextAttribute {
    public AssemblyLicenseAttribute(string line1);
    public AssemblyLicenseAttribute(string line1, string line2);
    public AssemblyLicenseAttribute(string line1, string line2, string line3);
    public AssemblyLicenseAttribute(string line1, string line2, string line3, string line4);
    public AssemblyLicenseAttribute(string line1, string line2, string line3, string line4, string line5);
}
[AttributeUsageAttribute("1")]
[ComVisibleAttribute("False")]
public class CommandLine.AssemblyUsageAttribute : MultilineTextAttribute {
    public AssemblyUsageAttribute(string line1);
    public AssemblyUsageAttribute(string line1, string line2);
    public AssemblyUsageAttribute(string line1, string line2, string line3);
    public AssemblyUsageAttribute(string line1, string line2, string line3, string line4);
    public AssemblyUsageAttribute(string line1, string line2, string line3, string line4, string line5);
}
public class CommandLine.BadOptionInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<char> <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    public Nullable`1<char> ShortName { get; internal set; }
    public string LongName { get; internal set; }
    internal BadOptionInfo(Nullable`1<char> shortName, string longName);
    [CompilerGeneratedAttribute]
public Nullable`1<char> get_ShortName();
    [CompilerGeneratedAttribute]
internal void set_ShortName(Nullable`1<char> value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
internal void set_LongName(string value);
}
public abstract class CommandLine.BaseOptionAttribute : Attribute {
    internal static string DefaultMutuallyExclusiveSet;
    private Nullable`1<char> _shortName;
    private object _defaultValue;
    private string _metaValue;
    private bool _hasMetaValue;
    private string _mutuallyExclusiveSet;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoLongName>k__BackingField;
    public Nullable`1<char> ShortName { get; internal set; }
    public string LongName { get; internal set; }
    public string MutuallyExclusiveSet { get; public set; }
    public bool Required { get; public set; }
    public object DefaultValue { get; public set; }
    public string MetaValue { get; public set; }
    public string HelpText { get; public set; }
    internal string UniqueName { get; private set; }
    internal bool HasShortName { get; }
    internal bool HasLongName { get; }
    internal bool HasDefaultValue { get; private set; }
    internal bool HasMetaValue { get; }
    internal bool AutoLongName { get; internal set; }
    protected BaseOptionAttribute(char shortName, string longName);
    protected BaseOptionAttribute(Nullable`1<char> shortName, string longName);
    public virtual Nullable`1<char> get_ShortName();
    internal virtual void set_ShortName(Nullable`1<char> value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
internal void set_LongName(string value);
    public string get_MutuallyExclusiveSet();
    public void set_MutuallyExclusiveSet(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_Required();
    [CompilerGeneratedAttribute]
public virtual void set_Required(bool value);
    public virtual object get_DefaultValue();
    public virtual void set_DefaultValue(object value);
    public virtual string get_MetaValue();
    public virtual void set_MetaValue(string value);
    [CompilerGeneratedAttribute]
public string get_HelpText();
    [CompilerGeneratedAttribute]
public void set_HelpText(string value);
    [CompilerGeneratedAttribute]
internal string get_UniqueName();
    [CompilerGeneratedAttribute]
private void set_UniqueName(string value);
    internal bool get_HasShortName();
    internal bool get_HasLongName();
    [CompilerGeneratedAttribute]
internal bool get_HasDefaultValue();
    [CompilerGeneratedAttribute]
private void set_HasDefaultValue(bool value);
    internal bool get_HasMetaValue();
    [CompilerGeneratedAttribute]
internal bool get_AutoLongName();
    [CompilerGeneratedAttribute]
internal void set_AutoLongName(bool value);
}
[ExtensionAttribute]
internal static class CommandLine.Extensions.CharExtensions : object {
    [ExtensionAttribute]
public static bool IsWhiteSpace(char c);
    [ExtensionAttribute]
public static bool IsLineTerminator(char c);
}
[ExtensionAttribute]
internal static class CommandLine.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string Spaces(int value);
    [ExtensionAttribute]
public static bool IsNumeric(string value);
    [ExtensionAttribute]
public static string FormatInvariant(string value, Object[] arguments);
    [ExtensionAttribute]
public static string FormatLocal(string value, Object[] arguments);
}
[AttributeUsageAttribute("64")]
public class CommandLine.HelpOptionAttribute : BaseOptionAttribute {
    private static string DefaultHelpText;
    public bool Required { get; public set; }
    public HelpOptionAttribute(char shortName);
    public HelpOptionAttribute(string longName);
    public HelpOptionAttribute(char shortName, string longName);
    public virtual bool get_Required();
    public virtual void set_Required(bool value);
    internal static void InvokeMethod(object target, Pair`2<MethodInfo, HelpOptionAttribute> pair, String& text);
    private static bool CheckMethodSignature(MethodInfo value);
}
[AttributeUsageAttribute("64")]
public class CommandLine.HelpVerbOptionAttribute : BaseOptionAttribute {
    private static string DefaultHelpText;
    public Nullable`1<char> ShortName { get; internal set; }
    public bool Required { get; public set; }
    public HelpVerbOptionAttribute(string longName);
    public virtual Nullable`1<char> get_ShortName();
    internal virtual void set_ShortName(Nullable`1<char> value);
    public virtual bool get_Required();
    public virtual void set_Required(bool value);
    internal static void InvokeMethod(object target, Pair`2<MethodInfo, HelpVerbOptionAttribute> helpInfo, string verb, String& text);
    private static bool CheckMethodSignature(MethodInfo value);
}
internal static class CommandLine.Infrastructure.Assumes : object {
    public static void NotNull(T value, string paramName);
    public static void NotNull(T value, string paramName, string message);
    public static void NotNullOrEmpty(string value, string paramName);
    public static void NotZeroLength(T[] array, string paramName);
}
internal class CommandLine.Infrastructure.Pair`2 : object {
    private TLeft _left;
    private TRight _right;
    public TLeft Left { get; }
    public TRight Right { get; }
    public Pair`2(TLeft left, TRight right);
    public TLeft get_Left();
    public TRight get_Right();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal static class CommandLine.Infrastructure.PopsicleSetter : object {
    public static void Set(bool consumed, T& field, T value);
}
[DefaultMemberAttribute("Item")]
internal class CommandLine.Infrastructure.ReflectionCache : object {
    private static ReflectionCache Singleton;
    private IDictionary`2<Pair`2<Type, object>, WeakReference> _cache;
    public static ReflectionCache Instance { get; }
    public object Item { get; public set; }
    private static ReflectionCache();
    public static ReflectionCache get_Instance();
    public object get_Item(Pair`2<Type, object> key);
    public void set_Item(Pair`2<Type, object> key, object value);
}
internal static class CommandLine.Infrastructure.ReflectionHelper : object {
    [CompilerGeneratedAttribute]
private static Assembly <AssemblyFromWhichToPullInformation>k__BackingField;
    internal static Assembly AssemblyFromWhichToPullInformation { get; internal set; }
    private static ReflectionHelper();
    [CompilerGeneratedAttribute]
internal static Assembly get_AssemblyFromWhichToPullInformation();
    [CompilerGeneratedAttribute]
internal static void set_AssemblyFromWhichToPullInformation(Assembly value);
    public static IList`1<Pair`2<PropertyInfo, TAttribute>> RetrievePropertyList(object target);
    public static Pair`2<MethodInfo, TAttribute> RetrieveMethod(object target);
    public static TAttribute RetrieveMethodAttributeOnly(object target);
    public static IList`1<TAttribute> RetrievePropertyAttributeList(object target);
    public static TAttribute GetAttribute();
    public static Pair`2<PropertyInfo, TAttribute> RetrieveOptionProperty(object target, string uniqueName);
    public static bool IsNullableType(Type type);
}
internal static class CommandLine.Infrastructure.SR : object {
    public static string ArgumentNullException_ArgsStringArrayCannotBeNull;
    public static string ArgumentNullException_OptionsInstanceCannotBeNull;
    public static string ArgumentNullException_ParserSettingsInstanceCannotBeNull;
    public static string ArgumentNullException_AttributeCannotBeNull;
    public static string ArgumentNullException_PropertyCannotBeNull;
    public static string CommandLineParserException_CannotCreateInstanceForVerbCommand;
    public static string ArgumentException_NoWhiteSpaceOrLineTerminatorInShortName;
    public static string ArgumentNullException_LongNameCannotBeNullWhenShortNameIsUndefined;
    public static string MemberAccessException_BadSignatureForHelpVerbOptionAttribute;
    public static string InvalidOperationException_DoNotUseShortNameForVerbCommands;
    public static string InvalidOperationException_DoNotSetRequiredPropertyForVerbCommands;
    public static string CommandLineParserException_IncompatibleTypes;
    public static string InvalidOperationException_CopyrightInfoRequiresAssemblyCopyrightAttributeOrAssemblyCompanyAttribute;
    public static string ArgumentNullException_OnVerbDelegateCannotBeNull;
    public static string ArgumentNullException_ParserSettingsDelegateCannotBeNull;
    public static string InvalidOperationException_ParserSettingsInstanceCanBeUsedOnce;
    public static string InvalidOperationException_ParserStateInstanceCannotBeNotNull;
    public static string InvalidOperationException_ParserStateInstanceBadApplied;
}
public interface CommandLine.IParserState {
    public IList`1<ParsingError> Errors { get; }
    public abstract virtual IList`1<ParsingError> get_Errors();
}
public abstract class CommandLine.MultilineTextAttribute : Attribute {
    private string _line1;
    private string _line2;
    private string _line3;
    private string _line4;
    private string _line5;
    [CompilerGeneratedAttribute]
private static Predicate`1<string> CS$<>9__CachedAnonymousMethodDelegate4;
    public string Value { get; }
    public string Line1 { get; }
    public string Line2 { get; }
    public string Line3 { get; }
    public string Line4 { get; }
    public string Line5 { get; }
    protected MultilineTextAttribute(string line1);
    protected MultilineTextAttribute(string line1, string line2);
    protected MultilineTextAttribute(string line1, string line2, string line3);
    protected MultilineTextAttribute(string line1, string line2, string line3, string line4);
    protected MultilineTextAttribute(string line1, string line2, string line3, string line4, string line5);
    public virtual string get_Value();
    public string get_Line1();
    public string get_Line2();
    public string get_Line3();
    public string get_Line4();
    public string get_Line5();
    internal void AddToHelpText(Action`1<string> action);
    internal void AddToHelpText(HelpText helpText, bool before);
    protected virtual int GetLastLineWithText(String[] value);
    [CompilerGeneratedAttribute]
private static bool <GetLastLineWithText>b__3(string str);
}
[AttributeUsageAttribute("128")]
public class CommandLine.OptionArrayAttribute : BaseOptionAttribute {
    public OptionArrayAttribute(char shortName);
    public OptionArrayAttribute(string longName);
    public OptionArrayAttribute(char shortName, string longName);
}
[AttributeUsageAttribute("128")]
public class CommandLine.OptionAttribute : BaseOptionAttribute {
    public OptionAttribute(char shortName);
    public OptionAttribute(string longName);
    public OptionAttribute(char shortName, string longName);
    internal OptionInfo CreateOptionInfo();
}
[AttributeUsageAttribute("128")]
public class CommandLine.OptionListAttribute : BaseOptionAttribute {
    private static char DefaultSeparator;
    [CompilerGeneratedAttribute]
private char <Separator>k__BackingField;
    public char Separator { get; public set; }
    public OptionListAttribute(char shortName);
    public OptionListAttribute(string longName);
    public OptionListAttribute(char shortName, string longName);
    public OptionListAttribute(char shortName, string longName, char separator);
    [CompilerGeneratedAttribute]
public char get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(char value);
}
public class CommandLine.Parser : object {
    public static int DefaultExitCodeFail;
    private static Parser DefaultParser;
    private ParserSettings _settings;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private static Action`1<ParserSettings> CS$<>9__CachedAnonymousMethodDelegate2;
    public static Parser Default { get; }
    public ParserSettings Settings { get; }
    [ObsoleteAttribute("Use constructor that accepts Action<ParserSettings>.")]
public Parser(ParserSettings settings);
    public Parser(Action`1<ParserSettings> configuration);
    private Parser(bool singleton);
    private static Parser();
    protected virtual void Finalize();
    public static Parser get_Default();
    public ParserSettings get_Settings();
    public bool ParseArguments(String[] args, object options);
    public bool ParseArguments(String[] args, object options, Action`2<string, object> onVerbCommand);
    public bool ParseArgumentsStrict(String[] args, object options, Action onFail);
    public bool ParseArgumentsStrict(String[] args, object options, Action`2<string, object> onVerbCommand, Action onFail);
    public sealed virtual void Dispose();
    internal static object InternalGetVerbOptionsInstanceByName(string verb, object target, Boolean& found);
    private static void SetParserStateIfNeeded(object options, IEnumerable`1<ParsingError> errors);
    private static StringComparison GetStringComparison(ParserSettings settings);
    private bool DoParseArguments(String[] args, object options);
    private bool DoParseArgumentsCore(String[] args, object options);
    private bool DoParseArgumentsVerbs(String[] args, object options, Object& verbInstance);
    private bool ParseHelp(String[] args, HelpOptionAttribute helpOption);
    private bool TryParseHelpVerb(String[] args, object options, Pair`2<MethodInfo, HelpVerbOptionAttribute> helpInfo, OptionMap optionMap);
    private void DisplayHelpVerbText(object options, Pair`2<MethodInfo, HelpVerbOptionAttribute> helpInfo, string verb);
    private void InvokeAutoBuildIfNeeded(object options);
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1(ParserSettings with);
}
public class CommandLine.ParserException : Exception {
    public ParserException(string message);
    public ParserException(string message, Exception innerException);
    protected ParserException(SerializationInfo info, StreamingContext context);
}
public class CommandLine.ParserSettings : object {
    private static bool CaseSensitiveDefault;
    private bool _disposed;
    private bool _caseSensitive;
    private bool _mutuallyExclusive;
    private bool _ignoreUnknownArguments;
    private TextWriter _helpWriter;
    private CultureInfo _parsingCulture;
    [CompilerGeneratedAttribute]
private bool <Consumed>k__BackingField;
    public bool CaseSensitive { get; public set; }
    public bool MutuallyExclusive { get; public set; }
    public TextWriter HelpWriter { get; public set; }
    public bool IgnoreUnknownArguments { get; public set; }
    public CultureInfo ParsingCulture { get; public set; }
    internal bool Consumed { get; internal set; }
    public ParserSettings(bool caseSensitive);
    public ParserSettings(TextWriter helpWriter);
    public ParserSettings(bool caseSensitive, TextWriter helpWriter);
    public ParserSettings(bool caseSensitive, bool mutuallyExclusive);
    public ParserSettings(bool caseSensitive, bool mutuallyExclusive, TextWriter helpWriter);
    public ParserSettings(bool caseSensitive, bool mutuallyExclusive, bool ignoreUnknownArguments, TextWriter helpWriter);
    protected virtual void Finalize();
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public bool get_MutuallyExclusive();
    public void set_MutuallyExclusive(bool value);
    public TextWriter get_HelpWriter();
    public void set_HelpWriter(TextWriter value);
    public bool get_IgnoreUnknownArguments();
    public void set_IgnoreUnknownArguments(bool value);
    public CultureInfo get_ParsingCulture();
    public void set_ParsingCulture(CultureInfo value);
    [CompilerGeneratedAttribute]
internal bool get_Consumed();
    [CompilerGeneratedAttribute]
internal void set_Consumed(bool value);
    public void Dispose();
    private void Dispose(bool disposing);
}
public class CommandLine.ParserState : object {
    [CompilerGeneratedAttribute]
private IList`1<ParsingError> <Errors>k__BackingField;
    public IList`1<ParsingError> Errors { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ParsingError> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(IList`1<ParsingError> value);
}
[AttributeUsageAttribute("128")]
public class CommandLine.ParserStateAttribute : Attribute {
}
internal abstract class CommandLine.Parsing.ArgumentParser : object {
    [CompilerGeneratedAttribute]
private List`1<ParsingError> <PostParsingState>k__BackingField;
    public List`1<ParsingError> PostParsingState { get; private set; }
    [CompilerGeneratedAttribute]
public List`1<ParsingError> get_PostParsingState();
    [CompilerGeneratedAttribute]
private void set_PostParsingState(List`1<ParsingError> value);
    public static bool CompareShort(string argument, Nullable`1<char> option, bool caseSensitive);
    public static bool CompareLong(string argument, string option, bool caseSensitive);
    public static ArgumentParser Create(string argument, bool ignoreUnknownArguments);
    public static bool IsInputValue(string argument);
    public abstract virtual PresentParserState Parse(IArgumentEnumerator argumentEnumerator, OptionMap map, object options);
    internal static IList`1<string> InternalWrapperOfGetNextInputValues(IArgumentEnumerator ae);
    protected static IList`1<string> GetNextInputValues(IArgumentEnumerator ae);
    protected static PresentParserState BooleanToParserState(bool value);
    protected static PresentParserState BooleanToParserState(bool value, bool addMoveNextIfTrue);
    protected static void EnsureOptionAttributeIsArrayCompatible(OptionInfo option);
    protected static void EnsureOptionArrayAttributeIsNotBoundToScalar(OptionInfo option);
    protected void DefineOptionThatViolatesFormat(OptionInfo option);
    private static string ToOption(string value);
    private static string ToOption(Nullable`1<char> value);
    private static bool IsDash(string value);
    private static bool IsShortOption(string value);
    private static bool IsLongOption(string value);
}
internal interface CommandLine.Parsing.IArgumentEnumerator {
    public string Current { get; }
    public string Next { get; }
    public bool IsLast { get; }
    public abstract virtual string get_Current();
    public abstract virtual string get_Next();
    public abstract virtual bool get_IsLast();
    public abstract virtual bool MoveNext();
    public abstract virtual bool MovePrevious();
    public abstract virtual string GetRemainingFromNext();
}
internal class CommandLine.Parsing.LongOptionParser : ArgumentParser {
    private bool _ignoreUnkwnownArguments;
    public LongOptionParser(bool ignoreUnkwnownArguments);
    public virtual PresentParserState Parse(IArgumentEnumerator argumentEnumerator, OptionMap map, object options);
}
internal class CommandLine.Parsing.OneCharStringEnumerator : object {
    private string _data;
    private string _currentElement;
    private int _index;
    public string Current { get; }
    public string Next { get; }
    public bool IsLast { get; }
    public OneCharStringEnumerator(string value);
    public sealed virtual string get_Current();
    public sealed virtual string get_Next();
    public sealed virtual bool get_IsLast();
    public sealed virtual bool MoveNext();
    public sealed virtual string GetRemainingFromNext();
    public sealed virtual bool MovePrevious();
}
internal class CommandLine.Parsing.OptionGroupParser : ArgumentParser {
    private bool _ignoreUnkwnownArguments;
    public OptionGroupParser(bool ignoreUnkwnownArguments);
    public virtual PresentParserState Parse(IArgumentEnumerator argumentEnumerator, OptionMap map, object options);
}
[DebuggerDisplayAttribute("ShortName = {ShortName}, LongName = {LongName}")]
internal class CommandLine.Parsing.OptionInfo : object {
    private CultureInfo _parsingCulture;
    private BaseOptionAttribute _attribute;
    private PropertyInfo _property;
    private PropertyWriter _propertyWriter;
    private bool _required;
    private Nullable`1<char> _shortName;
    private string _longName;
    private string _mutuallyExclusiveSet;
    private object _defaultValue;
    private bool _hasDefaultValue;
    [CompilerGeneratedAttribute]
private bool <IsDefined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReceivedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParameterLessCtor>k__BackingField;
    public Nullable`1<char> ShortName { get; }
    public string LongName { get; }
    public string MutuallyExclusiveSet { get; }
    public bool Required { get; }
    public bool IsBoolean { get; }
    public bool IsArray { get; }
    public bool IsAttributeArrayCompatible { get; }
    public bool IsDefined { get; public set; }
    public bool ReceivedValue { get; private set; }
    public bool HasBothNames { get; }
    public bool HasParameterLessCtor { get; public set; }
    public OptionInfo(BaseOptionAttribute attribute, PropertyInfo property, CultureInfo parsingCulture);
    internal OptionInfo(Nullable`1<char> shortName, string longName);
    public Nullable`1<char> get_ShortName();
    public string get_LongName();
    public string get_MutuallyExclusiveSet();
    public bool get_Required();
    public bool get_IsBoolean();
    public bool get_IsArray();
    public bool get_IsAttributeArrayCompatible();
    [CompilerGeneratedAttribute]
public bool get_IsDefined();
    [CompilerGeneratedAttribute]
public void set_IsDefined(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReceivedValue();
    [CompilerGeneratedAttribute]
private void set_ReceivedValue(bool value);
    public bool get_HasBothNames();
    [CompilerGeneratedAttribute]
public bool get_HasParameterLessCtor();
    [CompilerGeneratedAttribute]
public void set_HasParameterLessCtor(bool value);
    public object GetValue(object target);
    public object CreateInstance(object target);
    public bool SetValue(string value, object options);
    public bool SetValue(IList`1<string> values, object options);
    public bool SetValue(bool value, object options);
    public void SetDefault(object options);
    private bool SetValueList(string value, object options);
}
[DefaultMemberAttribute("Item")]
internal class CommandLine.Parsing.OptionMap : object {
    private ParserSettings _settings;
    private Dictionary`2<string, string> _names;
    private Dictionary`2<string, OptionInfo> _map;
    private Dictionary`2<string, MutuallyExclusiveInfo> _mutuallyExclusiveSetMap;
    [CompilerGeneratedAttribute]
private object <RawOptions>k__BackingField;
    private object RawOptions { get; internal set; }
    public OptionInfo Item { get; public set; }
    internal OptionMap(int capacity, ParserSettings settings);
    [CompilerGeneratedAttribute]
private object get_RawOptions();
    [CompilerGeneratedAttribute]
internal void set_RawOptions(object value);
    public OptionInfo get_Item(string key);
    public void set_Item(string key, OptionInfo value);
    public static OptionMap Create(object target, ParserSettings settings);
    public static OptionMap Create(object target, IList`1<Pair`2<PropertyInfo, VerbOptionAttribute>> verbs, ParserSettings settings);
    public bool EnforceRules();
    public void SetDefaults();
    private static void SetParserStateIfNeeded(object options, OptionInfo option, Nullable`1<bool> required, Nullable`1<bool> mutualExclusiveness);
    private bool EnforceRequiredRule();
    private bool EnforceMutuallyExclusiveMap();
    private void BuildMutuallyExclusiveMap(OptionInfo option);
}
[FlagsAttribute]
internal enum CommandLine.Parsing.PresentParserState : Enum {
    public ushort value__;
    public static PresentParserState Undefined;
    public static PresentParserState Success;
    public static PresentParserState Failure;
    public static PresentParserState MoveOnNextElement;
}
internal class CommandLine.Parsing.PropertyWriter : object {
    private CultureInfo _parsingCulture;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    public PropertyInfo Property { get; private set; }
    public PropertyWriter(PropertyInfo property, CultureInfo parsingCulture);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(PropertyInfo value);
    public bool WriteScalar(string value, object target);
    public bool WriteNullable(string value, object target);
}
internal class CommandLine.Parsing.StringArrayEnumerator : object {
    private int _endIndex;
    private String[] _data;
    private int _index;
    public string Current { get; }
    public string Next { get; }
    public bool IsLast { get; }
    public StringArrayEnumerator(String[] value);
    public sealed virtual string get_Current();
    public sealed virtual string get_Next();
    public sealed virtual bool get_IsLast();
    public sealed virtual bool MoveNext();
    public sealed virtual string GetRemainingFromNext();
    public sealed virtual bool MovePrevious();
}
[ExtensionAttribute]
internal static class CommandLine.Parsing.TargetCapabilitiesExtensions : object {
    [ExtensionAttribute]
public static bool HasVerbs(object target);
    [ExtensionAttribute]
public static bool HasHelp(object target);
    [ExtensionAttribute]
public static bool HasVerbHelp(object target);
    [ExtensionAttribute]
public static bool CanReceiveParserState(object target);
}
internal class CommandLine.Parsing.ValueMapper : object {
    private CultureInfo _parsingCulture;
    private object _target;
    private IList`1<string> _valueList;
    private ValueListAttribute _valueListAttribute;
    private IList`1<Pair`2<PropertyInfo, ValueOptionAttribute>> _valueOptionAttributeList;
    private int _valueOptionIndex;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<PropertyInfo, ValueOptionAttribute>, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<PropertyInfo, ValueOptionAttribute>, int> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool CanReceiveValues { get; }
    private bool IsValueListDefined { get; }
    private bool IsValueOptionDefined { get; }
    public ValueMapper(object target, CultureInfo parsingCulture);
    public bool get_CanReceiveValues();
    private bool get_IsValueListDefined();
    private bool get_IsValueOptionDefined();
    public bool MapValueItem(string item);
    private bool AddValueItem(string item);
    private void InitializeValueList();
    private void InitializeValueOption();
    [CompilerGeneratedAttribute]
private static bool <InitializeValueOption>b__0(Pair`2<PropertyInfo, ValueOptionAttribute> x);
    [CompilerGeneratedAttribute]
private static int <InitializeValueOption>b__1(Pair`2<PropertyInfo, ValueOptionAttribute> x);
}
public class CommandLine.ParsingError : object {
    [CompilerGeneratedAttribute]
private BadOptionInfo <BadOption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ViolatesRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ViolatesFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ViolatesMutualExclusiveness>k__BackingField;
    public BadOptionInfo BadOption { get; private set; }
    public bool ViolatesRequired { get; public set; }
    public bool ViolatesFormat { get; public set; }
    public bool ViolatesMutualExclusiveness { get; public set; }
    internal ParsingError(Nullable`1<char> shortName, string longName, bool format);
    [CompilerGeneratedAttribute]
public BadOptionInfo get_BadOption();
    [CompilerGeneratedAttribute]
private void set_BadOption(BadOptionInfo value);
    [CompilerGeneratedAttribute]
public bool get_ViolatesRequired();
    [CompilerGeneratedAttribute]
public void set_ViolatesRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_ViolatesFormat();
    [CompilerGeneratedAttribute]
public void set_ViolatesFormat(bool value);
    [CompilerGeneratedAttribute]
public bool get_ViolatesMutualExclusiveness();
    [CompilerGeneratedAttribute]
public void set_ViolatesMutualExclusiveness(bool value);
}
public abstract class CommandLine.Text.BaseSentenceBuilder : object {
    public string OptionWord { get; }
    public string AndWord { get; }
    public string RequiredOptionMissingText { get; }
    public string ViolatesFormatText { get; }
    public string ViolatesMutualExclusivenessText { get; }
    public string ErrorsHeadingText { get; }
    public abstract virtual string get_OptionWord();
    public abstract virtual string get_AndWord();
    public abstract virtual string get_RequiredOptionMissingText();
    public abstract virtual string get_ViolatesFormatText();
    public abstract virtual string get_ViolatesMutualExclusivenessText();
    public abstract virtual string get_ErrorsHeadingText();
    public static BaseSentenceBuilder CreateBuiltIn();
}
public class CommandLine.Text.CopyrightInfo : object {
    private static string DefaultCopyrightWord;
    private static string SymbolLower;
    private static string SymbolUpper;
    private AssemblyCopyrightAttribute _attribute;
    private bool _isSymbolUpper;
    private Int32[] _copyrightYears;
    private string _author;
    private int _builderSize;
    public static CopyrightInfo Default { get; }
    protected string CopyrightWord { get; }
    public CopyrightInfo(string author, int year);
    public CopyrightInfo(string author, Int32[] years);
    public CopyrightInfo(bool isSymbolUpper, string author, Int32[] copyrightYears);
    private CopyrightInfo(AssemblyCopyrightAttribute attribute);
    public static CopyrightInfo get_Default();
    protected virtual string get_CopyrightWord();
    public static string op_Implicit(CopyrightInfo info);
    public virtual string ToString();
    protected virtual string FormatYears(Int32[] years);
}
public class CommandLine.Text.EnglishSentenceBuilder : BaseSentenceBuilder {
    public string OptionWord { get; }
    public string AndWord { get; }
    public string RequiredOptionMissingText { get; }
    public string ViolatesFormatText { get; }
    public string ViolatesMutualExclusivenessText { get; }
    public string ErrorsHeadingText { get; }
    public virtual string get_OptionWord();
    public virtual string get_AndWord();
    public virtual string get_RequiredOptionMissingText();
    public virtual string get_ViolatesFormatText();
    public virtual string get_ViolatesMutualExclusivenessText();
    public virtual string get_ErrorsHeadingText();
}
public class CommandLine.Text.FormatOptionHelpTextEventArgs : EventArgs {
    private BaseOptionAttribute _option;
    public BaseOptionAttribute Option { get; }
    public FormatOptionHelpTextEventArgs(BaseOptionAttribute option);
    public BaseOptionAttribute get_Option();
}
public class CommandLine.Text.HeadingInfo : object {
    private string _programName;
    private string _version;
    public static HeadingInfo Default { get; }
    public HeadingInfo(string programName);
    public HeadingInfo(string programName, string version);
    public static HeadingInfo get_Default();
    public static string op_Implicit(HeadingInfo info);
    public virtual string ToString();
    public void WriteMessage(string message, TextWriter writer);
    public void WriteMessage(string message);
    public void WriteError(string message);
}
public class CommandLine.Text.HelpText : object {
    private static int BuilderCapacity;
    private static int DefaultMaximumLength;
    private static string DefaultRequiredWord;
    private StringBuilder _preOptionsHelp;
    private StringBuilder _postOptionsHelp;
    private BaseSentenceBuilder _sentenceBuilder;
    private Nullable`1<int> _maximumDisplayWidth;
    private string _heading;
    private string _copyright;
    private bool _additionalNewLineAfterOption;
    private StringBuilder _optionsHelp;
    private bool _addDashesToOption;
    private EventHandler`1<FormatOptionHelpTextEventArgs> FormatOptionHelpText;
    public string Heading { get; public set; }
    public string Copyright { get; public set; }
    public int MaximumDisplayWidth { get; public set; }
    public bool AddDashesToOption { get; public set; }
    public bool AdditionalNewLineAfterOption { get; public set; }
    public BaseSentenceBuilder SentenceBuilder { get; }
    public HelpText(BaseSentenceBuilder sentenceBuilder);
    public HelpText(string heading);
    public HelpText(BaseSentenceBuilder sentenceBuilder, string heading);
    public HelpText(string heading, string copyright);
    public HelpText(BaseSentenceBuilder sentenceBuilder, string heading, string copyright);
    public HelpText(string heading, string copyright, object options);
    public HelpText(BaseSentenceBuilder sentenceBuilder, string heading, string copyright, object options);
    public void add_FormatOptionHelpText(EventHandler`1<FormatOptionHelpTextEventArgs> value);
    public void remove_FormatOptionHelpText(EventHandler`1<FormatOptionHelpTextEventArgs> value);
    public string get_Heading();
    public void set_Heading(string value);
    public string get_Copyright();
    public void set_Copyright(string value);
    public int get_MaximumDisplayWidth();
    public void set_MaximumDisplayWidth(int value);
    public bool get_AddDashesToOption();
    public void set_AddDashesToOption(bool value);
    public bool get_AdditionalNewLineAfterOption();
    public void set_AdditionalNewLineAfterOption(bool value);
    public BaseSentenceBuilder get_SentenceBuilder();
    public static HelpText AutoBuild(object options);
    public static HelpText AutoBuild(object options, Action`1<HelpText> onError, bool verbsIndex);
    public static HelpText AutoBuild(object options, string verb);
    public static void DefaultParsingErrorsHandler(object options, HelpText current);
    public static string op_Implicit(HelpText info);
    public void AddPreOptionsLine(string value);
    public void AddPostOptionsLine(string value);
    public void AddOptions(object options);
    public void AddOptions(object options, string requiredWord);
    public void AddOptions(object options, string requiredWord, int maximumLength);
    public string RenderParsingErrorsText(object options, int indent);
    public virtual string ToString();
    protected virtual void OnFormatOptionHelpText(FormatOptionHelpTextEventArgs e);
    private static int GetLength(string value);
    private static int GetLength(StringBuilder value);
    private static void AddLine(StringBuilder builder, string value, int maximumLength);
    private void DoAddOptions(object options, string requiredWord, int maximumLength, bool fireEvent);
    private void AddPreOptionsLine(string value, int maximumLength);
    private void AddOption(string requiredWord, int maxLength, BaseOptionAttribute option, int widthOfHelpText, bool fireEvent);
    private void AddLine(StringBuilder builder, string value);
    private int GetMaxLength(IEnumerable`1<BaseOptionAttribute> optionList);
}
[AttributeUsageAttribute("128")]
public class CommandLine.ValueListAttribute : Attribute {
    private Type _concreteType;
    [CompilerGeneratedAttribute]
private int <MaximumElements>k__BackingField;
    public int MaximumElements { get; public set; }
    public Type ConcreteType { get; }
    public ValueListAttribute(Type concreteType);
    [CompilerGeneratedAttribute]
public int get_MaximumElements();
    [CompilerGeneratedAttribute]
public void set_MaximumElements(int value);
    public Type get_ConcreteType();
    internal static IList`1<string> GetReference(object target);
    internal static ValueListAttribute GetAttribute(object target);
    private static PropertyInfo GetProperty(object target, Type& concreteType);
}
[AttributeUsageAttribute("128")]
public class CommandLine.ValueOptionAttribute : Attribute {
    private int _index;
    public int Index { get; }
    public ValueOptionAttribute(int index);
    public int get_Index();
}
[AttributeUsageAttribute("128")]
public class CommandLine.VerbOptionAttribute : BaseOptionAttribute {
    public Nullable`1<char> ShortName { get; internal set; }
    public bool Required { get; public set; }
    public VerbOptionAttribute(string longName);
    public virtual Nullable`1<char> get_ShortName();
    internal virtual void set_ShortName(Nullable`1<char> value);
    public virtual bool get_Required();
    public virtual void set_Required(bool value);
}
