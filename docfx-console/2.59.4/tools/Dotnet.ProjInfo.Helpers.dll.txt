[GuidAttribute("8661674F-2148-4F71-A92A-49875511C528")]
[ComVisibleAttribute("True")]
public interface Microsoft.Build.Framework.ITaskItem {
    public string ItemSpec { get; public set; }
    public int MetadataCount { get; }
    public ICollection MetadataNames { get; }
    public abstract virtual IDictionary CloneCustomMetadata();
    public abstract virtual void CopyMetadataTo(ITaskItem destinationItem);
    public abstract virtual string GetMetadata(string metadataName);
    public abstract virtual void RemoveMetadata(string metadataName);
    public abstract virtual void SetMetadata(string metadataName, string metadataValue);
    public abstract virtual string get_ItemSpec();
    public abstract virtual void set_ItemSpec(string value);
    public abstract virtual int get_MetadataCount();
    public abstract virtual ICollection get_MetadataNames();
}
[GuidAttribute("ac6d5a59-f877-461b-88e3-b2f06fce0cb9")]
[ComVisibleAttribute("True")]
public interface Microsoft.Build.Framework.ITaskItem2 {
    public string EvaluatedIncludeEscaped { get; public set; }
    public abstract virtual string get_EvaluatedIncludeEscaped();
    public abstract virtual void set_EvaluatedIncludeEscaped(string value);
    public abstract virtual string GetMetadataValueEscaped(string metadataName);
    public abstract virtual void SetMetadataValueLiteral(string metadataName, string metadataValue);
    public abstract virtual IDictionary CloneCustomMetadataEscaped();
}
public class Microsoft.Build.Utilities.CommandLineBuilder : object {
    private StringBuilder commandLine;
    private static Char[] chars;
    protected StringBuilder CommandLine { get; }
    private static CommandLineBuilder();
    public void AppendFileNameIfNotNull(string fileName);
    public void AppendFileNameIfNotNull(ITaskItem fileItem);
    public void AppendFileNamesIfNotNull(String[] fileNames, string delimiter);
    public void AppendFileNamesIfNotNull(ITaskItem[] fileItems, string delimiter);
    protected void AppendFileNameWithQuoting(string fileName);
    protected void AppendSpaceIfNotEmpty();
    public void AppendSwitch(string switchName);
    public void AppendSwitchIfNotNull(string switchName, string parameter);
    public void AppendSwitchIfNotNull(string switchName, ITaskItem parameter);
    public void AppendSwitchIfNotNull(string switchName, String[] parameters, string delimiter);
    public void AppendSwitchIfNotNull(string switchName, ITaskItem[] parameters, string delimiter);
    public void AppendSwitchUnquotedIfNotNull(string switchName, string parameter);
    public void AppendSwitchUnquotedIfNotNull(string switchName, ITaskItem parameter);
    public void AppendSwitchUnquotedIfNotNull(string switchName, String[] parameters, string delimiter);
    public void AppendSwitchUnquotedIfNotNull(string switchName, ITaskItem[] parameters, string delimiter);
    public void AppendTextUnquoted(string textToAppend);
    protected void AppendTextWithQuoting(string textToAppend);
    protected virtual bool IsQuotingRequired(string parameter);
    protected virtual void VerifyThrowNoEmbeddedDoubleQuotes(string switchName, string parameter);
    public virtual string ToString();
    protected StringBuilder get_CommandLine();
}
public class Microsoft.Build.Utilities.TaskItem : MarshalByRefObject {
    private IDictionary escapedMetadata;
    private string escapedItemSpec;
    public string ItemSpec { get; public set; }
    private string Microsoft.Build.Framework.ITaskItem2.EvaluatedIncludeEscaped { get; private set; }
    public int MetadataCount { get; }
    public ICollection MetadataNames { get; }
    public TaskItem(ITaskItem sourceItem);
    public TaskItem(string itemSpec);
    public TaskItem(string itemSpec, IDictionary itemMetadata);
    public sealed virtual IDictionary CloneCustomMetadata();
    private IDictionary CloneCustomMetadataEscaped();
    private sealed virtual override IDictionary Microsoft.Build.Framework.ITaskItem2.CloneCustomMetadataEscaped();
    public sealed virtual void CopyMetadataTo(ITaskItem destinationItem);
    public static string op_Explicit(TaskItem taskItemToCast);
    public sealed virtual string GetMetadata(string metadataName);
    private string GetMetadataValue(string metadataName);
    private sealed virtual override string Microsoft.Build.Framework.ITaskItem2.GetMetadataValueEscaped(string metadataName);
    public virtual object InitializeLifetimeService();
    public sealed virtual void RemoveMetadata(string metadataName);
    public sealed virtual void SetMetadata(string metadataName, string metadataValue);
    private sealed virtual override void Microsoft.Build.Framework.ITaskItem2.SetMetadataValueLiteral(string metadataName, string metadataValue);
    public virtual string ToString();
    public sealed virtual string get_ItemSpec();
    public sealed virtual void set_ItemSpec(string value);
    private sealed virtual override string Microsoft.Build.Framework.ITaskItem2.get_EvaluatedIncludeEscaped();
    private sealed virtual override void Microsoft.Build.Framework.ITaskItem2.set_EvaluatedIncludeEscaped(string value);
    public sealed virtual int get_MetadataCount();
    public sealed virtual ICollection get_MetadataNames();
}
internal static class Mono.XBuild.Utilities.MSBuildUtils : object {
    public static bool RunningOnMac;
    public static bool RunningOnWindows;
    private static Hashtable charsToEscape;
    private static MSBuildUtils();
    public static string Escape(string unescapedExpression);
    internal static string Unescape(string escapedExpression);
    internal static string UnescapeFromXml(string text);
    private static int uname(IntPtr buf);
    private static bool IsRunningOnMac();
    internal static string FromMSBuildPath(string relPath);
    internal static bool FromMSBuildPath(string basePath, string relPath, String& resultPath);
}
internal static class Mono.XBuild.Utilities.ReservedNameUtils : object {
    private static String[] reservedMetadataNames;
    private static Hashtable reservedMetadataHash;
    private static Char[] separators;
    public static ICollection ReservedMetadataNames { get; }
    public static int ReservedMetadataNameCount { get; }
    private static ReservedNameUtils();
    public static ICollection get_ReservedMetadataNames();
    public static int get_ReservedMetadataNameCount();
    public static bool IsReservedMetadataName(string metadataName);
    public static string GetReservedMetadata(string itemSpec, string metadataName, IDictionary metadata);
    private static string WithTrailingSlash(string path);
    private static string AbsoluteToRelativePath(string baseDirectoryPath, string absPath);
    private static string RelativeToAbsolutePath(string baseDirectoryPath, string relPath);
}
