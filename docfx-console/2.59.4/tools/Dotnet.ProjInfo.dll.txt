[CompilationMappingAttribute("7")]
public static class Dotnet.ProjInfo.FakeMsbuildTasks : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpList`1<string> getResponseFileFromTask(FSharpList`1<Tuple`2<string, string>> props, a fsc);
    internal static FSharpFunc`2<XElement, FSharpOption`1<string>> attr@115(string name);
    internal static FSharpFunc`2<XElement, IEnumerable`1<XElement>> els@116(XDocument doc, string name);
    internal static FSharpFunc`2<XElement, FSharpOption`1<XElement>> el@117(XDocument doc, string name);
    public static FSharpList`1<Tuple`2<string, string>> getFscTaskProperties();
}
[CompilationMappingAttribute("7")]
public static class Dotnet.ProjInfo.Inspect : object {
    internal static FSharpChoice`2<a, b> Ok(a x);
    internal static FSharpChoice`2<b, a> Error(a x);
    internal static FSharpChoice`2<a, b> |Ok|Error|(FSharpChoice`2<a, b> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpChoice`2<a, GetProjectInfoErrors`1<a>> msbuild(MSBuildExePath msbuildExe, FSharpFunc`2<string, FSharpFunc`2<FSharpList`1<string>, Tuple`2<int, a>>> run, string project, FSharpList`1<MSbuildCli> args);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpChoice`2<a, GetProjectInfoErrors`1<a>> dotnetMsbuild(FSharpFunc`2<string, FSharpFunc`2<FSharpList`1<string>, Tuple`2<int, a>>> run, string project, FSharpList`1<MSbuildCli> args);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpChoice`2<string, a> writeTargetFile(FSharpFunc`2<string, Unit> log, IEnumerable`1<string> templates, string targetFileDestPath);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpChoice`2<string, a> install_target_file(FSharpFunc`2<string, Unit> log, IEnumerable`1<string> templates, string projPath);
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@107-2(GetResult this, GetResult obj, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@107-3(IComparer comp, GetResult this, GetResult objTemp, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static int GetHashCode$cont@107-1(IEqualityComparer comp, GetResult this, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static bool Equals$cont@107(GetResult this, GetResult that, IEqualityComparer comp, Unit unitVar);
    public static string getNewTempFilePath(string suffix);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpChoice`2<a, GetProjectInfoErrors`1<b>> bindSkipped(FSharpFunc`2<string, FSharpChoice`2<a, GetProjectInfoErrors`1<b>>> f, string outFile);
    public static FSharpChoice`2<GetResult, a> parseFscArgsOut(string outFile);
    public static Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<a>>>> getFscArgs();
    public static FSharpChoice`2<GetResult, a> parseP2PRefsOut(string outFile);
    public static Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<a>>>> getP2PRefs();
    internal static FSharpFunc`2<string, FSharpOption`1<Tuple`2<string, string>>> firstAndRest@194(char delim);
    [CompilerGeneratedAttribute]
internal static FSharpChoice`2<Tuple`2<string, string>, string> f@1-1(string s);
    public static FSharpChoice`2<FSharpList`1<Tuple`2<string, string>>, GetProjectInfoErrors`1<a>> parsePropertiesOut(string outFile);
    internal static string templateF@217(FSharpList`1<string> props, bool isCrossgen);
    public static Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<a>>>> getProperties(FSharpList`1<string> props);
    [CompilerGeneratedAttribute]
internal static Tuple`2<string, string> f@1-2(String[] s);
    internal static Tuple`2[] f@1-3(int _arg1, Tuple`3[] items);
    [CompilerGeneratedAttribute]
internal static ResolvedP2PRefsInfo f@1-4(String[] allLines, Tuple`2[] lines);
    public static FSharpChoice`2<GetResult, a> parseResolvedP2PRefOut(string outFile);
    public static Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<a>>>> getResolvedP2PRefs();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpChoice`2<FSharpList`1<d>, c> getProjectInfos(FSharpFunc`2<string, Unit> log, FSharpFunc`2<string, FSharpFunc`2<FSharpList`1<a>, FSharpChoice`2<b, c>>> msbuildExec, FSharpList`1<FSharpFunc`2<Unit, Tuple`3<string, FSharpList`1<a>, FSharpFunc`2<Unit, d>>>> getters, FSharpList`1<a> additionalArgs, string projPath);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpChoice`2<d, c> getProjectInfo(FSharpFunc`2<string, Unit> log, FSharpFunc`2<string, FSharpFunc`2<FSharpList`1<a>, FSharpChoice`2<b, c>>> msbuildExec, FSharpFunc`2<Unit, Tuple`3<string, FSharpList`1<a>, FSharpFunc`2<Unit, FSharpChoice`2<d, c>>>> getArgs, FSharpList`1<a> additionalArgs, string projPath);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<a>>>> getFscArgsOldSdk(FSharpFunc`2<FSharpList`1<Tuple`2<string, string>>, FSharpChoice`2<FSharpList`1<string>, GetProjectInfoErrors`1<a>>> propsToFscArgs, Unit unitVar1);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpChoice`2<FSharpList`1<c>, b> getProjectInfosOldSdk(FSharpFunc`2<string, Unit> log, FSharpFunc`2<string, FSharpFunc`2<FSharpList`1<MSbuildCli>, FSharpChoice`2<a, b>>> msbuildExec, FSharpList`1<FSharpFunc`2<Unit, Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, c>>>> getters, FSharpList`1<MSbuildCli> additionalArgs, string projPath);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpChoice`2<d, c> getProjectInfoOldSdk(FSharpFunc`2<string, Unit> log, FSharpFunc`2<a, FSharpFunc`2<FSharpList`1<MSbuildCli>, FSharpChoice`2<b, c>>> msbuildExec, FSharpFunc`2<Unit, Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<d, c>>>> getArgs, FSharpList`1<MSbuildCli> additionalArgs, a projPath);
}
[CompilationMappingAttribute("7")]
public static class Dotnet.ProjInfo.NETFrameworkInfoFromMSBuild : object {
    public static string createEnvInfoProj();
    public static Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<a>>>> getReferencePaths(FSharpList`1<string> props);
    internal static GetResult find@72(string frameworkPathOverride);
    public static Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<a>>>> installedNETFrameworks();
}
[CompilationMappingAttribute("7")]
public static class Dotnet.ProjInfo.Resources : object {
    public static string getResourceFileAsString(string resourceName);
}
[CompilationMappingAttribute("7")]
public static class Internal.Utilities.FSBuild : object {
}
[CompilationMappingAttribute("7")]
public static class Internal.Utilities.FSharpEnvironment : object {
    public static FSharpOption`1<string> BinFolderOfDefaultFSharpCompiler(FSharpOption`1<string> _arg1);
}
[CompilationMappingAttribute("5")]
public class Microsoft.Build.Exceptions.BuildAbortedException : Exception {
    protected BuildAbortedException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public bool Equals(Exception obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
}
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute("1")]
public class Microsoft.Build.Framework.MessageImportance : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static MessageImportance _unique_Normal;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static MessageImportance Normal { get; }
    private static MessageImportance();
    [CompilationMappingAttribute("8", "0")]
public static MessageImportance get_Normal();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(MessageImportance obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(MessageImportance obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute("3")]
public class Microsoft.Build.Framework.OutputAttribute : Attribute {
}
[CompilationMappingAttribute("3")]
public class Microsoft.Build.Framework.TaskLoggingHelper : object {
    public void LogMessageFromText(string _message, MessageImportance _importance);
    public void LogError(string _message, String[] _arg1);
}
[AbstractClassAttribute]
[CompilationMappingAttribute("3")]
public abstract class Microsoft.Build.Framework.ToolTask : object {
    internal bool YieldDuringToolExecution@;
    internal string ToolExe@;
    public string ToolName { get; }
    public bool YieldDuringToolExecution { get; public set; }
    public Encoding StandardErrorEncoding { get; }
    public Encoding StandardOutputEncoding { get; }
    public object HostObject { get; }
    public string ToolExe { get; public set; }
    public TaskLoggingHelper Log { get; }
    public abstract virtual string GenerateCommandLineCommands();
    public abstract virtual string GenerateResponseFileCommands();
    public abstract virtual string get_ToolName();
    public abstract virtual string GenerateFullPathToTool();
    public bool get_YieldDuringToolExecution();
    public void set_YieldDuringToolExecution(bool v);
    public virtual Encoding get_StandardErrorEncoding();
    public virtual Encoding get_StandardOutputEncoding();
    public virtual int ExecuteTool(string _pathToTool, string _responseFileCommands, string _commandLineCommands);
    public virtual object get_HostObject();
    public string get_ToolExe();
    public void set_ToolExe(string v);
    public TaskLoggingHelper get_Log();
}
