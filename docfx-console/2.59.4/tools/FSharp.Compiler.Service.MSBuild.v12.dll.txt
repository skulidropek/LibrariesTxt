[CompilationMappingAttribute("7")]
internal static class Microsoft.FSharp.Compiler.MSBuildReferenceResolver : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string Net10;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string Net11;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string Net20;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string Net30;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string Net35;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string Net40;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string Net45;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string Net451;
    [CompilationMappingAttribute("9")]
internal static string DotNetFrameworkReferenceAssembliesRootDirectory { get; }
    [CompilationMappingAttribute("9")]
internal static string matchValue@28 { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpSet`1<string> SupportedNetFrameworkVersions { get; }
    [CompilationMappingAttribute("9")]
internal static Resolver Resolver { get; }
    private static MSBuildReferenceResolver();
    internal static string get_DotNetFrameworkReferenceAssembliesRootDirectory();
    internal static string get_matchValue@28();
    internal static FSharpList`1<string> ReplaceVariablesForLegacyFxOnWindows(FSharpList`1<string> dirs);
    internal static FSharpSet`1<string> get_SupportedNetFrameworkVersions();
    internal static FSharpList`1<string> GetPathToDotNetFrameworkImlpementationAssemblies(string v);
    internal static FSharpList`1<string> GetPathToDotNetFrameworkReferenceAssemblies(string version);
    internal static string HighestInstalledNetFrameworkVersion();
    internal static String[] DeriveTargetFrameworkDirectories(string targetFrameworkVersion, FSharpFunc`2<string, Unit> logMessage);
    internal static ResolvedFrom DecodeResolvedFrom(string resolvedFrom);
    internal static string lineIfExists@184(string text);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string TooltipForResolvedFrom(ResolvedFrom resolvedFrom, string fusionName, string redist, string originalReference, string resolvedPath);
    internal static void protect@250(FSharpRef`1<bool> backgroundException, FSharpFunc`2<Unit, Unit> f);
    [CompilerGeneratedAttribute]
internal static ResolvedFile[] ResolveCore$cont@248(string targetProcessorArchitecture, string targetFrameworkVersion, FSharpList`1<string> targetFrameworkDirectories, ResolutionEnvironment resolutionEnvironment, Tuple`2[] references, FSharpFunc`2<string, Unit> logMessage, FSharpFunc`2<bool, FSharpFunc`2<string, FSharpFunc`2<string, Unit>>> logDiagnostic, string implicitIncludeDir, string fsharpCoreDir, FSharpList`1<string> explicitIncludeDirs, bool allowRawFileName, Unit unitVar);
    internal static ResolvedFile[] ResolveCore(ResolutionEnvironment resolutionEnvironment, Tuple`2[] references, string targetFrameworkVersion, FSharpList`1<string> targetFrameworkDirectories, string targetProcessorArchitecture, string fsharpCoreDir, FSharpList`1<string> explicitIncludeDirs, string implicitIncludeDir, bool allowRawFileName, FSharpFunc`2<string, Unit> logMessage, FSharpFunc`2<bool, FSharpFunc`2<string, FSharpFunc`2<string, Unit>>> logDiagnostic);
    internal static Resolver get_Resolver();
}
