[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Abbr {Label} => {Text}")]
public class Markdig.Extensions.Abbreviations.Abbreviation : LeafBlock {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    public StringSlice Text;
    public SourceSpan LabelSpan;
    public string Label { get; public set; }
    [NullableContextAttribute("1")]
public Abbreviation(BlockParser parser);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
}
public class Markdig.Extensions.Abbreviations.AbbreviationExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Markdig.Extensions.Abbreviations.AbbreviationHelper : object {
    private static object DocumentKey;
    private static AbbreviationHelper();
    [ExtensionAttribute]
public static bool HasAbbreviations(MarkdownDocument document);
    [ExtensionAttribute]
public static void AddAbbreviation(MarkdownDocument document, string label, Abbreviation abbr);
    [ExtensionAttribute]
public static Dictionary`2<string, Abbreviation> GetAbbreviations(MarkdownDocument document);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Abbreviation}")]
public class Markdig.Extensions.Abbreviations.AbbreviationInline : LeafInline {
    [CompilerGeneratedAttribute]
private Abbreviation <Abbreviation>k__BackingField;
    public Abbreviation Abbreviation { get; public set; }
    public AbbreviationInline(Abbreviation abbreviation);
    [CompilerGeneratedAttribute]
public Abbreviation get_Abbreviation();
    [CompilerGeneratedAttribute]
public void set_Abbreviation(Abbreviation value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Abbreviations.AbbreviationParser : BlockParser {
    public virtual BlockState TryOpen(BlockProcessor processor);
    private void DocumentOnProcessInlinesBegin(InlineProcessor inlineProcessor, Inline inline);
    private static bool IsValidAbbreviationEnding(string match, StringSlice content, int matchIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Abbreviations.HtmlAbbreviationRenderer : HtmlObjectRenderer`1<AbbreviationInline> {
    protected virtual void Write(HtmlRenderer renderer, AbbreviationInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.AutoIdentifiers.AutoIdentifierExtension : object {
    private static string AutoIdentifierKey;
    private AutoIdentifierOptions options;
    private StripRendererCache rendererCache;
    public AutoIdentifierExtension(AutoIdentifierOptions options);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private void HeadingBlockParser_Closed(BlockProcessor processor, Block block);
    private void DocumentOnProcessInlinesBegin(InlineProcessor processor, Inline inline);
    private Inline CreateLinkInlineForHeading(InlineProcessor inlineState, LinkReferenceDefinition linkRef, Inline child);
    private void HeadingBlock_ProcessInlinesEnd(InlineProcessor processor, Inline inline);
}
[FlagsAttribute]
public enum Markdig.Extensions.AutoIdentifiers.AutoIdentifierOptions : Enum {
    public int value__;
    public static AutoIdentifierOptions None;
    public static AutoIdentifierOptions Default;
    public static AutoIdentifierOptions AutoLink;
    public static AutoIdentifierOptions AllowOnlyAscii;
    public static AutoIdentifierOptions GitHub;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.AutoIdentifiers.HeadingLinkReferenceDefinition : LinkReferenceDefinition {
    [CompilerGeneratedAttribute]
private HeadingBlock <Heading>k__BackingField;
    public HeadingBlock Heading { get; public set; }
    public HeadingLinkReferenceDefinition(HeadingBlock headling);
    [CompilerGeneratedAttribute]
public HeadingBlock get_Heading();
    [CompilerGeneratedAttribute]
public void set_Heading(HeadingBlock value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.AutoLinks.AutoLinkExtension : object {
    public AutoLinkOptions Options;
    [NullableContextAttribute("2")]
public AutoLinkExtension(AutoLinkOptions options);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.AutoLinks.AutoLinkOptions : object {
    [CompilerGeneratedAttribute]
private string <ValidPreviousCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenInNewWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseHttpsForWWWLinks>k__BackingField;
    public string ValidPreviousCharacters { get; public set; }
    public bool OpenInNewWindow { get; public set; }
    public bool UseHttpsForWWWLinks { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ValidPreviousCharacters();
    [CompilerGeneratedAttribute]
public void set_ValidPreviousCharacters(string value);
    [CompilerGeneratedAttribute]
public bool get_OpenInNewWindow();
    [CompilerGeneratedAttribute]
public void set_OpenInNewWindow(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseHttpsForWWWLinks();
    [CompilerGeneratedAttribute]
public void set_UseHttpsForWWWLinks(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.AutoLinks.AutoLinkParser : InlineParser {
    public AutoLinkOptions Options;
    private ListOfCharCache _listOfCharCache;
    public AutoLinkParser(AutoLinkOptions options);
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
    private bool IsAutoLinkValidInCurrentContext(InlineProcessor processor, List`1<char> pendingEmphasis);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.AutoLinks.NormalizeAutoLinkRenderer : NormalizeObjectRenderer`1<LinkInline> {
    public virtual bool Accept(RendererBase renderer, MarkdownObject obj);
    protected virtual void Write(NormalizeRenderer renderer, LinkInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Bootstrap.BootstrapExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private static void PipelineOnDocumentProcessed(MarkdownDocument document);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Citations.CitationExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private static string GetTag(EmphasisInline emphasisInline);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Extensions.CustomContainers.CustomContainer : ContainerBlock {
    [CompilerGeneratedAttribute]
private char <FencedChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpeningFencedCharCount>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfterFencedChar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <UnescapedInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfterInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <UnescapedArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfterArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLine <InfoNewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaBeforeClosingFence>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosingFencedCharCount>k__BackingField;
    public char FencedChar { get; public set; }
    public int OpeningFencedCharCount { get; public set; }
    public StringSlice TriviaAfterFencedChar { get; public set; }
    public string Info { get; public set; }
    public StringSlice UnescapedInfo { get; public set; }
    public StringSlice TriviaAfterInfo { get; public set; }
    public string Arguments { get; public set; }
    public StringSlice UnescapedArguments { get; public set; }
    public StringSlice TriviaAfterArguments { get; public set; }
    public NewLine InfoNewLine { get; public set; }
    public StringSlice TriviaBeforeClosingFence { get; public set; }
    public int ClosingFencedCharCount { get; public set; }
    [NullableContextAttribute("1")]
public CustomContainer(BlockParser parser);
    [CompilerGeneratedAttribute]
public sealed virtual char get_FencedChar();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FencedChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_OpeningFencedCharCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OpeningFencedCharCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaAfterFencedChar();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaAfterFencedChar(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Info();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Info(string value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_UnescapedInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnescapedInfo(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaAfterInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaAfterInfo(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Arguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_UnescapedArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnescapedArguments(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaAfterArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaAfterArguments(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual NewLine get_InfoNewLine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InfoNewLine(NewLine value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaBeforeClosingFence();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaBeforeClosingFence(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ClosingFencedCharCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClosingFencedCharCount(int value);
}
public class Markdig.Extensions.CustomContainers.CustomContainerExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Markdig.Extensions.CustomContainers.CustomContainerInline : EmphasisInline {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.CustomContainers.CustomContainerParser : FencedBlockParserBase`1<CustomContainer> {
    protected virtual CustomContainer CreateFencedBlock(BlockProcessor processor);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.CustomContainers.HtmlCustomContainerInlineRenderer : HtmlObjectRenderer`1<CustomContainerInline> {
    protected virtual void Write(HtmlRenderer renderer, CustomContainerInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.CustomContainers.HtmlCustomContainerRenderer : HtmlObjectRenderer`1<CustomContainer> {
    protected virtual void Write(HtmlRenderer renderer, CustomContainer obj);
}
public class Markdig.Extensions.DefinitionLists.DefinitionItem : ContainerBlock {
    [CompilerGeneratedAttribute]
private char <OpeningCharacter>k__BackingField;
    public char OpeningCharacter { get; public set; }
    [NullableContextAttribute("1")]
public DefinitionItem(BlockParser parser);
    [CompilerGeneratedAttribute]
public char get_OpeningCharacter();
    [CompilerGeneratedAttribute]
public void set_OpeningCharacter(char value);
}
public class Markdig.Extensions.DefinitionLists.DefinitionList : ContainerBlock {
    [NullableContextAttribute("1")]
public DefinitionList(BlockParser parser);
}
public class Markdig.Extensions.DefinitionLists.DefinitionListExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.DefinitionLists.DefinitionListParser : BlockParser {
    public virtual BlockState TryOpen(BlockProcessor processor);
    private static DefinitionList GetCurrentDefinitionList(ParagraphBlock paragraphBlock, ContainerBlock previousParent);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
}
public class Markdig.Extensions.DefinitionLists.DefinitionTerm : LeafBlock {
    [NullableContextAttribute("1")]
public DefinitionTerm(BlockParser parser);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.DefinitionLists.HtmlDefinitionListRenderer : HtmlObjectRenderer`1<DefinitionList> {
    protected virtual void Write(HtmlRenderer renderer, DefinitionList list);
}
public class Markdig.Extensions.Diagrams.DiagramExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Emoji.EmojiExtension : object {
    [CompilerGeneratedAttribute]
private EmojiMapping <EmojiMapping>k__BackingField;
    public EmojiMapping EmojiMapping { get; }
    public EmojiExtension(EmojiMapping emojiMapping);
    [CompilerGeneratedAttribute]
public EmojiMapping get_EmojiMapping();
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Extensions.Emoji.EmojiInline : LiteralInline {
    [CompilerGeneratedAttribute]
private string <Match>k__BackingField;
    public string Match { get; public set; }
    [NullableContextAttribute("1")]
public EmojiInline(string content);
    [CompilerGeneratedAttribute]
public string get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Emoji.EmojiMapping : object {
    public static EmojiMapping DefaultEmojisAndSmileysMapping;
    public static EmojiMapping DefaultEmojisOnlyMapping;
    [CompilerGeneratedAttribute]
private CompactPrefixTree`1<string> <PrefixTree>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <OpeningCharacters>k__BackingField;
    internal CompactPrefixTree`1<string> PrefixTree { get; }
    internal Char[] OpeningCharacters { get; }
    public EmojiMapping(bool enableSmileys);
    public EmojiMapping(IDictionary`2<string, string> shortcodeToUnicode, IDictionary`2<string, string> smileyToShortcode);
    private static EmojiMapping();
    [CompilerGeneratedAttribute]
internal CompactPrefixTree`1<string> get_PrefixTree();
    [CompilerGeneratedAttribute]
internal Char[] get_OpeningCharacters();
    public static IDictionary`2<string, string> GetDefaultEmojiShortcodeToUnicode();
    public static IDictionary`2<string, string> GetDefaultSmileyToEmojiShortcode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Emoji.EmojiParser : InlineParser {
    private EmojiMapping _emojiMapping;
    public EmojiParser(EmojiMapping emojiMapping);
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.EmphasisExtras.EmphasisExtraExtension : object {
    [CompilerGeneratedAttribute]
private EmphasisExtraOptions <Options>k__BackingField;
    public EmphasisExtraOptions Options { get; }
    public EmphasisExtraExtension(EmphasisExtraOptions options);
    [CompilerGeneratedAttribute]
public EmphasisExtraOptions get_Options();
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private string GetTag(EmphasisInline emphasisInline);
}
[FlagsAttribute]
public enum Markdig.Extensions.EmphasisExtras.EmphasisExtraOptions : Enum {
    public int value__;
    public static EmphasisExtraOptions Default;
    public static EmphasisExtraOptions Strikethrough;
    public static EmphasisExtraOptions Subscript;
    public static EmphasisExtraOptions Superscript;
    public static EmphasisExtraOptions Inserted;
    public static EmphasisExtraOptions Marked;
}
public class Markdig.Extensions.Figures.Figure : ContainerBlock {
    [CompilerGeneratedAttribute]
private int <OpeningCharacterCount>k__BackingField;
    [CompilerGeneratedAttribute]
private char <OpeningCharacter>k__BackingField;
    public int OpeningCharacterCount { get; public set; }
    public char OpeningCharacter { get; public set; }
    [NullableContextAttribute("1")]
public Figure(BlockParser parser);
    [CompilerGeneratedAttribute]
public int get_OpeningCharacterCount();
    [CompilerGeneratedAttribute]
public void set_OpeningCharacterCount(int value);
    [CompilerGeneratedAttribute]
public char get_OpeningCharacter();
    [CompilerGeneratedAttribute]
public void set_OpeningCharacter(char value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Figures.FigureBlockParser : BlockParser {
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
}
public class Markdig.Extensions.Figures.FigureCaption : LeafBlock {
    [NullableContextAttribute("1")]
public FigureCaption(BlockParser parser);
}
public class Markdig.Extensions.Figures.FigureExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Figures.HtmlFigureCaptionRenderer : HtmlObjectRenderer`1<FigureCaption> {
    protected virtual void Write(HtmlRenderer renderer, FigureCaption obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Figures.HtmlFigureRenderer : HtmlObjectRenderer`1<Figure> {
    protected virtual void Write(HtmlRenderer renderer, Figure obj);
}
public class Markdig.Extensions.Footers.FooterBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private char <OpeningCharacter>k__BackingField;
    public char OpeningCharacter { get; public set; }
    [NullableContextAttribute("1")]
public FooterBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public char get_OpeningCharacter();
    [CompilerGeneratedAttribute]
public void set_OpeningCharacter(char value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Footers.FooterBlockParser : BlockParser {
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
}
public class Markdig.Extensions.Footers.FooterExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Footers.HtmlFooterBlockRenderer : HtmlObjectRenderer`1<FooterBlock> {
    protected virtual void Write(HtmlRenderer renderer, FooterBlock footer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Footnotes.Footnote : ContainerBlock {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FootnoteLink> <Links>k__BackingField;
    public SourceSpan LabelSpan;
    [CompilerGeneratedAttribute]
private bool <IsLastLineEmpty>k__BackingField;
    [NullableAttribute("2")]
public string Label { get; public set; }
    public int Order { get; public set; }
    public List`1<FootnoteLink> Links { get; }
    internal bool IsLastLineEmpty { get; internal set; }
    public Footnote(BlockParser parser);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Label();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public List`1<FootnoteLink> get_Links();
    [CompilerGeneratedAttribute]
internal bool get_IsLastLineEmpty();
    [CompilerGeneratedAttribute]
internal void set_IsLastLineEmpty(bool value);
}
public class Markdig.Extensions.Footnotes.FootnoteExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Markdig.Extensions.Footnotes.FootnoteGroup : ContainerBlock {
    [CompilerGeneratedAttribute]
private int <CurrentOrder>k__BackingField;
    internal int CurrentOrder { get; internal set; }
    [NullableContextAttribute("1")]
public FootnoteGroup(BlockParser parser);
    [CompilerGeneratedAttribute]
internal int get_CurrentOrder();
    [CompilerGeneratedAttribute]
internal void set_CurrentOrder(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Footnotes.FootnoteLink : Inline {
    [CompilerGeneratedAttribute]
private bool <IsBackLink>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Footnote <Footnote>k__BackingField;
    public bool IsBackLink { get; public set; }
    public int Index { get; public set; }
    public Footnote Footnote { get; public set; }
    public FootnoteLink(Footnote footnote);
    [CompilerGeneratedAttribute]
public bool get_IsBackLink();
    [CompilerGeneratedAttribute]
public void set_IsBackLink(bool value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public Footnote get_Footnote();
    [CompilerGeneratedAttribute]
public void set_Footnote(Footnote value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Footnotes.FootnoteLinkReferenceDefinition : LinkReferenceDefinition {
    [CompilerGeneratedAttribute]
private Footnote <Footnote>k__BackingField;
    public Footnote Footnote { get; public set; }
    public FootnoteLinkReferenceDefinition(Footnote footnote);
    [CompilerGeneratedAttribute]
public Footnote get_Footnote();
    [CompilerGeneratedAttribute]
public void set_Footnote(Footnote value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Footnotes.FootnoteParser : BlockParser {
    private static object DocumentKey;
    private static FootnoteParser();
    public virtual BlockState TryOpen(BlockProcessor processor);
    private BlockState TryOpen(BlockProcessor processor, bool isContinue);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    private void Document_ProcessInlinesEnd(InlineProcessor state, Inline inline);
    private static Inline CreateLinkToFootnote(InlineProcessor state, LinkReferenceDefinition linkRef, Inline child);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Footnotes.HtmlFootnoteGroupRenderer : HtmlObjectRenderer`1<FootnoteGroup> {
    [CompilerGeneratedAttribute]
private string <GroupClass>k__BackingField;
    public string GroupClass { get; public set; }
    [CompilerGeneratedAttribute]
public string get_GroupClass();
    [CompilerGeneratedAttribute]
public void set_GroupClass(string value);
    protected virtual void Write(HtmlRenderer renderer, FootnoteGroup footnotes);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Footnotes.HtmlFootnoteLinkRenderer : HtmlObjectRenderer`1<FootnoteLink> {
    [CompilerGeneratedAttribute]
private string <BackLinkString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FootnoteLinkClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FootnoteBackLinkClass>k__BackingField;
    public string BackLinkString { get; public set; }
    public string FootnoteLinkClass { get; public set; }
    public string FootnoteBackLinkClass { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BackLinkString();
    [CompilerGeneratedAttribute]
public void set_BackLinkString(string value);
    [CompilerGeneratedAttribute]
public string get_FootnoteLinkClass();
    [CompilerGeneratedAttribute]
public void set_FootnoteLinkClass(string value);
    [CompilerGeneratedAttribute]
public string get_FootnoteBackLinkClass();
    [CompilerGeneratedAttribute]
public void set_FootnoteBackLinkClass(string value);
    protected virtual void Write(HtmlRenderer renderer, FootnoteLink link);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.GenericAttributes.GenericAttributesExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private bool TryProcessAttributesForHeading(BlockProcessor processor, StringSlice& line, IBlock block);
}
public class Markdig.Extensions.GenericAttributes.GenericAttributesParser : InlineParser {
    [NullableContextAttribute("1")]
public virtual bool Match(InlineProcessor processor, StringSlice& slice);
    [NullableContextAttribute("2")]
public static bool TryParse(StringSlice& slice, HtmlAttributes& attributes);
    private static bool IsStartAttributeName(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Globalization.GlobalizationExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    private void Pipeline_DocumentProcessed(MarkdownDocument document);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private static bool ShouldBeRightToLeft(MarkdownObject item);
    private static bool StartsWithRtlCharacter(StringSlice slice);
}
public class Markdig.Extensions.Hardlines.SoftlineBreakAsHardlineExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[DebuggerDisplayAttribute("{ProjectKey}-{Issue}")]
public class Markdig.Extensions.JiraLinks.JiraLink : LinkInline {
    [CompilerGeneratedAttribute]
private StringSlice <ProjectKey>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <Issue>k__BackingField;
    public StringSlice ProjectKey { get; public set; }
    public StringSlice Issue { get; public set; }
    [CompilerGeneratedAttribute]
public StringSlice get_ProjectKey();
    [CompilerGeneratedAttribute]
public void set_ProjectKey(StringSlice value);
    [CompilerGeneratedAttribute]
public StringSlice get_Issue();
    [CompilerGeneratedAttribute]
public void set_Issue(StringSlice value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.JiraLinks.JiraLinkExtension : object {
    private JiraLinkOptions _options;
    public JiraLinkExtension(JiraLinkOptions options);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.JiraLinks.JiraLinkInlineParser : InlineParser {
    private JiraLinkOptions _options;
    private string _baseUrl;
    public JiraLinkInlineParser(JiraLinkOptions options);
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.JiraLinks.JiraLinkOptions : object {
    [CompilerGeneratedAttribute]
private string <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenInNewWindow>k__BackingField;
    public string BaseUrl { get; public set; }
    public string BasePath { get; public set; }
    public bool OpenInNewWindow { get; public set; }
    public JiraLinkOptions(string baseUrl);
    [CompilerGeneratedAttribute]
public string get_BaseUrl();
    [CompilerGeneratedAttribute]
public void set_BaseUrl(string value);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public bool get_OpenInNewWindow();
    [CompilerGeneratedAttribute]
public void set_OpenInNewWindow(bool value);
    public virtual string GetUrl();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.JiraLinks.NormalizeJiraLinksRenderer : NormalizeObjectRenderer`1<JiraLink> {
    protected virtual void Write(NormalizeRenderer renderer, JiraLink obj);
}
public class Markdig.Extensions.ListExtras.ListExtraExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Markdig.Extensions.ListExtras.ListExtraItemParser : OrderedListItemParser {
    [NullableContextAttribute("1")]
public virtual bool TryParse(BlockProcessor state, char pendingBulletType, ListInfo& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Mathematics.HtmlMathBlockRenderer : HtmlObjectRenderer`1<MathBlock> {
    protected virtual void Write(HtmlRenderer renderer, MathBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Mathematics.HtmlMathInlineRenderer : HtmlObjectRenderer`1<MathInline> {
    protected virtual void Write(HtmlRenderer renderer, MathInline obj);
}
public class Markdig.Extensions.Mathematics.MathBlock : FencedCodeBlock {
    [NullableContextAttribute("1")]
public MathBlock(BlockParser parser);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Mathematics.MathBlockParser : FencedBlockParserBase`1<MathBlock> {
    [CompilerGeneratedAttribute]
private string <DefaultClass>k__BackingField;
    public string DefaultClass { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultClass();
    [CompilerGeneratedAttribute]
public void set_DefaultClass(string value);
    protected virtual MathBlock CreateFencedBlock(BlockProcessor processor);
    private static bool NoInfoParser(BlockProcessor state, StringSlice& line, IFencedBlock fenced, char openingCharacter);
}
public class Markdig.Extensions.Mathematics.MathExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Markdig.Extensions.Mathematics.MathInline : LeafInline {
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelimiterCount>k__BackingField;
    public StringSlice Content;
    public char Delimiter { get; public set; }
    public int DelimiterCount { get; public set; }
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(char value);
    [CompilerGeneratedAttribute]
public int get_DelimiterCount();
    [CompilerGeneratedAttribute]
public void set_DelimiterCount(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Mathematics.MathInlineParser : InlineParser {
    [CompilerGeneratedAttribute]
private string <DefaultClass>k__BackingField;
    public string DefaultClass { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultClass();
    [CompilerGeneratedAttribute]
public void set_DefaultClass(string value);
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.MediaLinks.HostProviderBuilder : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, IHostProvider> <KnownHosts>k__BackingField;
    private static String[] SplitAnd;
    internal static Dictionary`2<string, IHostProvider> KnownHosts { get; }
    private static HostProviderBuilder();
    public static IHostProvider Create(string hostPrefix, Func`2<Uri, string> handler, bool allowFullScreen, string iframeClass);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, IHostProvider> get_KnownHosts();
    private static String[] SplitQuery(Uri uri);
    private static string YouTube(Uri uri);
    private static string YouTubeShortened(Uri uri);
    [NullableContextAttribute("2")]
private static string BuildYouTubeIframeUrl(string videoId, string startTime);
    private static string Vimeo(Uri uri);
    private static string Odnoklassniki(Uri uri);
    private static string Yandex(Uri uri);
}
[NullableContextAttribute("2")]
public interface Markdig.Extensions.MediaLinks.IHostProvider {
    public string Class { get; }
    public bool AllowFullScreen { get; }
    public abstract virtual string get_Class();
    [NullableContextAttribute("1")]
public abstract virtual bool TryHandle(Uri mediaUri, bool isSchemaRelative, String& iframeUrl);
    public abstract virtual bool get_AllowFullScreen();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.MediaLinks.MediaLinkExtension : object {
    [CompilerGeneratedAttribute]
private MediaOptions <Options>k__BackingField;
    public MediaOptions Options { get; }
    [NullableContextAttribute("2")]
public MediaLinkExtension(MediaOptions options);
    [CompilerGeneratedAttribute]
public MediaOptions get_Options();
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private bool TryLinkInlineRenderer(HtmlRenderer renderer, LinkInline linkInline);
    private static HtmlAttributes GetHtmlAttributes(LinkInline linkInline);
    private bool TryGuessAudioVideoFile(Uri uri, bool isSchemaRelative, HtmlRenderer renderer, LinkInline linkInline);
    private bool TryRenderIframeFromKnownProviders(Uri uri, bool isSchemaRelative, HtmlRenderer renderer, LinkInline linkInline);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.MediaLinks.MediaOptions : object {
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ExtensionToMimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IHostProvider> <Hosts>k__BackingField;
    public string Width { get; public set; }
    public string Height { get; public set; }
    public string Class { get; public set; }
    public Dictionary`2<string, string> ExtensionToMimeType { get; }
    public List`1<IHostProvider> Hosts { get; }
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ExtensionToMimeType();
    [CompilerGeneratedAttribute]
public List`1<IHostProvider> get_Hosts();
}
public class Markdig.Extensions.NonAsciiNoEscape.NonAsciiNoEscapeExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use ReferralLinksExtension class instead")]
public class Markdig.Extensions.NoRefLinks.NoFollowLinksExtension : object {
    private ReferralLinksExtension _referralLinksExtension;
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.PragmaLines.PragmaLineExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private static void PipelineOnDocumentProcessed(MarkdownDocument document);
    private static void AddPragmas(Block block, Int32& index);
    private static string GetPragmaId(Block block);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.ReferralLinks.ReferralLinksExtension : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Rels>k__BackingField;
    public List`1<string> Rels { get; }
    public ReferralLinksExtension(String[] rels);
    [CompilerGeneratedAttribute]
public List`1<string> get_Rels();
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.SelfPipeline.SelfPipelineExtension : object {
    public static string DefaultTag;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DefaultExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfPipelineHintTagStart>k__BackingField;
    [NullableAttribute("2")]
public string DefaultExtensions { get; }
    public string SelfPipelineHintTagStart { get; }
    [NullableContextAttribute("2")]
public SelfPipelineExtension(string tag, string defaultExtensions);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DefaultExtensions();
    [CompilerGeneratedAttribute]
public string get_SelfPipelineHintTagStart();
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    public MarkdownPipeline CreatePipelineFromInput(string inputText);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.SmartyPants.HtmlSmartyPantRenderer : HtmlObjectRenderer`1<SmartyPant> {
    private static SmartyPantOptions DefaultOptions;
    private SmartyPantOptions options;
    [NullableContextAttribute("2")]
public HtmlSmartyPantRenderer(SmartyPantOptions options);
    private static HtmlSmartyPantRenderer();
    protected virtual void Write(HtmlRenderer renderer, SmartyPant obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("SmartyPant {ToString()}")]
public class Markdig.Extensions.SmartyPants.SmartyPant : LeafInline {
    [CompilerGeneratedAttribute]
private char <OpeningCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private SmartyPantType <Type>k__BackingField;
    public char OpeningCharacter { get; public set; }
    public SmartyPantType Type { get; public set; }
    [CompilerGeneratedAttribute]
public char get_OpeningCharacter();
    [CompilerGeneratedAttribute]
public void set_OpeningCharacter(char value);
    [CompilerGeneratedAttribute]
public SmartyPantType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SmartyPantType value);
    public virtual string ToString();
    public LiteralInline AsLiteralInline();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.SmartyPants.SmartyPantOptions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<SmartyPantType, string> <Mapping>k__BackingField;
    public Dictionary`2<SmartyPantType, string> Mapping { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<SmartyPantType, string> get_Mapping();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.SmartyPants.SmartyPantsExtension : object {
    [CompilerGeneratedAttribute]
private SmartyPantOptions <Options>k__BackingField;
    public SmartyPantOptions Options { get; }
    [NullableContextAttribute("2")]
public SmartyPantsExtension(SmartyPantOptions options);
    [CompilerGeneratedAttribute]
public SmartyPantOptions get_Options();
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Markdig.Extensions.SmartyPants.SmartyPantsInlineParser : InlineParser {
    [NullableContextAttribute("1")]
public virtual bool Match(InlineProcessor processor, StringSlice& slice);
    [NullableContextAttribute("1")]
private ListSmartyPants GetOrCreateState(InlineProcessor processor);
    [NullableContextAttribute("1")]
private void BlockOnProcessInlinesEnd(InlineProcessor processor, Inline inline);
    [NullableContextAttribute("2")]
private sealed virtual override bool Markdig.Parsers.IPostInlineProcessor.PostProcess(InlineProcessor state, Inline root, Inline lastChild, int postInlineProcessorIndex, bool isFinalProcessing);
}
public enum Markdig.Extensions.SmartyPants.SmartyPantType : Enum {
    public int value__;
    public static SmartyPantType Quote;
    public static SmartyPantType LeftQuote;
    public static SmartyPantType RightQuote;
    public static SmartyPantType DoubleQuote;
    public static SmartyPantType LeftDoubleQuote;
    public static SmartyPantType RightDoubleQuote;
    public static SmartyPantType LeftAngleQuote;
    public static SmartyPantType RightAngleQuote;
    public static SmartyPantType Ellipsis;
    public static SmartyPantType Dash2;
    public static SmartyPantType Dash3;
}
public class Markdig.Extensions.Tables.GridTableExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Tables.GridTableParser : BlockParser {
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    private BlockState HandleNewRow(BlockProcessor processor, GridTableState tableState, Table gridTable);
    private static void SetRowSpanState(List`1<ColumnSlice> columns, StringSlice line, Boolean& isHeaderRow, Boolean& hasRowSpan);
    private static bool IsRowSeperator(StringSlice slice);
    private static void TerminateCurrentRow(BlockProcessor processor, GridTableState tableState, Table gridTable, bool isLastRow);
    private BlockState HandleContents(BlockProcessor processor, GridTableState tableState, Table gridTable);
    private static void SetColumnSpanState(List`1<ColumnSlice> columns, StringSlice line);
    private static bool CanContinueRow(List`1<ColumnSlice> columns);
    private static void Undo(BlockProcessor processor, GridTableState tableState, Table gridTable);
    public virtual bool Close(BlockProcessor processor, Block block);
}
internal class Markdig.Extensions.Tables.GridTableState : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    public StringLineGroup Lines;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ColumnSlice> <ColumnSlices>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpectRow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartRowGroup>k__BackingField;
    public int Start { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ColumnSlice> ColumnSlices { get; private set; }
    public bool ExpectRow { get; }
    public int StartRowGroup { get; public set; }
    public GridTableState(int start, bool expectRow);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public List`1<ColumnSlice> get_ColumnSlices();
    [CompilerGeneratedAttribute]
private void set_ColumnSlices(List`1<ColumnSlice> value);
    [CompilerGeneratedAttribute]
public bool get_ExpectRow();
    [CompilerGeneratedAttribute]
public int get_StartRowGroup();
    [CompilerGeneratedAttribute]
public void set_StartRowGroup(int value);
    public void AddLine(StringSlice& line);
    public void AddColumn(int start, int end, Nullable`1<TableColumnAlign> align);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Tables.HtmlTableRenderer : HtmlObjectRenderer`1<Table> {
    protected virtual void Write(HtmlRenderer renderer, Table table);
}
public class Markdig.Extensions.Tables.PipeTableBlockParser : BlockParser {
    [NullableContextAttribute("1")]
public virtual BlockState TryOpen(BlockProcessor processor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Tables.PipeTableDelimiterInline : DelimiterInline {
    [CompilerGeneratedAttribute]
private int <LocalLineIndex>k__BackingField;
    public int LocalLineIndex { get; public set; }
    public PipeTableDelimiterInline(InlineParser parser);
    [CompilerGeneratedAttribute]
public int get_LocalLineIndex();
    [CompilerGeneratedAttribute]
public void set_LocalLineIndex(int value);
    public virtual string ToLiteral();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Tables.PipeTableExtension : object {
    [CompilerGeneratedAttribute]
private PipeTableOptions <Options>k__BackingField;
    public PipeTableOptions Options { get; }
    [NullableContextAttribute("2")]
public PipeTableExtension(PipeTableOptions options);
    [CompilerGeneratedAttribute]
public PipeTableOptions get_Options();
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Markdig.Extensions.Tables.PipeTableOptions : object {
    [CompilerGeneratedAttribute]
private bool <RequireHeaderSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseHeaderForColumnCount>k__BackingField;
    public bool RequireHeaderSeparator { get; public set; }
    public bool UseHeaderForColumnCount { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RequireHeaderSeparator();
    [CompilerGeneratedAttribute]
public void set_RequireHeaderSeparator(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseHeaderForColumnCount();
    [CompilerGeneratedAttribute]
public void set_UseHeaderForColumnCount(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Tables.PipeTableParser : InlineParser {
    private LineBreakInlineParser lineBreakParser;
    [CompilerGeneratedAttribute]
private PipeTableOptions <Options>k__BackingField;
    public PipeTableOptions Options { get; }
    public PipeTableParser(LineBreakInlineParser lineBreakParser, PipeTableOptions options);
    [CompilerGeneratedAttribute]
public PipeTableOptions get_Options();
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
    [NullableContextAttribute("2")]
public sealed virtual bool PostProcess(InlineProcessor state, Inline root, Inline lastChild, int postInlineProcessorIndex, bool isFinalProcessing);
    [NullableContextAttribute("2")]
private static bool ParseHeaderString(Inline inline, Nullable`1& align);
    private List`1<TableColumnDefinition> FindHeaderRow(List`1<Inline> delimiters);
    private static bool IsLine(Inline inline);
    [NullableContextAttribute("2")]
private static bool IsStartOfLineColumnDelimiter(Inline inline);
    [NullableContextAttribute("2")]
private static void TrimStart(Inline inline);
    [NullableContextAttribute("2")]
private static void TrimEnd(Inline inline);
    [NullableContextAttribute("2")]
private static bool IsNullOrSpace(Inline inline);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Tables.Table : ContainerBlock {
    [CompilerGeneratedAttribute]
private List`1<TableColumnDefinition> <ColumnDefinitions>k__BackingField;
    public List`1<TableColumnDefinition> ColumnDefinitions { get; }
    [NullableContextAttribute("2")]
public Table(BlockParser parser);
    [CompilerGeneratedAttribute]
public List`1<TableColumnDefinition> get_ColumnDefinitions();
    public bool IsValid();
    public void NormalizeUsingMaxWidth();
    public void NormalizeUsingHeaderRow();
}
public class Markdig.Extensions.Tables.TableCell : ContainerBlock {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowClose>k__BackingField;
    public int ColumnIndex { get; public set; }
    public int ColumnSpan { get; public set; }
    public int RowSpan { get; public set; }
    public bool AllowClose { get; public set; }
    [NullableContextAttribute("2")]
public TableCell(BlockParser parser);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public void set_ColumnIndex(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnSpan();
    [CompilerGeneratedAttribute]
public void set_ColumnSpan(int value);
    [CompilerGeneratedAttribute]
public int get_RowSpan();
    [CompilerGeneratedAttribute]
public void set_RowSpan(int value);
    [CompilerGeneratedAttribute]
public bool get_AllowClose();
    [CompilerGeneratedAttribute]
public void set_AllowClose(bool value);
}
public enum Markdig.Extensions.Tables.TableColumnAlign : Enum {
    public int value__;
    public static TableColumnAlign Left;
    public static TableColumnAlign Center;
    public static TableColumnAlign Right;
}
public class Markdig.Extensions.Tables.TableColumnDefinition : object {
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TableColumnAlign> <Alignment>k__BackingField;
    public float Width { get; public set; }
    public Nullable`1<TableColumnAlign> Alignment { get; public set; }
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [CompilerGeneratedAttribute]
public Nullable`1<TableColumnAlign> get_Alignment();
    [CompilerGeneratedAttribute]
public void set_Alignment(Nullable`1<TableColumnAlign> value);
}
public static class Markdig.Extensions.Tables.TableHelper : object {
    public static bool ParseColumnHeader(StringSlice& slice, char delimiterChar, Nullable`1& align);
    public static bool ParseColumnHeaderAuto(StringSlice& slice, Char& delimiterChar, Nullable`1& align);
    public static bool ParseColumnHeaderDetect(StringSlice& slice, Char& delimiterChar, Nullable`1& align);
}
public class Markdig.Extensions.Tables.TableRow : ContainerBlock {
    [CompilerGeneratedAttribute]
private bool <IsHeader>k__BackingField;
    public bool IsHeader { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsHeader();
    [CompilerGeneratedAttribute]
public void set_IsHeader(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.TaskLists.HtmlTaskListRenderer : HtmlObjectRenderer`1<TaskList> {
    protected virtual void Write(HtmlRenderer renderer, TaskList obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.TaskLists.NormalizeTaskListRenderer : NormalizeObjectRenderer`1<TaskList> {
    protected virtual void Write(NormalizeRenderer renderer, TaskList obj);
}
[DebuggerDisplayAttribute("TaskList {Checked}")]
public class Markdig.Extensions.TaskLists.TaskList : LeafInline {
    [CompilerGeneratedAttribute]
private bool <Checked>k__BackingField;
    public bool Checked { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(bool value);
}
public class Markdig.Extensions.TaskLists.TaskListExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.TaskLists.TaskListInlineParser : InlineParser {
    [CompilerGeneratedAttribute]
private string <ListClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListItemClass>k__BackingField;
    public string ListClass { get; public set; }
    public string ListItemClass { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ListClass();
    [CompilerGeneratedAttribute]
public void set_ListClass(string value);
    [CompilerGeneratedAttribute]
public string get_ListItemClass();
    [CompilerGeneratedAttribute]
public void set_ListItemClass(string value);
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.TextRenderer.ConfigureNewLineExtension : object {
    private string newLine;
    public ConfigureNewLineExtension(string newLine);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Markdig.Extensions.Yaml.YamlFrontMatterBlock : CodeBlock {
    [NullableContextAttribute("1")]
public YamlFrontMatterBlock(BlockParser parser);
}
public class Markdig.Extensions.Yaml.YamlFrontMatterExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    [NullableContextAttribute("1")]
public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Extensions.Yaml.YamlFrontMatterParser : BlockParser {
    protected virtual YamlFrontMatterBlock CreateFrontMatterBlock(BlockProcessor processor);
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Extensions.Yaml.YamlFrontMatterRenderer : HtmlObjectRenderer`1<YamlFrontMatterBlock> {
    protected virtual void Write(HtmlRenderer renderer, YamlFrontMatterBlock obj);
}
public static class Markdig.Helpers.ArrayHelper : object {
    [NullableContextAttribute("1")]
public static T[] Empty();
}
[DefaultMemberAttribute("Item")]
internal class Markdig.Helpers.BoolVector128 : ValueType {
    [FixedBufferAttribute("System.Boolean", "128")]
private <values>e__FixedBuffer values;
    public bool Item { get; }
    public bool Item { get; }
    public void Set(char c);
    [IsReadOnlyAttribute]
public bool get_Item(UInt32 c);
    [IsReadOnlyAttribute]
public bool get_Item(ulong c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Markdig.Helpers.CharacterMap`1 : object {
    private T[] asciiMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<UInt32, T> nonAsciiMap;
    private BoolVector128 isOpeningCharacter;
    [CompilerGeneratedAttribute]
private Char[] <OpeningCharacters>k__BackingField;
    public Char[] OpeningCharacters { get; }
    [NullableAttribute("2")]
public T Item { get; }
    public CharacterMap`1(IEnumerable`1<KeyValuePair`2<char, T>> maps);
    [CompilerGeneratedAttribute]
public Char[] get_OpeningCharacters();
    [NullableContextAttribute("2")]
public T get_Item(UInt32 openingChar);
    public int IndexOfOpeningCharacter(string text, int start, int end);
    private int IndexOfOpeningCharacterNonAscii(string text, int start, int end);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Markdig.Helpers.CharHelper : object {
    public static int TabSize;
    public static char ReplacementChar;
    public static string ReplacementCharString;
    private static char HighSurrogateStart;
    private static char HighSurrogateEnd;
    private static char LowSurrogateStart;
    private static char LowSurrogateEnd;
    private static Dictionary`2<char, int> romanMap;
    private static Char[] punctuationExceptions;
    private static String[] smallNumberStringCache;
    private static CharHelper();
    public static void CheckOpenCloseDelimiter(char pc, char c, bool enableWithinWord, Boolean& canOpen, Boolean& canClose);
    public static bool IsRomanLetterPartial(char c);
    public static bool IsRomanLetterLowerPartial(char c);
    public static bool IsRomanLetterUpperPartial(char c);
    [NullableContextAttribute("0")]
public static int RomanToArabic(ReadOnlySpan`1<char> text);
    public static int AddTab(int column);
    public static bool IsAcrossTab(int column);
    [ExtensionAttribute]
public static bool Contains(Char[] charList, char c);
    [ExtensionAttribute]
public static bool IsWhitespace(char c);
    [ExtensionAttribute]
public static bool IsControl(char c);
    [ExtensionAttribute]
public static bool IsEscapableSymbol(char c);
    [ExtensionAttribute]
public static bool IsWhiteSpaceOrZero(char c);
    [ExtensionAttribute]
public static void CheckUnicodeCategory(char c, Boolean& space, Boolean& punctuation);
    [ExtensionAttribute]
internal static bool IsSpaceOrPunctuation(char c);
    [ExtensionAttribute]
public static bool IsNewLineOrLineFeed(char c);
    [ExtensionAttribute]
public static bool IsZero(char c);
    [ExtensionAttribute]
public static bool IsSpace(char c);
    [ExtensionAttribute]
public static bool IsTab(char c);
    [ExtensionAttribute]
public static bool IsSpaceOrTab(char c);
    [ExtensionAttribute]
public static char EscapeInsecure(char c);
    [ExtensionAttribute]
public static bool IsAlphaUpper(char c);
    [ExtensionAttribute]
public static bool IsAlpha(char c);
    [ExtensionAttribute]
public static bool IsAlphaNumeric(char c);
    [ExtensionAttribute]
public static bool IsDigit(char c);
    [ExtensionAttribute]
public static bool IsAsciiPunctuation(char c);
    public static bool IsEmailUsernameSpecialChar(char c);
    public static bool IsHighSurrogate(char c);
    public static bool IsLowSurrogate(char c);
    private static bool IsInInclusiveRange(char c, char min, char max);
    internal static bool IsInInclusiveRange(int value, UInt32 min, UInt32 max);
    public static bool IsRightToLeft(int c);
    public static bool IsLeftToRight(int c);
    internal static string SmallNumberToString(int number);
}
public static class Markdig.Helpers.CharNormalizer : object {
    [NullableAttribute("1")]
private static Dictionary`2<char, string> CodeToAscii;
    private static CharNormalizer();
    [NullableContextAttribute("2")]
public static string ConvertToAscii(char c);
}
[DefaultMemberAttribute("Item")]
[ExcludeFromCodeCoverageAttribute]
internal class Markdig.Helpers.CompactPrefixTree`1 : object {
    private Node[] _tree;
    private static Node[] _emptyTree;
    private KeyValuePair`2[] _matches;
    private static KeyValuePair`2[] _emptyMatches;
    private int _childrenIndex;
    private Int32[] _children;
    private static Int32[] _emptyChildren;
    [CompilerGeneratedAttribute]
private int <TreeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    private Int32[] _asciiRootMap;
    private Dictionary`2<char, int> _unicodeRootMap;
    public int TreeSize { get; private set; }
    public int TreeCapacity { get; public set; }
    public int Count { get; private set; }
    public int Capacity { get; public set; }
    public int ChildrenCount { get; }
    public int ChildrenCapacity { get; public set; }
    public KeyValuePair`2<string, TValue> Item { get; }
    public TValue Item { get; public set; }
    public KeyValuePair`2<string, TValue> Item { get; }
    public IEnumerable`1<string> Keys { get; }
    public IEnumerable`1<TValue> Values { get; }
    public CompactPrefixTree`1(int matchCapacity, int treeCapacity, int childrenCapacity);
    public CompactPrefixTree`1(ICollection`1<KeyValuePair`2<string, TValue>> input);
    private static CompactPrefixTree`1();
    [CompilerGeneratedAttribute]
public int get_TreeSize();
    [CompilerGeneratedAttribute]
private void set_TreeSize(int value);
    public int get_TreeCapacity();
    public void set_TreeCapacity(int value);
    private void EnsureTreeCapacity(int min);
    private void EnsureTreeCapacityRare(int min);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public int get_Capacity();
    public void set_Capacity(int value);
    private void EnsureCapacity(int min);
    private void EnsureCapacityRare(int min);
    public int get_ChildrenCount();
    public int get_ChildrenCapacity();
    public void set_ChildrenCapacity(int value);
    private void EnsureChildrenCapacity(int min);
    private void EnsureChildrenCapacityRare(int min);
    private bool TryGetRoot(char rootChar, Int32& rootNodeIndex);
    private void SetRootChar(char rootChar);
    private void Init(int matchCapacity, int treeCapacity, int childrenCapacity);
    public sealed virtual KeyValuePair`2<string, TValue> get_Item(int index);
    public sealed virtual TValue get_Item(string key);
    public void set_Item(string key, TValue value);
    public KeyValuePair`2<string, TValue> get_Item(ReadOnlySpan`1<char> key);
    public void Add(string key, TValue value);
    public void Add(KeyValuePair`2<string, TValue> pair);
    public bool TryAdd(string key, TValue value);
    public bool TryAdd(KeyValuePair`2<string, TValue> pair);
    private bool TryInsert(KeyValuePair`2& pair, InsertionBehavior<TValue> behavior);
    private void InsertLeafNode(KeyValuePair`2& pair, char nodeChar);
    public bool TryMatchLongest(ReadOnlySpan`1<char> text, KeyValuePair`2& match);
    public bool TryMatchExact(ReadOnlySpan`1<char> text, KeyValuePair`2& match);
    public bool TryMatchShortest(ReadOnlySpan`1<char> text, KeyValuePair`2& match);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool TryGetValue(string key, TValue& value);
    [IteratorStateMachineAttribute("Markdig.Helpers.CompactPrefixTree`1/<get_Keys>d__60")]
public sealed virtual IEnumerable`1<string> get_Keys();
    [IteratorStateMachineAttribute("Markdig.Helpers.CompactPrefixTree`1/<get_Values>d__62")]
public sealed virtual IEnumerable`1<TValue> get_Values();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Markdig.Helpers.CustomArrayPool`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Bucket<T> _bucket4;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Bucket<T> _bucket8;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Bucket<T> _bucket16;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Bucket<T> _bucket32;
    public CustomArrayPool`1(int size4, int size8, int size16, int size32);
    private Bucket<T> SelectBucket(int length);
    public T[] Rent(int length);
    public void Return(T[] array);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Markdig.Helpers.DefaultObjectCache`1 : ObjectCache`1<T> {
    protected virtual T NewInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Markdig.Helpers.EntityHelper : object {
    private static CompactPrefixTree`1<string> EntityMap;
    private static EntityHelper();
    [NullableContextAttribute("0")]
public static string DecodeEntity(ReadOnlySpan`1<char> entity);
    public static string DecodeEntity(int utf32);
    public static void DecodeEntity(int utf32, StringBuilder sb);
}
internal enum Markdig.Helpers.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument key;
    public static ExceptionArgument input;
    public static ExceptionArgument value;
    public static ExceptionArgument length;
    public static ExceptionArgument offsetLength;
    public static ExceptionArgument text;
}
internal enum Markdig.Helpers.ExceptionReason : Enum {
    public int value__;
    public static ExceptionReason String_Empty;
    public static ExceptionReason SmallCapacity;
    public static ExceptionReason InvalidOffsetLength;
    public static ExceptionReason DuplicateKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Markdig.Helpers.HtmlHelper : object {
    private static Char[] SearchBackAndAmp;
    private static Char[] SearchAmp;
    private static String[] EscapeUrlsForAscii;
    private static HtmlHelper();
    [NullableContextAttribute("2")]
public static string EscapeUrlCharacter(char c);
    [NullableContextAttribute("2")]
public static bool TryParseHtmlTag(StringSlice& text, String& htmlTag);
    public static bool TryParseHtmlTag(StringSlice& text, StringBuilder builder);
    internal static bool TryParseHtmlTagOpenTag(StringSlice& text, StringBuilder builder);
    private static bool TryParseHtmlTagDeclaration(StringSlice& text, StringBuilder builder);
    private static bool TryParseHtmlTagCData(StringSlice& text, StringBuilder builder);
    internal static bool TryParseHtmlCloseTag(StringSlice& text, StringBuilder builder);
    private static bool TryParseHtmlTagHtmlComment(StringSlice& text, StringBuilder builder);
    private static bool TryParseHtmlTagProcessingInstruction(StringSlice& text, StringBuilder builder);
    public static string Unescape(string text, bool removeBackSlash);
    public static int ScanEntity(T slice, Int32& numericEntity, Int32& namedEntityStart, Int32& namedEntityLength);
}
public interface Markdig.Helpers.ICharIterator {
    public int Start { get; }
    public char CurrentChar { get; }
    public int End { get; }
    public bool IsEmpty { get; }
    public abstract virtual int get_Start();
    public abstract virtual char get_CurrentChar();
    public abstract virtual int get_End();
    public abstract virtual char NextChar();
    public abstract virtual void SkipChar();
    public abstract virtual char PeekChar();
    public abstract virtual char PeekChar(int offset);
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool TrimStart();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Helpers.LineReader : ValueType {
    private string _text;
    [CompilerGeneratedAttribute]
private int <SourcePosition>k__BackingField;
    public int SourcePosition { get; private set; }
    public LineReader(string text);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_SourcePosition();
    [CompilerGeneratedAttribute]
private void set_SourcePosition(int value);
    public StringSlice ReadLine();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Markdig.Helpers.LinkHelper : object {
    [NullableContextAttribute("2")]
public static bool TryParseAutolink(StringSlice text, String& link, Boolean& isEmail);
    public static string Urilize(string headingText, bool allowOnlyAscii, bool keepOpeningDigits);
    public static string UrilizeAsGfm(string headingText);
    private static bool IsReservedPunctuation(char c);
    [NullableContextAttribute("2")]
public static bool TryParseAutolink(StringSlice& text, String& link, Boolean& isEmail);
    [NullableContextAttribute("2")]
public static bool TryParseInlineLink(StringSlice text, String& link, String& title);
    [NullableContextAttribute("2")]
public static bool TryParseInlineLink(StringSlice text, String& link, String& title, SourceSpan& linkSpan, SourceSpan& titleSpan);
    [NullableContextAttribute("2")]
public static bool TryParseInlineLink(StringSlice& text, String& link, String& title);
    [NullableContextAttribute("2")]
public static bool TryParseInlineLink(StringSlice& text, String& link, String& title, SourceSpan& linkSpan, SourceSpan& titleSpan);
    [NullableContextAttribute("2")]
public static bool TryParseInlineLinkTrivia(StringSlice& text, String& link, SourceSpan& unescapedLink, String& title, SourceSpan& unescapedTitle, Char& titleEnclosingCharacter, SourceSpan& linkSpan, SourceSpan& titleSpan, SourceSpan& triviaBeforeLink, SourceSpan& triviaAfterLink, SourceSpan& triviaAfterTitle, Boolean& urlHasPointyBrackets);
    public static bool TryParseTitle(T text, String& title);
    public static bool TryParseTitle(T& text, String& title, Char& enclosingCharacter);
    public static bool TryParseTitleTrivia(T& text, String& title, Char& enclosingCharacter);
    public static bool TryParseUrl(T text, String& link);
    public static bool TryParseUrl(T& text, String& link, Boolean& hasPointyBrackets, bool isAutoLink);
    public static bool TryParseUrlTrivia(T& text, String& link, Boolean& hasPointyBrackets, bool isAutoLink);
    private static bool IsTrailingUrlStopCharacter(char c);
    private static bool IsEndOfUri(char c, bool isAutoLink);
    public static bool IsValidDomain(string link, int prefixLength);
    [NullableContextAttribute("2")]
public static bool TryParseLinkReferenceDefinition(T& text, String& label, String& url, String& title, SourceSpan& labelSpan, SourceSpan& urlSpan, SourceSpan& titleSpan);
    [NullableContextAttribute("2")]
public static bool TryParseLinkReferenceDefinitionTrivia(T& text, SourceSpan& triviaBeforeLabel, String& label, SourceSpan& labelWithTrivia, SourceSpan& triviaBeforeUrl, String& url, SourceSpan& unescapedUrl, Boolean& urlHasPointyBrackets, SourceSpan& triviaBeforeTitle, String& title, SourceSpan& unescapedTitle, Char& titleEnclosingCharacter, NewLine& newLine, SourceSpan& triviaAfterTitle, SourceSpan& labelSpan, SourceSpan& urlSpan, SourceSpan& titleSpan);
    public static bool TryParseLabel(T lines, String& label);
    public static bool TryParseLabel(T lines, String& label, SourceSpan& labelSpan);
    public static bool TryParseLabel(T& lines, String& label);
    public static bool TryParseLabel(T& lines, String& label, SourceSpan& labelSpan);
    public static bool TryParseLabelTrivia(T& lines, String& label, SourceSpan& labelSpan);
    public static bool TryParseLabel(T& lines, bool allowEmpty, String& label, SourceSpan& labelSpan);
    public static bool TryParseLabelTrivia(T& lines, bool allowEmpty, String& label, SourceSpan& labelSpan);
}
public enum Markdig.Helpers.NewLine : Enum {
    public byte value__;
    public static NewLine None;
    public static NewLine CarriageReturn;
    public static NewLine LineFeed;
    public static NewLine CarriageReturnLineFeed;
}
[ExtensionAttribute]
public static class Markdig.Helpers.NewLineExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string AsString(NewLine newLine);
    [ExtensionAttribute]
public static int Length(NewLine newLine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Markdig.Helpers.ObjectCache`1 : object {
    private Stack`1<T> builders;
    public void Clear();
    public T Get();
    public void Release(T instance);
    protected abstract virtual T NewInstance();
    protected abstract virtual void Reset(T instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Helpers.OrderedList`1 : List`1<T> {
    public OrderedList`1(IEnumerable`1<T> collection);
    public bool InsertBefore(T item);
    [NullableContextAttribute("0")]
public TItem Find();
    [NullableContextAttribute("0")]
public bool TryFind(TItem& item);
    [NullableContextAttribute("0")]
public TItem FindExact();
    public void AddIfNotAlready();
    public void AddIfNotAlready(TItem item);
    public bool InsertAfter(T item);
    [NullableContextAttribute("0")]
public bool Contains();
    public bool Replace(T replacement);
    public bool ReplaceOrAdd(T newItem);
    [NullableContextAttribute("0")]
public bool TryRemove();
}
public static class Markdig.Helpers.StringBuilderCache : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static StringBuilder local;
    [NullableContextAttribute("1")]
public static StringBuilder Local();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Markdig.Helpers.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder Append(StringBuilder builder, StringSlice slice);
    [ExtensionAttribute]
internal static string GetStringAndReset(StringBuilder builder);
}
public class Markdig.Helpers.StringLine : ValueType {
    public StringSlice Slice;
    public int Line;
    public int Position;
    public int Column;
    public NewLine NewLine;
    public StringLine(StringSlice& slice);
    public StringLine(StringSlice slice, int line, int column, int position, NewLine newLine);
    public StringLine(StringSlice& slice, int line, int column, int position, NewLine newLine);
    public static StringSlice op_Implicit(StringLine line);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Helpers.StringLineGroup : ValueType {
    private static CustomArrayPool`1<StringLine> _pool;
    [CompilerGeneratedAttribute]
private StringLine[] <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public StringLine[] Lines { get; private set; }
    public int Count { get; private set; }
    public StringLineGroup(int capacity);
    internal StringLineGroup(int capacity, bool willRelease);
    public StringLineGroup(string text);
    private static StringLineGroup();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public StringLine[] get_Lines();
    [CompilerGeneratedAttribute]
private void set_Lines(StringLine[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public void Clear();
    public void RemoveAt(int index);
    public void Add(StringLine& line);
    public void Add(StringSlice slice);
    [IsReadOnlyAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public StringSlice ToSlice(List`1<LineOffset> lineOffsets);
    [IsReadOnlyAttribute]
public Iterator ToCharIterator();
    public void Trim();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void IncreaseCapacity();
    internal void Release();
}
[DefaultMemberAttribute("Item")]
public class Markdig.Helpers.StringSlice : ValueType {
    public static StringSlice Empty;
    public string Text;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public NewLine NewLine;
    public int Start { get; public set; }
    public int End { get; public set; }
    public int Length { get; }
    public char CurrentChar { get; }
    public bool IsEmpty { get; }
    public char Item { get; }
    public StringSlice(string text);
    public StringSlice(string text, NewLine newLine);
    public StringSlice(string text, int start, int end);
    public StringSlice(string text, int start, int end, NewLine newLine);
    private static StringSlice();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_End();
    [CompilerGeneratedAttribute]
public void set_End(int value);
    [IsReadOnlyAttribute]
public int get_Length();
    [IsReadOnlyAttribute]
public sealed virtual char get_CurrentChar();
    [IsReadOnlyAttribute]
public sealed virtual bool get_IsEmpty();
    [IsReadOnlyAttribute]
public char get_Item(int index);
    public sealed virtual char NextChar();
    public sealed virtual void SkipChar();
    internal int CountAndSkipChar(char matchChar);
    [IsReadOnlyAttribute]
public sealed virtual char PeekChar();
    [IsReadOnlyAttribute]
public sealed virtual char PeekChar(int offset);
    [IsReadOnlyAttribute]
public char PeekCharAbsolute(int index);
    [IsReadOnlyAttribute]
public char PeekCharExtra(int offset);
    [IsReadOnlyAttribute]
public bool Match(string text, int offset);
    [IsReadOnlyAttribute]
public bool Match(string text, int end, int offset);
    public bool SkipSpacesToEndOfLineOrEndOfDocument();
    [IsReadOnlyAttribute]
public bool MatchLowercase(string text, int offset);
    [IsReadOnlyAttribute]
public bool MatchLowercase(string text, int end, int offset);
    [IsReadOnlyAttribute]
public int IndexOf(string text, int offset, bool ignoreCase);
    [IsReadOnlyAttribute]
public int IndexOf(char c);
    public sealed virtual bool TrimStart();
    public void TrimStart(Int32& spaceCount);
    public bool TrimEnd();
    public void Trim();
    [IsReadOnlyAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
public bool IsEmptyOrWhitespace();
    public bool Overlaps(StringSlice other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal static class Markdig.Helpers.ThrowHelper : object {
    [DoesNotReturnAttribute]
public static void ArgumentNullException(string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentNullException_item();
    [DoesNotReturnAttribute]
public static void ArgumentNullException_text();
    [DoesNotReturnAttribute]
public static void ArgumentNullException_label();
    [DoesNotReturnAttribute]
public static void ArgumentNullException_key();
    [DoesNotReturnAttribute]
public static void ArgumentNullException_name();
    [DoesNotReturnAttribute]
public static void ArgumentNullException_markdown();
    [DoesNotReturnAttribute]
public static void ArgumentNullException_writer();
    [DoesNotReturnAttribute]
public static void ArgumentNullException_leafBlock();
    [DoesNotReturnAttribute]
public static void ArgumentNullException_markdownObject();
    [DoesNotReturnAttribute]
public static void ArgumentException(string message);
    [DoesNotReturnAttribute]
public static void ArgumentException(string message, string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string message, string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException_index();
    [DoesNotReturnAttribute]
public static void InvalidOperationException(string message);
    public static void CheckDepthLimit(int depth, bool useLargeLimit);
    [DoesNotReturnAttribute]
public static void ThrowArgumentNullException(ExceptionArgument argument);
    [DoesNotReturnAttribute]
public static void ThrowArgumentException(ExceptionArgument argument, ExceptionReason reason);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionReason reason);
    [DoesNotReturnAttribute]
public static void ThrowIndexOutOfRangeException();
    private static string GetExceptionReason(ExceptionReason reason);
    [CompilerGeneratedAttribute]
internal static void <CheckDepthLimit>g__DepthLimitExceeded|16_0();
}
[NullableContextAttribute("1")]
public interface Markdig.IMarkdownExtension {
    public abstract virtual void Setup(MarkdownPipelineBuilder pipeline);
    public abstract virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Markdig.Markdown : object {
    public static string Version;
    internal static MarkdownPipeline DefaultPipeline;
    private static MarkdownPipeline _defaultTrackTriviaPipeline;
    private static Markdown();
    private static MarkdownPipeline GetPipeline(MarkdownPipeline pipeline, string markdown);
    [NullableContextAttribute("2")]
public static string Normalize(string markdown, NormalizeOptions options, MarkdownPipeline pipeline, MarkdownParserContext context);
    public static MarkdownDocument Normalize(string markdown, TextWriter writer, NormalizeOptions options, MarkdownPipeline pipeline, MarkdownParserContext context);
    public static string ToHtml(string markdown, MarkdownPipeline pipeline, MarkdownParserContext context);
    [ExtensionAttribute]
public static string ToHtml(MarkdownDocument document, MarkdownPipeline pipeline);
    public static MarkdownDocument ToHtml(string markdown, TextWriter writer, MarkdownPipeline pipeline, MarkdownParserContext context);
    public static object Convert(string markdown, IMarkdownRenderer renderer, MarkdownPipeline pipeline, MarkdownParserContext context);
    public static MarkdownDocument Parse(string markdown, bool trackTrivia);
    public static MarkdownDocument Parse(string markdown, MarkdownPipeline pipeline, MarkdownParserContext context);
    public static MarkdownDocument ToPlainText(string markdown, TextWriter writer, MarkdownPipeline pipeline, MarkdownParserContext context);
    public static string ToPlainText(string markdown, MarkdownPipeline pipeline, MarkdownParserContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Markdig.MarkdownExtensions : object {
    [ExtensionAttribute]
public static MarkdownPipelineBuilder Use(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder Use(MarkdownPipelineBuilder pipeline, TExtension extension);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseAdvancedExtensions(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseAutoLinks(MarkdownPipelineBuilder pipeline, AutoLinkOptions options);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseNonAsciiNoEscape(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseYamlFrontMatter(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseSelfPipeline(MarkdownPipelineBuilder pipeline, string defaultTag, string defaultExtensions);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UsePragmaLines(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseDiagrams(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UsePreciseSourceLocation(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseTaskLists(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseCustomContainers(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseMediaLinks(MarkdownPipelineBuilder pipeline, MediaOptions options);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseAutoIdentifiers(MarkdownPipelineBuilder pipeline, AutoIdentifierOptions options);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseSmartyPants(MarkdownPipelineBuilder pipeline, SmartyPantOptions options);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseBootstrap(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseMathematics(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseFigures(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseAbbreviations(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseDefinitionLists(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UsePipeTables(MarkdownPipelineBuilder pipeline, PipeTableOptions options);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseGridTables(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseCitations(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseFooters(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseFootnotes(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseSoftlineBreakAsHardlineBreak(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseEmphasisExtras(MarkdownPipelineBuilder pipeline, EmphasisExtraOptions options);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseListExtras(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseGenericAttributes(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseEmojiAndSmiley(MarkdownPipelineBuilder pipeline, bool enableSmileys);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseEmojiAndSmiley(MarkdownPipelineBuilder pipeline, EmojiMapping customEmojiMapping);
    [ExtensionAttribute]
[ObsoleteAttribute("Call `UseReferralLinks("nofollow")` instead")]
public static MarkdownPipelineBuilder UseNoFollowLinks(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseReferralLinks(MarkdownPipelineBuilder pipeline, String[] rels);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseJiraLinks(MarkdownPipelineBuilder pipeline, JiraLinkOptions options);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseGlobalization(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder DisableHtml(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder Configure(MarkdownPipelineBuilder pipeline, string extensions);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder ConfigureNewLine(MarkdownPipelineBuilder pipeline, string newLine);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder DisableHeadings(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder EnableTrackTrivia(MarkdownPipelineBuilder pipeline);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.MarkdownParserContext : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<object, object> <Properties>k__BackingField;
    public Dictionary`2<object, object> Properties { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<object, object> get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.MarkdownPipeline : object {
    [CompilerGeneratedAttribute]
private bool <PreciseSourceLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderedList`1<IMarkdownExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockParserList <BlockParsers>k__BackingField;
    [CompilerGeneratedAttribute]
private InlineParserList <InlineParsers>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TextWriter <DebugLog>k__BackingField;
    [NullableAttribute("2")]
internal ProcessDocumentDelegate DocumentProcessed;
    [CompilerGeneratedAttribute]
private bool <TrackTrivia>k__BackingField;
    [NullableAttribute("2")]
private HtmlRendererCache _rendererCache;
    [NullableAttribute("2")]
private HtmlRendererCache _rendererCacheForCustomWriter;
    internal bool PreciseSourceLocation { get; internal set; }
    public OrderedList`1<IMarkdownExtension> Extensions { get; }
    internal BlockParserList BlockParsers { get; }
    internal InlineParserList InlineParsers { get; }
    [NullableAttribute("2")]
internal TextWriter DebugLog { get; }
    public bool TrackTrivia { get; internal set; }
    internal MarkdownPipeline(OrderedList`1<IMarkdownExtension> extensions, BlockParserList blockParsers, InlineParserList inlineParsers, TextWriter debugLog, ProcessDocumentDelegate documentProcessed);
    [CompilerGeneratedAttribute]
internal bool get_PreciseSourceLocation();
    [CompilerGeneratedAttribute]
internal void set_PreciseSourceLocation(bool value);
    [CompilerGeneratedAttribute]
public OrderedList`1<IMarkdownExtension> get_Extensions();
    [CompilerGeneratedAttribute]
internal BlockParserList get_BlockParsers();
    [CompilerGeneratedAttribute]
internal InlineParserList get_InlineParsers();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal TextWriter get_DebugLog();
    [CompilerGeneratedAttribute]
public bool get_TrackTrivia();
    [CompilerGeneratedAttribute]
internal void set_TrackTrivia(bool value);
    public void Setup(IMarkdownRenderer renderer);
    [NullableContextAttribute("2")]
internal RentedHtmlRenderer RentHtmlRenderer(TextWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.MarkdownPipelineBuilder : object {
    [NullableAttribute("2")]
private MarkdownPipeline pipeline;
    [CompilerGeneratedAttribute]
private OrderedList`1<BlockParser> <BlockParsers>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderedList`1<InlineParser> <InlineParsers>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderedList`1<IMarkdownExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreciseSourceLocation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TextWriter <DebugLog>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackTrivia>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ProcessDocumentDelegate DocumentProcessed;
    public OrderedList`1<BlockParser> BlockParsers { get; private set; }
    public OrderedList`1<InlineParser> InlineParsers { get; private set; }
    public OrderedList`1<IMarkdownExtension> Extensions { get; }
    public bool PreciseSourceLocation { get; public set; }
    [NullableAttribute("2")]
public TextWriter DebugLog { get; public set; }
    public bool TrackTrivia { get; internal set; }
    [NullableAttribute("2")]
internal ProcessDocumentDelegate GetDocumentProcessed { get; }
    [CompilerGeneratedAttribute]
public OrderedList`1<BlockParser> get_BlockParsers();
    [CompilerGeneratedAttribute]
private void set_BlockParsers(OrderedList`1<BlockParser> value);
    [CompilerGeneratedAttribute]
public OrderedList`1<InlineParser> get_InlineParsers();
    [CompilerGeneratedAttribute]
private void set_InlineParsers(OrderedList`1<InlineParser> value);
    [CompilerGeneratedAttribute]
public OrderedList`1<IMarkdownExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public bool get_PreciseSourceLocation();
    [CompilerGeneratedAttribute]
public void set_PreciseSourceLocation(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TextWriter get_DebugLog();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DebugLog(TextWriter value);
    [CompilerGeneratedAttribute]
public bool get_TrackTrivia();
    [CompilerGeneratedAttribute]
internal void set_TrackTrivia(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_DocumentProcessed(ProcessDocumentDelegate value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_DocumentProcessed(ProcessDocumentDelegate value);
    [NullableContextAttribute("2")]
internal ProcessDocumentDelegate get_GetDocumentProcessed();
    public MarkdownPipeline Build();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Markdig.Parsers.BlockParser : ParserBase`1<BlockProcessor> {
    [CompilerGeneratedAttribute]
private ProcessBlockDelegate Closed;
    internal ProcessBlockDelegate GetClosedEvent { get; }
    public bool HasOpeningCharacter(char c);
    [CompilerGeneratedAttribute]
public void add_Closed(ProcessBlockDelegate value);
    [CompilerGeneratedAttribute]
public void remove_Closed(ProcessBlockDelegate value);
    internal ProcessBlockDelegate get_GetClosedEvent();
    [NullableContextAttribute("1")]
public virtual bool CanInterrupt(BlockProcessor processor, Block block);
    [NullableContextAttribute("1")]
public abstract virtual BlockState TryOpen(BlockProcessor processor);
    [NullableContextAttribute("1")]
public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    [NullableContextAttribute("1")]
public virtual bool Close(BlockProcessor processor, Block block);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Parsers.BlockParserList : ParserList`2<BlockParser, BlockProcessor> {
    public BlockParserList(IEnumerable`1<BlockParser> parsers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Parsers.BlockProcessor : object {
    private int currentStackIndex;
    private int originalLineStart;
    [CompilerGeneratedAttribute]
private bool <SkipFirstUnwindSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<Block> <NewBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockParserList <Parsers>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MarkdownParserContext <Context>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ContainerBlock <CurrentContainer>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Block <CurrentBlock>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Block <LastBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownDocument <Document>k__BackingField;
    public StringSlice Line;
    [CompilerGeneratedAttribute]
private int <CurrentLineStartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnBeforeIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartBeforeIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLazy>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Block> <OpenedBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinueProcessingLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TriviaStart>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private List`1<StringSlice> <LinesBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackTrivia>k__BackingField;
    private static BlockProcessorCache _cache;
    public bool SkipFirstUnwindSpace { get; public set; }
    public Stack`1<Block> NewBlocks { get; }
    public BlockParserList Parsers { get; private set; }
    [NullableAttribute("2")]
public MarkdownParserContext Context { get; private set; }
    [NullableAttribute("2")]
public ContainerBlock CurrentContainer { get; private set; }
    [NullableAttribute("2")]
public Block CurrentBlock { get; private set; }
    [NullableAttribute("2")]
public Block LastBlock { get; private set; }
    [NullableAttribute("2")]
public Block NextContinue { get; }
    public MarkdownDocument Document { get; private set; }
    public int CurrentLineStartPosition { get; private set; }
    public int LineIndex { get; public set; }
    public bool IsBlankLine { get; }
    public char CurrentChar { get; }
    public int Column { get; public set; }
    public int Start { get; }
    public int Indent { get; }
    public bool IsCodeIndent { get; }
    public int ColumnBeforeIndent { get; private set; }
    public int StartBeforeIndent { get; private set; }
    public bool IsLazy { get; private set; }
    private List`1<Block> OpenedBlocks { get; }
    private bool ContinueProcessingLine { get; private set; }
    public int TriviaStart { get; public set; }
    [NullableAttribute("2")]
public List`1<StringSlice> LinesBefore { get; public set; }
    public bool TrackTrivia { get; private set; }
    public BlockProcessor(MarkdownDocument document, BlockParserList parsers, MarkdownParserContext context, bool trackTrivia);
    private static BlockProcessor();
    [CompilerGeneratedAttribute]
public bool get_SkipFirstUnwindSpace();
    [CompilerGeneratedAttribute]
public void set_SkipFirstUnwindSpace(bool value);
    [CompilerGeneratedAttribute]
public Stack`1<Block> get_NewBlocks();
    [CompilerGeneratedAttribute]
public BlockParserList get_Parsers();
    [CompilerGeneratedAttribute]
private void set_Parsers(BlockParserList value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MarkdownParserContext get_Context();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Context(MarkdownParserContext value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ContainerBlock get_CurrentContainer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CurrentContainer(ContainerBlock value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Block get_CurrentBlock();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CurrentBlock(Block value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Block get_LastBlock();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_LastBlock(Block value);
    [NullableContextAttribute("2")]
public Block get_NextContinue();
    [CompilerGeneratedAttribute]
public MarkdownDocument get_Document();
    [CompilerGeneratedAttribute]
private void set_Document(MarkdownDocument value);
    [CompilerGeneratedAttribute]
public int get_CurrentLineStartPosition();
    [CompilerGeneratedAttribute]
private void set_CurrentLineStartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_LineIndex();
    [CompilerGeneratedAttribute]
public void set_LineIndex(int value);
    public bool get_IsBlankLine();
    public char get_CurrentChar();
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    public int get_Start();
    public int get_Indent();
    public bool get_IsCodeIndent();
    [CompilerGeneratedAttribute]
public int get_ColumnBeforeIndent();
    [CompilerGeneratedAttribute]
private void set_ColumnBeforeIndent(int value);
    [CompilerGeneratedAttribute]
public int get_StartBeforeIndent();
    [CompilerGeneratedAttribute]
private void set_StartBeforeIndent(int value);
    [CompilerGeneratedAttribute]
public bool get_IsLazy();
    [CompilerGeneratedAttribute]
private void set_IsLazy(bool value);
    [CompilerGeneratedAttribute]
private List`1<Block> get_OpenedBlocks();
    [CompilerGeneratedAttribute]
private bool get_ContinueProcessingLine();
    [CompilerGeneratedAttribute]
private void set_ContinueProcessingLine(bool value);
    [CompilerGeneratedAttribute]
public int get_TriviaStart();
    [CompilerGeneratedAttribute]
public void set_TriviaStart(int value);
    public StringSlice UseTrivia(int end);
    internal List`1<StringSlice> UseLinesBefore();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public List`1<StringSlice> get_LinesBefore();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LinesBefore(List`1<StringSlice> value);
    [CompilerGeneratedAttribute]
public bool get_TrackTrivia();
    [CompilerGeneratedAttribute]
private void set_TrackTrivia(bool value);
    public ContainerBlock GetCurrentContainerOpened();
    public char NextChar();
    public void NextColumn();
    public char PeekChar(int offset);
    public void RestartIndent();
    public void ParseIndent();
    public void GoToColumn(int newColumn);
    public void UnwindAllIndents();
    public void GoToCodeIndent(int columnOffset);
    public void Open(Block block);
    public void Close(Block block);
    public void Discard(Block block);
    public void ProcessLine(StringSlice newLine);
    internal bool IsOpen(Block block);
    private void Close(int index);
    internal void CloseAll(bool force);
    private void OpenAll();
    private void UpdateLastBlockAndContainer(int stackIndex);
    private void TryContinueBlocks();
    private void TryOpenBlocks();
    private bool TryOpenBlocks(BlockParser[] parsers);
    private void ProcessNewBlocks(BlockState result, bool allowClosing);
    private void ResetLine(StringSlice newLine);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal void Setup(MarkdownDocument document, BlockParserList parsers, MarkdownParserContext context, bool trackTrivia);
    private void Reset();
    public BlockProcessor CreateChild();
    public void ReleaseChild();
    internal static BlockProcessor Rent(MarkdownDocument document, BlockParserList parsers, MarkdownParserContext context, bool trackTrivia);
    internal static void Release(BlockProcessor processor);
}
public enum Markdig.Parsers.BlockState : Enum {
    public int value__;
    public static BlockState None;
    public static BlockState Skip;
    public static BlockState Continue;
    public static BlockState ContinueDiscard;
    public static BlockState Break;
    public static BlockState BreakDiscard;
}
[ExtensionAttribute]
public static class Markdig.Parsers.BlockStateExtensions : object {
    [ExtensionAttribute]
public static bool IsDiscard(BlockState blockState);
    [ExtensionAttribute]
public static bool IsContinue(BlockState blockState);
    [ExtensionAttribute]
public static bool IsBreak(BlockState blockState);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Markdig.Parsers.FencedBlockParserBase : BlockParser {
    [CompilerGeneratedAttribute]
private InfoParserDelegate <InfoParser>k__BackingField;
    [CompilerGeneratedAttribute]
private TryParseAttributesDelegate <TryParseAttributes>k__BackingField;
    public InfoParserDelegate InfoParser { get; public set; }
    public TryParseAttributesDelegate TryParseAttributes { get; public set; }
    [CompilerGeneratedAttribute]
public InfoParserDelegate get_InfoParser();
    [CompilerGeneratedAttribute]
public void set_InfoParser(InfoParserDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual TryParseAttributesDelegate get_TryParseAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TryParseAttributes(TryParseAttributesDelegate value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Markdig.Parsers.FencedBlockParserBase`1 : FencedBlockParserBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <InfoPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumMatchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumMatchCount>k__BackingField;
    [NullableAttribute("2")]
public string InfoPrefix { get; public set; }
    public int MinimumMatchCount { get; public set; }
    public int MaximumMatchCount { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_InfoPrefix();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_InfoPrefix(string value);
    [CompilerGeneratedAttribute]
public int get_MinimumMatchCount();
    [CompilerGeneratedAttribute]
public void set_MinimumMatchCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumMatchCount();
    [CompilerGeneratedAttribute]
public void set_MaximumMatchCount(int value);
    public static bool RoundtripInfoParser(BlockProcessor blockProcessor, StringSlice& line, IFencedBlock fenced, char openingCharacter);
    public static bool DefaultInfoParser(BlockProcessor state, StringSlice& line, IFencedBlock fenced, char openingCharacter);
    public virtual BlockState TryOpen(BlockProcessor processor);
    protected abstract virtual T CreateFencedBlock(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Parsers.FencedCodeBlockParser : FencedBlockParserBase`1<FencedCodeBlock> {
    public static string DefaultInfoPrefix;
    protected virtual FencedCodeBlock CreateFencedBlock(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Parsers.HeadingBlockParser : BlockParser {
    [CompilerGeneratedAttribute]
private int <MaxLeadingCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TryParseAttributesDelegate <TryParseAttributes>k__BackingField;
    public int MaxLeadingCount { get; public set; }
    public TryParseAttributesDelegate TryParseAttributes { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxLeadingCount();
    [CompilerGeneratedAttribute]
public void set_MaxLeadingCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TryParseAttributesDelegate get_TryParseAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TryParseAttributes(TryParseAttributesDelegate value);
    [NullableContextAttribute("1")]
public virtual BlockState TryOpen(BlockProcessor processor);
    [NullableContextAttribute("1")]
public virtual bool Close(BlockProcessor processor, Block block);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Parsers.HtmlBlockParser : BlockParser {
    private static string EndOfComment;
    private static string EndOfCDATA;
    private static string EndOfProcessingInstruction;
    private static CompactPrefixTree`1<int> HtmlTags;
    private static HtmlBlockParser();
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    private BlockState MatchStart(BlockProcessor state);
    private BlockState TryParseTagType7(BlockProcessor state, StringSlice line, int startColumn, int startPosition);
    private BlockState TryParseTagType16(BlockProcessor state, StringSlice line, int startColumn, int startPosition);
    private BlockState MatchEnd(BlockProcessor state, HtmlBlock htmlBlock);
    private BlockState CreateHtmlBlock(BlockProcessor state, HtmlBlockType type, int startColumn, int startPosition);
}
[NullableContextAttribute("2")]
public interface Markdig.Parsers.IAttributesParseable {
    public TryParseAttributesDelegate TryParseAttributes { get; public set; }
    public abstract virtual TryParseAttributesDelegate get_TryParseAttributes();
    public abstract virtual void set_TryParseAttributes(TryParseAttributesDelegate value);
}
[NullableContextAttribute("1")]
public interface Markdig.Parsers.IBlockParser`1 {
    public abstract virtual bool CanInterrupt(TProcessor processor, Block block);
    public abstract virtual BlockState TryOpen(TProcessor processor);
    public abstract virtual BlockState TryContinue(TProcessor processor, Block block);
    public abstract virtual bool Close(TProcessor processor, Block block);
}
[NullableContextAttribute("1")]
public interface Markdig.Parsers.IInlineParser`1 {
    public abstract virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
[NullableContextAttribute("2")]
public interface Markdig.Parsers.IMarkdownParser`1 {
    public Char[] OpeningCharacters { get; }
    public int Index { get; }
    public abstract virtual Char[] get_OpeningCharacters();
    public abstract virtual void Initialize();
    public abstract virtual int get_Index();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Parsers.IndentedCodeBlockParser : BlockParser {
    public virtual bool CanInterrupt(BlockProcessor processor, Block block);
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    public virtual bool Close(BlockProcessor processor, Block block);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Markdig.Parsers.InlineParser : ParserBase`1<InlineProcessor> {
    public abstract virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Parsers.InlineParserList : ParserList`2<InlineParser, InlineProcessor> {
    [CompilerGeneratedAttribute]
private IPostInlineProcessor[] <PostInlineProcessors>k__BackingField;
    public IPostInlineProcessor[] PostInlineProcessors { get; private set; }
    public InlineParserList(IEnumerable`1<InlineParser> parsers);
    [CompilerGeneratedAttribute]
public IPostInlineProcessor[] get_PostInlineProcessors();
    [CompilerGeneratedAttribute]
private void set_PostInlineProcessors(IPostInlineProcessor[] value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Parsers.InlineProcessor : object {
    [NullableAttribute("1")]
private List`1<LineOffset> lineOffsets;
    private int previousSliceOffset;
    private int previousLineIndexForSliceOffset;
    [CompilerGeneratedAttribute]
private LeafBlock <Block>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreciseSourceLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Block <BlockNew>k__BackingField;
    [CompilerGeneratedAttribute]
private Inline <Inline>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerInline <Root>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private InlineParserList <Parsers>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownParserContext <Context>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MarkdownDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineIndex>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Object[] <ParserStates>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <DebugLog>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackTrivia>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private LiteralInlineParser <LiteralInlineParser>k__BackingField;
    [NullableAttribute("1")]
private static InlineProcessorCache _cache;
    public LeafBlock Block { get; private set; }
    public bool PreciseSourceLocation { get; private set; }
    public Block BlockNew { get; public set; }
    public Inline Inline { get; public set; }
    public ContainerInline Root { get; internal set; }
    [NullableAttribute("1")]
public InlineParserList Parsers { get; private set; }
    public MarkdownParserContext Context { get; private set; }
    [NullableAttribute("1")]
public MarkdownDocument Document { get; private set; }
    public int LineIndex { get; private set; }
    [NullableAttribute("1")]
public Object[] ParserStates { get; private set; }
    public TextWriter DebugLog { get; public set; }
    public bool TrackTrivia { get; private set; }
    [NullableAttribute("1")]
public LiteralInlineParser LiteralInlineParser { get; }
    [NullableContextAttribute("1")]
public InlineProcessor(MarkdownDocument document, InlineParserList parsers, bool preciseSourcelocation, MarkdownParserContext context, bool trackTrivia);
    private static InlineProcessor();
    [CompilerGeneratedAttribute]
public LeafBlock get_Block();
    [CompilerGeneratedAttribute]
private void set_Block(LeafBlock value);
    [CompilerGeneratedAttribute]
public bool get_PreciseSourceLocation();
    [CompilerGeneratedAttribute]
private void set_PreciseSourceLocation(bool value);
    [CompilerGeneratedAttribute]
public Block get_BlockNew();
    [CompilerGeneratedAttribute]
public void set_BlockNew(Block value);
    [CompilerGeneratedAttribute]
public Inline get_Inline();
    [CompilerGeneratedAttribute]
public void set_Inline(Inline value);
    [CompilerGeneratedAttribute]
public ContainerInline get_Root();
    [CompilerGeneratedAttribute]
internal void set_Root(ContainerInline value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public InlineParserList get_Parsers();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Parsers(InlineParserList value);
    [CompilerGeneratedAttribute]
public MarkdownParserContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(MarkdownParserContext value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public MarkdownDocument get_Document();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Document(MarkdownDocument value);
    [CompilerGeneratedAttribute]
public int get_LineIndex();
    [CompilerGeneratedAttribute]
private void set_LineIndex(int value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Object[] get_ParserStates();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_ParserStates(Object[] value);
    [CompilerGeneratedAttribute]
public TextWriter get_DebugLog();
    [CompilerGeneratedAttribute]
public void set_DebugLog(TextWriter value);
    [CompilerGeneratedAttribute]
public bool get_TrackTrivia();
    [CompilerGeneratedAttribute]
private void set_TrackTrivia(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public LiteralInlineParser get_LiteralInlineParser();
    public int GetSourcePosition(int sliceOffset);
    public SourceSpan GetSourcePositionFromLocalSpan(SourceSpan span);
    public int GetSourcePosition(int sliceOffset, Int32& lineIndex, Int32& column);
    [NullableContextAttribute("1")]
public void ProcessInlineLeaf(LeafBlock leafBlock);
    public void PostProcessInlines(int startingIndex, Inline root, Inline lastChild, bool isFinalProcessing);
    [NullableContextAttribute("1")]
private ContainerInline FindLastContainer();
    [NullableContextAttribute("1")]
[MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void Setup(MarkdownDocument document, InlineParserList parsers, bool preciseSourcelocation, MarkdownParserContext context, bool trackTrivia);
    private void Reset();
    [NullableContextAttribute("1")]
internal static InlineProcessor Rent(MarkdownDocument document, InlineParserList parsers, bool preciseSourcelocation, MarkdownParserContext context, bool trackTrivia);
    [NullableContextAttribute("1")]
internal static void Release(InlineProcessor processor);
}
public class Markdig.Parsers.Inlines.AutolinkInlineParser : InlineParser {
    [CompilerGeneratedAttribute]
private bool <EnableHtmlParsing>k__BackingField;
    public bool EnableHtmlParsing { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableHtmlParsing();
    [CompilerGeneratedAttribute]
public void set_EnableHtmlParsing(bool value);
    [NullableContextAttribute("1")]
public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
public class Markdig.Parsers.Inlines.CodeInlineParser : InlineParser {
    [NullableContextAttribute("1")]
public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
public class Markdig.Parsers.Inlines.EmphasisDescriptor : object {
    [CompilerGeneratedAttribute]
private char <Character>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableWithinWord>k__BackingField;
    public char Character { get; }
    public int MinimumCount { get; }
    public int MaximumCount { get; }
    public bool EnableWithinWord { get; }
    public EmphasisDescriptor(char character, int minimumCount, int maximumCount, bool enableWithinWord);
    [CompilerGeneratedAttribute]
public char get_Character();
    [CompilerGeneratedAttribute]
public int get_MinimumCount();
    [CompilerGeneratedAttribute]
public int get_MaximumCount();
    [CompilerGeneratedAttribute]
public bool get_EnableWithinWord();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Parsers.Inlines.EmphasisInlineParser : InlineParser {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private CharacterMap`1<EmphasisDescriptor> emphasisMap;
    private DelimitersObjectCache inlinesCache;
    [CompilerGeneratedAttribute]
private List`1<EmphasisDescriptor> <EmphasisDescriptors>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CreateEmphasisInlineDelegate <CreateEmphasisInline>k__BackingField;
    public List`1<TryCreateEmphasisInlineDelegate> TryCreateEmphasisInlineList;
    public List`1<EmphasisDescriptor> EmphasisDescriptors { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("Use TryCreateEmphasisInlineList instead", "False")]
public CreateEmphasisInlineDelegate CreateEmphasisInline { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<EmphasisDescriptor> get_EmphasisDescriptors();
    public bool HasEmphasisChar(char c);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CreateEmphasisInlineDelegate get_CreateEmphasisInline();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CreateEmphasisInline(CreateEmphasisInlineDelegate value);
    public virtual void Initialize();
    [NullableContextAttribute("2")]
public sealed virtual bool PostProcess(InlineProcessor state, Inline root, Inline lastChild, int postInlineProcessorIndex, bool isFinalProcessing);
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
    private void ProcessEmphasis(InlineProcessor processor, List`1<EmphasisDelimiterInline> delimiters);
}
public class Markdig.Parsers.Inlines.EscapeInlineParser : InlineParser {
    [NullableContextAttribute("1")]
public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
public class Markdig.Parsers.Inlines.HtmlEntityParser : InlineParser {
    [NullableContextAttribute("2")]
public static bool TryParse(StringSlice& slice, String& literal, Int32& match);
    [NullableContextAttribute("1")]
public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
public class Markdig.Parsers.Inlines.LineBreakInlineParser : InlineParser {
    [CompilerGeneratedAttribute]
private bool <EnableSoftAsHard>k__BackingField;
    public bool EnableSoftAsHard { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableSoftAsHard();
    [CompilerGeneratedAttribute]
public void set_EnableSoftAsHard(bool value);
    [NullableContextAttribute("1")]
public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Parsers.Inlines.LinkInlineParser : InlineParser {
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
    private bool ProcessLinkReference(InlineProcessor state, StringSlice text, string label, SourceSpan labelWithriviaSpan, bool isShortcut, SourceSpan labelSpan, LinkDelimiterInline parent, int endPosition, LocalLabel localLabel);
    private bool TryProcessLinkOrImage(InlineProcessor inlineState, StringSlice& text);
    [NullableContextAttribute("2")]
private void MarkParentAsInactive(Inline inline);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Parsers.Inlines.LiteralInlineParser : InlineParser {
    [CompilerGeneratedAttribute]
private PostMatchDelegate <PostMatch>k__BackingField;
    public PostMatchDelegate PostMatch { get; public set; }
    [CompilerGeneratedAttribute]
public PostMatchDelegate get_PostMatch();
    [CompilerGeneratedAttribute]
public void set_PostMatch(PostMatchDelegate value);
    [NullableContextAttribute("1")]
public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
[NullableContextAttribute("2")]
public interface Markdig.Parsers.IPostInlineProcessor {
    public abstract virtual bool PostProcess(InlineProcessor state, Inline root, Inline lastChild, int postInlineProcessorIndex, bool isFinalProcessing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Parsers.ListBlockParser : BlockParser {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private CharacterMap`1<ListItemParser> mapItemParsers;
    [CompilerGeneratedAttribute]
private OrderedList`1<ListItemParser> <ItemParsers>k__BackingField;
    public OrderedList`1<ListItemParser> ItemParsers { get; }
    [CompilerGeneratedAttribute]
public OrderedList`1<ListItemParser> get_ItemParsers();
    public virtual void Initialize();
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    private BlockState TryContinueListItem(BlockProcessor state, ListItemBlock listItem);
    private BlockState TryParseListItem(BlockProcessor state, Block block);
    public virtual bool Close(BlockProcessor processor, Block blockToClose);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Parsers.ListInfo : ValueType {
    [CompilerGeneratedAttribute]
private char <BulletType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderedStart>k__BackingField;
    [CompilerGeneratedAttribute]
private char <OrderedDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultOrderedStart>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <SourceBullet>k__BackingField;
    public char BulletType { get; public set; }
    public string OrderedStart { get; public set; }
    public char OrderedDelimiter { get; public set; }
    public string DefaultOrderedStart { get; public set; }
    public StringSlice SourceBullet { get; public set; }
    public ListInfo(char bulletType);
    [NullableContextAttribute("1")]
public ListInfo(char bulletType, string orderedStart, char orderedDelimiter, string defaultOrderedStart);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public char get_BulletType();
    [CompilerGeneratedAttribute]
public void set_BulletType(char value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_OrderedStart();
    [CompilerGeneratedAttribute]
public void set_OrderedStart(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public char get_OrderedDelimiter();
    [CompilerGeneratedAttribute]
public void set_OrderedDelimiter(char value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_DefaultOrderedStart();
    [CompilerGeneratedAttribute]
public void set_DefaultOrderedStart(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public StringSlice get_SourceBullet();
    [CompilerGeneratedAttribute]
public void set_SourceBullet(StringSlice value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Markdig.Parsers.ListItemParser : object {
    [CompilerGeneratedAttribute]
private Char[] <OpeningCharacters>k__BackingField;
    public Char[] OpeningCharacters { get; protected set; }
    [CompilerGeneratedAttribute]
public Char[] get_OpeningCharacters();
    [CompilerGeneratedAttribute]
protected void set_OpeningCharacters(Char[] value);
    [NullableContextAttribute("1")]
public abstract virtual bool TryParse(BlockProcessor state, char pendingBulletType, ListInfo& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Markdig.Parsers.MarkdownParser : object {
    public static MarkdownDocument Parse(string text, MarkdownPipeline pipeline, MarkdownParserContext context);
    private static string FixupZero(string text);
    private static void ProcessBlocks(BlockProcessor blockProcessor, LineReader lineReader);
    private static void ProcessInlines(InlineProcessor inlineProcessor, MarkdownDocument document);
}
public class Markdig.Parsers.NumberedListItemParser : OrderedListItemParser {
    [NullableContextAttribute("1")]
public virtual bool TryParse(BlockProcessor state, char pendingBulletType, ListInfo& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Markdig.Parsers.OrderedListItemParser : ListItemParser {
    [CompilerGeneratedAttribute]
private Char[] <OrderedDelimiters>k__BackingField;
    public Char[] OrderedDelimiters { get; public set; }
    [CompilerGeneratedAttribute]
public Char[] get_OrderedDelimiters();
    [CompilerGeneratedAttribute]
public void set_OrderedDelimiters(Char[] value);
    protected bool TryParseDelimiter(BlockProcessor state, Char& orderedDelimiter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Parsers.ParagraphBlockParser : BlockParser {
    [CompilerGeneratedAttribute]
private bool <ParseSetexHeadings>k__BackingField;
    public bool ParseSetexHeadings { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ParseSetexHeadings();
    [CompilerGeneratedAttribute]
public void set_ParseSetexHeadings(bool value);
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    public virtual bool Close(BlockProcessor processor, Block block);
    private BlockState TryParseSetexHeading(BlockProcessor state, Block block);
    private static char GetHeadingChar(StringSlice& line, Int32& count);
    private static bool TryMatchLinkReferenceDefinition(StringLineGroup& lines, BlockProcessor state);
    private static bool TryMatchLinkReferenceDefinitionTrivia(StringLineGroup& lines, BlockProcessor state, ParagraphBlock paragraph);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Markdig.Parsers.ParserBase`1 : object {
    [CompilerGeneratedAttribute]
private Char[] <OpeningCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public Char[] OpeningCharacters { get; public set; }
    public int Index { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual Char[] get_OpeningCharacters();
    [CompilerGeneratedAttribute]
public void set_OpeningCharacters(Char[] value);
    public virtual void Initialize();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Markdig.Parsers.ParserList`2 : OrderedList`1<T> {
    private CharacterMap`1<T[]> charMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] globalParsers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public T[] GlobalParsers { get; }
    public Char[] OpeningCharacters { get; }
    protected ParserList`2(IEnumerable`1<T> parsersArg);
    public T[] get_GlobalParsers();
    public Char[] get_OpeningCharacters();
    public T[] GetParsersForOpeningCharacter(UInt32 openingChar);
    public int IndexOfOpeningCharacter(string text, int start, int end);
}
public class Markdig.Parsers.ProcessBlockDelegate : MulticastDelegate {
    public ProcessBlockDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(BlockProcessor processor, Block block);
    public virtual IAsyncResult BeginInvoke(BlockProcessor processor, Block block, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Markdig.Parsers.ProcessDocumentDelegate : MulticastDelegate {
    public ProcessDocumentDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(MarkdownDocument document);
    public virtual IAsyncResult BeginInvoke(MarkdownDocument document, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Markdig.Parsers.ProcessInlineDelegate : MulticastDelegate {
    public ProcessInlineDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(InlineProcessor processor, Inline inline);
    public virtual IAsyncResult BeginInvoke(InlineProcessor processor, Inline inline, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Parsers.QuoteBlockParser : BlockParser {
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Parsers.ThematicBreakParser : BlockParser {
    public static ThematicBreakParser Default;
    private static ThematicBreakParser();
    public virtual BlockState TryOpen(BlockProcessor processor);
}
public class Markdig.Parsers.TryParseAttributesDelegate : MulticastDelegate {
    public TryParseAttributesDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(BlockProcessor processor, StringSlice& slice, IBlock block);
    public virtual IAsyncResult BeginInvoke(BlockProcessor processor, StringSlice& slice, IBlock block, AsyncCallback callback, object object);
    public virtual bool EndInvoke(StringSlice& slice, IAsyncResult result);
}
public class Markdig.Parsers.UnorderedListItemParser : ListItemParser {
    [NullableContextAttribute("1")]
public virtual bool TryParse(BlockProcessor state, char pendingBulletType, ListInfo& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.CodeBlockRenderer : HtmlObjectRenderer`1<CodeBlock> {
    [CompilerGeneratedAttribute]
private bool <OutputAttributesOnPre>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <BlocksAsDiv>k__BackingField;
    public bool OutputAttributesOnPre { get; public set; }
    public HashSet`1<string> BlocksAsDiv { get; }
    [CompilerGeneratedAttribute]
public bool get_OutputAttributesOnPre();
    [CompilerGeneratedAttribute]
public void set_OutputAttributesOnPre(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_BlocksAsDiv();
    protected virtual void Write(HtmlRenderer renderer, CodeBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.HeadingRenderer : HtmlObjectRenderer`1<HeadingBlock> {
    private static String[] HeadingTexts;
    private static HeadingRenderer();
    protected virtual void Write(HtmlRenderer renderer, HeadingBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Renderers.Html.HtmlAttributes : MarkdownObject {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Classes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<string, string>> <Properties>k__BackingField;
    [NullableAttribute("2")]
public string Id { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Classes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<KeyValuePair`2<string, string>> Properties { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Id();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Classes();
    [CompilerGeneratedAttribute]
public void set_Classes(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<string, string>> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<KeyValuePair`2<string, string>> value);
    public void AddClass(string name);
    public void AddProperty(string name, string value);
    public void AddPropertyIfNotExist(string name, object value);
    public void CopyTo(HtmlAttributes htmlAttributes, bool mergeIdAndProperties, bool shared);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Markdig.Renderers.Html.HtmlAttributesExtensions : object {
    private static object Key;
    private static HtmlAttributesExtensions();
    [ExtensionAttribute]
public static HtmlAttributes TryGetAttributes(IMarkdownObject obj);
    [ExtensionAttribute]
public static HtmlAttributes GetAttributes(IMarkdownObject obj);
    [ExtensionAttribute]
public static void SetAttributes(IMarkdownObject obj, HtmlAttributes attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.HtmlBlockRenderer : HtmlObjectRenderer`1<HtmlBlock> {
    protected virtual void Write(HtmlRenderer renderer, HtmlBlock obj);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Markdig.Renderers.Html.HtmlObjectRenderer`1 : MarkdownObjectRenderer`2<HtmlRenderer, TObject> {
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.Inlines.AutolinkInlineRenderer : HtmlObjectRenderer`1<AutolinkInline> {
    [CompilerGeneratedAttribute]
private string <Rel>k__BackingField;
    [ObsoleteAttribute("AutoRelNoFollow is obsolete. Please write "nofollow" into Property Rel.")]
public bool AutoRelNoFollow { get; public set; }
    public string Rel { get; public set; }
    public bool get_AutoRelNoFollow();
    public void set_AutoRelNoFollow(bool value);
    [CompilerGeneratedAttribute]
public string get_Rel();
    [CompilerGeneratedAttribute]
public void set_Rel(string value);
    [NullableContextAttribute("1")]
protected virtual void Write(HtmlRenderer renderer, AutolinkInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.Inlines.CodeInlineRenderer : HtmlObjectRenderer`1<CodeInline> {
    protected virtual void Write(HtmlRenderer renderer, CodeInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.Inlines.DelimiterInlineRenderer : HtmlObjectRenderer`1<DelimiterInline> {
    protected virtual void Write(HtmlRenderer renderer, DelimiterInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.Inlines.EmphasisInlineRenderer : HtmlObjectRenderer`1<EmphasisInline> {
    [CompilerGeneratedAttribute]
private GetTagDelegate <GetTag>k__BackingField;
    public GetTagDelegate GetTag { get; public set; }
    [CompilerGeneratedAttribute]
public GetTagDelegate get_GetTag();
    [CompilerGeneratedAttribute]
public void set_GetTag(GetTagDelegate value);
    protected virtual void Write(HtmlRenderer renderer, EmphasisInline obj);
    public string GetDefaultTag(EmphasisInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.Inlines.HtmlEntityInlineRenderer : HtmlObjectRenderer`1<HtmlEntityInline> {
    protected virtual void Write(HtmlRenderer renderer, HtmlEntityInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.Inlines.HtmlInlineRenderer : HtmlObjectRenderer`1<HtmlInline> {
    protected virtual void Write(HtmlRenderer renderer, HtmlInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.Inlines.LineBreakInlineRenderer : HtmlObjectRenderer`1<LineBreakInline> {
    [CompilerGeneratedAttribute]
private bool <RenderAsHardlineBreak>k__BackingField;
    public bool RenderAsHardlineBreak { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RenderAsHardlineBreak();
    [CompilerGeneratedAttribute]
public void set_RenderAsHardlineBreak(bool value);
    protected virtual void Write(HtmlRenderer renderer, LineBreakInline obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.Inlines.LinkInlineRenderer : HtmlObjectRenderer`1<LinkInline> {
    [CompilerGeneratedAttribute]
private string <Rel>k__BackingField;
    [ObsoleteAttribute("AutoRelNoFollow is obsolete. Please write "nofollow" into Property Rel.")]
public bool AutoRelNoFollow { get; public set; }
    public string Rel { get; public set; }
    public bool get_AutoRelNoFollow();
    public void set_AutoRelNoFollow(bool value);
    [CompilerGeneratedAttribute]
public string get_Rel();
    [CompilerGeneratedAttribute]
public void set_Rel(string value);
    [NullableContextAttribute("1")]
protected virtual void Write(HtmlRenderer renderer, LinkInline link);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.Inlines.LiteralInlineRenderer : HtmlObjectRenderer`1<LiteralInline> {
    protected virtual void Write(HtmlRenderer renderer, LiteralInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.ListRenderer : HtmlObjectRenderer`1<ListBlock> {
    protected virtual void Write(HtmlRenderer renderer, ListBlock listBlock);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.ParagraphRenderer : HtmlObjectRenderer`1<ParagraphBlock> {
    protected virtual void Write(HtmlRenderer renderer, ParagraphBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.QuoteBlockRenderer : HtmlObjectRenderer`1<QuoteBlock> {
    protected virtual void Write(HtmlRenderer renderer, QuoteBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Html.ThematicBreakRenderer : HtmlObjectRenderer`1<ThematicBreakBlock> {
    protected virtual void Write(HtmlRenderer renderer, ThematicBreakBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.HtmlRenderer : TextRendererBase`1<HtmlRenderer> {
    [CompilerGeneratedAttribute]
private bool <EnableHtmlForInline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableHtmlForBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableHtmlEscape>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplicitParagraph>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNonAsciiNoEscape>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Uri <BaseUrl>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <LinkRewriter>k__BackingField;
    private static IdnMapping IdnMapping;
    public bool EnableHtmlForInline { get; public set; }
    public bool EnableHtmlForBlock { get; public set; }
    public bool EnableHtmlEscape { get; public set; }
    public bool ImplicitParagraph { get; public set; }
    public bool UseNonAsciiNoEscape { get; public set; }
    [NullableAttribute("2")]
public Uri BaseUrl { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> LinkRewriter { get; public set; }
    public HtmlRenderer(TextWriter writer);
    private static HtmlRenderer();
    [CompilerGeneratedAttribute]
public bool get_EnableHtmlForInline();
    [CompilerGeneratedAttribute]
public void set_EnableHtmlForInline(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableHtmlForBlock();
    [CompilerGeneratedAttribute]
public void set_EnableHtmlForBlock(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableHtmlEscape();
    [CompilerGeneratedAttribute]
public void set_EnableHtmlEscape(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImplicitParagraph();
    [CompilerGeneratedAttribute]
public void set_ImplicitParagraph(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNonAsciiNoEscape();
    [CompilerGeneratedAttribute]
public void set_UseNonAsciiNoEscape(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Uri get_BaseUrl();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BaseUrl(Uri value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_LinkRewriter();
    [CompilerGeneratedAttribute]
public void set_LinkRewriter(Func`2<string, string> value);
    public HtmlRenderer WriteEscape(string content);
    public HtmlRenderer WriteEscape(StringSlice& slice, bool softEscape);
    public HtmlRenderer WriteEscape(StringSlice slice, bool softEscape);
    public HtmlRenderer WriteEscape(string content, int offset, int length, bool softEscape);
    public HtmlRenderer WriteEscapeUrl(string content);
    private void WriteEscapeUrl(string content, int start, int length);
    public HtmlRenderer WriteAttributes(MarkdownObject markdownObject);
    public HtmlRenderer WriteAttributes(HtmlAttributes attributes, Func`2<string, string> classFilter);
    public HtmlRenderer WriteLeafRawLines(LeafBlock leafBlock, bool writeEndOfLines, bool escape, bool softEscape);
}
[NullableContextAttribute("1")]
public interface Markdig.Renderers.IMarkdownObjectRenderer {
    public abstract virtual bool Accept(RendererBase renderer, MarkdownObject obj);
    public abstract virtual void Write(RendererBase renderer, MarkdownObject objectToRender);
}
[NullableContextAttribute("1")]
public interface Markdig.Renderers.IMarkdownRenderer {
    public ObjectRendererCollection ObjectRenderers { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectWriteBefore(Action`2<IMarkdownRenderer, MarkdownObject> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectWriteBefore(Action`2<IMarkdownRenderer, MarkdownObject> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectWriteAfter(Action`2<IMarkdownRenderer, MarkdownObject> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectWriteAfter(Action`2<IMarkdownRenderer, MarkdownObject> value);
    public abstract virtual ObjectRendererCollection get_ObjectRenderers();
    public abstract virtual object Render(MarkdownObject markdownObject);
}
public abstract class Markdig.Renderers.MarkdownObjectRenderer`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private OrderedList`1<TryWriteDelegate<TRenderer, TObject>> <TryWriters>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public OrderedList`1<TryWriteDelegate<TRenderer, TObject>> TryWriters { get; }
    [NullableContextAttribute("1")]
public virtual bool Accept(RendererBase renderer, MarkdownObject obj);
    [NullableContextAttribute("1")]
public virtual void Write(RendererBase renderer, MarkdownObject obj);
    [CompilerGeneratedAttribute]
public OrderedList`1<TryWriteDelegate<TRenderer, TObject>> get_TryWriters();
    [NullableContextAttribute("1")]
protected abstract virtual void Write(TRenderer renderer, TObject obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.CodeBlockRenderer : NormalizeObjectRenderer`1<CodeBlock> {
    [CompilerGeneratedAttribute]
private bool <OutputAttributesOnPre>k__BackingField;
    public bool OutputAttributesOnPre { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_OutputAttributesOnPre();
    [CompilerGeneratedAttribute]
public void set_OutputAttributesOnPre(bool value);
    protected virtual void Write(NormalizeRenderer renderer, CodeBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.HeadingRenderer : NormalizeObjectRenderer`1<HeadingBlock> {
    private static String[] HeadingTexts;
    private static HeadingRenderer();
    protected virtual void Write(NormalizeRenderer renderer, HeadingBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.HtmlBlockRenderer : NormalizeObjectRenderer`1<HtmlBlock> {
    protected virtual void Write(NormalizeRenderer renderer, HtmlBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.Inlines.AutolinkInlineRenderer : NormalizeObjectRenderer`1<AutolinkInline> {
    protected virtual void Write(NormalizeRenderer renderer, AutolinkInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.Inlines.CodeInlineRenderer : NormalizeObjectRenderer`1<CodeInline> {
    protected virtual void Write(NormalizeRenderer renderer, CodeInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.Inlines.DelimiterInlineRenderer : NormalizeObjectRenderer`1<DelimiterInline> {
    protected virtual void Write(NormalizeRenderer renderer, DelimiterInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.Inlines.EmphasisInlineRenderer : NormalizeObjectRenderer`1<EmphasisInline> {
    protected virtual void Write(NormalizeRenderer renderer, EmphasisInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.Inlines.LineBreakInlineRenderer : NormalizeObjectRenderer`1<LineBreakInline> {
    [CompilerGeneratedAttribute]
private bool <RenderAsHardlineBreak>k__BackingField;
    public bool RenderAsHardlineBreak { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RenderAsHardlineBreak();
    [CompilerGeneratedAttribute]
public void set_RenderAsHardlineBreak(bool value);
    protected virtual void Write(NormalizeRenderer renderer, LineBreakInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.Inlines.LinkInlineRenderer : NormalizeObjectRenderer`1<LinkInline> {
    protected virtual void Write(NormalizeRenderer renderer, LinkInline link);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.Inlines.LiteralInlineRenderer : NormalizeObjectRenderer`1<LiteralInline> {
    protected virtual void Write(NormalizeRenderer renderer, LiteralInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.Inlines.NormalizeHtmlEntityInlineRenderer : NormalizeObjectRenderer`1<HtmlEntityInline> {
    protected virtual void Write(NormalizeRenderer renderer, HtmlEntityInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.Inlines.NormalizeHtmlInlineRenderer : NormalizeObjectRenderer`1<HtmlInline> {
    protected virtual void Write(NormalizeRenderer renderer, HtmlInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.LinkReferenceDefinitionGroupRenderer : NormalizeObjectRenderer`1<LinkReferenceDefinitionGroup> {
    protected virtual void Write(NormalizeRenderer renderer, LinkReferenceDefinitionGroup obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.LinkReferenceDefinitionRenderer : NormalizeObjectRenderer`1<LinkReferenceDefinition> {
    protected virtual void Write(NormalizeRenderer renderer, LinkReferenceDefinition linkDef);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.ListRenderer : NormalizeObjectRenderer`1<ListBlock> {
    protected virtual void Write(NormalizeRenderer renderer, ListBlock listBlock);
    private static int IntLog10Fast(int input);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Markdig.Renderers.Normalize.NormalizeObjectRenderer`1 : MarkdownObjectRenderer`2<NormalizeRenderer, TObject> {
}
public class Markdig.Renderers.Normalize.NormalizeOptions : object {
    [CompilerGeneratedAttribute]
private bool <SpaceAfterQuoteBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmptyLineAfterCodeBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmptyLineAfterHeading>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmptyLineAfterThematicBreak>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<char> <ListItemCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandAutoLinks>k__BackingField;
    public bool SpaceAfterQuoteBlock { get; public set; }
    public bool EmptyLineAfterCodeBlock { get; public set; }
    public bool EmptyLineAfterHeading { get; public set; }
    public bool EmptyLineAfterThematicBreak { get; public set; }
    public Nullable`1<char> ListItemCharacter { get; public set; }
    public bool ExpandAutoLinks { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SpaceAfterQuoteBlock();
    [CompilerGeneratedAttribute]
public void set_SpaceAfterQuoteBlock(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmptyLineAfterCodeBlock();
    [CompilerGeneratedAttribute]
public void set_EmptyLineAfterCodeBlock(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmptyLineAfterHeading();
    [CompilerGeneratedAttribute]
public void set_EmptyLineAfterHeading(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmptyLineAfterThematicBreak();
    [CompilerGeneratedAttribute]
public void set_EmptyLineAfterThematicBreak(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<char> get_ListItemCharacter();
    [CompilerGeneratedAttribute]
public void set_ListItemCharacter(Nullable`1<char> value);
    [CompilerGeneratedAttribute]
public bool get_ExpandAutoLinks();
    [CompilerGeneratedAttribute]
public void set_ExpandAutoLinks(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.NormalizeRenderer : TextRendererBase`1<NormalizeRenderer> {
    [CompilerGeneratedAttribute]
private NormalizeOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompactParagraph>k__BackingField;
    public NormalizeOptions Options { get; }
    public bool CompactParagraph { get; public set; }
    public NormalizeRenderer(TextWriter writer, NormalizeOptions options);
    [CompilerGeneratedAttribute]
public NormalizeOptions get_Options();
    [CompilerGeneratedAttribute]
public bool get_CompactParagraph();
    [CompilerGeneratedAttribute]
public void set_CompactParagraph(bool value);
    public void FinishBlock(bool emptyLine);
    public NormalizeRenderer WriteLeafRawLines(LeafBlock leafBlock, bool writeEndOfLines, bool indent);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.ParagraphRenderer : NormalizeObjectRenderer`1<ParagraphBlock> {
    protected virtual void Write(NormalizeRenderer renderer, ParagraphBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.QuoteBlockRenderer : NormalizeObjectRenderer`1<QuoteBlock> {
    protected virtual void Write(NormalizeRenderer renderer, QuoteBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Normalize.ThematicBreakRenderer : NormalizeObjectRenderer`1<ThematicBreakBlock> {
    protected virtual void Write(NormalizeRenderer renderer, ThematicBreakBlock obj);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.ObjectRendererCollection : OrderedList`1<IMarkdownObjectRenderer> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Markdig.Renderers.RendererBase : object {
    private Dictionary`2<Type, IMarkdownObjectRenderer> renderersPerType;
    [NullableAttribute("2")]
private IMarkdownObjectRenderer previousRenderer;
    [NullableAttribute("2")]
private Type previousObjectType;
    internal int childrenDepth;
    [CompilerGeneratedAttribute]
private ObjectRendererCollection <ObjectRenderers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFirstInContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastInContainer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IMarkdownRenderer, MarkdownObject> ObjectWriteBefore;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IMarkdownRenderer, MarkdownObject> ObjectWriteAfter;
    public ObjectRendererCollection ObjectRenderers { get; }
    public bool IsFirstInContainer { get; private set; }
    public bool IsLastInContainer { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual ObjectRendererCollection get_ObjectRenderers();
    public abstract virtual object Render(MarkdownObject markdownObject);
    [CompilerGeneratedAttribute]
public bool get_IsFirstInContainer();
    [CompilerGeneratedAttribute]
private void set_IsFirstInContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLastInContainer();
    [CompilerGeneratedAttribute]
private void set_IsLastInContainer(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ObjectWriteBefore(Action`2<IMarkdownRenderer, MarkdownObject> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ObjectWriteBefore(Action`2<IMarkdownRenderer, MarkdownObject> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ObjectWriteAfter(Action`2<IMarkdownRenderer, MarkdownObject> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ObjectWriteAfter(Action`2<IMarkdownRenderer, MarkdownObject> value);
    public void WriteChildren(ContainerBlock containerBlock);
    public void WriteChildren(ContainerInline containerInline);
    public void Write(MarkdownObject obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.CodeBlockRenderer : RoundtripObjectRenderer`1<CodeBlock> {
    protected virtual void Write(RoundtripRenderer renderer, CodeBlock obj);
    public void WriteLeafRawLines(RoundtripRenderer renderer, LeafBlock leafBlock);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.EmptyBlockRenderer : RoundtripObjectRenderer`1<EmptyBlock> {
    protected virtual void Write(RoundtripRenderer renderer, EmptyBlock noBlocksFoundBlock);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.HeadingRenderer : RoundtripObjectRenderer`1<HeadingBlock> {
    private static String[] HeadingTexts;
    private static HeadingRenderer();
    protected virtual void Write(RoundtripRenderer renderer, HeadingBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.HtmlBlockRenderer : RoundtripObjectRenderer`1<HtmlBlock> {
    protected virtual void Write(RoundtripRenderer renderer, HtmlBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.Inlines.AutolinkInlineRenderer : RoundtripObjectRenderer`1<AutolinkInline> {
    protected virtual void Write(RoundtripRenderer renderer, AutolinkInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.Inlines.CodeInlineRenderer : RoundtripObjectRenderer`1<CodeInline> {
    protected virtual void Write(RoundtripRenderer renderer, CodeInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.Inlines.DelimiterInlineRenderer : RoundtripObjectRenderer`1<DelimiterInline> {
    protected virtual void Write(RoundtripRenderer renderer, DelimiterInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.Inlines.EmphasisInlineRenderer : RoundtripObjectRenderer`1<EmphasisInline> {
    protected virtual void Write(RoundtripRenderer renderer, EmphasisInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.Inlines.LineBreakInlineRenderer : RoundtripObjectRenderer`1<LineBreakInline> {
    protected virtual void Write(RoundtripRenderer renderer, LineBreakInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.Inlines.LinkInlineRenderer : RoundtripObjectRenderer`1<LinkInline> {
    protected virtual void Write(RoundtripRenderer renderer, LinkInline link);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.Inlines.LiteralInlineRenderer : RoundtripObjectRenderer`1<LiteralInline> {
    protected virtual void Write(RoundtripRenderer renderer, LiteralInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.Inlines.RoundtripHtmlEntityInlineRenderer : RoundtripObjectRenderer`1<HtmlEntityInline> {
    protected virtual void Write(RoundtripRenderer renderer, HtmlEntityInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.Inlines.RoundtripHtmlInlineRenderer : RoundtripObjectRenderer`1<HtmlInline> {
    protected virtual void Write(RoundtripRenderer renderer, HtmlInline obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.LinkReferenceDefinitionGroupRenderer : RoundtripObjectRenderer`1<LinkReferenceDefinitionGroup> {
    protected virtual void Write(RoundtripRenderer renderer, LinkReferenceDefinitionGroup obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.LinkReferenceDefinitionRenderer : RoundtripObjectRenderer`1<LinkReferenceDefinition> {
    protected virtual void Write(RoundtripRenderer renderer, LinkReferenceDefinition linkDef);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.ListRenderer : RoundtripObjectRenderer`1<ListBlock> {
    protected virtual void Write(RoundtripRenderer renderer, ListBlock listBlock);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerDisplayAttribute("renderer.Writer.ToString()")]
public class Markdig.Renderers.Roundtrip.ParagraphRenderer : RoundtripObjectRenderer`1<ParagraphBlock> {
    protected virtual void Write(RoundtripRenderer renderer, ParagraphBlock paragraph);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.QuoteBlockRenderer : RoundtripObjectRenderer`1<QuoteBlock> {
    protected virtual void Write(RoundtripRenderer renderer, QuoteBlock quoteBlock);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Markdig.Renderers.Roundtrip.RoundtripObjectRenderer`1 : MarkdownObjectRenderer`2<RoundtripRenderer, TObject> {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.RoundtripRenderer : TextRendererBase`1<RoundtripRenderer> {
    public RoundtripRenderer(TextWriter writer);
    public void WriteLeafRawLines(LeafBlock leafBlock);
    public void RenderLinesBefore(Block block);
    public void RenderLinesAfter(Block block);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Markdig.Renderers.Roundtrip.ThematicBreakRenderer : RoundtripObjectRenderer`1<ThematicBreakBlock> {
    protected virtual void Write(RoundtripRenderer renderer, ThematicBreakBlock obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Markdig.Renderers.TextRendererBase : RendererBase {
    private TextWriter writer;
    public TextWriter Writer { get; public set; }
    protected TextRendererBase(TextWriter writer);
    public TextWriter get_Writer();
    public void set_Writer(TextWriter value);
    public virtual object Render(MarkdownObject markdownObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Markdig.Renderers.TextRendererBase`1 : TextRendererBase {
    protected bool previousWasLine;
    private Char[] buffer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Indent<T>> indents;
    protected TextRendererBase`1(TextWriter writer);
    protected internal void Reset();
    internal void ResetInternal();
    public T EnsureLine();
    public void PushIndent(string indent);
    public void PushIndent(String[] lineSpecific);
    public void PopIndent();
    private void WriteIndent();
    public T Write(string content);
    public T Write(StringSlice& slice);
    public T Write(StringSlice slice);
    public T Write(char content);
    public T Write(string content, int offset, int length);
    public T WriteLine();
    public T WriteLine(NewLine newLine);
    public T WriteLine(string content);
    public T WriteLine(char content);
    public T WriteLeafInline(LeafBlock leafBlock);
}
public class Markdig.Syntax.BlankLineBlock : Block {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Markdig.Syntax.Block : MarkdownObject {
    [CompilerGeneratedAttribute]
private ContainerBlock <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockParser <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBreakable>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLine <NewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveAfterProcessInlines>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StringSlice> <LinesBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StringSlice> <LinesAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessInlineDelegate ProcessInlinesBegin;
    [CompilerGeneratedAttribute]
private ProcessInlineDelegate ProcessInlinesEnd;
    public ContainerBlock Parent { get; internal set; }
    public BlockParser Parser { get; }
    public bool IsOpen { get; public set; }
    public bool IsBreakable { get; public set; }
    public NewLine NewLine { get; public set; }
    public bool RemoveAfterProcessInlines { get; public set; }
    public StringSlice TriviaBefore { get; public set; }
    public StringSlice TriviaAfter { get; public set; }
    public List`1<StringSlice> LinesBefore { get; public set; }
    public List`1<StringSlice> LinesAfter { get; public set; }
    protected Block(BlockParser parser);
    [CompilerGeneratedAttribute]
public sealed virtual ContainerBlock get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(ContainerBlock value);
    [CompilerGeneratedAttribute]
public sealed virtual BlockParser get_Parser();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOpen();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsOpen(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBreakable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsBreakable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual NewLine get_NewLine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NewLine(NewLine value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RemoveAfterProcessInlines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoveAfterProcessInlines(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaBefore();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaBefore(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaAfter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaAfter(StringSlice value);
    [CompilerGeneratedAttribute]
public List`1<StringSlice> get_LinesBefore();
    [CompilerGeneratedAttribute]
public void set_LinesBefore(List`1<StringSlice> value);
    [CompilerGeneratedAttribute]
public List`1<StringSlice> get_LinesAfter();
    [CompilerGeneratedAttribute]
public void set_LinesAfter(List`1<StringSlice> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProcessInlinesBegin(ProcessInlineDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProcessInlinesBegin(ProcessInlineDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProcessInlinesEnd(ProcessInlineDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProcessInlinesEnd(ProcessInlineDelegate value);
    [NullableContextAttribute("1")]
internal void OnProcessInlinesBegin(InlineProcessor state);
    [NullableContextAttribute("1")]
internal void OnProcessInlinesEnd(InlineProcessor state);
    public void UpdateSpanEnd(int spanEnd);
    [NullableContextAttribute("1")]
internal static Block FindRootMostContainerParent(Block block);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Markdig.Syntax.BlockExtensions : object {
    [ExtensionAttribute]
public static Block FindBlockAtPosition(Block rootBlock, int position);
    [ExtensionAttribute]
public static int FindClosestLine(MarkdownDocument root, int line);
    [ExtensionAttribute]
public static Block FindClosestBlock(Block rootBlock, int line);
    [ExtensionAttribute]
public static bool ContainsPosition(Block block, int position);
    [ExtensionAttribute]
public static int CompareToPosition(Block block, int position);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Markdig.Syntax.CharIteratorHelper : object {
    public static bool TrimStartAndCountNewLines(T& iterator, Int32& countNewLines);
    public static bool TrimStartAndCountNewLines(T& iterator, Int32& countNewLines, NewLine& lastLine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Syntax.CodeBlock : LeafBlock {
    [CompilerGeneratedAttribute]
private List`1<CodeBlockLine> <CodeBlockLines>k__BackingField;
    public List`1<CodeBlockLine> CodeBlockLines { get; }
    public CodeBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public List`1<CodeBlockLine> get_CodeBlockLines();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{GetType().Name} Count = {Count}")]
public abstract class Markdig.Syntax.ContainerBlock : Block {
    private Block[] children;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [NullableAttribute("2")]
public Block LastChild { get; }
    public int Count { get; private set; }
    public bool IsReadOnly { get; }
    public Block Item { get; public set; }
    [NullableContextAttribute("2")]
protected ContainerBlock(BlockParser parser);
    [NullableContextAttribute("2")]
public Block get_LastChild();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<Block> System.Collections.Generic.IEnumerable<Markdig.Syntax.Block>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(Block item);
    private void EnsureCapacity(int min);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Block item);
    public sealed virtual void CopyTo(Block[] array, int arrayIndex);
    public sealed virtual bool Remove(Block item);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(Block item);
    public sealed virtual void Insert(int index, Block item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual Block get_Item(int index);
    public sealed virtual void set_Item(int index, Block value);
    public void Sort(IComparer`1<Block> comparer);
    public void Sort(Comparison`1<Block> comparison);
}
public class Markdig.Syntax.EmptyBlock : LeafBlock {
    [NullableContextAttribute("2")]
public EmptyBlock(BlockParser parser);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Syntax.FencedCodeBlock : CodeBlock {
    [CompilerGeneratedAttribute]
private int <IndentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private char <FencedChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpeningFencedCharCount>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfterFencedChar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <UnescapedInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfterInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <UnescapedArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfterArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLine <InfoNewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaBeforeClosingFence>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosingFencedCharCount>k__BackingField;
    public int IndentCount { get; public set; }
    public char FencedChar { get; public set; }
    public int OpeningFencedCharCount { get; public set; }
    public StringSlice TriviaAfterFencedChar { get; public set; }
    public string Info { get; public set; }
    public StringSlice UnescapedInfo { get; public set; }
    public StringSlice TriviaAfterInfo { get; public set; }
    public string Arguments { get; public set; }
    public StringSlice UnescapedArguments { get; public set; }
    public StringSlice TriviaAfterArguments { get; public set; }
    public NewLine InfoNewLine { get; public set; }
    public StringSlice TriviaBeforeClosingFence { get; public set; }
    public int ClosingFencedCharCount { get; public set; }
    [NullableContextAttribute("1")]
public FencedCodeBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public int get_IndentCount();
    [CompilerGeneratedAttribute]
public void set_IndentCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_FencedChar();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FencedChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_OpeningFencedCharCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OpeningFencedCharCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaAfterFencedChar();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaAfterFencedChar(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Info();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Info(string value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_UnescapedInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnescapedInfo(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaAfterInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaAfterInfo(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Arguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_UnescapedArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnescapedArguments(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaAfterArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaAfterArguments(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual NewLine get_InfoNewLine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InfoNewLine(NewLine value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSlice get_TriviaBeforeClosingFence();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TriviaBeforeClosingFence(StringSlice value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ClosingFencedCharCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClosingFencedCharCount(int value);
}
[DebuggerDisplayAttribute("{GetType().Name} Line: {Line}, {Lines} Level: {Level}")]
public class Markdig.Syntax.HeadingBlock : LeafBlock {
    [CompilerGeneratedAttribute]
private char <HeaderChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSetext>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HeaderCharCount>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLine <SetextNewline>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfterAtxHeaderChar>k__BackingField;
    public char HeaderChar { get; public set; }
    public int Level { get; public set; }
    public bool IsSetext { get; public set; }
    public int HeaderCharCount { get; public set; }
    public NewLine SetextNewline { get; public set; }
    public StringSlice TriviaAfterAtxHeaderChar { get; public set; }
    [NullableContextAttribute("1")]
public HeadingBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public char get_HeaderChar();
    [CompilerGeneratedAttribute]
public void set_HeaderChar(char value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public bool get_IsSetext();
    [CompilerGeneratedAttribute]
public void set_IsSetext(bool value);
    [CompilerGeneratedAttribute]
public int get_HeaderCharCount();
    [CompilerGeneratedAttribute]
public void set_HeaderCharCount(int value);
    [CompilerGeneratedAttribute]
public NewLine get_SetextNewline();
    [CompilerGeneratedAttribute]
public void set_SetextNewline(NewLine value);
    [CompilerGeneratedAttribute]
public StringSlice get_TriviaAfterAtxHeaderChar();
    [CompilerGeneratedAttribute]
public void set_TriviaAfterAtxHeaderChar(StringSlice value);
}
public class Markdig.Syntax.HtmlBlock : LeafBlock {
    [CompilerGeneratedAttribute]
private HtmlBlockType <Type>k__BackingField;
    public HtmlBlockType Type { get; public set; }
    [NullableContextAttribute("2")]
public HtmlBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public HtmlBlockType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(HtmlBlockType value);
}
public enum Markdig.Syntax.HtmlBlockType : Enum {
    public int value__;
    public static HtmlBlockType DocumentType;
    public static HtmlBlockType CData;
    public static HtmlBlockType Comment;
    public static HtmlBlockType ProcessingInstruction;
    public static HtmlBlockType ScriptPreOrStyle;
    public static HtmlBlockType InterruptingBlock;
    public static HtmlBlockType NonInterruptingBlock;
}
[NullableContextAttribute("2")]
public interface Markdig.Syntax.IBlock {
    public int Column { get; public set; }
    public int Line { get; public set; }
    public ContainerBlock Parent { get; }
    public BlockParser Parser { get; }
    public bool IsOpen { get; public set; }
    public bool IsBreakable { get; public set; }
    public bool RemoveAfterProcessInlines { get; public set; }
    public StringSlice TriviaBefore { get; public set; }
    public StringSlice TriviaAfter { get; public set; }
    public abstract virtual int get_Column();
    public abstract virtual void set_Column(int value);
    public abstract virtual int get_Line();
    public abstract virtual void set_Line(int value);
    public abstract virtual ContainerBlock get_Parent();
    public abstract virtual BlockParser get_Parser();
    public abstract virtual bool get_IsOpen();
    public abstract virtual void set_IsOpen(bool value);
    public abstract virtual bool get_IsBreakable();
    public abstract virtual void set_IsBreakable(bool value);
    public abstract virtual bool get_RemoveAfterProcessInlines();
    public abstract virtual void set_RemoveAfterProcessInlines(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProcessInlinesBegin(ProcessInlineDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProcessInlinesBegin(ProcessInlineDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProcessInlinesEnd(ProcessInlineDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProcessInlinesEnd(ProcessInlineDelegate value);
    public abstract virtual StringSlice get_TriviaBefore();
    public abstract virtual void set_TriviaBefore(StringSlice value);
    public abstract virtual StringSlice get_TriviaAfter();
    public abstract virtual void set_TriviaAfter(StringSlice value);
}
[NullableContextAttribute("2")]
public interface Markdig.Syntax.IFencedBlock {
    public char FencedChar { get; public set; }
    public int OpeningFencedCharCount { get; public set; }
    public StringSlice TriviaAfterFencedChar { get; public set; }
    public string Info { get; public set; }
    public StringSlice UnescapedInfo { get; public set; }
    public StringSlice TriviaAfterInfo { get; public set; }
    public string Arguments { get; public set; }
    public StringSlice UnescapedArguments { get; public set; }
    public StringSlice TriviaAfterArguments { get; public set; }
    public NewLine InfoNewLine { get; public set; }
    public StringSlice TriviaBeforeClosingFence { get; public set; }
    public int ClosingFencedCharCount { get; public set; }
    public NewLine NewLine { get; public set; }
    public abstract virtual char get_FencedChar();
    public abstract virtual void set_FencedChar(char value);
    public abstract virtual int get_OpeningFencedCharCount();
    public abstract virtual void set_OpeningFencedCharCount(int value);
    public abstract virtual StringSlice get_TriviaAfterFencedChar();
    public abstract virtual void set_TriviaAfterFencedChar(StringSlice value);
    public abstract virtual string get_Info();
    public abstract virtual void set_Info(string value);
    public abstract virtual StringSlice get_UnescapedInfo();
    public abstract virtual void set_UnescapedInfo(StringSlice value);
    public abstract virtual StringSlice get_TriviaAfterInfo();
    public abstract virtual void set_TriviaAfterInfo(StringSlice value);
    public abstract virtual string get_Arguments();
    public abstract virtual void set_Arguments(string value);
    public abstract virtual StringSlice get_UnescapedArguments();
    public abstract virtual void set_UnescapedArguments(StringSlice value);
    public abstract virtual StringSlice get_TriviaAfterArguments();
    public abstract virtual void set_TriviaAfterArguments(StringSlice value);
    public abstract virtual NewLine get_InfoNewLine();
    public abstract virtual void set_InfoNewLine(NewLine value);
    public abstract virtual StringSlice get_TriviaBeforeClosingFence();
    public abstract virtual void set_TriviaBeforeClosingFence(StringSlice value);
    public abstract virtual int get_ClosingFencedCharCount();
    public abstract virtual void set_ClosingFencedCharCount(int value);
    public abstract virtual NewLine get_NewLine();
    public abstract virtual void set_NewLine(NewLine value);
}
[NullableContextAttribute("1")]
public interface Markdig.Syntax.IMarkdownObject {
    public abstract virtual void SetData(object key, object value);
    public abstract virtual bool ContainsData(object key);
    public abstract virtual object GetData(object key);
    public abstract virtual bool RemoveData(object key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("<{Url}>")]
public class Markdig.Syntax.Inlines.AutolinkInline : LeafInline {
    [CompilerGeneratedAttribute]
private bool <IsEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public bool IsEmail { get; public set; }
    public string Url { get; public set; }
    public AutolinkInline(string url);
    [CompilerGeneratedAttribute]
public bool get_IsEmail();
    [CompilerGeneratedAttribute]
public void set_IsEmail(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("`{Content}`")]
public class Markdig.Syntax.Inlines.CodeInline : LeafInline {
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelimiterCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <ContentWithTrivia>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstAndLastWasSpace>k__BackingField;
    public char Delimiter { get; public set; }
    public int DelimiterCount { get; public set; }
    public string Content { get; public set; }
    public StringSlice ContentWithTrivia { get; public set; }
    public bool FirstAndLastWasSpace { get; public set; }
    public CodeInline(string content);
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(char value);
    [CompilerGeneratedAttribute]
public int get_DelimiterCount();
    [CompilerGeneratedAttribute]
public void set_DelimiterCount(int value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public StringSlice get_ContentWithTrivia();
    [CompilerGeneratedAttribute]
public void set_ContentWithTrivia(StringSlice value);
    [CompilerGeneratedAttribute]
public bool get_FirstAndLastWasSpace();
    [CompilerGeneratedAttribute]
public void set_FirstAndLastWasSpace(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Syntax.Inlines.ContainerInline : Inline {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LeafBlock <ParentBlock>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Inline <FirstChild>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Inline <LastChild>k__BackingField;
    [NullableAttribute("2")]
public LeafBlock ParentBlock { get; internal set; }
    [NullableAttribute("2")]
public Inline FirstChild { get; private set; }
    [NullableAttribute("2")]
public Inline LastChild { get; private set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public LeafBlock get_ParentBlock();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ParentBlock(LeafBlock value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Inline get_FirstChild();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_FirstChild(Inline value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Inline get_LastChild();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_LastChild(Inline value);
    public void Clear();
    public virtual ContainerInline AppendChild(Inline child);
    public bool ContainsChild(Inline childToFind);
    public IEnumerable`1<T> FindDescendants();
    [IteratorStateMachineAttribute("Markdig.Syntax.Inlines.ContainerInline/<FindDescendantsInternal>d__16`1")]
internal IEnumerable`1<T> FindDescendantsInternal();
    public void MoveChildrenAfter(Inline parent);
    public void EmbraceChildrenBy(ContainerInline container);
    protected virtual void OnChildInsert(Inline child);
    protected virtual void OnChildRemove(Inline child);
    protected virtual void DumpChildTo(TextWriter writer, int level);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<Inline> System.Collections.Generic.IEnumerable<Markdig.Syntax.Inlines.Inline>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{ToLiteral()} {Type}")]
public abstract class Markdig.Syntax.Inlines.DelimiterInline : ContainerInline {
    [CompilerGeneratedAttribute]
private InlineParser <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private DelimiterType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    public InlineParser Parser { get; }
    public DelimiterType Type { get; public set; }
    public bool IsActive { get; public set; }
    protected DelimiterInline(InlineParser parser);
    [CompilerGeneratedAttribute]
public InlineParser get_Parser();
    [CompilerGeneratedAttribute]
public DelimiterType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DelimiterType value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
    public abstract virtual string ToLiteral();
    public void ReplaceByLiteral();
}
[FlagsAttribute]
public enum Markdig.Syntax.Inlines.DelimiterType : Enum {
    public int value__;
    public static DelimiterType Undefined;
    public static DelimiterType Open;
    public static DelimiterType Close;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Syntax.Inlines.EmphasisDelimiterInline : DelimiterInline {
    [CompilerGeneratedAttribute]
private EmphasisDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private char <DelimiterChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelimiterCount>k__BackingField;
    public EmphasisDescriptor Descriptor { get; }
    public char DelimiterChar { get; }
    public int DelimiterCount { get; public set; }
    public EmphasisDelimiterInline(InlineParser parser, EmphasisDescriptor descriptor);
    [CompilerGeneratedAttribute]
public EmphasisDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public char get_DelimiterChar();
    [CompilerGeneratedAttribute]
public int get_DelimiterCount();
    [CompilerGeneratedAttribute]
public void set_DelimiterCount(int value);
    public virtual string ToLiteral();
    public LiteralInline AsLiteralInline();
}
[DebuggerDisplayAttribute("{DelimiterChar} Count: {DelimiterCount}")]
public class Markdig.Syntax.Inlines.EmphasisInline : ContainerInline {
    [CompilerGeneratedAttribute]
private char <DelimiterChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelimiterCount>k__BackingField;
    public char DelimiterChar { get; public set; }
    [ObsoleteAttribute("Use `DelimiterCount == 2` instead", "False")]
public bool IsDouble { get; public set; }
    public int DelimiterCount { get; public set; }
    [CompilerGeneratedAttribute]
public char get_DelimiterChar();
    [CompilerGeneratedAttribute]
public void set_DelimiterChar(char value);
    public bool get_IsDouble();
    public void set_IsDouble(bool value);
    [CompilerGeneratedAttribute]
public int get_DelimiterCount();
    [CompilerGeneratedAttribute]
public void set_DelimiterCount(int value);
}
[DebuggerDisplayAttribute("{Original} -> {Transcoded}")]
public class Markdig.Syntax.Inlines.HtmlEntityInline : LeafInline {
    [CompilerGeneratedAttribute]
private StringSlice <Original>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <Transcoded>k__BackingField;
    public StringSlice Original { get; public set; }
    public StringSlice Transcoded { get; public set; }
    [CompilerGeneratedAttribute]
public StringSlice get_Original();
    [CompilerGeneratedAttribute]
public void set_Original(StringSlice value);
    [CompilerGeneratedAttribute]
public StringSlice get_Transcoded();
    [CompilerGeneratedAttribute]
public void set_Transcoded(StringSlice value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Tag}")]
public class Markdig.Syntax.Inlines.HtmlInline : LeafInline {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    public string Tag { get; public set; }
    public HtmlInline(string tag);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
}
[NullableContextAttribute("2")]
public interface Markdig.Syntax.Inlines.IInline {
    public ContainerInline Parent { get; }
    public Inline PreviousSibling { get; }
    public Inline NextSibling { get; }
    public bool IsClosed { get; public set; }
    public abstract virtual ContainerInline get_Parent();
    public abstract virtual Inline get_PreviousSibling();
    public abstract virtual Inline get_NextSibling();
    public abstract virtual bool get_IsClosed();
    public abstract virtual void set_IsClosed(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Markdig.Syntax.Inlines.Inline : MarkdownObject {
    [CompilerGeneratedAttribute]
private ContainerInline <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Inline <PreviousSibling>k__BackingField;
    [CompilerGeneratedAttribute]
private Inline <NextSibling>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    public ContainerInline Parent { get; internal set; }
    public Inline PreviousSibling { get; private set; }
    public Inline NextSibling { get; internal set; }
    public bool IsClosed { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ContainerInline get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(ContainerInline value);
    [CompilerGeneratedAttribute]
public sealed virtual Inline get_PreviousSibling();
    [CompilerGeneratedAttribute]
private void set_PreviousSibling(Inline value);
    [CompilerGeneratedAttribute]
public sealed virtual Inline get_NextSibling();
    [CompilerGeneratedAttribute]
internal void set_NextSibling(Inline value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsClosed(bool value);
    [NullableContextAttribute("1")]
public void InsertAfter(Inline next);
    [NullableContextAttribute("1")]
public void InsertBefore(Inline previous);
    public void Remove();
    [NullableContextAttribute("1")]
public Inline ReplaceBy(Inline inline, bool copyChildren);
    [NullableContextAttribute("0")]
public bool ContainsParentOfType();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Markdig.Syntax.Inlines.Inline/<FindParentOfType>d__21`1")]
public IEnumerable`1<T> FindParentOfType();
    [NullableContextAttribute("1")]
public T FirstParentOfType();
    [NullableContextAttribute("1")]
public Inline FindBestParent();
    [NullableContextAttribute("1")]
protected virtual void OnChildRemove(Inline child);
    [NullableContextAttribute("1")]
protected virtual void OnChildInsert(Inline child);
    [NullableContextAttribute("1")]
public void DumpTo(TextWriter writer);
    [NullableContextAttribute("1")]
public void DumpTo(TextWriter writer, int level);
    [NullableContextAttribute("1")]
protected virtual void DumpChildTo(TextWriter writer, int level);
}
public abstract class Markdig.Syntax.Inlines.LeafInline : Inline {
}
public class Markdig.Syntax.Inlines.LineBreakInline : LeafInline {
    [CompilerGeneratedAttribute]
private bool <IsHard>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBackslash>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLine <NewLine>k__BackingField;
    public bool IsHard { get; public set; }
    public bool IsBackslash { get; public set; }
    public NewLine NewLine { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsHard();
    [CompilerGeneratedAttribute]
public void set_IsHard(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBackslash();
    [CompilerGeneratedAttribute]
public void set_IsBackslash(bool value);
    [CompilerGeneratedAttribute]
public NewLine get_NewLine();
    [CompilerGeneratedAttribute]
public void set_NewLine(NewLine value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Syntax.Inlines.LinkDelimiterInline : DelimiterInline {
    [CompilerGeneratedAttribute]
private bool <IsImage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    public SourceSpan LabelSpan;
    [CompilerGeneratedAttribute]
private StringSlice <LabelWithTrivia>k__BackingField;
    public bool IsImage { get; public set; }
    public string Label { get; public set; }
    public StringSlice LabelWithTrivia { get; public set; }
    [NullableContextAttribute("1")]
public LinkDelimiterInline(InlineParser parser);
    [CompilerGeneratedAttribute]
public bool get_IsImage();
    [CompilerGeneratedAttribute]
public void set_IsImage(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public StringSlice get_LabelWithTrivia();
    [CompilerGeneratedAttribute]
public void set_LabelWithTrivia(StringSlice value);
    [NullableContextAttribute("1")]
public virtual string ToLiteral();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Url: {Url} Title: {Title} Image: {IsImage}")]
public class Markdig.Syntax.Inlines.LinkInline : ContainerInline {
    [CompilerGeneratedAttribute]
private bool <IsImage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    public Nullable`1<SourceSpan> LabelSpan;
    [CompilerGeneratedAttribute]
private StringSlice <LabelWithTrivia>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalLabel <LocalLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkReferenceDefinition <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkRefDefLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <LinkRefDefLabelWithTrivia>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaBeforeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UrlHasPointyBrackets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public Nullable`1<SourceSpan> UrlSpan;
    [CompilerGeneratedAttribute]
private StringSlice <UnescapedUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfterUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private GetUrlDelegate <GetDynamicUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private char <TitleEnclosingCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public Nullable`1<SourceSpan> TitleSpan;
    [CompilerGeneratedAttribute]
private StringSlice <UnescapedTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfterTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutoLink>k__BackingField;
    public bool IsImage { get; public set; }
    public string Label { get; public set; }
    public StringSlice LabelWithTrivia { get; public set; }
    public LocalLabel LocalLabel { get; public set; }
    public LinkReferenceDefinition Reference { get; public set; }
    public string LinkRefDefLabel { get; public set; }
    public StringSlice LinkRefDefLabelWithTrivia { get; public set; }
    public StringSlice TriviaBeforeUrl { get; public set; }
    public bool UrlHasPointyBrackets { get; public set; }
    public string Url { get; public set; }
    public StringSlice UnescapedUrl { get; public set; }
    public StringSlice TriviaAfterUrl { get; public set; }
    public GetUrlDelegate GetDynamicUrl { get; public set; }
    public char TitleEnclosingCharacter { get; public set; }
    public string Title { get; public set; }
    public StringSlice UnescapedTitle { get; public set; }
    public StringSlice TriviaAfterTitle { get; public set; }
    public bool IsShortcut { get; public set; }
    public bool IsAutoLink { get; public set; }
    [NullableContextAttribute("1")]
public LinkInline(string url, string title);
    [CompilerGeneratedAttribute]
public bool get_IsImage();
    [CompilerGeneratedAttribute]
public void set_IsImage(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public StringSlice get_LabelWithTrivia();
    [CompilerGeneratedAttribute]
public void set_LabelWithTrivia(StringSlice value);
    [CompilerGeneratedAttribute]
public LocalLabel get_LocalLabel();
    [CompilerGeneratedAttribute]
public void set_LocalLabel(LocalLabel value);
    [CompilerGeneratedAttribute]
public LinkReferenceDefinition get_Reference();
    [CompilerGeneratedAttribute]
public void set_Reference(LinkReferenceDefinition value);
    [CompilerGeneratedAttribute]
public string get_LinkRefDefLabel();
    [CompilerGeneratedAttribute]
public void set_LinkRefDefLabel(string value);
    [CompilerGeneratedAttribute]
public StringSlice get_LinkRefDefLabelWithTrivia();
    [CompilerGeneratedAttribute]
public void set_LinkRefDefLabelWithTrivia(StringSlice value);
    [CompilerGeneratedAttribute]
public StringSlice get_TriviaBeforeUrl();
    [CompilerGeneratedAttribute]
public void set_TriviaBeforeUrl(StringSlice value);
    [CompilerGeneratedAttribute]
public bool get_UrlHasPointyBrackets();
    [CompilerGeneratedAttribute]
public void set_UrlHasPointyBrackets(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public StringSlice get_UnescapedUrl();
    [CompilerGeneratedAttribute]
public void set_UnescapedUrl(StringSlice value);
    [CompilerGeneratedAttribute]
public StringSlice get_TriviaAfterUrl();
    [CompilerGeneratedAttribute]
public void set_TriviaAfterUrl(StringSlice value);
    [CompilerGeneratedAttribute]
public GetUrlDelegate get_GetDynamicUrl();
    [CompilerGeneratedAttribute]
public void set_GetDynamicUrl(GetUrlDelegate value);
    [CompilerGeneratedAttribute]
public char get_TitleEnclosingCharacter();
    [CompilerGeneratedAttribute]
public void set_TitleEnclosingCharacter(char value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public StringSlice get_UnescapedTitle();
    [CompilerGeneratedAttribute]
public void set_UnescapedTitle(StringSlice value);
    [CompilerGeneratedAttribute]
public StringSlice get_TriviaAfterTitle();
    [CompilerGeneratedAttribute]
public void set_TriviaAfterTitle(StringSlice value);
    [CompilerGeneratedAttribute]
public bool get_IsShortcut();
    [CompilerGeneratedAttribute]
public void set_IsShortcut(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoLink();
    [CompilerGeneratedAttribute]
public void set_IsAutoLink(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Content}")]
public class Markdig.Syntax.Inlines.LiteralInline : LeafInline {
    public StringSlice Content;
    [CompilerGeneratedAttribute]
private bool <IsFirstCharacterEscaped>k__BackingField;
    public bool IsFirstCharacterEscaped { get; public set; }
    public LiteralInline(StringSlice content);
    public LiteralInline(string text);
    [CompilerGeneratedAttribute]
public bool get_IsFirstCharacterEscaped();
    [CompilerGeneratedAttribute]
public void set_IsFirstCharacterEscaped(bool value);
    public virtual string ToString();
}
public enum Markdig.Syntax.Inlines.LocalLabel : Enum {
    public int value__;
    public static LocalLabel Local;
    public static LocalLabel Empty;
    public static LocalLabel None;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{GetType().Name} Line: {Line}, {Lines}")]
public abstract class Markdig.Syntax.LeafBlock : Block {
    private ContainerInline inline;
    public StringLineGroup Lines;
    [CompilerGeneratedAttribute]
private bool <ProcessInlines>k__BackingField;
    public ContainerInline Inline { get; public set; }
    public bool ProcessInlines { get; public set; }
    protected LeafBlock(BlockParser parser);
    public ContainerInline get_Inline();
    public void set_Inline(ContainerInline value);
    [CompilerGeneratedAttribute]
public bool get_ProcessInlines();
    [CompilerGeneratedAttribute]
public void set_ProcessInlines(bool value);
    public void AppendLine(StringSlice& slice, int column, int line, int sourceLinePosition, bool trackTrivia);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Syntax.LinkReferenceDefinition : LeafBlock {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    public SourceSpan LabelSpan;
    [CompilerGeneratedAttribute]
private StringSlice <LabelWithTrivia>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaBeforeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public SourceSpan UrlSpan;
    [CompilerGeneratedAttribute]
private StringSlice <UnescapedUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UrlHasPointyBrackets>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaBeforeTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public SourceSpan TitleSpan;
    [CompilerGeneratedAttribute]
private StringSlice <UnescapedTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private char <TitleEnclosingCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateLinkInlineDelegate <CreateLinkInline>k__BackingField;
    public string Label { get; public set; }
    public StringSlice LabelWithTrivia { get; public set; }
    public StringSlice TriviaBeforeUrl { get; public set; }
    public string Url { get; public set; }
    public StringSlice UnescapedUrl { get; public set; }
    public bool UrlHasPointyBrackets { get; public set; }
    public StringSlice TriviaBeforeTitle { get; public set; }
    public string Title { get; public set; }
    public StringSlice UnescapedTitle { get; public set; }
    public char TitleEnclosingCharacter { get; public set; }
    public CreateLinkInlineDelegate CreateLinkInline { get; public set; }
    public LinkReferenceDefinition(string label, string url, string title);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public StringSlice get_LabelWithTrivia();
    [CompilerGeneratedAttribute]
public void set_LabelWithTrivia(StringSlice value);
    [CompilerGeneratedAttribute]
public StringSlice get_TriviaBeforeUrl();
    [CompilerGeneratedAttribute]
public void set_TriviaBeforeUrl(StringSlice value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public StringSlice get_UnescapedUrl();
    [CompilerGeneratedAttribute]
public void set_UnescapedUrl(StringSlice value);
    [CompilerGeneratedAttribute]
public bool get_UrlHasPointyBrackets();
    [CompilerGeneratedAttribute]
public void set_UrlHasPointyBrackets(bool value);
    [CompilerGeneratedAttribute]
public StringSlice get_TriviaBeforeTitle();
    [CompilerGeneratedAttribute]
public void set_TriviaBeforeTitle(StringSlice value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public StringSlice get_UnescapedTitle();
    [CompilerGeneratedAttribute]
public void set_UnescapedTitle(StringSlice value);
    [CompilerGeneratedAttribute]
public char get_TitleEnclosingCharacter();
    [CompilerGeneratedAttribute]
public void set_TitleEnclosingCharacter(char value);
    [CompilerGeneratedAttribute]
public CreateLinkInlineDelegate get_CreateLinkInline();
    [CompilerGeneratedAttribute]
public void set_CreateLinkInline(CreateLinkInlineDelegate value);
    [NullableContextAttribute("1")]
public static bool TryParse(T& text, LinkReferenceDefinition& block);
    [NullableContextAttribute("1")]
public static bool TryParseTrivia(T& text, LinkReferenceDefinition& block, SourceSpan& triviaBeforeLabel, SourceSpan& labelWithTrivia, SourceSpan& triviaBeforeUrl, SourceSpan& unescapedUrl, SourceSpan& triviaBeforeTitle, SourceSpan& unescapedTitle, SourceSpan& triviaAfterTitle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Markdig.Syntax.LinkReferenceDefinitionExtensions : object {
    private static object DocumentKey;
    private static LinkReferenceDefinitionExtensions();
    [ExtensionAttribute]
public static bool ContainsLinkReferenceDefinition(MarkdownDocument document, string label);
    [ExtensionAttribute]
public static void SetLinkReferenceDefinition(MarkdownDocument document, string label, LinkReferenceDefinition linkReferenceDefinition, bool addGroup);
    [ExtensionAttribute]
public static bool TryGetLinkReferenceDefinition(MarkdownDocument document, string label, LinkReferenceDefinition& linkReferenceDefinition);
    [ExtensionAttribute]
public static LinkReferenceDefinitionGroup GetLinkReferenceDefinitions(MarkdownDocument document, bool addGroup);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Syntax.LinkReferenceDefinitionGroup : ContainerBlock {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, LinkReferenceDefinition> <Links>k__BackingField;
    public Dictionary`2<string, LinkReferenceDefinition> Links { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, LinkReferenceDefinition> get_Links();
    public void Set(string label, LinkReferenceDefinition link);
    public bool TryGet(string label, LinkReferenceDefinition& link);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Syntax.ListBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private bool <IsOrdered>k__BackingField;
    [CompilerGeneratedAttribute]
private char <BulletType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderedStart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultOrderedStart>k__BackingField;
    [CompilerGeneratedAttribute]
private char <OrderedDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLoose>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CountAllBlankLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CountBlankLinesReset>k__BackingField;
    public bool IsOrdered { get; public set; }
    public char BulletType { get; public set; }
    public string OrderedStart { get; public set; }
    public string DefaultOrderedStart { get; public set; }
    public char OrderedDelimiter { get; public set; }
    public bool IsLoose { get; public set; }
    internal int CountAllBlankLines { get; internal set; }
    internal int CountBlankLinesReset { get; internal set; }
    [NullableContextAttribute("1")]
public ListBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public bool get_IsOrdered();
    [CompilerGeneratedAttribute]
public void set_IsOrdered(bool value);
    [CompilerGeneratedAttribute]
public char get_BulletType();
    [CompilerGeneratedAttribute]
public void set_BulletType(char value);
    [CompilerGeneratedAttribute]
public string get_OrderedStart();
    [CompilerGeneratedAttribute]
public void set_OrderedStart(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultOrderedStart();
    [CompilerGeneratedAttribute]
public void set_DefaultOrderedStart(string value);
    [CompilerGeneratedAttribute]
public char get_OrderedDelimiter();
    [CompilerGeneratedAttribute]
public void set_OrderedDelimiter(char value);
    [CompilerGeneratedAttribute]
public bool get_IsLoose();
    [CompilerGeneratedAttribute]
public void set_IsLoose(bool value);
    [CompilerGeneratedAttribute]
internal int get_CountAllBlankLines();
    [CompilerGeneratedAttribute]
internal void set_CountAllBlankLines(int value);
    [CompilerGeneratedAttribute]
internal int get_CountBlankLinesReset();
    [CompilerGeneratedAttribute]
internal void set_CountBlankLinesReset(int value);
}
public class Markdig.Syntax.ListItemBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private int <ColumnWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <SourceBullet>k__BackingField;
    public int ColumnWidth { get; public set; }
    public int Order { get; public set; }
    public StringSlice SourceBullet { get; public set; }
    [NullableContextAttribute("1")]
public ListItemBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public int get_ColumnWidth();
    [CompilerGeneratedAttribute]
public void set_ColumnWidth(int value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public StringSlice get_SourceBullet();
    [CompilerGeneratedAttribute]
public void set_SourceBullet(StringSlice value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Markdig.Syntax.MarkdownDocument : ContainerBlock {
    public int LineCount;
    [CompilerGeneratedAttribute]
private List`1<int> <LineStartIndexes>k__BackingField;
    public List`1<int> LineStartIndexes { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<int> get_LineStartIndexes();
    [CompilerGeneratedAttribute]
public void set_LineStartIndexes(List`1<int> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Markdig.Syntax.MarkdownObject : object {
    [NullableAttribute("2")]
private DataEntries _attachedDatas;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    public SourceSpan Span;
    public int Column { get; public set; }
    public int Line { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Column();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Column(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Line();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Line(int value);
    public string ToPositionText();
    public sealed virtual void SetData(object key, object value);
    public sealed virtual bool ContainsData(object key);
    public sealed virtual object GetData(object key);
    public sealed virtual bool RemoveData(object key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Markdig.Syntax.MarkdownObjectExtensions : object {
    [IteratorStateMachineAttribute("Markdig.Syntax.MarkdownObjectExtensions/<Descendants>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<MarkdownObject> Descendants(MarkdownObject markdownObject);
    [ExtensionAttribute]
public static IEnumerable`1<T> Descendants(MarkdownObject markdownObject);
    [ExtensionAttribute]
public static IEnumerable`1<T> Descendants(ContainerInline inline);
    [ExtensionAttribute]
public static IEnumerable`1<T> Descendants(ContainerBlock block);
    [IteratorStateMachineAttribute("Markdig.Syntax.MarkdownObjectExtensions/<BlockDescendantsInternal>d__4`1")]
private static IEnumerable`1<T> BlockDescendantsInternal(ContainerBlock block);
    [IteratorStateMachineAttribute("Markdig.Syntax.MarkdownObjectExtensions/<InlineDescendantsInternal>d__5`1")]
private static IEnumerable`1<T> InlineDescendantsInternal(ContainerBlock block);
}
public class Markdig.Syntax.ParagraphBlock : LeafBlock {
    public int LastLine { get; }
    [NullableContextAttribute("2")]
public ParagraphBlock(BlockParser parser);
    public int get_LastLine();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Markdig.Syntax.QuoteBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private List`1<QuoteBlockLine> <QuoteLines>k__BackingField;
    [CompilerGeneratedAttribute]
private char <QuoteChar>k__BackingField;
    public List`1<QuoteBlockLine> QuoteLines { get; }
    public char QuoteChar { get; public set; }
    public QuoteBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public List`1<QuoteBlockLine> get_QuoteLines();
    [CompilerGeneratedAttribute]
public char get_QuoteChar();
    [CompilerGeneratedAttribute]
public void set_QuoteChar(char value);
}
public class Markdig.Syntax.QuoteBlockLine : object {
    [CompilerGeneratedAttribute]
private StringSlice <TriviaBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuoteChar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSpaceAfterQuoteChar>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <TriviaAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLine <NewLine>k__BackingField;
    public StringSlice TriviaBefore { get; public set; }
    public bool QuoteChar { get; public set; }
    public bool HasSpaceAfterQuoteChar { get; public set; }
    public StringSlice TriviaAfter { get; public set; }
    public NewLine NewLine { get; public set; }
    [CompilerGeneratedAttribute]
public StringSlice get_TriviaBefore();
    [CompilerGeneratedAttribute]
public void set_TriviaBefore(StringSlice value);
    [CompilerGeneratedAttribute]
public bool get_QuoteChar();
    [CompilerGeneratedAttribute]
public void set_QuoteChar(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasSpaceAfterQuoteChar();
    [CompilerGeneratedAttribute]
public void set_HasSpaceAfterQuoteChar(bool value);
    [CompilerGeneratedAttribute]
public StringSlice get_TriviaAfter();
    [CompilerGeneratedAttribute]
public void set_TriviaAfter(StringSlice value);
    [CompilerGeneratedAttribute]
public NewLine get_NewLine();
    [CompilerGeneratedAttribute]
public void set_NewLine(NewLine value);
}
public class Markdig.Syntax.SourceSpan : ValueType {
    public static SourceSpan Empty;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public int Start { get; public set; }
    public int End { get; public set; }
    public int Length { get; }
    public bool IsEmpty { get; }
    public SourceSpan(int start, int end);
    private static SourceSpan();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public void set_End(int value);
    public int get_Length();
    public bool get_IsEmpty();
    public SourceSpan MoveForward(int count);
    public sealed virtual bool Equals(SourceSpan other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SourceSpan left, SourceSpan right);
    public static bool op_Inequality(SourceSpan left, SourceSpan right);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Markdig.Syntax.ThematicBreakBlock : LeafBlock {
    [CompilerGeneratedAttribute]
private char <ThematicChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThematicCharCount>k__BackingField;
    public StringSlice Content;
    public char ThematicChar { get; public set; }
    public int ThematicCharCount { get; public set; }
    [NullableContextAttribute("1")]
public ThematicBreakBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public char get_ThematicChar();
    [CompilerGeneratedAttribute]
public void set_ThematicChar(char value);
    [CompilerGeneratedAttribute]
public int get_ThematicCharCount();
    [CompilerGeneratedAttribute]
public void set_ThematicCharCount(int value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
