[ExportAttribute("ConceptualDocumentProcessor", "Microsoft.DocAsCode.Plugins.IDocumentBuildStep")]
public class Microsoft.DocAsCode.Build.ConceptualDocuments.BuildConceptualDocument : BaseDocumentBuildStep {
    private static string ConceptualKey;
    private static string DocumentTypeKey;
    public string Name { get; }
    public int BuildOrder { get; }
    public virtual string get_Name();
    public virtual int get_BuildOrder();
    public virtual void Build(FileModel model, IHostService host);
    public sealed virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public sealed virtual string GetIncrementalContextHash();
    public sealed virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
    [CompilerGeneratedAttribute]
internal static void <Build>g__HandleYamlHeaderPair|6_0(string key, object value, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, bool> <Build>g__GetTitle|6_1(ImmutableDictionary`2<string, object> yamlHeader, SeparatedHtmlInfo info, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static bool <Build>g__TryGetStringValue|6_2(IDictionary`2<string, object> dictionary, string key, String& strValue);
}
[ExportAttribute("Microsoft.DocAsCode.Plugins.IDocumentProcessor")]
public class Microsoft.DocAsCode.Build.ConceptualDocuments.ConceptualDocumentProcessor : DisposableDocumentProcessor {
    private ResourcePoolManager`1<JsonSerializer> _serializerPool;
    private String[] SystemKeys;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDocumentBuildStep> <BuildSteps>k__BackingField;
    [ImportManyAttribute("ConceptualDocumentProcessor")]
public IEnumerable`1<IDocumentBuildStep> BuildSteps { get; public set; }
    public string Name { get; }
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IDocumentBuildStep> get_BuildSteps();
    [CompilerGeneratedAttribute]
public virtual void set_BuildSteps(IEnumerable`1<IDocumentBuildStep> value);
    public virtual string get_Name();
    public virtual ProcessingPriority GetProcessingPriority(FileAndType file);
    public virtual FileModel Load(FileAndType file, ImmutableDictionary`2<string, object> metadata);
    public virtual SaveResult Save(FileModel model);
    public virtual string GetIncrementalContextHash();
    public virtual void SaveIntermediateModel(FileModel model, Stream stream);
    public virtual FileModel LoadIntermediateModel(Stream stream);
    protected virtual void SerializeModel(object model, Stream stream);
    protected virtual object DeserializeModel(Stream stream);
    protected virtual void SerializeProperties(IDictionary`2<string, object> properties, Stream stream);
    protected virtual IDictionary`2<string, object> DeserializeProperties(Stream stream);
    protected virtual JsonSerializer GetSerializer();
}
[ExportAttribute("ConceptualDocumentProcessor", "Microsoft.DocAsCode.Plugins.IDocumentBuildStep")]
public class Microsoft.DocAsCode.Build.ConceptualDocuments.CountWord : BaseDocumentBuildStep {
    public string Name { get; }
    public int BuildOrder { get; }
    public virtual string get_Name();
    public virtual int get_BuildOrder();
    public virtual void Postbuild(ImmutableList`1<FileModel> models, IHostService host);
    public sealed virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public sealed virtual string GetIncrementalContextHash();
    public sealed virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
}
public static class Microsoft.DocAsCode.Build.ConceptualDocuments.HtmlDocumentUtility : object {
    public static SeparatedHtmlInfo SeparateHtml(string contentHtml);
    private static HtmlNode GetFirstNoneCommentChild(HtmlNode node);
}
public class Microsoft.DocAsCode.Build.ConceptualDocuments.SeparatedHtmlInfo : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Title { get; public set; }
    public string RawTitle { get; public set; }
    public string Content { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_RawTitle();
    [CompilerGeneratedAttribute]
public void set_RawTitle(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
}
[ExportAttribute("ConceptualDocumentProcessor", "Microsoft.DocAsCode.Plugins.IDocumentBuildStep")]
public class Microsoft.DocAsCode.Build.ConceptualDocuments.ValidateConceptualDocumentMetadata : BaseDocumentBuildStep {
    private static string ConceptualKey;
    public string Name { get; }
    public int BuildOrder { get; }
    public virtual string get_Name();
    public virtual int get_BuildOrder();
    public virtual void Build(FileModel model, IHostService host);
    public sealed virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public sealed virtual string GetIncrementalContextHash();
    public sealed virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
}
internal static class Microsoft.DocAsCode.Build.ConceptualDocuments.WordCounter : object {
    private static String[] ExcludeNodeXPaths;
    private static WordCounter();
    public static long CountWord(string html);
    private static int CountWordInText(string text);
}
