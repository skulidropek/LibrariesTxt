[FlagsAttribute]
public enum Microsoft.DocAsCode.Build.Engine.ApplyTemplateOptions : Enum {
    public int value__;
    public static ApplyTemplateOptions None;
    public static ApplyTemplateOptions ExportRawModel;
    public static ApplyTemplateOptions ExportViewModel;
    public static ApplyTemplateOptions TransformDocument;
    public static ApplyTemplateOptions All;
}
public class Microsoft.DocAsCode.Build.Engine.ApplyTemplateSettings : object {
    private static string RawModelExtension;
    private static string ViewModelExtension;
    private static string RawModelOutputFolderNameForDebug;
    private static string ViewModelOutputFolderNameForDebug;
    private static string DefaultOutputFolderForDebug;
    public static ExportSettings DefaultRawModelExportSettings;
    public static ExportSettings DefaultViewModelExportSettings;
    [CompilerGeneratedAttribute]
private string <InputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransformDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private ExportSettings <RawModelExportSettingsForDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private ExportSettings <ViewModelExportSettingsForDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private ExportSettings <RawModelExportSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ExportSettings <ViewModelExportSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ICustomHrefGenerator <HrefGenerator>k__BackingField;
    public string InputFolder { get; }
    public string OutputFolder { get; }
    public bool DebugMode { get; }
    public bool TransformDocument { get; public set; }
    public ExportSettings RawModelExportSettingsForDebug { get; public set; }
    public ExportSettings ViewModelExportSettingsForDebug { get; public set; }
    public ExportSettings RawModelExportSettings { get; public set; }
    public ExportSettings ViewModelExportSettings { get; public set; }
    public ICustomHrefGenerator HrefGenerator { get; public set; }
    public ApplyTemplateOptions Options { get; }
    public ApplyTemplateSettings(string inputFolder, string outputFolder);
    public ApplyTemplateSettings(string inputFolder, string outputFolder, string debugOutputFolder, bool debugMode);
    private static ApplyTemplateSettings();
    [CompilerGeneratedAttribute]
public string get_InputFolder();
    [CompilerGeneratedAttribute]
public string get_OutputFolder();
    [CompilerGeneratedAttribute]
public bool get_DebugMode();
    [CompilerGeneratedAttribute]
public bool get_TransformDocument();
    [CompilerGeneratedAttribute]
public void set_TransformDocument(bool value);
    [CompilerGeneratedAttribute]
public ExportSettings get_RawModelExportSettingsForDebug();
    [CompilerGeneratedAttribute]
public void set_RawModelExportSettingsForDebug(ExportSettings value);
    [CompilerGeneratedAttribute]
public ExportSettings get_ViewModelExportSettingsForDebug();
    [CompilerGeneratedAttribute]
public void set_ViewModelExportSettingsForDebug(ExportSettings value);
    [CompilerGeneratedAttribute]
public ExportSettings get_RawModelExportSettings();
    [CompilerGeneratedAttribute]
public void set_RawModelExportSettings(ExportSettings value);
    [CompilerGeneratedAttribute]
public ExportSettings get_ViewModelExportSettings();
    [CompilerGeneratedAttribute]
public void set_ViewModelExportSettings(ExportSettings value);
    [CompilerGeneratedAttribute]
public ICustomHrefGenerator get_HrefGenerator();
    [CompilerGeneratedAttribute]
public void set_HrefGenerator(ICustomHrefGenerator value);
    public ApplyTemplateOptions get_Options();
}
public class Microsoft.DocAsCode.Build.Engine.ArchiveResourceReader : ResourceFileReader {
    private object _locker;
    private ZipArchive _zipped;
    private bool disposed;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    public string Name { get; }
    public IEnumerable`1<string> Names { get; }
    public bool IsEmpty { get; }
    public ArchiveResourceReader(Stream stream, string name);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<string> get_Names();
    [CompilerGeneratedAttribute]
public virtual bool get_IsEmpty();
    public virtual Stream GetResourceStream(string name);
    public virtual string GetResource(string name);
    private Stream GetResourceStreamCore(string name);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.DocAsCode.Build.Engine.BasicXRefMapReader : object {
    [CompilerGeneratedAttribute]
private XRefMap <Map>k__BackingField;
    protected XRefMap Map { get; }
    public BasicXRefMapReader(XRefMap map);
    [CompilerGeneratedAttribute]
protected XRefMap get_Map();
    public virtual XRefSpec Find(string uid);
}
public static class Microsoft.DocAsCode.Build.Engine.BuildPhaseUtility : object {
    public static void RunBuildSteps(IEnumerable`1<IDocumentBuildStep> buildSteps, Action`1<IDocumentBuildStep> action);
    public static BuildMessageInfo GetPhaseMessageInfo(BuildMessage messages, BuildPhase phase);
    internal static void RelayBuildMessage(IncrementalBuildContext context, IEnumerable`1<HostService> hostServices, BuildPhase phase);
    private static IEnumerable`1<string> GetFilesToRelayMessages(IncrementalBuildContext context, HostService hs);
}
internal class Microsoft.DocAsCode.Build.Engine.CompilePhaseHandler : object {
    private List`1<TreeItemRestructure> _restructions;
    [CompilerGeneratedAttribute]
private DocumentBuildContext <Context>k__BackingField;
    public string Name { get; }
    public BuildPhase Phase { get; }
    public DocumentBuildContext Context { get; }
    public List`1<TreeItemRestructure> Restructions { get; }
    public CompilePhaseHandler(DocumentBuildContext context);
    public sealed virtual string get_Name();
    public sealed virtual BuildPhase get_Phase();
    [CompilerGeneratedAttribute]
public DocumentBuildContext get_Context();
    public List`1<TreeItemRestructure> get_Restructions();
    public sealed virtual void Handle(List`1<HostService> hostServices, int maxParallelism);
    private void Prepare(List`1<HostService> hostServices, int maxParallelism);
    private void DistributeTocRestructions(List`1<HostService> hostServices);
    private static void Prebuild(HostService hostService);
    private static void BuildArticle(HostService hostService, int maxParallelism);
    [CompilerGeneratedAttribute]
private void <Handle>b__11_0(HostService hostService);
}
internal class Microsoft.DocAsCode.Build.Engine.CompilePhaseHandlerWithIncremental : object {
    private CompilePhaseHandler _inner;
    [CompilerGeneratedAttribute]
private DocumentBuildContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementalBuildContext <IncrementalContext>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildVersionInfo <LastBuildVersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildVersionInfo <CurrentBuildVersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildMessageInfo <LastBuildMessageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildMessageInfo <CurrentBuildMessageInfo>k__BackingField;
    public string Name { get; }
    public BuildPhase Phase { get; }
    public DocumentBuildContext Context { get; }
    public IncrementalBuildContext IncrementalContext { get; }
    public BuildVersionInfo LastBuildVersionInfo { get; }
    public BuildVersionInfo CurrentBuildVersionInfo { get; }
    public BuildMessageInfo LastBuildMessageInfo { get; }
    public BuildMessageInfo CurrentBuildMessageInfo { get; }
    public CompilePhaseHandlerWithIncremental(CompilePhaseHandler inner);
    public sealed virtual string get_Name();
    public sealed virtual BuildPhase get_Phase();
    [CompilerGeneratedAttribute]
public DocumentBuildContext get_Context();
    [CompilerGeneratedAttribute]
public IncrementalBuildContext get_IncrementalContext();
    [CompilerGeneratedAttribute]
public BuildVersionInfo get_LastBuildVersionInfo();
    [CompilerGeneratedAttribute]
public BuildVersionInfo get_CurrentBuildVersionInfo();
    [CompilerGeneratedAttribute]
public BuildMessageInfo get_LastBuildMessageInfo();
    [CompilerGeneratedAttribute]
public BuildMessageInfo get_CurrentBuildMessageInfo();
    public sealed virtual void Handle(List`1<HostService> hostServices, int maxParallelism);
    private void PreHandle(List`1<HostService> hostServices);
    private void PostHandle(List`1<HostService> hostServices);
    private void LoadContextInfo(List`1<HostService> hostServices);
    private void ReportReference(List`1<HostService> hostServices);
    private void ReportDependency(HashSet`1<string> nonIncreSet);
    private void RegisterUnloadedTocRestructions(HashSet`1<string> nonIncreSet);
    private void UpdateTocRestructions(IEnumerable`1<HostService> hostServices);
    private void ReportDependency(IEnumerable`1<HostService> hostServices);
    private void ReportUidDependency(IEnumerable`1<HostService> hostServices);
    private void ReportFileDependency(IEnumerable`1<HostService> hostServices);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.CompilePhaseHandlerWithIncremental/<GetFileDependency>d__35")]
private IEnumerable`1<DependencyItem> GetFileDependency(FileModel model);
    private IEnumerable`1<DependencyItem> GetUidDependency(FileModel model);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.CompilePhaseHandlerWithIncremental/<GetUidDependencyForOverwrite>d__37")]
private IEnumerable`1<DependencyItem> GetUidDependencyForOverwrite(FileModel model);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.CompilePhaseHandlerWithIncremental/<GetUidDependencyCore>d__38")]
private IEnumerable`1<DependencyItem> GetUidDependencyCore(FileModel model);
    private bool IsBookmark(LinkSourceInfo info);
}
public class Microsoft.DocAsCode.Build.Engine.CompositeResourceReader : ResourceFileReader {
    private ResourceFileReader[] _collectionsInOverriddenOrder;
    private bool disposed;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    public string Name { get; }
    public IEnumerable`1<string> Names { get; }
    public bool IsEmpty { get; }
    public CompositeResourceReader(IEnumerable`1<ResourceFileReader> collectionsInOverriddenOrder);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<string> get_Names();
    [CompilerGeneratedAttribute]
public virtual bool get_IsEmpty();
    public virtual Stream GetResourceStream(string name);
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.DocAsCode.Build.Engine.Constants : object {
    public static string DefaultLanguage;
    public static string ManifestFileName;
}
[ExportAttribute("dfmJsonTokenTree", "Microsoft.DocAsCode.Plugins.IMarkdownServiceProvider")]
public class Microsoft.DocAsCode.Build.Engine.DfmJsonTokenTreeServiceProvider : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMarkdownTokenTreeValidator> <TokenTreeValidator>k__BackingField;
    [ImportManyAttribute]
public IEnumerable`1<IMarkdownTokenTreeValidator> TokenTreeValidator { get; public set; }
    public sealed virtual IMarkdownService CreateMarkdownService(MarkdownServiceParameters parameters);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMarkdownTokenTreeValidator> get_TokenTreeValidator();
    [CompilerGeneratedAttribute]
public void set_TokenTreeValidator(IEnumerable`1<IMarkdownTokenTreeValidator> value);
}
[ExportAttribute("dfm", "Microsoft.DocAsCode.Plugins.IMarkdownServiceProvider")]
[ExportAttribute("dfm-2.13", "Microsoft.DocAsCode.Plugins.IMarkdownServiceProvider")]
public class Microsoft.DocAsCode.Build.Engine.DfmLegacyServiceProvider : DfmServiceProvider {
    protected bool LegacyMode { get; }
    protected virtual bool get_LegacyMode();
}
[ExportAttribute("dfm-latest", "Microsoft.DocAsCode.Plugins.IMarkdownServiceProvider")]
[ExportAttribute("dfm-2.15", "Microsoft.DocAsCode.Plugins.IMarkdownServiceProvider")]
public class Microsoft.DocAsCode.Build.Engine.DfmServiceProvider : object {
    [CompilerGeneratedAttribute]
private bool <ShouldFixId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMarkdownTokenTreeValidator> <TokenTreeValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDfmCustomizedRendererPartProvider> <DfmRendererPartProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDfmEngineCustomizer> <DfmEngineCustomizers>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompositionContainer <Container>k__BackingField;
    protected bool LegacyMode { get; }
    protected bool ShouldFixId { get; protected set; }
    [ImportManyAttribute]
public IEnumerable`1<IMarkdownTokenTreeValidator> TokenTreeValidator { get; public set; }
    [ImportManyAttribute]
public IEnumerable`1<IDfmCustomizedRendererPartProvider> DfmRendererPartProviders { get; public set; }
    [ImportManyAttribute]
public IEnumerable`1<IDfmEngineCustomizer> DfmEngineCustomizers { get; public set; }
    [ImportAttribute]
public ICompositionContainer Container { get; public set; }
    public sealed virtual IMarkdownService CreateMarkdownService(MarkdownServiceParameters parameters);
    protected virtual bool get_LegacyMode();
    [CompilerGeneratedAttribute]
protected virtual bool get_ShouldFixId();
    [CompilerGeneratedAttribute]
protected virtual void set_ShouldFixId(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMarkdownTokenTreeValidator> get_TokenTreeValidator();
    [CompilerGeneratedAttribute]
public void set_TokenTreeValidator(IEnumerable`1<IMarkdownTokenTreeValidator> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDfmCustomizedRendererPartProvider> get_DfmRendererPartProviders();
    [CompilerGeneratedAttribute]
public void set_DfmRendererPartProviders(IEnumerable`1<IDfmCustomizedRendererPartProvider> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDfmEngineCustomizer> get_DfmEngineCustomizers();
    [CompilerGeneratedAttribute]
public void set_DfmEngineCustomizers(IEnumerable`1<IDfmEngineCustomizer> value);
    [CompilerGeneratedAttribute]
public ICompositionContainer get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(ICompositionContainer value);
}
public class Microsoft.DocAsCode.Build.Engine.DocumentBuildContext : object {
    private static HttpClient _client;
    private ConcurrentDictionary`2<string, TocInfo> _tableOfContents;
    private Task`1<IXRefContainerReader> _reader;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <_xrefMapUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <_xrefServiceUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildOutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupInfo <GroupInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <XRefTags>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyTemplateSettings <ApplyTemplateSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <ExternalReferencePackages>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, FileAndType> <AllSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxHttpParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> <FileMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, XRefSpec> <XRefSpecMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, HashSet`1<string>> <TocMap>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <XRef>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootTocPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownService <MarkdownService>k__BackingField;
    [CompilerGeneratedAttribute]
private ICustomHrefGenerator <HrefGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementalBuildContext <IncrementalBuildContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentBag`1<ManifestItem> <ManifestItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, XRefSpec> <ExternalXRefSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, object> <UnknownUids>k__BackingField;
    private ImmutableArray`1<string> _xrefMapUrls { get; }
    private ImmutableArray`1<string> _xrefServiceUrls { get; }
    public string BuildOutputFolder { get; }
    public string VersionName { get; }
    public string VersionFolder { get; }
    public GroupInfo GroupInfo { get; }
    public List`1<string> XRefTags { get; }
    public ApplyTemplateSettings ApplyTemplateSettings { get; public set; }
    public ImmutableArray`1<string> ExternalReferencePackages { get; }
    public ImmutableDictionary`2<string, FileAndType> AllSourceFiles { get; }
    public int MaxParallelism { get; }
    public int MaxHttpParallelism { get; }
    public ConcurrentDictionary`2<string, string> FileMap { get; }
    public ConcurrentDictionary`2<string, XRefSpec> XRefSpecMap { get; }
    public ConcurrentDictionary`2<string, HashSet`1<string>> TocMap { get; }
    public HashSet`1<string> XRef { get; }
    public string RootTocPath { get; }
    public IMarkdownService MarkdownService { get; public set; }
    public ICustomHrefGenerator HrefGenerator { get; }
    internal IncrementalBuildContext IncrementalBuildContext { get; internal set; }
    internal ConcurrentBag`1<ManifestItem> ManifestItems { get; }
    private ConcurrentDictionary`2<string, XRefSpec> ExternalXRefSpec { get; }
    private ConcurrentDictionary`2<string, object> UnknownUids { get; }
    public DocumentBuildContext(string buildOutputFolder);
    public DocumentBuildContext(string buildOutputFolder, IEnumerable`1<FileAndType> allSourceFiles, ImmutableArray`1<string> externalReferencePackages, ImmutableArray`1<string> xrefMaps, int maxParallelism, string baseFolder, string versionName, ApplyTemplateSettings applyTemplateSetting, string rootTocPath);
    public DocumentBuildContext(string buildOutputFolder, IEnumerable`1<FileAndType> allSourceFiles, ImmutableArray`1<string> externalReferencePackages, ImmutableArray`1<string> xrefMaps, int maxParallelism, string baseFolder, string versionName, ApplyTemplateSettings applyTemplateSetting, string rootTocPath, string versionFolder, ImmutableArray`1<string> xrefServiceUrls);
    public DocumentBuildContext(DocumentBuildParameters parameters);
    public DocumentBuildContext(string buildOutputFolder, IEnumerable`1<FileAndType> allSourceFiles, ImmutableArray`1<string> externalReferencePackages, ImmutableArray`1<string> xrefMaps, int maxParallelism, string baseFolder, string versionName, ApplyTemplateSettings applyTemplateSetting, string rootTocPath, string versionFolder, ImmutableArray`1<string> xrefServiceUrls, GroupInfo groupInfo, List`1<string> xrefTags);
    private static DocumentBuildContext();
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> get__xrefMapUrls();
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> get__xrefServiceUrls();
    [CompilerGeneratedAttribute]
public string get_BuildOutputFolder();
    [CompilerGeneratedAttribute]
public sealed virtual string get_VersionName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_VersionFolder();
    [CompilerGeneratedAttribute]
public sealed virtual GroupInfo get_GroupInfo();
    [CompilerGeneratedAttribute]
public List`1<string> get_XRefTags();
    [CompilerGeneratedAttribute]
public ApplyTemplateSettings get_ApplyTemplateSettings();
    [CompilerGeneratedAttribute]
public void set_ApplyTemplateSettings(ApplyTemplateSettings value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_ExternalReferencePackages();
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, FileAndType> get_AllSourceFiles();
    [CompilerGeneratedAttribute]
public int get_MaxParallelism();
    [CompilerGeneratedAttribute]
public int get_MaxHttpParallelism();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, string> get_FileMap();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, XRefSpec> get_XRefSpecMap();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, HashSet`1<string>> get_TocMap();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_XRef();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootTocPath();
    [CompilerGeneratedAttribute]
public IMarkdownService get_MarkdownService();
    [CompilerGeneratedAttribute]
public void set_MarkdownService(IMarkdownService value);
    [CompilerGeneratedAttribute]
public sealed virtual ICustomHrefGenerator get_HrefGenerator();
    [CompilerGeneratedAttribute]
internal IncrementalBuildContext get_IncrementalBuildContext();
    [CompilerGeneratedAttribute]
internal void set_IncrementalBuildContext(IncrementalBuildContext value);
    [CompilerGeneratedAttribute]
internal ConcurrentBag`1<ManifestItem> get_ManifestItems();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, XRefSpec> get_ExternalXRefSpec();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, object> get_UnknownUids();
    public void ReportExternalXRefSpec(XRefSpec spec);
    internal void SaveExternalXRefSpec(TextWriter writer);
    internal void LoadExternalXRefSpec(TextReader reader);
    public void ResolveExternalXRefSpec();
    private void ResolveExternalXRefSpecForSpecs();
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.DocumentBuildContext/<ResolveExternalXRefSpecForNoneSpecsAsync>d__85")]
public Task ResolveExternalXRefSpecForNoneSpecsAsync();
    private List`1<string> ResolveByExternalReferencePackages(List`1<string> uidList, ConcurrentDictionary`2<string, XRefSpec> externalXRefSpec);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.DocumentBuildContext/<ResolveByXRefServiceAsync>d__87")]
private Task`1<List`1<string>> ResolveByXRefServiceAsync(List`1<string> uidList, ConcurrentDictionary`2<string, XRefSpec> externalXRefSpec);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.DocumentBuildContext/<QueryByHttpRequestAsync>d__88")]
internal Task`1<IList`1<XRefSpec>> QueryByHttpRequestAsync(HttpClient client, string requestUrl, string uid);
    private List`1<string> ResolveByXRefMaps(List`1<string> uidList, ConcurrentDictionary`2<string, XRefSpec> externalXRefSpec);
    private List`1<XRefMap> LoadXRefMaps();
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.DocumentBuildContext/<LoadXRefMap>d__91")]
private Task`1<XRefMap> LoadXRefMap(string url, HttpClient client);
    public sealed virtual string GetFilePath(string key);
    public sealed virtual void SetFilePath(string key, string filePath);
    public string UpdateHref(string href);
    public string UpdateHref(string href, RelativePath fromFile);
    private string UpdateHrefCore(string href, RelativePath fromFile);
    public sealed virtual void RegisterInternalXrefSpec(XRefSpec xrefSpec);
    public sealed virtual void RegisterInternalXrefSpecBookmark(string uid, string bookmark);
    public sealed virtual XRefSpec GetXrefSpec(string uid);
    public sealed virtual IImmutableList`1<string> GetTocFileKeySet(string key);
    public sealed virtual void RegisterToc(string tocFileKey, string fileKey);
    public sealed virtual void RegisterTocInfo(TocInfo toc);
    public sealed virtual IImmutableList`1<TocInfo> GetTocInfo();
    private ImmutableDictionary`2<string, FileAndType> GetAllSourceFiles(IEnumerable`1<FileAndType> allSourceFiles);
    private static XRefSpec GetExternalReference(ExternalReferencePackageCollection externalReferences, string uid);
    private static IReadOnlyList`1<string> GetFallbackFolders(ImmutableDictionary`2<string, object> markdownEngineParameters);
    [CompilerGeneratedAttribute]
private bool <ResolveExternalXRefSpecForNoneSpecsAsync>b__85_0(string uid);
    [CompilerGeneratedAttribute]
private bool <ResolveExternalXRefSpecForNoneSpecsAsync>b__85_1(XRefSpec spec);
    [CompilerGeneratedAttribute]
private Task`1<XRefMap> <LoadXRefMaps>b__90_0(string url);
}
public class Microsoft.DocAsCode.Build.Engine.DocumentBuilder : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDocumentProcessor> <Processors>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IInputMetadataValidator> <MetadataValidators>k__BackingField;
    private string _intermediateFolder;
    private CompositionHost _container;
    private PostProcessorsManager _postProcessorsManager;
    private List`1<Assembly> _assemblyList;
    private string _commitFromSHA;
    private string _commitToSHA;
    private string _templateHash;
    private bool _cleanupCacheHistory;
    [ImportManyAttribute]
internal IEnumerable`1<IDocumentProcessor> Processors { get; internal set; }
    [ImportManyAttribute]
internal IEnumerable`1<IInputMetadataValidator> MetadataValidators { get; internal set; }
    public DocumentBuilder(IEnumerable`1<Assembly> assemblies, ImmutableArray`1<string> postProcessorNames, string templateHash, string intermediateFolder, string commitFromSHA, string commitToSHA, bool cleanupCacheHistory);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<IDocumentProcessor> get_Processors();
    [CompilerGeneratedAttribute]
internal void set_Processors(IEnumerable`1<IDocumentProcessor> value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<IInputMetadataValidator> get_MetadataValidators();
    [CompilerGeneratedAttribute]
internal void set_MetadataValidators(IEnumerable`1<IInputMetadataValidator> value);
    public void Build(DocumentBuildParameters parameter);
    public void Build(IList`1<DocumentBuildParameters> parameters, string outputDirectory);
    internal Manifest BuildCore(DocumentBuildParameters parameter, IMarkdownServiceProvider markdownServiceProvider, BuildInfo currentBuildInfo, BuildInfo lastBuildInfo);
    private List`1<IDocumentProcessor> LoadSchemaDrivenDocumentProcessors(DocumentBuildParameters parameter);
    private MarkdigMarkdownService CreateMarkdigMarkdownService(DocumentBuildParameters parameters);
    private void ClearCacheExcept(string subFolder);
    private IEnumerable`1<IInputMetadataValidator> GetMetadataRules(DocumentBuildParameters parameter);
    private static void SaveManifest(Manifest manifest);
    private static string ComputePluginHash(List`1<Assembly> assemblyList);
    private static string TryGetPublishTargetSiteHostNameFromEnvironment();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private IMarkdownServiceProvider <Build>g__GetMarkdownServiceProvider|18_0(<>c__DisplayClass18_0& );
    [CompilerGeneratedAttribute]
private void <Build>g__EnrichCurrentBuildInfo|18_1(BuildInfo current, BuildInfo last, <>c__DisplayClass18_0& );
}
public class Microsoft.DocAsCode.Build.Engine.DocumentBuildParameters : MarshalByRefObject {
    [CompilerGeneratedAttribute]
private FileCollection <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputBaseDir>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, JArray> <TagParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <ExternalReferencePackages>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <XRefMaps>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <XRefServiceUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private FileMetadata <FileMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <PostProcessors>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateManager <TemplateManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyTemplateSettings <ApplyTemplateSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxHttpParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MarkdownEngineName>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, object> <MarkdownEngineParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionDir>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupInfo <GroupInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <XRefTags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootTocPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateDir>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ChangeKindWithDependency> <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceRebuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcePostProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomLinkResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LruSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepFileLink>k__BackingField;
    [CompilerGeneratedAttribute]
private SitemapOptions <SitemapOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaLicense>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FALName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableGitFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<FolderRedirectionRule> <OverwriteFragmentsRedirectionRules>k__BackingField;
    [IncrementalIgnoreAttribute]
public FileCollection Files { get; public set; }
    [IncrementalIgnoreAttribute]
public string OutputBaseDir { get; public set; }
    [IncrementalIgnoreAttribute]
public IReadOnlyDictionary`2<string, JArray> TagParameters { get; public set; }
    public ImmutableArray`1<string> ExternalReferencePackages { get; public set; }
    public ImmutableArray`1<string> XRefMaps { get; public set; }
    public ImmutableArray`1<string> XRefServiceUrls { get; public set; }
    public ImmutableDictionary`2<string, object> Metadata { get; public set; }
    [IncrementalIgnoreAttribute]
public FileMetadata FileMetadata { get; public set; }
    [IncrementalIgnoreAttribute]
public ImmutableArray`1<string> PostProcessors { get; public set; }
    [IncrementalIgnoreAttribute]
public TemplateManager TemplateManager { get; public set; }
    [IncrementalIgnoreAttribute]
public ApplyTemplateSettings ApplyTemplateSettings { get; public set; }
    [IncrementalIgnoreAttribute]
public int MaxParallelism { get; public set; }
    [IncrementalIgnoreAttribute]
public int MaxHttpParallelism { get; public set; }
    public string MarkdownEngineName { get; public set; }
    [IncrementalIgnoreAttribute]
public ImmutableDictionary`2<string, object> MarkdownEngineParameters { get; public set; }
    [IncrementalIgnoreAttribute]
public string VersionName { get; public set; }
    [IncrementalIgnoreAttribute]
public string VersionDir { get; public set; }
    [IncrementalIgnoreAttribute]
public GroupInfo GroupInfo { get; public set; }
    [IncrementalIgnoreAttribute]
public List`1<string> XRefTags { get; public set; }
    public string RootTocPath { get; public set; }
    [IncrementalIgnoreAttribute]
public string TemplateDir { get; public set; }
    [IncrementalIgnoreAttribute]
public ImmutableDictionary`2<string, ChangeKindWithDependency> Changes { get; public set; }
    [IncrementalIgnoreAttribute]
public bool ForceRebuild { get; public set; }
    [IncrementalIgnoreAttribute]
public bool ForcePostProcess { get; public set; }
    public string CustomLinkResolver { get; public set; }
    [IncrementalIgnoreAttribute]
public int LruSize { get; public set; }
    [IncrementalIgnoreAttribute]
public bool KeepFileLink { get; public set; }
    [IncrementalIgnoreAttribute]
public SitemapOptions SitemapOptions { get; public set; }
    [IncrementalIgnoreAttribute]
public string SchemaLicense { get; public set; }
    public string FALName { get; public set; }
    public bool DisableGitFeatures { get; public set; }
    public ImmutableArray`1<FolderRedirectionRule> OverwriteFragmentsRedirectionRules { get; public set; }
    [CompilerGeneratedAttribute]
public FileCollection get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(FileCollection value);
    [CompilerGeneratedAttribute]
public string get_OutputBaseDir();
    [CompilerGeneratedAttribute]
public void set_OutputBaseDir(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, JArray> get_TagParameters();
    [CompilerGeneratedAttribute]
public void set_TagParameters(IReadOnlyDictionary`2<string, JArray> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_ExternalReferencePackages();
    [CompilerGeneratedAttribute]
public void set_ExternalReferencePackages(ImmutableArray`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_XRefMaps();
    [CompilerGeneratedAttribute]
public void set_XRefMaps(ImmutableArray`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_XRefServiceUrls();
    [CompilerGeneratedAttribute]
public void set_XRefServiceUrls(ImmutableArray`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(ImmutableDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public FileMetadata get_FileMetadata();
    [CompilerGeneratedAttribute]
public void set_FileMetadata(FileMetadata value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_PostProcessors();
    [CompilerGeneratedAttribute]
public void set_PostProcessors(ImmutableArray`1<string> value);
    [CompilerGeneratedAttribute]
public TemplateManager get_TemplateManager();
    [CompilerGeneratedAttribute]
public void set_TemplateManager(TemplateManager value);
    [CompilerGeneratedAttribute]
public ApplyTemplateSettings get_ApplyTemplateSettings();
    [CompilerGeneratedAttribute]
public void set_ApplyTemplateSettings(ApplyTemplateSettings value);
    [CompilerGeneratedAttribute]
public int get_MaxParallelism();
    [CompilerGeneratedAttribute]
public void set_MaxParallelism(int value);
    [CompilerGeneratedAttribute]
public int get_MaxHttpParallelism();
    [CompilerGeneratedAttribute]
public void set_MaxHttpParallelism(int value);
    [CompilerGeneratedAttribute]
public string get_MarkdownEngineName();
    [CompilerGeneratedAttribute]
public void set_MarkdownEngineName(string value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, object> get_MarkdownEngineParameters();
    [CompilerGeneratedAttribute]
public void set_MarkdownEngineParameters(ImmutableDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_VersionName();
    [CompilerGeneratedAttribute]
public void set_VersionName(string value);
    [CompilerGeneratedAttribute]
public string get_VersionDir();
    [CompilerGeneratedAttribute]
public void set_VersionDir(string value);
    [CompilerGeneratedAttribute]
public GroupInfo get_GroupInfo();
    [CompilerGeneratedAttribute]
public void set_GroupInfo(GroupInfo value);
    [CompilerGeneratedAttribute]
public List`1<string> get_XRefTags();
    [CompilerGeneratedAttribute]
public void set_XRefTags(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_RootTocPath();
    [CompilerGeneratedAttribute]
public void set_RootTocPath(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateDir();
    [CompilerGeneratedAttribute]
public void set_TemplateDir(string value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ChangeKindWithDependency> get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(ImmutableDictionary`2<string, ChangeKindWithDependency> value);
    [CompilerGeneratedAttribute]
public bool get_ForceRebuild();
    [CompilerGeneratedAttribute]
public void set_ForceRebuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForcePostProcess();
    [CompilerGeneratedAttribute]
public void set_ForcePostProcess(bool value);
    [CompilerGeneratedAttribute]
public string get_CustomLinkResolver();
    [CompilerGeneratedAttribute]
public void set_CustomLinkResolver(string value);
    [CompilerGeneratedAttribute]
public int get_LruSize();
    [CompilerGeneratedAttribute]
public void set_LruSize(int value);
    [CompilerGeneratedAttribute]
public bool get_KeepFileLink();
    [CompilerGeneratedAttribute]
public void set_KeepFileLink(bool value);
    [CompilerGeneratedAttribute]
public SitemapOptions get_SitemapOptions();
    [CompilerGeneratedAttribute]
public void set_SitemapOptions(SitemapOptions value);
    [CompilerGeneratedAttribute]
public string get_SchemaLicense();
    [CompilerGeneratedAttribute]
public void set_SchemaLicense(string value);
    [CompilerGeneratedAttribute]
public string get_FALName();
    [CompilerGeneratedAttribute]
public void set_FALName(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableGitFeatures();
    [CompilerGeneratedAttribute]
public void set_DisableGitFeatures(bool value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<FolderRedirectionRule> get_OverwriteFragmentsRedirectionRules();
    [CompilerGeneratedAttribute]
public void set_OverwriteFragmentsRedirectionRules(ImmutableArray`1<FolderRedirectionRule> value);
    public DocumentBuildParameters Clone();
}
public class Microsoft.DocAsCode.Build.Engine.EmptyResourceReader : ResourceFileReader {
    private static IEnumerable`1<string> Empty;
    public bool IsEmpty { get; }
    public string Name { get; }
    public IEnumerable`1<string> Names { get; }
    private static EmptyResourceReader();
    public virtual bool get_IsEmpty();
    public virtual string get_Name();
    public virtual IEnumerable`1<string> get_Names();
    public virtual Stream GetResourceStream(string name);
}
public class Microsoft.DocAsCode.Build.Engine.ExportSettings : object {
    [CompilerGeneratedAttribute]
private bool <Export>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <PathRewriter>k__BackingField;
    public bool Export { get; public set; }
    public string OutputFolder { get; public set; }
    public string Extension { get; public set; }
    public Func`2<string, string> PathRewriter { get; public set; }
    public ExportSettings(ExportSettings settings);
    [CompilerGeneratedAttribute]
public bool get_Export();
    [CompilerGeneratedAttribute]
public void set_Export(bool value);
    [CompilerGeneratedAttribute]
public string get_OutputFolder();
    [CompilerGeneratedAttribute]
public void set_OutputFolder(string value);
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_PathRewriter();
    [CompilerGeneratedAttribute]
public void set_PathRewriter(Func`2<string, string> value);
}
[ExportAttribute("ExtractSearchIndex", "Microsoft.DocAsCode.Plugins.IPostProcessor")]
public class Microsoft.DocAsCode.Build.Engine.ExtractSearchIndex : object {
    private static Regex RegexWhiteSpace;
    public static string IndexFileName;
    public string Name { get; }
    private static ExtractSearchIndex();
    public string get_Name();
    public sealed virtual ImmutableDictionary`2<string, object> PrepareMetadata(ImmutableDictionary`2<string, object> metadata);
    public sealed virtual Manifest Process(Manifest manifest, string outputFolder);
    internal SearchIndexItem ExtractItem(HtmlDocument html, string href);
    private string ExtractTitleFromHtml(HtmlDocument html);
    private string NormalizeContent(string str);
    private void ExtractTextFromNode(HtmlNode root, StringBuilder contentBuilder);
}
public class Microsoft.DocAsCode.Build.Engine.FileCollection : object {
    private List`1<FileAndType> _files;
    [CompilerGeneratedAttribute]
private string <DefaultBaseDir>k__BackingField;
    public int Count { get; }
    public string DefaultBaseDir { get; public set; }
    public FileCollection(string defaultBaseDir);
    public FileCollection(FileCollection collection);
    public int get_Count();
    [CompilerGeneratedAttribute]
public string get_DefaultBaseDir();
    [CompilerGeneratedAttribute]
public void set_DefaultBaseDir(string value);
    public void Add(DocumentType type, IEnumerable`1<string> files, string sourceDir, string destinationDir);
    public void Add(DocumentType type, string baseDir, IEnumerable`1<string> files, string sourceDir, string destinationDir);
    public void RemoveAll(Predicate`1<FileAndType> match);
    private string ToRelative(string file, string rootedBaseDir);
    public IEnumerable`1<FileAndType> EnumerateFiles();
}
public class Microsoft.DocAsCode.Build.Engine.FileMetadata : Dictionary`2<string, ImmutableArray`1<FileMetadataItem>> {
    [CompilerGeneratedAttribute]
private string <BaseDir>k__BackingField;
    public string BaseDir { get; }
    public FileMetadata(string baseDir);
    public FileMetadata(string baseDir, IDictionary`2<string, ImmutableArray`1<FileMetadataItem>> dictionary);
    [CompilerGeneratedAttribute]
public string get_BaseDir();
    public IEnumerable`1<GlobMatcher> GetAllGlobs();
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.Build.Engine.FileMetadataHelper : object {
    [ExtensionAttribute]
public static IEnumerable`1<GlobMatcher> GetChangedGlobs(FileMetadata left, FileMetadata right);
    private static IEnumerable`1<GlobMatcher> GetChangedGlobsByGroup(ImmutableArray`1<FileMetadataItem> leftGroupItems, ImmutableArray`1<FileMetadataItem> rightGroupItems);
}
public class Microsoft.DocAsCode.Build.Engine.FileMetadataItem : object {
    private static StringComparer Comparer;
    [CompilerGeneratedAttribute]
private GlobMatcher <Glob>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public GlobMatcher Glob { get; }
    public object Value { get; }
    public string Key { get; }
    public FileMetadataItem(GlobMatcher glob, string key, object value);
    private static FileMetadataItem();
    [CompilerGeneratedAttribute]
public GlobMatcher get_Glob();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public string get_Key();
    public sealed virtual bool Equals(FileMetadataItem other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExportAttribute("gfm", "Microsoft.DocAsCode.Plugins.IMarkdownServiceProvider")]
public class Microsoft.DocAsCode.Build.Engine.GfmServiceProvider : object {
    public sealed virtual IMarkdownService CreateMarkdownService(MarkdownServiceParameters parameters);
}
[ExtensionAttribute]
internal static class Microsoft.DocAsCode.Build.Engine.HandlerExtensions : object {
    [ExtensionAttribute]
public static CompilePhaseHandlerWithIncremental WithIncremental(CompilePhaseHandler inner);
    [ExtensionAttribute]
public static LinkPhaseHandlerWithIncremental WithIncremental(LinkPhaseHandler inner);
}
[ExtensionAttribute]
internal static class Microsoft.DocAsCode.Build.Engine.HashStreamHelper : object {
    [ExtensionAttribute]
public static Stream WithSha256Hash(Stream stream, Task`1& hashTask);
}
[ExportAttribute("Microsoft.DocAsCode.Plugins.IHostService")]
internal class Microsoft.DocAsCode.Build.Engine.HostService : object {
    private object _syncRoot;
    private object _tocSyncRoot;
    private Dictionary`2<string, List`1<FileModel>> _uidIndex;
    private LruList`1<ModelWithCache> _lru;
    [CompilerGeneratedAttribute]
private IBuildParameters <BuildParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateProcessor <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<FileModel> <Models>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, FileAndType> <SourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<string> <InvalidSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, FileIncrementalInfo> <IncrementalInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<FileAndType, FileAndType> <FileMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownService <MarkdownService>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<IInputMetadataValidator> <Validators>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyGraph <DependencyGraph>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldTraceIncrementalInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanIncrementalBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<TreeItemRestructure> <TableOfContentRestructions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionOutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupInfo <GroupInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocumentProcessor <Processor>k__BackingField;
    public IBuildParameters BuildParameters { get; }
    public TemplateProcessor Template { get; public set; }
    public ImmutableList`1<FileModel> Models { get; private set; }
    public ImmutableDictionary`2<string, FileAndType> SourceFiles { get; public set; }
    public ImmutableList`1<string> InvalidSourceFiles { get; public set; }
    public ImmutableDictionary`2<string, FileIncrementalInfo> IncrementalInfos { get; public set; }
    public Dictionary`2<FileAndType, FileAndType> FileMap { get; }
    public IMarkdownService MarkdownService { get; public set; }
    public ImmutableList`1<IInputMetadataValidator> Validators { get; public set; }
    public DependencyGraph DependencyGraph { get; public set; }
    public bool ShouldTraceIncrementalInfo { get; public set; }
    public bool CanIncrementalBuild { get; public set; }
    public ImmutableList`1<TreeItemRestructure> TableOfContentRestructions { get; public set; }
    public string VersionName { get; }
    public string VersionOutputFolder { get; }
    public GroupInfo GroupInfo { get; }
    public IDocumentProcessor Processor { get; public set; }
    public bool HasMetadataValidation { get; }
    public string MarkdownServiceName { get; }
    public HostService(string baseDir, IEnumerable`1<FileModel> models);
    public HostService(string baseDir, IEnumerable`1<FileModel> models, string versionName, string versionDir, int lruSize);
    public HostService(string baseDir, IEnumerable`1<FileModel> models, string versionName, string versionDir, int lruSize, GroupInfo groupInfo);
    public HostService(string baseDir, IEnumerable`1<FileModel> models, string versionName, string versionDir, int lruSize, GroupInfo groupInfo, IBuildParameters buildParameters);
    [CompilerGeneratedAttribute]
public sealed virtual IBuildParameters get_BuildParameters();
    [CompilerGeneratedAttribute]
public TemplateProcessor get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(TemplateProcessor value);
    [CompilerGeneratedAttribute]
public ImmutableList`1<FileModel> get_Models();
    [CompilerGeneratedAttribute]
private void set_Models(ImmutableList`1<FileModel> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, FileAndType> get_SourceFiles();
    [CompilerGeneratedAttribute]
public void set_SourceFiles(ImmutableDictionary`2<string, FileAndType> value);
    [CompilerGeneratedAttribute]
public ImmutableList`1<string> get_InvalidSourceFiles();
    [CompilerGeneratedAttribute]
public void set_InvalidSourceFiles(ImmutableList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, FileIncrementalInfo> get_IncrementalInfos();
    [CompilerGeneratedAttribute]
public void set_IncrementalInfos(ImmutableDictionary`2<string, FileIncrementalInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<FileAndType, FileAndType> get_FileMap();
    [CompilerGeneratedAttribute]
public IMarkdownService get_MarkdownService();
    [CompilerGeneratedAttribute]
public void set_MarkdownService(IMarkdownService value);
    [CompilerGeneratedAttribute]
public ImmutableList`1<IInputMetadataValidator> get_Validators();
    [CompilerGeneratedAttribute]
public void set_Validators(ImmutableList`1<IInputMetadataValidator> value);
    [CompilerGeneratedAttribute]
public DependencyGraph get_DependencyGraph();
    [CompilerGeneratedAttribute]
public void set_DependencyGraph(DependencyGraph value);
    [CompilerGeneratedAttribute]
public bool get_ShouldTraceIncrementalInfo();
    [CompilerGeneratedAttribute]
public void set_ShouldTraceIncrementalInfo(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanIncrementalBuild();
    [CompilerGeneratedAttribute]
public void set_CanIncrementalBuild(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableList`1<TreeItemRestructure> get_TableOfContentRestructions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TableOfContentRestructions(ImmutableList`1<TreeItemRestructure> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_VersionName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_VersionOutputFolder();
    [CompilerGeneratedAttribute]
public sealed virtual GroupInfo get_GroupInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IDocumentProcessor get_Processor();
    [CompilerGeneratedAttribute]
public void set_Processor(IDocumentProcessor value);
    public sealed virtual ImmutableList`1<FileModel> GetModels(Nullable`1<DocumentType> type);
    public sealed virtual ImmutableHashSet`1<string> GetAllUids();
    public sealed virtual ImmutableList`1<FileModel> LookupByUid(string uid);
    public sealed virtual MarkupResult Markup(string markdown, FileAndType ft);
    public sealed virtual MarkupResult Markup(string markdown, FileAndType ft, bool omitParse);
    public sealed virtual MarkupResult Markup(string markdown, FileAndType ft, bool omitParse, bool enableValidation);
    public sealed virtual MarkupResult Parse(MarkupResult markupResult, FileAndType ft);
    private MarkupResult MarkupCore(string markdown, FileAndType ft, bool omitParse, bool enableValidation);
    public sealed virtual void ReportDependencyTo(FileModel currentFileModel, string to, string type);
    public sealed virtual void ReportDependencyTo(FileModel currentFileModel, string to, string toType, string type);
    public sealed virtual void ReportDependencyFrom(FileModel currentFileModel, string from, string type);
    public sealed virtual void ReportDependencyFrom(FileModel currentFileModel, string from, string fromType, string type);
    public sealed virtual void ReportReference(FileModel currentFileModel, string reference, string referenceType);
    public sealed virtual bool get_HasMetadataValidation();
    public sealed virtual string get_MarkdownServiceName();
    public sealed virtual void ValidateInputMetadata(string sourceFile, ImmutableDictionary`2<string, object> metadata);
    public sealed virtual void LogDiagnostic(string message, string file, string line);
    public sealed virtual void LogVerbose(string message, string file, string line);
    public sealed virtual void LogInfo(string message, string file, string line);
    public sealed virtual void LogSuggestion(string message, string file, string line);
    public sealed virtual void LogWarning(string message, string file, string line);
    public sealed virtual void LogError(string message, string file, string line);
    public sealed virtual void Dispose();
    public void Reload(IEnumerable`1<FileModel> models);
    public void RegisterDependencyType();
    public void ReloadModelsPerIncrementalChanges(IncrementalBuildContext incrementalContext, IEnumerable`1<string> changes, BuildPhase loadedAt);
    public void ReloadUnloadedModels(IncrementalBuildContext incrementalContext, BuildPhase loadedAt);
    public void SaveIntermediateModel(IncrementalBuildContext incrementalContext);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.HostService/<LoadIntermediateModel>d__101")]
public IEnumerable`1<FileModel> LoadIntermediateModel(IncrementalBuildContext incrementalContext, string fileName);
    public List`1<string> GetUnloadedModelFiles(IncrementalBuildContext incrementalContext);
    private void LoadCore(IEnumerable`1<FileModel> models);
    private void ReloadUnloadedModelsPerCondition(IncrementalBuildContext incrementalContext, BuildPhase phase, Func`2<string, bool> condition);
    private void HandleUidsChanged(object sender, PropertyChangedEventArgs`1<ImmutableArray`1<UidDefinition>> e);
    private void HandleFileOrBaseDirChanged(object sender, EventArgs e);
    private void ContentAccessedHandler(object sender, EventArgs e);
    private static void OnLruRemoving(ModelWithCache m);
    private void ReportDependencyCore(DependencyItemSourceInfo from, DependencyItemSourceInfo to, DependencyItemSourceInfo reportedBy, string type);
    [CompilerGeneratedAttribute]
private void <RegisterDependencyType>b__97_0(IDocumentBuildStep buildStep);
}
internal class Microsoft.DocAsCode.Build.Engine.HostServiceCreator : object {
    private DocumentBuildContext _context;
    public HostServiceCreator(DocumentBuildContext context);
    public virtual bool CanProcessorIncremental(IDocumentProcessor processor);
    public virtual bool ShouldProcessorTraceInfo(IDocumentProcessor processor);
    public virtual HostService CreateHostService(DocumentBuildParameters parameters, TemplateProcessor templateProcessor, IMarkdownService markdownService, IEnumerable`1<IInputMetadataValidator> metadataValidator, IDocumentProcessor processor, IEnumerable`1<FileAndType> files);
    public virtual ValueTuple`2<FileModel, bool> Load(IDocumentProcessor processor, ImmutableDictionary`2<string, object> metadata, FileMetadata fileMetadata, FileAndType file);
    private ValueTuple`2<IEnumerable`1<FileModel>, IEnumerable`1<string>> LoadModels(IEnumerable`1<FileAndType> files, DocumentBuildParameters parameters, IDocumentProcessor processor);
    private static ImmutableDictionary`2<string, object> ApplyFileMetadata(string file, ImmutableDictionary`2<string, object> metadata, FileMetadata fileMetadata);
    [CompilerGeneratedAttribute]
internal static bool <Load>g__NeedApplyMetadata|5_0(<>c__DisplayClass5_0& );
}
internal class Microsoft.DocAsCode.Build.Engine.HostServiceCreatorWithIncremental : HostServiceCreator {
    private ConcurrentDictionary`2<string, Lazy`1<bool>> _cache;
    [CompilerGeneratedAttribute]
private IncrementalBuildContext <IncrementalContext>k__BackingField;
    public IncrementalBuildContext IncrementalContext { get; }
    public HostServiceCreatorWithIncremental(DocumentBuildContext context);
    [CompilerGeneratedAttribute]
public IncrementalBuildContext get_IncrementalContext();
    public virtual bool ShouldProcessorTraceInfo(IDocumentProcessor processor);
    public virtual bool CanProcessorIncremental(IDocumentProcessor processor);
    public virtual HostService CreateHostService(DocumentBuildParameters parameters, TemplateProcessor templateProcessor, IMarkdownService markdownService, IEnumerable`1<IInputMetadataValidator> metadataValidator, IDocumentProcessor processor, IEnumerable`1<FileAndType> files);
    public virtual ValueTuple`2<FileModel, bool> Load(IDocumentProcessor processor, ImmutableDictionary`2<string, object> metadata, FileMetadata fileMetadata, FileAndType file);
    private void PostCreate(HostService hostService, IEnumerable`1<FileAndType> files);
    private bool ShouldProcessorTraceInfoCore(IDocumentProcessor processor);
    private bool CanProcessorIncrementalCore(IDocumentProcessor processor);
}
public abstract class Microsoft.DocAsCode.Build.Engine.HtmlDocumentHandler : object {
    [CompilerGeneratedAttribute]
private HtmlPostProcessContext <Context>k__BackingField;
    public HtmlPostProcessContext Context { get; private set; }
    [CompilerGeneratedAttribute]
public HtmlPostProcessContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(HtmlPostProcessContext value);
    public virtual void LoadContext(HtmlPostProcessContext context);
    protected abstract virtual void HandleCore(HtmlDocument document, ManifestItem manifestItem, string inputFile, string outputFile);
    protected virtual Manifest PostHandleCore(Manifest manifest);
    protected virtual Manifest PreHandleCore(Manifest manifest);
    public virtual void SaveContext(HtmlPostProcessContext context);
    public void SetContext(HtmlPostProcessContext context);
    public sealed virtual void Handle(HtmlDocument document, ManifestItem manifestItem, string inputFile, string outputFile);
    public sealed virtual Manifest PostHandle(Manifest manifest);
    public sealed virtual Manifest PreHandle(Manifest manifest);
}
public class Microsoft.DocAsCode.Build.Engine.HtmlPostProcessContext : object {
    [CompilerGeneratedAttribute]
private IPostProcessorHost <PostProcessorHost>k__BackingField;
    private Dictionary`2<string, object> _savingContext;
    [JsonIgnoreAttribute]
public IPostProcessorHost PostProcessorHost { get; private set; }
    public HtmlPostProcessContext(IPostProcessorHost host);
    [CompilerGeneratedAttribute]
public IPostProcessorHost get_PostProcessorHost();
    [CompilerGeneratedAttribute]
private void set_PostProcessorHost(IPostProcessorHost value);
    public T Load(string contextName, Func`2<Stream, T> loader);
    public void Save(string contextName, Action`1<Stream> saver);
    public void Save();
}
internal class Microsoft.DocAsCode.Build.Engine.HtmlPostProcessor : object {
    [CompilerGeneratedAttribute]
private IPostProcessorHost <PostProcessorHost>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IHtmlDocumentHandler> <Handlers>k__BackingField;
    private bool _handlerInitialized;
    public IPostProcessorHost PostProcessorHost { get; public set; }
    public List`1<IHtmlDocumentHandler> Handlers { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IPostProcessorHost get_PostProcessorHost();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PostProcessorHost(IPostProcessorHost value);
    public sealed virtual string GetIncrementalContextHash();
    [CompilerGeneratedAttribute]
public List`1<IHtmlDocumentHandler> get_Handlers();
    public sealed virtual ImmutableDictionary`2<string, object> PrepareMetadata(ImmutableDictionary`2<string, object> metadata);
    public sealed virtual Manifest Process(Manifest manifest, string outputFolder);
}
internal interface Microsoft.DocAsCode.Build.Engine.IHostServiceCreator {
    public abstract virtual bool ShouldProcessorTraceInfo(IDocumentProcessor processor);
    public abstract virtual bool CanProcessorIncremental(IDocumentProcessor processor);
    public abstract virtual ValueTuple`2<FileModel, bool> Load(IDocumentProcessor processor, ImmutableDictionary`2<string, object> metadata, FileMetadata fileMetadata, FileAndType file);
    public abstract virtual HostService CreateHostService(DocumentBuildParameters parameters, TemplateProcessor templateProcessor, IMarkdownService markdownService, IEnumerable`1<IInputMetadataValidator> metadataValidator, IDocumentProcessor processor, IEnumerable`1<FileAndType> files);
}
public interface Microsoft.DocAsCode.Build.Engine.IHtmlDocumentHandler {
    public abstract virtual void LoadContext(HtmlPostProcessContext context);
    public abstract virtual Manifest PreHandle(Manifest manifest);
    public abstract virtual void Handle(HtmlDocument document, ManifestItem manifestItem, string inputFile, string outputFile);
    public abstract virtual Manifest PostHandle(Manifest manifest);
    public abstract virtual void SaveContext(HtmlPostProcessContext context);
}
public interface Microsoft.DocAsCode.Build.Engine.IInputFileAbstractLayerBuilderProvider {
    public abstract virtual FileAbstractLayerBuilder Create(FileAbstractLayerBuilder defaultBuilder, DocumentBuildParameters parameters);
}
internal class Microsoft.DocAsCode.Build.Engine.IncrementalPostProcessorHost : object {
    private IncrementalPostProcessorsContext _increContext;
    private string _postProcessorName;
    private FileAbstractLayer _fal;
    [CompilerGeneratedAttribute]
private IImmutableList`1<SourceFileInfo> <SourceFileInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldTraceIncrementalInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIncremental>k__BackingField;
    public IImmutableList`1<SourceFileInfo> SourceFileInfos { get; }
    public bool ShouldTraceIncrementalInfo { get; }
    public bool IsIncremental { get; }
    public IncrementalPostProcessorHost(IncrementalPostProcessorsContext increContext, string postProcessorName, IImmutableList`1<SourceFileInfo> sourceFileInfos);
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<SourceFileInfo> get_SourceFileInfos();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldTraceIncrementalInfo();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsIncremental();
    public sealed virtual Stream LoadContextInfo();
    public sealed virtual Stream SaveContextInfo();
    private static PostProcessorInfo FindPostProcessorInfo(PostProcessInfo postProcessInfo, string postProcessorName);
}
internal class Microsoft.DocAsCode.Build.Engine.IncrementalPostProcessorsContext : object {
    private List`1<PostProcessor> _postProcessors;
    [CompilerGeneratedAttribute]
private BuildInfo <CurrentBuildInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private PostProcessInfo <CurrentInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private PostProcessInfo <LastInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableIncremental>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentBaseDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastBaseDir>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementalInfo <IncrementalInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldTraceIncrementalInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIncremental>k__BackingField;
    public BuildInfo CurrentBuildInfo { get; }
    public PostProcessInfo CurrentInfo { get; }
    public PostProcessInfo LastInfo { get; }
    public bool EnableIncremental { get; }
    public string CurrentBaseDir { get; }
    public string LastBaseDir { get; }
    public int MaxParallelism { get; }
    public IncrementalInfo IncrementalInfo { get; }
    public bool ShouldTraceIncrementalInfo { get; }
    public bool IsIncremental { get; }
    public IncrementalPostProcessorsContext(string intermediateFolder, BuildInfo currentBuildInfo, BuildInfo lastBuildInfo, List`1<PostProcessor> postProcessors, bool enableIncremental, int maxParallelism);
    [CompilerGeneratedAttribute]
public BuildInfo get_CurrentBuildInfo();
    [CompilerGeneratedAttribute]
public PostProcessInfo get_CurrentInfo();
    [CompilerGeneratedAttribute]
public PostProcessInfo get_LastInfo();
    [CompilerGeneratedAttribute]
public bool get_EnableIncremental();
    [CompilerGeneratedAttribute]
public string get_CurrentBaseDir();
    [CompilerGeneratedAttribute]
public string get_LastBaseDir();
    [CompilerGeneratedAttribute]
public int get_MaxParallelism();
    [CompilerGeneratedAttribute]
public IncrementalInfo get_IncrementalInfo();
    [CompilerGeneratedAttribute]
public bool get_ShouldTraceIncrementalInfo();
    [CompilerGeneratedAttribute]
public bool get_IsIncremental();
    private bool GetShouldTraceIncrementalInfo();
    private bool GetIsIncremental();
    private PostProcessInfo GeneratePostProcessInfo();
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.BuildCacheException : Exception {
    public BuildCacheException(string message);
    public BuildCacheException(string message, Exception inner);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.BuildInfo : object {
    public static string FileName;
    [CompilerGeneratedAttribute]
private string <DirectoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <BuildStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocfxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluginHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitFromSHA>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitToSHA>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BuildVersionInfo> <Versions>k__BackingField;
    [CompilerGeneratedAttribute]
private PostProcessInfo <PostProcessInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string DirectoryName { get; public set; }
    public DateTime BuildStartTime { get; public set; }
    public string DocfxVersion { get; public set; }
    public string PluginHash { get; public set; }
    public string TemplateHash { get; public set; }
    public string CommitFromSHA { get; public set; }
    public string CommitToSHA { get; public set; }
    public List`1<BuildVersionInfo> Versions { get; }
    public PostProcessInfo PostProcessInfo { get; public set; }
    public bool IsValid { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DirectoryName();
    [CompilerGeneratedAttribute]
public void set_DirectoryName(string value);
    [CompilerGeneratedAttribute]
public DateTime get_BuildStartTime();
    [CompilerGeneratedAttribute]
public void set_BuildStartTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_DocfxVersion();
    [CompilerGeneratedAttribute]
public void set_DocfxVersion(string value);
    [CompilerGeneratedAttribute]
public string get_PluginHash();
    [CompilerGeneratedAttribute]
public void set_PluginHash(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateHash();
    [CompilerGeneratedAttribute]
public void set_TemplateHash(string value);
    [CompilerGeneratedAttribute]
public string get_CommitFromSHA();
    [CompilerGeneratedAttribute]
public void set_CommitFromSHA(string value);
    [CompilerGeneratedAttribute]
public string get_CommitToSHA();
    [CompilerGeneratedAttribute]
public void set_CommitToSHA(string value);
    [CompilerGeneratedAttribute]
public List`1<BuildVersionInfo> get_Versions();
    [CompilerGeneratedAttribute]
public PostProcessInfo get_PostProcessInfo();
    [CompilerGeneratedAttribute]
public void set_PostProcessInfo(PostProcessInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    public static BuildInfo Load(string baseDir);
    public static BuildInfo Load(string baseDir, bool onlyValid);
    public void SaveVersionsManifet(string baseDir);
    public void Save(string baseDir);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.BuildMessage : Dictionary`2<BuildPhase, BuildMessageInfo> {
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.BuildMessageInfo : object {
    private Listener _listener;
    private OSPlatformSensitiveDictionary`1<List`1<LogItem>> _logs;
    private BuildMessageInfo(IDictionary`2<string, List`1<LogItem>> logs);
    public IEnumerable`1<ILogItem> GetMessages(string file);
    public ILoggerListener GetListener();
    public void Replay(string file);
    private void WriteLine(ILogItem item);
    public static BuildMessageInfo Load(TextReader reader);
    public void Save(TextWriter writer);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.BuildOutputItem : object {
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ManifestMetadata>k__BackingField;
    public string SourceFile { get; public set; }
    public string DestinationFile { get; public set; }
    public Dictionary`2<string, string> Files { get; public set; }
    public Dictionary`2<string, object> ManifestMetadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
public void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationFile();
    [CompilerGeneratedAttribute]
public void set_DestinationFile(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_ManifestMetadata();
    [CompilerGeneratedAttribute]
public void set_ManifestMetadata(Dictionary`2<string, object> value);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.BuildOutputs : OSPlatformSensitiveDictionary`1<string> {
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.BuildVersionInfo : object {
    [CompilerGeneratedAttribute]
private string <VersionName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ProcessorInfo> <Processors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileMetadataHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DependencyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileMetadataFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributesFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XRefSpecMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalXRefSpecFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildMessageFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TocRestructionsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseDir>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyGraph <Dependency>k__BackingField;
    [CompilerGeneratedAttribute]
private FileMetadata <FileMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, FileAttributeItem> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ManifestItem> <Manifest>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildOutputs <BuildOutputs>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, List`1<XRefSpec>> <XRefSpecMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, FileMapItem> <FileMap>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildMessage <BuildMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, List`1<TreeItemRestructure>> <TocRestructions>k__BackingField;
    public string VersionName { get; public set; }
    public List`1<ProcessorInfo> Processors { get; }
    public string ConfigHash { get; public set; }
    public string FileMetadataHash { get; public set; }
    public string DependencyFile { get; public set; }
    public string FileMetadataFile { get; public set; }
    public string AttributesFile { get; public set; }
    public string OutputFile { get; public set; }
    public string ManifestFile { get; public set; }
    public string XRefSpecMapFile { get; public set; }
    public string ExternalXRefSpecFile { get; public set; }
    public string FileMapFile { get; public set; }
    public string BuildMessageFile { get; public set; }
    public string TocRestructionsFile { get; public set; }
    [JsonIgnoreAttribute]
public string BaseDir { get; internal set; }
    [JsonIgnoreAttribute]
public DependencyGraph Dependency { get; public set; }
    [JsonIgnoreAttribute]
public FileMetadata FileMetadata { get; public set; }
    [JsonIgnoreAttribute]
public IDictionary`2<string, FileAttributeItem> Attributes { get; public set; }
    [JsonIgnoreAttribute]
public IEnumerable`1<ManifestItem> Manifest { get; public set; }
    [JsonIgnoreAttribute]
public BuildOutputs BuildOutputs { get; private set; }
    [JsonIgnoreAttribute]
public IDictionary`2<string, List`1<XRefSpec>> XRefSpecMap { get; private set; }
    [JsonIgnoreAttribute]
public IDictionary`2<string, FileMapItem> FileMap { get; private set; }
    [JsonIgnoreAttribute]
public BuildMessage BuildMessage { get; private set; }
    [JsonIgnoreAttribute]
public IDictionary`2<string, List`1<TreeItemRestructure>> TocRestructions { get; private set; }
    [CompilerGeneratedAttribute]
public string get_VersionName();
    [CompilerGeneratedAttribute]
public void set_VersionName(string value);
    [CompilerGeneratedAttribute]
public List`1<ProcessorInfo> get_Processors();
    [CompilerGeneratedAttribute]
public string get_ConfigHash();
    [CompilerGeneratedAttribute]
public void set_ConfigHash(string value);
    [CompilerGeneratedAttribute]
public string get_FileMetadataHash();
    [CompilerGeneratedAttribute]
public void set_FileMetadataHash(string value);
    [CompilerGeneratedAttribute]
public string get_DependencyFile();
    [CompilerGeneratedAttribute]
public void set_DependencyFile(string value);
    [CompilerGeneratedAttribute]
public string get_FileMetadataFile();
    [CompilerGeneratedAttribute]
public void set_FileMetadataFile(string value);
    [CompilerGeneratedAttribute]
public string get_AttributesFile();
    [CompilerGeneratedAttribute]
public void set_AttributesFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(string value);
    [CompilerGeneratedAttribute]
public string get_XRefSpecMapFile();
    [CompilerGeneratedAttribute]
public void set_XRefSpecMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalXRefSpecFile();
    [CompilerGeneratedAttribute]
public void set_ExternalXRefSpecFile(string value);
    [CompilerGeneratedAttribute]
public string get_FileMapFile();
    [CompilerGeneratedAttribute]
public void set_FileMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_BuildMessageFile();
    [CompilerGeneratedAttribute]
public void set_BuildMessageFile(string value);
    [CompilerGeneratedAttribute]
public string get_TocRestructionsFile();
    [CompilerGeneratedAttribute]
public void set_TocRestructionsFile(string value);
    [CompilerGeneratedAttribute]
public string get_BaseDir();
    [CompilerGeneratedAttribute]
internal void set_BaseDir(string value);
    [CompilerGeneratedAttribute]
public DependencyGraph get_Dependency();
    [CompilerGeneratedAttribute]
public void set_Dependency(DependencyGraph value);
    [CompilerGeneratedAttribute]
public FileMetadata get_FileMetadata();
    [CompilerGeneratedAttribute]
public void set_FileMetadata(FileMetadata value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, FileAttributeItem> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, FileAttributeItem> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ManifestItem> get_Manifest();
    [CompilerGeneratedAttribute]
public void set_Manifest(IEnumerable`1<ManifestItem> value);
    [CompilerGeneratedAttribute]
public BuildOutputs get_BuildOutputs();
    [CompilerGeneratedAttribute]
private void set_BuildOutputs(BuildOutputs value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, List`1<XRefSpec>> get_XRefSpecMap();
    [CompilerGeneratedAttribute]
private void set_XRefSpecMap(IDictionary`2<string, List`1<XRefSpec>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, FileMapItem> get_FileMap();
    [CompilerGeneratedAttribute]
private void set_FileMap(IDictionary`2<string, FileMapItem> value);
    [CompilerGeneratedAttribute]
public BuildMessage get_BuildMessage();
    [CompilerGeneratedAttribute]
private void set_BuildMessage(BuildMessage value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, List`1<TreeItemRestructure>> get_TocRestructions();
    [CompilerGeneratedAttribute]
private void set_TocRestructions(IDictionary`2<string, List`1<TreeItemRestructure>> value);
    public void SaveManifest();
    internal void Load(string baseDir);
    internal void Save(string baseDir);
    private void ActionWhenNotNull(string baseDir, string file, Action`1<string> action);
    [CompilerGeneratedAttribute]
private void <Load>b__96_0(string f);
    [CompilerGeneratedAttribute]
private void <Load>b__96_1(string f);
    [CompilerGeneratedAttribute]
private void <Load>b__96_2(string f);
    [CompilerGeneratedAttribute]
private void <Load>b__96_3(string f);
    [CompilerGeneratedAttribute]
private void <Load>b__96_4(string f);
    [CompilerGeneratedAttribute]
private void <Load>b__96_5(string f);
    [CompilerGeneratedAttribute]
private void <Load>b__96_6(string f);
    [CompilerGeneratedAttribute]
private void <Load>b__96_7(string f);
    [CompilerGeneratedAttribute]
private void <Load>b__96_8(string f);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.ChangeItem : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeKindWithDependency <Kind>k__BackingField;
    public string FilePath { get; public set; }
    public ChangeKindWithDependency Kind { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public ChangeKindWithDependency get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(ChangeKindWithDependency value);
}
public enum Microsoft.DocAsCode.Build.Engine.Incrementals.ChangeKind : Enum {
    public int value__;
    public static ChangeKind None;
    public static ChangeKind Created;
    public static ChangeKind Updated;
    public static ChangeKind Deleted;
}
public enum Microsoft.DocAsCode.Build.Engine.Incrementals.ChangeKindWithDependency : Enum {
    public int value__;
    public static ChangeKindWithDependency None;
    public static ChangeKindWithDependency Created;
    public static ChangeKindWithDependency Updated;
    public static ChangeKindWithDependency Deleted;
    public static ChangeKindWithDependency DependencyUpdated;
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.ChangeList : object {
    private List`1<ChangeItem> _list;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    public string From { get; public set; }
    public string To { get; public set; }
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    public static ChangeList Parse(string tsvFile, string baseDir);
    public void Add(string filePath, ChangeKind kind);
    public IEnumerable`1<string> GetCreatedFiles();
    public IEnumerable`1<string> GetUpdatedFiles();
    public IEnumerable`1<string> GetDeletedFiles();
    private void AddCore(string filePath, ChangeKind kind);
    private static ChangeList ParseCore(string tsvFile, string baseDir);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<ChangeItem> GetEnumerator();
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.DependencyGraph : object {
    private static ImmutableList`1<DependencyType> _defaultTypes;
    private HashSet`1<DependencyItem> _dependencyItems;
    private HashSet`1<ReferenceItem> _referenceItems;
    private object _typeSync;
    private ReaderWriterLockSlim _itemsSync;
    private ReaderWriterLockSlim _referenceSync;
    private OSPlatformSensitiveDictionary`1<HashSet`1<DependencyItem>> _indexOnFrom;
    private OSPlatformSensitiveDictionary`1<HashSet`1<DependencyItem>> _indexOnTo;
    private OSPlatformSensitiveDictionary`1<HashSet`1<DependencyItem>> _indexOnReportedBy;
    private OSPlatformSensitiveDictionary`1<HashSet`1<ReferenceItem>> _indexOnReferenceReportedBy;
    private ImmutableDictionary`2<string, DependencyType> _types;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<string, string>, bool> _couldTransit;
    private bool _isResolved;
    public IReadOnlyDictionary`2<string, DependencyType> DependencyTypes { get; }
    public IEnumerable`1<string> FromNodes { get; }
    public IEnumerable`1<string> ReportedBys { get; }
    public IEnumerable`1<string> ToNodes { get; }
    public IEnumerable`1<string> ReferenceReportedBys { get; }
    private DependencyGraph(HashSet`1<DependencyItem> dependencies, Dictionary`2<string, DependencyType> types, HashSet`1<ReferenceItem> references);
    private static DependencyGraph();
    public IReadOnlyDictionary`2<string, DependencyType> get_DependencyTypes();
    public void RegisterDependencyType(DependencyType dt);
    public void RegisterDependencyType(IEnumerable`1<DependencyType> dts);
    public void ReportDependency(DependencyItem dependency);
    public void ReportDependency(IEnumerable`1<DependencyItem> dependencies);
    public void ReportReference(ReferenceItem reference);
    public void ReportReference(IEnumerable`1<ReferenceItem> references);
    public void ResolveReference();
    public bool HasDependencyReportedBy(string reportedBy);
    public bool HasDependencyFrom(string from);
    public IEnumerable`1<string> get_FromNodes();
    public IEnumerable`1<string> get_ReportedBys();
    public IEnumerable`1<string> get_ToNodes();
    public IEnumerable`1<string> get_ReferenceReportedBys();
    public HashSet`1<DependencyItem> GetDependencyReportedBy(string reportedBy);
    public HashSet`1<DependencyItem> GetDependencyFrom(string from);
    public HashSet`1<DependencyItem> GetDependencyTo(string to);
    public HashSet`1<DependencyItem> GetAllDependencyFrom(string from);
    public HashSet`1<DependencyItem> GetAllDependencyTo(string to);
    public HashSet`1<string> GetAllDependentNodes();
    public HashSet`1<string> GetAllIncludeDependencyFrom(string from);
    public HashSet`1<ReferenceItem> GetReferenceReportedBy(string reportedBy);
    public void Save(TextWriter writer);
    public static DependencyGraph Load(TextReader reader);
    private void RegisterDependencyTypeCore(DependencyType dt);
    private void ReportDependencyCore(DependencyItem dependency);
    private void ReportDependencyCoreNoLock(DependencyItem dependency);
    private void ReportReferenceCore(ReferenceItem reference);
    private void ReportReferenceCoreNoLock(ReferenceItem reference);
    private void ResolveReferenceCore();
    private void ResolveReferenceCoreNoLock();
    private DependencyItemSourceInfo TryResolveReference(Dictionary`2<DependencyItemSourceInfo, string> indexer, DependencyItemSourceInfo source);
    private HashSet`1<DependencyItem> GetDependencyReportedByNoLock(string reportedBy);
    private HashSet`1<DependencyItem> GetDependencyFromNoLock(string from);
    private HashSet`1<DependencyItem> GetDependencyToNoLock(string to);
    private HashSet`1<DependencyItem> GetAllDependencyFromNoLock(string from);
    private HashSet`1<DependencyItem> GetAllDependencyToNoLock(string to);
    private bool CouldTransitNoLock(string fromDependencyType, string toDependencyType);
    private HashSet`1<string> GetAllDependentNodesNoLock();
    private HashSet`1<ReferenceItem> GetReferenceReportedByNoLock(string reportedBy);
    private bool HasDependencyReportedByNoLock(string reportedBy);
    private bool HasDependencyFromNoLock(string from);
    private void SaveNoLock(TextWriter writer);
    private void RebuildIndex();
    private static void CreateOrUpdate(Dictionary`2<string, HashSet`1<T>> index, string key, T value);
    private bool CanReadDependency(DependencyItem dependency);
    private bool IsValidDependency(DependencyItem dependency);
    private void ReadDependency(Action reader);
    private T ReadDependency(Func`1<T> reader);
    private void ReadReference(Action reader);
    private T ReadReference(Func`1<T> reader);
    private void WriteDependency(Action writer);
    private T WriteDependency(Func`1<T> writer);
    private void WriteReference(Action writer);
    private T WriteReference(Func`1<T> writer);
    private static void Read(ReaderWriterLockSlim slim, Action reader);
    private static T Read(ReaderWriterLockSlim slim, Func`1<T> reader);
    private static void Write(ReaderWriterLockSlim slim, Action writer);
    private static T Write(ReaderWriterLockSlim slim, Func`1<T> writer);
    [CompilerGeneratedAttribute]
private KeyCollection<string, HashSet`1<DependencyItem>> <get_FromNodes>b__27_0();
    [CompilerGeneratedAttribute]
private KeyCollection<string, HashSet`1<DependencyItem>> <get_ReportedBys>b__29_0();
    [CompilerGeneratedAttribute]
private KeyCollection<string, HashSet`1<DependencyItem>> <get_ToNodes>b__31_0();
    [CompilerGeneratedAttribute]
private KeyCollection<string, HashSet`1<ReferenceItem>> <get_ReferenceReportedBys>b__33_0();
    [CompilerGeneratedAttribute]
private bool <ResolveReferenceCoreNoLock>b__50_5(DependencyItem i);
    [CompilerGeneratedAttribute]
private bool <GetAllDependentNodesNoLock>b__58_0(DependencyItem item);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.DependencyItem : object {
    [CompilerGeneratedAttribute]
private DependencyItemSourceInfo <From>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyItemSourceInfo <To>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyItemSourceInfo <ReportedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [JsonPropertyAttribute("from")]
public DependencyItemSourceInfo From { get; private set; }
    [JsonPropertyAttribute("to")]
public DependencyItemSourceInfo To { get; private set; }
    [JsonPropertyAttribute("reportedBy")]
public DependencyItemSourceInfo ReportedBy { get; private set; }
    [JsonPropertyAttribute("type")]
public string Type { get; }
    [JsonConstructorAttribute]
public DependencyItem(DependencyItemSourceInfo from, DependencyItemSourceInfo to, DependencyItemSourceInfo reportedBy, string type);
    [CompilerGeneratedAttribute]
public DependencyItemSourceInfo get_From();
    [CompilerGeneratedAttribute]
private void set_From(DependencyItemSourceInfo value);
    [CompilerGeneratedAttribute]
public DependencyItemSourceInfo get_To();
    [CompilerGeneratedAttribute]
private void set_To(DependencyItemSourceInfo value);
    [CompilerGeneratedAttribute]
public DependencyItemSourceInfo get_ReportedBy();
    [CompilerGeneratedAttribute]
private void set_ReportedBy(DependencyItemSourceInfo value);
    [CompilerGeneratedAttribute]
public string get_Type();
    public DependencyItem ChangeFrom(DependencyItemSourceInfo f);
    public DependencyItem ChangeTo(DependencyItemSourceInfo t);
    public DependencyItem ChangeReportedBy(DependencyItemSourceInfo r);
    public sealed virtual bool Equals(DependencyItem dp);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.DependencyItemSourceInfo : object {
    [CompilerGeneratedAttribute]
private string <SourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    private StringComparer ValueComparer { get; }
    [JsonPropertyAttribute("sourceType")]
public string SourceType { get; }
    [JsonPropertyAttribute("value")]
public string Value { get; }
    [JsonConstructorAttribute]
public DependencyItemSourceInfo(string sourceType, string value);
    private StringComparer get_ValueComparer();
    [CompilerGeneratedAttribute]
public string get_SourceType();
    [CompilerGeneratedAttribute]
public string get_Value();
    public DependencyItemSourceInfo ChangeSourceType(string type);
    public DependencyItemSourceInfo ChangeValue(string value);
    public sealed virtual bool Equals(DependencyItemSourceInfo other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public static DependencyItemSourceInfo op_Implicit(string info);
    public static bool op_Equality(DependencyItemSourceInfo a, DependencyItemSourceInfo b);
    public static bool op_Inequality(DependencyItemSourceInfo a, DependencyItemSourceInfo b);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.FileAttributeItem : object {
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModifiedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromSource>k__BackingField;
    public string File { get; public set; }
    public DateTime LastModifiedTime { get; public set; }
    public string Hash { get; public set; }
    public bool IsFromSource { get; public set; }
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public DateTime get_LastModifiedTime();
    [CompilerGeneratedAttribute]
public void set_LastModifiedTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFromSource();
    [CompilerGeneratedAttribute]
public void set_IsFromSource(bool value);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.FileAttributes : Dictionary`2<string, FileAttributeItem> {
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.FileMapItem : OSPlatformSensitiveDictionary`1<string> {
}
internal class Microsoft.DocAsCode.Build.Engine.Incrementals.IncrementalBuildContext : object {
    private object _sync;
    private DocumentBuildParameters _parameters;
    private Dictionary`2<string, OSPlatformSensitiveDictionary`1<Nullable`1<BuildPhase>>> _modelLoadInfo;
    private OSPlatformSensitiveDictionary`1<ChangeKindWithDependency> _changeDict;
    [CompilerGeneratedAttribute]
private string <BaseDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastBaseDir>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastBuildStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementalInfo <IncrementalInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildVersionInfo <CurrentBuildVersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildVersionInfo <LastBuildVersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanVersionIncremental>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTemplateUpdated>k__BackingField;
    public string BaseDir { get; }
    public string LastBaseDir { get; }
    public Nullable`1<DateTime> LastBuildStartTime { get; }
    public IncrementalInfo IncrementalInfo { get; }
    public BuildVersionInfo CurrentBuildVersionInfo { get; }
    public BuildVersionInfo LastBuildVersionInfo { get; }
    public bool CanVersionIncremental { get; }
    public bool IsTemplateUpdated { get; private set; }
    public string Version { get; }
    public IReadOnlyDictionary`2<string, OSPlatformSensitiveDictionary`1<Nullable`1<BuildPhase>>> ModelLoadInfo { get; }
    public IReadOnlyDictionary`2<string, ChangeKindWithDependency> ChangeDict { get; }
    private IncrementalBuildContext(string baseDir, string lastBaseDir, Nullable`1<DateTime> lastBuildStartTime, IncrementalStatus buildInfoIncrementalStatus, DocumentBuildParameters parameters, BuildVersionInfo cbv, BuildVersionInfo lbv);
    [CompilerGeneratedAttribute]
public string get_BaseDir();
    [CompilerGeneratedAttribute]
public string get_LastBaseDir();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastBuildStartTime();
    [CompilerGeneratedAttribute]
public IncrementalInfo get_IncrementalInfo();
    [CompilerGeneratedAttribute]
public BuildVersionInfo get_CurrentBuildVersionInfo();
    [CompilerGeneratedAttribute]
public BuildVersionInfo get_LastBuildVersionInfo();
    [CompilerGeneratedAttribute]
public bool get_CanVersionIncremental();
    [CompilerGeneratedAttribute]
public bool get_IsTemplateUpdated();
    [CompilerGeneratedAttribute]
private void set_IsTemplateUpdated(bool value);
    public string get_Version();
    public IReadOnlyDictionary`2<string, OSPlatformSensitiveDictionary`1<Nullable`1<BuildPhase>>> get_ModelLoadInfo();
    public IReadOnlyDictionary`2<string, ChangeKindWithDependency> get_ChangeDict();
    public static IncrementalBuildContext Create(DocumentBuildParameters parameters, BuildInfo cb, BuildInfo lb, string intermediateFolder, string markdownServiceContextHash);
    public void ReportModelLoadInfo(HostService hostService, string file, Nullable`1<BuildPhase> phase);
    public void ReportModelLoadInfo(HostService hostService, IEnumerable`1<string> files, Nullable`1<BuildPhase> phase);
    public IReadOnlyDictionary`2<string, Nullable`1<BuildPhase>> GetModelLoadInfo(HostService hostService);
    public ImmutableDictionary`2<string, FileIncrementalInfo> GetModelIncrementalInfo(HostService hostService, BuildPhase phase);
    public ModelManifest GetCurrentIntermediateModelManifest(HostService hostService);
    public ModelManifest GetLastIntermediateModelManifest(HostService hostService);
    public void LoadChanges();
    public List`1<string> ExpandDependency(DependencyGraph dg, Func`2<DependencyItem, bool> isValid);
    public void InitFileAttributes();
    public void LoadFileMetadataChanges();
    public void UpdateBuildVersionInfoPerDependencyGraph();
    public ProcessorInfo CreateProcessorInfo(IDocumentProcessor processor);
    public bool ShouldProcessorTraceInfo(IDocumentProcessor processor);
    public bool CanProcessorIncremental(IDocumentProcessor processor);
    public void LoadContextInfo(HostService hostService);
    public void SaveContextInfo(HostService hostService);
    private static string ComputeConfigHash(DocumentBuildParameters parameter, string markdownServiceContextHash);
    private static string ComputeFileMetadataHash(FileMetadata fileMetadata);
    private static DependencyGraph ConstructDependencyGraphFromLast(DependencyGraph ldg);
    private static IncrementalStatus GetBuildInfoIncrementalStatus(BuildInfo cb, BuildInfo lb, bool forceRebuild);
    private bool GetCanVersionIncremental(IncrementalStatus buildInfoIncrementalStatus);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.Incrementals.IncrementalBuildContext/<GetFilesToCalculateAttributes>d__58")]
private IEnumerable`1<FileItem> GetFilesToCalculateAttributes();
    private string TryGetFullPath(string path);
    private bool TryGetFileAttributeFromLast(string pathFromWorkingFolder, FileAttributeItem& item);
    private void InitDependency();
    private void InitChanges();
    [CompilerGeneratedAttribute]
private bool <InitChanges>b__62_1(DependencyItem d);
}
[AttributeUsageAttribute("384")]
public class Microsoft.DocAsCode.Build.Engine.Incrementals.IncrementalIgnoreAttribute : Attribute {
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.IncrementalIgnorePropertiesResolver : DefaultContractResolver {
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
}
public static class Microsoft.DocAsCode.Build.Engine.Incrementals.IncrementalUtility : object {
    public static JsonSerializerSettings FileMetadataJsonSerializationSettings;
    private static int MaxRetry;
    private static Encoding UTF8;
    private static IncrementalUtility();
    public static T LoadIntermediateFile(string fileName);
    public static T LoadIntermediateFile(string fileName, JsonSerializerSettings settings);
    public static DependencyGraph LoadDependency(string dependencyFile);
    public static void SaveDependency(string fileName, DependencyGraph dg);
    public static void SaveIntermediateFile(string fileName, T content);
    public static void SaveIntermediateFile(string fileName, T content, JsonSerializerSettings settings);
    public static BuildMessage LoadBuildMessage(string file);
    public static void SaveBuildMessage(string fileName, BuildMessage bm);
    public static string GetDependencyKey(FileAndType file);
    public static string GetRandomEntry(string baseDir);
    public static string CreateRandomFileName(string baseDir);
    public static FileStream CreateRandomFileStream(string baseDir);
    public static string CreateRandomDirectory(string baseDir);
    public static T RetryIO(Func`1<T> func);
    public static void RetryIO(Action action);
    private static string SaveSerializedBuildMessageInfo(BuildMessageInfo bmi, string baseDir);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.ModelManifest : object {
    [CompilerGeneratedAttribute]
private OSPlatformSensitiveDictionary`1<List`1<ModelManifestItem>> <Models>k__BackingField;
    public OSPlatformSensitiveDictionary`1<List`1<ModelManifestItem>> Models { get; }
    [CompilerGeneratedAttribute]
public OSPlatformSensitiveDictionary`1<List`1<ModelManifestItem>> get_Models();
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.ModelManifestItem : object {
    [CompilerGeneratedAttribute]
private string <SourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public string SourceFilePath { get; public set; }
    public string FilePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceFilePath();
    [CompilerGeneratedAttribute]
public void set_SourceFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.OSPlatformSensitiveDictionary`1 : Dictionary`2<string, V> {
    public OSPlatformSensitiveDictionary`1(IDictionary`2<string, V> dictionary);
    public OSPlatformSensitiveDictionary`1(IEnumerable`1<KeyValuePair`2<string, V>> list);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.Outputs.ExpandedDependencyItem : object {
    private static StringComparer Comparer;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [JsonPropertyAttribute("from")]
public string From { get; }
    [JsonPropertyAttribute("to")]
public string To { get; }
    [JsonPropertyAttribute("type")]
public string Type { get; }
    [JsonConstructorAttribute]
public ExpandedDependencyItem(string from, string to, string type);
    private static ExpandedDependencyItem();
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public string get_Type();
    public static ExpandedDependencyItem ConvertFrom(DependencyItem item);
    public ExpandedDependencyItem ChangeFrom(string from);
    public ExpandedDependencyItem ChangeTo(string to);
    public ExpandedDependencyItem ChangeType(string type);
    public sealed virtual bool Equals(ExpandedDependencyItem dp);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.Outputs.ExpandedDependencyMap : object {
    private HashSet`1<ExpandedDependencyItem> _dps;
    private OSPlatformSensitiveDictionary`1<HashSet`1<ExpandedDependencyItem>> _index;
    private OSPlatformSensitiveDictionary`1<HashSet`1<ExpandedDependencyItem>> _inverseIndex;
    [CompilerGeneratedAttribute]
private static ExpandedDependencyMap <Empty>k__BackingField;
    public static ExpandedDependencyMap Empty { get; }
    private ExpandedDependencyMap(IEnumerable`1<ExpandedDependencyItem> dps);
    private static ExpandedDependencyMap();
    [CompilerGeneratedAttribute]
public static ExpandedDependencyMap get_Empty();
    public void Save(TextWriter writer);
    public static ExpandedDependencyMap Load(TextReader reader);
    public static ExpandedDependencyMap ConstructFromDependencyGraph(DependencyGraph dg);
    public IEnumerable`1<ExpandedDependencyItem> GetDependencyFrom(string from);
    public IEnumerable`1<ExpandedDependencyItem> GetDependencyTo(string to);
    private void BuildIndex();
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.PostProcessInfo : object {
    public static string FileName;
    private static Encoding UTF8;
    [CompilerGeneratedAttribute]
private List`1<PostProcessorInfo> <PostProcessorInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostProcessOutputsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageInfoFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestItemsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private PostProcessOutputs <PostProcessOutputs>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildMessageInfo <MessageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ManifestItem> <ManifestItems>k__BackingField;
    public List`1<PostProcessorInfo> PostProcessorInfos { get; public set; }
    public string PostProcessOutputsFile { get; public set; }
    public string MessageInfoFile { get; public set; }
    public string ManifestItemsFile { get; public set; }
    [JsonIgnoreAttribute]
public PostProcessOutputs PostProcessOutputs { get; private set; }
    [JsonIgnoreAttribute]
public BuildMessageInfo MessageInfo { get; private set; }
    [JsonIgnoreAttribute]
public List`1<ManifestItem> ManifestItems { get; public set; }
    private static PostProcessInfo();
    [CompilerGeneratedAttribute]
public List`1<PostProcessorInfo> get_PostProcessorInfos();
    [CompilerGeneratedAttribute]
public void set_PostProcessorInfos(List`1<PostProcessorInfo> value);
    [CompilerGeneratedAttribute]
public string get_PostProcessOutputsFile();
    [CompilerGeneratedAttribute]
public void set_PostProcessOutputsFile(string value);
    [CompilerGeneratedAttribute]
public string get_MessageInfoFile();
    [CompilerGeneratedAttribute]
public void set_MessageInfoFile(string value);
    [CompilerGeneratedAttribute]
public string get_ManifestItemsFile();
    [CompilerGeneratedAttribute]
public void set_ManifestItemsFile(string value);
    [CompilerGeneratedAttribute]
public PostProcessOutputs get_PostProcessOutputs();
    [CompilerGeneratedAttribute]
private void set_PostProcessOutputs(PostProcessOutputs value);
    [CompilerGeneratedAttribute]
public BuildMessageInfo get_MessageInfo();
    [CompilerGeneratedAttribute]
private void set_MessageInfo(BuildMessageInfo value);
    [CompilerGeneratedAttribute]
public List`1<ManifestItem> get_ManifestItems();
    [CompilerGeneratedAttribute]
public void set_ManifestItems(List`1<ManifestItem> value);
    internal void Load(string baseDir);
    internal void Save(string baseDir);
    public void SaveManifest(string baseDir);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.PostProcessorInfo : ProcessorInfoBase {
    [CompilerGeneratedAttribute]
private string <ContextInfoFile>k__BackingField;
    public string ContextInfoFile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContextInfoFile();
    [CompilerGeneratedAttribute]
public void set_ContextInfoFile(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.PostProcessOutputs : OSPlatformSensitiveDictionary`1<string> {
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.ProcessorInfo : ProcessorInfoBase {
    [CompilerGeneratedAttribute]
private List`1<ProcessorStepInfo> <Steps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateModelManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<string> <InvalidSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelManifest <IntermediateModelManifest>k__BackingField;
    public List`1<ProcessorStepInfo> Steps { get; }
    public string IntermediateModelManifestFile { get; public set; }
    public ImmutableList`1<string> InvalidSourceFiles { get; public set; }
    [JsonIgnoreAttribute]
public ModelManifest IntermediateModelManifest { get; private set; }
    [CompilerGeneratedAttribute]
public List`1<ProcessorStepInfo> get_Steps();
    [CompilerGeneratedAttribute]
public string get_IntermediateModelManifestFile();
    [CompilerGeneratedAttribute]
public void set_IntermediateModelManifestFile(string value);
    [CompilerGeneratedAttribute]
public ImmutableList`1<string> get_InvalidSourceFiles();
    [CompilerGeneratedAttribute]
public void set_InvalidSourceFiles(ImmutableList`1<string> value);
    [CompilerGeneratedAttribute]
public ModelManifest get_IntermediateModelManifest();
    [CompilerGeneratedAttribute]
private void set_IntermediateModelManifest(ModelManifest value);
    internal void Load(string baseDir);
    internal void Save(string baseDir);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.ProcessorInfoBase : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncrementalContextHash>k__BackingField;
    public string Name { get; public set; }
    public string IncrementalContextHash { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_IncrementalContextHash();
    [CompilerGeneratedAttribute]
public void set_IncrementalContextHash(string value);
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.ProcessorStepInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncrementalContextHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextInfoFile>k__BackingField;
    public string Name { get; public set; }
    public string IncrementalContextHash { get; public set; }
    public string ContextInfoFile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_IncrementalContextHash();
    [CompilerGeneratedAttribute]
public void set_IncrementalContextHash(string value);
    [CompilerGeneratedAttribute]
public string get_ContextInfoFile();
    [CompilerGeneratedAttribute]
public void set_ContextInfoFile(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.DocAsCode.Build.Engine.Incrementals.ReferenceItem : object {
    [CompilerGeneratedAttribute]
private DependencyItemSourceInfo <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportedBy>k__BackingField;
    private StringComparer FileComparer { get; }
    [JsonPropertyAttribute("reference")]
public DependencyItemSourceInfo Reference { get; }
    [JsonPropertyAttribute("file")]
public string File { get; }
    [JsonPropertyAttribute("reportedBy")]
public string ReportedBy { get; }
    [JsonConstructorAttribute]
public ReferenceItem(DependencyItemSourceInfo reference, string file, string reportedBy);
    private StringComparer get_FileComparer();
    [CompilerGeneratedAttribute]
public DependencyItemSourceInfo get_Reference();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public string get_ReportedBy();
    public sealed virtual bool Equals(ReferenceItem other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.DocAsCode.Build.Engine.InternalManifestItem : object {
    [CompilerGeneratedAttribute]
private string <DocumentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalPathFromRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileWithoutExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelWithCache <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    public string DocumentType { get; public set; }
    public string LocalPathFromRoot { get; public set; }
    public string Key { get; public set; }
    public string FileWithoutExtension { get; public set; }
    public string Extension { get; public set; }
    public string ResourceFile { get; public set; }
    public string InputFolder { get; public set; }
    public ModelWithCache Model { get; public set; }
    public Dictionary`2<string, object> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DocumentType();
    [CompilerGeneratedAttribute]
public void set_DocumentType(string value);
    [CompilerGeneratedAttribute]
public string get_LocalPathFromRoot();
    [CompilerGeneratedAttribute]
public void set_LocalPathFromRoot(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_FileWithoutExtension();
    [CompilerGeneratedAttribute]
public void set_FileWithoutExtension(string value);
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceFile();
    [CompilerGeneratedAttribute]
public void set_ResourceFile(string value);
    [CompilerGeneratedAttribute]
public string get_InputFolder();
    [CompilerGeneratedAttribute]
public void set_InputFolder(string value);
    [CompilerGeneratedAttribute]
public ModelWithCache get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(ModelWithCache value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
}
public class Microsoft.DocAsCode.Build.Engine.InvalidCrossReferenceException : DocumentException {
    [CompilerGeneratedAttribute]
private XRefDetails <XRefDetails>k__BackingField;
    public XRefDetails XRefDetails { get; }
    public InvalidCrossReferenceException(XRefDetails xrefDetails);
    protected InvalidCrossReferenceException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public XRefDetails get_XRefDetails();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.DocAsCode.Build.Engine.InvalidPreprocessorException : DocfxException {
    public InvalidPreprocessorException(string message);
    public InvalidPreprocessorException(string message, Exception innerException);
    protected InvalidPreprocessorException(SerializationInfo info, StreamingContext context);
}
internal interface Microsoft.DocAsCode.Build.Engine.IPhaseHandler {
    public string Name { get; }
    public BuildPhase Phase { get; }
    public abstract virtual void Handle(List`1<HostService> hostServices, int maxParallelism);
    public abstract virtual string get_Name();
    public abstract virtual BuildPhase get_Phase();
}
internal interface Microsoft.DocAsCode.Build.Engine.IPostProcessorsHandler {
    public abstract virtual void Handle(List`1<PostProcessor> postProcessors, Manifest manifest, string outputFolder);
}
public interface Microsoft.DocAsCode.Build.Engine.IResourceFileReader {
    public IEnumerable`1<string> Names { get; }
    public abstract virtual IEnumerable`1<string> get_Names();
    public abstract virtual string GetResource(string name);
    public abstract virtual IEnumerable`1<ResourceInfo> GetResources(string selector);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, Stream>> GetResourceStreams(string selector);
    public abstract virtual Stream GetResourceStream(string name);
}
public interface Microsoft.DocAsCode.Build.Engine.ITemplatePreprocessor {
    public bool ContainsGetOptions { get; }
    public bool ContainsModelTransformation { get; }
    public string Path { get; }
    public string Name { get; }
    public abstract virtual bool get_ContainsGetOptions();
    public abstract virtual bool get_ContainsModelTransformation();
    public abstract virtual object GetOptions(object model);
    public abstract virtual object TransformModel(object model);
    public abstract virtual string get_Path();
    public abstract virtual string get_Name();
}
public interface Microsoft.DocAsCode.Build.Engine.ITemplateRenderer {
    public IEnumerable`1<string> Dependencies { get; }
    public string Raw { get; }
    public string Path { get; }
    public string Name { get; }
    public abstract virtual string Render(object model);
    public abstract virtual IEnumerable`1<string> get_Dependencies();
    public abstract virtual string get_Raw();
    public abstract virtual string get_Path();
    public abstract virtual string get_Name();
}
public interface Microsoft.DocAsCode.Build.Engine.IXRefContainer {
    public bool IsEmbeddedRedirections { get; }
    public abstract virtual bool get_IsEmbeddedRedirections();
    public abstract virtual IEnumerable`1<XRefMapRedirection> GetRedirections();
    public abstract virtual IXRefContainerReader GetReader();
}
public interface Microsoft.DocAsCode.Build.Engine.IXRefContainerReader {
    public abstract virtual XRefSpec Find(string uid);
}
public static class Microsoft.DocAsCode.Build.Engine.JintProcessorHelper : object {
    private static Engine DefaultEngine;
    private static JintProcessorHelper();
    public static JsValue ConvertObjectToJsValue(object raw);
}
[ExportAttribute("jsonTokenTree", "Microsoft.DocAsCode.Plugins.IMarkdownServiceProvider")]
public class Microsoft.DocAsCode.Build.Engine.JsonTokenTreeServiceProvider : object {
    public sealed virtual IMarkdownService CreateMarkdownService(MarkdownServiceParameters parameters);
}
internal class Microsoft.DocAsCode.Build.Engine.LinkPhaseHandler : object {
    [CompilerGeneratedAttribute]
private DocumentBuildContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateProcessor <TemplateProcessor>k__BackingField;
    private List`1<ManifestItemWithContext> _manifestWithContext;
    public string Name { get; }
    public BuildPhase Phase { get; }
    public DocumentBuildContext Context { get; }
    public TemplateProcessor TemplateProcessor { get; }
    public LinkPhaseHandler(DocumentBuildContext context, TemplateProcessor templateProcessor);
    public sealed virtual string get_Name();
    public sealed virtual BuildPhase get_Phase();
    [CompilerGeneratedAttribute]
public DocumentBuildContext get_Context();
    [CompilerGeneratedAttribute]
public TemplateProcessor get_TemplateProcessor();
    public sealed virtual void Handle(List`1<HostService> hostServices, int maxParallelism);
    public void PostbuildAndSave(List`1<HostService> hostServices, int maxParallelism);
    public void ProcessManifest(List`1<HostService> hostServices, int maxParallelism);
    private void Postbuild(List`1<HostService> hostServices, int maxParallelism);
    private void Save(List`1<HostService> hostServices, int maxParallelism);
    private IEnumerable`1<ManifestItemWithContext> ExportManifest(HostService hostService);
    private InternalManifestItem HandleSaveResult(HostService hostService, FileModel model, SaveResult result);
    private void CheckFileLink(FileModel model, HostService hostService, SaveResult result);
    private void HandleUids(SaveResult result);
    private void RegisterXRefSpec(SaveResult result);
    private InternalManifestItem GetManifestItem(FileModel model, SaveResult result);
    private static void Postbuild(HostService hostService);
}
internal class Microsoft.DocAsCode.Build.Engine.LinkPhaseHandlerWithIncremental : object {
    private LinkPhaseHandler _inner;
    [CompilerGeneratedAttribute]
private DocumentBuildContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateProcessor <TemplateProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementalBuildContext <IncrementalContext>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildVersionInfo <LastBuildVersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildVersionInfo <CurrentBuildVersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildMessageInfo <LastBuildMessageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildMessageInfo <CurrentBuildMessageInfo>k__BackingField;
    public string Name { get; }
    public BuildPhase Phase { get; }
    public DocumentBuildContext Context { get; }
    public TemplateProcessor TemplateProcessor { get; }
    public IncrementalBuildContext IncrementalContext { get; }
    public BuildVersionInfo LastBuildVersionInfo { get; }
    public BuildVersionInfo CurrentBuildVersionInfo { get; }
    public BuildMessageInfo LastBuildMessageInfo { get; }
    public BuildMessageInfo CurrentBuildMessageInfo { get; }
    public LinkPhaseHandlerWithIncremental(LinkPhaseHandler inner);
    public sealed virtual string get_Name();
    public sealed virtual BuildPhase get_Phase();
    [CompilerGeneratedAttribute]
public DocumentBuildContext get_Context();
    [CompilerGeneratedAttribute]
public TemplateProcessor get_TemplateProcessor();
    [CompilerGeneratedAttribute]
public IncrementalBuildContext get_IncrementalContext();
    [CompilerGeneratedAttribute]
public BuildVersionInfo get_LastBuildVersionInfo();
    [CompilerGeneratedAttribute]
public BuildVersionInfo get_CurrentBuildVersionInfo();
    [CompilerGeneratedAttribute]
public BuildMessageInfo get_LastBuildMessageInfo();
    [CompilerGeneratedAttribute]
public BuildMessageInfo get_CurrentBuildMessageInfo();
    public sealed virtual void Handle(List`1<HostService> hostServices, int maxParallelism);
    private void PreHandle(List`1<HostService> hostServices);
    private void PostHandle(List`1<HostService> hostServices, int maxParallelism);
    private void SaveContextInfo(List`1<HostService> hostServices);
    private void ReloadModels(IEnumerable`1<HostService> hostServices);
    private void ReloadModelsPerChanges(IEnumerable`1<HostService> hostServices);
    private void RegisterUnloadedXRefSpec(IEnumerable`1<HostService> hostServices);
    private void RegisterUnloadedFileMap(IEnumerable`1<HostService> hostServices);
    private void ProcessUnloadedTemplateDependency(IEnumerable`1<HostService> hostServices, int maxParallelism);
    private void UpdateManifest();
    private void UpdateFileMap(IEnumerable`1<HostService> hostServices);
    private void UpdateXrefMap(IEnumerable`1<HostService> hostServices);
    private List`1<ManifestItem> GetUnloadedManifestItems(IEnumerable`1<HostService> hostServices, int maxParallelism);
    private ManifestItem UpdateItem(ManifestItem item, string sourceRelativePath);
    private void LoadExternalXRefSpec();
    private void SaveExternalXRefSpec();
    [CompilerGeneratedAttribute]
private bool <ReloadModelsPerChanges>b__32_0(DependencyItem d);
    [CompilerGeneratedAttribute]
private bool <ReloadModelsPerChanges>b__32_1(DependencyItem d);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType3`2<UidDefinition, XRefSpec> <UpdateXrefMap>b__38_0(UidDefinition uid);
}
internal class Microsoft.DocAsCode.Build.Engine.LiquidTemplateRenderer : object {
    public static string Extension;
    private static object _locker;
    private static Regex MasterPageRegex;
    private static Regex MasterPageBodyRegex;
    private Template _template;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Raw { get; }
    public IEnumerable`1<string> Dependencies { get; }
    public string Path { get; }
    public string Name { get; }
    private LiquidTemplateRenderer(Template liquidTemplate, string template, string path, IResourceFileReader reader, IEnumerable`1<string> dependencies, string name);
    private static LiquidTemplateRenderer();
    public static LiquidTemplateRenderer Create(IResourceFileReader resourceProvider, ResourceInfo info, string name);
    private IEnumerable`1<string> ParseDependencies(string path, IResourceFileReader reader, IEnumerable`1<string> raw);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Raw();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Dependencies();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual string Render(object model);
}
public class Microsoft.DocAsCode.Build.Engine.LocalFileResourceReader : ResourceFileReader {
    private static int MaxSearchLevel;
    private static StringComparer ResourceComparer;
    private string _directory;
    private int _maxDepth;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    public string Name { get; }
    public IEnumerable`1<string> Names { get; }
    public bool IsEmpty { get; }
    public LocalFileResourceReader(string directory, int maxSearchLevel);
    private static LocalFileResourceReader();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<string> get_Names();
    [CompilerGeneratedAttribute]
public virtual bool get_IsEmpty();
    public virtual Stream GetResourceStream(string name);
    private IEnumerable`1<string> GetFiles(string directory, string searchPattern, int searchLevel);
    [CompilerGeneratedAttribute]
private string <.ctor>b__13_0(string s);
    [CompilerGeneratedAttribute]
private string <GetFiles>b__15_0(string dir);
}
internal class Microsoft.DocAsCode.Build.Engine.ManifestItemWithContext : object {
    [CompilerGeneratedAttribute]
private InternalManifestItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private FileModel <FileModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocumentProcessor <Processor>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateBundle <TemplateBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformModelOptions <Options>k__BackingField;
    public InternalManifestItem Item { get; }
    public FileModel FileModel { get; }
    public IDocumentProcessor Processor { get; }
    public TemplateBundle TemplateBundle { get; }
    public TransformModelOptions Options { get; public set; }
    public ManifestItemWithContext(InternalManifestItem item, FileModel model, IDocumentProcessor processor, TemplateBundle bundle);
    [CompilerGeneratedAttribute]
public InternalManifestItem get_Item();
    [CompilerGeneratedAttribute]
public FileModel get_FileModel();
    [CompilerGeneratedAttribute]
public IDocumentProcessor get_Processor();
    [CompilerGeneratedAttribute]
public TemplateBundle get_TemplateBundle();
    [CompilerGeneratedAttribute]
public TransformModelOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(TransformModelOptions value);
}
internal class Microsoft.DocAsCode.Build.Engine.ManifestProcessor : object {
    private List`1<ManifestItemWithContext> _manifestWithContext;
    private DocumentBuildContext _context;
    private TemplateProcessor _templateProcessor;
    private IDictionary`2<string, object> _globalMetadata;
    public ManifestProcessor(List`1<ManifestItemWithContext> manifestWithContext, DocumentBuildContext context, TemplateProcessor templateProcessor);
    public void Process();
    private void UpdateContext();
    private void NormalizeToObject();
    private void FeedOptions();
    private void UpdateHref();
    private void ApplySystemMetadata();
    private List`1<ManifestItem> ProcessTemplate();
    [CompilerGeneratedAttribute]
private void <FeedOptions>b__8_0(ManifestItemWithContext m);
    [CompilerGeneratedAttribute]
private void <UpdateHref>b__9_0(ManifestItemWithContext m);
}
public static class Microsoft.DocAsCode.Build.Engine.MarkupUtility : object {
    private static Char[] UriFragmentOrQueryString;
    private static MarkupUtility();
    public static MarkupResult Parse(MarkupResult markupResult, FileAndType ft, ImmutableDictionary`2<string, FileAndType> sourceFiles);
    public static MarkupResult Parse(MarkupResult markupResult, string file, ImmutableDictionary`2<string, FileAndType> sourceFiles);
    private static MarkupResult ParseCore(MarkupResult markupResult, string file, ImmutableDictionary`2<string, FileAndType> sourceFiles);
    private static ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> GetFileLinkSource(string currentFile, HtmlDocument doc, ImmutableDictionary`2<string, FileAndType> sourceFiles);
    private static ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> GetUidLinkSources(HtmlDocument doc);
}
internal class Microsoft.DocAsCode.Build.Engine.MustacheTemplateRenderer : object {
    public static string Extension;
    private static Regex IncludeRegex;
    private static Regex MasterPageRegex;
    private static Regex MasterPageBodyRegex;
    private ResourceTemplateLocator _resourceTemplateLocator;
    private IResourceFileReader _reader;
    private Template _template;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IEnumerable`1<string> Dependencies { get; }
    public string Raw { get; }
    public string Path { get; }
    public string Name { get; }
    public MustacheTemplateRenderer(IResourceFileReader reader, ResourceInfo info, string name);
    private static MustacheTemplateRenderer();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Dependencies();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Raw();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual string Render(object model);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.MustacheTemplateRenderer/<ExtractDependencyResourceNames>d__21")]
private IEnumerable`1<string> ExtractDependencyResourceNames(string template);
}
internal static class Microsoft.DocAsCode.Build.Engine.ParseTemplateHelper : object {
    private static Regex IsRegexPatternRegex;
    private static ParseTemplateHelper();
    public static string ExpandMasterPage(IResourceFileReader reader, ResourceInfo info, Regex masterRegex, Regex bodyRegex);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.ParseTemplateHelper/<ExtractMasterPageResourceName>d__2")]
private static IEnumerable`1<string> ExtractMasterPageResourceName(IResourceFileReader reader, ResourceInfo info, Regex masterRegex);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.ParseTemplateHelper/<GetResourceName>d__3")]
public static IEnumerable`1<string> GetResourceName(string file, string templateName, IResourceFileReader reader);
    private static string GetRelativeResourceKey(string templateName, string relativePath);
}
internal class Microsoft.DocAsCode.Build.Engine.PhaseProcessor : object {
    [CompilerGeneratedAttribute]
private List`1<IPhaseHandler> <Handlers>k__BackingField;
    public List`1<IPhaseHandler> Handlers { get; }
    [CompilerGeneratedAttribute]
public List`1<IPhaseHandler> get_Handlers();
    public void Process(List`1<HostService> hostServices, int maxParallelism);
}
internal class Microsoft.DocAsCode.Build.Engine.PostProcessor : object {
    [CompilerGeneratedAttribute]
private string <ContractName>k__BackingField;
    [CompilerGeneratedAttribute]
private IPostProcessor <Processor>k__BackingField;
    public string ContractName { get; public set; }
    public IPostProcessor Processor { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContractName();
    [CompilerGeneratedAttribute]
public void set_ContractName(string value);
    [CompilerGeneratedAttribute]
public IPostProcessor get_Processor();
    [CompilerGeneratedAttribute]
public void set_Processor(IPostProcessor value);
}
internal class Microsoft.DocAsCode.Build.Engine.PostProcessorsHandler : object {
    public sealed virtual void Handle(List`1<PostProcessor> postProcessors, Manifest manifest, string outputFolder);
}
internal class Microsoft.DocAsCode.Build.Engine.PostProcessorsHandlerWithIncremental : object {
    private IPostProcessorsHandler _innerHandler;
    private IncrementalPostProcessorsContext _increContext;
    public PostProcessorsHandlerWithIncremental(IPostProcessorsHandler innerPostProcessorsHandler, IncrementalPostProcessorsContext increContext);
    public sealed virtual void Handle(List`1<PostProcessor> postProcessors, Manifest manifest, string outputFolder);
    private void PreHandle(Manifest manifest, List`1<PostProcessor> postProcessors, string outputFolder, List`1<ManifestItem> increItems, List`1<ManifestItem> nonIncreItems);
    private void PostHandle(Manifest manifest, List`1<ManifestItem> increItems);
    private void TraceIntermediateInfo(Manifest manifest);
    private HashSet`1<string> GetFilesToReplayMessages(List`1<ManifestItem> increItems);
    private void CopyToCurrentCache(List`1<ManifestItem> increItems);
    private static void CheckNoIncrementalItems(Manifest manifest, string prependString);
    private List`1<ManifestItem> RestoreIncrementalManifestItems(Manifest manifest);
    private static OSPlatformSensitiveDictionary`1<List`1<ManifestItem>> GroupBySourceRelativePath(IEnumerable`1<ManifestItem> items);
    [CompilerGeneratedAttribute]
private bool <CopyToCurrentCache>b__8_2(<>f__AnonymousType13`2<ManifestItem, OutputFileInfo> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private void <CopyToCurrentCache>b__8_4(OutputFileInfo item);
}
internal class Microsoft.DocAsCode.Build.Engine.PostProcessorsManager : object {
    private List`1<PostProcessor> _postProcessors;
    private IPostProcessorsHandler _postProcessorsHandler;
    public PostProcessorsManager(CompositionHost container, ImmutableArray`1<string> postProcessorNames);
    public void IncrementalInitialize(string intermediateFolder, BuildInfo currentBuildInfo, BuildInfo lastBuildInfo, bool forcePostProcess, int maxParallelism);
    public ImmutableDictionary`2<string, object> PrepareMetadata(ImmutableDictionary`2<string, object> metadata);
    public void Process(Manifest manifest, string outputFolder);
    private static List`1<PostProcessor> GetPostProcessor(CompositionHost container, ImmutableArray`1<string> processors);
    private static void AddBuildInPostProcessor(List`1<PostProcessor> processorList);
    public sealed virtual void Dispose();
}
public class Microsoft.DocAsCode.Build.Engine.PreprocessorLoader : object {
    private IResourceFileReader _reader;
    private int _maxParallelism;
    private DocumentBuildContext _context;
    public PreprocessorLoader(IResourceFileReader reader, DocumentBuildContext context, int maxParallelism);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.PreprocessorLoader/<LoadStandalones>d__4")]
public IEnumerable`1<ITemplatePreprocessor> LoadStandalones();
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.PreprocessorLoader/<LoadFromRenderer>d__5")]
public IEnumerable`1<ITemplatePreprocessor> LoadFromRenderer(ITemplateRenderer renderer);
    public ITemplatePreprocessor Load(ResourceInfo res, string name);
}
internal class Microsoft.DocAsCode.Build.Engine.PreprocessorWithResourcePool : object {
    private ResourcePoolManager`1<ITemplatePreprocessor> _preprocessorPool;
    [CompilerGeneratedAttribute]
private bool <ContainsGetOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsModelTransformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool ContainsGetOptions { get; }
    public bool ContainsModelTransformation { get; }
    public string Path { get; }
    public string Name { get; }
    public PreprocessorWithResourcePool(Func`1<ITemplatePreprocessor> creater, int maxParallelism);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ContainsGetOptions();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ContainsModelTransformation();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual object GetOptions(object model);
    public sealed virtual object TransformModel(object model);
}
public class Microsoft.DocAsCode.Build.Engine.RemoveDebugInfo : HtmlDocumentHandler {
    private String[] DebugInfoAttributes;
    protected virtual void HandleCore(HtmlDocument document, ManifestItem manifestItem, string inputFile, string outputFile);
}
public class Microsoft.DocAsCode.Build.Engine.RendererLoader : object {
    private IResourceFileReader _reader;
    private int _maxParallelism;
    public RendererLoader(IResourceFileReader reader, int maxParallelism);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.RendererLoader/<LoadAll>d__3")]
public IEnumerable`1<ITemplateRenderer> LoadAll();
    public ITemplateRenderer Load(string path);
    public ITemplateRenderer Load(ResourceInfo res);
}
internal class Microsoft.DocAsCode.Build.Engine.RendererWithResourcePool : object {
    private ResourcePoolManager`1<ITemplateRenderer> _rendererPool;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IEnumerable`1<string> Dependencies { get; }
    public string Raw { get; }
    public string Path { get; }
    public string Name { get; }
    public RendererWithResourcePool(Func`1<ITemplateRenderer> creater, int maxParallelism);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Dependencies();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Raw();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual string Render(object model);
}
public class Microsoft.DocAsCode.Build.Engine.ResourceFileExceedsMaxDepthException : DocfxException {
    [CompilerGeneratedAttribute]
private int <MaxDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    public int MaxDepth { get; }
    public string DirectoryName { get; }
    public string ResourceName { get; }
    public ResourceFileExceedsMaxDepthException(int maxDepth, string fileName, string resourceName);
    protected ResourceFileExceedsMaxDepthException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_MaxDepth();
    [CompilerGeneratedAttribute]
public string get_DirectoryName();
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.DocAsCode.Build.Engine.ResourceFileReader : object {
    public string Name { get; }
    public bool IsEmpty { get; }
    public IEnumerable`1<string> Names { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual IEnumerable`1<string> get_Names();
    public virtual string GetResource(string name);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.ResourceFileReader/<GetResources>d__7")]
public sealed virtual IEnumerable`1<ResourceInfo> GetResources(string selector);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.ResourceFileReader/<GetResourceStreams>d__8")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, Stream>> GetResourceStreams(string selector);
    public abstract virtual Stream GetResourceStream(string name);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    protected static string GetString(Stream stream);
}
public class Microsoft.DocAsCode.Build.Engine.ResourceFinder : object {
    private IEnumerable`1<string> _embeddedResourceNames;
    private string _resourcePrefix;
    private Assembly _assembly;
    private static Func`4<string, string, string, bool> resourceNamePredicator;
    private string _baseDirectory;
    public ResourceFinder(Assembly assembly, string rootNamespace, string baseDirectory);
    private static ResourceFinder();
    public ResourceFileReader Find(string name);
}
public class Microsoft.DocAsCode.Build.Engine.ResourceInfo : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Path { get; }
    public string Content { get; }
    public ResourceInfo(string path, string content);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_Content();
}
internal class Microsoft.DocAsCode.Build.Engine.ResourceTemplateLocator : object {
    private static string PartialTemplateExtension;
    private ConcurrentDictionary`2<string, Template> _templateCache;
    private IResourceFileReader _reader;
    public ResourceTemplateLocator(IResourceFileReader reader);
    public Template GetTemplate(string name);
}
public class Microsoft.DocAsCode.Build.Engine.SearchIndexItem : object {
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keywords>k__BackingField;
    [JsonPropertyAttribute("href")]
public string Href { get; public set; }
    [JsonPropertyAttribute("title")]
public string Title { get; public set; }
    [JsonPropertyAttribute("keywords")]
public string Keywords { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Keywords();
    [CompilerGeneratedAttribute]
public void set_Keywords(string value);
    public virtual bool Equals(object obj);
    public bool Equals(SearchIndexItem other);
    public virtual int GetHashCode();
}
public class Microsoft.DocAsCode.Build.Engine.SingleDocumentBuilder : object {
    private static string PhaseName;
    private static string XRefMapFileName;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDocumentProcessor> <Processors>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IInputMetadataValidator> <MetadataValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownServiceProvider <MarkdownServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildInfo <CurrentBuildInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildInfo <LastBuildInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownService <MarkdownService>k__BackingField;
    public IEnumerable`1<IDocumentProcessor> Processors { get; public set; }
    public IEnumerable`1<IInputMetadataValidator> MetadataValidators { get; public set; }
    public IMarkdownServiceProvider MarkdownServiceProvider { get; public set; }
    internal BuildInfo CurrentBuildInfo { get; internal set; }
    internal BuildInfo LastBuildInfo { get; internal set; }
    internal string IntermediateFolder { get; internal set; }
    private IMarkdownService MarkdownService { get; private set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDocumentProcessor> get_Processors();
    [CompilerGeneratedAttribute]
public void set_Processors(IEnumerable`1<IDocumentProcessor> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IInputMetadataValidator> get_MetadataValidators();
    [CompilerGeneratedAttribute]
public void set_MetadataValidators(IEnumerable`1<IInputMetadataValidator> value);
    [CompilerGeneratedAttribute]
public IMarkdownServiceProvider get_MarkdownServiceProvider();
    [CompilerGeneratedAttribute]
public void set_MarkdownServiceProvider(IMarkdownServiceProvider value);
    [CompilerGeneratedAttribute]
internal BuildInfo get_CurrentBuildInfo();
    [CompilerGeneratedAttribute]
internal void set_CurrentBuildInfo(BuildInfo value);
    [CompilerGeneratedAttribute]
internal BuildInfo get_LastBuildInfo();
    [CompilerGeneratedAttribute]
internal void set_LastBuildInfo(BuildInfo value);
    [CompilerGeneratedAttribute]
internal string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
internal void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
private IMarkdownService get_MarkdownService();
    [CompilerGeneratedAttribute]
private void set_MarkdownService(IMarkdownService value);
    public static ImmutableList`1<FileModel> Build(IDocumentProcessor processor, DocumentBuildParameters parameters, IMarkdownService markdownService);
    public Manifest Build(DocumentBuildParameters parameters);
    private Manifest BuildCore(DocumentBuildParameters parameters);
    private void BuildCore(PhaseProcessor phaseProcessor, List`1<HostService> hostServices, DocumentBuildContext context);
    private void Cleanup(HostService hostService);
    private List`1<HostService> GetInnerContexts(DocumentBuildParameters parameters, IEnumerable`1<IDocumentProcessor> processors, TemplateProcessor templateProcessor, IHostServiceCreator creator);
    private void Prepare(DocumentBuildParameters parameters, DocumentBuildContext context, TemplateProcessor templateProcessor, string markdownServiceContextHash, IHostServiceCreator& hostServiceCreator, PhaseProcessor& phaseProcessor);
    private static List`1<HomepageInfo> GetHomepages(DocumentBuildContext context);
    private static string ExportXRefMap(DocumentBuildParameters parameters, DocumentBuildContext context);
    private static string GetXrefMapFileNameWithGroup(DocumentBuildParameters parameters);
    private IMarkdownService CreateMarkdownService(DocumentBuildParameters parameters, ImmutableDictionary`2<string, string> tokens);
    public sealed virtual void Dispose();
}
[ExportAttribute("SitemapGenerator", "Microsoft.DocAsCode.Plugins.IPostProcessor")]
public class Microsoft.DocAsCode.Build.Engine.SitemapGenerator : object {
    private static XNamespace Namespace;
    private static string HtmlExtension;
    private static string SitemapName;
    public string Name { get; }
    private static SitemapGenerator();
    public string get_Name();
    public sealed virtual ImmutableDictionary`2<string, object> PrepareMetadata(ImmutableDictionary`2<string, object> metadata);
    public sealed virtual Manifest Process(Manifest manifest, string outputFolder);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.SitemapGenerator/<GetHtmlOutputFiles>d__7")]
private IEnumerable`1<Tuple`2<string, OutputFileInfo>> GetHtmlOutputFiles(Manifest manifest);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.SitemapGenerator/<GetElements>d__8")]
private IEnumerable`1<XElement> GetElements(Manifest manifest, Uri baseUri);
    private XElement GetElement(string relativePath, Uri baseUri, SitemapElementOptions options);
    private SitemapElementOptions GetOptions(SitemapOptions rootOptions, string sourcePath);
    private SitemapElementOptions GetMatchingOptions(SitemapOptions options, string sourcePath);
}
internal class Microsoft.DocAsCode.Build.Engine.SystemMetadata : object {
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TocTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TocPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootTocPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePathToRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePathToRootToc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePathToToc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootTocKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TocKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionFolder>k__BackingField;
    [JsonPropertyAttribute("_lang")]
public string Language { get; public set; }
    [JsonPropertyAttribute("_title")]
public string Title { get; public set; }
    [JsonPropertyAttribute("_tocTitle")]
public string TocTitle { get; public set; }
    [JsonPropertyAttribute("_name")]
public string Name { get; public set; }
    [JsonPropertyAttribute("_description")]
public string Description { get; public set; }
    [JsonPropertyAttribute("_tocPath")]
public string TocPath { get; public set; }
    [JsonPropertyAttribute("_navPath")]
public string RootTocPath { get; public set; }
    [JsonPropertyAttribute("_rel")]
public string RelativePathToRoot { get; public set; }
    [JsonPropertyAttribute("_path")]
public string Path { get; public set; }
    [JsonPropertyAttribute("_key")]
public string Key { get; public set; }
    [JsonPropertyAttribute("_navRel")]
public string RelativePathToRootToc { get; public set; }
    [JsonPropertyAttribute("_tocRel")]
public string RelativePathToToc { get; public set; }
    [JsonPropertyAttribute("_navKey")]
public string RootTocKey { get; public set; }
    [JsonPropertyAttribute("_tocKey")]
public string TocKey { get; public set; }
    [JsonPropertyAttribute("_version")]
public string VersionName { get; public set; }
    [JsonPropertyAttribute("_versionPath")]
public string VersionFolder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_TocTitle();
    [CompilerGeneratedAttribute]
public void set_TocTitle(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_TocPath();
    [CompilerGeneratedAttribute]
public void set_TocPath(string value);
    [CompilerGeneratedAttribute]
public string get_RootTocPath();
    [CompilerGeneratedAttribute]
public void set_RootTocPath(string value);
    [CompilerGeneratedAttribute]
public string get_RelativePathToRoot();
    [CompilerGeneratedAttribute]
public void set_RelativePathToRoot(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_RelativePathToRootToc();
    [CompilerGeneratedAttribute]
public void set_RelativePathToRootToc(string value);
    [CompilerGeneratedAttribute]
public string get_RelativePathToToc();
    [CompilerGeneratedAttribute]
public void set_RelativePathToToc(string value);
    [CompilerGeneratedAttribute]
public string get_RootTocKey();
    [CompilerGeneratedAttribute]
public void set_RootTocKey(string value);
    [CompilerGeneratedAttribute]
public string get_TocKey();
    [CompilerGeneratedAttribute]
public void set_TocKey(string value);
    [CompilerGeneratedAttribute]
public string get_VersionName();
    [CompilerGeneratedAttribute]
public void set_VersionName(string value);
    [CompilerGeneratedAttribute]
public string get_VersionFolder();
    [CompilerGeneratedAttribute]
public void set_VersionFolder(string value);
}
internal class Microsoft.DocAsCode.Build.Engine.SystemMetadataGenerator : object {
    private IDocumentBuildContext _context;
    private IEnumerable`1<FileInfo> _toc;
    public SystemMetadataGenerator(IDocumentBuildContext context);
    public SystemMetadata Generate(InternalManifestItem item);
    private void GetRootTocFromOutputRoot(SystemMetadata attrs, RelativePath file);
    private FileInfo GetDefaultToc(string fileKey);
    private static FileInfo GetNearestToc(IEnumerable`1<FileInfo> tocFiles, RelativePath file);
    private static string GetFileKey(string key);
    [CompilerGeneratedAttribute]
private FileInfo <Generate>b__3_0(string s);
}
public class Microsoft.DocAsCode.Build.Engine.Template : object {
    private static string Primary;
    private static string Auxiliary;
    private object _locker;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateType <TemplateType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TemplateResourceInfo> <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsGetOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsModelTransformation>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemplateRenderer <Renderer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemplatePreprocessor <Preprocessor>k__BackingField;
    public string Name { get; }
    public string ScriptName { get; }
    public string Extension { get; }
    public string Type { get; }
    public TemplateType TemplateType { get; }
    public IEnumerable`1<TemplateResourceInfo> Resources { get; }
    public bool ContainsGetOptions { get; }
    public bool ContainsModelTransformation { get; }
    public ITemplateRenderer Renderer { get; }
    public ITemplatePreprocessor Preprocessor { get; }
    public Template(ITemplateRenderer renderer, ITemplatePreprocessor preprocessor);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_ScriptName();
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public TemplateType get_TemplateType();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TemplateResourceInfo> get_Resources();
    [CompilerGeneratedAttribute]
public bool get_ContainsGetOptions();
    [CompilerGeneratedAttribute]
public bool get_ContainsModelTransformation();
    [CompilerGeneratedAttribute]
public ITemplateRenderer get_Renderer();
    [CompilerGeneratedAttribute]
public ITemplatePreprocessor get_Preprocessor();
    public TransformModelOptions GetOptions(object model);
    public object TransformModel(object model);
    public string Transform(object model);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.Template/<ExtractDependentResources>d__37")]
private IEnumerable`1<TemplateResourceInfo> ExtractDependentResources(string templateName);
    private static TemplateInfo GetTemplateInfo(string templateName);
}
public class Microsoft.DocAsCode.Build.Engine.TemplateBundle : object {
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TemplateResourceInfo> <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Template> <Templates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentType>k__BackingField;
    public string Extension { get; }
    public IEnumerable`1<TemplateResourceInfo> Resources { get; }
    public IEnumerable`1<Template> Templates { get; }
    public string DocumentType { get; }
    public TemplateBundle(string documentType, IEnumerable`1<Template> templates);
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TemplateResourceInfo> get_Resources();
    [CompilerGeneratedAttribute]
public IEnumerable`1<Template> get_Templates();
    [CompilerGeneratedAttribute]
public string get_DocumentType();
    internal TransformModelOptions GetOptions(InternalManifestItem item, IDocumentBuildContext context);
    private TransformModelOptions MergeOptions(IEnumerable`1<TransformModelOptions> optionsList);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.TemplateBundle/<GetOptionsForEachTemplate>d__15")]
private IEnumerable`1<TransformModelOptions> GetOptionsForEachTemplate(InternalManifestItem item, IDocumentBuildContext context);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.DocAsCode.Build.Engine.TemplateCollection : Dictionary`2<string, TemplateBundle> {
    private TemplateBundle _defaultTemplate;
    [CompilerGeneratedAttribute]
private IResourceFileReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxParallelism>k__BackingField;
    public IResourceFileReader Reader { get; }
    public int MaxParallelism { get; }
    public TemplateBundle Item { get; public set; }
    public TemplateCollection(ResourceFileReader provider, DocumentBuildContext context, int maxParallelism);
    [CompilerGeneratedAttribute]
public IResourceFileReader get_Reader();
    [CompilerGeneratedAttribute]
public int get_MaxParallelism();
    public TemplateBundle get_Item(string key);
    public void set_Item(string key, TemplateBundle value);
    private static Dictionary`2<string, TemplateBundle> ReadTemplate(ResourceFileReader reader, DocumentBuildContext context, int maxParallelism);
}
public class Microsoft.DocAsCode.Build.Engine.TemplateJintPreprocessor : object {
    public static string Extension;
    public static string StandaloneExtension;
    private static string ConsoleVariableName;
    private static string UtilityVariableName;
    private static string ExportsVariableName;
    private static string GetOptionsFuncVariableName;
    private static string TransformFuncVariableName;
    private static string RequireFuncVariableName;
    private static string RequireRelativePathPrefix;
    private static string NullString;
    private object _utilityObject;
    private static object ConsoleObject;
    private Func`2<object, object> _transformFunc;
    private Func`2<object, object> _getOptionsFunc;
    [CompilerGeneratedAttribute]
private bool <ContainsGetOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsModelTransformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool ContainsGetOptions { get; }
    public bool ContainsModelTransformation { get; }
    public string Path { get; }
    public string Name { get; }
    public TemplateJintPreprocessor(IResourceFileReader resourceCollection, ResourceInfo scriptResource, DocumentBuildContext context, string name);
    private static TemplateJintPreprocessor();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ContainsGetOptions();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ContainsModelTransformation();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual object GetOptions(object model);
    public sealed virtual object TransformModel(object model);
    private Engine SetupEngine(IResourceFileReader resourceCollection, ResourceInfo scriptResource, DocumentBuildContext context);
    private Engine CreateEngine(Engine engine, String[] sharedVariables);
    private Engine CreateDefaultEngine();
    private static Func`2<object, object> GetFunc(string funcName, ObjectInstance exports);
}
public class Microsoft.DocAsCode.Build.Engine.TemplateManager : object {
    private List`1<string> _templates;
    private List`1<string> _themes;
    private ResourceFinder _finder;
    public TemplateManager(Assembly assembly, string rootNamespace, List`1<string> templates, List`1<string> themes, string baseDirectory);
    public bool TryExportTemplateFiles(string outputDirectory, string regexFilter);
    public TemplateProcessor GetTemplateProcessor(DocumentBuildContext context, int maxParallelism);
    public string GetTemplatesHash();
    public CompositeResourceReader CreateTemplateResource();
    private CompositeResourceReader CreateTemplateResource(IEnumerable`1<string> resources);
    public void ProcessTheme(string outputDirectory, bool overwrite);
    private bool TryExportResourceFiles(IEnumerable`1<string> resourceNames, string outputDirectory, bool overwrite, string regexFilter);
    private static void CopyResource(Stream stream, string filePath, bool overwrite);
    private static void Copy(Action`1<Stream> streamHandler, string filePath, bool overwrite);
    [CompilerGeneratedAttribute]
private ResourceFileReader <CreateTemplateResource>b__8_0(string s);
}
public class Microsoft.DocAsCode.Build.Engine.TemplateModelTransformer : object {
    private static string GlobalVariableKey;
    private static int MaxInvalidXrefMessagePerFile;
    private DocumentBuildContext _context;
    private ApplyTemplateSettings _settings;
    private TemplateCollection _templateCollection;
    private RendererLoader _rendererLoader;
    private IDictionary`2<string, object> _globalVariables;
    public TemplateModelTransformer(DocumentBuildContext context, TemplateCollection templateCollection, ApplyTemplateSettings settings, IDictionary`2<string, object> globals);
    internal ManifestItem Transform(InternalManifestItem item);
    private void LogInvalidXRefs(List`1<XRefDetails> unresolvedXRefs);
    private string GetLinkToPath(string fileName);
    private void AppendGlobalMetadata(IDictionary`2<string, object> model);
    private static IDictionary`2<string, object> ConvertObjectToDictionary(object model);
    private static string ExportModel(object model, string modelFileRelativePath, ExportSettings settings);
    private void TransformDocument(string result, string extension, IDocumentBuildContext context, string destFilePath, ManifestItem manifestItem, List`1& unresolvedXRefs);
    private void TransformHtml(IDocumentBuildContext context, string html, string sourceFilePath, string destFilePath, StreamWriter outputWriter, List`1& unresolvedXRefs);
    private void TransformXrefInHtml(IDocumentBuildContext context, string sourceFilePath, string destFilePath, HtmlNode node, List`1<XRefDetails> unresolvedXRefs);
    private void TransformLinkInHtml(IDocumentBuildContext context, string sourceFilePath, string destFilePath, HtmlNode node);
    private static void TransformXrefLink(HtmlNode node, IDocumentBuildContext context);
    private ValueTuple`2<bool, bool> UpdateXref(HtmlNode node, IDocumentBuildContext context, string language, XRefDetails& xref);
    private void UpdateHref(HtmlNode link, string attribute, IDocumentBuildContext context, string sourceFilePath, string destFilePath);
}
public class Microsoft.DocAsCode.Build.Engine.TemplatePageLoader : object {
    private RendererLoader _rendererLoader;
    private PreprocessorLoader _preprocessorLoader;
    public TemplatePageLoader(IResourceFileReader reader, DocumentBuildContext context, int maxParallelism);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.TemplatePageLoader/<LoadAll>d__3")]
public IEnumerable`1<Template> LoadAll();
}
public class Microsoft.DocAsCode.Build.Engine.TemplateProcessor : object {
    private ResourceFileReader _resourceProvider;
    private TemplateCollection _templateCollection;
    private DocumentBuildContext _context;
    private int _maxParallelism;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Tokens>k__BackingField;
    public IDictionary`2<string, string> Tokens { get; }
    public TemplateProcessor(ResourceFileReader resourceProvider, DocumentBuildContext context, int maxParallelism);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Tokens();
    public TemplateBundle GetTemplateBundle(string documentType);
    public bool TryGetFileExtension(string documentType, String& fileExtension);
    internal List`1<ManifestItem> Process(List`1<InternalManifestItem> manifest, ApplyTemplateSettings settings, IDictionary`2<string, object> globals);
    internal void ProcessDependencies(HashSet`1<string> documentTypes, ApplyTemplateSettings settings);
    private void ProcessDependenciesCore(string outputDirectory, IEnumerable`1<TemplateBundle> templateBundles);
    private void ProcessSingleDependency(Stream stream, string outputDirectory, string filePath);
    private List`1<ManifestItem> ProcessCore(List`1<InternalManifestItem> items, ApplyTemplateSettings settings, IDictionary`2<string, object> globals);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <ProcessDependencies>b__11_0(string s);
    [CompilerGeneratedAttribute]
private TemplateBundle <ProcessDependencies>b__11_2(string s);
}
public static class Microsoft.DocAsCode.Build.Engine.TemplateProcessorUtility : object {
    public static IDictionary`2<string, string> LoadTokens(ResourceFileReader resource);
}
public enum Microsoft.DocAsCode.Build.Engine.TemplateRendererType : Enum {
    public int value__;
    public static TemplateRendererType Mustache;
    public static TemplateRendererType Liquid;
}
public class Microsoft.DocAsCode.Build.Engine.TemplateResourceInfo : object {
    [CompilerGeneratedAttribute]
private string <ResourceKey>k__BackingField;
    public string ResourceKey { get; }
    public TemplateResourceInfo(string resourceKey);
    [CompilerGeneratedAttribute]
public string get_ResourceKey();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Microsoft.DocAsCode.Build.Engine.TemplateType : Enum {
    public int value__;
    public static TemplateType Default;
    public static TemplateType Primary;
    public static TemplateType Auxiliary;
}
public class Microsoft.DocAsCode.Build.Engine.TemplateUtility : object {
    private DocumentBuildContext _context;
    public TemplateUtility(DocumentBuildContext context);
    public string ResolveSourceRelativePath(string originPath, string currentFileOutputPath);
    public string GetHrefFromRoot(string originalHref, string sourceFileKey);
    public string Markup(string markdown, string sourceFileKey);
}
public class Microsoft.DocAsCode.Build.Engine.TransformModelOptions : object {
    [CompilerGeneratedAttribute]
private bool <IsShared>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Bookmarks>k__BackingField;
    [JsonPropertyAttribute]
public bool IsShared { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Bookmarks { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsShared();
    [CompilerGeneratedAttribute]
public void set_IsShared(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Bookmarks();
    [CompilerGeneratedAttribute]
public void set_Bookmarks(Dictionary`2<string, string> value);
}
public class Microsoft.DocAsCode.Build.Engine.ValidateBookmark : HtmlDocumentHandler {
    private static string XPathTemplate;
    private static HashSet`1<string> WhiteList;
    private OSPlatformSensitiveDictionary`1<HashSet`1<string>> _registeredBookmarks;
    private OSPlatformSensitiveDictionary`1<string> _fileMapping;
    private OSPlatformSensitiveDictionary`1<List`1<LinkItem>> _linksWithBookmark;
    private static ValidateBookmark();
    public virtual void LoadContext(HtmlPostProcessContext context);
    protected virtual void HandleCore(HtmlDocument document, ManifestItem manifestItem, string inputFile, string outputFile);
    protected virtual Manifest PostHandleCore(Manifest manifest);
    public virtual void SaveContext(HtmlPostProcessContext context);
    private static IEnumerable`1<string> GetNodeAttribute(HtmlDocument html, string attribute);
    private static IEnumerable`1<HtmlNode> GetNodesWithAttribute(HtmlDocument html, string attribute);
    private static string TransformPath(string basePathFromRoot, RelativePath relativePath);
    private static OSPlatformSensitiveDictionary`1<T> Deserialize(HtmlPostProcessContext context, string name);
    private static void Serialize(Stream stream, object obj);
    [CompilerGeneratedAttribute]
private void <SaveContext>b__8_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <SaveContext>b__8_1(Stream stream);
}
public class Microsoft.DocAsCode.Build.Engine.XRefArchive : object {
    public static string MajorFileName;
    private object _syncRoot;
    private XRefArchiveMode _mode;
    private ZipArchive _archive;
    private List`1<string> _entries;
    private IXRefContainerReader _reader;
    public ImmutableList`1<string> Entries { get; }
    private bool Microsoft.DocAsCode.Build.Engine.IXRefContainer.IsEmbeddedRedirections { get; }
    private XRefArchive(XRefArchiveMode mode, ZipArchive archive, List`1<string> entries);
    public static XRefArchive Open(string file, XRefArchiveMode mode);
    public string CreateMajor(XRefMap map);
    public string CreateMinor(XRefMap map, IEnumerable`1<string> names);
    public XRefMap GetMajor();
    public XRefMap Get(string name);
    public void UpdateMajor(XRefMap map);
    public void Update(string name, XRefMap map);
    public void DeleteMajor();
    public void Delete(string name);
    public bool HasEntry(string name);
    public ImmutableList`1<string> get_Entries();
    private bool HasEntryCore(string name);
    private string GetEntry(string name);
    private int IndexOfEntry(string name);
    private ZipArchiveEntry CreateEntry(string name);
    private static string NormalizeName(string name);
    private string CreateCore(string name, XRefMap map);
    private XRefMap OpenCore(string name);
    private void UpdateCore(string name, XRefMap map);
    private void DeleteCore(int index);
    public sealed virtual void Dispose();
    private sealed virtual override bool Microsoft.DocAsCode.Build.Engine.IXRefContainer.get_IsEmbeddedRedirections();
    private sealed virtual override IEnumerable`1<XRefMapRedirection> Microsoft.DocAsCode.Build.Engine.IXRefContainer.GetRedirections();
    public sealed virtual IXRefContainerReader GetReader();
}
public class Microsoft.DocAsCode.Build.Engine.XRefArchiveBuilder : object {
    private static string PhaseName;
    private object _syncRoot;
    private XRefMapDownloader _downloader;
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XRefArchiveBuilder/<DownloadAsync>d__3")]
public Task`1<bool> DownloadAsync(Uri uri, string outputFile);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XRefArchiveBuilder/<DownloadCoreAsync>d__4")]
private Task`1<string> DownloadCoreAsync(Uri uri, XRefArchive xa, bool isMajor);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XRefArchiveBuilder/<GetNames>d__5")]
private static IEnumerable`1<string> GetNames(Uri uri, XRefMap map);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XRefArchiveBuilder/<RewriteRedirections>d__6")]
private Task`1<List`1<XRefMapRedirection>> RewriteRedirections(Uri uri, XRefArchive xa, XRefMap map);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XRefArchiveBuilder/<RewriteRedirectionsCore>d__7")]
private Task`1<List`1<XRefMapRedirection>> RewriteRedirectionsCore(List`1<XRefMapRedirection> redirections, Uri uri, XRefArchive xa);
    private static Uri GetHrefUri(Uri uri, string href);
}
public enum Microsoft.DocAsCode.Build.Engine.XRefArchiveMode : Enum {
    public int value__;
    public static XRefArchiveMode Read;
    public static XRefArchiveMode Create;
    public static XRefArchiveMode Update;
}
public class Microsoft.DocAsCode.Build.Engine.XRefArchiveReader : XRefRedirectionReader {
    private LruList`1<Tuple`2<string, XRefMap>> _lru;
    private XRefArchive _archive;
    public XRefArchiveReader(XRefArchive archive);
    protected virtual IXRefContainer GetMap(string name);
    public sealed virtual void Dispose();
}
public class Microsoft.DocAsCode.Build.Engine.XrefClient : object {
    public static XrefClient Default;
    private static HttpClient _sharedClient;
    private HttpClient _client;
    private SemaphoreSlim _semaphore;
    public XrefClient(HttpClient client);
    public XrefClient(int maxParallism);
    public XrefClient(SemaphoreSlim semaphore);
    public XrefClient(HttpClient client, int maxParallism);
    public XrefClient(HttpClient client, SemaphoreSlim semaphore);
    private static XrefClient();
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XrefClient/<ResolveAsync>d__10")]
public Task`1<List`1<XRefSpec>> ResolveAsync(string url);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XrefClient/<ResolveCoreAsync>d__11")]
private Task`1<List`1<XRefSpec>> ResolveCoreAsync(string url);
}
internal class Microsoft.DocAsCode.Build.Engine.XRefCollection : object {
    private static int MaxParallelism;
    [CompilerGeneratedAttribute]
private ImmutableList`1<Uri> <Uris>k__BackingField;
    public ImmutableList`1<Uri> Uris { get; public set; }
    public XRefCollection(IEnumerable`1<Uri> uris);
    [CompilerGeneratedAttribute]
public ImmutableList`1<Uri> get_Uris();
    [CompilerGeneratedAttribute]
public void set_Uris(ImmutableList`1<Uri> value);
    public Task`1<IXRefContainerReader> GetReaderAsync(string baseFolder, IReadOnlyList`1<string> fallbackFolders);
}
public class Microsoft.DocAsCode.Build.Engine.XRefDetails : object {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AltProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InnerHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alt>k__BackingField;
    [CompilerGeneratedAttribute]
private XRefSpec <Spec>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowIfNotResolved>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceStartLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceEndLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplatePath>k__BackingField;
    public string Uid { get; private set; }
    public string Query { get; private set; }
    public string Anchor { get; private set; }
    public string Title { get; private set; }
    public string Href { get; private set; }
    public string Raw { get; private set; }
    public string RawSource { get; private set; }
    public string DisplayProperty { get; private set; }
    public string AltProperty { get; private set; }
    public string InnerHtml { get; private set; }
    public string Text { get; private set; }
    public string Alt { get; private set; }
    public XRefSpec Spec { get; private set; }
    public bool ThrowIfNotResolved { get; private set; }
    public string SourceFile { get; private set; }
    public int SourceStartLineNumber { get; private set; }
    public int SourceEndLineNumber { get; private set; }
    public string TemplatePath { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
private void set_Uid(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
private void set_Query(string value);
    [CompilerGeneratedAttribute]
public string get_Anchor();
    [CompilerGeneratedAttribute]
private void set_Anchor(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
private void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
private void set_Raw(string value);
    [CompilerGeneratedAttribute]
public string get_RawSource();
    [CompilerGeneratedAttribute]
private void set_RawSource(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayProperty();
    [CompilerGeneratedAttribute]
private void set_DisplayProperty(string value);
    [CompilerGeneratedAttribute]
public string get_AltProperty();
    [CompilerGeneratedAttribute]
private void set_AltProperty(string value);
    [CompilerGeneratedAttribute]
public string get_InnerHtml();
    [CompilerGeneratedAttribute]
private void set_InnerHtml(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Alt();
    [CompilerGeneratedAttribute]
private void set_Alt(string value);
    [CompilerGeneratedAttribute]
public XRefSpec get_Spec();
    [CompilerGeneratedAttribute]
private void set_Spec(XRefSpec value);
    [CompilerGeneratedAttribute]
public bool get_ThrowIfNotResolved();
    [CompilerGeneratedAttribute]
private void set_ThrowIfNotResolved(bool value);
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
private void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public int get_SourceStartLineNumber();
    [CompilerGeneratedAttribute]
private void set_SourceStartLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_SourceEndLineNumber();
    [CompilerGeneratedAttribute]
private void set_SourceEndLineNumber(int value);
    [CompilerGeneratedAttribute]
public string get_TemplatePath();
    [CompilerGeneratedAttribute]
private void set_TemplatePath(string value);
    public static XRefDetails From(HtmlNode node);
    public void ApplyXrefSpec(XRefSpec spec);
    public ValueTuple`2<HtmlNode, bool> ConvertToHtmlNode(string language, ITemplateRenderer renderer);
    private static HtmlNode GetAnchorNode(string href, string anchor, string title, string value, string rawSource, string sourceFile, int sourceStartLineNumber, int sourceEndLineNumber);
    private static HtmlNode GetDefaultPlainTextNode(string value);
    private static string GetLanguageSpecificAttribute(XRefSpec spec, string language, String[] keyInFallbackOrder);
    public static HtmlNode ConvertXrefLinkNodeToXrefNode(HtmlNode node);
    [CompilerGeneratedAttribute]
internal static string <From>g__ExtractValue|73_0(NameValueCollection collection, string properName);
}
public class Microsoft.DocAsCode.Build.Engine.XRefMap : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Sorted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HrefUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XRefMapRedirection> <Redirections>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XRefSpec> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Others>k__BackingField;
    [YamlMemberAttribute]
[JsonPropertyAttribute("sorted")]
public Nullable`1<bool> Sorted { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("hrefUpdated")]
public Nullable`1<bool> HrefUpdated { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("baseUrl")]
public string BaseUrl { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("tags")]
public List`1<string> Tags { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("redirections")]
public List`1<XRefMapRedirection> Redirections { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("references")]
public List`1<XRefSpec> References { get; public set; }
    [ExtensibleMemberAttribute]
[JsonExtensionDataAttribute]
public Dictionary`2<string, object> Others { get; public set; }
    [YamlIgnoreAttribute]
[JsonIgnoreAttribute]
public bool IsEmbeddedRedirections { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Sorted();
    [CompilerGeneratedAttribute]
public void set_Sorted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HrefUpdated();
    [CompilerGeneratedAttribute]
public void set_HrefUpdated(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BaseUrl();
    [CompilerGeneratedAttribute]
public void set_BaseUrl(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<XRefMapRedirection> get_Redirections();
    [CompilerGeneratedAttribute]
public void set_Redirections(List`1<XRefMapRedirection> value);
    [CompilerGeneratedAttribute]
public List`1<XRefSpec> get_References();
    [CompilerGeneratedAttribute]
public void set_References(List`1<XRefSpec> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Others();
    [CompilerGeneratedAttribute]
public void set_Others(Dictionary`2<string, object> value);
    public void Sort();
    public void UpdateHref(Uri baseUri);
    public sealed virtual bool get_IsEmbeddedRedirections();
    public sealed virtual IEnumerable`1<XRefMapRedirection> GetRedirections();
    public sealed virtual IXRefContainerReader GetReader();
}
public class Microsoft.DocAsCode.Build.Engine.XRefMapDownloader : object {
    private SemaphoreSlim _semaphore;
    private IReadOnlyList`1<string> _localFileFolders;
    public XRefMapDownloader(string baseFolder, IReadOnlyList`1<string> fallbackFolders, int maxParallelism);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XRefMapDownloader/<DownloadAsync>d__3")]
public Task`1<IXRefContainer> DownloadAsync(Uri uri);
    private IXRefContainer ReadLocalFileWithFallback(Uri uri);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XRefMapDownloader/<DownloadBySchemeAsync>d__5")]
protected virtual Task`1<IXRefContainer> DownloadBySchemeAsync(Uri uri);
    protected static IXRefContainer DownloadFromLocal(Uri uri);
    private static IXRefContainer ReadLocalFile(string filePath);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XRefMapDownloader/<DownloadFromWebAsync>d__8")]
protected static Task`1<XRefMap> DownloadFromWebAsync(Uri uri);
    private XRefMap DownloadFromAssembly(Uri uri);
    public static void UpdateHref(XRefMap map, Uri uri);
}
public class Microsoft.DocAsCode.Build.Engine.XRefMapReader : XRefRedirectionReader {
    private Dictionary`2<string, IXRefContainer> _maps;
    public XRefMapReader(string majorKey, Dictionary`2<string, IXRefContainer> maps);
    protected virtual IXRefContainer GetMap(string name);
}
public class Microsoft.DocAsCode.Build.Engine.XRefMapRedirection : object {
    [CompilerGeneratedAttribute]
private string <UidPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [YamlMemberAttribute]
public string UidPrefix { get; public set; }
    [YamlMemberAttribute]
public string Href { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UidPrefix();
    [CompilerGeneratedAttribute]
public void set_UidPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
}
public abstract class Microsoft.DocAsCode.Build.Engine.XRefRedirectionReader : object {
    private string _majorName;
    protected XRefRedirectionReader(string majorName, HashSet`1<string> mapNames);
    protected abstract virtual IXRefContainer GetMap(string name);
    public sealed virtual XRefSpec Find(string uid);
    private void AddRedirections(string uid, Stack`1<string> checkList, IXRefContainer current);
}
public class Microsoft.DocAsCode.Build.Engine.XrefServiceResolver : object {
    private List`1<UriTemplate`1<Task`1<List`1<XRefSpec>>>> _uriTemplates;
    public XrefServiceResolver(ImmutableArray`1<string> xrefServiceUrls, int maxParallelism);
    public XrefServiceResolver(HttpClient client, ImmutableArray`1<string> xrefServiceUrls, int maxParallelism);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XrefServiceResolver/<ResolveAsync>d__3")]
public Task`1<List`1<string>> ResolveAsync(List`1<string> uidList, ConcurrentDictionary`2<string, XRefSpec> externalXRefSpec);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Build.Engine.XrefServiceResolver/<ResolveAsync>d__4")]
public Task`1<XRefSpec> ResolveAsync(string uid);
    private IUriTemplatePipeline`1<Task`1<List`1<XRefSpec>>> GetPipeline(string name);
    [CompilerGeneratedAttribute]
private Task`1<XRefSpec> <ResolveAsync>b__3_0(string uid);
}
public class Microsoft.DocAsCode.Build.Engine.XRefSpecUidComparer : Comparer`1<XRefSpec> {
    public static XRefSpecUidComparer Instance;
    private static XRefSpecUidComparer();
    public virtual int Compare(XRefSpec x, XRefSpec y);
}
[ExportAttribute("Microsoft.DocAsCode.Plugins.ICompositionContainer")]
public class Microsoft.DocAsCode.Common.CompositionContainer : object {
    [CompilerGeneratedAttribute]
private static CompositionHost <DefaultContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositionHost <Container>k__BackingField;
    public static CompositionHost DefaultContainer { get; private set; }
    public CompositionHost Container { get; }
    public CompositionContainer(CompositionHost container);
    [CompilerGeneratedAttribute]
public static CompositionHost get_DefaultContainer();
    [CompilerGeneratedAttribute]
private static void set_DefaultContainer(CompositionHost value);
    [CompilerGeneratedAttribute]
public CompositionHost get_Container();
    public static T GetExport(CompositionHost container, string name);
    public static object GetExport(CompositionHost container, Type type, string name);
    public static CompositionHost GetContainer(IEnumerable`1<Assembly> assemblies);
    public sealed virtual T GetExport();
    public sealed virtual T GetExport(string name);
    public sealed virtual IEnumerable`1<T> GetExports();
    public sealed virtual IEnumerable`1<T> GetExports(string name);
}
public static class Microsoft.DocAsCode.Common.ManifestUtility : object {
    public static void RemoveDuplicateOutputFiles(ManifestItemCollection manifestItems);
    public static Manifest MergeManifest(List`1<Manifest> manifests);
    public static void ApplyLogCodes(ManifestItemCollection manifestItems, ConcurrentDictionary`2<string, ImmutableHashSet`1<string>> codes);
}
public class Microsoft.DocAsCode.FileMetadataConverter : JsonConverter {
    private static string BaseDir;
    private static string Dict;
    private static string Glob;
    private static string Key;
    private static string Value;
    private bool _ignoreBaseDir;
    public FileMetadataConverter(bool ignoreBaseDir);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private ImmutableArray`1<FileMetadataItem> GetFileMetadataItemArray(JToken value);
}
