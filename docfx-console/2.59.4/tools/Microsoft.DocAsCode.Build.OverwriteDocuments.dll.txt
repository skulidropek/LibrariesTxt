public class Microsoft.DocAsCode.Build.OverwriteDocuments.Constants : object {
    public static string OPathStringDataName;
    public static string OPathLineNumberDataName;
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.InlineCodeHeadingRule : object {
    [CompilerGeneratedAttribute]
private bool <NeedCheckLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    public string TokenName { get; }
    protected bool NeedCheckLevel { get; protected set; }
    protected int Level { get; protected set; }
    public virtual string get_TokenName();
    [CompilerGeneratedAttribute]
protected virtual bool get_NeedCheckLevel();
    [CompilerGeneratedAttribute]
protected virtual void set_NeedCheckLevel(bool value);
    [CompilerGeneratedAttribute]
protected virtual int get_Level();
    [CompilerGeneratedAttribute]
protected virtual void set_Level(int value);
    public sealed virtual bool Parse(Block block, String& value);
    private CodeInline ParseCore(Block block);
}
public interface Microsoft.DocAsCode.Build.OverwriteDocuments.IOverwriteBlockRule {
    public string TokenName { get; }
    public abstract virtual string get_TokenName();
    public abstract virtual bool Parse(Block block, String& value);
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.L1InlineCodeHeadingRule : InlineCodeHeadingRule {
    public string TokenName { get; }
    protected bool NeedCheckLevel { get; }
    protected int Level { get; }
    public virtual string get_TokenName();
    protected virtual bool get_NeedCheckLevel();
    protected virtual int get_Level();
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.L2InlineCodeHeadingRule : InlineCodeHeadingRule {
    public string TokenName { get; }
    protected bool NeedCheckLevel { get; }
    protected int Level { get; }
    public virtual string get_TokenName();
    protected virtual bool get_NeedCheckLevel();
    protected virtual int get_Level();
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.MarkdownFragment : object {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, MarkdownProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Touched>k__BackingField;
    public string Uid { get; public set; }
    public Dictionary`2<string, object> Metadata { get; public set; }
    public Dictionary`2<string, MarkdownProperty> Properties { get; public set; }
    public bool Touched { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MarkdownProperty> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Dictionary`2<string, MarkdownProperty> value);
    [CompilerGeneratedAttribute]
public bool get_Touched();
    [CompilerGeneratedAttribute]
public void set_Touched(bool value);
    public virtual string ToString();
    private static void SerializeYamlHeader(Dictionary`2<string, object> metadata, StringBuilder sb);
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.MarkdownFragmentModel : object {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private Block <UidSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <YamlCodeBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private Block <YamlCodeBlockSource>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MarkdownPropertyModel> <Contents>k__BackingField;
    public string Uid { get; public set; }
    public Block UidSource { get; public set; }
    public string YamlCodeBlock { get; public set; }
    public Block YamlCodeBlockSource { get; public set; }
    public List`1<MarkdownPropertyModel> Contents { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(string value);
    [CompilerGeneratedAttribute]
public Block get_UidSource();
    [CompilerGeneratedAttribute]
public void set_UidSource(Block value);
    [CompilerGeneratedAttribute]
public string get_YamlCodeBlock();
    [CompilerGeneratedAttribute]
public void set_YamlCodeBlock(string value);
    [CompilerGeneratedAttribute]
public Block get_YamlCodeBlockSource();
    [CompilerGeneratedAttribute]
public void set_YamlCodeBlockSource(Block value);
    [CompilerGeneratedAttribute]
public List`1<MarkdownPropertyModel> get_Contents();
    [CompilerGeneratedAttribute]
public void set_Contents(List`1<MarkdownPropertyModel> value);
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.MarkdownFragmentsCreater : object {
    private MarkdownDocument _document;
    private int _position;
    private InlineCodeHeadingRule _inlineCodeHeadingRule;
    private L1InlineCodeHeadingRule _l1InlineCodeHeadingRule;
    private L2InlineCodeHeadingRule _l2InlineCodeHeadingRule;
    private YamlCodeBlockRule _yamlCodeBlockRule;
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Build.OverwriteDocuments.MarkdownFragmentsCreater/<Create>d__6")]
public IEnumerable`1<MarkdownFragmentModel> Create(MarkdownDocument document);
    private MarkdownFragmentModel MarkdownFragment();
    private List`1<MarkdownPropertyModel> PropertySection();
    private Block Peek();
    private Block Eat(IOverwriteBlockRule parser, String& value);
    private Block Next();
    private bool More();
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.MarkdownFragmentsException : Exception {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; }
    public MarkdownFragmentsException(string message);
    public MarkdownFragmentsException(string message, Exception inner);
    public MarkdownFragmentsException(string message, int position);
    public MarkdownFragmentsException(string message, int position, Exception inner);
    [CompilerGeneratedAttribute]
public int get_Position();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.MarkdownProperty : object {
    [CompilerGeneratedAttribute]
private string <OPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Touched>k__BackingField;
    public string OPath { get; public set; }
    public string Content { get; public set; }
    public Dictionary`2<string, object> Metadata { get; public set; }
    public bool Touched { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OPath();
    [CompilerGeneratedAttribute]
public void set_OPath(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_Touched();
    [CompilerGeneratedAttribute]
public void set_Touched(bool value);
    public void SerializeTo(StringBuilder sb);
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.MarkdownPropertyModel : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Block <PropertyNameSource>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Block> <PropertyValue>k__BackingField;
    public string PropertyName { get; public set; }
    public Block PropertyNameSource { get; public set; }
    public List`1<Block> PropertyValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Block get_PropertyNameSource();
    [CompilerGeneratedAttribute]
public void set_PropertyNameSource(Block value);
    [CompilerGeneratedAttribute]
public List`1<Block> get_PropertyValue();
    [CompilerGeneratedAttribute]
public void set_PropertyValue(List`1<Block> value);
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.OPathSegment : object {
    [CompilerGeneratedAttribute]
private string <SegmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalSegmentString>k__BackingField;
    public string SegmentName { get; public set; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    public string OriginalSegmentString { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SegmentName();
    [CompilerGeneratedAttribute]
public void set_SegmentName(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalSegmentString();
    [CompilerGeneratedAttribute]
public void set_OriginalSegmentString(string value);
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.OverwriteDocumentModelCreater : object {
    private string _file;
    public OverwriteDocumentModelCreater(string file);
    public OverwriteDocumentModel Create(MarkdownFragmentModel model);
    private Dictionary`2<string, object> CreateMetadata(MarkdownFragmentModel model);
    internal static Dictionary`2<object, object> ConvertYamlCodeBlock(string yamlCodeBlock, Block yamlCodeBlockSource);
    internal Dictionary`2<string, object> ConvertContents(Dictionary`2<object, object> currentMetadata, List`1<MarkdownPropertyModel> contents);
    private void AppendNewObject(List`1<OPathSegment> OPathSegments, Block codeHeaderBlock, MarkdownDocument propertyValue, Dictionary`2<object, object> contentsMetadata);
    private void FindOrCreateObject(Dictionary`2<object, object> currentObject, Block codeHeaderBlock, List`1<OPathSegment> OPathSegments, int index, MarkdownDocument propertyValue, string originalOPathString);
    private void CreateCoreObject(OPathSegment lastSegment, Block codeHeaderBlock, Dictionary`2<object, object> currentObject, MarkdownDocument propertyValue, string originalOPathString);
    private MarkdownDocument CreateDocument(MarkdownPropertyModel model);
    private static Dictionary`2<object, object> CreateDictionaryObject(OPathSegment segment);
    private static List`1<object> CreateDictionaryArrayObject(OPathSegment segment);
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.Build.OverwriteDocuments.OverwriteUtility : object {
    private static String[] UidWrappers;
    private static Regex OPathRegex;
    private static OverwriteUtility();
    public static List`1<OPathSegment> ParseOPath(string OPathString);
    public static string GetUidWrapper(string uid);
    [ExtensionAttribute]
public static void AddOrUpdateFragmentEntity(Dictionary`2<string, MarkdownFragment> fragments, string uid, Dictionary`2<string, object> metadata);
    [ExtensionAttribute]
public static void AddOrUpdateFragmentProperty(MarkdownFragment fragment, string oPath, string content, Dictionary`2<string, object> metadata);
    [ExtensionAttribute]
public static MarkdownFragment ToMarkdownFragment(MarkdownFragmentModel model, string originalContent);
    [ExtensionAttribute]
public static MarkdownProperty ToMarkdownProperty(MarkdownPropertyModel model, string originalContent);
    private static Dictionary`2<string, object> MergeMetadata(Dictionary`2<string, object> left, Dictionary`2<string, object> right);
}
public class Microsoft.DocAsCode.Build.OverwriteDocuments.YamlCodeBlockRule : object {
    private static List`1<string> _allowedLanguages;
    public string TokenName { get; }
    private static YamlCodeBlockRule();
    public sealed virtual string get_TokenName();
    public sealed virtual bool Parse(Block block, String& value);
}
