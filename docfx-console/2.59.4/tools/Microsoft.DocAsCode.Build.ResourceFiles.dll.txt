public interface Microsoft.DocAsCode.Build.ResourceFiles.IResourceFileConfig {
    public abstract virtual bool IsResourceFile(string fileExtension);
}
[ExportAttribute("Microsoft.DocAsCode.Plugins.IDocumentProcessor")]
public class Microsoft.DocAsCode.Build.ResourceFiles.ResourceDocumentProcessor : DisposableDocumentProcessor {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IResourceFileConfig> <Configs>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDocumentBuildStep> <BuildSteps>k__BackingField;
    [ImportManyAttribute]
public IEnumerable`1<IResourceFileConfig> Configs { get; public set; }
    public string Name { get; }
    [ImportManyAttribute("ResourceDocumentProcessor")]
public IEnumerable`1<IDocumentBuildStep> BuildSteps { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<IResourceFileConfig> get_Configs();
    [CompilerGeneratedAttribute]
public void set_Configs(IEnumerable`1<IResourceFileConfig> value);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IDocumentBuildStep> get_BuildSteps();
    [CompilerGeneratedAttribute]
public virtual void set_BuildSteps(IEnumerable`1<IDocumentBuildStep> value);
    public virtual ProcessingPriority GetProcessingPriority(FileAndType file);
    public virtual FileModel Load(FileAndType file, ImmutableDictionary`2<string, object> metadata);
    public virtual SaveResult Save(FileModel model);
}
[ExportAttribute("ResourceDocumentProcessor", "Microsoft.DocAsCode.Plugins.IDocumentBuildStep")]
public class Microsoft.DocAsCode.Build.ResourceFiles.ValidateResourceMetadata : BaseDocumentBuildStep {
    public string Name { get; }
    public int BuildOrder { get; }
    public virtual string get_Name();
    public virtual int get_BuildOrder();
    public virtual void Build(FileModel model, IHostService host);
    public sealed virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public sealed virtual string GetIncrementalContextHash();
    public sealed virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
}
