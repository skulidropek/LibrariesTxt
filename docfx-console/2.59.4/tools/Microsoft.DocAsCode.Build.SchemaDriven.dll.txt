[ExportAttribute("SchemaDrivenDocumentProcessor", "Microsoft.DocAsCode.Plugins.IDocumentBuildStep")]
public class Microsoft.DocAsCode.Build.SchemaDriven.ApplyOverwriteDocument : BaseDocumentBuildStep {
    public string Name { get; }
    public int BuildOrder { get; }
    public virtual string get_Name();
    public virtual int get_BuildOrder();
    public virtual void Postbuild(ImmutableList`1<FileModel> models, IHostService host);
    private void ApplyOverwriteToModel(OverwriteApplier overwriteApplier, string uid, IHostService host);
    public sealed virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public sealed virtual string GetIncrementalContextHash();
    public sealed virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
}
[ExportAttribute("SchemaDrivenDocumentProcessor", "Microsoft.DocAsCode.Plugins.IDocumentBuildStep")]
public class Microsoft.DocAsCode.Build.SchemaDriven.ApplyOverwriteFragments : BaseDocumentBuildStep {
    private static Nullable`1<bool> IsUsingMarkdigMarkdownService;
    private static object SyncRoot;
    public string Name { get; }
    public int BuildOrder { get; }
    private static ApplyOverwriteFragments();
    public virtual string get_Name();
    public virtual int get_BuildOrder();
    public virtual void Build(FileModel model, IHostService host);
    private void BuildCore(FileModel model, IHostService host);
    private void ValidateWithSchema(List`1<MarkdownFragmentModel> fragments, FileModel model);
    private void CheckMarkdownService(IHostService host);
    public sealed virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public sealed virtual string GetIncrementalContextHash();
    public sealed virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
}
[ExportAttribute("SchemaDrivenDocumentProcessor", "Microsoft.DocAsCode.Plugins.IDocumentBuildStep")]
public class Microsoft.DocAsCode.Build.SchemaDriven.ApplyTags : BaseDocumentBuildStep {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITagInterpreter> <TagInterpreters>k__BackingField;
    [ImportManyAttribute]
public IEnumerable`1<ITagInterpreter> TagInterpreters { get; public set; }
    public string Name { get; }
    public int BuildOrder { get; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITagInterpreter> get_TagInterpreters();
    [CompilerGeneratedAttribute]
public void set_TagInterpreters(IEnumerable`1<ITagInterpreter> value);
    public virtual string get_Name();
    public virtual int get_BuildOrder();
    public virtual void Postbuild(ImmutableList`1<FileModel> models, IHostService host);
    public sealed virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public sealed virtual string GetIncrementalContextHash();
    public sealed virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
}
public class Microsoft.DocAsCode.Build.SchemaDriven.BaseSchema : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JSchemaType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, BaseSchema> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseSchema <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceType <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private MergeType <MergeType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <XrefProperties>k__BackingField;
    public string Title { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<JSchemaType> Type { get; public set; }
    public JToken Default { get; public set; }
    public Dictionary`2<string, BaseSchema> Properties { get; public set; }
    public BaseSchema Items { get; public set; }
    public ReferenceType Reference { get; public set; }
    public ContentType ContentType { get; public set; }
    public List`1<string> Tags { get; public set; }
    public MergeType MergeType { get; public set; }
    public List`1<string> XrefProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<JSchemaType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<JSchemaType> value);
    [CompilerGeneratedAttribute]
public JToken get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(JToken value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, BaseSchema> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Dictionary`2<string, BaseSchema> value);
    [CompilerGeneratedAttribute]
public BaseSchema get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(BaseSchema value);
    [CompilerGeneratedAttribute]
public ReferenceType get_Reference();
    [CompilerGeneratedAttribute]
public void set_Reference(ReferenceType value);
    [CompilerGeneratedAttribute]
public ContentType get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(ContentType value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<string> value);
    [CompilerGeneratedAttribute]
public MergeType get_MergeType();
    [CompilerGeneratedAttribute]
public void set_MergeType(MergeType value);
    [CompilerGeneratedAttribute]
public List`1<string> get_XrefProperties();
    [CompilerGeneratedAttribute]
public void set_XrefProperties(List`1<string> value);
}
[ExportAttribute("SchemaDrivenDocumentProcessor", "Microsoft.DocAsCode.Plugins.IDocumentBuildStep")]
public class Microsoft.DocAsCode.Build.SchemaDriven.BuildSchemaBasedDocument : BuildReferenceDocumentBase {
    private static string DocumentTypeKey;
    private SchemaProcessor _schemaProcessor;
    public string Name { get; }
    public int BuildOrder { get; }
    public virtual string get_Name();
    public virtual int get_BuildOrder();
    protected virtual void BuildArticle(IHostService host, FileModel model);
    public sealed virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public sealed virtual string GetIncrementalContextHash();
    public sealed virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
}
public class Microsoft.DocAsCode.Build.SchemaDriven.ContentAnchorParser : object {
    public static string AnchorContentName;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsAnchor>k__BackingField;
    public string Content { get; }
    public bool ContainsAnchor { get; private set; }
    public ContentAnchorParser(string content);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ContainsAnchor();
    [CompilerGeneratedAttribute]
private void set_ContainsAnchor(bool value);
    public sealed virtual string Parse(string input);
}
public enum Microsoft.DocAsCode.Build.SchemaDriven.ContentType : Enum {
    public int value__;
    public static ContentType Default;
    public static ContentType Uid;
    public static ContentType Xref;
    public static ContentType Href;
    public static ContentType File;
    public static ContentType Markdown;
}
public class Microsoft.DocAsCode.Build.SchemaDriven.DocumentSchema : BaseSchema {
    [CompilerGeneratedAttribute]
private Uri <SchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonPointer <MetadataReference>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowOverwrite>k__BackingField;
    public Uri SchemaVersion { get; public set; }
    public string Version { get; public set; }
    public Uri Id { get; public set; }
    public string Metadata { get; public set; }
    public JsonPointer MetadataReference { get; private set; }
    public SchemaValidator Validator { get; private set; }
    public string Hash { get; private set; }
    public bool AllowOverwrite { get; private set; }
    [CompilerGeneratedAttribute]
public Uri get_SchemaVersion();
    [CompilerGeneratedAttribute]
public void set_SchemaVersion(Uri value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public Uri get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Uri value);
    [CompilerGeneratedAttribute]
public string get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(string value);
    [CompilerGeneratedAttribute]
public JsonPointer get_MetadataReference();
    [CompilerGeneratedAttribute]
private void set_MetadataReference(JsonPointer value);
    [CompilerGeneratedAttribute]
public SchemaValidator get_Validator();
    [CompilerGeneratedAttribute]
private void set_Validator(SchemaValidator value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
private void set_Hash(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowOverwrite();
    [CompilerGeneratedAttribute]
private void set_AllowOverwrite(bool value);
    public static DocumentSchema Load(TextReader reader, string title);
    private static T LoadSchema(JSchema schema, Dictionary`2<JSchema, BaseSchema> cache);
    private static T GetValueFromJSchemaExtensionData(JSchema schema, string key);
    private static void CheckForNotSupportedKeyword(object keyword, string name);
    private static bool CheckOverwriteAbility(BaseSchema schema);
    private static bool CheckOverwriteAbilityCore(BaseSchema schema, Dictionary`2<BaseSchema, bool> cache);
}
public interface Microsoft.DocAsCode.Build.SchemaDriven.IContentAnchorParser {
    public bool ContainsAnchor { get; }
    public string Content { get; }
    public abstract virtual string Parse(string input);
    public abstract virtual bool get_ContainsAnchor();
    public abstract virtual string get_Content();
}
public interface Microsoft.DocAsCode.Build.SchemaDriven.ISchemaFragmentsHandler {
    public abstract virtual void HandleUid(string uidKey, YamlMappingNode node, Dictionary`2<string, MarkdownFragment> fragments, BaseSchema schema, string oPathPrefix, string uid);
    public abstract virtual void HandleProperty(string propertyKey, YamlMappingNode node, Dictionary`2<string, MarkdownFragment> fragments, BaseSchema schema, string oPathPrefix, string uid);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.JsonPointer : object {
    private static string Splitter;
    private String[] _parts;
    private bool _isRoot;
    private string _raw;
    public JsonPointer(string raw);
    public JsonPointer(String[] parts);
    public JsonPointer GetParentPointer();
    public static bool TryCreate(string raw, JsonPointer& pointer);
    public BaseSchema FindSchema(DocumentSchema rootSchema);
    public object GetValue(object root);
    public void SetValue(Object& root, object value);
    public virtual string ToString();
    public static object GetChild(object root, string part);
    public static void SetChild(object parent, string part, object value);
    public static BaseSchema GetChildSchema(BaseSchema parent, string part);
    private static string UnescapeReference(string reference);
}
public enum Microsoft.DocAsCode.Build.SchemaDriven.MergeType : Enum {
    public int value__;
    public static MergeType Merge;
    public static MergeType Key;
    public static MergeType Replace;
    public static MergeType Ignore;
}
public class Microsoft.DocAsCode.Build.SchemaDriven.OverwriteApplier : object {
    private SchemaProcessor _xrefSpecUpdater;
    private Merger _merger;
    private IHostService _host;
    private SchemaProcessor _overwriteProcessor;
    private OverwriteModelType _overwriteModelType;
    public OverwriteApplier(IHostService host, OverwriteModelType type);
    public void UpdateXrefSpec(FileModel fileModel, BaseSchema schema);
    public object BuildOverwriteWithSchema(FileModel owModel, OverwriteDocumentModel overwrite, BaseSchema schema);
    public void MergeContentWithOverwrite(Object& source, object overwrite, string uid, string path, BaseSchema schema);
    private void UpdateXRefSpecs(List`1<XRefSpec> original, List`1<XRefSpec> overwrite);
}
public enum Microsoft.DocAsCode.Build.SchemaDriven.OverwriteModelType : Enum {
    public int value__;
    public static OverwriteModelType Classic;
    public static OverwriteModelType MarkdownFragments;
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.FileIncludeInterpreter : object {
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.FileInterpreter : object {
    private bool _exportFileLink;
    private bool _updateValue;
    public FileInterpreter(bool exportFileLink, bool updateValue);
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.FragmentsValidationInterpreter : object {
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
}
[ExtensionAttribute]
internal static class Microsoft.DocAsCode.Build.SchemaDriven.Processors.Helper : object {
    private static string ContentOriginalFileKeyName;
    private static HashSet`1<string> s_locales;
    private static Helper();
    [ExtensionAttribute]
public static void AddFileLinkSource(Dictionary`2<string, List`1<LinkSourceInfo>> fileLinkSources, LinkSourceInfo source);
    [ExtensionAttribute]
public static void SetOriginalContentFile(IProcessContext context, string path, FileAndType file);
    [ExtensionAttribute]
public static FileAndType GetOriginalContentFile(IProcessContext context, string path);
    public static string RemoveHostName(string url, string hostName, bool removeLocale);
    private static bool IsValidLocale(string locale);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.HrefInterpreter : object {
    private bool _exportFileLink;
    private bool _updateValue;
    private string _siteHostName;
    public HrefInterpreter(bool exportFileLink, bool updateValue, string siteHostName);
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
}
public interface Microsoft.DocAsCode.Build.SchemaDriven.Processors.IInterpreter {
    public abstract virtual bool CanInterpret(BaseSchema schema);
    public abstract virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
}
public interface Microsoft.DocAsCode.Build.SchemaDriven.Processors.IProcessContext {
    public IHostService Host { get; }
    public IDocumentBuildContext BuildContext { get; }
    public IContentAnchorParser ContentAnchorParser { get; }
    public List`1<UidDefinition> Uids { get; }
    public Dictionary`2<string, List`1<LinkSourceInfo>> UidLinkSources { get; }
    public Dictionary`2<string, List`1<LinkSourceInfo>> FileLinkSources { get; }
    public HashSet`1<string> Dependency { get; }
    public List`1<XRefSpec> XRefSpecs { get; }
    public List`1<XRefSpec> ExternalXRefSpecs { get; }
    public FileAndType OriginalFileAndType { get; }
    public FileAndType FileAndType { get; }
    public Dictionary`2<string, Dictionary`2<string, object>> PathProperties { get; }
    public MarkdigMarkdownService MarkdigMarkdownService { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public abstract virtual IHostService get_Host();
    public abstract virtual IDocumentBuildContext get_BuildContext();
    public abstract virtual IContentAnchorParser get_ContentAnchorParser();
    public abstract virtual List`1<UidDefinition> get_Uids();
    public abstract virtual Dictionary`2<string, List`1<LinkSourceInfo>> get_UidLinkSources();
    public abstract virtual Dictionary`2<string, List`1<LinkSourceInfo>> get_FileLinkSources();
    public abstract virtual HashSet`1<string> get_Dependency();
    public abstract virtual List`1<XRefSpec> get_XRefSpecs();
    public abstract virtual List`1<XRefSpec> get_ExternalXRefSpecs();
    public abstract virtual FileAndType get_OriginalFileAndType();
    public abstract virtual FileAndType get_FileAndType();
    public abstract virtual Dictionary`2<string, Dictionary`2<string, object>> get_PathProperties();
    public abstract virtual MarkdigMarkdownService get_MarkdigMarkdownService();
    public abstract virtual T GetModel();
    public abstract virtual IDictionary`2<string, object> get_Metadata();
}
public interface Microsoft.DocAsCode.Build.SchemaDriven.Processors.ITagInterpreter {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual bool Matches(string tagName);
    public abstract virtual object Interpret(string tagName, BaseSchema schema, object value, IProcessContext context, string path);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.MarkdownAstInterpreter : object {
    private IInterpreter _inner;
    public MarkdownAstInterpreter(IInterpreter inner);
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
    private static string MarkupCore(MarkdownDocument document, IProcessContext context, string path);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.MarkdownInterpreter : object {
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
    private static string MarkupCore(string content, IProcessContext context, string path);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.MarkdownWithContentAnchorInterpreter : object {
    private IInterpreter _inner;
    public MarkdownWithContentAnchorInterpreter(IInterpreter inner);
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
}
internal class Microsoft.DocAsCode.Build.SchemaDriven.Processors.Merger : object {
    [CompilerGeneratedAttribute]
private OverwriteModelType <OverwriteType>k__BackingField;
    public OverwriteModelType OverwriteType { get; public set; }
    [CompilerGeneratedAttribute]
public OverwriteModelType get_OverwriteType();
    [CompilerGeneratedAttribute]
public void set_OverwriteType(OverwriteModelType value);
    public void Merge(Object& src, object overwrite, string uid, string path, BaseSchema schema);
    private void MergeCore(Object& src, object overwrite, string uid, string path, BaseSchema schema);
    private void ThrowError(string message);
    private bool TestKey(object source, object overrides, BaseSchema schema);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.MergeTypeInterpreter : object {
    public int Order { get; }
    public int get_Order();
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
    private object MergeCore(object value, IProcessContext context);
}
[ExportAttribute("Microsoft.DocAsCode.Build.SchemaDriven.Processors.ITagInterpreter")]
internal class Microsoft.DocAsCode.Build.SchemaDriven.Processors.PatternedTagInterpreter : object {
    private static string Prefix;
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual bool Matches(string tagName);
    public sealed virtual object Interpret(string tagName, BaseSchema schema, object value, IProcessContext context, string path);
    private void Validate(string tagName, object value, IProcessContext context, string path);
    private bool TryGetTagParameter(string tagName, IProcessContext context, String& pattern);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.ProcessContext : object {
    private FileModel _model;
    [CompilerGeneratedAttribute]
private IHostService <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocumentBuildContext <BuildContext>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UidDefinition> <Uids>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<LinkSourceInfo>> <UidLinkSources>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<LinkSourceInfo>> <FileLinkSources>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Dependency>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XRefSpec> <XRefSpecs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XRefSpec> <ExternalXRefSpecs>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAndType <OriginalFileAndType>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAndType <FileAndType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, object>> <PathProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IContentAnchorParser <ContentAnchorParser>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdigMarkdownService <MarkdigMarkdownService>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metadata>k__BackingField;
    public IHostService Host { get; }
    public IDocumentBuildContext BuildContext { get; }
    public List`1<UidDefinition> Uids { get; }
    public Dictionary`2<string, List`1<LinkSourceInfo>> UidLinkSources { get; }
    public Dictionary`2<string, List`1<LinkSourceInfo>> FileLinkSources { get; }
    public HashSet`1<string> Dependency { get; }
    public List`1<XRefSpec> XRefSpecs { get; }
    public List`1<XRefSpec> ExternalXRefSpecs { get; }
    public FileAndType OriginalFileAndType { get; }
    public FileAndType FileAndType { get; }
    public Dictionary`2<string, Dictionary`2<string, object>> PathProperties { get; }
    public IContentAnchorParser ContentAnchorParser { get; public set; }
    public MarkdigMarkdownService MarkdigMarkdownService { get; public set; }
    public IDictionary`2<string, object> Metadata { get; }
    public ProcessContext(IHostService hs, FileModel fm, IDocumentBuildContext bc);
    public ProcessContext(IHostService hs, FileModel fm, IDocumentBuildContext bc, MarkdigMarkdownService markdigMarkdownService);
    [CompilerGeneratedAttribute]
public sealed virtual IHostService get_Host();
    [CompilerGeneratedAttribute]
public sealed virtual IDocumentBuildContext get_BuildContext();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<UidDefinition> get_Uids();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, List`1<LinkSourceInfo>> get_UidLinkSources();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, List`1<LinkSourceInfo>> get_FileLinkSources();
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_Dependency();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<XRefSpec> get_XRefSpecs();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<XRefSpec> get_ExternalXRefSpecs();
    [CompilerGeneratedAttribute]
public sealed virtual FileAndType get_OriginalFileAndType();
    [CompilerGeneratedAttribute]
public sealed virtual FileAndType get_FileAndType();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, Dictionary`2<string, object>> get_PathProperties();
    [CompilerGeneratedAttribute]
public sealed virtual IContentAnchorParser get_ContentAnchorParser();
    [CompilerGeneratedAttribute]
public void set_ContentAnchorParser(IContentAnchorParser value);
    [CompilerGeneratedAttribute]
public sealed virtual MarkdigMarkdownService get_MarkdigMarkdownService();
    [CompilerGeneratedAttribute]
public void set_MarkdigMarkdownService(MarkdigMarkdownService value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Metadata();
    public sealed virtual T GetModel();
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.SchemaProcessor : object {
    private IList`1<IInterpreter> _interpreters;
    public SchemaProcessor(IInterpreter[] interpreters);
    public object Process(object raw, BaseSchema schema, IProcessContext context);
    private object Interpret(object value, BaseSchema schema, string path, IProcessContext context);
    private object InterpretCore(object value, BaseSchema schema, string path, IProcessContext context);
    private bool DictionaryInterpret(object value, BaseSchema schema, string path, IProcessContext context);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.TagsInterpreter : object {
    private IList`1<ITagInterpreter> _tagInterpreters;
    public int Order { get; }
    public TagsInterpreter(IList`1<ITagInterpreter> tagInterpreters);
    public int get_Order();
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.XrefInterpreter : object {
    private bool _aggregateXrefs;
    private bool _resolveXrefs;
    public XrefInterpreter(bool aggregateXrefs, bool resolveXref);
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
    private void AddUidLinkSource(Dictionary`2<string, List`1<LinkSourceInfo>> uidLinkSources, LinkSourceInfo source);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.Processors.XrefPropertiesInterpreter : object {
    public sealed virtual bool CanInterpret(BaseSchema schema);
    public sealed virtual object Interpret(BaseSchema schema, object value, IProcessContext context, string path);
    private bool IsInternalXrefSpec(BaseSchema schema);
}
public enum Microsoft.DocAsCode.Build.SchemaDriven.ReferenceType : Enum {
    public int value__;
    public static ReferenceType None;
    public static ReferenceType File;
}
public class Microsoft.DocAsCode.Build.SchemaDriven.SchemaDrivenDocumentProcessor : DisposableDocumentProcessor {
    private ResourcePoolManager`1<JsonSerializer> _serializerPool;
    private string _schemaName;
    private DocumentSchema _schema;
    private bool _allowOverwrite;
    private MarkdigMarkdownService _markdigMarkdownService;
    private FolderRedirectionManager _folderRedirectionManager;
    private string _siteHostName;
    [CompilerGeneratedAttribute]
private SchemaValidator <SchemaValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDocumentBuildStep> <BuildSteps>k__BackingField;
    public SchemaValidator SchemaValidator { get; }
    public IEnumerable`1<IDocumentBuildStep> BuildSteps { get; public set; }
    public string Name { get; }
    public SchemaDrivenDocumentProcessor(DocumentSchema schema, ICompositionContainer container, MarkdigMarkdownService markdigMarkdownService, FolderRedirectionManager folderRedirectionManager, string siteHostName);
    [CompilerGeneratedAttribute]
public SchemaValidator get_SchemaValidator();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IDocumentBuildStep> get_BuildSteps();
    [CompilerGeneratedAttribute]
public virtual void set_BuildSteps(IEnumerable`1<IDocumentBuildStep> value);
    public virtual string get_Name();
    public virtual ProcessingPriority GetProcessingPriority(FileAndType file);
    public virtual FileModel Load(FileAndType file, ImmutableDictionary`2<string, object> metadata);
    public virtual SaveResult Save(FileModel model);
    public virtual void UpdateHref(FileModel model, IDocumentBuildContext context);
    public virtual string GetIncrementalContextHash();
    public virtual void SaveIntermediateModel(FileModel model, Stream stream);
    public virtual FileModel LoadIntermediateModel(Stream stream);
    protected virtual void SerializeModel(object model, Stream stream);
    protected virtual object DeserializeModel(Stream stream);
    protected virtual void SerializeProperties(IDictionary`2<string, object> properties, Stream stream);
    protected virtual IDictionary`2<string, object> DeserializeProperties(Stream stream);
    protected virtual JsonSerializer GetSerializer();
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.Build.SchemaDriven.SchemaExtensions : object {
    private static string IsEditableTag;
    [ExtensionAttribute]
public static bool IsRequiredInFragments(BaseSchema schema);
    [ExtensionAttribute]
public static bool IsLegalInFragments(BaseSchema schema);
    [ExtensionAttribute]
private static bool IsEditable(BaseSchema schema);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.SchemaFragmentsIterator : object {
    private ISchemaFragmentsHandler _handler;
    public SchemaFragmentsIterator(ISchemaFragmentsHandler handler);
    public void Traverse(YamlNode node, Dictionary`2<string, MarkdownFragment> fragments, BaseSchema schema);
    private void TraverseCore(YamlNode node, Dictionary`2<string, MarkdownFragment> fragments, BaseSchema schema, string parentOPath, string uid);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.SchemaValidateService : object {
    private object _locker;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _schemaValidationEnabled;
    [CompilerGeneratedAttribute]
private static SchemaValidateService <Instance>k__BackingField;
    public static SchemaValidateService Instance { get; private set; }
    private static SchemaValidateService();
    [CompilerGeneratedAttribute]
public static SchemaValidateService get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(SchemaValidateService value);
    public static void RegisterLicense(string license);
    public void Validate(object obj, JSchema schema);
    private void ValidateObject(object obj, JSchema schema, SchemaValidationEventHandler validationEventHandler);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.SchemaValidator : object {
    private static Uri SupportedMetaSchemaUri;
    private JSchema _jSchema;
    private object _schemaObject;
    private SchemaValidateService _validateService;
    public SchemaValidator(JObject schemaObj, JSchema schema);
    private static SchemaValidator();
    public void Validate(object obj);
    public void ValidateMetaSchema();
    private static bool ValidateSchemaUrl(Uri uri);
}
public class Microsoft.DocAsCode.Build.SchemaDriven.ValidateFragmentsHandler : object {
    private Dictionary`2<string, bool> _isMissingUidsLogged;
    public sealed virtual void HandleUid(string uidKey, YamlMappingNode node, Dictionary`2<string, MarkdownFragment> fragments, BaseSchema schema, string oPathPrefix, string uid);
    public sealed virtual void HandleProperty(string propertyKey, YamlMappingNode node, Dictionary`2<string, MarkdownFragment> fragments, BaseSchema schema, string oPathPrefix, string uid);
}
public class Microsoft.DocAsCode.Exceptions.InvalidJsonPointerException : DocumentException {
    public InvalidJsonPointerException(string message);
    public InvalidJsonPointerException(string message, Exception innerException);
    protected InvalidJsonPointerException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.DocAsCode.Exceptions.InvalidOverwriteDocumentException : DocfxException {
    public InvalidOverwriteDocumentException(string message);
    public InvalidOverwriteDocumentException(string message, Exception innerException);
    protected InvalidOverwriteDocumentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.DocAsCode.Exceptions.InvalidSchemaException : DocumentException {
    public InvalidSchemaException(string message);
    public InvalidSchemaException(string message, Exception innerException);
    protected InvalidSchemaException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.DocAsCode.Exceptions.SchemaFeatureNotSupportedException : DocfxException {
    public SchemaFeatureNotSupportedException(string message);
    public SchemaFeatureNotSupportedException(string message, Exception innerException);
    protected SchemaFeatureNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.DocAsCode.Exceptions.SchemaKeywordNotSupportedException : DocfxException {
    public SchemaKeywordNotSupportedException(string keyword);
    public SchemaKeywordNotSupportedException(string message, Exception innerException);
    protected SchemaKeywordNotSupportedException(SerializationInfo info, StreamingContext context);
}
