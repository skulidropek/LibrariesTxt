[ExportAttribute("TocDocumentProcessor", "Microsoft.DocAsCode.Plugins.IDocumentBuildStep")]
public class Microsoft.DocAsCode.Build.TableOfContents.BuildTocDocument : BuildTocDocumentStepBase {
    public string Name { get; }
    public int BuildOrder { get; }
    public virtual string get_Name();
    public virtual int get_BuildOrder();
    public virtual IEnumerable`1<FileModel> Prebuild(ImmutableList`1<FileModel> models, IHostService host);
    public virtual void Build(FileModel model, IHostService host);
    private void ReportPreBuildDependency(List`1<FileModel> models, IHostService host, int parallelism, HashSet`1<string> includedTocs);
    private void UpdateNearestToc(IHostService host, TocItemViewModel item, FileModel toc, ConcurrentDictionary`2<string, RelativeInfo> nearest);
    private void UpdateNearestTocForNotInTocItem(List`1<FileModel> models, IHostService host, ConcurrentDictionary`2<string, RelativeInfo> nearest, int parallelism);
    private void UpdateNearestTocCore(IHostService host, string item, FileModel toc, ConcurrentDictionary`2<string, RelativeInfo> nearest);
    private static RelativePath GetOutputPath(FileAndType file);
    private static int Compare(RelativeInfo infoA, RelativeInfo infoB);
    public sealed virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public sealed virtual string GetIncrementalContextHash();
    public sealed virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
}
public abstract class Microsoft.DocAsCode.Build.TableOfContents.BuildTocDocumentStepBase : BaseDocumentBuildStep {
    public virtual void Build(FileModel model, IHostService host);
    public virtual void ReportUidDependency(FileModel model, IHostService host, TocItemViewModel item);
    private void BuildCore(TocItemViewModel item, FileModel model, IHostService hostService, string includedFrom);
    private static string ParseFile(string link);
    private static void AddOrUpdate(Dictionary`2<string, ImmutableList`1<LinkSourceInfo>> dict, string path, LinkSourceInfo source);
    private static LinkSourceInfo GetLinkSourceInfo(string path, string anchor, string source, string includedFrom);
    [CompilerGeneratedAttribute]
internal static void <BuildCore>g__UpdateDependencies|2_0(HashSet`1<string> linkTos, Dictionary`2<string, ImmutableList`1<LinkSourceInfo>> linkSources, string link, <>c__DisplayClass2_0& );
}
internal enum Microsoft.DocAsCode.Build.TableOfContents.HrefType : Enum {
    public int value__;
    public static HrefType AbsolutePath;
    public static HrefType RelativeFile;
    public static HrefType RelativeFolder;
    public static HrefType MarkdownTocFile;
    public static HrefType YamlTocFile;
}
public static class Microsoft.DocAsCode.Build.TableOfContents.MarkdownTocReader : object {
    public static TocViewModel LoadToc(string tocContent, string filePath);
}
[ExportAttribute("Microsoft.DocAsCode.Plugins.IDocumentProcessor")]
public class Microsoft.DocAsCode.Build.TableOfContents.TocDocumentProcessor : TocDocumentProcessorBase {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDocumentBuildStep> <BuildSteps>k__BackingField;
    public string Name { get; }
    [ImportManyAttribute("TocDocumentProcessor")]
public IEnumerable`1<IDocumentBuildStep> BuildSteps { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IDocumentBuildStep> get_BuildSteps();
    [CompilerGeneratedAttribute]
public virtual void set_BuildSteps(IEnumerable`1<IDocumentBuildStep> value);
    public virtual ProcessingPriority GetProcessingPriority(FileAndType file);
    protected virtual void RegisterTocToContext(TocItemViewModel toc, FileModel model, IDocumentBuildContext context);
    protected virtual void RegisterTocMapToContext(TocItemViewModel item, FileModel model, IDocumentBuildContext context);
}
public abstract class Microsoft.DocAsCode.Build.TableOfContents.TocDocumentProcessorBase : DisposableDocumentProcessor {
    private static Char[] QueryStringOrAnchor;
    private static TocDocumentProcessorBase();
    public virtual FileModel Load(FileAndType file, ImmutableDictionary`2<string, object> metadata);
    public virtual SaveResult Save(FileModel model);
    public virtual void UpdateHref(FileModel model, IDocumentBuildContext context);
    protected abstract virtual void RegisterTocToContext(TocItemViewModel item, FileModel model, IDocumentBuildContext context);
    protected abstract virtual void RegisterTocMapToContext(TocItemViewModel item, FileModel model, IDocumentBuildContext context);
    private TocItemViewModel ConvertFromObject(object model);
    private object ConvertToObject(TocItemViewModel model);
    private void UpdateTocItemHref(TocItemViewModel toc, FileModel model, IDocumentBuildContext context, string includedFrom);
    private void ResolveUid(TocItemViewModel item, FileModel model, IDocumentBuildContext context, string includedFrom);
    private XRefSpec GetXrefFromUid(string uid, FileModel model, IDocumentBuildContext context, string includedFrom);
    private string ResolveHref(string pathToFile, string originalPathToFile, FileModel model, IDocumentBuildContext context, string propertyName);
}
internal enum Microsoft.DocAsCode.Build.TableOfContents.TocFileType : Enum {
    public int value__;
    public static TocFileType None;
    public static TocFileType Markdown;
    public static TocFileType Yaml;
}
public static class Microsoft.DocAsCode.Build.TableOfContents.TocHelper : object {
    private static YamlDeserializerWithFallback _deserializer;
    private static TocHelper();
    public static ValueTuple`2<List`1<FileModel>, HashSet`1<string>> ResolveToc(ImmutableList`1<FileModel> models, IHostService host);
    [ObsoleteAttribute("Use ResolveToc")]
public static IEnumerable`1<FileModel> Resolve(ImmutableList`1<FileModel> models, IHostService host);
    public static TocItemViewModel LoadSingleToc(string file);
    public static TocItemViewModel LoadYamlToc(string file);
}
internal class Microsoft.DocAsCode.Build.TableOfContents.TocItemInfo : object {
    [CompilerGeneratedAttribute]
private TocItemViewModel <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAndType <File>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResolved>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReferenceToc>k__BackingField;
    public TocItemViewModel Content { get; public set; }
    public FileAndType File { get; }
    public bool IsResolved { get; public set; }
    public bool IsReferenceToc { get; public set; }
    public TocItemInfo(FileAndType file, TocItemViewModel item);
    [CompilerGeneratedAttribute]
public TocItemViewModel get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(TocItemViewModel value);
    [CompilerGeneratedAttribute]
public FileAndType get_File();
    [CompilerGeneratedAttribute]
public bool get_IsResolved();
    [CompilerGeneratedAttribute]
public void set_IsResolved(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsReferenceToc();
    [CompilerGeneratedAttribute]
public void set_IsReferenceToc(bool value);
}
internal class Microsoft.DocAsCode.Build.TableOfContents.TocResolver : object {
    private Dictionary`2<string, TocItemInfo> _collection;
    private Dictionary`2<FileAndType, TocItemInfo> _notInProjectTocCache;
    public TocResolver(Dictionary`2<string, TocItemInfo> collection);
    public TocItemInfo Resolve(string file);
    private TocItemInfo ResolveItem(TocItemInfo wrapper, Stack`1<FileAndType> stack, bool isRoot);
    private TocItemInfo ResolveItemCore(TocItemInfo wrapper, Stack`1<FileAndType> stack, bool isRoot);
    private TocItemViewModel GetReferencedToc(FileAndType tocFile, Stack`1<FileAndType> stack);
    private TocViewModel UpdateOriginalHref(TocViewModel toc, RelativePath relativePath);
    private string GetRelativePath(string href, RelativePath rel);
    private string NormalizeHref(string href, RelativePath relativeToFile);
    private TocItemViewModel GetDefaultHomepageItem(TocItemViewModel toc);
    private bool IsValidHomepageLink(TocItemViewModel tocItem);
    private void ValidateHref(TocItemViewModel item);
}
internal static class Microsoft.DocAsCode.Build.TableOfContents.TocRestructureUtility : object {
    public static void Restructure(TocItemViewModel toc, IList`1<TreeItemRestructure> restructures);
    private static void RestructureCore(TocItemViewModel item, List`1<TocItemViewModel> items, IList`1<TreeItemRestructure> restructures);
    private static bool Matches(TocItemViewModel item, TreeItemRestructure restruction);
    private static void RestructureItem(TocItemViewModel item, List`1<TocItemViewModel> items, TreeItemRestructure restruction);
    private static List`1<TocItemViewModel> GetRoots(IEnumerable`1<TreeItem> treeItems);
}
internal static class Microsoft.DocAsCode.Build.TableOfContents.Utility : object {
    public static bool IsSupportedFile(string file);
    public static bool IsSupportedRelativeHref(string href);
    public static bool IsSupportedRelativeHref(HrefType hrefType);
    public static HrefType GetHrefType(string href);
    public static TocFileType GetTocFileType(string filePath);
}
