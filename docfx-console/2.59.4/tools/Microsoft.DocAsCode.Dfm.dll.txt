public class Microsoft.DocAsCode.Dfm.AggregateBlockPathQueryOptionCreator : object {
    private IDfmFencesBlockPathQueryOptionCreator[] _pathQueryOptionCreaters;
    public AggregateBlockPathQueryOptionCreator(IDfmFencesBlockPathQueryOptionCreator[] pathQueryOptionCreaters);
    public sealed virtual IDfmFencesBlockPathQueryOption ParseQueryOrFragment(DfmFencesBlockPathQueryOptionParameters parameters, bool noCache);
    public static IDfmFencesBlockPathQueryOptionCreator[] GetDefaultOptionCreaters(CodeLanguageExtractorsBuilder builder);
}
public class Microsoft.DocAsCode.Dfm.CodeLanguageExtractorsBuilder : object {
    private Dictionary`2<string, HashSet`1<string>> _alias;
    private Dictionary`2<string, List`1<ICodeSnippetExtractor>> _dict;
    public CodeLanguageExtractorsBuilder AddAlias(string key, String[] alias);
    public CodeLanguageExtractorsBuilder AddAlias(Func`2<string, string> func);
    private void AddAliasCore(string key, IEnumerable`1<string> alias);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Dfm.CodeLanguageExtractorsBuilder/<GetAlias>d__5")]
private IEnumerable`1<Tuple`2<string, string>> GetAlias(Func`2<string, string> func);
    public CodeLanguageExtractorsBuilder Add(ICodeSnippetExtractor extractor, String[] keys);
    public Dictionary`2<string, List`1<ICodeSnippetExtractor>> ToDictionay();
    private static void AddItem(Dictionary`2<string, List`1<ICodeSnippetExtractor>> result, string key, List`1<ICodeSnippetExtractor> value);
}
public abstract class Microsoft.DocAsCode.Dfm.CodeSnippetRegexExtractor : object {
    public sealed virtual Dictionary`2<string, DfmTagNameResolveResult> GetAll(String[] lines);
    protected abstract virtual List`1<CodeSnippetTag> ResolveCodeSnippetTags(String[] lines);
}
public class Microsoft.DocAsCode.Dfm.CodeSnippetTag : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeSnippetTagType <Type>k__BackingField;
    public string Name { get; }
    public int Line { get; }
    public CodeSnippetTagType Type { get; }
    public CodeSnippetTag(string name, int line, CodeSnippetTagType type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public CodeSnippetTagType get_Type();
}
public enum Microsoft.DocAsCode.Dfm.CodeSnippetTagType : Enum {
    public int value__;
    public static CodeSnippetTagType Start;
    public static CodeSnippetTagType End;
}
public static class Microsoft.DocAsCode.Dfm.CustomizedRendererCreator : object {
    private static ModuleBuilder _module;
    private static MethodInfo MatchMethod;
    private static MethodInfo RenderMethod;
    private static ConstructorInfo BaseConstructor;
    private static MethodInfo BaseRenderMethod;
    private static MethodInfo DisposeMethod;
    private static MethodInfo BaseDisposeMethod;
    private static int _typeCounter;
    private static CustomizedRendererCreator();
    public static object CreateRenderer(object innerRenderer, IEnumerable`1<IDfmCustomizedRendererPartProvider> partProviders, IReadOnlyDictionary`2<string, object> parameters);
    private static ModuleBuilder CreateModule();
    private static object CreateRendererNoCheck(object innerRenderer, IEnumerable`1<IDfmCustomizedRendererPartProvider> partProviders, IReadOnlyDictionary`2<string, object> parameters);
    private static bool ValidateKey(Tuple`3<Type, Type, Type> types);
    private static bool ValidateType(Type t, Type expected);
    private static void DefineConstructor(TypeBuilder type, FieldBuilder f);
    private static void DefineMethod(TypeBuilder hostType, Tuple`3<Type, Type, Type> types, IEnumerable`1<IDfmCustomizedRendererPart> parts, FieldBuilder f, List`1<IDfmCustomizedRendererPart> partList);
    private static void OverrideDispose(TypeBuilder hostType, FieldBuilder f, int partCount);
}
public class Microsoft.DocAsCode.Dfm.DfmBlockquoteBlockRule : MarkdownBlockquoteBlockRule {
    public string Name { get; }
    public virtual string get_Name();
    public virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmBlockquoteHelper : object {
    public static List`1<SplitToken> SplitBlockquoteTokens(ImmutableArray`1<IMarkdownToken> tokens);
    private static SplitToken CreateSplitToken(IMarkdownToken token);
}
public class Microsoft.DocAsCode.Dfm.DfmCodeExtractor : object {
    private static string RemoveIndentSpacesRegexString;
    private IDfmFencesBlockPathQueryOptionCreator _pathQueryOptionCreaters;
    public DfmCodeExtractor(IDfmFencesBlockPathQueryOptionCreator pathQueryOptionCreaters);
    public DfmCodeExtractor(CodeLanguageExtractorsBuilder builder);
    private static DfmCodeExtractor();
    public IDfmFencesBlockPathQueryOption ParsePathQueryString(string queryOrFragment, bool noCache);
    [ObsoleteAttribute]
public DfmExtractCodeResult ExtractFencesCode(DfmFencesToken token, string fencesPath);
    public DfmExtractCodeResult ExtractFencesCode(DfmFencesToken token, string fencesPath, IDfmFencesBlockPathQueryOption pathQueryOption);
    public DfmExtractCodeResult ExtractFencesCode(DfmFencesToken token, String[] fencesCode, IDfmFencesBlockPathQueryOption pathQueryOption);
    public static String[] Dedent(IEnumerable`1<string> lines, Nullable`1<int> dedentLength);
    public static string GenerateErrorMessage(DfmFencesToken token, IDfmFencesBlockPathQueryOption option);
    public static string GenerateErrorMessage(DfmFencesToken token, string message);
}
public class Microsoft.DocAsCode.Dfm.DfmCodeExtractorException : Exception {
    public DfmCodeExtractorException(string message);
    public DfmCodeExtractorException(string message, Exception inner);
    protected DfmCodeExtractorException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.DocAsCode.Dfm.DfmCodeExtractorHelper : object {
    public static List`1<char> AllowedIndentCharacters;
    private static DfmCodeExtractorHelper();
    public static int GetIndentLength(string s);
}
public class Microsoft.DocAsCode.Dfm.DfmCodeRenderer : object {
    private DfmCodeExtractor _dfmCodeExtractor;
    public DfmCodeRenderer(DfmCodeExtractor extractor);
    public DfmCodeRenderer(CodeLanguageExtractorsBuilder builder);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmFencesToken token, IMarkdownContext context);
    [ObsoleteAttribute]
public virtual StringBuffer RenderFencesFromCodeContent(string codeContent, string path, string queryStringAndFragment, string name, string lang, string title);
    public virtual StringBuffer RenderFencesFromCodeContent(string codeContent, DfmFencesBlockToken token);
    public virtual string FindFile(DfmFencesToken token, IMarkdownContext context);
    [ObsoleteAttribute]
public virtual DfmExtractCodeResult ExtractCode(DfmFencesToken token, string filePath);
    public virtual DfmExtractCodeResult ExtractCode(DfmFencesToken token, string filePath, IDfmFencesBlockPathQueryOption option);
    [ObsoleteAttribute]
public virtual DfmExtractCodeResult ExtractCode(DfmFencesToken token, String[] fencesCode);
    public virtual DfmExtractCodeResult ExtractCode(DfmFencesToken token, String[] fencesCode, IDfmFencesBlockPathQueryOption option);
    public virtual StringBuffer RenderFencesCode(DfmFencesToken token, Options options, string errorMessage, String[] codeLines, IDfmFencesBlockPathQueryOption pathQueryOption);
    public virtual StringBuffer RenderOpenPreTag(StringBuffer result, DfmFencesToken token, Options options);
    public virtual StringBuffer RenderClosePreTag(StringBuffer result, DfmFencesToken token, Options options);
    [ObsoleteAttribute]
public virtual StringBuffer RenderOpenCodeTag(StringBuffer result, DfmFencesToken token, Options options);
    public virtual StringBuffer RenderOpenCodeTag(StringBuffer result, DfmFencesToken token, Options options, IDfmFencesBlockPathQueryOption pathQueryOption);
    public virtual StringBuffer RenderCloseCodeTag(StringBuffer result, DfmFencesToken token, Options options);
    public virtual StringBuffer RenderReferenceNotFoundErrorMessage(IMarkdownRenderer renderer, DfmFencesToken token);
    public virtual StringBuffer RenderCodeErrorString(string errorMessage);
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.Dfm.DfmContextExtensions : object {
    private static string BaseFolderKey;
    private static string FilePathStackKey;
    private static string DependencyKey;
    private static string IsIncludeKey;
    private static string IsInTableKey;
    private static string FallbackFoldersKey;
    [ExtensionAttribute]
public static ImmutableStack`1<string> GetFilePathStack(IMarkdownContext context);
    [ExtensionAttribute]
public static IMarkdownContext SetFilePathStack(IMarkdownContext context, ImmutableStack`1<string> filePathStack);
    [ExtensionAttribute]
public static string GetBaseFolder(IMarkdownContext context);
    [ExtensionAttribute]
public static IMarkdownContext SetBaseFolder(IMarkdownContext context, string baseFolder);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetFallbackFolders(IMarkdownContext context);
    [ExtensionAttribute]
public static IMarkdownContext SetFallbackFolders(IMarkdownContext context, IReadOnlyList`1<string> fallbackFolders);
    [ExtensionAttribute]
public static IMarkdownContext SetDependency(IMarkdownContext context, HashSet`1<string> dependency);
    [ExtensionAttribute]
public static void ReportDependency(IMarkdownContext context, string file);
    [ExtensionAttribute]
public static void ReportDependency(IMarkdownContext context, IEnumerable`1<string> files);
    [ExtensionAttribute]
public static bool GetIsInclude(IMarkdownContext context);
    [ExtensionAttribute]
public static IMarkdownContext SetIsInclude(IMarkdownContext context);
    [ExtensionAttribute]
public static bool GetIsInTable(IMarkdownContext context);
    [ExtensionAttribute]
public static IMarkdownContext SetIsInTable(IMarkdownContext context);
}
public abstract class Microsoft.DocAsCode.Dfm.DfmCustomizedRendererPartBase`3 : object {
    public string Name { get; }
    public Type MarkdownRendererType { get; }
    public Type MarkdownTokenType { get; }
    public Type MarkdownContextType { get; }
    public abstract virtual string get_Name();
    public sealed virtual Type get_MarkdownRendererType();
    public sealed virtual Type get_MarkdownTokenType();
    public sealed virtual Type get_MarkdownContextType();
    private sealed virtual override bool Microsoft.DocAsCode.Dfm.IDfmCustomizedRendererPart.Match(IMarkdownRenderer renderer, IMarkdownToken token, IMarkdownContext context);
    private sealed virtual override StringBuffer Microsoft.DocAsCode.Dfm.IDfmCustomizedRendererPart.Render(IMarkdownRenderer renderer, IMarkdownToken token, IMarkdownContext context);
    public abstract virtual bool Match(TRenderer renderer, TToken token, TContext context);
    public abstract virtual StringBuffer Render(TRenderer renderer, TToken token, TContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmDefaultBlockQuoteBlockSplitToken : SplitToken {
    public DfmDefaultBlockQuoteBlockSplitToken(IMarkdownToken token);
}
public class Microsoft.DocAsCode.Dfm.DfmEmailInlineRule : object {
    private static Regex _emailRegex;
    public string Name { get; }
    public Regex Xref { get; }
    private static DfmEmailInlineRule();
    public sealed virtual string get_Name();
    public virtual Regex get_Xref();
    public sealed virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmEngine : MarkdownEngine {
    public DfmEngine(IMarkdownContext context, IMarkdownTokenRewriter rewriter, object renderer, Options options);
    internal DfmEngine(DfmEngine engine);
    public virtual string Markup(string src, string path);
    public string Markup(string src, string path, HashSet`1<string> dependency);
    public string Markup(string src, IMarkdownContext context);
    internal string InternalMarkup(string src, ImmutableStack`1<string> parents, HashSet`1<string> dependency);
    private static LoggerFileScope GetFileScope(ImmutableStack`1<string> parents);
    internal string InternalMarkup(string src, IMarkdownContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmEngineBuilder : GfmEngineBuilder {
    private string _baseDir;
    private IReadOnlyList`1<string> _fallbackFolders;
    public DfmEngineBuilder(Options options, string baseDir, string templateDir, IReadOnlyList`1<string> fallbackFolders);
    public DfmEngineBuilder(Options options, string baseDir, string templateDir, IReadOnlyList`1<string> fallbackFolders, ICompositionContainer container);
    private static void Replace(List`1<IMarkdownRule> blockRules);
    private static Func`3<IMarkdownRewriteEngine, DfmTabGroupBlockToken, IMarkdownToken> GetTabGroupIdRewriter();
    private static DfmTabGroupBlockToken RewriteGroupId(DfmTabGroupBlockToken token, Dictionary`2<string, int> dict);
    private static DfmTabGroupBlockToken RewriteActiveAndVisible(DfmTabGroupBlockToken token, List`1<String[]> tabSelectionInfo);
    private static int ApplyTabVisible(List`1<String[]> tabSelectionInfo, List`1<DfmTabItemBlockToken> items);
    private static IEnumerable`1<Tuple`2<string, int>> GetTabIdAndCountList(List`1<DfmTabItemBlockToken> items);
    private static int GetTabActive(DfmTabGroupBlockToken token, List`1<String[]> tabSelectionInfo, List`1<DfmTabItemBlockToken> items, int firstVisibleTab, List`1<Tuple`2<string, int>> idAndCountList);
    private static int FindActiveIndex(List`1<DfmTabItemBlockToken> items, String[] info);
    private static IMarkdownTokenRewriter InitMarkdownStyle(ICompositionContainer container, string baseDir, string templateDir);
    public DfmEngine CreateDfmEngine(object renderer);
    public virtual IMarkdownEngine CreateEngine(object renderer);
}
public class Microsoft.DocAsCode.Dfm.DfmExtractCodeResult : object {
    [CompilerGeneratedAttribute]
private bool <IsSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CodeLines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public bool IsSuccessful { get; public set; }
    public String[] CodeLines { get; public set; }
    public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSuccessful();
    [CompilerGeneratedAttribute]
public void set_IsSuccessful(bool value);
    [CompilerGeneratedAttribute]
public String[] get_CodeLines();
    [CompilerGeneratedAttribute]
public void set_CodeLines(String[] value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
public static class Microsoft.DocAsCode.Dfm.DfmFallbackHelper : object {
    public static Tuple`2<string, bool> GetFilePathWithFallback(string relativePath, IMarkdownContext context);
    private static Tuple`2<string, bool> FindInFallbackFolders(IMarkdownContext context, RelativePath filePathToDocset, string parentFileDirectoryToDocset, string originalFullPath);
}
[ObsoleteAttribute]
public static class Microsoft.DocAsCode.Dfm.DfmFencesBlockHelper : object {
    [ObsoleteAttribute]
public static string GetRenderedFencesBlockString(DfmFencesBlockToken token, Options options, string errorMessage, String[] codeLines);
    [ObsoleteAttribute]
public static string GetRenderedFencesBlockString(DfmFencesToken token, Options options, string errorMessage, String[] codeLines);
    [ObsoleteAttribute]
public static string GenerateReferenceNotFoundErrorMessage(IMarkdownRenderer renderer, DfmFencesBlockToken token);
    [ObsoleteAttribute]
public static string GenerateReferenceNotFoundErrorMessage(IMarkdownRenderer renderer, DfmFencesToken token);
}
public abstract class Microsoft.DocAsCode.Dfm.DfmFencesBlockPathQueryOption : object {
    [CompilerGeneratedAttribute]
private string <HighlightLines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DedentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string HighlightLines { get; public set; }
    public Nullable`1<int> DedentLength { get; public set; }
    public string ErrorMessage { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_HighlightLines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HighlightLines(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_DedentLength();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DedentLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
protected void set_ErrorMessage(string value);
    public abstract virtual IEnumerable`1<string> GetQueryLines(String[] lines, DfmFencesToken token);
    public sealed virtual IEnumerable`1<string> GetQueryLines(String[] lines);
    public sealed virtual bool ValidateAndPrepare(String[] lines, DfmFencesToken token);
    private sealed virtual override bool Microsoft.DocAsCode.Dfm.IDfmFencesBlockPathQueryOption.ValidateHighlightLinesAndDedentLength(int totalLines);
    protected IEnumerable`1<string> ProcessIncludedLines(List`1<string> lines, DfmFencesToken token);
    protected string ValidateHighlightLinesAndDedentLength(int totalLines);
    protected bool CheckLineRange(int totalLines, Nullable`1<int> startLine, Nullable`1<int> endLine, bool needThrow);
}
public class Microsoft.DocAsCode.Dfm.DfmFencesBlockPathQueryOptionParameters : object {
    private static Regex _dfmFencesSharpQueryStringRegex;
    private static Regex _dfmFencesRangeQueryStringRegex;
    private static string StartLineQueryStringKey;
    private static string EndLineQueryStringKey;
    private static string TagNameQueryStringKey;
    private static string RangeQueryStringKey;
    private static string HighlightLinesQueryStringKey;
    private static string DedentQueryStringKey;
    private static char RegionSeparatorInRangeQueryString;
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<Nullable`1<int>, Nullable`1<int>>> <LinePairs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HighlightLines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DedentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    public List`1<Tuple`2<Nullable`1<int>, Nullable`1<int>>> LinePairs { get; public set; }
    public string HighlightLines { get; public set; }
    public Nullable`1<int> DedentLength { get; public set; }
    public string TagName { get; public set; }
    private static DfmFencesBlockPathQueryOptionParameters();
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<Nullable`1<int>, Nullable`1<int>>> get_LinePairs();
    [CompilerGeneratedAttribute]
public void set_LinePairs(List`1<Tuple`2<Nullable`1<int>, Nullable`1<int>>> value);
    [CompilerGeneratedAttribute]
public string get_HighlightLines();
    [CompilerGeneratedAttribute]
public void set_HighlightLines(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DedentLength();
    [CompilerGeneratedAttribute]
public void set_DedentLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    public static DfmFencesBlockPathQueryOptionParameters Create(string queryAndFragment);
}
public class Microsoft.DocAsCode.Dfm.DfmFencesBlockRule : DfmFencesRule {
    private static Matcher _DfmFencesMatcher;
    private static Regex _dfmFencesRegex;
    public string Name { get; }
    public Matcher DfmFencesMatcher { get; }
    private static DfmFencesBlockRule();
    public virtual string get_Name();
    public virtual Matcher get_DfmFencesMatcher();
    public virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
    [ObsoleteAttribute]
private IMarkdownToken TryMatchOld(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmFencesBlockToken : DfmFencesToken {
    [ObsoleteAttribute]
public DfmFencesBlockToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, SourceInfo sourceInfo, string lang, string title, IDfmFencesBlockPathQueryOption pathQueryOption);
    [ObsoleteAttribute]
public DfmFencesBlockToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, SourceInfo sourceInfo, string lang, string title, IDfmFencesBlockPathQueryOption pathQueryOption, string queryStringAndFragment);
    public DfmFencesBlockToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, SourceInfo sourceInfo, string lang, string title, string queryStringAndFragment);
}
public class Microsoft.DocAsCode.Dfm.DfmFencesInlineRule : DfmFencesRule {
    private static Regex _dfmFencesRegex;
    public string Name { get; }
    private static DfmFencesInlineRule();
    public virtual string get_Name();
    public virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmFencesInlineToken : DfmFencesToken {
    [ObsoleteAttribute]
public DfmFencesInlineToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, SourceInfo sourceInfo, string lang, string title, IDfmFencesBlockPathQueryOption pathQueryOption);
    [ObsoleteAttribute]
public DfmFencesInlineToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, SourceInfo sourceInfo, string lang, string title, IDfmFencesBlockPathQueryOption pathQueryOption, string queryStringAndFragment);
    public DfmFencesInlineToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, SourceInfo sourceInfo, string lang, string title, string queryStringAndFragment);
}
public abstract class Microsoft.DocAsCode.Dfm.DfmFencesRule : object {
    private static string StartLineQueryStringKey;
    private static string EndLineQueryStringKey;
    private static string TagNameQueryStringKey;
    private static string RangeQueryStringKey;
    private static string HighlightLinesQueryStringKey;
    private static string DedentQueryStringKey;
    private static char RegionSeparatorInRangeQueryString;
    private static Regex _dfmFencesSharpQueryStringRegex;
    internal static Regex _dfmFencesRangeQueryStringRegex;
    public string Name { get; }
    private static DfmFencesRule();
    public abstract virtual string get_Name();
    public abstract virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
    [ObsoleteAttribute("use DfmCodeExtractor.ParsePathQueryString")]
public static IDfmFencesBlockPathQueryOption ParsePathQueryString(string queryOption, string queryString);
    [ObsoleteAttribute("use DfmCodeExtractor.ParsePathQueryString")]
public static IDfmFencesBlockPathQueryOption ParsePathQueryString(string queryOption, string queryString, bool noCache);
}
public abstract class Microsoft.DocAsCode.Dfm.DfmFencesToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Lang>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryStringAndFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private IDfmFencesBlockPathQueryOption <PathQueryOption>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Path { get; }
    public string Lang { get; }
    public string Name { get; }
    public string Title { get; }
    public string QueryStringAndFragment { get; }
    [ObsoleteAttribute("use QueryStringAndFragment")]
public IDfmFencesBlockPathQueryOption PathQueryOption { get; }
    public SourceInfo SourceInfo { get; }
    [ObsoleteAttribute]
public DfmFencesToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, SourceInfo sourceInfo, string lang, string title, IDfmFencesBlockPathQueryOption pathQueryOption);
    [ObsoleteAttribute]
public DfmFencesToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, SourceInfo sourceInfo, string lang, string title, IDfmFencesBlockPathQueryOption pathQueryOption, string queryStringAndFragment);
    public DfmFencesToken(IMarkdownRule rule, IMarkdownContext context, string name, string path, SourceInfo sourceInfo, string lang, string title, string queryStringAndFragment);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_Lang();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_QueryStringAndFragment();
    [CompilerGeneratedAttribute]
public IDfmFencesBlockPathQueryOption get_PathQueryOption();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
}
public class Microsoft.DocAsCode.Dfm.DfmIncludeBlockRule : object {
    private static Matcher _IncludeMatcher;
    private static Regex _incRegex;
    public string Name { get; }
    [ObsoleteAttribute]
public Regex Include { get; }
    public Matcher IncludeMatcher { get; }
    private static DfmIncludeBlockRule();
    public virtual string get_Name();
    public virtual Regex get_Include();
    public virtual Matcher get_IncludeMatcher();
    public sealed virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
    [ObsoleteAttribute]
private IMarkdownToken TryMatchOld(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmIncludeBlockToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Src>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Src { get; }
    public string Name { get; }
    public string Title { get; }
    [ObsoleteAttribute]
public string Raw { get; }
    public SourceInfo SourceInfo { get; }
    [ObsoleteAttribute]
public DfmIncludeBlockToken(IMarkdownRule rule, IMarkdownContext context, string src, string name, string title, string raw, SourceInfo sourceInfo);
    public DfmIncludeBlockToken(IMarkdownRule rule, IMarkdownContext context, string src, string name, string title, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Title();
    public string get_Raw();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
}
public class Microsoft.DocAsCode.Dfm.DfmIncludeInlineRule : object {
    private static Regex _inlineIncludeRegex;
    public string Name { get; }
    public Regex Include { get; }
    private static DfmIncludeInlineRule();
    public virtual string get_Name();
    public virtual Regex get_Include();
    public sealed virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmIncludeInlineToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Src>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Src { get; }
    public string Name { get; }
    public string Title { get; }
    [ObsoleteAttribute]
public string Raw { get; }
    public SourceInfo SourceInfo { get; }
    public DfmIncludeInlineToken(IMarkdownRule rule, IMarkdownContext context, string src, string name, string title, SourceInfo sourceInfo);
    [ObsoleteAttribute]
public DfmIncludeInlineToken(IMarkdownRule rule, IMarkdownContext context, string src, string name, string title, string raw, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Title();
    public string get_Raw();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
}
internal class Microsoft.DocAsCode.Dfm.DfmInclusionLoader : object {
    private FileCacheLite _cache;
    private Dictionary`2<string, HashSet`1<string>> _dependencyCache;
    public virtual string Load(IMarkdownRenderer adapter, string currentPath, SourceInfo sourceInfo, IMarkdownContext context, DfmEngine engine);
    private string LoadCore(IMarkdownRenderer adapter, string currentPath, SourceInfo sourceInfo, IMarkdownContext context, DfmEngine engine);
    protected virtual string GetIncludedContent(string filePath, IMarkdownContext context);
    private static string GenerateErrorNodeWithCommentWrapper(string tag, string comment, SourceInfo sourceInfo);
    private static string GenerateNodeWithCommentWrapper(string tag, string comment, string html);
    private static string UpdateToHrefFromWorkingFolder(string html, string filePath);
    private static void UpdateToHrefFromWorkingFolder(HtmlNode html, string filePath);
    private static List`1<NodeInfo> GetHrefNodes(HtmlNode html);
    private static string UpdateHtml(string html, Action`1<HtmlNode> updater);
    public sealed virtual void Dispose();
}
internal class Microsoft.DocAsCode.Dfm.DfmInlineInclusionLoader : DfmInclusionLoader {
    private bool _trimEnd;
    public DfmInlineInclusionLoader(bool trimEnd);
    protected virtual string GetIncludedContent(string filePath, IMarkdownContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmJsonTokenTreeRender : JsonTokenTreeRenderer {
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmXrefInlineToken token, MarkdownInlineContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmIncludeBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmIncludeInlineToken token, MarkdownInlineContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmYamlHeaderBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, MarkdownBlockquoteBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmFencesBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmNoteBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmVideoBlockToken token, MarkdownBlockContext context);
    private string ExposeTokenNameInDfm(IMarkdownToken token);
}
public class Microsoft.DocAsCode.Dfm.DfmMarkdownRenderer : MarkdownRenderer {
    public virtual StringBuffer Render(IMarkdownRenderer render, DfmIncludeInlineToken token, MarkdownInlineContext context);
    public virtual StringBuffer Render(IMarkdownRenderer render, DfmIncludeBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer render, DfmNoteBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer render, DfmYamlHeaderBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer render, DfmSectionBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer render, DfmVideoBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmTabGroupBlockToken token, MarkdownBlockContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmNoteBlockRule : object {
    private static Matcher _NoteMatcher;
    private static Regex _dfmNoteRegex;
    public string Name { get; }
    [ObsoleteAttribute]
public Regex DfmNoteRegex { get; }
    public Matcher NoteMatcher { get; }
    private static DfmNoteBlockRule();
    public virtual string get_Name();
    public virtual Regex get_DfmNoteRegex();
    public virtual Matcher get_NoteMatcher();
    public virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
    private IMarkdownToken TryMatchOld(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmNoteBlockSplitToken : SplitToken {
    public DfmNoteBlockSplitToken(IMarkdownToken token);
}
public class Microsoft.DocAsCode.Dfm.DfmNoteBlockToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoteType>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Content { get; }
    public string NoteType { get; }
    public SourceInfo SourceInfo { get; }
    public DfmNoteBlockToken(IMarkdownRule rule, IMarkdownContext context, string noteType, string content, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public string get_NoteType();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
}
public class Microsoft.DocAsCode.Dfm.DfmNpTableBlockRule : MarkdownNpTableBlockRule {
    public virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmRenderer : HtmlRenderer {
    private DfmInclusionLoader _inlineInclusionHelper;
    private DfmInclusionLoader _blockInclusionHelper;
    private DfmCodeRenderer _codeRenderer;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <Tokens>k__BackingField;
    public ImmutableDictionary`2<string, string> Tokens { get; public set; }
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, string> get_Tokens();
    [CompilerGeneratedAttribute]
public void set_Tokens(ImmutableDictionary`2<string, string> value);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmXrefInlineToken token, MarkdownInlineContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmIncludeBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmIncludeInlineToken token, MarkdownInlineContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmYamlHeaderBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmSectionBlockSplitToken splitToken, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmNoteBlockSplitToken splitToken, IMarkdownContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmVideoBlockSplitToken splitToken, IMarkdownContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmDefaultBlockQuoteBlockSplitToken splitToken, IMarkdownContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, MarkdownBlockquoteBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmFencesToken token, IMarkdownContext context);
    [ObsoleteAttribute]
public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmFencesBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmNoteBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmVideoBlockToken token, MarkdownBlockContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmTabGroupBlockToken token, MarkdownBlockContext context);
    private static StringBuffer RenderTabHeaders(IMarkdownRenderer renderer, DfmTabGroupBlockToken token, StringBuffer sb, string groupId);
    private static StringBuffer RenderSections(IMarkdownRenderer renderer, DfmTabGroupBlockToken token, StringBuffer sb, string groupId);
    private static StringBuffer AppendGroupId(StringBuffer sb, string groupId, DfmTabItemBlockToken item);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmTabTitleBlockToken token, IMarkdownContext context);
    public virtual StringBuffer Render(IMarkdownRenderer renderer, DfmTabContentBlockToken token, IMarkdownContext context);
    public sealed virtual void Dispose();
}
public class Microsoft.DocAsCode.Dfm.DfmSectionBlockRule : object {
    private static Matcher _SectionMatcher;
    private static Regex _sectionRegex;
    private static string SectionReplacementHtmlTag;
    public string Name { get; }
    private static DfmSectionBlockRule();
    public sealed virtual string get_Name();
    public virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
    private IMarkdownToken TryMatchOld(IMarkdownParser parser, IMarkdownParsingContext context);
    private string ExtractAttibutes(string attributeText);
}
public class Microsoft.DocAsCode.Dfm.DfmSectionBlockSplitToken : SplitToken {
    public DfmSectionBlockSplitToken(IMarkdownToken token);
}
public class Microsoft.DocAsCode.Dfm.DfmSectionBlockToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Attributes { get; }
    public SourceInfo SourceInfo { get; }
    public DfmSectionBlockToken(IMarkdownRule rule, IMarkdownContext context, string attributes, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Attributes();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
}
public class Microsoft.DocAsCode.Dfm.DfmTabContentBlockToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<IMarkdownToken> <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public ImmutableArray`1<IMarkdownToken> Content { get; }
    public SourceInfo SourceInfo { get; }
    public DfmTabContentBlockToken(IMarkdownRule rule, IMarkdownContext context, ImmutableArray`1<IMarkdownToken> content, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<IMarkdownToken> get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
    public sealed virtual IEnumerable`1<IMarkdownToken> GetChildren();
    public sealed virtual DfmTabContentBlockToken Rewrite(IMarkdownRewriteEngine rewriteEngine);
}
public class Microsoft.DocAsCode.Dfm.DfmTabGroupBlockRule : object {
    public static DfmTabGroupBlockRule Instance;
    public string Name { get; }
    private static DfmTabGroupBlockRule();
    public sealed virtual string get_Name();
    public sealed virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmTabGroupBlockToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<DfmTabItemBlockToken> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActiveTabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Id { get; }
    public ImmutableArray`1<DfmTabItemBlockToken> Items { get; }
    public int ActiveTabIndex { get; }
    public SourceInfo SourceInfo { get; }
    public DfmTabGroupBlockToken(IMarkdownRule rule, IMarkdownContext context, string id, ImmutableArray`1<DfmTabItemBlockToken> items, int activeTabIndex, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DfmTabItemBlockToken> get_Items();
    [CompilerGeneratedAttribute]
public int get_ActiveTabIndex();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
    public sealed virtual IEnumerable`1<IMarkdownToken> GetChildren();
    public sealed virtual DfmTabGroupBlockToken Rewrite(IMarkdownRewriteEngine rewriteEngine);
}
public class Microsoft.DocAsCode.Dfm.DfmTabItemBlockToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private DfmTabTitleBlockToken <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private DfmTabContentBlockToken <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Id { get; }
    public string Condition { get; }
    public DfmTabTitleBlockToken Title { get; }
    public DfmTabContentBlockToken Content { get; }
    public bool Visible { get; }
    public SourceInfo SourceInfo { get; }
    public DfmTabItemBlockToken(IMarkdownRule rule, IMarkdownContext context, string id, string condition, DfmTabTitleBlockToken title, DfmTabContentBlockToken content, bool visible, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public DfmTabTitleBlockToken get_Title();
    [CompilerGeneratedAttribute]
public DfmTabContentBlockToken get_Content();
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
    public sealed virtual IEnumerable`1<IMarkdownToken> GetChildren();
    public sealed virtual DfmTabItemBlockToken Rewrite(IMarkdownRewriteEngine rewriteEngine);
    public DfmTabItemBlockToken SetVisible(bool visible);
}
public class Microsoft.DocAsCode.Dfm.DfmTableBlockRule : MarkdownTableBlockRule {
    public virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmTabTitleBlockToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private InlineContent <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public InlineContent Content { get; }
    public SourceInfo SourceInfo { get; }
    public DfmTabTitleBlockToken(IMarkdownRule rule, IMarkdownContext context, InlineContent content, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public InlineContent get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
    public sealed virtual IEnumerable`1<IMarkdownToken> GetChildren();
    public sealed virtual DfmTabTitleBlockToken Rewrite(IMarkdownRewriteEngine rewriteEngine);
}
public class Microsoft.DocAsCode.Dfm.DfmTagNameResolveResult : object {
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<int> <ExcludesLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public int StartLine { get; public set; }
    public int EndLine { get; public set; }
    public HashSet`1<int> ExcludesLines { get; public set; }
    public bool IsSuccessful { get; public set; }
    public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
public void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public HashSet`1<int> get_ExcludesLines();
    [CompilerGeneratedAttribute]
public void set_ExcludesLines(HashSet`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IsSuccessful();
    [CompilerGeneratedAttribute]
public void set_IsSuccessful(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
public class Microsoft.DocAsCode.Dfm.DfmTextInlineRule : MarkdownTextInlineRule {
    private static Regex _inlineTextRegex;
    public Regex Text { get; }
    private static DfmTextInlineRule();
    public virtual Regex get_Text();
}
public class Microsoft.DocAsCode.Dfm.DfmVideoBlockRule : object {
    private static Matcher _VideoMatcher;
    private static Regex _videoRegex;
    public string Name { get; }
    [ObsoleteAttribute("Please use VideoMatcher.")]
public Regex VideoRegex { get; }
    public Matcher VideoMatcher { get; }
    private static DfmVideoBlockRule();
    public virtual string get_Name();
    public virtual Regex get_VideoRegex();
    public virtual Matcher get_VideoMatcher();
    public sealed virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
    [ObsoleteAttribute]
public IMarkdownToken TryMatchOld(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmVideoBlockSplitToken : SplitToken {
    public DfmVideoBlockSplitToken(IMarkdownToken token);
}
public class Microsoft.DocAsCode.Dfm.DfmVideoBlockToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Link { get; }
    public SourceInfo SourceInfo { get; }
    public DfmVideoBlockToken(IMarkdownRule rule, IMarkdownContext context, string link, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Link();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
}
public class Microsoft.DocAsCode.Dfm.DfmXrefAutoLinkInlineRule : object {
    public static string XrefAutoLinkRegexString;
    public static string XrefAutoLinkRegexWithQuoteString;
    private static Regex XrefAutoLinkRegex;
    private static Regex XrefAutoLinkRegexWithQuote;
    public string Name { get; }
    private static DfmXrefAutoLinkInlineRule();
    public sealed virtual string get_Name();
    public sealed virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmXrefInlineToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<IMarkdownToken> <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowIfNotResolved>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Href { get; }
    public ImmutableArray`1<IMarkdownToken> Content { get; }
    public string Title { get; }
    public bool ThrowIfNotResolved { get; }
    public SourceInfo SourceInfo { get; }
    public DfmXrefInlineToken(IMarkdownRule rule, IMarkdownContext context, string href, ImmutableArray`1<IMarkdownToken> content, string title, bool throwIfNotResolved, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<IMarkdownToken> get_Content();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public bool get_ThrowIfNotResolved();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
    public sealed virtual DfmXrefInlineToken Rewrite(IMarkdownRewriteEngine rewriteEngine);
    public sealed virtual IEnumerable`1<IMarkdownToken> GetChildren();
}
public class Microsoft.DocAsCode.Dfm.DfmXrefShortcutInlineRule : object {
    private static string ContinuableCharacters;
    private static string StopCharacters;
    public static string XrefShortcutRegexWithQuoteString;
    public static string XrefShortcutRegexString;
    private static Regex XrefShortcutRegexWithQuote;
    private static Regex XrefShortcutRegex;
    public string Name { get; }
    private static DfmXrefShortcutInlineRule();
    public sealed virtual string get_Name();
    public sealed virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmYamlHeaderBlockRule : object {
    private static Matcher _EndSymbol;
    private static Matcher _YamlHeaderMatcher;
    public static Regex YamlHeaderRegex;
    public string Name { get; }
    [ObsoleteAttribute("Please use YamlHeaderMatcher.")]
public Regex YamlHeader { get; }
    public Matcher YamlHeaderMatcher { get; }
    private static DfmYamlHeaderBlockRule();
    public sealed virtual string get_Name();
    public virtual Regex get_YamlHeader();
    public virtual Matcher get_YamlHeaderMatcher();
    public sealed virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context);
    private IMarkdownToken TryMatchOld(IMarkdownParser parser, IMarkdownParsingContext context);
    private static void LogMessage(YamlException exception, IMarkdownParsingContext context);
    private static void LogMessage(IMarkdownParsingContext context);
}
public class Microsoft.DocAsCode.Dfm.DfmYamlHeaderBlockToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public string Content { get; }
    public SourceInfo SourceInfo { get; }
    public DfmYamlHeaderBlockToken(IMarkdownRule rule, IMarkdownContext context, string content, SourceInfo sourceInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
}
public class Microsoft.DocAsCode.Dfm.DocfxFlavoredMarked : object {
    public static Options CreateDefaultOptions();
    public static DfmEngineBuilder CreateBuilder(string baseDir);
    public static DfmEngineBuilder CreateBuilder(string baseDir, string templateDir);
    public static DfmEngineBuilder CreateBuilder(string baseDir, string templateDir, Options options);
    public static DfmEngineBuilder CreateBuilder(string baseDir, string templateDir, Options options, IReadOnlyList`1<string> fallbackFolders);
    public static string Markup(string src, string path, ImmutableDictionary`2<string, string> tokens, HashSet`1<string> dependency);
    public static string Markup(string baseDir, string templateDir, Options options, string src, string path, ImmutableDictionary`2<string, string> tokens, HashSet`1<string> dependency);
    public static string Markup(string baseDir, string src, IReadOnlyList`1<string> fallbackFolders, string path, ImmutableDictionary`2<string, string> tokens, HashSet`1<string> dependency);
}
public class Microsoft.DocAsCode.Dfm.FileCacheLite : object {
    public static FileCacheLite Default;
    private IDictionary`2<string, FileCacheModel> _cache;
    public FileCacheLite(IEqualityComparer`1<string> keyComparer);
    private static FileCacheLite();
    public void Add(string key, string value);
    public string Get(string key);
    public bool Remove(string key);
    public bool TryGet(string key, String& value);
    public sealed virtual void Dispose();
}
public class Microsoft.DocAsCode.Dfm.FlatNameCodeSnippetExtractor : CodeSnippetRegexExtractor {
    private Regex _startLineRegex;
    private Regex _endLineRegex;
    public FlatNameCodeSnippetExtractor(Regex startLineRegex, Regex endLineRegex);
    protected virtual List`1<CodeSnippetTag> ResolveCodeSnippetTags(String[] lines);
}
public class Microsoft.DocAsCode.Dfm.FullFileBlockPathQueryOption : DfmFencesBlockPathQueryOption {
    public virtual IEnumerable`1<string> GetQueryLines(String[] lines, DfmFencesToken token);
}
public class Microsoft.DocAsCode.Dfm.FullFileBlockPathQueryOptionCreator : object {
    public sealed virtual IDfmFencesBlockPathQueryOption ParseQueryOrFragment(DfmFencesBlockPathQueryOptionParameters parameters, bool noCache);
}
public class Microsoft.DocAsCode.Dfm.HeadingIdAggregator : MarkdownTokenAggregator`1<MarkdownHeadingBlockToken> {
    private static Regex OpenARegex;
    private static Regex CloseARegex;
    private static HeadingIdAggregator();
    protected virtual bool AggregateCore(MarkdownHeadingBlockToken headToken, IMarkdownTokenAggregateContext context);
    private static string ParseHeading(MarkdownHeadingBlockToken headToken);
}
public interface Microsoft.DocAsCode.Dfm.ICodeSnippetExtractor {
    public abstract virtual Dictionary`2<string, DfmTagNameResolveResult> GetAll(String[] lines);
}
public interface Microsoft.DocAsCode.Dfm.IDfmBlockSpecialSplitToken {
}
public interface Microsoft.DocAsCode.Dfm.IDfmCustomizedRendererPart {
    public string Name { get; }
    public Type MarkdownRendererType { get; }
    public Type MarkdownTokenType { get; }
    public Type MarkdownContextType { get; }
    public abstract virtual string get_Name();
    public abstract virtual Type get_MarkdownRendererType();
    public abstract virtual Type get_MarkdownTokenType();
    public abstract virtual Type get_MarkdownContextType();
    public abstract virtual bool Match(IMarkdownRenderer renderer, IMarkdownToken token, IMarkdownContext context);
    public abstract virtual StringBuffer Render(IMarkdownRenderer renderer, IMarkdownToken token, IMarkdownContext context);
}
public interface Microsoft.DocAsCode.Dfm.IDfmCustomizedRendererPartProvider {
    public abstract virtual IEnumerable`1<IDfmCustomizedRendererPart> CreateParts(IReadOnlyDictionary`2<string, object> parameters);
}
public interface Microsoft.DocAsCode.Dfm.IDfmEngineCustomizer {
    public abstract virtual void Customize(DfmEngineBuilder builder, IReadOnlyDictionary`2<string, object> parameters);
}
public interface Microsoft.DocAsCode.Dfm.IDfmFencesBlockPathQueryOption {
    public string HighlightLines { get; public set; }
    public Nullable`1<int> DedentLength { get; public set; }
    public string ErrorMessage { get; }
    public abstract virtual string get_HighlightLines();
    public abstract virtual void set_HighlightLines(string value);
    public abstract virtual Nullable`1<int> get_DedentLength();
    public abstract virtual void set_DedentLength(Nullable`1<int> value);
    public abstract virtual string get_ErrorMessage();
    [ObsoleteAttribute("merged into GetQueryLines(string[], DfmFencesToken)", "True")]
public abstract virtual bool ValidateAndPrepare(String[] lines, DfmFencesToken token);
    [ObsoleteAttribute("merged into GetQueryLines(string[], DfmFencesToken)", "True")]
public abstract virtual bool ValidateHighlightLinesAndDedentLength(int totalLines);
    [ObsoleteAttribute("merged into GetQueryLines(string[], DfmFencesToken)", "True")]
public abstract virtual IEnumerable`1<string> GetQueryLines(String[] lines);
    public abstract virtual IEnumerable`1<string> GetQueryLines(String[] lines, DfmFencesToken token);
}
public interface Microsoft.DocAsCode.Dfm.IDfmFencesBlockPathQueryOptionCreator {
    public abstract virtual IDfmFencesBlockPathQueryOption ParseQueryOrFragment(DfmFencesBlockPathQueryOptionParameters parameters, bool noCache);
}
[ObsoleteAttribute("use MultipleLineRangeBlockPathQueryOption")]
public class Microsoft.DocAsCode.Dfm.LineRangeBlockPathQueryOption : DfmFencesBlockPathQueryOption {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EndLine>k__BackingField;
    public Nullable`1<int> StartLine { get; public set; }
    public Nullable`1<int> EndLine { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EndLine();
    [CompilerGeneratedAttribute]
public void set_EndLine(Nullable`1<int> value);
    public virtual IEnumerable`1<string> GetQueryLines(String[] lines, DfmFencesToken token);
}
public class Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownValidatorBuilder : object {
    public static string DefaultValidatorName;
    public static string MarkdownValidatePhaseName;
    private List`1<RuleWithId`1<MarkdownMetadataValidationRule>> _metadataValidators;
    private List`1<RuleWithId`1<MarkdownTagValidationRule>> _tagValidators;
    private List`1<RuleWithId`1<MarkdownValidationRule>> _validators;
    private List`1<MarkdownValidationSetting> _settings;
    private Dictionary`2<string, MarkdownMetadataValidationRule> _globalMetadataValidators;
    private Dictionary`2<string, MarkdownValidationRule> _globalValidators;
    [CompilerGeneratedAttribute]
private ICompositionContainer <Container>k__BackingField;
    public ICompositionContainer Container { get; }
    public MarkdownValidatorBuilder(ICompositionContainer container);
    [CompilerGeneratedAttribute]
public ICompositionContainer get_Container();
    public static MarkdownValidatorBuilder Create(ICompositionContainer container, string baseDir, string templateDir);
    public void AddMetadataValidators(string category, Dictionary`2<string, MarkdownMetadataValidationRule> validators);
    public void AddMetadataValidators(MarkdownMetadataValidationRule[] rules);
    public void AddTagValidators(string category, Dictionary`2<string, MarkdownTagValidationRule> validators);
    public void AddTagValidators(MarkdownTagValidationRule[] validators);
    public void AddValidators(string category, Dictionary`2<string, MarkdownValidationRule> validators);
    public void AddValidators(MarkdownValidationRule[] rules);
    public void AddSettings(MarkdownValidationSetting[] settings);
    public void EnsureDefaultValidator();
    public IMarkdownTokenRewriter CreateRewriter();
    public IEnumerable`1<IInputMetadataValidator> GetEnabledMetadataRules();
    private static void LoadValidatorConfig(string baseDir, string templateDir, MarkdownValidatorBuilder builder);
    private static void LoadValidatorDefinition(string mdStyleDefPath, MarkdownValidatorBuilder builder);
    private IEnumerable`1<IMarkdownTokenValidator> GetEnabledRules();
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Dfm.MarkdownValidators.MarkdownValidatorBuilder/<GetEnabledTagRules>d__26")]
private IEnumerable`1<MarkdownTagValidationRule> GetEnabledTagRules();
    private Nullable`1<bool> IsDisabledBySetting(RuleWithId`1<T> item);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IInputMetadataValidator> <GetEnabledMetadataRules>b__22_0(string name);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMarkdownTokenValidatorProvider> <GetEnabledRules>b__25_0(string name);
}
public class Microsoft.DocAsCode.Dfm.MultipleLineRangeBlockPathQueryOption : DfmFencesBlockPathQueryOption {
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<Nullable`1<int>, Nullable`1<int>>> <LinePairs>k__BackingField;
    public List`1<Tuple`2<Nullable`1<int>, Nullable`1<int>>> LinePairs { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<Nullable`1<int>, Nullable`1<int>>> get_LinePairs();
    [CompilerGeneratedAttribute]
public void set_LinePairs(List`1<Tuple`2<Nullable`1<int>, Nullable`1<int>>> value);
    public virtual IEnumerable`1<string> GetQueryLines(String[] lines, DfmFencesToken token);
}
public class Microsoft.DocAsCode.Dfm.MultipleLineRangeBlockPathQueryOptionCreator : object {
    public sealed virtual IDfmFencesBlockPathQueryOption ParseQueryOrFragment(DfmFencesBlockPathQueryOptionParameters parameters, bool noCache);
}
public abstract class Microsoft.DocAsCode.Dfm.PlugableRendererBase : object {
    private object _innerRenderer;
    public PlugableRendererBase(object innerRenderer);
    public StringBuffer Render(IMarkdownRenderer renderer, IMarkdownToken token, IMarkdownContext context);
    public StringBuffer BaseRender(IMarkdownRenderer renderer, IMarkdownToken token, IMarkdownContext context);
    public virtual void Dispose();
}
public class Microsoft.DocAsCode.Dfm.RecursiveNameCodeSnippetExtractor : CodeSnippetRegexExtractor {
    private Regex _startLineRegex;
    private Regex _endLineRegex;
    public RecursiveNameCodeSnippetExtractor(Regex startLineRegex, Regex endLineRegex);
    protected virtual List`1<CodeSnippetTag> ResolveCodeSnippetTags(String[] lines);
}
public class Microsoft.DocAsCode.Dfm.SplitToken : object {
    [CompilerGeneratedAttribute]
private IMarkdownToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IMarkdownToken> <InnerTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <SourceInfo>k__BackingField;
    public IMarkdownToken Token { get; public set; }
    public List`1<IMarkdownToken> InnerTokens { get; public set; }
    public IMarkdownRule Rule { get; }
    public IMarkdownContext Context { get; }
    public SourceInfo SourceInfo { get; }
    public SplitToken(IMarkdownToken token);
    [CompilerGeneratedAttribute]
public IMarkdownToken get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(IMarkdownToken value);
    [CompilerGeneratedAttribute]
public List`1<IMarkdownToken> get_InnerTokens();
    [CompilerGeneratedAttribute]
public void set_InnerTokens(List`1<IMarkdownToken> value);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownRule get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual SourceInfo get_SourceInfo();
}
public class Microsoft.DocAsCode.Dfm.TabGroupAggregator : MarkdownTokenAggregator`1<MarkdownHeadingBlockToken> {
    private static Regex HrefRegex;
    private static TabGroupAggregator();
    protected virtual bool AggregateCore(MarkdownHeadingBlockToken headToken, IMarkdownTokenAggregateContext context);
    private static void AggregateCore(MarkdownHeadingBlockToken headToken, IMarkdownTokenAggregateContext context, int offset, List`1<DfmTabItemBlockToken> items, IMarkdownToken terminator);
    private static DfmTabItemBlockToken CreateTabItem(TabItemInfo info);
    private static TabItemInfo ParseHeading(MarkdownHeadingBlockToken headToken);
}
public class Microsoft.DocAsCode.Dfm.TagNameBlockPathQueryOption : DfmFencesBlockPathQueryOption {
    private static Regex CFamilyCodeSnippetCommentStartLineRegex;
    private static Regex CFamilyCodeSnippetCommentEndLineRegex;
    private static Regex BasicFamilyCodeSnippetCommentStartLineRegex;
    private static Regex BasicFamilyCodeSnippetCommentEndLineRegex;
    private static Regex MarkupLanguageFamilyCodeSnippetCommentStartLineRegex;
    private static Regex MarkupLanguageFamilyCodeSnippetCommentEndLineRegex;
    private static Regex SqlFamilyCodeSnippetCommentStartLineRegex;
    private static Regex SqlFamilyCodeSnippetCommentEndLineRegex;
    private static Regex ScriptFamilyCodeSnippetCommentStartLineRegex;
    private static Regex ScriptFamilyCodeSnippetCommentEndLineRegex;
    private static Regex BatchFileCodeSnippetRegionStartLineRegex;
    private static Regex BatchFileCodeSnippetRegionEndLineRegex;
    private static Regex CSharpCodeSnippetRegionStartLineRegex;
    private static Regex CSharpCodeSnippetRegionEndLineRegex;
    private static Regex ErlangCodeSnippetRegionStartLineRegex;
    private static Regex ErlangCodeSnippetRegionEndLineRegex;
    private static Regex LispCodeSnippetRegionStartLineRegex;
    private static Regex LispCodeSnippetRegionEndLineRegex;
    private static Regex VBCodeSnippetRegionRegionStartLineRegex;
    private static Regex VBCodeSnippetRegionRegionEndLineRegex;
    private IReadOnlyDictionary`2<string, List`1<ICodeSnippetExtractor>> _codeLanguageExtractors;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    private bool _noCache;
    private DfmTagNameResolveResult _resolveResult;
    private ConcurrentDictionary`2<string, Lazy`1<ConcurrentDictionary`2<string, List`1<DfmTagNameResolveResult>>>> _dfmTagNameLineRangeCache;
    public string TagName { get; public set; }
    public TagNameBlockPathQueryOption(bool noCache);
    public TagNameBlockPathQueryOption(CodeLanguageExtractorsBuilder codeLanguageExtractors, bool noCache);
    private static TagNameBlockPathQueryOption();
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    public static CodeLanguageExtractorsBuilder GetDefaultCodeLanguageExtractorsBuilder();
    public virtual IEnumerable`1<string> GetQueryLines(String[] lines, DfmFencesToken token);
    private DfmTagNameResolveResult ResolveTagNamesFromPath(string fencesPath, String[] fencesCodeLines, string tagName, List`1<ICodeSnippetExtractor> codeSnippetExtractors);
    private Lazy`1<ConcurrentDictionary`2<string, List`1<DfmTagNameResolveResult>>> GetLazyResolveResult(String[] fencesCodeLines, List`1<ICodeSnippetExtractor> codeSnippetExtractors);
    private static string GetCodeLanguageOrExtension(DfmFencesToken token);
}
public class Microsoft.DocAsCode.Dfm.TagNameBlockPathQueryOptionCreator : object {
    private CodeLanguageExtractorsBuilder _builder;
    public TagNameBlockPathQueryOptionCreator(CodeLanguageExtractorsBuilder builder);
    public sealed virtual IDfmFencesBlockPathQueryOption ParseQueryOrFragment(DfmFencesBlockPathQueryOptionParameters parameters, bool noCache);
}
