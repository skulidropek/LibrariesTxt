public class Microsoft.DocAsCode.Glob.FileGlob : object {
    public static IEnumerable`1<string> GetFiles(string cwd, IEnumerable`1<string> patterns, IEnumerable`1<string> excludePatterns, GlobMatcherOptions options);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Glob.FileGlob/<GetFilesCore>d__1")]
private static IEnumerable`1<string> GetFilesCore(string cwd, GlobMatcher[] globs, GlobMatcher[] excludeGlobs);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Glob.FileGlob/<GetFilesFromSubfolder>d__2")]
private static IEnumerable`1<string> GetFilesFromSubfolder(string baseDirectory, string cwd, GlobMatcher[] globs, GlobMatcher[] excludeGlobs);
    private static string GetRelativeFilePath(string directory, string file);
    private static string GetRelativeDirectoryPath(string parentDirectory, string directory);
    private static string NormalizeToFullPath(string path);
    private static bool IsFileMatch(string path, GlobMatcher[] globs, GlobMatcher[] excludeGlobs);
    private static bool IsDirectoryMatch(string path, GlobMatcher[] globs, GlobMatcher[] excludeGlobs);
    private static bool IsMatch(string path, GlobMatcher[] globs, GlobMatcher[] excludeGlobs, bool partial);
}
public class Microsoft.DocAsCode.Glob.GlobMatcher : object {
    private static StringComparer Comparer;
    private static String[] EmptyString;
    private static char NegateChar;
    private static string GlobStar;
    private static string ReplacerGroupName;
    private static HashSet`1<char> NeedEscapeCharactersInRegex;
    private static Regex UnescapeGlobRegex;
    private static Regex ExpandGlobStarRegex;
    private static string PatternStartWithDotAllowed;
    private static string PatternStartWithoutDotAllowed;
    private static HashSet`1<char> RegexCharactersWithDotPossible;
    private static string QuestionMarkToRegex;
    private static string SingleStarToRegex;
    private static Regex GlobStarRegex;
    private GlobRegexItem[][] _items;
    private bool _negate;
    private bool _ignoreCase;
    public static GlobMatcherOptions DefaultOptions;
    [CompilerGeneratedAttribute]
private GlobMatcherOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    public GlobMatcherOptions Options { get; }
    public string Raw { get; }
    public GlobMatcher(string pattern, GlobMatcherOptions options);
    private static GlobMatcher();
    [CompilerGeneratedAttribute]
public GlobMatcherOptions get_Options();
    [CompilerGeneratedAttribute]
public string get_Raw();
    public Regex GetRegex();
    public bool Match(string file, bool partial);
    private IEnumerable`1<GlobRegexItem[]> Compile(string pattern);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Glob.GlobMatcher/<Split>d__28")]
private IEnumerable`1<string> Split(string path, Char[] splitter);
    private string ConvertSingleGlob(IEnumerable`1<GlobRegexItem> regexItems);
    private bool IsFolderPath(string path);
    private GlobRegexItem ConvertSingleGlobPart(string globPart);
    private string GlobRegexItemToRegex(GlobRegexItem item);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Glob.GlobMatcher/<ExpandGlobStarShortcut>d__33")]
private IEnumerable`1<string> ExpandGlobStarShortcut(IEnumerable`1<string> globParts);
    private bool MatchOne(String[] fileParts, GlobRegexItem[] globParts, bool matchPartialGlob);
    private bool DisallowedMatchExists(string filePart);
    private static string UnescapeGlob(string s);
    private static string ReplaceReplacerGroup(Match m);
    internal static bool ParseNegate(String& pattern, GlobMatcherOptions options);
    internal static String[] ExpandGroup(string pattern, GlobMatcherOptions options);
    public sealed virtual bool Equals(GlobMatcher other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private GlobRegexItem[] <Compile>b__27_0(string glob);
}
[FlagsAttribute]
public enum Microsoft.DocAsCode.Glob.GlobMatcherOptions : Enum {
    public int value__;
    public static GlobMatcherOptions None;
    public static GlobMatcherOptions IgnoreCase;
    public static GlobMatcherOptions AllowNegate;
    public static GlobMatcherOptions AllowExpand;
    public static GlobMatcherOptions AllowEscape;
    public static GlobMatcherOptions AllowGlobStar;
    public static GlobMatcherOptions AllowDotMatch;
}
