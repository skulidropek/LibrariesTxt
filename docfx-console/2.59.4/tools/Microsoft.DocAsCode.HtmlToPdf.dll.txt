internal static class Microsoft.DocAsCode.HtmlToPdf.BuildToolConstants : object {
}
internal static class Microsoft.DocAsCode.HtmlToPdf.Constants : object {
    public static string PdfCommandName;
    public static string PdfCommandNotExistMessage;
}
public class Microsoft.DocAsCode.HtmlToPdf.ConvertWrapper : object {
    private static string TmpFolder;
    private static string HtmlFilePattern;
    private static string TocPageFileName;
    private PdfOptions _pdfOptions;
    public ConvertWrapper(PdfOptions pdfOptions);
    public static void PrerequisiteCheck(string filePath);
    public void Convert();
    private void ConvertCore(string basePath);
    private string NormalizeFilePath(string relativePath);
    private IList`1<ManifestItem> FindTocInManifest(Manifest manifest);
    private ManifestItem FindSiblingCoverPageInManifest(Manifest manifest, ManifestItem tocFile);
    private void HtmlTransformer(string fullPath);
    private void HtmlNotInTocTransformer(string basePath, UrlCache manifestUrlCache, ConcurrentBag`1<string> tocHtmls);
    private void RemoveQueryStringAndBookmarkTransformer(string tocPageFilePath);
    private void AbsolutePathInTocPageFileTransformer(string tocPage);
    private IList`1<TocModel> LoadTocModels(string basePath, ManifestItem tocFile);
    private IEnumerable`1<string> GetManifestHtmls(Manifest manifest);
    private void ConvertTocModelToHtmlModel(IList`1<TocModel> tocModels, IList`1<HtmlModel> htmlModels, ConcurrentBag`1<string> tocHtmls);
    private IList`1<string> ManifestHtmlsExceptTocHtmls(Manifest manifest, ConcurrentBag`1<string> tocHtmls);
    private IList`1<HtmlModel> BuildHtmlModels(string basePath, IList`1<TocModel> tocModels, ConcurrentBag`1<string> tocHtmls);
    private void ConvertCore(string basePath, string pdfFileName, IList`1<HtmlModel> htmlModels);
    private bool IsType(ManifestItem item, ManifestItemType targetType);
    [CompilerGeneratedAttribute]
private bool <FindTocInManifest>b__9_0(ManifestItem f);
    [CompilerGeneratedAttribute]
private bool <GetManifestHtmls>b__16_0(ManifestItem file);
}
internal static class Microsoft.DocAsCode.HtmlToPdf.FileExtensions : object {
    public static string JsonExtension;
    public static string PdfExtension;
    public static string MdExtension;
}
public class Microsoft.DocAsCode.HtmlToPdf.FileOutput : object {
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkToPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRawPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipPublish>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [JsonPropertyAttribute("relative_path")]
public string RelativePath { get; public set; }
    [JsonPropertyAttribute("link_to_path")]
public string LinkToPath { get; public set; }
    [JsonPropertyAttribute("hash")]
public string Hash { get; public set; }
    [JsonPropertyAttribute("is_raw_page")]
public bool IsRawPage { get; public set; }
    [JsonPropertyAttribute("skip_publish")]
public bool SkipPublish { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public string get_LinkToPath();
    [CompilerGeneratedAttribute]
public void set_LinkToPath(string value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRawPage();
    [CompilerGeneratedAttribute]
public void set_IsRawPage(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipPublish();
    [CompilerGeneratedAttribute]
public void set_SkipPublish(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
    public virtual string ToString();
}
public class Microsoft.DocAsCode.HtmlToPdf.FileOutputs : object {
    [CompilerGeneratedAttribute]
private FileOutput <Html>k__BackingField;
    [CompilerGeneratedAttribute]
private FileOutput <RawPageJson>k__BackingField;
    [CompilerGeneratedAttribute]
private FileOutput <MtaJson>k__BackingField;
    [CompilerGeneratedAttribute]
private FileOutput <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private FileOutput <TocJson>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <OtherOutputs>k__BackingField;
    [JsonPropertyAttribute(".html")]
public FileOutput Html { get; public set; }
    [JsonPropertyAttribute(".raw.page.json")]
public FileOutput RawPageJson { get; public set; }
    [JsonPropertyAttribute(".mta.json")]
public FileOutput MtaJson { get; public set; }
    [JsonPropertyAttribute("resource")]
public FileOutput Resource { get; public set; }
    [JsonPropertyAttribute(".json")]
public FileOutput TocJson { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> OtherOutputs { get; public set; }
    [CompilerGeneratedAttribute]
public FileOutput get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(FileOutput value);
    [CompilerGeneratedAttribute]
public FileOutput get_RawPageJson();
    [CompilerGeneratedAttribute]
public void set_RawPageJson(FileOutput value);
    [CompilerGeneratedAttribute]
public FileOutput get_MtaJson();
    [CompilerGeneratedAttribute]
public void set_MtaJson(FileOutput value);
    [CompilerGeneratedAttribute]
public FileOutput get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(FileOutput value);
    [CompilerGeneratedAttribute]
public FileOutput get_TocJson();
    [CompilerGeneratedAttribute]
public void set_TocJson(FileOutput value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_OtherOutputs();
    [CompilerGeneratedAttribute]
public void set_OtherOutputs(Dictionary`2<string, object> value);
}
public static class Microsoft.DocAsCode.HtmlToPdf.FolderUtility : object {
    public static void CopyDirectoryWithAllSubDirectories(string sourceDirectory, string targetDirectory, int maxDegreeOfParallelism);
    public static void ForceDeleteDirectoryWithAllSubDirectories(string directory, int maxDegreeOfParallelism);
    public static void ForceDeleteAllSubDirectories(string directory, int maxDegreeOfParallelism);
    public static void ForceDeleteFile(string filePath);
}
public static class Microsoft.DocAsCode.HtmlToPdf.Guard : object {
    public static void ArgumentNotNull(object argumentValue, string argumentName);
    public static void ArgumentNotNullOrEmpty(string argumentValue, string argumentName);
    public static void Argument(Func`1<bool> validationFunction, string argumentName, string argumentMessage);
}
public class Microsoft.DocAsCode.HtmlToPdf.HtmlModel : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalLink>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HtmlModel> <Children>k__BackingField;
    public string Title { get; public set; }
    public string HtmlFilePath { get; public set; }
    public string ExternalLink { get; public set; }
    public IList`1<HtmlModel> Children { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlFilePath();
    [CompilerGeneratedAttribute]
public void set_HtmlFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalLink();
    [CompilerGeneratedAttribute]
public void set_ExternalLink(string value);
    [CompilerGeneratedAttribute]
public IList`1<HtmlModel> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(IList`1<HtmlModel> value);
}
public class Microsoft.DocAsCode.HtmlToPdf.HtmlToPdfConverter : object {
    private static string OutLineKidsName;
    private static int TimeoutInMilliseconds;
    private HtmlToPdfOptions _htmlToPdfOptions;
    private IList`1<HtmlModel> _htmlModels;
    private IList`1<string> _htmlFilePaths;
    private int _currentNumberOfPages;
    public HtmlToPdfConverter(IList`1<HtmlModel> htmlModels, HtmlToPdfOptions htmlToPdfOptions);
    public IDictionary`2<string, PartialPdfModel> GetPartialPdfModels(IList`1<string> htmlFilePaths);
    public void Save(string outputFileName);
    private static string NormalizePath(string path);
    private static string WrapQuoteToPath(string path);
    private void ConvertToStreamCore(string arguments, Stream stream);
    private void ConvertToStream(string arguments, Stream stream);
    private void CreateOutlines(Dictionary`2<string, object> rootOutline, IList`1<HtmlModel> htmlModels, IDictionary`2<string, PartialPdfModel> pdfPages);
    private List`1<Dictionary`2<string, object>> ConvertOutlines();
    private IList`1<Dictionary`2<string, object>> GetOutlines();
    private void ExtractHtmlPathFromHtmlModels(IList`1<HtmlModel> htmlModels);
    private string GetFilePath(string htmlFilePath);
    private void SaveCore(Stream stream);
    private T Convert(string arguments, Func`2<PdfReader, T> readerFunc);
}
public class Microsoft.DocAsCode.HtmlToPdf.HtmlToPdfOptions : object {
    private static string DefaultStyleSheet;
    [CompilerGeneratedAttribute]
private string <UserStyleSheet>k__BackingField;
    [CompilerGeneratedAttribute]
private OutlineOption <OutlineOption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuiet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadArgsFromStdin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOutputToStdout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderHtmlPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterHtmlPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoadErrorHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan[] <RetryIntervals>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDegreeOfParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalArguments>k__BackingField;
    public string UserStyleSheet { get; public set; }
    public OutlineOption OutlineOption { get; public set; }
    public string Encoding { get; public set; }
    public bool IsQuiet { get; public set; }
    public bool IsReadArgsFromStdin { get; public set; }
    public bool IsOutputToStdout { get; public set; }
    public string BasePath { get; public set; }
    public string HeaderHtmlPath { get; public set; }
    public string FooterHtmlPath { get; public set; }
    public string LoadErrorHandling { get; public set; }
    public TimeSpan[] RetryIntervals { get; public set; }
    public int MaxDegreeOfParallelism { get; public set; }
    public string FilePath { get; public set; }
    public string AdditionalArguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserStyleSheet();
    [CompilerGeneratedAttribute]
public void set_UserStyleSheet(string value);
    [CompilerGeneratedAttribute]
public OutlineOption get_OutlineOption();
    [CompilerGeneratedAttribute]
public void set_OutlineOption(OutlineOption value);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public bool get_IsQuiet();
    [CompilerGeneratedAttribute]
public void set_IsQuiet(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsReadArgsFromStdin();
    [CompilerGeneratedAttribute]
public void set_IsReadArgsFromStdin(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOutputToStdout();
    [CompilerGeneratedAttribute]
public void set_IsOutputToStdout(bool value);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public string get_HeaderHtmlPath();
    [CompilerGeneratedAttribute]
public void set_HeaderHtmlPath(string value);
    [CompilerGeneratedAttribute]
public string get_FooterHtmlPath();
    [CompilerGeneratedAttribute]
public void set_FooterHtmlPath(string value);
    [CompilerGeneratedAttribute]
public string get_LoadErrorHandling();
    [CompilerGeneratedAttribute]
public void set_LoadErrorHandling(string value);
    [CompilerGeneratedAttribute]
public TimeSpan[] get_RetryIntervals();
    [CompilerGeneratedAttribute]
public void set_RetryIntervals(TimeSpan[] value);
    [CompilerGeneratedAttribute]
public int get_MaxDegreeOfParallelism();
    [CompilerGeneratedAttribute]
public void set_MaxDegreeOfParallelism(int value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalArguments();
    [CompilerGeneratedAttribute]
public void set_AdditionalArguments(string value);
    public virtual string ToString();
}
internal static class Microsoft.DocAsCode.HtmlToPdf.ManifestConstants : object {
    public static string ManifestFileName;
}
public enum Microsoft.DocAsCode.HtmlToPdf.ManifestItemType : Enum {
    public int value__;
    public static ManifestItemType Toc;
    public static ManifestItemType Content;
    public static ManifestItemType Resource;
}
public static class Microsoft.DocAsCode.HtmlToPdf.ManifestUtility : object {
    public static string GetRelativePath(ManifestItem item, OutputType type);
    public static string GetAssetId(ManifestItem manifestItem);
    public static ManifestItemType GetDocumentType(ManifestItem item);
}
public enum Microsoft.DocAsCode.HtmlToPdf.OutlineOption : Enum {
    public int value__;
    public static OutlineOption NoOutline;
    public static OutlineOption WkDefaultOutline;
    public static OutlineOption DefaultOutline;
}
public enum Microsoft.DocAsCode.HtmlToPdf.OutputType : Enum {
    public int value__;
    public static OutputType Html;
    public static OutputType TocJson;
    public static OutputType RawPageJson;
    public static OutputType Resource;
}
public class Microsoft.DocAsCode.HtmlToPdf.PartialPdfModel : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfPages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageNumber>k__BackingField;
    public string FilePath { get; public set; }
    public int NumberOfPages { get; public set; }
    public Nullable`1<int> PageNumber { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public int get_NumberOfPages();
    [CompilerGeneratedAttribute]
public void set_NumberOfPages(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageNumber();
    [CompilerGeneratedAttribute]
public void set_PageNumber(Nullable`1<int> value);
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.HtmlToPdf.PdfHelper : object {
    [ExtensionAttribute]
public static string RemoveUrlQueryString(string url);
    [ExtensionAttribute]
public static string RemoveUrlBookmark(string url);
    [ExtensionAttribute]
public static string TrimStartPath(string path);
    public static string NormalizeFileLocalPath(string basePath, string relativePath, bool toLower);
}
public class Microsoft.DocAsCode.HtmlToPdf.PdfInformation : object {
    [CompilerGeneratedAttribute]
private string <DocsetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <TocFiles>k__BackingField;
    [JsonPropertyAttribute("docset_name")]
public string DocsetName { get; public set; }
    [JsonPropertyAttribute("asset_id")]
public string AssetId { get; public set; }
    [JsonPropertyAttribute("version")]
public string Version { get; public set; }
    [JsonPropertyAttribute("toc_files")]
public ICollection`1<string> TocFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DocsetName();
    [CompilerGeneratedAttribute]
public void set_DocsetName(string value);
    [CompilerGeneratedAttribute]
public string get_AssetId();
    [CompilerGeneratedAttribute]
public void set_AssetId(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_TocFiles();
    [CompilerGeneratedAttribute]
public void set_TocFiles(ICollection`1<string> value);
}
public class Microsoft.DocAsCode.HtmlToPdf.PdfOptions : object {
    [CompilerGeneratedAttribute]
private string <SourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PdfDocsetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoadErrorHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeTocs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateAppendices>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedGeneratePdfExternalLink>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepRawFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeDefaultToc>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PdfConvertParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalPdfCommandArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TocTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private OutlineOption <OutlineOption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverPageTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoInputStreamArgs>k__BackingField;
    public string SourceDirectory { get; public set; }
    public string DestDirectory { get; public set; }
    public string PdfDocsetName { get; public set; }
    public string CssFilePath { get; public set; }
    public string LoadErrorHandling { get; public set; }
    public String[] ExcludeTocs { get; public set; }
    public bool GenerateAppendices { get; public set; }
    public string Host { get; public set; }
    public string BasePath { get; public set; }
    public string Locale { get; public set; }
    public bool NeedGeneratePdfExternalLink { get; public set; }
    public bool KeepRawFiles { get; public set; }
    public bool ExcludeDefaultToc { get; public set; }
    public int PdfConvertParallelism { get; public set; }
    public string ExternalLinkFormat { get; }
    public string FilePath { get; public set; }
    public string AdditionalPdfCommandArgs { get; public set; }
    public string TocTitle { get; public set; }
    public OutlineOption OutlineOption { get; public set; }
    public string CoverPageTitle { get; public set; }
    public bool NoInputStreamArgs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceDirectory();
    [CompilerGeneratedAttribute]
public void set_SourceDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_DestDirectory();
    [CompilerGeneratedAttribute]
public void set_DestDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_PdfDocsetName();
    [CompilerGeneratedAttribute]
public void set_PdfDocsetName(string value);
    [CompilerGeneratedAttribute]
public string get_CssFilePath();
    [CompilerGeneratedAttribute]
public void set_CssFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_LoadErrorHandling();
    [CompilerGeneratedAttribute]
public void set_LoadErrorHandling(string value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeTocs();
    [CompilerGeneratedAttribute]
public void set_ExcludeTocs(String[] value);
    [CompilerGeneratedAttribute]
public bool get_GenerateAppendices();
    [CompilerGeneratedAttribute]
public void set_GenerateAppendices(bool value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(string value);
    [CompilerGeneratedAttribute]
public bool get_NeedGeneratePdfExternalLink();
    [CompilerGeneratedAttribute]
public void set_NeedGeneratePdfExternalLink(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepRawFiles();
    [CompilerGeneratedAttribute]
public void set_KeepRawFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeDefaultToc();
    [CompilerGeneratedAttribute]
public void set_ExcludeDefaultToc(bool value);
    [CompilerGeneratedAttribute]
public int get_PdfConvertParallelism();
    [CompilerGeneratedAttribute]
public void set_PdfConvertParallelism(int value);
    public string get_ExternalLinkFormat();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalPdfCommandArgs();
    [CompilerGeneratedAttribute]
public void set_AdditionalPdfCommandArgs(string value);
    [CompilerGeneratedAttribute]
public string get_TocTitle();
    [CompilerGeneratedAttribute]
public void set_TocTitle(string value);
    [CompilerGeneratedAttribute]
public OutlineOption get_OutlineOption();
    [CompilerGeneratedAttribute]
public void set_OutlineOption(OutlineOption value);
    [CompilerGeneratedAttribute]
public string get_CoverPageTitle();
    [CompilerGeneratedAttribute]
public void set_CoverPageTitle(string value);
    private string Normalize(string path);
    [CompilerGeneratedAttribute]
public bool get_NoInputStreamArgs();
    [CompilerGeneratedAttribute]
public void set_NoInputStreamArgs(bool value);
}
internal static class Microsoft.DocAsCode.HtmlToPdf.RetryHelper : object {
    public static void Retry(Action action, TimeSpan[] retryIntervals);
}
public class Microsoft.DocAsCode.HtmlToPdf.SelfCleaningFolder : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    public string FullPath { get; }
    public SelfCleaningFolder(string path);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    public sealed virtual void Dispose();
}
public class Microsoft.DocAsCode.HtmlToPdf.TocModel : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalLink>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TocModel> <Children>k__BackingField;
    [JsonPropertyAttribute("toc_title")]
public string Title { get; public set; }
    [JsonPropertyAttribute("relative_path_in_depot")]
public string HtmlFilePath { get; public set; }
    [JsonPropertyAttribute("external_link")]
public string ExternalLink { get; public set; }
    [JsonPropertyAttribute("children")]
public IList`1<TocModel> Children { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlFilePath();
    [CompilerGeneratedAttribute]
public void set_HtmlFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalLink();
    [CompilerGeneratedAttribute]
public void set_ExternalLink(string value);
    [CompilerGeneratedAttribute]
public IList`1<TocModel> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(IList`1<TocModel> value);
}
public class Microsoft.DocAsCode.HtmlToPdf.Transformer.AbsolutePathInTocPageFileTransformer : object {
    private PdfOptions _pdfOptions;
    public AbsolutePathInTocPageFileTransformer(PdfOptions pdfOptions);
    public sealed virtual void Transform(IEnumerable`1<string> htmlFilePaths);
    [CompilerGeneratedAttribute]
private void <Transform>b__2_0(string htmlFilePath);
}
public class Microsoft.DocAsCode.HtmlToPdf.Transformer.FrameTransformer : object {
    private static String[] DefaultReplaceHosts;
    private String[] _replaceHosts;
    public FrameTransformer(String[] replaceHosts);
    private static FrameTransformer();
    public sealed virtual void Transform(IEnumerable`1<string> htmlFilePaths);
    [CompilerGeneratedAttribute]
private void <Transform>b__3_0(string htmlFilePath);
}
public class Microsoft.DocAsCode.HtmlToPdf.Transformer.HtmlNotInTocTransformer : object {
    private string _basePath;
    private UrlCache _manifestUrlCache;
    private PdfOptions _pdfOptions;
    public HtmlNotInTocTransformer(string basePath, UrlCache manifestUrlCache, PdfOptions pdfOptions);
    public sealed virtual void Transform(IEnumerable`1<string> htmlFilePaths);
}
public interface Microsoft.DocAsCode.HtmlToPdf.Transformer.ITransformer {
    public abstract virtual void Transform(IEnumerable`1<string> htmlFilePaths);
}
public class Microsoft.DocAsCode.HtmlToPdf.Transformer.RemoveQueryStringTransformer : object {
    public sealed virtual void Transform(IEnumerable`1<string> htmlFilePaths);
}
public class Microsoft.DocAsCode.HtmlToPdf.UrlCache : object {
    private Dictionary`2<string, ManifestItem> _cache;
    public UrlCache(string basePath, ManifestItem[] manifestItemWithAssetIds);
    public UrlCache(string basePath, IEnumerable`1<string> items);
    public ManifestItem Query(string url);
    public bool Contains(string url);
}
