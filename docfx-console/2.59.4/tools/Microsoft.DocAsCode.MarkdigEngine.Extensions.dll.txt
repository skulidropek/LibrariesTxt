public class Microsoft.DocAsCode.MarkdigEngine.Extensions.ActiveAndVisibleRewriter : object {
    private MarkdownContext _context;
    private List`1<String[]> tabSelectionInfo;
    public ActiveAndVisibleRewriter(MarkdownContext context);
    public sealed virtual void PostProcess(IMarkdownObject markdownObject);
    public sealed virtual void PreProcess(IMarkdownObject markdownObject);
    public sealed virtual IMarkdownObject Rewrite(IMarkdownObject markdownObject);
    private int ApplyTabVisible(List`1<String[]> tabSelectionInfo, List`1<TabItemBlock> items);
    private IEnumerable`1<Tuple`2<string, int>> GetTabIdAndCountList(List`1<TabItemBlock> items);
    private int GetTabActive(TabGroupBlock block, List`1<String[]> tabSelectionInfo, List`1<TabItemBlock> items, int firstVisibleTab, List`1<Tuple`2<string, int>> idAndCountList);
    private int FindActiveIndex(List`1<TabItemBlock> items, String[] info);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.BlockAggregateContext : object {
    private ContainerBlock _blocks;
    private int _currentBlockIndex;
    public Block CurrentBlock { get; }
    public BlockAggregateContext(ContainerBlock blocks);
    public Block get_CurrentBlock();
    public void AggregateTo(Block block, int blockCount);
    public Block LookAhead(int offset);
    internal bool NextBlock();
    private void RemoveRange(int index, int count);
}
public abstract class Microsoft.DocAsCode.MarkdigEngine.Extensions.BlockAggregator`1 : object {
    public sealed virtual bool Aggregate(BlockAggregateContext context);
    protected abstract virtual bool AggregateCore(TBlock block, BlockAggregateContext context);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.ChromelessFormExtension : object {
    public string Name { get; }
    public bool SelfClosing { get; }
    public sealed virtual string get_Name();
    public sealed virtual bool get_SelfClosing();
    public sealed virtual bool TryProcessAttributes(IDictionary`2<string, string> attributes, HtmlAttributes& htmlAttributes, IDictionary`2& renderProperties, Action`1<string> logError, Action`1<string> logWarning, MarkdownObject markdownObject);
    public sealed virtual bool Render(HtmlRenderer renderer, MarkdownObject markdownObject, Action`1<string> logWarning);
    public sealed virtual bool TryValidateAncestry(ContainerBlock container, Action`1<string> logError);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.CodeExtension : object {
    private MarkdownContext _context;
    public string Name { get; }
    public bool SelfClosing { get; }
    public bool EndingTripleColons { get; }
    public CodeExtension(MarkdownContext context);
    public sealed virtual string get_Name();
    public sealed virtual bool get_SelfClosing();
    public bool get_EndingTripleColons();
    public sealed virtual bool Render(HtmlRenderer renderer, MarkdownObject markdownObject, Action`1<string> logWarning);
    public sealed virtual bool TryProcessAttributes(IDictionary`2<string, string> attributes, HtmlAttributes& htmlAttributes, IDictionary`2& renderProperties, Action`1<string> logError, Action`1<string> logWarning, MarkdownObject markdownObject);
    private string InferLanguageFromFile(string source, Action`1<string> logError);
    public sealed virtual bool TryValidateAncestry(ContainerBlock container, Action`1<string> logError);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.CodeRange : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public int Start { get; public set; }
    public int End { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public void set_End(int value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.CodeSnippet : LeafBlock {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeRange <StartEndRange>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeRange <BookMarkRange>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CodeRange> <CodeRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CodeRange> <HighlightRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DedentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInteractive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotebookCode>k__BackingField;
    public string Name { get; public set; }
    public string Language { get; public set; }
    public string CodePath { get; public set; }
    public string TagName { get; public set; }
    public CodeRange StartEndRange { get; public set; }
    public CodeRange BookMarkRange { get; public set; }
    public List`1<CodeRange> CodeRanges { get; public set; }
    public List`1<CodeRange> HighlightRanges { get; public set; }
    public Nullable`1<int> DedentLength { get; public set; }
    public string Title { get; public set; }
    public string Raw { get; public set; }
    public string GitUrl { get; public set; }
    public bool IsInteractive { get; public set; }
    public bool IsNotebookCode { get; public set; }
    public CodeSnippet(BlockParser parser);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_CodePath();
    [CompilerGeneratedAttribute]
public void set_CodePath(string value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    [CompilerGeneratedAttribute]
public CodeRange get_StartEndRange();
    [CompilerGeneratedAttribute]
public void set_StartEndRange(CodeRange value);
    [CompilerGeneratedAttribute]
public CodeRange get_BookMarkRange();
    [CompilerGeneratedAttribute]
public void set_BookMarkRange(CodeRange value);
    [CompilerGeneratedAttribute]
public List`1<CodeRange> get_CodeRanges();
    [CompilerGeneratedAttribute]
public void set_CodeRanges(List`1<CodeRange> value);
    [CompilerGeneratedAttribute]
public List`1<CodeRange> get_HighlightRanges();
    [CompilerGeneratedAttribute]
public void set_HighlightRanges(List`1<CodeRange> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DedentLength();
    [CompilerGeneratedAttribute]
public void set_DedentLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(string value);
    [CompilerGeneratedAttribute]
public string get_GitUrl();
    [CompilerGeneratedAttribute]
public void set_GitUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_IsInteractive();
    [CompilerGeneratedAttribute]
public void set_IsInteractive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNotebookCode();
    [CompilerGeneratedAttribute]
public void set_IsNotebookCode(bool value);
    public void SetAttributeString();
    public string ToAttributeString();
    public string GetHighlightLinesString();
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.CodeSnippetExtension : object {
    private MarkdownContext _context;
    public CodeSnippetExtension(MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.CodeSnippetExtractor : object {
    private static Regex TagnameFormat;
    private string StartLineTemplate;
    private string EndLineTemplate;
    private bool IsEndLineContainsTagName;
    public static string TagNamePlaceHolder;
    public CodeSnippetExtractor(string startLineTemplate, string endLineTemplate, bool isEndLineContainsTagName);
    private static CodeSnippetExtractor();
    public Dictionary`2<string, CodeRange> GetAllTags(String[] lines, HashSet`1& tagLines);
    private bool MatchTag(string line, string template, String& tagName, bool containTagname);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.CodeSnippetInteractiveRewriter : InteractiveBaseRewriter {
    public virtual IMarkdownObject Rewrite(IMarkdownObject markdownObject);
    private string GetGitUrl(CodeSnippet obj);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.CodeSnippetParser : BlockParser {
    private static string StartString;
    private static string NotebookStartString;
    public virtual BlockState TryOpen(BlockProcessor processor);
    private bool MatchStart(StringSlice& slice);
    private bool MatchLanguage(BlockProcessor processor, StringSlice& slice, CodeSnippet& codeSnippet);
    private bool MatchPath(BlockProcessor processor, StringSlice& slice, CodeSnippet& codeSnippet);
    private bool MatchName(BlockProcessor processor, StringSlice& slice, CodeSnippet& codeSnippet);
    private bool MatchQuery(BlockProcessor processor, StringSlice& slice, CodeSnippet& codeSnippet);
    private bool MatchQuestionMarkQuery(BlockProcessor processor, StringSlice& slice, CodeSnippet& codeSnippet);
    private bool MatchBookMarkQuery(BlockProcessor processor, StringSlice& slice, CodeSnippet& codeSnippet);
    private bool MatchTitle(BlockProcessor processor, StringSlice& slice, CodeSnippet& codeSnippet);
    private bool TryParseQuery(string queryString, CodeSnippet& codeSnippet);
}
public static class Microsoft.DocAsCode.MarkdigEngine.Extensions.Constants : object {
    public static string FencedCodePrefix;
    private static Constants();
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.MarkdigEngine.Extensions.ExtensionsHelper : object {
    public static Regex HtmlEscapeWithEncode;
    public static Regex HtmlEscapeWithoutEncode;
    public static Regex HtmlUnescape;
    private static ExtensionsHelper();
    public static char SkipSpaces(StringSlice& slice);
    public static string Escape(string html, bool encode);
    public static string Unescape(string html);
    [ExtensionAttribute]
public static string ReplaceRegex(string input, Regex pattern, string replacement);
    public static string NormalizePath(string path);
    public static bool MatchStart(StringSlice& slice, string startString, bool isCaseSensitive);
    public static void ResetLineIndent(BlockProcessor processor);
    public static bool MatchStart(BlockProcessor processor, string startString, bool isCaseSensitive);
    public static bool MatchLink(StringSlice& slice, String& title, String& path);
    public static bool MatchInclusionEnd(StringSlice& slice);
    public static void SkipWhitespace(StringSlice& slice);
    public static string TryGetStringBeforeChars(IEnumerable`1<char> chars, StringSlice& slice, bool breakOnWhitespace);
    private static string GetAbsolutePathWithTildeCore(string basePath, string tildePath);
    private static bool CharEqual(char ch1, char ch2, bool isCaseSensitive);
    private static bool MatchTitle(StringSlice& slice, String& title);
    public static bool IsEscaped(StringSlice slice);
    private static bool MatchPath(StringSlice& slice, String& path);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.FencedCodeInteractiveRewriter : InteractiveBaseRewriter {
    public virtual IMarkdownObject Rewrite(IMarkdownObject markdownObject);
    private void UpdateFencedCodeLanguage(HtmlAttributes attributes, string originalLanguage, string updatedLanguage);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.HeadingIdExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.HeadingIdRewriter : object {
    private static Regex OpenARegex;
    private static Regex CloseARegex;
    private static HeadingIdRewriter();
    public sealed virtual void PostProcess(IMarkdownObject markdownObject);
    public sealed virtual void PreProcess(IMarkdownObject markdownObject);
    public sealed virtual IMarkdownObject Rewrite(IMarkdownObject markdownObject);
    private static HeadingBlock RemoveHtmlTag(HeadingBlock block);
    private static string ParseHeading(HeadingBlock headBlock);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.HtmlCodeSnippetRenderer : HtmlObjectRenderer`1<CodeSnippet> {
    private static string TagPrefix;
    private static string WarningMessageId;
    private static string DefaultWarningMessage;
    private static string WarningTitleId;
    private static string DefaultWarningTitle;
    private static string CFamilyCodeSnippetCommentStartLineTemplate;
    private static string CFamilyCodeSnippetCommentEndLineTemplate;
    private static string CSharpCodeSnippetRegionStartLineTemplate;
    private static string CSharpCodeSnippetRegionEndLineTemplate;
    private static string BasicFamilyCodeSnippetCommentStartLineTemplate;
    private static string BasicFamilyCodeSnippetCommentEndLineTemplate;
    private static string VBCodeSnippetRegionRegionStartLineTemplate;
    private static string VBCodeSnippetRegionRegionEndLineTemplate;
    private static string MarkupLanguageFamilyCodeSnippetCommentStartLineTemplate;
    private static string MarkupLanguageFamilyCodeSnippetCommentEndLineTemplate;
    private static string SqlFamilyCodeSnippetCommentStartLineTemplate;
    private static string SqlFamilyCodeSnippetCommentEndLineTemplate;
    private static string ScriptFamilyCodeSnippetCommentStartLineTemplate;
    private static string ScriptFamilyCodeSnippetCommentEndLineTemplate;
    private static string BatchFileCodeSnippetRegionStartLineTemplate;
    private static string BatchFileCodeSnippetRegionEndLineTemplate;
    private static string ErlangCodeSnippetRegionStartLineTemplate;
    private static string ErlangCodeSnippetRegionEndLineTemplate;
    private static string LispCodeSnippetRegionStartLineTemplate;
    private static string LispCodeSnippetRegionEndLineTemplate;
    private static string CSSCodeSnippetRegionStartLineTemplate;
    private static string CSSCodeSnippetRegionEndLineTemplate;
    private static IReadOnlyDictionary`2<string, String[]> s_languageAlias;
    private static Dictionary`2<string, string> s_languageByFileExtension;
    private static HashSet`1<CodeSnippetExtractor> s_defaultExtractors;
    private static Dictionary`2<string, HashSet`1<CodeSnippetExtractor>> s_languageExtractors;
    private MarkdownContext _context;
    private static HtmlCodeSnippetRenderer();
    public HtmlCodeSnippetRenderer(MarkdownContext context);
    public static string GetLanguageByFileExtension(string extension);
    protected virtual void Write(HtmlRenderer renderer, CodeSnippet codeSnippet);
    private string GetNoteBookContent(string content, string tagName, CodeSnippet obj);
    public string GetContent(string content, CodeSnippet obj);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.MarkdigEngine.Extensions.HtmlCodeSnippetRenderer/<ReadAllLines>d__38")]
private static IEnumerable`1<string> ReadAllLines(string content);
    private string GetCodeLines(String[] allLines, CodeSnippet obj, List`1<CodeRange> codeRanges, HashSet`1<int> ignoreLines);
    private string DedentString(string source, int dedent);
    private bool IsBlankLine(string line);
    private string CountAndReplaceIndentSpaces(string line, Int32& count);
    private bool IsLineInRange(int lineNumber, List`1<CodeRange> allCodeRanges);
    private int GetTagLineNumber(String[] lines, string tagLine);
    private string GetWarning();
    public static bool TryGetLineRanges(string query, List`1& codeRanges);
    public static bool TryGetLineRange(string query, CodeRange& codeRange, bool withL);
    public static bool TryGetLineNumber(string lineNumberString, Int32& lineNumber, bool withL);
    [CompilerGeneratedAttribute]
internal static void <.cctor>g__BuildFileExtensionLanguageMap|32_0();
    [CompilerGeneratedAttribute]
internal static void <.cctor>g__AddExtractorItems|32_1(String[] languages, CodeSnippetExtractor extractor);
    [CompilerGeneratedAttribute]
internal static void <.cctor>g__AddExtractorItem|32_2(string language, CodeSnippetExtractor extractor);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.HtmlInclusionBlockRenderer : HtmlObjectRenderer`1<InclusionBlock> {
    private MarkdownContext _context;
    private MarkdownPipeline _pipeline;
    public HtmlInclusionBlockRenderer(MarkdownContext context, MarkdownPipeline pipeline);
    protected virtual void Write(HtmlRenderer renderer, InclusionBlock inclusion);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.HtmlInclusionInlineRenderer : HtmlObjectRenderer`1<InclusionInline> {
    private MarkdownContext _context;
    private MarkdownPipeline _inlinePipeline;
    public HtmlInclusionInlineRenderer(MarkdownContext context, MarkdownPipeline inlinePipeline);
    protected virtual void Write(HtmlRenderer renderer, InclusionInline inclusion);
}
internal class Microsoft.DocAsCode.MarkdigEngine.Extensions.HtmlTabContentBlockRenderer : HtmlObjectRenderer`1<TabContentBlock> {
    protected virtual void Write(HtmlRenderer renderer, TabContentBlock block);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.HtmlTabGroupBlockRenderer : HtmlObjectRenderer`1<TabGroupBlock> {
    protected virtual void Write(HtmlRenderer renderer, TabGroupBlock block);
    private void WriteTabHeaders(HtmlRenderer renderer, TabGroupBlock block, string groupId);
    private void WriteTabSections(HtmlRenderer renderer, TabGroupBlock block, string groupId);
    private void AppendGroupId(HtmlRenderer renderer, string groupId, TabItemBlock item);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.HtmlTabTitleBlockRenderer : HtmlObjectRenderer`1<TabTitleBlock> {
    protected virtual void Write(HtmlRenderer renderer, TabTitleBlock block);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.HtmlXrefInlineRender : HtmlObjectRenderer`1<XrefInline> {
    protected virtual void Write(HtmlRenderer renderer, XrefInline obj);
}
public interface Microsoft.DocAsCode.MarkdigEngine.Extensions.IBlockAggregator {
    public abstract virtual bool Aggregate(BlockAggregateContext context);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.ImageExtension : object {
    private MarkdownContext _context;
    public string Name { get; }
    public bool SelfClosing { get; }
    public ImageExtension(MarkdownContext context);
    public sealed virtual string get_Name();
    public sealed virtual bool get_SelfClosing();
    public sealed virtual bool TryProcessAttributes(IDictionary`2<string, string> attributes, HtmlAttributes& htmlAttributes, IDictionary`2& renderProperties, Action`1<string> logError, Action`1<string> logWarning, MarkdownObject markdownObject);
    public sealed virtual bool Render(HtmlRenderer renderer, MarkdownObject obj, Action`1<string> logWarning);
    public sealed virtual bool TryValidateAncestry(ContainerBlock container, Action`1<string> logError);
    public static string GetHtmlId(MarkdownObject obj);
    public static bool RequiresClosingTripleColon(IDictionary`2<string, string> attributes);
}
public interface Microsoft.DocAsCode.MarkdigEngine.Extensions.IMarkdownObjectRewriter {
    public abstract virtual void PreProcess(IMarkdownObject markdownObject);
    public abstract virtual IMarkdownObject Rewrite(IMarkdownObject markdownObject);
    public abstract virtual void PostProcess(IMarkdownObject markdownObject);
}
public interface Microsoft.DocAsCode.MarkdigEngine.Extensions.IMarkdownObjectRewriterProvider {
    public abstract virtual ImmutableArray`1<IMarkdownObjectRewriter> GetRewriters();
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.InclusionBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludedFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResolvedFilePath>k__BackingField;
    public string Title { get; public set; }
    public string IncludedFilePath { get; public set; }
    public object ResolvedFilePath { get; public set; }
    public InclusionBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_IncludedFilePath();
    [CompilerGeneratedAttribute]
public void set_IncludedFilePath(string value);
    [CompilerGeneratedAttribute]
public object get_ResolvedFilePath();
    [CompilerGeneratedAttribute]
public void set_ResolvedFilePath(object value);
    public string GetRawToken();
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.InclusionBlockParser : BlockParser {
    private static string StartString;
    public virtual BlockState TryOpen(BlockProcessor processor);
}
public static class Microsoft.DocAsCode.MarkdigEngine.Extensions.InclusionContext : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadLocal`1<Stack`1<ValueTuple`3<object, HashSet`1<object>, Stack`1<object>>>> t_markupStacks;
    public static object File { get; }
    public static object RootFile { get; }
    public static bool IsInclude { get; }
    public static IEnumerable`1<object> Dependencies { get; }
    private static InclusionContext();
    public static object get_File();
    public static object get_RootFile();
    public static bool get_IsInclude();
    public static IEnumerable`1<object> get_Dependencies();
    public static IDisposable PushFile(object file);
    public static IDisposable PushInclusion(object file);
    public static void PushDependency(object file);
    public static bool IsCircularReference(object file, IEnumerable`1& dependencyChain);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.InclusionExtension : object {
    private MarkdownContext _context;
    private MarkdownPipeline _inlinePipeline;
    public InclusionExtension(MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private static MarkdownPipeline CreateInlineOnlyPipeline(MarkdownPipeline pipeline);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.InclusionInline : ContainerInline {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludedFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResolvedFilePath>k__BackingField;
    public string Title { get; public set; }
    public string IncludedFilePath { get; public set; }
    public object ResolvedFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_IncludedFilePath();
    [CompilerGeneratedAttribute]
public void set_IncludedFilePath(string value);
    [CompilerGeneratedAttribute]
public object get_ResolvedFilePath();
    [CompilerGeneratedAttribute]
public void set_ResolvedFilePath(object value);
    public string GetRawToken();
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.InclusionInlineParser : InlineParser {
    private static string StartString;
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.InlineOnlyExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public abstract class Microsoft.DocAsCode.MarkdigEngine.Extensions.InteractiveBaseRewriter : object {
    protected static string InteractivePostfix;
    public sealed virtual void PostProcess(IMarkdownObject markdownObject);
    public sealed virtual void PreProcess(IMarkdownObject markdownObject);
    public abstract virtual IMarkdownObject Rewrite(IMarkdownObject markdownObject);
    protected static string GetLanguage(string language, Boolean& isInteractive);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.InteractiveCodeExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
internal interface Microsoft.DocAsCode.MarkdigEngine.Extensions.ITripleColon {
    public IDictionary`2<string, string> RenderProperties { get; public set; }
    public ITripleColonExtensionInfo Extension { get; public set; }
    public bool Closed { get; public set; }
    public bool EndingTripleColons { get; public set; }
    public IDictionary`2<string, string> Attributes { get; public set; }
    public int Count { get; }
    public abstract virtual IDictionary`2<string, string> get_RenderProperties();
    public abstract virtual void set_RenderProperties(IDictionary`2<string, string> value);
    public abstract virtual ITripleColonExtensionInfo get_Extension();
    public abstract virtual void set_Extension(ITripleColonExtensionInfo value);
    public abstract virtual bool get_Closed();
    public abstract virtual void set_Closed(bool value);
    public abstract virtual bool get_EndingTripleColons();
    public abstract virtual void set_EndingTripleColons(bool value);
    public abstract virtual IDictionary`2<string, string> get_Attributes();
    public abstract virtual void set_Attributes(IDictionary`2<string, string> value);
    public abstract virtual int get_Count();
}
public interface Microsoft.DocAsCode.MarkdigEngine.Extensions.ITripleColonExtensionInfo {
    public string Name { get; }
    public bool SelfClosing { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_SelfClosing();
    public abstract virtual bool TryProcessAttributes(IDictionary`2<string, string> attributes, HtmlAttributes& htmlAttributes, IDictionary`2& renderProperties, Action`1<string> logError, Action`1<string> logWarning, MarkdownObject markdownObject);
    public abstract virtual bool TryValidateAncestry(ContainerBlock container, Action`1<string> logError);
    public abstract virtual bool Render(HtmlRenderer renderer, MarkdownObject markdownObject, Action`1<string> logWarning);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.LineNumberExtension : object {
    private Func`2<object, string> _getFilePath;
    public LineNumberExtension(Func`2<object, string> getFilePath);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private static void AddSourceInfoInDataEntry(MarkdownObject markdownObject, string filePath);
    [CompilerGeneratedAttribute]
private void <Setup>b__2_0(MarkdownDocument document);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.MarkdownContext : object {
    [CompilerGeneratedAttribute]
private ReadFileDelegate <ReadFile>k__BackingField;
    [CompilerGeneratedAttribute]
private GetLinkDelegate <GetLink>k__BackingField;
    [CompilerGeneratedAttribute]
private GetImageLinkDelegate <GetImageLink>k__BackingField;
    [CompilerGeneratedAttribute]
private LogActionDelegate <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private LogActionDelegate <LogSuggestion>k__BackingField;
    [CompilerGeneratedAttribute]
private LogActionDelegate <LogWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private LogActionDelegate <LogError>k__BackingField;
    private Func`2<string, string> _getToken;
    public ReadFileDelegate ReadFile { get; }
    public GetLinkDelegate GetLink { get; }
    public GetImageLinkDelegate GetImageLink { get; }
    public LogActionDelegate LogInfo { get; }
    public LogActionDelegate LogSuggestion { get; }
    public LogActionDelegate LogWarning { get; }
    public LogActionDelegate LogError { get; }
    public MarkdownContext(Func`2<string, string> getToken, LogActionDelegate logInfo, LogActionDelegate logSuggestion, LogActionDelegate logWarning, LogActionDelegate logError, ReadFileDelegate readFile, GetLinkDelegate getLink, GetImageLinkDelegate getImageLink);
    [CompilerGeneratedAttribute]
public ReadFileDelegate get_ReadFile();
    [CompilerGeneratedAttribute]
public GetLinkDelegate get_GetLink();
    [CompilerGeneratedAttribute]
public GetImageLinkDelegate get_GetImageLink();
    [CompilerGeneratedAttribute]
public LogActionDelegate get_LogInfo();
    [CompilerGeneratedAttribute]
public LogActionDelegate get_LogSuggestion();
    [CompilerGeneratedAttribute]
public LogActionDelegate get_LogWarning();
    [CompilerGeneratedAttribute]
public LogActionDelegate get_LogError();
    public string GetToken(string key);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.MarkdownDocumentAggregatorVisitor : object {
    private IBlockAggregator _aggregator;
    public MarkdownDocumentAggregatorVisitor(IBlockAggregator aggregator);
    public void Visit(MarkdownDocument document);
    private void VisitContainerBlock(ContainerBlock blocks);
    private void Aggregate(BlockAggregateContext context);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.MarkdownDocumentVisitor : object {
    private IMarkdownObjectRewriter _rewriter;
    public MarkdownDocumentVisitor(IMarkdownObjectRewriter rewriter);
    public void Visit(MarkdownDocument document);
    private void RewriteContainerBlock(ContainerBlock blocks);
    private void RewriteContainerInline(ContainerInline inlines);
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.MarkdigEngine.Extensions.MarkdownExtensions : object {
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseDocfxExtensions(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseOptionalExtensions(MarkdownPipelineBuilder pipeline, IEnumerable`1<string> optionalExtensions);
    [ExtensionAttribute]
private static MarkdownPipelineBuilder RemoveUnusedExtensions(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseInlineOnly(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseTabGroup(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseHeadingIdRewriter(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseDFMCodeInfoPrefix(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseQuoteSectionNote(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseLineNumber(MarkdownPipelineBuilder pipeline, Func`2<object, string> getFilePath);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseResolveLink(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseIncludeFile(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseCodeSnippet(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseInteractiveCode(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseXref(MarkdownPipelineBuilder pipeline);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseMonikerRange(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseRow(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseNestedColumn(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseTripleColon(MarkdownPipelineBuilder pipeline, MarkdownContext context);
    [ExtensionAttribute]
public static MarkdownPipelineBuilder UseNoloc(MarkdownPipelineBuilder pipeline);
}
public static class Microsoft.DocAsCode.MarkdigEngine.Extensions.MarkdownObjectRewriterFactory : object {
    public static IMarkdownObjectRewriter FromValidators(IEnumerable`1<IMarkdownObjectValidator> validators, Action`1<IMarkdownObject> preProcess, Action`1<IMarkdownObject> postProcess);
    public static IMarkdownObjectRewriter FromValidator(IMarkdownObjectValidator validator, Action`1<IMarkdownObject> preProcess, Action`1<IMarkdownObject> postProcess);
}
internal class Microsoft.DocAsCode.MarkdigEngine.Extensions.MarkdownObjectValidatorAdapter : object {
    private Action`1<IMarkdownObject> _preProcess;
    private Action`1<IMarkdownObject> _postProcess;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<IMarkdownObjectValidator> <Validators>k__BackingField;
    public ImmutableArray`1<IMarkdownObjectValidator> Validators { get; }
    public MarkdownObjectValidatorAdapter(IEnumerable`1<IMarkdownObjectValidator> validators, Action`1<IMarkdownObject> preProcess, Action`1<IMarkdownObject> postProcess);
    public MarkdownObjectValidatorAdapter(IMarkdownObjectValidator validator, Action`1<IMarkdownObject> preProcess, Action`1<IMarkdownObject> postProcess);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<IMarkdownObjectValidator> get_Validators();
    public sealed virtual IMarkdownObject Rewrite(IMarkdownObject markdownObject);
    public sealed virtual void PreProcess(IMarkdownObject markdownObject);
    public sealed virtual void PostProcess(IMarkdownObject markdownObject);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.MonikerRangeBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private string <MonikerRange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColonCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Closed>k__BackingField;
    public string MonikerRange { get; public set; }
    public int ColonCount { get; public set; }
    public bool Closed { get; public set; }
    public MonikerRangeBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public string get_MonikerRange();
    [CompilerGeneratedAttribute]
public void set_MonikerRange(string value);
    [CompilerGeneratedAttribute]
public int get_ColonCount();
    [CompilerGeneratedAttribute]
public void set_ColonCount(int value);
    [CompilerGeneratedAttribute]
public bool get_Closed();
    [CompilerGeneratedAttribute]
public void set_Closed(bool value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.MonikerRangeExtension : object {
    private MarkdownContext _context;
    public MonikerRangeExtension(MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.MonikerRangeParser : BlockParser {
    private static string StartString;
    private static string EndString;
    private static char Colon;
    private MarkdownContext _context;
    public MonikerRangeParser(MarkdownContext context);
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    public virtual bool Close(BlockProcessor processor, Block block);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.MonikerRangeRender : HtmlObjectRenderer`1<MonikerRangeBlock> {
    protected virtual void Write(HtmlRenderer renderer, MonikerRangeBlock obj);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.NestedColumnBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private int <ColonCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnWidth>k__BackingField;
    public int ColonCount { get; public set; }
    public string ColumnWidth { get; public set; }
    public NestedColumnBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public int get_ColonCount();
    [CompilerGeneratedAttribute]
public void set_ColonCount(int value);
    [CompilerGeneratedAttribute]
public string get_ColumnWidth();
    [CompilerGeneratedAttribute]
public void set_ColumnWidth(string value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.NestedColumnExtension : object {
    private MarkdownContext _context;
    public NestedColumnExtension(MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.NestedColumnParser : BlockParser {
    private static string StartString;
    private static string EndString;
    private static char Colon;
    private MarkdownContext _context;
    public NestedColumnParser(MarkdownContext context);
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.NestedColumnRender : HtmlObjectRenderer`1<NestedColumnBlock> {
    protected virtual void Write(HtmlRenderer renderer, NestedColumnBlock obj);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.NolocExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.NolocInline : LeafInline {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.NolocParser : InlineParser {
    private static string StartString;
    private static string EndString;
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.NolocRender : HtmlObjectRenderer`1<NolocInline> {
    protected virtual void Write(HtmlRenderer renderer, NolocInline obj);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.QuoteSectionNoteBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private char <QuoteChar>k__BackingField;
    [CompilerGeneratedAttribute]
private QuoteSectionNoteType <QuoteType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionAttributeString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoteTypeString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VideoLink>k__BackingField;
    public char QuoteChar { get; public set; }
    public QuoteSectionNoteType QuoteType { get; public set; }
    public string SectionAttributeString { get; public set; }
    public string NoteTypeString { get; public set; }
    public string VideoLink { get; public set; }
    public QuoteSectionNoteBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public char get_QuoteChar();
    [CompilerGeneratedAttribute]
public void set_QuoteChar(char value);
    [CompilerGeneratedAttribute]
public QuoteSectionNoteType get_QuoteType();
    [CompilerGeneratedAttribute]
public void set_QuoteType(QuoteSectionNoteType value);
    [CompilerGeneratedAttribute]
public string get_SectionAttributeString();
    [CompilerGeneratedAttribute]
public void set_SectionAttributeString(string value);
    [CompilerGeneratedAttribute]
public string get_NoteTypeString();
    [CompilerGeneratedAttribute]
public void set_NoteTypeString(string value);
    [CompilerGeneratedAttribute]
public string get_VideoLink();
    [CompilerGeneratedAttribute]
public void set_VideoLink(string value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.QuoteSectionNoteExtension : object {
    private MarkdownContext _context;
    public QuoteSectionNoteExtension(MarkdownContext context);
    private sealed virtual override void Markdig.IMarkdownExtension.Setup(MarkdownPipelineBuilder pipeline);
    private sealed virtual override void Markdig.IMarkdownExtension.Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.QuoteSectionNoteParser : BlockParser {
    private List`1<string> _noteTypes;
    private MarkdownContext _context;
    public QuoteSectionNoteParser(MarkdownContext context);
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    private bool TryParseFromLine(BlockProcessor processor, QuoteSectionNoteBlock block);
    private bool IsRestLineEmpty(BlockProcessor processor, int movedCharCount);
    private bool IsNoteType(string infoString);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.QuoteSectionNoteRender : HtmlObjectRenderer`1<QuoteSectionNoteBlock> {
    private MarkdownContext _context;
    public QuoteSectionNoteRender(MarkdownContext context);
    protected virtual void Write(HtmlRenderer renderer, QuoteSectionNoteBlock obj);
    private void WriteNote(HtmlRenderer renderer, QuoteSectionNoteBlock obj);
    private void WriteSection(HtmlRenderer renderer, QuoteSectionNoteBlock obj);
    private void WriteQuote(HtmlRenderer renderer, QuoteSectionNoteBlock obj);
    private void WriteVideo(HtmlRenderer renderer, QuoteSectionNoteBlock obj);
    public static string FixUpLink(string link);
}
public enum Microsoft.DocAsCode.MarkdigEngine.Extensions.QuoteSectionNoteType : Enum {
    public int value__;
    public static QuoteSectionNoteType MarkdownQuote;
    public static QuoteSectionNoteType DFMSection;
    public static QuoteSectionNoteType DFMNote;
    public static QuoteSectionNoteType DFMVideo;
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.ResolveLinkExtension : object {
    private MarkdownContext _context;
    public ResolveLinkExtension(MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    private void UpdateLinks(MarkdownObject markdownObject);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.RowBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private int <ColonCount>k__BackingField;
    public int ColonCount { get; public set; }
    public RowBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public int get_ColonCount();
    [CompilerGeneratedAttribute]
public void set_ColonCount(int value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.RowExtension : object {
    private MarkdownContext _context;
    public RowExtension(MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.RowParser : BlockParser {
    private static string StartString;
    private static string EndString;
    private static char Colon;
    private MarkdownContext _context;
    public RowParser(MarkdownContext context);
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.RowRender : HtmlObjectRenderer`1<RowBlock> {
    protected virtual void Write(HtmlRenderer renderer, RowBlock obj);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TabContentBlock : ContainerBlock {
    public TabContentBlock(List`1<Block> blocks);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TabGroupAggregator : BlockAggregator`1<HeadingBlock> {
    private static Regex HrefRegex;
    private static TabGroupAggregator();
    protected virtual bool AggregateCore(HeadingBlock headBlock, BlockAggregateContext context);
    private static void AggregateCore(BlockAggregateContext context, List`1<TabItemBlock> items, int startLine, int startSpan, int offset);
    private static string GetHashString(string content);
    private static TabItemBlock CreateTabItem(HeadingBlock headBlock, Tuple`3<string, string, LinkInline> pair, List`1<Block> blocks, Int32& offset);
    private static Tuple`3<string, string, LinkInline> ParseHeading(HeadingBlock block);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TabGroupBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActiveTabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<TabItemBlock> <Items>k__BackingField;
    public string Id { get; public set; }
    public int ActiveTabIndex { get; public set; }
    public ImmutableArray`1<TabItemBlock> Items { get; public set; }
    public TabGroupBlock(string id, ImmutableArray`1<TabItemBlock> blocks, int startLine, int startSpan, int activeTabIndex);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public int get_ActiveTabIndex();
    [CompilerGeneratedAttribute]
public void set_ActiveTabIndex(int value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<TabItemBlock> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(ImmutableArray`1<TabItemBlock> value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TabGroupExtension : object {
    private MarkdownContext _context;
    public TabGroupExtension(MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    [CompilerGeneratedAttribute]
private void <Setup>b__2_0(MarkdownDocument document);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TabItemBlock : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private TabTitleBlock <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private TabContentBlock <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    public string Id { get; }
    public string Condition { get; }
    public TabTitleBlock Title { get; }
    public TabContentBlock Content { get; }
    public bool Visible { get; public set; }
    public TabItemBlock(string id, string condition, TabTitleBlock title, TabContentBlock content, bool visible);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public TabTitleBlock get_Title();
    [CompilerGeneratedAttribute]
public TabContentBlock get_Content();
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TabTitleBlock : LeafBlock {
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TripleColonBlock : ContainerBlock {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RenderProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ITripleColonExtensionInfo <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndingTripleColons>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    public IDictionary`2<string, string> RenderProperties { get; public set; }
    public ITripleColonExtensionInfo Extension { get; public set; }
    public bool Closed { get; public set; }
    public bool EndingTripleColons { get; public set; }
    public IDictionary`2<string, string> Attributes { get; public set; }
    public TripleColonBlock(BlockParser parser);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_RenderProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RenderProperties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ITripleColonExtensionInfo get_Extension();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extension(ITripleColonExtensionInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Closed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Closed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EndingTripleColons();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndingTripleColons(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Attributes(IDictionary`2<string, string> value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TripleColonBlockParser : BlockParser {
    private static IDictionary`2<string, string> EmptyAttributes;
    private MarkdownContext _context;
    private IDictionary`2<string, ITripleColonExtensionInfo> _extensions;
    public TripleColonBlockParser(MarkdownContext context, IDictionary`2<string, ITripleColonExtensionInfo> extensions);
    private static TripleColonBlockParser();
    public virtual BlockState TryOpen(BlockProcessor processor);
    public virtual BlockState TryContinue(BlockProcessor processor, Block block);
    public virtual bool Close(BlockProcessor processor, Block block);
    public static bool TryMatchIdentifier(StringSlice& slice, String& name);
    public static bool TryMatchAttributeValue(StringSlice& slice, String& value, string attributeName, Action`1<string> logError);
    public static bool TryMatchAttributes(StringSlice& slice, IDictionary`2& attributes, bool selfClosing, Action`1<string> logError);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TripleColonBlockRenderer : HtmlObjectRenderer`1<TripleColonBlock> {
    private MarkdownContext _context;
    public TripleColonBlockRenderer(MarkdownContext context);
    protected virtual void Write(HtmlRenderer renderer, TripleColonBlock block);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TripleColonExtension : object {
    private MarkdownContext _context;
    private IDictionary`2<string, ITripleColonExtensionInfo> _extensions;
    private IDictionary`2<string, ITripleColonExtensionInfo> _extensionsInline;
    public TripleColonExtension(MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TripleColonInline : ContainerInline {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RenderProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ITripleColonExtensionInfo <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndingTripleColons>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public IDictionary`2<string, string> RenderProperties { get; public set; }
    public ITripleColonExtensionInfo Extension { get; public set; }
    public bool Closed { get; public set; }
    public bool EndingTripleColons { get; public set; }
    public IDictionary`2<string, string> Attributes { get; public set; }
    public int Count { get; }
    public TripleColonInline(InlineParser parser);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_RenderProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RenderProperties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ITripleColonExtensionInfo get_Extension();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extension(ITripleColonExtensionInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Closed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Closed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EndingTripleColons();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndingTripleColons(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Attributes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TripleColonInlineParser : InlineParser {
    private MarkdownContext _context;
    private IDictionary`2<string, ITripleColonExtensionInfo> _extensions;
    public TripleColonInlineParser(MarkdownContext context, IDictionary`2<string, ITripleColonExtensionInfo> extensions);
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.TripleColonInlineRenderer : HtmlObjectRenderer`1<TripleColonInline> {
    private MarkdownContext _context;
    public TripleColonInlineRenderer(MarkdownContext context);
    protected virtual void Write(HtmlRenderer renderer, TripleColonInline inline);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.VideoExtension : object {
    public string Name { get; }
    public bool SelfClosing { get; }
    public sealed virtual string get_Name();
    public sealed virtual bool get_SelfClosing();
    public sealed virtual bool TryProcessAttributes(IDictionary`2<string, string> attributes, HtmlAttributes& htmlAttributes, IDictionary`2& renderProperties, Action`1<string> logError, Action`1<string> logWarning, MarkdownObject markdownObject);
    public sealed virtual bool Render(HtmlRenderer renderer, MarkdownObject markdownObject, Action`1<string> logWarning);
    public sealed virtual bool TryValidateAncestry(ContainerBlock container, Action`1<string> logError);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.XrefInline : LeafInline {
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    public string Href { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.XrefInlineExtension : object {
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.XrefInlineParser : InlineParser {
    private static string StartString;
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
}
internal class Microsoft.DocAsCode.MarkdigEngine.Extensions.XrefInlineShortParser : InlineParser {
    private static string ContinuableCharacters;
    private static string StopCharacters;
    public virtual bool Match(InlineProcessor processor, StringSlice& slice);
    private bool MatchXrefShortcut(InlineProcessor processor, StringSlice& slice);
    private bool MatchXrefShortcutWithQuote(InlineProcessor processor, StringSlice& slice);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.ZoneExtension : object {
    private static Regex pivotRegex;
    private static Regex pivotReplaceCommasRegex;
    public string Name { get; }
    public bool SelfClosing { get; }
    private static ZoneExtension();
    public sealed virtual string get_Name();
    public sealed virtual bool get_SelfClosing();
    public sealed virtual bool Render(HtmlRenderer renderer, MarkdownObject markdownObject, Action`1<string> logWarning);
    public sealed virtual bool TryProcessAttributes(IDictionary`2<string, string> attributes, HtmlAttributes& htmlAttributes, IDictionary`2& renderProperties, Action`1<string> logError, Action`1<string> logWarning, MarkdownObject markdownObject);
    public sealed virtual bool TryValidateAncestry(ContainerBlock container, Action`1<string> logError);
}
public class Microsoft.DocAsCode.MarkdigEngine.TabGroupIdRewriter : object {
    private Dictionary`2<string, int> _dict;
    public sealed virtual void PostProcess(IMarkdownObject markdownObject);
    public sealed virtual void PreProcess(IMarkdownObject markdownObject);
    public sealed virtual IMarkdownObject Rewrite(IMarkdownObject markdownObject);
}
