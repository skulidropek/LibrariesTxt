[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.MarkdownValidatorBuilder : object {
    private List`1<RuleWithId`1<MarkdownValidationRule>> _validators;
    private List`1<RuleWithId`1<MarkdownTagValidationRule>> _tagValidators;
    private Dictionary`2<string, MarkdownValidationRule> _globalValidators;
    private List`1<MarkdownValidationSetting> _settings;
    private List`1<IMarkdownObjectValidatorProvider> _validatorProviders;
    public static string DefaultValidatorName;
    public static string MarkdownValidatePhaseName;
    [CompilerGeneratedAttribute]
private ICompositionContainer <Container>k__BackingField;
    private ICompositionContainer Container { get; }
    public MarkdownValidatorBuilder(ICompositionContainer container);
    [CompilerGeneratedAttribute]
private ICompositionContainer get_Container();
    public static MarkdownValidatorBuilder Create(MarkdownServiceParameters parameters, ICompositionContainer container);
    public IMarkdownObjectRewriter CreateRewriter(MarkdownContext context);
    public void AddValidators(MarkdownValidationRule[] rules);
    public void AddValidators(string category, Dictionary`2<string, MarkdownValidationRule> validators);
    public void AddTagValidators(MarkdownTagValidationRule[] validators);
    internal void AddTagValidators(string category, Dictionary`2<string, MarkdownTagValidationRule> validators);
    internal void AddSettings(MarkdownValidationSetting[] settings);
    private void EnsureDefaultValidator();
    private static void LoadValidatorConfig(string baseDir, string templateDir, MarkdownValidatorBuilder builder);
    private static void LoadValidatorDefinition(string mdStyleDefPath, MarkdownValidatorBuilder builder);
    public void LoadEnabledRulesProvider();
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.MarkdigEngine.Extensions.MarkdownValidatorBuilder/<GetEnabledTagRules>d__22")]
private IEnumerable`1<MarkdownTagValidationRule> GetEnabledTagRules();
    private Nullable`1<bool> IsDisabledBySetting(RuleWithId`1<T> item);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMarkdownObjectValidatorProvider> <LoadEnabledRulesProvider>b__21_0(string name);
}
internal class Microsoft.DocAsCode.MarkdigEngine.Extensions.Tag : object {
    private static Regex OpeningTag;
    private static Regex ClosingTag;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpening>k__BackingField;
    public int Line { get; public set; }
    public string Name { get; public set; }
    public string Content { get; public set; }
    public bool IsOpening { get; public set; }
    private static Tag();
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOpening();
    [CompilerGeneratedAttribute]
public void set_IsOpening(bool value);
    public static IEnumerable`1<Tag> Convert(IMarkdownObject markdownObject);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.MarkdigEngine.Extensions.Tag/<Convert>d__19")]
private static IEnumerable`1<Tag> Convert(HtmlBlock block);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.MarkdigEngine.Extensions.Tag/<Convert>d__20")]
private static IEnumerable`1<Tag> Convert(StringLine line);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.MarkdigEngine.Extensions.Tag/<Convert>d__21")]
private static IEnumerable`1<Tag> Convert(HtmlInline inline);
}
internal class Microsoft.DocAsCode.MarkdigEngine.Extensions.TagValidator : object {
    [CompilerGeneratedAttribute]
private ImmutableList`1<MarkdownTagValidationRule> <Validators>k__BackingField;
    private MarkdownContext _context;
    public ImmutableList`1<MarkdownTagValidationRule> Validators { get; }
    public TagValidator(ImmutableList`1<MarkdownTagValidationRule> validators, MarkdownContext context);
    [CompilerGeneratedAttribute]
public ImmutableList`1<MarkdownTagValidationRule> get_Validators();
    public void Validate(IMarkdownObject markdownObject);
    private void ValidateOne(Tag tag, MarkdownTagValidationRule validator);
    private void ValidateCore(Tag tag, MarkdownTagValidationRule validator);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.ValidationExtension : object {
    private MarkdownValidatorBuilder _mvb;
    private MarkdownContext _context;
    public ValidationExtension(MarkdownValidatorBuilder validationBuilder, MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
    public static void SetSchemaName(MarkdownDocument document);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.YamlHeaderExtension : object {
    private MarkdownContext _context;
    public YamlHeaderExtension(MarkdownContext context);
    public sealed virtual void Setup(MarkdownPipelineBuilder pipeline);
    public sealed virtual void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer);
}
public class Microsoft.DocAsCode.MarkdigEngine.Extensions.YamlHeaderRenderer : HtmlObjectRenderer`1<YamlFrontMatterBlock> {
    private MarkdownContext _context;
    public YamlHeaderRenderer(MarkdownContext context);
    protected virtual void Write(HtmlRenderer renderer, YamlFrontMatterBlock obj);
}
public class Microsoft.DocAsCode.MarkdigEngine.MarkdigMarkdownService : object {
    private MarkdownServiceParameters _parameters;
    private MarkdownValidatorBuilder _mvb;
    private MarkdownContext _context;
    public string Name { get; }
    public MarkdigMarkdownService(MarkdownServiceParameters parameters, ICompositionContainer container);
    public sealed virtual string get_Name();
    public sealed virtual MarkupResult Markup(string content, string filePath);
    public sealed virtual MarkupResult Markup(string content, string filePath, bool enableValidation);
    public MarkdownDocument Parse(string content, string filePath);
    public MarkdownDocument Parse(string content, string filePath, bool isInline);
    public MarkupResult Render(MarkdownDocument document);
    public MarkupResult Render(MarkdownDocument document, bool isInline);
    private MarkdownPipeline CreateMarkdownPipeline(bool isInline, bool enableValidation);
    private ValueTuple`2<string, object> ReadFile(string path, MarkdownObject origin);
    private static string GetLink(string path, MarkdownObject origin);
    private string GetImageLink(string href, MarkdownObject origin, string altText);
    private void ReportDependency(RelativePath filePathToDocset, string parentFileDirectoryToDocset);
    [CompilerGeneratedAttribute]
private string <.ctor>b__5_0(string key);
}
[ExportAttribute("markdig", "Microsoft.DocAsCode.Plugins.IMarkdownServiceProvider")]
public class Microsoft.DocAsCode.MarkdigEngine.MarkdigServiceProvider : object {
    [CompilerGeneratedAttribute]
private ICompositionContainer <Container>k__BackingField;
    [ImportAttribute]
public ICompositionContainer Container { get; public set; }
    [CompilerGeneratedAttribute]
public ICompositionContainer get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(ICompositionContainer value);
    public sealed virtual IMarkdownService CreateMarkdownService(MarkdownServiceParameters parameters);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
