public abstract class Microsoft.DocAsCode.Metadata.ManagedReference.AbstractCompilation : object {
    public abstract virtual IBuildController GetBuildController();
}
public abstract class Microsoft.DocAsCode.Metadata.ManagedReference.AbstractDocument : object {
    public string FilePath { get; }
    public abstract virtual string get_FilePath();
}
public abstract class Microsoft.DocAsCode.Metadata.ManagedReference.AbstractProject : object {
    public string FilePath { get; }
    public bool HasDocuments { get; }
    public IEnumerable`1<AbstractDocument> Documents { get; }
    public IEnumerable`1<string> PortableExecutableMetadataReferences { get; }
    public IEnumerable`1<AbstractProject> ProjectReferences { get; }
    public abstract virtual string get_FilePath();
    public abstract virtual bool get_HasDocuments();
    public abstract virtual IEnumerable`1<AbstractDocument> get_Documents();
    public abstract virtual IEnumerable`1<string> get_PortableExecutableMetadataReferences();
    public abstract virtual IEnumerable`1<AbstractProject> get_ProjectReferences();
    public abstract virtual Task`1<AbstractCompilation> GetCompilationAsync();
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.AbstractProjectLoader : object {
    private IEnumerable`1<IProjectLoader> _loaders;
    public AbstractProjectLoader(IEnumerable`1<IProjectLoader> loaders);
    public AbstractProject Load(string path);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ApplicationLevelCache : CacheBase {
    private static Func`3<string, string, string> GetApplicationLevelCacheFilePath;
    private static ConcurrentDictionary`2<string, ApplicationLevelCache> _cache;
    private ApplicationLevelCache(string projectPath);
    private static ApplicationLevelCache();
    public static ApplicationLevelCache Get(IEnumerable`1<string> files);
    private static string GetApplicationLevelCache(IEnumerable`1<string> files);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.AssemblyFileInputParameters : object {
    [CompilerGeneratedAttribute]
private ExtractMetadataOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectLevelCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildInfo <BuildInfo>k__BackingField;
    public ExtractMetadataOptions Options { get; }
    public IEnumerable`1<string> Files { get; public set; }
    public string Key { get; }
    public ProjectLevelCache Cache { get; }
    public BuildInfo BuildInfo { get; }
    public AssemblyFileInputParameters(ExtractMetadataOptions options, string key);
    [CompilerGeneratedAttribute]
public sealed virtual ExtractMetadataOptions get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual ProjectLevelCache get_Cache();
    [CompilerGeneratedAttribute]
public sealed virtual BuildInfo get_BuildInfo();
    public sealed virtual bool HasChanged(BuildInfo buildInfo);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.AttributeFilterData : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ConstructorArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ConstructorNamedArguments>k__BackingField;
    public string Id { get; public set; }
    public IEnumerable`1<string> ConstructorArguments { get; public set; }
    public IDictionary`2<string, string> ConstructorNamedArguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ConstructorArguments();
    [CompilerGeneratedAttribute]
public void set_ConstructorArguments(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ConstructorNamedArguments();
    [CompilerGeneratedAttribute]
public void set_ConstructorNamedArguments(IDictionary`2<string, string> value);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.AttributeFilterInfo : object {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ConstructorArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ConstructorNamedArguments>k__BackingField;
    [YamlMemberAttribute]
public string Uid { get; public set; }
    [YamlMemberAttribute]
public List`1<string> ConstructorArguments { get; public set; }
    [YamlMemberAttribute]
public Dictionary`2<string, string> ConstructorNamedArguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ConstructorArguments();
    [CompilerGeneratedAttribute]
public void set_ConstructorArguments(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ConstructorNamedArguments();
    [CompilerGeneratedAttribute]
public void set_ConstructorNamedArguments(Dictionary`2<string, string> value);
    public bool ContainedIn(SymbolFilterData symbol);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.BuildInfo : object {
    [CompilerGeneratedAttribute]
private string <BuildAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputFilesKey>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TriggeredUtcTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CompleteUtcTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtractMetadataOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RelativeOutputFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, List`1<string>> <ContainedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckSum>k__BackingField;
    public string BuildAssembly { get; public set; }
    public string InputFilesKey { get; public set; }
    public DateTime TriggeredUtcTime { get; public set; }
    public DateTime CompleteUtcTime { get; public set; }
    public string OutputFolder { get; public set; }
    public ExtractMetadataOptions Options { get; public set; }
    public IEnumerable`1<string> RelativeOutputFiles { get; public set; }
    public IDictionary`2<string, List`1<string>> ContainedFiles { get; public set; }
    public string CheckSum { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BuildAssembly();
    [CompilerGeneratedAttribute]
public void set_BuildAssembly(string value);
    [CompilerGeneratedAttribute]
public string get_InputFilesKey();
    [CompilerGeneratedAttribute]
public void set_InputFilesKey(string value);
    [CompilerGeneratedAttribute]
public DateTime get_TriggeredUtcTime();
    [CompilerGeneratedAttribute]
public void set_TriggeredUtcTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_CompleteUtcTime();
    [CompilerGeneratedAttribute]
public void set_CompleteUtcTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_OutputFolder();
    [CompilerGeneratedAttribute]
public void set_OutputFolder(string value);
    [CompilerGeneratedAttribute]
public ExtractMetadataOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(ExtractMetadataOptions value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RelativeOutputFiles();
    [CompilerGeneratedAttribute]
public void set_RelativeOutputFiles(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, List`1<string>> get_ContainedFiles();
    [CompilerGeneratedAttribute]
public void set_ContainedFiles(IDictionary`2<string, List`1<string>> value);
    [CompilerGeneratedAttribute]
public string get_CheckSum();
    [CompilerGeneratedAttribute]
public void set_CheckSum(string value);
}
public abstract class Microsoft.DocAsCode.Metadata.ManagedReference.CacheBase : object {
    private static int CleanupIntervalInDays;
    private static int CleanupMaxCount;
    private static int CleanupTo;
    private Dictionary`2<string, BuildInfo> _configs;
    private string _path;
    public static string AssemblyName;
    private static CacheBase();
    public CacheBase(string path);
    public BuildInfo GetValidConfig(string key);
    public BuildInfo GetValidConfig(IEnumerable`1<string> inputProjects);
    public void SaveToCache(string key, IDictionary`2<string, List`1<string>> containedFiles, DateTime triggeredTime, string outputFolder, IList`1<string> fileRelativePaths, ExtractMetadataOptions options);
    public void SaveToCache(IEnumerable`1<string> inputProjects, IDictionary`2<string, List`1<string>> containedFiles, DateTime triggeredTime, string outputFolder, IList`1<string> fileRelativePaths, ExtractMetadataOptions options);
    public void SaveToCache(string key, IEnumerable`1<string> containedFiles, DateTime triggeredTime, string outputFolder, IList`1<string> fileRelativePaths, ExtractMetadataOptions options);
    protected virtual BuildInfo GetConfig(string key);
    protected virtual BuildInfo ReadConfig(string key);
    protected virtual void SaveConfig(string key, BuildInfo config);
    protected virtual void CleanupConfig();
    private static Dictionary`2<string, BuildInfo> ReadCacheFile(string path);
    private static string GetHash(string rootFolder, IEnumerable`1<string> relativeFilePath);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ConfigFilterRule : object {
    [CompilerGeneratedAttribute]
private List`1<ConfigFilterRuleItemUnion> <ApiRules>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ConfigFilterRuleItemUnion> <AttributeRules>k__BackingField;
    [YamlMemberAttribute]
public List`1<ConfigFilterRuleItemUnion> ApiRules { get; public set; }
    [YamlMemberAttribute]
public List`1<ConfigFilterRuleItemUnion> AttributeRules { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ConfigFilterRuleItemUnion> get_ApiRules();
    [CompilerGeneratedAttribute]
public void set_ApiRules(List`1<ConfigFilterRuleItemUnion> value);
    [CompilerGeneratedAttribute]
public List`1<ConfigFilterRuleItemUnion> get_AttributeRules();
    [CompilerGeneratedAttribute]
public void set_AttributeRules(List`1<ConfigFilterRuleItemUnion> value);
    public bool CanVisitApi(SymbolFilterData symbol);
    public bool CanVisitAttribute(SymbolFilterData symbol);
    private bool CanVisitCore(IEnumerable`1<ConfigFilterRuleItemUnion> ruleItems, SymbolFilterData symbol);
    public static ConfigFilterRule Load(string configFile);
    public static ConfigFilterRule LoadWithDefaults(string filterConfigFile);
    private static ConfigFilterRule Merge(ConfigFilterRule defaultRule, ConfigFilterRule userRule);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ConfigFilterRuleExcludeItem : ConfigFilterRuleItem {
    [YamlIgnoreAttribute]
public bool CanVisit { get; }
    public virtual bool get_CanVisit();
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ConfigFilterRuleIncludeItem : ConfigFilterRuleItem {
    [YamlIgnoreAttribute]
public bool CanVisit { get; }
    public virtual bool get_CanVisit();
}
public abstract class Microsoft.DocAsCode.Metadata.ManagedReference.ConfigFilterRuleItem : object {
    private Regex _uidRegex;
    [CompilerGeneratedAttribute]
private Nullable`1<ExtendedSymbolKind> <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeFilterInfo <Attribute>k__BackingField;
    [YamlMemberAttribute]
public string UidRegex { get; public set; }
    [YamlMemberAttribute]
public Nullable`1<ExtendedSymbolKind> Kind { get; public set; }
    [YamlMemberAttribute]
public AttributeFilterInfo Attribute { get; public set; }
    [YamlIgnoreAttribute]
public bool CanVisit { get; }
    public string get_UidRegex();
    public void set_UidRegex(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ExtendedSymbolKind> get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(Nullable`1<ExtendedSymbolKind> value);
    [CompilerGeneratedAttribute]
public AttributeFilterInfo get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(AttributeFilterInfo value);
    public abstract virtual bool get_CanVisit();
    public bool IsMatch(SymbolFilterData symbol);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ConfigFilterRuleItemUnion : object {
    private ConfigFilterRuleIncludeItem _include;
    private ConfigFilterRuleExcludeItem _exclude;
    [YamlMemberAttribute]
public ConfigFilterRuleIncludeItem Include { get; public set; }
    [YamlMemberAttribute]
public ConfigFilterRuleExcludeItem Exclude { get; public set; }
    public ConfigFilterRuleItem Rule { get; }
    public ConfigFilterRuleIncludeItem get_Include();
    public void set_Include(ConfigFilterRuleIncludeItem value);
    public ConfigFilterRuleExcludeItem get_Exclude();
    public void set_Exclude(ConfigFilterRuleExcludeItem value);
    public ConfigFilterRuleItem get_Rule();
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.CRefTarget : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentId>k__BackingField;
    public string Id { get; public set; }
    public string CommentId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_CommentId();
    [CompilerGeneratedAttribute]
public void set_CommentId(string value);
}
public enum Microsoft.DocAsCode.Metadata.ManagedReference.ExtendedSymbolKind : Enum {
    public int value__;
    public static ExtendedSymbolKind Assembly;
    public static ExtendedSymbolKind Namespace;
    public static ExtendedSymbolKind Type;
    public static ExtendedSymbolKind Class;
    public static ExtendedSymbolKind Struct;
    public static ExtendedSymbolKind Enum;
    public static ExtendedSymbolKind Interface;
    public static ExtendedSymbolKind Delegate;
    public static ExtendedSymbolKind Member;
    public static ExtendedSymbolKind Event;
    public static ExtendedSymbolKind Field;
    public static ExtendedSymbolKind Method;
    public static ExtendedSymbolKind Property;
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.Metadata.ManagedReference.ExtendedSymbolKindHelper : object {
    [ExtensionAttribute]
public static bool Contains(ExtendedSymbolKind kind, SymbolFilterData symbol);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ExtractMetadataOptions : object {
    [CompilerGeneratedAttribute]
private bool <ShouldSkipMarkup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveRawInlineComments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <MSBuildProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeSourceBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDefaultFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<Compilation, IEnumerable`1<IMethodSymbol>> <RoslynExtensionMethods>k__BackingField;
    public bool ShouldSkipMarkup { get; public set; }
    public bool PreserveRawInlineComments { get; public set; }
    public string FilterConfigFile { get; public set; }
    public Dictionary`2<string, string> MSBuildProperties { get; public set; }
    public string CodeSourceBasePath { get; public set; }
    public bool DisableDefaultFilter { get; public set; }
    [JsonIgnoreAttribute]
public IReadOnlyDictionary`2<Compilation, IEnumerable`1<IMethodSymbol>> RoslynExtensionMethods { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShouldSkipMarkup();
    [CompilerGeneratedAttribute]
public void set_ShouldSkipMarkup(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveRawInlineComments();
    [CompilerGeneratedAttribute]
public void set_PreserveRawInlineComments(bool value);
    [CompilerGeneratedAttribute]
public string get_FilterConfigFile();
    [CompilerGeneratedAttribute]
public void set_FilterConfigFile(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_MSBuildProperties();
    [CompilerGeneratedAttribute]
public void set_MSBuildProperties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_CodeSourceBasePath();
    [CompilerGeneratedAttribute]
public void set_CodeSourceBasePath(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableDefaultFilter();
    [CompilerGeneratedAttribute]
public void set_DisableDefaultFilter(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<Compilation, IEnumerable`1<IMethodSymbol>> get_RoslynExtensionMethods();
    [CompilerGeneratedAttribute]
public void set_RoslynExtensionMethods(IReadOnlyDictionary`2<Compilation, IEnumerable`1<IMethodSymbol>> value);
    public bool HasChanged(IncrementalCheck check, bool careMSBuildProperties);
}
public interface Microsoft.DocAsCode.Metadata.ManagedReference.IBuildController {
    public abstract virtual MetadataItem ExtractMetadata(IInputParameters parameters);
}
public interface Microsoft.DocAsCode.Metadata.ManagedReference.IExtractor {
    public abstract virtual MetadataItem Extract(IInputParameters key);
}
public interface Microsoft.DocAsCode.Metadata.ManagedReference.IInputParameters {
    public ExtractMetadataOptions Options { get; }
    public IEnumerable`1<string> Files { get; }
    public string Key { get; }
    public ProjectLevelCache Cache { get; }
    public BuildInfo BuildInfo { get; }
    public abstract virtual ExtractMetadataOptions get_Options();
    public abstract virtual IEnumerable`1<string> get_Files();
    public abstract virtual bool HasChanged(BuildInfo buildInfo);
    public abstract virtual string get_Key();
    public abstract virtual ProjectLevelCache get_Cache();
    public abstract virtual BuildInfo get_BuildInfo();
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.IncrementalCheck : object {
    private VersionStamp _versionToBeCompared;
    private bool _versionChanged;
    private BuildInfo _buildInfo;
    public BuildInfo BuildInfo { get; }
    public IncrementalCheck(BuildInfo buildInfo);
    public BuildInfo get_BuildInfo();
    public bool AreFilesModified(IEnumerable`1<string> files);
    public bool MSBuildPropertiesUpdated(IDictionary`2<string, string> newProperties);
    public bool IsFileModified(string file);
    private bool VersionNewer(VersionStamp thisVersion);
    private static bool VersionNewer(VersionStamp thisVersion, VersionStamp thatVersion);
    private static VersionStamp GetLastModifiedVersionForFile(string filePath);
    private static bool DictionaryEqual(IDictionary`2<TKey, TValue> dict1, IDictionary`2<TKey, TValue> dict2, IEqualityComparer`1<TValue> equalityComparer);
}
public interface Microsoft.DocAsCode.Metadata.ManagedReference.IProjectLoader {
    public abstract virtual AbstractProject TryLoad(string path, AbstractProjectLoader loader);
}
public interface Microsoft.DocAsCode.Metadata.ManagedReference.ITripleSlashCommentParserContext {
    public bool PreserveRawInlineComments { get; public set; }
    public Action`2<string, string> AddReferenceDelegate { get; public set; }
    public Func`2<string, CRefTarget> ResolveCRef { get; }
    public SourceDetail Source { get; public set; }
    public string CodeSourceBasePath { get; public set; }
    public abstract virtual bool get_PreserveRawInlineComments();
    public abstract virtual void set_PreserveRawInlineComments(bool value);
    public abstract virtual Action`2<string, string> get_AddReferenceDelegate();
    public abstract virtual void set_AddReferenceDelegate(Action`2<string, string> value);
    public abstract virtual Func`2<string, CRefTarget> get_ResolveCRef();
    public abstract virtual SourceDetail get_Source();
    public abstract virtual void set_Source(SourceDetail value);
    public abstract virtual string get_CodeSourceBasePath();
    public abstract virtual void set_CodeSourceBasePath(string value);
}
public enum Microsoft.DocAsCode.Metadata.ManagedReference.LayoutItem : Enum {
    public int value__;
    public static LayoutItem Title;
    public static LayoutItem Hierarchy;
    public static LayoutItem Exception;
    public static LayoutItem Syntax;
    public static LayoutItem InlineComments;
    public static LayoutItem ExternalComments;
    public static LayoutItem SeeAlso;
    public static LayoutItem MemberTable;
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.LinkItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayNamesWithType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayQualifiedNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExternalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [YamlMemberAttribute]
[JsonPropertyAttribute("id")]
public string Name { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("name")]
public string DisplayName { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("nameWithType")]
public string DisplayNamesWithType { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("qualifiedName")]
public string DisplayQualifiedNames { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("isExternal")]
public bool IsExternalPath { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("href")]
public string Href { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayNamesWithType();
    [CompilerGeneratedAttribute]
public void set_DisplayNamesWithType(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayQualifiedNames();
    [CompilerGeneratedAttribute]
public void set_DisplayQualifiedNames(string value);
    [CompilerGeneratedAttribute]
public bool get_IsExternalPath();
    [CompilerGeneratedAttribute]
public void set_IsExternalPath(bool value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    public LinkItem Clone();
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.MetadataItem : object {
    [CompilerGeneratedAttribute]
private bool <IsInvalid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawComment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExplicitInterfaceImplementation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExtensionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentId>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxLanguage <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedList`2<SyntaxLanguage, string> <DisplayNames>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedList`2<SyntaxLanguage, string> <DisplayNamesWithType>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedList`2<SyntaxLanguage, string> <DisplayQualifiedNames>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataItem <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AssemblyNameList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceDetail <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceDetail <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LayoutItem> <Layout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Remarks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Examples>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxDetail <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Overload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Overridden>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExceptionInfo> <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LinkInfo> <Sees>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LinkInfo> <SeeAlsos>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Inheritance>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DerivedClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Implements>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <InheritedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExtensionMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AttributeInfo> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedList`2<SyntaxLanguage, List`1<string>> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MetadataItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ReferenceItem> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InheritDoc>k__BackingField;
    [CompilerGeneratedAttribute]
private TripleSlashCommentModel <CommentModel>k__BackingField;
    [YamlIgnoreAttribute]
[JsonIgnoreAttribute]
public bool IsInvalid { get; public set; }
    [YamlIgnoreAttribute]
[JsonIgnoreAttribute]
public string RawComment { get; public set; }
    [JsonPropertyAttribute("isEii")]
[YamlMemberAttribute]
public bool IsExplicitInterfaceImplementation { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("isExtensionMethod")]
public bool IsExtensionMethod { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("id")]
public string Name { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("commentId")]
public string CommentId { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("language")]
public SyntaxLanguage Language { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("name")]
public SortedList`2<SyntaxLanguage, string> DisplayNames { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("nameWithType")]
public SortedList`2<SyntaxLanguage, string> DisplayNamesWithType { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("qualifiedName")]
public SortedList`2<SyntaxLanguage, string> DisplayQualifiedNames { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("parent")]
public MetadataItem Parent { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("type")]
public MemberType Type { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("assemblies")]
public List`1<string> AssemblyNameList { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("namespace")]
public string NamespaceName { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("source")]
public SourceDetail Source { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("documentation")]
public SourceDetail Documentation { get; public set; }
    public List`1<LayoutItem> Layout { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("summary")]
public string Summary { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("remarks")]
public string Remarks { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("example")]
public List`1<string> Examples { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("syntax")]
public SyntaxDetail Syntax { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("overload")]
public string Overload { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("overridden")]
public string Overridden { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("exceptions")]
public List`1<ExceptionInfo> Exceptions { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("see")]
public List`1<LinkInfo> Sees { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("seealso")]
public List`1<LinkInfo> SeeAlsos { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("inheritance")]
public List`1<string> Inheritance { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("derivedClasses")]
public List`1<string> DerivedClasses { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("implements")]
public List`1<string> Implements { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("inheritedMembers")]
public List`1<string> InheritedMembers { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("extensionMethods")]
public List`1<string> ExtensionMethods { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("attributes")]
[MergeOptionAttribute("-1")]
public List`1<AttributeInfo> Attributes { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("modifiers")]
public SortedList`2<SyntaxLanguage, List`1<string>> Modifiers { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("items")]
public List`1<MetadataItem> Items { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("references")]
public Dictionary`2<string, ReferenceItem> References { get; public set; }
    [YamlIgnoreAttribute]
[JsonIgnoreAttribute]
public string InheritDoc { get; public set; }
    [YamlIgnoreAttribute]
[JsonIgnoreAttribute]
public TripleSlashCommentModel CommentModel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsInvalid();
    [CompilerGeneratedAttribute]
public void set_IsInvalid(bool value);
    [CompilerGeneratedAttribute]
public string get_RawComment();
    [CompilerGeneratedAttribute]
public void set_RawComment(string value);
    [CompilerGeneratedAttribute]
public bool get_IsExplicitInterfaceImplementation();
    [CompilerGeneratedAttribute]
public void set_IsExplicitInterfaceImplementation(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExtensionMethod();
    [CompilerGeneratedAttribute]
public void set_IsExtensionMethod(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_CommentId();
    [CompilerGeneratedAttribute]
public void set_CommentId(string value);
    [CompilerGeneratedAttribute]
public SyntaxLanguage get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(SyntaxLanguage value);
    [CompilerGeneratedAttribute]
public SortedList`2<SyntaxLanguage, string> get_DisplayNames();
    [CompilerGeneratedAttribute]
public void set_DisplayNames(SortedList`2<SyntaxLanguage, string> value);
    [CompilerGeneratedAttribute]
public SortedList`2<SyntaxLanguage, string> get_DisplayNamesWithType();
    [CompilerGeneratedAttribute]
public void set_DisplayNamesWithType(SortedList`2<SyntaxLanguage, string> value);
    [CompilerGeneratedAttribute]
public SortedList`2<SyntaxLanguage, string> get_DisplayQualifiedNames();
    [CompilerGeneratedAttribute]
public void set_DisplayQualifiedNames(SortedList`2<SyntaxLanguage, string> value);
    [CompilerGeneratedAttribute]
public MetadataItem get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(MetadataItem value);
    [CompilerGeneratedAttribute]
public MemberType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(MemberType value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AssemblyNameList();
    [CompilerGeneratedAttribute]
public void set_AssemblyNameList(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_NamespaceName();
    [CompilerGeneratedAttribute]
public void set_NamespaceName(string value);
    [CompilerGeneratedAttribute]
public SourceDetail get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(SourceDetail value);
    [CompilerGeneratedAttribute]
public SourceDetail get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(SourceDetail value);
    [CompilerGeneratedAttribute]
public List`1<LayoutItem> get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(List`1<LayoutItem> value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Remarks();
    [CompilerGeneratedAttribute]
public void set_Remarks(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Examples();
    [CompilerGeneratedAttribute]
public void set_Examples(List`1<string> value);
    [CompilerGeneratedAttribute]
public SyntaxDetail get_Syntax();
    [CompilerGeneratedAttribute]
public void set_Syntax(SyntaxDetail value);
    [CompilerGeneratedAttribute]
public string get_Overload();
    [CompilerGeneratedAttribute]
public void set_Overload(string value);
    [CompilerGeneratedAttribute]
public string get_Overridden();
    [CompilerGeneratedAttribute]
public void set_Overridden(string value);
    [CompilerGeneratedAttribute]
public List`1<ExceptionInfo> get_Exceptions();
    [CompilerGeneratedAttribute]
public void set_Exceptions(List`1<ExceptionInfo> value);
    [CompilerGeneratedAttribute]
public List`1<LinkInfo> get_Sees();
    [CompilerGeneratedAttribute]
public void set_Sees(List`1<LinkInfo> value);
    [CompilerGeneratedAttribute]
public List`1<LinkInfo> get_SeeAlsos();
    [CompilerGeneratedAttribute]
public void set_SeeAlsos(List`1<LinkInfo> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Inheritance();
    [CompilerGeneratedAttribute]
public void set_Inheritance(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DerivedClasses();
    [CompilerGeneratedAttribute]
public void set_DerivedClasses(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Implements();
    [CompilerGeneratedAttribute]
public void set_Implements(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_InheritedMembers();
    [CompilerGeneratedAttribute]
public void set_InheritedMembers(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExtensionMethods();
    [CompilerGeneratedAttribute]
public void set_ExtensionMethods(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<AttributeInfo> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(List`1<AttributeInfo> value);
    [CompilerGeneratedAttribute]
public SortedList`2<SyntaxLanguage, List`1<string>> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(SortedList`2<SyntaxLanguage, List`1<string>> value);
    [CompilerGeneratedAttribute]
public List`1<MetadataItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<MetadataItem> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ReferenceItem> get_References();
    [CompilerGeneratedAttribute]
public void set_References(Dictionary`2<string, ReferenceItem> value);
    [CompilerGeneratedAttribute]
public string get_InheritDoc();
    [CompilerGeneratedAttribute]
public void set_InheritDoc(string value);
    [CompilerGeneratedAttribute]
public TripleSlashCommentModel get_CommentModel();
    [CompilerGeneratedAttribute]
public void set_CommentModel(TripleSlashCommentModel value);
    public virtual string ToString();
    public sealed virtual object Clone();
    public void CopyInheritedData(MetadataItem src);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.MetadataModel : object {
    [CompilerGeneratedAttribute]
private MetadataItem <TocYamlViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MetadataItem> <Members>k__BackingField;
    public MetadataItem TocYamlViewModel { get; public set; }
    public List`1<MetadataItem> Members { get; public set; }
    [CompilerGeneratedAttribute]
public MetadataItem get_TocYamlViewModel();
    [CompilerGeneratedAttribute]
public void set_TocYamlViewModel(MetadataItem value);
    [CompilerGeneratedAttribute]
public List`1<MetadataItem> get_Members();
    [CompilerGeneratedAttribute]
public void set_Members(List`1<MetadataItem> value);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ProjectFileInputParameters : object {
    [CompilerGeneratedAttribute]
private ExtractMetadataOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DependencyRebuilt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectLevelCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildInfo <BuildInfo>k__BackingField;
    public ExtractMetadataOptions Options { get; }
    public IEnumerable`1<string> Files { get; public set; }
    public bool DependencyRebuilt { get; public set; }
    public string Key { get; }
    public ProjectLevelCache Cache { get; }
    public BuildInfo BuildInfo { get; }
    public ProjectFileInputParameters(ExtractMetadataOptions options, IEnumerable`1<string> files, string projectFile, bool dependencyRebuilt);
    [CompilerGeneratedAttribute]
public sealed virtual ExtractMetadataOptions get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DependencyRebuilt();
    [CompilerGeneratedAttribute]
public void set_DependencyRebuilt(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual ProjectLevelCache get_Cache();
    [CompilerGeneratedAttribute]
public sealed virtual BuildInfo get_BuildInfo();
    public sealed virtual bool HasChanged(BuildInfo buildInfo);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ProjectLevelCache : CacheBase {
    public static Func`2<string, string> GetProjectLevelConfig;
    private static ConcurrentDictionary`2<string, ProjectLevelCache> _cache;
    public string OutputFolder;
    private ProjectLevelCache(string projectPath);
    private static ProjectLevelCache();
    public static ProjectLevelCache Get(IEnumerable`1<string> files);
    public static ProjectLevelCache Get(string firstFile);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ReferenceItem : object {
    [CompilerGeneratedAttribute]
private SortedList`2<SyntaxLanguage, List`1<LinkItem>> <Parts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentId>k__BackingField;
    [YamlMemberAttribute]
[JsonPropertyAttribute("name")]
public SortedList`2<SyntaxLanguage, List`1<LinkItem>> Parts { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("isDefinition")]
public Nullable`1<bool> IsDefinition { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("definition")]
public string Definition { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("parent")]
public string Parent { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("commentId")]
public string CommentId { get; public set; }
    [CompilerGeneratedAttribute]
public SortedList`2<SyntaxLanguage, List`1<LinkItem>> get_Parts();
    [CompilerGeneratedAttribute]
public void set_Parts(SortedList`2<SyntaxLanguage, List`1<LinkItem>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsDefinition();
    [CompilerGeneratedAttribute]
public void set_IsDefinition(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Definition();
    [CompilerGeneratedAttribute]
public void set_Definition(string value);
    [CompilerGeneratedAttribute]
public string get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(string value);
    [CompilerGeneratedAttribute]
public string get_CommentId();
    [CompilerGeneratedAttribute]
public void set_CommentId(string value);
    public ReferenceItem Clone();
    private static Nullable`1<T> Merge(Nullable`1<T> source, Nullable`1<T> target);
    private static T Merge(T source, T target);
    private static string MergeCommentId(string source, string target);
    public void Merge(ReferenceItem other);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.SourceFileInputParameters : object {
    [CompilerGeneratedAttribute]
private ExtractMetadataOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectLevelCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildInfo <BuildInfo>k__BackingField;
    public ExtractMetadataOptions Options { get; }
    public IEnumerable`1<string> Files { get; }
    public string Key { get; }
    public ProjectLevelCache Cache { get; }
    public BuildInfo BuildInfo { get; }
    public SourceFileInputParameters(ExtractMetadataOptions options, IEnumerable`1<string> files);
    [CompilerGeneratedAttribute]
public sealed virtual ExtractMetadataOptions get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Files();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual ProjectLevelCache get_Cache();
    [CompilerGeneratedAttribute]
public sealed virtual BuildInfo get_BuildInfo();
    public sealed virtual bool HasChanged(BuildInfo buildInfo);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.SymbolFilterData : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ExtendedSymbolKind> <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AttributeFilterData> <Attributes>k__BackingField;
    public string Id { get; public set; }
    public Nullable`1<ExtendedSymbolKind> Kind { get; public set; }
    public IEnumerable`1<AttributeFilterData> Attributes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ExtendedSymbolKind> get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(Nullable`1<ExtendedSymbolKind> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AttributeFilterData> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IEnumerable`1<AttributeFilterData> value);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.SyntaxDetail : object {
    [CompilerGeneratedAttribute]
private SortedList`2<SyntaxLanguage, string> <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ApiParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ApiParameter> <TypeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiParameter <Return>k__BackingField;
    [YamlMemberAttribute]
[JsonPropertyAttribute("content")]
public SortedList`2<SyntaxLanguage, string> Content { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("parameters")]
public List`1<ApiParameter> Parameters { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("typeParameters")]
public List`1<ApiParameter> TypeParameters { get; public set; }
    [YamlMemberAttribute]
[JsonPropertyAttribute("return")]
public ApiParameter Return { get; public set; }
    [CompilerGeneratedAttribute]
public SortedList`2<SyntaxLanguage, string> get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(SortedList`2<SyntaxLanguage, string> value);
    [CompilerGeneratedAttribute]
public List`1<ApiParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(List`1<ApiParameter> value);
    [CompilerGeneratedAttribute]
public List`1<ApiParameter> get_TypeParameters();
    [CompilerGeneratedAttribute]
public void set_TypeParameters(List`1<ApiParameter> value);
    [CompilerGeneratedAttribute]
public ApiParameter get_Return();
    [CompilerGeneratedAttribute]
public void set_Return(ApiParameter value);
    public void CopyInheritedData(SyntaxDetail src);
    private static void CopyInheritedParameterList(List`1<ApiParameter> dest, List`1<ApiParameter> src);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.TripleSlashCommentModel : object {
    private static string idSelector;
    private static Regex CommentIdRegex;
    private static Regex LineBreakRegex;
    private static Regex CodeElementRegex;
    private static Regex RegionRegex;
    private static Regex XmlRegionRegex;
    private static Regex EndRegionRegex;
    private static Regex XmlEndRegionRegex;
    private ITripleSlashCommentParserContext _context;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Remarks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Returns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExceptionInfo> <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LinkInfo> <Sees>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LinkInfo> <SeeAlsos>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Examples>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <TypeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InheritDoc>k__BackingField;
    public string Summary { get; private set; }
    public string Remarks { get; private set; }
    public string Returns { get; private set; }
    public List`1<ExceptionInfo> Exceptions { get; private set; }
    public List`1<LinkInfo> Sees { get; private set; }
    public List`1<LinkInfo> SeeAlsos { get; private set; }
    public List`1<string> Examples { get; private set; }
    public Dictionary`2<string, string> Parameters { get; private set; }
    public Dictionary`2<string, string> TypeParameters { get; private set; }
    public string InheritDoc { get; private set; }
    private TripleSlashCommentModel(string xml, SyntaxLanguage language, ITripleSlashCommentParserContext context);
    private static TripleSlashCommentModel();
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
private void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Remarks();
    [CompilerGeneratedAttribute]
private void set_Remarks(string value);
    [CompilerGeneratedAttribute]
public string get_Returns();
    [CompilerGeneratedAttribute]
private void set_Returns(string value);
    [CompilerGeneratedAttribute]
public List`1<ExceptionInfo> get_Exceptions();
    [CompilerGeneratedAttribute]
private void set_Exceptions(List`1<ExceptionInfo> value);
    [CompilerGeneratedAttribute]
public List`1<LinkInfo> get_Sees();
    [CompilerGeneratedAttribute]
private void set_Sees(List`1<LinkInfo> value);
    [CompilerGeneratedAttribute]
public List`1<LinkInfo> get_SeeAlsos();
    [CompilerGeneratedAttribute]
private void set_SeeAlsos(List`1<LinkInfo> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Examples();
    [CompilerGeneratedAttribute]
private void set_Examples(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_TypeParameters();
    [CompilerGeneratedAttribute]
private void set_TypeParameters(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_InheritDoc();
    [CompilerGeneratedAttribute]
private void set_InheritDoc(string value);
    public static TripleSlashCommentModel CreateModel(string xml, SyntaxLanguage language, ITripleSlashCommentParserContext context);
    public void CopyInheritedData(TripleSlashCommentModel src);
    public string GetParameter(string name);
    public string GetTypeParameter(string name);
    private static string GetValue(string name, Dictionary`2<string, string> dictionary);
    private string GetSummary(XPathNavigator nav, ITripleSlashCommentParserContext context);
    private string GetRemarks(XPathNavigator nav, ITripleSlashCommentParserContext context);
    private string GetReturns(XPathNavigator nav, ITripleSlashCommentParserContext context);
    private List`1<ExceptionInfo> GetExceptions(XPathNavigator nav, ITripleSlashCommentParserContext context);
    private List`1<LinkInfo> GetSees(XPathNavigator nav, ITripleSlashCommentParserContext context);
    private List`1<LinkInfo> GetSeeAlsos(XPathNavigator nav, ITripleSlashCommentParserContext context);
    private List`1<string> GetExamples(XPathNavigator nav, ITripleSlashCommentParserContext context);
    private string GetInheritDoc(XPathNavigator nav, ITripleSlashCommentParserContext context);
    private void ResolveCodeSource(XDocument doc, ITripleSlashCommentParserContext context);
    private void ResolveCodeSource(XElement element, string source, string region);
    private Dictionary`2<string, string> GetListContent(XPathNavigator navigator, string xpath, string contentType, ITripleSlashCommentParserContext context);
    private Dictionary`2<string, string> GetParameters(XPathNavigator navigator, ITripleSlashCommentParserContext context);
    private static ValueTuple`2<Regex, Regex> GetRegionRegex(string source);
    private Dictionary`2<string, string> GetTypeParameters(XPathNavigator navigator, ITripleSlashCommentParserContext context);
    private void ResolveSeeAlsoCref(XNode node, Action`2<string, string> addReference, Func`2<string, CRefTarget> resolveCRef);
    private void ResolveSeeCref(XNode node, Action`2<string, string> addReference, Func`2<string, CRefTarget> resolveCRef);
    private void ResolveExceptionCref(XNode node, Action`2<string, string> addReference, Func`2<string, CRefTarget> resolveCRef);
    private void ResolveCrefLink(XNode node, string nodeSelector, Action`2<string, string> addReference, Func`2<string, CRefTarget> resolveCRef);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.TripleSlashCommentModel/<GetMultipleExampleNodes>d__73")]
private IEnumerable`1<string> GetMultipleExampleNodes(XPathNavigator navigator, string selector);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.TripleSlashCommentModel/<GetMulitpleCrefInfo>d__74")]
private IEnumerable`1<ExceptionInfo> GetMulitpleCrefInfo(XPathNavigator navigator, string selector);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.TripleSlashCommentModel/<GetMultipleLinkInfo>d__75")]
private IEnumerable`1<LinkInfo> GetMultipleLinkInfo(XPathNavigator navigator, string selector);
    private string GetSingleNodeValue(XPathNavigator nav, string selector);
    private string GetXmlValue(XPathNavigator node);
    private static string RemoveLeadingSpaces(string xml);
    private static string NormalizeXml(string xml, int parentIndex);
    private static string GetInnerXml(XPathNavigator node);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.TripleSlashCommentParserContext : object {
    [CompilerGeneratedAttribute]
private bool <PreserveRawInlineComments>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, string> <AddReferenceDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, CRefTarget> <ResolveCRef>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceDetail <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeSourceBasePath>k__BackingField;
    public bool PreserveRawInlineComments { get; public set; }
    public Action`2<string, string> AddReferenceDelegate { get; public set; }
    public Func`2<string, CRefTarget> ResolveCRef { get; public set; }
    public SourceDetail Source { get; public set; }
    public string CodeSourceBasePath { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreserveRawInlineComments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreserveRawInlineComments(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<string, string> get_AddReferenceDelegate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddReferenceDelegate(Action`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<string, CRefTarget> get_ResolveCRef();
    [CompilerGeneratedAttribute]
public void set_ResolveCRef(Func`2<string, CRefTarget> value);
    [CompilerGeneratedAttribute]
public sealed virtual SourceDetail get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Source(SourceDetail value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CodeSourceBasePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CodeSourceBasePath(string value);
}
public static class Microsoft.DocAsCode.Metadata.ManagedReference.TripleSlashCommentTransformer : object {
    private static XslCompiledTransform _transform;
    private static TripleSlashCommentTransformer();
    public static XDocument Transform(string xml, SyntaxLanguage language);
}
