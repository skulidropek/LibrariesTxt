[CompilationMappingAttribute("3")]
public class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.FSharpBuildController : object {
    internal FSharpCompilation compilation;
    public FSharpBuildController(FSharpCompilation compilation);
    private virtual override MetadataItem Microsoft.DocAsCode.Metadata.ManagedReference.IBuildController.ExtractMetadata(IInputParameters parameters);
}
[CompilationMappingAttribute("3")]
public class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.FSharpCompilation : AbstractCompilation {
    internal FSharpCheckProjectResults compilation;
    internal string assemblyQualifiedName;
    internal string assemblyName;
    internal IEnumerable`1<FSharpEntity> allModules;
    internal FSharpSet`1<string> allNamespaces;
    internal Dictionary`2<string, ReferenceItem> references;
    internal ConfigFilterRule filter;
    internal IEnumerable`1<SymbolNames> allSymbolNames;
    internal FSharpCheckProjectResults Compilation { get; }
    public FSharpCompilation(FSharpCheckProjectResults compilation, string projPath);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal void ExtractXmlDoc(MetadataItem md, IList`1<string> xmlDoc, string xmlDocSig);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal FSharpOption`1<MetadataItem> SymbolMetadata(FSharpEntity encEnt, MetadataItem encMd, FSharpSymbol sym);
    internal FSharpOption`1<MetadataItem> EntityMetadata(FSharpEntity ent);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal FSharpOption`1<MetadataItem> NamespaceMetadata(string name, IEnumerable`1<MetadataItem> containedMds);
    internal MetadataItem AssemblyMetadata();
    public MetadataItem ExtractMetadata(IInputParameters parameters);
    public virtual IBuildController GetBuildController();
    internal FSharpCheckProjectResults get_Compilation();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<FSharpEntity> containedModules(IEnumerable`1<FSharpEntity> ents);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<string> containedNamespaces(IEnumerable`1<FSharpEntity> ents);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal void addReference(string name, ReferenceItem ref);
    [CompilerGeneratedAttribute]
internal void addReferenceFromMetadata(MetadataItem md);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal SourceDetail srcDetail(string name, range declLoc);
    [CompilerGeneratedAttribute]
internal FSharpList`1<LinkItem> typeRefParts(FSharpType typ);
    [CompilerGeneratedAttribute]
internal string typeRef(FSharpType typ);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal string typeSyntax(bool fullTypes, FSharpType typ);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal string paramSyntax(bool withNames, bool fullTypes, FSharpParameter p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal string paramGroupSyntax(bool withNames, bool fullTypes, IList`1<FSharpParameter> pg);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal string curriedParamSyntax(bool withNames, bool fullTypes, IList`1<IList`1<FSharpParameter>> cpgs);
    [CompilerGeneratedAttribute]
internal string substGenericParameters(string text);
    [CompilerGeneratedAttribute]
internal SortedList`2<SyntaxLanguage, a> syn(a value);
    [CompilerGeneratedAttribute]
internal string typeFullName(FSharpType t);
    [CompilerGeneratedAttribute]
internal string entityQualifiedName(FSharpEntity ent);
    [CompilerGeneratedAttribute]
internal string entityNamespace(FSharpEntity ent);
    [CompilerGeneratedAttribute]
internal string resolveModulePath(string fullName);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal string unionCaseFieldsSyntax(bool fullType, IEnumerable`1<FSharpField> cfs);
    [CompilerGeneratedAttribute]
internal SymbolNames entityNames(FSharpEntity ent);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal SymbolNames symbolNames(FSharpSymbol sym, FSharpEntity encEnt);
    [CompilerGeneratedAttribute]
internal string symbolRef(SymbolNames names);
    [CompilerGeneratedAttribute]
internal string literalRef(string name);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<SymbolNames> enclosedSymbolNames(FSharpEntity ent);
    [CompilerGeneratedAttribute]
internal bool attrAllowedByFilter(FSharpAttribute attr);
    [CompilerGeneratedAttribute]
internal FSharpOption`1<AttributeInfo> attrMetadata(FSharpAttribute attr);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal string attrsSyntax(bool withNewline, IEnumerable`1<FSharpAttribute> attrs);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<AttributeFilterData> attrsFilterData(IEnumerable`1<FSharpAttribute> attrs);
    [CompilerGeneratedAttribute]
internal bool isUnitType(FSharpType typ);
    [CompilerGeneratedAttribute]
internal ApiParameter paramMetadata(FSharpParameter p);
    [CompilerGeneratedAttribute]
internal ApiParameter genericParamMetadata(FSharpGenericParameter gp);
    [CompilerGeneratedAttribute]
internal List`1<ApiParameter> curriedParamsMetadata(IList`1<IList`1<FSharpParameter>> cpgs);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<string> inheritanceHierarchy(FSharpOption`1<FSharpType> t);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<string> inhertiableMembers(FSharpType t);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal IEnumerable`1<string> inheritedMembers(FSharpList`1<string> filter, FSharpOption`1<FSharpType> t);
}
[CompilationMappingAttribute("3")]
public class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.FSharpDocument : AbstractDocument {
    internal string docPath@16;
    public string FilePath { get; }
    public FSharpDocument(string docPath);
    public virtual string get_FilePath();
}
[CompilationMappingAttribute("3")]
internal class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.FSharpProject : AbstractProject {
    internal string projPath;
    internal FSharpProjectInfo projInfo;
    internal AbstractProjectLoader loader;
    internal FSharpChecker checker;
    public string FilePath { get; }
    public IEnumerable`1<AbstractDocument> Documents { get; }
    public bool HasDocuments { get; }
    public IEnumerable`1<AbstractProject> ProjectReferences { get; }
    public IEnumerable`1<string> PortableExecutableMetadataReferences { get; }
    public FSharpProject(string projPath, AbstractProjectLoader loader, FSharpProjectInfo projInfo, FSharpChecker checker);
    public virtual string get_FilePath();
    public virtual IEnumerable`1<AbstractDocument> get_Documents();
    public virtual bool get_HasDocuments();
    public virtual IEnumerable`1<AbstractProject> get_ProjectReferences();
    public virtual IEnumerable`1<string> get_PortableExecutableMetadataReferences();
    public virtual Task`1<AbstractCompilation> GetCompilationAsync();
}
[CompilationMappingAttribute("34")]
internal class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.FSharpProjectInfo : object {
    [DebuggerBrowsableAttribute("0")]
internal FSharpList`1<string> Srcs@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpList`1<string> Refs@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpList`1<string> Args@;
    [CompilationMappingAttribute("4", "0")]
internal FSharpList`1<string> Srcs { get; }
    [CompilationMappingAttribute("4", "1")]
internal FSharpList`1<string> Refs { get; }
    [CompilationMappingAttribute("4", "2")]
internal FSharpList`1<string> Args { get; }
    internal FSharpProjectInfo(FSharpList`1<string> srcs, FSharpList`1<string> refs, FSharpList`1<string> args);
    internal FSharpList`1<string> get_Srcs();
    internal FSharpList`1<string> get_Refs();
    internal FSharpList`1<string> get_Args();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(FSharpProjectInfo obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(FSharpProjectInfo obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute("7")]
internal static class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.FSharpProjectInfoModule : object {
    internal static string dotnetPath { get; }
    internal static string msbuildPath { get; }
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@26-2(ShellCommandResult this, ShellCommandResult obj, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@26-3(ShellCommandResult this, ShellCommandResult objTemp, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static int GetHashCode$cont@26-1(ShellCommandResult this, Unit unitVar);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_dotnetPath();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_msbuildPath();
    internal static Tuple`2<int, ShellCommandResult> runProcess@42(string workingDir, string exePath, string args);
    [CompilerGeneratedAttribute]
internal static bool contains@1-4(a e, FSharpList`1<a> xs1);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Tuple`2<int, ShellCommandResult> runCmd(string workingDir, string exePath, IEnumerable`1<string> args);
    internal static a handleErr@124(GetProjectInfoErrors`1<ShellCommandResult> err);
    internal static FSharpChoice`2<GetResult, GetProjectInfoErrors`1<ShellCommandResult>> exec@107(string projPath, bool isDotnetSdk, FSharpFunc`2<FSharpFunc`2<string, Unit>, FSharpFunc`2<FSharpFunc`2<string, FSharpFunc`2<FSharpList`1<MSbuildCli>, FSharpChoice`2<ShellCommandResult, GetProjectInfoErrors`1<ShellCommandResult>>>>, FSharpFunc`2<FSharpFunc`2<Unit, Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<ShellCommandResult>>>>>, FSharpFunc`2<FSharpList`1<MSbuildCli>, FSharpFunc`2<string, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<ShellCommandResult>>>>>>> getProjectInfoBySdk, FSharpFunc`2<string, Unit> logMsg, FSharpFunc`2<Unit, Tuple`3<string, FSharpList`1<MSbuildCli>, FSharpFunc`2<Unit, FSharpChoice`2<GetResult, GetProjectInfoErrors`1<ShellCommandResult>>>>> getArgs, FSharpList`1<MSbuildCli> additionalArgs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpProjectInfo fromProjectFile(string projPath, IEnumerable`1<KeyValuePair`2<string, string>> msbuildProps);
}
[CompilationMappingAttribute("3")]
public class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.FSharpProjectLoader : object {
    internal IDictionary`2<string, string> msbuildProps;
    internal FSharpChecker checker;
    internal Dictionary`2<string, FSharpProjectInfo> projInfoCache;
    public FSharpProjectLoader(IDictionary`2<string, string> msbuildProps);
    private virtual override AbstractProject Microsoft.DocAsCode.Metadata.ManagedReference.IProjectLoader.TryLoad(string path, AbstractProjectLoader loader);
}
[CompilationMappingAttribute("7")]
public static class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.List : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpList`1<a> concatWith(FSharpList`1<a> sep, FSharpList`1<FSharpList`1<a>> lst);
}
[CompilationMappingAttribute("7")]
internal static class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.Log : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static void log(LogLevel level, string msg);
    internal static a error(PrintfFormat`4<a, Unit, string, Unit> format);
    internal static a warning(PrintfFormat`4<a, Unit, string, Unit> format);
    internal static a verbose(PrintfFormat`4<a, Unit, string, Unit> format);
    internal static a info(PrintfFormat`4<a, Unit, string, Unit> format);
    internal static a debug(PrintfFormat`4<a, Unit, string, Unit> format);
}
[CompilationMappingAttribute("34")]
internal class Microsoft.DocAsCode.Metadata.ManagedReference.FSharp.SymbolNames : object {
    [DebuggerBrowsableAttribute("0")]
internal string Name@;
    [DebuggerBrowsableAttribute("0")]
internal string DisplayName@;
    [DebuggerBrowsableAttribute("0")]
internal string DisplayNameWithType@;
    [DebuggerBrowsableAttribute("0")]
internal string DisplayQualifiedName@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpOption`1<string> DisplaySuffix@;
    [DebuggerBrowsableAttribute("0")]
internal string XmlDocSig@;
    [CompilationMappingAttribute("4", "0")]
internal string Name { get; }
    [CompilationMappingAttribute("4", "1")]
internal string DisplayName { get; }
    [CompilationMappingAttribute("4", "2")]
internal string DisplayNameWithType { get; }
    [CompilationMappingAttribute("4", "3")]
internal string DisplayQualifiedName { get; }
    [CompilationMappingAttribute("4", "4")]
internal FSharpOption`1<string> DisplaySuffix { get; }
    [CompilationMappingAttribute("4", "5")]
internal string XmlDocSig { get; }
    internal string DisplayNameWithSuffix { get; }
    internal SymbolNames(string name, string displayName, string displayNameWithType, string displayQualifiedName, FSharpOption`1<string> displaySuffix, string xmlDocSig);
    internal string get_Name();
    internal string get_DisplayName();
    internal string get_DisplayNameWithType();
    internal string get_DisplayQualifiedName();
    internal FSharpOption`1<string> get_DisplaySuffix();
    internal string get_XmlDocSig();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(SymbolNames obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    internal string get_DisplayNameWithSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(SymbolNames obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute("7")]
public static class Microsoft.FSharp.Build.Attributes : object {
}
[CompilationMappingAttribute("3")]
public class Microsoft.FSharp.Build.Fsc : ToolTask {
    internal string baseAddress;
    internal FSharpList`1<string> capturedArguments;
    internal FSharpList`1<string> capturedFilenames;
    internal string codePage;
    internal FSharpList`1<ITaskItem> commandLineArgs;
    internal bool debugSymbols;
    internal string debugType;
    internal ITaskItem[] defineConstants;
    internal bool delaySign;
    internal string disabledWarnings;
    internal string documentationFile;
    internal string dotnetFscCompilerPath;
    internal bool embedAllSources;
    internal string embed;
    internal string generateInterfaceFile;
    internal bool highEntropyVA;
    internal string keyFile;
    internal bool noFramework;
    internal bool optimize;
    internal string otherFlags;
    internal string outputAssembly;
    internal string pdbFile;
    internal string platform;
    internal bool prefer32bit;
    internal string preferredUILang;
    internal bool publicSign;
    internal bool provideCommandLineArgs;
    internal ITaskItem[] references;
    internal string referencePath;
    internal ITaskItem[] resources;
    internal bool skipCompilerExecution;
    internal ITaskItem[] sources;
    internal string sourceLink;
    internal string subsystemVersion;
    internal bool tailcalls;
    internal string targetProfile;
    internal string targetType;
    internal string toolExe;
    internal string toolPath;
    internal bool treatWarningsAsErrors;
    internal bool useStandardResourceNames;
    internal string warningsAsErrors;
    internal string versionFile;
    internal string warningLevel;
    internal string win32res;
    internal string win32manifest;
    internal bool vserrors;
    internal string vslcid;
    internal bool utf8output;
    internal int init@123;
    public string BaseAddress { get; public set; }
    public string CodePage { get; public set; }
    public bool DebugSymbols { get; public set; }
    public string DebugType { get; public set; }
    public bool DelaySign { get; public set; }
    public string DisabledWarnings { get; public set; }
    public ITaskItem[] DefineConstants { get; public set; }
    public string DocumentationFile { get; public set; }
    public string DotnetFscCompilerPath { get; public set; }
    public bool EmbedAllSources { get; public set; }
    public string Embed { get; public set; }
    public string GenerateInterfaceFile { get; public set; }
    public string KeyFile { get; public set; }
    public string LCID { get; public set; }
    public bool NoFramework { get; public set; }
    public bool Optimize { get; public set; }
    public bool Tailcalls { get; public set; }
    public string OtherFlags { get; public set; }
    public string OutputAssembly { get; public set; }
    public string PdbFile { get; public set; }
    public string Platform { get; public set; }
    public bool Prefer32Bit { get; public set; }
    public string PreferredUILang { get; public set; }
    public bool ProvideCommandLineArgs { get; public set; }
    public bool PublicSign { get; public set; }
    public ITaskItem[] References { get; public set; }
    public string ReferencePath { get; public set; }
    public ITaskItem[] Resources { get; public set; }
    public bool SkipCompilerExecution { get; public set; }
    public string SourceLink { get; public set; }
    public ITaskItem[] Sources { get; public set; }
    public string TargetProfile { get; public set; }
    public string TargetType { get; public set; }
    public bool TreatWarningsAsErrors { get; public set; }
    public string ToolPath { get; public set; }
    public bool UseStandardResourceNames { get; public set; }
    public string VersionFile { get; public set; }
    public string Win32ResourceFile { get; public set; }
    public string Win32ManifestFile { get; public set; }
    public string WarningLevel { get; public set; }
    public string WarningsAsErrors { get; public set; }
    public bool VisualStudioStyleErrors { get; public set; }
    public bool Utf8Output { get; public set; }
    public string SubsystemVersion { get; public set; }
    public bool HighEntropyVA { get; public set; }
    [OutputAttribute]
public ITaskItem[] CommandLineArgs { get; public set; }
    public string ToolName { get; }
    public Encoding StandardErrorEncoding { get; }
    public Encoding StandardOutputEncoding { get; }
    public string get_BaseAddress();
    public void set_BaseAddress(string s);
    public string get_CodePage();
    public void set_CodePage(string s);
    public bool get_DebugSymbols();
    public void set_DebugSymbols(bool b);
    public string get_DebugType();
    public void set_DebugType(string s);
    public bool get_DelaySign();
    public void set_DelaySign(bool s);
    public string get_DisabledWarnings();
    public void set_DisabledWarnings(string a);
    public ITaskItem[] get_DefineConstants();
    public void set_DefineConstants(ITaskItem[] a);
    public string get_DocumentationFile();
    public void set_DocumentationFile(string s);
    public string get_DotnetFscCompilerPath();
    public void set_DotnetFscCompilerPath(string p);
    public bool get_EmbedAllSources();
    public void set_EmbedAllSources(bool s);
    public string get_Embed();
    public void set_Embed(string e);
    public string get_GenerateInterfaceFile();
    public void set_GenerateInterfaceFile(string s);
    public string get_KeyFile();
    public void set_KeyFile(string s);
    public string get_LCID();
    public void set_LCID(string p);
    public bool get_NoFramework();
    public void set_NoFramework(bool b);
    public bool get_Optimize();
    public void set_Optimize(bool p);
    public bool get_Tailcalls();
    public void set_Tailcalls(bool p);
    public string get_OtherFlags();
    public void set_OtherFlags(string s);
    public string get_OutputAssembly();
    public void set_OutputAssembly(string s);
    public string get_PdbFile();
    public void set_PdbFile(string s);
    public string get_Platform();
    public void set_Platform(string s);
    public bool get_Prefer32Bit();
    public void set_Prefer32Bit(bool s);
    public string get_PreferredUILang();
    public void set_PreferredUILang(string s);
    public bool get_ProvideCommandLineArgs();
    public void set_ProvideCommandLineArgs(bool p);
    public bool get_PublicSign();
    public void set_PublicSign(bool s);
    public ITaskItem[] get_References();
    public void set_References(ITaskItem[] a);
    public string get_ReferencePath();
    public void set_ReferencePath(string s);
    public ITaskItem[] get_Resources();
    public void set_Resources(ITaskItem[] a);
    public bool get_SkipCompilerExecution();
    public void set_SkipCompilerExecution(bool p);
    public string get_SourceLink();
    public void set_SourceLink(string s);
    public ITaskItem[] get_Sources();
    public void set_Sources(ITaskItem[] a);
    public string get_TargetProfile();
    public void set_TargetProfile(string p);
    public string get_TargetType();
    public void set_TargetType(string s);
    public bool get_TreatWarningsAsErrors();
    public void set_TreatWarningsAsErrors(bool p);
    public string get_ToolPath();
    public void set_ToolPath(string s);
    public bool get_UseStandardResourceNames();
    public void set_UseStandardResourceNames(bool s);
    public string get_VersionFile();
    public void set_VersionFile(string s);
    public string get_Win32ResourceFile();
    public void set_Win32ResourceFile(string s);
    public string get_Win32ManifestFile();
    public void set_Win32ManifestFile(string m);
    public string get_WarningLevel();
    public void set_WarningLevel(string s);
    public string get_WarningsAsErrors();
    public void set_WarningsAsErrors(string s);
    public bool get_VisualStudioStyleErrors();
    public void set_VisualStudioStyleErrors(bool p);
    public bool get_Utf8Output();
    public void set_Utf8Output(bool p);
    public string get_SubsystemVersion();
    public void set_SubsystemVersion(string p);
    public bool get_HighEntropyVA();
    public void set_HighEntropyVA(bool p);
    public ITaskItem[] get_CommandLineArgs();
    public void set_CommandLineArgs(ITaskItem[] p);
    public virtual string get_ToolName();
    public virtual Encoding get_StandardErrorEncoding();
    public virtual Encoding get_StandardOutputEncoding();
    public virtual string GenerateFullPathToTool();
    internal string InternalGenerateFullPathToTool();
    internal int BaseExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    public virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    public virtual string GenerateCommandLineCommands();
    public virtual string GenerateResponseFileCommands();
    internal string InternalGenerateCommandLineCommands();
    internal string InternalGenerateResponseFileCommands();
    internal int InternalExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    internal String[] GetCapturedArguments();
    [CompilerGeneratedAttribute]
internal FscCommandLineBuilder generateCommandLineBuilder();
}
[CompilationMappingAttribute("3")]
public class Microsoft.FSharp.Build.FscCommandLineBuilder : object {
    internal CommandLineBuilder builder;
    internal FSharpList`1<string> args;
    internal FSharpList`1<string> srcs;
    public FSharpList`1<string> CapturedArguments();
    public FSharpList`1<string> CapturedFilenames();
    public virtual string ToString();
    public void AppendFileNamesIfNotNull(ITaskItem[] filenames, string sep);
    public void AppendSwitchIfNotNull(string switch, String[] values, string sep);
    public void AppendSwitchIfNotNull(string switch, string value, FSharpOption`1<String[]> metadataNames);
    public void AppendSwitchUnquotedIfNotNull(string switch, string value);
    public void AppendSwitch(string switch);
    internal String[] GetCapturedArguments();
}
