public class Microsoft.DocAsCode.Exceptions.ExtractMetadataException : DocfxException {
    public ExtractMetadataException(string message);
    public ExtractMetadataException(string message, Exception innerException);
    protected ExtractMetadataException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.BuildMembers : object {
    public sealed virtual void Run(MetadataModel yaml, ResolverContext context);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.BuildToc : object {
    public sealed virtual void Run(MetadataModel yaml, ResolverContext context);
}
internal class Microsoft.DocAsCode.Metadata.ManagedReference.CommentIdAndComment : object {
    [CompilerGeneratedAttribute]
private string <CommentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string CommentId { get; public set; }
    public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommentId();
    [CompilerGeneratedAttribute]
public void set_CommentId(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
}
internal class Microsoft.DocAsCode.Metadata.ManagedReference.CommentIdAndReader : object {
    [CompilerGeneratedAttribute]
private string <CommentId>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlReader <Reader>k__BackingField;
    public string CommentId { get; public set; }
    public XmlReader Reader { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommentId();
    [CompilerGeneratedAttribute]
public void set_CommentId(string value);
    [CompilerGeneratedAttribute]
public XmlReader get_Reader();
    [CompilerGeneratedAttribute]
public void set_Reader(XmlReader value);
    public CommentIdAndComment ToCommentIdAndComment();
}
internal static class Microsoft.DocAsCode.Metadata.ManagedReference.CompilationUtility : object {
    private static Lazy`1<MetadataReference> MscorlibMetadataReference;
    private static Lazy`1<MetadataReference> SystemMetadataReference;
    private static CompilationUtility();
    public static Compilation CreateCompilationFromCsharpCode(string code);
    public static Compilation CreateCompilationFromVBCode(string code);
    public static Compilation CreateCompilationFromAssembly(IEnumerable`1<string> assemblyPaths);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.CompilationUtility/<GetAssemblyFromAssemblyComplation>d__5")]
public static IEnumerable`1<ValueTuple`2<MetadataReference, IAssemblySymbol>> GetAssemblyFromAssemblyComplation(Compilation assemblyCompilation, IReadOnlyCollection`1<string> assemblyPaths);
    private static string GetAbbreviateString(string input, int length);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.CopyInherited : object {
    public sealed virtual void Run(MetadataModel yaml, ResolverContext context);
    private static void InheritDoc(MetadataItem dest, ResolverContext context);
    private static void Copy(MetadataItem dest, string srcName, ResolverContext context);
    private static void Copy(MetadataItem dest, MetadataItem src, ResolverContext context);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.EnvironmentScope : object {
    private Dictionary`2<string, string> _originalEnvValues;
    public EnvironmentScope(Dictionary`2<string, string> envValues);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.DocAsCode.Metadata.ManagedReference.Extensions : object {
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.Extensions/<Elements>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<XmlReader> Elements(XmlReader reader, string name);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.Extensions/<ProtectResource>d__1`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> ProtectResource(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> EmptyIfThrow(Func`1<T> func);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ExtractMetadataInputModel : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveRawInlineComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceRebuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldSkipMarkup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCompatibilityFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GlobalNamespaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeSourceBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDefaultFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <MSBuildProperties>k__BackingField;
    public List`1<string> Files { get; public set; }
    public List`1<string> References { get; public set; }
    public string OutputFolder { get; public set; }
    public bool PreserveRawInlineComments { get; public set; }
    public bool ForceRebuild { get; public set; }
    public bool ShouldSkipMarkup { get; public set; }
    public string FilterConfigFile { get; public set; }
    public bool UseCompatibilityFileName { get; public set; }
    public string GlobalNamespaceId { get; public set; }
    public string CodeSourceBasePath { get; public set; }
    public bool DisableDefaultFilter { get; public set; }
    public Dictionary`2<string, string> MSBuildProperties { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_References();
    [CompilerGeneratedAttribute]
public void set_References(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_OutputFolder();
    [CompilerGeneratedAttribute]
public void set_OutputFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_PreserveRawInlineComments();
    [CompilerGeneratedAttribute]
public void set_PreserveRawInlineComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceRebuild();
    [CompilerGeneratedAttribute]
public void set_ForceRebuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldSkipMarkup();
    [CompilerGeneratedAttribute]
public void set_ShouldSkipMarkup(bool value);
    [CompilerGeneratedAttribute]
public string get_FilterConfigFile();
    [CompilerGeneratedAttribute]
public void set_FilterConfigFile(string value);
    [CompilerGeneratedAttribute]
public bool get_UseCompatibilityFileName();
    [CompilerGeneratedAttribute]
public void set_UseCompatibilityFileName(bool value);
    [CompilerGeneratedAttribute]
public string get_GlobalNamespaceId();
    [CompilerGeneratedAttribute]
public void set_GlobalNamespaceId(string value);
    [CompilerGeneratedAttribute]
public string get_CodeSourceBasePath();
    [CompilerGeneratedAttribute]
public void set_CodeSourceBasePath(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableDefaultFilter();
    [CompilerGeneratedAttribute]
public void set_DisableDefaultFilter(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_MSBuildProperties();
    [CompilerGeneratedAttribute]
public void set_MSBuildProperties(Dictionary`2<string, string> value);
    public virtual string ToString();
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ExtractMetadataWorker : object {
    private static string XmlCommentFileExtension;
    private Dictionary`2<FileType, List`1<FileInformation>> _files;
    private List`1<string> _references;
    private bool _rebuild;
    private bool _useCompatibilityFileName;
    private string _outputFolder;
    private ExtractMetadataOptions _options;
    private AbstractProjectLoader _loader;
    private Lazy`1<MSBuildWorkspace> _workspace;
    internal static string IndexFileName;
    public ExtractMetadataWorker(ExtractMetadataInputModel input);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.ExtractMetadataWorker/<ExtractMetadataAsync>d__11")]
public Task ExtractMetadataAsync();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.ExtractMetadataWorker/<SaveAllMembersFromCacheAsync>d__13")]
private Task SaveAllMembersFromCacheAsync();
    private static void FillProjectDependencyGraph(ConcurrentDictionary`2<string, AbstractProject> projectCache, ConcurrentDictionary`2<string, List`1<string>> projectDependencyGraph, AbstractProject project);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.ExtractMetadataWorker/<GetTransitiveProjectReferences>d__15")]
private static IEnumerable`1<string> GetTransitiveProjectReferences(ConcurrentDictionary`2<string, AbstractProject> projectCache, AbstractProject project);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.ExtractMetadataWorker/<GetProjectCompilationAsync>d__16")]
private static Task`1<ConcurrentDictionary`2<string, AbstractCompilation>> GetProjectCompilationAsync(ConcurrentDictionary`2<string, AbstractProject> projectCache);
    private static void CopyFromCachedResult(BuildInfo buildInfo, IEnumerable`1<string> inputs, string outputFolder);
    private Tuple`2<MetadataItem, bool> GetMetadataFromProjectLevelCache(IBuildController controller, IInputParameters key);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.ExtractMetadataWorker/<ResolveAndExportYamlMetadata>d__19")]
private static IEnumerable`1<string> ResolveAndExportYamlMetadata(Dictionary`2<string, MetadataItem> allMembers, Dictionary`2<string, ReferenceItem> allReferences, string folder, bool preserveRawInlineComments, bool shouldSkipMarkup, bool useCompatibilityFileName);
    private static void CleanupHistoricalFile(string outputFolder);
    private static string GetUniqueFileNameWithSuffix(string fileName, Dictionary`2<string, int> existingFileNames);
    private static void AddMemberToIndexer(MetadataItem memberModel, string outputPath, ApiReferenceViewModel indexer);
    private static Dictionary`2<string, MetadataItem> MergeYamlProjectMetadata(List`1<MetadataItem> projectMetadataList);
    private static bool TryParseYamlMetadataFile(string metadataFileName, MetadataItem& projectMetadata);
    private static Dictionary`2<string, ReferenceItem> MergeYamlProjectReferences(List`1<MetadataItem> projectMetadataList);
    [AsyncStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.ExtractMetadataWorker/<GetSolutionAsync>d__26")]
private Task`1<Solution> GetSolutionAsync(string path);
    private AbstractProject GetProject(ConcurrentDictionary`2<string, AbstractProject> cache, string path);
    private static IEnumerable`1<string> GetTopologicalSortedItems(IDictionary`2<string, List`1<string>> graph);
    private static void DepthFirstTraverse(IDictionary`2<string, List`1<string>> graph, string start, HashSet`1<string> visited, List`1<string> result);
    private static string GetPrintableFileList(IEnumerable`1<FileInformation> files);
    private static IEnumerable`1<string> GetCacheKey(IEnumerable`1<FileInformation> files);
}
internal class Microsoft.DocAsCode.Metadata.ManagedReference.FileInformation : object {
    [CompilerGeneratedAttribute]
private FileType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NormalizedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawPath>k__BackingField;
    public FileType Type { get; }
    public string NormalizedPath { get; }
    public string RawPath { get; }
    public FileInformation(string raw);
    [CompilerGeneratedAttribute]
public FileType get_Type();
    [CompilerGeneratedAttribute]
public string get_NormalizedPath();
    [CompilerGeneratedAttribute]
public string get_RawPath();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private static string Normalize(string path);
    private static FileType GetFileType(string filePath);
}
internal enum Microsoft.DocAsCode.Metadata.ManagedReference.FileType : Enum {
    public int value__;
    public static FileType NotSupported;
    public static FileType Solution;
    public static FileType Project;
    public static FileType VBSourceCode;
    public static FileType CSSourceCode;
    public static FileType Assembly;
}
public interface Microsoft.DocAsCode.Metadata.ManagedReference.IResolverPipeline {
    public abstract virtual void Run(MetadataModel yaml, ResolverContext context);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.LayoutCheckAndCleanup : object {
    public sealed virtual void Run(MetadataModel yaml, ResolverContext context);
    private string CheckNamespaces(MetadataItem member);
    private string CheckNamespaceMembers(MetadataItem member);
    private string CheckNamespaceMembersMembers(MetadataItem member);
}
public static class Microsoft.DocAsCode.Metadata.ManagedReference.MergeCommentsHelper : object {
    public static void MergeComments(ExtractMetadataOptions options, MetadataItem item, IEnumerable`1<string> commentFiles);
    private static void RebuildReference(MetadataItem assembly);
    private static void RebuildReference(MetadataItem item, Dictionary`2<string, ReferenceItem> references);
    private static void AddReference(string id, string commentId, Dictionary`2<string, ReferenceItem> references);
    private static void PatchMetadataItem(ExtractMetadataOptions options, MetadataItem assembly, IEnumerable`1<CommentIdAndComment> list);
    private static void GetAllItemByCommentId(Dictionary`2<string, MetadataItem> items, MetadataItem item);
    private static void PatchViewModel(ExtractMetadataOptions options, MetadataItem item, string comment);
    private static IEnumerable`1<CommentIdAndReader> EnumerateDeveloperComments(string file);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.MSBuildEnvironmentScope : object {
    private static string MSBuildExePathKey;
    private EnvironmentScope _innerScope;
    private EnvironmentScope GetScope();
    public sealed virtual void Dispose();
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.NormalizeSyntax : object {
    public sealed virtual void Run(MetadataModel yaml, ResolverContext context);
    private static string NormalizeLines(string content);
}
internal class Microsoft.DocAsCode.Metadata.ManagedReference.ProjectDocumentCache : object {
    private ConcurrentDictionary`2<string, HashSet`1<string>> _cache;
    public IDictionary`2<string, List`1<string>> Cache { get; }
    public IEnumerable`1<string> Documents { get; }
    public ProjectDocumentCache(IDictionary`2<string, List`1<string>> inputs);
    public IDictionary`2<string, List`1<string>> get_Cache();
    public IEnumerable`1<string> get_Documents();
    public void AddDocuments(IEnumerable`1<string> documents);
    public void AddDocuments(string projectPath, IEnumerable`1<string> documents);
    public void AddDocument(string projectPath, string document);
    public IEnumerable`1<string> GetDocuments(string projectPath);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ResolverContext : object {
    [CompilerGeneratedAttribute]
private bool <PreserveRawInlineComments>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ReferenceItem> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, MetadataItem> <Members>k__BackingField;
    public bool PreserveRawInlineComments { get; public set; }
    public Dictionary`2<string, ReferenceItem> References { get; public set; }
    public Dictionary`2<string, MetadataItem> Members { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PreserveRawInlineComments();
    [CompilerGeneratedAttribute]
public void set_PreserveRawInlineComments(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ReferenceItem> get_References();
    [CompilerGeneratedAttribute]
public void set_References(Dictionary`2<string, ReferenceItem> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MetadataItem> get_Members();
    [CompilerGeneratedAttribute]
public void set_Members(Dictionary`2<string, MetadataItem> value);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.ResolveReference : object {
    public sealed virtual void Run(MetadataModel yaml, ResolverContext context);
    private static void TryAddReference(ResolverContext context, MetadataItem page, List`1<ReferenceItem> addingReferences, string key);
    private void AddIndirectReference(ResolverContext context, MetadataItem page, List`1<ReferenceItem> addedReferences);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.ResolveReference/<GetReferenceKeys>d__3")]
private IEnumerable`1<string> GetReferenceKeys(MetadataItem current);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.Metadata.ManagedReference.ResolveReference/<GetReferenceKeys>d__4")]
private IEnumerable`1<string> GetReferenceKeys(ReferenceItem reference);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.SetDerivedClass : object {
    private Dictionary`2<string, List`1<string>> _derivedClassMapping;
    public sealed virtual void Run(MetadataModel yaml, ResolverContext context);
    private void UpdateDerivedClassMapping(List`1<MetadataItem> items, Dictionary`2<string, ReferenceItem> reference);
    private void AppendDerivedClass(List`1<MetadataItem> items);
}
public class Microsoft.DocAsCode.Metadata.ManagedReference.SetParent : object {
    public sealed virtual void Run(MetadataModel yaml, ResolverContext context);
}
internal enum Microsoft.DocAsCode.Metadata.ManagedReference.SupportedSourceType : Enum {
    public int value__;
    public static SupportedSourceType VBSourceCode;
    public static SupportedSourceType VBProject;
    public static SupportedSourceType CSharpSourceCode;
    public static SupportedSourceType CSharpProject;
    public static SupportedSourceType Solution;
}
public static class Microsoft.DocAsCode.Metadata.ManagedReference.YamlMetadataResolver : object {
    private static List`1<IResolverPipeline> pipelines;
    private static YamlMetadataResolver();
    public static MetadataModel ResolveMetadata(Dictionary`2<string, MetadataItem> allMembers, Dictionary`2<string, ReferenceItem> allReferences, bool preserveRawInlineComments);
    public static void ExecutePipeline(MetadataModel yaml, ResolverContext context);
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.Metadata.ManagedReference.YamlViewModelExtensions : object {
    [ExtensionAttribute]
public static bool IsPageLevel(MemberType type);
    [ExtensionAttribute]
public static bool AllowMultipleItems(MemberType type);
    [ExtensionAttribute]
public static MetadataItem ShrinkToSimpleToc(MetadataItem item);
    [ExtensionAttribute]
public static MetadataItem ShrinkToSimpleTocWithNamespaceNotEmpty(MetadataItem item);
    [ExtensionAttribute]
public static TocViewModel ToTocViewModel(MetadataItem item);
    [ExtensionAttribute]
public static TocItemViewModel ToTocItemViewModel(MetadataItem item);
    [ExtensionAttribute]
public static PageViewModel ToPageViewModel(MetadataItem model);
    private static ReferenceViewModel ToReferenceViewModel(KeyValuePair`2<string, ReferenceItem> model);
    [ExtensionAttribute]
public static ItemViewModel ToItemViewModel(MetadataItem model);
    [ExtensionAttribute]
public static SyntaxDetailViewModel ToSyntaxDetailViewModel(SyntaxDetail model);
    [ExtensionAttribute]
public static SpecViewModel ToSpecViewModel(LinkItem model);
    [ExtensionAttribute]
public static TValue GetLanguageProperty(SortedList`2<SyntaxLanguage, TValue> dict, SyntaxLanguage language, TValue defaultValue);
    private static void AddChildren(MetadataItem model, PageViewModel result);
    private static string GetName(ReferenceItem reference, SyntaxLanguage language, Converter`2<LinkItem, string> getName);
    private static List`1<SpecViewModel> GetSpec(ReferenceItem reference, SyntaxLanguage language);
    private static Nullable`1<bool> GetIsExternal(ReferenceItem reference);
    private static string GetHref(ReferenceItem reference);
}
