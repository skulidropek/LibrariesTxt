public enum Microsoft.DocAsCode.Plugins.BuildPhase : Enum {
    public int value__;
    public static BuildPhase Compile;
    public static BuildPhase Link;
    [ObsoleteAttribute]
public static BuildPhase PreBuildBuild;
    [ObsoleteAttribute]
public static BuildPhase PostBuild;
}
public class Microsoft.DocAsCode.Plugins.DefaultFileAbstractLayer : object {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanWrite();
    public sealed virtual IEnumerable`1<string> GetAllInputFiles();
    public sealed virtual bool Exists(string file);
    public sealed virtual Stream OpenRead(string file);
    public sealed virtual Stream Create(string file);
    public sealed virtual void Copy(string sourceFileName, string destFileName);
    public sealed virtual ImmutableDictionary`2<string, string> GetProperties(string file);
    public sealed virtual string GetPhysicalPath(string file);
    public string GetOutputPhysicalPath(string file);
    public sealed virtual IEnumerable`1<string> GetExpectedPhysicalPath(string file);
}
public static class Microsoft.DocAsCode.Plugins.DependencyItemSourceType : object {
    public static string File;
    public static string Uid;
}
public enum Microsoft.DocAsCode.Plugins.DependencyTransitivity : Enum {
    public int value__;
    public static DependencyTransitivity None;
    public static DependencyTransitivity SameType;
    public static DependencyTransitivity All;
    public static DependencyTransitivity Never;
}
public class Microsoft.DocAsCode.Plugins.DependencyType : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildPhase <Phase>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyTransitivity <Transitivity>k__BackingField;
    public string Name { get; public set; }
    public BuildPhase Phase { get; public set; }
    public DependencyTransitivity Transitivity { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public BuildPhase get_Phase();
    [CompilerGeneratedAttribute]
public void set_Phase(BuildPhase value);
    [CompilerGeneratedAttribute]
public DependencyTransitivity get_Transitivity();
    [CompilerGeneratedAttribute]
public void set_Transitivity(DependencyTransitivity value);
    public bool CouldTransit(DependencyType other);
}
public static class Microsoft.DocAsCode.Plugins.DependencyTypeName : object {
    public static string Uid;
    public static string Include;
    public static string File;
    public static string Overwrite;
    public static string OverwriteFragments;
    public static string Bookmark;
    public static string Metadata;
    public static string Reference;
    public static string Children;
}
public class Microsoft.DocAsCode.Plugins.DictionaryAsListJsonConverter`1 : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private KeyValuePair`2<string, T> ParseItem(JToken item, JsonSerializer serializer);
}
public class Microsoft.DocAsCode.Plugins.DocumentException : Exception {
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public string File { get; public set; }
    public int Line { get; public set; }
    public int Column { get; public set; }
    public DocumentException(string message);
    public DocumentException(string message, Exception inner);
    protected DocumentException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static void RunAll(Action[] actions);
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.Plugins.DocumentExceptionExtensions : object {
    [ExtensionAttribute]
public static TResult[] RunAll(IReadOnlyList`1<TElement> elements, Func`2<TElement, TResult> func);
    [ExtensionAttribute]
public static void RunAll(IReadOnlyList`1<TElement> elements, Action`1<TElement> action);
    [ExtensionAttribute]
public static void RunAll(IEnumerable`1<TElement> elements, Action`1<TElement> action);
    [ExtensionAttribute]
public static void RunAll(IReadOnlyList`1<TElement> elements, Action`1<TElement> action, int parallelism);
    [ExtensionAttribute]
public static void RunAll(IEnumerable`1<TElement> elements, Action`1<TElement> action, int parallelism);
}
public enum Microsoft.DocAsCode.Plugins.DocumentType : Enum {
    public int value__;
    public static DocumentType Article;
    public static DocumentType Overwrite;
    public static DocumentType Resource;
    public static DocumentType Metadata;
    public static DocumentType MarkdownFragments;
}
public static class Microsoft.DocAsCode.Plugins.EnvironmentContext : object {
    private static string _baseDirectory;
    private static string _outputDirectory;
    private static string _version;
    private static bool _disableGitFeatures;
    [CompilerGeneratedAttribute]
private static IFileAbstractLayer <FileAbstractLayerImpl>k__BackingField;
    public static string BaseDirectory { get; }
    public static string OutputDirectory { get; }
    public static IFileAbstractLayer FileAbstractLayer { get; }
    [EditorBrowsableAttribute("1")]
public static IFileAbstractLayer FileAbstractLayerImpl { get; public set; }
    public static string Version { get; }
    public static bool GitFeaturesDisabled { get; }
    public static string get_BaseDirectory();
    [EditorBrowsableAttribute("1")]
public static void SetBaseDirectory(string dir);
    public static string get_OutputDirectory();
    [EditorBrowsableAttribute("1")]
public static void SetOutputDirectory(string dir);
    public static IFileAbstractLayer get_FileAbstractLayer();
    [CompilerGeneratedAttribute]
public static IFileAbstractLayer get_FileAbstractLayerImpl();
    [CompilerGeneratedAttribute]
public static void set_FileAbstractLayerImpl(IFileAbstractLayer value);
    public static string get_Version();
    [EditorBrowsableAttribute("1")]
public static void SetVersion(string version);
    public static bool get_GitFeaturesDisabled();
    [EditorBrowsableAttribute("1")]
public static void SetGitFeaturesDisabled(bool disabled);
    [EditorBrowsableAttribute("1")]
public static void Clean();
}
[ExtensionAttribute]
public static class Microsoft.DocAsCode.Plugins.FileAbstractLayerExtensions : object {
    [ExtensionAttribute]
public static StreamReader OpenReadText(IFileAbstractLayer fal, string file);
    [ExtensionAttribute]
public static string ReadAllText(IFileAbstractLayer fal, string file);
    [ExtensionAttribute]
public static String[] ReadAllLines(IFileAbstractLayer fal, string file);
    [ExtensionAttribute]
public static StreamWriter CreateText(IFileAbstractLayer fal, string file);
    [ExtensionAttribute]
public static void WriteAllText(IFileAbstractLayer fal, string file, string content);
    [ExtensionAttribute]
public static bool HasProperty(IFileAbstractLayer fal, string file, string propertyName);
    [ExtensionAttribute]
public static string GetProperty(IFileAbstractLayer fal, string file, string propertyName);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetAllPhysicalPaths(IFileAbstractLayer fal);
}
public class Microsoft.DocAsCode.Plugins.FileAndType : object {
    [CompilerGeneratedAttribute]
private StringComparer <StringComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationDir>k__BackingField;
    [JsonIgnoreAttribute]
public StringComparer StringComparer { get; }
    [JsonPropertyAttribute("baseDir")]
public string BaseDir { get; }
    [JsonPropertyAttribute("file")]
public string File { get; }
    [JsonIgnoreAttribute]
public string FullPath { get; }
    [JsonPropertyAttribute("type")]
public DocumentType Type { get; }
    [JsonPropertyAttribute("sourceDir")]
public string SourceDir { get; public set; }
    [JsonPropertyAttribute("destinationDir")]
public string DestinationDir { get; public set; }
    [JsonConstructorAttribute]
public FileAndType(string baseDir, string file, DocumentType type, string sourceDir, string destinationDir);
    [CompilerGeneratedAttribute]
public StringComparer get_StringComparer();
    [CompilerGeneratedAttribute]
public string get_BaseDir();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public DocumentType get_Type();
    [CompilerGeneratedAttribute]
public string get_SourceDir();
    [CompilerGeneratedAttribute]
public void set_SourceDir(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationDir();
    [CompilerGeneratedAttribute]
public void set_DestinationDir(string value);
    public FileAndType ChangeBaseDir(string baseDir);
    public FileAndType ChangeFile(string file);
    public FileAndType ChangeType(DocumentType type);
    public sealed virtual bool Equals(FileAndType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(FileAndType left, FileAndType right);
    public static bool op_Inequality(FileAndType left, FileAndType right);
    private static StringComparer GetStringComparer();
}
public class Microsoft.DocAsCode.Plugins.FileIncrementalInfo : object {
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIncremental>k__BackingField;
    public string SourceFile { get; public set; }
    public bool IsIncremental { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
public void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIncremental();
    [CompilerGeneratedAttribute]
public void set_IsIncremental(bool value);
}
public class Microsoft.DocAsCode.Plugins.FileModel : object {
    private ImmutableArray`1<UidDefinition> _uids;
    [CompilerGeneratedAttribute]
private FileAndType <FileAndType>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAndType <OriginalFileAndType>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelWithCache <ModelWithCache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<string> <LinkToFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<string> <LinkToUids>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> <UidLinkSources>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> <FileLinkSources>k__BackingField;
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <Properties>k__BackingField;
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <ManifestProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private FileModel <MarkdownFragmentsModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentType>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs`1<ImmutableArray`1<UidDefinition>>> UidsChanged;
    [CompilerGeneratedAttribute]
private EventHandler FileOrBaseDirChanged;
    public FileAndType FileAndType { get; private set; }
    public FileAndType OriginalFileAndType { get; private set; }
    public IFormatter Serializer { get; public set; }
    public ModelWithCache ModelWithCache { get; }
    public object Content { get; public set; }
    public string BaseDir { get; public set; }
    public string File { get; public set; }
    public DocumentType Type { get; }
    public string Key { get; }
    public ImmutableHashSet`1<string> LinkToFiles { get; public set; }
    public ImmutableHashSet`1<string> LinkToUids { get; public set; }
    public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> UidLinkSources { get; public set; }
    public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> FileLinkSources { get; public set; }
    [DynamicAttribute]
public object Properties { get; }
    [DynamicAttribute]
public object ManifestProperties { get; }
    public FileModel MarkdownFragmentsModel { get; public set; }
    public string LocalPathFromRoot { get; public set; }
    public string DocumentType { get; public set; }
    public ImmutableArray`1<UidDefinition> Uids { get; public set; }
    public FileModel(FileAndType ft, object content, FileAndType original, IFormatter serializer);
    public FileModel(FileAndType ft, object content, FileAndType original, IFormatter serializer, string key);
    [CompilerGeneratedAttribute]
public FileAndType get_FileAndType();
    [CompilerGeneratedAttribute]
private void set_FileAndType(FileAndType value);
    [CompilerGeneratedAttribute]
public FileAndType get_OriginalFileAndType();
    [CompilerGeneratedAttribute]
private void set_OriginalFileAndType(FileAndType value);
    public IFormatter get_Serializer();
    public void set_Serializer(IFormatter value);
    [CompilerGeneratedAttribute]
public ModelWithCache get_ModelWithCache();
    public object get_Content();
    public void set_Content(object value);
    public string get_BaseDir();
    public void set_BaseDir(string value);
    public string get_File();
    public void set_File(string value);
    public DocumentType get_Type();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public ImmutableHashSet`1<string> get_LinkToFiles();
    [CompilerGeneratedAttribute]
public void set_LinkToFiles(ImmutableHashSet`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableHashSet`1<string> get_LinkToUids();
    [CompilerGeneratedAttribute]
public void set_LinkToUids(ImmutableHashSet`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> get_UidLinkSources();
    [CompilerGeneratedAttribute]
public void set_UidLinkSources(ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> get_FileLinkSources();
    [CompilerGeneratedAttribute]
public void set_FileLinkSources(ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> value);
    [CompilerGeneratedAttribute]
public object get_Properties();
    [CompilerGeneratedAttribute]
public object get_ManifestProperties();
    [CompilerGeneratedAttribute]
public FileModel get_MarkdownFragmentsModel();
    [CompilerGeneratedAttribute]
public void set_MarkdownFragmentsModel(FileModel value);
    public string get_LocalPathFromRoot();
    public void set_LocalPathFromRoot(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentType();
    [CompilerGeneratedAttribute]
public void set_DocumentType(string value);
    public ImmutableArray`1<UidDefinition> get_Uids();
    public void set_Uids(ImmutableArray`1<UidDefinition> value);
    [CompilerGeneratedAttribute]
public void add_UidsChanged(EventHandler`1<PropertyChangedEventArgs`1<ImmutableArray`1<UidDefinition>>> value);
    [CompilerGeneratedAttribute]
public void remove_UidsChanged(EventHandler`1<PropertyChangedEventArgs`1<ImmutableArray`1<UidDefinition>>> value);
    [CompilerGeneratedAttribute]
public void add_FileOrBaseDirChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FileOrBaseDirChanged(EventHandler value);
    public void add_ContentAccessed(EventHandler value);
    public void remove_ContentAccessed(EventHandler value);
    public sealed virtual void Dispose();
    private void OnUidsChanged(string propertyName, ImmutableArray`1<UidDefinition> original, ImmutableArray`1<UidDefinition> current);
    private void OnFileOrBaseDirChanged();
}
public class Microsoft.DocAsCode.Plugins.GroupInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <XRefTags>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    public string Name { get; public set; }
    public string Destination { get; public set; }
    public List`1<string> XRefTags { get; public set; }
    public Dictionary`2<string, object> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_XRefTags();
    [CompilerGeneratedAttribute]
public void set_XRefTags(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
}
public class Microsoft.DocAsCode.Plugins.HomepageInfo : object {
    [CompilerGeneratedAttribute]
private string <TocPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [JsonPropertyAttribute("tocPath")]
public string TocPath { get; public set; }
    [JsonPropertyAttribute("homepage")]
public string Homepage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TocPath();
    [CompilerGeneratedAttribute]
public void set_TocPath(string value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
}
public interface Microsoft.DocAsCode.Plugins.IBuildParameters {
    public IReadOnlyDictionary`2<string, JArray> TagParameters { get; }
    public abstract virtual IReadOnlyDictionary`2<string, JArray> get_TagParameters();
}
public interface Microsoft.DocAsCode.Plugins.ICanTraceContextInfoBuildStep {
    public abstract virtual void SaveContext(Stream stream);
    public abstract virtual void LoadContext(Stream stream);
}
public interface Microsoft.DocAsCode.Plugins.ICompositionContainer {
    public abstract virtual T GetExport();
    public abstract virtual T GetExport(string name);
    public abstract virtual IEnumerable`1<T> GetExports();
    public abstract virtual IEnumerable`1<T> GetExports(string name);
}
public interface Microsoft.DocAsCode.Plugins.ICustomHrefGenerator {
    public abstract virtual string GenerateHref(IFileLinkInfo href);
}
public interface Microsoft.DocAsCode.Plugins.ICustomMarkdownTagValidator {
    public abstract virtual bool Validate(string tag);
}
public interface Microsoft.DocAsCode.Plugins.IDocumentBuildContext {
    public string RootTocPath { get; }
    public string VersionName { get; }
    public string VersionFolder { get; }
    public GroupInfo GroupInfo { get; }
    public ICustomHrefGenerator HrefGenerator { get; }
    public abstract virtual string GetFilePath(string key);
    public abstract virtual void SetFilePath(string key, string filePath);
    public abstract virtual XRefSpec GetXrefSpec(string uid);
    public abstract virtual void RegisterInternalXrefSpec(XRefSpec xrefSpec);
    public abstract virtual void RegisterInternalXrefSpecBookmark(string uid, string bookmark);
    public abstract virtual IImmutableList`1<string> GetTocFileKeySet(string key);
    public abstract virtual void RegisterToc(string tocFileKey, string fileKey);
    public abstract virtual void RegisterTocInfo(TocInfo toc);
    public abstract virtual IImmutableList`1<TocInfo> GetTocInfo();
    public abstract virtual string get_RootTocPath();
    public abstract virtual string get_VersionName();
    public abstract virtual string get_VersionFolder();
    public abstract virtual GroupInfo get_GroupInfo();
    public abstract virtual ICustomHrefGenerator get_HrefGenerator();
}
public interface Microsoft.DocAsCode.Plugins.IDocumentBuildStep {
    public string Name { get; }
    public int BuildOrder { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_BuildOrder();
    public abstract virtual IEnumerable`1<FileModel> Prebuild(ImmutableList`1<FileModel> models, IHostService host);
    public abstract virtual void Build(FileModel model, IHostService host);
    public abstract virtual void Postbuild(ImmutableList`1<FileModel> models, IHostService host);
}
public interface Microsoft.DocAsCode.Plugins.IDocumentProcessor {
    public string Name { get; }
    public IEnumerable`1<IDocumentBuildStep> BuildSteps { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<IDocumentBuildStep> get_BuildSteps();
    public abstract virtual ProcessingPriority GetProcessingPriority(FileAndType file);
    public abstract virtual FileModel Load(FileAndType file, ImmutableDictionary`2<string, object> metadata);
    public abstract virtual SaveResult Save(FileModel model);
    public abstract virtual void UpdateHref(FileModel model, IDocumentBuildContext context);
}
public interface Microsoft.DocAsCode.Plugins.IFileAbstractLayer {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public abstract virtual bool get_CanRead();
    public abstract virtual bool get_CanWrite();
    public abstract virtual IEnumerable`1<string> GetAllInputFiles();
    public abstract virtual bool Exists(string file);
    public abstract virtual Stream OpenRead(string file);
    public abstract virtual Stream Create(string file);
    public abstract virtual void Copy(string sourceFileName, string destFileName);
    public abstract virtual ImmutableDictionary`2<string, string> GetProperties(string file);
    public abstract virtual string GetPhysicalPath(string file);
    public abstract virtual IEnumerable`1<string> GetExpectedPhysicalPath(string file);
}
public interface Microsoft.DocAsCode.Plugins.IFileLinkInfo {
    public string FromFileInSource { get; }
    public string FromFileInDest { get; }
    public string ToFileInSource { get; }
    public string ToFileInDest { get; }
    public string FileLinkInSource { get; }
    public string FileLinkInDest { get; }
    public string Href { get; }
    public bool IsResolved { get; }
    public GroupInfo GroupInfo { get; }
    public abstract virtual string get_FromFileInSource();
    public abstract virtual string get_FromFileInDest();
    public abstract virtual string get_ToFileInSource();
    public abstract virtual string get_ToFileInDest();
    public abstract virtual string get_FileLinkInSource();
    public abstract virtual string get_FileLinkInDest();
    public abstract virtual string get_Href();
    public abstract virtual bool get_IsResolved();
    public abstract virtual GroupInfo get_GroupInfo();
}
public interface Microsoft.DocAsCode.Plugins.IHasIncrementalContext {
    public abstract virtual string GetIncrementalContextHash();
}
public interface Microsoft.DocAsCode.Plugins.IHostService {
    public IBuildParameters BuildParameters { get; }
    public ImmutableList`1<TreeItemRestructure> TableOfContentRestructions { get; public set; }
    public string VersionName { get; }
    public string VersionOutputFolder { get; }
    public GroupInfo GroupInfo { get; }
    public ImmutableDictionary`2<string, FileAndType> SourceFiles { get; }
    public ImmutableDictionary`2<string, FileIncrementalInfo> IncrementalInfos { get; }
    public IDocumentProcessor Processor { get; }
    public bool HasMetadataValidation { get; }
    public string MarkdownServiceName { get; }
    public abstract virtual IBuildParameters get_BuildParameters();
    public abstract virtual ImmutableList`1<TreeItemRestructure> get_TableOfContentRestructions();
    public abstract virtual void set_TableOfContentRestructions(ImmutableList`1<TreeItemRestructure> value);
    public abstract virtual string get_VersionName();
    public abstract virtual string get_VersionOutputFolder();
    public abstract virtual GroupInfo get_GroupInfo();
    public abstract virtual MarkupResult Parse(MarkupResult markupResult, FileAndType ft);
    public abstract virtual MarkupResult Markup(string markdown, FileAndType ft);
    public abstract virtual MarkupResult Markup(string markdown, FileAndType ft, bool omitParse);
    public abstract virtual MarkupResult Markup(string markdown, FileAndType ft, bool omitParse, bool enableValidation);
    public abstract virtual ImmutableDictionary`2<string, FileAndType> get_SourceFiles();
    public abstract virtual ImmutableDictionary`2<string, FileIncrementalInfo> get_IncrementalInfos();
    public abstract virtual ImmutableHashSet`1<string> GetAllUids();
    public abstract virtual ImmutableList`1<FileModel> GetModels(Nullable`1<DocumentType> type);
    public abstract virtual ImmutableList`1<FileModel> LookupByUid(string uid);
    public abstract virtual void ReportDependencyTo(FileModel currentFileModel, string to, string type);
    public abstract virtual void ReportDependencyTo(FileModel currentFileModel, string to, string toType, string type);
    public abstract virtual void ReportDependencyFrom(FileModel currentFileModel, string from, string type);
    public abstract virtual void ReportDependencyFrom(FileModel currentFileModel, string from, string fromType, string type);
    public abstract virtual void ReportReference(FileModel currentFileModel, string reference, string referenceType);
    public abstract virtual IDocumentProcessor get_Processor();
    public abstract virtual bool get_HasMetadataValidation();
    public abstract virtual void ValidateInputMetadata(string file, ImmutableDictionary`2<string, object> metadata);
    public abstract virtual string get_MarkdownServiceName();
    public abstract virtual void LogDiagnostic(string message, string file, string line);
    public abstract virtual void LogVerbose(string message, string file, string line);
    public abstract virtual void LogInfo(string message, string file, string line);
    public abstract virtual void LogSuggestion(string message, string file, string line);
    public abstract virtual void LogWarning(string message, string file, string line);
    public abstract virtual void LogError(string message, string file, string line);
}
public interface Microsoft.DocAsCode.Plugins.IInputMetadataValidator {
    public abstract virtual void Validate(string sourceFile, ImmutableDictionary`2<string, object> metadata);
}
public interface Microsoft.DocAsCode.Plugins.IMarkdownService {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual MarkupResult Markup(string src, string path);
    public abstract virtual MarkupResult Markup(string src, string path, bool enableValidation);
}
public interface Microsoft.DocAsCode.Plugins.IMarkdownServiceProvider {
    public abstract virtual IMarkdownService CreateMarkdownService(MarkdownServiceParameters parameters);
}
public class Microsoft.DocAsCode.Plugins.IncrementalInfo : object {
    private object _syncRoot;
    private SortedDictionary`2<string, IncrementalStatus> _processors;
    [CompilerGeneratedAttribute]
private IncrementalStatus <Status>k__BackingField;
    [JsonPropertyAttribute("status")]
public IncrementalStatus Status { get; }
    [JsonPropertyAttribute("processors")]
public IReadOnlyDictionary`2<string, IncrementalStatus> Processors { get; }
    [CompilerGeneratedAttribute]
public IncrementalStatus get_Status();
    public IReadOnlyDictionary`2<string, IncrementalStatus> get_Processors();
    public void ReportStatus(bool canIncremental, IncrementalPhase incrementalPhase, string details, string fullBuildReasonCode);
    public void ReportProcessorStatus(string processor, bool canIncremental, string details, string fullBuildReasonCode);
    public void ReportProcessorFileCount(string processor, long totalFileCount, long skippedFileCount);
}
public enum Microsoft.DocAsCode.Plugins.IncrementalPhase : Enum {
    public int value__;
    public static IncrementalPhase Build;
    public static IncrementalPhase PostProcessing;
}
public class Microsoft.DocAsCode.Plugins.IncrementalStatus : object {
    [CompilerGeneratedAttribute]
private bool <CanIncremental>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementalPhase <IncrementalPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalFileCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SkippedFileCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullBuildReasonCode>k__BackingField;
    [JsonPropertyAttribute("can_incremental")]
public bool CanIncremental { get; public set; }
    [JsonPropertyAttribute("details")]
public string Details { get; public set; }
    [JsonPropertyAttribute("incrementalPhase")]
public IncrementalPhase IncrementalPhase { get; public set; }
    [JsonPropertyAttribute("total_file_count")]
public long TotalFileCount { get; public set; }
    [JsonPropertyAttribute("skipped_file_count")]
public long SkippedFileCount { get; public set; }
    [JsonPropertyAttribute("full_build_reason_code")]
public string FullBuildReasonCode { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CanIncremental();
    [CompilerGeneratedAttribute]
public void set_CanIncremental(bool value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(string value);
    [CompilerGeneratedAttribute]
public IncrementalPhase get_IncrementalPhase();
    [CompilerGeneratedAttribute]
public void set_IncrementalPhase(IncrementalPhase value);
    [CompilerGeneratedAttribute]
public long get_TotalFileCount();
    [CompilerGeneratedAttribute]
public void set_TotalFileCount(long value);
    [CompilerGeneratedAttribute]
public long get_SkippedFileCount();
    [CompilerGeneratedAttribute]
public void set_SkippedFileCount(long value);
    [CompilerGeneratedAttribute]
public string get_FullBuildReasonCode();
    [CompilerGeneratedAttribute]
public void set_FullBuildReasonCode(string value);
}
public interface Microsoft.DocAsCode.Plugins.IPostProcessor {
    public abstract virtual ImmutableDictionary`2<string, object> PrepareMetadata(ImmutableDictionary`2<string, object> metadata);
    public abstract virtual Manifest Process(Manifest manifest, string outputFolder);
}
public interface Microsoft.DocAsCode.Plugins.IPostProcessorHost {
    public IImmutableList`1<SourceFileInfo> SourceFileInfos { get; }
    public bool ShouldTraceIncrementalInfo { get; }
    public bool IsIncremental { get; }
    public abstract virtual IImmutableList`1<SourceFileInfo> get_SourceFileInfos();
    public abstract virtual bool get_ShouldTraceIncrementalInfo();
    public abstract virtual bool get_IsIncremental();
    public abstract virtual Stream LoadContextInfo();
    public abstract virtual Stream SaveContextInfo();
}
public interface Microsoft.DocAsCode.Plugins.ISubCommand {
    public bool AllowReplay { get; }
    public string Name { get; }
    public abstract virtual bool get_AllowReplay();
    public abstract virtual void Exec(SubCommandRunningContext context);
    public abstract virtual string get_Name();
}
public interface Microsoft.DocAsCode.Plugins.ISubCommandController {
    public abstract virtual bool TryGetCommandCreator(string name, ISubCommandCreator& creator);
    public abstract virtual string GetHelpText();
}
public interface Microsoft.DocAsCode.Plugins.ISubCommandCreator {
    public abstract virtual ISubCommand Create(String[] args, ISubCommandController controller, SubCommandParseOption option);
    public abstract virtual string GetHelpText();
}
public interface Microsoft.DocAsCode.Plugins.ISupportIncrementalBuildStep {
    public abstract virtual string GetIncrementalContextHash();
    public abstract virtual bool CanIncrementalBuild(FileAndType fileAndType);
    public abstract virtual IEnumerable`1<DependencyType> GetDependencyTypesToRegister();
}
public interface Microsoft.DocAsCode.Plugins.ISupportIncrementalDocumentProcessor {
    public abstract virtual string GetIncrementalContextHash();
    public abstract virtual void SaveIntermediateModel(FileModel model, Stream stream);
    public abstract virtual FileModel LoadIntermediateModel(Stream stream);
}
public interface Microsoft.DocAsCode.Plugins.ISupportIncrementalPostProcessor {
    public IPostProcessorHost PostProcessorHost { get; public set; }
    public abstract virtual IPostProcessorHost get_PostProcessorHost();
    public abstract virtual void set_PostProcessorHost(IPostProcessorHost value);
    public abstract virtual string GetIncrementalContextHash();
}
public interface Microsoft.DocAsCode.Plugins.IUriTemplatePipeline`1 {
    public abstract virtual T Handle(T value, String[] parameters);
}
public class Microsoft.DocAsCode.Plugins.LinkSourceInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    public string Target { get; public set; }
    public string Anchor { get; public set; }
    public string SourceFile { get; public set; }
    public int LineNumber { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Anchor();
    [CompilerGeneratedAttribute]
public void set_Anchor(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
public void set_SourceFile(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
}
public class Microsoft.DocAsCode.Plugins.Manifest : object {
    private ReaderWriterLockSlim _lock;
    private Dictionary`2<string, List`1<OutputFileInfo>> _index;
    [CompilerGeneratedAttribute]
private SitemapOptions <SitemapOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HomepageInfo> <Homepages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private object <XRefMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ManifestItemCollection <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IncrementalInfo> <IncrementalInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, VersionInfo> <VersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ManifestGroupInfo> <Groups>k__BackingField;
    [JsonPropertyAttribute("sitemap")]
public SitemapOptions SitemapOptions { get; public set; }
    [ObsoleteAttribute]
[JsonPropertyAttribute("homepages")]
public List`1<HomepageInfo> Homepages { get; public set; }
    [JsonPropertyAttribute("source_base_path")]
public string SourceBasePath { get; public set; }
    [ObsoleteAttribute]
[JsonPropertyAttribute("xrefmap")]
public object XRefMap { get; public set; }
    [JsonPropertyAttribute("files")]
public ManifestItemCollection Files { get; }
    [JsonPropertyAttribute("incremental_info")]
public List`1<IncrementalInfo> IncrementalInfo { get; public set; }
    [ObsoleteAttribute("use groups")]
[JsonPropertyAttribute("version_info")]
public Dictionary`2<string, VersionInfo> VersionInfo { get; public set; }
    [JsonPropertyAttribute("groups")]
public List`1<ManifestGroupInfo> Groups { get; public set; }
    public Manifest(IEnumerable`1<ManifestItem> files);
    [CompilerGeneratedAttribute]
public SitemapOptions get_SitemapOptions();
    [CompilerGeneratedAttribute]
public void set_SitemapOptions(SitemapOptions value);
    [CompilerGeneratedAttribute]
public List`1<HomepageInfo> get_Homepages();
    [CompilerGeneratedAttribute]
public void set_Homepages(List`1<HomepageInfo> value);
    [CompilerGeneratedAttribute]
public string get_SourceBasePath();
    [CompilerGeneratedAttribute]
public void set_SourceBasePath(string value);
    [CompilerGeneratedAttribute]
public object get_XRefMap();
    [CompilerGeneratedAttribute]
public void set_XRefMap(object value);
    [CompilerGeneratedAttribute]
public ManifestItemCollection get_Files();
    [CompilerGeneratedAttribute]
public List`1<IncrementalInfo> get_IncrementalInfo();
    [CompilerGeneratedAttribute]
public void set_IncrementalInfo(List`1<IncrementalInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, VersionInfo> get_VersionInfo();
    [CompilerGeneratedAttribute]
public void set_VersionInfo(Dictionary`2<string, VersionInfo> value);
    [CompilerGeneratedAttribute]
public List`1<ManifestGroupInfo> get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(List`1<ManifestGroupInfo> value);
    public OutputFileInfo FindOutputFileInfo(string relativePath);
    private void FileCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ManifestItemOutputChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OutputFileInfoPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void AddItem(string relativePath, OutputFileInfo item);
    private void RemoveItem(string relativePath, OutputFileInfo item);
    private static string NormalizePath(string relativePath);
}
public class Microsoft.DocAsCode.Plugins.ManifestGroupInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XRefmap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [JsonPropertyAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyAttribute("dest")]
public string Destination { get; public set; }
    [JsonPropertyAttribute("xrefmap")]
public string XRefmap { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> Metadata { get; public set; }
    public ManifestGroupInfo(GroupInfo groupInfo);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    [CompilerGeneratedAttribute]
public string get_XRefmap();
    [CompilerGeneratedAttribute]
public void set_XRefmap(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
}
public class Microsoft.DocAsCode.Plugins.ManifestItem : object {
    [CompilerGeneratedAttribute]
private string <DocumentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputFileCollection <OutputFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIncremental>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [JsonPropertyAttribute("log_codes")]
public ICollection`1<string> LogCodes;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [JsonPropertyAttribute("type")]
public string DocumentType { get; public set; }
    [JsonPropertyAttribute("source_relative_path")]
public string SourceRelativePath { get; public set; }
    [JsonPropertyAttribute("output")]
public OutputFileCollection OutputFiles { get; }
    [JsonPropertyAttribute("is_incremental")]
public bool IsIncremental { get; public set; }
    [JsonPropertyAttribute("version")]
public string Version { get; public set; }
    [JsonPropertyAttribute("group")]
public string Group { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DocumentType();
    [CompilerGeneratedAttribute]
public void set_DocumentType(string value);
    [CompilerGeneratedAttribute]
public string get_SourceRelativePath();
    [CompilerGeneratedAttribute]
public void set_SourceRelativePath(string value);
    [CompilerGeneratedAttribute]
public OutputFileCollection get_OutputFiles();
    [CompilerGeneratedAttribute]
public bool get_IsIncremental();
    [CompilerGeneratedAttribute]
public void set_IsIncremental(bool value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
    public ManifestItem Clone(bool isIncremental, string sourceRelativePath);
    public ManifestItem Clone();
}
[JsonConverterAttribute("Microsoft.DocAsCode.Plugins.ManifestItemCollectionConverter")]
public class Microsoft.DocAsCode.Plugins.ManifestItemCollection : ObservableCollection`1<ManifestItem> {
    public int Count { get; }
    public ManifestItemCollection(IEnumerable`1<ManifestItem> collection);
    protected virtual void ClearItems();
    public int get_Count();
    public void Add(ManifestItem item);
    public void Clear();
    public bool Contains(ManifestItem item);
    public void CopyTo(ManifestItem[] array, int arrayIndex);
    public IEnumerator`1<ManifestItem> GetEnumerator();
    public int IndexOf(ManifestItem item);
    public void Insert(int index, ManifestItem item);
    public bool Remove(ManifestItem item);
    public void RemoveAt(int index);
    public void AddRange(IEnumerable`1<ManifestItem> collection);
    public int RemoveAll(Predicate`1<ManifestItem> match);
}
public class Microsoft.DocAsCode.Plugins.ManifestItemCollectionConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objecType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.DocAsCode.Plugins.MarkdownMetadataValidationRule : object {
    [CompilerGeneratedAttribute]
private string <ContractName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disable>k__BackingField;
    [JsonPropertyAttribute("contractName")]
public string ContractName { get; public set; }
    [DefaultValueAttribute("False")]
[JsonPropertyAttribute("disable")]
public bool Disable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContractName();
    [CompilerGeneratedAttribute]
public void set_ContractName(string value);
    [CompilerGeneratedAttribute]
public bool get_Disable();
    [CompilerGeneratedAttribute]
public void set_Disable(bool value);
    public static MarkdownMetadataValidationRule op_Explicit(string contractName);
}
public class Microsoft.DocAsCode.Plugins.MarkdownServiceParameters : object {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateDir>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <Tokens>k__BackingField;
    public string BasePath { get; public set; }
    public string TemplateDir { get; public set; }
    public IReadOnlyDictionary`2<string, object> Extensions { get; public set; }
    public ImmutableDictionary`2<string, string> Tokens { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateDir();
    [CompilerGeneratedAttribute]
public void set_TemplateDir(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, string> get_Tokens();
    [CompilerGeneratedAttribute]
public void set_Tokens(ImmutableDictionary`2<string, string> value);
}
public class Microsoft.DocAsCode.Plugins.MarkdownSytleConfig : object {
    public static string MarkdownStyleFileName;
    [CompilerGeneratedAttribute]
private MarkdownMetadataValidationRule[] <MetadataRules>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownValidationRule[] <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownTagValidationRule[] <TagRules>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownValidationSetting[] <Settings>k__BackingField;
    [JsonPropertyAttribute("metadataRules")]
public MarkdownMetadataValidationRule[] MetadataRules { get; public set; }
    [JsonPropertyAttribute("rules")]
public MarkdownValidationRule[] Rules { get; public set; }
    [JsonPropertyAttribute("tagRules")]
public MarkdownTagValidationRule[] TagRules { get; public set; }
    [JsonPropertyAttribute("settings")]
public MarkdownValidationSetting[] Settings { get; public set; }
    [CompilerGeneratedAttribute]
public MarkdownMetadataValidationRule[] get_MetadataRules();
    [CompilerGeneratedAttribute]
public void set_MetadataRules(MarkdownMetadataValidationRule[] value);
    [CompilerGeneratedAttribute]
public MarkdownValidationRule[] get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(MarkdownValidationRule[] value);
    [CompilerGeneratedAttribute]
public MarkdownTagValidationRule[] get_TagRules();
    [CompilerGeneratedAttribute]
public void set_TagRules(MarkdownTagValidationRule[] value);
    [CompilerGeneratedAttribute]
public MarkdownValidationSetting[] get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(MarkdownValidationSetting[] value);
}
public class Microsoft.DocAsCode.Plugins.MarkdownSytleDefinition : object {
    public static string MarkdownStyleDefinitionFilePostfix;
    public static string MarkdownStyleDefinitionFolderName;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, MarkdownMetadataValidationRule> <MetadataRules>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, MarkdownValidationRule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, MarkdownTagValidationRule> <TagRules>k__BackingField;
    [JsonPropertyAttribute("metadataRules")]
public Dictionary`2<string, MarkdownMetadataValidationRule> MetadataRules { get; public set; }
    [JsonPropertyAttribute("rules")]
public Dictionary`2<string, MarkdownValidationRule> Rules { get; public set; }
    [JsonPropertyAttribute("tagRules")]
public Dictionary`2<string, MarkdownTagValidationRule> TagRules { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MarkdownMetadataValidationRule> get_MetadataRules();
    [CompilerGeneratedAttribute]
public void set_MetadataRules(Dictionary`2<string, MarkdownMetadataValidationRule> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MarkdownValidationRule> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(Dictionary`2<string, MarkdownValidationRule> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MarkdownTagValidationRule> get_TagRules();
    [CompilerGeneratedAttribute]
public void set_TagRules(Dictionary`2<string, MarkdownTagValidationRule> value);
}
public class Microsoft.DocAsCode.Plugins.MarkdownTagValidationRule : object {
    [CompilerGeneratedAttribute]
private List`1<string> <TagNames>k__BackingField;
    [CompilerGeneratedAttribute]
private TagRelation <Relation>k__BackingField;
    [CompilerGeneratedAttribute]
private TagValidationBehavior <Behavior>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomValidatorContractName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpeningTagOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disable>k__BackingField;
    [JsonPropertyAttribute("tagNames")]
public List`1<string> TagNames { get; public set; }
    [JsonPropertyAttribute("relation")]
public TagRelation Relation { get; public set; }
    [JsonPropertyAttribute("behavior")]
public TagValidationBehavior Behavior { get; public set; }
    [JsonPropertyAttribute("messageFormatter")]
public string MessageFormatter { get; public set; }
    [JsonPropertyAttribute("customValidatorContractName")]
public string CustomValidatorContractName { get; public set; }
    [JsonPropertyAttribute("openingTagOnly")]
public bool OpeningTagOnly { get; public set; }
    [DefaultValueAttribute("False")]
[JsonPropertyAttribute("disable")]
public bool Disable { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_TagNames();
    [CompilerGeneratedAttribute]
public void set_TagNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public TagRelation get_Relation();
    [CompilerGeneratedAttribute]
public void set_Relation(TagRelation value);
    [CompilerGeneratedAttribute]
public TagValidationBehavior get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(TagValidationBehavior value);
    [CompilerGeneratedAttribute]
public string get_MessageFormatter();
    [CompilerGeneratedAttribute]
public void set_MessageFormatter(string value);
    [CompilerGeneratedAttribute]
public string get_CustomValidatorContractName();
    [CompilerGeneratedAttribute]
public void set_CustomValidatorContractName(string value);
    [CompilerGeneratedAttribute]
public bool get_OpeningTagOnly();
    [CompilerGeneratedAttribute]
public void set_OpeningTagOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disable();
    [CompilerGeneratedAttribute]
public void set_Disable(bool value);
}
public class Microsoft.DocAsCode.Plugins.MarkdownValidationRule : object {
    [CompilerGeneratedAttribute]
private string <ContractName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disable>k__BackingField;
    [ObsoleteAttribute("Please use ContractName.")]
[JsonPropertyAttribute("name")]
public string RuleName { get; public set; }
    [JsonPropertyAttribute("contractName")]
public string ContractName { get; public set; }
    [DefaultValueAttribute("False")]
[JsonPropertyAttribute("disable")]
public bool Disable { get; public set; }
    public string get_RuleName();
    public void set_RuleName(string value);
    [CompilerGeneratedAttribute]
public string get_ContractName();
    [CompilerGeneratedAttribute]
public void set_ContractName(string value);
    [CompilerGeneratedAttribute]
public bool get_Disable();
    [CompilerGeneratedAttribute]
public void set_Disable(bool value);
    public static MarkdownValidationRule op_Explicit(string contractName);
}
public class Microsoft.DocAsCode.Plugins.MarkdownValidationSetting : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disable>k__BackingField;
    [JsonPropertyAttribute("category")]
public string Category { get; public set; }
    [JsonPropertyAttribute("id")]
public string Id { get; public set; }
    [DefaultValueAttribute("False")]
[JsonPropertyAttribute("disable")]
public bool Disable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public bool get_Disable();
    [CompilerGeneratedAttribute]
public void set_Disable(bool value);
    public static MarkdownValidationSetting op_Explicit(string category);
}
public class Microsoft.DocAsCode.Plugins.MarkupResult : object {
    [CompilerGeneratedAttribute]
private string <Html>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, object> <YamlHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <LinkToFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<string> <LinkToUids>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <Dependency>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> <UidLinkSources>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> <FileLinkSources>k__BackingField;
    public string Html { get; public set; }
    public ImmutableDictionary`2<string, object> YamlHeader { get; public set; }
    public ImmutableArray`1<string> LinkToFiles { get; public set; }
    public ImmutableHashSet`1<string> LinkToUids { get; public set; }
    public ImmutableArray`1<string> Dependency { get; public set; }
    public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> UidLinkSources { get; public set; }
    public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> FileLinkSources { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(string value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, object> get_YamlHeader();
    [CompilerGeneratedAttribute]
public void set_YamlHeader(ImmutableDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_LinkToFiles();
    [CompilerGeneratedAttribute]
public void set_LinkToFiles(ImmutableArray`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableHashSet`1<string> get_LinkToUids();
    [CompilerGeneratedAttribute]
public void set_LinkToUids(ImmutableHashSet`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_Dependency();
    [CompilerGeneratedAttribute]
public void set_Dependency(ImmutableArray`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> get_UidLinkSources();
    [CompilerGeneratedAttribute]
public void set_UidLinkSources(ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> get_FileLinkSources();
    [CompilerGeneratedAttribute]
public void set_FileLinkSources(ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> value);
    public MarkupResult Clone();
}
public class Microsoft.DocAsCode.Plugins.ModelWithCache : object {
    private object _content;
    private FileStream _tempFile;
    private WeakReference`1<object> _weakRef;
    private object _locker;
    [CompilerGeneratedAttribute]
private EventHandler ContentAccessed;
    [CompilerGeneratedAttribute]
private IFormatter <Serializer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    public IFormatter Serializer { get; public set; }
    public string File { get; public set; }
    public object Content { get; public set; }
    public ModelWithCache(object content, IFormatter serializer);
    [CompilerGeneratedAttribute]
public void add_ContentAccessed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ContentAccessed(EventHandler value);
    [CompilerGeneratedAttribute]
public IFormatter get_Serializer();
    [CompilerGeneratedAttribute]
public void set_Serializer(IFormatter value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    public object get_Content();
    public void set_Content(object value);
    public bool Serialize();
    public bool Deserialize();
    public sealed virtual void Dispose();
    private void OnContentAccessed();
    private FileStream CreateTempFile();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.DocAsCode.Plugins.ObservableDictionary`2 : object {
    private Dictionary`2<TKey, TValue> _dictionary;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public IEqualityComparer`1<TKey> Comparer { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ObservableDictionary`2(IEqualityComparer`1<TKey> comparer);
    public IEqualityComparer`1<TKey> get_Comparer();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.DocAsCode.Plugins.OutputFileCollection : ObservableDictionary`2<string, OutputFileInfo> {
    public OutputFileInfo Item { get; public set; }
    public IEqualityComparer`1<string> Comparer { get; }
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<OutputFileInfo> Values { get; }
    public OutputFileInfo get_Item(string key);
    public void set_Item(string key, OutputFileInfo value);
    public IEqualityComparer`1<string> get_Comparer();
    public int get_Count();
    public ICollection`1<string> get_Keys();
    public ICollection`1<OutputFileInfo> get_Values();
    public void Add(string key, OutputFileInfo value);
    public void Clear();
    public bool ContainsKey(string key);
    public IEnumerator`1<KeyValuePair`2<string, OutputFileInfo>> GetEnumerator();
    public bool Remove(string key);
    public bool TryGetValue(string key, OutputFileInfo& value);
    public bool ContainsValue(OutputFileInfo value);
}
public class Microsoft.DocAsCode.Plugins.OutputFileInfo : object {
    private string _relativePath;
    private string _linkToPath;
    private string _hash;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute("relative_path")]
public string RelativePath { get; public set; }
    [JsonPropertyAttribute("link_to_path")]
public string LinkToPath { get; public set; }
    [JsonPropertyAttribute("hash")]
public string Hash { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> Metadata { get; public set; }
    public string get_RelativePath();
    public void set_RelativePath(string value);
    public string get_LinkToPath();
    public void set_LinkToPath(string value);
    public string get_Hash();
    public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void OnPropertyChanged(string propertyName, string original, string current);
}
public enum Microsoft.DocAsCode.Plugins.PageChangeFrequency : Enum {
    public int value__;
    public static PageChangeFrequency Always;
    public static PageChangeFrequency Hourly;
    public static PageChangeFrequency Daily;
    public static PageChangeFrequency Weekly;
    public static PageChangeFrequency Monthly;
    public static PageChangeFrequency Yearly;
    public static PageChangeFrequency Never;
}
public enum Microsoft.DocAsCode.Plugins.ProcessingPriority : Enum {
    public int value__;
    public static ProcessingPriority NotSupported;
    [EditorBrowsableAttribute("1")]
public static ProcessingPriority Lowest;
    public static ProcessingPriority Low;
    public static ProcessingPriority BelowNormal;
    public static ProcessingPriority Normal;
    public static ProcessingPriority AboveNormal;
    public static ProcessingPriority High;
    [EditorBrowsableAttribute("1")]
public static ProcessingPriority Highest;
}
public class Microsoft.DocAsCode.Plugins.PropertyChangedEventArgs`1 : PropertyChangedEventArgs {
    [CompilerGeneratedAttribute]
private T <Original>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Current>k__BackingField;
    public T Original { get; }
    public T Current { get; }
    public PropertyChangedEventArgs`1(string propertyName, T original, T current);
    [CompilerGeneratedAttribute]
public T get_Original();
    [CompilerGeneratedAttribute]
public T get_Current();
}
public class Microsoft.DocAsCode.Plugins.RootedFileAbstractLayer : object {
    private IFileAbstractLayer _impl;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public RootedFileAbstractLayer(IFileAbstractLayer impl);
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanWrite();
    public sealed virtual IEnumerable`1<string> GetAllInputFiles();
    public sealed virtual bool Exists(string file);
    public sealed virtual Stream OpenRead(string file);
    public sealed virtual Stream Create(string file);
    public sealed virtual void Copy(string sourceFileName, string destFileName);
    public sealed virtual ImmutableDictionary`2<string, string> GetProperties(string file);
    public sealed virtual string GetPhysicalPath(string file);
    public sealed virtual IEnumerable`1<string> GetExpectedPhysicalPath(string file);
}
public class Microsoft.DocAsCode.Plugins.SaveResult : object {
    [CompilerGeneratedAttribute]
private string <DocumentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileWithoutExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<string> <LinkToUids>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <LinkToFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, HashSet`1<string>> <TocMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<XRefSpec> <XRefSpecs>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<XRefSpec> <ExternalXRefSpecs>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> <UidLinkSources>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> <FileLinkSources>k__BackingField;
    public string DocumentType { get; public set; }
    public string FileWithoutExtension { get; public set; }
    public string ResourceFile { get; public set; }
    public ImmutableHashSet`1<string> LinkToUids { get; public set; }
    public ImmutableArray`1<string> LinkToFiles { get; public set; }
    [ObsoleteAttribute("use DocumentBuildContext.TocMap")]
public ImmutableDictionary`2<string, HashSet`1<string>> TocMap { get; public set; }
    public ImmutableArray`1<XRefSpec> XRefSpecs { get; public set; }
    public ImmutableArray`1<XRefSpec> ExternalXRefSpecs { get; public set; }
    public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> UidLinkSources { get; public set; }
    public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> FileLinkSources { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DocumentType();
    [CompilerGeneratedAttribute]
public void set_DocumentType(string value);
    [CompilerGeneratedAttribute]
public string get_FileWithoutExtension();
    [CompilerGeneratedAttribute]
public void set_FileWithoutExtension(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceFile();
    [CompilerGeneratedAttribute]
public void set_ResourceFile(string value);
    [CompilerGeneratedAttribute]
public ImmutableHashSet`1<string> get_LinkToUids();
    [CompilerGeneratedAttribute]
public void set_LinkToUids(ImmutableHashSet`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_LinkToFiles();
    [CompilerGeneratedAttribute]
public void set_LinkToFiles(ImmutableArray`1<string> value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, HashSet`1<string>> get_TocMap();
    [CompilerGeneratedAttribute]
public void set_TocMap(ImmutableDictionary`2<string, HashSet`1<string>> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<XRefSpec> get_XRefSpecs();
    [CompilerGeneratedAttribute]
public void set_XRefSpecs(ImmutableArray`1<XRefSpec> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<XRefSpec> get_ExternalXRefSpecs();
    [CompilerGeneratedAttribute]
public void set_ExternalXRefSpecs(ImmutableArray`1<XRefSpec> value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> get_UidLinkSources();
    [CompilerGeneratedAttribute]
public void set_UidLinkSources(ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> value);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> get_FileLinkSources();
    [CompilerGeneratedAttribute]
public void set_FileLinkSources(ImmutableDictionary`2<string, ImmutableList`1<LinkSourceInfo>> value);
}
public class Microsoft.DocAsCode.Plugins.SitemapElementOptions : object {
    [CompilerGeneratedAttribute]
private string <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PageChangeFrequency> <ChangeFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [JsonPropertyAttribute("baseUrl")]
public string BaseUrl { get; public set; }
    [JsonPropertyAttribute("changefreq")]
public Nullable`1<PageChangeFrequency> ChangeFrequency { get; public set; }
    [JsonPropertyAttribute("priority")]
public Nullable`1<double> Priority { get; public set; }
    [JsonPropertyAttribute("lastmod")]
public Nullable`1<DateTime> LastModified { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BaseUrl();
    [CompilerGeneratedAttribute]
public void set_BaseUrl(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<PageChangeFrequency> get_ChangeFrequency();
    [CompilerGeneratedAttribute]
public void set_ChangeFrequency(Nullable`1<PageChangeFrequency> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
public void set_LastModified(Nullable`1<DateTime> value);
}
public class Microsoft.DocAsCode.Plugins.SitemapOptions : SitemapElementOptions {
    [CompilerGeneratedAttribute]
private IList`1<KeyValuePair`2<string, SitemapElementOptions>> <FileOptions>k__BackingField;
    [JsonPropertyAttribute("fileOptions")]
[JsonConverterAttribute("Microsoft.DocAsCode.Plugins.DictionaryAsListJsonConverter`1<Microsoft.DocAsCode.Plugins.SitemapElementOptions>")]
public IList`1<KeyValuePair`2<string, SitemapElementOptions>> FileOptions { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<string, SitemapElementOptions>> get_FileOptions();
    [CompilerGeneratedAttribute]
public void set_FileOptions(IList`1<KeyValuePair`2<string, SitemapElementOptions>> value);
}
public class Microsoft.DocAsCode.Plugins.SourceFileInfo : object {
    [CompilerGeneratedAttribute]
private string <DocumentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIncremental>k__BackingField;
    public string DocumentType { get; private set; }
    public string SourceRelativePath { get; private set; }
    public bool IsIncremental { get; private set; }
    [CompilerGeneratedAttribute]
public string get_DocumentType();
    [CompilerGeneratedAttribute]
private void set_DocumentType(string value);
    [CompilerGeneratedAttribute]
public string get_SourceRelativePath();
    [CompilerGeneratedAttribute]
private void set_SourceRelativePath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIncremental();
    [CompilerGeneratedAttribute]
private void set_IsIncremental(bool value);
    public static SourceFileInfo FromManifestItem(ManifestItem manifestItem);
}
public enum Microsoft.DocAsCode.Plugins.SubCommandParseOption : Enum {
    public int value__;
    public static SubCommandParseOption Loose;
    public static SubCommandParseOption Strict;
}
public class Microsoft.DocAsCode.Plugins.SubCommandRunningContext : object {
}
public enum Microsoft.DocAsCode.Plugins.TagRelation : Enum {
    public int value__;
    public static TagRelation In;
    public static TagRelation NotIn;
}
public enum Microsoft.DocAsCode.Plugins.TagValidationBehavior : Enum {
    public int value__;
    public static TagValidationBehavior None;
    public static TagValidationBehavior Warning;
    public static TagValidationBehavior Error;
}
public class Microsoft.DocAsCode.Plugins.TocInfo : object {
    [CompilerGeneratedAttribute]
private string <TocFileKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    public string TocFileKey { get; }
    public string Homepage { get; public set; }
    public TocInfo(string tocFileKey);
    [CompilerGeneratedAttribute]
public string get_TocFileKey();
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
}
public class Microsoft.DocAsCode.Plugins.TreeItem : object {
    [CompilerGeneratedAttribute]
private List`1<TreeItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [JsonPropertyAttribute("items")]
public List`1<TreeItem> Items { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<TreeItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<TreeItem> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
}
public enum Microsoft.DocAsCode.Plugins.TreeItemActionType : Enum {
    public int value__;
    public static TreeItemActionType ReplaceSelf;
    public static TreeItemActionType DeleteSelf;
    public static TreeItemActionType AppendChild;
    public static TreeItemActionType PrependChild;
    public static TreeItemActionType InsertAfter;
    public static TreeItemActionType InsertBefore;
}
public enum Microsoft.DocAsCode.Plugins.TreeItemKeyType : Enum {
    public int value__;
    public static TreeItemKeyType TopicUid;
    public static TreeItemKeyType TopicHref;
}
public class Microsoft.DocAsCode.Plugins.TreeItemRestructure : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeItemKeyType <TypeOfKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeItemActionType <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<TreeItem> <RestructuredItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<FileAndType> <SourceFiles>k__BackingField;
    public string Key { get; public set; }
    public TreeItemKeyType TypeOfKey { get; public set; }
    public TreeItemActionType ActionType { get; public set; }
    public IImmutableList`1<TreeItem> RestructuredItems { get; public set; }
    public IImmutableList`1<FileAndType> SourceFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public TreeItemKeyType get_TypeOfKey();
    [CompilerGeneratedAttribute]
public void set_TypeOfKey(TreeItemKeyType value);
    [CompilerGeneratedAttribute]
public TreeItemActionType get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(TreeItemActionType value);
    [CompilerGeneratedAttribute]
public IImmutableList`1<TreeItem> get_RestructuredItems();
    [CompilerGeneratedAttribute]
public void set_RestructuredItems(IImmutableList`1<TreeItem> value);
    [CompilerGeneratedAttribute]
public IImmutableList`1<FileAndType> get_SourceFiles();
    [CompilerGeneratedAttribute]
public void set_SourceFiles(IImmutableList`1<FileAndType> value);
}
public class Microsoft.DocAsCode.Plugins.TreeNavigator : object {
    private NavigatorTreeItem _tree;
    private NavigatorTreeItem _current;
    public TreeItem Current { get; }
    public TreeNavigator(TreeItem tree);
    public bool MoveToParent();
    public TreeItem get_Current();
    public bool MoveToChild(Func`2<TreeItem, bool> comparer);
    public bool MoveToFirstChild();
    public bool MoveTo(Func`2<TreeItem, bool> comparer);
    public bool AppendChild(TreeItem child);
    public bool RemoveChild(Func`2<TreeItem, bool> comparer);
    private NavigatorTreeItem Init(TreeItem current, NavigatorTreeItem parent);
    private bool MoveTo(NavigatorTreeItem node, Func`2<TreeItem, bool> comparer);
}
public class Microsoft.DocAsCode.Plugins.UidDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [JsonPropertyAttribute("name")]
public string Name { get; }
    [JsonPropertyAttribute("file")]
public string File { get; }
    [JsonPropertyAttribute("line")]
public Nullable`1<int> Line { get; }
    [JsonPropertyAttribute("column")]
public Nullable`1<int> Column { get; }
    [JsonPropertyAttribute("path")]
public string Path { get; }
    [JsonConstructorAttribute]
public UidDefinition(string name, string file, Nullable`1<int> line, Nullable`1<int> column, string path);
    [ObsoleteAttribute]
public UidDefinition(string name, string file, Nullable`1<int> line, Nullable`1<int> column);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Column();
    [CompilerGeneratedAttribute]
public string get_Path();
}
public class Microsoft.DocAsCode.Plugins.VersionInfo : object {
    [CompilerGeneratedAttribute]
private string <VersionFolder>k__BackingField;
    [JsonPropertyAttribute("version_folder")]
public string VersionFolder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VersionFolder();
    [CompilerGeneratedAttribute]
public void set_VersionFolder(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.DocAsCode.Plugins.XRefSpec : object {
    public static string UidKey;
    public static string NameKey;
    public static string HrefKey;
    public static string CommentIdKey;
    public static string IsSpecKey;
    private Dictionary`2<string, object> _dict;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    public string Uid { get; public set; }
    public string Name { get; public set; }
    public string Href { get; public set; }
    public string CommentId { get; public set; }
    public bool IsSpec { get; public set; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; private set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public XRefSpec(IDictionary`2<string, object> dictionary);
    public XRefSpec(XRefSpec spec);
    public string get_Uid();
    public void set_Uid(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Href();
    public void set_Href(string value);
    public string get_CommentId();
    public void set_CommentId(string value);
    public bool get_IsSpec();
    public void set_IsSpec(bool value);
    private void ThrowIfReadOnly();
    public XRefSpec ToReadOnly();
    public static XRefSpec Merge(XRefSpec left, XRefSpec right);
    public static XRefSpec op_Addition(XRefSpec left, XRefSpec right);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
private void set_IsReadOnly(bool value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
