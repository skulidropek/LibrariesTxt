public class Microsoft.DocAsCode.YamlSerialization.ExtensibleMemberAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Prefix { get; }
    public ExtensibleMemberAttribute(string prefix);
    [CompilerGeneratedAttribute]
public string get_Prefix();
}
internal class Microsoft.DocAsCode.YamlSerialization.Helpers.ArrayDictionary`2 : object {
    private IEqualityComparer`1<TKey> _comparer;
    private object _syncRoot;
    private KeyValuePair`2[] modreq(System.Runtime.CompilerServices.IsVolatile) _cache;
    public ArrayDictionary`2(IEqualityComparer`1<TKey> comparer);
    public bool TryGetValue(TKey key, TValue& value);
    public TValue GetOrAdd(TKey key, Func`2<TKey, TValue> func);
    private bool TryFindInCache(KeyValuePair`2[] cache, TKey key, TValue& value, int startIndex);
}
[ExtensionAttribute]
internal static class Microsoft.DocAsCode.YamlSerialization.Helpers.ReflectionExtensions : object {
    [ExtensionAttribute]
public static bool HasDefaultConstructor(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPublicProperties(Type type);
}
internal static class Microsoft.DocAsCode.YamlSerialization.Helpers.ReflectionUtility : object {
    public static Type GetImplementedGenericInterface(Type type, Type genericInterfaceType);
    [IteratorStateMachineAttribute("Microsoft.DocAsCode.YamlSerialization.Helpers.ReflectionUtility/<GetImplementedInterfaces>d__1")]
public static IEnumerable`1<Type> GetImplementedInterfaces(Type type);
}
internal static class Microsoft.DocAsCode.YamlSerialization.Helpers.Regexes : object {
    public static Regex BooleanLike;
    public static Regex NullLike;
    public static Regex IntegerLike;
    public static Regex FloatLike;
    private static Regexes();
}
internal static class Microsoft.DocAsCode.YamlSerialization.Helpers.YamlTypeConverters : object {
    private static IEnumerable`1<IYamlTypeConverter> _builtInTypeConverters;
    public static IEnumerable`1<IYamlTypeConverter> BuiltInConverters { get; }
    private static YamlTypeConverters();
    public static IEnumerable`1<IYamlTypeConverter> get_BuiltInConverters();
}
public class Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.EmitArrayNodeDeserializer : object {
    private static MethodInfo DeserializeHelperMethod;
    private static ConcurrentDictionary`2<Type, Func`4<IParser, Type, Func`3<IParser, Type, object>, object>> _funcCache;
    private static EmitArrayNodeDeserializer();
    private sealed virtual override bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser reader, Type expectedType, Func`3<IParser, Type, object> nestedObjectDeserializer, Object& value);
    [EditorBrowsableAttribute("1")]
public static TItem[] DeserializeHelper(IParser reader, Type expectedType, Func`3<IParser, Type, object> nestedObjectDeserializer);
    private static Func`4<IParser, Type, Func`3<IParser, Type, object>, object> AddItem(Type expectedType);
}
public class Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.EmitGenericCollectionNodeDeserializer : object {
    private static MethodInfo DeserializeHelperMethod;
    private IObjectFactory _objectFactory;
    private Dictionary`2<Type, Type> _gpCache;
    private Dictionary`2<Type, Action`4<IParser, Type, Func`3<IParser, Type, object>, object>> _actionCache;
    public EmitGenericCollectionNodeDeserializer(IObjectFactory objectFactory);
    private static EmitGenericCollectionNodeDeserializer();
    private sealed virtual override bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser reader, Type expectedType, Func`3<IParser, Type, object> nestedObjectDeserializer, Object& value);
    [EditorBrowsableAttribute("1")]
public static void DeserializeHelper(IParser reader, Type expectedType, Func`3<IParser, Type, object> nestedObjectDeserializer, ICollection`1<TItem> result);
}
public class Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.EmitGenericDictionaryNodeDeserializer : object {
    private static MethodInfo DeserializeHelperMethod;
    private IObjectFactory _objectFactory;
    private Dictionary`2<Type, Type[]> _gpCache;
    private Dictionary`2<Tuple`2<Type, Type>, Action`4<IParser, Type, Func`3<IParser, Type, object>, object>> _actionCache;
    public EmitGenericDictionaryNodeDeserializer(IObjectFactory objectFactory);
    private static EmitGenericDictionaryNodeDeserializer();
    private sealed virtual override bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser reader, Type expectedType, Func`3<IParser, Type, object> nestedObjectDeserializer, Object& value);
    [EditorBrowsableAttribute("1")]
public static void DeserializeHelper(IParser reader, Type expectedType, Func`3<IParser, Type, object> nestedObjectDeserializer, IDictionary`2<TKey, TValue> result);
}
public class Microsoft.DocAsCode.YamlSerialization.NodeDeserializers.ExtensibleObjectNodeDeserializer : object {
    private IObjectFactory _objectFactory;
    private ITypeInspector _typeDescriptor;
    private bool _ignoreUnmatched;
    public ExtensibleObjectNodeDeserializer(IObjectFactory objectFactory, ITypeInspector typeDescriptor, bool ignoreUnmatched);
    private sealed virtual override bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser reader, Type expectedType, Func`3<IParser, Type, object> nestedObjectDeserializer, Object& value);
}
internal class Microsoft.DocAsCode.YamlSerialization.NodeTypeResolvers.ScalarYamlNodeTypeResolver : object {
    private sealed virtual override bool YamlDotNet.Serialization.INodeTypeResolver.Resolve(NodeEvent nodeEvent, Type& currentType);
}
public class Microsoft.DocAsCode.YamlSerialization.ObjectDescriptors.BetterObjectDescriptor : object {
    [CompilerGeneratedAttribute]
private ScalarStyle <ScalarStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StaticType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public ScalarStyle ScalarStyle { get; }
    public Type StaticType { get; }
    public Type Type { get; }
    public object Value { get; }
    public BetterObjectDescriptor(object value, Type type, Type staticType);
    public BetterObjectDescriptor(object value, Type type, Type staticType, ScalarStyle scalarStyle);
    [CompilerGeneratedAttribute]
public sealed virtual ScalarStyle get_ScalarStyle();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_StaticType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
internal static bool <.ctor>g__NeedQuote|1_0(object val);
}
public class Microsoft.DocAsCode.YamlSerialization.ObjectFactories.DefaultEmitObjectFactory : object {
    private Dictionary`2<Type, Func`1<object>> _cache;
    private static Type[] EmptyTypes { get; }
    private static Type[] get_EmptyTypes();
    public sealed virtual object Create(Type type);
    private static Func`1<object> CreateReferenceTypeFactory(ConstructorInfo ctor);
    private static Func`1<object> CreateValueTypeFactory(Type type);
}
public class Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies.FullObjectGraphTraversalStrategy : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <TraverseGenericDictionaryHelperMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private YamlSerializer <Serializer>k__BackingField;
    private int _maxRecursion;
    private ITypeInspector _typeDescriptor;
    private ITypeResolver _typeResolver;
    private INamingConvention _namingConvention;
    private Dictionary`2<Tuple`2<Type, Type>, Action`4<IObjectDescriptor, object, int, object>> _behaviorCache;
    private Dictionary`2<Tuple`3<Type, Type, Type>, Action`6<FullObjectGraphTraversalStrategy, object, object, int, INamingConvention, object>> _traverseGenericDictionaryCache;
    private static MethodInfo TraverseGenericDictionaryHelperMethod { get; }
    protected YamlSerializer Serializer { get; }
    public FullObjectGraphTraversalStrategy(YamlSerializer serializer, ITypeInspector typeDescriptor, ITypeResolver typeResolver, int maxRecursion, INamingConvention namingConvention);
    private static FullObjectGraphTraversalStrategy();
    [CompilerGeneratedAttribute]
private static MethodInfo get_TraverseGenericDictionaryHelperMethod();
    [CompilerGeneratedAttribute]
protected YamlSerializer get_Serializer();
    private sealed virtual override void YamlDotNet.Serialization.IObjectGraphTraversalStrategy.Traverse(IObjectDescriptor graph, IObjectGraphVisitor`1<TContext> visitor, TContext context);
    protected virtual void Traverse(IObjectDescriptor value, IObjectGraphVisitor`1<TContext> visitor, int currentDepth, TContext context);
    protected virtual void TraverseObject(IObjectDescriptor value, IObjectGraphVisitor`1<TContext> visitor, int currentDepth, TContext context);
    protected virtual void TraverseDictionary(IObjectDescriptor dictionary, object visitor, int currentDepth, object context);
    private void TraverseGenericDictionary(IObjectDescriptor dictionary, Type dictionaryType, object visitor, int currentDepth, object context);
    private static Action`6<FullObjectGraphTraversalStrategy, object, object, int, INamingConvention, object> GetTraverseGenericDictionaryHelper(Type tkey, Type tvalue, Type tcontext);
    [EditorBrowsableAttribute("1")]
public static void TraverseGenericDictionaryHelper(FullObjectGraphTraversalStrategy self, IDictionary`2<TKey, TValue> dictionary, object visitor, int currentDepth, INamingConvention namingConvention, object context);
    private void TraverseList(IObjectDescriptor value, object visitor, int currentDepth, object context);
    protected virtual void TraverseProperties(IObjectDescriptor value, object visitor, int currentDepth, object context);
    private IObjectDescriptor GetObjectDescriptor(object value, Type staticType);
}
public class Microsoft.DocAsCode.YamlSerialization.ObjectGraphTraversalStrategies.RoundtripObjectGraphTraversalStrategy : FullObjectGraphTraversalStrategy {
    public RoundtripObjectGraphTraversalStrategy(YamlSerializer serializer, ITypeInspector typeDescriptor, ITypeResolver typeResolver, int maxRecursion);
    protected virtual void TraverseProperties(IObjectDescriptor value, object visitor, int currentDepth, object context);
}
public class Microsoft.DocAsCode.YamlSerialization.TypeInspectors.EmitTypeInspector : ExtensibleTypeInspectorSkeleton {
    private static ConcurrentDictionary`2<Type, CachingItem> _cache;
    private ITypeResolver _resolver;
    public EmitTypeInspector(ITypeResolver resolver);
    private static EmitTypeInspector();
    public virtual IEnumerable`1<IPropertyDescriptor> GetProperties(Type type, object container);
    public virtual IPropertyDescriptor GetProperty(Type type, object container, string name);
}
public class Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleNamingConventionTypeInspector : ExtensibleTypeInspectorSkeleton {
    private IExtensibleTypeInspector innerTypeDescriptor;
    private INamingConvention namingConvention;
    public ExtensibleNamingConventionTypeInspector(IExtensibleTypeInspector innerTypeDescriptor, INamingConvention namingConvention);
    public virtual IEnumerable`1<IPropertyDescriptor> GetProperties(Type type, object container);
    public virtual IPropertyDescriptor GetProperty(Type type, object container, string name);
    [CompilerGeneratedAttribute]
private IPropertyDescriptor <GetProperties>b__3_0(IPropertyDescriptor p);
}
public class Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleReadableAndWritablePropertiesTypeInspector : ExtensibleTypeInspectorSkeleton {
    private IExtensibleTypeInspector _innerTypeDescriptor;
    public ExtensibleReadableAndWritablePropertiesTypeInspector(IExtensibleTypeInspector innerTypeDescriptor);
    public virtual IEnumerable`1<IPropertyDescriptor> GetProperties(Type type, object container);
    public virtual IPropertyDescriptor GetProperty(Type type, object container, string name);
}
public abstract class Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleTypeInspectorSkeleton : object {
    public abstract virtual IEnumerable`1<IPropertyDescriptor> GetProperties(Type type, object container);
    public sealed virtual IPropertyDescriptor GetProperty(Type type, object container, string name, bool ignoreUnmatched);
    public virtual IPropertyDescriptor GetProperty(Type type, object container, string name);
}
public class Microsoft.DocAsCode.YamlSerialization.TypeInspectors.ExtensibleYamlAttributesTypeInspector : ExtensibleTypeInspectorSkeleton {
    private IExtensibleTypeInspector innerTypeDescriptor;
    public ExtensibleYamlAttributesTypeInspector(IExtensibleTypeInspector innerTypeDescriptor);
    public virtual IEnumerable`1<IPropertyDescriptor> GetProperties(Type type, object container);
    public virtual IPropertyDescriptor GetProperty(Type type, object container, string name);
}
public interface Microsoft.DocAsCode.YamlSerialization.TypeInspectors.IExtensibleTypeInspector {
    public abstract virtual IPropertyDescriptor GetProperty(Type type, object container, string name);
}
public class Microsoft.DocAsCode.YamlSerialization.YamlDeserializer : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, Type> <PredefinedTagMappings>k__BackingField;
    private Dictionary`2<string, Type> _tagMappings;
    private List`1<IYamlTypeConverter> _converters;
    private TypeDescriptorProxy _typeDescriptor;
    private IValueDeserializer _valueDeserializer;
    [CompilerGeneratedAttribute]
private IList`1<INodeDeserializer> <NodeDeserializers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<INodeTypeResolver> <TypeResolvers>k__BackingField;
    private static Dictionary`2<string, Type> PredefinedTagMappings { get; }
    public IList`1<INodeDeserializer> NodeDeserializers { get; private set; }
    public IList`1<INodeTypeResolver> TypeResolvers { get; private set; }
    public IValueDeserializer ValueDeserializer { get; }
    public YamlDeserializer(IObjectFactory objectFactory, INamingConvention namingConvention, bool ignoreUnmatched, bool ignoreNotFoundAnchor);
    private static YamlDeserializer();
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, Type> get_PredefinedTagMappings();
    [CompilerGeneratedAttribute]
public IList`1<INodeDeserializer> get_NodeDeserializers();
    [CompilerGeneratedAttribute]
private void set_NodeDeserializers(IList`1<INodeDeserializer> value);
    [CompilerGeneratedAttribute]
public IList`1<INodeTypeResolver> get_TypeResolvers();
    [CompilerGeneratedAttribute]
private void set_TypeResolvers(IList`1<INodeTypeResolver> value);
    public IValueDeserializer get_ValueDeserializer();
    public void RegisterTagMapping(string tag, Type type);
    public void RegisterTypeConverter(IYamlTypeConverter typeConverter);
    public T Deserialize(TextReader input, IValueDeserializer deserializer);
    public object Deserialize(TextReader input, IValueDeserializer deserializer);
    public object Deserialize(TextReader input, Type type, IValueDeserializer deserializer);
    public T Deserialize(IParser reader, IValueDeserializer deserializer);
    public object Deserialize(IParser reader, IValueDeserializer deserializer);
    public object Deserialize(IParser parser, Type type, IValueDeserializer deserializer);
}
public class Microsoft.DocAsCode.YamlSerialization.YamlSerializer : object {
    [CompilerGeneratedAttribute]
private IList`1<IYamlTypeConverter> <Converters>k__BackingField;
    private SerializationOptions _options;
    private INamingConvention _namingConvention;
    private ITypeResolver _typeResolver;
    internal IList`1<IYamlTypeConverter> Converters { get; internal set; }
    public YamlSerializer(SerializationOptions options, INamingConvention namingConvention);
    [CompilerGeneratedAttribute]
internal IList`1<IYamlTypeConverter> get_Converters();
    [CompilerGeneratedAttribute]
internal void set_Converters(IList`1<IYamlTypeConverter> value);
    private bool IsOptionSet(SerializationOptions option);
    public void Serialize(TextWriter writer, object graph);
    public void Serialize(IEmitter emitter, object graph);
    private void EmitDocument(IEmitter emitter, IObjectDescriptor graph);
    private IObjectGraphVisitor`1<IEmitter> CreateEmittingVisitor(IEmitter emitter, IObjectGraphTraversalStrategy traversalStrategy, IEventEmitter eventEmitter, IObjectDescriptor graph);
    public void SerializeValue(IEmitter emitter, object value, Type type);
    private IEventEmitter CreateEventEmitter();
    private IObjectGraphTraversalStrategy CreateTraversalStrategy();
}
