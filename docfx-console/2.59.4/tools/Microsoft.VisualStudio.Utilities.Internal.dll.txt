public class Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest : object {
    private HttpWebRequest request;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; }
    public string Method { get; public set; }
    public int Timeout { get; public set; }
    public RequestCachePolicy CachePolicy { get; public set; }
    public string ContentType { get; public set; }
    public AsyncHttpWebRequest(string url);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    public sealed virtual string get_Method();
    public sealed virtual void set_Method(string value);
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual RequestCachePolicy get_CachePolicy();
    public sealed virtual void set_CachePolicy(RequestCachePolicy value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual void AddHeaders(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest/<GetResponseAsync>d__18")]
public sealed virtual Task`1<IStreamedHttpWebResponse> GetResponseAsync();
    [CompilerGeneratedAttribute]
private WebResponse <GetResponseAsync>b__18_0();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.CodeContract : object {
    [ExtensionAttribute]
public static void RequiresArgumentNotNull(T value, string argumentName);
    [ExtensionAttribute]
public static void RequiresArgumentNotEmptyOrWhitespace(string value, string argumentName);
    [ExtensionAttribute]
public static void RequiresArgumentNotNullAndNotEmpty(string value, string argumentName);
    [ExtensionAttribute]
public static void RequiresArgumentNotNullAndNotWhiteSpace(string value, string argumentName);
    [ExtensionAttribute]
public static void RequiresArgumentNotEmpty(Guid guid, string argumentName);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TV GetOrDefault(IDictionary`2<TK, TV> dictionary, TK key);
    [ExtensionAttribute]
public static void AddRange(IDictionary`2<T, S> target, IDictionary`2<T, S> source, bool forceUpdate);
    [ExtensionAttribute]
public static void Remove(ConcurrentDictionary`2<TK, TV> dictionary, TK key);
}
public enum Microsoft.VisualStudio.Utilities.Internal.ErrorCode : Enum {
    public int value__;
    public static ErrorCode NoError;
    public static ErrorCode NullResponse;
    public static ErrorCode RequestTimedOut;
    public static ErrorCode WebExceptionThrown;
}
public interface Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest {
    public string Url { get; }
    public string Method { get; public set; }
    public int Timeout { get; public set; }
    public RequestCachePolicy CachePolicy { get; public set; }
    public string ContentType { get; public set; }
    public abstract virtual string get_Url();
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual RequestCachePolicy get_CachePolicy();
    public abstract virtual void set_CachePolicy(RequestCachePolicy value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual void AddHeaders(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    public abstract virtual Task`1<IStreamedHttpWebResponse> GetResponseAsync();
}
public interface Microsoft.VisualStudio.Utilities.Internal.IRegistryTools {
    public abstract virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, Nullable`1<int> defaultOnError);
    public abstract virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, Nullable`1<int> defaultOnError);
    public abstract virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public abstract virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, object defaultOnError);
    public abstract virtual object GetRegistryValueFromCurrentUserRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public abstract virtual bool SetRegistryFromCurrentUserRoot(string regKeyPath, string regKeyName, object value);
    public abstract virtual bool SetRegistryFromLocalMachineRoot(string regKeyPath, string regKeyName, object value, bool use64Bit);
}
public interface Microsoft.VisualStudio.Utilities.Internal.IStreamedHttpWebResponse {
    public ErrorCode ErrorCode { get; }
    public WebExceptionStatus ExceptionCode { get; }
    public HttpStatusCode StatusCode { get; }
    public abstract virtual ErrorCode get_ErrorCode();
    public abstract virtual WebExceptionStatus get_ExceptionCode();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual Stream GetResponseStream();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.ObjectExtensions : object {
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.Utilities.Internal.ObjectExtensions/<Enumerate>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Enumerate(T value);
    [ExtensionAttribute]
public static IEnumerable`1<T> EmptyIfNull(IEnumerable`1<T> enumeration);
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.VisualStudio.Utilities.Internal.RegistryTools : object {
    public sealed virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, Nullable`1<int> defaultOnError);
    public sealed virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, Nullable`1<int> defaultOnError);
    public sealed virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public sealed virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, object defaultOnError);
    public sealed virtual object GetRegistryValueFromCurrentUserRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public sealed virtual bool SetRegistryFromCurrentUserRoot(string regKeyPath, string regKeyName, object value);
    public sealed virtual bool SetRegistryFromLocalMachineRoot(string regKeyPath, string regKeyName, object value, bool use64Bit);
    private object GetRegistryValue(RegistryKey rootKey, string regKeyPath, string regKeyName, object defaultOnError);
    private bool SetRegistryValue(RegistryKey rootKey, string regKeyPath, string regKeyName, object value);
}
public class Microsoft.VisualStudio.Utilities.Internal.StreamedHttpWebResponse : object {
    [CompilerGeneratedAttribute]
private ErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private WebExceptionStatus <ExceptionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpWebResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    public ErrorCode ErrorCode { get; public set; }
    public WebExceptionStatus ExceptionCode { get; public set; }
    public HttpWebResponse Response { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(ErrorCode value);
    [CompilerGeneratedAttribute]
public sealed virtual WebExceptionStatus get_ExceptionCode();
    [CompilerGeneratedAttribute]
public void set_ExceptionCode(WebExceptionStatus value);
    [CompilerGeneratedAttribute]
public HttpWebResponse get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(HttpWebResponse value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
    public sealed virtual Stream GetResponseStream();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.StringExtensions : object {
    [ExtensionAttribute]
public static string Join(IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.VisualStudio.Utilities.Internal.TaskEx : Task {
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.TaskExtensions : object {
    [ExtensionAttribute]
public static void SwallowException(Task task);
}
