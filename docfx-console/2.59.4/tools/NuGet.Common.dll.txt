public static class NuGet.Common.ActivityCorrelationId : object {
    private static string CorrelationIdSlot;
    private static string DefaultCorrelationId;
    public static string Current { get; }
    private static ActivityCorrelationId();
    public static string get_Current();
    public static void StartNew();
    public static void Clear();
}
public class NuGet.Common.AggregateEnumerableAsync`1 : object {
    private IList`1<IEnumerableAsync`1<T>> _asyncEnumerables;
    private IComparer`1<T> _comparer;
    private IEqualityComparer`1<T> _equalityComparer;
    public AggregateEnumerableAsync`1(IList`1<IEnumerableAsync`1<T>> asyncEnumerables, IComparer`1<T> comparer, IEqualityComparer`1<T> equalityComparer);
    public sealed virtual IEnumeratorAsync`1<T> GetEnumeratorAsync();
}
public class NuGet.Common.AggregateEnumeratorAsync`1 : object {
    private HashSet`1<T> _seen;
    private IComparer`1<T> _orderingComparer;
    private List`1<IEnumeratorAsync`1<T>> _asyncEnumerators;
    private IEnumeratorAsync`1<T> _currentEnumeratorAsync;
    private IEnumeratorAsync`1<T> _lastAwaitedEnumeratorAsync;
    private bool firstPass;
    public T Current { get; }
    public AggregateEnumeratorAsync`1(IList`1<IEnumerableAsync`1<T>> asyncEnumerables, IComparer`1<T> orderingComparer, IEqualityComparer`1<T> equalityComparer);
    public sealed virtual T get_Current();
    [AsyncStateMachineAttribute("NuGet.Common.AggregateEnumeratorAsync`1/<MoveNextAsync>d__9")]
public sealed virtual Task`1<bool> MoveNextAsync();
}
public static class NuGet.Common.AsyncLazy : object {
    public static AsyncLazy`1<T> New(Func`1<Task`1<T>> asyncValueFactory);
    public static AsyncLazy`1<T> New(Func`1<T> valueFactory);
    public static AsyncLazy`1<T> New(Lazy`1<Task`1<T>> inner);
    public static AsyncLazy`1<T> New(T innerData);
}
[CLSCompliantAttribute("True")]
public class NuGet.Common.AsyncLazy`1 : object {
    private Lazy`1<Task`1<T>> _inner;
    public AsyncLazy`1(Func`1<Task`1<T>> valueFactory);
    public AsyncLazy`1(Lazy`1<Task`1<T>> inner);
    public TaskAwaiter`1<T> GetAwaiter();
    public static Lazy`1<Task`1<T>> op_Implicit(AsyncLazy`1<T> outer);
}
public class NuGet.Common.AuthTypeFilteredCredentials : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <AuthTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private NetworkCredential <InnerCredential>k__BackingField;
    public IReadOnlyList`1<string> AuthTypes { get; }
    public NetworkCredential InnerCredential { get; }
    public AuthTypeFilteredCredentials(NetworkCredential innerCredential, IEnumerable`1<string> authTypes);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_AuthTypes();
    [CompilerGeneratedAttribute]
public NetworkCredential get_InnerCredential();
    public sealed virtual NetworkCredential GetCredential(Uri uri, string authType);
}
public static class NuGet.Common.ClientVersionUtility : object {
    private static string _clientVersion;
    public static string GetNuGetAssemblyVersion();
}
public class NuGet.Common.CommandLineArgumentCombinationException : Exception {
    private ILogMessage _logMessage;
    public CommandLineArgumentCombinationException(string message);
    public virtual ILogMessage AsLogMessage();
}
public static class NuGet.Common.ComparisonUtility : object {
    public static StringComparer FrameworkReferenceNameComparer;
    private static ComparisonUtility();
}
public static class NuGet.Common.ConcurrencyUtilities : object {
    private static int NumberOfRetries;
    private static TimeSpan SleepDuration;
    private static KeyedLock PerFileLock;
    private static string _basePath;
    private static string BasePath { get; }
    private static ConcurrencyUtilities();
    [AsyncStateMachineAttribute("NuGet.Common.ConcurrencyUtilities/<ExecuteWithFileLockedAsync>d__3`1")]
public static Task`1<T> ExecuteWithFileLockedAsync(string filePath, Func`2<CancellationToken, Task`1<T>> action, CancellationToken token);
    public static void ExecuteWithFileLocked(string filePath, Action action);
    private static FileStream AcquireFileStream(string lockPath);
    private static string get_BasePath();
    private static string FileLockPath(string filePath);
    private static string FilePathToLockName(string filePath);
    private static string ToHex(Byte[] bytes);
    private static char ToHexChar(int input);
}
public class NuGet.Common.CryptoHashProvider : object {
    private static string SHA512HashAlgorithm;
    private static string SHA256HashAlgorithm;
    private string _hashAlgorithm;
    public CryptoHashProvider(string hashAlgorithm);
    public Byte[] CalculateHash(Stream stream);
    public Byte[] CalculateHash(Byte[] data);
    public bool VerifyHash(Byte[] data, Byte[] hash);
}
[ExtensionAttribute]
public static class NuGet.Common.CryptoHashUtility : object {
    private static string SHA256_OID;
    private static string SHA384_OID;
    private static string SHA512_OID;
    private static string SHA256_RSA_OID;
    private static string SHA384_RSA_OID;
    private static string SHA512_RSA_OID;
    private static Lazy`1<bool> AllowFipsAlgorithmsOnly;
    private static CryptoHashUtility();
    [ExtensionAttribute]
public static string ComputeHashAsBase64(HashAlgorithm hashAlgorithm, Stream data);
    [ExtensionAttribute]
public static string ComputeHashAsBase64(HashAlgorithm hashAlgorithm, Stream data, bool leaveStreamOpen);
    [ExtensionAttribute]
public static Byte[] ComputeHash(HashAlgorithmName hashAlgorithmName, Byte[] data);
    [ExtensionAttribute]
public static Byte[] ComputeHash(HashAlgorithm hashAlgorithm, Stream data);
    [ExtensionAttribute]
public static Byte[] ComputeHash(HashAlgorithm hashAlgorithm, Stream data, bool leaveStreamOpen);
    public static HashAlgorithm GetHashAlgorithm(string hashAlgorithmName);
    public static HashAlgorithmName GetHashAlgorithmName(string hashAlgorithm);
    public static HashAlgorithm GetHashAlgorithm(HashAlgorithmName hashAlgorithmName);
    [ExtensionAttribute]
public static HashAlgorithm GetHashProvider(HashAlgorithmName hashAlgorithmName);
    public static HashAlgorithm GetSha1HashProvider();
    private static bool ReadFipsConfigValue();
    [ExtensionAttribute]
public static HashAlgorithmName ConvertToSystemSecurityHashAlgorithmName(HashAlgorithmName hashAlgorithmName);
    [ExtensionAttribute]
public static string ConvertToOidString(HashAlgorithmName hashAlgorithmName);
    [ExtensionAttribute]
public static Oid ConvertToOid(HashAlgorithmName hashAlgorithm);
    public static HashAlgorithmName OidToHashAlgorithmName(string oid);
    [ExtensionAttribute]
public static string ConvertToOidString(SignatureAlgorithmName signatureAlgorithmName);
    public static string GenerateUniqueToken(string caseInsensitiveKey);
}
public class NuGet.Common.CultureUtility : object {
    public static void DisableLocalization();
    private static void SetCulture(CultureInfo culture);
}
public class NuGet.Common.DatetimeUtility : object {
    public static string ToReadableTimeFormat(TimeSpan time);
}
public static class NuGet.Common.DirectoryUtility : object {
    private static object LockObject;
    private static int UGO_RWX;
    private static DirectoryUtility();
    public static void CreateSharedDirectory(string path);
    private static void CreateSingleSharedDirectory(string path);
    private static int chmod(string pathname, int mode);
}
public class NuGet.Common.EnvironmentVariableWrapper : object {
    [CompilerGeneratedAttribute]
private static IEnvironmentVariableReader <Instance>k__BackingField;
    public static IEnvironmentVariableReader Instance { get; }
    private static EnvironmentVariableWrapper();
    [CompilerGeneratedAttribute]
public static IEnvironmentVariableReader get_Instance();
    public sealed virtual string GetEnvironmentVariable(string variable);
}
public class NuGet.Common.ExceptionLogger : object {
    [CompilerGeneratedAttribute]
private bool <ShowStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExceptionLogger <Instance>k__BackingField;
    public bool ShowStack { get; }
    public static ExceptionLogger Instance { get; }
    public ExceptionLogger(IEnvironmentVariableReader reader);
    private static ExceptionLogger();
    [CompilerGeneratedAttribute]
public bool get_ShowStack();
    private static bool ShouldShowStack(IEnvironmentVariableReader reader);
    [CompilerGeneratedAttribute]
public static ExceptionLogger get_Instance();
}
public static class NuGet.Common.ExceptionUtilities : object {
    public static void LogException(Exception ex, ILogger logger);
    public static void LogException(Exception ex, ILogger logger, bool logStackAsError);
    public static string DisplayMessage(Exception exception, bool indent);
    public static string DisplayMessage(Exception exception);
    public static string DisplayMessage(AggregateException exception);
    public static string DisplayMessage(TargetInvocationException exception);
    public static Exception Unwrap(Exception exception);
    [IteratorStateMachineAttribute("NuGet.Common.ExceptionUtilities/<GetMessages>d__7")]
private static IEnumerable`1<string> GetMessages(AggregateException exception);
    private static IEnumerable`1<string> GetMessages(TargetInvocationException exception);
    [IteratorStateMachineAttribute("NuGet.Common.ExceptionUtilities/<GetMessages>d__9")]
private static IEnumerable`1<string> GetMessages(Exception exception);
    [IteratorStateMachineAttribute("NuGet.Common.ExceptionUtilities/<GetLines>d__10")]
private static IEnumerable`1<string> GetLines(string input);
    private static string JoinMessages(IEnumerable`1<string> messages, bool indent);
}
public static class NuGet.Common.FileUtility : object {
    public static int MaxTries;
    public static FileShare FileSharePermissions;
    private static FileUtility();
    public static string GetTempFilePath(string directory);
    [AsyncStateMachineAttribute("NuGet.Common.FileUtility/<DeleteWithLock>d__3")]
public static Task DeleteWithLock(string filePath);
    [AsyncStateMachineAttribute("NuGet.Common.FileUtility/<ReplaceWithLock>d__4")]
public static Task ReplaceWithLock(Action`1<string> writeSourceFile, string destFilePath);
    public static void Replace(Action`1<string> writeSourceFile, string destFilePath);
    [AsyncStateMachineAttribute("NuGet.Common.FileUtility/<ReplaceAsync>d__6")]
public static Task ReplaceAsync(Func`2<string, Task> writeSourceFile, string destFilePath);
    public static void Replace(string sourceFileName, string destFileName);
    public static void Move(string sourceFileName, string destFileName);
    public static void Delete(string path);
    public static T SafeRead(string filePath, Func`3<FileStream, string, T> read);
    [AsyncStateMachineAttribute("NuGet.Common.FileUtility/<SafeReadAsync>d__11`1")]
public static Task`1<T> SafeReadAsync(string filePath, Func`3<FileStream, string, Task`1<T>> read);
    private static void Sleep(int ms);
}
public enum NuGet.Common.HashAlgorithmName : Enum {
    public int value__;
    public static HashAlgorithmName Unknown;
    public static HashAlgorithmName SHA256;
    public static HashAlgorithmName SHA384;
    public static HashAlgorithmName SHA512;
}
public interface NuGet.Common.ICollectorLogger {
    public IEnumerable`1<IRestoreLogMessage> Errors { get; }
    public abstract virtual IEnumerable`1<IRestoreLogMessage> get_Errors();
}
public interface NuGet.Common.IEnumerableAsync`1 {
    public abstract virtual IEnumeratorAsync`1<T> GetEnumeratorAsync();
}
public interface NuGet.Common.IEnumeratorAsync`1 {
    public T Current { get; }
    public abstract virtual T get_Current();
    public abstract virtual Task`1<bool> MoveNextAsync();
}
public interface NuGet.Common.IEnvironmentVariableReader {
    public abstract virtual string GetEnvironmentVariable(string variable);
}
public interface NuGet.Common.ILogFileContext {
    public string FilePath { get; public set; }
    public int StartLineNumber { get; public set; }
    public int StartColumnNumber { get; public set; }
    public int EndLineNumber { get; public set; }
    public int EndColumnNumber { get; public set; }
    public abstract virtual string get_FilePath();
    public abstract virtual void set_FilePath(string value);
    public abstract virtual int get_StartLineNumber();
    public abstract virtual void set_StartLineNumber(int value);
    public abstract virtual int get_StartColumnNumber();
    public abstract virtual void set_StartColumnNumber(int value);
    public abstract virtual int get_EndLineNumber();
    public abstract virtual void set_EndLineNumber(int value);
    public abstract virtual int get_EndColumnNumber();
    public abstract virtual void set_EndColumnNumber(int value);
}
public interface NuGet.Common.ILogger {
    public abstract virtual void LogDebug(string data);
    public abstract virtual void LogVerbose(string data);
    public abstract virtual void LogInformation(string data);
    public abstract virtual void LogMinimal(string data);
    public abstract virtual void LogWarning(string data);
    public abstract virtual void LogError(string data);
    public abstract virtual void LogInformationSummary(string data);
    public abstract virtual void Log(LogLevel level, string data);
    public abstract virtual Task LogAsync(LogLevel level, string data);
    public abstract virtual void Log(ILogMessage message);
    public abstract virtual Task LogAsync(ILogMessage message);
}
public interface NuGet.Common.ILogMessage {
    public LogLevel Level { get; public set; }
    public WarningLevel WarningLevel { get; public set; }
    public NuGetLogCode Code { get; public set; }
    public string Message { get; public set; }
    public string ProjectPath { get; public set; }
    public DateTimeOffset Time { get; public set; }
    public abstract virtual LogLevel get_Level();
    public abstract virtual void set_Level(LogLevel value);
    public abstract virtual WarningLevel get_WarningLevel();
    public abstract virtual void set_WarningLevel(WarningLevel value);
    public abstract virtual NuGetLogCode get_Code();
    public abstract virtual void set_Code(NuGetLogCode value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual string get_ProjectPath();
    public abstract virtual void set_ProjectPath(string value);
    public abstract virtual DateTimeOffset get_Time();
    public abstract virtual void set_Time(DateTimeOffset value);
}
public interface NuGet.Common.ILogMessageException {
    public abstract virtual ILogMessage AsLogMessage();
}
public interface NuGet.Common.INuGetLogMessage {
}
public interface NuGet.Common.INuGetPathContext {
    public string UserPackageFolder { get; }
    public IReadOnlyList`1<string> FallbackPackageFolders { get; }
    public string HttpCacheFolder { get; }
    public abstract virtual string get_UserPackageFolder();
    public abstract virtual IReadOnlyList`1<string> get_FallbackPackageFolders();
    public abstract virtual string get_HttpCacheFolder();
}
public interface NuGet.Common.INuGetTelemetryService {
    public abstract virtual void EmitTelemetryEvent(TelemetryEvent telemetryData);
    public abstract virtual IDisposable StartActivity(string activityName);
}
public interface NuGet.Common.IPackLogMessage {
}
public interface NuGet.Common.IRestoreLogMessage {
    public string LibraryId { get; public set; }
    public IReadOnlyList`1<string> TargetGraphs { get; public set; }
    public bool ShouldDisplay { get; public set; }
    public abstract virtual string get_LibraryId();
    public abstract virtual void set_LibraryId(string value);
    public abstract virtual IReadOnlyList`1<string> get_TargetGraphs();
    public abstract virtual void set_TargetGraphs(IReadOnlyList`1<string> value);
    public abstract virtual bool get_ShouldDisplay();
    public abstract virtual void set_ShouldDisplay(bool value);
}
public interface NuGet.Common.ITelemetrySession {
    public abstract virtual void PostEvent(TelemetryEvent telemetryEvent);
}
internal class NuGet.Common.KeyedLock : object {
    private Dictionary`2<string, LockState> _locks;
    private SemaphoreSlim _dictionaryLock;
    [AsyncStateMachineAttribute("NuGet.Common.KeyedLock/<EnterAsync>d__3")]
internal Task EnterAsync(string key, CancellationToken token);
    internal void Enter(string key);
    private LockState GetOrCreate(string key);
    [AsyncStateMachineAttribute("NuGet.Common.KeyedLock/<ExitAsync>d__6")]
internal Task ExitAsync(string key);
    internal void Exit(string key);
    private void Cleanup(string key);
    public sealed virtual void Dispose();
}
public abstract class NuGet.Common.LegacyLoggerAdapter : object {
    public sealed virtual void Log(LogLevel level, string data);
    public sealed virtual Task LogAsync(LogLevel level, string data);
    public virtual void Log(ILogMessage message);
    [AsyncStateMachineAttribute("NuGet.Common.LegacyLoggerAdapter/<LogAsync>d__3")]
public virtual Task LogAsync(ILogMessage message);
    public abstract virtual void LogDebug(string data);
    public abstract virtual void LogVerbose(string data);
    public abstract virtual void LogInformation(string data);
    public abstract virtual void LogMinimal(string data);
    public abstract virtual void LogWarning(string data);
    public abstract virtual void LogError(string data);
    public abstract virtual void LogInformationSummary(string data);
}
public class NuGet.Common.LocalResourceUtils : object {
    public static void DeleteDirectoryTree(string folderPath, List`1<string> failedDeletes);
    private static void SafeDeleteDirectoryTree(string folderPath);
    private static void DeleteFilesInDirectoryTree(string folderPath, List`1<string> failedDeletes);
}
public abstract class NuGet.Common.LoggerBase : object {
    [CompilerGeneratedAttribute]
private LogLevel <VerbosityLevel>k__BackingField;
    public LogLevel VerbosityLevel { get; public set; }
    public LoggerBase(LogLevel verbosityLevel);
    [CompilerGeneratedAttribute]
public LogLevel get_VerbosityLevel();
    [CompilerGeneratedAttribute]
public void set_VerbosityLevel(LogLevel value);
    public abstract virtual void Log(ILogMessage message);
    public abstract virtual Task LogAsync(ILogMessage message);
    public virtual void Log(LogLevel level, string data);
    public virtual Task LogAsync(LogLevel level, string data);
    public virtual void LogDebug(string data);
    public virtual void LogError(string data);
    public virtual void LogInformation(string data);
    public virtual void LogInformationSummary(string data);
    public virtual void LogMinimal(string data);
    public virtual void LogVerbose(string data);
    public virtual void LogWarning(string data);
    protected virtual bool DisplayMessage(LogLevel messageLevel);
    protected virtual bool CollectMessage(LogLevel messageLevel);
}
[ExtensionAttribute]
public static class NuGet.Common.LoggingExtensions : object {
    [ExtensionAttribute]
public static string FormatWithCode(ILogMessage message);
    [ExtensionAttribute]
public static string GetName(NuGetLogCode code);
    [ExtensionAttribute]
public static bool TryGetName(NuGetLogCode code, String& codeString);
}
public enum NuGet.Common.LogLevel : Enum {
    public int value__;
    public static LogLevel Debug;
    public static LogLevel Verbose;
    public static LogLevel Information;
    public static LogLevel Minimal;
    public static LogLevel Warning;
    public static LogLevel Error;
}
public class NuGet.Common.LogMessage : object {
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private WarningLevel <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetLogCode <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Time>k__BackingField;
    public LogLevel Level { get; public set; }
    public WarningLevel WarningLevel { get; public set; }
    public NuGetLogCode Code { get; public set; }
    public string Message { get; public set; }
    public string ProjectPath { get; public set; }
    public DateTimeOffset Time { get; public set; }
    public LogMessage(LogLevel level, string message, NuGetLogCode code);
    public LogMessage(LogLevel level, string message);
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(LogLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual WarningLevel get_WarningLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WarningLevel(WarningLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual NuGetLogCode get_Code();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Code(NuGetLogCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Time();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Time(DateTimeOffset value);
    public virtual string ToString();
    public static LogMessage CreateError(NuGetLogCode code, string message);
    public static LogMessage CreateWarning(NuGetLogCode code, string message);
    public static LogMessage Create(LogLevel level, string message);
}
public class NuGet.Common.LogMessageProperties : object {
    public static string LEVEL;
    public static string CODE;
    public static string MESSAGE;
    public static string LIBRARY_ID;
    public static string TARGET_GRAPHS;
    public static string WARNING_LEVEL;
    public static string FILE_PATH;
    public static string START_LINE_NUMBER;
    public static string START_COLUMN_NUMBER;
    public static string END_LINE_NUMBER;
    public static string END_COLUMN_NUMBER;
}
public static class NuGet.Common.MSBuildStringUtility : object {
    public static String[] Split(string s);
    public static String[] Split(string s, Char[] chars);
    public static string TrimAndGetNullForEmpty(string s);
    public static String[] TrimAndExcludeNullOrEmpty(String[] strings);
    public static bool IsTrue(string value);
    public static bool IsTrueOrEmpty(string value);
    [IteratorStateMachineAttribute("NuGet.Common.MSBuildStringUtility/<GetNuGetLogCodes>d__6")]
public static IEnumerable`1<NuGetLogCode> GetNuGetLogCodes(string s);
    public static Nullable`1<bool> GetBooleanOrNull(string value);
    public static string Convert(string value);
    public static IEnumerable`1<NuGetLogCode> GetDistinctNuGetLogCodesOrDefault(IEnumerable`1<IEnumerable`1<NuGetLogCode>> nugetLogCodeLists);
}
public static class NuGet.Common.NetworkProtocolUtility : object {
    public static void SetConnectionLimit();
}
public static class NuGet.Common.NuGetEnvironment : object {
    private static string DotNet;
    private static string DotNetExe;
    private static string Home;
    private static string DotNetHome;
    private static string UserProfile;
    private static Lazy`1<string> _getHome;
    private static NuGetEnvironment();
    public static string GetFolderPath(NuGetFolderPath folder);
    private static string GetFolderPath(SpecialFolder folder);
    private static string GetHome();
    private static string GetHomeWindows();
    private static string GetValueOrThrowMissingEnvVarsDotnet(Func`1<string> getValue, string home, string dotnetHome);
    private static string GetValueOrThrowMissingEnvVar(Func`1<string> getValue, string name);
    public static string GetDotNetLocation();
}
public enum NuGet.Common.NuGetFolderPath : Enum {
    public int value__;
    public static NuGetFolderPath MachineWideSettingsBaseDirectory;
    public static NuGetFolderPath MachineWideConfigDirectory;
    public static NuGetFolderPath UserSettingsDirectory;
    public static NuGetFolderPath HttpCacheDirectory;
    public static NuGetFolderPath NuGetHome;
    public static NuGetFolderPath DefaultMsBuildPath;
    public static NuGetFolderPath Temp;
    public static NuGetFolderPath NuGetPluginsCacheDirectory;
}
public enum NuGet.Common.NuGetLogCode : Enum {
    public int value__;
    public static NuGetLogCode Undefined;
    public static NuGetLogCode NU1000;
    public static NuGetLogCode NU1001;
    public static NuGetLogCode NU1002;
    public static NuGetLogCode NU1003;
    public static NuGetLogCode NU1004;
    public static NuGetLogCode NU1005;
    public static NuGetLogCode NU1006;
    public static NuGetLogCode NU1007;
    public static NuGetLogCode NU1008;
    public static NuGetLogCode NU1009;
    public static NuGetLogCode NU1100;
    public static NuGetLogCode NU1101;
    public static NuGetLogCode NU1102;
    public static NuGetLogCode NU1103;
    public static NuGetLogCode NU1104;
    public static NuGetLogCode NU1105;
    public static NuGetLogCode NU1106;
    public static NuGetLogCode NU1107;
    public static NuGetLogCode NU1108;
    public static NuGetLogCode NU1109;
    public static NuGetLogCode NU1201;
    public static NuGetLogCode NU1202;
    public static NuGetLogCode NU1203;
    public static NuGetLogCode NU1204;
    public static NuGetLogCode NU1211;
    public static NuGetLogCode NU1212;
    public static NuGetLogCode NU1213;
    public static NuGetLogCode NU1401;
    public static NuGetLogCode NU1402;
    public static NuGetLogCode NU1403;
    public static NuGetLogCode NU1410;
    public static NuGetLogCode NU1500;
    public static NuGetLogCode NU1501;
    public static NuGetLogCode NU1502;
    public static NuGetLogCode NU1503;
    public static NuGetLogCode NU1601;
    public static NuGetLogCode NU1602;
    public static NuGetLogCode NU1603;
    public static NuGetLogCode NU1604;
    public static NuGetLogCode NU1605;
    public static NuGetLogCode NU1608;
    public static NuGetLogCode NU1701;
    public static NuGetLogCode NU1702;
    public static NuGetLogCode NU1801;
    public static NuGetLogCode NU3000;
    public static NuGetLogCode NU3001;
    public static NuGetLogCode NU3002;
    public static NuGetLogCode NU3003;
    public static NuGetLogCode NU3004;
    public static NuGetLogCode NU3005;
    public static NuGetLogCode NU3006;
    public static NuGetLogCode NU3007;
    public static NuGetLogCode NU3008;
    public static NuGetLogCode NU3009;
    public static NuGetLogCode NU3010;
    public static NuGetLogCode NU3011;
    public static NuGetLogCode NU3012;
    public static NuGetLogCode NU3013;
    public static NuGetLogCode NU3014;
    public static NuGetLogCode NU3015;
    public static NuGetLogCode NU3016;
    public static NuGetLogCode NU3017;
    public static NuGetLogCode NU3018;
    public static NuGetLogCode NU3019;
    public static NuGetLogCode NU3020;
    public static NuGetLogCode NU3021;
    public static NuGetLogCode NU3022;
    public static NuGetLogCode NU3023;
    public static NuGetLogCode NU3024;
    public static NuGetLogCode NU3025;
    public static NuGetLogCode NU3026;
    public static NuGetLogCode NU3027;
    public static NuGetLogCode NU3028;
    public static NuGetLogCode NU3029;
    public static NuGetLogCode NU3030;
    public static NuGetLogCode NU3031;
    public static NuGetLogCode NU3032;
    public static NuGetLogCode NU3033;
    public static NuGetLogCode NU3034;
    public static NuGetLogCode NU3035;
    public static NuGetLogCode NU3036;
    public static NuGetLogCode NU3037;
    public static NuGetLogCode NU3038;
    public static NuGetLogCode NU3039;
    public static NuGetLogCode NU3040;
    public static NuGetLogCode NU3041;
    public static NuGetLogCode NU5000;
    public static NuGetLogCode NU5001;
    public static NuGetLogCode NU5002;
    public static NuGetLogCode NU5003;
    public static NuGetLogCode NU5004;
    public static NuGetLogCode NU5005;
    public static NuGetLogCode NU5007;
    public static NuGetLogCode NU5008;
    public static NuGetLogCode NU5009;
    public static NuGetLogCode NU5010;
    public static NuGetLogCode NU5011;
    public static NuGetLogCode NU5012;
    public static NuGetLogCode NU5013;
    public static NuGetLogCode NU5014;
    public static NuGetLogCode NU5015;
    public static NuGetLogCode NU5016;
    public static NuGetLogCode NU5017;
    public static NuGetLogCode NU5018;
    public static NuGetLogCode NU5019;
    public static NuGetLogCode NU5020;
    public static NuGetLogCode NU5021;
    public static NuGetLogCode NU5022;
    public static NuGetLogCode NU5023;
    public static NuGetLogCode NU5024;
    public static NuGetLogCode NU5025;
    public static NuGetLogCode NU5026;
    public static NuGetLogCode NU5027;
    public static NuGetLogCode NU5028;
    public static NuGetLogCode NU5029;
    public static NuGetLogCode NU5030;
    public static NuGetLogCode NU5031;
    public static NuGetLogCode NU5032;
    public static NuGetLogCode NU5033;
    public static NuGetLogCode NU5034;
    public static NuGetLogCode NU5035;
    public static NuGetLogCode NU5036;
    public static NuGetLogCode NU5037;
    public static NuGetLogCode NU5046;
    public static NuGetLogCode NU5047;
    public static NuGetLogCode NU5048;
    public static NuGetLogCode NU5049;
    public static NuGetLogCode NU5100;
    public static NuGetLogCode NU5101;
    public static NuGetLogCode NU5102;
    public static NuGetLogCode NU5103;
    public static NuGetLogCode NU5104;
    public static NuGetLogCode NU5105;
    public static NuGetLogCode NU5106;
    public static NuGetLogCode NU5107;
    public static NuGetLogCode NU5108;
    public static NuGetLogCode NU5109;
    public static NuGetLogCode NU5110;
    public static NuGetLogCode NU5111;
    public static NuGetLogCode NU5112;
    public static NuGetLogCode NU5114;
    public static NuGetLogCode NU5115;
    public static NuGetLogCode NU5116;
    public static NuGetLogCode NU5117;
    public static NuGetLogCode NU5118;
    public static NuGetLogCode NU5119;
    public static NuGetLogCode NU5120;
    public static NuGetLogCode NU5121;
    public static NuGetLogCode NU5122;
    public static NuGetLogCode NU5123;
    public static NuGetLogCode NU5124;
    public static NuGetLogCode NU5125;
    public static NuGetLogCode NU5126;
    public static NuGetLogCode NU5127;
    public static NuGetLogCode NU5128;
    public static NuGetLogCode NU5129;
    public static NuGetLogCode NU5130;
    public static NuGetLogCode NU5131;
    public static NuGetLogCode NU5500;
}
public enum NuGet.Common.NuGetOperationStatus : Enum {
    public int value__;
    public static NuGetOperationStatus NoOp;
    public static NuGetOperationStatus Succeeded;
    public static NuGetOperationStatus Failed;
    public static NuGetOperationStatus Cancelled;
}
public class NuGet.Common.NullLogger : LoggerBase {
    private static ILogger _instance;
    public static ILogger Instance { get; }
    public static ILogger get_Instance();
    public virtual void Log(ILogMessage message);
    public virtual void Log(LogLevel level, string data);
    public virtual Task LogAsync(ILogMessage message);
    public virtual Task LogAsync(LogLevel level, string data);
}
public class NuGet.Common.PackagingLogMessage : object {
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetLogCode <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private WarningLevel <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumnNumber>k__BackingField;
    public LogLevel Level { get; public set; }
    public NuGetLogCode Code { get; public set; }
    public string Message { get; public set; }
    public DateTimeOffset Time { get; public set; }
    public string ProjectPath { get; public set; }
    public WarningLevel WarningLevel { get; public set; }
    public string FilePath { get; public set; }
    public int StartLineNumber { get; public set; }
    public int StartColumnNumber { get; public set; }
    public int EndLineNumber { get; public set; }
    public int EndColumnNumber { get; public set; }
    private PackagingLogMessage(LogLevel logLevel, NuGetLogCode logCode, string message);
    private PackagingLogMessage(LogLevel logLevel, string message);
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(LogLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual NuGetLogCode get_Code();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Code(NuGetLogCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Time();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Time(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual WarningLevel get_WarningLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WarningLevel(WarningLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartLineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartLineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartColumnNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartColumnNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_EndLineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndLineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_EndColumnNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndColumnNumber(int value);
    public static PackagingLogMessage CreateError(string message, NuGetLogCode code);
    public static PackagingLogMessage CreateWarning(string message, NuGetLogCode code);
    public static PackagingLogMessage CreateMessage(string message, LogLevel logLevel);
    private static NuGetLogCode GetDefaultLogCode(LogLevel logLevel);
}
public static class NuGet.Common.PathResolver : object {
    public static IEnumerable`1<T> GetMatches(IEnumerable`1<T> source, Func`2<T, string> getPath, IEnumerable`1<string> wildcards);
    public static void FilterPackageFiles(ICollection`1<T> source, Func`2<T, string> getPath, IEnumerable`1<string> wildcards);
    public static IEnumerable`1<T> GetFilteredPackageFiles(ICollection`1<T> source, Func`2<T, string> getPath, IEnumerable`1<string> wildcards);
    public static string NormalizeWildcardForExcludedFiles(string basePath, string wildcard);
    private static Regex WildcardToRegex(string wildcard);
    public static IEnumerable`1<string> PerformWildcardSearch(string basePath, string searchPath);
    public static IEnumerable`1<SearchPathResult> PerformWildcardSearch(string basePath, string searchPath, bool includeEmptyDirectories, String& normalizedBasePath);
    internal static string GetPathToEnumerateFrom(string basePath, string searchPath);
    internal static string NormalizeBasePath(string basePath, String& searchPath);
    public static bool IsWildcardSearch(string filter);
    public static bool IsDirectoryPath(string path);
    private static bool IsEmptyDirectory(string directory);
}
public static class NuGet.Common.PathUtility : object {
    private static Lazy`1<bool> _isFileSystemCaseInsensitive;
    public static bool IsFileSystemCaseInsensitive { get; }
    private static PathUtility();
    public static StringComparer GetStringComparerBasedOnOS();
    public static StringComparison GetStringComparisonBasedOnOS();
    [IteratorStateMachineAttribute("NuGet.Common.PathUtility/<GetUniquePathsBasedOnOS>d__3")]
public static IEnumerable`1<string> GetUniquePathsBasedOnOS(IEnumerable`1<string> paths);
    public static string GetPathWithForwardSlashes(string path);
    public static string EnsureTrailingSlash(string path);
    public static string EnsureTrailingForwardSlash(string path);
    private static string EnsureTrailingCharacter(string path, char trailingCharacter);
    public static bool IsChildOfDirectory(string dir, string candidate);
    public static bool HasTrailingDirectorySeparator(string path);
    public static bool IsDirectorySeparatorChar(char ch);
    public static void EnsureParentDirectory(string filePath);
    public static string GetRelativePath(string path1, string path2);
    public static string GetRelativePath(string path1, string path2, char separator);
    public static string GetAbsolutePath(string basePath, string relativePath);
    public static string GetDirectoryName(string path);
    public static string GetPathWithBackSlashes(string path);
    public static string GetPathWithDirectorySeparator(string path);
    public static string GetPath(Uri uri);
    public static string EscapePSPath(string path);
    public static string SmartTruncate(string path, int maxWidth);
    public static bool IsSubdirectory(string basePath, string path);
    public static string ReplaceAltDirSeparatorWithDirSeparator(string path);
    public static string ReplaceDirSeparatorWithAltDirSeparator(string path);
    public static ZipArchiveEntry GetEntry(ZipArchive archive, string path);
    public static bool get_IsFileSystemCaseInsensitive();
    private static bool CheckIfFileSystemIsCaseInsensitive();
    private static bool CheckCaseSenstivityRecursivelyTillDirectoryExists(string path, Boolean& ignoreResult);
    public static string StripLeadingDirectorySeparators(string filename);
}
public static class NuGet.Common.PathValidator : object {
    public static bool IsValidSource(string source);
    public static bool IsValidLocalPath(string path);
    public static bool IsValidUncPath(string path);
    public static bool IsValidUrl(string url);
    public static bool IsValidRelativePath(string path);
}
public class NuGet.Common.Preprocessor : object {
    [AsyncStateMachineAttribute("NuGet.Common.Preprocessor/<ProcessAsync>d__0")]
public static Task`1<string> ProcessAsync(Func`1<Task`1<Stream>> streamTaskFactory, Func`2<string, string> tokenReplacement, CancellationToken cancellationToken);
    public static string Process(Stream stream, Func`2<string, string> tokenReplacement);
}
public class NuGet.Common.ProjectJsonPathUtilities : object {
    public static string ProjectConfigFileName;
    public static string ProjectConfigFileEnding;
    public static string ProjectLockFileName;
    private static ProjectJsonPathUtilities();
    public static string GetProjectConfigPath(string directoryPath, string projectName);
    public static string GetProjectConfigWithProjectName(string projectName);
    public static string GetProjectLockFileNameWithProjectName(string projectName);
    public static string GetLockFilePath(string configFilePath);
    public static string GetProjectNameFromConfigFileName(string configPath);
    public static bool IsProjectConfig(string configPath);
}
public class NuGet.Common.RestoreLogMessage : object {
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetLogCode <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private WarningLevel <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LibraryId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <TargetGraphs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldDisplay>k__BackingField;
    public LogLevel Level { get; public set; }
    public NuGetLogCode Code { get; public set; }
    public string Message { get; public set; }
    public DateTimeOffset Time { get; public set; }
    public string ProjectPath { get; public set; }
    public WarningLevel WarningLevel { get; public set; }
    public string FilePath { get; public set; }
    public int StartLineNumber { get; public set; }
    public int StartColumnNumber { get; public set; }
    public int EndLineNumber { get; public set; }
    public int EndColumnNumber { get; public set; }
    public string LibraryId { get; public set; }
    public IReadOnlyList`1<string> TargetGraphs { get; public set; }
    public bool ShouldDisplay { get; public set; }
    public RestoreLogMessage(LogLevel logLevel, NuGetLogCode errorCode, string errorString, string targetGraph, bool logToInnerLogger);
    public RestoreLogMessage(LogLevel logLevel, NuGetLogCode errorCode, string errorString, string targetGraph);
    public RestoreLogMessage(LogLevel logLevel, NuGetLogCode errorCode, string errorString);
    public RestoreLogMessage(LogLevel logLevel, string errorString);
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(LogLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual NuGetLogCode get_Code();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Code(NuGetLogCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Time();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Time(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual WarningLevel get_WarningLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WarningLevel(WarningLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartLineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartLineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartColumnNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartColumnNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_EndLineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndLineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_EndColumnNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndColumnNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LibraryId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LibraryId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_TargetGraphs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetGraphs(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldDisplay();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldDisplay(bool value);
    public static RestoreLogMessage CreateWarning(NuGetLogCode code, string message, string libraryId, String[] targetGraphs);
    public static RestoreLogMessage CreateWarning(NuGetLogCode code, string message);
    public static RestoreLogMessage CreateError(NuGetLogCode code, string message);
    public static RestoreLogMessage CreateError(NuGetLogCode code, string message, string libraryId, String[] targetGraphs);
    private static NuGetLogCode GetDefaultLogCode(LogLevel logLevel);
}
public enum NuGet.Common.RevocationMode : Enum {
    public int value__;
    public static RevocationMode Online;
    public static RevocationMode Offline;
}
public static class NuGet.Common.RuntimeEnvironmentHelper : object {
    private static String[] VisualStudioProcesses;
    private static Lazy`1<bool> _isMono;
    private static Lazy`1<bool> _isWindows;
    private static Lazy`1<bool> _IsMacOSX;
    private static Lazy`1<bool> _IsLinux;
    private static Lazy`1<bool> _isRunningInVisualStudio;
    [CompilerGeneratedAttribute]
private static bool <IsDev14>k__BackingField;
    public static bool IsDev14 { get; public set; }
    public static bool IsWindows { get; }
    public static bool IsMono { get; }
    public static bool IsRunningInVisualStudio { get; }
    public static bool IsMacOSX { get; }
    public static bool IsLinux { get; }
    private static RuntimeEnvironmentHelper();
    private static int uname(IntPtr buf);
    [CompilerGeneratedAttribute]
public static bool get_IsDev14();
    [CompilerGeneratedAttribute]
public static void set_IsDev14(bool value);
    public static bool get_IsWindows();
    private static bool GetIsWindows();
    public static bool get_IsMono();
    public static bool get_IsRunningInVisualStudio();
    private static string GetCurrentProcessFilePath();
    public static bool get_IsMacOSX();
    private static bool GetIsMacOSX();
    public static bool get_IsLinux();
    private static bool GetIsLinux();
}
public enum NuGet.Common.SignatureAlgorithmName : Enum {
    public int value__;
    public static SignatureAlgorithmName Unknown;
    public static SignatureAlgorithmName SHA256RSA;
    public static SignatureAlgorithmName SHA384RSA;
    public static SignatureAlgorithmName SHA512RSA;
}
public enum NuGet.Common.SignatureValidationMode : Enum {
    public int value__;
    public static SignatureValidationMode Accept;
    public static SignatureValidationMode Require;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NuGet.Common.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AbsolutePathRequired { get; }
    internal static string Argument_Must_Be_GreaterThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string Error_FailedToCreateRandomFile { get; }
    internal static string MissingRequiredEnvVar { get; }
    internal static string MissingRequiredEnvVarsDotnet { get; }
    internal static string NoPackageFoldersFound { get; }
    internal static string PackageFolderNotFound { get; }
    internal static string UnableToDetemineClientVersion { get; }
    internal static string UnauthorizedLockFail { get; }
    internal static string UnsupportedHashAlgorithm { get; }
    internal static string UnsupportedHashAlgorithmName { get; }
    internal static string UnsupportedSignatureAlgorithmName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AbsolutePathRequired();
    internal static string get_Argument_Must_Be_GreaterThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_Error_FailedToCreateRandomFile();
    internal static string get_MissingRequiredEnvVar();
    internal static string get_MissingRequiredEnvVarsDotnet();
    internal static string get_NoPackageFoldersFound();
    internal static string get_PackageFolderNotFound();
    internal static string get_UnableToDetemineClientVersion();
    internal static string get_UnauthorizedLockFail();
    internal static string get_UnsupportedHashAlgorithm();
    internal static string get_UnsupportedHashAlgorithmName();
    internal static string get_UnsupportedSignatureAlgorithmName();
}
public class NuGet.Common.TelemetryActivity : object {
    private DateTime _startTime;
    private Stopwatch _stopwatch;
    private Stopwatch _intervalWatch;
    private List`1<Tuple`2<string, TimeSpan>> _intervalList;
    private IDisposable _telemetryActivity;
    [CompilerGeneratedAttribute]
private TelemetryEvent <TelemetryEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private static INuGetTelemetryService <NuGetTelemetryService>k__BackingField;
    public TelemetryEvent TelemetryEvent { get; public set; }
    public Guid ParentId { get; }
    public Guid OperationId { get; }
    public static INuGetTelemetryService NuGetTelemetryService { get; public set; }
    [ObsoleteAttribute]
public TelemetryActivity(Guid parentId);
    [ObsoleteAttribute]
public TelemetryActivity(Guid parentId, Guid operationId);
    [ObsoleteAttribute]
public TelemetryActivity(Guid parentId, Guid operationId, TelemetryEvent telemetryEvent);
    private TelemetryActivity(Guid parentId, TelemetryEvent telemetryEvent, Guid operationId);
    [CompilerGeneratedAttribute]
public TelemetryEvent get_TelemetryEvent();
    [CompilerGeneratedAttribute]
public void set_TelemetryEvent(TelemetryEvent value);
    [CompilerGeneratedAttribute]
public Guid get_ParentId();
    [CompilerGeneratedAttribute]
public Guid get_OperationId();
    [CompilerGeneratedAttribute]
public static INuGetTelemetryService get_NuGetTelemetryService();
    [CompilerGeneratedAttribute]
public static void set_NuGetTelemetryService(INuGetTelemetryService value);
    public void StartIntervalMeasure();
    public void EndIntervalMeasure(string propertyName);
    public sealed virtual void Dispose();
    public static void EmitTelemetryEvent(TelemetryEvent TelemetryEvent);
    public static TelemetryActivity Create(string eventName);
    public static TelemetryActivity Create(TelemetryEvent telemetryEvent);
    public static TelemetryActivity Create(Guid parentId, string eventName);
    public static TelemetryActivity Create(Guid parentId, TelemetryEvent telemetryEvent);
    [ObsoleteAttribute]
public static TelemetryActivity CreateTelemetryActivityWithNewOperationIdAndEvent(Guid parentId, string eventName);
    [ObsoleteAttribute]
public static TelemetryActivity CreateTelemetryActivityWithNewOperationId(Guid parentId);
    [ObsoleteAttribute]
public static TelemetryActivity CreateTelemetryActivityWithNewOperationId();
}
[DefaultMemberAttribute("Item")]
public class NuGet.Common.TelemetryEvent : object {
    private IDictionary`2<string, object> _properties;
    private IDictionary`2<string, object> _piiProperties;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ComplexData>k__BackingField;
    public string Name { get; }
    public int Count { get; }
    public object Item { get; public set; }
    public IDictionary`2<string, object> ComplexData { get; }
    public TelemetryEvent(string eventName);
    public TelemetryEvent(string eventName, Dictionary`2<string, object> properties);
    [CompilerGeneratedAttribute]
public string get_Name();
    public int get_Count();
    public object get_Item(string key);
    public void set_Item(string key, object value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_ComplexData();
    public IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public void AddPiiData(string key, object value);
    public IEnumerable`1<KeyValuePair`2<string, object>> GetPiiData();
}
public static class NuGet.Common.TelemetryServiceUtility : object {
    private static Stopwatch StopWatch;
    public static void StartOrResumeTimer();
    public static void StopTimer();
    public static TimeSpan GetTimerElapsedTime();
    public static double GetTimerElapsedTimeInSeconds();
}
public class NuGet.Common.Token : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCategory <Category>k__BackingField;
    public string Value { get; private set; }
    public TokenCategory Category { get; private set; }
    public Token(TokenCategory category, string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
public TokenCategory get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(TokenCategory value);
}
public enum NuGet.Common.TokenCategory : Enum {
    public int value__;
    public static TokenCategory Text;
    public static TokenCategory Variable;
}
public class NuGet.Common.Tokenizer : object {
    private string _text;
    private int _index;
    public Tokenizer(string text);
    public Token Read();
    private static bool IsWordChar(char ch);
    private Token ParseTokenAfterDollarSign();
    private Token ParseText();
}
public static class NuGet.Common.UriUtility : object {
    private static string FilePrefix;
    public static Uri CreateSourceUri(string source, UriKind kind);
    public static Uri TryCreateSourceUri(string source, UriKind kind);
    private static string FixSourceUri(string source);
    public static string UrlEncodeOdataParameter(string value);
    public static string GetLocalPath(string localOrUriPath);
    public static string GetAbsolutePathFromFile(string sourceFile, string path);
    public static string GetAbsolutePath(string rootDirectory, string path);
}
public enum NuGet.Common.WarningLevel : Enum {
    public int value__;
    public static WarningLevel Severe;
    public static WarningLevel Important;
    public static WarningLevel Minimal;
    public static WarningLevel Default;
}
public static class NuGet.Common.XmlUtility : object {
    public static XDocument Load(string filePath);
    private static XmlReaderSettings GetXmlReaderSettings();
}
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SetEqualsWithNullCheck(ISet`1<T> self, ISet`1<T> other, IEqualityComparer`1<T> comparer);
    internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    internal static bool EqualsWithNullCheck(T self, T other);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static HashSet`1<T> AsHashSet(ISet`1<T> enumerable, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
}
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private bool _initialized;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(TValue o, IEqualityComparer`1<TValue> comparer);
    internal void AddObject(T o);
    internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
    private void CheckInitialized();
}
