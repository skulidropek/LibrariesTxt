public class NuGet.LibraryModel.CentralPackageVersion : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    public string Name { get; }
    public VersionRange VersionRange { get; }
    public CentralPackageVersion(string name, VersionRange versionRange);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CentralPackageVersion other);
}
public class NuGet.LibraryModel.CentralPackageVersionNameComparer : object {
    private static Lazy`1<CentralPackageVersionNameComparer> _defaultComparer;
    public static CentralPackageVersionNameComparer Default { get; }
    private static CentralPackageVersionNameComparer();
    public static CentralPackageVersionNameComparer get_Default();
    public sealed virtual bool Equals(CentralPackageVersion x, CentralPackageVersion y);
    public sealed virtual int GetHashCode(CentralPackageVersion obj);
}
public class NuGet.LibraryModel.DownloadDependency : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    public string Name { get; }
    public VersionRange VersionRange { get; }
    public DownloadDependency(string name, VersionRange versionRange);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
    public static LibraryRange op_Implicit(DownloadDependency library);
    public sealed virtual int CompareTo(DownloadDependency other);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DownloadDependency other);
    public DownloadDependency Clone();
}
public class NuGet.LibraryModel.FrameworkDependency : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkDependencyFlags <PrivateAssets>k__BackingField;
    public string Name { get; }
    public FrameworkDependencyFlags PrivateAssets { get; }
    public FrameworkDependency(string name, FrameworkDependencyFlags privateAssets);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public FrameworkDependencyFlags get_PrivateAssets();
    public sealed virtual int CompareTo(FrameworkDependency other);
    public sealed virtual bool Equals(FrameworkDependency other);
}
[FlagsAttribute]
public enum NuGet.LibraryModel.FrameworkDependencyFlags : Enum {
    public ushort value__;
    public static FrameworkDependencyFlags None;
    public static FrameworkDependencyFlags All;
}
public class NuGet.LibraryModel.FrameworkDependencyFlagsUtils : object {
    public static FrameworkDependencyFlags Default;
    private static FrameworkDependencyFlagsUtils();
    public static FrameworkDependencyFlags GetFlags(IEnumerable`1<string> values);
    public static string GetFlagString(FrameworkDependencyFlags flags);
    public static FrameworkDependencyFlags GetFlags(string flags);
}
public static class NuGet.LibraryModel.KnownLibraryProperties : object {
    public static string AssemblyPath;
    public static string LockFileLibrary;
    public static string LockFileTargetLibrary;
    public static string PackageSpec;
    public static string TargetFrameworkInformation;
    public static string MSBuildProjectPath;
    public static string ProjectRestoreMetadataFiles;
    public static string FrameworkAssemblies;
    public static string ProjectFrameworks;
    public static string ProjectStyle;
    public static string FrameworkReferences;
    private static KnownLibraryProperties();
}
[DefaultMemberAttribute("Item")]
public class NuGet.LibraryModel.Library : object {
    public static IEqualityComparer`1<Library> IdentityComparer;
    [CompilerGeneratedAttribute]
private LibraryRange <LibraryRange>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LibraryDependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Resolved>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Items>k__BackingField;
    public LibraryRange LibraryRange { get; public set; }
    public LibraryIdentity Identity { get; public set; }
    public IEnumerable`1<LibraryDependency> Dependencies { get; public set; }
    public bool Resolved { get; public set; }
    public string Path { get; public set; }
    public IDictionary`2<string, object> Items { get; public set; }
    public object Item { get; public set; }
    private static Library();
    [CompilerGeneratedAttribute]
public LibraryRange get_LibraryRange();
    [CompilerGeneratedAttribute]
public void set_LibraryRange(LibraryRange value);
    [CompilerGeneratedAttribute]
public LibraryIdentity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(LibraryIdentity value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LibraryDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(IEnumerable`1<LibraryDependency> value);
    [CompilerGeneratedAttribute]
public bool get_Resolved();
    [CompilerGeneratedAttribute]
public void set_Resolved(bool value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IDictionary`2<string, object> value);
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public virtual string ToString();
}
public class NuGet.LibraryModel.LibraryDependency : object {
    [CompilerGeneratedAttribute]
private LibraryRange <LibraryRange>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryDependencyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryIncludeFlags <IncludeType>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryIncludeFlags <SuppressParent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<NuGetLogCode> <NoWarn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoReferenced>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VersionCentrallyManaged>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryDependencyReferenceType <ReferenceType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GeneratePathProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Aliases>k__BackingField;
    public LibraryRange LibraryRange { get; public set; }
    public LibraryDependencyType Type { get; public set; }
    public LibraryIncludeFlags IncludeType { get; public set; }
    public LibraryIncludeFlags SuppressParent { get; public set; }
    public IList`1<NuGetLogCode> NoWarn { get; public set; }
    public string Name { get; }
    public bool AutoReferenced { get; public set; }
    public bool VersionCentrallyManaged { get; public set; }
    public LibraryDependencyReferenceType ReferenceType { get; public set; }
    public bool GeneratePathProperty { get; public set; }
    public string Aliases { get; public set; }
    [ObsoleteAttribute]
public LibraryDependency(LibraryRange libraryRange, LibraryDependencyType type, LibraryIncludeFlags includeType, LibraryIncludeFlags suppressParent, IList`1<NuGetLogCode> noWarn, bool autoReferenced, bool generatePathProperty);
    [ObsoleteAttribute]
public LibraryDependency(LibraryRange libraryRange, LibraryDependencyType type, LibraryIncludeFlags includeType, LibraryIncludeFlags suppressParent, IList`1<NuGetLogCode> noWarn, bool autoReferenced, bool generatePathProperty, bool versionCentrallyManaged, LibraryDependencyReferenceType libraryDependencyReferenceType);
    internal LibraryDependency(LibraryRange libraryRange, LibraryDependencyType type, LibraryIncludeFlags includeType, LibraryIncludeFlags suppressParent, IList`1<NuGetLogCode> noWarn, bool autoReferenced, bool generatePathProperty, bool versionCentrallyManaged, LibraryDependencyReferenceType libraryDependencyReferenceType, string aliases);
    [CompilerGeneratedAttribute]
public LibraryRange get_LibraryRange();
    [CompilerGeneratedAttribute]
public void set_LibraryRange(LibraryRange value);
    [CompilerGeneratedAttribute]
public LibraryDependencyType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(LibraryDependencyType value);
    [CompilerGeneratedAttribute]
public LibraryIncludeFlags get_IncludeType();
    [CompilerGeneratedAttribute]
public void set_IncludeType(LibraryIncludeFlags value);
    [CompilerGeneratedAttribute]
public LibraryIncludeFlags get_SuppressParent();
    [CompilerGeneratedAttribute]
public void set_SuppressParent(LibraryIncludeFlags value);
    [CompilerGeneratedAttribute]
public IList`1<NuGetLogCode> get_NoWarn();
    [CompilerGeneratedAttribute]
public void set_NoWarn(IList`1<NuGetLogCode> value);
    public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_AutoReferenced();
    [CompilerGeneratedAttribute]
public void set_AutoReferenced(bool value);
    [CompilerGeneratedAttribute]
public bool get_VersionCentrallyManaged();
    [CompilerGeneratedAttribute]
public void set_VersionCentrallyManaged(bool value);
    [CompilerGeneratedAttribute]
public LibraryDependencyReferenceType get_ReferenceType();
    [CompilerGeneratedAttribute]
public void set_ReferenceType(LibraryDependencyReferenceType value);
    [CompilerGeneratedAttribute]
public bool get_GeneratePathProperty();
    [CompilerGeneratedAttribute]
public void set_GeneratePathProperty(bool value);
    [CompilerGeneratedAttribute]
public string get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(string value);
    public virtual string ToString();
    public bool HasFlag(LibraryDependencyTypeFlag flag);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LibraryDependency other);
    public LibraryDependency Clone();
}
public class NuGet.LibraryModel.LibraryDependencyInfo : object {
    [CompilerGeneratedAttribute]
private bool <Resolved>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryIdentity <Library>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LibraryDependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFramework <Framework>k__BackingField;
    public bool Resolved { get; }
    public LibraryIdentity Library { get; }
    public IEnumerable`1<LibraryDependency> Dependencies { get; }
    public NuGetFramework Framework { get; }
    public LibraryDependencyInfo(LibraryIdentity library, bool resolved, NuGetFramework framework, IEnumerable`1<LibraryDependency> dependencies);
    [CompilerGeneratedAttribute]
public bool get_Resolved();
    [CompilerGeneratedAttribute]
public LibraryIdentity get_Library();
    [CompilerGeneratedAttribute]
public IEnumerable`1<LibraryDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public NuGetFramework get_Framework();
    public static LibraryDependencyInfo CreateUnresolved(LibraryIdentity library, NuGetFramework framework);
    public static LibraryDependencyInfo Create(LibraryIdentity library, NuGetFramework framework, IEnumerable`1<LibraryDependency> dependencies);
}
public enum NuGet.LibraryModel.LibraryDependencyReferenceType : Enum {
    public int value__;
    public static LibraryDependencyReferenceType None;
    public static LibraryDependencyReferenceType Transitive;
    public static LibraryDependencyReferenceType Direct;
}
[FlagsAttribute]
public enum NuGet.LibraryModel.LibraryDependencyTarget : Enum {
    public ushort value__;
    public static LibraryDependencyTarget None;
    public static LibraryDependencyTarget Package;
    public static LibraryDependencyTarget Project;
    public static LibraryDependencyTarget ExternalProject;
    public static LibraryDependencyTarget Assembly;
    public static LibraryDependencyTarget Reference;
    public static LibraryDependencyTarget WinMD;
    public static LibraryDependencyTarget All;
    public static LibraryDependencyTarget PackageProjectExternal;
}
public class NuGet.LibraryModel.LibraryDependencyTargetUtils : object {
    public static LibraryDependencyTarget Parse(string flag);
    private static LibraryDependencyTarget ParseMultiFlag(string flag, int end);
    private static LibraryDependencyTarget ParseSingleFlag(StringSegment flag);
    public static string GetFlagString(LibraryDependencyTarget flags);
}
public class NuGet.LibraryModel.LibraryDependencyType : object {
    private HashSet`1<LibraryDependencyTypeFlag> _keywords;
    public static LibraryDependencyType Default;
    public static LibraryDependencyType Build;
    public static LibraryDependencyType Platform;
    private static LibraryDependencyType();
    private LibraryDependencyType(IEnumerable`1<LibraryDependencyTypeFlag> flags);
    public bool Contains(LibraryDependencyTypeFlag flag);
    public static LibraryDependencyType Parse(IEnumerable`1<string> keywords);
    public LibraryDependencyType Combine(IEnumerable`1<LibraryDependencyTypeFlag> add, IEnumerable`1<LibraryDependencyTypeFlag> remove);
    public sealed virtual bool Equals(LibraryDependencyType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class NuGet.LibraryModel.LibraryDependencyTypeFlag : object {
    private static ConcurrentDictionary`2<string, LibraryDependencyTypeFlag> Flags;
    private string _value;
    public static LibraryDependencyTypeFlag MainReference;
    public static LibraryDependencyTypeFlag MainSource;
    public static LibraryDependencyTypeFlag MainExport;
    public static LibraryDependencyTypeFlag PreprocessReference;
    public static LibraryDependencyTypeFlag SharedFramework;
    public static LibraryDependencyTypeFlag RuntimeComponent;
    public static LibraryDependencyTypeFlag DevComponent;
    public static LibraryDependencyTypeFlag PreprocessComponent;
    public static LibraryDependencyTypeFlag BecomesNupkgDependency;
    private LibraryDependencyTypeFlag(string value);
    private static LibraryDependencyTypeFlag();
    public static LibraryDependencyTypeFlag Declare(string keyword);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class NuGet.LibraryModel.LibraryDependencyTypeKeyword : object {
    private static ConcurrentDictionary`2<string, LibraryDependencyTypeKeyword> Keywords;
    public static LibraryDependencyTypeKeyword Default;
    public static LibraryDependencyTypeKeyword Platform;
    public static LibraryDependencyTypeKeyword Build;
    public static LibraryDependencyTypeKeyword Preprocess;
    public static LibraryDependencyTypeKeyword Private;
    public static LibraryDependencyTypeKeyword Dev;
    private string _value;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LibraryDependencyTypeFlag> <FlagsToAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LibraryDependencyTypeFlag> <FlagsToRemove>k__BackingField;
    public IEnumerable`1<LibraryDependencyTypeFlag> FlagsToAdd { get; private set; }
    public IEnumerable`1<LibraryDependencyTypeFlag> FlagsToRemove { get; private set; }
    private static LibraryDependencyTypeKeyword();
    private LibraryDependencyTypeKeyword(string value, IEnumerable`1<LibraryDependencyTypeFlag> flagsToAdd, IEnumerable`1<LibraryDependencyTypeFlag> flagsToRemove);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LibraryDependencyTypeFlag> get_FlagsToAdd();
    [CompilerGeneratedAttribute]
private void set_FlagsToAdd(IEnumerable`1<LibraryDependencyTypeFlag> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LibraryDependencyTypeFlag> get_FlagsToRemove();
    [CompilerGeneratedAttribute]
private void set_FlagsToRemove(IEnumerable`1<LibraryDependencyTypeFlag> value);
    public LibraryDependencyType CreateType();
    private static void DeclareOnOff(string name, LibraryDependencyTypeFlag flag, IEnumerable`1<LibraryDependencyTypeFlag> emptyFlags);
    internal static LibraryDependencyTypeKeyword Declare(string keyword, IEnumerable`1<LibraryDependencyTypeFlag> flagsToAdd, IEnumerable`1<LibraryDependencyTypeFlag> flagsToRemove);
    internal static LibraryDependencyTypeKeyword Parse(string keyword);
}
[ExtensionAttribute]
public static class NuGet.LibraryModel.LibraryExtensions : object {
    [ExtensionAttribute]
public static bool IsEclipsedBy(LibraryRange library, LibraryRange other);
    [ExtensionAttribute]
public static T GetItem(Library library, string key);
    [ExtensionAttribute]
public static T GetRequiredItem(Library library, string key);
}
public class NuGet.LibraryModel.LibraryIdentity : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryType <Type>k__BackingField;
    public string Name { get; public set; }
    public NuGetVersion Version { get; public set; }
    public LibraryType Type { get; public set; }
    public LibraryIdentity(string name, NuGetVersion version, LibraryType type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(NuGetVersion value);
    [CompilerGeneratedAttribute]
public LibraryType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(LibraryType value);
    public virtual string ToString();
    public sealed virtual bool Equals(LibraryIdentity other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(LibraryIdentity left, LibraryIdentity right);
    public static bool op_Inequality(LibraryIdentity left, LibraryIdentity right);
    public static LibraryRange op_Implicit(LibraryIdentity library);
    public sealed virtual int CompareTo(LibraryIdentity other);
}
[FlagsAttribute]
public enum NuGet.LibraryModel.LibraryIncludeFlags : Enum {
    public ushort value__;
    public static LibraryIncludeFlags None;
    public static LibraryIncludeFlags Runtime;
    public static LibraryIncludeFlags Compile;
    public static LibraryIncludeFlags Build;
    public static LibraryIncludeFlags Native;
    public static LibraryIncludeFlags ContentFiles;
    public static LibraryIncludeFlags Analyzers;
    public static LibraryIncludeFlags BuildTransitive;
    public static LibraryIncludeFlags All;
}
public class NuGet.LibraryModel.LibraryIncludeFlagUtils : object {
    public static LibraryIncludeFlags DefaultSuppressParent;
    public static LibraryIncludeFlags NoContent;
    private static LibraryIncludeFlagUtils();
    public static LibraryIncludeFlags GetFlags(IEnumerable`1<string> flags);
    public static string GetFlagString(LibraryIncludeFlags flags);
    public static LibraryIncludeFlags GetFlags(string flags, LibraryIncludeFlags defaultFlags);
}
public class NuGet.LibraryModel.LibraryRange : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryDependencyTarget <TypeConstraint>k__BackingField;
    public string Name { get; public set; }
    public VersionRange VersionRange { get; public set; }
    public LibraryDependencyTarget TypeConstraint { get; public set; }
    public LibraryRange(string name, LibraryDependencyTarget typeConstraint);
    public LibraryRange(string name, VersionRange versionRange, LibraryDependencyTarget typeConstraint);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
    [CompilerGeneratedAttribute]
public void set_VersionRange(VersionRange value);
    [CompilerGeneratedAttribute]
public LibraryDependencyTarget get_TypeConstraint();
    [CompilerGeneratedAttribute]
public void set_TypeConstraint(LibraryDependencyTarget value);
    public virtual string ToString();
    public string ToLockFileDependencyGroupString();
    public bool TypeConstraintAllows(LibraryDependencyTarget flag);
    public bool TypeConstraintAllowsAnyOf(LibraryDependencyTarget flag);
    public sealed virtual bool Equals(LibraryRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(LibraryRange left, LibraryRange right);
    public static bool op_Inequality(LibraryRange left, LibraryRange right);
}
public class NuGet.LibraryModel.LibraryType : ValueType {
    private static ConcurrentDictionary`2<string, LibraryType> _knownLibraryTypes;
    public static LibraryType Project;
    public static LibraryType ExternalProject;
    public static LibraryType Package;
    public static LibraryType Assembly;
    public static LibraryType Reference;
    public static LibraryType WinMD;
    public static LibraryType Unresolved;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKnown>k__BackingField;
    public string Value { get; }
    public bool IsKnown { get; }
    private LibraryType(string value, bool isKnown);
    private static LibraryType();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public bool get_IsKnown();
    public static LibraryType Parse(string value);
    public virtual string ToString();
    public sealed virtual bool Equals(LibraryType other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(LibraryType left, LibraryType right);
    public static bool op_Inequality(LibraryType left, LibraryType right);
    public static string op_Implicit(LibraryType libraryType);
    public virtual int GetHashCode();
    private static LibraryType Define(string name);
}
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SetEqualsWithNullCheck(ISet`1<T> self, ISet`1<T> other, IEqualityComparer`1<T> comparer);
    internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    internal static bool EqualsWithNullCheck(T self, T other);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static HashSet`1<T> AsHashSet(ISet`1<T> enumerable, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
}
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private bool _initialized;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(TValue o, IEqualityComparer`1<TValue> comparer);
    internal void AddObject(T o);
    internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
    private void CheckInitialized();
}
