public class Nustache.Core.Block : Section {
    public Block(string name, Part[] parts);
    public virtual void Render(RenderContext context);
    public Lambda`2<string, object> CheckValueIsDelegateOrLambda(object value);
    public virtual string ToString();
}
internal class Nustache.Core.DataRowGetterFactory : ValueGetterFactory {
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
}
internal class Nustache.Core.DataRowValueGetter : ValueGetter {
    private DataRow _target;
    private string _name;
    public DataRowValueGetter(DataRow target, string name);
    public virtual object GetValue();
}
internal class Nustache.Core.DictionaryValueGetter : ValueGetter {
    private IDictionary _target;
    private string _key;
    internal DictionaryValueGetter(IDictionary target, string key);
    public virtual object GetValue();
}
internal class Nustache.Core.DictionaryValueGetterFactory : ValueGetterFactory {
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
}
public static class Nustache.Core.Encoders : object {
    [CompilerGeneratedAttribute]
private static HtmlEncoder <HtmlEncode>k__BackingField;
    public static HtmlEncoder HtmlEncode { get; public set; }
    private static Encoders();
    [CompilerGeneratedAttribute]
public static HtmlEncoder get_HtmlEncode();
    [CompilerGeneratedAttribute]
public static void set_HtmlEncode(HtmlEncoder value);
    public static string DefaultHtmlEncode(string text);
}
public class Nustache.Core.EndSection : Part {
    private string _name;
    public string Name { get; }
    public EndSection(string name);
    public string get_Name();
    public virtual void Render(RenderContext context);
    public virtual string Source();
    public virtual string ToString();
}
public class Nustache.Core.FieldInfoValueGetter : ValueGetter {
    private object _target;
    public FieldInfo FieldInfo;
    internal FieldInfoValueGetter(object target, FieldInfo fieldInfo);
    public virtual object GetValue();
}
internal class Nustache.Core.FieldInfoValueGetterFactory : ValueGetterFactory {
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
}
public class Nustache.Core.FileSystemTemplateLocator : object {
    private string _extension;
    private String[] _directories;
    public FileSystemTemplateLocator(string extension, String[] directories);
    public Template GetTemplate(string name);
}
public class Nustache.Core.GenericDictionaryValueGetter : ValueGetter {
    private object _target;
    public string Key;
    public MethodInfo GetMethod;
    public Type DictionaryType;
    internal GenericDictionaryValueGetter(object target, string key, Type dictionaryType);
    public virtual object GetValue();
}
internal class Nustache.Core.GenericDictionaryValueGetterFactory : ValueGetterFactory {
    [CompilerGeneratedAttribute]
private static Predicate`1<Type> CS$<>9__CachedAnonymousMethodDelegate1;
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
    private static Type GetSupportedInterfaceType(Type targetType);
    [CompilerGeneratedAttribute]
private static bool <GetSupportedInterfaceType>b__0(Type interfaceType);
}
public static class Nustache.Core.GenericIDictionaryUtil : object {
    private static Type OpenIDictionaryType;
    private static GenericIDictionaryUtil();
    public static bool IsInstanceOfGenericIDictionary(object value);
    private static bool ImplementsGenericIDictionary(Type type);
    private static bool IsGenericIDictionary(Type type, object searchCrit);
}
public class Nustache.Core.Helper : MulticastDelegate {
    public Helper(object object, IntPtr method);
    public virtual void Invoke(RenderContext context, IList`1<object> arguments, IDictionary`2<string, object> options, RenderBlock fn, RenderBlock inverse);
    public virtual IAsyncResult BeginInvoke(RenderContext context, IList`1<object> arguments, IDictionary`2<string, object> options, RenderBlock fn, RenderBlock inverse, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Nustache.Core.HelperProxy : MulticastDelegate {
    public HelperProxy(object object, IntPtr method);
    public virtual void Invoke(RenderBlock fn, RenderBlock inverse);
    public virtual IAsyncResult BeginInvoke(RenderBlock fn, RenderBlock inverse, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class Nustache.Core.Helpers : object {
    private static Dictionary`2<string, Helper> DefaultHelpers;
    private static Dictionary`2<string, Helper> CustomHelpers;
    private static Helpers();
    public static void Register(string name, Helper helper);
    public static bool Contains(string name);
    public static Helper Get(string name);
    public static void Clear();
    public static void EachHelper(RenderContext context, IList`1<object> arguments, IDictionary`2<string, object> options, RenderBlock fn, RenderBlock inverse);
    public static void IfHelper(RenderContext context, IList`1<object> arguments, IDictionary`2<string, object> options, RenderBlock fn, RenderBlock inverse);
    public static void UnlessHelper(RenderContext context, IList`1<object> arguments, IDictionary`2<string, object> options, RenderBlock fn, RenderBlock inverse);
    public static void WithHelper(RenderContext context, IList`1<object> arguments, IDictionary`2<string, object> options, RenderBlock fn, RenderBlock inverse);
    public static void Parse(RenderContext ctx, string path, String& name, IList`1& arguments, IDictionary`2& options);
    private static void ParseArguments(RenderContext ctx, String[] splits, IList`1& arguments);
    private static void ParseOptions(RenderContext ctx, String[] splits, IDictionary`2& options);
}
public class Nustache.Core.InvertedBlock : Section {
    public InvertedBlock(string name, Part[] parts);
    public virtual void Render(RenderContext context);
    public virtual string ToString();
}
public static class Nustache.Core.JValueIdentifier : object {
    public static bool IsJValue(object obj);
    public static object GetValue(object jValue);
    private static T GetValue(Type type, object obj);
}
public class Nustache.Core.Lambda`1 : MulticastDelegate {
    public Lambda`1(object object, IntPtr method);
    public virtual TResult Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class Nustache.Core.Lambda`2 : MulticastDelegate {
    public Lambda`2(object object, IntPtr method);
    public virtual TResult Invoke(T arg);
    public virtual IAsyncResult BeginInvoke(T arg, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
internal class Nustache.Core.ListValueByIndexGetter : ValueGetter {
    private IList _target;
    private int _index;
    public ListValueByIndexGetter(IList target, int index);
    public virtual object GetValue();
}
internal class Nustache.Core.ListValueByIndexGetterFactory : ValueGetterFactory {
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
}
public class Nustache.Core.LiteralText : Part {
    private string _text;
    public string Text { get; }
    public LiteralText(string text);
    public string get_Text();
    public virtual void Render(RenderContext context);
    public virtual string Source();
    public virtual string ToString();
}
internal class Nustache.Core.MethodInfoValueGatterFactory : ValueGetterFactory {
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
    private static bool MethodCanGetValue(MethodInfo method);
}
public class Nustache.Core.MethodInfoValueGetter : ValueGetter {
    private object _target;
    public MethodInfo MethodInfo;
    internal MethodInfoValueGetter(object target, MethodInfo methodInfo);
    public virtual object GetValue();
}
internal class Nustache.Core.NameValueCollectionGetterFactory : ValueGetterFactory {
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
}
internal class Nustache.Core.NameValueCollectionValueGetter : ValueGetter {
    private NameValueCollection _target;
    private string _key;
    internal NameValueCollectionValueGetter(NameValueCollection target, string key);
    public virtual object GetValue();
}
internal class Nustache.Core.NoValueGetter : ValueGetter {
    public virtual object GetValue();
}
public class Nustache.Core.NustacheDataContextMissException : NustacheException {
    public NustacheDataContextMissException(string message);
}
public class Nustache.Core.NustacheEmptyStringException : NustacheException {
    public NustacheEmptyStringException(string message);
}
public class Nustache.Core.NustacheException : Exception {
    public NustacheException(string message);
}
public class Nustache.Core.Parser : object {
    public void Parse(Section section, IEnumerable`1<Part> parts);
}
public abstract class Nustache.Core.Part : object {
    public abstract virtual void Render(RenderContext context);
    public abstract virtual string Source();
    public void Accept(PartVisitor visitor);
}
public interface Nustache.Core.PartVisitor {
    public abstract virtual void Visit(Section section);
    public abstract virtual void Visit(Block block);
    public abstract virtual void Visit(LiteralText literal);
    public abstract virtual void Visit(EndSection endSections);
    public abstract virtual void Visit(InvertedBlock invertedBlock);
    public abstract virtual void Visit(TemplateInclude include);
    public abstract virtual void Visit(VariableReference variable);
}
internal class Nustache.Core.PropertyDescriptorValueGetter : ValueGetter {
    private object _target;
    private PropertyDescriptor _propertyDescriptor;
    internal PropertyDescriptorValueGetter(object target, PropertyDescriptor propertyDescriptor);
    public virtual object GetValue();
}
internal class Nustache.Core.PropertyDescriptorValueGetterFactory : ValueGetterFactory {
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
}
public class Nustache.Core.PropertyInfoValueGetter : ValueGetter {
    private object _target;
    public PropertyInfo PropertyInfo;
    internal PropertyInfoValueGetter(object target, PropertyInfo propertyInfo);
    public virtual object GetValue();
}
internal class Nustache.Core.PropertyInfoValueGetterFactory : ValueGetterFactory {
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
    private static bool PropertyCanGetValue(PropertyInfo property);
}
public static class Nustache.Core.Render : object {
    public static string StringToString(string template, object data, RenderContextBehaviour renderContextBehaviour);
    public static string StringToString(string template, object data, TemplateLocator templateLocator, RenderContextBehaviour renderContextBehaviour);
    public static string FileToString(string templatePath, object data, RenderContextBehaviour renderContextBehaviour);
    public static void StringToFile(string template, object data, string outputPath, RenderContextBehaviour renderContextBehaviour);
    public static void StringToFile(string template, object data, string outputPath, TemplateLocator templateLocator, RenderContextBehaviour renderContextBehaviour);
    public static void FileToFile(string templatePath, object data, string outputPath, RenderContextBehaviour renderContextBehaviour);
    public static void Template(TextReader reader, object data, TextWriter writer, RenderContextBehaviour renderContextBehaviour);
    public static void Template(TextReader reader, object data, TextWriter writer, TemplateLocator templateLocator, RenderContextBehaviour renderContextBehaviour);
    private static FileSystemTemplateLocator GetTemplateLocator(string templatePath);
}
public class Nustache.Core.RenderBlock : MulticastDelegate {
    public RenderBlock(object object, IntPtr method);
    public virtual void Invoke(object data);
    public virtual IAsyncResult BeginInvoke(object data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Nustache.Core.RenderContext : object {
    private static int IncludeLimit;
    private Stack`1<Section> _sectionStack;
    private Stack`1<object> _dataStack;
    private TextWriter _writer;
    private TemplateLocator _templateLocator;
    private RenderContextBehaviour _renderContextBehaviour;
    private int _includeLevel;
    private string _indent;
    private bool _lineEnded;
    private Regex _indenter;
    [CompilerGeneratedAttribute]
private string <ActiveStartDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveEndDelimiter>k__BackingField;
    public string ActiveStartDelimiter { get; public set; }
    public string ActiveEndDelimiter { get; public set; }
    public RenderContext(Section section, object data, TextWriter writer, TemplateLocator templateLocator, RenderContextBehaviour renderContextBehaviour);
    public RenderContext(RenderContext baseContext, TextWriter writer);
    [CompilerGeneratedAttribute]
public string get_ActiveStartDelimiter();
    [CompilerGeneratedAttribute]
public void set_ActiveStartDelimiter(string value);
    [CompilerGeneratedAttribute]
public string get_ActiveEndDelimiter();
    [CompilerGeneratedAttribute]
public void set_ActiveEndDelimiter(string value);
    public object GetValue(string path);
    private static object GetValueFromPath(object data, string path, Boolean& partialMatch);
    public IEnumerable`1<object> GetValues(string path);
    public bool IsTruthy(string path);
    public bool IsTruthy(object value);
    public void WriteLiteral(string text);
    public void Write(string text);
    public void Include(string templateName, string indent);
    private TemplateDefinition GetTemplateDefinition(string name);
    public void Enter(Section section);
    public void Exit();
    public void Push(object data);
    public void Pop();
    [CompilerGeneratedAttribute]
private string <WriteLiteral>b__11(Match m);
}
public class Nustache.Core.RenderContextBehaviour : object {
    [CompilerGeneratedAttribute]
private bool <RaiseExceptionOnDataContextMiss>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RaiseExceptionOnEmptyStringValue>k__BackingField;
    public bool RaiseExceptionOnDataContextMiss { get; public set; }
    public bool RaiseExceptionOnEmptyStringValue { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RaiseExceptionOnDataContextMiss();
    [CompilerGeneratedAttribute]
public void set_RaiseExceptionOnDataContextMiss(bool value);
    [CompilerGeneratedAttribute]
public bool get_RaiseExceptionOnEmptyStringValue();
    [CompilerGeneratedAttribute]
public void set_RaiseExceptionOnEmptyStringValue(bool value);
    public static RenderContextBehaviour GetDefaultRenderContextBehaviour();
}
public class Nustache.Core.RenderFunc : MulticastDelegate {
    public RenderFunc(object object, IntPtr method);
    public virtual string Invoke(RenderContext context);
    public virtual IAsyncResult BeginInvoke(RenderContext context, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class Nustache.Core.Scanner : object {
    private static Regex DelimitersRegex;
    [CompilerGeneratedAttribute]
private string <StartDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndDelimiter>k__BackingField;
    public string StartDelimiter { get; public set; }
    public string EndDelimiter { get; public set; }
    public Scanner(string startDelimiter, string endDelimiter);
    private static Scanner();
    [CompilerGeneratedAttribute]
public string get_StartDelimiter();
    [CompilerGeneratedAttribute]
public void set_StartDelimiter(string value);
    [CompilerGeneratedAttribute]
public string get_EndDelimiter();
    [CompilerGeneratedAttribute]
public void set_EndDelimiter(string value);
    public IEnumerable`1<Part> Scan(string template);
    private static Regex MakeRegex(string start, string end);
}
public class Nustache.Core.Section : Part {
    private string _name;
    private List`1<Part> _parts;
    private Dictionary`2<string, TemplateDefinition> _templateDefinitions;
    [CompilerGeneratedAttribute]
private Section <Inverse>k__BackingField;
    public string Name { get; }
    public IEnumerable`1<Part> Parts { get; }
    public Section Inverse { get; public set; }
    public Section(string name);
    public string get_Name();
    public IEnumerable`1<Part> get_Parts();
    [CompilerGeneratedAttribute]
public Section get_Inverse();
    [CompilerGeneratedAttribute]
public void set_Inverse(Section value);
    public void Load(IEnumerable`1<Part> parts);
    public void Add(Part part);
    public TemplateDefinition GetTemplateDefinition(string name);
    public virtual void Render(RenderContext context);
    public void RenderParts(RenderContext context);
    public string InnerSource();
    public virtual string Source();
}
public class Nustache.Core.Template : Section {
    [CompilerGeneratedAttribute]
private string <StartDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndDelimiter>k__BackingField;
    public string StartDelimiter { get; public set; }
    public string EndDelimiter { get; public set; }
    public Template(string name);
    public Template(string name, string startDelimiter, string endDelimiter);
    [CompilerGeneratedAttribute]
public string get_StartDelimiter();
    [CompilerGeneratedAttribute]
public void set_StartDelimiter(string value);
    [CompilerGeneratedAttribute]
public string get_EndDelimiter();
    [CompilerGeneratedAttribute]
public void set_EndDelimiter(string value);
    public void Load(TextReader reader);
    public void Render(object data, TextWriter writer, TemplateLocator templateLocator);
    public void Render(object data, TextWriter writer, TemplateLocator templateLocator, RenderContextBehaviour renderContextBehaviour);
}
public class Nustache.Core.TemplateDefinition : Template {
    public TemplateDefinition(string name);
    public virtual string ToString();
}
public class Nustache.Core.TemplateInclude : Part {
    private string _name;
    private string _indent;
    public string Name { get; }
    public string Indent { get; }
    public TemplateInclude(string name, string indent);
    public string get_Name();
    public string get_Indent();
    public virtual void Render(RenderContext context);
    public virtual string Source();
    public virtual string ToString();
}
public class Nustache.Core.TemplateLocator : MulticastDelegate {
    public TemplateLocator(object object, IntPtr method);
    public virtual Template Invoke(string name);
    public virtual IAsyncResult BeginInvoke(string name, AsyncCallback callback, object object);
    public virtual Template EndInvoke(IAsyncResult result);
}
public abstract class Nustache.Core.ValueGetter : object {
    public static object NoValue;
    private static ValueGetter();
    public static object GetValue(object target, string name);
    public abstract virtual object GetValue();
    public void Accept(ValueGetterVisitor visitor);
}
public static class Nustache.Core.ValueGetterFactories : object {
    private static ValueGetterFactoryCollection _factories;
    public static ValueGetterFactoryCollection Factories { get; }
    private static ValueGetterFactories();
    public static ValueGetterFactoryCollection get_Factories();
}
public abstract class Nustache.Core.ValueGetterFactory : object {
    protected static BindingFlags DefaultBindingFlags;
    protected static StringComparison DefaultNameComparison;
    public abstract virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
}
public class Nustache.Core.ValueGetterFactoryCollection : Collection`1<ValueGetterFactory> {
    protected virtual void InsertItem(int index, ValueGetterFactory item);
    protected virtual void SetItem(int index, ValueGetterFactory item);
    public ValueGetter GetValueGetter(object target, string name);
    public ValueGetter GetCompiledGetter(Type targetType, string name);
    private static ValueGetter GetValueGetterOrDefault(IEnumerable`1<ValueGetterFactory> factories, object target, string name);
}
public interface Nustache.Core.ValueGetterVisitor {
    public abstract virtual void Visit(MethodInfoValueGetter getter);
    public abstract virtual void Visit(PropertyInfoValueGetter getter);
    public abstract virtual void Visit(FieldInfoValueGetter getter);
    public abstract virtual void Visit(GenericDictionaryValueGetter getter);
    public abstract virtual void NoMatch(ValueGetter valueGetter);
}
public class Nustache.Core.VariableReference : Part {
    private static Regex _notEscapedRegex;
    private string _path;
    private bool _escaped;
    [CompilerGeneratedAttribute]
private static RenderBlock CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static RenderBlock CS$<>9__CachedAnonymousMethodDelegate3;
    public string Path { get; }
    public bool Escaped { get; }
    public VariableReference(string path);
    private static VariableReference();
    public string get_Path();
    public bool get_Escaped();
    public virtual void Render(RenderContext context);
    public Lambda`1<object> CheckValueIsDelegateOrLambda(object value);
    public virtual string Source();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static void <Render>b__0(object data);
    [CompilerGeneratedAttribute]
private static void <Render>b__1(object data);
}
internal class Nustache.Core.XmlNodeValueGetter : ValueGetter {
    private XmlNode _target;
    private string _name;
    private string _textValueLocated;
    private XmlNodeList _childNodeList;
    internal XmlNodeValueGetter(XmlNode target, string name);
    private bool HasChildNodeList();
    private bool TryGetSingleTextNodeValue();
    private bool TryGetNodeValueAsText(XmlNode node);
    public virtual object GetValue();
    private bool TryGetStringByAttributeName(string attributeName);
}
internal class Nustache.Core.XmlNodeValueGetterFactory : ValueGetterFactory {
    public virtual ValueGetter GetValueGetter(object target, Type targetType, string name);
}
