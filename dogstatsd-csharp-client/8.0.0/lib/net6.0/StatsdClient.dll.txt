[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Mono.Unix.UnixEndPoint : EndPoint {
    private string filename;
    public string Filename { get; public set; }
    public AddressFamily AddressFamily { get; }
    public UnixEndPoint(string filename);
    public string get_Filename();
    public void set_Filename(string value);
    public virtual AddressFamily get_AddressFamily();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual SocketAddress Serialize();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
}
public class StatsdClient.AdvancedStatsConfig : object {
    [CompilerGeneratedAttribute]
private int <MaxMetricsInAsyncQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxBlockDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DurationBeforeSendingNotFullBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <UDSBufferFullBlockDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <TelemetryFlushInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private DogStatsdEndPoint <OptionalTelemetryEndPoint>k__BackingField;
    public int MaxMetricsInAsyncQueue { get; public set; }
    public Nullable`1<TimeSpan> MaxBlockDuration { get; public set; }
    public TimeSpan DurationBeforeSendingNotFullBuffer { get; public set; }
    public Nullable`1<TimeSpan> UDSBufferFullBlockDuration { get; public set; }
    public Nullable`1<TimeSpan> TelemetryFlushInterval { get; public set; }
    public DogStatsdEndPoint OptionalTelemetryEndPoint { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxMetricsInAsyncQueue();
    [CompilerGeneratedAttribute]
public void set_MaxMetricsInAsyncQueue(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxBlockDuration();
    [CompilerGeneratedAttribute]
public void set_MaxBlockDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DurationBeforeSendingNotFullBuffer();
    [CompilerGeneratedAttribute]
public void set_DurationBeforeSendingNotFullBuffer(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_UDSBufferFullBlockDuration();
    [CompilerGeneratedAttribute]
public void set_UDSBufferFullBlockDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_TelemetryFlushInterval();
    [CompilerGeneratedAttribute]
public void set_TelemetryFlushInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public DogStatsdEndPoint get_OptionalTelemetryEndPoint();
    [CompilerGeneratedAttribute]
public void set_OptionalTelemetryEndPoint(DogStatsdEndPoint value);
}
internal class StatsdClient.Aggregator.AggregatorFlusher`1 : object {
    private MetricSerializer _serializer;
    private BufferBuilder _bufferBuilder;
    private Dictionary`2<MetricStatsKey, T> _values;
    private Stopwatch _stopWatch;
    private int _maxUniqueStatsBeforeFlush;
    private long _flushIntervalMilliseconds;
    private SerializedMetric _serializedMetric;
    private MetricType _expectedMetricType;
    private Action`1<T> _flushMetric;
    private Telemetry _optionalTelemetry;
    public AggregatorFlusher`1(MetricAggregatorParameters parameters, MetricType expectedMetricType, Action`2<AggregatorFlusher`1<T>, T> flushMetric);
    public bool TryGetValue(MetricStatsKey& key, T& v);
    public void Add(MetricStatsKey& key, T v);
    public void Update(MetricStatsKey& key, T v);
    public void TryFlush(bool force);
    public void FlushStatsMetric(StatsMetric metric);
    public MetricStatsKey CreateKey(StatsMetric metric);
}
internal class StatsdClient.Aggregator.Aggregators : object {
    [CompilerGeneratedAttribute]
private CountAggregator <OptionalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private GaugeAggregator <OptionalGauge>k__BackingField;
    [CompilerGeneratedAttribute]
private SetAggregator <OptionalSet>k__BackingField;
    public CountAggregator OptionalCount { get; public set; }
    public GaugeAggregator OptionalGauge { get; public set; }
    public SetAggregator OptionalSet { get; public set; }
    [CompilerGeneratedAttribute]
public CountAggregator get_OptionalCount();
    [CompilerGeneratedAttribute]
public void set_OptionalCount(CountAggregator value);
    [CompilerGeneratedAttribute]
public GaugeAggregator get_OptionalGauge();
    [CompilerGeneratedAttribute]
public void set_OptionalGauge(GaugeAggregator value);
    [CompilerGeneratedAttribute]
public SetAggregator get_OptionalSet();
    [CompilerGeneratedAttribute]
public void set_OptionalSet(SetAggregator value);
}
internal class StatsdClient.Aggregator.CountAggregator : object {
    private AggregatorFlusher`1<StatsMetric> _aggregator;
    public CountAggregator(MetricAggregatorParameters parameters);
    public void OnNewValue(StatsMetric& metric);
    public void TryFlush(bool force);
}
internal class StatsdClient.Aggregator.GaugeAggregator : object {
    private AggregatorFlusher`1<StatsMetric> _aggregator;
    public GaugeAggregator(MetricAggregatorParameters parameters);
    public void OnNewValue(StatsMetric& metric);
    public void TryFlush(bool force);
}
internal class StatsdClient.Aggregator.MetricAggregatorParameters : object {
    [CompilerGeneratedAttribute]
private MetricSerializer <Serializer>k__BackingField;
    [CompilerGeneratedAttribute]
private BufferBuilder <BufferBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxUniqueStatsBeforeFlush>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FlushInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Telemetry <OptionalTelemetry>k__BackingField;
    public MetricSerializer Serializer { get; }
    public BufferBuilder BufferBuilder { get; }
    public int MaxUniqueStatsBeforeFlush { get; }
    public TimeSpan FlushInterval { get; }
    public Telemetry OptionalTelemetry { get; }
    public MetricAggregatorParameters(MetricSerializer serializer, BufferBuilder bufferBuilder, int maxUniqueStatsBeforeFlush, TimeSpan flushInterval, Telemetry optionalTelemetry);
    [CompilerGeneratedAttribute]
public MetricSerializer get_Serializer();
    [CompilerGeneratedAttribute]
public BufferBuilder get_BufferBuilder();
    [CompilerGeneratedAttribute]
public int get_MaxUniqueStatsBeforeFlush();
    [CompilerGeneratedAttribute]
public TimeSpan get_FlushInterval();
    [CompilerGeneratedAttribute]
public Telemetry get_OptionalTelemetry();
}
internal class StatsdClient.Aggregator.MetricStatsKey : ValueType {
    private string _metricName;
    private String[] _tags;
    public MetricStatsKey(string metricName, String[] tags);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static bool AreEquals(String[] arr1, String[] arr2);
}
internal class StatsdClient.Aggregator.SetAggregator : object {
    private AggregatorFlusher`1<StatsMetricSet> _aggregator;
    private Pool`1<StatsMetricSet> _pool;
    private Telemetry _optionalTelemetry;
    public SetAggregator(MetricAggregatorParameters parameters, Telemetry optionalTelemetry, Action`1<Exception> optionalExceptionHandler);
    public void OnNewValue(StatsMetric& metric);
    public void TryFlush(bool force);
}
internal class StatsdClient.Bufferize.BufferBuilder : object {
    private static Encoding _encoding;
    private IBufferBuilderHandler _handler;
    private Byte[] _buffer;
    private byte _separator;
    private Char[] _charsBuffers;
    private Action`1<Exception> _optionalExceptionHandler;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; private set; }
    public int Capacity { get; }
    public BufferBuilder(IBufferBuilderHandler handler, int bufferCapacity, string separator, Action`1<Exception> optionalExceptionHandler);
    private static BufferBuilder();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public int get_Capacity();
    public static Byte[] GetBytes(string message);
    public void Add(SerializedMetric serializedMetric);
    public void HandleBufferAndReset();
}
internal class StatsdClient.Bufferize.BufferBuilderHandler : object {
    private Telemetry _telemetry;
    private ITransport _transport;
    public BufferBuilderHandler(Telemetry telemetry, ITransport transport);
    public sealed virtual void Handle(Byte[] buffer, int length);
}
internal interface StatsdClient.Bufferize.IBufferBuilderHandler {
    public abstract virtual void Handle(Byte[] buffer, int length);
}
internal interface StatsdClient.Bufferize.IStatsBufferizeFactory {
    public abstract virtual StatsBufferize CreateStatsBufferize(StatsRouter statsRouter, int workerMaxItemCount, Nullable`1<TimeSpan> blockingQueueTimeout, TimeSpan maxIdleWaitBeforeSending, Action`1<Exception> optionalExceptionHandler);
    public abstract virtual StatsRouter CreateStatsRouter(Serializers serializers, BufferBuilder bufferBuilder, Aggregators optionalAggregators);
    public abstract virtual ITransport CreateUDPTransport(IPEndPoint endPoint);
    public abstract virtual ITransport CreateUnixDomainSocketTransport(UnixEndPoint endPoint, Nullable`1<TimeSpan> udsBufferFullBlockDuration);
    public abstract virtual ITransport CreateNamedPipeTransport(string pipeName);
    public abstract virtual Telemetry CreateTelemetry(MetricSerializer metricSerializer, string assemblyVersion, TimeSpan flushInterval, ITransport transport, String[] globalTags, Action`1<Exception> optionalExceptionHandler);
}
internal class StatsdClient.Bufferize.StatsBufferize : object {
    private AsynchronousWorker`1<Stats> _worker;
    public StatsBufferize(StatsRouter statsRouter, int workerMaxItemCount, Nullable`1<TimeSpan> blockingQueueTimeout, TimeSpan maxIdleWaitBeforeSending, Action`1<Exception> optionalExceptionHandler);
    public void Send(Stats serializedMetric);
    public bool TryDequeueFromPool(Stats& value);
    public void Flush();
    public sealed virtual void Dispose();
}
internal class StatsdClient.Bufferize.StatsBufferizeFactory : object {
    public sealed virtual StatsBufferize CreateStatsBufferize(StatsRouter statsRouter, int workerMaxItemCount, Nullable`1<TimeSpan> blockingQueueTimeout, TimeSpan maxIdleWaitBeforeSending, Action`1<Exception> optionalExceptionHandler);
    public sealed virtual StatsRouter CreateStatsRouter(Serializers serializers, BufferBuilder bufferBuilder, Aggregators optionalAggregators);
    public sealed virtual ITransport CreateUDPTransport(IPEndPoint endPoint);
    public sealed virtual ITransport CreateUnixDomainSocketTransport(UnixEndPoint endPoint, Nullable`1<TimeSpan> udsBufferFullBlockDuration);
    public sealed virtual Telemetry CreateTelemetry(MetricSerializer metricSerializer, string assemblyVersion, TimeSpan flushInterval, ITransport transport, String[] globalTags, Action`1<Exception> optionalExceptionHandler);
    public sealed virtual ITransport CreateNamedPipeTransport(string pipeName);
}
public class StatsdClient.ClientSideAggregationConfig : object {
    [CompilerGeneratedAttribute]
private int <MaxUniqueStatsBeforeFlush>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FlushInterval>k__BackingField;
    public int MaxUniqueStatsBeforeFlush { get; public set; }
    public TimeSpan FlushInterval { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxUniqueStatsBeforeFlush();
    [CompilerGeneratedAttribute]
public void set_MaxUniqueStatsBeforeFlush(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_FlushInterval();
    [CompilerGeneratedAttribute]
public void set_FlushInterval(TimeSpan value);
}
public static class StatsdClient.DogStatsd : object {
    private static DogStatsdService _dogStatsdService;
    public static ITelemetryCounters TelemetryCounters { get; }
    private static DogStatsd();
    public static ITelemetryCounters get_TelemetryCounters();
    public static bool Configure(StatsdConfig config, Action`1<Exception> optionalExceptionHandler);
    public static void Event(string title, string text, string alertType, string aggregationKey, string sourceType, Nullable`1<int> dateHappened, string priority, string hostname, String[] tags);
    public static void Counter(string statName, double value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public static void Increment(string statName, int value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public static void Decrement(string statName, int value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public static void Gauge(string statName, double value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public static void Histogram(string statName, double value, double sampleRate, String[] tags);
    public static void Distribution(string statName, double value, double sampleRate, String[] tags);
    public static void Set(string statName, T value, double sampleRate, String[] tags);
    public static void Set(string statName, string value, double sampleRate, String[] tags);
    public static void Timer(string statName, double value, double sampleRate, String[] tags);
    public static IDisposable StartTimer(string name, double sampleRate, String[] tags);
    public static void Time(Action action, string statName, double sampleRate, String[] tags);
    public static T Time(Func`1<T> func, string statName, double sampleRate, String[] tags);
    public static void ServiceCheck(string name, Status status, Nullable`1<int> timestamp, string hostname, String[] tags, string message);
    public static void Flush(bool flushTelemetry);
    public static void Dispose();
}
public class StatsdClient.DogStatsdEndPoint : object {
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipeName>k__BackingField;
    public string ServerName { get; public set; }
    public int Port { get; public set; }
    public string PipeName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_PipeName();
    [CompilerGeneratedAttribute]
public void set_PipeName(string value);
    public bool AreEquals(DogStatsdEndPoint endPoint);
}
public class StatsdClient.DogStatsdService : object {
    private StatsdBuilder _statsdBuilder;
    private MetricsSender _metricsSender;
    private StatsdData _statsdData;
    private StatsdConfig _config;
    public ITelemetryCounters TelemetryCounters { get; }
    public sealed virtual ITelemetryCounters get_TelemetryCounters();
    public sealed virtual bool Configure(StatsdConfig config, Action`1<Exception> optionalExceptionHandler);
    public sealed virtual void Event(string title, string text, string alertType, string aggregationKey, string sourceType, Nullable`1<int> dateHappened, string priority, string hostname, String[] tags);
    public sealed virtual void Counter(string statName, double value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public sealed virtual void Increment(string statName, int value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public sealed virtual void Decrement(string statName, int value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public sealed virtual void Gauge(string statName, double value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public sealed virtual void Histogram(string statName, double value, double sampleRate, String[] tags);
    public sealed virtual void Distribution(string statName, double value, double sampleRate, String[] tags);
    public sealed virtual void Set(string statName, T value, double sampleRate, String[] tags);
    public sealed virtual void Set(string statName, string value, double sampleRate, String[] tags);
    public sealed virtual void Timer(string statName, double value, double sampleRate, String[] tags);
    public sealed virtual IDisposable StartTimer(string name, double sampleRate, String[] tags);
    public sealed virtual void Time(Action action, string statName, double sampleRate, String[] tags);
    public sealed virtual T Time(Func`1<T> func, string statName, double sampleRate, String[] tags);
    public sealed virtual void ServiceCheck(string name, Status status, Nullable`1<int> timestamp, string hostname, String[] tags, string message);
    public sealed virtual void Flush(bool flushTelemetry);
    public sealed virtual void Dispose();
}
internal class StatsdClient.EventSerializer : object {
    private static int MaxSize;
    private SerializerHelper _serializerHelper;
    public EventSerializer(SerializerHelper serializerHelper);
    public void SerializeTo(StatsEvent& statsEvent, SerializedMetric serializedMetric);
}
internal interface StatsdClient.ICommandType {
}
public interface StatsdClient.IDogStatsd {
    public ITelemetryCounters TelemetryCounters { get; }
    public abstract virtual ITelemetryCounters get_TelemetryCounters();
    public abstract virtual bool Configure(StatsdConfig config, Action`1<Exception> optionalExceptionHandler);
    public abstract virtual void Counter(string statName, double value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public abstract virtual void Decrement(string statName, int value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public abstract virtual void Event(string title, string text, string alertType, string aggregationKey, string sourceType, Nullable`1<int> dateHappened, string priority, string hostname, String[] tags);
    public abstract virtual void Gauge(string statName, double value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public abstract virtual void Histogram(string statName, double value, double sampleRate, String[] tags);
    public abstract virtual void Distribution(string statName, double value, double sampleRate, String[] tags);
    public abstract virtual void Increment(string statName, int value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public abstract virtual void Set(string statName, T value, double sampleRate, String[] tags);
    public abstract virtual void Set(string statName, string value, double sampleRate, String[] tags);
    public abstract virtual IDisposable StartTimer(string name, double sampleRate, String[] tags);
    public abstract virtual void Time(Action action, string statName, double sampleRate, String[] tags);
    public abstract virtual T Time(Func`1<T> func, string statName, double sampleRate, String[] tags);
    public abstract virtual void Timer(string statName, double value, double sampleRate, String[] tags);
    public abstract virtual void ServiceCheck(string name, Status status, Nullable`1<int> timestamp, string hostname, String[] tags, string message);
    public abstract virtual void Flush(bool flushTelemetry);
}
internal interface StatsdClient.IRandomGenerator {
    public abstract virtual bool ShouldSend(double sampleRate);
}
internal interface StatsdClient.IStopwatch {
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual int ElapsedMilliseconds();
}
internal interface StatsdClient.IStopWatchFactory {
    public abstract virtual IStopwatch Get();
}
public interface StatsdClient.ITelemetryCounters {
    public int MetricsSent { get; }
    public int EventsSent { get; }
    public int ServiceChecksSent { get; }
    public int BytesSent { get; }
    public int BytesDropped { get; }
    public int PacketsSent { get; }
    public int PacketsDropped { get; }
    public int PacketsDroppedQueue { get; }
    public abstract virtual int get_MetricsSent();
    public abstract virtual int get_EventsSent();
    public abstract virtual int get_ServiceChecksSent();
    public abstract virtual int get_BytesSent();
    public abstract virtual int get_BytesDropped();
    public abstract virtual int get_PacketsSent();
    public abstract virtual int get_PacketsDropped();
    public abstract virtual int get_PacketsDroppedQueue();
}
internal class StatsdClient.MetricSerializer : object {
    private static Dictionary`2<MetricType, string> _commandToUnit;
    private SerializerHelper _serializerHelper;
    private string _prefix;
    private Char[] numericBuffer;
    internal MetricSerializer(SerializerHelper serializerHelper, string prefix);
    private static MetricSerializer();
    public void SerializeTo(StatsMetric& metricStats, SerializedMetric serializedMetric);
    private void AppendDouble(StringBuilder builder, double v);
}
internal class StatsdClient.MetricsSender : object {
    private Telemetry _optionalTelemetry;
    private StatsBufferize _statsBufferize;
    private bool _truncateIfTooLong;
    private IStopWatchFactory _stopwatchFactory;
    private IRandomGenerator _randomGenerator;
    internal MetricsSender(StatsBufferize statsBufferize, IRandomGenerator randomGenerator, IStopWatchFactory stopwatchFactory, Telemetry optionalTelemetry, bool truncateIfTooLong);
    public void SendEvent(string title, string text, string alertType, string aggregationKey, string sourceType, Nullable`1<int> dateHappened, string priority, string hostname, String[] tags, bool truncateIfTooLong);
    public void SendServiceCheck(string name, int status, Nullable`1<int> timestamp, string hostname, String[] tags, string serviceCheckMessage, bool truncateIfTooLong);
    public void SendMetric(MetricType metricType, string name, double value, double sampleRate, String[] tags, Nullable`1<DateTimeOffset> timestamp);
    public void SendSetMetric(string name, string value, double sampleRate, String[] tags);
    public void Send(Action actionToTime, string statName, double sampleRate, String[] tags);
    private bool TryDequeueStats(Stats& stats);
    private void Send(Stats metricFields);
}
internal class StatsdClient.MetricsTimer : object {
    private string _name;
    private DogStatsdService _dogStatsd;
    private Stopwatch _stopWatch;
    private double _sampleRate;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private List`1<string> <Tags>k__BackingField;
    public List`1<string> Tags { get; public set; }
    public MetricsTimer(string name, double sampleRate, String[] tags);
    public MetricsTimer(DogStatsdService dogStatsd, string name, double sampleRate, String[] tags);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<string> value);
    public sealed virtual void Dispose();
}
internal enum StatsdClient.MetricType : Enum {
    public int value__;
    public static MetricType Count;
    public static MetricType Timing;
    public static MetricType Gauge;
    public static MetricType Histogram;
    public static MetricType Distribution;
    public static MetricType Meter;
    public static MetricType Set;
}
internal class StatsdClient.RandomGenerator : object {
    private ThreadSafeRandom _random;
    public sealed virtual bool ShouldSend(double sampleRate);
}
internal class StatsdClient.SerializedMetric : object {
    [CompilerGeneratedAttribute]
private StringBuilder <Builder>k__BackingField;
    public StringBuilder Builder { get; }
    [CompilerGeneratedAttribute]
public StringBuilder get_Builder();
    public int CopyToChars(Char[] charsBuffers);
    public virtual string ToString();
    public void Reset();
}
internal class StatsdClient.SerializerHelper : object {
    private static String[] EmptyArray;
    private string _constantTags;
    public SerializerHelper(String[] constantTags);
    private static SerializerHelper();
    public static string EscapeContent(string content);
    public static string TruncateOverage(string str, int overage);
    public static void AppendIfNotNull(StringBuilder builder, string prefix, string value);
    public void AppendTags(StringBuilder builder, String[] tags);
}
internal class StatsdClient.Serializers : object {
    [CompilerGeneratedAttribute]
private MetricSerializer <MetricSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceCheckSerializer <ServiceCheckSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private EventSerializer <EventSerializer>k__BackingField;
    public MetricSerializer MetricSerializer { get; public set; }
    public ServiceCheckSerializer ServiceCheckSerializer { get; public set; }
    public EventSerializer EventSerializer { get; public set; }
    [CompilerGeneratedAttribute]
public MetricSerializer get_MetricSerializer();
    [CompilerGeneratedAttribute]
public void set_MetricSerializer(MetricSerializer value);
    [CompilerGeneratedAttribute]
public ServiceCheckSerializer get_ServiceCheckSerializer();
    [CompilerGeneratedAttribute]
public void set_ServiceCheckSerializer(ServiceCheckSerializer value);
    [CompilerGeneratedAttribute]
public EventSerializer get_EventSerializer();
    [CompilerGeneratedAttribute]
public void set_EventSerializer(EventSerializer value);
}
internal class StatsdClient.ServiceCheckSerializer : object {
    private static int ServiceCheckMaxSize;
    private SerializerHelper _serializerHelper;
    public ServiceCheckSerializer(SerializerHelper serializerHelper);
    public void SerializeTo(StatsServiceCheck& sc, SerializedMetric serializedMetric);
    private static string TruncateMessageIfRequired(string name, StringBuilder builder, bool truncateIfTooLong, string processedMessage);
    private static string EscapeName(string name);
    private static string EscapeMessage(string message);
}
internal static class StatsdClient.SocketSender : object {
    public static void Send(int maxPacketSize, string command, Action`1<Byte[]> sender);
    [AsyncStateMachineAttribute("StatsdClient.SocketSender/<SendAsync>d__1")]
public static Task SendAsync(EndPoint endpoint, Socket socket, int maxPacketSize, ArraySegment`1<byte> encodedCommand);
    private static void Send(int maxPacketSize, Byte[] encodedCommand, Action`1<Byte[]> sender);
}
internal class StatsdClient.Statistic.Stats : object {
    public StatsMetric Metric;
    public StatsServiceCheck ServiceCheck;
    public StatsEvent Event;
    [CompilerGeneratedAttribute]
private StatsKind <Kind>k__BackingField;
    public StatsKind Kind { get; public set; }
    [CompilerGeneratedAttribute]
public StatsKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(StatsKind value);
}
internal class StatsdClient.Statistic.StatsEvent : ValueType {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlertType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AggregationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DateHappened>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TruncateIfTooLong>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    public string Title { get; public set; }
    public string Text { get; public set; }
    public string AlertType { get; public set; }
    public string AggregationKey { get; public set; }
    public string SourceType { get; public set; }
    public Nullable`1<int> DateHappened { get; public set; }
    public string Priority { get; public set; }
    public string Hostname { get; public set; }
    public bool TruncateIfTooLong { get; public set; }
    public String[] Tags { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_AlertType();
    [CompilerGeneratedAttribute]
public void set_AlertType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_AggregationKey();
    [CompilerGeneratedAttribute]
public void set_AggregationKey(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_SourceType();
    [CompilerGeneratedAttribute]
public void set_SourceType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_DateHappened();
    [CompilerGeneratedAttribute]
public void set_DateHappened(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_TruncateIfTooLong();
    [CompilerGeneratedAttribute]
public void set_TruncateIfTooLong(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal enum StatsdClient.Statistic.StatsKind : Enum {
    public int value__;
    public static StatsKind Metric;
    public static StatsKind ServiceCheck;
    public static StatsKind Event;
}
internal class StatsdClient.Statistic.StatsMetric : ValueType {
    [CompilerGeneratedAttribute]
private MetricType <MetricType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NumericValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SampleRate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    public MetricType MetricType { get; public set; }
    public string StatName { get; public set; }
    public double NumericValue { get; public set; }
    public string StringValue { get; public set; }
    public double SampleRate { get; public set; }
    public long Timestamp { get; public set; }
    public String[] Tags { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MetricType get_MetricType();
    [CompilerGeneratedAttribute]
public void set_MetricType(MetricType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_StatName();
    [CompilerGeneratedAttribute]
public void set_StatName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_NumericValue();
    [CompilerGeneratedAttribute]
public void set_NumericValue(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_StringValue();
    [CompilerGeneratedAttribute]
public void set_StringValue(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_SampleRate();
    [CompilerGeneratedAttribute]
public void set_SampleRate(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class StatsdClient.Statistic.StatsServiceCheck : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceCheckMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TruncateIfTooLong>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    public string Name { get; public set; }
    public int Status { get; public set; }
    public Nullable`1<int> Timestamp { get; public set; }
    public string Hostname { get; public set; }
    public string ServiceCheckMessage { get; public set; }
    public bool TruncateIfTooLong { get; public set; }
    public String[] Tags { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ServiceCheckMessage();
    [CompilerGeneratedAttribute]
public void set_ServiceCheckMessage(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_TruncateIfTooLong();
    [CompilerGeneratedAttribute]
public void set_TruncateIfTooLong(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class StatsdClient.StatsdBuilder : object {
    public static string UnixDomainSocketPrefix;
    private static string _entityIdInternalTagKey;
    private IStatsBufferizeFactory _factory;
    public StatsdBuilder(IStatsBufferizeFactory factory);
    private static StatsdBuilder();
    public StatsdData BuildStatsData(StatsdConfig config, Action`1<Exception> optionalExceptionHandler);
    private static void AddTag(List`1<string> tags, string tagKey, string environmentVariableName, string originalValue);
    private static DogStatsdEndPoint BuildEndPoint(StatsdConfig config);
    private static Serializers CreateSerializers(string prefix, String[] constantTags, int maxMetricsInAsyncQueue);
    private static int GetPort(int statsdPort);
    private String[] GetGlobalTags(StatsdConfig config);
    private Telemetry CreateTelemetry(MetricSerializer metricSerializer, StatsdConfig config, String[] globalTags, DogStatsdEndPoint dogStatsdEndPoint, ITransport transport, Action`1<Exception> optionalExceptionHandler);
    private ITransport CreateTransport(DogStatsdEndPoint endPoint, StatsdConfig config);
    private TransportData CreateTransportData(DogStatsdEndPoint endPoint, StatsdConfig config);
    private StatsBufferize CreateStatsBufferize(Telemetry telemetry, ITransport transport, int bufferCapacity, AdvancedStatsConfig config, Serializers serializers, ClientSideAggregationConfig optionalClientSideAggregationConfig, Action`1<Exception> optionalExceptionHandler);
    private ITransport CreateUDPTransport(DogStatsdEndPoint endPoint);
}
public class StatsdClient.StatsdConfig : object {
    public static int DefaultStatsdPort;
    public static int DefaultStatsdMaxUDPPacketSize;
    public static string EntityIdEnvVar;
    public static string DogStatsdPortEnvVar;
    public static string AgentHostEnvVar;
    public static string AgentPipeNameEnvVar;
    public static string ServiceEnvVar;
    public static string EnvironmentEnvVar;
    public static string VersionEnvVar;
    internal static string ServiceTagKey;
    internal static string EnvironmentTagKey;
    internal static string VersionTagKey;
    [CompilerGeneratedAttribute]
private string <StatsdServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipeName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatsdPort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatsdMaxUDPPacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatsdMaxUnixDomainSocketPacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StatsdTruncateIfTooLong>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private AdvancedStatsConfig <Advanced>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ConstantTags>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientSideAggregationConfig <ClientSideAggregation>k__BackingField;
    public string StatsdServerName { get; public set; }
    public string PipeName { get; public set; }
    public int StatsdPort { get; public set; }
    public int StatsdMaxUDPPacketSize { get; public set; }
    public int StatsdMaxUnixDomainSocketPacketSize { get; public set; }
    public bool StatsdTruncateIfTooLong { get; public set; }
    public string Prefix { get; public set; }
    public AdvancedStatsConfig Advanced { get; }
    public string Environment { get; public set; }
    public string ServiceVersion { get; public set; }
    public string ServiceName { get; public set; }
    public String[] ConstantTags { get; public set; }
    public ClientSideAggregationConfig ClientSideAggregation { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StatsdServerName();
    [CompilerGeneratedAttribute]
public void set_StatsdServerName(string value);
    [CompilerGeneratedAttribute]
public string get_PipeName();
    [CompilerGeneratedAttribute]
public void set_PipeName(string value);
    [CompilerGeneratedAttribute]
public int get_StatsdPort();
    [CompilerGeneratedAttribute]
public void set_StatsdPort(int value);
    [CompilerGeneratedAttribute]
public int get_StatsdMaxUDPPacketSize();
    [CompilerGeneratedAttribute]
public void set_StatsdMaxUDPPacketSize(int value);
    [CompilerGeneratedAttribute]
public int get_StatsdMaxUnixDomainSocketPacketSize();
    [CompilerGeneratedAttribute]
public void set_StatsdMaxUnixDomainSocketPacketSize(int value);
    [CompilerGeneratedAttribute]
public bool get_StatsdTruncateIfTooLong();
    [CompilerGeneratedAttribute]
public void set_StatsdTruncateIfTooLong(bool value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public AdvancedStatsConfig get_Advanced();
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceVersion();
    [CompilerGeneratedAttribute]
public void set_ServiceVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public String[] get_ConstantTags();
    [CompilerGeneratedAttribute]
public void set_ConstantTags(String[] value);
    [CompilerGeneratedAttribute]
public ClientSideAggregationConfig get_ClientSideAggregation();
    [CompilerGeneratedAttribute]
public void set_ClientSideAggregation(ClientSideAggregationConfig value);
}
internal class StatsdClient.StatsdData : object {
    private ITransport _transport;
    private StatsBufferize _statsBufferize;
    [CompilerGeneratedAttribute]
private MetricsSender <MetricsSender>k__BackingField;
    [CompilerGeneratedAttribute]
private Telemetry <Telemetry>k__BackingField;
    public MetricsSender MetricsSender { get; private set; }
    public Telemetry Telemetry { get; private set; }
    public StatsdData(MetricsSender metricsSender, StatsBufferize statsBufferize, ITransport transport, Telemetry telemetry);
    [CompilerGeneratedAttribute]
public MetricsSender get_MetricsSender();
    [CompilerGeneratedAttribute]
private void set_MetricsSender(MetricsSender value);
    [CompilerGeneratedAttribute]
public Telemetry get_Telemetry();
    [CompilerGeneratedAttribute]
private void set_Telemetry(Telemetry value);
    public void Flush(bool flushTelemetry);
    public sealed virtual void Dispose();
}
internal class StatsdClient.StatsdUDP : object {
    internal static IPAddress GetIpv4Address(string name);
}
internal class StatsdClient.StatsRouter : object {
    private Serializers _serializers;
    private BufferBuilder _bufferBuilder;
    private CountAggregator _optionalCountAggregator;
    private GaugeAggregator _optionalGaugeAggregator;
    private SetAggregator _optionalSetAggregator;
    private SerializedMetric _serializedMetric;
    public StatsRouter(Serializers serializers, BufferBuilder bufferBuilder, Aggregators optionalAggregators);
    public void Route(Stats stats);
    public void OnIdle();
    public void Flush();
    private void TryFlush(bool force);
    private bool RouteMetric(StatsMetric& metric);
}
public enum StatsdClient.Status : Enum {
    public int value__;
    public static Status OK;
    public static Status WARNING;
    public static Status CRITICAL;
    public static Status UNKNOWN;
}
internal class StatsdClient.Stopwatch : object {
    private Stopwatch _stopwatch;
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual int ElapsedMilliseconds();
}
internal class StatsdClient.StopWatchFactory : object {
    public sealed virtual IStopwatch Get();
}
internal class StatsdClient.Telemetry : object {
    private static string _telemetryPrefix;
    private Timer _optionalTimer;
    private String[] _optionalTags;
    private MetricSerializer _optionalMetricSerializer;
    private ITransport _optionalTransport;
    private Dictionary`2<MetricType, ValueWithTags> _aggregatedContexts;
    private Action`1<Exception> _optionalExceptionHandler;
    private int _metricsSent;
    private int _eventsSent;
    private int _serviceChecksSent;
    private int _bytesSent;
    private int _bytesDropped;
    private int _packetsSent;
    private int _packetsDropped;
    private int _packetsDroppedQueue;
    public static string MetricsMetricName { get; }
    public static string EventsMetricName { get; }
    public static string ServiceCheckMetricName { get; }
    public static string BytesSentMetricName { get; }
    public static string BytesDroppedMetricName { get; }
    public static string PacketsSentMetricName { get; }
    public static string PacketsDroppedMetricName { get; }
    public static string PacketsDroppedQueueMetricName { get; }
    public static string AggregatedContextByTypeName { get; }
    public int MetricsSent { get; }
    public int EventsSent { get; }
    public int ServiceChecksSent { get; }
    public int BytesSent { get; }
    public int BytesDropped { get; }
    public int PacketsSent { get; }
    public int PacketsDropped { get; }
    public int PacketsDroppedQueue { get; }
    public Telemetry(MetricSerializer metricSerializer, string assemblyVersion, TimeSpan flushInterval, ITransport transport, String[] globalTags, Action`1<Exception> optionalExceptionHandler);
    private static Telemetry();
    public static string get_MetricsMetricName();
    public static string get_EventsMetricName();
    public static string get_ServiceCheckMetricName();
    public static string get_BytesSentMetricName();
    public static string get_BytesDroppedMetricName();
    public static string get_PacketsSentMetricName();
    public static string get_PacketsDroppedMetricName();
    public static string get_PacketsDroppedQueueMetricName();
    public static string get_AggregatedContextByTypeName();
    public sealed virtual int get_MetricsSent();
    public sealed virtual int get_EventsSent();
    public sealed virtual int get_ServiceChecksSent();
    public sealed virtual int get_BytesSent();
    public sealed virtual int get_BytesDropped();
    public sealed virtual int get_PacketsSent();
    public sealed virtual int get_PacketsDropped();
    public sealed virtual int get_PacketsDroppedQueue();
    public void Flush();
    public void OnMetricSent();
    public void OnEventSent();
    public void OnServiceCheckSent();
    public void OnPacketSent(int packetSize);
    public void OnPacketDropped(int packetSize);
    public void OnPacketsDroppedQueue();
    public void OnAggregatedContextFlush(MetricType metricType, int count);
    public sealed virtual void Dispose();
    private void SendMetricWithTags(string metricName, String[] tags, int value);
    private void SendMetric(string metricName, int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__16_0(object _);
}
internal class StatsdClient.ThreadSafeRandom : object {
    private static Random _global;
    [ThreadStaticAttribute]
private static Random _local;
    private Random Local { get; }
    private static ThreadSafeRandom();
    private Random get_Local();
    public double NextDouble();
}
internal interface StatsdClient.Transport.ITransport {
    public TransportType TransportType { get; }
    public string TelemetryClientTransport { get; }
    public abstract virtual TransportType get_TransportType();
    public abstract virtual string get_TelemetryClientTransport();
    public abstract virtual bool Send(Byte[] buffer, int length);
}
internal class StatsdClient.Transport.NamedPipeTransport : object {
    private NamedPipeClientStream _namedPipe;
    private TimeSpan _timeout;
    private Byte[] _internalbuffer;
    private SpinLock _lock;
    public TransportType TransportType { get; }
    public string TelemetryClientTransport { get; }
    public NamedPipeTransport(string pipeName, Nullable`1<TimeSpan> timeout);
    public sealed virtual TransportType get_TransportType();
    public sealed virtual string get_TelemetryClientTransport();
    public sealed virtual bool Send(Byte[] buffer, int length);
    public sealed virtual void Dispose();
    private bool SendBuffer(Byte[] buffer, int length, bool allowRetry);
}
internal enum StatsdClient.Transport.TransportType : Enum {
    public int value__;
    public static TransportType UDS;
    public static TransportType UDP;
    public static TransportType NamedPipe;
}
internal class StatsdClient.Transport.UDPTransport : object {
    private Socket _socket;
    private IPEndPoint _endPoint;
    public TransportType TransportType { get; }
    public string TelemetryClientTransport { get; }
    public UDPTransport(IPEndPoint endPoint);
    public sealed virtual TransportType get_TransportType();
    public sealed virtual string get_TelemetryClientTransport();
    public sealed virtual bool Send(Byte[] buffer, int length);
    public sealed virtual void Dispose();
}
internal class StatsdClient.Transport.UnixDomainSocketTransport : object {
    private static TimeSpan NoBufferSpaceAvailableWait;
    private Socket _socket;
    private int _noBufferSpaceAvailableRetryCount;
    private UnixEndPoint _endPoint;
    public TransportType TransportType { get; }
    public string TelemetryClientTransport { get; }
    public UnixDomainSocketTransport(UnixEndPoint endPoint, Nullable`1<TimeSpan> bufferFullBlockDuration);
    private static UnixDomainSocketTransport();
    public sealed virtual TransportType get_TransportType();
    public sealed virtual string get_TelemetryClientTransport();
    public sealed virtual bool Send(Byte[] buffer, int length);
    public sealed virtual void Dispose();
}
internal abstract class StatsdClient.Utils.AbstractPoolObject : object {
    private IPool _pool;
    private Action`1<Exception> _optionalExceptionHandler;
    private bool _enqueue;
    public AbstractPoolObject(IPool pool, Action`1<Exception> optionalExceptionHandler);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void Reset();
    protected abstract virtual void DoReset();
    protected void Dispose(bool disposing);
}
internal interface StatsdClient.Utils.IPool {
    public abstract virtual void Enqueue(object obj);
}
internal class StatsdClient.Utils.Pool`1 : object {
    private Func`2<Pool`1<T>, T> _factory;
    private ConcurrentQueue`1<T> _pool;
    private int _maxAllocationCount;
    private int _allocationCount;
    public Pool`1(Func`2<Pool`1<T>, T> factory, int maxAllocationCount);
    public bool TryDequeue(T& result);
    public sealed virtual void Enqueue(object obj);
}
internal class StatsdClient.Worker.AsynchronousWorker`1 : object {
    private static TimeSpan maxWaitDurationInFlush;
    private List`1<Task> _workers;
    private IAsynchronousWorkerHandler`1<T> _handler;
    private IWaiter _waiter;
    private Action`1<Exception> _optionalExceptionHandler;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _terminate;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _requestFlush;
    private AutoResetEvent _flushEvent;
    private ConcurrentQueueWithPool`1<T> _queue;
    [CompilerGeneratedAttribute]
private static TimeSpan <MinWaitDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <MaxWaitDuration>k__BackingField;
    public static TimeSpan MinWaitDuration { get; }
    public static TimeSpan MaxWaitDuration { get; }
    public AsynchronousWorker`1(Func`1<T> factory, IAsynchronousWorkerHandler`1<T> handler, IWaiter waiter, int workerThreadCount, int maxItemCount, Nullable`1<TimeSpan> blockingQueueTimeout, Action`1<Exception> optionalExceptionHandler);
    private static AsynchronousWorker`1();
    [CompilerGeneratedAttribute]
public static TimeSpan get_MinWaitDuration();
    [CompilerGeneratedAttribute]
public static TimeSpan get_MaxWaitDuration();
    public void Enqueue(T value);
    public bool TryDequeueFromPool(T& value);
    public void Flush();
    public sealed virtual void Dispose();
    private void Dequeue();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0();
}
internal class StatsdClient.Worker.ConcurrentQueueWithPool`1 : object {
    private ConcurrentQueue`1<T> _queue;
    private ConcurrentQueue`1<T> _poolQueue;
    private Stopwatch stopWatch;
    private Nullable`1<TimeSpan> _blockingQueueTimeout;
    private Func`1<T> _factory;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _remainingAllocations;
    public bool IsEmpty { get; }
    public ConcurrentQueueWithPool`1(Func`1<T> factory, int maxItemCount, Nullable`1<TimeSpan> blockingQueueTimeout);
    public bool get_IsEmpty();
    public bool TryDequeueFromPool(T& value);
    public void EnqueuePool(T value);
    public void EnqueueValue(T value);
    public bool TryDequeueValue(T& value);
}
internal interface StatsdClient.Worker.IAsynchronousWorkerHandler`1 {
    public abstract virtual void OnNewValue(T v);
    public abstract virtual bool OnIdle();
    public abstract virtual void Flush();
}
internal interface StatsdClient.Worker.IWaiter {
    public abstract virtual void Wait(TimeSpan duration);
}
internal class StatsdClient.Worker.Waiter : object {
    public sealed virtual void Wait(TimeSpan duration);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
