[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class dotenv.net.DotEnv : object {
    [ObsoleteAttribute("This method would be removed in the next major release. Use the Fluent API, Load() or Read() methods instead.")]
public static void Config(DotEnvOptions options);
    [ObsoleteAttribute("This method would be removed in the next major release. Use the Fluent API, Load() or Read() methods instead.")]
public static bool AutoConfig(int levelsToSearch);
    public static DotEnvOptions Fluent();
    public static IDictionary`2<string, string> Read(DotEnvOptions options);
    [NullableContextAttribute("2")]
public static void Load(DotEnvOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class dotenv.net.DotEnvOptions : object {
    private static String[] DefaultEnvPath;
    internal static string DefaultEnvFileName;
    internal static int DefaultProbeDepth;
    [CompilerGeneratedAttribute]
private bool <IgnoreExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <EnvFilePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrimValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverwriteExistingVars>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProbeForEnv>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProbeLevelsToSearch>k__BackingField;
    public bool IgnoreExceptions { get; private set; }
    public IEnumerable`1<string> EnvFilePaths { get; private set; }
    public Encoding Encoding { get; private set; }
    public bool TrimValues { get; private set; }
    public bool OverwriteExistingVars { get; private set; }
    public bool ProbeForEnv { get; private set; }
    public int ProbeLevelsToSearch { get; private set; }
    public DotEnvOptions(bool ignoreExceptions, IEnumerable`1<string> envFilePaths, Encoding encoding, bool trimValues, bool overwriteExistingVars, bool probeForEnv, int probeLevelsToSearch);
    private static DotEnvOptions();
    [CompilerGeneratedAttribute]
public bool get_IgnoreExceptions();
    [CompilerGeneratedAttribute]
private void set_IgnoreExceptions(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_EnvFilePaths();
    [CompilerGeneratedAttribute]
private void set_EnvFilePaths(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_TrimValues();
    [CompilerGeneratedAttribute]
private void set_TrimValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverwriteExistingVars();
    [CompilerGeneratedAttribute]
private void set_OverwriteExistingVars(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProbeForEnv();
    [CompilerGeneratedAttribute]
private void set_ProbeForEnv(bool value);
    [CompilerGeneratedAttribute]
public int get_ProbeLevelsToSearch();
    [CompilerGeneratedAttribute]
private void set_ProbeLevelsToSearch(int value);
    public DotEnvOptions WithExceptions();
    public DotEnvOptions WithoutExceptions();
    public DotEnvOptions WithProbeForEnv(int probeLevelsToSearch);
    public DotEnvOptions WithoutProbeForEnv();
    public DotEnvOptions WithOverwriteExistingVars();
    public DotEnvOptions WithoutOverwriteExistingVars();
    public DotEnvOptions WithTrimValues();
    public DotEnvOptions WithoutTrimValues();
    public DotEnvOptions WithEncoding(Encoding encoding);
    public DotEnvOptions WithDefaultEncoding();
    public DotEnvOptions WithEnvFiles(String[] envFilePaths);
    public IDictionary`2<string, string> Read();
    public void Load();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class dotenv.net.Parser : object {
    private static string SingleQuote;
    private static string DoubleQuotes;
    private static Regex IsQuotedLineStart;
    private static Regex IsQuotedLineEnd;
    private static Parser();
    internal static ReadOnlySpan`1<KeyValuePair`2<string, string>> Parse(ReadOnlySpan`1<string> rawEnvRows, bool trimValues);
    [ExtensionAttribute]
private static bool IsComment(string value);
    [ExtensionAttribute]
private static string StripQuotes(string value);
    [ExtensionAttribute]
private static bool HasKey(string value, Int32& index);
    [ExtensionAttribute]
private static ValueTuple`2<string, string> SplitIntoKv(string rawEnvRow, int index);
}
internal static class dotenv.net.Reader : object {
    [NullableContextAttribute("1")]
internal static ReadOnlySpan`1<string> Read(string envFilePath, bool ignoreExceptions, Encoding encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class dotenv.net.Utilities.EnvReader : object {
    public static string GetStringValue(string key);
    public static int GetIntValue(string key);
    public static double GetDoubleValue(string key);
    public static decimal GetDecimalValue(string key);
    public static bool GetBooleanValue(string key);
    public static bool TryGetStringValue(string key, String& value);
    public static bool TryGetIntValue(string key, Int32& value);
    public static bool TryGetDoubleValue(string key, Double& value);
    public static bool TryGetDecimalValue(string key, Decimal& value);
    public static bool TryGetBooleanValue(string key, Boolean& value);
    public static bool HasValue(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class dotenv.net.Utilities.Helpers : object {
    private static ReadOnlySpan`1<KeyValuePair`2<string, string>> ReadAndParse(string envFilePath, bool ignoreExceptions, Encoding encoding, bool trimValues);
    internal static IDictionary`2<string, string> ReadAndReturn(DotEnvOptions options);
    internal static void ReadAndWrite(DotEnvOptions options);
    private static string GetProbedEnvPath(int levelsToSearch, bool ignoreExceptions);
    [CompilerGeneratedAttribute]
internal static string <GetProbedEnvPath>g__SearchPaths|3_0(<>c__DisplayClass3_0& );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
