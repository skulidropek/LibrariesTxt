[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SqlServer.Types.BitPattern : object {
    [CompilerGeneratedAttribute]
private long <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <PatternOnes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <PatternMask>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <PrefixOnes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrefixBitLength>k__BackingField;
    internal long MinValue { get; }
    internal long MaxValue { get; }
    internal string Pattern { get; }
    internal ulong PatternOnes { get; }
    internal ulong PatternMask { get; }
    internal int BitLength { get; }
    internal ulong PrefixOnes { get; }
    internal int PrefixBitLength { get; }
    internal BitPattern(long minValue, long maxValue, string pattern);
    private ulong GetBitMask(string pattern, Func`2<char, bool> isOne);
    [CompilerGeneratedAttribute]
internal long get_MinValue();
    [CompilerGeneratedAttribute]
internal long get_MaxValue();
    [CompilerGeneratedAttribute]
internal string get_Pattern();
    [CompilerGeneratedAttribute]
internal ulong get_PatternOnes();
    [CompilerGeneratedAttribute]
internal ulong get_PatternMask();
    [CompilerGeneratedAttribute]
internal int get_BitLength();
    [CompilerGeneratedAttribute]
internal ulong get_PrefixOnes();
    [CompilerGeneratedAttribute]
internal int get_PrefixBitLength();
    internal bool ContainsValue(long value);
    public virtual string ToString();
    public ulong EncodeValue(long val);
    private ulong Expand(ulong mask, long value);
    internal long Decode(ulong encodedValue, Boolean& isLast);
    private long Compress(ulong value, ulong mask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SqlServer.Types.BitReader : object {
    private Byte[] _bytes;
    private int _bitPosition;
    public int Remaining { get; }
    public int BitPosition { get; }
    internal BitReader(BinaryReader r);
    public int get_Remaining();
    public int get_BitPosition();
    internal ulong Read(int numBits);
    internal ulong Peek(int numBits);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SqlServer.Types.BitWriter : object {
    private BinaryWriter _writer;
    private byte _nextByte;
    private int _nextLength;
    public BitWriter(BinaryWriter w);
    public void Write(ulong value, int valueLength);
    public void Finish();
}
internal class Microsoft.SqlServer.Types.Figure : ValueType {
    public int VertexOffset;
    public FigureAttributes FigureAttribute;
}
internal enum Microsoft.SqlServer.Types.FigureAttributes : Enum {
    public byte value__;
    public static FigureAttributes InteriorRing;
    public static FigureAttributes Point;
    public static FigureAttributes Stroke;
    public static FigureAttributes Line;
    public static FigureAttributes ExteriorRing;
    public static FigureAttributes Arc;
    public static FigureAttributes Curve;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("True")]
public class Microsoft.SqlServer.Types.HierarchyIdException : Exception {
    public HierarchyIdException(string message);
    public HierarchyIdException(string message, Exception innerException);
    protected HierarchyIdException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("IGeographySink is obsolete, use IGeographySink110 instead.")]
public interface Microsoft.SqlServer.Types.IGeographySink {
    public abstract virtual void AddLine(double latitude, double longitude, Nullable`1<double> z, Nullable`1<double> m);
    public abstract virtual void BeginFigure(double latitude, double longitude, Nullable`1<double> z, Nullable`1<double> m);
    public abstract virtual void BeginGeography(OpenGisGeographyType type);
    public abstract virtual void EndFigure();
    public abstract virtual void EndGeography();
    public abstract virtual void SetSrid(int srid);
}
public interface Microsoft.SqlServer.Types.IGeographySink110 {
    public abstract virtual void AddCircularArc(double x1, double y1, Nullable`1<double> z1, Nullable`1<double> m1, double x2, double y2, Nullable`1<double> z2, Nullable`1<double> m2);
}
[ObsoleteAttribute("IGeometrySink is obsolete, use IGeometrySink110 instead.")]
public interface Microsoft.SqlServer.Types.IGeometrySink {
    public abstract virtual void AddLine(double x, double y, Nullable`1<double> z, Nullable`1<double> m);
    public abstract virtual void BeginFigure(double x, double y, Nullable`1<double> z, Nullable`1<double> m);
    public abstract virtual void BeginGeometry(OpenGisGeometryType type);
    public abstract virtual void EndFigure();
    public abstract virtual void EndGeometry();
    public abstract virtual void SetSrid(int srid);
}
public interface Microsoft.SqlServer.Types.IGeometrySink110 {
    public abstract virtual void AddCircularArc(double x1, double y1, Nullable`1<double> z1, Nullable`1<double> m1, double x2, double y2, Nullable`1<double> z2, Nullable`1<double> m2);
}
[NullableContextAttribute("1")]
public interface Microsoft.SqlServer.Types.ISqlSpatialGridIndexable {
    [SqlMethodAttribute]
public abstract virtual void GetGridCoverage(bool isTopmostGrid, double rGridMinX, double rGridMinY, double rGridWidth, double rGridHeight, double rFuzzX, double rFuzzY, int cGridRows, int cGridColumns, Boolean[0...,0...] touched, Boolean[0...,0...] contained, Int32& cCellsTouched, Int32& cCellsContained, Boolean& fGeometryExceedsGrid, Boolean& fHasAmbiguousTouchedCells);
    public abstract virtual void GetBoundingBoxCorners(Double& minX, Double& minY, Double& maxX, Double& maxY);
    [SqlMethodAttribute]
public abstract virtual ISqlSpatialGridIndexable BufferForDistanceQuery(double distance, Boolean& disableInternalFiltering);
    [SqlMethodAttribute]
public abstract virtual ISqlSpatialGridIndexable InteriorBufferForDistanceQuery(double distance);
}
internal enum Microsoft.SqlServer.Types.OGCGeometryType : Enum {
    public byte value__;
    public static OGCGeometryType Unknown;
    public static OGCGeometryType Point;
    public static OGCGeometryType LineString;
    public static OGCGeometryType Polygon;
    public static OGCGeometryType MultiPoint;
    public static OGCGeometryType MultiLineString;
    public static OGCGeometryType MultiPolygon;
    public static OGCGeometryType GeometryCollection;
    public static OGCGeometryType CircularString;
    public static OGCGeometryType CompoundCurve;
    public static OGCGeometryType CurvePolygon;
    public static OGCGeometryType FullGlobe;
}
public enum Microsoft.SqlServer.Types.OpenGisGeographyType : Enum {
    public byte value__;
    public static OpenGisGeographyType Point;
    public static OpenGisGeographyType LineString;
    public static OpenGisGeographyType Polygon;
    public static OpenGisGeographyType MultiPoint;
    public static OpenGisGeographyType MultiLineString;
    public static OpenGisGeographyType MultiPolygon;
    public static OpenGisGeographyType GeometryCollection;
    public static OpenGisGeographyType CircularString;
    public static OpenGisGeographyType CompoundCurve;
    public static OpenGisGeographyType CurvePolygon;
    public static OpenGisGeographyType FullGlobe;
}
public enum Microsoft.SqlServer.Types.OpenGisGeometryType : Enum {
    public byte value__;
    public static OpenGisGeometryType Point;
    public static OpenGisGeometryType LineString;
    public static OpenGisGeometryType Polygon;
    public static OpenGisGeometryType MultiPoint;
    public static OpenGisGeometryType MultiLineString;
    public static OpenGisGeometryType MultiPolygon;
    public static OpenGisGeometryType GeometryCollection;
    public static OpenGisGeometryType CircularString;
    public static OpenGisGeometryType CompoundCurve;
    public static OpenGisGeometryType CurvePolygon;
}
internal class Microsoft.SqlServer.Types.Point : ValueType {
    public double X;
    public double Y;
    public Point(double x, double y);
}
internal class Microsoft.SqlServer.Types.PointZM : ValueType {
    internal double X;
    internal double Y;
    internal double Z;
    internal double M;
}
internal class Microsoft.SqlServer.Types.Segment : ValueType {
}
internal class Microsoft.SqlServer.Types.Shape : ValueType {
    public int FigureOffset;
    public int ParentOffset;
    public OGCGeometryType type;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SqlServer.Types.ShapeData : ValueType {
    private bool _isValid;
    private bool _isLargerThanAHemisphere;
    [NullableAttribute("2")]
private Double[] _mValues;
    [NullableAttribute("2")]
private Double[] _zValues;
    [NullableAttribute("2")]
private Point[] _vertices;
    [NullableAttribute("2")]
private Segment[] _segments;
    [NullableAttribute("2")]
private Figure[] _figures;
    private Shape[] _shapes;
    public OGCGeometryType Type { get; }
    public bool IsNull { get; }
    public Shape[] Shapes { get; }
    private bool IsV2Data { get; }
    public double X { get; }
    public double Y { get; }
    public double Z { get; }
    public double M { get; }
    public int NumPoints { get; }
    public int NumRings { get; }
    public int NumSegments { get; }
    public int NumGeometries { get; }
    public int NumInteriorRing { get; }
    public PointZM StartPoint { get; }
    public PointZM EndPoint { get; }
    public bool HasZ { get; }
    public bool HasM { get; }
    public bool IsEmpty { get; }
    internal bool IsValid { get; }
    public ShapeData(double x, double y, Nullable`1<double> z, Nullable`1<double> m);
    [NullableContextAttribute("2")]
public ShapeData(Point[] points, Figure[] figures, Shape[] shapes);
    public ShapeData(Point[] points, Figure[] figures, Shape[] shapes, Double[] zValues, Double[] mValues, Segment[] mSegments);
    public OGCGeometryType get_Type();
    public bool get_IsNull();
    public Shape[] get_Shapes();
    public PointZM GetPointN(int index);
    private bool get_IsV2Data();
    public double get_X();
    public double get_Y();
    public double get_Z();
    public double get_M();
    public int get_NumPoints();
    public int get_NumRings();
    public int get_NumSegments();
    public int get_NumGeometries();
    private bool HasChildren(int shapeIndex);
    public int get_NumInteriorRing();
    public PointZM get_StartPoint();
    public PointZM get_EndPoint();
    public ShapeData GetRing(int index);
    public bool get_HasZ();
    public bool get_HasM();
    public bool get_IsEmpty();
    public ShapeData GetGeometryN(int index);
    private ShapeData AsRing(int figureIndex);
    private ShapeData ShapeToGeometry(int shapeIndex);
    private ShapeData AsLineString(int nFigure);
    private ValueTuple`3<Point[], Double[], Double[]> GetFigure(int shapeIndex, int figureIndex);
    public void SetIsValid(bool fValid);
    internal bool get_IsValid();
    public void Write(BinaryWriter bw);
    internal void Read(BinaryReader r, byte version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SqlServer.Types.ShapeDataBuilder : object {
    private List`1<Figure> _figures;
    private List`1<Shape> _shapes;
    private Stack`1<int> _parents;
    [NullableAttribute("2")]
private List`1<double> _zValues;
    [NullableAttribute("2")]
private List`1<double> _mValues;
    [NullableAttribute("2")]
private List`1<Segment> _segments;
    private List`1<Point> _vertices;
    private bool _ignoreZM;
    private FigureAttributes _nextFigureAttribute;
    private State _state;
    private Stack`1<Operation> operationStack;
    [CompilerGeneratedAttribute]
private string <GeoType>k__BackingField;
    private Operation CurrentOperation { get; }
    internal string GeoType { get; internal set; }
    public ShapeData ConstructedShapeData { get; }
    public ShapeDataBuilder(bool ignoreZM);
    private Operation get_CurrentOperation();
    [CompilerGeneratedAttribute]
internal string get_GeoType();
    [CompilerGeneratedAttribute]
internal void set_GeoType(string value);
    public ShapeData get_ConstructedShapeData();
    public void BeginGeo(OGCGeometryType type);
    public void EndGeo();
    public void BeginFigure();
    public void EndFigure();
    private void UpdateFigureOffsets(int iFigureIndex, int iShapeIndex);
    public void AddLine(double x, double y, Nullable`1<double> z, Nullable`1<double> m);
    public void AddPoint(double x, double y, Nullable`1<double> z, Nullable`1<double> m);
    [NullableContextAttribute("2")]
private void SetZMValue(List`1& list, Nullable`1<double> d);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SqlUserDefinedTypeAttribute]
public class Microsoft.SqlServer.Types.SqlGeography : object {
    private ShapeData _geometry;
    private int srid;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private static SqlGeography <Null>k__BackingField;
    private static String[] _validGeometryTypeNames;
    private static String[][] _parentGeometryTypeNames;
    public SqlDouble Long { get; }
    public SqlDouble Lat { get; }
    public SqlDouble Z { get; }
    public SqlDouble M { get; }
    public SqlInt32 STSrid { get; public set; }
    public bool HasZ { get; }
    public bool HasM { get; }
    public bool IsNull { get; }
    public static SqlGeography Null { get; }
    internal SqlGeography(bool isNull);
    internal SqlGeography(ShapeData g, int srid);
    private static SqlGeography();
    [SqlMethodAttribute]
public static SqlGeography Point(double latitude, double longitude, int srid);
    [SqlMethodAttribute]
public SqlDouble get_Long();
    [SqlMethodAttribute]
public SqlDouble get_Lat();
    [SqlMethodAttribute]
public SqlDouble get_Z();
    [SqlMethodAttribute]
public SqlDouble get_M();
    [SqlMethodAttribute]
public SqlInt32 get_STSrid();
    [SqlMethodAttribute]
public void set_STSrid(SqlInt32 value);
    [SqlMethodAttribute]
public bool get_HasZ();
    [SqlMethodAttribute]
public bool get_HasM();
    [CompilerGeneratedAttribute]
[SqlMethodAttribute]
public sealed virtual bool get_IsNull();
    [CompilerGeneratedAttribute]
[SqlMethodAttribute]
public static SqlGeography get_Null();
    [SqlMethodAttribute]
public SqlInt32 NumRings();
    [SqlMethodAttribute]
public SqlString STGeometryType();
    [SqlMethodAttribute]
public SqlInt32 STNumGeometries();
    [SqlMethodAttribute]
public SqlInt32 STNumPoints();
    [SqlMethodAttribute]
public SqlInt32 STNumCurves();
    [SqlMethodAttribute]
public SqlGeography STGeometryN(int n);
    [SqlMethodAttribute]
public SqlGeography STCurveN(int n);
    public SqlGeography STPointN(int n);
    [SqlMethodAttribute]
public SqlGeography STStartPoint();
    [SqlMethodAttribute]
public SqlGeography STEndPoint();
    [SqlMethodAttribute]
public SqlGeography RingN(int n);
    [SqlMethodAttribute]
public SqlBoolean STIsEmpty();
    [SqlMethodAttribute]
public SqlChars STAsText();
    [SqlMethodAttribute]
public SqlChars AsTextZM();
    [SqlMethodAttribute]
public SqlBoolean InstanceOf(string geometryType);
    [SqlMethodAttribute]
public static SqlGeography STGeomFromText(SqlChars geometryTaggedText, int srid);
    [SqlMethodAttribute]
public static SqlGeography Parse(SqlString s);
    public sealed virtual void Read(BinaryReader r);
    [SqlMethodAttribute]
public sealed virtual void Write(BinaryWriter w);
    public static SqlGeography Deserialize(SqlBytes bytes);
    public SqlBytes Serialize();
    public virtual string ToString();
    public void Populate(IGeographySink110 sink);
    private void Populate(ShapeData geography, IGeographySink110 sink);
    private void PopulateGeography(ShapeData geography, IGeographySink110 sink);
    private void PopulatePoint(ShapeData point, IGeographySink110 sink);
    private void PopulateRing(ShapeData ring, IGeographySink110 sink);
}
public class Microsoft.SqlServer.Types.SqlGeographyBuilder : object {
    [NullableAttribute("1")]
private ShapeDataBuilder _builder;
    private int _srid;
    [NullableAttribute("1")]
public SqlGeography ConstructedGeography { get; }
    [NullableContextAttribute("1")]
public virtual SqlGeography get_ConstructedGeography();
    public virtual void BeginGeography(OpenGisGeographyType type);
    public void BeginFigure(double latitude, double longitude);
    public virtual void BeginFigure(double latitude, double longitude, Nullable`1<double> z, Nullable`1<double> m);
    public void AddLine(double latitude, double longitude);
    public virtual void AddLine(double latitude, double longitude, Nullable`1<double> z, Nullable`1<double> m);
    private void ValidateLatLon(double lat, double lon);
    public virtual void EndFigure();
    public virtual void EndGeography();
    public virtual void SetSrid(int srid);
    public virtual void AddCircularArc(double latitude1, double longitude1, Nullable`1<double> z1, Nullable`1<double> m1, double latitude2, double longitude2, Nullable`1<double> z2, Nullable`1<double> m2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SqlUserDefinedTypeAttribute]
public class Microsoft.SqlServer.Types.SqlGeometry : object {
    private ShapeData _geometry;
    private int srid;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private static SqlGeometry <Null>k__BackingField;
    private static String[] _validGeometryTypeNames;
    private static String[][] _parentGeometryTypeNames;
    public SqlDouble STX { get; }
    public SqlDouble STY { get; }
    public SqlDouble Z { get; }
    public SqlDouble M { get; }
    public SqlInt32 STSrid { get; public set; }
    public bool HasZ { get; }
    public bool HasM { get; }
    public bool IsNull { get; }
    public static SqlGeometry Null { get; }
    internal SqlGeometry(bool isNull);
    internal SqlGeometry(ShapeData g, int srid);
    private static SqlGeometry();
    [SqlMethodAttribute]
public static SqlGeometry Point(double x, double y, int srid);
    [SqlMethodAttribute]
public SqlDouble get_STX();
    [SqlMethodAttribute]
public SqlDouble get_STY();
    [SqlMethodAttribute]
public SqlDouble get_Z();
    [SqlMethodAttribute]
public SqlDouble get_M();
    [SqlMethodAttribute]
public SqlInt32 get_STSrid();
    [SqlMethodAttribute]
public void set_STSrid(SqlInt32 value);
    [SqlMethodAttribute]
public bool get_HasZ();
    [SqlMethodAttribute]
public bool get_HasM();
    [CompilerGeneratedAttribute]
[SqlMethodAttribute]
public sealed virtual bool get_IsNull();
    [CompilerGeneratedAttribute]
[SqlMethodAttribute]
public static SqlGeometry get_Null();
    [SqlMethodAttribute]
public SqlString STGeometryType();
    [SqlMethodAttribute]
public SqlInt32 STNumGeometries();
    [SqlMethodAttribute]
public SqlInt32 STNumCurves();
    [SqlMethodAttribute]
public SqlInt32 STNumPoints();
    [SqlMethodAttribute]
public SqlInt32 STNumInteriorRing();
    [SqlMethodAttribute]
public SqlGeometry STGeometryN(int n);
    [SqlMethodAttribute]
public SqlGeometry STCurveN(int n);
    [SqlMethodAttribute]
public SqlGeometry STPointN(int n);
    [SqlMethodAttribute]
public SqlGeometry STInteriorRingN(int n);
    [SqlMethodAttribute]
public SqlGeometry STExteriorRing();
    [SqlMethodAttribute]
public SqlBoolean STIsEmpty();
    [SqlMethodAttribute]
public SqlChars STAsText();
    [SqlMethodAttribute]
public SqlBoolean InstanceOf(string geometryType);
    public static SqlGeometry Deserialize(SqlBytes bytes);
    public SqlBytes Serialize();
    [SqlMethodAttribute]
public static SqlGeometry STGeomFromText(SqlChars geometryTaggedText, int srid);
    [SqlMethodAttribute]
public static SqlGeometry Parse(SqlString s);
    public sealed virtual void Read(BinaryReader r);
    public sealed virtual void Write(BinaryWriter w);
    public virtual string ToString();
    public void Populate(IGeometrySink110 sink);
    private void Populate(ShapeData geometry, IGeometrySink110 sink);
    private void PopulateGeometry(ShapeData geometry, IGeometrySink110 sink);
    private void PopulatePoint(ShapeData point, IGeometrySink110 sink);
    private void PopulateRing(ShapeData ring, IGeometrySink110 sink);
}
public class Microsoft.SqlServer.Types.SqlGeometryBuilder : object {
    [NullableAttribute("1")]
private ShapeDataBuilder _builder;
    private int _srid;
    [NullableAttribute("1")]
public SqlGeometry ConstructedGeometry { get; }
    [NullableContextAttribute("1")]
public virtual SqlGeometry get_ConstructedGeometry();
    public virtual void BeginGeometry(OpenGisGeometryType type);
    public void BeginFigure(double x, double y);
    public virtual void BeginFigure(double x, double y, Nullable`1<double> z, Nullable`1<double> m);
    public void AddLine(double x, double y);
    public virtual void AddLine(double x, double y, Nullable`1<double> z, Nullable`1<double> m);
    public virtual void EndFigure();
    public virtual void EndGeometry();
    public virtual void SetSrid(int srid);
    public virtual void AddCircularArc(double x1, double y1, Nullable`1<double> z1, Nullable`1<double> m1, double x2, double y2, Nullable`1<double> z2, Nullable`1<double> m2);
    public void AddCircularArc(double x1, double y1, double x2, double y2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId : ValueType {
    private string _hierarchyId;
    private Int64[][] _nodes;
    private static Int64[][] __RootNodes;
    public static string PathSeparator;
    private static string InvalidHierarchyIdExceptionMessage;
    private static string GetReparentedValueOldRootExceptionMessage;
    private static string GetDescendantMostBeChildExceptionMessage;
    private static string GetDescendantChild1MustLessThanChild2ExceptionMessage;
    public bool IsNull { get; }
    internal HierarchyId(Int64[][] nodes);
    public HierarchyId(string hierarchyId);
    private static HierarchyId();
    internal Int64[][] GetNodes();
    public HierarchyId GetAncestor(int n);
    public HierarchyId GetDescendant(Nullable`1<HierarchyId> child1, Nullable`1<HierarchyId> child2);
    private static Int64[] GetBetween(Int64[] node1, Int64[] node2);
    public short GetLevel();
    public static HierarchyId GetRoot();
    public bool IsDescendantOf(HierarchyId parent);
    public HierarchyId GetReparentedValue(HierarchyId oldRoot, HierarchyId newRoot);
    public static HierarchyId Parse(string input);
    private static string LongArrayToString(IEnumerable`1<long> array);
    private static int CompareLongArrays(Int64[] array1, Int64[] array2);
    public static int Compare(HierarchyId hid1, HierarchyId hid2);
    public static bool op_LessThan(HierarchyId hid1, HierarchyId hid2);
    public static bool op_GreaterThan(HierarchyId hid1, HierarchyId hid2);
    public static bool op_LessThanOrEqual(HierarchyId hid1, HierarchyId hid2);
    public static bool op_GreaterThanOrEqual(HierarchyId hid1, HierarchyId hid2);
    public static bool op_Equality(HierarchyId hid1, HierarchyId hid2);
    public static bool op_Inequality(HierarchyId hid1, HierarchyId hid2);
    public bool Equals(HierarchyId other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public bool get_IsNull();
    public sealed virtual int CompareTo(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.SqlServer.Types.SqlHierarchy.KnownPatterns : object {
    private static BitPattern[] PositivePatterns;
    private static BitPattern[] NegativePatterns;
    private static KnownPatterns();
    internal static BitPattern RandomPattern(Random r);
    internal static BitPattern GetPatternByValue(long value);
    internal static BitPattern GetPatternByPrefix(BitReader bitR);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SqlUserDefinedTypeAttribute]
public class Microsoft.SqlServer.Types.SqlHierarchyId : ValueType {
    private HierarchyId _imp;
    private bool _isNotNull;
    [CompilerGeneratedAttribute]
private static SqlHierarchyId <Null>k__BackingField;
    public bool IsNull { get; }
    public static SqlHierarchyId Null { get; }
    private SqlHierarchyId(HierarchyId imp, bool isNull);
    private static SqlHierarchyId();
    public sealed virtual bool get_IsNull();
    [CompilerGeneratedAttribute]
[SqlMethodAttribute]
public static SqlHierarchyId get_Null();
    [SqlMethodAttribute]
public static SqlHierarchyId GetRoot();
    [SqlMethodAttribute]
public static SqlHierarchyId Parse(SqlString input);
    public sealed virtual int CompareTo(object obj);
    public int CompareTo(SqlHierarchyId hid);
    public virtual bool Equals(object obj);
    private bool Equals(SqlHierarchyId other);
    [SqlMethodAttribute]
public SqlHierarchyId GetAncestor(int n);
    [SqlMethodAttribute]
public SqlHierarchyId GetDescendant(SqlHierarchyId child1, SqlHierarchyId child2);
    public virtual int GetHashCode();
    [SqlMethodAttribute]
public SqlInt16 GetLevel();
    [SqlMethodAttribute]
public SqlHierarchyId GetReparentedValue(SqlHierarchyId oldRoot, SqlHierarchyId newRoot);
    [SqlMethodAttribute]
public SqlBoolean IsDescendantOf(SqlHierarchyId parent);
    [SqlMethodAttribute]
public virtual string ToString();
    [SqlMethodAttribute]
public sealed virtual void Write(BinaryWriter w);
    [SqlMethodAttribute]
public sealed virtual void Read(BinaryReader r);
    public static SqlBoolean op_Equality(SqlHierarchyId hid1, SqlHierarchyId hid2);
    public static SqlBoolean op_Inequality(SqlHierarchyId hid1, SqlHierarchyId hid2);
    public static SqlBoolean op_LessThan(SqlHierarchyId hid1, SqlHierarchyId hid2);
    public static SqlBoolean op_GreaterThan(SqlHierarchyId hid1, SqlHierarchyId hid2);
    public static SqlBoolean op_LessThanOrEqual(SqlHierarchyId hid1, SqlHierarchyId hid2);
    public static SqlBoolean op_GreaterThanOrEqual(SqlHierarchyId hid1, SqlHierarchyId hid2);
}
internal enum Microsoft.SqlServer.Types.Wkt.CoordinateOrder : Enum {
    public int value__;
    public static CoordinateOrder XY;
    public static CoordinateOrder LatLong;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Microsoft.SqlServer.Types.Wkt.WktReader : ValueType {
    private static byte WHITE_SPACE;
    private static byte COMMA;
    private static byte PARAN_START;
    private static byte PARAN_END;
    private static byte M_UPPER;
    private static byte M_LOWER;
    private static byte L_UPPER;
    private static byte L_LOWER;
    private int length;
    private int _index;
    private bool hasZ;
    private bool hasM;
    private List`1<Point> _vertices;
    private List`1<double> _z;
    private List`1<double> _m;
    private List`1<Figure> _figures;
    private List`1<Segment> _segments;
    private List`1<Shape> _shapes;
    private CoordinateOrder _order;
    [NullableAttribute("0")]
private ReadOnlySpan`1<byte> wkt;
    [NullableContextAttribute("0")]
private WktReader(ReadOnlySpan`1<byte> str, CoordinateOrder order);
    [NullableContextAttribute("0")]
public static ShapeData Parse(ReadOnlySpan`1<byte> str, CoordinateOrder order);
    private ShapeData ReadShape(int parentOffset);
    private void ReadPoint(int parentOffset);
    private void ReadMultiPoint(int parentOffset);
    private void ReadLineString(int parentOffset);
    private void ReadMultiLineString(int parentOffset);
    private void ReadPolygon(int parentOffset);
    private void ReadMultiPolygon(int parentOffset);
    private void ReadGeometryCollection(int parentOffset);
    private void ReadFullGlobe(int parentOffset);
    private void ReadCoordinateCollection();
    private void ReadCoordinate();
    private double ReadDouble();
    private bool ReadOptionalDouble(Double& d);
    private void SkipSpaces();
    [NullableContextAttribute("0")]
private ReadOnlySpan`1<byte> ReadNextToken();
    private void ReadToken(byte token);
    private bool ReadOptionalChar(byte token);
    private bool ReadOptionalEmptyToken();
    private bool ReadOptionalNull();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.SqlServer.Types.Wkt.WktWriter : object {
    public static string Write(ShapeData g, CoordinateOrder order);
    public static string Write(ShapeData g, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WriteGeometry(ShapeData geometry, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WritePoint(ShapeData point, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WriteMultiPoint(ShapeData points, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WriteLineString(ShapeData line, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WriteMultiLineString(ShapeData lines, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WritePolygon(ShapeData polygon, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static IEnumerable`1<PointZM> GetVertices(ShapeData g);
    private static void WritePolygonContents(ShapeData polygon, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WriteMultiPolygon(ShapeData polys, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WriteGeometryCollection(ShapeData geoms, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WriteCoordinateCollection(IEnumerable`1<PointZM> coords, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
    private static void WriteCoordinate(PointZM coord, StringBuilder sb, bool includeZ, bool includeM, CoordinateOrder order);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
