[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Diagnostics.Tools.CommandLineErrorException : Exception {
    public CommandLineErrorException(string errorMessage);
}
internal class Microsoft.Diagnostics.Tools.Counters.CounterMonitor : object {
    private static int BufferDelaySecs;
    private static string EventCountersProviderPrefix;
    private int _processId;
    private List`1<EventPipeCounterGroup> _counterList;
    private IConsole _console;
    private ICounterRenderer _renderer;
    private string _output;
    private bool _pauseCmdSet;
    private TaskCompletionSource`1<ReturnCode> _shouldExit;
    private DiagnosticsClient _diagnosticsClient;
    private MetricsPipelineSettings _settings;
    private Dictionary`2<string, ProviderEventState> _providerEventStates;
    private Queue`1<CounterPayload> _bufferedEvents;
    private void MeterInstrumentEventObserved(string meterName, DateTime timestamp);
    private void HandleDiagnosticCounter(ICounterPayload payload);
    private void CounterPayloadReceived(CounterPayload payload);
    private static string AppendQuantile(string tags, string quantile);
    private void HandleBufferedEvents();
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.Tools.Counters.CounterMonitor/<Monitor>d__20")]
public Task`1<ReturnCode> Monitor(CancellationToken ct, List`1<string> counter_list, string counters, IConsole console, int processId, int refreshInterval, string name, string diagnosticPort, bool resumeRuntime, int maxHistograms, int maxTimeSeries, TimeSpan duration, bool showDeltas);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.Tools.Counters.CounterMonitor/<Collect>d__21")]
public Task`1<ReturnCode> Collect(CancellationToken ct, List`1<string> counter_list, string counters, IConsole console, int processId, int refreshInterval, CountersExportFormat format, string output, string name, string diagnosticPort, bool resumeRuntime, int maxHistograms, int maxTimeSeries, TimeSpan duration);
    private static void ValidateNonNegative(int value, string argName);
    internal List`1<EventPipeCounterGroup> ConfigureCounters(string commaSeparatedProviderListText, List`1<string> providerList);
    internal static List`1<EventPipeCounterGroup> ParseProviderList(string providerListText);
    internal static void ParseProviderList(string providerListText, List`1<EventPipeCounterGroup> counters);
    private static void ParseCounterProvider(string providerText, List`1<EventPipeCounterGroup> counters);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.Tools.Counters.CounterMonitor/<Start>d__27")]
private Task`1<ReturnCode> Start(MetricsPipeline pipeline, CancellationToken token);
    private sealed virtual override void Microsoft.Diagnostics.Monitoring.EventPipe.ICountersLogger.Log(ICounterPayload payload);
    public sealed virtual Task PipelineStarted(CancellationToken token);
    public sealed virtual Task PipelineStopped(CancellationToken token);
    [CompilerGeneratedAttribute]
private void <Monitor>b__20_0();
    [CompilerGeneratedAttribute]
private void <Collect>b__21_0();
}
public class Microsoft.Diagnostics.Tools.Counters.CounterProfile : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedVersions>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public String[] SupportedVersions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedVersions();
    [CompilerGeneratedAttribute]
public void set_SupportedVersions(String[] value);
}
public class Microsoft.Diagnostics.Tools.Counters.CounterProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, CounterProfile> <Counters>k__BackingField;
    public string Name { get; }
    public string Description { get; }
    public string Keywords { get; }
    public string Level { get; }
    public Dictionary`2<string, CounterProfile> Counters { get; }
    public CounterProvider(string name, string description, string keywords, string level, IEnumerable`1<CounterProfile> counters, string version);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public string get_Keywords();
    [CompilerGeneratedAttribute]
public string get_Level();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, CounterProfile> get_Counters();
    public string ToProviderString(int interval);
    public IReadOnlyList`1<CounterProfile> GetAllCounters();
}
public enum Microsoft.Diagnostics.Tools.Counters.CountersExportFormat : Enum {
    public int value__;
    public static CountersExportFormat csv;
    public static CountersExportFormat json;
}
[ExtensionAttribute]
internal static class Microsoft.Diagnostics.Tools.Counters.DotnetCountersCounterPayloadExtensions : object {
    [ExtensionAttribute]
public static string GetDisplay(ICounterPayload counterPayload);
}
internal class Microsoft.Diagnostics.Tools.Counters.Exporters.ConsoleWriter : object {
    private object _lock;
    private Dictionary`2<string, ObservedProvider> _providers;
    private bool _showDeltaColumn;
    private static int Indent;
    private static int CounterValueLength;
    private static int MinimalColumnHeaderLength;
    private int _nameColumnWidth;
    private int _statusRow;
    private int _topRow;
    private bool _paused;
    private bool _initialized;
    private string _errorText;
    private int _maxRow;
    private int _consoleHeight;
    private int _consoleWidth;
    private IConsole _console;
    public ConsoleWriter(IConsole console, bool showDeltaColumn);
    public sealed virtual void Initialize();
    public sealed virtual void EventPipeSourceConnected();
    public sealed virtual void SetErrorText(string errorText);
    private void UpdateStatus();
    private string GetStatus();
    public void AssignRowsAndInitializeDisplay();
    private bool RenderTagSetsInColumnMode(Int32& row, ObservedCounter counter);
    private void AdjustColumnsLength(List`1<int> columnHeaderLen, List`1<int> maxValueColumnLen);
    public sealed virtual void ToggleStatus(bool pauseCmdSet);
    public sealed virtual void CounterPayloadReceived(CounterPayload payload, bool pauseCmdSet);
    public sealed virtual void CounterStopped(CounterPayload payload);
    private int GetLineWrappedLines(string text);
    private bool RenderCounterValueRow(Int32& row, int indentLevel, string name, double value, Nullable`1<double> delta);
    private bool RenderCounterNameRow(Int32& row, string name, int indentLevel);
    private bool RenderTableRow(Int32& row, string name, string value, string delta);
    private bool RenderRow(Int32& row, string text);
    private void IncrementalUpdateCounterValueRow(int row, double value, double delta);
    private static string FormatValue(double value);
    private static string MakeFixedWidth(string text, int width, bool alignRight, bool truncateLeft);
    public sealed virtual void Stop();
}
internal class Microsoft.Diagnostics.Tools.Counters.Exporters.CSVExporter : object {
    private object _lock;
    private string _output;
    private StringBuilder builder;
    private int flushLength;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public string Output { get; public set; }
    public CSVExporter(string output);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    public sealed virtual void Initialize();
    public sealed virtual void EventPipeSourceConnected();
    public sealed virtual void SetErrorText(string errorText);
    public sealed virtual void ToggleStatus(bool paused);
    public sealed virtual void CounterPayloadReceived(CounterPayload payload, bool _);
    public sealed virtual void CounterStopped(CounterPayload payload);
    public sealed virtual void Stop();
}
internal class Microsoft.Diagnostics.Tools.Counters.Exporters.DefaultConsole : object {
    private bool _useAnsi;
    public int WindowHeight { get; }
    public int WindowWidth { get; }
    public bool CursorVisible { get; public set; }
    public int CursorTop { get; }
    public int BufferWidth { get; }
    public DefaultConsole(bool useAnsi);
    public sealed virtual int get_WindowHeight();
    public sealed virtual int get_WindowWidth();
    public sealed virtual bool get_CursorVisible();
    public sealed virtual void set_CursorVisible(bool value);
    public sealed virtual int get_CursorTop();
    public sealed virtual int get_BufferWidth();
    public sealed virtual void Clear();
    public sealed virtual void SetCursorPosition(int col, int row);
    public sealed virtual void Write(string text);
    public sealed virtual void WriteLine(string text);
    public sealed virtual void WriteLine();
}
internal interface Microsoft.Diagnostics.Tools.Counters.Exporters.IConsole {
    public int WindowHeight { get; }
    public int WindowWidth { get; }
    public bool CursorVisible { get; public set; }
    public int CursorTop { get; }
    public int BufferWidth { get; }
    public abstract virtual int get_WindowHeight();
    public abstract virtual int get_WindowWidth();
    public abstract virtual bool get_CursorVisible();
    public abstract virtual void set_CursorVisible(bool value);
    public abstract virtual int get_CursorTop();
    public abstract virtual int get_BufferWidth();
    public abstract virtual void Clear();
    public abstract virtual void SetCursorPosition(int col, int row);
    public abstract virtual void Write(string text);
    public abstract virtual void WriteLine(string text);
    public abstract virtual void WriteLine();
}
internal interface Microsoft.Diagnostics.Tools.Counters.Exporters.ICounterRenderer {
    public abstract virtual void Initialize();
    public abstract virtual void EventPipeSourceConnected();
    public abstract virtual void ToggleStatus(bool paused);
    public abstract virtual void CounterPayloadReceived(CounterPayload payload, bool paused);
    public abstract virtual void CounterStopped(CounterPayload payload);
    public abstract virtual void SetErrorText(string errorText);
    public abstract virtual void Stop();
}
internal class Microsoft.Diagnostics.Tools.Counters.Exporters.JSONExporter : object {
    private object _lock;
    private string _output;
    private string _processName;
    private StringBuilder builder;
    private int flushLength;
    private static Char[] s_escapeChars;
    public JSONExporter(string output, string processName);
    private static JSONExporter();
    public sealed virtual void Initialize();
    public sealed virtual void EventPipeSourceConnected();
    public sealed virtual void SetErrorText(string errorText);
    public sealed virtual void ToggleStatus(bool paused);
    public sealed virtual void CounterPayloadReceived(CounterPayload payload, bool _);
    public sealed virtual void CounterStopped(CounterPayload payload);
    public sealed virtual void Stop();
    private static string JsonEscape(string input);
}
internal static class Microsoft.Diagnostics.Tools.Counters.Program : object {
    private static Command MonitorCommand();
    private static Command CollectCommand();
    private static Option NameOption();
    private static Option ProcessIdOption();
    private static Option RefreshIntervalOption();
    private static Option ExportFormatOption();
    private static Option ExportFileNameOption();
    private static Option CounterOption();
    private static Argument CounterList();
    private static Command ListCommand();
    private static Option RuntimeVersionOption();
    private static Option DiagnosticPortOption();
    private static Option ResumeRuntimeOption();
    private static Option MaxHistogramOption();
    private static Option MaxTimeSeriesOption();
    private static Option DurationOption();
    private static Option ShowDeltasOption();
    public static int List(IConsole console, string runtimeVersion);
    private static Task`1<int> Main(String[] args);
    private static int <Main>(String[] args);
}
internal static class Microsoft.Diagnostics.Tools.Trace.Extensions : object {
    public static string CLREventProviderName;
    private static EventLevel defaultEventLevel;
    private static long defaultKeywords;
    private static Dictionary`2<string, long> CLREventKeywords;
    private static Extensions();
    public static List`1<EventPipeProvider> ToProviders(string providersRawInput);
    public static EventPipeProvider ToCLREventPipeProvider(string clreventslist, string clreventlevel);
    private static EventLevel GetEventLevel(string token);
    private static EventPipeProvider ToProvider(string provider);
    private static Dictionary`2<string, string> ParseArgumentString(string argument);
    private static void AddKeyValueToArgumentDict(Dictionary`2<string, string> argumentDict, string argument, int keyStart, int keyEnd, int valStart, int valEnd);
}
[ExtensionAttribute]
public static class Microsoft.Internal.Common.CommandExtensions : object {
    [ExtensionAttribute]
public static void Add(Command command, ICommandHandler handler);
    [ExtensionAttribute]
public static CommandLineBuilder UseToolsDefaults(CommandLineBuilder builder);
}
public class Microsoft.Internal.Common.Commands.ProcessStatusCommandHandler : object {
    public static Command ProcessStatusCommand(string description);
    private static void MakeFixedWidth(string text, int width, StringBuilder sb, bool leftPad, bool truncateFront);
    public static void ProcessStatus(IConsole console);
    private static Process GetProcessById(int processId);
    private static string GetArgs(Process process);
    [CompilerGeneratedAttribute]
internal static int <ProcessStatus>g__GetColumnWidth|4_0(IEnumerable`1<int> fieldWidths);
    [CompilerGeneratedAttribute]
internal static void <ProcessStatus>g__FormatTableRows|4_1(List`1<ProcessDetails> rows, StringBuilder tableText);
}
internal static class Microsoft.Internal.Common.Utils.CommandUtils : object {
    public static int FindProcessIdWithName(string name);
    public static bool ValidateArgumentsForChildProcess(int processId, string name, string port);
    public static bool ValidateArgumentsForAttach(int processId, string name, string port, Int32& resolvedProcessId);
}
internal class Microsoft.Internal.Common.Utils.DiagnosticsClientBuilder : object {
    private string _toolName;
    private int _timeoutInSec;
    public DiagnosticsClientBuilder(string toolName, int timeoutInSec);
    private static string GetTransportName(string toolName);
    [AsyncStateMachineAttribute("Microsoft.Internal.Common.Utils.DiagnosticsClientBuilder/<Build>d__4")]
public Task`1<DiagnosticsClientHolder> Build(CancellationToken ct, int processId, string diagnosticPort, bool showChildIO, bool printLaunchCommand);
}
internal class Microsoft.Internal.Common.Utils.DiagnosticsClientHolder : object {
    public DiagnosticsClient Client;
    public IpcEndpointInfo EndpointInfo;
    private ReversedDiagnosticsServer _server;
    private string _port;
    public DiagnosticsClientHolder(DiagnosticsClient client);
    public DiagnosticsClientHolder(DiagnosticsClient client, IpcEndpointInfo endpointInfo, ReversedDiagnosticsServer server);
    public DiagnosticsClientHolder(DiagnosticsClient client, IpcEndpointInfo endpointInfo, string port, ReversedDiagnosticsServer server);
    [AsyncStateMachineAttribute("Microsoft.Internal.Common.Utils.DiagnosticsClientHolder/<Dispose>d__7")]
public sealed virtual void Dispose();
}
internal class Microsoft.Internal.Common.Utils.LineRewriter : object {
    [CompilerGeneratedAttribute]
private int <LineToClear>k__BackingField;
    private static Nullable`1<bool> _isSetCursorPositionSupported;
    public int LineToClear { get; public set; }
    public bool IsRewriteConsoleLineSupported { get; }
    [CompilerGeneratedAttribute]
public int get_LineToClear();
    [CompilerGeneratedAttribute]
public void set_LineToClear(int value);
    public void RewriteConsoleLine();
    private void SystemConsoleLineRewriter();
    public bool get_IsRewriteConsoleLineSupported();
    [CompilerGeneratedAttribute]
private bool <get_IsRewriteConsoleLineSupported>g__EnsureInitialized|9_0();
}
internal class Microsoft.Internal.Common.Utils.ProcessLauncher : object {
    private Process _childProc;
    private Task _stdOutTask;
    private Task _stdErrTask;
    internal static ProcessLauncher Launcher;
    private bool _processStarted;
    public bool HasChildProc { get; }
    public Process ChildProc { get; }
    private static ProcessLauncher();
    public void PrepareChildProcess(String[] args);
    private static int FindUnparsedTokenIndex(String[] args);
    [AsyncStateMachineAttribute("Microsoft.Internal.Common.Utils.ProcessLauncher/<ReadAndIgnoreAllStreamAsync>d__7")]
private static Task ReadAndIgnoreAllStreamAsync(StreamReader streamToIgnore, CancellationToken cancelToken);
    public bool get_HasChildProc();
    public Process get_ChildProc();
    public bool Start(string diagnosticTransportName, CancellationToken ct, bool showChildIO, bool printLaunchCommand);
    public void Cleanup();
}
internal static class Microsoft.Internal.Common.Utils.ProcessNativeMethods : object {
    public static int ProcessBasicInformation;
    public static int ProcessWow64Information;
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, Byte[] lpBuffer, IntPtr dwSize, IntPtr& lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, Byte[] lpBuffer, IntPtr dwSize, IntPtr lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, IntPtr& lpPtr, IntPtr dwSize, IntPtr& lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, UNICODE_STRING& lpBuffer, IntPtr dwSize, IntPtr lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, UNICODE_STRING_32& lpBuffer, IntPtr dwSize, IntPtr lpNumberOfBytesRead);
    public static bool OpenProcessToken(IntPtr hProcess, UInt32 dwDesiredAccess, IntPtr& processToken);
    public static bool IsWow64Process(IntPtr hProcess, Boolean& wow64Process);
    public static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, ProcessInformation& processInformation, int processInformationLength, Int32& returnLength);
    public static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, IntPtr& processInformation, int processInformationLength, Int32& returnLength);
}
internal enum Microsoft.Internal.Common.Utils.ReturnCode : Enum {
    public int value__;
    public static ReturnCode Ok;
    public static ReturnCode SessionCreationError;
    public static ReturnCode TracingError;
    public static ReturnCode ArgumentError;
    public static ReturnCode UnknownError;
}
internal static class Microsoft.Internal.Common.Utils.WindowsProcessExtension : object {
    public static string GetCommandLine(Process process);
    private static string GetCommandLineCore(IntPtr processHandle);
    private static bool ReadIntPtr(IntPtr hProcess, IntPtr ptr, IntPtr& readPtr);
    private static IntPtr GetPebNative(IntPtr hProcess);
    private static IntPtr GetPeb64(IntPtr hProcess);
    private static IntPtr GetPeb32(IntPtr hProcess);
    private static int GetProcessBitness(IntPtr hProcess);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
