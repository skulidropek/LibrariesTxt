[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Banner : object {
    private IConsoleUtils _consoleUtils;
    private String[] _banner;
    public Banner(IConsoleUtils consoleUtils, ConsoleToolInfo consoleToolInfo);
    public sealed virtual void PrintBanner();
    private static string GetBannerMessage(ConsoleToolInfo consoleToolInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.CommandConstants : object {
    public static string CollectCommand;
    public static string ConnectCommand;
    public static string MergeCommand;
    public static string ShutdownCommand;
    public static string SnapshotCommand;
    public static string InstrumentCommand;
    public static string UninstrumentCommand;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.CollectCommandBuilder : object {
    private ICollectCommandHandler _handler;
    private static bool SetDefaults;
    internal CollectCommandBuilder(ICollectCommandHandler handler);
    public sealed virtual Command Build();
    public int Invoke(InvocationContext context);
    public sealed virtual Task`1<int> InvokeAsync(InvocationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.CollectCommandHandler : object {
    private IEnvironment _environment;
    private IEnvironmentVariablesCalculator _environmentVariablesCalculator;
    private IProcessFactory _processFactory;
    private IConsoleDirectoryHelper _directoryHelper;
    private IFileHelper _fileHelper;
    private IConfigurationProvider _configurationProvider;
    private IStaticNativeInstrumenterFactory _staticNativeInstrumenterFactory;
    private IStaticNativeRuntimeProviderFactory _staticNativeRuntimeProviderFactory;
    private ILoggerClientFactory _loggerClientFactory;
    private ISourceRootTranslatorFactory _sourceRootTranslatorFactory;
    private IProfilersLocationProvider _profilersLocationProvider;
    internal ManualResetEvent ExitEvent;
    private ICommonDependencyBuilder _commonDependencyBuilder;
    public CollectCommandHandler(IEnvironment environment, IEnvironmentVariablesCalculator environmentVariablesCalculator, IProcessFactory processFactory, IConsoleDirectoryHelper directoryHelper, IConfigurationProvider configurationProvider, IFileHelper fileHelper, IStaticNativeInstrumenterFactory staticNativeInstrumenterFactory, IStaticNativeRuntimeProviderFactory staticNativeRuntimeProviderFactory, ICommonDependencyBuilder commonDependencyBuilder, ILoggerClientFactory loggerClientFactory, ISourceRootTranslatorFactory sourceRootTranslatorFactory, IProfilersLocationProvider profilersLocationProvider);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Console.Common.Commands.CollectCommandHandler/<InvokeAsync>d__14")]
public sealed virtual Task`1<int> InvokeAsync(CommandData commandData, FileInfo settings, CommonOptions commonOptions, bool isServerMode, bool backgroundServerMode);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Console.Common.Commands.CollectCommandHandler/<CollectAsync>d__15")]
private Task`1<int> CollectAsync(CommandData commandData, FileInfo settings, CommonOptions commonOptions, ILogger logger, bool isServerMode, bool backgroundServerMode, IConsoleUtils consoleUtils);
    private bool CreateSessionDirectory(ILogger logger, string sessionDirectory, IConsoleUtils consoleUtils);
    private DataCollectorConfiguration SetupDataCollectorConfiguration(FileInfo settings, CommonOptions commonOptions, ILogger& logger, string configurationFileName, IConsoleUtils consoleUtils);
    private void Console_CancelKeyPress(object _, ConsoleCancelEventArgs e);
    private static CommandData GetCommandData(CommonOptions commonOptions);
    internal static CommandData GetCommandData(string processName, String[] args, CommonOptions commonOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.CollectCommandLogger : LoggerBase {
    private ILogger _logger;
    [NullableAttribute("2")]
private IProcess _process;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ShutdownEvent;
    public CollectCommandLogger(string sessionName, string pipePath, string coverageFilePath, DataCollectorConfiguration dataCollectorConfiguration, ILogger logger, IEnvironment environment, IStaticNativeInstrumenter staticNativeInstrumenter, IStaticNativeRuntimeProvider staticNativeRuntimeProvider, IDirectoryHelper directoryHelper, IOutputPathGenerator outputPathGenerator, ISourceRootTranslator sourceRootTranslator, IProfilersLocationProvider profilersLocationProvider);
    [CompilerGeneratedAttribute]
public void add_ShutdownEvent(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ShutdownEvent(EventHandler`1<EventArgs> value);
    public void SetProcess(IProcess process);
    protected virtual void OnShutdown(UInt32 processId);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.CommandData : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Args>k__BackingField;
    public string FileName { get; public set; }
    public string Args { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeCoverage.Console.Common.Commands.CommandHelpers : object {
    [CompilerGeneratedAttribute]
private static Argument`1<string> <CommandArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static Argument`1<string> <CommandOptionalArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static Argument`1<String[]> <CommandLineArgsArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static Argument`1<String[]> <FilesArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static Argument`1<string> <SessionArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static Argument`1<FileInfo> <InputFileArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<string> <OutputOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<string> <OutputFormatOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<string> <OutputDefaultOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<string> <OutputFormatDefaultOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<string> <LogFileOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<string> <LogLevelOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<FileInfo> <SettingsOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<string> <SessionIdOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<bool> <RemoveInputFilesOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<bool> <RecursiveOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<bool> <ResetOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<bool> <ServerModeOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<bool> <BackgroundServerOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<bool> <BackgroundCommandOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<int> <TimeoutOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<IEnumerable`1<string>> <IncludeFilesOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<string> <TagIdOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<string> <TagNameOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<bool> <DisableConsoleOutputOption>k__BackingField;
    [CompilerGeneratedAttribute]
private static Option`1<bool> <NoLogoOption>k__BackingField;
    public static Argument`1<string> CommandArgument { get; }
    public static Argument`1<string> CommandOptionalArgument { get; }
    public static Argument`1<String[]> CommandLineArgsArgument { get; }
    public static Argument`1<String[]> FilesArgument { get; }
    public static Argument`1<string> SessionArgument { get; }
    public static Argument`1<FileInfo> InputFileArgument { get; }
    public static Option`1<string> OutputOption { get; }
    public static Option`1<string> OutputFormatOption { get; }
    public static Option`1<string> OutputDefaultOption { get; }
    public static Option`1<string> OutputFormatDefaultOption { get; }
    public static Option`1<string> LogFileOption { get; }
    public static Option`1<string> LogLevelOption { get; }
    public static Option`1<FileInfo> SettingsOption { get; }
    public static Option`1<string> SessionIdOption { get; }
    public static Option`1<bool> RemoveInputFilesOption { get; }
    public static Option`1<bool> RecursiveOption { get; }
    public static Option`1<bool> ResetOption { get; }
    public static Option`1<bool> ServerModeOption { get; }
    public static Option`1<bool> BackgroundServerOption { get; }
    public static Option`1<bool> BackgroundCommandOption { get; }
    public static Option`1<int> TimeoutOption { get; }
    public static Option`1<IEnumerable`1<string>> IncludeFilesOption { get; }
    public static Option`1<string> TagIdOption { get; }
    public static Option`1<string> TagNameOption { get; }
    public static Option`1<bool> DisableConsoleOutputOption { get; }
    public static Option`1<bool> NoLogoOption { get; }
    private static CommandHelpers();
    [CompilerGeneratedAttribute]
public static Argument`1<string> get_CommandArgument();
    [CompilerGeneratedAttribute]
public static Argument`1<string> get_CommandOptionalArgument();
    [CompilerGeneratedAttribute]
public static Argument`1<String[]> get_CommandLineArgsArgument();
    [CompilerGeneratedAttribute]
public static Argument`1<String[]> get_FilesArgument();
    [CompilerGeneratedAttribute]
public static Argument`1<string> get_SessionArgument();
    [CompilerGeneratedAttribute]
public static Argument`1<FileInfo> get_InputFileArgument();
    [CompilerGeneratedAttribute]
public static Option`1<string> get_OutputOption();
    [CompilerGeneratedAttribute]
public static Option`1<string> get_OutputFormatOption();
    [CompilerGeneratedAttribute]
public static Option`1<string> get_OutputDefaultOption();
    [CompilerGeneratedAttribute]
public static Option`1<string> get_OutputFormatDefaultOption();
    [CompilerGeneratedAttribute]
public static Option`1<string> get_LogFileOption();
    [CompilerGeneratedAttribute]
public static Option`1<string> get_LogLevelOption();
    [CompilerGeneratedAttribute]
public static Option`1<FileInfo> get_SettingsOption();
    [CompilerGeneratedAttribute]
public static Option`1<string> get_SessionIdOption();
    [CompilerGeneratedAttribute]
public static Option`1<bool> get_RemoveInputFilesOption();
    [CompilerGeneratedAttribute]
public static Option`1<bool> get_RecursiveOption();
    [CompilerGeneratedAttribute]
public static Option`1<bool> get_ResetOption();
    [CompilerGeneratedAttribute]
public static Option`1<bool> get_ServerModeOption();
    [CompilerGeneratedAttribute]
public static Option`1<bool> get_BackgroundServerOption();
    [CompilerGeneratedAttribute]
public static Option`1<bool> get_BackgroundCommandOption();
    [CompilerGeneratedAttribute]
public static Option`1<int> get_TimeoutOption();
    [CompilerGeneratedAttribute]
public static Option`1<IEnumerable`1<string>> get_IncludeFilesOption();
    [CompilerGeneratedAttribute]
public static Option`1<string> get_TagIdOption();
    [CompilerGeneratedAttribute]
public static Option`1<string> get_TagNameOption();
    [CompilerGeneratedAttribute]
public static Option`1<bool> get_DisableConsoleOutputOption();
    [CompilerGeneratedAttribute]
public static Option`1<bool> get_NoLogoOption();
    public static void AddCommonOptions(Command command, bool setDefaults);
    public static void AddLoggingOptions(Command command);
    public static CommonOptions GetCommonOptions(InvocationContext context, bool setDefaults);
    public static CommandData GetCommandLine(string command, String[] commandLineArgs);
    public static void WriteCoverageFileOnConsole(IConsoleUtils consoleUtils, IList`1<string> paths);
    public static IProcess CreateProcess(CommandData commandData, ILogger logger, string sessionName, string pipePath, DataCollectorConfiguration collectorConfiguration, IEnvironmentVariablesCalculator environmentVariablesCalculator, IProcessFactory processFactory, bool injectEnvironmentVariables);
    public static void CancelHandler(ConsoleCancelEventArgs e, ILogger logger, IProcess process, IConsoleUtils consoleUtils);
    [NullableContextAttribute("2")]
public static int GetTimeoutValue(CommonOptions commonOptions, DataCollectorConfiguration collectorConfiguration);
    [ExtensionAttribute]
public static T ValueForArgument(ParseResult parseResult, Argument`1<T> argument);
    [ExtensionAttribute]
public static T ValueForOption(ParseResult parseResult, Option`1<T> option);
    public static ILogger EnsureLoggerInitialized(ILogger logger, CommonOptions commonOptions, DataCollectorConfiguration config);
    public static void ConfigureLoggingOfUnhandledExceptions(ILogger logger);
    [NullableContextAttribute("2")]
public static void ThrowIfInvalidOutput(string outputPath);
    public static ValueTuple`2<ILogger, IConsoleUtils> InitializeLoggerConsoleBanner(ICommonDependencyBuilder commonDependencyBuilder, CommonOptions commonOptions);
    public static ValueTuple`2<IReportsReaderLoggerWithInput, IConsoleUtils> InitializeReportsReaderLoggerConsoleBanner(ICommonDependencyBuilder commonDependencyBuilder, CommonOptions commonOptions);
    private static void AddEnvironmentVariable(StringDictionary environmentVariables, string key, string value, ILogger logger);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.CommonOptions : ValueType {
    public string Output;
    public string OutputFormat;
    public string LogFile;
    public string LogLevel;
    public string SessionId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] IncludeFiles;
    public int Timeout;
    public bool ConsoleOutputEnabled;
    public bool PrintBanner;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.ConnectCommandBuilder : object {
    private IConnectCommandHandler _handler;
    private static bool SetDefaults;
    internal ConnectCommandBuilder(IConnectCommandHandler handler);
    public sealed virtual Command Build();
    public int Invoke(InvocationContext context);
    public sealed virtual Task`1<int> InvokeAsync(InvocationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.ConnectCommandHandler : object {
    private IEnvironment _environment;
    private IEnvironmentVariablesCalculator _environmentVariablesCalculator;
    private IProcessFactory _processFactory;
    private IConfigurationProvider _configurationProvider;
    private ICommonDependencyBuilder _commonDependencyBuilder;
    public ConnectCommandHandler(IEnvironment environment, IEnvironmentVariablesCalculator environmentVariablesCalculator, IProcessFactory processFactory, IConfigurationProvider configurationProvider, ICommonDependencyBuilder commonDependencyBuilder);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Console.Common.Commands.ConnectCommandHandler/<InvokeAsync>d__6")]
public sealed virtual Task`1<int> InvokeAsync(CommandData commandData, CommonOptions commonOptions, bool backgroundMode);
    private Task`1<int> ConnectAsync(CommandData commandData, DataCollectorConfiguration collectorConfiguration, string sessionId, string pipePath, CommonOptions commonOptions, ILogger logger, bool backgroundMode, IConsoleUtils consoleUtils);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.InstrumentCommandBuilder : object {
    private IInstrumentCommandHandler _handler;
    private Option`1<bool> _instrumentDependenciesOption;
    private static bool SetDefaults;
    internal InstrumentCommandBuilder(IInstrumentCommandHandler handler);
    public sealed virtual Command Build();
    public int Invoke(InvocationContext context);
    public sealed virtual Task`1<int> InvokeAsync(InvocationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.InstrumentCommandHandler : object {
    private IConfigurationProvider _configurationProvider;
    private IStaticNativeInstrumenterFactory _staticNativeInstrumenterFactory;
    private IStaticNativeRuntimeProviderFactory _staticNativeRuntimeProviderFactory;
    private ILibraryHelper _libraryHelper;
    private IStaticManagedInstrumenterFactory _staticManagedInstrumenterFactory;
    private IFileHelper _fileHelper;
    private IDirectoryHelper _directoryHelper;
    private ICommonDependencyBuilder _commonDependencyBuilder;
    private IStaticInstrumenterFilesFinderFactory _staticInstrumenterFilesFinderFactory;
    public InstrumentCommandHandler(IConfigurationProvider configurationProvider, IStaticNativeInstrumenterFactory staticNativeInstrumenterFactory, IStaticNativeRuntimeProviderFactory staticNativeRuntimeProviderFactory, ILibraryHelper libraryHelper, IStaticManagedInstrumenterFactory staticManagedInstrumenterFactory, IFileHelper fileHelper, IDirectoryHelper directoryHelper, ICommonDependencyBuilder commonDependencyBuilder, IStaticInstrumenterFilesFinderFactory staticInstrumenterFilesFinderFactory);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.CodeCoverage.Console.Common.Commands.InstrumentCommandHandler/<InvokeAsync>d__10")]
public sealed virtual Task`1<int> InvokeAsync(FileInfo inputFile, FileInfo settings, CommonOptions commonOptions, bool instrumentDependencies);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Console.Common.Commands.InstrumentCommandHandler/<InstrumentAsync>d__11")]
private Task`1<int> InstrumentAsync(FileInfo inputFile, FileInfo settings, CommonOptions commonOptions, ILogger logger, IConsoleUtils consoleUtils, bool instrumentDependencies);
    private int InstrumentNativeModule(FileInfo inputFile, LibraryInfo libraryInfo, CommonOptions commonOptions, ILogger logger, DataCollectorConfiguration collectorConfiguration, IConsoleUtils consoleUtils);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Console.Common.Commands.InstrumentCommandHandler/<InstrumentManagedModuleAsync>d__13")]
private Task`1<int> InstrumentManagedModuleAsync(FileInfo inputFile, CommonOptions commonOptions, ILogger logger, DataCollectorConfiguration collectorConfiguration, IConsoleUtils consoleUtils, bool instrumentDependencies);
    private void Log(string path, IModuleCoverageContainer container, ILogger logger, IConsoleUtils consoleUtils);
    private void LogSingle(string path, IModuleCoverageContainer container, ILogger logger, IConsoleUtils consoleUtils);
    private ValueTuple`2<string, string> CalculateOutputFileAndDirectory(FileInfo inputFile, CommonOptions commonOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.MergeCommandBuilder : object {
    private IMergeCommandHandler _handler;
    private static bool SetDefaults;
    internal MergeCommandBuilder(IMergeCommandHandler handler);
    public sealed virtual Command Build();
    public int Invoke(InvocationContext context);
    public sealed virtual Task`1<int> InvokeAsync(InvocationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.MergeCommandHandler : object {
    private IReportsReader _reportsReader;
    private IReportsMerger _reportsMerger;
    private IFileHelper _fileUtils;
    private IConsoleDirectoryHelper _directoryHelper;
    private ICommonDependencyBuilder _commonDependencyBuilder;
    public MergeCommandHandler(IReportsReader reportsReader, IReportsMerger reportsMerger, IFileHelper fileUtils, IConsoleDirectoryHelper directoryHelper, ICommonDependencyBuilder commonDependencyBuilder);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Console.Common.Commands.MergeCommandHandler/<InvokeAsync>d__6")]
public sealed virtual Task`1<int> InvokeAsync(String[] reports, bool removeInputFiles, bool recursive, CommonOptions commonOptions);
    private void AttachCancelHandler(CancellationTokenSource cts, ILogger logger, IConsoleUtils consoleUtils);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Console.Common.Commands.MergeCommandHandler/<MergeReportsAsync>d__8")]
private Task MergeReportsAsync(bool removeInputFiles, string outputFileName, CoverageReportType outputFormat, bool recursive, String[] reports, IReportsReaderLoggerWithInput logger, IConsoleUtils consoleUtils, CancellationToken token);
    internal static void RemoveInputFiles(bool removeInputFiles, IReadOnlyCollection`1<string> filesToMerge, String[] mergedFiles, IFileHelper fileUtils, IReportsReaderLogger logger, CancellationToken token);
    internal String[] GetFiles(String[] paths, bool recursive);
    internal String[] GetFiles(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.RootCommandBuilder : object {
    private ICommandBuilder[] _commandBuilders;
    private string _commandName;
    internal RootCommandBuilder(string commandName, ICommandBuilder[] commandBuilders);
    public sealed virtual Command Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.ShutdownCommandBuilder : object {
    private IShutdownCommandHandler _handler;
    public ShutdownCommandBuilder(IShutdownCommandHandler handler);
    public sealed virtual Command Build();
    public int Invoke(InvocationContext context);
    public sealed virtual Task`1<int> InvokeAsync(InvocationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.ShutdownCommandHandler : object {
    private ILoggerClientFactory _loggerClientFactory;
    private ICommonDependencyBuilder _commonDependencyBuilder;
    public ShutdownCommandHandler(ILoggerClientFactory loggerClientFactory, ICommonDependencyBuilder commonDependencyBuilder);
    public sealed virtual Task`1<int> InvokeAsync(CommonOptions commonOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.SnapshotCommandBuilder : object {
    private ISnapshotCommandHandler _handler;
    public SnapshotCommandBuilder(ISnapshotCommandHandler handler);
    public sealed virtual Command Build();
    public int Invoke(InvocationContext context);
    public sealed virtual Task`1<int> InvokeAsync(InvocationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.SnapshotCommandHandler : object {
    private IOutputPathGenerator _outputPathGenerator;
    private ICommonDependencyBuilder _commonDependencyBuilder;
    private ILoggerClientFactory _loggerClientFactory;
    public SnapshotCommandHandler(IOutputPathGenerator outputPathGenerator, ICommonDependencyBuilder commonDependencyBuilder, ILoggerClientFactory loggerClientFactory);
    public sealed virtual Task`1<int> InvokeAsync(CommonOptions commonOptions, bool reset, string tagId, string tagName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.UninstrumentCommandBuilder : object {
    private IUninstrumentCommandHandler _handler;
    private static bool SetDefaults;
    internal UninstrumentCommandBuilder(IUninstrumentCommandHandler handler);
    public sealed virtual Command Build();
    public int Invoke(InvocationContext context);
    public sealed virtual Task`1<int> InvokeAsync(InvocationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.Commands.UninstrumentCommandHandler : object {
    private ILibraryHelper _libraryHelper;
    private IStaticRestorerFactory _staticRestorerFactory;
    private ICommonDependencyBuilder _commonDependencyBuilder;
    private IConfigurationProvider _configurationProvider;
    private IFileHelper _fileHelper;
    public UninstrumentCommandHandler(ILibraryHelper libraryHelper, IStaticRestorerFactory staticRestorerFactory, ICommonDependencyBuilder commonDependencyBuilder, IConfigurationProvider configurationProvider, IFileHelper fileHelper);
    public sealed virtual Task`1<int> InvokeAsync(FileInfo inputFile, FileInfo settings, CommonOptions commonOptions);
    private int Uninstrument(FileInfo inputFile, FileInfo settings, CommonOptions commonOptions, ILogger logger, IConsoleUtils consoleUtils);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.CommonDependencyBuilder : object {
    private ConsoleToolInfo _consoleToolInfo;
    public CommonDependencyBuilder(string toolName);
    public sealed virtual ILogger BuildLogger(CommonOptions commonOptions);
    public sealed virtual IReportsReaderLoggerWithInput BuildReportsReaderLogger(IConsoleUtils consoleUtils, ILogger logger);
    public sealed virtual IConsoleUtils BuildConsoleUtils(CommonOptions commonOptions);
    public sealed virtual IBanner BuildBanner(IConsoleUtils consoleUtils);
}
internal class Microsoft.CodeCoverage.Console.Common.ConfigurationProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual DataCollectorConfiguration GetDataCollectorConfiguration(FileInfo fileInfo, ILogger logger, CommonOptions commonOptions, IConsoleUtils consoleUtils);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.ConsoleDirectoryHelper : DirectoryHelper {
    public sealed virtual IEnumerable`1<string> GetFiles(string baseDirectory, String[] patterns);
    private static void GetFiles(List`1<string> files, string pattern);
    internal static string RemoveDoubleDotInPath(string path);
    private static string ToAltDirectorySeparatorChar(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.ConsoleReportsReaderLogger : object {
    private IConsoleUtils _consoleUtils;
    [NullableAttribute("2")]
private ILogger _logger;
    private ConcurrentList`1<string> _validFiles;
    public IReadOnlyCollection`1<string> ValidFiles { get; }
    public ConsoleReportsReaderLogger(IConsoleUtils consoleUtils, ILogger logger);
    public sealed virtual IReadOnlyCollection`1<string> get_ValidFiles();
    public sealed virtual void LogError(string message);
    public sealed virtual void LogError(Exception exceptionToTrace);
    public sealed virtual void LogInfo(string message);
    public sealed virtual void LogVerbose(string message);
    public sealed virtual void LogWarning(string message);
    public sealed virtual void LogInvalidReport(string path, Exception exception);
    public sealed virtual void LogValidReport(string path);
    public sealed virtual void LogDeleteReport(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.CodeCoverage.Console.Common.ConsoleToolInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; }
    public string Version { get; }
    public ConsoleToolInfo(string name, string version);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.ConsoleUtils : object {
    public sealed virtual void Register(ConsoleCancelEventHandler handler);
    public sealed virtual void WriteLine(string value);
    public sealed virtual void WriteLine(string value, ConsoleColor color);
    public sealed virtual void ErrorWriteLine(string value);
    public sealed virtual void WriteWarningLine(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.EmptyConsoleUtils : object {
    public sealed virtual void ErrorWriteLine(string value);
    public sealed virtual void Register(ConsoleCancelEventHandler handler);
    public sealed virtual void WriteWarningLine(string value);
    public sealed virtual void WriteLine(string value);
    public sealed virtual void WriteLine(string value, ConsoleColor color);
}
internal enum Microsoft.CodeCoverage.Console.Common.ErrorCodes : Enum {
    public int value__;
    public static ErrorCodes Success;
    public static ErrorCodes Error;
    public static ErrorCodes Canceled;
}
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IBanner {
    public abstract virtual void PrintBanner();
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.ICollectCommandHandler {
    public abstract virtual Task`1<int> InvokeAsync(CommandData commandData, FileInfo settings, CommonOptions commonOptions, bool isServerMode, bool backgroundServerMode);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.ICommandBuilder {
    public abstract virtual Command Build();
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.ICommonDependencyBuilder {
    public abstract virtual ILogger BuildLogger(CommonOptions commonOptions);
    public abstract virtual IReportsReaderLoggerWithInput BuildReportsReaderLogger(IConsoleUtils consoleUtils, ILogger logger);
    public abstract virtual IConsoleUtils BuildConsoleUtils(CommonOptions commonOptions);
    public abstract virtual IBanner BuildBanner(IConsoleUtils consoleUtils);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IConfigurationProvider {
    public abstract virtual DataCollectorConfiguration GetDataCollectorConfiguration(FileInfo fileInfo, ILogger logger, CommonOptions commonOptions, IConsoleUtils consoleUtils);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IConnectCommandHandler {
    public abstract virtual Task`1<int> InvokeAsync(CommandData commandData, CommonOptions commonOptions, bool backgroundMode);
}
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IConsoleDirectoryHelper {
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<string> GetFiles(string baseDirectory, String[] patterns);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IConsoleUtils {
    public abstract virtual void Register(ConsoleCancelEventHandler handler);
    public abstract virtual void WriteLine(string value);
    public abstract virtual void WriteLine(string value, ConsoleColor color);
    public abstract virtual void WriteWarningLine(string value);
    public abstract virtual void ErrorWriteLine(string value);
}
[NullableContextAttribute("2")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IInstrumentCommandHandler {
    public abstract virtual Task`1<int> InvokeAsync(FileInfo inputFile, FileInfo settings, CommonOptions commonOptions, bool instrumentDependencies);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IMergeCommandHandler {
    public abstract virtual Task`1<int> InvokeAsync(String[] reports, bool removeInputFiles, bool recursive, CommonOptions commonOptions);
}
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IProcess {
    public bool HasExited { get; }
    public int Id { get; }
    public int ExitCode { get; }
    public abstract virtual bool get_HasExited();
    public abstract virtual int get_Id();
    public abstract virtual void WaitForExit();
    public abstract virtual bool WaitForExit(int milliseconds);
    public abstract virtual void Kill();
    public abstract virtual int get_ExitCode();
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IProcessFactory {
    public abstract virtual IProcess Create(ProcessStartInfo processStartInfo, ILogger logger, DataCollectorConfiguration configuration);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IShutdownCommandHandler {
    public abstract virtual Task`1<int> InvokeAsync(CommonOptions commonOptions);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.ISnapshotCommandHandler {
    public abstract virtual Task`1<int> InvokeAsync(CommonOptions commonOptions, bool reset, string tagId, string tagName);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Console.Common.Interfaces.IUninstrumentCommandHandler {
    public abstract virtual Task`1<int> InvokeAsync(FileInfo inputFile, FileInfo settings, CommonOptions commonOptions);
}
internal interface Microsoft.CodeCoverage.Console.Common.IReportsReaderLoggerWithInput {
    [NullableAttribute("1")]
public IReadOnlyCollection`1<string> ValidFiles { get; }
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyCollection`1<string> get_ValidFiles();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.LoggerClientConfigurationProvider : object {
    [NullableAttribute("1")]
private ILoggerClientFactory _loggerClientFactory;
    [CompilerGeneratedAttribute]
private string <PipePath>k__BackingField;
    public string PipePath { get; private set; }
    [NullableContextAttribute("1")]
public LoggerClientConfigurationProvider(ILoggerClientFactory loggerClientFactory);
    [CompilerGeneratedAttribute]
public string get_PipePath();
    [CompilerGeneratedAttribute]
private void set_PipePath(string value);
    [NullableContextAttribute("1")]
public sealed virtual DataCollectorConfiguration GetDataCollectorConfiguration(FileInfo fileInfo, ILogger logger, CommonOptions commonOptions, IConsoleUtils consoleUtils);
}
internal class Microsoft.CodeCoverage.Console.Common.Process : object {
    [NullableAttribute("1")]
private Process _process;
    public bool HasExited { get; }
    public int Id { get; }
    public int ExitCode { get; }
    [NullableContextAttribute("2")]
public Process(Process process);
    public sealed virtual bool get_HasExited();
    public sealed virtual int get_Id();
    public sealed virtual void WaitForExit();
    public sealed virtual bool WaitForExit(int milliseconds);
    public sealed virtual int get_ExitCode();
    public sealed virtual void Kill();
    public sealed virtual void Dispose();
}
internal class Microsoft.CodeCoverage.Console.Common.ProcessFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual IProcess Create(ProcessStartInfo processStartInfo, ILogger logger, DataCollectorConfiguration configuration);
}
internal static class Microsoft.CodeCoverage.Console.Common.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string BackgroundCommandOptionDescription { get; }
    internal static string BackgroundServerOptionDescription { get; }
    internal static string CancelingMessage { get; }
    internal static string CodeCoverageResultsMessage { get; }
    internal static string CollectCommandDescription { get; }
    internal static string CommandArgumentDescription { get; }
    internal static string CommandLineArgsArgumentDescription { get; }
    internal static string ConnectCommandDescription { get; }
    internal static string DisableConsoleOutputOptionDescription { get; }
    internal static string IncludeFilesOptionDescription { get; }
    internal static string IncludingFileMessage { get; }
    internal static string InputCoverageReportsArgumentDescription { get; }
    internal static string InputFileArgumentDescription { get; }
    internal static string InputFileDoesNotExist { get; }
    internal static string InstrumentationFailure { get; }
    internal static string InstrumentationManagedDisabledInConfiguration { get; }
    internal static string InstrumentationNativeDisabledInConfiguration { get; }
    internal static string InstrumentationNotSupported { get; }
    internal static string InstrumentationResult_0 { get; }
    internal static string InstrumentationResult_1 { get; }
    internal static string InstrumentationResult_10 { get; }
    internal static string InstrumentationResult_11 { get; }
    internal static string InstrumentationResult_12 { get; }
    internal static string InstrumentationResult_13 { get; }
    internal static string InstrumentationResult_14 { get; }
    internal static string InstrumentationResult_2 { get; }
    internal static string InstrumentationResult_3 { get; }
    internal static string InstrumentationResult_4 { get; }
    internal static string InstrumentationResult_5 { get; }
    internal static string InstrumentationResult_6 { get; }
    internal static string InstrumentationResult_7 { get; }
    internal static string InstrumentationResult_8 { get; }
    internal static string InstrumentationResult_9 { get; }
    internal static string InstrumentationSkipped { get; }
    internal static string InstrumentCommandDescription { get; }
    internal static string Instrumented { get; }
    internal static string InvalidOutputError { get; }
    internal static string InvalidSessionIdError { get; }
    internal static string LogFileOptionDescription { get; }
    internal static string LogLevelOptionDescription { get; }
    internal static string MergeCommandDescription { get; }
    internal static string MergedIntoMessage { get; }
    internal static string NoAttachmentsFoundText { get; }
    internal static string NotSupportedOutputFormatError { get; }
    internal static string NoValidInputFilesFoundError { get; }
    internal static string OutputFileOptionDescription { get; }
    internal static string OutputFormatOptionDescription { get; }
    internal static string ProcessStarted { get; }
    internal static string ProfilerNotConnected { get; }
    internal static string ProfilerNotConnectedGlibc { get; }
    internal static string ProfilerNotConnectedNonGlibc { get; }
    internal static string ProjectDescription { get; }
    internal static string RecursiveObsoleteWarning { get; }
    internal static string RecursiveOptionDescription { get; }
    internal static string RemoveInputFilesOptionDescription { get; }
    internal static string RemovingFileMessage { get; }
    internal static string ResetOptionDescription { get; }
    internal static string ServerModeOptionDescription { get; }
    internal static string ServerOrCommandModeError { get; }
    internal static string ServerStartError { get; }
    internal static string SessionAlreadyFoundOnDisk { get; }
    internal static string SessionArgumentDescription { get; }
    internal static string SessionIdOptionDescription { get; }
    internal static string SessionNotFoundError { get; }
    internal static string SettingsOptionDescription { get; }
    internal static string ShutdownCommandDesciption { get; }
    internal static string Skipped { get; }
    internal static string SkippingInvalidFileMessage { get; }
    internal static string SnapshotCommandDescription { get; }
    internal static string SnapshotNameIdMissingError { get; }
    internal static string SnapshotTagIdOptionDescription { get; }
    internal static string SnapshotTagNameOptionDescription { get; }
    internal static string TimeoutOptionDescription { get; }
    internal static string UninstrumentCommandDescription { get; }
    internal static string NoLogoDescription { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_BackgroundCommandOptionDescription();
    internal static string get_BackgroundServerOptionDescription();
    internal static string get_CancelingMessage();
    internal static string get_CodeCoverageResultsMessage();
    internal static string get_CollectCommandDescription();
    internal static string get_CommandArgumentDescription();
    internal static string get_CommandLineArgsArgumentDescription();
    internal static string get_ConnectCommandDescription();
    internal static string get_DisableConsoleOutputOptionDescription();
    internal static string get_IncludeFilesOptionDescription();
    internal static string get_IncludingFileMessage();
    internal static string get_InputCoverageReportsArgumentDescription();
    internal static string get_InputFileArgumentDescription();
    internal static string get_InputFileDoesNotExist();
    internal static string get_InstrumentationFailure();
    internal static string get_InstrumentationManagedDisabledInConfiguration();
    internal static string get_InstrumentationNativeDisabledInConfiguration();
    internal static string get_InstrumentationNotSupported();
    internal static string get_InstrumentationResult_0();
    internal static string get_InstrumentationResult_1();
    internal static string get_InstrumentationResult_10();
    internal static string get_InstrumentationResult_11();
    internal static string get_InstrumentationResult_12();
    internal static string get_InstrumentationResult_13();
    internal static string get_InstrumentationResult_14();
    internal static string get_InstrumentationResult_2();
    internal static string get_InstrumentationResult_3();
    internal static string get_InstrumentationResult_4();
    internal static string get_InstrumentationResult_5();
    internal static string get_InstrumentationResult_6();
    internal static string get_InstrumentationResult_7();
    internal static string get_InstrumentationResult_8();
    internal static string get_InstrumentationResult_9();
    internal static string get_InstrumentationSkipped();
    internal static string get_InstrumentCommandDescription();
    internal static string get_Instrumented();
    internal static string get_InvalidOutputError();
    internal static string get_InvalidSessionIdError();
    internal static string get_LogFileOptionDescription();
    internal static string get_LogLevelOptionDescription();
    internal static string get_MergeCommandDescription();
    internal static string get_MergedIntoMessage();
    internal static string get_NoAttachmentsFoundText();
    internal static string get_NotSupportedOutputFormatError();
    internal static string get_NoValidInputFilesFoundError();
    internal static string get_OutputFileOptionDescription();
    internal static string get_OutputFormatOptionDescription();
    internal static string get_ProcessStarted();
    internal static string get_ProfilerNotConnected();
    internal static string get_ProfilerNotConnectedGlibc();
    internal static string get_ProfilerNotConnectedNonGlibc();
    internal static string get_ProjectDescription();
    internal static string get_RecursiveObsoleteWarning();
    internal static string get_RecursiveOptionDescription();
    internal static string get_RemoveInputFilesOptionDescription();
    internal static string get_RemovingFileMessage();
    internal static string get_ResetOptionDescription();
    internal static string get_ServerModeOptionDescription();
    internal static string get_ServerOrCommandModeError();
    internal static string get_ServerStartError();
    internal static string get_SessionAlreadyFoundOnDisk();
    internal static string get_SessionArgumentDescription();
    internal static string get_SessionIdOptionDescription();
    internal static string get_SessionNotFoundError();
    internal static string get_SettingsOptionDescription();
    internal static string get_ShutdownCommandDesciption();
    internal static string get_Skipped();
    internal static string get_SkippingInvalidFileMessage();
    internal static string get_SnapshotCommandDescription();
    internal static string get_SnapshotNameIdMissingError();
    internal static string get_SnapshotTagIdOptionDescription();
    internal static string get_SnapshotTagNameOptionDescription();
    internal static string get_TimeoutOptionDescription();
    internal static string get_UninstrumentCommandDescription();
    internal static string get_NoLogoDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.Common.SerilogLogger : object {
    public sealed virtual void LogError(string message);
    public sealed virtual void LogError(Exception exceptionToTrace);
    public sealed virtual void LogInfo(string message);
    public sealed virtual void LogVerbose(string message);
    public sealed virtual void LogWarning(string message);
    internal static ILogger CreateLogger(CommonOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Console.DotnetCoverageConfigurationProvider : object {
    private IConfigurationProvider _innerConfigurationProvider;
    public DotnetCoverageConfigurationProvider(IConfigurationProvider innerConfigurationProvider);
    public sealed virtual DataCollectorConfiguration GetDataCollectorConfiguration(FileInfo fileInfo, ILogger logger, CommonOptions commonOptions, IConsoleUtils consoleUtils);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
