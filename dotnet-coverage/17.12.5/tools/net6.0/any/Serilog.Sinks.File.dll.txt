[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Serilog.FileLoggerConfigurationExtensions : object {
    private static int DefaultRetainedFileCountLimit;
    private static long DefaultFileSizeLimitBytes;
    private static string DefaultOutputTemplate;
    [ExtensionAttribute]
[ObsoleteAttribute("New code should not be compiled against this obsolete overload")]
[EditorBrowsableAttribute("1")]
public static LoggerConfiguration File(LoggerSinkConfiguration sinkConfiguration, string path, LogEventLevel restrictedToMinimumLevel, string outputTemplate, IFormatProvider formatProvider, Nullable`1<long> fileSizeLimitBytes, LoggingLevelSwitch levelSwitch, bool buffered, bool shared, Nullable`1<TimeSpan> flushToDiskInterval);
    [ExtensionAttribute]
[ObsoleteAttribute("New code should not be compiled against this obsolete overload")]
[EditorBrowsableAttribute("1")]
public static LoggerConfiguration File(LoggerSinkConfiguration sinkConfiguration, ITextFormatter formatter, string path, LogEventLevel restrictedToMinimumLevel, Nullable`1<long> fileSizeLimitBytes, LoggingLevelSwitch levelSwitch, bool buffered, bool shared, Nullable`1<TimeSpan> flushToDiskInterval);
    [ExtensionAttribute]
[ObsoleteAttribute("New code should not be compiled against this obsolete overload")]
[EditorBrowsableAttribute("1")]
public static LoggerConfiguration File(LoggerSinkConfiguration sinkConfiguration, string path, LogEventLevel restrictedToMinimumLevel, string outputTemplate, IFormatProvider formatProvider, Nullable`1<long> fileSizeLimitBytes, LoggingLevelSwitch levelSwitch, bool buffered, bool shared, Nullable`1<TimeSpan> flushToDiskInterval, RollingInterval rollingInterval, bool rollOnFileSizeLimit, Nullable`1<int> retainedFileCountLimit, Encoding encoding);
    [ExtensionAttribute]
[ObsoleteAttribute("New code should not be compiled against this obsolete overload")]
[EditorBrowsableAttribute("1")]
public static LoggerConfiguration File(LoggerSinkConfiguration sinkConfiguration, ITextFormatter formatter, string path, LogEventLevel restrictedToMinimumLevel, Nullable`1<long> fileSizeLimitBytes, LoggingLevelSwitch levelSwitch, bool buffered, bool shared, Nullable`1<TimeSpan> flushToDiskInterval, RollingInterval rollingInterval, bool rollOnFileSizeLimit, Nullable`1<int> retainedFileCountLimit, Encoding encoding);
    [ExtensionAttribute]
public static LoggerConfiguration File(LoggerSinkConfiguration sinkConfiguration, string path, LogEventLevel restrictedToMinimumLevel, string outputTemplate, IFormatProvider formatProvider, Nullable`1<long> fileSizeLimitBytes, LoggingLevelSwitch levelSwitch, bool buffered, bool shared, Nullable`1<TimeSpan> flushToDiskInterval, RollingInterval rollingInterval, bool rollOnFileSizeLimit, Nullable`1<int> retainedFileCountLimit, Encoding encoding, FileLifecycleHooks hooks, Nullable`1<TimeSpan> retainedFileTimeLimit);
    [ExtensionAttribute]
public static LoggerConfiguration File(LoggerSinkConfiguration sinkConfiguration, ITextFormatter formatter, string path, LogEventLevel restrictedToMinimumLevel, Nullable`1<long> fileSizeLimitBytes, LoggingLevelSwitch levelSwitch, bool buffered, bool shared, Nullable`1<TimeSpan> flushToDiskInterval, RollingInterval rollingInterval, bool rollOnFileSizeLimit, Nullable`1<int> retainedFileCountLimit, Encoding encoding, FileLifecycleHooks hooks, Nullable`1<TimeSpan> retainedFileTimeLimit);
    [ExtensionAttribute]
[ObsoleteAttribute("New code should not be compiled against this obsolete overload")]
[EditorBrowsableAttribute("1")]
public static LoggerConfiguration File(LoggerAuditSinkConfiguration sinkConfiguration, string path, LogEventLevel restrictedToMinimumLevel, string outputTemplate, IFormatProvider formatProvider, LoggingLevelSwitch levelSwitch);
    [ExtensionAttribute]
[ObsoleteAttribute("New code should not be compiled against this obsolete overload")]
[EditorBrowsableAttribute("1")]
public static LoggerConfiguration File(LoggerAuditSinkConfiguration sinkConfiguration, ITextFormatter formatter, string path, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    [ExtensionAttribute]
public static LoggerConfiguration File(LoggerAuditSinkConfiguration sinkConfiguration, string path, LogEventLevel restrictedToMinimumLevel, string outputTemplate, IFormatProvider formatProvider, LoggingLevelSwitch levelSwitch, Encoding encoding, FileLifecycleHooks hooks);
    [ExtensionAttribute]
public static LoggerConfiguration File(LoggerAuditSinkConfiguration sinkConfiguration, ITextFormatter formatter, string path, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch, Encoding encoding, FileLifecycleHooks hooks);
    [ExtensionAttribute]
private static LoggerConfiguration ConfigureFile(Func`4<ILogEventSink, LogEventLevel, LoggingLevelSwitch, LoggerConfiguration> addSink, ITextFormatter formatter, string path, LogEventLevel restrictedToMinimumLevel, Nullable`1<long> fileSizeLimitBytes, LoggingLevelSwitch levelSwitch, bool buffered, bool propagateExceptions, bool shared, Nullable`1<TimeSpan> flushToDiskInterval, Encoding encoding, RollingInterval rollingInterval, bool rollOnFileSizeLimit, Nullable`1<int> retainedFileCountLimit, FileLifecycleHooks hooks, Nullable`1<TimeSpan> retainedFileTimeLimit);
}
public enum Serilog.RollingInterval : Enum {
    public int value__;
    public static RollingInterval Infinite;
    public static RollingInterval Year;
    public static RollingInterval Month;
    public static RollingInterval Day;
    public static RollingInterval Hour;
    public static RollingInterval Minute;
}
internal static class Serilog.Sinks.File.Clock : object {
    [NullableAttribute("1")]
private static Func`1<DateTime> _dateTimeNow;
    [ThreadStaticAttribute]
private static DateTime _testDateTimeNow;
    public static DateTime DateTimeNow { get; }
    private static Clock();
    public static DateTime get_DateTimeNow();
    public static void SetTestDateTimeNow(DateTime now);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.File.FileLifeCycleHookChain : FileLifecycleHooks {
    private FileLifecycleHooks _first;
    private FileLifecycleHooks _second;
    public FileLifeCycleHookChain(FileLifecycleHooks first, FileLifecycleHooks second);
    public virtual Stream OnFileOpened(string path, Stream underlyingStream, Encoding encoding);
    public virtual void OnFileDeleting(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Serilog.Sinks.File.FileLifecycleHooks : object {
    public virtual Stream OnFileOpened(string path, Stream underlyingStream, Encoding encoding);
    public virtual Stream OnFileOpened(Stream underlyingStream, Encoding encoding);
    public virtual void OnFileDeleting(string path);
    public FileLifecycleHooks Then(FileLifecycleHooks next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Serilog.Sinks.File.FileSink : object {
    private TextWriter _output;
    private FileStream _underlyingStream;
    private ITextFormatter _textFormatter;
    private Nullable`1<long> _fileSizeLimitBytes;
    private bool _buffered;
    private object _syncRoot;
    [NullableAttribute("2")]
private WriteCountingStream _countingStreamWrapper;
    [ObsoleteAttribute("This type and constructor will be removed from the public API in a future version; use `WriteTo.File()` instead.")]
public FileSink(string path, ITextFormatter textFormatter, Nullable`1<long> fileSizeLimitBytes, Encoding encoding, bool buffered);
    internal FileSink(string path, ITextFormatter textFormatter, Nullable`1<long> fileSizeLimitBytes, Encoding encoding, bool buffered, FileLifecycleHooks hooks);
    private sealed virtual override bool Serilog.Sinks.File.IFileSink.EmitOrOverflow(LogEvent logEvent);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
    public sealed virtual void FlushToDisk();
}
internal interface Serilog.Sinks.File.IFileSink {
    [NullableContextAttribute("1")]
public abstract virtual bool EmitOrOverflow(LogEvent logEvent);
}
public interface Serilog.Sinks.File.IFlushableFileSink {
    public abstract virtual void FlushToDisk();
}
internal static class Serilog.Sinks.File.IOErrors : object {
    [NullableContextAttribute("1")]
public static bool IsLockedFile(IOException ex);
}
internal class Serilog.Sinks.File.NullSink : object {
    [NullableContextAttribute("1")]
public sealed virtual void Emit(LogEvent logEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.File.PathRoller : object {
    private static string PeriodMatchGroup;
    private static string SequenceNumberMatchGroup;
    private string _directory;
    private string _filenamePrefix;
    private string _filenameSuffix;
    private Regex _filenameMatcher;
    private RollingInterval _interval;
    private string _periodFormat;
    [CompilerGeneratedAttribute]
private string <DirectorySearchPattern>k__BackingField;
    public string LogFileDirectory { get; }
    public string DirectorySearchPattern { get; }
    public PathRoller(string path, RollingInterval interval);
    public string get_LogFileDirectory();
    [CompilerGeneratedAttribute]
public string get_DirectorySearchPattern();
    public void GetLogFilePath(DateTime date, Nullable`1<int> sequenceNumber, String& path);
    [IteratorStateMachineAttribute("Serilog.Sinks.File.PathRoller/<SelectMatches>d__15")]
public IEnumerable`1<RollingLogFile> SelectMatches(IEnumerable`1<string> filenames);
    public Nullable`1<DateTime> GetCurrentCheckpoint(DateTime instant);
    public Nullable`1<DateTime> GetNextCheckpoint(DateTime instant);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("This type will be removed from the public API in a future version; use `WriteTo.File(flushToDiskInterval:)` instead.")]
public class Serilog.Sinks.File.PeriodicFlushToDiskSink : object {
    private ILogEventSink _sink;
    private Timer _timer;
    private int _flushRequired;
    public PeriodicFlushToDiskSink(ILogEventSink sink, TimeSpan flushInterval);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
    private void FlushToDisk(IFlushableFileSink flushable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.File.RollingFileSink : object {
    private PathRoller _roller;
    private ITextFormatter _textFormatter;
    private Nullable`1<long> _fileSizeLimitBytes;
    private Nullable`1<int> _retainedFileCountLimit;
    private Nullable`1<TimeSpan> _retainedFileTimeLimit;
    [NullableAttribute("2")]
private Encoding _encoding;
    private bool _buffered;
    private bool _shared;
    private bool _rollOnFileSizeLimit;
    [NullableAttribute("2")]
private FileLifecycleHooks _hooks;
    private object _syncRoot;
    private bool _isDisposed;
    private Nullable`1<DateTime> _nextCheckpoint;
    [NullableAttribute("2")]
private IFileSink _currentFile;
    private Nullable`1<int> _currentFileSequence;
    public RollingFileSink(string path, ITextFormatter textFormatter, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit, Encoding encoding, bool buffered, bool shared, RollingInterval rollingInterval, bool rollOnFileSizeLimit, FileLifecycleHooks hooks, Nullable`1<TimeSpan> retainedFileTimeLimit);
    public sealed virtual void Emit(LogEvent logEvent);
    private void AlignCurrentFileTo(DateTime now, bool nextSequence);
    private void OpenFile(DateTime now, Nullable`1<int> minSequence);
    private void ApplyRetentionPolicy(string currentFilePath, DateTime now);
    private bool ShouldRetainFile(RollingLogFile file, int index, DateTime now);
    public sealed virtual void Dispose();
    private void CloseFile();
    public sealed virtual void FlushToDisk();
}
[ExtensionAttribute]
internal static class Serilog.Sinks.File.RollingIntervalExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetFormat(RollingInterval interval);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetCurrentCheckpoint(RollingInterval interval, DateTime instant);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetNextCheckpoint(RollingInterval interval, DateTime instant);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.File.RollingLogFile : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SequenceNumber>k__BackingField;
    public string Filename { get; }
    public Nullable`1<DateTime> DateTime { get; }
    public Nullable`1<int> SequenceNumber { get; }
    public RollingLogFile(string filename, Nullable`1<DateTime> dateTime, Nullable`1<int> sequenceNumber);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_DateTime();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SequenceNumber();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("This type will be removed from the public API in a future version; use `WriteTo.File(shared: true)` instead.")]
public class Serilog.Sinks.File.SharedFileSink : object {
    private TextWriter _output;
    private FileStream _underlyingStream;
    private ITextFormatter _textFormatter;
    private Nullable`1<long> _fileSizeLimitBytes;
    private object _syncRoot;
    private static string MutexNameSuffix;
    private static int MutexWaitTimeout;
    private Mutex _mutex;
    public SharedFileSink(string path, ITextFormatter textFormatter, Nullable`1<long> fileSizeLimitBytes, Encoding encoding);
    private sealed virtual override bool Serilog.Sinks.File.IFileSink.EmitOrOverflow(LogEvent logEvent);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
    public sealed virtual void FlushToDisk();
    private bool TryAcquireMutex();
    private void ReleaseMutex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Serilog.Sinks.File.WriteCountingStream : Stream {
    private Stream _stream;
    [CompilerGeneratedAttribute]
private long <CountedLength>k__BackingField;
    public long CountedLength { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public WriteCountingStream(Stream stream);
    [CompilerGeneratedAttribute]
public long get_CountedLength();
    [CompilerGeneratedAttribute]
private void set_CountedLength(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
