[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.Diagnostics.DebugServices.ArgumentAttribute : Attribute {
    public string Name;
    public string Help;
}
[AttributeUsageAttribute("4")]
public class Microsoft.Diagnostics.DebugServices.CommandAttribute : Attribute {
    public string Name;
    public string Help;
    public String[] Aliases;
    public string DefaultOptions;
}
public abstract class Microsoft.Diagnostics.DebugServices.CommandBase : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsoleService <Console>k__BackingField;
    [ServiceImportAttribute]
public IServiceProvider Services { get; public set; }
    [ServiceImportAttribute]
public IConsoleService Console { get; public set; }
    [CompilerGeneratedAttribute]
public IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(IServiceProvider value);
    [CompilerGeneratedAttribute]
public IConsoleService get_Console();
    [CompilerGeneratedAttribute]
public void set_Console(IConsoleService value);
    [CommandInvokeAttribute]
public abstract virtual void Invoke();
    protected void Write(string message);
    protected void WriteLine();
    protected void WriteLine(string message);
    protected void WriteLine(string format, Object[] args);
    protected void WriteLineWarning(string format, Object[] args);
    protected void WriteLineError(string format, Object[] args);
    protected bool TryParseAddress(string addressInHexa, UInt64& address);
    protected Nullable`1<ulong> ParseAddress(string addressInHexa);
}
[AttributeUsageAttribute("64")]
public class Microsoft.Diagnostics.DebugServices.CommandInvokeAttribute : Attribute {
}
public class Microsoft.Diagnostics.DebugServices.CommandNotFoundException : DiagnosticsException {
    public CommandNotFoundException(string command);
    public CommandNotFoundException(IEnumerable`1<string> messages);
}
public class Microsoft.Diagnostics.DebugServices.CommandParsingException : DiagnosticsException {
    [CompilerGeneratedAttribute]
private string <DetailedHelp>k__BackingField;
    public string DetailedHelp { get; }
    public CommandParsingException(string message, string detailedHelp);
    public CommandParsingException(string message, string detailedHelp, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_DetailedHelp();
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.DebugServices.CommandServiceExtensions : object {
    [ExtensionAttribute]
public static void AddCommands(ICommandService commandService, IEnumerable`1<Assembly> assemblies);
    [ExtensionAttribute]
public static void AddCommands(ICommandService commandService, Assembly assembly);
    [ExtensionAttribute]
public static void AddCommands(ICommandService commandService, IEnumerable`1<Type> types);
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.DebugServices.ConsoleServiceExtensions : object {
    [ExtensionAttribute]
public static void WriteLine(IConsoleService console);
    [ExtensionAttribute]
public static void WriteLine(IConsoleService console, string message);
    [ExtensionAttribute]
public static void WriteLine(IConsoleService console, string format, Object[] args);
    [ExtensionAttribute]
public static void WriteLineWarning(IConsoleService console, string format, Object[] args);
    [ExtensionAttribute]
public static void WriteLineError(IConsoleService console, string format, Object[] args);
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.DebugServices.ContextServiceExtensions : object {
    [ExtensionAttribute]
public static ITarget GetCurrentTarget(IContextService contextService);
    [ExtensionAttribute]
public static IThread GetCurrentThread(IContextService contextService);
    [ExtensionAttribute]
public static IRuntime GetCurrentRuntime(IContextService contextService);
}
public enum Microsoft.Diagnostics.DebugServices.CrashReason : Enum {
    public int value__;
    public static CrashReason Unknown;
    public static CrashReason UnhandledException;
    public static CrashReason EnvironmentFailFast;
    public static CrashReason InternalFailFast;
}
[ConditionalAttribute("DEBUG")]
public class Microsoft.Diagnostics.DebugServices.DebugCommandAttribute : CommandAttribute {
}
public class Microsoft.Diagnostics.DebugServices.DiagnosticsException : Exception {
    public DiagnosticsException(string message);
    public DiagnosticsException(string message, Exception innerException);
}
[AttributeUsageAttribute("64")]
public class Microsoft.Diagnostics.DebugServices.FilterInvokeAttribute : Attribute {
    public string Message;
}
[AttributeUsageAttribute("64")]
public class Microsoft.Diagnostics.DebugServices.HelpInvokeAttribute : Attribute {
}
public enum Microsoft.Diagnostics.DebugServices.HostType : Enum {
    public int value__;
    public static HostType DotnetDump;
    public static HostType Lldb;
    public static HostType DbgEng;
    public static HostType Vs;
}
public interface Microsoft.Diagnostics.DebugServices.ICommandService {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`3<string, string, IEnumerable`1<string>>> Commands { get; }
    public abstract virtual IEnumerable`1<ValueTuple`3<string, string, IEnumerable`1<string>>> get_Commands();
    public abstract virtual void AddCommands(Type type);
    public abstract virtual IEnumerable`1<ValueTuple`2<string, string>> GetAllCommandHelp(IServiceProvider services);
    public abstract virtual string GetDetailedHelp(string commandName, IServiceProvider services, int consoleWidth);
}
public interface Microsoft.Diagnostics.DebugServices.IConsoleFileLoggingService {
    public string FilePath { get; }
    public abstract virtual string get_FilePath();
    public abstract virtual void Enable(string filePath);
    public abstract virtual void Disable();
    public abstract virtual void AddStream(Stream stream);
    public abstract virtual void RemoveStream(Stream stream);
}
public interface Microsoft.Diagnostics.DebugServices.IConsoleService {
    public bool SupportsDml { get; }
    public CancellationToken CancellationToken { get; public set; }
    public int WindowWidth { get; }
    public abstract virtual void Write(string value);
    public abstract virtual void WriteWarning(string value);
    public abstract virtual void WriteError(string value);
    public abstract virtual void WriteDml(string text);
    public abstract virtual void WriteDmlExec(string text, string action);
    public abstract virtual bool get_SupportsDml();
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
    public abstract virtual int get_WindowWidth();
}
public interface Microsoft.Diagnostics.DebugServices.IContextService {
    public IServiceProvider Services { get; }
    public IServiceEvent OnContextChange { get; }
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual IServiceEvent get_OnContextChange();
    public abstract virtual void SetCurrentTarget(int targetId);
    public abstract virtual void ClearCurrentTarget();
    public abstract virtual void SetCurrentThread(UInt32 threadId);
    public abstract virtual void ClearCurrentThread();
    public abstract virtual void SetCurrentRuntime(int runtimeId);
    public abstract virtual void ClearCurrentRuntime();
}
public interface Microsoft.Diagnostics.DebugServices.ICrashInfoService {
    public CrashReason CrashReason { get; }
    public UInt32 ThreadId { get; }
    public UInt32 HResult { get; }
    public RuntimeType RuntimeType { get; }
    public ulong RuntimeBaseAddress { get; }
    public string RuntimeVersion { get; }
    public string Message { get; }
    public abstract virtual CrashReason get_CrashReason();
    public abstract virtual UInt32 get_ThreadId();
    public abstract virtual UInt32 get_HResult();
    public abstract virtual RuntimeType get_RuntimeType();
    public abstract virtual ulong get_RuntimeBaseAddress();
    public abstract virtual string get_RuntimeVersion();
    public abstract virtual string get_Message();
    public abstract virtual IException GetException(ulong address);
    public abstract virtual IException GetThreadException(UInt32 threadId);
    public abstract virtual IEnumerable`1<IException> GetNestedExceptions(UInt32 threadId);
}
public interface Microsoft.Diagnostics.DebugServices.IDiagnosticLoggingService {
    public bool IsEnabled { get; }
    public string FilePath { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual string get_FilePath();
    public abstract virtual void Enable(string filePath);
    public abstract virtual void Disable();
}
public interface Microsoft.Diagnostics.DebugServices.IDumpTargetFactory {
    public abstract virtual ITarget OpenDump(string fileName);
}
public interface Microsoft.Diagnostics.DebugServices.IException {
    public ulong Address { get; }
    public string Type { get; }
    public string Message { get; }
    public UInt32 HResult { get; }
    public IStack Stack { get; }
    public IEnumerable`1<IException> InnerExceptions { get; }
    public abstract virtual ulong get_Address();
    public abstract virtual string get_Type();
    public abstract virtual string get_Message();
    public abstract virtual UInt32 get_HResult();
    public abstract virtual IStack get_Stack();
    public abstract virtual IEnumerable`1<IException> get_InnerExceptions();
}
public interface Microsoft.Diagnostics.DebugServices.IExportSymbols {
    public abstract virtual bool TryGetSymbolAddress(string name, UInt64& offset);
}
public interface Microsoft.Diagnostics.DebugServices.IField {
    public IType Type { get; }
    public string Name { get; }
    public UInt32 Offset { get; }
    public abstract virtual IType get_Type();
    public abstract virtual string get_Name();
    public abstract virtual UInt32 get_Offset();
}
public interface Microsoft.Diagnostics.DebugServices.IHost {
    public IServiceEvent OnShutdownEvent { get; }
    public IServiceEvent`1<ITarget> OnTargetCreate { get; }
    public HostType HostType { get; }
    public IServiceProvider Services { get; }
    public abstract virtual IServiceEvent get_OnShutdownEvent();
    public abstract virtual IServiceEvent`1<ITarget> get_OnTargetCreate();
    public abstract virtual HostType get_HostType();
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual IEnumerable`1<ITarget> EnumerateTargets();
}
public interface Microsoft.Diagnostics.DebugServices.IMemoryRegion {
    public ulong Start { get; }
    public ulong End { get; }
    public ulong Size { get; }
    public MemoryRegionType Type { get; }
    public MemoryRegionState State { get; }
    public MemoryRegionProtection Protection { get; }
    public MemoryRegionUsage Usage { get; }
    public string Image { get; }
    public abstract virtual ulong get_Start();
    public abstract virtual ulong get_End();
    public abstract virtual ulong get_Size();
    public abstract virtual MemoryRegionType get_Type();
    public abstract virtual MemoryRegionState get_State();
    public abstract virtual MemoryRegionProtection get_Protection();
    public abstract virtual MemoryRegionUsage get_Usage();
    public abstract virtual string get_Image();
}
public interface Microsoft.Diagnostics.DebugServices.IMemoryRegionService {
    public abstract virtual IEnumerable`1<IMemoryRegion> EnumerateRegions();
}
public interface Microsoft.Diagnostics.DebugServices.IMemoryService {
    public int PointerSize { get; }
    public abstract virtual int get_PointerSize();
    public abstract virtual bool ReadMemory(ulong address, Span`1<byte> buffer, Int32& bytesRead);
    public abstract virtual bool WriteMemory(ulong address, Span`1<byte> buffer, Int32& bytesWritten);
}
public interface Microsoft.Diagnostics.DebugServices.IModule {
    public ITarget Target { get; }
    public IServiceProvider Services { get; }
    public int ModuleIndex { get; }
    public string FileName { get; }
    public ulong ImageBase { get; }
    public ulong ImageSize { get; }
    public Nullable`1<UInt32> IndexFileSize { get; }
    public Nullable`1<UInt32> IndexTimeStamp { get; }
    public ImmutableArray`1<byte> BuildId { get; }
    public bool IsPEImage { get; }
    public bool IsManaged { get; }
    public Nullable`1<bool> IsFileLayout { get; }
    public abstract virtual ITarget get_Target();
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual int get_ModuleIndex();
    public abstract virtual string get_FileName();
    public abstract virtual ulong get_ImageBase();
    public abstract virtual ulong get_ImageSize();
    public abstract virtual Nullable`1<UInt32> get_IndexFileSize();
    public abstract virtual Nullable`1<UInt32> get_IndexTimeStamp();
    public abstract virtual ImmutableArray`1<byte> get_BuildId();
    public abstract virtual bool get_IsPEImage();
    public abstract virtual bool get_IsManaged();
    public abstract virtual Nullable`1<bool> get_IsFileLayout();
    public abstract virtual IEnumerable`1<PdbFileInfo> GetPdbFileInfos();
    public abstract virtual string GetSymbolFileName();
    public abstract virtual Version GetVersionData();
    public abstract virtual string GetVersionString();
    public abstract virtual string LoadSymbols();
}
public interface Microsoft.Diagnostics.DebugServices.IModuleService {
    public abstract virtual IEnumerable`1<IModule> EnumerateModules();
    public abstract virtual IModule GetModuleFromIndex(int moduleIndex);
    public abstract virtual IModule GetModuleFromBaseAddress(ulong baseAddress);
    public abstract virtual IModule GetModuleFromAddress(ulong address);
    public abstract virtual IEnumerable`1<IModule> GetModuleFromModuleName(string moduleName);
}
public interface Microsoft.Diagnostics.DebugServices.IModuleSymbols {
    public abstract virtual bool TryGetSymbolName(ulong address, String& symbol, UInt64& displacement);
    public abstract virtual bool TryGetSymbolAddress(string name, UInt64& address);
    public abstract virtual bool TryGetType(string typeName, IType& type);
    public abstract virtual SymbolStatus GetSymbolStatus();
}
public interface Microsoft.Diagnostics.DebugServices.IRemoteMemoryService {
    public abstract virtual bool AllocateMemory(ulong address, UInt32 size, UInt32 typeFlags, UInt32 protectFlags, UInt64& remoteAddress);
    public abstract virtual bool FreeMemory(ulong address, UInt32 size, UInt32 typeFlags);
}
public interface Microsoft.Diagnostics.DebugServices.IRuntime {
    public int Id { get; }
    public ITarget Target { get; }
    public IServiceProvider Services { get; }
    public RuntimeType RuntimeType { get; }
    public Version RuntimeVersion { get; }
    public IModule RuntimeModule { get; }
    public string RuntimeModuleDirectory { get; public set; }
    public abstract virtual int get_Id();
    public abstract virtual ITarget get_Target();
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual RuntimeType get_RuntimeType();
    public abstract virtual Version get_RuntimeVersion();
    public abstract virtual IModule get_RuntimeModule();
    public abstract virtual string get_RuntimeModuleDirectory();
    public abstract virtual void set_RuntimeModuleDirectory(string value);
    public abstract virtual string GetDacFilePath();
    public abstract virtual string GetDbiFilePath();
}
public interface Microsoft.Diagnostics.DebugServices.IRuntimeProvider {
    public abstract virtual IEnumerable`1<IRuntime> EnumerateRuntimes(int startingRuntimeId, RuntimeEnumerationFlags flags);
}
public interface Microsoft.Diagnostics.DebugServices.IRuntimeService {
    public abstract virtual IEnumerable`1<IRuntime> EnumerateRuntimes(RuntimeEnumerationFlags flags);
}
public interface Microsoft.Diagnostics.DebugServices.IServiceEvent {
    public abstract virtual IDisposable Register(Action callback);
    public abstract virtual IDisposable RegisterOneShot(Action callback);
    public abstract virtual void Fire();
}
public interface Microsoft.Diagnostics.DebugServices.IServiceEvent`1 {
    public abstract virtual IDisposable Register(Action`1<T> callback);
    public abstract virtual IDisposable RegisterOneShot(Action`1<T> callback);
    public abstract virtual void Fire(T parameter);
}
public interface Microsoft.Diagnostics.DebugServices.IServiceManager {
    public abstract virtual ServiceContainerFactory CreateServiceContainerFactory(ServiceScope scope, IServiceProvider parent);
    public abstract virtual IEnumerable`1<ServiceFactory> EnumerateProviderFactories(Type providerType);
}
public interface Microsoft.Diagnostics.DebugServices.IStack {
    public int FrameCount { get; }
    public abstract virtual int get_FrameCount();
    public abstract virtual IStackFrame GetStackFrame(int index);
}
public interface Microsoft.Diagnostics.DebugServices.IStackFrame {
    public ulong InstructionPointer { get; }
    public ulong StackPointer { get; }
    public ulong ModuleBase { get; }
    public abstract virtual ulong get_InstructionPointer();
    public abstract virtual ulong get_StackPointer();
    public abstract virtual ulong get_ModuleBase();
    public abstract virtual void GetMethodName(String& moduleName, String& methodName, UInt64& displacement);
}
public interface Microsoft.Diagnostics.DebugServices.ISymbolFile {
    public abstract virtual bool ResolveSequencePoint(string filePath, int lineNumber, Int32& methodToken, Int32& ilOffset);
    public abstract virtual bool GetSourceLineByILOffset(int methodToken, long ilOffset, Int32& lineNumber, String& fileName);
    public abstract virtual bool GetLocalVariableByIndex(int methodToken, int localIndex, String& localVarName);
}
public interface Microsoft.Diagnostics.DebugServices.ISymbolService {
    public IServiceEvent OnChangeEvent { get; }
    public bool IsSymbolStoreEnabled { get; }
    public string DefaultSymbolPath { get; }
    public string DefaultSymbolCache { get; }
    public int DefaultTimeout { get; }
    public int DefaultRetryCount { get; }
    public abstract virtual IServiceEvent get_OnChangeEvent();
    public abstract virtual bool get_IsSymbolStoreEnabled();
    public abstract virtual string get_DefaultSymbolPath();
    public abstract virtual string get_DefaultSymbolCache();
    public abstract virtual int get_DefaultTimeout();
    public abstract virtual int get_DefaultRetryCount();
    public abstract virtual void Reset();
    public abstract virtual bool ParseSymbolPath(string symbolPath);
    public abstract virtual bool AddSymwebSymbolServer(bool includeInteractiveCredentials, Nullable`1<int> timeoutInMinutes, Nullable`1<int> retryCount);
    public abstract virtual bool AddAuthenticatedSymbolServer(string accessToken, string symbolServerPath, Nullable`1<int> timeoutInMinutes, Nullable`1<int> retryCount);
    public abstract virtual bool AddSymbolServer(string symbolServerPath, Nullable`1<int> timeoutInMinutes, Nullable`1<int> retryCount);
    public abstract virtual void AddCachePath(string symbolCachePath);
    public abstract virtual void AddDirectoryPath(string symbolDirectoryPath);
    public abstract virtual void DisableSymbolStore();
    public abstract virtual string DownloadModuleFile(IModule module);
    public abstract virtual string DownloadSymbolFile(IModule module);
    public abstract virtual string DownloadFile(string index, string file);
    public abstract virtual ImmutableArray`1<byte> GetMetadata(string imagePath, UInt32 imageTimestamp, UInt32 imageSize);
    public abstract virtual ISymbolFile OpenSymbolFile(string assemblyPath, bool isFileLayout, Stream peStream);
    public abstract virtual ISymbolFile OpenSymbolFile(Stream pdbStream);
}
public interface Microsoft.Diagnostics.DebugServices.ITarget {
    public IHost Host { get; }
    public int Id { get; }
    public OSPlatform OperatingSystem { get; }
    public Architecture Architecture { get; }
    public bool IsDump { get; }
    public Nullable`1<UInt32> ProcessId { get; }
    public IServiceProvider Services { get; }
    public IServiceEvent OnFlushEvent { get; }
    public IServiceEvent OnDestroyEvent { get; }
    public abstract virtual IHost get_Host();
    public abstract virtual int get_Id();
    public abstract virtual OSPlatform get_OperatingSystem();
    public abstract virtual Architecture get_Architecture();
    public abstract virtual bool get_IsDump();
    public abstract virtual Nullable`1<UInt32> get_ProcessId();
    public abstract virtual string GetTempDirectory();
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual IServiceEvent get_OnFlushEvent();
    public abstract virtual void Flush();
    public abstract virtual IServiceEvent get_OnDestroyEvent();
    public abstract virtual void Destroy();
}
public interface Microsoft.Diagnostics.DebugServices.IThread {
    public int ThreadIndex { get; }
    public UInt32 ThreadId { get; }
    public ITarget Target { get; }
    public IServiceProvider Services { get; }
    public abstract virtual int get_ThreadIndex();
    public abstract virtual UInt32 get_ThreadId();
    public abstract virtual ITarget get_Target();
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual bool TryGetRegisterValue(int registerIndex, UInt64& value);
    public abstract virtual Byte[] GetThreadContext();
    public abstract virtual ulong GetThreadTeb();
}
public interface Microsoft.Diagnostics.DebugServices.IThreadService {
    public IEnumerable`1<RegisterInfo> Registers { get; }
    public int InstructionPointerIndex { get; }
    public int FramePointerIndex { get; }
    public int StackPointerIndex { get; }
    public abstract virtual IEnumerable`1<RegisterInfo> get_Registers();
    public abstract virtual int get_InstructionPointerIndex();
    public abstract virtual int get_FramePointerIndex();
    public abstract virtual int get_StackPointerIndex();
    public abstract virtual bool TryGetRegisterIndexByName(string name, Int32& registerIndex);
    public abstract virtual bool TryGetRegisterInfo(int registerIndex, RegisterInfo& info);
    public abstract virtual IEnumerable`1<IThread> EnumerateThreads();
    public abstract virtual IThread GetThreadFromIndex(int threadIndex);
    public abstract virtual IThread GetThreadFromId(UInt32 threadId);
}
public interface Microsoft.Diagnostics.DebugServices.IThreadUnwindService {
    public abstract virtual int Unwind(UInt32 threadId, UInt32 contextSize, Byte[] context);
}
public interface Microsoft.Diagnostics.DebugServices.IType {
    public string Name { get; }
    public IModule Module { get; }
    public abstract virtual string get_Name();
    public abstract virtual IModule get_Module();
    public abstract virtual bool TryGetField(string fieldName, IField& field);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.DebugServices.MemoryRegionProtection : Enum {
    public int value__;
    public static MemoryRegionProtection PAGE_UNKNOWN;
    public static MemoryRegionProtection PAGE_EXECUTE;
    public static MemoryRegionProtection PAGE_EXECUTE_READ;
    public static MemoryRegionProtection PAGE_EXECUTE_READWRITE;
    public static MemoryRegionProtection PAGE_EXECUTE_WRITECOPY;
    public static MemoryRegionProtection PAGE_NOACCESS;
    public static MemoryRegionProtection PAGE_READONLY;
    public static MemoryRegionProtection PAGE_READWRITE;
    public static MemoryRegionProtection PAGE_WRITECOPY;
    public static MemoryRegionProtection PAGE_GUARD;
    public static MemoryRegionProtection PAGE_NOCACHE;
    public static MemoryRegionProtection PAGE_WRITECOMBINE;
}
public enum Microsoft.Diagnostics.DebugServices.MemoryRegionState : Enum {
    public int value__;
    public static MemoryRegionState MEM_UNKNOWN;
    public static MemoryRegionState MEM_COMMIT;
    public static MemoryRegionState MEM_FREE;
    public static MemoryRegionState MEM_RESERVE;
}
public enum Microsoft.Diagnostics.DebugServices.MemoryRegionType : Enum {
    public int value__;
    public static MemoryRegionType MEM_UNKNOWN;
    public static MemoryRegionType MEM_IMAGE;
    public static MemoryRegionType MEM_MAPPED;
    public static MemoryRegionType MEM_PRIVATE;
}
public enum Microsoft.Diagnostics.DebugServices.MemoryRegionUsage : Enum {
    public int value__;
    public static MemoryRegionUsage Unknown;
    public static MemoryRegionUsage Free;
    public static MemoryRegionUsage Image;
    public static MemoryRegionUsage Peb;
    public static MemoryRegionUsage Teb;
    public static MemoryRegionUsage Stack;
    public static MemoryRegionUsage Heap;
    public static MemoryRegionUsage PageHeap;
    public static MemoryRegionUsage FileMapping;
    public static MemoryRegionUsage CLR;
    public static MemoryRegionUsage Other;
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.DebugServices.MemoryServiceExtensions : object {
    [ExtensionAttribute]
public static ulong SignExtensionMask(IMemoryService memoryService);
    [ExtensionAttribute]
public static bool ReadMemory(IMemoryService memoryService, ulong address, Byte[] buffer, int bytesRequested, Int32& bytesRead);
    [ExtensionAttribute]
public static bool ReadMemory(IMemoryService memoryService, ulong address, IntPtr buffer, int bytesRequested, Int32& bytesRead);
    [ExtensionAttribute]
public static bool ReadDword(IMemoryService memoryService, ulong address, UInt32& value);
    [ExtensionAttribute]
public static bool ReadPointer(IMemoryService memoryService, ulong address, UInt64& value);
    [ExtensionAttribute]
public static Stream CreateMemoryStream(IMemoryService memoryService);
    [ExtensionAttribute]
public static Stream CreateMemoryStream(IMemoryService memoryService, ulong address, ulong size);
}
[AttributeUsageAttribute("128")]
public class Microsoft.Diagnostics.DebugServices.OptionAttribute : Attribute {
    public string Name;
    public string Help;
    public String[] Aliases;
}
public class Microsoft.Diagnostics.DebugServices.PdbFileInfo : object {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPortable>k__BackingField;
    public Guid Guid { get; }
    public int Revision { get; }
    public string Path { get; }
    public bool IsPortable { get; }
    public PdbFileInfo(string path, Guid guid, int revision, bool isPortable);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public int get_Revision();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public bool get_IsPortable();
    public virtual string ToString();
}
[AttributeUsageAttribute("68")]
public class Microsoft.Diagnostics.DebugServices.ProviderExportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
[IsReadOnlyAttribute]
public class Microsoft.Diagnostics.DebugServices.RegisterInfo : ValueType {
    public int RegisterIndex;
    public int RegisterOffset;
    public int RegisterSize;
    public string RegisterName;
    public RegisterInfo(int registerIndex, int registerOffset, int registerSize, string registerName);
}
[FlagsAttribute]
public enum Microsoft.Diagnostics.DebugServices.RuntimeEnumerationFlags : Enum {
    public int value__;
    public static RuntimeEnumerationFlags Default;
    public static RuntimeEnumerationFlags All;
}
public enum Microsoft.Diagnostics.DebugServices.RuntimeType : Enum {
    public int value__;
    public static RuntimeType Unknown;
    public static RuntimeType Desktop;
    public static RuntimeType NetCore;
    public static RuntimeType SingleFile;
    public static RuntimeType NativeAOT;
    public static RuntimeType Other;
}
public class Microsoft.Diagnostics.DebugServices.ServiceContainer : object {
    private IServiceProvider _parent;
    private Dictionary`2<Type, object> _instances;
    private Dictionary`2<Type, ServiceFactory> _factories;
    public ServiceContainer(IServiceProvider parent, Dictionary`2<Type, ServiceFactory> factories);
    public void AddService(Type type, object service);
    public void AddService(T instance);
    public void RemoveService(Type type);
    public void DisposeServices();
    public sealed virtual object GetService(Type type);
}
public class Microsoft.Diagnostics.DebugServices.ServiceContainerFactory : object {
    private Dictionary`2<Type, ServiceFactory> _factories;
    private IServiceProvider _parent;
    private bool _finalized;
    public ServiceContainerFactory(IServiceProvider parent, IDictionary`2<Type, ServiceFactory> factories);
    public void AddServiceFactory(Type type, ServiceFactory factory);
    public void AddServiceFactory(ServiceFactory factory);
    public void RemoveServiceFactory(Type type);
    public void RemoveServiceFactory();
    public ServiceContainer Build();
    public ServiceContainerFactory Clone();
}
[AttributeUsageAttribute("68")]
public class Microsoft.Diagnostics.DebugServices.ServiceExportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceScope <Scope>k__BackingField;
    public Type Type { get; public set; }
    public ServiceScope Scope { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public ServiceScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ServiceScope value);
}
public class Microsoft.Diagnostics.DebugServices.ServiceFactory : MulticastDelegate {
    public ServiceFactory(object object, IntPtr method);
    public virtual object Invoke(IServiceProvider provider);
    public virtual IAsyncResult BeginInvoke(IServiceProvider provider, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("2496")]
public class Microsoft.Diagnostics.DebugServices.ServiceImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Optional>k__BackingField;
    public bool Optional { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Optional();
    [CompilerGeneratedAttribute]
public void set_Optional(bool value);
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.DebugServices.ServiceManagerExtensions : object {
    [ExtensionAttribute]
public static ServiceContainer CreateServiceContainer(IServiceManager serviceManager, ServiceScope scope, IServiceProvider parent);
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.DebugServices.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static T GetService(IServiceProvider serviceProvider);
}
public enum Microsoft.Diagnostics.DebugServices.ServiceScope : Enum {
    public int value__;
    public static ServiceScope Global;
    public static ServiceScope Context;
    public static ServiceScope Target;
    public static ServiceScope Module;
    public static ServiceScope Thread;
    public static ServiceScope Runtime;
    public static ServiceScope Max;
}
public enum Microsoft.Diagnostics.DebugServices.SymbolStatus : Enum {
    public int value__;
    public static SymbolStatus Unknown;
    public static SymbolStatus Loaded;
    public static SymbolStatus NotLoaded;
    public static SymbolStatus ExportOnly;
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.DebugServices.TargetExtensions : object {
    [ExtensionAttribute]
public static string GetPlatformModuleName(ITarget target, string moduleName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
