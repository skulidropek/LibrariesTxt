[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.AnalyzeOOMCommand : ClrRuntimeCommandBase {
    public virtual void Invoke();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.AssembliesCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private IModuleService <ModuleService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [ServiceImportAttribute]
public IModuleService ModuleService { get; public set; }
    [OptionAttribute]
public string AssemblyName { get; public set; }
    [OptionAttribute]
public bool Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public IModuleService get_ModuleService();
    [CompilerGeneratedAttribute]
public void set_ModuleService(IModuleService value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    public virtual void Invoke();
}
public class Microsoft.Diagnostics.ExtensionCommands.ClrDebugResource : ValueType {
    public UInt32 dwVersion;
    public Guid signature;
    public int dwDacTimeStamp;
    public int dwDacSizeOfImage;
    public int dwDbiTimeStamp;
    public int dwDbiSizeOfImage;
}
public class Microsoft.Diagnostics.ExtensionCommands.ClrEngineMetrics : TStruct {
    public static string Symbol;
    public int Size;
    public int DbiVersion;
    public SizeT ContinueStartupEvent;
    public static bool TryRead(IServiceProvider services, ulong address, ClrEngineMetrics& metrics);
}
public class Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper : object {
    private ClrRuntime _clr;
    private ClrHeap _heap;
    internal static int TASK_STATE_STARTED;
    internal static int TASK_STATE_DELEGATE_INVOKED;
    internal static int TASK_STATE_DISPOSED;
    internal static int TASK_STATE_EXCEPTIONOBSERVEDBYPARENT;
    internal static int TASK_STATE_CANCELLATIONACKNOWLEDGED;
    internal static int TASK_STATE_FAULTED;
    internal static int TASK_STATE_CANCELED;
    internal static int TASK_STATE_WAITING_ON_CHILDREN;
    internal static int TASK_STATE_RAN_TO_COMPLETION;
    internal static int TASK_STATE_WAITINGFORACTIVATION;
    internal static int TASK_STATE_COMPLETION_RESERVED;
    internal static int TASK_STATE_WAIT_COMPLETION_NOTIFICATION;
    internal static int TASK_STATE_EXECUTIONCONTEXT_IS_NULL;
    internal static int TASK_STATE_TASKSCHEDULED_WAS_FIRED;
    private ClrMDHelper(ClrRuntime clr);
    [ServiceExportAttribute]
public static ClrMDHelper TryCreate(ClrRuntime clrRuntime);
    public ulong GetTaskStateFromAddress(ulong address);
    public static string GetTaskState(ulong flag);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateTimers>d__20")]
public IEnumerable`1<TimerInfo> EnumerateTimers();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<GetTimers>d__21")]
private IEnumerable`1<TimerInfo> GetTimers(ClrObject timerQueueTimer, bool is30Format);
    private TimerInfo GetTimerInfo(ClrObject currentTimerQueueTimer);
    private string BuildTimerCallbackMethodName(ClrObject timerCallback);
    public IEnumerable`1<ThreadPoolItem> EnumerateGlobalThreadPoolItems();
    public IEnumerable`1<ThreadPoolItem> EnumerateLocalThreadPoolItems();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateGlobalThreadPoolItemsInNetCore>d__26")]
private IEnumerable`1<ThreadPoolItem> EnumerateGlobalThreadPoolItemsInNetCore();
    private ThreadPoolItem GetThreadPoolItem(ClrObject item);
    private ThreadPoolItem GetTask(ClrObject task);
    private ThreadPoolItem GetQueueUserWorkItemCallback(ClrObject element);
    internal string BuildDelegateMethodName(ClrType targetType, ClrObject action);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateWorkItemsAddressInConcurrentQueue>d__31")]
private IEnumerable`1<ClrObject> EnumerateWorkItemsAddressInConcurrentQueue(ulong address);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateLocalThreadPoolItemsInNetCore>d__32")]
private IEnumerable`1<ThreadPoolItem> EnumerateLocalThreadPoolItemsInNetCore();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateGlobalThreadPoolItemsInNetFramework>d__33")]
private IEnumerable`1<ThreadPoolItem> EnumerateGlobalThreadPoolItemsInNetFramework(ClrModule mscorlib);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateThreadPoolWorkQueue>d__34")]
private IEnumerable`1<ThreadPoolItem> EnumerateThreadPoolWorkQueue(ClrObject workQueue);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateLocalThreadPoolItemsInNetFramework>d__35")]
private IEnumerable`1<ThreadPoolItem> EnumerateLocalThreadPoolItemsInNetFramework(ClrModule mscorlib);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateThreadPoolStealingQueue>d__36")]
private IEnumerable`1<ThreadPoolItem> EnumerateThreadPoolStealingQueue(ClrObject stealingQueue);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateConcurrentDictionary>d__37")]
public IEnumerable`1<KeyValuePair`2<string, string>> EnumerateConcurrentDictionary(ulong address);
    public static IClrValue GetFieldFrom(IClrValue entity, string fieldName);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateObjectsInGeneration>d__39")]
public IEnumerable`1<ClrObject> EnumerateObjectsInGeneration(GCGeneration generation);
    private static bool TryGetSegmentMemoryRange(ClrSegment segment, GCGeneration generation, UInt64& start, UInt64& end);
    public IEnumerable`1<string> EnumerateConcurrentQueue(ulong address);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateConcurrentQueueCore>d__42")]
private IEnumerable`1<string> EnumerateConcurrentQueueCore(ulong address);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ClrMDHelper/<EnumerateConcurrentQueueFramework>d__43")]
private IEnumerable`1<string> EnumerateConcurrentQueueFramework(ulong address);
    private static bool IsSimpleType(string typeName);
    private string DumpPropertyValue(ClrObject obj, string propertyName);
    private static bool HasSimpleValue(ClrArray items, int index, ClrValueType item, String& content);
    private static bool TryGetSimpleValue(IClrValue item, ClrType type, string fieldName, String& content);
    public ClrModule GetMscorlib();
    public bool IsNetCore();
    public bool Is64Bits();
}
public abstract class Microsoft.Diagnostics.ExtensionCommands.ClrMDHelperCommandBase : CommandBase {
    [CompilerGeneratedAttribute]
private ClrMDHelper <Helper>k__BackingField;
    [ServiceImportAttribute]
public ClrMDHelper Helper { get; public set; }
    [CompilerGeneratedAttribute]
public ClrMDHelper get_Helper();
    [CompilerGeneratedAttribute]
public void set_Helper(ClrMDHelper value);
    [FilterInvokeAttribute]
public static bool FilterInvoke(ClrMDHelper helper);
}
public abstract class Microsoft.Diagnostics.ExtensionCommands.ClrRuntimeCommandBase : CommandBase {
    public static string RuntimeNotFoundMessage;
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    [FilterInvokeAttribute]
public static bool FilterInvoke(ClrRuntime runtime);
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.ExtensionCommands.CommandFormatHelpers : object {
    public static string DacTableSymbol;
    public static string DebugHeaderSymbol;
    [ExtensionAttribute]
public static void DisplaySpecialInfo(CommandBase command, string indent);
    [ExtensionAttribute]
public static void DisplayResources(CommandBase command, IModule module, bool all, string indent);
    private static void DisplayResources(IConsoleService console, IResourceNode resourceNode, bool all, string indent);
    [ExtensionAttribute]
public static void DisplayRuntimeExports(CommandBase command, IModule module, bool error, string indent);
    [CompilerGeneratedAttribute]
internal static IConsoleService <DisplayRuntimeExports>g__Console|5_0(<>c__DisplayClass5_0& );
}
[CommandAttribute]
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.ConsoleLoggingCommand : CommandBase {
    [CompilerGeneratedAttribute]
private IConsoleFileLoggingService <FileLoggingService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disable>k__BackingField;
    [ServiceImportAttribute]
public IConsoleFileLoggingService FileLoggingService { get; public set; }
    [ArgumentAttribute]
public string FilePath { get; public set; }
    [OptionAttribute]
public bool Disable { get; public set; }
    [CompilerGeneratedAttribute]
public IConsoleFileLoggingService get_FileLoggingService();
    [CompilerGeneratedAttribute]
public void set_FileLoggingService(IConsoleFileLoggingService value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_Disable();
    [CompilerGeneratedAttribute]
public void set_Disable(bool value);
    public virtual void Invoke();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.CrashInfoCommand : CommandBase {
    [CompilerGeneratedAttribute]
private ICrashInfoService <CrashInfo>k__BackingField;
    [ServiceImportAttribute]
public ICrashInfoService CrashInfo { get; public set; }
    [CompilerGeneratedAttribute]
public ICrashInfoService get_CrashInfo();
    [CompilerGeneratedAttribute]
public void set_CrashInfo(ICrashInfoService value);
    public virtual void Invoke();
    private void PrintException(IException exception, string indent);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpAsyncCommand : ClrRuntimeCommandBase {
    [NullableAttribute("1")]
private static string CommandName;
    private static int TabWidth;
    [NullableAttribute("1")]
private static string DmlCommandInvoke;
    private Nullable`1<ulong> _objectAddress;
    private Nullable`1<ulong> _methodTableAddress;
    [CompilerGeneratedAttribute]
private string <NameSubstring>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTasks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayFields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Summarize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoalesceStacks>k__BackingField;
    [OptionAttribute]
public string ObjectAddress { get; public set; }
    [OptionAttribute]
public string MethodTableAddress { get; public set; }
    [OptionAttribute]
public string NameSubstring { get; public set; }
    [OptionAttribute]
public bool IncludeTasks { get; public set; }
    [OptionAttribute]
public bool IncludeCompleted { get; public set; }
    [OptionAttribute]
public bool DisplayFields { get; public set; }
    [OptionAttribute]
public bool Summarize { get; public set; }
    [OptionAttribute]
public bool CoalesceStacks { get; public set; }
    public string get_ObjectAddress();
    public void set_ObjectAddress(string value);
    public string get_MethodTableAddress();
    public void set_MethodTableAddress(string value);
    [CompilerGeneratedAttribute]
public string get_NameSubstring();
    [CompilerGeneratedAttribute]
public void set_NameSubstring(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTasks();
    [CompilerGeneratedAttribute]
public void set_IncludeTasks(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeCompleted();
    [CompilerGeneratedAttribute]
public void set_IncludeCompleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisplayFields();
    [CompilerGeneratedAttribute]
public void set_DisplayFields(bool value);
    [CompilerGeneratedAttribute]
public bool get_Summarize();
    [CompilerGeneratedAttribute]
public void set_Summarize(bool value);
    [CompilerGeneratedAttribute]
public bool get_CoalesceStacks();
    [CompilerGeneratedAttribute]
public void set_CoalesceStacks(bool value);
    public virtual void Invoke();
    [NullableContextAttribute("1")]
private void WriteHeaderLine(string text);
    private void WriteMethodTable(ulong mt, bool asyncObject);
    private void WriteAddress(ulong addr, bool asyncObject);
    private void WriteValueTypeAddress(ulong addr, ulong mt);
    private void WriteCodeLink(ulong address);
    private static bool IsStateMachineBox(ClrType type);
    private static bool TryGetStateMachine(ClrObject obj, IClrValue& stateMachine);
    [NullableContextAttribute("1")]
private static object GetDisplay(IClrValue obj, ClrInstanceField field);
    [NullableContextAttribute("1")]
private static bool TryGetMethodFromDelegate(ClrRuntime runtime, ClrObject delegateObject, ClrMethod& method);
    [NullableContextAttribute("1")]
private static string Tabs(int count);
    private static string Truncate(string value, int maxLength);
    private static bool TryGetTaskStateFlags(ClrObject obj, Int32& flags);
    [NullableContextAttribute("0")]
private static bool TryRead(IClrValue entity, string fieldName, T& result);
    [NullableContextAttribute("1")]
private static bool TryGetValidObjectField(ClrObject obj, string fieldName, ClrObject& result);
    private static bool IsCompleted(int taskStateFlags);
    [NullableContextAttribute("0")]
private static bool AllZero(ReadOnlySpan`1<byte> bytes);
    [NullableContextAttribute("1")]
private static string DescribeTaskFlags(int stateFlags);
    [NullableContextAttribute("1")]
[HelpInvokeAttribute]
public static string GetDetailedHelp();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <DescribeTaskFlags>g__Append|52_0(string s, <>c__DisplayClass52_0& );
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpConcurrentDictionaryCommand : ClrMDHelperCommandBase {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [ArgumentAttribute]
public string Address { get; public set; }
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    public virtual void Invoke();
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
    private static string Truncate(string str, int nbMaxChars);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpConcurrentQueueCommand : ClrMDHelperCommandBase {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [ArgumentAttribute]
public string Address { get; public set; }
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    public virtual void Invoke();
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpExceptionsCommand : ClrRuntimeCommandBase {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private LiveObjectService <LiveObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Live>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dead>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Generation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [NullableAttribute("1")]
[ServiceImportAttribute]
public LiveObjectService LiveObjects { get; public set; }
    [OptionAttribute]
public bool Live { get; public set; }
    [OptionAttribute]
public bool Dead { get; public set; }
    [OptionAttribute]
public string Generation { get; public set; }
    [OptionAttribute]
public string Type { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public LiveObjectService get_LiveObjects();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_LiveObjects(LiveObjectService value);
    [CompilerGeneratedAttribute]
public bool get_Live();
    [CompilerGeneratedAttribute]
public void set_Live(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dead();
    [CompilerGeneratedAttribute]
public void set_Dead(bool value);
    [CompilerGeneratedAttribute]
public string get_Generation();
    [CompilerGeneratedAttribute]
public void set_Generation(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    public virtual void Invoke();
    [NullableContextAttribute("1")]
private void PrintExceptions(IEnumerable`1<ClrObject> exceptionObjects);
    [NullableContextAttribute("1")]
private HeapWithFilters ParseArguments();
    [CompilerGeneratedAttribute]
private bool <Invoke>b__20_1(ClrObject obj);
    [CompilerGeneratedAttribute]
private bool <Invoke>b__20_2(ClrObject obj);
}
public class Microsoft.Diagnostics.ExtensionCommands.DumpGen : object {
    private ClrMDHelper _helper;
    private GCGeneration _generation;
    public DumpGen(ClrMDHelper helper, GCGeneration generation);
    public IEnumerable`1<DumpGenStats> GetStats(string typeNameFilter);
    public IEnumerable`1<ClrObject> GetInstances(ulong methodTableAddress);
    private static bool IsTypeNameMatching(string typeName, string typeNameFilter);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpGenCommand : ClrMDHelperCommandBase {
    private static string statsHeader32bits;
    private static string statsHeader64bits;
    private static string methodTableHeader32bits;
    private static string methodTableHeader64bits;
    [CompilerGeneratedAttribute]
private string <Generation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterByTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodTableAddress>k__BackingField;
    [ArgumentAttribute]
public string Generation { get; public set; }
    [OptionAttribute]
public string FilterByTypeName { get; public set; }
    [OptionAttribute]
public string MethodTableAddress { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Generation();
    [CompilerGeneratedAttribute]
public void set_Generation(string value);
    [CompilerGeneratedAttribute]
public string get_FilterByTypeName();
    [CompilerGeneratedAttribute]
public void set_FilterByTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodTableAddress();
    [CompilerGeneratedAttribute]
public void set_MethodTableAddress(string value);
    public virtual void Invoke();
    private void WriteInstances(IEnumerable`1<ClrObject> objects);
    private void WriteStatistics(IEnumerable`1<DumpGenStats> dumpGenResult);
    private static GCGeneration ParseGenerationArgument(string generation);
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
}
public class Microsoft.Diagnostics.ExtensionCommands.DumpGenStats : object {
    [CompilerGeneratedAttribute]
private ClrType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <NumberOfOccurences>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TotalSize>k__BackingField;
    public ClrType Type { get; public set; }
    public ulong NumberOfOccurences { get; public set; }
    public ulong TotalSize { get; public set; }
    [CompilerGeneratedAttribute]
public ClrType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ClrType value);
    [CompilerGeneratedAttribute]
public ulong get_NumberOfOccurences();
    [CompilerGeneratedAttribute]
public void set_NumberOfOccurences(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_TotalSize();
    [CompilerGeneratedAttribute]
public void set_TotalSize(ulong value);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpHeapCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [CompilerGeneratedAttribute]
private LiveObjectService <LiveObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private DumpHeapService <DumpHeap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodTableString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <MethodTable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StatOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Short>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Live>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dead>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GCHeap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThinLock>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Generation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreGCState>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MemoryRange>k__BackingField;
    [CompilerGeneratedAttribute]
private HeapWithFilters <FilteredHeap>k__BackingField;
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [ServiceImportAttribute]
public LiveObjectService LiveObjects { get; public set; }
    [ServiceImportAttribute]
public DumpHeapService DumpHeap { get; public set; }
    [OptionAttribute]
public string MethodTableString { get; public set; }
    private Nullable`1<ulong> MethodTable { get; private set; }
    [OptionAttribute]
public string Type { get; public set; }
    [OptionAttribute]
public bool StatOnly { get; public set; }
    [OptionAttribute]
public bool Strings { get; public set; }
    [OptionAttribute]
public bool Short { get; public set; }
    [OptionAttribute]
public ulong Min { get; public set; }
    [OptionAttribute]
public ulong Max { get; public set; }
    [OptionAttribute]
public bool Live { get; public set; }
    [OptionAttribute]
public bool Dead { get; public set; }
    [OptionAttribute]
public int GCHeap { get; public set; }
    [OptionAttribute]
public string Segment { get; public set; }
    [OptionAttribute]
public bool ThinLock { get; public set; }
    [OptionAttribute]
public string Generation { get; public set; }
    [OptionAttribute]
public bool IgnoreGCState { get; public set; }
    [ArgumentAttribute]
public String[] MemoryRange { get; public set; }
    private HeapWithFilters FilteredHeap { get; private set; }
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    [CompilerGeneratedAttribute]
public LiveObjectService get_LiveObjects();
    [CompilerGeneratedAttribute]
public void set_LiveObjects(LiveObjectService value);
    [CompilerGeneratedAttribute]
public DumpHeapService get_DumpHeap();
    [CompilerGeneratedAttribute]
public void set_DumpHeap(DumpHeapService value);
    [CompilerGeneratedAttribute]
public string get_MethodTableString();
    [CompilerGeneratedAttribute]
public void set_MethodTableString(string value);
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> get_MethodTable();
    [CompilerGeneratedAttribute]
private void set_MethodTable(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_StatOnly();
    [CompilerGeneratedAttribute]
public void set_StatOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Strings();
    [CompilerGeneratedAttribute]
public void set_Strings(bool value);
    [CompilerGeneratedAttribute]
public bool get_Short();
    [CompilerGeneratedAttribute]
public void set_Short(bool value);
    [CompilerGeneratedAttribute]
public ulong get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(ulong value);
    [CompilerGeneratedAttribute]
public bool get_Live();
    [CompilerGeneratedAttribute]
public void set_Live(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dead();
    [CompilerGeneratedAttribute]
public void set_Dead(bool value);
    [CompilerGeneratedAttribute]
public int get_GCHeap();
    [CompilerGeneratedAttribute]
public void set_GCHeap(int value);
    [CompilerGeneratedAttribute]
public string get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(string value);
    [CompilerGeneratedAttribute]
public bool get_ThinLock();
    [CompilerGeneratedAttribute]
public void set_ThinLock(bool value);
    [CompilerGeneratedAttribute]
public string get_Generation();
    [CompilerGeneratedAttribute]
public void set_Generation(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreGCState();
    [CompilerGeneratedAttribute]
public void set_IgnoreGCState(bool value);
    [CompilerGeneratedAttribute]
public String[] get_MemoryRange();
    [CompilerGeneratedAttribute]
public void set_MemoryRange(String[] value);
    [CompilerGeneratedAttribute]
private HeapWithFilters get_FilteredHeap();
    [CompilerGeneratedAttribute]
private void set_FilteredHeap(HeapWithFilters value);
    public virtual void Invoke();
    private void ParseArguments();
    [CompilerGeneratedAttribute]
private bool <Invoke>b__80_0(ClrObject obj);
    [CompilerGeneratedAttribute]
private bool <Invoke>b__80_1(ClrObject obj);
    [CompilerGeneratedAttribute]
private bool <Invoke>b__80_2(ClrObject obj);
    [CompilerGeneratedAttribute]
private bool <Invoke>b__80_3(ClrObject obj);
}
[ServiceExportAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpHeapService : object {
    private static ulong FragmentationBlockMinSize;
    private static char StringReplacementCharacter;
    [CompilerGeneratedAttribute]
private IConsoleService <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryService <Memory>k__BackingField;
    [ServiceImportAttribute]
public IConsoleService Console { get; public set; }
    [ServiceImportAttribute]
public IMemoryService Memory { get; public set; }
    [CompilerGeneratedAttribute]
public IConsoleService get_Console();
    [CompilerGeneratedAttribute]
public void set_Console(IConsoleService value);
    [CompilerGeneratedAttribute]
public IMemoryService get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(IMemoryService value);
    public void PrintHeap(IEnumerable`1<ClrObject> objects, DisplayKind displayKind, bool statsOnly, bool printFragmentation);
    private void PrintFragmentation(List`1<ValueTuple`2<ClrObject, ClrObject>> fragmentation);
    private string Sanitize(string str, int maxLen);
    [CompilerGeneratedAttribute]
internal static string <Sanitize>g__FilterString|13_0(string str, int maxLen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpHttpCommand : ClrRuntimeCommandBase {
    private static String[] s_httpMethodFieldNames;
    private static String[] s_methodFieldNames;
    private static String[] s_requestMessageFieldNames;
    private static String[] s_statusCodeFieldNames;
    private static String[] s_requestUriFieldNames;
    private static String[] s_uriStringFieldNames;
    [CompilerGeneratedAttribute]
private bool <Summarize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pending>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Completed>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private HeapWithFilters <FilteredHeap>k__BackingField;
    private static Column s_httpMethodColumn;
    private static Column s_statusCodeColumn;
    [OptionAttribute]
public bool Summarize { get; public set; }
    [OptionAttribute]
public bool Pending { get; public set; }
    [OptionAttribute]
public bool Completed { get; public set; }
    [NullableAttribute("2")]
[OptionAttribute]
public string Uri { get; public set; }
    [OptionAttribute]
public Nullable`1<int> StatusCode { get; public set; }
    [NullableAttribute("2")]
private HeapWithFilters FilteredHeap { get; private set; }
    private static DumpHttpCommand();
    [CompilerGeneratedAttribute]
public bool get_Summarize();
    [CompilerGeneratedAttribute]
public void set_Summarize(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pending();
    [CompilerGeneratedAttribute]
public void set_Pending(bool value);
    [CompilerGeneratedAttribute]
public bool get_Completed();
    [CompilerGeneratedAttribute]
public void set_Completed(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Uri();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<int> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private HeapWithFilters get_FilteredHeap();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_FilteredHeap(HeapWithFilters value);
    public virtual void Invoke();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.DumpHttpCommand/<CollectHttpRequests>d__33")]
private IEnumerable`1<HttpRequestInfo> CollectHttpRequests();
    private static HttpRequestInfo BuildRequest(ClrObject request, Nullable`1<ClrObject> response);
    private static string GetHttpMethod(ClrObject request);
    private static string GetRequestUri(ClrObject request);
    [NullableContextAttribute("0")]
private static T ReadAnyField(ClrObject clrObject, String[] fieldNames, string errorMessage);
    private static ClrObject ReadAnyObjectField(ClrObject clrObject, String[] fieldNames, string errorMessage);
    private static string BuildMissingFieldMessage(ClrObject clrObject, String[] fieldNames, string errorMessage);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.DumpHttpCommand/<FilterDuplicates>d__40")]
private static IEnumerable`1<HttpRequestInfo> FilterDuplicates(IEnumerable`1<HttpRequestInfo> requests);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.DumpHttpCommand/<FilterByOptions>d__41")]
private IEnumerable`1<HttpRequestInfo> FilterByOptions(IEnumerable`1<HttpRequestInfo> requests);
    private void ParseArguments();
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
    [CompilerGeneratedAttribute]
private void <Invoke>g__RenderStats|32_0(<>c__DisplayClass32_0& );
    [CompilerGeneratedAttribute]
private void <Invoke>g__RenderRequests|32_1(<>c__DisplayClass32_0& );
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpObjGCRefsCommand : ClrRuntimeCommandBase {
    private StringBuilderPool _stringBuilderPool;
    [CompilerGeneratedAttribute]
private string <ObjectAddress>k__BackingField;
    [ArgumentAttribute]
public string ObjectAddress { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectAddress();
    [CompilerGeneratedAttribute]
public void set_ObjectAddress(string value);
    public virtual void Invoke();
    private string GetFieldName(ClrReference objRef);
    [CompilerGeneratedAttribute]
private string <Invoke>b__5_0(ClrReference r);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpRequestsCommand : ClrRuntimeCommandBase {
    public virtual void Invoke();
    public void PrintRequests(List`1<ValueTuple`4<ulong, string, string, string>> requests);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpRuntimeTypeCommand : ClrRuntimeCommandBase {
    public virtual void Invoke();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.DumpStackObjectsCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [CompilerGeneratedAttribute]
private IThread <CurrentThread>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreadService <ThreadService>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verify>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Bounds>k__BackingField;
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [ServiceImportAttribute]
public IThread CurrentThread { get; public set; }
    [ServiceImportAttribute]
public IThreadService ThreadService { get; public set; }
    [OptionAttribute]
public bool Verify { get; public set; }
    [ArgumentAttribute]
public String[] Bounds { get; public set; }
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    [CompilerGeneratedAttribute]
public IThread get_CurrentThread();
    [CompilerGeneratedAttribute]
public void set_CurrentThread(IThread value);
    [CompilerGeneratedAttribute]
public IThreadService get_ThreadService();
    [CompilerGeneratedAttribute]
public void set_ThreadService(IThreadService value);
    [CompilerGeneratedAttribute]
public bool get_Verify();
    [CompilerGeneratedAttribute]
public void set_Verify(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(String[] value);
    public virtual void Invoke();
    private void PrintStackObjects(MemoryRange stack);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.DumpStackObjectsCommand/<EnumerateValidObjectsWithinRange>d__22")]
private IEnumerable`1<ValueTuple`2<ulong, ClrObject>> EnumerateValidObjectsWithinRange(MemoryRange range);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.DumpStackObjectsCommand/<EnumerateObjectsOnSegment>d__23")]
private IEnumerable`1<ValueTuple`2<ulong, ClrObject>> EnumerateObjectsOnSegment(List`1<ValueTuple`2<ulong, ulong>> withinCurrSegment, ClrSegment segment);
    private ClrSegment GetSegment(ulong potentialObject, Int32& segmentIndex);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.DumpStackObjectsCommand/<EnumerateRegistersWithinHeapBounds>d__25")]
private IEnumerable`1<ValueTuple`2<ulong, ulong>> EnumerateRegistersWithinHeapBounds();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.DumpStackObjectsCommand/<EnumeratePointersWithinHeapBounds>d__26")]
private IEnumerable`1<ValueTuple`2<ulong, ulong>> EnumeratePointersWithinHeapBounds(MemoryRange stack);
    private static ulong GetIndex(Span`1<byte> buffer, int i);
    private MemoryRange GetStackRange();
    private ulong AlignDown(ulong address);
    private int AlignDown(int value);
    private ulong AlignUp(ulong address);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.EEHeapCommand : ClrRuntimeCommandBase {
    private static string CommandName;
    [CompilerGeneratedAttribute]
private HeapWithFilters <HeapWithFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGC>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GCHeap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MemoryRange>k__BackingField;
    private HeapWithFilters HeapWithFilters { get; private set; }
    private string TotalString { get; }
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [OptionAttribute]
public bool ShowGC { get; public set; }
    [OptionAttribute]
public bool ShowLoader { get; public set; }
    [OptionAttribute]
public int GCHeap { get; public set; }
    [OptionAttribute]
public string Segment { get; public set; }
    [ArgumentAttribute]
public String[] MemoryRange { get; public set; }
    [CompilerGeneratedAttribute]
private HeapWithFilters get_HeapWithFilters();
    [CompilerGeneratedAttribute]
private void set_HeapWithFilters(HeapWithFilters value);
    private string get_TotalString();
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    [CompilerGeneratedAttribute]
public bool get_ShowGC();
    [CompilerGeneratedAttribute]
public void set_ShowGC(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowLoader();
    [CompilerGeneratedAttribute]
public void set_ShowLoader(bool value);
    [CompilerGeneratedAttribute]
public int get_GCHeap();
    [CompilerGeneratedAttribute]
public void set_GCHeap(int value);
    [CompilerGeneratedAttribute]
public string get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(string value);
    [CompilerGeneratedAttribute]
public String[] get_MemoryRange();
    [CompilerGeneratedAttribute]
public void set_MemoryRange(String[] value);
    public virtual void Invoke();
    private ulong PrintOneRuntime(ClrRuntime clrRuntime);
    private ulong PrintAppDomains(Table output, ClrRuntime clrRuntime, HashSet`1<ulong> loaderAllocatorsSeen);
    private ulong PrintAppDomain(Table output, ClrAppDomain appDomain, string name, HashSet`1<ulong> loaderAllocatorsSeen);
    private static int GetSortOrder(NativeHeapKind key);
    private ulong PrintAppDomainHeapsByKind(Table output, IOrderedEnumerable`1<IGrouping`2<NativeHeapKind, ClrNativeHeapInfo>> filteredHeapsByKind);
    private ulong PrintCodeHeaps(Table output, ClrRuntime clrRuntime);
    private bool IsIncludedInFilter(ClrNativeHeapInfo info);
    private ValueTuple`2<ulong, ulong> CalculateSizeAndWasted(StringBuilder sb, ClrNativeHeapInfo heap);
    private ulong PrintModuleThunkTable(Table output, StringBuilder& text, ClrRuntime clrRuntime);
    private ulong PrintModuleLoaderAllocators(Table output, StringBuilder& text, ClrRuntime clrRuntime, HashSet`1<ulong> loaderAllocatorsSeen);
    private ulong PrintModules(Table output, StringBuilder& text, IEnumerable`1<ClrModule> modules);
    private static void WriteSizeAndWasted(StringBuilder sb, ulong heapSize, ulong heapWasted);
    private ulong GetActualSize(ulong address, ulong size);
    private ulong PrintGCHeap(ClrRuntime clrRuntime);
    private static void WriteSegmentHeader(Table gcOutput);
    private static void WriteSegment(Table gcOutput, ClrSegment segment);
    private static string FormatMemorySize(ulong length, string zeroValue);
    private void WriteDivider(char c, int width);
}
[ExtensionAttribute]
internal static class Microsoft.Diagnostics.ExtensionCommands.ExtensionMethodHelpers : object {
    [ExtensionAttribute]
public static string ConvertToHumanReadable(ulong totalBytes);
    [ExtensionAttribute]
public static string ConvertToHumanReadable(long totalBytes);
    [ExtensionAttribute]
public static string ConvertToHumanReadable(double totalBytes);
    [ExtensionAttribute]
public static string ToSignedHexString(int offset);
    [ExtensionAttribute]
internal static ulong FindMostCommonPointer(IEnumerable`1<ulong> enumerable);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.FinalizeQueueCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private bool <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllReady>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Short>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodTable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Stat>k__BackingField;
    [CompilerGeneratedAttribute]
private LiveObjectService <LiveObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private RootCacheService <RootCache>k__BackingField;
    [CompilerGeneratedAttribute]
private DumpHeapService <DumpHeap>k__BackingField;
    [OptionAttribute]
public bool Detail { get; public set; }
    [OptionAttribute]
public bool AllReady { get; public set; }
    [OptionAttribute]
public bool Short { get; public set; }
    [OptionAttribute]
public string MethodTable { get; public set; }
    [OptionAttribute]
public bool Stat { get; public set; }
    [ServiceImportAttribute]
public LiveObjectService LiveObjects { get; public set; }
    [ServiceImportAttribute]
public RootCacheService RootCache { get; public set; }
    [ServiceImportAttribute]
public DumpHeapService DumpHeap { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllReady();
    [CompilerGeneratedAttribute]
public void set_AllReady(bool value);
    [CompilerGeneratedAttribute]
public bool get_Short();
    [CompilerGeneratedAttribute]
public void set_Short(bool value);
    [CompilerGeneratedAttribute]
public string get_MethodTable();
    [CompilerGeneratedAttribute]
public void set_MethodTable(string value);
    [CompilerGeneratedAttribute]
public bool get_Stat();
    [CompilerGeneratedAttribute]
public void set_Stat(bool value);
    [CompilerGeneratedAttribute]
public LiveObjectService get_LiveObjects();
    [CompilerGeneratedAttribute]
public void set_LiveObjects(LiveObjectService value);
    [CompilerGeneratedAttribute]
public RootCacheService get_RootCache();
    [CompilerGeneratedAttribute]
public void set_RootCache(RootCacheService value);
    [CompilerGeneratedAttribute]
public DumpHeapService get_DumpHeap();
    [CompilerGeneratedAttribute]
public void set_DumpHeap(DumpHeapService value);
    public virtual void Invoke();
    private IEnumerable`1<ClrObject> EnumerateFinalizableObjects(bool allReady, ulong mt);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.FinalizeQueueCommand/<EnumerateValidFinalizableObjectsWithTypeFilter>d__34")]
private IEnumerable`1<ClrObject> EnumerateValidFinalizableObjectsWithTypeFilter(ulong mt);
    private void PrintSyncBlockCleanupData();
    private void PrintRcwCleanupData();
    private void PrintGenerationalRanges();
    private void WriteGeneration(ClrSubHeap heap, int gen);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.FindEphemeralReferencesToLOHCommand : ClrRuntimeCommandBase {
    private IComparer`1<ValueTuple`2<ClrObject, ClrObject>> _firstObjectComparer;
    public virtual void Invoke();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.FindEphemeralReferencesToLOHCommand/<FindEphemeralToLOH>d__2")]
private IEnumerable`1<ValueTuple`2<ClrObject, ClrObject>> FindEphemeralToLOH();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.FindEphemeralReferencesToLOHCommand/<FindLOHToEphemeral>d__3")]
private IEnumerable`1<ValueTuple`2<ClrObject, ClrObject>> FindLOHToEphemeral();
    private Generation GetGenerationWithoutSegment(ClrObject obj);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.FindPointersInCommand : CommandBase {
    [CompilerGeneratedAttribute]
private IModuleService <ModuleService>k__BackingField;
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private NativeAddressHelper <AddressHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAllObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Regions>k__BackingField;
    private static string VtableConst;
    [ServiceImportAttribute]
public IModuleService ModuleService { get; public set; }
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    [ServiceImportAttribute]
public NativeAddressHelper AddressHelper { get; public set; }
    [OptionAttribute]
public bool ShowAllObjects { get; public set; }
    [ArgumentAttribute]
public String[] Regions { get; public set; }
    private int Width { get; }
    [CompilerGeneratedAttribute]
public IModuleService get_ModuleService();
    [CompilerGeneratedAttribute]
public void set_ModuleService(IModuleService value);
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    [CompilerGeneratedAttribute]
public NativeAddressHelper get_AddressHelper();
    [CompilerGeneratedAttribute]
public void set_AddressHelper(NativeAddressHelper value);
    [CompilerGeneratedAttribute]
public bool get_ShowAllObjects();
    [CompilerGeneratedAttribute]
public void set_ShowAllObjects(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Regions();
    [CompilerGeneratedAttribute]
public void set_Regions(String[] value);
    private int get_Width();
    public virtual void Invoke();
    [FilterInvokeAttribute]
public static bool FilterInvoke(ClrRuntime runtime, NativeAddressHelper helper);
    private void PrintPointers(bool pinnedOnly, String[] memTypes);
    private void WriteTables(MemoryWalkContext ctx, RegionPointers result, bool truncate);
    private void WriteMemoryHeaderLine(DescribedRegion mem);
    private void PrintGCPointerTable(RegionPointers result);
    private void WriteUnresolvablePointerTable(RegionPointers result, bool forceTruncate);
    private void WriteResolvablePointerTable(MemoryWalkContext ctx, RegionPointers result, bool forceTruncate);
    private void PrintPointerTable(string nameColumn, string truncatedName, bool forceTruncate, IEnumerable`1<ValueTuple`4<string, int, int, IEnumerable`1<ulong>>> query);
    private static string FixTypeName(string typeName, HashSet`1<int> offsets);
    private RegionPointers ProcessOneRegion(bool pinnedOnly, IEnumerable`1<ValueTuple`2<ulong, DescribedRegion>> pointersFound, MemoryWalkContext ctx);
    private MemoryWalkContext CreateMemoryWalkContext();
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.FindReferencesToEphemeralCommand : ClrRuntimeCommandBase {
    private HashSet`1<ulong> _referenced;
    private ulong _referencedSize;
    public virtual void Invoke();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.FindReferencesToEphemeralCommand/<FindObjectsWithEphemeralReferences>d__3")]
private IEnumerable`1<EphemeralRefCount> FindObjectsWithEphemeralReferences();
}
public enum Microsoft.Diagnostics.ExtensionCommands.GCGeneration : Enum {
    public int value__;
    public static GCGeneration NotSet;
    public static GCGeneration Generation0;
    public static GCGeneration Generation1;
    public static GCGeneration Generation2;
    public static GCGeneration LargeObjectHeap;
    public static GCGeneration PinnedObjectHeap;
    public static GCGeneration FrozenObjectHeap;
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.GCHeapStatCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private LiveObjectService <LiveObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeUnreachable>k__BackingField;
    [ServiceImportAttribute]
public LiveObjectService LiveObjects { get; public set; }
    [OptionAttribute]
public bool IncludeUnreachable { get; public set; }
    [CompilerGeneratedAttribute]
public LiveObjectService get_LiveObjects();
    [CompilerGeneratedAttribute]
public void set_LiveObjects(LiveObjectService value);
    [CompilerGeneratedAttribute]
public bool get_IncludeUnreachable();
    [CompilerGeneratedAttribute]
public void set_IncludeUnreachable(bool value);
    public virtual void Invoke();
    private static void WriteHeader(Table output, HeapInfo[] heaps, bool printFrozen);
    private static void WriteRow(Table output, HeapInfo heapInfo, Func`2<GenerationInfo, object> select, bool printFrozen, bool printPercentage, bool footer);
    private static ulong GetValue(object value);
    private static HeapInfo GetTotal(HeapInfo[] heaps);
    private HeapInfo GetHeapInfo(ClrSubHeap heap);
    [CompilerGeneratedAttribute]
private HeapInfo <Invoke>b__8_0(ClrSubHeap h);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.GCRootCommand : ClrRuntimeCommandBase {
    private StringBuilder _lineBuilder;
    private ClrRoot _lastRoot;
    [CompilerGeneratedAttribute]
private IMemoryService <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private RootCacheService <RootCache>k__BackingField;
    [CompilerGeneratedAttribute]
private StaticVariableService <StaticVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedFileLineService <FileLineService>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AsGCGeneration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoStacks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Limit>k__BackingField;
    [ServiceImportAttribute]
public IMemoryService Memory { get; public set; }
    [ServiceImportAttribute]
public RootCacheService RootCache { get; public set; }
    [ServiceImportAttribute]
public StaticVariableService StaticVariables { get; public set; }
    [ServiceImportAttribute]
public ManagedFileLineService FileLineService { get; public set; }
    [OptionAttribute]
public Nullable`1<int> AsGCGeneration { get; public set; }
    [OptionAttribute]
public bool NoStacks { get; public set; }
    [ArgumentAttribute]
public string TargetAddress { get; public set; }
    [OptionAttribute]
public Nullable`1<int> Limit { get; public set; }
    [CompilerGeneratedAttribute]
public IMemoryService get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(IMemoryService value);
    [CompilerGeneratedAttribute]
public RootCacheService get_RootCache();
    [CompilerGeneratedAttribute]
public void set_RootCache(RootCacheService value);
    [CompilerGeneratedAttribute]
public StaticVariableService get_StaticVariables();
    [CompilerGeneratedAttribute]
public void set_StaticVariables(StaticVariableService value);
    [CompilerGeneratedAttribute]
public ManagedFileLineService get_FileLineService();
    [CompilerGeneratedAttribute]
public void set_FileLineService(ManagedFileLineService value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AsGCGeneration();
    [CompilerGeneratedAttribute]
public void set_AsGCGeneration(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_NoStacks();
    [CompilerGeneratedAttribute]
public void set_NoStacks(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetAddress();
    [CompilerGeneratedAttribute]
public void set_TargetAddress(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(Nullable`1<int> value);
    public virtual void Invoke();
    private int PrintOlderGenerationRoots(GCRoot gcroot, int gen, int limit);
    private int PrintAllRoots(GCRoot gcroot, int limit);
    private int PrintNonStackRoots(GCRoot gcroot, int limit);
    private void PrintPath(ClrRoot root, ChainLink link);
    public static void PrintPath(IConsoleService console, RootCacheService rootCache, StaticVariableService statics, ClrHeap heap, ChainLink link);
    private void PrintRoot(ClrRoot root);
    private static string NameForHandle(ClrHandleKind handleKind);
    private string GetFrameOutput(ClrStackFrame currFrame);
    private string GetRegisterOutput(ClrStackRoot stackRoot);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.GCToNativeCommand : CommandBase {
    [CompilerGeneratedAttribute]
private String[] <MemoryTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAll>k__BackingField;
    [CompilerGeneratedAttribute]
private NativeAddressHelper <AddressHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [ArgumentAttribute]
public String[] MemoryTypes { get; public set; }
    [OptionAttribute]
public bool ShowAll { get; public set; }
    [ServiceImportAttribute]
public NativeAddressHelper AddressHelper { get; public set; }
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    private int Width { get; }
    [CompilerGeneratedAttribute]
public String[] get_MemoryTypes();
    [CompilerGeneratedAttribute]
public void set_MemoryTypes(String[] value);
    [CompilerGeneratedAttribute]
public bool get_ShowAll();
    [CompilerGeneratedAttribute]
public void set_ShowAll(bool value);
    [CompilerGeneratedAttribute]
public NativeAddressHelper get_AddressHelper();
    [CompilerGeneratedAttribute]
public void set_AddressHelper(NativeAddressHelper value);
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    private int get_Width();
    public virtual void Invoke();
    [FilterInvokeAttribute]
public static bool FilterInvoke(ClrRuntime runtime, NativeAddressHelper helper);
    public void PrintGCPointersToMemory(bool showAll, String[] memoryTypes);
    private static ValueTuple`2<int, ulong> GetSizes(Dictionary`2<ulong, KnownClrMemoryPointer> knownMemory, Dictionary`2<ulong, int> sizeHints);
    private void WriteHeader(string header);
    private string CollapseGenerics(string typeName);
    private static ulong GetSize(Dictionary`2<ulong, int> sizeHints, KnownClrMemoryPointer k);
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.GCWhereCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [ArgumentAttribute]
public string Address { get; public set; }
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    public virtual void Invoke();
    private IEnumerable`1<ClrSegment> FindSegments(ulong address);
}
internal class Microsoft.Diagnostics.ExtensionCommands.HeapWithFilters : object {
    private Nullable`1<int> _gcheap;
    private ClrHeap _heap;
    [CompilerGeneratedAttribute]
private Nullable`1<MemoryRange> <MemoryRange>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowIfNoMatchingGCRegions>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MinimumObjectSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MaximumObjectSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Generation> <Generation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<ClrSegment>, IOrderedEnumerable`1<ClrSegment>> <SortSegments>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<ClrSubHeap>, IOrderedEnumerable`1<ClrSubHeap>> <SortSubHeaps>k__BackingField;
    public bool HasFilters { get; }
    public Nullable`1<MemoryRange> MemoryRange { get; public set; }
    public Nullable`1<ulong> Segment { get; public set; }
    public Nullable`1<int> GCHeap { get; public set; }
    public bool ThrowIfNoMatchingGCRegions { get; public set; }
    public ulong MinimumObjectSize { get; public set; }
    public ulong MaximumObjectSize { get; public set; }
    public Nullable`1<Generation> Generation { get; public set; }
    public Func`2<IEnumerable`1<ClrSegment>, IOrderedEnumerable`1<ClrSegment>> SortSegments { get; public set; }
    public Func`2<IEnumerable`1<ClrSubHeap>, IOrderedEnumerable`1<ClrSubHeap>> SortSubHeaps { get; public set; }
    public HeapWithFilters(ClrHeap heap);
    public bool get_HasFilters();
    [CompilerGeneratedAttribute]
public Nullable`1<MemoryRange> get_MemoryRange();
    [CompilerGeneratedAttribute]
public void set_MemoryRange(Nullable`1<MemoryRange> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(Nullable`1<ulong> value);
    public Nullable`1<int> get_GCHeap();
    public void set_GCHeap(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_ThrowIfNoMatchingGCRegions();
    [CompilerGeneratedAttribute]
public void set_ThrowIfNoMatchingGCRegions(bool value);
    [CompilerGeneratedAttribute]
public ulong get_MinimumObjectSize();
    [CompilerGeneratedAttribute]
public void set_MinimumObjectSize(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_MaximumObjectSize();
    [CompilerGeneratedAttribute]
public void set_MaximumObjectSize(ulong value);
    [CompilerGeneratedAttribute]
public Nullable`1<Generation> get_Generation();
    [CompilerGeneratedAttribute]
public void set_Generation(Nullable`1<Generation> value);
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<ClrSegment>, IOrderedEnumerable`1<ClrSegment>> get_SortSegments();
    [CompilerGeneratedAttribute]
public void set_SortSegments(Func`2<IEnumerable`1<ClrSegment>, IOrderedEnumerable`1<ClrSegment>> value);
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<ClrSubHeap>, IOrderedEnumerable`1<ClrSubHeap>> get_SortSubHeaps();
    [CompilerGeneratedAttribute]
public void set_SortSubHeaps(Func`2<IEnumerable`1<ClrSubHeap>, IOrderedEnumerable`1<ClrSubHeap>> value);
    public void FilterBySegmentHex(ulong segment);
    public void FilterByStringMemoryRange(String[] memoryRange, string commandName);
    public void FilterByHexMemoryRange(string startStr, string endStr);
    public IEnumerable`1<ClrSubHeap> EnumerateFilteredSubHeaps();
    public IEnumerable`1<ClrSegment> EnumerateFilteredSegments();
    public IEnumerable`1<ClrSegment> EnumerateFilteredSegments(ClrSubHeap subheap);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.HeapWithFilters/<EnumerateFilteredObjects>d__46")]
public IEnumerable`1<ClrObject> EnumerateFilteredObjects(CancellationToken cancellation);
    [CompilerGeneratedAttribute]
private bool <FilterByHexMemoryRange>b__42_0(ClrSegment seg);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.HelpCommand : CommandBase {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommandService <CommandService>k__BackingField;
    [ArgumentAttribute]
public string Command { get; public set; }
    [ServiceImportAttribute]
public ICommandService CommandService { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public ICommandService get_CommandService();
    [CompilerGeneratedAttribute]
public void set_CommandService(ICommandService value);
    public virtual void Invoke();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.ListNearObjCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [ArgumentAttribute]
public string Address { get; public set; }
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    public virtual void Invoke();
    private void CheckEndOfSegment(ClrSegment segment, ulong expectedNextObject, ulong prevObjectAddress, Boolean& localConsistency, Boolean& foundLastObject);
    private MemoryRange PrintGapIfExists(Table output, ClrSegment segment, MemoryRange[] segAllocContexts, MemoryRange objectDistance);
    private static string FormatRange(MemoryRange range);
    private ulong AlignObj(ulong size, ClrSegment seg);
    private bool VerifyAndPrintObject(Table output, string which, ClrHeap heap, ClrSegment segment, ClrObject obj);
    private static string FormatSize(ulong size);
}
[ServiceExportAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.LiveObjectService : object {
    private HashSet`1<ulong> _liveObjs;
    [CompilerGeneratedAttribute]
private int <UpdateSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private RootCacheService <RootCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsoleService <Console>k__BackingField;
    public int UpdateSeconds { get; public set; }
    public bool PrintWarning { get; public set; }
    [ServiceImportAttribute]
public RootCacheService RootCache { get; public set; }
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    [ServiceImportAttribute]
public IConsoleService Console { get; public set; }
    [CompilerGeneratedAttribute]
public int get_UpdateSeconds();
    [CompilerGeneratedAttribute]
public void set_UpdateSeconds(int value);
    [CompilerGeneratedAttribute]
public bool get_PrintWarning();
    [CompilerGeneratedAttribute]
public void set_PrintWarning(bool value);
    [CompilerGeneratedAttribute]
public RootCacheService get_RootCache();
    [CompilerGeneratedAttribute]
public void set_RootCache(RootCacheService value);
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    [CompilerGeneratedAttribute]
public IConsoleService get_Console();
    [CompilerGeneratedAttribute]
public void set_Console(IConsoleService value);
    public bool IsLive(ClrObject obj);
    public bool IsLive(ulong obj);
    public void Initialize();
    private HashSet`1<ulong> CreateObjectSet();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.LoggingCommand : CommandBase {
    [CompilerGeneratedAttribute]
private IDiagnosticLoggingService <DiagnosticLoggingService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disable>k__BackingField;
    [ServiceImportAttribute]
public IDiagnosticLoggingService DiagnosticLoggingService { get; public set; }
    [ArgumentAttribute]
public string FilePath { get; public set; }
    [OptionAttribute]
public bool Enable { get; public set; }
    [OptionAttribute]
public bool Disable { get; public set; }
    [CompilerGeneratedAttribute]
public IDiagnosticLoggingService get_DiagnosticLoggingService();
    [CompilerGeneratedAttribute]
public void set_DiagnosticLoggingService(IDiagnosticLoggingService value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_Enable();
    [CompilerGeneratedAttribute]
public void set_Enable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disable();
    [CompilerGeneratedAttribute]
public void set_Disable(bool value);
    public virtual void Invoke();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.MAddressCommand : CommandBase {
    private static string ImagesFlag;
    private static string SummaryFlag;
    private static string ReserveFlag;
    private static string ReserveHeuristicFlag;
    private static string ForceHandleTableFlag;
    private static string ListFlag;
    private static string BySizeFlag;
    [CompilerGeneratedAttribute]
private bool <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowImageTable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeReserveMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TagReserveMemoryHeuristically>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeHandleTableIfSlow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BySize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <List>k__BackingField;
    [CompilerGeneratedAttribute]
private NativeAddressHelper <AddressHelper>k__BackingField;
    [OptionAttribute]
public bool Summary { get; public set; }
    [OptionAttribute]
public bool ShowImageTable { get; public set; }
    [OptionAttribute]
public bool IncludeReserveMemory { get; public set; }
    [OptionAttribute]
public bool TagReserveMemoryHeuristically { get; public set; }
    [OptionAttribute]
public bool IncludeHandleTableIfSlow { get; public set; }
    [OptionAttribute]
public bool BySize { get; public set; }
    [OptionAttribute]
public string List { get; public set; }
    [ServiceImportAttribute]
public NativeAddressHelper AddressHelper { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowImageTable();
    [CompilerGeneratedAttribute]
public void set_ShowImageTable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeReserveMemory();
    [CompilerGeneratedAttribute]
public void set_IncludeReserveMemory(bool value);
    [CompilerGeneratedAttribute]
public bool get_TagReserveMemoryHeuristically();
    [CompilerGeneratedAttribute]
public void set_TagReserveMemoryHeuristically(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeHandleTableIfSlow();
    [CompilerGeneratedAttribute]
public void set_IncludeHandleTableIfSlow(bool value);
    [CompilerGeneratedAttribute]
public bool get_BySize();
    [CompilerGeneratedAttribute]
public void set_BySize(bool value);
    [CompilerGeneratedAttribute]
public string get_List();
    [CompilerGeneratedAttribute]
public void set_List(string value);
    [CompilerGeneratedAttribute]
public NativeAddressHelper get_AddressHelper();
    [CompilerGeneratedAttribute]
public void set_AddressHelper(NativeAddressHelper value);
    public virtual void Invoke();
    [FilterInvokeAttribute]
public static bool FilterInvoke(NativeAddressHelper helper);
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
}
[ServiceExportAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.ManagedFileLineService : object {
    private Dictionary`2<ClrModule, ISymbolFile> _cache;
    [CompilerGeneratedAttribute]
private ISymbolService <SymbolService>k__BackingField;
    [CompilerGeneratedAttribute]
private IModuleService <ModuleService>k__BackingField;
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [ServiceImportAttribute]
public ISymbolService SymbolService { get; public set; }
    [ServiceImportAttribute]
public IModuleService ModuleService { get; public set; }
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    [CompilerGeneratedAttribute]
public ISymbolService get_SymbolService();
    [CompilerGeneratedAttribute]
public void set_SymbolService(ISymbolService value);
    [CompilerGeneratedAttribute]
public IModuleService get_ModuleService();
    [CompilerGeneratedAttribute]
public void set_ModuleService(IModuleService value);
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    public ValueTuple`2<string, int> GetSourceFromManagedMethod(ClrMethod method, ulong ip);
    private ISymbolFile GetSymbolForClrModule(ClrModule clrModule);
    private static int GetILOffsetForNativeOffset(ClrMethod method, ulong ip);
    private static ulong GetDistance(ILToNativeMap entry, ulong nativeOffset);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.ModulesCommand : CommandBase {
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ITarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IModuleService <ModuleService>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [OptionAttribute]
public bool Verbose { get; public set; }
    [OptionAttribute]
public bool Segment { get; public set; }
    [OptionAttribute]
public bool Resources { get; public set; }
    [OptionAttribute]
public string ModuleName { get; public set; }
    [OptionAttribute]
public Nullable`1<ulong> Address { get; public set; }
    [ServiceImportAttribute]
public ITarget Target { get; public set; }
    [ServiceImportAttribute]
public IModuleService ModuleService { get; public set; }
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(bool value);
    [CompilerGeneratedAttribute]
public bool get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(bool value);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public ITarget get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(ITarget value);
    [CompilerGeneratedAttribute]
public IModuleService get_ModuleService();
    [CompilerGeneratedAttribute]
public void set_ModuleService(IModuleService value);
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    public virtual void Invoke();
    private void DisplayModule(IModule module);
    private void DisplaySegments(IModule module);
}
public class Microsoft.Diagnostics.ExtensionCommands.MonoColorConsoleRenderer : RendererBase {
    private IConsoleService _console;
    public MonoColorConsoleRenderer(IConsoleService console, int limit);
    public virtual void Write(string text);
    public virtual void WriteCount(string count);
    public virtual void WriteNamespace(string ns);
    public virtual void WriteType(string type);
    public virtual void WriteSeparator(string separator);
    public virtual void WriteDark(string separator);
    public virtual void WriteMethod(string method);
    public virtual void WriteMethodType(string type);
    public virtual void WriteFrameSeparator(string text);
    public virtual string FormatTheadId(UInt32 threadID);
    private void Output(string text);
}
public class Microsoft.Diagnostics.ExtensionCommands.NativeAddressHelper : object {
    private IDisposable _onFlushEvent;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<ValueTuple`4<bool, bool, bool, bool>, DescribedRegion[]> _previous;
    [CompilerGeneratedAttribute]
private ITarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryRegionService <MemoryRegionService>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreadService <ThreadService>k__BackingField;
    [CompilerGeneratedAttribute]
private IRuntimeService <RuntimeService>k__BackingField;
    [CompilerGeneratedAttribute]
private IModuleService <ModuleService>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsoleService <Console>k__BackingField;
    public ITarget Target { get; }
    public IMemoryRegionService MemoryRegionService { get; }
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [ServiceImportAttribute]
public IThreadService ThreadService { get; public set; }
    [ServiceImportAttribute]
public IRuntimeService RuntimeService { get; public set; }
    [ServiceImportAttribute]
public IModuleService ModuleService { get; public set; }
    [ServiceImportAttribute]
public IConsoleService Console { get; public set; }
    private NativeAddressHelper(ITarget target, IMemoryRegionService memoryRegionService);
    [ServiceExportAttribute]
public static NativeAddressHelper TryCreate(ITarget target, IMemoryRegionService memoryRegionService);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public ITarget get_Target();
    [CompilerGeneratedAttribute]
public IMemoryRegionService get_MemoryRegionService();
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    [CompilerGeneratedAttribute]
public IThreadService get_ThreadService();
    [CompilerGeneratedAttribute]
public void set_ThreadService(IThreadService value);
    [CompilerGeneratedAttribute]
public IRuntimeService get_RuntimeService();
    [CompilerGeneratedAttribute]
public void set_RuntimeService(IRuntimeService value);
    [CompilerGeneratedAttribute]
public IModuleService get_ModuleService();
    [CompilerGeneratedAttribute]
public void set_ModuleService(IModuleService value);
    [CompilerGeneratedAttribute]
public IConsoleService get_Console();
    [CompilerGeneratedAttribute]
public void set_Console(IConsoleService value);
    public IEnumerable`1<DescribedRegion> EnumerateAddressSpace(bool tagClrMemoryRanges, bool includeReserveMemory, bool tagReserveMemoryHeuristically, bool includeHandleTableIfSlow);
    private DescribedRegion[] EnumerateAddressSpaceWorker(bool tagClrMemoryRanges, bool includeReserveMemory, bool tagReserveMemoryHeuristically, bool includeHandleTableIfSlow);
    private void AssignKindIfAppropriate(ValueTuple`3<ulong, ulong, ClrMemoryKind> mem, DescribedRegion region);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.NativeAddressHelper/<EnumerateClrMemoryAddresses>d__34")]
private static IEnumerable`1<ValueTuple`3<ulong, ulong, ClrMemoryKind>> EnumerateClrMemoryAddresses(ClrRuntime runtime, RootCacheService rootCache, bool includeHandleTableIfSlow);
    private static void SetRegionKindWithWarning(ValueTuple`3<ulong, ulong, ClrMemoryKind> mem, DescribedRegion region);
    private void MarkStackSpace(DescribedRegion[] ranges);
    private static DescribedRegion FindMemory(DescribedRegion[] ranges, ulong ptr);
    internal static void CollapseReserveRegions(DescribedRegion[] ranges);
    private static DescribedRegion TagMemoryRecursive(DescribedRegion mem, DescribedRegion[] ranges);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.NativeAddressHelper/<EnumerateRegionPointers>d__40")]
internal IEnumerable`1<ValueTuple`3<ulong, ulong, DescribedRegion>> EnumerateRegionPointers(ulong start, ulong end, DescribedRegion[] ranges);
    private bool ReadMemory(ulong start, UInt64[] array, int size, Int32& bytesRead);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
    [CompilerGeneratedAttribute]
private DescribedRegion <EnumerateAddressSpaceWorker>b__32_1(IMemoryRegion region);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.NotReachableInRangeCommand : ClrRuntimeCommandBase {
    private HashSet`1<ulong> _nonFQLiveObjects;
    [CompilerGeneratedAttribute]
private LiveObjectService <LiveObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private RootCacheService <RootCache>k__BackingField;
    [CompilerGeneratedAttribute]
private DumpHeapService <DumpHeap>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryService <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Short>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoFinalizer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndAddress>k__BackingField;
    [ServiceImportAttribute]
public LiveObjectService LiveObjects { get; public set; }
    [ServiceImportAttribute]
public RootCacheService RootCache { get; public set; }
    [ServiceImportAttribute]
public DumpHeapService DumpHeap { get; public set; }
    [ServiceImportAttribute]
public IMemoryService Memory { get; public set; }
    [OptionAttribute]
public bool Short { get; public set; }
    [OptionAttribute]
public bool NoFinalizer { get; public set; }
    [ArgumentAttribute]
public string StartAddress { get; public set; }
    [ArgumentAttribute]
public string EndAddress { get; public set; }
    [CompilerGeneratedAttribute]
public LiveObjectService get_LiveObjects();
    [CompilerGeneratedAttribute]
public void set_LiveObjects(LiveObjectService value);
    [CompilerGeneratedAttribute]
public RootCacheService get_RootCache();
    [CompilerGeneratedAttribute]
public void set_RootCache(RootCacheService value);
    [CompilerGeneratedAttribute]
public DumpHeapService get_DumpHeap();
    [CompilerGeneratedAttribute]
public void set_DumpHeap(DumpHeapService value);
    [CompilerGeneratedAttribute]
public IMemoryService get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(IMemoryService value);
    [CompilerGeneratedAttribute]
public bool get_Short();
    [CompilerGeneratedAttribute]
public void set_Short(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoFinalizer();
    [CompilerGeneratedAttribute]
public void set_NoFinalizer(bool value);
    [CompilerGeneratedAttribute]
public string get_StartAddress();
    [CompilerGeneratedAttribute]
public void set_StartAddress(string value);
    [CompilerGeneratedAttribute]
public string get_EndAddress();
    [CompilerGeneratedAttribute]
public void set_EndAddress(string value);
    public virtual void Invoke();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.NotReachableInRangeCommand/<EnumerateLiveObjectsInRange>d__34")]
private IEnumerable`1<ClrObject> EnumerateLiveObjectsInRange(ulong end, ulong curr);
    private bool IsDead(ClrObject obj);
    private HashSet`1<ulong> GetNonFQLiveObjects();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.ObjSizeCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private DumpHeapService <DumpHeap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Short>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Stat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodTable>k__BackingField;
    [ServiceImportAttribute]
public DumpHeapService DumpHeap { get; public set; }
    [OptionAttribute]
public bool Short { get; public set; }
    [OptionAttribute]
public bool Strings { get; public set; }
    [OptionAttribute]
public bool Stat { get; public set; }
    [ArgumentAttribute]
public string ObjectAddress { get; public set; }
    [OptionAttribute]
public string MethodTable { get; public set; }
    [CompilerGeneratedAttribute]
public DumpHeapService get_DumpHeap();
    [CompilerGeneratedAttribute]
public void set_DumpHeap(DumpHeapService value);
    [CompilerGeneratedAttribute]
public bool get_Short();
    [CompilerGeneratedAttribute]
public void set_Short(bool value);
    [CompilerGeneratedAttribute]
public bool get_Strings();
    [CompilerGeneratedAttribute]
public void set_Strings(bool value);
    [CompilerGeneratedAttribute]
public bool get_Stat();
    [CompilerGeneratedAttribute]
public void set_Stat(bool value);
    [CompilerGeneratedAttribute]
public string get_ObjectAddress();
    [CompilerGeneratedAttribute]
public void set_ObjectAddress(string value);
    [CompilerGeneratedAttribute]
public string get_MethodTable();
    [CompilerGeneratedAttribute]
public void set_MethodTable(string value);
    public virtual void Invoke();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ObjSizeCommand/<GetTransitiveClosure>d__25")]
private static IEnumerable`1<ClrObject> GetTransitiveClosure(IEnumerable`1<ClrObject> objects);
}
internal enum Microsoft.Diagnostics.ExtensionCommands.Output.Align : Enum {
    public int value__;
    public static Align Left;
    public static Align Right;
    public static Align Center;
}
[ExtensionAttribute]
public static class Microsoft.Diagnostics.ExtensionCommands.Output.ArrayExtensions : object {
    [ExtensionAttribute]
public static string ToHex(ImmutableArray`1<byte> array);
    [ExtensionAttribute]
public static string ToHex(Byte[] array);
}
internal class Microsoft.Diagnostics.ExtensionCommands.Output.BorderedTable : Table {
    private bool _wroteAtLeastOneSpacer;
    public BorderedTable(IConsoleService console, Column[] columns);
    public sealed virtual void Dispose();
    public virtual void WriteHeader(String[] values);
    public virtual void WriteFooter(Object[] values);
    public virtual void WriteRow(Object[] values);
    protected virtual void WriteHeaderFooter(Object[] values, bool writeSides, bool writeNewline);
    private void FinishColumns(int start, StringBuilder rowBuilder);
    private void WriteSpacer();
    private void WriteBorder(string left, char center, string right);
}
[IsReadOnlyAttribute]
internal class Microsoft.Diagnostics.ExtensionCommands.Output.Column : ValueType {
    private static StringBuilderPool s_stringBuilderPool;
    private static Column s_enum;
    public int Width;
    public Format Format;
    public Align Alignment;
    public DmlFormat Dml;
    public Column(Align alignment, int width, Format format, DmlFormat dml);
    private static Column();
    public Column WithWidth(int width);
    internal Column WithDml(DmlFormat dml);
    internal Column WithAlignment(Align align);
    public Column GetAppropriateWidth(IEnumerable`1<T> values, int min, int max);
    internal static Column ForEnum();
    public virtual string ToString();
}
internal static class Microsoft.Diagnostics.ExtensionCommands.Output.ColumnKind : object {
    private static Nullable`1<Column> s_pointer;
    private static Nullable`1<Column> s_text;
    private static Nullable`1<Column> s_image;
    private static Nullable`1<Column> s_typeName;
    private static Nullable`1<Column> s_hexOffset;
    private static Nullable`1<Column> s_hexValue;
    private static Nullable`1<Column> s_dumpObj;
    private static Nullable`1<Column> s_integer;
    private static Nullable`1<Column> s_dumpHeapMT;
    private static Nullable`1<Column> s_listNearObj;
    private static Nullable`1<Column> s_dumpDomain;
    private static Nullable`1<Column> s_thread;
    private static Nullable`1<Column> s_integerWithoutComma;
    private static Nullable`1<Column> s_humanReadable;
    private static Nullable`1<Column> s_range;
    private static int PointerLength { get; }
    public static Column Pointer { get; }
    public static Column Text { get; }
    public static Column HexValue { get; }
    public static Column HexOffset { get; }
    public static Column Integer { get; }
    public static Column IntegerWithoutCommas { get; }
    public static Column ByteCount { get; }
    public static Column HumanReadableSize { get; }
    public static Column DumpObj { get; }
    public static Column DumpHeap { get; }
    public static Column DumpDomain { get; }
    public static Column Thread { get; }
    public static Column ListNearObj { get; }
    public static Column TypeName { get; }
    public static Column Image { get; }
    public static Column Range { get; }
    private static int get_PointerLength();
    public static Column get_Pointer();
    public static Column get_Text();
    public static Column get_HexValue();
    public static Column get_HexOffset();
    public static Column get_Integer();
    public static Column get_IntegerWithoutCommas();
    public static Column get_ByteCount();
    public static Column get_HumanReadableSize();
    public static Column get_DumpObj();
    public static Column get_DumpHeap();
    public static Column get_DumpDomain();
    public static Column get_Thread();
    public static Column get_ListNearObj();
    public static Column get_TypeName();
    public static Column get_Image();
    public static Column get_Range();
}
internal static class Microsoft.Diagnostics.ExtensionCommands.Output.Dml : object {
    private static DmlDumpObject s_dumpObj;
    private static DmlDumpHeap s_dumpHeap;
    private static DmlBold s_bold;
    private static DmlListNearObj s_listNearObj;
    private static DmlDumpDomain s_dumpDomain;
    private static DmlThread s_thread;
    public static DmlFormat DumpObj { get; }
    public static DmlFormat Bold { get; }
    public static DmlFormat DumpHeap { get; }
    public static DmlFormat ListNearObj { get; }
    public static DmlFormat DumpDomain { get; }
    public static DmlFormat Thread { get; }
    public static DmlFormat get_DumpObj();
    public static DmlFormat get_Bold();
    public static DmlFormat get_DumpHeap();
    public static DmlFormat get_ListNearObj();
    public static DmlFormat get_DumpDomain();
    public static DmlFormat get_Thread();
}
internal abstract class Microsoft.Diagnostics.ExtensionCommands.Output.DmlFormat : object {
    private static StringBuilderPool s_stringBuilderPool;
    private static DmlFormat();
    public virtual string FormatValue(string outputText, object value);
    public abstract virtual void FormatValue(StringBuilder sb, string outputText, object value);
    protected static string DmlEscape(string text);
}
internal class Microsoft.Diagnostics.ExtensionCommands.Output.Format : object {
    private static StringBuilderPool s_stringBuilderPool;
    [CompilerGeneratedAttribute]
private bool <CanTruncate>k__BackingField;
    public bool CanTruncate { get; protected set; }
    public Format(bool canTruncate);
    private static Format();
    [CompilerGeneratedAttribute]
public bool get_CanTruncate();
    [CompilerGeneratedAttribute]
protected void set_CanTruncate(bool value);
    internal static object Unwrap(object value);
    public virtual string FormatValue(object value, int maxLength, bool truncateBegin);
    public virtual int FormatValue(StringBuilder sb, object value, int maxLength, bool truncateBegin);
    protected string TruncateString(string result, int maxLength, bool truncateBegin);
    protected void TruncateStringBuilder(StringBuilder result, int maxLength, int lengthWritten, bool truncateBegin);
}
internal static class Microsoft.Diagnostics.ExtensionCommands.Output.Formats : object {
    private static HexValueFormat s_hexOffsetFormat;
    private static HexValueFormat s_hexValueFormat;
    private static Format s_text;
    private static IntegerFormat s_integerFormat;
    private static TypeOrImageFormat s_typeNameFormat;
    private static TypeOrImageFormat s_imageFormat;
    private static IntegerFormat s_integerWithoutCommaFormat;
    private static HumanReadableFormat s_humanReadableFormat;
    private static RangeFormat s_range;
    [CompilerGeneratedAttribute]
private static Format <Pointer>k__BackingField;
    public static Format Pointer { get; }
    public static Format HexOffset { get; }
    public static Format HexValue { get; }
    public static Format Integer { get; }
    public static Format IntegerWithoutCommas { get; }
    public static Format Text { get; }
    public static Format TypeName { get; }
    public static Format Image { get; }
    public static Format HumanReadableSize { get; }
    public static Format Range { get; }
    private static Formats();
    [CompilerGeneratedAttribute]
public static Format get_Pointer();
    public static Format get_HexOffset();
    public static Format get_HexValue();
    public static Format get_Integer();
    public static Format get_IntegerWithoutCommas();
    public static Format get_Text();
    public static Format get_TypeName();
    public static Format get_Image();
    public static Format get_HumanReadableSize();
    public static Format get_Range();
}
internal class Microsoft.Diagnostics.ExtensionCommands.Output.StringBuilderPool : object {
    private StringBuilder _stringBuilder;
    private int _initialCapacity;
    public StringBuilderPool(int initialCapacity);
    public StringBuilder Rent();
    public void Return(StringBuilder sb);
}
internal class Microsoft.Diagnostics.ExtensionCommands.Output.Table : object {
    protected StringBuilderPool _stringBuilderPool;
    protected string _spacing;
    protected static Column s_headerColumn;
    [CompilerGeneratedAttribute]
private string <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsoleService <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private Column[] <Columns>k__BackingField;
    public string Indent { get; public set; }
    public IConsoleService Console { get; }
    public int TotalWidth { get; }
    public Column[] Columns { get; public set; }
    public Table(IConsoleService console, Column[] columns);
    private static Table();
    [CompilerGeneratedAttribute]
public string get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(string value);
    [CompilerGeneratedAttribute]
public IConsoleService get_Console();
    public int get_TotalWidth();
    [CompilerGeneratedAttribute]
public Column[] get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(Column[] value);
    public void SetAlignment(Align align);
    public virtual void WriteHeader(String[] values);
    public virtual void WriteFooter(Object[] values);
    protected void IncreaseColumnWidth(String[] values);
    public virtual void WriteRow(Object[] values);
    protected void WriteRowWorker(Object[] values, StringBuilder rowBuilder, string spacing, bool writeLine);
    private void WriteAndClearRowBuilder(StringBuilder rowBuilder, bool dml);
    private void Append(Column column, StringBuilder sb, object value);
    protected virtual void WriteHeaderFooter(Object[] values, bool writeSides, bool writeNewline);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.ParallelStacksCommand : ClrMDHelperCommandBase {
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeRuntimeStacks>k__BackingField;
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    [OptionAttribute]
public bool AllThreads { get; public set; }
    [OptionAttribute]
public bool IncludeRuntimeStacks { get; public set; }
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    [CompilerGeneratedAttribute]
public bool get_AllThreads();
    [CompilerGeneratedAttribute]
public void set_AllThreads(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeRuntimeStacks();
    [CompilerGeneratedAttribute]
public void set_IncludeRuntimeStacks(bool value);
    public virtual void Invoke();
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.PathToCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private RootCacheService <RootCache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetAddress>k__BackingField;
    [ServiceImportAttribute]
public RootCacheService RootCache { get; public set; }
    [ArgumentAttribute]
public string SourceAddress { get; public set; }
    [ArgumentAttribute]
public string TargetAddress { get; public set; }
    [CompilerGeneratedAttribute]
public RootCacheService get_RootCache();
    [CompilerGeneratedAttribute]
public void set_RootCache(RootCacheService value);
    [CompilerGeneratedAttribute]
public string get_SourceAddress();
    [CompilerGeneratedAttribute]
public void set_SourceAddress(string value);
    [CompilerGeneratedAttribute]
public string get_TargetAddress();
    [CompilerGeneratedAttribute]
public void set_TargetAddress(string value);
    public virtual void Invoke();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.RegistersCommand : CommandBase {
    [CompilerGeneratedAttribute]
private IThreadService <ThreadService>k__BackingField;
    [CompilerGeneratedAttribute]
private IThread <CurrentThread>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [ServiceImportAttribute]
public IThreadService ThreadService { get; public set; }
    [ServiceImportAttribute]
public IThread CurrentThread { get; public set; }
    [OptionAttribute]
public bool Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public IThreadService get_ThreadService();
    [CompilerGeneratedAttribute]
public void set_ThreadService(IThreadService value);
    [CompilerGeneratedAttribute]
public IThread get_CurrentThread();
    [CompilerGeneratedAttribute]
public void set_CurrentThread(IThread value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    public virtual void Invoke();
}
[ServiceExportAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.RootCacheService : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<ulong, ulong>> _dependentHandles;
    private ReadOnlyCollection`1<ClrRoot> _handleRoots;
    private ReadOnlyCollection`1<ClrRoot> _finalizerRoots;
    private ReadOnlyCollection`1<ClrRoot> _stackRoots;
    private bool _printedWarning;
    private bool _printedStackWarning;
    [CompilerGeneratedAttribute]
private IConsoleService <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [ServiceImportAttribute]
public IConsoleService Console { get; public set; }
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    [CompilerGeneratedAttribute]
public IConsoleService get_Console();
    [CompilerGeneratedAttribute]
public void set_Console(IConsoleService value);
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    public ReadOnlyCollection`1<ValueTuple`2<ulong, ulong>> GetDependentHandles();
    public bool IsDependentHandleLink(ulong source, ulong target);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.RootCacheService/<EnumerateRoots>d__16")]
public IEnumerable`1<ClrRoot> EnumerateRoots(bool includeFinalizer);
    public ReadOnlyCollection`1<ClrRoot> GetHandleRoots();
    private void InitializeHandleRoots();
    public ReadOnlyCollection`1<ClrRoot> GetFinalizerQueueRoots();
    private void PrintWarning();
    public ReadOnlyCollection`1<ClrRoot> GetStackRoots();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.RuntimesCommand : CommandBase {
    [CompilerGeneratedAttribute]
private IRuntimeService <RuntimeService>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextService <ContextService>k__BackingField;
    [CompilerGeneratedAttribute]
private ITarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NetFx>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NetCore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <All>k__BackingField;
    [ServiceImportAttribute]
public IRuntimeService RuntimeService { get; public set; }
    [ServiceImportAttribute]
public IContextService ContextService { get; public set; }
    [ServiceImportAttribute]
public ITarget Target { get; public set; }
    [ArgumentAttribute]
public Nullable`1<int> Id { get; public set; }
    [OptionAttribute]
public bool NetFx { get; public set; }
    [OptionAttribute]
public bool NetCore { get; public set; }
    [OptionAttribute]
public bool All { get; public set; }
    [CompilerGeneratedAttribute]
public IRuntimeService get_RuntimeService();
    [CompilerGeneratedAttribute]
public void set_RuntimeService(IRuntimeService value);
    [CompilerGeneratedAttribute]
public IContextService get_ContextService();
    [CompilerGeneratedAttribute]
public void set_ContextService(IContextService value);
    [CompilerGeneratedAttribute]
public ITarget get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(ITarget value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_NetFx();
    [CompilerGeneratedAttribute]
public void set_NetFx(bool value);
    [CompilerGeneratedAttribute]
public bool get_NetCore();
    [CompilerGeneratedAttribute]
public void set_NetCore(bool value);
    [CompilerGeneratedAttribute]
public bool get_All();
    [CompilerGeneratedAttribute]
public void set_All(bool value);
    public virtual void Invoke();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.SetClrPath : CommandBase {
    [CompilerGeneratedAttribute]
private IRuntime <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clear>k__BackingField;
    [ServiceImportAttribute]
public IRuntime Runtime { get; public set; }
    [ArgumentAttribute]
public string Argument { get; public set; }
    [OptionAttribute]
public bool Clear { get; public set; }
    [CompilerGeneratedAttribute]
public IRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(IRuntime value);
    [CompilerGeneratedAttribute]
public string get_Argument();
    [CompilerGeneratedAttribute]
public void set_Argument(string value);
    [CompilerGeneratedAttribute]
public bool get_Clear();
    [CompilerGeneratedAttribute]
public void set_Clear(bool value);
    public virtual void Invoke();
}
[CommandAttribute]
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.SetSymbolServerCommand : CommandBase {
    [CompilerGeneratedAttribute]
private ISymbolService <SymbolService>k__BackingField;
    [CompilerGeneratedAttribute]
private IModuleService <ModuleService>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MicrosoftSymbolServer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InternalSymbolServer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolServerUrl>k__BackingField;
    private static string s_detailedHelpTextDbgEng;
    private static string s_detailedHelpTextLLDB;
    private static string s_detailedHelpTextDotNetDump;
    [ServiceImportAttribute]
public ISymbolService SymbolService { get; public set; }
    [ServiceImportAttribute]
public IModuleService ModuleService { get; public set; }
    [OptionAttribute]
public bool MicrosoftSymbolServer { get; public set; }
    [OptionAttribute]
public bool InternalSymbolServer { get; public set; }
    [OptionAttribute]
public bool Interactive { get; public set; }
    [OptionAttribute]
public bool Disable { get; public set; }
    [OptionAttribute]
public bool Reset { get; public set; }
    [OptionAttribute]
public string Cache { get; public set; }
    [OptionAttribute]
public bool NoCache { get; public set; }
    [OptionAttribute]
public string Directory { get; public set; }
    [OptionAttribute]
public string AccessToken { get; public set; }
    [OptionAttribute]
public Nullable`1<int> Timeout { get; public set; }
    [OptionAttribute]
public Nullable`1<int> RetryCount { get; public set; }
    [OptionAttribute]
public bool LoadSymbols { get; public set; }
    [ArgumentAttribute]
public string SymbolServerUrl { get; public set; }
    [CompilerGeneratedAttribute]
public ISymbolService get_SymbolService();
    [CompilerGeneratedAttribute]
public void set_SymbolService(ISymbolService value);
    [CompilerGeneratedAttribute]
public IModuleService get_ModuleService();
    [CompilerGeneratedAttribute]
public void set_ModuleService(IModuleService value);
    [CompilerGeneratedAttribute]
public bool get_MicrosoftSymbolServer();
    [CompilerGeneratedAttribute]
public void set_MicrosoftSymbolServer(bool value);
    [CompilerGeneratedAttribute]
public bool get_InternalSymbolServer();
    [CompilerGeneratedAttribute]
public void set_InternalSymbolServer(bool value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disable();
    [CompilerGeneratedAttribute]
public void set_Disable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Reset();
    [CompilerGeneratedAttribute]
public void set_Reset(bool value);
    [CompilerGeneratedAttribute]
public string get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(string value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RetryCount();
    [CompilerGeneratedAttribute]
public void set_RetryCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_LoadSymbols();
    [CompilerGeneratedAttribute]
public void set_LoadSymbols(bool value);
    [CompilerGeneratedAttribute]
public string get_SymbolServerUrl();
    [CompilerGeneratedAttribute]
public void set_SymbolServerUrl(string value);
    public virtual void Invoke();
    [HelpInvokeAttribute]
public static string GetDetailedHelp(IHost host);
}
public class Microsoft.Diagnostics.ExtensionCommands.SimulateGCHeapCorruption : ClrRuntimeCommandBase {
    private static List`1<Change> _changes;
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [ArgumentAttribute]
public string Command { get; public set; }
    private static SimulateGCHeapCorruption();
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    public virtual void Invoke();
    private void Usage();
    private void List();
    private void Rollback();
    private void Corrupt();
    private static ValueTuple`2<ClrObject, ulong> GetFirstReference(ClrObject obj);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.SimulateGCHeapCorruption/<FindObjectsWithSyncBlock>d__15")]
private IEnumerable`1<ClrObject> FindObjectsWithSyncBlock();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.SimulateGCHeapCorruption/<FindObjectsWithReferences>d__16")]
private IEnumerable`1<ClrObject> FindObjectsWithReferences();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.SimulateGCHeapCorruption/<FindArrayObjects>d__17")]
private IEnumerable`1<ClrObject> FindArrayObjects();
    private void WriteValue(ObjectCorruptionKind kind, ClrObject obj, ulong address, T value);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.SizeStatsCommand : ClrRuntimeCommandBase {
    public virtual void Invoke();
    private void SizeStats(Generation requestedGen, bool isFree);
    private static bool FilterByGeneration(ClrSegment seg, Generation gen);
}
public class Microsoft.Diagnostics.ExtensionCommands.SpecialDiagInfoHeader : TStruct {
    public static string SPECIAL_DIAGINFO_SIGNATURE;
    public static int SPECIAL_DIAGINFO_RUNTIME_BASEADDRESS;
    public static int SPECIAL_DIAGINFO_LATEST;
    public static ulong SpecialDiagInfoAddress_OSX;
    public static ulong SpecialDiagInfoAddress_64BIT;
    public static ulong SpecialDiagInfoAddress_32BIT;
    public static int SpecialDiagInfoSize;
    [ArraySizeAttribute("16")]
public Byte[] RawSignature;
    public int Version;
    public ulong ExceptionRecordAddress;
    public ulong RuntimeBaseAddress;
    public string Signature { get; }
    public bool IsValid { get; }
    public static bool TryRead(IServiceProvider services, ulong address, SpecialDiagInfoHeader& info);
    public static ulong GetAddress(IServiceProvider services);
    public string get_Signature();
    public bool get_IsValid();
}
[ServiceExportAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.StaticVariableService : object {
    private Dictionary`2<ulong, ClrStaticField> _fields;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerator`1<ValueTuple`2<ulong, ClrStaticField>> _enumerator;
    [CompilerGeneratedAttribute]
private ClrRuntime <Runtime>k__BackingField;
    [ServiceImportAttribute]
public ClrRuntime Runtime { get; public set; }
    [CompilerGeneratedAttribute]
public ClrRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(ClrRuntime value);
    public bool TryGetStaticByAddress(ulong address, ClrStaticField& field);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.StaticVariableService/<EnumerateStatics>d__7")]
public IEnumerable`1<ValueTuple`2<ulong, ClrStaticField>> EnumerateStatics();
}
[CommandAttribute]
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.StatusCommand : CommandBase {
    [CompilerGeneratedAttribute]
private IHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbolService <SymbolService>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextService <ContextService>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reset>k__BackingField;
    [ServiceImportAttribute]
public IHost Host { get; public set; }
    [ServiceImportAttribute]
public ISymbolService SymbolService { get; public set; }
    [ServiceImportAttribute]
public IContextService ContextService { get; public set; }
    [OptionAttribute]
public bool Reset { get; public set; }
    [CompilerGeneratedAttribute]
public IHost get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(IHost value);
    [CompilerGeneratedAttribute]
public ISymbolService get_SymbolService();
    [CompilerGeneratedAttribute]
public void set_SymbolService(ISymbolService value);
    [CompilerGeneratedAttribute]
public IContextService get_ContextService();
    [CompilerGeneratedAttribute]
public void set_ContextService(IContextService value);
    [CompilerGeneratedAttribute]
public bool get_Reset();
    [CompilerGeneratedAttribute]
public void set_Reset(bool value);
    public virtual void Invoke();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.TaskStateCommand : ClrMDHelperCommandBase {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <Value>k__BackingField;
    [ArgumentAttribute]
public string Address { get; public set; }
    [OptionAttribute]
public Nullable`1<ulong> Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Nullable`1<ulong> value);
    public virtual void Invoke();
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.ThreadPoolCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private bool <PrintHillClimbingLog>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintWorkItems>k__BackingField;
    [OptionAttribute]
public bool PrintHillClimbingLog { get; public set; }
    [OptionAttribute]
public bool PrintWorkItems { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PrintHillClimbingLog();
    [CompilerGeneratedAttribute]
public void set_PrintHillClimbingLog(bool value);
    [CompilerGeneratedAttribute]
public bool get_PrintWorkItems();
    [CompilerGeneratedAttribute]
public void set_PrintWorkItems(bool value);
    public virtual void Invoke();
    private void DumpWorkItems();
    private void WriteEntry(Table& output, ClrObject entry, bool isHighPri);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.ThreadPoolCommand/<EnumerateConcurrentQueue>d__11")]
private IEnumerable`1<ClrObject> EnumerateConcurrentQueue(ClrObject concurrentQueue);
}
public class Microsoft.Diagnostics.ExtensionCommands.ThreadPoolItem : object {
    [CompilerGeneratedAttribute]
private ThreadRoot <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public ThreadRoot Type { get; public set; }
    public ulong Address { get; public set; }
    public string MethodName { get; public set; }
    [CompilerGeneratedAttribute]
public ThreadRoot get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ThreadRoot value);
    [CompilerGeneratedAttribute]
public ulong get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(ulong value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.ThreadPoolQueueCommand : ClrMDHelperCommandBase {
    public virtual void Invoke();
    private void DisplayItem(ThreadPoolItem item, Dictionary`2<string, WorkInfo> tasks, Int32& taskCount, Dictionary`2<string, WorkInfo> workItems, Int32& workItemCount);
    private static void UpdateStats(Dictionary`2<string, WorkInfo> stats, string statName, Int32& count);
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
}
public enum Microsoft.Diagnostics.ExtensionCommands.ThreadRoot : Enum {
    public int value__;
    public static ThreadRoot Raw;
    public static ThreadRoot Task;
    public static ThreadRoot WorkItem;
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.ThreadsCommand : CommandBase {
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Thread>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreadService <ThreadService>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextService <ContextService>k__BackingField;
    [ArgumentAttribute]
public Nullable`1<UInt32> Thread { get; public set; }
    [OptionAttribute]
public bool ThreadId { get; public set; }
    [OptionAttribute]
public bool Verbose { get; public set; }
    [ServiceImportAttribute]
public IThreadService ThreadService { get; public set; }
    [ServiceImportAttribute]
public IContextService ContextService { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Thread();
    [CompilerGeneratedAttribute]
public void set_Thread(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public bool get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public IThreadService get_ThreadService();
    [CompilerGeneratedAttribute]
public void set_ThreadService(IThreadService value);
    [CompilerGeneratedAttribute]
public IContextService get_ContextService();
    [CompilerGeneratedAttribute]
public void set_ContextService(IContextService value);
    public virtual void Invoke();
}
public class Microsoft.Diagnostics.ExtensionCommands.TimerInfo : object {
    [CompilerGeneratedAttribute]
private ulong <TimerQueueTimerAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DueTime>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <StateAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StateTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsShort>k__BackingField;
    public ulong TimerQueueTimerAddress { get; public set; }
    public UInt32 DueTime { get; public set; }
    public UInt32 Period { get; public set; }
    public bool Cancelled { get; public set; }
    public ulong StateAddress { get; public set; }
    public string StateTypeName { get; public set; }
    public string MethodName { get; public set; }
    public Nullable`1<bool> IsShort { get; public set; }
    [CompilerGeneratedAttribute]
public ulong get_TimerQueueTimerAddress();
    [CompilerGeneratedAttribute]
public void set_TimerQueueTimerAddress(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_DueTime();
    [CompilerGeneratedAttribute]
public void set_DueTime(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_Cancelled();
    [CompilerGeneratedAttribute]
public void set_Cancelled(bool value);
    [CompilerGeneratedAttribute]
public ulong get_StateAddress();
    [CompilerGeneratedAttribute]
public void set_StateAddress(ulong value);
    [CompilerGeneratedAttribute]
public string get_StateTypeName();
    [CompilerGeneratedAttribute]
public void set_StateTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsShort();
    [CompilerGeneratedAttribute]
public void set_IsShort(Nullable`1<bool> value);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.TimersCommand : ClrMDHelperCommandBase {
    public virtual void Invoke();
    private static string GetTimerString(TimerInfo timer);
    [HelpInvokeAttribute]
public static string GetDetailedHelp();
}
internal class Microsoft.Diagnostics.ExtensionCommands.TimerStat : object {
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public string Line { get; public set; }
    public int Count { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.TraverseHeapCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private RootCacheService <RootCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Xml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [ServiceImportAttribute]
public RootCacheService RootCache { get; public set; }
    [OptionAttribute]
public bool Xml { get; public set; }
    [ArgumentAttribute]
public string Filename { get; public set; }
    [CompilerGeneratedAttribute]
public RootCacheService get_RootCache();
    [CompilerGeneratedAttribute]
public void set_RootCache(RootCacheService value);
    [CompilerGeneratedAttribute]
public bool get_Xml();
    [CompilerGeneratedAttribute]
public void set_Xml(bool value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
    public virtual void Invoke();
    private ValueTuple`2<MemoryStream, Dictionary`2<ClrType, int>> WriteRootsAndObjects();
    private static string FormatHex(ulong address);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.VerifyHeapCommand : ClrRuntimeCommandBase {
    private static string CommandName;
    private int _totalObjects;
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GCHeap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreGCState>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MemoryRange>k__BackingField;
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [OptionAttribute]
public int GCHeap { get; public set; }
    [OptionAttribute]
public string Segment { get; public set; }
    [OptionAttribute]
public bool IgnoreGCState { get; public set; }
    [ArgumentAttribute]
public String[] MemoryRange { get; public set; }
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    [CompilerGeneratedAttribute]
public int get_GCHeap();
    [CompilerGeneratedAttribute]
public void set_GCHeap(int value);
    [CompilerGeneratedAttribute]
public string get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreGCState();
    [CompilerGeneratedAttribute]
public void set_IgnoreGCState(bool value);
    [CompilerGeneratedAttribute]
public String[] get_MemoryRange();
    [CompilerGeneratedAttribute]
public void set_MemoryRange(String[] value);
    public virtual void Invoke();
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.ExtensionCommands.VerifyHeapCommand/<EnumerateWithCount>d__23")]
private IEnumerable`1<ClrObject> EnumerateWithCount(IEnumerable`1<ClrObject> objs);
    private void VerifyHeap(IEnumerable`1<ClrObject> objects, bool verifySyncTable);
    private void WriteError(Table& output, ClrHeap heap, ObjectCorruption corruption);
    internal static string GetObjectCorruptionMessage(IMemoryService memory, ClrHeap heap, ObjectCorruption corruption);
    private void WriteRow(Table& output, ClrHeap heap, ObjectCorruption corruption, string message);
    private static string GetSyncBlockFailureMessage(ObjectCorruption corruption);
    private static string ReadPointerWithError(IMemoryService memory, ulong address);
}
[CommandAttribute]
public class Microsoft.Diagnostics.ExtensionCommands.VerifyObjectCommand : ClrRuntimeCommandBase {
    [CompilerGeneratedAttribute]
private IMemoryService <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectAddress>k__BackingField;
    [ServiceImportAttribute]
public IMemoryService Memory { get; public set; }
    [ArgumentAttribute]
public string ObjectAddress { get; public set; }
    [CompilerGeneratedAttribute]
public IMemoryService get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(IMemoryService value);
    [CompilerGeneratedAttribute]
public string get_ObjectAddress();
    [CompilerGeneratedAttribute]
public void set_ObjectAddress(string value);
    public virtual void Invoke();
}
public class Microsoft.Diagnostics.Runtime.RuntimeInfo : TStruct {
    public static string RUNTIME_INFO_SYMBOL;
    public static string RUNTIME_INFO_SIGNATURE;
    public static int RUNTIME_INFO_RUNTIME_VERSION;
    public static int RUNTIME_INFO_LATEST;
    [ArraySizeAttribute("18")]
public Byte[] RawSignature;
    public int Version;
    [ArraySizeAttribute("24")]
public Byte[] RawRuntimeModuleIndex;
    [ArraySizeAttribute("24")]
public Byte[] RawDacModuleIndex;
    [ArraySizeAttribute("24")]
public Byte[] RawDbiModuleIndex;
    [ArraySizeAttribute("4")]
public Int32[] RawRuntimeVersion;
    public string Signature { get; }
    public bool IsValid { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<int, int> RuntimePEIIndex { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<int, int> DacPEIndex { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<int, int> DbiPEIndex { get; }
    public ImmutableArray`1<byte> RuntimeBuildId { get; }
    public ImmutableArray`1<byte> DacBuildId { get; }
    public ImmutableArray`1<byte> DbiBuildId { get; }
    public Version RuntimeVersion { get; }
    public static bool TryRead(IServiceProvider services, ulong address, RuntimeInfo& info);
    public string get_Signature();
    public bool get_IsValid();
    public ValueTuple`2<int, int> get_RuntimePEIIndex();
    public ValueTuple`2<int, int> get_DacPEIndex();
    public ValueTuple`2<int, int> get_DbiPEIndex();
    private static ValueTuple`2<int, int> GetPEIndex(Byte[] index);
    public ImmutableArray`1<byte> get_RuntimeBuildId();
    public ImmutableArray`1<byte> get_DacBuildId();
    public ImmutableArray`1<byte> get_DbiBuildId();
    private static ImmutableArray`1<byte> GetBuildId(Byte[] index);
    public Version get_RuntimeVersion();
}
public interface ParallelStacks.Runtime.IRenderer {
    public int DisplayThreadIDsCountLimit { get; }
    public abstract virtual int get_DisplayThreadIDsCountLimit();
    public abstract virtual void Write(string text);
    public abstract virtual void WriteCount(string count);
    public abstract virtual void WriteNamespace(string ns);
    public abstract virtual void WriteType(string type);
    public abstract virtual void WriteSeparator(string separator);
    public abstract virtual void WriteDark(string separator);
    public abstract virtual void WriteMethod(string method);
    public abstract virtual void WriteMethodType(string type);
    public abstract virtual void WriteFrameSeparator(string text);
    public abstract virtual string FormatTheadId(UInt32 threadID);
}
public class ParallelStacks.Runtime.ParallelStack : object {
    [CompilerGeneratedAttribute]
private List`1<ParallelStack> <Stacks>k__BackingField;
    [CompilerGeneratedAttribute]
private StackFrame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <ThreadIds>k__BackingField;
    public List`1<ParallelStack> Stacks { get; }
    public StackFrame Frame { get; }
    public List`1<UInt32> ThreadIds { get; public set; }
    private ParallelStack(ClrStackFrame frame);
    public static ParallelStack Build(ClrRuntime runtime, bool includeRuntimeStacks);
    public static ParallelStack Build(string dumpFile, string dacFilePath, bool includeRuntimeStacks);
    public static ParallelStack Build(int pid, string dacFilePath, bool includeRuntimeStacks);
    private static ClrRuntime CreateRuntime(DataTarget dataTarget, string dacFilePath);
    [CompilerGeneratedAttribute]
public List`1<ParallelStack> get_Stacks();
    [CompilerGeneratedAttribute]
public StackFrame get_Frame();
    [CompilerGeneratedAttribute]
public List`1<UInt32> get_ThreadIds();
    [CompilerGeneratedAttribute]
public void set_ThreadIds(List`1<UInt32> value);
    private void AddStack(UInt32 threadId, ClrStackFrame[] frames, int index);
}
public abstract class ParallelStacks.Runtime.RendererBase : object {
    private int _limit;
    public int DisplayThreadIDsCountLimit { get; }
    protected RendererBase(int limit);
    public sealed virtual int get_DisplayThreadIDsCountLimit();
    public abstract virtual void Write(string text);
    public abstract virtual void WriteCount(string count);
    public abstract virtual void WriteNamespace(string ns);
    public abstract virtual void WriteType(string type);
    public abstract virtual void WriteSeparator(string separator);
    public abstract virtual void WriteDark(string separator);
    public abstract virtual void WriteMethod(string method);
    public abstract virtual void WriteMethodType(string type);
    public abstract virtual void WriteFrameSeparator(string text);
    public abstract virtual string FormatTheadId(UInt32 threadID);
}
[ExtensionAttribute]
public static class ParallelStacks.Runtime.RendererHelpers : object {
    private static int Padding;
    [ExtensionAttribute]
public static void Render(ParallelStack stacks, IRenderer visitor);
    private static void RenderStack(ParallelStack stack, IRenderer visitor, int increment);
    private static string FormatThreadIdList(IRenderer visitor, List`1<UInt32> threadIds);
    private static void RenderFrame(StackFrame frame, IRenderer visitor);
}
public class ParallelStacks.StackFrame : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Signature>k__BackingField;
    public string TypeName { get; private set; }
    public string MethodName { get; private set; }
    public string Text { get; private set; }
    public List`1<string> Signature { get; }
    public StackFrame(ClrStackFrame frame);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
private void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Signature();
    private void ComputeNames(ClrStackFrame frame);
    public static string GetShortTypeName(string typeName, int start, int end);
    public static string GetNextTypeName(string typeName, Int32& start, Int32& end);
    public static string GetGenericTypeName(string typeName, Int32& start, Int32& end);
    public static void AppendTypeNameWithoutNamespace(StringBuilder sb, string typeName, int start, int end);
    public static IEnumerable`1<string> BuildSignature(string fullName);
    public static string GetParameter(string fullName, int start, int end);
    public static string GetGenericMethodName(string fullName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
