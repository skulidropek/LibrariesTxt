[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Diagnostics.Repl.CharToLineConverter : object {
    private Action`1<string> m_callback;
    private StringBuilder m_text;
    public CharToLineConverter(Action`1<string> callback);
    public void Input(Byte[] buffer, int offset, int count);
    public void Input(string text);
    public void Flush();
}
public class Microsoft.Diagnostics.Repl.ConsoleService : object {
    private List`1<StringBuilder> m_history;
    private CharToLineConverter m_consoleConverter;
    private CharToLineConverter m_warningConverter;
    private CharToLineConverter m_errorConverter;
    private string m_prompt;
    private bool m_shutdown;
    private CancellationTokenSource m_interruptExecutingCommand;
    private string m_clearLine;
    private bool m_interactiveConsole;
    private bool m_outputRedirected;
    private bool m_refreshingLine;
    private StringBuilder m_activeLine;
    private int m_selectedHistory;
    private bool m_modified;
    private int m_cursorPosition;
    private int m_scrollPosition;
    private bool m_insertMode;
    private int m_commandExecuting;
    private string m_lastCommandLine;
    [CompilerGeneratedAttribute]
private CancellationToken <Microsoft.Diagnostics.DebugServices.IConsoleService.CancellationToken>k__BackingField;
    public bool Shutdown { get; }
    private bool Microsoft.Diagnostics.DebugServices.IConsoleService.SupportsDml { get; }
    private CancellationToken Microsoft.Diagnostics.DebugServices.IConsoleService.CancellationToken { get; private set; }
    private int Microsoft.Diagnostics.DebugServices.IConsoleService.WindowWidth { get; }
    public ConsoleService(ConsoleColor errorColor, ConsoleColor warningColor);
    public void Start(Action`3<string, string, CancellationToken> dispatchCommand);
    public bool get_Shutdown();
    public void Stop();
    public IEnumerable`1<string> GetCommandHistory();
    public void AddCommandHistory(IEnumerable`1<string> commandHistory);
    public void SetPrompt(string prompt);
    public void WriteLine(OutputType type, string format, Object[] parameters);
    public void WriteOutput(OutputType type, string message);
    public void ClearScreen();
    private void NewOutput(string text, Nullable`1<ConsoleColor> color);
    private void OnCtrlBreakKeyPress(object sender, ConsoleCancelEventArgs e);
    private void CommandStarting();
    private void CommandFinished();
    private void ClearLine();
    private void PrintActiveLine();
    private void RefreshLine();
    private void ProcessKeyInfo(ConsoleKeyInfo keyInfo, Action`3<string, string, CancellationToken> dispatchCommand);
    private bool Dispatch(string newCommand, Action`3<string, string, CancellationToken> dispatchCommand);
    private void AppendNewText(string text);
    private void SwitchToHistoryEntry();
    private void EnsureNewEntry();
    private sealed virtual override void Microsoft.Diagnostics.DebugServices.IConsoleService.Write(string text);
    private sealed virtual override void Microsoft.Diagnostics.DebugServices.IConsoleService.WriteWarning(string text);
    private sealed virtual override void Microsoft.Diagnostics.DebugServices.IConsoleService.WriteError(string text);
    private sealed virtual override bool Microsoft.Diagnostics.DebugServices.IConsoleService.get_SupportsDml();
    private sealed virtual override void Microsoft.Diagnostics.DebugServices.IConsoleService.WriteDml(string text);
    private sealed virtual override void Microsoft.Diagnostics.DebugServices.IConsoleService.WriteDmlExec(string text, string _);
    [CompilerGeneratedAttribute]
private sealed virtual override CancellationToken Microsoft.Diagnostics.DebugServices.IConsoleService.get_CancellationToken();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.Diagnostics.DebugServices.IConsoleService.set_CancellationToken(CancellationToken value);
    private sealed virtual override int Microsoft.Diagnostics.DebugServices.IConsoleService.get_WindowWidth();
}
[CommandAttribute]
public class Microsoft.Diagnostics.Repl.ExitCommand : CommandBase {
    private Action _exit;
    public ExitCommand(Action exit);
    public virtual void Invoke();
}
public enum Microsoft.Diagnostics.Repl.OutputType : Enum {
    public int value__;
    public static OutputType Normal;
    public static OutputType Error;
    public static OutputType Warning;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
