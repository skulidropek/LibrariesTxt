[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.SymbolStore.BinaryReaderExtensions : object {
    [ExtensionAttribute]
public static string ReadNullTerminatedString(BinaryReader stream);
}
internal class Microsoft.SymbolStore.ChecksumValidator : object {
    private static string pdbStreamName;
    private static UInt32 pdbIdSize;
    internal static void Validate(ITracer tracer, Stream pdbStream, IEnumerable`1<PdbChecksum> pdbChecksums);
    private static UInt32 GetPdbStreamOffset(Stream pdbStream);
}
public class Microsoft.SymbolStore.InvalidChecksumException : Exception {
    public InvalidChecksumException(string message);
}
public interface Microsoft.SymbolStore.ITracer {
    public abstract virtual void WriteLine(string message);
    public abstract virtual void WriteLine(string format, Object[] arguments);
    public abstract virtual void Information(string message);
    public abstract virtual void Information(string format, Object[] arguments);
    public abstract virtual void Warning(string message);
    public abstract virtual void Warning(string format, Object[] arguments);
    public abstract virtual void Error(string message);
    public abstract virtual void Error(string format, Object[] arguments);
    public abstract virtual void Verbose(string message);
    public abstract virtual void Verbose(string format, Object[] arguments);
}
public class Microsoft.SymbolStore.KeyGenerators.ELFCoreKeyGenerator : KeyGenerator {
    private ELFCoreFile _core;
    public ELFCoreKeyGenerator(ITracer tracer, SymbolStoreFile file);
    public virtual bool IsValid();
    public virtual bool IsDump();
    public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    private KeyGenerator CreateGenerator(ELFLoadedImage loadedImage);
}
public class Microsoft.SymbolStore.KeyGenerators.ELFFileKeyGenerator : KeyGenerator {
    private static string IdentityPrefix;
    private static string SymbolPrefix;
    private static string CoreClrPrefix;
    private static string CoreClrFileName;
    private static String[] s_symbolFileExtensions;
    private static String[] s_specialFiles;
    private static String[] s_sosSpecialFiles;
    private static HashSet`1<string> s_coreClrSpecialFiles;
    private static HashSet`1<string> s_dacdbiSpecialFiles;
    private ELFFile _elfFile;
    private string _path;
    public ELFFileKeyGenerator(ITracer tracer, ELFFile elfFile, string path);
    public ELFFileKeyGenerator(ITracer tracer, SymbolStoreFile file);
    private static ELFFileKeyGenerator();
    public virtual bool IsValid();
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.ELFFileKeyGenerator/<GetKeys>d__14")]
public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.ELFFileKeyGenerator/<GetKeys>d__15")]
public static IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags, string path, Byte[] buildId, bool symbolFile, string symbolFileName);
    private string GetSymbolFileName();
    private static bool NormalizeBuildId(Byte[]& buildId);
}
public class Microsoft.SymbolStore.KeyGenerators.FileKeyGenerator : KeyGenerator {
    private SymbolStoreFile _file;
    public FileKeyGenerator(ITracer tracer, SymbolStoreFile file);
    public virtual bool IsValid();
    public virtual bool IsDump();
    public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.FileKeyGenerator/<GetGenerators>d__5")]
private IEnumerable`1<KeyGenerator> GetGenerators();
}
public abstract class Microsoft.SymbolStore.KeyGenerators.KeyGenerator : object {
    protected ITracer Tracer;
    public KeyGenerator(ITracer tracer);
    public abstract virtual bool IsValid();
    public virtual bool IsDump();
    public abstract virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    protected static SymbolStoreKey BuildKey(string path, string id, bool clrSpecialFile, IEnumerable`1<PdbChecksum> pdbChecksums);
    protected static SymbolStoreKey BuildKey(string path, string prefix, Byte[] id, bool clrSpecialFile, IEnumerable`1<PdbChecksum> pdbChecksums);
    protected static SymbolStoreKey BuildKey(string path, string prefix, Byte[] id, string file, bool clrSpecialFile, IEnumerable`1<PdbChecksum> pdbChecksums);
    protected static SymbolStoreKey BuildKey(string path, string prefix, string id, string file, bool clrSpecialFile, IEnumerable`1<PdbChecksum> pdbChecksums);
    internal static SymbolStoreKey BuildKey(string path, string prefix, string id, string type, string file, bool clrSpecialFile, IEnumerable`1<PdbChecksum> pdbChecksums);
    public static string ToHexString(Byte[] bytes);
    internal static string GetFileName(string path);
}
[FlagsAttribute]
public enum Microsoft.SymbolStore.KeyGenerators.KeyTypeFlags : Enum {
    public int value__;
    public static KeyTypeFlags None;
    public static KeyTypeFlags IdentityKey;
    public static KeyTypeFlags SymbolKey;
    public static KeyTypeFlags ClrKeys;
    public static KeyTypeFlags ForceWindowsPdbs;
    public static KeyTypeFlags HostKeys;
    public static KeyTypeFlags DacDbiKeys;
    public static KeyTypeFlags RuntimeKeys;
    public static KeyTypeFlags PerfMapKeys;
}
public class Microsoft.SymbolStore.KeyGenerators.MachCoreKeyGenerator : KeyGenerator {
    private MachCore _core;
    public MachCoreKeyGenerator(ITracer tracer, SymbolStoreFile file);
    public virtual bool IsValid();
    public virtual bool IsDump();
    public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    private KeyGenerator CreateGenerator(MachLoadedImage loadedImage);
}
public class Microsoft.SymbolStore.KeyGenerators.MachOFatHeaderKeyGenerator : KeyGenerator {
    private MachOFatFile _machoFatFile;
    private string _path;
    public MachOFatHeaderKeyGenerator(ITracer tracer, SymbolStoreFile file);
    public virtual bool IsValid();
    public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
}
public class Microsoft.SymbolStore.KeyGenerators.MachOFileKeyGenerator : KeyGenerator {
    private static string SymbolFileExtension;
    private static string IdentityPrefix;
    private static string SymbolPrefix;
    private static string CoreClrPrefix;
    private static string CoreClrFileName;
    private static String[] s_specialFiles;
    private static String[] s_sosSpecialFiles;
    private static HashSet`1<string> s_coreClrSpecialFiles;
    private static HashSet`1<string> s_dacdbiSpecialFiles;
    private MachOFile _machoFile;
    private string _path;
    public MachOFileKeyGenerator(ITracer tracer, MachOFile machoFile, string path);
    public MachOFileKeyGenerator(ITracer tracer, SymbolStoreFile file);
    private static MachOFileKeyGenerator();
    public virtual bool IsValid();
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.MachOFileKeyGenerator/<GetKeys>d__14")]
public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.MachOFileKeyGenerator/<GetKeys>d__15")]
public static IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags, string path, Byte[] uuid, bool symbolFile, string symbolFileName);
}
public class Microsoft.SymbolStore.KeyGenerators.MinidumpKeyGenerator : KeyGenerator {
    private IAddressSpace _dataSource;
    public MinidumpKeyGenerator(ITracer tracer, SymbolStoreFile file);
    public virtual bool IsValid();
    public virtual bool IsDump();
    public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
}
public class Microsoft.SymbolStore.KeyGenerators.PDBFileKeyGenerator : KeyGenerator {
    private PDBFile _pdbFile;
    private string _path;
    public PDBFileKeyGenerator(ITracer tracer, SymbolStoreFile file);
    public virtual bool IsValid();
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.PDBFileKeyGenerator/<GetKeys>d__4")]
public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    public static SymbolStoreKey GetKey(string path, Guid signature, int age, IEnumerable`1<PdbChecksum> pdbChecksums);
    public static SymbolStoreKey GetKey(string path, Guid signature, int age, string type, IEnumerable`1<PdbChecksum> pdbChecksums);
}
public class Microsoft.SymbolStore.KeyGenerators.PEFileKeyGenerator : KeyGenerator {
    private static string CoreClrFileName;
    private static string ClrFileName;
    private static string SosFileName;
    private static string CoreClrDACFileName;
    private static string ClrDACFileName;
    private static string DbiFileName;
    private static String[] s_knownFilesWithLongNameVariant;
    private static String[] s_knownRuntimeSpecialFiles;
    private PEFile _peFile;
    private string _path;
    public PEFileKeyGenerator(ITracer tracer, PEFile peFile, string path);
    public PEFileKeyGenerator(ITracer tracer, SymbolStoreFile file);
    private static PEFileKeyGenerator();
    public virtual bool IsValid();
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.PEFileKeyGenerator/<GetKeys>d__13")]
public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    private IEnumerable`1<string> GetSOSFiles(string runtimeFileName);
    private IEnumerable`1<string> GetDACFiles(string runtimeFileName);
    private IEnumerable`1<string> GetFilesLongNameVariants(string fileWithLongNameVariant);
    public static SymbolStoreKey GetKey(string path, UInt32 timestamp, UInt32 sizeOfImage);
    private static string BuildId(UInt32 timestamp, UInt32 sizeOfImage);
}
public class Microsoft.SymbolStore.KeyGenerators.PerfMapFileKeyGenerator : KeyGenerator {
    private SymbolStoreFile _file;
    private PerfMapFile _perfmapFile;
    public PerfMapFileKeyGenerator(ITracer tracer, SymbolStoreFile file);
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.PerfMapFileKeyGenerator/<GetKeys>d__3")]
public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    public virtual bool IsValid();
    internal static SymbolStoreKey GetKey(string path, Byte[] signature, UInt32 version);
}
public class Microsoft.SymbolStore.KeyGenerators.PortablePDBFileKeyGenerator : KeyGenerator {
    private SymbolStoreFile _file;
    public PortablePDBFileKeyGenerator(ITracer tracer, SymbolStoreFile file);
    public virtual bool IsValid();
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.PortablePDBFileKeyGenerator/<GetKeys>d__3")]
public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    public static SymbolStoreKey GetKey(string path, Guid pdbId, IEnumerable`1<PdbChecksum> pdbChecksums);
}
public class Microsoft.SymbolStore.KeyGenerators.SourceFileKeyGenerator : KeyGenerator {
    private SymbolStoreFile _file;
    public SourceFileKeyGenerator(ITracer tracer, SymbolStoreFile file);
    public virtual bool IsValid();
    [IteratorStateMachineAttribute("Microsoft.SymbolStore.KeyGenerators.SourceFileKeyGenerator/<GetKeys>d__3")]
public virtual IEnumerable`1<SymbolStoreKey> GetKeys(KeyTypeFlags flags);
    public static SymbolStoreKey GetKey(string path, Byte[] hash);
}
public class Microsoft.SymbolStore.SymbolStoreFile : object {
    public Stream Stream;
    public string FileName;
    public SymbolStoreFile(Stream stream, string fileName);
    public sealed virtual void Dispose();
}
public class Microsoft.SymbolStore.SymbolStoreKey : object {
    public string Index;
    public string FullPathName;
    public bool IsClrSpecialFile;
    public static SymbolStoreKey[] EmptyArray;
    public IEnumerable`1<PdbChecksum> PdbChecksums;
    private static HashSet`1<char> s_invalidChars;
    [ObsoleteAttribute]
public string IndexPrefix { get; }
    public SymbolStoreKey(string index, string fullPathName, bool clrSpecialFile, IEnumerable`1<PdbChecksum> pdbChecksums);
    private static SymbolStoreKey();
    public string get_IndexPrefix();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool IsKeyValid(string index);
}
public class Microsoft.SymbolStore.SymbolStores.CacheSymbolStore : SymbolStore {
    [CompilerGeneratedAttribute]
private string <CacheDirectory>k__BackingField;
    public string CacheDirectory { get; }
    public CacheSymbolStore(ITracer tracer, SymbolStore backingStore, string cacheDirectory);
    [CompilerGeneratedAttribute]
public string get_CacheDirectory();
    protected virtual Task`1<SymbolStoreFile> GetFileInner(SymbolStoreKey key, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.SymbolStore.SymbolStores.CacheSymbolStore/<WriteFileInner>d__5")]
protected virtual Task WriteFileInner(SymbolStoreKey key, SymbolStoreFile file);
    private string GetCacheFilePath(SymbolStoreKey key);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.SymbolStore.SymbolStores.HttpSymbolStore : SymbolStore {
    private HttpClient _client;
    private Func`2<CancellationToken, ValueTask`1<AuthenticationHeaderValue>> _authenticationFunc;
    private bool _clientFailure;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryCount>k__BackingField;
    private HashSet`1<HttpStatusCode> s_retryableStatusCodes;
    private HashSet`1<SocketError> s_retryableSocketErrors;
    public Uri Uri { get; }
    public TimeSpan Timeout { get; public set; }
    public int RetryCount { get; public set; }
    public HttpSymbolStore(ITracer tracer, SymbolStore backingStore, Uri symbolServerUri, Func`2<CancellationToken, ValueTask`1<AuthenticationHeaderValue>> authenticationFunc);
    public HttpSymbolStore(ITracer tracer, SymbolStore backingStore, Uri symbolServerUri, string accessToken);
    public HttpSymbolStore(ITracer tracer, SymbolStore backingStore, Uri symbolServerUri, string scheme, string parameter);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_RetryCount();
    [CompilerGeneratedAttribute]
public void set_RetryCount(int value);
    private static Func`2<CancellationToken, ValueTask`1<AuthenticationHeaderValue>> GetAuthenticationFunc(string scheme, string parameter);
    public void ResetClientFailure();
    [AsyncStateMachineAttribute("Microsoft.SymbolStore.SymbolStores.HttpSymbolStore/<GetFileInner>d__18")]
protected virtual Task`1<SymbolStoreFile> GetFileInner(SymbolStoreKey key, CancellationToken token);
    protected Uri GetRequestUri(string index);
    [AsyncStateMachineAttribute("Microsoft.SymbolStore.SymbolStores.HttpSymbolStore/<GetFileStream>d__20")]
protected Task`1<Stream> GetFileStream(string path, Uri requestUri, CancellationToken token);
    public virtual void Dispose();
    protected bool IsRetryableStatus(HttpStatusCode status);
    protected bool IsRetryableSocketError(SocketError se);
    protected void MarkClientFailure();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class Microsoft.SymbolStore.SymbolStores.SymbolStore : object {
    [CompilerGeneratedAttribute]
private SymbolStore <BackingStore>k__BackingField;
    protected ITracer Tracer;
    public SymbolStore BackingStore { get; }
    public SymbolStore(ITracer tracer);
    public SymbolStore(ITracer tracer, SymbolStore backingStore);
    [CompilerGeneratedAttribute]
public SymbolStore get_BackingStore();
    [AsyncStateMachineAttribute("Microsoft.SymbolStore.SymbolStores.SymbolStore/<GetFile>d__6")]
public Task`1<SymbolStoreFile> GetFile(SymbolStoreKey key, CancellationToken token);
    protected virtual Task`1<SymbolStoreFile> GetFileInner(SymbolStoreKey key, CancellationToken token);
    protected virtual Task WriteFileInner(SymbolStoreKey key, SymbolStoreFile file);
    public virtual void Dispose();
    internal static bool IsPathEqual(string path1, string path2);
    internal static int HashPath(string path);
}
[ObsoleteAttribute]
public class Microsoft.SymbolStore.SymbolStores.SymwebHttpSymbolStore : HttpSymbolStore {
    public SymwebHttpSymbolStore(ITracer tracer, SymbolStore backingStore, Uri symbolServerUri, string personalAccessToken);
    [AsyncStateMachineAttribute("Microsoft.SymbolStore.SymbolStores.SymwebHttpSymbolStore/<GetFileInner>d__1")]
protected virtual Task`1<SymbolStoreFile> GetFileInner(SymbolStoreKey key, CancellationToken token);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<SymbolStoreFile> <>n__0(SymbolStoreKey key, CancellationToken token);
}
public class SOS.DirectorySymbolStore : SymbolStore {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    public string Directory { get; }
    public DirectorySymbolStore(ITracer tracer, SymbolStore backingStore, string directory);
    [CompilerGeneratedAttribute]
public string get_Directory();
    protected virtual Task`1<SymbolStoreFile> GetFileInner(SymbolStoreKey key, CancellationToken token);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
