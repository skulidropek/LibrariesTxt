[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum SOS.Hosting.ClrDebuggingProcessFlags : Enum {
    public int value__;
    public static ClrDebuggingProcessFlags ManagedDebugEventPending;
    public static ClrDebuggingProcessFlags ManagedDebugEventDebuggerLaunch;
}
public class SOS.Hosting.ClrDebuggingVersion : ValueType {
    public short StructVersion;
    public short Major;
    public short Minor;
    public short Build;
    public short Revision;
}
[ExtensionAttribute]
public static class SOS.Hosting.ComWrapper : object {
    [ExtensionAttribute]
public static void ReleaseWithCheck(COMCallableIUnknown comCallable);
    [ExtensionAttribute]
public static void ReleaseWithCheck(CallableCOMWrapper callableCOM);
    public static void ReleaseWithCheck(IntPtr punk);
}
public class SOS.Hosting.CorDebugDataTargetWrapper : COMCallableIUnknown {
    private static Guid IID_ICorDebugDataTarget;
    private static Guid IID_ICorDebugDataTarget4;
    private static Guid IID_ICorDebugMutableDataTarget;
    private static Guid IID_ICorDebugMetaDataLocator;
    private ITarget _target;
    private ISymbolService _symbolService;
    private IMemoryService _memoryService;
    private IThreadService _threadService;
    private IThreadUnwindService _threadUnwindService;
    private ulong _ignoreAddressBitsMask;
    [CompilerGeneratedAttribute]
private IntPtr <ICorDebugDataTarget>k__BackingField;
    public IntPtr ICorDebugDataTarget { get; }
    public CorDebugDataTargetWrapper(IServiceProvider services, IRuntime runtime);
    private static CorDebugDataTargetWrapper();
    [CompilerGeneratedAttribute]
public IntPtr get_ICorDebugDataTarget();
    protected virtual void Destroy();
    private int GetPlatform(IntPtr self, CorDebugPlatform& platform);
    private int ReadVirtual(IntPtr self, ulong address, IntPtr buffer, UInt32 bytesRequested, UInt32* pbytesRead);
    private int GetThreadContext(IntPtr self, UInt32 threadId, UInt32 contextFlags, int contextSize, IntPtr context);
    private int VirtualUnwind(IntPtr self, UInt32 threadId, UInt32 contextSize, Byte[] context);
    private int WriteVirtual(IntPtr self, ulong address, IntPtr buffer, UInt32 bytesRequested);
    private int GetMetaData(IntPtr self, string imagePath, UInt32 imageTimestamp, UInt32 imageSize, UInt32 pathBufferSize, IntPtr pPathBufferSize, IntPtr pPathBuffer);
}
public enum SOS.Hosting.CorDebugPlatform : Enum {
    public int value__;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_X86;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_AMD64;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_IA64;
    public static CorDebugPlatform CORDB_PLATFORM_MAC_PPC;
    public static CorDebugPlatform CORDB_PLATFORM_MAC_X86;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_ARM;
    public static CorDebugPlatform CORDB_PLATFORM_MAC_AMD64;
    public static CorDebugPlatform CORDB_PLATFORM_WINDOWS_ARM64;
    public static CorDebugPlatform CORDB_PLATFORM_POSIX_AMD64;
    public static CorDebugPlatform CORDB_PLATFORM_POSIX_X86;
    public static CorDebugPlatform CORDB_PLATFORM_POSIX_ARM;
    public static CorDebugPlatform CORDB_PLATFORM_POSIX_ARM64;
    public static CorDebugPlatform CORDB_PLATFORM_POSIX_LOONGARCH64;
    public static CorDebugPlatform CORDB_PLATFORM_POSIX_RISCV64;
}
internal class SOS.Hosting.DataTargetWrapper : COMCallableIUnknown {
    private static Guid IID_ICLRDataTarget;
    private static Guid IID_ICLRDataTarget2;
    private static Guid IID_ICLRDataTarget4;
    private static Guid IID_ICLRMetadataLocator;
    private static Guid IID_ICLRRuntimeLocator;
    private static ulong MagicCallbackConstant;
    private IRuntime _runtime;
    private IContextService _contextService;
    private ISymbolService _symbolService;
    private IMemoryService _memoryService;
    private IThreadService _threadService;
    private IModuleService _moduleService;
    private IThreadUnwindService _threadUnwindService;
    private IRemoteMemoryService _remoteMemoryService;
    private ulong _ignoreAddressBitsMask;
    [CompilerGeneratedAttribute]
private IntPtr <IDataTarget>k__BackingField;
    public IntPtr IDataTarget { get; }
    public DataTargetWrapper(IServiceProvider services, IRuntime runtime);
    private static DataTargetWrapper();
    [CompilerGeneratedAttribute]
public IntPtr get_IDataTarget();
    private void AddDataTarget(VTableBuilder builder);
    private void AddDataTarget2(VTableBuilder builder);
    protected virtual void Destroy();
    private int GetMachineType(IntPtr self, IMAGE_FILE_MACHINE& machineType);
    private int GetPointerSize(IntPtr self, Int32& pointerSize);
    private int GetImageBase(IntPtr self, string imagePath, UInt64& baseAddress);
    private int ReadVirtual(IntPtr self, ulong address, IntPtr buffer, UInt32 bytesRequested, UInt32* pbytesRead);
    private int WriteVirtual(IntPtr self, ulong address, IntPtr buffer, UInt32 bytesRequested, UInt32* bytesWritten);
    private int GetTLSValue(IntPtr self, UInt32 threadId, UInt32 index, UInt64* value);
    private int SetTLSValue(IntPtr self, UInt32 threadId, UInt32 index, ulong value);
    private int GetCurrentThreadID(IntPtr self, UInt32& threadId);
    private int GetThreadContext(IntPtr self, UInt32 threadId, UInt32 contextFlags, int contextSize, IntPtr context);
    private int SetThreadContext(IntPtr self, UInt32 threadId, int contextSize, IntPtr context);
    private int Request(IntPtr self, UInt32 reqCode, UInt32 inBufferSize, IntPtr inBuffer, IntPtr outBufferSize, IntPtr* outBuffer);
    private int AllocVirtual(IntPtr self, ulong address, UInt32 size, UInt32 typeFlags, UInt32 protectFlags, UInt64* buffer);
    private int FreeVirtual(IntPtr self, ulong address, UInt32 size, UInt32 typeFlags);
    private int VirtualUnwind(IntPtr self, UInt32 threadId, UInt32 contextSize, Byte[] context);
    private int GetMetadata(IntPtr self, string fileName, UInt32 imageTimestamp, UInt32 imageSize, Byte[] mvid, UInt32 mdRva, UInt32 flags, UInt32 bufferSize, IntPtr buffer, IntPtr dataSize);
    private int GetRuntimeBase(IntPtr self, UInt64& address);
}
internal class SOS.Hosting.DbgEng.DebugAdvanced : object {
    internal DebugAdvanced(DebugClient client, SOSHost soshost);
}
internal class SOS.Hosting.DbgEng.DebugClient : COMCallableIUnknown {
    internal IntPtr IDebugClient;
    private DebugAdvanced _debugAdvanced;
    private DebugControl _debugControl;
    private DebugDataSpaces _debugDataSpaces;
    private DebugRegisters _debugRegisters;
    private DebugSymbols _debugSymbols;
    private DebugSystemObjects _debugSystemObjects;
    internal static int NotImplemented { get; }
    public DebugClient(SOSHost soshost);
    protected virtual void Destroy();
    private static void AddDebugClient(VTableBuilder builder, SOSHost soshost);
    internal static int get_NotImplemented();
}
internal class SOS.Hosting.DbgEng.DebugControl : object {
    internal DebugControl(DebugClient client, SOSHost soshost);
    private static void AddDebugControl(VTableBuilder builder, SOSHost soshost);
    private static void AddDebugControl2(VTableBuilder builder, SOSHost soshost);
}
internal class SOS.Hosting.DbgEng.DebugDataSpaces : object {
    internal DebugDataSpaces(DebugClient client, SOSHost soshost);
    private static void AddDebugDataSpaces(VTableBuilder builder, SOSHost soshost);
    private static void AddDebugDataSpaces2(VTableBuilder builder, SOSHost soshost);
}
internal class SOS.Hosting.DbgEng.DebugRegisters : object {
    internal DebugRegisters(DebugClient client, SOSHost soshost);
    private static void AddDebugRegisters(VTableBuilder builder, SOSHost soshost);
}
internal class SOS.Hosting.DbgEng.DebugSymbols : object {
    internal DebugSymbols(DebugClient client, SOSHost soshost);
    private static void AddDebugSymbols(VTableBuilder builder, SOSHost soshost);
    private static void AddDebugSymbols2(VTableBuilder builder, SOSHost soshost);
    private static void AddDebugSymbols3(VTableBuilder builder, SOSHost soshost);
}
internal class SOS.Hosting.DbgEng.DebugSystemObjects : object {
    internal DebugSystemObjects(DebugClient client, SOSHost soshost);
    private static void AddDebugSystemObjects(VTableBuilder builder, SOSHost soshost);
}
public class SOS.Hosting.DbgEng.Interop._DEBUG_TYPED_DATA : ValueType {
    public ulong ModBase;
    public ulong Offset;
    public ulong EngineHandle;
    public ulong Data;
    public UInt32 Size;
    public UInt32 Flags;
    public UInt32 TypeId;
    public UInt32 BaseTypeId;
    public UInt32 Tag;
    public UInt32 Register;
    [FixedBufferAttribute("System.UInt64", "9")]
public <Internal>e__FixedBuffer Internal;
}
public enum SOS.Hosting.DbgEng.Interop._EXT_TDOP : Enum {
    public int value__;
    public static _EXT_TDOP EXT_TDOP_COPY;
    public static _EXT_TDOP EXT_TDOP_RELEASE;
    public static _EXT_TDOP EXT_TDOP_SET_FROM_EXPR;
    public static _EXT_TDOP EXT_TDOP_SET_FROM_U64_EXPR;
    public static _EXT_TDOP EXT_TDOP_GET_FIELD;
    public static _EXT_TDOP EXT_TDOP_EVALUATE;
    public static _EXT_TDOP EXT_TDOP_GET_TYPE_NAME;
    public static _EXT_TDOP EXT_TDOP_OUTPUT_TYPE_NAME;
    public static _EXT_TDOP EXT_TDOP_OUTPUT_SIMPLE_VALUE;
    public static _EXT_TDOP EXT_TDOP_OUTPUT_FULL_VALUE;
    public static _EXT_TDOP EXT_TDOP_HAS_FIELD;
    public static _EXT_TDOP EXT_TDOP_GET_FIELD_OFFSET;
    public static _EXT_TDOP EXT_TDOP_GET_ARRAY_ELEMENT;
    public static _EXT_TDOP EXT_TDOP_GET_DEREFERENCE;
    public static _EXT_TDOP EXT_TDOP_GET_TYPE_SIZE;
    public static _EXT_TDOP EXT_TDOP_OUTPUT_TYPE_DEFINITION;
    public static _EXT_TDOP EXT_TDOP_GET_POINTER_TO;
    public static _EXT_TDOP EXT_TDOP_SET_FROM_TYPE_ID_AND_U64;
    public static _EXT_TDOP EXT_TDOP_SET_PTR_FROM_TYPE_ID_AND_U64;
    public static _EXT_TDOP EXT_TDOP_COUNT;
}
public class SOS.Hosting.DbgEng.Interop._EXT_TYPED_DATA : ValueType {
    public _EXT_TDOP Operation;
    public UInt32 Flags;
    public _DEBUG_TYPED_DATA InData;
    public _DEBUG_TYPED_DATA OutData;
    public UInt32 InStrIndex;
    public UInt32 In32;
    public UInt32 Out32;
    public ulong In64;
    public ulong Out64;
    public UInt32 StrBufferIndex;
    public UInt32 StrBufferChars;
    public UInt32 StrCharsNeeded;
    public UInt32 DataBufferIndex;
    public UInt32 DataBufferBytes;
    public UInt32 DataBytesNeeded;
    public UInt32 Status;
    [FixedBufferAttribute("System.UInt64", "8")]
public <Reserved>e__FixedBuffer Reserved;
}
public enum SOS.Hosting.DbgEng.Interop.BUS_DATA_TYPE : Enum {
    public int value__;
    public static BUS_DATA_TYPE ConfigurationSpaceUndefined;
    public static BUS_DATA_TYPE Cmos;
    public static BUS_DATA_TYPE EisaConfiguration;
    public static BUS_DATA_TYPE Pos;
    public static BUS_DATA_TYPE CbusConfiguration;
    public static BUS_DATA_TYPE PCIConfiguration;
    public static BUS_DATA_TYPE VMEConfiguration;
    public static BUS_DATA_TYPE NuBusConfiguration;
    public static BUS_DATA_TYPE PCMCIAConfiguration;
    public static BUS_DATA_TYPE MPIConfiguration;
    public static BUS_DATA_TYPE MPSAConfiguration;
    public static BUS_DATA_TYPE PNPISAConfiguration;
    public static BUS_DATA_TYPE SgiInternalConfiguration;
    public static BUS_DATA_TYPE MaximumBusDataType;
}
public enum SOS.Hosting.DbgEng.Interop.CODE_PAGE : Enum {
    public UInt32 value__;
    public static CODE_PAGE ACP;
    public static CODE_PAGE OEMCP;
    public static CODE_PAGE MACCP;
    public static CODE_PAGE THREAD_ACP;
    public static CODE_PAGE SYMBOL;
    public static CODE_PAGE UTF7;
    public static CODE_PAGE UTF8;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_ADDSYNTHMOD : Enum {
    public UInt32 value__;
    public static DEBUG_ADDSYNTHMOD DEFAULT;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_ADDSYNTHSYM : Enum {
    public UInt32 value__;
    public static DEBUG_ADDSYNTHSYM DEFAULT;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_ASMOPT : Enum {
    public UInt32 value__;
    public static DEBUG_ASMOPT DEFAULT;
    public static DEBUG_ASMOPT VERBOSE;
    public static DEBUG_ASMOPT NO_CODE_BYTES;
    public static DEBUG_ASMOPT IGNORE_OUTPUT_WIDTH;
    public static DEBUG_ASMOPT SOURCE_LINE_NUMBER;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_ATTACH : Enum {
    public UInt32 value__;
    public static DEBUG_ATTACH KERNEL_CONNECTION;
    public static DEBUG_ATTACH LOCAL_KERNEL;
    public static DEBUG_ATTACH EXDI_DRIVER;
    public static DEBUG_ATTACH DEFAULT;
    public static DEBUG_ATTACH NONINVASIVE;
    public static DEBUG_ATTACH EXISTING;
    public static DEBUG_ATTACH NONINVASIVE_NO_SUSPEND;
    public static DEBUG_ATTACH INVASIVE_NO_INITIAL_BREAK;
    public static DEBUG_ATTACH INVASIVE_RESUME_PROCESS;
    public static DEBUG_ATTACH NONINVASIVE_ALLOW_PARTIAL;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_BREAKPOINT_ACCESS_TYPE : Enum {
    public UInt32 value__;
    public static DEBUG_BREAKPOINT_ACCESS_TYPE READ;
    public static DEBUG_BREAKPOINT_ACCESS_TYPE WRITE;
    public static DEBUG_BREAKPOINT_ACCESS_TYPE EXECUTE;
    public static DEBUG_BREAKPOINT_ACCESS_TYPE IO;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_BREAKPOINT_FLAG : Enum {
    public UInt32 value__;
    public static DEBUG_BREAKPOINT_FLAG GO_ONLY;
    public static DEBUG_BREAKPOINT_FLAG DEFERRED;
    public static DEBUG_BREAKPOINT_FLAG ENABLED;
    public static DEBUG_BREAKPOINT_FLAG ADDER_ONLY;
    public static DEBUG_BREAKPOINT_FLAG ONE_SHOT;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_BREAKPOINT_PARAMETERS : ValueType {
    public ulong Offset;
    public UInt32 Id;
    public DEBUG_BREAKPOINT_TYPE BreakType;
    public UInt32 ProcType;
    public DEBUG_BREAKPOINT_FLAG Flags;
    public UInt32 DataSize;
    public DEBUG_BREAKPOINT_ACCESS_TYPE DataAccessType;
    public UInt32 PassCount;
    public UInt32 CurrentPassCount;
    public UInt32 MatchThread;
    public UInt32 CommandSize;
    public UInt32 OffsetExpressionSize;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_BREAKPOINT_TYPE : Enum {
    public UInt32 value__;
    public static DEBUG_BREAKPOINT_TYPE CODE;
    public static DEBUG_BREAKPOINT_TYPE DATA;
    public static DEBUG_BREAKPOINT_TYPE TIME;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_CACHED_SYMBOL_INFO : ValueType {
    public ulong ModBase;
    public ulong Arg1;
    public ulong Arg2;
    public UInt32 Id;
    public UInt32 Arg3;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CDS : Enum {
    public UInt32 value__;
    public static DEBUG_CDS ALL;
    public static DEBUG_CDS REGISTERS;
    public static DEBUG_CDS DATA;
    public static DEBUG_CDS REFRESH;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CDS_REFRESH : Enum {
    public UInt32 value__;
    public static DEBUG_CDS_REFRESH EVALUATE;
    public static DEBUG_CDS_REFRESH EXECUTE;
    public static DEBUG_CDS_REFRESH EXECUTECOMMANDFILE;
    public static DEBUG_CDS_REFRESH ADDBREAKPOINT;
    public static DEBUG_CDS_REFRESH REMOVEBREAKPOINT;
    public static DEBUG_CDS_REFRESH WRITEVIRTUAL;
    public static DEBUG_CDS_REFRESH WRITEVIRTUALUNCACHED;
    public static DEBUG_CDS_REFRESH WRITEPHYSICAL;
    public static DEBUG_CDS_REFRESH WRITEPHYSICAL2;
    public static DEBUG_CDS_REFRESH SETVALUE;
    public static DEBUG_CDS_REFRESH SETVALUE2;
    public static DEBUG_CDS_REFRESH SETSCOPE;
    public static DEBUG_CDS_REFRESH SETSCOPEFRAMEBYINDEX;
    public static DEBUG_CDS_REFRESH SETSCOPEFROMJITDEBUGINFO;
    public static DEBUG_CDS_REFRESH SETSCOPEFROMSTOREDEVENT;
    public static DEBUG_CDS_REFRESH INLINESTEP;
    public static DEBUG_CDS_REFRESH INLINESTEP_PSEUDO;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CES : Enum {
    public UInt32 value__;
    public static DEBUG_CES ALL;
    public static DEBUG_CES CURRENT_THREAD;
    public static DEBUG_CES EFFECTIVE_PROCESSOR;
    public static DEBUG_CES BREAKPOINTS;
    public static DEBUG_CES CODE_LEVEL;
    public static DEBUG_CES EXECUTION_STATUS;
    public static DEBUG_CES ENGINE_OPTIONS;
    public static DEBUG_CES LOG_FILE;
    public static DEBUG_CES RADIX;
    public static DEBUG_CES EVENT_FILTERS;
    public static DEBUG_CES PROCESS_OPTIONS;
    public static DEBUG_CES EXTENSIONS;
    public static DEBUG_CES SYSTEMS;
    public static DEBUG_CES ASSEMBLY_OPTIONS;
    public static DEBUG_CES EXPRESSION_SYNTAX;
    public static DEBUG_CES TEXT_REPLACEMENTS;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CES_EXECUTION_STATUS : Enum {
    public ulong value__;
    public static DEBUG_CES_EXECUTION_STATUS INSIDE_WAIT;
    public static DEBUG_CES_EXECUTION_STATUS WAIT_TIMEOUT;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CLASS : Enum {
    public UInt32 value__;
    public static DEBUG_CLASS UNINITIALIZED;
    public static DEBUG_CLASS KERNEL;
    public static DEBUG_CLASS USER_WINDOWS;
    public static DEBUG_CLASS IMAGE_FILE;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CLASS_QUALIFIER : Enum {
    public UInt32 value__;
    public static DEBUG_CLASS_QUALIFIER KERNEL_CONNECTION;
    public static DEBUG_CLASS_QUALIFIER KERNEL_LOCAL;
    public static DEBUG_CLASS_QUALIFIER KERNEL_EXDI_DRIVER;
    public static DEBUG_CLASS_QUALIFIER KERNEL_IDNA;
    public static DEBUG_CLASS_QUALIFIER KERNEL_SMALL_DUMP;
    public static DEBUG_CLASS_QUALIFIER KERNEL_DUMP;
    public static DEBUG_CLASS_QUALIFIER KERNEL_FULL_DUMP;
    public static DEBUG_CLASS_QUALIFIER USER_WINDOWS_PROCESS;
    public static DEBUG_CLASS_QUALIFIER USER_WINDOWS_PROCESS_SERVER;
    public static DEBUG_CLASS_QUALIFIER USER_WINDOWS_IDNA;
    public static DEBUG_CLASS_QUALIFIER USER_WINDOWS_SMALL_DUMP;
    public static DEBUG_CLASS_QUALIFIER USER_WINDOWS_DUMP;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CONNECT_SESSION : Enum {
    public UInt32 value__;
    public static DEBUG_CONNECT_SESSION DEFAULT;
    public static DEBUG_CONNECT_SESSION NO_VERSION;
    public static DEBUG_CONNECT_SESSION NO_ANNOUNCE;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CREATE_PROCESS : Enum {
    public UInt32 value__;
    public static DEBUG_CREATE_PROCESS DEFAULT;
    public static DEBUG_CREATE_PROCESS NO_DEBUG_HEAP;
    public static DEBUG_CREATE_PROCESS THROUGH_RTL;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_CREATE_PROCESS_OPTIONS : ValueType {
    public DEBUG_CREATE_PROCESS CreateFlags;
    public DEBUG_ECREATE_PROCESS EngCreateFlags;
    public UInt32 VerifierFlags;
    public UInt32 Reserved;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CSS : Enum {
    public UInt32 value__;
    public static DEBUG_CSS ALL;
    public static DEBUG_CSS LOADS;
    public static DEBUG_CSS UNLOADS;
    public static DEBUG_CSS SCOPE;
    public static DEBUG_CSS PATHS;
    public static DEBUG_CSS SYMBOL_OPTIONS;
    public static DEBUG_CSS TYPE_OPTIONS;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_CURRENT : Enum {
    public UInt32 value__;
    public static DEBUG_CURRENT DEFAULT;
    public static DEBUG_CURRENT SYMBOL;
    public static DEBUG_CURRENT DISASM;
    public static DEBUG_CURRENT REGISTERS;
    public static DEBUG_CURRENT SOURCE_LINE;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_DATA : Enum {
    public UInt32 value__;
    public static DEBUG_DATA KPCR_OFFSET;
    public static DEBUG_DATA KPRCB_OFFSET;
    public static DEBUG_DATA KTHREAD_OFFSET;
    public static DEBUG_DATA BASE_TRANSLATION_VIRTUAL_OFFSET;
    public static DEBUG_DATA PROCESSOR_IDENTIFICATION;
    public static DEBUG_DATA PROCESSOR_SPEED;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_DATA_SPACE : Enum {
    public UInt32 value__;
    public static DEBUG_DATA_SPACE VIRTUAL;
    public static DEBUG_DATA_SPACE PHYSICAL;
    public static DEBUG_DATA_SPACE CONTROL;
    public static DEBUG_DATA_SPACE IO;
    public static DEBUG_DATA_SPACE MSR;
    public static DEBUG_DATA_SPACE BUS_DATA;
    public static DEBUG_DATA_SPACE DEBUGGER_DATA;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_DISASM : Enum {
    public UInt32 value__;
    public static DEBUG_DISASM EFFECTIVE_ADDRESS;
    public static DEBUG_DISASM MATCHING_SYMBOLS;
    public static DEBUG_DISASM SOURCE_LINE_NUMBER;
    public static DEBUG_DISASM SOURCE_FILE_NAME;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_DUMP : Enum {
    public UInt32 value__;
    public static DEBUG_DUMP SMALL;
    public static DEBUG_DUMP DEFAULT;
    public static DEBUG_DUMP FULL;
    public static DEBUG_DUMP IMAGE_FILE;
    public static DEBUG_DUMP TRACE_LOG;
    public static DEBUG_DUMP WINDOWS_CD;
    public static DEBUG_DUMP KERNEL_DUMP;
    public static DEBUG_DUMP KERNEL_SMALL_DUMP;
    public static DEBUG_DUMP KERNEL_FULL_DUMP;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_DUMP_FILE : Enum {
    public UInt32 value__;
    public static DEBUG_DUMP_FILE BASE;
    public static DEBUG_DUMP_FILE PAGE_FILE_DUMP;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_ECREATE_PROCESS : Enum {
    public UInt32 value__;
    public static DEBUG_ECREATE_PROCESS DEFAULT;
    public static DEBUG_ECREATE_PROCESS INHERIT_HANDLES;
    public static DEBUG_ECREATE_PROCESS USE_VERIFIER_FLAGS;
    public static DEBUG_ECREATE_PROCESS USE_IMPLICIT_COMMAND_LINE;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_EINDEX : Enum {
    public UInt32 value__;
    public static DEBUG_EINDEX NAME;
    public static DEBUG_EINDEX FROM_START;
    public static DEBUG_EINDEX FROM_END;
    public static DEBUG_EINDEX FROM_CURRENT;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_END : Enum {
    public UInt32 value__;
    public static DEBUG_END PASSIVE;
    public static DEBUG_END ACTIVE_TERMINATE;
    public static DEBUG_END ACTIVE_DETACH;
    public static DEBUG_END END_REENTRANT;
    public static DEBUG_END END_DISCONNECT;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_ENGOPT : Enum {
    public UInt32 value__;
    public static DEBUG_ENGOPT NONE;
    public static DEBUG_ENGOPT IGNORE_DBGHELP_VERSION;
    public static DEBUG_ENGOPT IGNORE_EXTENSION_VERSIONS;
    public static DEBUG_ENGOPT ALLOW_NETWORK_PATHS;
    public static DEBUG_ENGOPT DISALLOW_NETWORK_PATHS;
    public static DEBUG_ENGOPT NETWORK_PATHS;
    public static DEBUG_ENGOPT IGNORE_LOADER_EXCEPTIONS;
    public static DEBUG_ENGOPT INITIAL_BREAK;
    public static DEBUG_ENGOPT INITIAL_MODULE_BREAK;
    public static DEBUG_ENGOPT FINAL_BREAK;
    public static DEBUG_ENGOPT NO_EXECUTE_REPEAT;
    public static DEBUG_ENGOPT FAIL_INCOMPLETE_INFORMATION;
    public static DEBUG_ENGOPT ALLOW_READ_ONLY_BREAKPOINTS;
    public static DEBUG_ENGOPT SYNCHRONIZE_BREAKPOINTS;
    public static DEBUG_ENGOPT DISALLOW_SHELL_COMMANDS;
    public static DEBUG_ENGOPT KD_QUIET_MODE;
    public static DEBUG_ENGOPT DISABLE_MANAGED_SUPPORT;
    public static DEBUG_ENGOPT DISABLE_MODULE_SYMBOL_LOAD;
    public static DEBUG_ENGOPT DISABLE_EXECUTION_COMMANDS;
    public static DEBUG_ENGOPT DISALLOW_IMAGE_FILE_MAPPING;
    public static DEBUG_ENGOPT PREFER_DML;
    public static DEBUG_ENGOPT ALL;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_EVENT : Enum {
    public UInt32 value__;
    public static DEBUG_EVENT NONE;
    public static DEBUG_EVENT BREAKPOINT;
    public static DEBUG_EVENT EXCEPTION;
    public static DEBUG_EVENT CREATE_THREAD;
    public static DEBUG_EVENT EXIT_THREAD;
    public static DEBUG_EVENT CREATE_PROCESS;
    public static DEBUG_EVENT EXIT_PROCESS;
    public static DEBUG_EVENT LOAD_MODULE;
    public static DEBUG_EVENT UNLOAD_MODULE;
    public static DEBUG_EVENT SYSTEM_ERROR;
    public static DEBUG_EVENT SESSION_STATUS;
    public static DEBUG_EVENT CHANGE_DEBUGGEE_STATE;
    public static DEBUG_EVENT CHANGE_ENGINE_STATE;
    public static DEBUG_EVENT CHANGE_SYMBOL_STATE;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_EVENT_CONTEXT : ValueType {
    public UInt32 Size;
    public UInt32 ProcessEngineId;
    public UInt32 ThreadEngineId;
    public UInt32 FrameEngineId;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_EXCEPTION_FILTER_PARAMETERS : ValueType {
    public DEBUG_FILTER_EXEC_OPTION ExecutionOption;
    public DEBUG_FILTER_CONTINUE_OPTION ContinueOption;
    public UInt32 TextSize;
    public UInt32 CommandSize;
    public UInt32 SecondCommandSize;
    public UInt32 ExceptionCode;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_EXECUTE : Enum {
    public UInt32 value__;
    public static DEBUG_EXECUTE DEFAULT;
    public static DEBUG_EXECUTE ECHO;
    public static DEBUG_EXECUTE NOT_LOGGED;
    public static DEBUG_EXECUTE NO_REPEAT;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_EXPR : Enum {
    public UInt32 value__;
    public static DEBUG_EXPR MASM;
    public static DEBUG_EXPR CPLUSPLUS;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_FILTER_CONTINUE_OPTION : Enum {
    public UInt32 value__;
    public static DEBUG_FILTER_CONTINUE_OPTION GO_HANDLED;
    public static DEBUG_FILTER_CONTINUE_OPTION GO_NOT_HANDLED;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_FILTER_EVENT : Enum {
    public UInt32 value__;
    public static DEBUG_FILTER_EVENT CREATE_THREAD;
    public static DEBUG_FILTER_EVENT EXIT_THREAD;
    public static DEBUG_FILTER_EVENT CREATE_PROCESS;
    public static DEBUG_FILTER_EVENT EXIT_PROCESS;
    public static DEBUG_FILTER_EVENT LOAD_MODULE;
    public static DEBUG_FILTER_EVENT UNLOAD_MODULE;
    public static DEBUG_FILTER_EVENT SYSTEM_ERROR;
    public static DEBUG_FILTER_EVENT INITIAL_BREAKPOINT;
    public static DEBUG_FILTER_EVENT INITIAL_MODULE_LOAD;
    public static DEBUG_FILTER_EVENT DEBUGGEE_OUTPUT;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_FILTER_EXEC_OPTION : Enum {
    public UInt32 value__;
    public static DEBUG_FILTER_EXEC_OPTION BREAK;
    public static DEBUG_FILTER_EXEC_OPTION SECOND_CHANCE_BREAK;
    public static DEBUG_FILTER_EXEC_OPTION OUTPUT;
    public static DEBUG_FILTER_EXEC_OPTION IGNORE;
    public static DEBUG_FILTER_EXEC_OPTION REMOVE;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_FIND_SOURCE : Enum {
    public UInt32 value__;
    public static DEBUG_FIND_SOURCE DEFAULT;
    public static DEBUG_FIND_SOURCE FULL_PATH;
    public static DEBUG_FIND_SOURCE BEST_MATCH;
    public static DEBUG_FIND_SOURCE NO_SRCSRV;
    public static DEBUG_FIND_SOURCE TOKEN_LOOKUP;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_FORMAT : Enum {
    public UInt32 value__;
    public static DEBUG_FORMAT DEFAULT;
    public static DEBUG_FORMAT CAB_SECONDARY_ALL_IMAGES;
    public static DEBUG_FORMAT WRITE_CAB;
    public static DEBUG_FORMAT CAB_SECONDARY_FILES;
    public static DEBUG_FORMAT NO_OVERWRITE;
    public static DEBUG_FORMAT USER_SMALL_FULL_MEMORY;
    public static DEBUG_FORMAT USER_SMALL_HANDLE_DATA;
    public static DEBUG_FORMAT USER_SMALL_UNLOADED_MODULES;
    public static DEBUG_FORMAT USER_SMALL_INDIRECT_MEMORY;
    public static DEBUG_FORMAT USER_SMALL_DATA_SEGMENTS;
    public static DEBUG_FORMAT USER_SMALL_FILTER_MEMORY;
    public static DEBUG_FORMAT USER_SMALL_FILTER_PATHS;
    public static DEBUG_FORMAT USER_SMALL_PROCESS_THREAD_DATA;
    public static DEBUG_FORMAT USER_SMALL_PRIVATE_READ_WRITE_MEMORY;
    public static DEBUG_FORMAT USER_SMALL_NO_OPTIONAL_DATA;
    public static DEBUG_FORMAT USER_SMALL_FULL_MEMORY_INFO;
    public static DEBUG_FORMAT USER_SMALL_THREAD_INFO;
    public static DEBUG_FORMAT USER_SMALL_CODE_SEGMENTS;
    public static DEBUG_FORMAT USER_SMALL_NO_AUXILIARY_STATE;
    public static DEBUG_FORMAT USER_SMALL_FULL_AUXILIARY_STATE;
    public static DEBUG_FORMAT USER_SMALL_IGNORE_INACCESSIBLE_MEM;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_FRAME : Enum {
    public UInt32 value__;
    public static DEBUG_FRAME DEFAULT;
    public static DEBUG_FRAME IGNORE_INLINE;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_GET_PROC : Enum {
    public UInt32 value__;
    public static DEBUG_GET_PROC DEFAULT;
    public static DEBUG_GET_PROC FULL_MATCH;
    public static DEBUG_GET_PROC ONLY_MATCH;
    public static DEBUG_GET_PROC SERVICE_NAME;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_GET_TEXT_COMPLETIONS : Enum {
    public UInt32 value__;
    public static DEBUG_GET_TEXT_COMPLETIONS NONE;
    public static DEBUG_GET_TEXT_COMPLETIONS NO_DOT_COMMANDS;
    public static DEBUG_GET_TEXT_COMPLETIONS NO_EXTENSION_COMMANDS;
    public static DEBUG_GET_TEXT_COMPLETIONS NO_SYMBOLS;
    public static DEBUG_GET_TEXT_COMPLETIONS IS_DOT_COMMAND;
    public static DEBUG_GET_TEXT_COMPLETIONS IS_EXTENSION_COMMAND;
    public static DEBUG_GET_TEXT_COMPLETIONS IS_SYMBOL;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_GET_TEXT_COMPLETIONS_IN : ValueType {
    public DEBUG_GET_TEXT_COMPLETIONS Flags;
    public UInt32 MatchCountLimit;
    public ulong Reserved0;
    public ulong Reserved1;
    public ulong Reserved2;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_GET_TEXT_COMPLETIONS_OUT : ValueType {
    public DEBUG_GET_TEXT_COMPLETIONS Flags;
    public UInt32 ReplaceIndex;
    public UInt32 MatchCount;
    public UInt32 Reserved1;
    public ulong Reserved2;
    public ulong Reserved3;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_GETFNENT : Enum {
    public UInt32 value__;
    public static DEBUG_GETFNENT DEFAULT;
    public static DEBUG_GETFNENT RAW_ENTRY_ONLY;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_GETMOD : Enum {
    public UInt32 value__;
    public static DEBUG_GETMOD DEFAULT;
    public static DEBUG_GETMOD NO_LOADED_MODULES;
    public static DEBUG_GETMOD NO_UNLOADED_MODULES;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_GSEL : Enum {
    public UInt32 value__;
    public static DEBUG_GSEL DEFAULT;
    public static DEBUG_GSEL NO_SYMBOL_LOADS;
    public static DEBUG_GSEL ALLOW_LOWER;
    public static DEBUG_GSEL ALLOW_HIGHER;
    public static DEBUG_GSEL NEAREST_ONLY;
    public static DEBUG_GSEL INLINE_CALLSITE;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_HANDLE_DATA_BASIC : ValueType {
    public UInt32 TypeNameSize;
    public UInt32 ObjectNameSize;
    public UInt32 Attributes;
    public UInt32 GrantedAccess;
    public UInt32 HandleCount;
    public UInt32 PointerCount;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_HANDLE_DATA_TYPE : Enum {
    public UInt32 value__;
    public static DEBUG_HANDLE_DATA_TYPE BASIC;
    public static DEBUG_HANDLE_DATA_TYPE TYPE_NAME;
    public static DEBUG_HANDLE_DATA_TYPE OBJECT_NAME;
    public static DEBUG_HANDLE_DATA_TYPE HANDLE_COUNT;
    public static DEBUG_HANDLE_DATA_TYPE TYPE_NAME_WIDE;
    public static DEBUG_HANDLE_DATA_TYPE OBJECT_NAME_WIDE;
    public static DEBUG_HANDLE_DATA_TYPE MINI_THREAD_1;
    public static DEBUG_HANDLE_DATA_TYPE MINI_MUTANT_1;
    public static DEBUG_HANDLE_DATA_TYPE MINI_MUTANT_2;
    public static DEBUG_HANDLE_DATA_TYPE PER_HANDLE_OPERATIONS;
    public static DEBUG_HANDLE_DATA_TYPE ALL_HANDLE_OPERATIONS;
    public static DEBUG_HANDLE_DATA_TYPE MINI_PROCESS_1;
    public static DEBUG_HANDLE_DATA_TYPE MINI_PROCESS_2;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_INTERRUPT : Enum {
    public UInt32 value__;
    public static DEBUG_INTERRUPT ACTIVE;
    public static DEBUG_INTERRUPT PASSIVE;
    public static DEBUG_INTERRUPT EXIT;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_LAST_EVENT_INFO : ValueType {
    public DEBUG_LAST_EVENT_INFO_BREAKPOINT Breakpoint;
    public DEBUG_LAST_EVENT_INFO_EXCEPTION Exception;
    public DEBUG_LAST_EVENT_INFO_EXIT_THREAD ExitThread;
    public DEBUG_LAST_EVENT_INFO_EXIT_PROCESS ExitProcess;
    public DEBUG_LAST_EVENT_INFO_LOAD_MODULE LoadModule;
    public DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE UnloadModule;
    public DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR SystemError;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_LAST_EVENT_INFO_BREAKPOINT : ValueType {
    public UInt32 Id;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_LAST_EVENT_INFO_EXCEPTION : ValueType {
    public EXCEPTION_RECORD64 ExceptionRecord;
    public UInt32 FirstChance;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_LAST_EVENT_INFO_EXIT_PROCESS : ValueType {
    public UInt32 ExitCode;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_LAST_EVENT_INFO_EXIT_THREAD : ValueType {
    public UInt32 ExitCode;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_LAST_EVENT_INFO_LOAD_MODULE : ValueType {
    public ulong Base;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR : ValueType {
    public UInt32 Error;
    public UInt32 Level;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE : ValueType {
    public ulong Base;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_LEVEL : Enum {
    public UInt32 value__;
    public static DEBUG_LEVEL SOURCE;
    public static DEBUG_LEVEL ASSEMBLY;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_LOG : Enum {
    public UInt32 value__;
    public static DEBUG_LOG DEFAULT;
    public static DEBUG_LOG APPEND;
    public static DEBUG_LOG UNICODE;
    public static DEBUG_LOG DML;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_MANAGED : Enum {
    public UInt32 value__;
    public static DEBUG_MANAGED DISABLED;
    public static DEBUG_MANAGED ALLOWED;
    public static DEBUG_MANAGED DLL_LOADED;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_MANRESET : Enum {
    public UInt32 value__;
    public static DEBUG_MANRESET DEFAULT;
    public static DEBUG_MANRESET LOAD_DLL;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_MANSTR : Enum {
    public UInt32 value__;
    public static DEBUG_MANSTR NONE;
    public static DEBUG_MANSTR LOADED_SUPPORT_DLL;
    public static DEBUG_MANSTR LOAD_STATUS;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_MODNAME : Enum {
    public UInt32 value__;
    public static DEBUG_MODNAME IMAGE;
    public static DEBUG_MODNAME MODULE;
    public static DEBUG_MODNAME LOADED_IMAGE;
    public static DEBUG_MODNAME SYMBOL_FILE;
    public static DEBUG_MODNAME MAPPED_IMAGE;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_MODULE : Enum {
    public UInt32 value__;
    public static DEBUG_MODULE LOADED;
    public static DEBUG_MODULE UNLOADED;
    public static DEBUG_MODULE USER_MODE;
    public static DEBUG_MODULE EXE_MODULE;
    public static DEBUG_MODULE EXPLICIT;
    public static DEBUG_MODULE SECONDARY;
    public static DEBUG_MODULE SYNTHETIC;
    public static DEBUG_MODULE SYM_BAD_CHECKSUM;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_MODULE_AND_ID : ValueType {
    public ulong ModuleBase;
    public ulong Id;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_MODULE_PARAMETERS : ValueType {
    public ulong Base;
    public UInt32 Size;
    public UInt32 TimeDateStamp;
    public UInt32 Checksum;
    public DEBUG_MODULE Flags;
    public DEBUG_SYMTYPE SymbolType;
    public UInt32 ImageNameSize;
    public UInt32 ModuleNameSize;
    public UInt32 LoadedImageNameSize;
    public UInt32 SymbolFileNameSize;
    public UInt32 MappedImageNameSize;
    [FixedBufferAttribute("System.UInt64", "2")]
public <Reserved>e__FixedBuffer Reserved;
}
[IsReadOnlyAttribute]
public class SOS.Hosting.DbgEng.Interop.DEBUG_OFFSET_REGION : ValueType {
    private ulong _base;
    private ulong _size;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OFFSINFO : Enum {
    public UInt32 value__;
    public static DEBUG_OFFSINFO VIRTUAL_SOURCE;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OUT_TEXT_REPL : Enum {
    public UInt32 value__;
    public static DEBUG_OUT_TEXT_REPL DEFAULT;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OUTCB : Enum {
    public UInt32 value__;
    public static DEBUG_OUTCB TEXT;
    public static DEBUG_OUTCB DML;
    public static DEBUG_OUTCB EXPLICIT_FLUSH;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OUTCBF : Enum {
    public UInt32 value__;
    public static DEBUG_OUTCBF EXPLICIT_FLUSH;
    public static DEBUG_OUTCBF DML_HAS_TAGS;
    public static DEBUG_OUTCBF DML_HAS_SPECIAL_CHARACTERS;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OUTCBI : Enum {
    public UInt32 value__;
    public static DEBUG_OUTCBI EXPLICIT_FLUSH;
    public static DEBUG_OUTCBI TEXT;
    public static DEBUG_OUTCBI DML;
    public static DEBUG_OUTCBI ANY_FORMAT;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OUTCTL : Enum {
    public UInt32 value__;
    public static DEBUG_OUTCTL THIS_CLIENT;
    public static DEBUG_OUTCTL ALL_CLIENTS;
    public static DEBUG_OUTCTL ALL_OTHER_CLIENTS;
    public static DEBUG_OUTCTL IGNORE;
    public static DEBUG_OUTCTL LOG_ONLY;
    public static DEBUG_OUTCTL SEND_MASK;
    public static DEBUG_OUTCTL NOT_LOGGED;
    public static DEBUG_OUTCTL OVERRIDE_MASK;
    public static DEBUG_OUTCTL DML;
    public static DEBUG_OUTCTL AMBIENT_DML;
    public static DEBUG_OUTCTL AMBIENT_TEXT;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OUTPUT : Enum {
    public UInt32 value__;
    public static DEBUG_OUTPUT NORMAL;
    public static DEBUG_OUTPUT ERROR;
    public static DEBUG_OUTPUT WARNING;
    public static DEBUG_OUTPUT VERBOSE;
    public static DEBUG_OUTPUT PROMPT;
    public static DEBUG_OUTPUT PROMPT_REGISTERS;
    public static DEBUG_OUTPUT EXTENSION_WARNING;
    public static DEBUG_OUTPUT DEBUGGEE;
    public static DEBUG_OUTPUT DEBUGGEE_PROMPT;
    public static DEBUG_OUTPUT SYMBOLS;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OUTPUT_SYMBOLS : Enum {
    public int value__;
    public static DEBUG_OUTPUT_SYMBOLS DEFAULT;
    public static DEBUG_OUTPUT_SYMBOLS NO_NAMES;
    public static DEBUG_OUTPUT_SYMBOLS NO_OFFSETS;
    public static DEBUG_OUTPUT_SYMBOLS NO_VALUES;
    public static DEBUG_OUTPUT_SYMBOLS NO_TYPES;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OUTSYM : Enum {
    public UInt32 value__;
    public static DEBUG_OUTSYM DEFAULT;
    public static DEBUG_OUTSYM FORCE_OFFSET;
    public static DEBUG_OUTSYM SOURCE_LINE;
    public static DEBUG_OUTSYM ALLOW_DISPLACEMENT;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_OUTTYPE : Enum {
    public int value__;
    public static DEBUG_OUTTYPE DEFAULT;
    public static DEBUG_OUTTYPE NO_INDENT;
    public static DEBUG_OUTTYPE NO_OFFSET;
    public static DEBUG_OUTTYPE VERBOSE;
    public static DEBUG_OUTTYPE COMPACT_OUTPUT;
    public static DEBUG_OUTTYPE ADDRESS_OF_FIELD;
    public static DEBUG_OUTTYPE ADDRESS_ANT_END;
    public static DEBUG_OUTTYPE BLOCK_RECURSE;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_PHYSICAL : Enum {
    public UInt32 value__;
    public static DEBUG_PHYSICAL DEFAULT;
    public static DEBUG_PHYSICAL CACHED;
    public static DEBUG_PHYSICAL UNCACHED;
    public static DEBUG_PHYSICAL WRITE_COMBINED;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_PROC_DESC : Enum {
    public UInt32 value__;
    public static DEBUG_PROC_DESC DEFAULT;
    public static DEBUG_PROC_DESC NO_PATHS;
    public static DEBUG_PROC_DESC NO_SERVICES;
    public static DEBUG_PROC_DESC NO_MTS_PACKAGES;
    public static DEBUG_PROC_DESC NO_COMMAND_LINE;
    public static DEBUG_PROC_DESC NO_SESSION_ID;
    public static DEBUG_PROC_DESC NO_USER_NAME;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_PROCESS : Enum {
    public UInt32 value__;
    public static DEBUG_PROCESS DEFAULT;
    public static DEBUG_PROCESS DETACH_ON_EXIT;
    public static DEBUG_PROCESS ONLY_THIS_PROCESS;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_READ_USER_MINIDUMP_STREAM : ValueType {
    public UInt32 StreamType;
    public UInt32 Flags;
    public ulong Offset;
    public IntPtr Buffer;
    public UInt32 BufferSize;
    public UInt32 BufferUsed;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_REGISTER : Enum {
    public UInt32 value__;
    public static DEBUG_REGISTER SUB_REGISTER;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_REGISTER_DESCRIPTION : ValueType {
    public DEBUG_VALUE_TYPE Type;
    public DEBUG_REGISTER Flags;
    public ulong SubregMaster;
    public ulong SubregLength;
    public ulong SubregMask;
    public ulong SubregShift;
    public ulong Reserved0;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_REGISTERS : Enum {
    public UInt32 value__;
    public static DEBUG_REGISTERS DEFAULT;
    public static DEBUG_REGISTERS INT32;
    public static DEBUG_REGISTERS INT64;
    public static DEBUG_REGISTERS FLOAT;
    public static DEBUG_REGISTERS ALL;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_REGSRC : Enum {
    public UInt32 value__;
    public static DEBUG_REGSRC DEBUGGEE;
    public static DEBUG_REGSRC EXPLICIT;
    public static DEBUG_REGSRC FRAME;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_REQUEST : Enum {
    public UInt32 value__;
    public static DEBUG_REQUEST SOURCE_PATH_HAS_SOURCE_SERVER;
    public static DEBUG_REQUEST TARGET_EXCEPTION_CONTEXT;
    public static DEBUG_REQUEST TARGET_EXCEPTION_THREAD;
    public static DEBUG_REQUEST TARGET_EXCEPTION_RECORD;
    public static DEBUG_REQUEST GET_ADDITIONAL_CREATE_OPTIONS;
    public static DEBUG_REQUEST SET_ADDITIONAL_CREATE_OPTIONS;
    public static DEBUG_REQUEST GET_WIN32_MAJOR_MINOR_VERSIONS;
    public static DEBUG_REQUEST READ_USER_MINIDUMP_STREAM;
    public static DEBUG_REQUEST TARGET_CAN_DETACH;
    public static DEBUG_REQUEST SET_LOCAL_IMPLICIT_COMMAND_LINE;
    public static DEBUG_REQUEST GET_CAPTURED_EVENT_CODE_OFFSET;
    public static DEBUG_REQUEST READ_CAPTURED_EVENT_CODE_STREAM;
    public static DEBUG_REQUEST EXT_TYPED_DATA_ANSI;
    public static DEBUG_REQUEST GET_EXTENSION_SEARCH_PATH_WIDE;
    public static DEBUG_REQUEST GET_TEXT_COMPLETIONS_WIDE;
    public static DEBUG_REQUEST GET_CACHED_SYMBOL_INFO;
    public static DEBUG_REQUEST ADD_CACHED_SYMBOL_INFO;
    public static DEBUG_REQUEST REMOVE_CACHED_SYMBOL_INFO;
    public static DEBUG_REQUEST GET_TEXT_COMPLETIONS_ANSI;
    public static DEBUG_REQUEST CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE;
    public static DEBUG_REQUEST GET_OFFSET_UNWIND_INFORMATION;
    public static DEBUG_REQUEST GET_DUMP_HEADER;
    public static DEBUG_REQUEST SET_DUMP_HEADER;
    public static DEBUG_REQUEST MIDORI;
    public static DEBUG_REQUEST PROCESS_DESCRIPTORS;
    public static DEBUG_REQUEST MISC_INFORMATION;
    public static DEBUG_REQUEST OPEN_PROCESS_TOKEN;
    public static DEBUG_REQUEST OPEN_THREAD_TOKEN;
    public static DEBUG_REQUEST DUPLICATE_TOKEN;
    public static DEBUG_REQUEST QUERY_INFO_TOKEN;
    public static DEBUG_REQUEST CLOSE_TOKEN;
    public static DEBUG_REQUEST WOW_PROCESS;
    public static DEBUG_REQUEST WOW_MODULE;
    public static DEBUG_REQUEST LIVE_USER_NON_INVASIVE;
    public static DEBUG_REQUEST RESUME_THREAD;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SCOPE_GROUP : Enum {
    public UInt32 value__;
    public static DEBUG_SCOPE_GROUP ARGUMENTS;
    public static DEBUG_SCOPE_GROUP LOCALS;
    public static DEBUG_SCOPE_GROUP ALL;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SERVERS : Enum {
    public UInt32 value__;
    public static DEBUG_SERVERS DEBUGGER;
    public static DEBUG_SERVERS PROCESS;
    public static DEBUG_SERVERS ALL;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SESSION : Enum {
    public UInt32 value__;
    public static DEBUG_SESSION ACTIVE;
    public static DEBUG_SESSION END_SESSION_ACTIVE_TERMINATE;
    public static DEBUG_SESSION END_SESSION_ACTIVE_DETACH;
    public static DEBUG_SESSION END_SESSION_PASSIVE;
    public static DEBUG_SESSION END;
    public static DEBUG_SESSION REBOOT;
    public static DEBUG_SESSION HIBERNATE;
    public static DEBUG_SESSION FAILURE;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SOURCE : Enum {
    public UInt32 value__;
    public static DEBUG_SOURCE IS_STATEMENT;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_SPECIFIC_FILTER_PARAMETERS : ValueType {
    public DEBUG_FILTER_EXEC_OPTION ExecutionOption;
    public DEBUG_FILTER_CONTINUE_OPTION ContinueOption;
    public UInt32 TextSize;
    public UInt32 CommandSize;
    public UInt32 ArgumentSize;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SRCFILE : Enum {
    public UInt32 value__;
    public static DEBUG_SRCFILE SYMBOL_TOKEN;
    public static DEBUG_SRCFILE SYMBOL_TOKEN_SOURCE_COMMAND_WIDE;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_STACK : Enum {
    public UInt32 value__;
    public static DEBUG_STACK ARGUMENTS;
    public static DEBUG_STACK FUNCTION_INFO;
    public static DEBUG_STACK SOURCE_LINE;
    public static DEBUG_STACK FRAME_ADDRESSES;
    public static DEBUG_STACK COLUMN_NAMES;
    public static DEBUG_STACK NONVOLATILE_REGISTERS;
    public static DEBUG_STACK FRAME_NUMBERS;
    public static DEBUG_STACK PARAMETERS;
    public static DEBUG_STACK FRAME_ADDRESSES_RA_ONLY;
    public static DEBUG_STACK FRAME_MEMORY_USAGE;
    public static DEBUG_STACK PARAMETERS_NEWLINE;
    public static DEBUG_STACK DML;
    public static DEBUG_STACK FRAME_OFFSETS;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_STACK_FRAME : ValueType {
    public ulong InstructionOffset;
    public ulong ReturnOffset;
    public ulong FrameOffset;
    public ulong StackOffset;
    public ulong FuncTableEntry;
    [FixedBufferAttribute("System.UInt64", "4")]
public <Params>e__FixedBuffer Params;
    [FixedBufferAttribute("System.UInt64", "6")]
public <Reserved>e__FixedBuffer Reserved;
    public UInt32 Virtual;
    public UInt32 FrameNumber;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_STACK_FRAME_EX : ValueType {
    public ulong InstructionOffset;
    public ulong ReturnOffset;
    public ulong FrameOffset;
    public ulong StackOffset;
    public ulong FuncTableEntry;
    [FixedBufferAttribute("System.UInt64", "4")]
public <Params>e__FixedBuffer Params;
    [FixedBufferAttribute("System.UInt64", "6")]
public <Reserved>e__FixedBuffer Reserved;
    public UInt32 Virtual;
    public UInt32 FrameNumber;
    public UInt32 InlineFrameContext;
    public UInt32 Reserved1;
    public DEBUG_STACK_FRAME_EX(DEBUG_STACK_FRAME dsf);
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_STATUS : Enum {
    public UInt32 value__;
    public static DEBUG_STATUS NO_CHANGE;
    public static DEBUG_STATUS GO;
    public static DEBUG_STATUS GO_HANDLED;
    public static DEBUG_STATUS GO_NOT_HANDLED;
    public static DEBUG_STATUS STEP_OVER;
    public static DEBUG_STATUS STEP_INTO;
    public static DEBUG_STATUS BREAK;
    public static DEBUG_STATUS NO_DEBUGGEE;
    public static DEBUG_STATUS STEP_BRANCH;
    public static DEBUG_STATUS IGNORE_EVENT;
    public static DEBUG_STATUS RESTART_REQUESTED;
    public static DEBUG_STATUS REVERSE_GO;
    public static DEBUG_STATUS REVERSE_STEP_BRANCH;
    public static DEBUG_STATUS REVERSE_STEP_OVER;
    public static DEBUG_STATUS REVERSE_STEP_INTO;
    public static DEBUG_STATUS OUT_OF_SYNC;
    public static DEBUG_STATUS WAIT_INPUT;
    public static DEBUG_STATUS TIMEOUT;
    public static DEBUG_STATUS MASK;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_STATUS_FLAGS : Enum {
    public ulong value__;
    public static DEBUG_STATUS_FLAGS INSIDE_WAIT;
    public static DEBUG_STATUS_FLAGS WAIT_TIMEOUT;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SYMBOL : Enum {
    public UInt32 value__;
    public static DEBUG_SYMBOL EXPANSION_LEVEL_MASK;
    public static DEBUG_SYMBOL EXPANDED;
    public static DEBUG_SYMBOL READ_ONLY;
    public static DEBUG_SYMBOL IS_ARRAY;
    public static DEBUG_SYMBOL IS_FLOAT;
    public static DEBUG_SYMBOL IS_ARGUMENT;
    public static DEBUG_SYMBOL IS_LOCAL;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_SYMBOL_ENTRY : ValueType {
    public ulong ModuleBase;
    public ulong Offset;
    public ulong Id;
    public ulong Arg64;
    public UInt32 Size;
    public UInt32 Flags;
    public UInt32 TypeId;
    public UInt32 NameSize;
    public UInt32 Token;
    public SymTag Tag;
    public UInt32 Arg32;
    public UInt32 Reserved;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_SYMBOL_PARAMETERS : ValueType {
    public ulong Module;
    public UInt32 TypeId;
    public UInt32 ParentSymbol;
    public UInt32 SubElements;
    public DEBUG_SYMBOL Flags;
    public ulong Reserved;
}
[IsReadOnlyAttribute]
public class SOS.Hosting.DbgEng.Interop.DEBUG_SYMBOL_SOURCE_ENTRY : ValueType {
    private ulong _moduleBase;
    private ulong _offset;
    private ulong _fileNameId;
    private ulong _engineInternal;
    private UInt32 _size;
    private UInt32 _flags;
    private UInt32 _fileNameSize;
    private UInt32 _startLine;
    private UInt32 _endLine;
    private UInt32 _startColumn;
    private UInt32 _endColumn;
    private UInt32 _reserved;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SYMINFO : Enum {
    public UInt32 value__;
    public static DEBUG_SYMINFO BREAKPOINT_SOURCE_LINE;
    public static DEBUG_SYMINFO IMAGEHLP_MODULEW64;
    public static DEBUG_SYMINFO GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE;
    public static DEBUG_SYMINFO GET_MODULE_SYMBOL_NAMES_AND_OFFSETS;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SYMTYPE : Enum {
    public UInt32 value__;
    public static DEBUG_SYMTYPE NONE;
    public static DEBUG_SYMTYPE COFF;
    public static DEBUG_SYMTYPE CODEVIEW;
    public static DEBUG_SYMTYPE PDB;
    public static DEBUG_SYMTYPE EXPORT;
    public static DEBUG_SYMTYPE DEFERRED;
    public static DEBUG_SYMTYPE SYM;
    public static DEBUG_SYMTYPE DIA;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SYSOBJINFO : Enum {
    public UInt32 value__;
    public static DEBUG_SYSOBJINFO THREAD_BASIC_INFORMATION;
    public static DEBUG_SYSOBJINFO THREAD_NAME_WIDE;
    public static DEBUG_SYSOBJINFO CURRENT_PROCESS_COOKIE;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_SYSVERSTR : Enum {
    public UInt32 value__;
    public static DEBUG_SYSVERSTR SERVICE_PACK;
    public static DEBUG_SYSVERSTR BUILD;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_TBINFO : Enum {
    public UInt32 value__;
    public static DEBUG_TBINFO NONE;
    public static DEBUG_TBINFO EXIT_STATUS;
    public static DEBUG_TBINFO PRIORITY_CLASS;
    public static DEBUG_TBINFO PRIORITY;
    public static DEBUG_TBINFO TIMES;
    public static DEBUG_TBINFO START_OFFSET;
    public static DEBUG_TBINFO AFFINITY;
    public static DEBUG_TBINFO ALL;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_THREAD_BASIC_INFORMATION : ValueType {
    public DEBUG_TBINFO Valid;
    public UInt32 ExitStatus;
    public UInt32 PriorityClass;
    public UInt32 Priority;
    public ulong CreateTime;
    public ulong ExitTime;
    public ulong KernelTime;
    public ulong UserTime;
    public ulong StartOffset;
    public ulong Affinity;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_TYPEOPTS : Enum {
    public UInt32 value__;
    public static DEBUG_TYPEOPTS UNICODE_DISPLAY;
    public static DEBUG_TYPEOPTS LONGSTATUS_DISPLAY;
    public static DEBUG_TYPEOPTS FORCERADIX_OUTPUT;
    public static DEBUG_TYPEOPTS MATCH_MAXSIZE;
}
public class SOS.Hosting.DbgEng.Interop.DEBUG_VALUE : ValueType {
    public byte I8;
    public ushort I16;
    public UInt32 I32;
    public ulong I64;
    public UInt32 Nat;
    public float F32;
    public double F64;
    [FixedBufferAttribute("System.Byte", "10")]
public <F80Bytes>e__FixedBuffer F80Bytes;
    [FixedBufferAttribute("System.Byte", "11")]
public <F82Bytes>e__FixedBuffer F82Bytes;
    [FixedBufferAttribute("System.Byte", "16")]
public <F128Bytes>e__FixedBuffer F128Bytes;
    [FixedBufferAttribute("System.Byte", "16")]
public <VI8>e__FixedBuffer VI8;
    [FixedBufferAttribute("System.UInt16", "8")]
public <VI16>e__FixedBuffer VI16;
    [FixedBufferAttribute("System.UInt32", "4")]
public <VI32>e__FixedBuffer VI32;
    [FixedBufferAttribute("System.UInt64", "2")]
public <VI64>e__FixedBuffer VI64;
    [FixedBufferAttribute("System.Single", "4")]
public <VF32>e__FixedBuffer VF32;
    [FixedBufferAttribute("System.Double", "2")]
public <VF64>e__FixedBuffer VF64;
    public I64PARTS32 I64Parts32;
    public F128PARTS64 F128Parts64;
    [FixedBufferAttribute("System.Byte", "24")]
public <RawBytes>e__FixedBuffer RawBytes;
    public UInt32 TailOfRawBytes;
    public DEBUG_VALUE_TYPE Type;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_VALUE_TYPE : Enum {
    public UInt32 value__;
    public static DEBUG_VALUE_TYPE INVALID;
    public static DEBUG_VALUE_TYPE INT8;
    public static DEBUG_VALUE_TYPE INT16;
    public static DEBUG_VALUE_TYPE INT32;
    public static DEBUG_VALUE_TYPE INT64;
    public static DEBUG_VALUE_TYPE FLOAT32;
    public static DEBUG_VALUE_TYPE FLOAT64;
    public static DEBUG_VALUE_TYPE FLOAT80;
    public static DEBUG_VALUE_TYPE FLOAT82;
    public static DEBUG_VALUE_TYPE FLOAT128;
    public static DEBUG_VALUE_TYPE VECTOR64;
    public static DEBUG_VALUE_TYPE VECTOR128;
    public static DEBUG_VALUE_TYPE TYPES;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_VSEARCH : Enum {
    public UInt32 value__;
    public static DEBUG_VSEARCH DEFAULT;
    public static DEBUG_VSEARCH WRITABLE_ONLY;
}
public enum SOS.Hosting.DbgEng.Interop.DEBUG_VSOURCE : Enum {
    public UInt32 value__;
    public static DEBUG_VSOURCE INVALID;
    public static DEBUG_VSOURCE DEBUGGEE;
    public static DEBUG_VSOURCE MAPPED_IMAGE;
    public static DEBUG_VSOURCE DUMP_WITHOUT_MEMINFO;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.DEBUG_WAIT : Enum {
    public UInt32 value__;
    public static DEBUG_WAIT DEFAULT;
}
public enum SOS.Hosting.DbgEng.Interop.ECreationDisposition : Enum {
    public UInt32 value__;
    public static ECreationDisposition New;
    public static ECreationDisposition CreateAlways;
    public static ECreationDisposition OpenExisting;
    public static ECreationDisposition OpenAlways;
    public static ECreationDisposition TruncateExisting;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.EFileAccess : Enum {
    public UInt32 value__;
    public static EFileAccess None;
    public static EFileAccess GenericRead;
    public static EFileAccess GenericWrite;
    public static EFileAccess GenericExecute;
    public static EFileAccess GenericAll;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.EFileAttributes : Enum {
    public UInt32 value__;
    public static EFileAttributes Readonly;
    public static EFileAttributes Hidden;
    public static EFileAttributes System;
    public static EFileAttributes Directory;
    public static EFileAttributes Archive;
    public static EFileAttributes Device;
    public static EFileAttributes Normal;
    public static EFileAttributes Temporary;
    public static EFileAttributes SparseFile;
    public static EFileAttributes ReparsePoint;
    public static EFileAttributes Compressed;
    public static EFileAttributes Offline;
    public static EFileAttributes NotContentIndexed;
    public static EFileAttributes Encrypted;
    public static EFileAttributes Write_Through;
    public static EFileAttributes Overlapped;
    public static EFileAttributes NoBuffering;
    public static EFileAttributes RandomAccess;
    public static EFileAttributes SequentialScan;
    public static EFileAttributes DeleteOnClose;
    public static EFileAttributes BackupSemantics;
    public static EFileAttributes PosixSemantics;
    public static EFileAttributes OpenReparsePoint;
    public static EFileAttributes OpenNoRecall;
    public static EFileAttributes FirstPipeInstance;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.EFileShare : Enum {
    public UInt32 value__;
    public static EFileShare None;
    public static EFileShare Read;
    public static EFileShare Write;
    public static EFileShare Delete;
}
public enum SOS.Hosting.DbgEng.Interop.ERROR_LEVEL : Enum {
    public int value__;
    public static ERROR_LEVEL ERROR;
    public static ERROR_LEVEL MINORERROR;
    public static ERROR_LEVEL WARNING;
}
public class SOS.Hosting.DbgEng.Interop.EXCEPTION_RECORD64 : ValueType {
    public UInt32 ExceptionCode;
    public UInt32 ExceptionFlags;
    public ulong ExceptionRecord;
    public ulong ExceptionAddress;
    public UInt32 NumberParameters;
    public UInt32 __unusedAlignment;
    [FixedBufferAttribute("System.UInt64", "15")]
public <ExceptionInformation>e__FixedBuffer ExceptionInformation;
}
public class SOS.Hosting.DbgEng.Interop.EXT_TYPED_DATA : object {
    public _EXT_TDOP Operation;
    public UInt32 Flags;
    public _DEBUG_TYPED_DATA InData;
    public _DEBUG_TYPED_DATA OutData;
    public UInt32 InStrIndex;
    public UInt32 In32;
    public UInt32 Out32;
    public ulong In64;
    public ulong Out64;
    public UInt32 StrBufferIndex;
    public UInt32 StrBufferChars;
    public UInt32 StrCharsNeeded;
    public UInt32 DataBufferIndex;
    public UInt32 DataBufferBytes;
    public UInt32 DataBytesNeeded;
    public UInt32 Status;
}
public class SOS.Hosting.DbgEng.Interop.F128PARTS64 : ValueType {
    public ulong LowPart;
    public ulong HighPart;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.FORMAT_MESSAGE : Enum {
    public int value__;
    public static FORMAT_MESSAGE ALLOCATE_BUFFER;
    public static FORMAT_MESSAGE IGNORE_INSERTS;
    public static FORMAT_MESSAGE FROM_STRING;
    public static FORMAT_MESSAGE FROM_HMODULE;
    public static FORMAT_MESSAGE FROM_SYSTEM;
    public static FORMAT_MESSAGE ARGUMENT_ARRAY;
}
public class SOS.Hosting.DbgEng.Interop.I64PARTS32 : ValueType {
    public UInt32 LowPart;
    public UInt32 HighPart;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("f2df5f53-071f-47bd-9de6-5734c3fed689")]
public interface SOS.Hosting.DbgEng.Interop.IDebugAdvanced {
    public abstract virtual int GetThreadContext(IntPtr Context, int ContextSize);
    public abstract virtual int SetThreadContext(IntPtr Context, int ContextSize);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("716d14c9-119b-4ba5-af1f-0890e672416a")]
public interface SOS.Hosting.DbgEng.Interop.IDebugAdvanced2 {
    public abstract virtual int GetThreadContext(IntPtr Context, int ContextSize);
    public abstract virtual int SetThreadContext(IntPtr Context, int ContextSize);
    public abstract virtual int Request(DEBUG_REQUEST Request, Byte[] inBuffer, int InBufferSize, Byte[] outBuffer, int OutBufferSize, Int32& OutSize);
    public abstract virtual int GetSourceFileInformation(DEBUG_SRCFILE Which, string SourceFile, ulong Arg64, UInt32 Arg32, Byte[] buffer, int BufferSize, Int32& InfoSize);
    public abstract virtual int FindSourceFileAndToken(UInt32 StartElement, ulong ModAddr, string File, DEBUG_FIND_SOURCE Flags, Byte[] buffer, int FileTokenSize, Int32& FoundElement, StringBuilder Buffer, int BufferSize, Int32& FoundSize);
    public abstract virtual int GetSymbolInformation(DEBUG_SYMINFO Which, ulong Arg64, UInt32 Arg32, Byte[] buffer, int BufferSize, Int32& InfoSize, StringBuilder StringBuffer, int StringBufferSize, Int32& StringSize);
    public abstract virtual int GetSystemObjectInformation(DEBUG_SYSOBJINFO Which, ulong Arg64, UInt32 Arg32, Byte[] buffer, int BufferSize, Int32& InfoSize);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("cba4abb4-84c4-444d-87ca-a04e13286739")]
public interface SOS.Hosting.DbgEng.Interop.IDebugAdvanced3 {
    public abstract virtual int GetThreadContext(IntPtr Context, int ContextSize);
    public abstract virtual int SetThreadContext(IntPtr Context, int ContextSize);
    public abstract virtual int Request(DEBUG_REQUEST Request, Byte[] inBuffer, int InBufferSize, Byte[] outBuffer, int OutBufferSize, Int32& OutSize);
    public abstract virtual int GetSourceFileInformation(DEBUG_SRCFILE Which, string SourceFile, ulong Arg64, UInt32 Arg32, Byte[] buffer, int BufferSize, Int32& InfoSize);
    public abstract virtual int FindSourceFileAndToken(UInt32 StartElement, ulong ModAddr, string File, DEBUG_FIND_SOURCE Flags, Byte[] buffer, int FileTokenSize, Int32& FoundElement, StringBuilder Buffer, int BufferSize, Int32& FoundSize);
    public abstract virtual int GetSymbolInformation(DEBUG_SYMINFO Which, ulong Arg64, UInt32 Arg32, Byte[] buffer, int BufferSize, Int32& InfoSize, StringBuilder StringBuffer, int StringBufferSize, Int32& StringSize);
    public abstract virtual int GetSystemObjectInformation(DEBUG_SYSOBJINFO Which, ulong Arg64, UInt32 Arg32, Byte[] buffer, int BufferSize, Int32& InfoSize);
    public abstract virtual int GetSourceFileInformationWide(DEBUG_SRCFILE Which, string SourceFile, ulong Arg64, UInt32 Arg32, Byte[] buffer, int BufferSize, Int32& InfoSize);
    public abstract virtual int FindSourceFileAndTokenWide(UInt32 StartElement, ulong ModAddr, string File, DEBUG_FIND_SOURCE Flags, Byte[] buffer, int FileTokenSize, Int32& FoundElement, StringBuilder Buffer, int BufferSize, Int32& FoundSize);
    public abstract virtual int GetSymbolInformationWide(DEBUG_SYMINFO Which, ulong Arg64, UInt32 Arg32, Byte[] buffer, int BufferSize, Int32& InfoSize, StringBuilder StringBuffer, int StringBufferSize, Int32& StringSize);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5bd9d474-5975-423a-b88b-65a8e7110e65")]
public interface SOS.Hosting.DbgEng.Interop.IDebugBreakpoint {
    public abstract virtual int GetId(UInt32& Id);
    public abstract virtual int GetType(DEBUG_BREAKPOINT_TYPE& BreakType, UInt32& ProcType);
    public abstract virtual int GetAdder(IDebugClient& Adder);
    public abstract virtual int GetFlags(DEBUG_BREAKPOINT_FLAG& Flags);
    public abstract virtual int AddFlags(DEBUG_BREAKPOINT_FLAG Flags);
    public abstract virtual int RemoveFlags(DEBUG_BREAKPOINT_FLAG Flags);
    public abstract virtual int SetFlags(DEBUG_BREAKPOINT_FLAG Flags);
    public abstract virtual int GetOffset(UInt64& Offset);
    public abstract virtual int SetOffset(ulong Offset);
    public abstract virtual int GetDataParameters(UInt32& Size, DEBUG_BREAKPOINT_ACCESS_TYPE& AccessType);
    public abstract virtual int SetDataParameters(UInt32 Size, DEBUG_BREAKPOINT_ACCESS_TYPE AccessType);
    public abstract virtual int GetPassCount(UInt32& Count);
    public abstract virtual int SetPassCount(UInt32 Count);
    public abstract virtual int GetCurrentPassCount(UInt32& Count);
    public abstract virtual int GetMatchThreadId(UInt32& Id);
    public abstract virtual int SetMatchThreadId(UInt32 Thread);
    public abstract virtual int GetCommand(StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetCommand(string Command);
    public abstract virtual int GetOffsetExpression(StringBuilder Buffer, int BufferSize, UInt32& ExpressionSize);
    public abstract virtual int SetOffsetExpression(string Expression);
    public abstract virtual int GetParameters(DEBUG_BREAKPOINT_PARAMETERS& Params);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1b278d20-79f2-426e-a3f9-c1ddf375d48e")]
public interface SOS.Hosting.DbgEng.Interop.IDebugBreakpoint2 {
    public abstract virtual int GetId(UInt32& Id);
    public abstract virtual int GetType(DEBUG_BREAKPOINT_TYPE& BreakType, UInt32& ProcType);
    public abstract virtual int GetAdder(IDebugClient& Adder);
    public abstract virtual int GetFlags(DEBUG_BREAKPOINT_FLAG& Flags);
    public abstract virtual int AddFlags(DEBUG_BREAKPOINT_FLAG Flags);
    public abstract virtual int RemoveFlags(DEBUG_BREAKPOINT_FLAG Flags);
    public abstract virtual int SetFlags(DEBUG_BREAKPOINT_FLAG Flags);
    public abstract virtual int GetOffset(UInt64& Offset);
    public abstract virtual int SetOffset(ulong Offset);
    public abstract virtual int GetDataParameters(UInt32& Size, DEBUG_BREAKPOINT_ACCESS_TYPE& AccessType);
    public abstract virtual int SetDataParameters(UInt32 Size, DEBUG_BREAKPOINT_ACCESS_TYPE AccessType);
    public abstract virtual int GetPassCount(UInt32& Count);
    public abstract virtual int SetPassCount(UInt32 Count);
    public abstract virtual int GetCurrentPassCount(UInt32& Count);
    public abstract virtual int GetMatchThreadId(UInt32& Id);
    public abstract virtual int SetMatchThreadId(UInt32 Thread);
    public abstract virtual int GetCommand(StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetCommand(string Command);
    public abstract virtual int GetOffsetExpression(StringBuilder Buffer, int BufferSize, UInt32& ExpressionSize);
    public abstract virtual int SetOffsetExpression(string Expression);
    public abstract virtual int GetParameters(DEBUG_BREAKPOINT_PARAMETERS& Params);
    public abstract virtual int GetCommandWide(StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetCommandWide(string Command);
    public abstract virtual int GetOffsetExpressionWide(StringBuilder Buffer, int BufferSize, UInt32& ExpressionSize);
    public abstract virtual int SetOffsetExpressionWide(string Command);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("38f5c249-b448-43bb-9835-579d4ec02249")]
public interface SOS.Hosting.DbgEng.Interop.IDebugBreakpoint3 {
    public abstract virtual int GetId(UInt32& Id);
    public abstract virtual int GetType(DEBUG_BREAKPOINT_TYPE& BreakType, UInt32& ProcType);
    public abstract virtual int GetAdder(IDebugClient& Adder);
    public abstract virtual int GetFlags(DEBUG_BREAKPOINT_FLAG& Flags);
    public abstract virtual int AddFlags(DEBUG_BREAKPOINT_FLAG Flags);
    public abstract virtual int RemoveFlags(DEBUG_BREAKPOINT_FLAG Flags);
    public abstract virtual int SetFlags(DEBUG_BREAKPOINT_FLAG Flags);
    public abstract virtual int GetOffset(UInt64& Offset);
    public abstract virtual int SetOffset(ulong Offset);
    public abstract virtual int GetDataParameters(UInt32& Size, DEBUG_BREAKPOINT_ACCESS_TYPE& AccessType);
    public abstract virtual int SetDataParameters(UInt32 Size, DEBUG_BREAKPOINT_ACCESS_TYPE AccessType);
    public abstract virtual int GetPassCount(UInt32& Count);
    public abstract virtual int SetPassCount(UInt32 Count);
    public abstract virtual int GetCurrentPassCount(UInt32& Count);
    public abstract virtual int GetMatchThreadId(UInt32& Id);
    public abstract virtual int SetMatchThreadId(UInt32 Thread);
    public abstract virtual int GetCommand(StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetCommand(string Command);
    public abstract virtual int GetOffsetExpression(StringBuilder Buffer, int BufferSize, UInt32& ExpressionSize);
    public abstract virtual int SetOffsetExpression(string Expression);
    public abstract virtual int GetParameters(DEBUG_BREAKPOINT_PARAMETERS& Params);
    public abstract virtual int GetCommandWide(StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetCommandWide(string Command);
    public abstract virtual int GetOffsetExpressionWide(StringBuilder Buffer, int BufferSize, UInt32& ExpressionSize);
    public abstract virtual int SetOffsetExpressionWide(string Command);
    public abstract virtual int GetGuid(Guid& Guid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("27fe5639-8407-4f47-8364-ee118fb08ac8")]
public interface SOS.Hosting.DbgEng.Interop.IDebugClient {
    public abstract virtual int AttachKernel(DEBUG_ATTACH Flags, string ConnectOptions);
    public abstract virtual int GetKernelConnectionOptions(StringBuilder Buffer, int BufferSize, UInt32& OptionsSize);
    public abstract virtual int SetKernelConnectionOptions(string Options);
    public abstract virtual int StartProcessServer(DEBUG_CLASS Flags, string Options, IntPtr Reserved);
    public abstract virtual int ConnectProcessServer(string RemoteOptions, UInt64& Server);
    public abstract virtual int DisconnectProcessServer(ulong Server);
    public abstract virtual int GetRunningProcessSystemIds(ulong Server, UInt32[] Ids, UInt32 Count, UInt32& ActualCount);
    public abstract virtual int GetRunningProcessSystemIdByExecutableName(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescription(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int AttachProcess(ulong Server, UInt32 ProcessID, DEBUG_ATTACH AttachFlags);
    public abstract virtual int CreateProcess(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags);
    public abstract virtual int CreateProcessAndAttach(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int GetProcessOptions(DEBUG_PROCESS& Options);
    public abstract virtual int AddProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int RemoveProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int SetProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int OpenDumpFile(string DumpFile);
    public abstract virtual int WriteDumpFile(string DumpFile, DEBUG_DUMP Qualifier);
    public abstract virtual int ConnectSession(DEBUG_CONNECT_SESSION Flags, UInt32 HistoryLimit);
    public abstract virtual int StartServer(string Options);
    public abstract virtual int OutputServer(DEBUG_OUTCTL OutputControl, string Machine, DEBUG_SERVERS Flags);
    public abstract virtual int TerminateProcesses();
    public abstract virtual int DetachProcesses();
    public abstract virtual int EndSession(DEBUG_END Flags);
    public abstract virtual int GetExitCode(UInt32& Code);
    public abstract virtual int DispatchCallbacks(UInt32 Timeout);
    public abstract virtual int ExitDispatch(IDebugClient Client);
    public abstract virtual int CreateClient(IDebugClient& Client);
    public abstract virtual int GetInputCallbacks(IDebugInputCallbacks& Callbacks);
    public abstract virtual int SetInputCallbacks(IDebugInputCallbacks Callbacks);
    public abstract virtual int GetOutputCallbacks(IDebugOutputCallbacks& Callbacks);
    public abstract virtual int SetOutputCallbacks(IDebugOutputCallbacks Callbacks);
    public abstract virtual int GetOutputMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOutputMask(DEBUG_OUTPUT Mask);
    public abstract virtual int GetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT Mask);
    public abstract virtual int GetOutputWidth(UInt32& Columns);
    public abstract virtual int SetOutputWidth(UInt32 Columns);
    public abstract virtual int GetOutputLinePrefix(StringBuilder Buffer, int BufferSize, UInt32& PrefixSize);
    public abstract virtual int SetOutputLinePrefix(string Prefix);
    public abstract virtual int GetIdentity(StringBuilder Buffer, int BufferSize, UInt32& IdentitySize);
    public abstract virtual int OutputIdentity(DEBUG_OUTCTL OutputControl, UInt32 Flags, string Format);
    public abstract virtual int GetEventCallbacks(IDebugEventCallbacks& Callbacks);
    public abstract virtual int SetEventCallbacks(IDebugEventCallbacks Callbacks);
    public abstract virtual int FlushCallbacks();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("edbed635-372e-4dab-bbfe-ed0d2f63be81")]
public interface SOS.Hosting.DbgEng.Interop.IDebugClient2 {
    public abstract virtual int AttachKernel(DEBUG_ATTACH Flags, string ConnectOptions);
    public abstract virtual int GetKernelConnectionOptions(StringBuilder Buffer, int BufferSize, UInt32& OptionsSize);
    public abstract virtual int SetKernelConnectionOptions(string Options);
    public abstract virtual int StartProcessServer(DEBUG_CLASS Flags, string Options, IntPtr Reserved);
    public abstract virtual int ConnectProcessServer(string RemoteOptions, UInt64& Server);
    public abstract virtual int DisconnectProcessServer(ulong Server);
    public abstract virtual int GetRunningProcessSystemIds(ulong Server, UInt32[] Ids, UInt32 Count, UInt32& ActualCount);
    public abstract virtual int GetRunningProcessSystemIdByExecutableName(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescription(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int AttachProcess(ulong Server, UInt32 ProcessID, DEBUG_ATTACH AttachFlags);
    public abstract virtual int CreateProcess(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags);
    public abstract virtual int CreateProcessAndAttach(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int GetProcessOptions(DEBUG_PROCESS& Options);
    public abstract virtual int AddProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int RemoveProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int SetProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int OpenDumpFile(string DumpFile);
    public abstract virtual int WriteDumpFile(string DumpFile, DEBUG_DUMP Qualifier);
    public abstract virtual int ConnectSession(DEBUG_CONNECT_SESSION Flags, UInt32 HistoryLimit);
    public abstract virtual int StartServer(string Options);
    public abstract virtual int OutputServer(DEBUG_OUTCTL OutputControl, string Machine, DEBUG_SERVERS Flags);
    public abstract virtual int TerminateProcesses();
    public abstract virtual int DetachProcesses();
    public abstract virtual int EndSession(DEBUG_END Flags);
    public abstract virtual int GetExitCode(UInt32& Code);
    public abstract virtual int DispatchCallbacks(UInt32 Timeout);
    public abstract virtual int ExitDispatch(IDebugClient Client);
    public abstract virtual int CreateClient(IDebugClient& Client);
    public abstract virtual int GetInputCallbacks(IDebugInputCallbacks& Callbacks);
    public abstract virtual int SetInputCallbacks(IDebugInputCallbacks Callbacks);
    public abstract virtual int GetOutputCallbacks(IDebugOutputCallbacks& Callbacks);
    public abstract virtual int SetOutputCallbacks(IDebugOutputCallbacks Callbacks);
    public abstract virtual int GetOutputMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOutputMask(DEBUG_OUTPUT Mask);
    public abstract virtual int GetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT Mask);
    public abstract virtual int GetOutputWidth(UInt32& Columns);
    public abstract virtual int SetOutputWidth(UInt32 Columns);
    public abstract virtual int GetOutputLinePrefix(StringBuilder Buffer, int BufferSize, UInt32& PrefixSize);
    public abstract virtual int SetOutputLinePrefix(string Prefix);
    public abstract virtual int GetIdentity(StringBuilder Buffer, int BufferSize, UInt32& IdentitySize);
    public abstract virtual int OutputIdentity(DEBUG_OUTCTL OutputControl, UInt32 Flags, string Format);
    public abstract virtual int GetEventCallbacks(IDebugEventCallbacks& Callbacks);
    public abstract virtual int SetEventCallbacks(IDebugEventCallbacks Callbacks);
    public abstract virtual int FlushCallbacks();
    public abstract virtual int WriteDumpFile2(string DumpFile, DEBUG_DUMP Qualifier, DEBUG_FORMAT FormatFlags, string Comment);
    public abstract virtual int AddDumpInformationFile(string InfoFile, DEBUG_DUMP_FILE Type);
    public abstract virtual int EndProcessServer(ulong Server);
    public abstract virtual int WaitForProcessServerEnd(UInt32 Timeout);
    public abstract virtual int IsKernelDebuggerEnabled();
    public abstract virtual int TerminateCurrentProcess();
    public abstract virtual int DetachCurrentProcess();
    public abstract virtual int AbandonCurrentProcess();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("dd492d7f-71b8-4ad6-a8dc-1c887479ff91")]
public interface SOS.Hosting.DbgEng.Interop.IDebugClient3 {
    public abstract virtual int AttachKernel(DEBUG_ATTACH Flags, string ConnectOptions);
    public abstract virtual int GetKernelConnectionOptions(StringBuilder Buffer, int BufferSize, UInt32& OptionsSize);
    public abstract virtual int SetKernelConnectionOptions(string Options);
    public abstract virtual int StartProcessServer(DEBUG_CLASS Flags, string Options, IntPtr Reserved);
    public abstract virtual int ConnectProcessServer(string RemoteOptions, UInt64& Server);
    public abstract virtual int DisconnectProcessServer(ulong Server);
    public abstract virtual int GetRunningProcessSystemIds(ulong Server, UInt32[] Ids, UInt32 Count, UInt32& ActualCount);
    public abstract virtual int GetRunningProcessSystemIdByExecutableName(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescription(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int AttachProcess(ulong Server, UInt32 ProcessID, DEBUG_ATTACH AttachFlags);
    public abstract virtual int CreateProcess(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags);
    public abstract virtual int CreateProcessAndAttach(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int GetProcessOptions(DEBUG_PROCESS& Options);
    public abstract virtual int AddProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int RemoveProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int SetProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int OpenDumpFile(string DumpFile);
    public abstract virtual int WriteDumpFile(string DumpFile, DEBUG_DUMP Qualifier);
    public abstract virtual int ConnectSession(DEBUG_CONNECT_SESSION Flags, UInt32 HistoryLimit);
    public abstract virtual int StartServer(string Options);
    public abstract virtual int OutputServer(DEBUG_OUTCTL OutputControl, string Machine, DEBUG_SERVERS Flags);
    public abstract virtual int TerminateProcesses();
    public abstract virtual int DetachProcesses();
    public abstract virtual int EndSession(DEBUG_END Flags);
    public abstract virtual int GetExitCode(UInt32& Code);
    public abstract virtual int DispatchCallbacks(UInt32 Timeout);
    public abstract virtual int ExitDispatch(IDebugClient Client);
    public abstract virtual int CreateClient(IDebugClient& Client);
    public abstract virtual int GetInputCallbacks(IDebugInputCallbacks& Callbacks);
    public abstract virtual int SetInputCallbacks(IDebugInputCallbacks Callbacks);
    public abstract virtual int GetOutputCallbacks(IDebugOutputCallbacks& Callbacks);
    public abstract virtual int SetOutputCallbacks(IDebugOutputCallbacks Callbacks);
    public abstract virtual int GetOutputMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOutputMask(DEBUG_OUTPUT Mask);
    public abstract virtual int GetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT Mask);
    public abstract virtual int GetOutputWidth(UInt32& Columns);
    public abstract virtual int SetOutputWidth(UInt32 Columns);
    public abstract virtual int GetOutputLinePrefix(StringBuilder Buffer, int BufferSize, UInt32& PrefixSize);
    public abstract virtual int SetOutputLinePrefix(string Prefix);
    public abstract virtual int GetIdentity(StringBuilder Buffer, int BufferSize, UInt32& IdentitySize);
    public abstract virtual int OutputIdentity(DEBUG_OUTCTL OutputControl, UInt32 Flags, string Format);
    public abstract virtual int GetEventCallbacks(IDebugEventCallbacks& Callbacks);
    public abstract virtual int SetEventCallbacks(IDebugEventCallbacks Callbacks);
    public abstract virtual int FlushCallbacks();
    public abstract virtual int WriteDumpFile2(string DumpFile, DEBUG_DUMP Qualifier, DEBUG_FORMAT FormatFlags, string Comment);
    public abstract virtual int AddDumpInformationFile(string InfoFile, DEBUG_DUMP_FILE Type);
    public abstract virtual int EndProcessServer(ulong Server);
    public abstract virtual int WaitForProcessServerEnd(UInt32 Timeout);
    public abstract virtual int IsKernelDebuggerEnabled();
    public abstract virtual int TerminateCurrentProcess();
    public abstract virtual int DetachCurrentProcess();
    public abstract virtual int AbandonCurrentProcess();
    public abstract virtual int GetRunningProcessSystemIdByExecutableNameWide(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescriptionWide(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int CreateProcessWide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS CreateFlags);
    public abstract virtual int CreateProcessAndAttachWide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS CreateFlags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("ca83c3de-5089-4cf8-93c8-d892387f2a5e")]
public interface SOS.Hosting.DbgEng.Interop.IDebugClient4 {
    public abstract virtual int AttachKernel(DEBUG_ATTACH Flags, string ConnectOptions);
    public abstract virtual int GetKernelConnectionOptions(StringBuilder Buffer, int BufferSize, UInt32& OptionsSize);
    public abstract virtual int SetKernelConnectionOptions(string Options);
    public abstract virtual int StartProcessServer(DEBUG_CLASS Flags, string Options, IntPtr Reserved);
    public abstract virtual int ConnectProcessServer(string RemoteOptions, UInt64& Server);
    public abstract virtual int DisconnectProcessServer(ulong Server);
    public abstract virtual int GetRunningProcessSystemIds(ulong Server, UInt32[] Ids, UInt32 Count, UInt32& ActualCount);
    public abstract virtual int GetRunningProcessSystemIdByExecutableName(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescription(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int AttachProcess(ulong Server, UInt32 ProcessID, DEBUG_ATTACH AttachFlags);
    public abstract virtual int CreateProcess(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags);
    public abstract virtual int CreateProcessAndAttach(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int GetProcessOptions(DEBUG_PROCESS& Options);
    public abstract virtual int AddProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int RemoveProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int SetProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int OpenDumpFile(string DumpFile);
    public abstract virtual int WriteDumpFile(string DumpFile, DEBUG_DUMP Qualifier);
    public abstract virtual int ConnectSession(DEBUG_CONNECT_SESSION Flags, UInt32 HistoryLimit);
    public abstract virtual int StartServer(string Options);
    public abstract virtual int OutputServer(DEBUG_OUTCTL OutputControl, string Machine, DEBUG_SERVERS Flags);
    public abstract virtual int TerminateProcesses();
    public abstract virtual int DetachProcesses();
    public abstract virtual int EndSession(DEBUG_END Flags);
    public abstract virtual int GetExitCode(UInt32& Code);
    public abstract virtual int DispatchCallbacks(UInt32 Timeout);
    public abstract virtual int ExitDispatch(IDebugClient Client);
    public abstract virtual int CreateClient(IDebugClient& Client);
    public abstract virtual int GetInputCallbacks(IDebugInputCallbacks& Callbacks);
    public abstract virtual int SetInputCallbacks(IDebugInputCallbacks Callbacks);
    public abstract virtual int GetOutputCallbacks(IDebugOutputCallbacks& Callbacks);
    public abstract virtual int SetOutputCallbacks(IDebugOutputCallbacks Callbacks);
    public abstract virtual int GetOutputMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOutputMask(DEBUG_OUTPUT Mask);
    public abstract virtual int GetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT Mask);
    public abstract virtual int GetOutputWidth(UInt32& Columns);
    public abstract virtual int SetOutputWidth(UInt32 Columns);
    public abstract virtual int GetOutputLinePrefix(StringBuilder Buffer, int BufferSize, UInt32& PrefixSize);
    public abstract virtual int SetOutputLinePrefix(string Prefix);
    public abstract virtual int GetIdentity(StringBuilder Buffer, int BufferSize, UInt32& IdentitySize);
    public abstract virtual int OutputIdentity(DEBUG_OUTCTL OutputControl, UInt32 Flags, string Format);
    public abstract virtual int GetEventCallbacks(IDebugEventCallbacks& Callbacks);
    public abstract virtual int SetEventCallbacks(IDebugEventCallbacks Callbacks);
    public abstract virtual int FlushCallbacks();
    public abstract virtual int WriteDumpFile2(string DumpFile, DEBUG_DUMP Qualifier, DEBUG_FORMAT FormatFlags, string Comment);
    public abstract virtual int AddDumpInformationFile(string InfoFile, DEBUG_DUMP_FILE Type);
    public abstract virtual int EndProcessServer(ulong Server);
    public abstract virtual int WaitForProcessServerEnd(UInt32 Timeout);
    public abstract virtual int IsKernelDebuggerEnabled();
    public abstract virtual int TerminateCurrentProcess();
    public abstract virtual int DetachCurrentProcess();
    public abstract virtual int AbandonCurrentProcess();
    public abstract virtual int GetRunningProcessSystemIdByExecutableNameWide(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescriptionWide(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int CreateProcessWide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS CreateFlags);
    public abstract virtual int CreateProcessAndAttachWide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS CreateFlags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int OpenDumpFileWide(string FileName, ulong FileHandle);
    public abstract virtual int WriteDumpFileWide(string DumpFile, ulong FileHandle, DEBUG_DUMP Qualifier, DEBUG_FORMAT FormatFlags, string Comment);
    public abstract virtual int AddDumpInformationFileWide(string FileName, ulong FileHandle, DEBUG_DUMP_FILE Type);
    public abstract virtual int GetNumberDumpFiles(UInt32& Number);
    public abstract virtual int GetDumpFile(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize, UInt64& Handle, UInt32& Type);
    public abstract virtual int GetDumpFileWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize, UInt64& Handle, UInt32& Type);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("e3acb9d7-7ec2-4f0c-a0da-e81e0cbbe628")]
public interface SOS.Hosting.DbgEng.Interop.IDebugClient5 {
    public abstract virtual int AttachKernel(DEBUG_ATTACH Flags, string ConnectOptions);
    public abstract virtual int GetKernelConnectionOptions(StringBuilder Buffer, int BufferSize, UInt32& OptionsSize);
    public abstract virtual int SetKernelConnectionOptions(string Options);
    public abstract virtual int StartProcessServer(DEBUG_CLASS Flags, string Options, IntPtr Reserved);
    public abstract virtual int ConnectProcessServer(string RemoteOptions, UInt64& Server);
    public abstract virtual int DisconnectProcessServer(ulong Server);
    public abstract virtual int GetRunningProcessSystemIds(ulong Server, UInt32[] Ids, UInt32 Count, UInt32& ActualCount);
    public abstract virtual int GetRunningProcessSystemIdByExecutableName(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescription(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int AttachProcess(ulong Server, UInt32 ProcessID, DEBUG_ATTACH AttachFlags);
    public abstract virtual int CreateProcess(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags);
    public abstract virtual int CreateProcessAndAttach(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int GetProcessOptions(DEBUG_PROCESS& Options);
    public abstract virtual int AddProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int RemoveProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int SetProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int OpenDumpFile(string DumpFile);
    public abstract virtual int WriteDumpFile(string DumpFile, DEBUG_DUMP Qualifier);
    public abstract virtual int ConnectSession(DEBUG_CONNECT_SESSION Flags, UInt32 HistoryLimit);
    public abstract virtual int StartServer(string Options);
    public abstract virtual int OutputServer(DEBUG_OUTCTL OutputControl, string Machine, DEBUG_SERVERS Flags);
    public abstract virtual int TerminateProcesses();
    public abstract virtual int DetachProcesses();
    public abstract virtual int EndSession(DEBUG_END Flags);
    public abstract virtual int GetExitCode(UInt32& Code);
    public abstract virtual int DispatchCallbacks(UInt32 Timeout);
    public abstract virtual int ExitDispatch(IDebugClient Client);
    public abstract virtual int CreateClient(IDebugClient& Client);
    public abstract virtual int GetInputCallbacks(IDebugInputCallbacks& Callbacks);
    public abstract virtual int SetInputCallbacks(IDebugInputCallbacks Callbacks);
    public abstract virtual int GetOutputCallbacks(IDebugOutputCallbacks& Callbacks);
    public abstract virtual int SetOutputCallbacks(IDebugOutputCallbacks Callbacks);
    public abstract virtual int GetOutputMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOutputMask(DEBUG_OUTPUT Mask);
    public abstract virtual int GetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT Mask);
    public abstract virtual int GetOutputWidth(UInt32& Columns);
    public abstract virtual int SetOutputWidth(UInt32 Columns);
    public abstract virtual int GetOutputLinePrefix(StringBuilder Buffer, int BufferSize, UInt32& PrefixSize);
    public abstract virtual int SetOutputLinePrefix(string Prefix);
    public abstract virtual int GetIdentity(StringBuilder Buffer, int BufferSize, UInt32& IdentitySize);
    public abstract virtual int OutputIdentity(DEBUG_OUTCTL OutputControl, UInt32 Flags, string Format);
    public abstract virtual int GetEventCallbacks(IDebugEventCallbacks& Callbacks);
    public abstract virtual int SetEventCallbacks(IDebugEventCallbacks Callbacks);
    public abstract virtual int FlushCallbacks();
    public abstract virtual int WriteDumpFile2(string DumpFile, DEBUG_DUMP Qualifier, DEBUG_FORMAT FormatFlags, string Comment);
    public abstract virtual int AddDumpInformationFile(string InfoFile, DEBUG_DUMP_FILE Type);
    public abstract virtual int EndProcessServer(ulong Server);
    public abstract virtual int WaitForProcessServerEnd(UInt32 Timeout);
    public abstract virtual int IsKernelDebuggerEnabled();
    public abstract virtual int TerminateCurrentProcess();
    public abstract virtual int DetachCurrentProcess();
    public abstract virtual int AbandonCurrentProcess();
    public abstract virtual int GetRunningProcessSystemIdByExecutableNameWide(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescriptionWide(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int CreateProcessWide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS CreateFlags);
    public abstract virtual int CreateProcessAndAttachWide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS CreateFlags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int OpenDumpFileWide(string FileName, ulong FileHandle);
    public abstract virtual int WriteDumpFileWide(string DumpFile, ulong FileHandle, DEBUG_DUMP Qualifier, DEBUG_FORMAT FormatFlags, string Comment);
    public abstract virtual int AddDumpInformationFileWide(string FileName, ulong FileHandle, DEBUG_DUMP_FILE Type);
    public abstract virtual int GetNumberDumpFiles(UInt32& Number);
    public abstract virtual int GetDumpFile(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize, UInt64& Handle, UInt32& Type);
    public abstract virtual int GetDumpFileWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize, UInt64& Handle, UInt32& Type);
    public abstract virtual int AttachKernelWide(DEBUG_ATTACH Flags, string ConnectOptions);
    public abstract virtual int GetKernelConnectionOptionsWide(StringBuilder Buffer, int BufferSize, UInt32& OptionsSize);
    public abstract virtual int SetKernelConnectionOptionsWide(string Options);
    public abstract virtual int StartProcessServerWide(DEBUG_CLASS Flags, string Options, IntPtr Reserved);
    public abstract virtual int ConnectProcessServerWide(string RemoteOptions, UInt64& Server);
    public abstract virtual int StartServerWide(string Options);
    public abstract virtual int OutputServersWide(DEBUG_OUTCTL OutputControl, string Machine, DEBUG_SERVERS Flags);
    public abstract virtual int GetOutputCallbacksWide(IDebugOutputCallbacksWide& Callbacks);
    public abstract virtual int SetOutputCallbacksWide(IDebugOutputCallbacksWide Callbacks);
    public abstract virtual int GetOutputLinePrefixWide(StringBuilder Buffer, int BufferSize, UInt32& PrefixSize);
    public abstract virtual int SetOutputLinePrefixWide(string Prefix);
    public abstract virtual int GetIdentityWide(StringBuilder Buffer, int BufferSize, UInt32& IdentitySize);
    public abstract virtual int OutputIdentityWide(DEBUG_OUTCTL OutputControl, UInt32 Flags, string Machine);
    public abstract virtual int GetEventCallbacksWide(IDebugEventCallbacksWide& Callbacks);
    public abstract virtual int SetEventCallbacksWide(IDebugEventCallbacksWide Callbacks);
    public abstract virtual int CreateProcess2(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS_OPTIONS& modreq(System.Runtime.InteropServices.InAttribute) OptionsBuffer, UInt32 OptionsBufferSize, string InitialDirectory, string Environment);
    public abstract virtual int CreateProcess2Wide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS_OPTIONS& modreq(System.Runtime.InteropServices.InAttribute) OptionsBuffer, UInt32 OptionsBufferSize, string InitialDirectory, string Environment);
    public abstract virtual int CreateProcessAndAttach2(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS_OPTIONS& modreq(System.Runtime.InteropServices.InAttribute) OptionsBuffer, UInt32 OptionsBufferSize, string InitialDirectory, string Environment, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int CreateProcessAndAttach2Wide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS_OPTIONS& modreq(System.Runtime.InteropServices.InAttribute) OptionsBuffer, UInt32 OptionsBufferSize, string InitialDirectory, string Environment, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int PushOutputLinePrefix(string NewPrefix, UInt64& Handle);
    public abstract virtual int PushOutputLinePrefixWide(string NewPrefix, UInt64& Handle);
    public abstract virtual int PopOutputLinePrefix(ulong Handle);
    public abstract virtual int GetNumberInputCallbacks(UInt32& Count);
    public abstract virtual int GetNumberOutputCallbacks(UInt32& Count);
    public abstract virtual int GetNumberEventCallbacks(DEBUG_EVENT Flags, UInt32& Count);
    public abstract virtual int GetQuitLockString(StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int SetQuitLockString(string LockString);
    public abstract virtual int GetQuitLockStringWide(StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int SetQuitLockStringWide(string LockString);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("e3acb9d7-7ec2-4f0c-a0da-e81e0cbbe628")]
public interface SOS.Hosting.DbgEng.Interop.IDebugClient6 {
    public abstract virtual int AttachKernel(DEBUG_ATTACH Flags, string ConnectOptions);
    public abstract virtual int GetKernelConnectionOptions(StringBuilder Buffer, int BufferSize, UInt32& OptionsSize);
    public abstract virtual int SetKernelConnectionOptions(string Options);
    public abstract virtual int StartProcessServer(DEBUG_CLASS Flags, string Options, IntPtr Reserved);
    public abstract virtual int ConnectProcessServer(string RemoteOptions, UInt64& Server);
    public abstract virtual int DisconnectProcessServer(ulong Server);
    public abstract virtual int GetRunningProcessSystemIds(ulong Server, UInt32[] Ids, UInt32 Count, UInt32& ActualCount);
    public abstract virtual int GetRunningProcessSystemIdByExecutableName(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescription(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int AttachProcess(ulong Server, UInt32 ProcessID, DEBUG_ATTACH AttachFlags);
    public abstract virtual int CreateProcess(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags);
    public abstract virtual int CreateProcessAndAttach(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS Flags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int GetProcessOptions(DEBUG_PROCESS& Options);
    public abstract virtual int AddProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int RemoveProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int SetProcessOptions(DEBUG_PROCESS Options);
    public abstract virtual int OpenDumpFile(string DumpFile);
    public abstract virtual int WriteDumpFile(string DumpFile, DEBUG_DUMP Qualifier);
    public abstract virtual int ConnectSession(DEBUG_CONNECT_SESSION Flags, UInt32 HistoryLimit);
    public abstract virtual int StartServer(string Options);
    public abstract virtual int OutputServer(DEBUG_OUTCTL OutputControl, string Machine, DEBUG_SERVERS Flags);
    public abstract virtual int TerminateProcesses();
    public abstract virtual int DetachProcesses();
    public abstract virtual int EndSession(DEBUG_END Flags);
    public abstract virtual int GetExitCode(UInt32& Code);
    public abstract virtual int DispatchCallbacks(UInt32 Timeout);
    public abstract virtual int ExitDispatch(IDebugClient Client);
    public abstract virtual int CreateClient(IDebugClient& Client);
    public abstract virtual int GetInputCallbacks(IDebugInputCallbacks& Callbacks);
    public abstract virtual int SetInputCallbacks(IDebugInputCallbacks Callbacks);
    public abstract virtual int GetOutputCallbacks(IDebugOutputCallbacks& Callbacks);
    public abstract virtual int SetOutputCallbacks(IDebugOutputCallbacks Callbacks);
    public abstract virtual int GetOutputMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOutputMask(DEBUG_OUTPUT Mask);
    public abstract virtual int GetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT& Mask);
    public abstract virtual int SetOtherOutputMask(IDebugClient Client, DEBUG_OUTPUT Mask);
    public abstract virtual int GetOutputWidth(UInt32& Columns);
    public abstract virtual int SetOutputWidth(UInt32 Columns);
    public abstract virtual int GetOutputLinePrefix(StringBuilder Buffer, int BufferSize, UInt32& PrefixSize);
    public abstract virtual int SetOutputLinePrefix(string Prefix);
    public abstract virtual int GetIdentity(StringBuilder Buffer, int BufferSize, UInt32& IdentitySize);
    public abstract virtual int OutputIdentity(DEBUG_OUTCTL OutputControl, UInt32 Flags, string Format);
    public abstract virtual int GetEventCallbacks(IDebugEventCallbacks& Callbacks);
    public abstract virtual int SetEventCallbacks(IDebugEventCallbacks Callbacks);
    public abstract virtual int FlushCallbacks();
    public abstract virtual int WriteDumpFile2(string DumpFile, DEBUG_DUMP Qualifier, DEBUG_FORMAT FormatFlags, string Comment);
    public abstract virtual int AddDumpInformationFile(string InfoFile, DEBUG_DUMP_FILE Type);
    public abstract virtual int EndProcessServer(ulong Server);
    public abstract virtual int WaitForProcessServerEnd(UInt32 Timeout);
    public abstract virtual int IsKernelDebuggerEnabled();
    public abstract virtual int TerminateCurrentProcess();
    public abstract virtual int DetachCurrentProcess();
    public abstract virtual int AbandonCurrentProcess();
    public abstract virtual int GetRunningProcessSystemIdByExecutableNameWide(ulong Server, string ExeName, DEBUG_GET_PROC Flags, UInt32& Id);
    public abstract virtual int GetRunningProcessDescriptionWide(ulong Server, UInt32 SystemId, DEBUG_PROC_DESC Flags, StringBuilder ExeName, int ExeNameSize, UInt32& ActualExeNameSize, StringBuilder Description, int DescriptionSize, UInt32& ActualDescriptionSize);
    public abstract virtual int CreateProcessWide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS CreateFlags);
    public abstract virtual int CreateProcessAndAttachWide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS CreateFlags, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int OpenDumpFileWide(string FileName, ulong FileHandle);
    public abstract virtual int WriteDumpFileWide(string DumpFile, ulong FileHandle, DEBUG_DUMP Qualifier, DEBUG_FORMAT FormatFlags, string Comment);
    public abstract virtual int AddDumpInformationFileWide(string FileName, ulong FileHandle, DEBUG_DUMP_FILE Type);
    public abstract virtual int GetNumberDumpFiles(UInt32& Number);
    public abstract virtual int GetDumpFile(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize, UInt64& Handle, UInt32& Type);
    public abstract virtual int GetDumpFileWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize, UInt64& Handle, UInt32& Type);
    public abstract virtual int AttachKernelWide(DEBUG_ATTACH Flags, string ConnectOptions);
    public abstract virtual int GetKernelConnectionOptionsWide(StringBuilder Buffer, int BufferSize, UInt32& OptionsSize);
    public abstract virtual int SetKernelConnectionOptionsWide(string Options);
    public abstract virtual int StartProcessServerWide(DEBUG_CLASS Flags, string Options, IntPtr Reserved);
    public abstract virtual int ConnectProcessServerWide(string RemoteOptions, UInt64& Server);
    public abstract virtual int StartServerWide(string Options);
    public abstract virtual int OutputServersWide(DEBUG_OUTCTL OutputControl, string Machine, DEBUG_SERVERS Flags);
    public abstract virtual int GetOutputCallbacksWide(IDebugOutputCallbacksWide& Callbacks);
    public abstract virtual int SetOutputCallbacksWide(IDebugOutputCallbacksWide Callbacks);
    public abstract virtual int GetOutputLinePrefixWide(StringBuilder Buffer, int BufferSize, UInt32& PrefixSize);
    public abstract virtual int SetOutputLinePrefixWide(string Prefix);
    public abstract virtual int GetIdentityWide(StringBuilder Buffer, int BufferSize, UInt32& IdentitySize);
    public abstract virtual int OutputIdentityWide(DEBUG_OUTCTL OutputControl, UInt32 Flags, string Machine);
    public abstract virtual int GetEventCallbacksWide(IDebugEventCallbacksWide& Callbacks);
    public abstract virtual int SetEventCallbacksWide(IDebugEventCallbacksWide Callbacks);
    public abstract virtual int CreateProcess2(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS_OPTIONS& modreq(System.Runtime.InteropServices.InAttribute) OptionsBuffer, UInt32 OptionsBufferSize, string InitialDirectory, string Environment);
    public abstract virtual int CreateProcess2Wide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS_OPTIONS& modreq(System.Runtime.InteropServices.InAttribute) OptionsBuffer, UInt32 OptionsBufferSize, string InitialDirectory, string Environment);
    public abstract virtual int CreateProcessAndAttach2(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS_OPTIONS& modreq(System.Runtime.InteropServices.InAttribute) OptionsBuffer, UInt32 OptionsBufferSize, string InitialDirectory, string Environment, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int CreateProcessAndAttach2Wide(ulong Server, string CommandLine, DEBUG_CREATE_PROCESS_OPTIONS& modreq(System.Runtime.InteropServices.InAttribute) OptionsBuffer, UInt32 OptionsBufferSize, string InitialDirectory, string Environment, UInt32 ProcessId, DEBUG_ATTACH AttachFlags);
    public abstract virtual int PushOutputLinePrefix(string NewPrefix, UInt64& Handle);
    public abstract virtual int PushOutputLinePrefixWide(string NewPrefix, UInt64& Handle);
    public abstract virtual int PopOutputLinePrefix(ulong Handle);
    public abstract virtual int GetNumberInputCallbacks(UInt32& Count);
    public abstract virtual int GetNumberOutputCallbacks(UInt32& Count);
    public abstract virtual int GetNumberEventCallbacks(DEBUG_EVENT Flags, UInt32& Count);
    public abstract virtual int GetQuitLockString(StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int SetQuitLockString(string LockString);
    public abstract virtual int GetQuitLockStringWide(StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int SetQuitLockStringWide(string LockString);
    public abstract virtual int SetEventContextCallbacks(IDebugEventContextCallbacks Callbacks);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5182e668-105e-416e-ad92-24ef800424ba")]
public interface SOS.Hosting.DbgEng.Interop.IDebugControl {
    public abstract virtual int GetInterrupt();
    public abstract virtual int SetInterrupt(DEBUG_INTERRUPT Flags);
    public abstract virtual int GetInterruptTimeout(UInt32& Seconds);
    public abstract virtual int SetInterruptTimeout(UInt32 Seconds);
    public abstract virtual int GetLogFile(StringBuilder Buffer, int BufferSize, UInt32& FileSize, Boolean& Append);
    public abstract virtual int OpenLogFile(string File, bool Append);
    public abstract virtual int CloseLogFile();
    public abstract virtual int GetLogMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetLogMask(DEBUG_OUTPUT Mask);
    public abstract virtual int Input(StringBuilder Buffer, int BufferSize, UInt32& InputSize);
    public abstract virtual int ReturnInput(string Buffer);
    public abstract virtual int Output(DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int OutputVaList(DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int ControlledOutput(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int ControlledOutputVaList(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int OutputPrompt(DEBUG_OUTCTL OutputControl, string Format);
    public abstract virtual int OutputPromptVaList(DEBUG_OUTCTL OutputControl, string Format, IntPtr va_list_Args);
    public abstract virtual int GetPromptText(StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int OutputCurrentState(DEBUG_OUTCTL OutputControl, DEBUG_CURRENT Flags);
    public abstract virtual int OutputVersionInformation(DEBUG_OUTCTL OutputControl);
    public abstract virtual int GetNotifyEventHandle(UInt64& Handle);
    public abstract virtual int SetNotifyEventHandle(ulong Handle);
    public abstract virtual int Assemble(ulong Offset, string Instr, UInt64& EndOffset);
    public abstract virtual int Disassemble(ulong Offset, DEBUG_DISASM Flags, StringBuilder Buffer, int BufferSize, UInt32& DisassemblySize, UInt64& EndOffset);
    public abstract virtual int GetDisassembleEffectiveOffset(UInt64& Offset);
    public abstract virtual int OutputDisassembly(DEBUG_OUTCTL OutputControl, ulong Offset, DEBUG_DISASM Flags, UInt64& EndOffset);
    public abstract virtual int OutputDisassemblyLines(DEBUG_OUTCTL OutputControl, UInt32 PreviousLines, UInt32 TotalLines, ulong Offset, DEBUG_DISASM Flags, UInt32& OffsetLine, UInt64& StartOffset, UInt64& EndOffset, UInt64[] LineOffsets);
    public abstract virtual int GetNearInstruction(ulong Offset, int Delta, UInt64& NearOffset);
    public abstract virtual int GetStackTrace(ulong FrameOffset, ulong StackOffset, ulong InstructionOffset, DEBUG_STACK_FRAME[] Frames, int FrameSize, UInt32& FramesFilled);
    public abstract virtual int GetReturnOffset(UInt64& Offset);
    public abstract virtual int OutputStackTrace(DEBUG_OUTCTL OutputControl, DEBUG_STACK_FRAME[] Frames, int FramesSize, DEBUG_STACK Flags);
    public abstract virtual int GetDebuggeeType(DEBUG_CLASS& Class, DEBUG_CLASS_QUALIFIER& Qualifier);
    public abstract virtual int GetActualProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetExecutingProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetNumberPossibleExecutingProcessorTypes(UInt32& Number);
    public abstract virtual int GetPossibleExecutingProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetNumberProcessors(UInt32& Number);
    public abstract virtual int GetSystemVersion(UInt32& PlatformId, UInt32& Major, UInt32& Minor, StringBuilder ServicePackString, int ServicePackStringSize, UInt32& ServicePackStringUsed, UInt32& ServicePackNumber, StringBuilder BuildString, int BuildStringSize, UInt32& BuildStringUsed);
    public abstract virtual int GetPageSize(UInt32& Size);
    public abstract virtual int IsPointer64Bit();
    public abstract virtual int ReadBugCheckData(UInt32& Code, UInt64& Arg1, UInt64& Arg2, UInt64& Arg3, UInt64& Arg4);
    public abstract virtual int GetNumberSupportedProcessorTypes(UInt32& Number);
    public abstract virtual int GetSupportedProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetProcessorTypeNames(IMAGE_FILE_MACHINE Type, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetEffectiveProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int SetEffectiveProcessorType(IMAGE_FILE_MACHINE Type);
    public abstract virtual int GetExecutionStatus(DEBUG_STATUS& Status);
    public abstract virtual int SetExecutionStatus(DEBUG_STATUS Status);
    public abstract virtual int GetCodeLevel(DEBUG_LEVEL& Level);
    public abstract virtual int SetCodeLevel(DEBUG_LEVEL Level);
    public abstract virtual int GetEngineOptions(DEBUG_ENGOPT& Options);
    public abstract virtual int AddEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int RemoveEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int SetEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int GetSystemErrorControl(ERROR_LEVEL& OutputLevel, ERROR_LEVEL& BreakLevel);
    public abstract virtual int SetSystemErrorControl(ERROR_LEVEL OutputLevel, ERROR_LEVEL BreakLevel);
    public abstract virtual int GetTextMacro(UInt32 Slot, StringBuilder Buffer, int BufferSize, UInt32& MacroSize);
    public abstract virtual int SetTextMacro(UInt32 Slot, string Macro);
    public abstract virtual int GetRadix(UInt32& Radix);
    public abstract virtual int SetRadix(UInt32 Radix);
    public abstract virtual int Evaluate(string Expression, DEBUG_VALUE_TYPE DesiredType, DEBUG_VALUE& Value, UInt32& RemainderIndex);
    public abstract virtual int CoerceValue(DEBUG_VALUE In, DEBUG_VALUE_TYPE OutType, DEBUG_VALUE& Out);
    public abstract virtual int CoerceValues(UInt32 Count, DEBUG_VALUE[] In, DEBUG_VALUE_TYPE[] OutType, DEBUG_VALUE[] Out);
    public abstract virtual int Execute(DEBUG_OUTCTL OutputControl, string Command, DEBUG_EXECUTE Flags);
    public abstract virtual int ExecuteCommandFile(DEBUG_OUTCTL OutputControl, string CommandFile, DEBUG_EXECUTE Flags);
    public abstract virtual int GetNumberBreakpoints(UInt32& Number);
    public abstract virtual int GetBreakpointByIndex(UInt32 Index, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointById(UInt32 Id, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointParameters(UInt32 Count, UInt32[] Ids, UInt32 Start, DEBUG_BREAKPOINT_PARAMETERS[] Params);
    public abstract virtual int AddBreakpoint(DEBUG_BREAKPOINT_TYPE Type, UInt32 DesiredId, IDebugBreakpoint& Bp);
    public abstract virtual int RemoveBreakpoint(IDebugBreakpoint Bp);
    public abstract virtual int AddExtension(string Path, UInt32 Flags, UInt64& Handle);
    public abstract virtual int RemoveExtension(ulong Handle);
    public abstract virtual int GetExtensionByPath(string Path, UInt64& Handle);
    public abstract virtual int CallExtension(ulong Handle, string Function, string Arguments);
    public abstract virtual int GetExtensionFunction(ulong Handle, string FuncName, IntPtr& Function);
    public abstract virtual int GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetNumberEventFilters(UInt32& SpecificEvents, UInt32& SpecificExceptions, UInt32& ArbitraryExceptions);
    public abstract virtual int GetEventFilterText(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int GetEventFilterCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetEventFilterCommand(UInt32 Index, string Command);
    public abstract virtual int GetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetSpecificEventFilterArgument(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ArgumentSize);
    public abstract virtual int SetSpecificEventFilterArgument(UInt32 Index, string Argument);
    public abstract virtual int GetExceptionFilterParameters(UInt32 Count, UInt32[] Codes, UInt32 Start, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetExceptionFilterParameters(UInt32 Count, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetExceptionFilterSecondCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetExceptionFilterSecondCommand(UInt32 Index, string Command);
    public abstract virtual int WaitForEvent(DEBUG_WAIT Flags, UInt32 Timeout);
    public abstract virtual int GetLastEventInformation(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr ExtraInformation, UInt32 ExtraInformationSize, UInt32& ExtraInformationUsed, StringBuilder Description, int DescriptionSize, UInt32& DescriptionUsed);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("d4366723-44df-4bed-8c7e-4c05424f4588")]
public interface SOS.Hosting.DbgEng.Interop.IDebugControl2 {
    public abstract virtual int GetInterrupt();
    public abstract virtual int SetInterrupt(DEBUG_INTERRUPT Flags);
    public abstract virtual int GetInterruptTimeout(UInt32& Seconds);
    public abstract virtual int SetInterruptTimeout(UInt32 Seconds);
    public abstract virtual int GetLogFile(StringBuilder Buffer, int BufferSize, UInt32& FileSize, Boolean& Append);
    public abstract virtual int OpenLogFile(string File, bool Append);
    public abstract virtual int CloseLogFile();
    public abstract virtual int GetLogMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetLogMask(DEBUG_OUTPUT Mask);
    public abstract virtual int Input(StringBuilder Buffer, int BufferSize, UInt32& InputSize);
    public abstract virtual int ReturnInput(string Buffer);
    public abstract virtual int Output(DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int OutputVaList(DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int ControlledOutput(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int ControlledOutputVaList(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int OutputPrompt(DEBUG_OUTCTL OutputControl, string Format);
    public abstract virtual int OutputPromptVaList(DEBUG_OUTCTL OutputControl, string Format, IntPtr va_list_Args);
    public abstract virtual int GetPromptText(StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int OutputCurrentState(DEBUG_OUTCTL OutputControl, DEBUG_CURRENT Flags);
    public abstract virtual int OutputVersionInformation(DEBUG_OUTCTL OutputControl);
    public abstract virtual int GetNotifyEventHandle(UInt64& Handle);
    public abstract virtual int SetNotifyEventHandle(ulong Handle);
    public abstract virtual int Assemble(ulong Offset, string Instr, UInt64& EndOffset);
    public abstract virtual int Disassemble(ulong Offset, DEBUG_DISASM Flags, StringBuilder Buffer, int BufferSize, UInt32& DisassemblySize, UInt64& EndOffset);
    public abstract virtual int GetDisassembleEffectiveOffset(UInt64& Offset);
    public abstract virtual int OutputDisassembly(DEBUG_OUTCTL OutputControl, ulong Offset, DEBUG_DISASM Flags, UInt64& EndOffset);
    public abstract virtual int OutputDisassemblyLines(DEBUG_OUTCTL OutputControl, UInt32 PreviousLines, UInt32 TotalLines, ulong Offset, DEBUG_DISASM Flags, UInt32& OffsetLine, UInt64& StartOffset, UInt64& EndOffset, UInt64[] LineOffsets);
    public abstract virtual int GetNearInstruction(ulong Offset, int Delta, UInt64& NearOffset);
    public abstract virtual int GetStackTrace(ulong FrameOffset, ulong StackOffset, ulong InstructionOffset, DEBUG_STACK_FRAME[] Frames, int FrameSize, UInt32& FramesFilled);
    public abstract virtual int GetReturnOffset(UInt64& Offset);
    public abstract virtual int OutputStackTrace(DEBUG_OUTCTL OutputControl, DEBUG_STACK_FRAME[] Frames, int FramesSize, DEBUG_STACK Flags);
    public abstract virtual int GetDebuggeeType(DEBUG_CLASS& Class, DEBUG_CLASS_QUALIFIER& Qualifier);
    public abstract virtual int GetActualProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetExecutingProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetNumberPossibleExecutingProcessorTypes(UInt32& Number);
    public abstract virtual int GetPossibleExecutingProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetNumberProcessors(UInt32& Number);
    public abstract virtual int GetSystemVersion(UInt32& PlatformId, UInt32& Major, UInt32& Minor, StringBuilder ServicePackString, int ServicePackStringSize, UInt32& ServicePackStringUsed, UInt32& ServicePackNumber, StringBuilder BuildString, int BuildStringSize, UInt32& BuildStringUsed);
    public abstract virtual int GetPageSize(UInt32& Size);
    public abstract virtual int IsPointer64Bit();
    public abstract virtual int ReadBugCheckData(UInt32& Code, UInt64& Arg1, UInt64& Arg2, UInt64& Arg3, UInt64& Arg4);
    public abstract virtual int GetNumberSupportedProcessorTypes(UInt32& Number);
    public abstract virtual int GetSupportedProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetProcessorTypeNames(IMAGE_FILE_MACHINE Type, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetEffectiveProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int SetEffectiveProcessorType(IMAGE_FILE_MACHINE Type);
    public abstract virtual int GetExecutionStatus(DEBUG_STATUS& Status);
    public abstract virtual int SetExecutionStatus(DEBUG_STATUS Status);
    public abstract virtual int GetCodeLevel(DEBUG_LEVEL& Level);
    public abstract virtual int SetCodeLevel(DEBUG_LEVEL Level);
    public abstract virtual int GetEngineOptions(DEBUG_ENGOPT& Options);
    public abstract virtual int AddEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int RemoveEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int SetEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int GetSystemErrorControl(ERROR_LEVEL& OutputLevel, ERROR_LEVEL& BreakLevel);
    public abstract virtual int SetSystemErrorControl(ERROR_LEVEL OutputLevel, ERROR_LEVEL BreakLevel);
    public abstract virtual int GetTextMacro(UInt32 Slot, StringBuilder Buffer, int BufferSize, UInt32& MacroSize);
    public abstract virtual int SetTextMacro(UInt32 Slot, string Macro);
    public abstract virtual int GetRadix(UInt32& Radix);
    public abstract virtual int SetRadix(UInt32 Radix);
    public abstract virtual int Evaluate(string Expression, DEBUG_VALUE_TYPE DesiredType, DEBUG_VALUE& Value, UInt32& RemainderIndex);
    public abstract virtual int CoerceValue(DEBUG_VALUE In, DEBUG_VALUE_TYPE OutType, DEBUG_VALUE& Out);
    public abstract virtual int CoerceValues(UInt32 Count, DEBUG_VALUE[] In, DEBUG_VALUE_TYPE[] OutType, DEBUG_VALUE[] Out);
    public abstract virtual int Execute(DEBUG_OUTCTL OutputControl, string Command, DEBUG_EXECUTE Flags);
    public abstract virtual int ExecuteCommandFile(DEBUG_OUTCTL OutputControl, string CommandFile, DEBUG_EXECUTE Flags);
    public abstract virtual int GetNumberBreakpoints(UInt32& Number);
    public abstract virtual int GetBreakpointByIndex(UInt32 Index, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointById(UInt32 Id, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointParameters(UInt32 Count, UInt32[] Ids, UInt32 Start, DEBUG_BREAKPOINT_PARAMETERS[] Params);
    public abstract virtual int AddBreakpoint(DEBUG_BREAKPOINT_TYPE Type, UInt32 DesiredId, IDebugBreakpoint& Bp);
    public abstract virtual int RemoveBreakpoint(IDebugBreakpoint Bp);
    public abstract virtual int AddExtension(string Path, UInt32 Flags, UInt64& Handle);
    public abstract virtual int RemoveExtension(ulong Handle);
    public abstract virtual int GetExtensionByPath(string Path, UInt64& Handle);
    public abstract virtual int CallExtension(ulong Handle, string Function, string Arguments);
    public abstract virtual int GetExtensionFunction(ulong Handle, string FuncName, IntPtr& Function);
    public abstract virtual int GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetNumberEventFilters(UInt32& SpecificEvents, UInt32& SpecificExceptions, UInt32& ArbitraryExceptions);
    public abstract virtual int GetEventFilterText(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int GetEventFilterCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetEventFilterCommand(UInt32 Index, string Command);
    public abstract virtual int GetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetSpecificEventFilterArgument(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ArgumentSize);
    public abstract virtual int SetSpecificEventFilterArgument(UInt32 Index, string Argument);
    public abstract virtual int GetExceptionFilterParameters(UInt32 Count, UInt32[] Codes, UInt32 Start, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetExceptionFilterParameters(UInt32 Count, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetExceptionFilterSecondCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetExceptionFilterSecondCommand(UInt32 Index, string Command);
    public abstract virtual int WaitForEvent(DEBUG_WAIT Flags, UInt32 Timeout);
    public abstract virtual int GetLastEventInformation(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr ExtraInformation, UInt32 ExtraInformationSize, UInt32& ExtraInformationUsed, StringBuilder Description, int DescriptionSize, UInt32& DescriptionUsed);
    public abstract virtual int GetCurrentTimeDate(UInt32& TimeDate);
    public abstract virtual int GetCurrentSystemUpTime(UInt32& UpTime);
    public abstract virtual int GetDumpFormatFlags(DEBUG_FORMAT& FormatFlags);
    public abstract virtual int GetNumberTextReplacements(UInt32& NumRepl);
    public abstract virtual int GetTextReplacement(string SrcText, UInt32 Index, StringBuilder SrcBuffer, int SrcBufferSize, UInt32& SrcSize, StringBuilder DstBuffer, int DstBufferSize, UInt32& DstSize);
    public abstract virtual int SetTextReplacement(string SrcText, string DstText);
    public abstract virtual int RemoveTextReplacements();
    public abstract virtual int OutputTextReplacements(DEBUG_OUTCTL OutputControl, DEBUG_OUT_TEXT_REPL Flags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7df74a86-b03f-407f-90ab-a20dadcead08")]
public interface SOS.Hosting.DbgEng.Interop.IDebugControl3 {
    public abstract virtual int GetInterrupt();
    public abstract virtual int SetInterrupt(DEBUG_INTERRUPT Flags);
    public abstract virtual int GetInterruptTimeout(UInt32& Seconds);
    public abstract virtual int SetInterruptTimeout(UInt32 Seconds);
    public abstract virtual int GetLogFile(StringBuilder Buffer, int BufferSize, UInt32& FileSize, Boolean& Append);
    public abstract virtual int OpenLogFile(string File, bool Append);
    public abstract virtual int CloseLogFile();
    public abstract virtual int GetLogMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetLogMask(DEBUG_OUTPUT Mask);
    public abstract virtual int Input(StringBuilder Buffer, int BufferSize, UInt32& InputSize);
    public abstract virtual int ReturnInput(string Buffer);
    public abstract virtual int Output(DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int OutputVaList(DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int ControlledOutput(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int ControlledOutputVaList(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int OutputPrompt(DEBUG_OUTCTL OutputControl, string Format);
    public abstract virtual int OutputPromptVaList(DEBUG_OUTCTL OutputControl, string Format, IntPtr va_list_Args);
    public abstract virtual int GetPromptText(StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int OutputCurrentState(DEBUG_OUTCTL OutputControl, DEBUG_CURRENT Flags);
    public abstract virtual int OutputVersionInformation(DEBUG_OUTCTL OutputControl);
    public abstract virtual int GetNotifyEventHandle(UInt64& Handle);
    public abstract virtual int SetNotifyEventHandle(ulong Handle);
    public abstract virtual int Assemble(ulong Offset, string Instr, UInt64& EndOffset);
    public abstract virtual int Disassemble(ulong Offset, DEBUG_DISASM Flags, StringBuilder Buffer, int BufferSize, UInt32& DisassemblySize, UInt64& EndOffset);
    public abstract virtual int GetDisassembleEffectiveOffset(UInt64& Offset);
    public abstract virtual int OutputDisassembly(DEBUG_OUTCTL OutputControl, ulong Offset, DEBUG_DISASM Flags, UInt64& EndOffset);
    public abstract virtual int OutputDisassemblyLines(DEBUG_OUTCTL OutputControl, UInt32 PreviousLines, UInt32 TotalLines, ulong Offset, DEBUG_DISASM Flags, UInt32& OffsetLine, UInt64& StartOffset, UInt64& EndOffset, UInt64[] LineOffsets);
    public abstract virtual int GetNearInstruction(ulong Offset, int Delta, UInt64& NearOffset);
    public abstract virtual int GetStackTrace(ulong FrameOffset, ulong StackOffset, ulong InstructionOffset, DEBUG_STACK_FRAME[] Frames, int FrameSize, UInt32& FramesFilled);
    public abstract virtual int GetReturnOffset(UInt64& Offset);
    public abstract virtual int OutputStackTrace(DEBUG_OUTCTL OutputControl, DEBUG_STACK_FRAME[] Frames, int FramesSize, DEBUG_STACK Flags);
    public abstract virtual int GetDebuggeeType(DEBUG_CLASS& Class, DEBUG_CLASS_QUALIFIER& Qualifier);
    public abstract virtual int GetActualProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetExecutingProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetNumberPossibleExecutingProcessorTypes(UInt32& Number);
    public abstract virtual int GetPossibleExecutingProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetNumberProcessors(UInt32& Number);
    public abstract virtual int GetSystemVersion(UInt32& PlatformId, UInt32& Major, UInt32& Minor, StringBuilder ServicePackString, int ServicePackStringSize, UInt32& ServicePackStringUsed, UInt32& ServicePackNumber, StringBuilder BuildString, int BuildStringSize, UInt32& BuildStringUsed);
    public abstract virtual int GetPageSize(UInt32& Size);
    public abstract virtual int IsPointer64Bit();
    public abstract virtual int ReadBugCheckData(UInt32& Code, UInt64& Arg1, UInt64& Arg2, UInt64& Arg3, UInt64& Arg4);
    public abstract virtual int GetNumberSupportedProcessorTypes(UInt32& Number);
    public abstract virtual int GetSupportedProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetProcessorTypeNames(IMAGE_FILE_MACHINE Type, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetEffectiveProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int SetEffectiveProcessorType(IMAGE_FILE_MACHINE Type);
    public abstract virtual int GetExecutionStatus(DEBUG_STATUS& Status);
    public abstract virtual int SetExecutionStatus(DEBUG_STATUS Status);
    public abstract virtual int GetCodeLevel(DEBUG_LEVEL& Level);
    public abstract virtual int SetCodeLevel(DEBUG_LEVEL Level);
    public abstract virtual int GetEngineOptions(DEBUG_ENGOPT& Options);
    public abstract virtual int AddEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int RemoveEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int SetEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int GetSystemErrorControl(ERROR_LEVEL& OutputLevel, ERROR_LEVEL& BreakLevel);
    public abstract virtual int SetSystemErrorControl(ERROR_LEVEL OutputLevel, ERROR_LEVEL BreakLevel);
    public abstract virtual int GetTextMacro(UInt32 Slot, StringBuilder Buffer, int BufferSize, UInt32& MacroSize);
    public abstract virtual int SetTextMacro(UInt32 Slot, string Macro);
    public abstract virtual int GetRadix(UInt32& Radix);
    public abstract virtual int SetRadix(UInt32 Radix);
    public abstract virtual int Evaluate(string Expression, DEBUG_VALUE_TYPE DesiredType, DEBUG_VALUE& Value, UInt32& RemainderIndex);
    public abstract virtual int CoerceValue(DEBUG_VALUE In, DEBUG_VALUE_TYPE OutType, DEBUG_VALUE& Out);
    public abstract virtual int CoerceValues(UInt32 Count, DEBUG_VALUE[] In, DEBUG_VALUE_TYPE[] OutType, DEBUG_VALUE[] Out);
    public abstract virtual int Execute(DEBUG_OUTCTL OutputControl, string Command, DEBUG_EXECUTE Flags);
    public abstract virtual int ExecuteCommandFile(DEBUG_OUTCTL OutputControl, string CommandFile, DEBUG_EXECUTE Flags);
    public abstract virtual int GetNumberBreakpoints(UInt32& Number);
    public abstract virtual int GetBreakpointByIndex(UInt32 Index, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointById(UInt32 Id, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointParameters(UInt32 Count, UInt32[] Ids, UInt32 Start, DEBUG_BREAKPOINT_PARAMETERS[] Params);
    public abstract virtual int AddBreakpoint(DEBUG_BREAKPOINT_TYPE Type, UInt32 DesiredId, IDebugBreakpoint& Bp);
    public abstract virtual int RemoveBreakpoint(IDebugBreakpoint Bp);
    public abstract virtual int AddExtension(string Path, UInt32 Flags, UInt64& Handle);
    public abstract virtual int RemoveExtension(ulong Handle);
    public abstract virtual int GetExtensionByPath(string Path, UInt64& Handle);
    public abstract virtual int CallExtension(ulong Handle, string Function, string Arguments);
    public abstract virtual int GetExtensionFunction(ulong Handle, string FuncName, IntPtr& Function);
    public abstract virtual int GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetNumberEventFilters(UInt32& SpecificEvents, UInt32& SpecificExceptions, UInt32& ArbitraryExceptions);
    public abstract virtual int GetEventFilterText(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int GetEventFilterCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetEventFilterCommand(UInt32 Index, string Command);
    public abstract virtual int GetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetSpecificEventFilterArgument(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ArgumentSize);
    public abstract virtual int SetSpecificEventFilterArgument(UInt32 Index, string Argument);
    public abstract virtual int GetExceptionFilterParameters(UInt32 Count, UInt32[] Codes, UInt32 Start, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetExceptionFilterParameters(UInt32 Count, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetExceptionFilterSecondCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetExceptionFilterSecondCommand(UInt32 Index, string Command);
    public abstract virtual int WaitForEvent(DEBUG_WAIT Flags, UInt32 Timeout);
    public abstract virtual int GetLastEventInformation(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr ExtraInformation, UInt32 ExtraInformationSize, UInt32& ExtraInformationUsed, StringBuilder Description, int DescriptionSize, UInt32& DescriptionUsed);
    public abstract virtual int GetAssemblyOptions(DEBUG_ASMOPT& Options);
    public abstract virtual int AddAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int RemoveAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int SetAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int GetExpressionSyntax(DEBUG_EXPR& Flags);
    public abstract virtual int SetExpressionSyntax(DEBUG_EXPR Flags);
    public abstract virtual int SetExpressionSyntaxByName(string AbbrevName);
    public abstract virtual int GetNumberExpressionSyntaxes(UInt32& Number);
    public abstract virtual int GetExpressionSyntaxNames(UInt32 Index, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetNumberEvents(UInt32& Events);
    public abstract virtual int GetEventIndexDescription(UInt32 Index, DEBUG_EINDEX Which, StringBuilder Buffer, int BufferSize, UInt32& DescSize);
    public abstract virtual int GetCurrentEventIndex(UInt32& Index);
    public abstract virtual int SetNextEventIndex(DEBUG_EINDEX Relation, UInt32 Value, UInt32& NextIndex);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("94e60ce9-9b41-4b19-9fc0-6d9eb35272b3")]
public interface SOS.Hosting.DbgEng.Interop.IDebugControl4 {
    public abstract virtual int GetInterrupt();
    public abstract virtual int SetInterrupt(DEBUG_INTERRUPT Flags);
    public abstract virtual int GetInterruptTimeout(UInt32& Seconds);
    public abstract virtual int SetInterruptTimeout(UInt32 Seconds);
    public abstract virtual int GetLogFile(StringBuilder Buffer, int BufferSize, UInt32& FileSize, Boolean& Append);
    public abstract virtual int OpenLogFile(string File, bool Append);
    public abstract virtual int CloseLogFile();
    public abstract virtual int GetLogMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetLogMask(DEBUG_OUTPUT Mask);
    public abstract virtual int Input(StringBuilder Buffer, int BufferSize, UInt32& InputSize);
    public abstract virtual int ReturnInput(string Buffer);
    public abstract virtual int Output(DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int OutputVaList(DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int ControlledOutput(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int ControlledOutputVaList(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int OutputPrompt(DEBUG_OUTCTL OutputControl, string Format);
    public abstract virtual int OutputPromptVaList(DEBUG_OUTCTL OutputControl, string Format, IntPtr va_list_Args);
    public abstract virtual int GetPromptText(StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int OutputCurrentState(DEBUG_OUTCTL OutputControl, DEBUG_CURRENT Flags);
    public abstract virtual int OutputVersionInformation(DEBUG_OUTCTL OutputControl);
    public abstract virtual int GetNotifyEventHandle(UInt64& Handle);
    public abstract virtual int SetNotifyEventHandle(ulong Handle);
    public abstract virtual int Assemble(ulong Offset, string Instr, UInt64& EndOffset);
    public abstract virtual int Disassemble(ulong Offset, DEBUG_DISASM Flags, StringBuilder Buffer, int BufferSize, UInt32& DisassemblySize, UInt64& EndOffset);
    public abstract virtual int GetDisassembleEffectiveOffset(UInt64& Offset);
    public abstract virtual int OutputDisassembly(DEBUG_OUTCTL OutputControl, ulong Offset, DEBUG_DISASM Flags, UInt64& EndOffset);
    public abstract virtual int OutputDisassemblyLines(DEBUG_OUTCTL OutputControl, UInt32 PreviousLines, UInt32 TotalLines, ulong Offset, DEBUG_DISASM Flags, UInt32& OffsetLine, UInt64& StartOffset, UInt64& EndOffset, UInt64[] LineOffsets);
    public abstract virtual int GetNearInstruction(ulong Offset, int Delta, UInt64& NearOffset);
    public abstract virtual int GetStackTrace(ulong FrameOffset, ulong StackOffset, ulong InstructionOffset, DEBUG_STACK_FRAME[] Frames, int FrameSize, UInt32& FramesFilled);
    public abstract virtual int GetReturnOffset(UInt64& Offset);
    public abstract virtual int OutputStackTrace(DEBUG_OUTCTL OutputControl, DEBUG_STACK_FRAME[] Frames, int FramesSize, DEBUG_STACK Flags);
    public abstract virtual int GetDebuggeeType(DEBUG_CLASS& Class, DEBUG_CLASS_QUALIFIER& Qualifier);
    public abstract virtual int GetActualProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetExecutingProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetNumberPossibleExecutingProcessorTypes(UInt32& Number);
    public abstract virtual int GetPossibleExecutingProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetNumberProcessors(UInt32& Number);
    public abstract virtual int GetSystemVersion(UInt32& PlatformId, UInt32& Major, UInt32& Minor, StringBuilder ServicePackString, int ServicePackStringSize, UInt32& ServicePackStringUsed, UInt32& ServicePackNumber, StringBuilder BuildString, int BuildStringSize, UInt32& BuildStringUsed);
    public abstract virtual int GetPageSize(UInt32& Size);
    public abstract virtual int IsPointer64Bit();
    public abstract virtual int ReadBugCheckData(UInt32& Code, UInt64& Arg1, UInt64& Arg2, UInt64& Arg3, UInt64& Arg4);
    public abstract virtual int GetNumberSupportedProcessorTypes(UInt32& Number);
    public abstract virtual int GetSupportedProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetProcessorTypeNames(IMAGE_FILE_MACHINE Type, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetEffectiveProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int SetEffectiveProcessorType(IMAGE_FILE_MACHINE Type);
    public abstract virtual int GetExecutionStatus(DEBUG_STATUS& Status);
    public abstract virtual int SetExecutionStatus(DEBUG_STATUS Status);
    public abstract virtual int GetCodeLevel(DEBUG_LEVEL& Level);
    public abstract virtual int SetCodeLevel(DEBUG_LEVEL Level);
    public abstract virtual int GetEngineOptions(DEBUG_ENGOPT& Options);
    public abstract virtual int AddEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int RemoveEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int SetEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int GetSystemErrorControl(ERROR_LEVEL& OutputLevel, ERROR_LEVEL& BreakLevel);
    public abstract virtual int SetSystemErrorControl(ERROR_LEVEL OutputLevel, ERROR_LEVEL BreakLevel);
    public abstract virtual int GetTextMacro(UInt32 Slot, StringBuilder Buffer, int BufferSize, UInt32& MacroSize);
    public abstract virtual int SetTextMacro(UInt32 Slot, string Macro);
    public abstract virtual int GetRadix(UInt32& Radix);
    public abstract virtual int SetRadix(UInt32 Radix);
    public abstract virtual int Evaluate(string Expression, DEBUG_VALUE_TYPE DesiredType, DEBUG_VALUE& Value, UInt32& RemainderIndex);
    public abstract virtual int CoerceValue(DEBUG_VALUE In, DEBUG_VALUE_TYPE OutType, DEBUG_VALUE& Out);
    public abstract virtual int CoerceValues(UInt32 Count, DEBUG_VALUE[] In, DEBUG_VALUE_TYPE[] OutType, DEBUG_VALUE[] Out);
    public abstract virtual int Execute(DEBUG_OUTCTL OutputControl, string Command, DEBUG_EXECUTE Flags);
    public abstract virtual int ExecuteCommandFile(DEBUG_OUTCTL OutputControl, string CommandFile, DEBUG_EXECUTE Flags);
    public abstract virtual int GetNumberBreakpoints(UInt32& Number);
    public abstract virtual int GetBreakpointByIndex(UInt32 Index, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointById(UInt32 Id, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointParameters(UInt32 Count, UInt32[] Ids, UInt32 Start, DEBUG_BREAKPOINT_PARAMETERS[] Params);
    public abstract virtual int AddBreakpoint(DEBUG_BREAKPOINT_TYPE Type, UInt32 DesiredId, IDebugBreakpoint& Bp);
    public abstract virtual int RemoveBreakpoint(IDebugBreakpoint Bp);
    public abstract virtual int AddExtension(string Path, UInt32 Flags, UInt64& Handle);
    public abstract virtual int RemoveExtension(ulong Handle);
    public abstract virtual int GetExtensionByPath(string Path, UInt64& Handle);
    public abstract virtual int CallExtension(ulong Handle, string Function, string Arguments);
    public abstract virtual int GetExtensionFunction(ulong Handle, string FuncName, IntPtr& Function);
    public abstract virtual int GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetNumberEventFilters(UInt32& SpecificEvents, UInt32& SpecificExceptions, UInt32& ArbitraryExceptions);
    public abstract virtual int GetEventFilterText(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int GetEventFilterCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetEventFilterCommand(UInt32 Index, string Command);
    public abstract virtual int GetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetSpecificEventFilterArgument(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ArgumentSize);
    public abstract virtual int SetSpecificEventFilterArgument(UInt32 Index, string Argument);
    public abstract virtual int GetExceptionFilterParameters(UInt32 Count, UInt32[] Codes, UInt32 Start, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetExceptionFilterParameters(UInt32 Count, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetExceptionFilterSecondCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetExceptionFilterSecondCommand(UInt32 Index, string Command);
    public abstract virtual int WaitForEvent(DEBUG_WAIT Flags, UInt32 Timeout);
    public abstract virtual int GetLastEventInformation(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr ExtraInformation, UInt32 ExtraInformationSize, UInt32& ExtraInformationUsed, StringBuilder Description, int DescriptionSize, UInt32& DescriptionUsed);
    public abstract virtual int GetCurrentTimeDate(UInt32& TimeDate);
    public abstract virtual int GetCurrentSystemUpTime(UInt32& UpTime);
    public abstract virtual int GetDumpFormatFlags(DEBUG_FORMAT& FormatFlags);
    public abstract virtual int GetNumberTextReplacements(UInt32& NumRepl);
    public abstract virtual int GetTextReplacement(string SrcText, UInt32 Index, StringBuilder SrcBuffer, int SrcBufferSize, UInt32& SrcSize, StringBuilder DstBuffer, int DstBufferSize, UInt32& DstSize);
    public abstract virtual int SetTextReplacement(string SrcText, string DstText);
    public abstract virtual int RemoveTextReplacements();
    public abstract virtual int OutputTextReplacements(DEBUG_OUTCTL OutputControl, DEBUG_OUT_TEXT_REPL Flags);
    public abstract virtual int GetAssemblyOptions(DEBUG_ASMOPT& Options);
    public abstract virtual int AddAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int RemoveAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int SetAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int GetExpressionSyntax(DEBUG_EXPR& Flags);
    public abstract virtual int SetExpressionSyntax(DEBUG_EXPR Flags);
    public abstract virtual int SetExpressionSyntaxByName(string AbbrevName);
    public abstract virtual int GetNumberExpressionSyntaxes(UInt32& Number);
    public abstract virtual int GetExpressionSyntaxNames(UInt32 Index, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetNumberEvents(UInt32& Events);
    public abstract virtual int GetEventIndexDescription(UInt32 Index, DEBUG_EINDEX Which, StringBuilder Buffer, int BufferSize, UInt32& DescSize);
    public abstract virtual int GetCurrentEventIndex(UInt32& Index);
    public abstract virtual int SetNextEventIndex(DEBUG_EINDEX Relation, UInt32 Value, UInt32& NextIndex);
    public abstract virtual int GetLogFileWide(StringBuilder Buffer, int BufferSize, UInt32& FileSize, Boolean& Append);
    public abstract virtual int OpenLogFileWide(string File, bool Append);
    public abstract virtual int InputWide(StringBuilder Buffer, int BufferSize, UInt32& InputSize);
    public abstract virtual int ReturnInputWide(string Buffer);
    public abstract virtual int OutputWide(DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int OutputVaListWide(DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int ControlledOutputWide(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int ControlledOutputVaListWide(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int OutputPromptWide(DEBUG_OUTCTL OutputControl, string Format);
    public abstract virtual int OutputPromptVaListWide(DEBUG_OUTCTL OutputControl, string Format, IntPtr va_list_Args);
    public abstract virtual int GetPromptTextWide(StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int AssembleWide(ulong Offset, string Instr, UInt64& EndOffset);
    public abstract virtual int DisassembleWide(ulong Offset, DEBUG_DISASM Flags, StringBuilder Buffer, int BufferSize, UInt32& DisassemblySize, UInt64& EndOffset);
    public abstract virtual int GetProcessorTypeNamesWide(IMAGE_FILE_MACHINE Type, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetTextMacroWide(UInt32 Slot, StringBuilder Buffer, int BufferSize, UInt32& MacroSize);
    public abstract virtual int SetTextMacroWide(UInt32 Slot, string Macro);
    public abstract virtual int EvaluateWide(string Expression, DEBUG_VALUE_TYPE DesiredType, DEBUG_VALUE& Value, UInt32& RemainderIndex);
    public abstract virtual int ExecuteWide(DEBUG_OUTCTL OutputControl, string Command, DEBUG_EXECUTE Flags);
    public abstract virtual int ExecuteCommandFileWide(DEBUG_OUTCTL OutputControl, string CommandFile, DEBUG_EXECUTE Flags);
    public abstract virtual int GetBreakpointByIndex2(UInt32 Index, IDebugBreakpoint2& bp);
    public abstract virtual int GetBreakpointById2(UInt32 Id, IDebugBreakpoint2& bp);
    public abstract virtual int AddBreakpoint2(DEBUG_BREAKPOINT_TYPE Type, UInt32 DesiredId, IDebugBreakpoint2& Bp);
    public abstract virtual int RemoveBreakpoint2(IDebugBreakpoint2 Bp);
    public abstract virtual int AddExtensionWide(string Path, UInt32 Flags, UInt64& Handle);
    public abstract virtual int GetExtensionByPathWide(string Path, UInt64& Handle);
    public abstract virtual int CallExtensionWide(ulong Handle, string Function, string Arguments);
    public abstract virtual int GetExtensionFunctionWide(ulong Handle, string FuncName, IntPtr& Function);
    public abstract virtual int GetEventFilterTextWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int GetEventFilterCommandWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetEventFilterCommandWide(UInt32 Index, string Command);
    public abstract virtual int GetSpecificEventFilterArgumentWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ArgumentSize);
    public abstract virtual int SetSpecificEventFilterArgumentWide(UInt32 Index, string Argument);
    public abstract virtual int GetExceptionFilterSecondCommandWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetExceptionFilterSecondCommandWide(UInt32 Index, string Command);
    public abstract virtual int GetLastEventInformationWide(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr ExtraInformation, int ExtraInformationSize, UInt32& ExtraInformationUsed, StringBuilder Description, int DescriptionSize, UInt32& DescriptionUsed);
    public abstract virtual int GetTextReplacementWide(string SrcText, UInt32 Index, StringBuilder SrcBuffer, int SrcBufferSize, UInt32& SrcSize, StringBuilder DstBuffer, int DstBufferSize, UInt32& DstSize);
    public abstract virtual int SetTextReplacementWide(string SrcText, string DstText);
    public abstract virtual int SetExpressionSyntaxByNameWide(string AbbrevName);
    public abstract virtual int GetExpressionSyntaxNamesWide(UInt32 Index, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetEventIndexDescriptionWide(UInt32 Index, DEBUG_EINDEX Which, StringBuilder Buffer, int BufferSize, UInt32& DescSize);
    public abstract virtual int GetLogFile2(StringBuilder Buffer, int BufferSize, UInt32& FileSize, DEBUG_LOG& Flags);
    public abstract virtual int OpenLogFile2(string File, DEBUG_LOG& Flags);
    public abstract virtual int GetLogFile2Wide(StringBuilder Buffer, int BufferSize, UInt32& FileSize, DEBUG_LOG& Flags);
    public abstract virtual int OpenLogFile2Wide(string File, DEBUG_LOG& Flags);
    public abstract virtual int GetSystemVersionValues(UInt32& PlatformId, UInt32& Win32Major, UInt32& Win32Minor, UInt32& KdMajor, UInt32& KdMinor);
    public abstract virtual int GetSystemVersionString(DEBUG_SYSVERSTR Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSystemVersionStringWide(DEBUG_SYSVERSTR Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetContextStackTrace(IntPtr StartContext, UInt32 StartContextSize, DEBUG_STACK_FRAME[] Frames, int FrameSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, UInt32& FramesFilled);
    public abstract virtual int OutputContextStackTrace(DEBUG_OUTCTL OutputControl, DEBUG_STACK_FRAME[] Frames, int FramesSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, DEBUG_STACK Flags);
    public abstract virtual int GetStoredEventInformation(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr Context, UInt32 ContextSize, UInt32& ContextUsed, IntPtr ExtraInformation, UInt32 ExtraInformationSize, UInt32& ExtraInformationUsed);
    public abstract virtual int GetManagedStatus(DEBUG_MANAGED& Flags, DEBUG_MANSTR WhichString, StringBuilder String, int StringSize, UInt32& StringNeeded);
    public abstract virtual int GetManagedStatusWide(DEBUG_MANAGED& Flags, DEBUG_MANSTR WhichString, StringBuilder String, int StringSize, UInt32& StringNeeded);
    public abstract virtual int ResetManagedStatus(DEBUG_MANRESET Flags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("b2ffe162-2412-429f-8d1d-5bf6dd824696")]
public interface SOS.Hosting.DbgEng.Interop.IDebugControl5 {
    public abstract virtual int GetInterrupt();
    public abstract virtual int SetInterrupt(DEBUG_INTERRUPT Flags);
    public abstract virtual int GetInterruptTimeout(UInt32& Seconds);
    public abstract virtual int SetInterruptTimeout(UInt32 Seconds);
    public abstract virtual int GetLogFile(StringBuilder Buffer, int BufferSize, UInt32& FileSize, Boolean& Append);
    public abstract virtual int OpenLogFile(string File, bool Append);
    public abstract virtual int CloseLogFile();
    public abstract virtual int GetLogMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetLogMask(DEBUG_OUTPUT Mask);
    public abstract virtual int Input(StringBuilder Buffer, int BufferSize, UInt32& InputSize);
    public abstract virtual int ReturnInput(string Buffer);
    public abstract virtual int Output(DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int OutputVaList(DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int ControlledOutput(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int ControlledOutputVaList(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int OutputPrompt(DEBUG_OUTCTL OutputControl, string Format);
    public abstract virtual int OutputPromptVaList(DEBUG_OUTCTL OutputControl, string Format, IntPtr va_list_Args);
    public abstract virtual int GetPromptText(StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int OutputCurrentState(DEBUG_OUTCTL OutputControl, DEBUG_CURRENT Flags);
    public abstract virtual int OutputVersionInformation(DEBUG_OUTCTL OutputControl);
    public abstract virtual int GetNotifyEventHandle(UInt64& Handle);
    public abstract virtual int SetNotifyEventHandle(ulong Handle);
    public abstract virtual int Assemble(ulong Offset, string Instr, UInt64& EndOffset);
    public abstract virtual int Disassemble(ulong Offset, DEBUG_DISASM Flags, StringBuilder Buffer, int BufferSize, UInt32& DisassemblySize, UInt64& EndOffset);
    public abstract virtual int GetDisassembleEffectiveOffset(UInt64& Offset);
    public abstract virtual int OutputDisassembly(DEBUG_OUTCTL OutputControl, ulong Offset, DEBUG_DISASM Flags, UInt64& EndOffset);
    public abstract virtual int OutputDisassemblyLines(DEBUG_OUTCTL OutputControl, UInt32 PreviousLines, UInt32 TotalLines, ulong Offset, DEBUG_DISASM Flags, UInt32& OffsetLine, UInt64& StartOffset, UInt64& EndOffset, UInt64[] LineOffsets);
    public abstract virtual int GetNearInstruction(ulong Offset, int Delta, UInt64& NearOffset);
    public abstract virtual int GetStackTrace(ulong FrameOffset, ulong StackOffset, ulong InstructionOffset, DEBUG_STACK_FRAME[] Frames, int FrameSize, UInt32& FramesFilled);
    public abstract virtual int GetReturnOffset(UInt64& Offset);
    public abstract virtual int OutputStackTrace(DEBUG_OUTCTL OutputControl, DEBUG_STACK_FRAME[] Frames, int FramesSize, DEBUG_STACK Flags);
    public abstract virtual int GetDebuggeeType(DEBUG_CLASS& Class, DEBUG_CLASS_QUALIFIER& Qualifier);
    public abstract virtual int GetActualProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetExecutingProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetNumberPossibleExecutingProcessorTypes(UInt32& Number);
    public abstract virtual int GetPossibleExecutingProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetNumberProcessors(UInt32& Number);
    public abstract virtual int GetSystemVersion(UInt32& PlatformId, UInt32& Major, UInt32& Minor, StringBuilder ServicePackString, int ServicePackStringSize, UInt32& ServicePackStringUsed, UInt32& ServicePackNumber, StringBuilder BuildString, int BuildStringSize, UInt32& BuildStringUsed);
    public abstract virtual int GetPageSize(UInt32& Size);
    public abstract virtual int IsPointer64Bit();
    public abstract virtual int ReadBugCheckData(UInt32& Code, UInt64& Arg1, UInt64& Arg2, UInt64& Arg3, UInt64& Arg4);
    public abstract virtual int GetNumberSupportedProcessorTypes(UInt32& Number);
    public abstract virtual int GetSupportedProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetProcessorTypeNames(IMAGE_FILE_MACHINE Type, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetEffectiveProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int SetEffectiveProcessorType(IMAGE_FILE_MACHINE Type);
    public abstract virtual int GetExecutionStatus(DEBUG_STATUS& Status);
    public abstract virtual int SetExecutionStatus(DEBUG_STATUS Status);
    public abstract virtual int GetCodeLevel(DEBUG_LEVEL& Level);
    public abstract virtual int SetCodeLevel(DEBUG_LEVEL Level);
    public abstract virtual int GetEngineOptions(DEBUG_ENGOPT& Options);
    public abstract virtual int AddEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int RemoveEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int SetEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int GetSystemErrorControl(ERROR_LEVEL& OutputLevel, ERROR_LEVEL& BreakLevel);
    public abstract virtual int SetSystemErrorControl(ERROR_LEVEL OutputLevel, ERROR_LEVEL BreakLevel);
    public abstract virtual int GetTextMacro(UInt32 Slot, StringBuilder Buffer, int BufferSize, UInt32& MacroSize);
    public abstract virtual int SetTextMacro(UInt32 Slot, string Macro);
    public abstract virtual int GetRadix(UInt32& Radix);
    public abstract virtual int SetRadix(UInt32 Radix);
    public abstract virtual int Evaluate(string Expression, DEBUG_VALUE_TYPE DesiredType, DEBUG_VALUE& Value, UInt32& RemainderIndex);
    public abstract virtual int CoerceValue(DEBUG_VALUE In, DEBUG_VALUE_TYPE OutType, DEBUG_VALUE& Out);
    public abstract virtual int CoerceValues(UInt32 Count, DEBUG_VALUE[] In, DEBUG_VALUE_TYPE[] OutType, DEBUG_VALUE[] Out);
    public abstract virtual int Execute(DEBUG_OUTCTL OutputControl, string Command, DEBUG_EXECUTE Flags);
    public abstract virtual int ExecuteCommandFile(DEBUG_OUTCTL OutputControl, string CommandFile, DEBUG_EXECUTE Flags);
    public abstract virtual int GetNumberBreakpoints(UInt32& Number);
    public abstract virtual int GetBreakpointByIndex(UInt32 Index, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointById(UInt32 Id, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointParameters(UInt32 Count, UInt32[] Ids, UInt32 Start, DEBUG_BREAKPOINT_PARAMETERS[] Params);
    public abstract virtual int AddBreakpoint(DEBUG_BREAKPOINT_TYPE Type, UInt32 DesiredId, IDebugBreakpoint& Bp);
    public abstract virtual int RemoveBreakpoint(IDebugBreakpoint Bp);
    public abstract virtual int AddExtension(string Path, UInt32 Flags, UInt64& Handle);
    public abstract virtual int RemoveExtension(ulong Handle);
    public abstract virtual int GetExtensionByPath(string Path, UInt64& Handle);
    public abstract virtual int CallExtension(ulong Handle, string Function, string Arguments);
    public abstract virtual int GetExtensionFunction(ulong Handle, string FuncName, IntPtr& Function);
    public abstract virtual int GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetNumberEventFilters(UInt32& SpecificEvents, UInt32& SpecificExceptions, UInt32& ArbitraryExceptions);
    public abstract virtual int GetEventFilterText(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int GetEventFilterCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetEventFilterCommand(UInt32 Index, string Command);
    public abstract virtual int GetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetSpecificEventFilterArgument(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ArgumentSize);
    public abstract virtual int SetSpecificEventFilterArgument(UInt32 Index, string Argument);
    public abstract virtual int GetExceptionFilterParameters(UInt32 Count, UInt32[] Codes, UInt32 Start, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetExceptionFilterParameters(UInt32 Count, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetExceptionFilterSecondCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetExceptionFilterSecondCommand(UInt32 Index, string Command);
    public abstract virtual int WaitForEvent(DEBUG_WAIT Flags, UInt32 Timeout);
    public abstract virtual int GetLastEventInformation(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr ExtraInformation, UInt32 ExtraInformationSize, UInt32& ExtraInformationUsed, StringBuilder Description, int DescriptionSize, UInt32& DescriptionUsed);
    public abstract virtual int GetCurrentTimeDate(UInt32& TimeDate);
    public abstract virtual int GetCurrentSystemUpTime(UInt32& UpTime);
    public abstract virtual int GetDumpFormatFlags(DEBUG_FORMAT& FormatFlags);
    public abstract virtual int GetNumberTextReplacements(UInt32& NumRepl);
    public abstract virtual int GetTextReplacement(string SrcText, UInt32 Index, StringBuilder SrcBuffer, int SrcBufferSize, UInt32& SrcSize, StringBuilder DstBuffer, int DstBufferSize, UInt32& DstSize);
    public abstract virtual int SetTextReplacement(string SrcText, string DstText);
    public abstract virtual int RemoveTextReplacements();
    public abstract virtual int OutputTextReplacements(DEBUG_OUTCTL OutputControl, DEBUG_OUT_TEXT_REPL Flags);
    public abstract virtual int GetAssemblyOptions(DEBUG_ASMOPT& Options);
    public abstract virtual int AddAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int RemoveAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int SetAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int GetExpressionSyntax(DEBUG_EXPR& Flags);
    public abstract virtual int SetExpressionSyntax(DEBUG_EXPR Flags);
    public abstract virtual int SetExpressionSyntaxByName(string AbbrevName);
    public abstract virtual int GetNumberExpressionSyntaxes(UInt32& Number);
    public abstract virtual int GetExpressionSyntaxNames(UInt32 Index, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetNumberEvents(UInt32& Events);
    public abstract virtual int GetEventIndexDescription(UInt32 Index, DEBUG_EINDEX Which, StringBuilder Buffer, int BufferSize, UInt32& DescSize);
    public abstract virtual int GetCurrentEventIndex(UInt32& Index);
    public abstract virtual int SetNextEventIndex(DEBUG_EINDEX Relation, UInt32 Value, UInt32& NextIndex);
    public abstract virtual int GetLogFileWide(StringBuilder Buffer, int BufferSize, UInt32& FileSize, Boolean& Append);
    public abstract virtual int OpenLogFileWide(string File, bool Append);
    public abstract virtual int InputWide(StringBuilder Buffer, int BufferSize, UInt32& InputSize);
    public abstract virtual int ReturnInputWide(string Buffer);
    public abstract virtual int OutputWide(DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int OutputVaListWide(DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int ControlledOutputWide(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int ControlledOutputVaListWide(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int OutputPromptWide(DEBUG_OUTCTL OutputControl, string Format);
    public abstract virtual int OutputPromptVaListWide(DEBUG_OUTCTL OutputControl, string Format, IntPtr va_list_Args);
    public abstract virtual int GetPromptTextWide(StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int AssembleWide(ulong Offset, string Instr, UInt64& EndOffset);
    public abstract virtual int DisassembleWide(ulong Offset, DEBUG_DISASM Flags, StringBuilder Buffer, int BufferSize, UInt32& DisassemblySize, UInt64& EndOffset);
    public abstract virtual int GetProcessorTypeNamesWide(IMAGE_FILE_MACHINE Type, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetTextMacroWide(UInt32 Slot, StringBuilder Buffer, int BufferSize, UInt32& MacroSize);
    public abstract virtual int SetTextMacroWide(UInt32 Slot, string Macro);
    public abstract virtual int EvaluateWide(string Expression, DEBUG_VALUE_TYPE DesiredType, DEBUG_VALUE& Value, UInt32& RemainderIndex);
    public abstract virtual int ExecuteWide(DEBUG_OUTCTL OutputControl, string Command, DEBUG_EXECUTE Flags);
    public abstract virtual int ExecuteCommandFileWide(DEBUG_OUTCTL OutputControl, string CommandFile, DEBUG_EXECUTE Flags);
    public abstract virtual int GetBreakpointByIndex2(UInt32 Index, IDebugBreakpoint2& bp);
    public abstract virtual int GetBreakpointById2(UInt32 Id, IDebugBreakpoint2& bp);
    public abstract virtual int AddBreakpoint2(DEBUG_BREAKPOINT_TYPE Type, UInt32 DesiredId, IDebugBreakpoint2& Bp);
    public abstract virtual int RemoveBreakpoint2(IDebugBreakpoint2 Bp);
    public abstract virtual int AddExtensionWide(string Path, UInt32 Flags, UInt64& Handle);
    public abstract virtual int GetExtensionByPathWide(string Path, UInt64& Handle);
    public abstract virtual int CallExtensionWide(ulong Handle, string Function, string Arguments);
    public abstract virtual int GetExtensionFunctionWide(ulong Handle, string FuncName, IntPtr& Function);
    public abstract virtual int GetEventFilterTextWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int GetEventFilterCommandWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetEventFilterCommandWide(UInt32 Index, string Command);
    public abstract virtual int GetSpecificEventFilterArgumentWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ArgumentSize);
    public abstract virtual int SetSpecificEventFilterArgumentWide(UInt32 Index, string Argument);
    public abstract virtual int GetExceptionFilterSecondCommandWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetExceptionFilterSecondCommandWide(UInt32 Index, string Command);
    public abstract virtual int GetLastEventInformationWide(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr ExtraInformation, int ExtraInformationSize, UInt32& ExtraInformationUsed, StringBuilder Description, int DescriptionSize, UInt32& DescriptionUsed);
    public abstract virtual int GetTextReplacementWide(string SrcText, UInt32 Index, StringBuilder SrcBuffer, int SrcBufferSize, UInt32& SrcSize, StringBuilder DstBuffer, int DstBufferSize, UInt32& DstSize);
    public abstract virtual int SetTextReplacementWide(string SrcText, string DstText);
    public abstract virtual int SetExpressionSyntaxByNameWide(string AbbrevName);
    public abstract virtual int GetExpressionSyntaxNamesWide(UInt32 Index, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetEventIndexDescriptionWide(UInt32 Index, DEBUG_EINDEX Which, StringBuilder Buffer, int BufferSize, UInt32& DescSize);
    public abstract virtual int GetLogFile2(StringBuilder Buffer, int BufferSize, UInt32& FileSize, DEBUG_LOG& Flags);
    public abstract virtual int OpenLogFile2(string File, DEBUG_LOG& Flags);
    public abstract virtual int GetLogFile2Wide(StringBuilder Buffer, int BufferSize, UInt32& FileSize, DEBUG_LOG& Flags);
    public abstract virtual int OpenLogFile2Wide(string File, DEBUG_LOG& Flags);
    public abstract virtual int GetSystemVersionValues(UInt32& PlatformId, UInt32& Win32Major, UInt32& Win32Minor, UInt32& KdMajor, UInt32& KdMinor);
    public abstract virtual int GetSystemVersionString(DEBUG_SYSVERSTR Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSystemVersionStringWide(DEBUG_SYSVERSTR Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetContextStackTrace(IntPtr StartContext, UInt32 StartContextSize, DEBUG_STACK_FRAME[] Frames, int FrameSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, UInt32& FramesFilled);
    public abstract virtual int OutputContextStackTrace(DEBUG_OUTCTL OutputControl, DEBUG_STACK_FRAME[] Frames, int FramesSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, DEBUG_STACK Flags);
    public abstract virtual int GetStoredEventInformation(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr Context, UInt32 ContextSize, UInt32& ContextUsed, IntPtr ExtraInformation, UInt32 ExtraInformationSize, UInt32& ExtraInformationUsed);
    public abstract virtual int GetManagedStatus(DEBUG_MANAGED& Flags, DEBUG_MANSTR WhichString, StringBuilder String, int StringSize, UInt32& StringNeeded);
    public abstract virtual int GetManagedStatusWide(DEBUG_MANAGED& Flags, DEBUG_MANSTR WhichString, StringBuilder String, int StringSize, UInt32& StringNeeded);
    public abstract virtual int ResetManagedStatus(DEBUG_MANRESET Flags);
    public abstract virtual int GetStackTraceEx(ulong FrameOffset, ulong StackOffset, ulong InstructionOffset, DEBUG_STACK_FRAME_EX[] Frames, int FramesSize, UInt32& FramesFilled);
    public abstract virtual int OutputStackTraceEx(UInt32 OutputControl, DEBUG_STACK_FRAME_EX[] Frames, int FramesSize, DEBUG_STACK Flags);
    public abstract virtual int GetContextStackTraceEx(IntPtr StartContext, UInt32 StartContextSize, DEBUG_STACK_FRAME_EX[] Frames, int FramesSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, UInt32& FramesFilled);
    public abstract virtual int OutputContextStackTraceEx(UInt32 OutputControl, DEBUG_STACK_FRAME_EX[] Frames, int FramesSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, DEBUG_STACK Flags);
    public abstract virtual int GetBreakpointByGuid(Guid Guid, IDebugBreakpoint3& Bp);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("bc0d583f-126d-43a1-9cc4-a860ab1d537b")]
public interface SOS.Hosting.DbgEng.Interop.IDebugControl6 {
    public abstract virtual int GetInterrupt();
    public abstract virtual int SetInterrupt(DEBUG_INTERRUPT Flags);
    public abstract virtual int GetInterruptTimeout(UInt32& Seconds);
    public abstract virtual int SetInterruptTimeout(UInt32 Seconds);
    public abstract virtual int GetLogFile(StringBuilder Buffer, int BufferSize, UInt32& FileSize, Boolean& Append);
    public abstract virtual int OpenLogFile(string File, bool Append);
    public abstract virtual int CloseLogFile();
    public abstract virtual int GetLogMask(DEBUG_OUTPUT& Mask);
    public abstract virtual int SetLogMask(DEBUG_OUTPUT Mask);
    public abstract virtual int Input(StringBuilder Buffer, int BufferSize, UInt32& InputSize);
    public abstract virtual int ReturnInput(string Buffer);
    public abstract virtual int Output(DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int OutputVaList(DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int ControlledOutput(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int ControlledOutputVaList(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int OutputPrompt(DEBUG_OUTCTL OutputControl, string Format);
    public abstract virtual int OutputPromptVaList(DEBUG_OUTCTL OutputControl, string Format, IntPtr va_list_Args);
    public abstract virtual int GetPromptText(StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int OutputCurrentState(DEBUG_OUTCTL OutputControl, DEBUG_CURRENT Flags);
    public abstract virtual int OutputVersionInformation(DEBUG_OUTCTL OutputControl);
    public abstract virtual int GetNotifyEventHandle(UInt64& Handle);
    public abstract virtual int SetNotifyEventHandle(ulong Handle);
    public abstract virtual int Assemble(ulong Offset, string Instr, UInt64& EndOffset);
    public abstract virtual int Disassemble(ulong Offset, DEBUG_DISASM Flags, StringBuilder Buffer, int BufferSize, UInt32& DisassemblySize, UInt64& EndOffset);
    public abstract virtual int GetDisassembleEffectiveOffset(UInt64& Offset);
    public abstract virtual int OutputDisassembly(DEBUG_OUTCTL OutputControl, ulong Offset, DEBUG_DISASM Flags, UInt64& EndOffset);
    public abstract virtual int OutputDisassemblyLines(DEBUG_OUTCTL OutputControl, UInt32 PreviousLines, UInt32 TotalLines, ulong Offset, DEBUG_DISASM Flags, UInt32& OffsetLine, UInt64& StartOffset, UInt64& EndOffset, UInt64[] LineOffsets);
    public abstract virtual int GetNearInstruction(ulong Offset, int Delta, UInt64& NearOffset);
    public abstract virtual int GetStackTrace(ulong FrameOffset, ulong StackOffset, ulong InstructionOffset, DEBUG_STACK_FRAME[] Frames, int FrameSize, UInt32& FramesFilled);
    public abstract virtual int GetReturnOffset(UInt64& Offset);
    public abstract virtual int OutputStackTrace(DEBUG_OUTCTL OutputControl, DEBUG_STACK_FRAME[] Frames, int FramesSize, DEBUG_STACK Flags);
    public abstract virtual int GetDebuggeeType(DEBUG_CLASS& Class, DEBUG_CLASS_QUALIFIER& Qualifier);
    public abstract virtual int GetActualProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetExecutingProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int GetNumberPossibleExecutingProcessorTypes(UInt32& Number);
    public abstract virtual int GetPossibleExecutingProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetNumberProcessors(UInt32& Number);
    public abstract virtual int GetSystemVersion(UInt32& PlatformId, UInt32& Major, UInt32& Minor, StringBuilder ServicePackString, int ServicePackStringSize, UInt32& ServicePackStringUsed, UInt32& ServicePackNumber, StringBuilder BuildString, int BuildStringSize, UInt32& BuildStringUsed);
    public abstract virtual int GetPageSize(UInt32& Size);
    public abstract virtual int IsPointer64Bit();
    public abstract virtual int ReadBugCheckData(UInt32& Code, UInt64& Arg1, UInt64& Arg2, UInt64& Arg3, UInt64& Arg4);
    public abstract virtual int GetNumberSupportedProcessorTypes(UInt32& Number);
    public abstract virtual int GetSupportedProcessorTypes(UInt32 Start, UInt32 Count, IMAGE_FILE_MACHINE[] Types);
    public abstract virtual int GetProcessorTypeNames(IMAGE_FILE_MACHINE Type, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetEffectiveProcessorType(IMAGE_FILE_MACHINE& Type);
    public abstract virtual int SetEffectiveProcessorType(IMAGE_FILE_MACHINE Type);
    public abstract virtual int GetExecutionStatus(DEBUG_STATUS& Status);
    public abstract virtual int SetExecutionStatus(DEBUG_STATUS Status);
    public abstract virtual int GetCodeLevel(DEBUG_LEVEL& Level);
    public abstract virtual int SetCodeLevel(DEBUG_LEVEL Level);
    public abstract virtual int GetEngineOptions(DEBUG_ENGOPT& Options);
    public abstract virtual int AddEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int RemoveEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int SetEngineOptions(DEBUG_ENGOPT Options);
    public abstract virtual int GetSystemErrorControl(ERROR_LEVEL& OutputLevel, ERROR_LEVEL& BreakLevel);
    public abstract virtual int SetSystemErrorControl(ERROR_LEVEL OutputLevel, ERROR_LEVEL BreakLevel);
    public abstract virtual int GetTextMacro(UInt32 Slot, StringBuilder Buffer, int BufferSize, UInt32& MacroSize);
    public abstract virtual int SetTextMacro(UInt32 Slot, string Macro);
    public abstract virtual int GetRadix(UInt32& Radix);
    public abstract virtual int SetRadix(UInt32 Radix);
    public abstract virtual int Evaluate(string Expression, DEBUG_VALUE_TYPE DesiredType, DEBUG_VALUE& Value, UInt32& RemainderIndex);
    public abstract virtual int CoerceValue(DEBUG_VALUE In, DEBUG_VALUE_TYPE OutType, DEBUG_VALUE& Out);
    public abstract virtual int CoerceValues(UInt32 Count, DEBUG_VALUE[] In, DEBUG_VALUE_TYPE[] OutType, DEBUG_VALUE[] Out);
    public abstract virtual int Execute(DEBUG_OUTCTL OutputControl, string Command, DEBUG_EXECUTE Flags);
    public abstract virtual int ExecuteCommandFile(DEBUG_OUTCTL OutputControl, string CommandFile, DEBUG_EXECUTE Flags);
    public abstract virtual int GetNumberBreakpoints(UInt32& Number);
    public abstract virtual int GetBreakpointByIndex(UInt32 Index, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointById(UInt32 Id, IDebugBreakpoint& bp);
    public abstract virtual int GetBreakpointParameters(UInt32 Count, UInt32[] Ids, UInt32 Start, DEBUG_BREAKPOINT_PARAMETERS[] Params);
    public abstract virtual int AddBreakpoint(DEBUG_BREAKPOINT_TYPE Type, UInt32 DesiredId, IDebugBreakpoint& Bp);
    public abstract virtual int RemoveBreakpoint(IDebugBreakpoint Bp);
    public abstract virtual int AddExtension(string Path, UInt32 Flags, UInt64& Handle);
    public abstract virtual int RemoveExtension(ulong Handle);
    public abstract virtual int GetExtensionByPath(string Path, UInt64& Handle);
    public abstract virtual int CallExtension(ulong Handle, string Function, string Arguments);
    public abstract virtual int GetExtensionFunction(ulong Handle, string FuncName, IntPtr& Function);
    public abstract virtual int GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS& Api);
    public abstract virtual int GetNumberEventFilters(UInt32& SpecificEvents, UInt32& SpecificExceptions, UInt32& ArbitraryExceptions);
    public abstract virtual int GetEventFilterText(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int GetEventFilterCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetEventFilterCommand(UInt32 Index, string Command);
    public abstract virtual int GetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetSpecificFilterParameters(UInt32 Start, UInt32 Count, DEBUG_SPECIFIC_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetSpecificEventFilterArgument(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ArgumentSize);
    public abstract virtual int SetSpecificEventFilterArgument(UInt32 Index, string Argument);
    public abstract virtual int GetExceptionFilterParameters(UInt32 Count, UInt32[] Codes, UInt32 Start, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int SetExceptionFilterParameters(UInt32 Count, DEBUG_EXCEPTION_FILTER_PARAMETERS[] Params);
    public abstract virtual int GetExceptionFilterSecondCommand(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetExceptionFilterSecondCommand(UInt32 Index, string Command);
    public abstract virtual int WaitForEvent(DEBUG_WAIT Flags, UInt32 Timeout);
    public abstract virtual int GetLastEventInformation(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr ExtraInformation, UInt32 ExtraInformationSize, UInt32& ExtraInformationUsed, StringBuilder Description, int DescriptionSize, UInt32& DescriptionUsed);
    public abstract virtual int GetCurrentTimeDate(UInt32& TimeDate);
    public abstract virtual int GetCurrentSystemUpTime(UInt32& UpTime);
    public abstract virtual int GetDumpFormatFlags(DEBUG_FORMAT& FormatFlags);
    public abstract virtual int GetNumberTextReplacements(UInt32& NumRepl);
    public abstract virtual int GetTextReplacement(string SrcText, UInt32 Index, StringBuilder SrcBuffer, int SrcBufferSize, UInt32& SrcSize, StringBuilder DstBuffer, int DstBufferSize, UInt32& DstSize);
    public abstract virtual int SetTextReplacement(string SrcText, string DstText);
    public abstract virtual int RemoveTextReplacements();
    public abstract virtual int OutputTextReplacements(DEBUG_OUTCTL OutputControl, DEBUG_OUT_TEXT_REPL Flags);
    public abstract virtual int GetAssemblyOptions(DEBUG_ASMOPT& Options);
    public abstract virtual int AddAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int RemoveAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int SetAssemblyOptions(DEBUG_ASMOPT Options);
    public abstract virtual int GetExpressionSyntax(DEBUG_EXPR& Flags);
    public abstract virtual int SetExpressionSyntax(DEBUG_EXPR Flags);
    public abstract virtual int SetExpressionSyntaxByName(string AbbrevName);
    public abstract virtual int GetNumberExpressionSyntaxes(UInt32& Number);
    public abstract virtual int GetExpressionSyntaxNames(UInt32 Index, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetNumberEvents(UInt32& Events);
    public abstract virtual int GetEventIndexDescription(UInt32 Index, DEBUG_EINDEX Which, StringBuilder Buffer, int BufferSize, UInt32& DescSize);
    public abstract virtual int GetCurrentEventIndex(UInt32& Index);
    public abstract virtual int SetNextEventIndex(DEBUG_EINDEX Relation, UInt32 Value, UInt32& NextIndex);
    public abstract virtual int GetLogFileWide(StringBuilder Buffer, int BufferSize, UInt32& FileSize, Boolean& Append);
    public abstract virtual int OpenLogFileWide(string File, bool Append);
    public abstract virtual int InputWide(StringBuilder Buffer, int BufferSize, UInt32& InputSize);
    public abstract virtual int ReturnInputWide(string Buffer);
    public abstract virtual int OutputWide(DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int OutputVaListWide(DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int ControlledOutputWide(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format);
    public abstract virtual int ControlledOutputVaListWide(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT Mask, string Format, IntPtr va_list_Args);
    public abstract virtual int OutputPromptWide(DEBUG_OUTCTL OutputControl, string Format);
    public abstract virtual int OutputPromptVaListWide(DEBUG_OUTCTL OutputControl, string Format, IntPtr va_list_Args);
    public abstract virtual int GetPromptTextWide(StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int AssembleWide(ulong Offset, string Instr, UInt64& EndOffset);
    public abstract virtual int DisassembleWide(ulong Offset, DEBUG_DISASM Flags, StringBuilder Buffer, int BufferSize, UInt32& DisassemblySize, UInt64& EndOffset);
    public abstract virtual int GetProcessorTypeNamesWide(IMAGE_FILE_MACHINE Type, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetTextMacroWide(UInt32 Slot, StringBuilder Buffer, int BufferSize, UInt32& MacroSize);
    public abstract virtual int SetTextMacroWide(UInt32 Slot, string Macro);
    public abstract virtual int EvaluateWide(string Expression, DEBUG_VALUE_TYPE DesiredType, DEBUG_VALUE& Value, UInt32& RemainderIndex);
    public abstract virtual int ExecuteWide(DEBUG_OUTCTL OutputControl, string Command, DEBUG_EXECUTE Flags);
    public abstract virtual int ExecuteCommandFileWide(DEBUG_OUTCTL OutputControl, string CommandFile, DEBUG_EXECUTE Flags);
    public abstract virtual int GetBreakpointByIndex2(UInt32 Index, IDebugBreakpoint2& bp);
    public abstract virtual int GetBreakpointById2(UInt32 Id, IDebugBreakpoint2& bp);
    public abstract virtual int AddBreakpoint2(DEBUG_BREAKPOINT_TYPE Type, UInt32 DesiredId, IDebugBreakpoint2& Bp);
    public abstract virtual int RemoveBreakpoint2(IDebugBreakpoint2 Bp);
    public abstract virtual int AddExtensionWide(string Path, UInt32 Flags, UInt64& Handle);
    public abstract virtual int GetExtensionByPathWide(string Path, UInt64& Handle);
    public abstract virtual int CallExtensionWide(ulong Handle, string Function, string Arguments);
    public abstract virtual int GetExtensionFunctionWide(ulong Handle, string FuncName, IntPtr& Function);
    public abstract virtual int GetEventFilterTextWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& TextSize);
    public abstract virtual int GetEventFilterCommandWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetEventFilterCommandWide(UInt32 Index, string Command);
    public abstract virtual int GetSpecificEventFilterArgumentWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ArgumentSize);
    public abstract virtual int SetSpecificEventFilterArgumentWide(UInt32 Index, string Argument);
    public abstract virtual int GetExceptionFilterSecondCommandWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& CommandSize);
    public abstract virtual int SetExceptionFilterSecondCommandWide(UInt32 Index, string Command);
    public abstract virtual int GetLastEventInformationWide(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr ExtraInformation, int ExtraInformationSize, UInt32& ExtraInformationUsed, StringBuilder Description, int DescriptionSize, UInt32& DescriptionUsed);
    public abstract virtual int GetTextReplacementWide(string SrcText, UInt32 Index, StringBuilder SrcBuffer, int SrcBufferSize, UInt32& SrcSize, StringBuilder DstBuffer, int DstBufferSize, UInt32& DstSize);
    public abstract virtual int SetTextReplacementWide(string SrcText, string DstText);
    public abstract virtual int SetExpressionSyntaxByNameWide(string AbbrevName);
    public abstract virtual int GetExpressionSyntaxNamesWide(UInt32 Index, StringBuilder FullNameBuffer, int FullNameBufferSize, UInt32& FullNameSize, StringBuilder AbbrevNameBuffer, int AbbrevNameBufferSize, UInt32& AbbrevNameSize);
    public abstract virtual int GetEventIndexDescriptionWide(UInt32 Index, DEBUG_EINDEX Which, StringBuilder Buffer, int BufferSize, UInt32& DescSize);
    public abstract virtual int GetLogFile2(StringBuilder Buffer, int BufferSize, UInt32& FileSize, DEBUG_LOG& Flags);
    public abstract virtual int OpenLogFile2(string File, DEBUG_LOG& Flags);
    public abstract virtual int GetLogFile2Wide(StringBuilder Buffer, int BufferSize, UInt32& FileSize, DEBUG_LOG& Flags);
    public abstract virtual int OpenLogFile2Wide(string File, DEBUG_LOG& Flags);
    public abstract virtual int GetSystemVersionValues(UInt32& PlatformId, UInt32& Win32Major, UInt32& Win32Minor, UInt32& KdMajor, UInt32& KdMinor);
    public abstract virtual int GetSystemVersionString(DEBUG_SYSVERSTR Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSystemVersionStringWide(DEBUG_SYSVERSTR Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetContextStackTrace(IntPtr StartContext, UInt32 StartContextSize, DEBUG_STACK_FRAME[] Frames, int FrameSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, UInt32& FramesFilled);
    public abstract virtual int OutputContextStackTrace(DEBUG_OUTCTL OutputControl, DEBUG_STACK_FRAME[] Frames, int FramesSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, DEBUG_STACK Flags);
    public abstract virtual int GetStoredEventInformation(DEBUG_EVENT& Type, UInt32& ProcessId, UInt32& ThreadId, IntPtr Context, UInt32 ContextSize, UInt32& ContextUsed, IntPtr ExtraInformation, UInt32 ExtraInformationSize, UInt32& ExtraInformationUsed);
    public abstract virtual int GetManagedStatus(DEBUG_MANAGED& Flags, DEBUG_MANSTR WhichString, StringBuilder String, int StringSize, UInt32& StringNeeded);
    public abstract virtual int GetManagedStatusWide(DEBUG_MANAGED& Flags, DEBUG_MANSTR WhichString, StringBuilder String, int StringSize, UInt32& StringNeeded);
    public abstract virtual int ResetManagedStatus(DEBUG_MANRESET Flags);
    public abstract virtual int GetStackTraceEx(ulong FrameOffset, ulong StackOffset, ulong InstructionOffset, DEBUG_STACK_FRAME_EX[] Frames, int FramesSize, UInt32& FramesFilled);
    public abstract virtual int OutputStackTraceEx(UInt32 OutputControl, DEBUG_STACK_FRAME_EX[] Frames, int FramesSize, DEBUG_STACK Flags);
    public abstract virtual int GetContextStackTraceEx(IntPtr StartContext, UInt32 StartContextSize, DEBUG_STACK_FRAME_EX[] Frames, int FramesSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, UInt32& FramesFilled);
    public abstract virtual int OutputContextStackTraceEx(UInt32 OutputControl, DEBUG_STACK_FRAME_EX[] Frames, int FramesSize, IntPtr FrameContexts, UInt32 FrameContextsSize, UInt32 FrameContextsEntrySize, DEBUG_STACK Flags);
    public abstract virtual int GetBreakpointByGuid(Guid Guid, IDebugBreakpoint3& Bp);
    public abstract virtual int GetExecutionStatusEx(DEBUG_STATUS& Status);
    public abstract virtual int GetSynchronizationStatus(UInt32& SendsAttempted, UInt32& SecondsSinceLastResponse);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("88f7dfab-3ea7-4c3a-aefb-c4e8106173aa")]
public interface SOS.Hosting.DbgEng.Interop.IDebugDataSpaces {
    public abstract virtual int ReadVirtual(ulong Offset, IntPtr buffer, int BufferSize, Int32& BytesRead);
    public abstract virtual int WriteVirtual(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int SearchVirtual(ulong Offset, ulong Length, Byte[] pattern, UInt32 PatternSize, UInt32 PatternGranularity, UInt64& MatchOffset);
    public abstract virtual int ReadVirtualUncached(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteVirtualUncached(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadPointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int WritePointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int ReadPhysical(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WritePhysical(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadControl(UInt32 Processor, ulong Offset, Byte[] buffer, int BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteControl(UInt32 Processor, ulong Offset, Byte[] buffer, int BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadMsr(UInt32 Msr, UInt64& MsrValue);
    public abstract virtual int WriteMsr(UInt32 Msr, ulong MsrValue);
    public abstract virtual int ReadBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int CheckLowMemory();
    public abstract virtual int ReadDebuggerData(UInt32 Index, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int ReadProcessorSystemData(UInt32 Processor, DEBUG_DATA Index, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7a5e852f-96e9-468f-ac1b-0b3addc4a049")]
public interface SOS.Hosting.DbgEng.Interop.IDebugDataSpaces2 {
    public abstract virtual int ReadVirtual(ulong Offset, IntPtr buffer, int BufferSize, Int32& BytesRead);
    public abstract virtual int WriteVirtual(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int SearchVirtual(ulong Offset, ulong Length, Byte[] pattern, UInt32 PatternSize, UInt32 PatternGranularity, UInt64& MatchOffset);
    public abstract virtual int ReadVirtualUncached(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteVirtualUncached(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadPointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int WritePointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int ReadPhysical(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WritePhysical(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadControl(UInt32 Processor, ulong Offset, Byte[] buffer, int BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteControl(UInt32 Processor, ulong Offset, Byte[] buffer, int BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadMsr(UInt32 Msr, UInt64& MsrValue);
    public abstract virtual int WriteMsr(UInt32 Msr, ulong MsrValue);
    public abstract virtual int ReadBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int CheckLowMemory();
    public abstract virtual int ReadDebuggerData(UInt32 Index, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int ReadProcessorSystemData(UInt32 Processor, DEBUG_DATA Index, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int VirtualToPhysical(ulong Virtual, UInt64& Physical);
    public abstract virtual int GetVirtualTranslationPhysicalOffsets(ulong Virtual, UInt64[] Offsets, UInt32 OffsetsSize, UInt32& Levels);
    public abstract virtual int ReadHandleData(ulong Handle, DEBUG_HANDLE_DATA_TYPE DataType, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int FillVirtual(ulong Start, UInt32 Size, Byte[] buffer, UInt32 PatternSize, UInt32& Filled);
    public abstract virtual int FillPhysical(ulong Start, UInt32 Size, Byte[] buffer, UInt32 PatternSize, UInt32& Filled);
    public abstract virtual int QueryVirtual(ulong Offset, MEMORY_BASIC_INFORMATION64& Info);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("23f79d6c-8aaf-4f7c-a607-9995f5407e63")]
public interface SOS.Hosting.DbgEng.Interop.IDebugDataSpaces3 {
    public abstract virtual int ReadVirtual(ulong Offset, IntPtr buffer, int BufferSize, Int32& BytesRead);
    public abstract virtual int WriteVirtual(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int SearchVirtual(ulong Offset, ulong Length, Byte[] pattern, UInt32 PatternSize, UInt32 PatternGranularity, UInt64& MatchOffset);
    public abstract virtual int ReadVirtualUncached(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteVirtualUncached(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadPointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int WritePointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int ReadPhysical(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WritePhysical(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadControl(UInt32 Processor, ulong Offset, Byte[] buffer, int BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteControl(UInt32 Processor, ulong Offset, Byte[] buffer, int BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadMsr(UInt32 Msr, UInt64& MsrValue);
    public abstract virtual int WriteMsr(UInt32 Msr, ulong MsrValue);
    public abstract virtual int ReadBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int CheckLowMemory();
    public abstract virtual int ReadDebuggerData(UInt32 Index, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int ReadProcessorSystemData(UInt32 Processor, DEBUG_DATA Index, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int VirtualToPhysical(ulong Virtual, UInt64& Physical);
    public abstract virtual int GetVirtualTranslationPhysicalOffsets(ulong Virtual, UInt64[] Offsets, UInt32 OffsetsSize, UInt32& Levels);
    public abstract virtual int ReadHandleData(ulong Handle, DEBUG_HANDLE_DATA_TYPE DataType, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int FillVirtual(ulong Start, UInt32 Size, Byte[] buffer, UInt32 PatternSize, UInt32& Filled);
    public abstract virtual int FillPhysical(ulong Start, UInt32 Size, Byte[] buffer, UInt32 PatternSize, UInt32& Filled);
    public abstract virtual int QueryVirtual(ulong Offset, MEMORY_BASIC_INFORMATION64& Info);
    public abstract virtual int ReadImageNtHeaders(ulong ImageBase, IMAGE_NT_HEADERS64& Headers);
    public abstract virtual int ReadTagged(Guid Tag, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& TotalSize);
    public abstract virtual int StartEnumTagged(UInt64& Handle);
    public abstract virtual int GetNextTagged(ulong Handle, Guid& Tag, UInt32& Size);
    public abstract virtual int EndEnumTagged(ulong Handle);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("d98ada1f-29e9-4ef5-a6c0-e53349883212")]
public interface SOS.Hosting.DbgEng.Interop.IDebugDataSpaces4 {
    public abstract virtual int ReadVirtual(ulong Offset, IntPtr buffer, int BufferSize, Int32& BytesRead);
    public abstract virtual int WriteVirtual(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int SearchVirtual(ulong Offset, ulong Length, Byte[] pattern, UInt32 PatternSize, UInt32 PatternGranularity, UInt64& MatchOffset);
    public abstract virtual int ReadVirtualUncached(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteVirtualUncached(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadPointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int WritePointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int ReadPhysical(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WritePhysical(ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadControl(UInt32 Processor, ulong Offset, Byte[] buffer, int BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteControl(UInt32 Processor, ulong Offset, Byte[] buffer, int BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadMsr(UInt32 Msr, UInt64& MsrValue);
    public abstract virtual int WriteMsr(UInt32 Msr, ulong MsrValue);
    public abstract virtual int ReadBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int CheckLowMemory();
    public abstract virtual int ReadDebuggerData(UInt32 Index, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int ReadProcessorSystemData(UInt32 Processor, DEBUG_DATA Index, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int VirtualToPhysical(ulong Virtual, UInt64& Physical);
    public abstract virtual int GetVirtualTranslationPhysicalOffsets(ulong Virtual, UInt64[] Offsets, UInt32 OffsetsSize, UInt32& Levels);
    public abstract virtual int ReadHandleData(ulong Handle, DEBUG_HANDLE_DATA_TYPE DataType, Byte[] buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int FillVirtual(ulong Start, UInt32 Size, Byte[] buffer, UInt32 PatternSize, UInt32& Filled);
    public abstract virtual int FillPhysical(ulong Start, UInt32 Size, Byte[] buffer, UInt32 PatternSize, UInt32& Filled);
    public abstract virtual int QueryVirtual(ulong Offset, MEMORY_BASIC_INFORMATION64& Info);
    public abstract virtual int ReadImageNtHeaders(ulong ImageBase, IMAGE_NT_HEADERS64& Headers);
    public abstract virtual int ReadTagged(Guid Tag, UInt32 Offset, Byte[] buffer, UInt32 BufferSize, UInt32& TotalSize);
    public abstract virtual int StartEnumTagged(UInt64& Handle);
    public abstract virtual int GetNextTagged(ulong Handle, Guid& Tag, UInt32& Size);
    public abstract virtual int EndEnumTagged(ulong Handle);
    public abstract virtual int GetOffsetInformation(DEBUG_DATA_SPACE Space, DEBUG_OFFSINFO Which, ulong Offset, Byte[] buffer, UInt32 BufferSize, UInt32& InfoSize);
    public abstract virtual int GetNextDifferentlyValidOffsetVirtual(ulong Offset, UInt64& NextOffset);
    public abstract virtual int GetValidRegionVirtual(ulong Base, UInt32 Size, UInt64& ValidBase, UInt32& ValidSize);
    public abstract virtual int SearchVirtual2(ulong Offset, ulong Length, DEBUG_VSEARCH Flags, Byte[] buffer, UInt32 PatternSize, UInt32 PatternGranularity, UInt64& MatchOffset);
    public abstract virtual int ReadMultiByteStringVirtual(ulong Offset, UInt32 MaxBytes, StringBuilder Buffer, UInt32 BufferSize, UInt32& StringBytes);
    public abstract virtual int ReadMultiByteStringVirtualWide(ulong Offset, UInt32 MaxBytes, CODE_PAGE CodePage, StringBuilder Buffer, UInt32 BufferSize, UInt32& StringBytes);
    public abstract virtual int ReadUnicodeStringVirtual(ulong Offset, UInt32 MaxBytes, CODE_PAGE CodePage, StringBuilder Buffer, UInt32 BufferSize, UInt32& StringBytes);
    public abstract virtual int ReadUnicodeStringVirtualWide(ulong Offset, UInt32 MaxBytes, StringBuilder Buffer, UInt32 BufferSize, UInt32& StringBytes);
    public abstract virtual int ReadPhysical2(ulong Offset, DEBUG_PHYSICAL Flags, Byte[] buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WritePhysical2(ulong Offset, DEBUG_PHYSICAL Flags, Byte[] buffer, UInt32 BufferSize, UInt32& BytesWritten);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("88f7dfab-3ea7-4c3a-aefb-c4e8106173aa")]
public interface SOS.Hosting.DbgEng.Interop.IDebugDataSpacesPtr {
    public abstract virtual int ReadVirtual(ulong Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteVirtual(ulong Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int SearchVirtual(ulong Offset, ulong Length, IntPtr pattern, UInt32 PatternSize, UInt32 PatternGranularity, UInt64& MatchOffset);
    public abstract virtual int ReadVirtualUncached(ulong Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteVirtualUncached(ulong Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadPointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int WritePointersVirtual(UInt32 Count, ulong Offset, UInt64[] Ptrs);
    public abstract virtual int ReadPhysical(ulong Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WritePhysical(ulong Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadControl(UInt32 Processor, ulong Offset, IntPtr buffer, int BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteControl(UInt32 Processor, ulong Offset, IntPtr buffer, int BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteIo(INTERFACE_TYPE InterfaceType, UInt32 BusNumber, UInt32 AddressSpace, ulong Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int ReadMsr(UInt32 Msr, UInt64& MsrValue);
    public abstract virtual int WriteMsr(UInt32 Msr, ulong MsrValue);
    public abstract virtual int ReadBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteBusData(BUS_DATA_TYPE BusDataType, UInt32 BusNumber, UInt32 SlotNumber, UInt32 Offset, IntPtr buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int CheckLowMemory();
    public abstract virtual int ReadDebuggerData(UInt32 Index, IntPtr buffer, UInt32 BufferSize, UInt32& DataSize);
    public abstract virtual int ReadProcessorSystemData(UInt32 Processor, DEBUG_DATA Index, IntPtr buffer, UInt32 BufferSize, UInt32& DataSize);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("337be28b-5036-4d72-b6bf-c45fbb9f2eaa")]
public interface SOS.Hosting.DbgEng.Interop.IDebugEventCallbacks {
    public abstract virtual int GetInterestMask(DEBUG_EVENT& Mask);
    public abstract virtual int Breakpoint(IDebugBreakpoint Bp);
    public abstract virtual int Exception(EXCEPTION_RECORD64& modreq(System.Runtime.InteropServices.InAttribute) Exception, UInt32 FirstChance);
    public abstract virtual int CreateThread(ulong Handle, ulong DataOffset, ulong StartOffset);
    public abstract virtual int ExitThread(UInt32 ExitCode);
    public abstract virtual int CreateProcess(ulong ImageFileHandle, ulong Handle, ulong BaseOffset, UInt32 ModuleSize, string ModuleName, string ImageName, UInt32 CheckSum, UInt32 TimeDateStamp, ulong InitialThreadHandle, ulong ThreadDataOffset, ulong StartOffset);
    public abstract virtual int ExitProcess(UInt32 ExitCode);
    public abstract virtual int LoadModule(ulong ImageFileHandle, ulong BaseOffset, UInt32 ModuleSize, string ModuleName, string ImageName, UInt32 CheckSum, UInt32 TimeDateStamp);
    public abstract virtual int UnloadModule(string ImageBaseName, ulong BaseOffset);
    public abstract virtual int SystemError(UInt32 Error, UInt32 Level);
    public abstract virtual int SessionStatus(DEBUG_SESSION Status);
    public abstract virtual int ChangeDebuggeeState(DEBUG_CDS Flags, ulong Argument);
    public abstract virtual int ChangeEngineState(DEBUG_CES Flags, ulong Argument);
    public abstract virtual int ChangeSymbolState(DEBUG_CSS Flags, ulong Argument);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0690e046-9c23-45ac-a04f-987ac29ad0d3")]
public interface SOS.Hosting.DbgEng.Interop.IDebugEventCallbacksWide {
    public abstract virtual int GetInterestMask(DEBUG_EVENT& Mask);
    public abstract virtual int Breakpoint(IDebugBreakpoint2 Bp);
    public abstract virtual int Exception(EXCEPTION_RECORD64& modreq(System.Runtime.InteropServices.InAttribute) Exception, UInt32 FirstChance);
    public abstract virtual int CreateThread(ulong Handle, ulong DataOffset, ulong StartOffset);
    public abstract virtual int ExitThread(UInt32 ExitCode);
    public abstract virtual int CreateProcess(ulong ImageFileHandle, ulong Handle, ulong BaseOffset, UInt32 ModuleSize, string ModuleName, string ImageName, UInt32 CheckSum, UInt32 TimeDateStamp, ulong InitialThreadHandle, ulong ThreadDataOffset, ulong StartOffset);
    public abstract virtual int ExitProcess(UInt32 ExitCode);
    public abstract virtual int LoadModule(ulong ImageFileHandle, ulong BaseOffset, UInt32 ModuleSize, string ModuleName, string ImageName, UInt32 CheckSum, UInt32 TimeDateStamp);
    public abstract virtual int UnloadModule(string ImageBaseName, ulong BaseOffset);
    public abstract virtual int SystemError(UInt32 Error, UInt32 Level);
    public abstract virtual int SessionStatus(DEBUG_SESSION Status);
    public abstract virtual int ChangeDebuggeeState(DEBUG_CDS Flags, ulong Argument);
    public abstract virtual int ChangeEngineState(DEBUG_CES Flags, ulong Argument);
    public abstract virtual int ChangeSymbolState(DEBUG_CSS Flags, ulong Argument);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("61a4905b-23f9-4247-b3c5-53d087529ab7")]
public interface SOS.Hosting.DbgEng.Interop.IDebugEventContextCallbacks {
    public abstract virtual int GetInterestMask(DEBUG_EVENT& Mask);
    public abstract virtual int Breakpoint(IDebugBreakpoint2 Bp, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int Exception(EXCEPTION_RECORD64& modreq(System.Runtime.InteropServices.InAttribute) Exception, UInt32 FirstChance, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int CreateThread(ulong Handle, ulong DataOffset, ulong StartOffset, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int ExitThread(UInt32 ExitCode, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int CreateProcess(ulong ImageFileHandle, ulong Handle, ulong BaseOffset, UInt32 ModuleSize, string ModuleName, string ImageName, UInt32 CheckSum, UInt32 TimeDateStamp, ulong InitialThreadHandle, ulong ThreadDataOffset, ulong StartOffset, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int ExitProcess(UInt32 ExitCode, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int LoadModule(ulong ImageFileHandle, ulong BaseOffset, UInt32 ModuleSize, string ModuleName, string ImageName, UInt32 CheckSum, UInt32 TimeDateStamp, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int UnloadModule(string ImageBaseName, ulong BaseOffset, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int SystemError(UInt32 Error, UInt32 Level, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int SessionStatus(DEBUG_SESSION Status);
    public abstract virtual int ChangeDebuggeeState(DEBUG_CDS Flags, ulong Argument, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int ChangeEngineState(DEBUG_CES Flags, ulong Argument, DEBUG_EVENT_CONTEXT& modreq(System.Runtime.InteropServices.InAttribute) Context, UInt32 ContextSize);
    public abstract virtual int ChangeSymbolState(DEBUG_CSS Flags, ulong Argument);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9f50e42c-f136-499e-9a97-73036c94ed2d")]
public interface SOS.Hosting.DbgEng.Interop.IDebugInputCallbacks {
    public abstract virtual int StartInput(UInt32 BufferSize);
    public abstract virtual int EndInput();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4bf58045-d654-4c40-b0af-683090f356dc")]
public interface SOS.Hosting.DbgEng.Interop.IDebugOutputCallbacks {
    public abstract virtual int Output(DEBUG_OUTPUT Mask, string Text);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("67721fe9-56d2-4a44-a325-2b65513ce6eb")]
public interface SOS.Hosting.DbgEng.Interop.IDebugOutputCallbacks2 {
    public abstract virtual int Output(DEBUG_OUTPUT Mask, string Text);
    public abstract virtual int GetInterestMask(DEBUG_OUTCBI& Mask);
    public abstract virtual int Output2(DEBUG_OUTCB Which, DEBUG_OUTCBF Flags, ulong Arg, string Text);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4c7fd663-c394-4e26-8ef1-34ad5ed3764c")]
public interface SOS.Hosting.DbgEng.Interop.IDebugOutputCallbacksWide {
    public abstract virtual int Output(DEBUG_OUTPUT Mask, string Text);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("ce289126-9e84-45a7-937e-67bb18691493")]
public interface SOS.Hosting.DbgEng.Interop.IDebugRegisters {
    public abstract virtual int GetNumberRegisters(UInt32& Number);
    public abstract virtual int GetDescription(UInt32 Register, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, DEBUG_REGISTER_DESCRIPTION& Desc);
    public abstract virtual int GetIndexByName(string Name, UInt32& Index);
    public abstract virtual int GetValue(UInt32 Register, DEBUG_VALUE& Value);
    public abstract virtual int SetValue(UInt32 Register, DEBUG_VALUE& modreq(System.Runtime.InteropServices.InAttribute) Value);
    public abstract virtual int GetValues(UInt32 Count, UInt32[] Indices, UInt32 Start, DEBUG_VALUE[] Values);
    public abstract virtual int SetValues(UInt32 Count, UInt32[] Indices, UInt32 Start, DEBUG_VALUE[] Values);
    public abstract virtual int OutputRegisters(DEBUG_OUTCTL OutputControl, DEBUG_REGISTERS Flags);
    public abstract virtual int GetInstructionOffset(UInt64& Offset);
    public abstract virtual int GetStackOffset(UInt64& Offset);
    public abstract virtual int GetFrameOffset(UInt64& Offset);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1656afa9-19c6-4e3a-97e7-5dc9160cf9c4")]
public interface SOS.Hosting.DbgEng.Interop.IDebugRegisters2 {
    public abstract virtual int GetNumberRegisters(UInt32& Number);
    public abstract virtual int GetDescription(UInt32 Register, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, DEBUG_REGISTER_DESCRIPTION& Desc);
    public abstract virtual int GetIndexByName(string Name, UInt32& Index);
    public abstract virtual int GetValue(UInt32 Register, DEBUG_VALUE& Value);
    public abstract virtual int SetValue(UInt32 Register, DEBUG_VALUE& modreq(System.Runtime.InteropServices.InAttribute) Value);
    public abstract virtual int GetValues(UInt32 Count, UInt32[] Indices, UInt32 Start, DEBUG_VALUE[] Values);
    public abstract virtual int SetValues(UInt32 Count, UInt32[] Indices, UInt32 Start, DEBUG_VALUE[] Values);
    public abstract virtual int OutputRegisters(DEBUG_OUTCTL OutputControl, DEBUG_REGISTERS Flags);
    public abstract virtual int GetInstructionOffset(UInt64& Offset);
    public abstract virtual int GetStackOffset(UInt64& Offset);
    public abstract virtual int GetFrameOffset(UInt64& Offset);
    public abstract virtual int GetDescriptionWide(UInt32 Register, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, DEBUG_REGISTER_DESCRIPTION& Desc);
    public abstract virtual int GetIndexByNameWide(string Name, UInt32& Index);
    public abstract virtual int GetNumberPseudoRegisters(UInt32& Number);
    public abstract virtual int GetPseudoDescription(UInt32 Register, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& TypeModule, UInt32& TypeId);
    public abstract virtual int GetPseudoDescriptionWide(UInt32 Register, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& TypeModule, UInt32& TypeId);
    public abstract virtual int GetPseudoIndexByName(string Name, UInt32& Index);
    public abstract virtual int GetPseudoIndexByNameWide(string Name, UInt32& Index);
    public abstract virtual int GetPseudoValues(UInt32 Source, UInt32 Count, UInt32[] Indices, UInt32 Start, DEBUG_VALUE[] Values);
    public abstract virtual int SetPseudoValues(UInt32 Source, UInt32 Count, UInt32[] Indices, UInt32 Start, DEBUG_VALUE[] Values);
    public abstract virtual int GetValues2(DEBUG_REGSRC Source, UInt32 Count, UInt32[] Indices, UInt32 Start, DEBUG_VALUE[] Values);
    public abstract virtual int SetValues2(UInt32 Source, UInt32 Count, UInt32[] Indices, UInt32 Start, DEBUG_VALUE[] Values);
    public abstract virtual int OutputRegisters2(UInt32 OutputControl, UInt32 Source, UInt32 Flags);
    public abstract virtual int GetInstructionOffset2(UInt32 Source, UInt64& Offset);
    public abstract virtual int GetStackOffset2(UInt32 Source, UInt64& Offset);
    public abstract virtual int GetFrameOffset2(UInt32 Source, UInt64& Offset);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("f2528316-0f1a-4431-aeed-11d096e1e2ab")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSymbolGroup {
    public abstract virtual int GetNumberSymbols(UInt32& Number);
    public abstract virtual int AddSymbol(string Name, UInt32& Index);
    public abstract virtual int RemoveSymbolByName(string Name);
    public abstract virtual int RemoveSymbolsByIndex(UInt32 Index);
    public abstract virtual int GetSymbolName(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetSymbolParameters(UInt32 Start, UInt32 Count, DEBUG_SYMBOL_PARAMETERS[] Params);
    public abstract virtual int ExpandSymbol(UInt32 Index, bool Expand);
    public abstract virtual int OutputSymbols(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT_SYMBOLS Flags, UInt32 Start, UInt32 Count);
    public abstract virtual int WriteSymbol(UInt32 Index, string Value);
    public abstract virtual int OutputAsType(UInt32 Index, string Type);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6a7ccc5f-fb5e-4dcc-b41c-6c20307bccc7")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSymbolGroup2 {
    public abstract virtual int GetNumberSymbols(UInt32& Number);
    public abstract virtual int AddSymbol(string Name, UInt32& Index);
    public abstract virtual int RemoveSymbolByName(string Name);
    public abstract virtual int RemoveSymbolsByIndex(UInt32 Index);
    public abstract virtual int GetSymbolName(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetSymbolParameters(UInt32 Start, UInt32 Count, DEBUG_SYMBOL_PARAMETERS[] Params);
    public abstract virtual int ExpandSymbol(UInt32 Index, bool Expand);
    public abstract virtual int OutputSymbols(DEBUG_OUTCTL OutputControl, DEBUG_OUTPUT_SYMBOLS Flags, UInt32 Start, UInt32 Count);
    public abstract virtual int WriteSymbol(UInt32 Index, string Value);
    public abstract virtual int OutputAsType(UInt32 Index, string Type);
    public abstract virtual int AddSymbolWide(string Name, UInt32& Index);
    public abstract virtual int RemoveSymbolByNameWide(string Name);
    public abstract virtual int GetSymbolNameWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int WriteSymbolWide(UInt32 Index, string Value);
    public abstract virtual int OutputAsTypeWide(UInt32 Index, string Type);
    public abstract virtual int GetSymbolTypeName(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetSymbolTypeNameWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetSymbolSize(UInt32 Index, UInt32& Size);
    public abstract virtual int GetSymbolOffset(UInt32 Index, UInt64& Offset);
    public abstract virtual int GetSymbolRegister(UInt32 Index, UInt32& Register);
    public abstract virtual int GetSymbolValueText(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetSymbolValueTextWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetSymbolEntryInformation(UInt32 Index, DEBUG_SYMBOL_ENTRY& Info);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8c31e98c-983a-48a5-9016-6fe5d667a950")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSymbols {
    public abstract virtual int GetSymbolOptions(SYMOPT& Options);
    public abstract virtual int AddSymbolOptions(SYMOPT Options);
    public abstract virtual int RemoveSymbolOptions(SYMOPT Options);
    public abstract virtual int SetSymbolOptions(SYMOPT Options);
    public abstract virtual int GetNameByOffset(ulong Offset, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByName(string Symbol, UInt64& Offset);
    public abstract virtual int GetNearNameByOffset(ulong Offset, int Delta, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByOffset(ulong Offset, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByLine(UInt32 Line, string File, UInt64& Offset);
    public abstract virtual int GetNumberModules(UInt32& Loaded, UInt32& Unloaded);
    public abstract virtual int GetModuleByIndex(UInt32 Index, UInt64& Base);
    public abstract virtual int GetModuleByModuleName(string Name, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByOffset(ulong Offset, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleNames(UInt32 Index, ulong Base, StringBuilder ImageNameBuffer, int ImageNameBufferSize, UInt32& ImageNameSize, StringBuilder ModuleNameBuffer, int ModuleNameBufferSize, UInt32& ModuleNameSize, StringBuilder LoadedImageNameBuffer, int LoadedImageNameBufferSize, UInt32& LoadedImageNameSize);
    public abstract virtual int GetModuleParameters(UInt32 Count, UInt64[] Bases, UInt32 Start, DEBUG_MODULE_PARAMETERS[] Params);
    public abstract virtual int GetSymbolModule(string Symbol, UInt64& Base);
    public abstract virtual int GetTypeName(ulong Module, UInt32 TypeId, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeId(ulong Module, string Name, UInt32& TypeId);
    public abstract virtual int GetTypeSize(ulong Module, UInt32 TypeId, UInt32& Size);
    public abstract virtual int GetFieldOffset(ulong Module, UInt32 TypeId, string Field, UInt32& Offset);
    public abstract virtual int GetSymbolTypeId(string Symbol, UInt32& TypeId, UInt64& Module);
    public abstract virtual int GetOffsetTypeId(ulong Offset, UInt32& TypeId, UInt64& Module);
    public abstract virtual int ReadTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, Byte[] Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataVirtual(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int ReadTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataPhysical(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int GetScope(UInt64& InstructionOffset, DEBUG_STACK_FRAME& ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int SetScope(ulong InstructionOffset, DEBUG_STACK_FRAME& modreq(System.Runtime.InteropServices.InAttribute) ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int ResetScope();
    public abstract virtual int GetScopeSymbolGroup(DEBUG_SCOPE_GROUP Flags, IDebugSymbolGroup Update, IDebugSymbolGroup& Symbols);
    public abstract virtual int CreateSymbolGroup(IDebugSymbolGroup& Group);
    public abstract virtual int StartSymbolMatch(string Pattern, UInt64& Handle);
    public abstract virtual int GetNextSymbolMatch(ulong Handle, StringBuilder Buffer, int BufferSize, UInt32& MatchSize, UInt64& Offset);
    public abstract virtual int EndSymbolMatch(ulong Handle);
    public abstract virtual int Reload(string Module);
    public abstract virtual int GetSymbolPath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetSymbolPath(string Path);
    public abstract virtual int AppendSymbolPath(string Addition);
    public abstract virtual int GetImagePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetImagePath(string Path);
    public abstract virtual int AppendImagePath(string Addition);
    public abstract virtual int GetSourcePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int GetSourcePathElement(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ElementSize);
    public abstract virtual int SetSourcePath(string Path);
    public abstract virtual int AppendSourcePath(string Addition);
    public abstract virtual int FindSourceFile(UInt32 StartElement, string File, DEBUG_FIND_SOURCE Flags, UInt32& FoundElement, StringBuilder Buffer, int BufferSize, UInt32& FoundSize);
    public abstract virtual int GetSourceFileLineOffsets(string File, UInt64[] Buffer, int BufferLines, UInt32& FileLines);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3a707211-afdd-4495-ad4f-56fecdf8163f")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSymbols2 {
    public abstract virtual int GetSymbolOptions(SYMOPT& Options);
    public abstract virtual int AddSymbolOptions(SYMOPT Options);
    public abstract virtual int RemoveSymbolOptions(SYMOPT Options);
    public abstract virtual int SetSymbolOptions(SYMOPT Options);
    public abstract virtual int GetNameByOffset(ulong Offset, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByName(string Symbol, UInt64& Offset);
    public abstract virtual int GetNearNameByOffset(ulong Offset, int Delta, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByOffset(ulong Offset, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByLine(UInt32 Line, string File, UInt64& Offset);
    public abstract virtual int GetNumberModules(UInt32& Loaded, UInt32& Unloaded);
    public abstract virtual int GetModuleByIndex(UInt32 Index, UInt64& Base);
    public abstract virtual int GetModuleByModuleName(string Name, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByOffset(ulong Offset, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleNames(UInt32 Index, ulong Base, StringBuilder ImageNameBuffer, int ImageNameBufferSize, UInt32& ImageNameSize, StringBuilder ModuleNameBuffer, int ModuleNameBufferSize, UInt32& ModuleNameSize, StringBuilder LoadedImageNameBuffer, int LoadedImageNameBufferSize, UInt32& LoadedImageNameSize);
    public abstract virtual int GetModuleParameters(UInt32 Count, UInt64[] Bases, UInt32 Start, DEBUG_MODULE_PARAMETERS[] Params);
    public abstract virtual int GetSymbolModule(string Symbol, UInt64& Base);
    public abstract virtual int GetTypeName(ulong Module, UInt32 TypeId, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeId(ulong Module, string Name, UInt32& TypeId);
    public abstract virtual int GetTypeSize(ulong Module, UInt32 TypeId, UInt32& Size);
    public abstract virtual int GetFieldOffset(ulong Module, UInt32 TypeId, string Field, UInt32& Offset);
    public abstract virtual int GetSymbolTypeId(string Symbol, UInt32& TypeId, UInt64& Module);
    public abstract virtual int GetOffsetTypeId(ulong Offset, UInt32& TypeId, UInt64& Module);
    public abstract virtual int ReadTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, Byte[] Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataVirtual(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int ReadTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataPhysical(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int GetScope(UInt64& InstructionOffset, DEBUG_STACK_FRAME& ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int SetScope(ulong InstructionOffset, DEBUG_STACK_FRAME& modreq(System.Runtime.InteropServices.InAttribute) ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int ResetScope();
    public abstract virtual int GetScopeSymbolGroup(DEBUG_SCOPE_GROUP Flags, IDebugSymbolGroup Update, IDebugSymbolGroup& Symbols);
    public abstract virtual int CreateSymbolGroup(IDebugSymbolGroup& Group);
    public abstract virtual int StartSymbolMatch(string Pattern, UInt64& Handle);
    public abstract virtual int GetNextSymbolMatch(ulong Handle, StringBuilder Buffer, int BufferSize, UInt32& MatchSize, UInt64& Offset);
    public abstract virtual int EndSymbolMatch(ulong Handle);
    public abstract virtual int Reload(string Module);
    public abstract virtual int GetSymbolPath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetSymbolPath(string Path);
    public abstract virtual int AppendSymbolPath(string Addition);
    public abstract virtual int GetImagePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetImagePath(string Path);
    public abstract virtual int AppendImagePath(string Addition);
    public abstract virtual int GetSourcePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int GetSourcePathElement(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ElementSize);
    public abstract virtual int SetSourcePath(string Path);
    public abstract virtual int AppendSourcePath(string Addition);
    public abstract virtual int FindSourceFile(UInt32 StartElement, string File, DEBUG_FIND_SOURCE Flags, UInt32& FoundElement, StringBuilder Buffer, int BufferSize, UInt32& FoundSize);
    public abstract virtual int GetSourceFileLineOffsets(string File, UInt64[] Buffer, int BufferLines, UInt32& FileLines);
    public abstract virtual int GetModuleVersionInformation(UInt32 Index, ulong Base, string Item, Byte[] buffer, UInt32 BufferSize, UInt32& VerInfoSize);
    public abstract virtual int GetModuleNameString(DEBUG_MODNAME Which, UInt32 Index, ulong Base, StringBuilder Buffer, UInt32 BufferSize, UInt32& NameSize);
    public abstract virtual int GetConstantName(ulong Module, UInt32 TypeId, ulong Value, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetFieldName(ulong Module, UInt32 TypeId, UInt32 FieldIndex, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeOptions(DEBUG_TYPEOPTS& Options);
    public abstract virtual int AddTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int RemoveTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int SetTypeOptions(DEBUG_TYPEOPTS Options);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("f02fbecc-50ac-4f36-9ad9-c975e8f32ff8")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSymbols3 {
    public abstract virtual int GetSymbolOptions(SYMOPT& Options);
    public abstract virtual int AddSymbolOptions(SYMOPT Options);
    public abstract virtual int RemoveSymbolOptions(SYMOPT Options);
    public abstract virtual int SetSymbolOptions(SYMOPT Options);
    public abstract virtual int GetNameByOffset(ulong Offset, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByName(string Symbol, UInt64& Offset);
    public abstract virtual int GetNearNameByOffset(ulong Offset, int Delta, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByOffset(ulong Offset, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByLine(UInt32 Line, string File, UInt64& Offset);
    public abstract virtual int GetNumberModules(UInt32& Loaded, UInt32& Unloaded);
    public abstract virtual int GetModuleByIndex(UInt32 Index, UInt64& Base);
    public abstract virtual int GetModuleByModuleName(string Name, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByOffset(ulong Offset, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleNames(UInt32 Index, ulong Base, StringBuilder ImageNameBuffer, int ImageNameBufferSize, UInt32& ImageNameSize, StringBuilder ModuleNameBuffer, int ModuleNameBufferSize, UInt32& ModuleNameSize, StringBuilder LoadedImageNameBuffer, int LoadedImageNameBufferSize, UInt32& LoadedImageNameSize);
    public abstract virtual int GetModuleParameters(UInt32 Count, UInt64[] Bases, UInt32 Start, DEBUG_MODULE_PARAMETERS[] Params);
    public abstract virtual int GetSymbolModule(string Symbol, UInt64& Base);
    public abstract virtual int GetTypeName(ulong Module, UInt32 TypeId, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeId(ulong Module, string Name, UInt32& TypeId);
    public abstract virtual int GetTypeSize(ulong Module, UInt32 TypeId, UInt32& Size);
    public abstract virtual int GetFieldOffset(ulong Module, UInt32 TypeId, string Field, UInt32& Offset);
    public abstract virtual int GetSymbolTypeId(string Symbol, UInt32& TypeId, UInt64& Module);
    public abstract virtual int GetOffsetTypeId(ulong Offset, UInt32& TypeId, UInt64& Module);
    public abstract virtual int ReadTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, Byte[] Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataVirtual(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int ReadTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataPhysical(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int GetScope(UInt64& InstructionOffset, DEBUG_STACK_FRAME& ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int SetScope(ulong InstructionOffset, DEBUG_STACK_FRAME& modreq(System.Runtime.InteropServices.InAttribute) ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int ResetScope();
    public abstract virtual int GetScopeSymbolGroup(DEBUG_SCOPE_GROUP Flags, IDebugSymbolGroup Update, IDebugSymbolGroup& Symbols);
    public abstract virtual int CreateSymbolGroup(IDebugSymbolGroup& Group);
    public abstract virtual int StartSymbolMatch(string Pattern, UInt64& Handle);
    public abstract virtual int GetNextSymbolMatch(ulong Handle, StringBuilder Buffer, int BufferSize, UInt32& MatchSize, UInt64& Offset);
    public abstract virtual int EndSymbolMatch(ulong Handle);
    public abstract virtual int Reload(string Module);
    public abstract virtual int GetSymbolPath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetSymbolPath(string Path);
    public abstract virtual int AppendSymbolPath(string Addition);
    public abstract virtual int GetImagePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetImagePath(string Path);
    public abstract virtual int AppendImagePath(string Addition);
    public abstract virtual int GetSourcePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int GetSourcePathElement(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ElementSize);
    public abstract virtual int SetSourcePath(string Path);
    public abstract virtual int AppendSourcePath(string Addition);
    public abstract virtual int FindSourceFile(UInt32 StartElement, string File, DEBUG_FIND_SOURCE Flags, UInt32& FoundElement, StringBuilder Buffer, int BufferSize, UInt32& FoundSize);
    public abstract virtual int GetSourceFileLineOffsets(string File, UInt64[] Buffer, int BufferLines, UInt32& FileLines);
    public abstract virtual int GetModuleVersionInformation(UInt32 Index, ulong Base, string Item, Byte[] buffer, UInt32 BufferSize, UInt32& VerInfoSize);
    public abstract virtual int GetModuleNameString(DEBUG_MODNAME Which, UInt32 Index, ulong Base, StringBuilder Buffer, UInt32 BufferSize, UInt32& NameSize);
    public abstract virtual int GetConstantName(ulong Module, UInt32 TypeId, ulong Value, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetFieldName(ulong Module, UInt32 TypeId, UInt32 FieldIndex, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeOptions(DEBUG_TYPEOPTS& Options);
    public abstract virtual int AddTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int RemoveTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int SetTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int GetNameByOffsetWide(ulong Offset, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByNameWide(string Symbol, UInt64& Offset);
    public abstract virtual int GetNearNameByOffsetWide(ulong Offset, int Delta, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByOffsetWide(ulong Offset, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByLineWide(UInt32 Line, string File, UInt64& Offset);
    public abstract virtual int GetModuleByModuleNameWide(string Name, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetSymbolModuleWide(string Symbol, UInt64& Base);
    public abstract virtual int GetTypeNameWide(ulong Module, UInt32 TypeId, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeIdWide(ulong Module, string Name, UInt32& TypeId);
    public abstract virtual int GetFieldOffsetWide(ulong Module, UInt32 TypeId, string Field, UInt32& Offset);
    public abstract virtual int GetSymbolTypeIdWide(string Symbol, UInt32& TypeId, UInt64& Module);
    public abstract virtual int GetScopeSymbolGroup2(DEBUG_SCOPE_GROUP Flags, IDebugSymbolGroup2 Update, IDebugSymbolGroup2& Symbols);
    public abstract virtual int CreateSymbolGroup2(IDebugSymbolGroup2& Group);
    public abstract virtual int StartSymbolMatchWide(string Pattern, UInt64& Handle);
    public abstract virtual int GetNextSymbolMatchWide(ulong Handle, StringBuilder Buffer, int BufferSize, UInt32& MatchSize, UInt64& Offset);
    public abstract virtual int ReloadWide(string Module);
    public abstract virtual int GetSymbolPathWide(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetSymbolPathWide(string Path);
    public abstract virtual int AppendSymbolPathWide(string Addition);
    public abstract virtual int GetImagePathWide(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetImagePathWide(string Path);
    public abstract virtual int AppendImagePathWide(string Addition);
    public abstract virtual int GetSourcePathWide(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int GetSourcePathElementWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ElementSize);
    public abstract virtual int SetSourcePathWide(string Path);
    public abstract virtual int AppendSourcePathWide(string Addition);
    public abstract virtual int FindSourceFileWide(UInt32 StartElement, string File, DEBUG_FIND_SOURCE Flags, UInt32& FoundElement, StringBuilder Buffer, int BufferSize, UInt32& FoundSize);
    public abstract virtual int GetSourceFileLineOffsetsWide(string File, UInt64[] Buffer, int BufferLines, UInt32& FileLines);
    public abstract virtual int GetModuleVersionInformationWide(UInt32 Index, ulong Base, string Item, IntPtr Buffer, int BufferSize, UInt32& VerInfoSize);
    public abstract virtual int GetModuleNameStringWide(DEBUG_MODNAME Which, UInt32 Index, ulong Base, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetConstantNameWide(ulong Module, UInt32 TypeId, ulong Value, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetFieldNameWide(ulong Module, UInt32 TypeId, UInt32 FieldIndex, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int IsManagedModule(UInt32 Index, ulong Base);
    public abstract virtual int GetModuleByModuleName2(string Name, UInt32 StartIndex, DEBUG_GETMOD Flags, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByModuleName2Wide(string Name, UInt32 StartIndex, DEBUG_GETMOD Flags, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByOffset2(ulong Offset, UInt32 StartIndex, DEBUG_GETMOD Flags, UInt32& Index, UInt64& Base);
    public abstract virtual int AddSyntheticModule(ulong Base, UInt32 Size, string ImagePath, string ModuleName, DEBUG_ADDSYNTHMOD Flags);
    public abstract virtual int AddSyntheticModuleWide(ulong Base, UInt32 Size, string ImagePath, string ModuleName, DEBUG_ADDSYNTHMOD Flags);
    public abstract virtual int RemoveSyntheticModule(ulong Base);
    public abstract virtual int GetCurrentScopeFrameIndex(UInt32& Index);
    public abstract virtual int SetScopeFrameByIndex(UInt32 Index);
    public abstract virtual int SetScopeFromJitDebugInfo(UInt32 OutputControl, ulong InfoOffset);
    public abstract virtual int SetScopeFromStoredEvent();
    public abstract virtual int OutputSymbolByOffset(UInt32 OutputControl, DEBUG_OUTSYM Flags, ulong Offset);
    public abstract virtual int GetFunctionEntryByOffset(ulong Offset, DEBUG_GETFNENT Flags, IntPtr Buffer, UInt32 BufferSize, UInt32& BufferNeeded);
    public abstract virtual int GetFieldTypeAndOffset(ulong Module, UInt32 ContainerTypeId, string Field, UInt32& FieldTypeId, UInt32& Offset);
    public abstract virtual int GetFieldTypeAndOffsetWide(ulong Module, UInt32 ContainerTypeId, string Field, UInt32& FieldTypeId, UInt32& Offset);
    public abstract virtual int AddSyntheticSymbol(ulong Offset, UInt32 Size, string Name, DEBUG_ADDSYNTHSYM Flags, DEBUG_MODULE_AND_ID& Id);
    public abstract virtual int AddSyntheticSymbolWide(ulong Offset, UInt32 Size, string Name, DEBUG_ADDSYNTHSYM Flags, DEBUG_MODULE_AND_ID& Id);
    public abstract virtual int RemoveSyntheticSymbol(DEBUG_MODULE_AND_ID Id);
    public abstract virtual int GetSymbolEntriesByOffset(ulong Offset, UInt32 Flags, DEBUG_MODULE_AND_ID[] Ids, UInt64[] Displacements, UInt32 IdsCount, UInt32& Entries);
    public abstract virtual int GetSymbolEntriesByName(string Symbol, UInt32 Flags, DEBUG_MODULE_AND_ID[] Ids, UInt32 IdsCount, UInt32& Entries);
    public abstract virtual int GetSymbolEntriesByNameWide(string Symbol, UInt32 Flags, DEBUG_MODULE_AND_ID[] Ids, UInt32 IdsCount, UInt32& Entries);
    public abstract virtual int GetSymbolEntryByToken(ulong ModuleBase, UInt32 Token, DEBUG_MODULE_AND_ID& Id);
    public abstract virtual int GetSymbolEntryInformation(DEBUG_MODULE_AND_ID Id, DEBUG_SYMBOL_ENTRY& Info);
    public abstract virtual int GetSymbolEntryString(DEBUG_MODULE_AND_ID Id, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSymbolEntryStringWide(DEBUG_MODULE_AND_ID Id, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSymbolEntryOffsetRegions(DEBUG_MODULE_AND_ID Id, UInt32 Flags, DEBUG_OFFSET_REGION[] Regions, UInt32 RegionsCount, UInt32& RegionsAvail);
    [ObsoleteAttribute("Do not use: no longer implemented.", "True")]
public abstract virtual int GetSymbolEntryBySymbolEntry(DEBUG_MODULE_AND_ID FromId, UInt32 Flags, DEBUG_MODULE_AND_ID& ToId);
    public abstract virtual int GetSourceEntriesByOffset(ulong Offset, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY[] Entries, UInt32 EntriesCount, UInt32& EntriesAvail);
    public abstract virtual int GetSourceEntriesByLine(UInt32 Line, string File, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY[] Entries, UInt32 EntriesCount, UInt32& EntriesAvail);
    public abstract virtual int GetSourceEntriesByLineWide(UInt32 Line, string File, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY[] Entries, UInt32 EntriesCount, UInt32& EntriesAvail);
    public abstract virtual int GetSourceEntryString(DEBUG_SYMBOL_SOURCE_ENTRY Entry, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSourceEntryStringWide(DEBUG_SYMBOL_SOURCE_ENTRY Entry, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSourceEntryOffsetRegions(DEBUG_SYMBOL_SOURCE_ENTRY Entry, UInt32 Flags, DEBUG_OFFSET_REGION[] Regions, UInt32 RegionsCount, UInt32& RegionsAvail);
    public abstract virtual int GetSourceEntryBySourceEntry(DEBUG_SYMBOL_SOURCE_ENTRY FromEntry, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY& ToEntry);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("e391bbd8-9d8c-4418-840b-c006592a1752")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSymbols4 {
    public abstract virtual int GetSymbolOptions(SYMOPT& Options);
    public abstract virtual int AddSymbolOptions(SYMOPT Options);
    public abstract virtual int RemoveSymbolOptions(SYMOPT Options);
    public abstract virtual int SetSymbolOptions(SYMOPT Options);
    public abstract virtual int GetNameByOffset(ulong Offset, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByName(string Symbol, UInt64& Offset);
    public abstract virtual int GetNearNameByOffset(ulong Offset, int Delta, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByOffset(ulong Offset, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByLine(UInt32 Line, string File, UInt64& Offset);
    public abstract virtual int GetNumberModules(UInt32& Loaded, UInt32& Unloaded);
    public abstract virtual int GetModuleByIndex(UInt32 Index, UInt64& Base);
    public abstract virtual int GetModuleByModuleName(string Name, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByOffset(ulong Offset, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleNames(UInt32 Index, ulong Base, StringBuilder ImageNameBuffer, int ImageNameBufferSize, UInt32& ImageNameSize, StringBuilder ModuleNameBuffer, int ModuleNameBufferSize, UInt32& ModuleNameSize, StringBuilder LoadedImageNameBuffer, int LoadedImageNameBufferSize, UInt32& LoadedImageNameSize);
    public abstract virtual int GetModuleParameters(UInt32 Count, UInt64[] Bases, UInt32 Start, DEBUG_MODULE_PARAMETERS[] Params);
    public abstract virtual int GetSymbolModule(string Symbol, UInt64& Base);
    public abstract virtual int GetTypeName(ulong Module, UInt32 TypeId, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeId(ulong Module, string Name, UInt32& TypeId);
    public abstract virtual int GetTypeSize(ulong Module, UInt32 TypeId, UInt32& Size);
    public abstract virtual int GetFieldOffset(ulong Module, UInt32 TypeId, string Field, UInt32& Offset);
    public abstract virtual int GetSymbolTypeId(string Symbol, UInt32& TypeId, UInt64& Module);
    public abstract virtual int GetOffsetTypeId(ulong Offset, UInt32& TypeId, UInt64& Module);
    public abstract virtual int ReadTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, Byte[] Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataVirtual(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int ReadTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataPhysical(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int GetScope(UInt64& InstructionOffset, DEBUG_STACK_FRAME& ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int SetScope(ulong InstructionOffset, DEBUG_STACK_FRAME& modreq(System.Runtime.InteropServices.InAttribute) ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int ResetScope();
    public abstract virtual int GetScopeSymbolGroup(DEBUG_SCOPE_GROUP Flags, IDebugSymbolGroup Update, IDebugSymbolGroup& Symbols);
    public abstract virtual int CreateSymbolGroup(IDebugSymbolGroup& Group);
    public abstract virtual int StartSymbolMatch(string Pattern, UInt64& Handle);
    public abstract virtual int GetNextSymbolMatch(ulong Handle, StringBuilder Buffer, int BufferSize, UInt32& MatchSize, UInt64& Offset);
    public abstract virtual int EndSymbolMatch(ulong Handle);
    public abstract virtual int Reload(string Module);
    public abstract virtual int GetSymbolPath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetSymbolPath(string Path);
    public abstract virtual int AppendSymbolPath(string Addition);
    public abstract virtual int GetImagePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetImagePath(string Path);
    public abstract virtual int AppendImagePath(string Addition);
    public abstract virtual int GetSourcePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int GetSourcePathElement(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ElementSize);
    public abstract virtual int SetSourcePath(string Path);
    public abstract virtual int AppendSourcePath(string Addition);
    public abstract virtual int FindSourceFile(UInt32 StartElement, string File, DEBUG_FIND_SOURCE Flags, UInt32& FoundElement, StringBuilder Buffer, int BufferSize, UInt32& FoundSize);
    public abstract virtual int GetSourceFileLineOffsets(string File, UInt64[] Buffer, int BufferLines, UInt32& FileLines);
    public abstract virtual int GetModuleVersionInformation(UInt32 Index, ulong Base, string Item, Byte[] buffer, UInt32 BufferSize, UInt32& VerInfoSize);
    public abstract virtual int GetModuleNameString(DEBUG_MODNAME Which, UInt32 Index, ulong Base, StringBuilder Buffer, UInt32 BufferSize, UInt32& NameSize);
    public abstract virtual int GetConstantName(ulong Module, UInt32 TypeId, ulong Value, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetFieldName(ulong Module, UInt32 TypeId, UInt32 FieldIndex, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeOptions(DEBUG_TYPEOPTS& Options);
    public abstract virtual int AddTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int RemoveTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int SetTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int GetNameByOffsetWide(ulong Offset, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByNameWide(string Symbol, UInt64& Offset);
    public abstract virtual int GetNearNameByOffsetWide(ulong Offset, int Delta, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByOffsetWide(ulong Offset, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByLineWide(UInt32 Line, string File, UInt64& Offset);
    public abstract virtual int GetModuleByModuleNameWide(string Name, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetSymbolModuleWide(string Symbol, UInt64& Base);
    public abstract virtual int GetTypeNameWide(ulong Module, UInt32 TypeId, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeIdWide(ulong Module, string Name, UInt32& TypeId);
    public abstract virtual int GetFieldOffsetWide(ulong Module, UInt32 TypeId, string Field, UInt32& Offset);
    public abstract virtual int GetSymbolTypeIdWide(string Symbol, UInt32& TypeId, UInt64& Module);
    public abstract virtual int GetScopeSymbolGroup2(DEBUG_SCOPE_GROUP Flags, IDebugSymbolGroup2 Update, IDebugSymbolGroup2& Symbols);
    public abstract virtual int CreateSymbolGroup2(IDebugSymbolGroup2& Group);
    public abstract virtual int StartSymbolMatchWide(string Pattern, UInt64& Handle);
    public abstract virtual int GetNextSymbolMatchWide(ulong Handle, StringBuilder Buffer, int BufferSize, UInt32& MatchSize, UInt64& Offset);
    public abstract virtual int ReloadWide(string Module);
    public abstract virtual int GetSymbolPathWide(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetSymbolPathWide(string Path);
    public abstract virtual int AppendSymbolPathWide(string Addition);
    public abstract virtual int GetImagePathWide(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetImagePathWide(string Path);
    public abstract virtual int AppendImagePathWide(string Addition);
    public abstract virtual int GetSourcePathWide(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int GetSourcePathElementWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ElementSize);
    public abstract virtual int SetSourcePathWide(string Path);
    public abstract virtual int AppendSourcePathWide(string Addition);
    public abstract virtual int FindSourceFileWide(UInt32 StartElement, string File, DEBUG_FIND_SOURCE Flags, UInt32& FoundElement, StringBuilder Buffer, int BufferSize, UInt32& FoundSize);
    public abstract virtual int GetSourceFileLineOffsetsWide(string File, UInt64[] Buffer, int BufferLines, UInt32& FileLines);
    public abstract virtual int GetModuleVersionInformationWide(UInt32 Index, ulong Base, string Item, IntPtr Buffer, int BufferSize, UInt32& VerInfoSize);
    public abstract virtual int GetModuleNameStringWide(DEBUG_MODNAME Which, UInt32 Index, ulong Base, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetConstantNameWide(ulong Module, UInt32 TypeId, ulong Value, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetFieldNameWide(ulong Module, UInt32 TypeId, UInt32 FieldIndex, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int IsManagedModule(UInt32 Index, ulong Base);
    public abstract virtual int GetModuleByModuleName2(string Name, UInt32 StartIndex, DEBUG_GETMOD Flags, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByModuleName2Wide(string Name, UInt32 StartIndex, DEBUG_GETMOD Flags, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByOffset2(ulong Offset, UInt32 StartIndex, DEBUG_GETMOD Flags, UInt32& Index, UInt64& Base);
    public abstract virtual int AddSyntheticModule(ulong Base, UInt32 Size, string ImagePath, string ModuleName, DEBUG_ADDSYNTHMOD Flags);
    public abstract virtual int AddSyntheticModuleWide(ulong Base, UInt32 Size, string ImagePath, string ModuleName, DEBUG_ADDSYNTHMOD Flags);
    public abstract virtual int RemoveSyntheticModule(ulong Base);
    public abstract virtual int GetCurrentScopeFrameIndex(UInt32& Index);
    public abstract virtual int SetScopeFrameByIndex(UInt32 Index);
    public abstract virtual int SetScopeFromJitDebugInfo(UInt32 OutputControl, ulong InfoOffset);
    public abstract virtual int SetScopeFromStoredEvent();
    public abstract virtual int OutputSymbolByOffset(UInt32 OutputControl, DEBUG_OUTSYM Flags, ulong Offset);
    public abstract virtual int GetFunctionEntryByOffset(ulong Offset, DEBUG_GETFNENT Flags, IntPtr Buffer, UInt32 BufferSize, UInt32& BufferNeeded);
    public abstract virtual int GetFieldTypeAndOffset(ulong Module, UInt32 ContainerTypeId, string Field, UInt32& FieldTypeId, UInt32& Offset);
    public abstract virtual int GetFieldTypeAndOffsetWide(ulong Module, UInt32 ContainerTypeId, string Field, UInt32& FieldTypeId, UInt32& Offset);
    public abstract virtual int AddSyntheticSymbol(ulong Offset, UInt32 Size, string Name, DEBUG_ADDSYNTHSYM Flags, DEBUG_MODULE_AND_ID& Id);
    public abstract virtual int AddSyntheticSymbolWide(ulong Offset, UInt32 Size, string Name, DEBUG_ADDSYNTHSYM Flags, DEBUG_MODULE_AND_ID& Id);
    public abstract virtual int RemoveSyntheticSymbol(DEBUG_MODULE_AND_ID Id);
    public abstract virtual int GetSymbolEntriesByOffset(ulong Offset, UInt32 Flags, DEBUG_MODULE_AND_ID[] Ids, UInt64[] Displacements, UInt32 IdsCount, UInt32& Entries);
    public abstract virtual int GetSymbolEntriesByName(string Symbol, UInt32 Flags, DEBUG_MODULE_AND_ID[] Ids, UInt32 IdsCount, UInt32& Entries);
    public abstract virtual int GetSymbolEntriesByNameWide(string Symbol, UInt32 Flags, DEBUG_MODULE_AND_ID[] Ids, UInt32 IdsCount, UInt32& Entries);
    public abstract virtual int GetSymbolEntryByToken(ulong ModuleBase, UInt32 Token, DEBUG_MODULE_AND_ID& Id);
    public abstract virtual int GetSymbolEntryInformation(DEBUG_MODULE_AND_ID Id, DEBUG_SYMBOL_ENTRY& Info);
    public abstract virtual int GetSymbolEntryString(DEBUG_MODULE_AND_ID Id, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSymbolEntryStringWide(DEBUG_MODULE_AND_ID Id, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSymbolEntryOffsetRegions(DEBUG_MODULE_AND_ID Id, UInt32 Flags, DEBUG_OFFSET_REGION[] Regions, UInt32 RegionsCount, UInt32& RegionsAvail);
    [ObsoleteAttribute("Do not use: no longer implemented.", "True")]
public abstract virtual int GetSymbolEntryBySymbolEntry(DEBUG_MODULE_AND_ID FromId, UInt32 Flags, DEBUG_MODULE_AND_ID& ToId);
    public abstract virtual int GetSourceEntriesByOffset(ulong Offset, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY[] Entries, UInt32 EntriesCount, UInt32& EntriesAvail);
    public abstract virtual int GetSourceEntriesByLine(UInt32 Line, string File, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY[] Entries, UInt32 EntriesCount, UInt32& EntriesAvail);
    public abstract virtual int GetSourceEntriesByLineWide(UInt32 Line, string File, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY[] Entries, UInt32 EntriesCount, UInt32& EntriesAvail);
    public abstract virtual int GetSourceEntryString(DEBUG_SYMBOL_SOURCE_ENTRY Entry, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSourceEntryStringWide(DEBUG_SYMBOL_SOURCE_ENTRY Entry, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSourceEntryOffsetRegions(DEBUG_SYMBOL_SOURCE_ENTRY Entry, UInt32 Flags, DEBUG_OFFSET_REGION[] Regions, UInt32 RegionsCount, UInt32& RegionsAvail);
    public abstract virtual int GetSourceEntryBySourceEntry(DEBUG_SYMBOL_SOURCE_ENTRY FromEntry, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY& ToEntry);
    public abstract virtual int GetScopeEx(UInt64& InstructionOffset, DEBUG_STACK_FRAME_EX& ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int SetScopeEx(ulong InstructionOffset, DEBUG_STACK_FRAME_EX ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int GetNameByInlineContext(ulong Offset, UInt32 InlineContext, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetNameByInlineContextWide(ulong Offset, UInt32 InlineContext, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByInlineContext(ulong Offset, UInt32 InlineContext, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetLineByInlineContextWide(ulong Offset, UInt32 InlineContext, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int OutputSymbolByInlineContext(UInt32 OutputControl, UInt32 Flags, ulong Offset, UInt32 InlineContext);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("c65fa83e-1e69-475e-8e0e-b5d79e9cc17e")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSymbols5 {
    public abstract virtual int GetSymbolOptions(SYMOPT& Options);
    public abstract virtual int AddSymbolOptions(SYMOPT Options);
    public abstract virtual int RemoveSymbolOptions(SYMOPT Options);
    public abstract virtual int SetSymbolOptions(SYMOPT Options);
    public abstract virtual int GetNameByOffset(ulong Offset, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByName(string Symbol, UInt64& Offset);
    public abstract virtual int GetNearNameByOffset(ulong Offset, int Delta, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByOffset(ulong Offset, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByLine(UInt32 Line, string File, UInt64& Offset);
    public abstract virtual int GetNumberModules(UInt32& Loaded, UInt32& Unloaded);
    public abstract virtual int GetModuleByIndex(UInt32 Index, UInt64& Base);
    public abstract virtual int GetModuleByModuleName(string Name, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByOffset(ulong Offset, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleNames(UInt32 Index, ulong Base, StringBuilder ImageNameBuffer, int ImageNameBufferSize, UInt32& ImageNameSize, StringBuilder ModuleNameBuffer, int ModuleNameBufferSize, UInt32& ModuleNameSize, StringBuilder LoadedImageNameBuffer, int LoadedImageNameBufferSize, UInt32& LoadedImageNameSize);
    public abstract virtual int GetModuleParameters(UInt32 Count, UInt64[] Bases, UInt32 Start, DEBUG_MODULE_PARAMETERS[] Params);
    public abstract virtual int GetSymbolModule(string Symbol, UInt64& Base);
    public abstract virtual int GetTypeName(ulong Module, UInt32 TypeId, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeId(ulong Module, string Name, UInt32& TypeId);
    public abstract virtual int GetTypeSize(ulong Module, UInt32 TypeId, UInt32& Size);
    public abstract virtual int GetFieldOffset(ulong Module, UInt32 TypeId, string Field, UInt32& Offset);
    public abstract virtual int GetSymbolTypeId(string Symbol, UInt32& TypeId, UInt64& Module);
    public abstract virtual int GetOffsetTypeId(ulong Offset, UInt32& TypeId, UInt64& Module);
    public abstract virtual int ReadTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, Byte[] Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataVirtual(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataVirtual(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int ReadTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesRead);
    public abstract virtual int WriteTypedDataPhysical(ulong Offset, ulong Module, UInt32 TypeId, IntPtr Buffer, UInt32 BufferSize, UInt32& BytesWritten);
    public abstract virtual int OutputTypedDataPhysical(DEBUG_OUTCTL OutputControl, ulong Offset, ulong Module, UInt32 TypeId, DEBUG_TYPEOPTS Flags);
    public abstract virtual int GetScope(UInt64& InstructionOffset, DEBUG_STACK_FRAME& ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int SetScope(ulong InstructionOffset, DEBUG_STACK_FRAME& modreq(System.Runtime.InteropServices.InAttribute) ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int ResetScope();
    public abstract virtual int GetScopeSymbolGroup(DEBUG_SCOPE_GROUP Flags, IDebugSymbolGroup Update, IDebugSymbolGroup& Symbols);
    public abstract virtual int CreateSymbolGroup(IDebugSymbolGroup& Group);
    public abstract virtual int StartSymbolMatch(string Pattern, UInt64& Handle);
    public abstract virtual int GetNextSymbolMatch(ulong Handle, StringBuilder Buffer, int BufferSize, UInt32& MatchSize, UInt64& Offset);
    public abstract virtual int EndSymbolMatch(ulong Handle);
    public abstract virtual int Reload(string Module);
    public abstract virtual int GetSymbolPath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetSymbolPath(string Path);
    public abstract virtual int AppendSymbolPath(string Addition);
    public abstract virtual int GetImagePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetImagePath(string Path);
    public abstract virtual int AppendImagePath(string Addition);
    public abstract virtual int GetSourcePath(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int GetSourcePathElement(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ElementSize);
    public abstract virtual int SetSourcePath(string Path);
    public abstract virtual int AppendSourcePath(string Addition);
    public abstract virtual int FindSourceFile(UInt32 StartElement, string File, DEBUG_FIND_SOURCE Flags, UInt32& FoundElement, StringBuilder Buffer, int BufferSize, UInt32& FoundSize);
    public abstract virtual int GetSourceFileLineOffsets(string File, UInt64[] Buffer, int BufferLines, UInt32& FileLines);
    public abstract virtual int GetModuleVersionInformation(UInt32 Index, ulong Base, string Item, Byte[] buffer, UInt32 BufferSize, UInt32& VerInfoSize);
    public abstract virtual int GetModuleNameString(DEBUG_MODNAME Which, UInt32 Index, ulong Base, StringBuilder Buffer, UInt32 BufferSize, UInt32& NameSize);
    public abstract virtual int GetConstantName(ulong Module, UInt32 TypeId, ulong Value, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetFieldName(ulong Module, UInt32 TypeId, UInt32 FieldIndex, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeOptions(DEBUG_TYPEOPTS& Options);
    public abstract virtual int AddTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int RemoveTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int SetTypeOptions(DEBUG_TYPEOPTS Options);
    public abstract virtual int GetNameByOffsetWide(ulong Offset, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByNameWide(string Symbol, UInt64& Offset);
    public abstract virtual int GetNearNameByOffsetWide(ulong Offset, int Delta, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByOffsetWide(ulong Offset, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetOffsetByLineWide(UInt32 Line, string File, UInt64& Offset);
    public abstract virtual int GetModuleByModuleNameWide(string Name, UInt32 StartIndex, UInt32& Index, UInt64& Base);
    public abstract virtual int GetSymbolModuleWide(string Symbol, UInt64& Base);
    public abstract virtual int GetTypeNameWide(ulong Module, UInt32 TypeId, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize);
    public abstract virtual int GetTypeIdWide(ulong Module, string Name, UInt32& TypeId);
    public abstract virtual int GetFieldOffsetWide(ulong Module, UInt32 TypeId, string Field, UInt32& Offset);
    public abstract virtual int GetSymbolTypeIdWide(string Symbol, UInt32& TypeId, UInt64& Module);
    public abstract virtual int GetScopeSymbolGroup2(DEBUG_SCOPE_GROUP Flags, IDebugSymbolGroup2 Update, IDebugSymbolGroup2& Symbols);
    public abstract virtual int CreateSymbolGroup2(IDebugSymbolGroup2& Group);
    public abstract virtual int StartSymbolMatchWide(string Pattern, UInt64& Handle);
    public abstract virtual int GetNextSymbolMatchWide(ulong Handle, StringBuilder Buffer, int BufferSize, UInt32& MatchSize, UInt64& Offset);
    public abstract virtual int ReloadWide(string Module);
    public abstract virtual int GetSymbolPathWide(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetSymbolPathWide(string Path);
    public abstract virtual int AppendSymbolPathWide(string Addition);
    public abstract virtual int GetImagePathWide(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int SetImagePathWide(string Path);
    public abstract virtual int AppendImagePathWide(string Addition);
    public abstract virtual int GetSourcePathWide(StringBuilder Buffer, int BufferSize, UInt32& PathSize);
    public abstract virtual int GetSourcePathElementWide(UInt32 Index, StringBuilder Buffer, int BufferSize, UInt32& ElementSize);
    public abstract virtual int SetSourcePathWide(string Path);
    public abstract virtual int AppendSourcePathWide(string Addition);
    public abstract virtual int FindSourceFileWide(UInt32 StartElement, string File, DEBUG_FIND_SOURCE Flags, UInt32& FoundElement, StringBuilder Buffer, int BufferSize, UInt32& FoundSize);
    public abstract virtual int GetSourceFileLineOffsetsWide(string File, UInt64[] Buffer, int BufferLines, UInt32& FileLines);
    public abstract virtual int GetModuleVersionInformationWide(UInt32 Index, ulong Base, string Item, IntPtr Buffer, int BufferSize, UInt32& VerInfoSize);
    public abstract virtual int GetModuleNameStringWide(DEBUG_MODNAME Which, UInt32 Index, ulong Base, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetConstantNameWide(ulong Module, UInt32 TypeId, ulong Value, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int GetFieldNameWide(ulong Module, UInt32 TypeId, UInt32 FieldIndex, StringBuilder Buffer, int BufferSize, UInt32& NameSize);
    public abstract virtual int IsManagedModule(UInt32 Index, ulong Base);
    public abstract virtual int GetModuleByModuleName2(string Name, UInt32 StartIndex, DEBUG_GETMOD Flags, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByModuleName2Wide(string Name, UInt32 StartIndex, DEBUG_GETMOD Flags, UInt32& Index, UInt64& Base);
    public abstract virtual int GetModuleByOffset2(ulong Offset, UInt32 StartIndex, DEBUG_GETMOD Flags, UInt32& Index, UInt64& Base);
    public abstract virtual int AddSyntheticModule(ulong Base, UInt32 Size, string ImagePath, string ModuleName, DEBUG_ADDSYNTHMOD Flags);
    public abstract virtual int AddSyntheticModuleWide(ulong Base, UInt32 Size, string ImagePath, string ModuleName, DEBUG_ADDSYNTHMOD Flags);
    public abstract virtual int RemoveSyntheticModule(ulong Base);
    public abstract virtual int GetCurrentScopeFrameIndex(UInt32& Index);
    public abstract virtual int SetScopeFrameByIndex(UInt32 Index);
    public abstract virtual int SetScopeFromJitDebugInfo(UInt32 OutputControl, ulong InfoOffset);
    public abstract virtual int SetScopeFromStoredEvent();
    public abstract virtual int OutputSymbolByOffset(UInt32 OutputControl, DEBUG_OUTSYM Flags, ulong Offset);
    public abstract virtual int GetFunctionEntryByOffset(ulong Offset, DEBUG_GETFNENT Flags, IntPtr Buffer, UInt32 BufferSize, UInt32& BufferNeeded);
    public abstract virtual int GetFieldTypeAndOffset(ulong Module, UInt32 ContainerTypeId, string Field, UInt32& FieldTypeId, UInt32& Offset);
    public abstract virtual int GetFieldTypeAndOffsetWide(ulong Module, UInt32 ContainerTypeId, string Field, UInt32& FieldTypeId, UInt32& Offset);
    public abstract virtual int AddSyntheticSymbol(ulong Offset, UInt32 Size, string Name, DEBUG_ADDSYNTHSYM Flags, DEBUG_MODULE_AND_ID& Id);
    public abstract virtual int AddSyntheticSymbolWide(ulong Offset, UInt32 Size, string Name, DEBUG_ADDSYNTHSYM Flags, DEBUG_MODULE_AND_ID& Id);
    public abstract virtual int RemoveSyntheticSymbol(DEBUG_MODULE_AND_ID Id);
    public abstract virtual int GetSymbolEntriesByOffset(ulong Offset, UInt32 Flags, DEBUG_MODULE_AND_ID[] Ids, UInt64[] Displacements, UInt32 IdsCount, UInt32& Entries);
    public abstract virtual int GetSymbolEntriesByName(string Symbol, UInt32 Flags, DEBUG_MODULE_AND_ID[] Ids, UInt32 IdsCount, UInt32& Entries);
    public abstract virtual int GetSymbolEntriesByNameWide(string Symbol, UInt32 Flags, DEBUG_MODULE_AND_ID[] Ids, UInt32 IdsCount, UInt32& Entries);
    public abstract virtual int GetSymbolEntryByToken(ulong ModuleBase, UInt32 Token, DEBUG_MODULE_AND_ID& Id);
    public abstract virtual int GetSymbolEntryInformation(DEBUG_MODULE_AND_ID Id, DEBUG_SYMBOL_ENTRY& Info);
    public abstract virtual int GetSymbolEntryString(DEBUG_MODULE_AND_ID Id, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSymbolEntryStringWide(DEBUG_MODULE_AND_ID Id, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSymbolEntryOffsetRegions(DEBUG_MODULE_AND_ID Id, UInt32 Flags, DEBUG_OFFSET_REGION[] Regions, UInt32 RegionsCount, UInt32& RegionsAvail);
    [ObsoleteAttribute("Do not use: no longer implemented.", "True")]
public abstract virtual int GetSymbolEntryBySymbolEntry(DEBUG_MODULE_AND_ID FromId, UInt32 Flags, DEBUG_MODULE_AND_ID& ToId);
    public abstract virtual int GetSourceEntriesByOffset(ulong Offset, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY[] Entries, UInt32 EntriesCount, UInt32& EntriesAvail);
    public abstract virtual int GetSourceEntriesByLine(UInt32 Line, string File, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY[] Entries, UInt32 EntriesCount, UInt32& EntriesAvail);
    public abstract virtual int GetSourceEntriesByLineWide(UInt32 Line, string File, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY[] Entries, UInt32 EntriesCount, UInt32& EntriesAvail);
    public abstract virtual int GetSourceEntryString(DEBUG_SYMBOL_SOURCE_ENTRY Entry, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSourceEntryStringWide(DEBUG_SYMBOL_SOURCE_ENTRY Entry, UInt32 Which, StringBuilder Buffer, int BufferSize, UInt32& StringSize);
    public abstract virtual int GetSourceEntryOffsetRegions(DEBUG_SYMBOL_SOURCE_ENTRY Entry, UInt32 Flags, DEBUG_OFFSET_REGION[] Regions, UInt32 RegionsCount, UInt32& RegionsAvail);
    public abstract virtual int GetSourceEntryBySourceEntry(DEBUG_SYMBOL_SOURCE_ENTRY FromEntry, UInt32 Flags, DEBUG_SYMBOL_SOURCE_ENTRY& ToEntry);
    public abstract virtual int GetScopeEx(UInt64& InstructionOffset, DEBUG_STACK_FRAME_EX& ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int SetScopeEx(ulong InstructionOffset, DEBUG_STACK_FRAME_EX ScopeFrame, IntPtr ScopeContext, UInt32 ScopeContextSize);
    public abstract virtual int GetNameByInlineContext(ulong Offset, UInt32 InlineContext, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetNameByInlineContextWide(ulong Offset, UInt32 InlineContext, StringBuilder NameBuffer, int NameBufferSize, UInt32& NameSize, UInt64& Displacement);
    public abstract virtual int GetLineByInlineContext(ulong Offset, UInt32 InlineContext, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int GetLineByInlineContextWide(ulong Offset, UInt32 InlineContext, UInt32& Line, StringBuilder FileBuffer, int FileBufferSize, UInt32& FileSize, UInt64& Displacement);
    public abstract virtual int OutputSymbolByInlineContext(UInt32 OutputControl, UInt32 Flags, ulong Offset, UInt32 InlineContext);
    public abstract virtual int GetCurrentScopeFrameIndexEx(DEBUG_FRAME Flags, UInt32& Index);
    public abstract virtual int SetScopeFrameByIndexEx(DEBUG_FRAME Flags, UInt32 Index);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6b86fe2c-2c4f-4f0c-9da2-174311acc327")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSystemObjects {
    public abstract virtual int GetEventThread(UInt32& Id);
    public abstract virtual int GetEventProcess(UInt32& Id);
    public abstract virtual int GetCurrentThreadId(UInt32& Id);
    public abstract virtual int SetCurrentThreadId(UInt32 Id);
    public abstract virtual int GetCurrentProcessId(UInt32& Id);
    public abstract virtual int SetCurrentProcessId(UInt32 Id);
    public abstract virtual int GetNumberThreads(UInt32& Number);
    public abstract virtual int GetTotalNumberThreads(UInt32& Total, UInt32& LargestProcess);
    public abstract virtual int GetThreadIdsByIndex(UInt32 Start, UInt32 Count, UInt32[] Ids, UInt32[] SysIds);
    public abstract virtual int GetThreadIdByProcessor(UInt32 Processor, UInt32& Id);
    public abstract virtual int GetCurrentThreadDataOffset(UInt64& Offset);
    public abstract virtual int GetThreadIdByDataOffset(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentThreadTeb(UInt64& Offset);
    public abstract virtual int GetThreadIdByTeb(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentThreadSystemId(UInt32& SysId);
    public abstract virtual int GetThreadIdBySystemId(UInt32 SysId, UInt32& Id);
    public abstract virtual int GetCurrentThreadHandle(UInt64& Handle);
    public abstract virtual int GetThreadIdByHandle(ulong Handle, UInt32& Id);
    public abstract virtual int GetNumberProcesses(UInt32& Number);
    public abstract virtual int GetProcessIdsByIndex(UInt32 Start, UInt32 Count, UInt32[] Ids, UInt32[] SysIds);
    public abstract virtual int GetCurrentProcessDataOffset(UInt64& Offset);
    public abstract virtual int GetProcessIdByDataOffset(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentProcessPeb(UInt64& Offset);
    public abstract virtual int GetProcessIdByPeb(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentProcessSystemId(UInt32& SysId);
    public abstract virtual int GetProcessIdBySystemId(UInt32 SysId, UInt32& Id);
    public abstract virtual int GetCurrentProcessHandle(UInt64& Handle);
    public abstract virtual int GetProcessIdByHandle(ulong Handle, UInt32& Id);
    public abstract virtual int GetCurrentProcessExecutableName(StringBuilder Buffer, int BufferSize, UInt32& ExeSize);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0ae9f5ff-1852-4679-b055-494bee6407ee")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSystemObjects2 {
    public abstract virtual int GetEventThread(UInt32& Id);
    public abstract virtual int GetEventProcess(UInt32& Id);
    public abstract virtual int GetCurrentThreadId(UInt32& Id);
    public abstract virtual int SetCurrentThreadId(UInt32 Id);
    public abstract virtual int GetCurrentProcessId(UInt32& Id);
    public abstract virtual int SetCurrentProcessId(UInt32 Id);
    public abstract virtual int GetNumberThreads(UInt32& Number);
    public abstract virtual int GetTotalNumberThreads(UInt32& Total, UInt32& LargestProcess);
    public abstract virtual int GetThreadIdsByIndex(UInt32 Start, UInt32 Count, UInt32[] Ids, UInt32[] SysIds);
    public abstract virtual int GetThreadIdByProcessor(UInt32 Processor, UInt32& Id);
    public abstract virtual int GetCurrentThreadDataOffset(UInt64& Offset);
    public abstract virtual int GetThreadIdByDataOffset(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentThreadTeb(UInt64& Offset);
    public abstract virtual int GetThreadIdByTeb(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentThreadSystemId(UInt32& SysId);
    public abstract virtual int GetThreadIdBySystemId(UInt32 SysId, UInt32& Id);
    public abstract virtual int GetCurrentThreadHandle(UInt64& Handle);
    public abstract virtual int GetThreadIdByHandle(ulong Handle, UInt32& Id);
    public abstract virtual int GetNumberProcesses(UInt32& Number);
    public abstract virtual int GetProcessIdsByIndex(UInt32 Start, UInt32 Count, UInt32[] Ids, UInt32[] SysIds);
    public abstract virtual int GetCurrentProcessDataOffset(UInt64& Offset);
    public abstract virtual int GetProcessIdByDataOffset(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentProcessPeb(UInt64& Offset);
    public abstract virtual int GetProcessIdByPeb(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentProcessSystemId(UInt32& SysId);
    public abstract virtual int GetProcessIdBySystemId(UInt32 SysId, UInt32& Id);
    public abstract virtual int GetCurrentProcessHandle(UInt64& Handle);
    public abstract virtual int GetProcessIdByHandle(ulong Handle, UInt32& Id);
    public abstract virtual int GetCurrentProcessExecutableName(StringBuilder Buffer, int BufferSize, UInt32& ExeSize);
    public abstract virtual int GetCurrentProcessUpTime(UInt32& UpTime);
    public abstract virtual int GetImplicitThreadDataOffset(UInt64& Offset);
    public abstract virtual int SetImplicitThreadDataOffset(ulong Offset);
    public abstract virtual int GetImplicitProcessDataOffset(UInt64& Offset);
    public abstract virtual int SetImplicitProcessDataOffset(ulong Offset);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("e9676e2f-e286-4ea3-b0f9-dfe5d9fc330e")]
public interface SOS.Hosting.DbgEng.Interop.IDebugSystemObjects3 {
    public abstract virtual int GetEventThread(UInt32& Id);
    public abstract virtual int GetEventProcess(UInt32& Id);
    public abstract virtual int GetCurrentThreadId(UInt32& Id);
    public abstract virtual int SetCurrentThreadId(UInt32 Id);
    public abstract virtual int GetCurrentProcessId(UInt32& Id);
    public abstract virtual int SetCurrentProcessId(UInt32 Id);
    public abstract virtual int GetNumberThreads(UInt32& Number);
    public abstract virtual int GetTotalNumberThreads(UInt32& Total, UInt32& LargestProcess);
    public abstract virtual int GetThreadIdsByIndex(UInt32 Start, UInt32 Count, UInt32[] Ids, UInt32[] SysIds);
    public abstract virtual int GetThreadIdByProcessor(UInt32 Processor, UInt32& Id);
    public abstract virtual int GetCurrentThreadDataOffset(UInt64& Offset);
    public abstract virtual int GetThreadIdByDataOffset(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentThreadTeb(UInt64& Offset);
    public abstract virtual int GetThreadIdByTeb(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentThreadSystemId(UInt32& SysId);
    public abstract virtual int GetThreadIdBySystemId(UInt32 SysId, UInt32& Id);
    public abstract virtual int GetCurrentThreadHandle(UInt64& Handle);
    public abstract virtual int GetThreadIdByHandle(ulong Handle, UInt32& Id);
    public abstract virtual int GetNumberProcesses(UInt32& Number);
    public abstract virtual int GetProcessIdsByIndex(UInt32 Start, UInt32 Count, UInt32[] Ids, UInt32[] SysIds);
    public abstract virtual int GetCurrentProcessDataOffset(UInt64& Offset);
    public abstract virtual int GetProcessIdByDataOffset(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentProcessPeb(UInt64& Offset);
    public abstract virtual int GetProcessIdByPeb(ulong Offset, UInt32& Id);
    public abstract virtual int GetCurrentProcessSystemId(UInt32& SysId);
    public abstract virtual int GetProcessIdBySystemId(UInt32 SysId, UInt32& Id);
    public abstract virtual int GetCurrentProcessHandle(UInt64& Handle);
    public abstract virtual int GetProcessIdByHandle(ulong Handle, UInt32& Id);
    public abstract virtual int GetCurrentProcessExecutableName(StringBuilder Buffer, int BufferSize, UInt32& ExeSize);
    public abstract virtual int GetCurrentProcessUpTime(UInt32& UpTime);
    public abstract virtual int GetImplicitThreadDataOffset(UInt64& Offset);
    public abstract virtual int SetImplicitThreadDataOffset(ulong Offset);
    public abstract virtual int GetImplicitProcessDataOffset(UInt64& Offset);
    public abstract virtual int SetImplicitProcessDataOffset(ulong Offset);
    public abstract virtual int GetEventSystem(UInt32& id);
    public abstract virtual int GetCurrentSystemId(UInt32& id);
    public abstract virtual int SetCurrentSystemId(UInt32 id);
    public abstract virtual int GetNumberSystems(UInt32& count);
    public abstract virtual int GetSystemIdsByIndex(UInt32 start, UInt32 count, UInt32[] Ids);
    public abstract virtual int GetTotalNumberThreadsAndProcesses(UInt32& totalThreads, UInt32& totalProcesses, UInt32& largestProcessThreads, UInt32& largestSystemThreads, UInt32& largestSystemProcesses);
    public abstract virtual int GetCurrentSystemServer(UInt64& server);
    public abstract virtual int GetSystemByServer(ulong server, UInt32& id);
    public abstract virtual int GetCurrentSystemServerName(StringBuilder buffer, UInt32 size, UInt32& needed);
}
public enum SOS.Hosting.DbgEng.Interop.IG : Enum {
    public ushort value__;
    public static IG KD_CONTEXT;
    public static IG READ_CONTROL_SPACE;
    public static IG WRITE_CONTROL_SPACE;
    public static IG READ_IO_SPACE;
    public static IG WRITE_IO_SPACE;
    public static IG READ_PHYSICAL;
    public static IG WRITE_PHYSICAL;
    public static IG READ_IO_SPACE_EX;
    public static IG WRITE_IO_SPACE_EX;
    public static IG KSTACK_HELP;
    public static IG SET_THREAD;
    public static IG READ_MSR;
    public static IG WRITE_MSR;
    public static IG GET_DEBUGGER_DATA;
    public static IG GET_KERNEL_VERSION;
    public static IG RELOAD_SYMBOLS;
    public static IG GET_SET_SYMPATH;
    public static IG GET_EXCEPTION_RECORD;
    public static IG IS_PTR64;
    public static IG GET_BUS_DATA;
    public static IG SET_BUS_DATA;
    public static IG DUMP_SYMBOL_INFO;
    public static IG LOWMEM_CHECK;
    public static IG SEARCH_MEMORY;
    public static IG GET_CURRENT_THREAD;
    public static IG GET_CURRENT_PROCESS;
    public static IG GET_TYPE_SIZE;
    public static IG GET_CURRENT_PROCESS_HANDLE;
    public static IG GET_INPUT_LINE;
    public static IG GET_EXPRESSION_EX;
    public static IG TRANSLATE_VIRTUAL_TO_PHYSICAL;
    public static IG GET_CACHE_SIZE;
    public static IG READ_PHYSICAL_WITH_FLAGS;
    public static IG WRITE_PHYSICAL_WITH_FLAGS;
    public static IG POINTER_SEARCH_PHYSICAL;
    public static IG OBSOLETE_PLACEHOLDER_36;
    public static IG GET_THREAD_OS_INFO;
    public static IG GET_CLR_DATA_INTERFACE;
    public static IG MATCH_PATTERN_A;
    public static IG FIND_FILE;
    public static IG TYPED_DATA_OBSOLETE;
    public static IG QUERY_TARGET_INTERFACE;
    public static IG TYPED_DATA;
    public static IG DISASSEMBLE_BUFFER;
    public static IG GET_ANY_MODULE_IN_RANGE;
    public static IG VIRTUAL_TO_PHYSICAL;
    public static IG PHYSICAL_TO_VIRTUAL;
    public static IG GET_CONTEXT_EX;
    public static IG GET_TEB_ADDRESS;
    public static IG GET_PEB_ADDRESS;
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_COR20_HEADER : ValueType {
    public UInt32 cb;
    public ushort MajorRuntimeVersion;
    public ushort MinorRuntimeVersion;
    public IMAGE_DATA_DIRECTORY MetaData;
    public UInt32 Flags;
    public IMAGE_COR20_HEADER_ENTRYPOINT EntryPoint;
    public IMAGE_DATA_DIRECTORY Resources;
    public IMAGE_DATA_DIRECTORY StrongNameSignature;
    public IMAGE_DATA_DIRECTORY CodeManagerTable;
    public IMAGE_DATA_DIRECTORY VTableFixups;
    public IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
    public IMAGE_DATA_DIRECTORY ManagedNativeHeader;
}
[IsReadOnlyAttribute]
public class SOS.Hosting.DbgEng.Interop.IMAGE_COR20_HEADER_ENTRYPOINT : ValueType {
    public UInt32 Token;
    public UInt32 RVA;
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_DATA_DIRECTORY : ValueType {
    public UInt32 VirtualAddress;
    public UInt32 Size;
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_DOS_HEADER : ValueType {
    public ushort e_magic;
    public ushort e_cblp;
    public ushort e_cp;
    public ushort e_crlc;
    public ushort e_cparhdr;
    public ushort e_minalloc;
    public ushort e_maxalloc;
    public ushort e_ss;
    public ushort e_sp;
    public ushort e_csum;
    public ushort e_ip;
    public ushort e_cs;
    public ushort e_lfarlc;
    public ushort e_ovno;
    [FixedBufferAttribute("System.UInt16", "4")]
public <e_res>e__FixedBuffer e_res;
    public ushort e_oemid;
    public ushort e_oeminfo;
    [FixedBufferAttribute("System.UInt16", "10")]
public <e_res2>e__FixedBuffer e_res2;
    public UInt32 e_lfanew;
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_FILE_HEADER : ValueType {
    public ushort Machine;
    public ushort NumberOfSections;
    public UInt32 TimeDateStamp;
    public UInt32 PointerToSymbolTable;
    public UInt32 NumberOfSymbols;
    public ushort SizeOfOptionalHeader;
    public ushort Characteristics;
}
public enum SOS.Hosting.DbgEng.Interop.IMAGE_FILE_MACHINE : Enum {
    public UInt32 value__;
    public static IMAGE_FILE_MACHINE UNKNOWN;
    public static IMAGE_FILE_MACHINE I386;
    public static IMAGE_FILE_MACHINE R3000;
    public static IMAGE_FILE_MACHINE R4000;
    public static IMAGE_FILE_MACHINE R10000;
    public static IMAGE_FILE_MACHINE WCEMIPSV2;
    public static IMAGE_FILE_MACHINE ALPHA;
    public static IMAGE_FILE_MACHINE SH3;
    public static IMAGE_FILE_MACHINE SH3DSP;
    public static IMAGE_FILE_MACHINE SH3E;
    public static IMAGE_FILE_MACHINE SH4;
    public static IMAGE_FILE_MACHINE SH5;
    public static IMAGE_FILE_MACHINE ARM;
    public static IMAGE_FILE_MACHINE THUMB;
    public static IMAGE_FILE_MACHINE ARMNT;
    public static IMAGE_FILE_MACHINE AM33;
    public static IMAGE_FILE_MACHINE POWERPC;
    public static IMAGE_FILE_MACHINE POWERPCFP;
    public static IMAGE_FILE_MACHINE IA64;
    public static IMAGE_FILE_MACHINE MIPS16;
    public static IMAGE_FILE_MACHINE ALPHA64;
    public static IMAGE_FILE_MACHINE MIPSFPU;
    public static IMAGE_FILE_MACHINE MIPSFPU16;
    public static IMAGE_FILE_MACHINE AXP64;
    public static IMAGE_FILE_MACHINE TRICORE;
    public static IMAGE_FILE_MACHINE CEF;
    public static IMAGE_FILE_MACHINE EBC;
    public static IMAGE_FILE_MACHINE AMD64;
    public static IMAGE_FILE_MACHINE M32R;
    public static IMAGE_FILE_MACHINE ARM64;
    public static IMAGE_FILE_MACHINE ARM64EC;
    public static IMAGE_FILE_MACHINE ARM64X;
    public static IMAGE_FILE_MACHINE CEE;
    public static IMAGE_FILE_MACHINE LOONGARCH64;
    public static IMAGE_FILE_MACHINE RISCV64;
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_IMPORT_DESCRIPTOR : ValueType {
    public UInt32 Characteristics;
    public UInt32 OriginalFirstThunk;
    public UInt32 TimeDateStamp;
    public UInt32 ForwarderChain;
    public UInt32 Name;
    public UInt32 FirstThunk;
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_NT_HEADERS32 : ValueType {
    public UInt32 Signature;
    public IMAGE_FILE_HEADER FileHeader;
    public IMAGE_OPTIONAL_HEADER32 OptionalHeader;
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_NT_HEADERS64 : ValueType {
    public UInt32 Signature;
    public IMAGE_FILE_HEADER FileHeader;
    public IMAGE_OPTIONAL_HEADER64 OptionalHeader;
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_OPTIONAL_HEADER32 : ValueType {
    public ushort Magic;
    public byte MajorLinkerVersion;
    public byte MinorLinkerVersion;
    public UInt32 SizeOfCode;
    public UInt32 SizeOfInitializedData;
    public UInt32 SizeOfUninitializedData;
    public UInt32 AddressOfEntryPoint;
    public UInt32 BaseOfCode;
    public UInt32 BaseOfData;
    public UInt32 ImageBase;
    public UInt32 SectionAlignment;
    public UInt32 FileAlignment;
    public ushort MajorOperatingSystemVersion;
    public ushort MinorOperatingSystemVersion;
    public ushort MajorImageVersion;
    public ushort MinorImageVersion;
    public ushort MajorSubsystemVersion;
    public ushort MinorSubsystemVersion;
    public UInt32 Win32VersionValue;
    public UInt32 SizeOfImage;
    public UInt32 SizeOfHeaders;
    public UInt32 CheckSum;
    public ushort Subsystem;
    public ushort DllCharacteristics;
    public UInt32 SizeOfStackReserve;
    public UInt32 SizeOfStackCommit;
    public UInt32 SizeOfHeapReserve;
    public UInt32 SizeOfHeapCommit;
    public UInt32 LoaderFlags;
    public UInt32 NumberOfRvaAndSizes;
    public IMAGE_DATA_DIRECTORY DataDirectory0;
    public IMAGE_DATA_DIRECTORY DataDirectory1;
    public IMAGE_DATA_DIRECTORY DataDirectory2;
    public IMAGE_DATA_DIRECTORY DataDirectory3;
    public IMAGE_DATA_DIRECTORY DataDirectory4;
    public IMAGE_DATA_DIRECTORY DataDirectory5;
    public IMAGE_DATA_DIRECTORY DataDirectory6;
    public IMAGE_DATA_DIRECTORY DataDirectory7;
    public IMAGE_DATA_DIRECTORY DataDirectory8;
    public IMAGE_DATA_DIRECTORY DataDirectory9;
    public IMAGE_DATA_DIRECTORY DataDirectory10;
    public IMAGE_DATA_DIRECTORY DataDirectory11;
    public IMAGE_DATA_DIRECTORY DataDirectory12;
    public IMAGE_DATA_DIRECTORY DataDirectory13;
    public IMAGE_DATA_DIRECTORY DataDirectory14;
    public IMAGE_DATA_DIRECTORY DataDirectory15;
    public static IMAGE_DATA_DIRECTORY* GetDataDirectory(IMAGE_OPTIONAL_HEADER32* header, int zeroBasedIndex);
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_OPTIONAL_HEADER64 : ValueType {
    public ushort Magic;
    public byte MajorLinkerVersion;
    public byte MinorLinkerVersion;
    public UInt32 SizeOfCode;
    public UInt32 SizeOfInitializedData;
    public UInt32 SizeOfUninitializedData;
    public UInt32 AddressOfEntryPoint;
    public UInt32 BaseOfCode;
    public ulong ImageBase;
    public UInt32 SectionAlignment;
    public UInt32 FileAlignment;
    public ushort MajorOperatingSystemVersion;
    public ushort MinorOperatingSystemVersion;
    public ushort MajorImageVersion;
    public ushort MinorImageVersion;
    public ushort MajorSubsystemVersion;
    public ushort MinorSubsystemVersion;
    public UInt32 Win32VersionValue;
    public UInt32 SizeOfImage;
    public UInt32 SizeOfHeaders;
    public UInt32 CheckSum;
    public ushort Subsystem;
    public ushort DllCharacteristics;
    public ulong SizeOfStackReserve;
    public ulong SizeOfStackCommit;
    public ulong SizeOfHeapReserve;
    public ulong SizeOfHeapCommit;
    public UInt32 LoaderFlags;
    public UInt32 NumberOfRvaAndSizes;
    public IMAGE_DATA_DIRECTORY DataDirectory0;
    public IMAGE_DATA_DIRECTORY DataDirectory1;
    public IMAGE_DATA_DIRECTORY DataDirectory2;
    public IMAGE_DATA_DIRECTORY DataDirectory3;
    public IMAGE_DATA_DIRECTORY DataDirectory4;
    public IMAGE_DATA_DIRECTORY DataDirectory5;
    public IMAGE_DATA_DIRECTORY DataDirectory6;
    public IMAGE_DATA_DIRECTORY DataDirectory7;
    public IMAGE_DATA_DIRECTORY DataDirectory8;
    public IMAGE_DATA_DIRECTORY DataDirectory9;
    public IMAGE_DATA_DIRECTORY DataDirectory10;
    public IMAGE_DATA_DIRECTORY DataDirectory11;
    public IMAGE_DATA_DIRECTORY DataDirectory12;
    public IMAGE_DATA_DIRECTORY DataDirectory13;
    public IMAGE_DATA_DIRECTORY DataDirectory14;
    public IMAGE_DATA_DIRECTORY DataDirectory15;
    public static IMAGE_DATA_DIRECTORY* GetDataDirectory(IMAGE_OPTIONAL_HEADER64* header, int zeroBasedIndex);
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_THUNK_DATA32 : ValueType {
    public UInt32 ForwarderString;
    public UInt32 Function;
    public UInt32 Ordinal;
    public UInt32 AddressOfData;
}
public class SOS.Hosting.DbgEng.Interop.IMAGE_THUNK_DATA64 : ValueType {
    public ulong ForwarderString;
    public ulong Function;
    public ulong Ordinal;
    public ulong AddressOfData;
}
public class SOS.Hosting.DbgEng.Interop.IMAGEHLP_MODULE64 : ValueType {
    private static int MAX_PATH;
    public UInt32 SizeOfStruct;
    public ulong BaseOfImage;
    public UInt32 ImageSize;
    public UInt32 TimeDateStamp;
    public UInt32 CheckSum;
    public UInt32 NumSyms;
    public DEBUG_SYMTYPE SymType;
    [FixedBufferAttribute("System.Char", "32")]
private <_ModuleName>e__FixedBuffer _ModuleName;
    [FixedBufferAttribute("System.Char", "256")]
private <_ImageName>e__FixedBuffer _ImageName;
    [FixedBufferAttribute("System.Char", "256")]
private <_LoadedImageName>e__FixedBuffer _LoadedImageName;
    [FixedBufferAttribute("System.Char", "256")]
private <_LoadedPdbName>e__FixedBuffer _LoadedPdbName;
    public UInt32 CVSig;
    [FixedBufferAttribute("System.Char", "780")]
public <CVData>e__FixedBuffer CVData;
    public UInt32 PdbSig;
    public Guid PdbSig70;
    public UInt32 PdbAge;
    private UInt32 _bPdbUnmatched;
    private UInt32 _bDbgUnmatched;
    private UInt32 _bLineNumbers;
    private UInt32 _bGlobalSymbols;
    private UInt32 _bTypeInfo;
    private UInt32 _bSourceIndexed;
    private UInt32 _bPublics;
    public bool PdbUnmatched { get; public set; }
    public bool DbgUnmatched { get; public set; }
    public bool LineNumbers { get; public set; }
    public bool GlobalSymbols { get; public set; }
    public bool TypeInfo { get; public set; }
    public bool SourceIndexed { get; public set; }
    public bool Publics { get; public set; }
    public string ModuleName { get; }
    public string ImageName { get; }
    public string LoadedImageName { get; }
    public string LoadedPdbName { get; }
    public bool get_PdbUnmatched();
    public void set_PdbUnmatched(bool value);
    public bool get_DbgUnmatched();
    public void set_DbgUnmatched(bool value);
    public bool get_LineNumbers();
    public void set_LineNumbers(bool value);
    public bool get_GlobalSymbols();
    public void set_GlobalSymbols(bool value);
    public bool get_TypeInfo();
    public void set_TypeInfo(bool value);
    public bool get_SourceIndexed();
    public void set_SourceIndexed(bool value);
    public bool get_Publics();
    public void set_Publics(bool value);
    public string get_ModuleName();
    public string get_ImageName();
    public string get_LoadedImageName();
    public string get_LoadedPdbName();
}
public enum SOS.Hosting.DbgEng.Interop.INTERFACE_TYPE : Enum {
    public int value__;
    public static INTERFACE_TYPE InterfaceTypeUndefined;
    public static INTERFACE_TYPE Internal;
    public static INTERFACE_TYPE Isa;
    public static INTERFACE_TYPE Eisa;
    public static INTERFACE_TYPE MicroChannel;
    public static INTERFACE_TYPE TurboChannel;
    public static INTERFACE_TYPE PCIBus;
    public static INTERFACE_TYPE VMEBus;
    public static INTERFACE_TYPE NuBus;
    public static INTERFACE_TYPE PCMCIABus;
    public static INTERFACE_TYPE CBus;
    public static INTERFACE_TYPE MPIBus;
    public static INTERFACE_TYPE MPSABus;
    public static INTERFACE_TYPE ProcessorInternal;
    public static INTERFACE_TYPE InternalPowerBus;
    public static INTERFACE_TYPE PNPISABus;
    public static INTERFACE_TYPE PNPBus;
    public static INTERFACE_TYPE Vmcs;
    public static INTERFACE_TYPE MaximumInterfaceType;
}
public class SOS.Hosting.DbgEng.Interop.LANGANDCODEPAGE : ValueType {
    public ushort wLanguage;
    public ushort wCodePage;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.MEM : Enum {
    public UInt32 value__;
    public static MEM COMMIT;
    public static MEM RESERVE;
    public static MEM DECOMMIT;
    public static MEM RELEASE;
    public static MEM FREE;
    public static MEM PRIVATE;
    public static MEM MAPPED;
    public static MEM RESET;
    public static MEM TOP_DOWN;
    public static MEM WRITE_WATCH;
    public static MEM PHYSICAL;
    public static MEM ROTATE;
    public static MEM LARGE_PAGES;
    public static MEM FOURMB_PAGES;
    public static MEM IMAGE;
}
public class SOS.Hosting.DbgEng.Interop.MEMORY_BASIC_INFORMATION64 : ValueType {
    public ulong BaseAddress;
    public ulong AllocationBase;
    public PAGE AllocationProtect;
    public UInt32 __alignment1;
    public ulong RegionSize;
    public MEM State;
    public PAGE Protect;
    public MEM Type;
    public UInt32 __alignment2;
}
public enum SOS.Hosting.DbgEng.Interop.MODULE_ARCHITECTURE : Enum {
    public int value__;
    public static MODULE_ARCHITECTURE UNKNOWN;
    public static MODULE_ARCHITECTURE I386;
    public static MODULE_ARCHITECTURE X64;
    public static MODULE_ARCHITECTURE IA64;
    public static MODULE_ARCHITECTURE ANY;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.MODULE_ORDERS : Enum {
    public UInt32 value__;
    public static MODULE_ORDERS MASK;
    public static MODULE_ORDERS LOADTIME;
    public static MODULE_ORDERS MODULENAME;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.PAGE : Enum {
    public UInt32 value__;
    public static PAGE NOACCESS;
    public static PAGE READONLY;
    public static PAGE READWRITE;
    public static PAGE WRITECOPY;
    public static PAGE EXECUTE;
    public static PAGE EXECUTE_READ;
    public static PAGE EXECUTE_READWRITE;
    public static PAGE EXECUTE_WRITECOPY;
    public static PAGE GUARD;
    public static PAGE NOCACHE;
    public static PAGE WRITECOMBINE;
}
public class SOS.Hosting.DbgEng.Interop.RECT : ValueType {
    public int left;
    public int top;
    public int right;
    public int bottom;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.SEC : Enum {
    public UInt32 value__;
    public static SEC FILE;
    public static SEC IMAGE;
    public static SEC PROTECTED_IMAGE;
    public static SEC RESERVE;
    public static SEC COMMIT;
    public static SEC NOCACHE;
    public static SEC WRITECOMBINE;
    public static SEC LARGE_PAGES;
    public static SEC MEM_IMAGE;
}
public enum SOS.Hosting.DbgEng.Interop.SPF_MOVE_METHOD : Enum {
    public UInt32 value__;
    public static SPF_MOVE_METHOD FILE_BEGIN;
    public static SPF_MOVE_METHOD FILE_CURRENT;
    public static SPF_MOVE_METHOD FILE_END;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.SYMOPT : Enum {
    public UInt32 value__;
    public static SYMOPT CASE_INSENSITIVE;
    public static SYMOPT UNDNAME;
    public static SYMOPT DEFERRED_LOADS;
    public static SYMOPT NO_CPP;
    public static SYMOPT LOAD_LINES;
    public static SYMOPT OMAP_FIND_NEAREST;
    public static SYMOPT LOAD_ANYTHING;
    public static SYMOPT IGNORE_CVREC;
    public static SYMOPT NO_UNQUALIFIED_LOADS;
    public static SYMOPT FAIL_CRITICAL_ERRORS;
    public static SYMOPT EXACT_SYMBOLS;
    public static SYMOPT ALLOW_ABSOLUTE_SYMBOLS;
    public static SYMOPT IGNORE_NT_SYMPATH;
    public static SYMOPT INCLUDE_32BIT_MODULES;
    public static SYMOPT PUBLICS_ONLY;
    public static SYMOPT NO_PUBLICS;
    public static SYMOPT AUTO_PUBLICS;
    public static SYMOPT NO_IMAGE_SEARCH;
    public static SYMOPT SECURE;
    public static SYMOPT NO_PROMPTS;
    public static SYMOPT OVERWRITE;
    public static SYMOPT IGNORE_IMAGEDIR;
    public static SYMOPT FLAT_DIRECTORY;
    public static SYMOPT FAVOR_COMPRESSED;
    public static SYMOPT ALLOW_ZERO_ADDRESS;
    public static SYMOPT DISABLE_SYMSRV_AUTODETECT;
    public static SYMOPT DEBUG;
}
public enum SOS.Hosting.DbgEng.Interop.SymTag : Enum {
    public UInt32 value__;
    public static SymTag Null;
    public static SymTag Exe;
    public static SymTag Compiland;
    public static SymTag CompilandDetails;
    public static SymTag CompilandEnv;
    public static SymTag Function;
    public static SymTag Block;
    public static SymTag Data;
    public static SymTag Annotation;
    public static SymTag Label;
    public static SymTag PublicSymbol;
    public static SymTag UDT;
    public static SymTag Enum;
    public static SymTag FunctionType;
    public static SymTag PointerType;
    public static SymTag ArrayType;
    public static SymTag BaseType;
    public static SymTag Typedef;
    public static SymTag BaseClass;
    public static SymTag Friend;
    public static SymTag FunctionArgType;
    public static SymTag FuncDebugStart;
    public static SymTag FuncDebugEnd;
    public static SymTag UsingNamespace;
    public static SymTag VTableShape;
    public static SymTag VTable;
    public static SymTag Custom;
    public static SymTag Thunk;
    public static SymTag CustomType;
    public static SymTag ManagedType;
    public static SymTag Dimension;
    public static SymTag CallSite;
    public static SymTag InlineSite;
    public static SymTag BaseInterface;
    public static SymTag VectorType;
    public static SymTag MatrixType;
    public static SymTag HLSLType;
    public static SymTag SymTagMax;
}
[FlagsAttribute]
public enum SOS.Hosting.DbgEng.Interop.VS_FF : Enum {
    public UInt32 value__;
    public static VS_FF DEBUG;
    public static VS_FF PRERELEASE;
    public static VS_FF PATCHED;
    public static VS_FF PRIVATEBUILD;
    public static VS_FF INFOINFERRED;
    public static VS_FF SPECIALBUILD;
}
public class SOS.Hosting.DbgEng.Interop.VS_FIXEDFILEINFO : ValueType {
    public UInt32 dwSignature;
    public UInt32 dwStrucVersion;
    public UInt32 dwFileVersionMS;
    public UInt32 dwFileVersionLS;
    public UInt32 dwProductVersionMS;
    public UInt32 dwProductVersionLS;
    public UInt32 dwFileFlagsMask;
    public VS_FF dwFileFlags;
    public UInt32 dwFileOS;
    public UInt32 dwFileType;
    public UInt32 dwFileSubtype;
    public UInt32 dwFileDateMS;
    public UInt32 dwFileDateLS;
}
public class SOS.Hosting.DbgEng.Interop.WDBGEXTS_CLR_DATA_INTERFACE : ValueType {
    public Guid* Iid;
    private Void* _iface;
    public object Interface { get; }
    public WDBGEXTS_CLR_DATA_INTERFACE(Guid* iid);
    public object get_Interface();
}
public class SOS.Hosting.DbgEng.Interop.WDBGEXTS_THREAD_OS_INFO : ValueType {
    public UInt32 ThreadId;
    public UInt32 ExitStatus;
    public UInt32 PriorityClass;
    public UInt32 Priority;
    public ulong CreateTime;
    public ulong ExitTime;
    public ulong KernelTime;
    public ulong UserTime;
    public ulong StartOffset;
    public ulong Affinity;
}
public class SOS.Hosting.DbgEng.Interop.WINDBG_EXTENSION_APIS : ValueType {
    public UInt32 nSize;
    public IntPtr lpOutputRoutine;
    public IntPtr lpGetExpressionRoutine;
    public IntPtr lpGetSymbolRoutine;
    public IntPtr lpDisasmRoutine;
    public IntPtr lpCheckControlCRoutine;
    public IntPtr lpReadProcessMemoryRoutine;
    public IntPtr lpWriteProcessMemoryRoutine;
    public IntPtr lpGetThreadContextRoutine;
    public IntPtr lpSetThreadContextRoutine;
    public IntPtr lpIoctlRoutine;
    public IntPtr lpStackTraceRoutine;
}
public class SOS.Hosting.HostWrapper : COMCallableIUnknown {
    private static Guid IID_IHost;
    private IHost _host;
    [CompilerGeneratedAttribute]
private ServiceWrapper <ServiceWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <IHost>k__BackingField;
    public ServiceWrapper ServiceWrapper { get; }
    public IntPtr IHost { get; }
    public HostWrapper(IHost host);
    private static HostWrapper();
    [CompilerGeneratedAttribute]
public ServiceWrapper get_ServiceWrapper();
    [CompilerGeneratedAttribute]
public IntPtr get_IHost();
    protected virtual void Destroy();
    private HostType GetHostType(IntPtr self);
    private int GetCurrentTarget(IntPtr self, IntPtr& targetWrapper);
}
public class SOS.Hosting.LLDBServices : COMCallableIUnknown {
    public static Guid IID_ILLDBServices;
    public static Guid IID_ILLDBServices2;
    [CompilerGeneratedAttribute]
private IntPtr <ILLDBServices>k__BackingField;
    private SOSHost _soshost;
    public IntPtr ILLDBServices { get; }
    internal LLDBServices(SOSHost soshost);
    private static LLDBServices();
    [CompilerGeneratedAttribute]
public IntPtr get_ILLDBServices();
    protected virtual void Destroy();
    private string GetCoreClrDirectory(IntPtr self);
    private int VirtualUnwind(IntPtr self, UInt32 threadId, UInt32 contextSize, Byte[] context);
    private int SetExceptionCallback(IntPtr self, PFN_EXCEPTION_CALLBACK callback);
    private int ClearExceptionCallback(IntPtr self);
    private int GetContextStackTrace(IntPtr self, IntPtr startContext, UInt32 startContextSize, DEBUG_STACK_FRAME[] frames, UInt32 framesSize, IntPtr frameContexts, UInt32 frameContextsSize, UInt32 frameContextsEntrySize, UInt32* framesFilled);
    private int GetValueByName(IntPtr self, string name, UIntPtr& value);
    private int LoadNativeSymbols2(IntPtr self, bool runtimeOnly, ModuleLoadCallback callback);
    private int AddModuleSymbol(IntPtr self, IntPtr parameter, string symbolFilename);
    private int GetModuleInfo(IntPtr self, UInt32 index, UInt64* moduleBase, UInt64* moduleSize, UInt32* timestamp, UInt32* checksum);
}
[ServiceExportAttribute]
public class SOS.Hosting.RuntimeWrapper : COMCallableIUnknown {
    public static Guid IID_IXCLRDataProcess;
    public static Guid IID_ICorDebugProcess;
    private static Guid IID_IRuntime;
    private IServiceProvider _services;
    private IRuntime _runtime;
    private IntPtr _clrDataProcess;
    private IntPtr _corDebugProcess;
    private IntPtr _dacHandle;
    private IntPtr _dbiHandle;
    [CompilerGeneratedAttribute]
private IntPtr <IRuntime>k__BackingField;
    public IntPtr IRuntime { get; }
    public RuntimeWrapper(IServiceProvider services, IRuntime runtime);
    private static RuntimeWrapper();
    [CompilerGeneratedAttribute]
public IntPtr get_IRuntime();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Destroy();
    private RuntimeConfiguration GetRuntimeConfiguration(IntPtr self);
    private ulong GetModuleAddress(IntPtr self);
    private ulong GetModuleSize(IntPtr self);
    private void SetRuntimeDirectory(IntPtr self, string runtimeModuleDirectory);
    private string GetRuntimeDirectory(IntPtr self);
    private int GetClrDataProcess(IntPtr self, IntPtr* ppClrDataProcess);
    private int GetCorDebugInterface(IntPtr self, IntPtr* ppCorDebugProcess);
    private int GetEEVersion(IntPtr self, VS_FIXEDFILEINFO* pFileInfo, Byte* fileVersionBuffer, int fileVersionBufferSizeInBytes);
    private IntPtr CreateClrDataProcess();
    private IntPtr CreateCorDebugProcess();
    private IntPtr GetDacHandle();
}
public class SOS.Hosting.ServiceWrapper : object {
    private Dictionary`2<Guid, Func`1<COMCallableIUnknown>> _factories;
    private Dictionary`2<Guid, COMCallableIUnknown> _wrappers;
    public sealed virtual void Dispose();
    public void AddServiceWrapper(Guid& serviceId, Func`1<COMCallableIUnknown> factory);
    public void AddServiceWrapper(Guid& serviceId, COMCallableIUnknown service);
    public void RemoveServiceWrapper(Guid& serviceId);
    public COMCallableIUnknown GetServiceWrapper(Guid& serviceId);
    public int GetService(IntPtr self, Guid& guid, IntPtr& ptr);
}
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
public class SOS.Hosting.SOSCommand : SOSCommandBase {
    [FilterInvokeAttribute]
public static bool FilterInvoke(ManagedOnlyCommandFilter managedOnly, IRuntime runtime);
}
public class SOS.Hosting.SOSCommandBase : CommandBase {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private SOSHost <SOSHost>k__BackingField;
    [ArgumentAttribute]
public String[] Arguments { get; public set; }
    [ServiceImportAttribute]
public SOSHost SOSHost { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(String[] value);
    [CompilerGeneratedAttribute]
public SOSHost get_SOSHost();
    [CompilerGeneratedAttribute]
public void set_SOSHost(SOSHost value);
    public virtual void Invoke();
    [HelpInvokeAttribute]
public string GetDetailedHelp();
    public static bool Filter(ManagedOnlyCommandFilter managedOnly, IRuntime runtime);
}
[ServiceExportAttribute]
public class SOS.Hosting.SOSHost : object {
    internal static UInt32 InvalidTimeStamp;
    internal static UInt32 InvalidChecksum;
    internal ITarget Target;
    internal IMemoryService MemoryService;
    [ServiceImportAttribute]
internal IConsoleService ConsoleService;
    [ServiceImportAttribute]
internal IContextService ContextService;
    [ServiceImportAttribute]
internal IModuleService ModuleService;
    [ServiceImportAttribute]
internal IThreadService ThreadService;
    [ServiceImportAttribute]
private SOSLibrary _sosLibrary;
    private IntPtr _client;
    private ulong _ignoreAddressBitsMask;
    public SOSHost(ITarget target, IMemoryService memoryService, INativeDebugger nativeDebugger);
    private sealed virtual override void System.IDisposable.Dispose();
    public void ExecuteCommand(string command, string arguments);
    public string GetHelpText(string command);
    internal int GetInterrupt(IntPtr self);
    internal int OutputVaList(IntPtr self, DEBUG_OUTPUT mask, string format, IntPtr va_list);
    internal int GetDebuggeeType(IntPtr self, DEBUG_CLASS* debugClass, DEBUG_CLASS_QUALIFIER* qualifier);
    internal int GetDumpFormatFlags(IntPtr self, DEBUG_FORMAT* formatFlags);
    internal int GetPageSize(IntPtr self, UInt32* size);
    internal int GetExecutingProcessorType(IntPtr self, IMAGE_FILE_MACHINE* type);
    internal static int Execute(IntPtr self, DEBUG_OUTCTL outputControl, string command, DEBUG_EXECUTE flags);
    internal int GetLastEventInformation(IntPtr self, DEBUG_EVENT* type, UInt32* processId, UInt32* threadId, IntPtr extraInformation, UInt32 extraInformationSize, UInt32* extraInformationUsed, StringBuilder description, UInt32 descriptionSize, UInt32* descriptionUsed);
    internal static int Disassemble(IntPtr self, ulong offset, DEBUG_DISASM flags, StringBuilder buffer, UInt32 bufferSize, UInt32* disassemblySize, UInt64* endOffset);
    internal int ReadVirtual(IntPtr self, ulong address, IntPtr buffer, UInt32 bytesRequested, UInt32* pbytesRead);
    internal int WriteVirtual(IntPtr self, ulong address, IntPtr buffer, UInt32 bytesRequested, UInt32* pbytesWritten);
    internal static int GetSymbolOptions(IntPtr self, SYMOPT& options);
    internal static int GetNameByOffset(IntPtr self, ulong offset, StringBuilder nameBuffer, UInt32 nameBufferSize, UInt32* nameSize, UInt64* displacement);
    internal int GetNumberModules(IntPtr self, UInt32& loaded, UInt32& unloaded);
    internal int GetModuleByIndex(IntPtr self, UInt32 index, UInt64& baseAddress);
    internal int GetModuleByModuleName(IntPtr self, string name, UInt32 startIndex, UInt32* index, UInt64* baseAddress);
    internal int GetModuleByOffset(IntPtr self, ulong offset, UInt32 startIndex, UInt32* index, UInt64* baseAddress);
    internal int GetModuleNames(IntPtr self, UInt32 index, ulong baseAddress, StringBuilder imageNameBuffer, UInt32 imageNameBufferSize, UInt32* imageNameSize, StringBuilder moduleNameBuffer, UInt32 moduleNameBufferSize, UInt32* moduleNameSize, StringBuilder loadedImageNameBuffer, UInt32 loadedImageNameBufferSize, UInt32* loadedImageNameSize);
    internal int GetModuleParameters(IntPtr self, UInt32 count, UInt64* bases, UInt32 start, DEBUG_MODULE_PARAMETERS* moduleParams);
    internal int GetModuleVersionInformation(IntPtr self, UInt32 index, ulong baseAddress, string item, Byte* buffer, UInt32 bufferSize, UInt32* verInfoSize);
    internal static int GetLineByOffset(IntPtr self, ulong offset, UInt32* line, StringBuilder fileBuffer, UInt32 fileBufferSize, UInt32* fileSize, UInt64* displacement);
    internal static int GetSourceFileLineOffsets(IntPtr self, string file, UInt64[] buffer, UInt32 bufferLines, UInt32* fileLines);
    internal static int FindSourceFile(IntPtr self, UInt32 startElement, string file, DEBUG_FIND_SOURCE flags, UInt32* foundElement, StringBuilder buffer, UInt32 bufferSize, UInt32* foundSize);
    internal static int GetSymbolPath(IntPtr self, StringBuilder buffer, int bufferSize, UInt32* pathSize);
    internal int GetThreadContext(IntPtr self, IntPtr context, int contextSize);
    internal int GetThreadContextBySystemId(IntPtr self, UInt32 threadId, UInt32 contextFlags, int contextSize, IntPtr context);
    internal static int SetThreadContext(IntPtr self, IntPtr context, int contextSize);
    internal int GetNumberThreads(IntPtr self, UInt32& number);
    internal int GetTotalNumberThreads(IntPtr self, UInt32& total, UInt32& largestProcess);
    internal int GetCurrentProcessSystemId(IntPtr self, UInt32& id);
    internal int GetCurrentThreadId(IntPtr self, UInt32& id);
    internal int SetCurrentThreadId(IntPtr self, UInt32 id);
    internal int GetCurrentThreadSystemId(IntPtr self, UInt32& sysId);
    internal int GetThreadIdsByIndex(IntPtr self, UInt32 start, UInt32 count, UInt32* ids, UInt32* sysIds);
    internal int GetThreadIdBySystemId(IntPtr self, UInt32 sysId, UInt32& id);
    internal int GetCurrentThreadTeb(IntPtr self, UInt64* offset);
    internal int GetInstructionOffset(IntPtr self, UInt64& offset);
    internal int GetStackOffset(IntPtr self, UInt64& offset);
    internal int GetFrameOffset(IntPtr self, UInt64& offset);
    internal int GetIndexByName(IntPtr self, string name, UInt32& index);
    internal int GetValue(IntPtr self, UInt32 register, DEBUG_VALUE& value);
    internal int GetRegister(string register, UInt64& value);
    internal int GetRegister(int index, UInt64& value);
    public static T GetDelegateFunction(IntPtr library, string functionName);
    private string GetFileName(string fileName);
    internal static void Write(UInt32* pointer, UInt32 value);
    internal static void Write(UInt64* pointer, ulong value);
}
public class SOS.Hosting.SOSLibrary : object {
    private static string SOSInitialize;
    private static string SOSUninitialize;
    private HostWrapper _hostWrapper;
    private bool _uninitializeLibrary;
    private IntPtr _sosLibrary;
    [CompilerGeneratedAttribute]
private string <SOSPath>k__BackingField;
    public string SOSPath { get; public set; }
    private SOSLibrary(IHost host, ISOSModule sosModule);
    public static IntPtr FindResource(IntPtr hModule, string name, string type);
    public static IntPtr LoadResource(IntPtr hModule, IntPtr hResource);
    public static IntPtr LockResource(IntPtr hResource);
    [CompilerGeneratedAttribute]
public string get_SOSPath();
    [CompilerGeneratedAttribute]
public void set_SOSPath(string value);
    [ServiceExportAttribute]
public static SOSLibrary TryCreate(IHost host, ISOSModule sosModule);
    private sealed virtual override void System.IDisposable.Dispose();
    private void Initialize();
    private void Uninitialize();
    public void ExecuteCommand(IntPtr client, string command, string arguments);
    public string GetHelpText(string command);
}
[ExtensionAttribute]
public static class SOS.Hosting.SymbolServiceExtensions : object {
    private static int E_INSUFFICIENT_BUFFER;
    [ExtensionAttribute]
public static bool ParseSymbolPathFixDefault(ISymbolService symbolService, string symbolPath);
    [ExtensionAttribute]
public static int GetMetadataLocator(ISymbolService symbolService, string imagePath, UInt32 imageTimestamp, UInt32 imageSize, Byte[] mvid, UInt32 mdRva, UInt32 flags, UInt32 bufferSize, IntPtr pMetadata, IntPtr pMetadataSize);
    [ExtensionAttribute]
public static int GetICorDebugMetadataLocator(ISymbolService symbolService, string imagePath, UInt32 imageTimestamp, UInt32 imageSize, UInt32 pathBufferSize, IntPtr pPathBufferSize, IntPtr pwszPathBuffer);
}
public class SOS.Hosting.SymbolServiceWrapper : COMCallableIUnknown {
    public static Guid IID_ISymbolService;
    private ISymbolService _symbolService;
    private IMemoryService _memoryService;
    private ulong _ignoreAddressBitsMask;
    public SymbolServiceWrapper(ISymbolService symbolService, IMemoryService memoryService);
    private static SymbolServiceWrapper();
    protected virtual void Destroy();
    private bool ParseSymbolPath(IntPtr self, string symbolPath);
    internal static ulong GetExpressionValue(IntPtr self, string expression);
    private IntPtr LoadSymbolsForModule(IntPtr self, string assemblyPath, bool isFileLayout, ulong loadedPeAddress, UInt32 loadedPeSize, ulong inMemoryPdbAddress, UInt32 inMemoryPdbSize);
    private void Dispose(IntPtr self, IntPtr symbolReaderHandle);
    private bool ResolveSequencePoint(IntPtr self, IntPtr symbolReaderHandle, string filePath, int lineNumber, Int32& methodToken, Int32& ilOffset);
    private bool GetLineByILOffset(IntPtr self, IntPtr symbolReaderHandle, int methodToken, long ilOffset, Int32& lineNumber, IntPtr& fileName);
    private bool GetLocalVariableName(IntPtr self, IntPtr symbolReaderHandle, int methodToken, int localIndex, IntPtr& localVarName);
    internal int GetMetadataLocator(IntPtr self, string imagePath, UInt32 imageTimestamp, UInt32 imageSize, Byte[] mvid, UInt32 mdRva, UInt32 flags, UInt32 bufferSize, IntPtr pMetadata, IntPtr pMetadataSize);
    internal int GetICorDebugMetadataLocator(IntPtr self, string imagePath, UInt32 imageTimestamp, UInt32 imageSize, UInt32 pathBufferSize, IntPtr pPathBufferSize, IntPtr pwszPathBuffer);
}
[ServiceExportAttribute]
public class SOS.Hosting.TargetWrapper : COMCallableIUnknown {
    public static Guid IID_ITarget;
    [CompilerGeneratedAttribute]
private ServiceWrapper <ServiceWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <ITarget>k__BackingField;
    private ITarget _target;
    private IContextService _contextService;
    public ServiceWrapper ServiceWrapper { get; }
    public IntPtr ITarget { get; }
    public TargetWrapper(ITarget target, IContextService contextService, ISymbolService symbolService, IMemoryService memoryService);
    private static TargetWrapper();
    [CompilerGeneratedAttribute]
public ServiceWrapper get_ServiceWrapper();
    [CompilerGeneratedAttribute]
public IntPtr get_ITarget();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Destroy();
    private OperatingSystem GetOperatingSystem(IntPtr self);
    private string GetTempDirectory(IntPtr self);
    private int GetRuntime(IntPtr self, IntPtr* ppRuntime);
    private void Flush(IntPtr self);
}
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
public class SOS.Hosting.WindowsSOSCommand : SOSCommandBase {
    [FilterInvokeAttribute]
public static bool FilterInvoke(ITarget target, ManagedOnlyCommandFilter managedOnly, IRuntime runtime);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
