[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Diagnostics.Tools.Dump.Analyzer : object {
    private ServiceManager _serviceManager;
    private ConsoleService _consoleService;
    private FileLoggingConsoleService _fileLoggingConsoleService;
    private CommandService _commandService;
    private List`1<ITarget> _targets;
    private ServiceContainer _serviceContainer;
    private int _targetIdFactory;
    [CompilerGeneratedAttribute]
private IServiceEvent <OnShutdownEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceEvent`1<ITarget> <OnTargetCreate>k__BackingField;
    public IServiceEvent OnShutdownEvent { get; }
    public IServiceEvent`1<ITarget> OnTargetCreate { get; }
    public HostType HostType { get; }
    public IServiceProvider Services { get; }
    public Task`1<int> Analyze(FileInfo dump_path, String[] command);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceEvent get_OnShutdownEvent();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceEvent`1<ITarget> get_OnTargetCreate();
    public sealed virtual HostType get_HostType();
    public sealed virtual IServiceProvider get_Services();
    public sealed virtual IEnumerable`1<ITarget> EnumerateTargets();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(ITarget target);
}
public class Microsoft.Diagnostics.Tools.Dump.Dumper : object {
    public int Collect(IConsole console, int processId, string output, bool diag, bool crashreport, DumpTypeOption type, string name);
}
internal static class Microsoft.Diagnostics.Tools.Dump.Program : object {
    public static Task`1<int> Main(String[] args);
    private static Command CollectCommand();
    private static Option ProcessIdOption();
    private static Option ProcessNameOption();
    private static Option OutputOption();
    private static Option DiagnosticLoggingOption();
    private static Option CrashReportOption();
    private static Option TypeOption();
    private static Command AnalyzeCommand();
    private static Argument DumpPath();
    private static Option RunCommand();
    private static int <Main>(String[] args);
}
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
[CommandAttribute]
public class Microsoft.Diagnostics.Tools.Dump.ReadMemoryCommand : CommandBase {
    [CompilerGeneratedAttribute]
private static int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <Ascii>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <Unicode>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <AsciiString>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UnicodeString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HexPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryService <MemoryService>k__BackingField;
    [CompilerGeneratedAttribute]
private ITarget <Target>k__BackingField;
    private Nullable`1<ulong> _address;
    private Nullable`1<ulong> _endAddress;
    private static ulong _lastAddress;
    [ArgumentAttribute]
public string AddressValue { get; public set; }
    [OptionAttribute]
public string EndAddressValue { get; public set; }
    [OptionAttribute]
public static int Count { get; public set; }
    [OptionAttribute]
public static int Length { get; public set; }
    [OptionAttribute]
public static int Width { get; public set; }
    [OptionAttribute]
public static bool Ascii { get; public set; }
    [OptionAttribute]
public static bool Unicode { get; public set; }
    [OptionAttribute]
public static bool AsciiString { get; public set; }
    [OptionAttribute]
public static bool UnicodeString { get; public set; }
    [OptionAttribute]
public bool HexPrefix { get; public set; }
    [OptionAttribute]
public bool ShowAddress { get; public set; }
    [ServiceImportAttribute]
public IMemoryService MemoryService { get; public set; }
    [ServiceImportAttribute]
public ITarget Target { get; public set; }
    private static ReadMemoryCommand();
    public string get_AddressValue();
    public void set_AddressValue(string value);
    public string get_EndAddressValue();
    public void set_EndAddressValue(string value);
    [CompilerGeneratedAttribute]
public static int get_Count();
    [CompilerGeneratedAttribute]
public static void set_Count(int value);
    [CompilerGeneratedAttribute]
public static int get_Length();
    [CompilerGeneratedAttribute]
public static void set_Length(int value);
    [CompilerGeneratedAttribute]
public static int get_Width();
    [CompilerGeneratedAttribute]
public static void set_Width(int value);
    [CompilerGeneratedAttribute]
public static bool get_Ascii();
    [CompilerGeneratedAttribute]
public static void set_Ascii(bool value);
    [CompilerGeneratedAttribute]
public static bool get_Unicode();
    [CompilerGeneratedAttribute]
public static void set_Unicode(bool value);
    [CompilerGeneratedAttribute]
public static bool get_AsciiString();
    [CompilerGeneratedAttribute]
public static void set_AsciiString(bool value);
    [CompilerGeneratedAttribute]
public static bool get_UnicodeString();
    [CompilerGeneratedAttribute]
public static void set_UnicodeString(bool value);
    [CompilerGeneratedAttribute]
public bool get_HexPrefix();
    [CompilerGeneratedAttribute]
public void set_HexPrefix(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowAddress();
    [CompilerGeneratedAttribute]
public void set_ShowAddress(bool value);
    [CompilerGeneratedAttribute]
public IMemoryService get_MemoryService();
    [CompilerGeneratedAttribute]
public void set_MemoryService(IMemoryService value);
    [CompilerGeneratedAttribute]
public ITarget get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(ITarget value);
    public virtual void Invoke();
    private char ReadChar(ulong address, bool unicode, bool zeroOk);
}
[CommandAttribute]
public class Microsoft.Diagnostics.Tools.Dump.SOSCommand : CommandBase {
    [CompilerGeneratedAttribute]
private CommandService <CommandService>k__BackingField;
    [CompilerGeneratedAttribute]
private SOSHost <SOSHost>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    [ServiceImportAttribute]
public CommandService CommandService { get; public set; }
    [ServiceImportAttribute]
public SOSHost SOSHost { get; public set; }
    [ArgumentAttribute]
public String[] Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public CommandService get_CommandService();
    [CompilerGeneratedAttribute]
public void set_CommandService(CommandService value);
    [CompilerGeneratedAttribute]
public SOSHost get_SOSHost();
    [CompilerGeneratedAttribute]
public void set_SOSHost(SOSHost value);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(String[] value);
    public virtual void Invoke();
}
[ExtensionAttribute]
public static class Microsoft.Internal.Common.CommandExtensions : object {
    [ExtensionAttribute]
public static void Add(Command command, ICommandHandler handler);
    [ExtensionAttribute]
public static CommandLineBuilder UseToolsDefaults(CommandLineBuilder builder);
}
public class Microsoft.Internal.Common.Commands.ProcessStatusCommandHandler : object {
    public static Command ProcessStatusCommand(string description);
    private static void MakeFixedWidth(string text, int width, StringBuilder sb, bool leftPad, bool truncateFront);
    public static void ProcessStatus(IConsole console);
    private static Process GetProcessById(int processId);
    private static string GetArgs(Process process);
    [CompilerGeneratedAttribute]
internal static int <ProcessStatus>g__GetColumnWidth|4_0(IEnumerable`1<int> fieldWidths);
    [CompilerGeneratedAttribute]
internal static void <ProcessStatus>g__FormatTableRows|4_1(List`1<ProcessDetails> rows, StringBuilder tableText);
}
internal static class Microsoft.Internal.Common.Utils.CommandUtils : object {
    public static int FindProcessIdWithName(string name);
    public static bool ValidateArgumentsForChildProcess(int processId, string name, string port);
    public static bool ValidateArgumentsForAttach(int processId, string name, string port, Int32& resolvedProcessId);
}
internal class Microsoft.Internal.Common.Utils.LineRewriter : object {
    [CompilerGeneratedAttribute]
private int <LineToClear>k__BackingField;
    private static Nullable`1<bool> _isSetCursorPositionSupported;
    public int LineToClear { get; public set; }
    public bool IsRewriteConsoleLineSupported { get; }
    [CompilerGeneratedAttribute]
public int get_LineToClear();
    [CompilerGeneratedAttribute]
public void set_LineToClear(int value);
    public void RewriteConsoleLine();
    private void SystemConsoleLineRewriter();
    public bool get_IsRewriteConsoleLineSupported();
    [CompilerGeneratedAttribute]
private bool <get_IsRewriteConsoleLineSupported>g__EnsureInitialized|9_0();
}
internal static class Microsoft.Internal.Common.Utils.ProcessNativeMethods : object {
    public static int ProcessBasicInformation;
    public static int ProcessWow64Information;
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, Byte[] lpBuffer, IntPtr dwSize, IntPtr& lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, Byte[] lpBuffer, IntPtr dwSize, IntPtr lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, IntPtr& lpPtr, IntPtr dwSize, IntPtr& lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, UNICODE_STRING& lpBuffer, IntPtr dwSize, IntPtr lpNumberOfBytesRead);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, UNICODE_STRING_32& lpBuffer, IntPtr dwSize, IntPtr lpNumberOfBytesRead);
    public static bool OpenProcessToken(IntPtr hProcess, UInt32 dwDesiredAccess, IntPtr& processToken);
    public static bool IsWow64Process(IntPtr hProcess, Boolean& wow64Process);
    public static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, ProcessInformation& processInformation, int processInformationLength, Int32& returnLength);
    public static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, IntPtr& processInformation, int processInformationLength, Int32& returnLength);
}
internal enum Microsoft.Internal.Common.Utils.ReturnCode : Enum {
    public int value__;
    public static ReturnCode Ok;
    public static ReturnCode SessionCreationError;
    public static ReturnCode TracingError;
    public static ReturnCode ArgumentError;
    public static ReturnCode UnknownError;
}
internal static class Microsoft.Internal.Common.Utils.WindowsProcessExtension : object {
    public static string GetCommandLine(Process process);
    private static string GetCommandLineCore(IntPtr processHandle);
    private static bool ReadIntPtr(IntPtr hProcess, IntPtr ptr, IntPtr& readPtr);
    private static IntPtr GetPebNative(IntPtr hProcess);
    private static IntPtr GetPeb64(IntPtr hProcess);
    private static IntPtr GetPeb32(IntPtr hProcess);
    private static int GetProcessBitness(IntPtr hProcess);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
