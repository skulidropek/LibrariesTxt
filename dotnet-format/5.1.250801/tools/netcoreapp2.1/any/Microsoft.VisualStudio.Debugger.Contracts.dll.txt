[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.Debugger.Contracts.DebuggerAttachServiceInfo : object {
    public static string Moniker;
    public static string Version;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.Debugger.Contracts.DebuggerSymbolLocatorServiceInfo : object {
    public static string Moniker;
    public static string Version;
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ActiveStatementFlags : Enum {
    public int value__;
    public static ActiveStatementFlags None;
    public static ActiveStatementFlags IsLeafFrame;
    public static ActiveStatementFlags PartiallyExecuted;
    public static ActiveStatementFlags NonUserCode;
    public static ActiveStatementFlags MethodUpToDate;
    public static ActiveStatementFlags IsNonLeafFrame;
    public static ActiveStatementFlags IsStale;
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.DebugSessionFlags : Enum {
    public int value__;
    public static DebugSessionFlags None;
    public static DebugSessionFlags EditAndContinueDisabled;
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.IManagedEditAndContinueDebuggerService {
    public abstract virtual Task`1<ImmutableArray`1<ManagedActiveStatementDebugInfo>> GetActiveStatementsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ManagedEditAndContinueAvailability> GetAvailabilityAsync(Guid module, CancellationToken cancellationToken);
    public abstract virtual Task PrepareModuleForUpdateAsync(Guid module, CancellationToken cancellationToken);
    public abstract virtual Task`1<ImmutableArray`1<string>> GetCapabilitiesAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.IManagedEditAndContinueEngineRegistration {
    public abstract virtual Guid AddActiveEngine(IManagedEditAndContinueEngineService engineService, ManagedEditAndContinueEngineCapabilities capabilities);
    public abstract virtual void RemoveActiveEngine(Guid registrationId);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.IManagedEditAndContinueEngineService {
    public abstract virtual Task`1<ImmutableArray`1<ManagedActiveStatementDebugInfo>> GetActiveStatementsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ManagedEditAndContinueAvailability> GetAvailabilityAsync(Guid module, CancellationToken cancellationToken);
    public abstract virtual Task PrepareModuleForUpdateAsync(Guid module, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public abstract virtual Task ApplyCodeUpdatesAsync(ImmutableArray`1<ManagedModuleUpdate> updates, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.IManagedEditAndContinueLanguageService {
    public abstract virtual Task StartDebuggingAsync(DebugSessionFlags flags, CancellationToken cancellationToken);
    public abstract virtual Task EnterBreakStateAsync(CancellationToken cancellationToken);
    public abstract virtual Task ExitBreakStateAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopDebuggingAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> HasChangesAsync(string sourceFilePath, CancellationToken cancellationToken);
    public abstract virtual Task`1<ManagedModuleUpdates> GetManagedModuleUpdatesAsync(CancellationToken cancellationToken);
    public abstract virtual Task CommitUpdatesAsync(CancellationToken cancellationToken);
    public abstract virtual Task DiscardUpdatesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<SourceSpan>> GetCurrentActiveStatementPositionAsync(ManagedInstructionId activeInstruction, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<bool>> IsActiveStatementInExceptionRegionAsync(ManagedInstructionId activeInstruction, CancellationToken cancellationToken);
}
internal interface Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.IManagedEditAndContinueUpdateService {
    public abstract virtual Task ApplyCodeUpdatesAsync(ImmutableArray`1<ManagedModuleUpdate> updates, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedActiveStatementDebugInfo : ValueType {
    [CompilerGeneratedAttribute]
private ManagedInstructionId <ActiveInstruction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentName>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceSpan <SourceSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private ActiveStatementFlags <Flags>k__BackingField;
    [KeyAttribute("activeInstruction")]
public ManagedInstructionId ActiveInstruction { get; }
    [KeyAttribute("documentName")]
public string DocumentName { get; }
    [KeyAttribute("sourceSpan")]
public SourceSpan SourceSpan { get; }
    [KeyAttribute("flags")]
public ActiveStatementFlags Flags { get; }
    [IgnoreMemberAttribute]
public bool HasSourceLocation { get; }
    public ManagedActiveStatementDebugInfo(ManagedInstructionId activeInstruction, string documentName, SourceSpan sourceSpan, ActiveStatementFlags flags);
    [CompilerGeneratedAttribute]
public ManagedInstructionId get_ActiveInstruction();
    [CompilerGeneratedAttribute]
public string get_DocumentName();
    [CompilerGeneratedAttribute]
public SourceSpan get_SourceSpan();
    [CompilerGeneratedAttribute]
public ActiveStatementFlags get_Flags();
    public bool get_HasSourceLocation();
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedActiveStatementUpdate : ValueType {
    [CompilerGeneratedAttribute]
private ManagedModuleMethodId <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ILOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceSpan <NewSpan>k__BackingField;
    [KeyAttribute("method")]
public ManagedModuleMethodId Method { get; }
    [KeyAttribute("ilOffset")]
public int ILOffset { get; }
    [KeyAttribute("newSpan")]
public SourceSpan NewSpan { get; }
    public ManagedActiveStatementUpdate(ManagedModuleMethodId method, int ilOffset, SourceSpan newSpan);
    [CompilerGeneratedAttribute]
public ManagedModuleMethodId get_Method();
    [CompilerGeneratedAttribute]
public int get_ILOffset();
    [CompilerGeneratedAttribute]
public SourceSpan get_NewSpan();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedEditAndContinueAvailability : ValueType {
    [CompilerGeneratedAttribute]
private ManagedEditAndContinueAvailabilityStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizedMessage>k__BackingField;
    [KeyAttribute("status")]
public ManagedEditAndContinueAvailabilityStatus Status { get; }
    [KeyAttribute("localizedMessage")]
public string LocalizedMessage { get; }
    public ManagedEditAndContinueAvailability(ManagedEditAndContinueAvailabilityStatus status, string localizedMessage);
    [CompilerGeneratedAttribute]
public ManagedEditAndContinueAvailabilityStatus get_Status();
    [CompilerGeneratedAttribute]
public string get_LocalizedMessage();
}
internal enum Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedEditAndContinueAvailabilityStatus : Enum {
    public int value__;
    public static ManagedEditAndContinueAvailabilityStatus Available;
    public static ManagedEditAndContinueAvailabilityStatus Interop;
    public static ManagedEditAndContinueAvailabilityStatus SqlClr;
    public static ManagedEditAndContinueAvailabilityStatus Minidump;
    public static ManagedEditAndContinueAvailabilityStatus Attach;
    public static ManagedEditAndContinueAvailabilityStatus ModuleNotLoaded;
    public static ManagedEditAndContinueAvailabilityStatus ModuleReloaded;
    public static ManagedEditAndContinueAvailabilityStatus InRunMode;
    public static ManagedEditAndContinueAvailabilityStatus NotBuilt;
    public static ManagedEditAndContinueAvailabilityStatus EngineMetricFalse;
    public static ManagedEditAndContinueAvailabilityStatus NotSupportedForClr64Version;
    public static ManagedEditAndContinueAvailabilityStatus NotAllowedForModule;
    public static ManagedEditAndContinueAvailabilityStatus Optimized;
    public static ManagedEditAndContinueAvailabilityStatus DomainNeutralAssembly;
    public static ManagedEditAndContinueAvailabilityStatus ReflectionAssembly;
    public static ManagedEditAndContinueAvailabilityStatus IntelliTrace;
    public static ManagedEditAndContinueAvailabilityStatus NotAllowedForRuntime;
    public static ManagedEditAndContinueAvailabilityStatus InternalError;
    public static ManagedEditAndContinueAvailabilityStatus Unavailable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedEditAndContinueDebuggerServiceInfo : object {
    public static string Moniker;
    public static string Version;
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedEditAndContinueEngineCapabilities : Enum {
    public int value__;
    public static ManagedEditAndContinueEngineCapabilities None;
    public static ManagedEditAndContinueEngineCapabilities CanReplaceMethodsWhileStopped;
    public static ManagedEditAndContinueEngineCapabilities SupportsInMethodReplacements;
    public static ManagedEditAndContinueEngineCapabilities SupportsEditAndContinueOnModuleLoad;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedEditAndContinueLanguageServiceInfo : object {
    public static string Moniker;
    public static string Version;
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedExceptionRegionUpdate : ValueType {
    [CompilerGeneratedAttribute]
private ManagedModuleMethodId <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Delta>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceSpan <NewSpan>k__BackingField;
    [KeyAttribute("method")]
public ManagedModuleMethodId Method { get; }
    [KeyAttribute("delta")]
public int Delta { get; }
    [KeyAttribute("newSpan")]
public SourceSpan NewSpan { get; }
    public ManagedExceptionRegionUpdate(ManagedModuleMethodId method, int delta, SourceSpan newSpan);
    [CompilerGeneratedAttribute]
public ManagedModuleMethodId get_Method();
    [CompilerGeneratedAttribute]
public int get_Delta();
    [CompilerGeneratedAttribute]
public SourceSpan get_NewSpan();
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedInstructionId : ValueType {
    [CompilerGeneratedAttribute]
private ManagedMethodId <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ILOffset>k__BackingField;
    [KeyAttribute("method")]
public ManagedMethodId Method { get; }
    [KeyAttribute("ilOffset")]
public int ILOffset { get; }
    public ManagedInstructionId(ManagedMethodId method, int ilOffset);
    [CompilerGeneratedAttribute]
public ManagedMethodId get_Method();
    [CompilerGeneratedAttribute]
public int get_ILOffset();
    public sealed virtual bool Equals(ManagedInstructionId other);
    [NullableContextAttribute("1")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ManagedInstructionId left, ManagedInstructionId right);
    public static bool op_Inequality(ManagedInstructionId left, ManagedInstructionId right);
    [NullableContextAttribute("1")]
internal string GetDebuggerDisplay();
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedMethodId : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedModuleMethodId <Method>k__BackingField;
    [KeyAttribute("module")]
public Guid Module { get; }
    [KeyAttribute("method")]
public ManagedModuleMethodId Method { get; }
    [IgnoreMemberAttribute]
public int Token { get; }
    [IgnoreMemberAttribute]
public int Version { get; }
    public ManagedMethodId(Guid module, ManagedModuleMethodId method);
    public ManagedMethodId(Guid module, int token, int version);
    [CompilerGeneratedAttribute]
public Guid get_Module();
    [CompilerGeneratedAttribute]
public ManagedModuleMethodId get_Method();
    public int get_Token();
    public int get_Version();
    public sealed virtual bool Equals(ManagedMethodId other);
    [NullableContextAttribute("1")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ManagedMethodId left, ManagedMethodId right);
    public static bool op_Inequality(ManagedMethodId left, ManagedMethodId right);
    [NullableContextAttribute("1")]
internal string GetDebuggerDisplay();
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedModuleMethodId : ValueType {
    [CompilerGeneratedAttribute]
private int <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [KeyAttribute("token")]
public int Token { get; }
    [KeyAttribute("version")]
public int Version { get; }
    public ManagedModuleMethodId(int token, int version);
    [CompilerGeneratedAttribute]
public int get_Token();
    [CompilerGeneratedAttribute]
public int get_Version();
    public sealed virtual bool Equals(ManagedModuleMethodId other);
    [NullableContextAttribute("1")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ManagedModuleMethodId left, ManagedModuleMethodId right);
    public static bool op_Inequality(ManagedModuleMethodId left, ManagedModuleMethodId right);
    [NullableContextAttribute("1")]
internal string GetDebuggerDisplay();
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedModuleUpdate : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<byte> <ILDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<byte> <MetadataDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<byte> <PdbDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SequencePointUpdates> <SequencePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<int> <UpdatedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<int> <UpdatedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<ManagedActiveStatementUpdate> <ActiveStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<ManagedExceptionRegionUpdate> <ExceptionRegions>k__BackingField;
    [KeyAttribute("module")]
public Guid Module { get; }
    [KeyAttribute("ilDelta")]
public ImmutableArray`1<byte> ILDelta { get; }
    [KeyAttribute("metadataDelta")]
public ImmutableArray`1<byte> MetadataDelta { get; }
    [KeyAttribute("pdbDelta")]
public ImmutableArray`1<byte> PdbDelta { get; }
    [KeyAttribute("sequencePoints")]
public ImmutableArray`1<SequencePointUpdates> SequencePoints { get; }
    [KeyAttribute("updatedMethods")]
public ImmutableArray`1<int> UpdatedMethods { get; }
    [KeyAttribute("updatedTypes")]
public ImmutableArray`1<int> UpdatedTypes { get; }
    [KeyAttribute("activeStatements")]
public ImmutableArray`1<ManagedActiveStatementUpdate> ActiveStatements { get; }
    [KeyAttribute("exceptionRegions")]
public ImmutableArray`1<ManagedExceptionRegionUpdate> ExceptionRegions { get; }
    public ManagedModuleUpdate(Guid module, ImmutableArray`1<byte> ilDelta, ImmutableArray`1<byte> metadataDelta, ImmutableArray`1<byte> pdbDelta, ImmutableArray`1<SequencePointUpdates> sequencePoints, ImmutableArray`1<int> updatedMethods, ImmutableArray`1<int> updatedTypes, ImmutableArray`1<ManagedActiveStatementUpdate> activeStatements, ImmutableArray`1<ManagedExceptionRegionUpdate> exceptionRegions);
    [CompilerGeneratedAttribute]
public Guid get_Module();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<byte> get_ILDelta();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<byte> get_MetadataDelta();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<byte> get_PdbDelta();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SequencePointUpdates> get_SequencePoints();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<int> get_UpdatedMethods();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<int> get_UpdatedTypes();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<ManagedActiveStatementUpdate> get_ActiveStatements();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<ManagedExceptionRegionUpdate> get_ExceptionRegions();
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedModuleUpdates : ValueType {
    [CompilerGeneratedAttribute]
private ManagedModuleUpdateStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<ManagedModuleUpdate> <Updates>k__BackingField;
    [KeyAttribute("status")]
public ManagedModuleUpdateStatus Status { get; }
    [KeyAttribute("updates")]
public ImmutableArray`1<ManagedModuleUpdate> Updates { get; }
    public ManagedModuleUpdates(ManagedModuleUpdateStatus status, ImmutableArray`1<ManagedModuleUpdate> updates);
    [CompilerGeneratedAttribute]
public ManagedModuleUpdateStatus get_Status();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<ManagedModuleUpdate> get_Updates();
}
internal enum Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.ManagedModuleUpdateStatus : Enum {
    public int value__;
    public static ManagedModuleUpdateStatus None;
    public static ManagedModuleUpdateStatus Ready;
    public static ManagedModuleUpdateStatus Blocked;
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.SequencePointUpdates : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SourceLineUpdate> <LineUpdates>k__BackingField;
    [NullableAttribute("1")]
[KeyAttribute("fileName")]
public string FileName { get; }
    [KeyAttribute("lineUpdates")]
public ImmutableArray`1<SourceLineUpdate> LineUpdates { get; }
    public SequencePointUpdates(string fileName, ImmutableArray`1<SourceLineUpdate> lineUpdates);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SourceLineUpdate> get_LineUpdates();
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
internal class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.SourceLineUpdate : ValueType {
    [CompilerGeneratedAttribute]
private int <OldLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewLine>k__BackingField;
    [KeyAttribute("oldLine")]
public int OldLine { get; }
    [KeyAttribute("newLine")]
public int NewLine { get; }
    public SourceLineUpdate(int oldLine, int newLine);
    [CompilerGeneratedAttribute]
public int get_OldLine();
    [CompilerGeneratedAttribute]
public int get_NewLine();
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
public class Microsoft.VisualStudio.Debugger.Contracts.EditAndContinue.SourceSpan : ValueType {
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    [KeyAttribute("startLine")]
public int StartLine { get; }
    [KeyAttribute("startColumn")]
public int StartColumn { get; }
    [KeyAttribute("endLine")]
public int EndLine { get; }
    [KeyAttribute("endColumn")]
public int EndColumn { get; }
    public SourceSpan(int startLine, int startColumn, int endLine, int endColumn);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
public int get_EndColumn();
    public sealed virtual bool Equals(SourceSpan other);
    [NullableContextAttribute("1")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SourceSpan left, SourceSpan right);
    public static bool op_Inequality(SourceSpan left, SourceSpan right);
    [NullableContextAttribute("1")]
internal string GetDebuggerDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.Debugger.Contracts.EngineInfo : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsRemoteDebugging>k__BackingField;
    [KeyAttribute("0")]
public Guid Id { get; }
    [KeyAttribute("1")]
public string Name { get; }
    [KeyAttribute("2")]
public bool SupportsRemoteDebugging { get; }
    public EngineInfo(Guid id, string name, bool supportsRemote);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_SupportsRemoteDebugging();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Debugger.Contracts.HotReload.IHotReloadAgentManager {
    public abstract virtual ValueTask AgentStartedAsync(IManagedHotReloadAgent agent, CancellationToken cancellationToken);
    public abstract virtual ValueTask AgentTerminatedAsync(IManagedHotReloadAgent agent, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Debugger.Contracts.HotReload.IManagedHotReloadAgent {
    public abstract virtual ValueTask ApplyUpdatesAsync(ImmutableArray`1<ManagedHotReloadUpdate> updates, CancellationToken cancellationToken);
    public abstract virtual ValueTask ReportDiagnosticsAsync(ImmutableArray`1<ManagedHotReloadDiagnostic> diagnostics, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<ImmutableArray`1<string>> GetCapabilitiesAsync(CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.Debugger.Contracts.HotReload.IManagedHotReloadLanguageService {
    public abstract virtual ValueTask StartSessionAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<ManagedHotReloadUpdates> GetUpdatesAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask CommitUpdatesAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask DiscardUpdatesAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask EndSessionAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.VisualStudio.Debugger.Contracts.HotReload.IManagedHotReloadService {
    public abstract virtual ValueTask`1<ImmutableArray`1<string>> GetCapabilitiesAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.Debugger.Contracts.HotReload.ManagedHotReloadDiagnostic : ValueType {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedHotReloadDiagnosticSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceSpan <Span>k__BackingField;
    [KeyAttribute("id")]
public string Id { get; }
    [KeyAttribute("message")]
public string Message { get; }
    [KeyAttribute("severity")]
public ManagedHotReloadDiagnosticSeverity Severity { get; }
    [KeyAttribute("filePath")]
public string FilePath { get; }
    [KeyAttribute("span")]
public SourceSpan Span { get; }
    public ManagedHotReloadDiagnostic(string id, string message, ManagedHotReloadDiagnosticSeverity severity, string filePath, SourceSpan span);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public ManagedHotReloadDiagnosticSeverity get_Severity();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public SourceSpan get_Span();
}
public enum Microsoft.VisualStudio.Debugger.Contracts.HotReload.ManagedHotReloadDiagnosticSeverity : Enum {
    public int value__;
    public static ManagedHotReloadDiagnosticSeverity Warning;
    public static ManagedHotReloadDiagnosticSeverity Error;
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.Debugger.Contracts.HotReload.ManagedHotReloadUpdate : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<byte> <ILDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<byte> <MetadataDelta>k__BackingField;
    [KeyAttribute("module")]
public Guid Module { get; }
    [KeyAttribute("ilDelta")]
public ImmutableArray`1<byte> ILDelta { get; }
    [KeyAttribute("metadataDelta")]
public ImmutableArray`1<byte> MetadataDelta { get; }
    public ManagedHotReloadUpdate(Guid module, ImmutableArray`1<byte> ilDelta, ImmutableArray`1<byte> metadataDelta);
    [CompilerGeneratedAttribute]
public Guid get_Module();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<byte> get_ILDelta();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<byte> get_MetadataDelta();
}
[IsReadOnlyAttribute]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.Debugger.Contracts.HotReload.ManagedHotReloadUpdates : ValueType {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<ManagedHotReloadUpdate> <Updates>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<ManagedHotReloadDiagnostic> <Diagnostics>k__BackingField;
    [KeyAttribute("updates")]
public ImmutableArray`1<ManagedHotReloadUpdate> Updates { get; }
    [KeyAttribute("diagnostics")]
public ImmutableArray`1<ManagedHotReloadDiagnostic> Diagnostics { get; }
    public ManagedHotReloadUpdates(ImmutableArray`1<ManagedHotReloadUpdate> updates, ImmutableArray`1<ManagedHotReloadDiagnostic> diagnostics);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<ManagedHotReloadUpdate> get_Updates();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<ManagedHotReloadDiagnostic> get_Diagnostics();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Debugger.Contracts.IDebuggerAttachService {
    public abstract virtual Task`1<IReadOnlyCollection`1<PortSupplier>> GetPortSuppliersAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyCollection`1<ProcessInfo>> GetProcessesAsync(string connectionString, Guid supplierGuid, CancellationToken cancellationToken);
    public abstract virtual Task AttachToProcessAsync(string connectionString, Guid supplierGuid, UInt32 pid, IReadOnlyCollection`1<Guid> engines, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Debugger.Contracts.IDebuggerSymbolLocatorService {
    public abstract virtual Task`1<SymbolLocatorResult> GetSymbolFileAsync(SymbolLocatorPdbInfo pdbInfo, IProgress`1<SymbolLocatorProgress> progress, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.Debugger.Contracts.PortSupplier : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <PortPickerGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<EngineInfo> <SupportedEngines>k__BackingField;
    [KeyAttribute("0")]
public Guid Id { get; }
    [KeyAttribute("1")]
public string Name { get; }
    [KeyAttribute("2")]
public bool IsDefault { get; }
    [KeyAttribute("3")]
public Nullable`1<Guid> PortPickerGuid { get; }
    [KeyAttribute("4")]
public IReadOnlyCollection`1<EngineInfo> SupportedEngines { get; }
    public PortSupplier(Guid id, string name, bool isDefault, Nullable`1<Guid> portPickerGuid, IReadOnlyCollection`1<EngineInfo> supportedEngines);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_PortPickerGuid();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<EngineInfo> get_SupportedEngines();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MessagePackObjectAttribute("False")]
public class Microsoft.VisualStudio.Debugger.Contracts.ProcessInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionName>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessStateFlags <StateFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Guid> <AvailableEngines>k__BackingField;
    [KeyAttribute("0")]
public string FileName { get; }
    [KeyAttribute("1")]
public string BaseName { get; }
    [KeyAttribute("2")]
public string Title { get; }
    [KeyAttribute("3")]
public UInt32 PID { get; }
    [KeyAttribute("4")]
public UInt32 SessionId { get; }
    [KeyAttribute("5")]
public string SessionName { get; }
    [KeyAttribute("6")]
public ProcessStateFlags StateFlags { get; }
    [KeyAttribute("7")]
public IReadOnlyCollection`1<Guid> AvailableEngines { get; }
    public ProcessInfo(string fileName, string baseName, string title, UInt32 pid, UInt32 sessionId, string sessionName, ProcessStateFlags flags, IReadOnlyCollection`1<Guid> availableEngines);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public string get_BaseName();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public UInt32 get_PID();
    [CompilerGeneratedAttribute]
public UInt32 get_SessionId();
    [CompilerGeneratedAttribute]
public string get_SessionName();
    [CompilerGeneratedAttribute]
public ProcessStateFlags get_StateFlags();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Guid> get_AvailableEngines();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Debugger.Contracts.ProcessStateFlags : Enum {
    public int value__;
    public static ProcessStateFlags None;
    public static ProcessStateFlags DebuggerAttached;
}
internal class Microsoft.VisualStudio.Debugger.Contracts.SymbolLocatorPdbInfo : object {
}
internal class Microsoft.VisualStudio.Debugger.Contracts.SymbolLocatorProgress : object {
}
internal class Microsoft.VisualStudio.Debugger.Contracts.SymbolLocatorResult : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
