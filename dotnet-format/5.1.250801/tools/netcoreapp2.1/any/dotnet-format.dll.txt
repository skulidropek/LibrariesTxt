[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptionsExtensions : object {
    internal static string DotnetDiagnosticPrefix;
    internal static string DotnetAnalyzerDiagnosticPrefix;
    internal static string CategoryPrefix;
    internal static string SeveritySuffix;
    internal static string DotnetAnalyzerDiagnosticSeverityKey;
    internal static string GetDiagnosticIdBasedDotnetAnalyzerDiagnosticSeverityKey(string diagnosticId);
    internal static string GetCategoryBasedDotnetAnalyzerDiagnosticSeverityKey(string category);
    [ExtensionAttribute]
public static bool TryGetSeverityFromConfiguration(AnalyzerOptions analyzerOptions, SyntaxTree tree, Compilation compilation, DiagnosticDescriptor descriptor, ReportDiagnostic& severity);
    [ExtensionAttribute]
public static bool IsDiagnosticSeverityConfigured(AnalyzerConfigOptions analyzerConfigOptions, Project project, SyntaxTree tree, string diagnosticId, string diagnosticCategory);
    [ExtensionAttribute]
public static DiagnosticSeverity GetDiagnosticSeverity(AnalyzerConfigOptions analyzerConfigOptions, Project project, SyntaxTree tree, string diagnosticId, string diagnosticCategory);
    [ExtensionAttribute]
public static bool TryGetSeverityFromConfiguration(AnalyzerConfigOptions analyzerConfigOptions, Project project, SyntaxTree tree, string diagnosticId, string diagnosticCategory, ReportDiagnostic& severity);
    internal static bool TryParseSeverity(string value, ReportDiagnostic& severity);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzerFinderHelpers : object {
    [NullableContextAttribute("1")]
public static AnalyzersAndFixers LoadAnalyzersAndFixers(IEnumerable`1<Assembly> assemblies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzerFormatter : object {
    private string _name;
    private IAnalyzerInformationProvider _informationProvider;
    private IAnalyzerRunner _runner;
    private ICodeFixApplier _applier;
    [CompilerGeneratedAttribute]
private FixCategory <Category>k__BackingField;
    public static AnalyzerFormatter CodeStyleFormatter { get; }
    public static AnalyzerFormatter ThirdPartyFormatter { get; }
    public FixCategory Category { get; }
    public AnalyzerFormatter(string name, FixCategory category, IAnalyzerInformationProvider informationProvider, IAnalyzerRunner runner, ICodeFixApplier applier);
    public static AnalyzerFormatter get_CodeStyleFormatter();
    public static AnalyzerFormatter get_ThirdPartyFormatter();
    [CompilerGeneratedAttribute]
public sealed virtual FixCategory get_Category();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzerFormatter/<FormatAsync>d__12")]
public sealed virtual Task`1<Solution> FormatAsync(Solution solution, ImmutableArray`1<DocumentId> formattableDocuments, FormatOptions formatOptions, ILogger logger, List`1<FormattedFile> formattedFiles, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzerFormatter/<GetProjectDiagnosticsAsync>d__13")]
private Task`1<ImmutableDictionary`2<ProjectId, ImmutableHashSet`1<string>>> GetProjectDiagnosticsAsync(Solution solution, ImmutableDictionary`2<ProjectId, ImmutableArray`1<DiagnosticAnalyzer>> projectAnalyzers, ImmutableHashSet`1<string> formattablePaths, FormatOptions options, DiagnosticSeverity severity, ImmutableHashSet`1<string> fixableCompilerDiagnostics, ILogger logger, List`1<FormattedFile> formattedFiles, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzerFormatter/<FixDiagnosticsAsync>d__14")]
private Task`1<Solution> FixDiagnosticsAsync(Solution solution, ImmutableDictionary`2<ProjectId, ImmutableArray`1<DiagnosticAnalyzer>> projectAnalyzers, ImmutableArray`1<CodeFixProvider> allFixers, ImmutableDictionary`2<ProjectId, ImmutableHashSet`1<string>> projectDiagnostics, ImmutableHashSet`1<string> formattablePaths, DiagnosticSeverity severity, ImmutableHashSet`1<string> fixableCompilerDiagnostics, ILogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzerFormatter/<FilterAnalyzersAsync>d__15")]
internal static Task`1<ImmutableDictionary`2<ProjectId, ImmutableArray`1<DiagnosticAnalyzer>>> FilterAnalyzersAsync(Solution solution, ImmutableDictionary`2<ProjectId, AnalyzersAndFixers> projectAnalyzersAndFixers, ImmutableHashSet`1<string> formattablePaths, DiagnosticSeverity minimumSeverity, ImmutableHashSet`1<string> diagnostics, CancellationToken cancellationToken);
    private static bool DoesAnalyzerSupportLanguage(DiagnosticAnalyzer analyzer, string language);
    [CompilerGeneratedAttribute]
internal static void <GetProjectDiagnosticsAsync>g__LogDiagnosticLocations|13_4(Solution solution, IEnumerable`1<Diagnostic> diagnostics, bool saveFormattedFiles, bool changesAreErrors, ILogger logger, LogLevel logLevel, List`1<FormattedFile> formattedFiles);
    [CompilerGeneratedAttribute]
internal static ImmutableDictionary`2<string, ImmutableArray`1<CodeFixProvider>> <FixDiagnosticsAsync>g__CreateFixerMap|14_1(ImmutableArray`1<string> diagnosticIds, ImmutableArray`1<CodeFixProvider> fixers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzerReferenceInformationProvider : object {
    private static Dictionary`2<string, Assembly> s_pathsToAssemblies;
    private static object s_guard;
    private static AnalyzerReferenceInformationProvider();
    public sealed virtual ImmutableDictionary`2<ProjectId, AnalyzersAndFixers> GetAnalyzersAndFixers(Solution solution, FormatOptions formatOptions, ILogger logger);
    private AnalyzersAndFixers GetAnalyzersAndFixers(Project project);
    [NullableContextAttribute("2")]
private Assembly TryLoadAssemblyFrom(string path);
    public sealed virtual DiagnosticSeverity GetSeverity(FormatOptions formatOptions);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Assembly <GetAnalyzersAndFixers>b__3_0(AnalyzerReference reference);
}
internal class Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzerRunner : object {
    [NullableContextAttribute("1")]
public sealed virtual Task RunCodeAnalysisAsync(CodeAnalysisResult result, DiagnosticAnalyzer analyzers, Project project, ImmutableHashSet`1<string> formattableDocumentPaths, DiagnosticSeverity severity, ImmutableHashSet`1<string> fixableCompilerDiagnostics, ILogger logger, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzerRunner/<RunCodeAnalysisAsync>d__1")]
public sealed virtual Task RunCodeAnalysisAsync(CodeAnalysisResult result, ImmutableArray`1<DiagnosticAnalyzer> analyzers, Project project, ImmutableHashSet`1<string> formattableDocumentPaths, DiagnosticSeverity severity, ImmutableHashSet`1<string> fixableCompilerDiagnostics, ILogger logger, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <RunCodeAnalysisAsync>g__AllReferencedProjectsLoaded|1_1(Project project);
}
internal class Microsoft.CodeAnalysis.Tools.Analyzers.AnalyzersAndFixers : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticAnalyzer> <Analyzers>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<CodeFixProvider> <Fixers>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticAnalyzer> Analyzers { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<CodeFixProvider> Fixers { get; }
    public AnalyzersAndFixers(ImmutableArray`1<DiagnosticAnalyzer> analyzers, ImmutableArray`1<CodeFixProvider> fixers);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ImmutableArray`1<DiagnosticAnalyzer> get_Analyzers();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ImmutableArray`1<CodeFixProvider> get_Fixers();
    public void Deconstruct(ImmutableArray`1& analyzers, ImmutableArray`1& fixers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Analyzers.CodeAnalysisResult : object {
    private Dictionary`2<Project, List`1<Diagnostic>> _dictionary;
    public IReadOnlyDictionary`2<Project, List`1<Diagnostic>> Diagnostics { get; }
    internal void AddDiagnostic(Project project, Diagnostic diagnostic);
    public IReadOnlyDictionary`2<Project, List`1<Diagnostic>> get_Diagnostics();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Analyzers.CodeStyleInformationProvider : object {
    private static string s_executingPath;
    private string _featuresPath;
    private string _featuresCSharpPath;
    private string _featuresVisualBasicPath;
    private static CodeStyleInformationProvider();
    public sealed virtual ImmutableDictionary`2<ProjectId, AnalyzersAndFixers> GetAnalyzersAndFixers(Solution solution, FormatOptions formatOptions, ILogger logger);
    public sealed virtual DiagnosticSeverity GetSeverity(FormatOptions formatOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Tools.Analyzers.Extensions : object {
    [CompilerGeneratedAttribute]
private static Assembly <MicrosoftCodeAnalysisFeaturesAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private static Type <IDEDiagnosticIdToOptionMappingHelperType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TryGetMappedOptionsMethod>k__BackingField;
    private static Assembly MicrosoftCodeAnalysisFeaturesAssembly { get; }
    private static Type IDEDiagnosticIdToOptionMappingHelperType { get; }
    private static MethodInfo TryGetMappedOptionsMethod { get; }
    private static Extensions();
    [CompilerGeneratedAttribute]
private static Assembly get_MicrosoftCodeAnalysisFeaturesAssembly();
    [CompilerGeneratedAttribute]
private static Type get_IDEDiagnosticIdToOptionMappingHelperType();
    [CompilerGeneratedAttribute]
private static MethodInfo get_TryGetMappedOptionsMethod();
    [ExtensionAttribute]
public static bool Any(SolutionChanges solutionChanges);
    [ExtensionAttribute]
public static bool TryCreateInstance(Type type, T& instance);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Analyzers.Extensions/<GetSeverityAsync>d__12")]
[ExtensionAttribute]
public static Task`1<DiagnosticSeverity> GetSeverityAsync(DiagnosticAnalyzer analyzer, Project project, ImmutableHashSet`1<string> formattablePaths, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DiagnosticSeverity ToSeverity(ReportDiagnostic reportDiagnostic);
    [ExtensionAttribute]
private static DiagnosticSeverity GetSeverity(DiagnosticAnalyzer analyzer, Document document, AnalyzerOptions analyzerOptions, OptionSet options, Compilation compilation);
    [CompilerGeneratedAttribute]
internal static bool <GetSeverity>g__TryGetSeverityFromCodeStyleOption|14_0(DiagnosticDescriptor descriptor, Compilation compilation, OptionSet options, DiagnosticSeverity& severity);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.Tools.Analyzers.IAnalyzerInformationProvider {
    public abstract virtual DiagnosticSeverity GetSeverity(FormatOptions formatOptions);
    public abstract virtual ImmutableDictionary`2<ProjectId, AnalyzersAndFixers> GetAnalyzersAndFixers(Solution solution, FormatOptions formatOptions, ILogger logger);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.Tools.Analyzers.IAnalyzerRunner {
    public abstract virtual Task RunCodeAnalysisAsync(CodeAnalysisResult result, DiagnosticAnalyzer analyzers, Project project, ImmutableHashSet`1<string> formattableDocumentPaths, DiagnosticSeverity severity, ImmutableHashSet`1<string> fixableCompilerDiagnostics, ILogger logger, CancellationToken cancellationToken);
    public abstract virtual Task RunCodeAnalysisAsync(CodeAnalysisResult result, ImmutableArray`1<DiagnosticAnalyzer> analyzers, Project project, ImmutableHashSet`1<string> formattableDocumentPaths, DiagnosticSeverity severity, ImmutableHashSet`1<string> fixableCompilerDiagnostics, ILogger logger, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.Tools.Analyzers.ICodeFixApplier {
    public abstract virtual Task`1<Solution> ApplyCodeFixesAsync(Solution solution, CodeAnalysisResult result, CodeFixProvider codefixes, string diagnosticId, ILogger logger, CancellationToken cancellationToken);
}
internal class Microsoft.CodeAnalysis.Tools.Analyzers.SolutionCodeFixApplier : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Analyzers.SolutionCodeFixApplier/<ApplyCodeFixesAsync>d__0")]
public sealed virtual Task`1<Solution> ApplyCodeFixesAsync(Solution solution, CodeAnalysisResult result, CodeFixProvider codeFix, string diagnosticId, ILogger logger, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.Tools.CodeFormatter : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<ICodeFormatter> s_codeFormatters;
    private static CodeFormatter();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.CodeFormatter/<FormatWorkspaceAsync>d__1")]
public static Task`1<WorkspaceFormatResult> FormatWorkspaceAsync(FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken, string binaryLogPath);
    private static Workspace OpenFolderWorkspace(string workspacePath, SourceFileMatcher fileMatcher);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.CodeFormatter/<OpenMSBuildWorkspaceAsync>d__3")]
private static Task`1<Workspace> OpenMSBuildWorkspaceAsync(string solutionOrProjectPath, WorkspaceType workspaceType, bool noRestore, bool requiresSemantics, string binaryLogPath, bool logWorkspaceWarnings, ILogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.CodeFormatter/<RunCodeFormattersAsync>d__4")]
private static Task`1<Solution> RunCodeFormattersAsync(Solution solution, ImmutableArray`1<DocumentId> formattableDocuments, FormatOptions formatOptions, ILogger logger, List`1<FormattedFile> formattedFiles, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.CodeFormatter/<DetermineFormattableFilesAsync>d__5")]
internal static Task`1<ValueTuple`2<int, ImmutableArray`1<DocumentId>>> DetermineFormattableFilesAsync(Solution solution, string projectPath, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.Tools.FileChange : object {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatDescription>k__BackingField;
    public int LineNumber { get; }
    public int CharNumber { get; }
    public string DiagnosticId { get; }
    public string FormatDescription { get; }
    public FileChange(LinePosition changePosition, string diagnosticId, string formatDescription);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_CharNumber();
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [CompilerGeneratedAttribute]
public string get_FormatDescription();
}
[FlagsAttribute]
internal enum Microsoft.CodeAnalysis.Tools.FixCategory : Enum {
    public int value__;
    public static FixCategory None;
    public static FixCategory Whitespace;
    public static FixCategory CodeStyle;
    public static FixCategory Analyzers;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.CodeAnalysis.Tools.FixSeverity : object {
    public static string Error;
    public static string Warn;
    public static string Info;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Tools.FormatCommand : object {
    internal static String[] VerbosityLevels { get; }
    internal static String[] SeverityLevels { get; }
    internal static String[] get_VerbosityLevels();
    internal static String[] get_SeverityLevels();
    internal static RootCommand CreateCommandLineOptions();
    internal static string EnsureFolderNotSpecifiedWhenFixingAnalyzers(CommandResult symbolResult);
    internal static string EnsureFolderNotSpecifiedWhenFixingStyle(CommandResult symbolResult);
    internal static string EnsureFolderNotSpecifiedWithNoRestore(CommandResult symbolResult);
    internal static string EnsureFolderNotSpecifiedWhenLoggingBinlog(CommandResult symbolResult);
    [ExtensionAttribute]
internal static OptionResult GetOptionResult(CommandResult result, string alias);
    [ExtensionAttribute]
internal static T GetValueForOption(CommandResult result, string alias);
    [ExtensionAttribute]
internal static bool WasOptionUsed(ParseResult result, String[] aliases);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.FormatOptions : object {
    [CompilerGeneratedAttribute]
private string <WorkspaceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkspaceType <WorkspaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private FixCategory <FixCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticSeverity <CodeStyleSeverity>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticSeverity <AnalyzerSeverity>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<string> <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveFormattedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ChangesAreErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceFileMatcher <FileMatcher>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ReportPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeGeneratedFiles>k__BackingField;
    public string WorkspaceFilePath { get; }
    public WorkspaceType WorkspaceType { get; }
    public bool NoRestore { get; }
    public LogLevel LogLevel { get; }
    public FixCategory FixCategory { get; }
    public DiagnosticSeverity CodeStyleSeverity { get; }
    public DiagnosticSeverity AnalyzerSeverity { get; }
    public ImmutableHashSet`1<string> Diagnostics { get; }
    public bool SaveFormattedFiles { get; }
    public bool ChangesAreErrors { get; }
    public SourceFileMatcher FileMatcher { get; }
    [NullableAttribute("2")]
public string ReportPath { get; }
    public bool IncludeGeneratedFiles { get; }
    public FormatOptions(string workspaceFilePath, WorkspaceType workspaceType, bool noRestore, LogLevel logLevel, FixCategory fixCategory, DiagnosticSeverity codeStyleSeverity, DiagnosticSeverity analyzerSeverity, ImmutableHashSet`1<string> diagnostics, bool saveFormattedFiles, bool changesAreErrors, SourceFileMatcher fileMatcher, string reportPath, bool includeGeneratedFiles);
    [CompilerGeneratedAttribute]
public string get_WorkspaceFilePath();
    [CompilerGeneratedAttribute]
public WorkspaceType get_WorkspaceType();
    [CompilerGeneratedAttribute]
public bool get_NoRestore();
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public FixCategory get_FixCategory();
    [CompilerGeneratedAttribute]
public DiagnosticSeverity get_CodeStyleSeverity();
    [CompilerGeneratedAttribute]
public DiagnosticSeverity get_AnalyzerSeverity();
    [CompilerGeneratedAttribute]
public ImmutableHashSet`1<string> get_Diagnostics();
    [CompilerGeneratedAttribute]
public bool get_SaveFormattedFiles();
    [CompilerGeneratedAttribute]
public bool get_ChangesAreErrors();
    [CompilerGeneratedAttribute]
public SourceFileMatcher get_FileMatcher();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ReportPath();
    [CompilerGeneratedAttribute]
public bool get_IncludeGeneratedFiles();
    public void Deconstruct(String& workspaceFilePath, WorkspaceType& workspaceType, Boolean& noRestore, LogLevel& logLevel, FixCategory& fixCategory, DiagnosticSeverity& codeStyleSeverity, DiagnosticSeverity& analyzerSeverity, ImmutableHashSet`1& diagnostics, Boolean& saveFormattedFiles, Boolean& changesAreErrors, SourceFileMatcher& fileMatcher, String& reportPath, Boolean& includeGeneratedFiles);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.Tools.FormattedFile : object {
    [CompilerGeneratedAttribute]
private DocumentId <DocumentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FileChange> <FileChanges>k__BackingField;
    public DocumentId DocumentId { get; }
    public string FileName { get; }
    [NullableAttribute("2")]
public string FilePath { get; }
    public IEnumerable`1<FileChange> FileChanges { get; }
    public FormattedFile(Document document, IEnumerable`1<FileChange> fileChanges);
    [CompilerGeneratedAttribute]
public DocumentId get_DocumentId();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public IEnumerable`1<FileChange> get_FileChanges();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Formatters.CharsetFormatter : DocumentFormatter {
    protected string FormatWarningDescription { get; }
    private static Encoding Utf8 { get; }
    private static Encoding Latin1 { get; }
    public string Name { get; }
    public FixCategory Category { get; }
    protected virtual string get_FormatWarningDescription();
    private static Encoding get_Utf8();
    private static Encoding get_Latin1();
    public virtual string get_Name();
    public virtual FixCategory get_Category();
    internal virtual Task`1<SourceText> FormatFileAsync(Document document, SourceText sourceText, OptionSet optionSet, AnalyzerConfigOptions analyzerConfigOptions, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
    private static bool IsEncodingEquivalent(SourceText sourceText, Encoding encoding);
    private static Byte[] GetEncodedBytes(string text, Encoding encoding);
    private static bool TryGetCharset(AnalyzerConfigOptions analyzerConfigOptions, Encoding& encoding);
    public static Encoding GetCharset(string charsetOption);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.CodeAnalysis.Tools.Formatters.DocumentFormatter : object {
    protected string FormatWarningDescription { get; }
    public string Name { get; }
    public FixCategory Category { get; }
    protected abstract virtual string get_FormatWarningDescription();
    public abstract virtual string get_Name();
    public abstract virtual FixCategory get_Category();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.DocumentFormatter/<FormatAsync>d__6")]
public sealed virtual Task`1<Solution> FormatAsync(Solution solution, ImmutableArray`1<DocumentId> formattableDocuments, FormatOptions formatOptions, ILogger logger, List`1<FormattedFile> formattedFiles, CancellationToken cancellationToken);
    internal abstract virtual Task`1<SourceText> FormatFileAsync(Document document, SourceText sourceText, OptionSet optionSet, AnalyzerConfigOptions analyzerConfigOptions, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
    private ImmutableArray`1<ValueTuple`2<Document, Task`1<ValueTuple`2<SourceText, SourceText>>>> FormatFiles(Solution solution, ImmutableArray`1<DocumentId> formattableDocuments, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.DocumentFormatter/<GetFormattedSourceTextAsync>d__9")]
private Task`1<ValueTuple`2<SourceText, SourceText>> GetFormattedSourceTextAsync(Document document, OptionSet optionSet, AnalyzerConfigOptions analyzerConfigOptions, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.DocumentFormatter/<ApplyFileChangesAsync>d__10")]
private Task`1<Solution> ApplyFileChangesAsync(Solution solution, ImmutableArray`1<ValueTuple`2<Document, Task`1<ValueTuple`2<SourceText, SourceText>>>> formattedDocuments, FormatOptions formatOptions, ILogger logger, List`1<FormattedFile> formattedFiles, CancellationToken cancellationToken);
    private ImmutableArray`1<FileChange> GetFileChanges(FormatOptions formatOptions, Document document, SourceText originalText, SourceText formattedText, bool changesAreErrors, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.DocumentFormatter/<IsSameDocumentAndVersionAsync>d__12")]
protected static Task`1<bool> IsSameDocumentAndVersionAsync(Document a, Document b, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static string <GetFileChanges>g__BuildChangeMessage|11_0(TextChange change);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Formatters.EndOfLineFormatter : DocumentFormatter {
    protected string FormatWarningDescription { get; }
    public string Name { get; }
    public FixCategory Category { get; }
    protected virtual string get_FormatWarningDescription();
    public virtual string get_Name();
    public virtual FixCategory get_Category();
    internal virtual Task`1<SourceText> FormatFileAsync(Document document, SourceText sourceText, OptionSet optionSet, AnalyzerConfigOptions analyzerConfigOptions, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
    public static bool TryGetEndOfLine(AnalyzerConfigOptions analyzerConfigOptions, String& endOfLine);
    private static string GetEndOfLine(string endOfLineOption);
    internal static string GetEndOfLineOption(string newLine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Formatters.FinalNewlineFormatter : DocumentFormatter {
    protected string FormatWarningDescription { get; }
    public string Name { get; }
    public FixCategory Category { get; }
    protected virtual string get_FormatWarningDescription();
    public virtual string get_Name();
    public virtual FixCategory get_Category();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.FinalNewlineFormatter/<FormatFileAsync>d__6")]
internal virtual Task`1<SourceText> FormatFileAsync(Document document, SourceText sourceText, OptionSet optionSet, AnalyzerConfigOptions analyzerConfigOptions, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.Tools.Formatters.ICodeFormatter {
    public FixCategory Category { get; }
    public abstract virtual FixCategory get_Category();
    public abstract virtual Task`1<Solution> FormatAsync(Solution solution, ImmutableArray`1<DocumentId> formattableDocuments, FormatOptions options, ILogger logger, List`1<FormattedFile> formattedFiles, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Formatters.OrganizeImportsFormatter : DocumentFormatter {
    private DocumentFormatter _endOfLineFormatter;
    protected string FormatWarningDescription { get; }
    public string Name { get; }
    public FixCategory Category { get; }
    protected virtual string get_FormatWarningDescription();
    public virtual string get_Name();
    public virtual FixCategory get_Category();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.OrganizeImportsFormatter/<FormatFileAsync>d__7")]
internal virtual Task`1<SourceText> FormatFileAsync(Document document, SourceText sourceText, OptionSet optionSet, AnalyzerConfigOptions analyzerConfigOptions, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Formatters.UnnecessaryImportsFormatter : DocumentFormatter {
    internal static string IDE0005;
    internal static string Style;
    protected string FormatWarningDescription { get; }
    public string Name { get; }
    public FixCategory Category { get; }
    protected virtual string get_FormatWarningDescription();
    public virtual string get_Name();
    public virtual FixCategory get_Category();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.UnnecessaryImportsFormatter/<FormatFileAsync>d__8")]
internal virtual Task`1<SourceText> FormatFileAsync(Document document, SourceText sourceText, OptionSet optionSet, AnalyzerConfigOptions analyzerConfigOptions, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Formatters.WhitespaceFormatter : DocumentFormatter {
    protected string FormatWarningDescription { get; }
    public string Name { get; }
    public FixCategory Category { get; }
    protected virtual string get_FormatWarningDescription();
    public virtual string get_Name();
    public virtual FixCategory get_Category();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.WhitespaceFormatter/<FormatFileAsync>d__6")]
internal virtual Task`1<SourceText> FormatFileAsync(Document document, SourceText sourceText, OptionSet optionSet, AnalyzerConfigOptions analyzerConfigOptions, FormatOptions formatOptions, ILogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.WhitespaceFormatter/<GetFormattedDocument>d__7")]
private static Task`1<SourceText> GetFormattedDocument(Document document, OptionSet optionSet, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Formatters.WhitespaceFormatter/<GetFormattedDocumentWithDetailedChanges>d__8")]
private static Task`1<SourceText> GetFormattedDocumentWithDetailedChanges(Document document, SourceText sourceText, OptionSet optionSet, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Tools.ILoggerExtensions : object {
    private static string s_errorSeverityString;
    [CompilerGeneratedAttribute]
private static IIssueFormatter <IssueFormatter>k__BackingField;
    public static IIssueFormatter IssueFormatter { get; public set; }
    private static ILoggerExtensions();
    [CompilerGeneratedAttribute]
public static IIssueFormatter get_IssueFormatter();
    [CompilerGeneratedAttribute]
public static void set_IssueFormatter(IIssueFormatter value);
    [ExtensionAttribute]
public static string LogFormattingIssue(ILogger logger, Document document, string formatterName, FileChange fileChange, bool changesAreErrors);
    [ExtensionAttribute]
public static string LogDiagnosticIssue(ILogger logger, Document document, LinePosition diagnosticPosition, Diagnostic diagnostic, bool changesAreErrors);
    private static string LogIssue(ILogger logger, Document document, string severity, string issueId, int lineNumber, int charNumber, string message, bool changesAreErrors);
}
[NullableContextAttribute("1")]
public interface Microsoft.CodeAnalysis.Tools.Logging.IIssueFormatter {
    public abstract virtual string FormatIssue(Document document, string severity, string issueId, int lineNumber, int charNumber, string message);
}
internal class Microsoft.CodeAnalysis.Tools.Logging.MSBuildIssueFormatter : object {
    [NullableContextAttribute("1")]
public sealed virtual string FormatIssue(Document document, string severity, string issueId, int lineNumber, int charNumber, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    public static NullScope Instance { get; }
    private static NullScope();
    [CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Logging.SimpleConsoleLogger : object {
    private object _gate;
    private IConsole _console;
    private ITerminal _terminal;
    private LogLevel _minimalLogLevel;
    private LogLevel _minimalErrorLevel;
    private static ImmutableDictionary`2<LogLevel, ConsoleColor> LogLevelColorMap { get; }
    public SimpleConsoleLogger(IConsole console, LogLevel minimalLogLevel, LogLevel minimalErrorLevel);
    private static ImmutableDictionary`2<LogLevel, ConsoleColor> get_LogLevelColorMap();
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
    private void LogToTerminal(string message, LogLevel logLevel, bool logToErrorStream);
    private void LogToConsole(IConsole console, string message, bool logToErrorStream);
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Tools.Logging.SimpleConsoleLoggerFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILoggerFactory AddSimpleConsole(ILoggerFactory factory, IConsole console, LogLevel minimalLogLevel, LogLevel minimalErrorLevel);
}
internal class Microsoft.CodeAnalysis.Tools.Logging.SimpleConsoleLoggerProvider : object {
    [NullableAttribute("1")]
private IConsole _console;
    private LogLevel _minimalLogLevel;
    private LogLevel _minimalErrorLevel;
    [NullableContextAttribute("1")]
public SimpleConsoleLoggerProvider(IConsole console, LogLevel minimalLogLevel, LogLevel minimalErrorLevel);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Program : object {
    internal static int UnhandledExceptionExitCode;
    internal static int CheckFailedExitCode;
    internal static int UnableToLocateMSBuildExitCode;
    internal static int UnableToLocateDotNetCliExitCode;
    private static String[] s_standardInputKeywords;
    [NullableAttribute("2")]
private static ParseResult s_parseResult;
    private static Program();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Program/<Main>d__6")]
private static Task`1<int> Main(String[] args);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Program/<Run>d__7")]
public static Task`1<int> Run(string workspace, bool noRestore, bool folder, bool fixWhitespace, string fixStyle, string fixAnalyzers, String[] diagnostics, string verbosity, bool check, String[] include, String[] exclude, string report, bool includeGenerated, string binarylog, IConsole console);
    private static void HandleStandardInput(ILogger logger, String[]& include, String[]& exclude);
    internal static int GetExitCode(WorkspaceFormatResult formatResult, bool check);
    [NullableContextAttribute("2")]
internal static LogLevel GetLogLevel(string verbosity);
    [NullableContextAttribute("2")]
internal static DiagnosticSeverity GetSeverity(string severity);
    private static ILogger`1<Program> SetupLogging(IConsole console, LogLevel minimalLogLevel, LogLevel minimalErrorLevel);
    private static string GetVersion();
    [NullableContextAttribute("2")]
private static bool TryGetDotNetCliVersion(String& dotnetVersion);
    [NullableContextAttribute("2")]
private static bool TryLoadMSBuild(String& msBuildPath);
    internal static string GetRuntimeVersion();
    private static int <Main>(String[] args);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static string <Run>g__GetBinaryLogPath|7_1(ParseResult parseResult, string binarylog);
    [CompilerGeneratedAttribute]
internal static bool <HandleStandardInput>g__TryReadFromStandardInput|8_0(String[]& subject);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.Tools.Reflection.RemoveUnnecessaryImportsHelper : object {
    private static Assembly s_microsoftCodeAnalysisFeaturesAssembly;
    private static Type s_abstractRemoveUnnecessaryImportsCodeFixProviderType;
    private static MethodInfo s_removeUnnecessaryImportsAsyncMethod;
    private static RemoveUnnecessaryImportsHelper();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Reflection.RemoveUnnecessaryImportsHelper/<RemoveUnnecessaryImportsAsync>d__3")]
public static Task`1<Document> RemoveUnnecessaryImportsAsync(Document document, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.Tools.ReportWriter : object {
    public static void Write(string reportPath, IEnumerable`1<FormattedFile> formattedFiles, ILogger logger);
    private static string GetReportFilePath(string reportPath);
}
internal static class Microsoft.CodeAnalysis.Tools.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string The_project_file_0_does_not_exist { get; }
    internal static string The_solution_file_0_does_not_exist { get; }
    internal static string Both_a_MSBuild_project_file_and_solution_file_found_in_0_Specify_which_to_use_with_the_workspace_argument { get; }
    internal static string Could_not_find_a_MSBuild_project_or_solution_file_in_0_Specify_which_to_use_with_the_workspace_argument { get; }
    internal static string Failed_to_save_formatting_changes { get; }
    internal static string The_file_0_does_not_appear_to_be_a_valid_project_or_solution_file { get; }
    internal static string Multiple_MSBuild_project_files_found_in_0_Specify_which_to_use_with_the_workspace_argument { get; }
    internal static string Multiple_MSBuild_solution_files_found_in_0_Specify_which_to_use_with_the_workspace_argument { get; }
    internal static string Format_complete_in_0_ms { get; }
    internal static string Formatting_code_file_0 { get; }
    internal static string Formatting_code_files_in_workspace_0 { get; }
    internal static string Could_not_format_0_Format_currently_supports_only_CSharp_and_Visual_Basic_projects { get; }
    internal static string Formatted_0_of_1_files { get; }
    internal static string Loading_workspace { get; }
    internal static string Skipping_referenced_project_0 { get; }
    internal static string Set_the_verbosity_level_Allowed_values_are_quiet_minimal_normal_detailed_and_diagnostic { get; }
    internal static string A_path_to_a_solution_file_a_project_file_or_a_folder_containing_a_solution_or_project_file_If_a_path_is_not_specified_then_the_current_directory_is_used { get; }
    internal static string Formats_files_without_saving_changes_to_disk_Terminates_with_a_non_zero_exit_code_if_any_files_were_formatted { get; }
    internal static string A_list_of_relative_file_or_folder_paths_to_include_in_formatting_All_files_are_formatted_if_empty { get; }
    internal static string Formatted_code_file_0 { get; }
    internal static string Determining_formattable_files { get; }
    internal static string Complete_in_0_ms { get; }
    internal static string Running_formatters { get; }
    internal static string Warnings_were_encountered_while_loading_the_workspace_Set_the_verbosity_option_to_the_diagnostic_level_to_log_warnings { get; }
    internal static string Fix_final_newline { get; }
    internal static string Fix_end_of_line_marker { get; }
    internal static string Fix_whitespace_formatting { get; }
    internal static string Fix_file_encoding { get; }
    internal static string Whether_to_treat_the_workspace_argument_as_a_simple_folder_of_files { get; }
    internal static string Accepts_a_file_path_which_if_provided_will_produce_a_format_report_json_file_in_the_given_directory { get; }
    internal static string Writing_formatting_report_to_0 { get; }
    internal static string A_list_of_relative_file_or_folder_paths_to_exclude_from_formatting { get; }
    internal static string Using_msbuildexe_located_in_0 { get; }
    internal static string Unable_to_locate_MSBuild_Ensure_the_NET_SDK_was_installed_with_the_official_installer { get; }
    internal static string Include_generated_code_files_in_formatting_operations { get; }
    internal static string Standard_input_used_multiple_times { get; }
    internal static string Unable_to_locate_dotnet_CLI_Ensure_that_it_is_on_the_PATH { get; }
    internal static string The_dotnet_CLI_version_is_0 { get; }
    internal static string Fix_imports_ordering { get; }
    internal static string Unable_to_organize_imports_for_0_The_document_is_too_complex { get; }
    internal static string Run_code_style_analyzers_and_apply_fixes { get; }
    internal static string Run_3rd_party_analyzers_and_apply_fixes { get; }
    internal static string Analyzer_Reference { get; }
    internal static string Code_Style { get; }
    internal static string Analysis_complete_in_0ms_ { get; }
    internal static string Determining_diagnostics { get; }
    internal static string Failed_to_apply_code_fix_0_for_1_2 { get; }
    internal static string Fixing_diagnostics { get; }
    internal static string Running_0_analysis { get; }
    internal static string Solution_0_has__no_projects { get; }
    internal static string Unable_to_fix_0_Code_fix_1_doesnt_support_Fix_All_in_Solution { get; }
    internal static string Unable_to_fix_0_No_associated_code_fix_found { get; }
    internal static string Required_references_did_not_load_for_0_or_referenced_project_Run_dotnet_restore_prior_to_formatting { get; }
    internal static string Running_0_analyzers_on_1 { get; }
    internal static string The_dotnet_runtime_version_is_0 { get; }
    internal static string Remove_unnecessary_import { get; }
    internal static string Unable_to_fix_0_Code_fix_1_didnt_return_a_Fix_All_action { get; }
    internal static string Unable_to_fix_0_Code_fix_1_returned_an_unexpected_operation { get; }
    internal static string Run_whitespace_formatting_Run_by_default_when_not_applying_fixes { get; }
    internal static string The_dotnet_format_version_is_0 { get; }
    internal static string A_space_separated_list_of_diagnostic_ids_to_use_as_a_filter_when_fixing_code_style_or_3rd_party_issues { get; }
    internal static string The_diagnostics_option_only_applies_when_fixing_style_or_running_analyzers { get; }
    internal static string Cannot_specify_the_folder_option_when_running_analyzers { get; }
    internal static string Cannot_specify_the_folder_option_when_fixing_style { get; }
    internal static string Project_0_is_using_configuration_from_1 { get; }
    internal static string Doesnt_execute_an_implicit_restore_before_formatting { get; }
    internal static string Cannot_specify_the_folder_option_with_no_restore { get; }
    internal static string Delete_0_characters { get; }
    internal static string Insert_0 { get; }
    internal static string Replace_0_characters_with_1 { get; }
    internal static string Log_all_project_or_solution_load_information_to_a_binary_log_file { get; }
    internal static string Cannot_specify_the_folder_option_when_writing_a_binary_log { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_The_project_file_0_does_not_exist();
    internal static string get_The_solution_file_0_does_not_exist();
    internal static string get_Both_a_MSBuild_project_file_and_solution_file_found_in_0_Specify_which_to_use_with_the_workspace_argument();
    internal static string get_Could_not_find_a_MSBuild_project_or_solution_file_in_0_Specify_which_to_use_with_the_workspace_argument();
    internal static string get_Failed_to_save_formatting_changes();
    internal static string get_The_file_0_does_not_appear_to_be_a_valid_project_or_solution_file();
    internal static string get_Multiple_MSBuild_project_files_found_in_0_Specify_which_to_use_with_the_workspace_argument();
    internal static string get_Multiple_MSBuild_solution_files_found_in_0_Specify_which_to_use_with_the_workspace_argument();
    internal static string get_Format_complete_in_0_ms();
    internal static string get_Formatting_code_file_0();
    internal static string get_Formatting_code_files_in_workspace_0();
    internal static string get_Could_not_format_0_Format_currently_supports_only_CSharp_and_Visual_Basic_projects();
    internal static string get_Formatted_0_of_1_files();
    internal static string get_Loading_workspace();
    internal static string get_Skipping_referenced_project_0();
    internal static string get_Set_the_verbosity_level_Allowed_values_are_quiet_minimal_normal_detailed_and_diagnostic();
    internal static string get_A_path_to_a_solution_file_a_project_file_or_a_folder_containing_a_solution_or_project_file_If_a_path_is_not_specified_then_the_current_directory_is_used();
    internal static string get_Formats_files_without_saving_changes_to_disk_Terminates_with_a_non_zero_exit_code_if_any_files_were_formatted();
    internal static string get_A_list_of_relative_file_or_folder_paths_to_include_in_formatting_All_files_are_formatted_if_empty();
    internal static string get_Formatted_code_file_0();
    internal static string get_Determining_formattable_files();
    internal static string get_Complete_in_0_ms();
    internal static string get_Running_formatters();
    internal static string get_Warnings_were_encountered_while_loading_the_workspace_Set_the_verbosity_option_to_the_diagnostic_level_to_log_warnings();
    internal static string get_Fix_final_newline();
    internal static string get_Fix_end_of_line_marker();
    internal static string get_Fix_whitespace_formatting();
    internal static string get_Fix_file_encoding();
    internal static string get_Whether_to_treat_the_workspace_argument_as_a_simple_folder_of_files();
    internal static string get_Accepts_a_file_path_which_if_provided_will_produce_a_format_report_json_file_in_the_given_directory();
    internal static string get_Writing_formatting_report_to_0();
    internal static string get_A_list_of_relative_file_or_folder_paths_to_exclude_from_formatting();
    internal static string get_Using_msbuildexe_located_in_0();
    internal static string get_Unable_to_locate_MSBuild_Ensure_the_NET_SDK_was_installed_with_the_official_installer();
    internal static string get_Include_generated_code_files_in_formatting_operations();
    internal static string get_Standard_input_used_multiple_times();
    internal static string get_Unable_to_locate_dotnet_CLI_Ensure_that_it_is_on_the_PATH();
    internal static string get_The_dotnet_CLI_version_is_0();
    internal static string get_Fix_imports_ordering();
    internal static string get_Unable_to_organize_imports_for_0_The_document_is_too_complex();
    internal static string get_Run_code_style_analyzers_and_apply_fixes();
    internal static string get_Run_3rd_party_analyzers_and_apply_fixes();
    internal static string get_Analyzer_Reference();
    internal static string get_Code_Style();
    internal static string get_Analysis_complete_in_0ms_();
    internal static string get_Determining_diagnostics();
    internal static string get_Failed_to_apply_code_fix_0_for_1_2();
    internal static string get_Fixing_diagnostics();
    internal static string get_Running_0_analysis();
    internal static string get_Solution_0_has__no_projects();
    internal static string get_Unable_to_fix_0_Code_fix_1_doesnt_support_Fix_All_in_Solution();
    internal static string get_Unable_to_fix_0_No_associated_code_fix_found();
    internal static string get_Required_references_did_not_load_for_0_or_referenced_project_Run_dotnet_restore_prior_to_formatting();
    internal static string get_Running_0_analyzers_on_1();
    internal static string get_The_dotnet_runtime_version_is_0();
    internal static string get_Remove_unnecessary_import();
    internal static string get_Unable_to_fix_0_Code_fix_1_didnt_return_a_Fix_All_action();
    internal static string get_Unable_to_fix_0_Code_fix_1_returned_an_unexpected_operation();
    internal static string get_Run_whitespace_formatting_Run_by_default_when_not_applying_fixes();
    internal static string get_The_dotnet_format_version_is_0();
    internal static string get_A_space_separated_list_of_diagnostic_ids_to_use_as_a_filter_when_fixing_code_style_or_3rd_party_issues();
    internal static string get_The_diagnostics_option_only_applies_when_fixing_style_or_running_analyzers();
    internal static string get_Cannot_specify_the_folder_option_when_running_analyzers();
    internal static string get_Cannot_specify_the_folder_option_when_fixing_style();
    internal static string get_Project_0_is_using_configuration_from_1();
    internal static string get_Doesnt_execute_an_implicit_restore_before_formatting();
    internal static string get_Cannot_specify_the_folder_option_with_no_restore();
    internal static string get_Delete_0_characters();
    internal static string get_Insert_0();
    internal static string get_Replace_0_characters_with_1();
    internal static string get_Log_all_project_or_solution_load_information_to_a_binary_log_file();
    internal static string get_Cannot_specify_the_folder_option_when_writing_a_binary_log();
}
internal static class Microsoft.CodeAnalysis.Tools.Tests.Utilities.DotNetHelper : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Tests.Utilities.DotNetHelper/<PerformRestoreAsync>d__0")]
public static Task`1<int> PerformRestoreAsync(string workspaceFilePath, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.Tools.Utilities.AssemblyResolver : object {
    private static String[] s_extensions;
    private static AssemblyResolver();
    internal static Assembly TryResolveAssemblyFromPaths(AssemblyLoadContext context, AssemblyName assemblyName, string searchPath, Dictionary`2<string, Assembly> knownAssemblyPaths, ILogger logger);
}
internal static class Microsoft.CodeAnalysis.Tools.Utilities.EditorConfigFinder : object {
    [NullableContextAttribute("1")]
public static ImmutableArray`1<string> GetEditorConfigPaths(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Utilities.EditorConfigOptions : AnalyzerConfigOptions {
    private IReadOnlyDictionary`2<string, string> _backing;
    public EditorConfigOptions(IReadOnlyDictionary`2<string, string> backing);
    public virtual bool TryGetValue(string key, String& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.Tools.Utilities.GeneratedCodeUtilities : object {
    private static String[] s_autoGeneratedStrings;
    private static Func`2<SyntaxTrivia, bool> s_isCSharpCommentTrivia;
    private static Func`2<SyntaxTrivia, bool> s_isVisualBasicCommentTrivia;
    private static GeneratedCodeUtilities();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Utilities.GeneratedCodeUtilities/<IsGeneratedCodeAsync>d__3")]
internal static Task`1<bool> IsGeneratedCodeAsync(SyntaxTree syntaxTree, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static bool IsGeneratedCodeFileName(string filePath);
    private static bool BeginsWithAutoGeneratedComment(SyntaxNode syntaxRoot, Func`2<SyntaxTrivia, bool> isComment);
    internal static Nullable`1<bool> GetIsGeneratedCodeFromOptions(AnalyzerConfigOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.CodeAnalysis.Tools.Utilities.ProcessInfo : ValueType {
    [CompilerGeneratedAttribute]
private Process <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessStartInfo <StartInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<ProcessResult> <Result>k__BackingField;
    public Process Process { get; }
    public ProcessStartInfo StartInfo { get; }
    public Task`1<ProcessResult> Result { get; }
    public int Id { get; }
    public ProcessInfo(Process process, ProcessStartInfo startInfo, Task`1<ProcessResult> result);
    [CompilerGeneratedAttribute]
public Process get_Process();
    [CompilerGeneratedAttribute]
public ProcessStartInfo get_StartInfo();
    [CompilerGeneratedAttribute]
public Task`1<ProcessResult> get_Result();
    public int get_Id();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.CodeAnalysis.Tools.Utilities.ProcessResult : ValueType {
    [CompilerGeneratedAttribute]
private Process <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <OutputLines>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <ErrorLines>k__BackingField;
    public Process Process { get; }
    public int ExitCode { get; }
    public ReadOnlyCollection`1<string> OutputLines { get; }
    public ReadOnlyCollection`1<string> ErrorLines { get; }
    public ProcessResult(Process process, int exitCode, ReadOnlyCollection`1<string> outputLines, ReadOnlyCollection`1<string> errorLines);
    [CompilerGeneratedAttribute]
public Process get_Process();
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_OutputLines();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_ErrorLines();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.CodeAnalysis.Tools.Utilities.ProcessRunner : object {
    public static void OpenFile(string file);
    public static ProcessInfo CreateProcess(string executable, string arguments, bool lowPriority, string workingDirectory, bool captureOutput, bool displayWindow, Dictionary`2<string, string> environmentVariables, Action`1<Process> onProcessStartHandler, CancellationToken cancellationToken);
    public static ProcessInfo CreateProcess(ProcessStartInfo processStartInfo, bool lowPriority, Action`1<Process> onProcessStartHandler, CancellationToken cancellationToken);
    public static ProcessStartInfo CreateProcessStartInfo(string executable, string arguments, string workingDirectory, bool captureOutput, bool displayWindow, Dictionary`2<string, string> environmentVariables);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Utilities.SourceFileMatcher : object {
    private Matcher _matcher;
    private bool _shouldMatchAll;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <Include>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <Exclude>k__BackingField;
    private static String[] AllFilesList { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> Include { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> Exclude { get; }
    private SourceFileMatcher(String[] include, String[] exclude);
    private static String[] get_AllFilesList();
    public static SourceFileMatcher CreateMatcher(String[] include, String[] exclude);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_Include();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_Exclude();
    public bool HasMatches(string filePath);
    public IEnumerable`1<string> GetResultsInFullPath(string directoryPath);
}
internal class Microsoft.CodeAnalysis.Tools.WorkspaceFormatResult : object {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FilesFormatted>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileCount>k__BackingField;
    public int ExitCode { get; }
    public int FilesFormatted { get; }
    public int FileCount { get; }
    public WorkspaceFormatResult(int filesFormatted, int fileCount, int exitCode);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
public int get_FilesFormatted();
    [CompilerGeneratedAttribute]
public int get_FileCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Workspaces.FolderWorkspace : Workspace {
    private static Encoding DefaultEncoding { get; }
    private FolderWorkspace(HostServices hostServices);
    private static Encoding get_DefaultEncoding();
    public static FolderWorkspace Create();
    public static FolderWorkspace Create(HostServices hostServices);
    public Solution OpenFolder(string folderPath, SourceFileMatcher fileMatcher);
    public virtual bool CanApplyChange(ApplyChangesKind feature);
    protected virtual void ApplyDocumentTextChanged(DocumentId documentId, SourceText text);
    private void SaveDocumentText(DocumentId id, string fullPath, SourceText newText, Encoding encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Tools.Workspaces.MSBuildWorkspaceFinder : object {
    private static string DnxProjectExtension;
    public static ValueTuple`2<bool, string> FindWorkspace(string searchDirectory, string workspacePath);
    private static ValueTuple`2<bool, string> FindFile(string workspacePath);
    private static IEnumerable`1<string> FindSolutionFiles(string basePath);
    private static IEnumerable`1<string> FindProjectFiles(string basePath);
    private static string FindMatchingFile(string searchBase, Func`2<string, IEnumerable`1<string>> fileSelector, string multipleFilesFoundError);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.Tools.Workspaces.MSBuildWorkspaceLoader : object {
    internal static SemaphoreSlim Guard;
    private static MSBuildWorkspaceLoader();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Workspaces.MSBuildWorkspaceLoader/<LoadAsync>d__1")]
public static Task`1<Workspace> LoadAsync(string solutionOrProjectPath, WorkspaceType workspaceType, string binaryLogPath, bool logWorkspaceWarnings, ILogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Tools.Workspaces.MSBuildWorkspaceLoader/<LockedLoadAsync>d__2")]
internal static Task`1<Workspace> LockedLoadAsync(string solutionOrProjectPath, WorkspaceType workspaceType, string binaryLogPath, bool logWorkspaceWarnings, ILogger logger, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <LoadAsync>g__LogWorkspaceDiagnostics|1_0(ILogger logger, bool logWorkspaceWarnings, ImmutableList`1<WorkspaceDiagnostic> diagnostics);
}
internal enum Microsoft.CodeAnalysis.Tools.WorkspaceType : Enum {
    public int value__;
    public static WorkspaceType Folder;
    public static WorkspaceType Project;
    public static WorkspaceType Solution;
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[IsReadOnlyAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
