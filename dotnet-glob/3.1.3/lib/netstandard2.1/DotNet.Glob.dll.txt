public class DotNet.Globbing.Evaluation.AnyCharacterTokenEvaluator : object {
    private AnyCharacterToken _token;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public AnyCharacterTokenEvaluator(AnyCharacterToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.Evaluation.CharacterListTokenEvaluator : object {
    private CharacterListToken _token;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public CharacterListTokenEvaluator(CharacterListToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    private bool IsMatch(char containsChar);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.Evaluation.CharacterListTokenEvaluatorCaseInsensitive : object {
    private CharacterListToken _token;
    private Char[] _charactersAsUpperInvariant;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public CharacterListTokenEvaluatorCaseInsensitive(CharacterListToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    private bool IsMatch(char containsChar);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.Evaluation.CompositeTokenEvaluator : object {
    private IGlobTokenEvaluatorFactory _evaluatorFactory;
    private IGlobToken[] _Tokens;
    private List`1<IGlobTokenEvaluator> _Evaluators;
    public int _currentTokenIndex;
    private bool _finished;
    [CompilerGeneratedAttribute]
private int <ConsumesMinLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConsumesVariableLength>k__BackingField;
    public int ConsumesMinLength { get; protected set; }
    public bool ConsumesVariableLength { get; protected set; }
    public int EvaluatorCount { get; }
    public CompositeTokenEvaluator(IGlobToken[] tokens, IGlobTokenEvaluatorFactory evaluatorFactory);
    public sealed virtual void Visit(PathSeparatorToken token);
    public sealed virtual void Visit(LiteralToken token);
    public sealed virtual void Visit(AnyCharacterToken token);
    public sealed virtual void Visit(LetterRangeToken token);
    public sealed virtual void Visit(NumberRangeToken token);
    public sealed virtual void Visit(CharacterListToken token);
    public sealed virtual void Visit(WildcardToken token);
    public sealed virtual void Visit(WildcardDirectoryToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ConsumesMinLength();
    [CompilerGeneratedAttribute]
protected void set_ConsumesMinLength(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ConsumesVariableLength();
    [CompilerGeneratedAttribute]
protected void set_ConsumesVariableLength(bool value);
    public int get_EvaluatorCount();
    protected void AddEvaluator(IGlobTokenEvaluator evaluator);
}
public class DotNet.Globbing.Evaluation.GlobTokenEvaluator : object {
    public int _currentCharIndex;
    public int _currentChar;
    private CompositeTokenEvaluator _rootTokenEvaluator;
    private EvaluationOptions _options;
    public GlobTokenEvaluator(EvaluationOptions options, IGlobToken[] tokens);
    public bool IsMatch(string subject);
    public bool IsMatch(ReadOnlySpan`1<char> subject);
}
public class DotNet.Globbing.Evaluation.GlobTokenEvaluatorFactory : object {
    private EvaluationOptions _options;
    public GlobTokenEvaluatorFactory(EvaluationOptions options);
    public sealed virtual IGlobTokenEvaluator CreateTokenEvaluator(AnyCharacterToken token);
    public sealed virtual IGlobTokenEvaluator CreateTokenEvaluator(CharacterListToken token);
    public sealed virtual IGlobTokenEvaluator CreateTokenEvaluator(LetterRangeToken token);
    public sealed virtual IGlobTokenEvaluator CreateTokenEvaluator(LiteralToken token);
    public sealed virtual IGlobTokenEvaluator CreateTokenEvaluator(NumberRangeToken token);
    public sealed virtual IGlobTokenEvaluator CreateTokenEvaluator(PathSeparatorToken token);
    public sealed virtual IGlobTokenEvaluator CreateTokenEvaluator(WildcardDirectoryToken token, CompositeTokenEvaluator nestedCompositeTokenEvaluator);
    public sealed virtual IGlobTokenEvaluator CreateTokenEvaluator(WildcardToken token, CompositeTokenEvaluator nestedCompositeTokenEvaluator);
}
public class DotNet.Globbing.Evaluation.GlobTokenMatchAnalysisEvaluator : object {
    private IGlobToken[] _Tokens;
    private GlobStringReader _Reader;
    public Queue`1<IGlobToken> _TokenQueue;
    public string _text;
    [CompilerGeneratedAttribute]
private List`1<GlobTokenMatch> <MatchedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public List`1<GlobTokenMatch> MatchedTokens { get; public set; }
    public bool Success { get; public set; }
    public GlobTokenMatchAnalysisEvaluator(IGlobToken[] tokens);
    [CompilerGeneratedAttribute]
public List`1<GlobTokenMatch> get_MatchedTokens();
    [CompilerGeneratedAttribute]
public void set_MatchedTokens(List`1<GlobTokenMatch> value);
    private void EnqueueTokens(IGlobToken[] tokens);
    public MatchInfo Evaluate(string text);
    private MatchInfo SuccessfulResult();
    private MatchInfo FailedResult(IGlobToken token);
    public sealed virtual void Visit(PathSeparatorToken token);
    public sealed virtual void Visit(LiteralToken token);
    public sealed virtual void Visit(AnyCharacterToken token);
    public sealed virtual void Visit(WildcardToken token);
    public sealed virtual void Visit(WildcardDirectoryToken token);
    public sealed virtual void Visit(LetterRangeToken token);
    public sealed virtual void Visit(NumberRangeToken token);
    public sealed virtual void Visit(CharacterListToken token);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    private void AddMatch(GlobTokenMatch match);
}
public interface DotNet.Globbing.Evaluation.IGlobTokenEvaluator {
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public abstract virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    public abstract virtual int get_ConsumesMinLength();
    public abstract virtual bool get_ConsumesVariableLength();
}
public interface DotNet.Globbing.Evaluation.IGlobTokenEvaluatorFactory {
    public abstract virtual IGlobTokenEvaluator CreateTokenEvaluator(AnyCharacterToken token);
    public abstract virtual IGlobTokenEvaluator CreateTokenEvaluator(CharacterListToken token);
    public abstract virtual IGlobTokenEvaluator CreateTokenEvaluator(LetterRangeToken token);
    public abstract virtual IGlobTokenEvaluator CreateTokenEvaluator(LiteralToken token);
    public abstract virtual IGlobTokenEvaluator CreateTokenEvaluator(NumberRangeToken token);
    public abstract virtual IGlobTokenEvaluator CreateTokenEvaluator(PathSeparatorToken token);
    public abstract virtual IGlobTokenEvaluator CreateTokenEvaluator(WildcardDirectoryToken token, CompositeTokenEvaluator nestedCompositeTokenEvaluator);
    public abstract virtual IGlobTokenEvaluator CreateTokenEvaluator(WildcardToken token, CompositeTokenEvaluator nestedCompositeTokenEvaluator);
}
public class DotNet.Globbing.Evaluation.LetterRangeTokenEvaluator : object {
    private LetterRangeToken _token;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public LetterRangeTokenEvaluator(LetterRangeToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    private bool IsMatch(char testChar);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.Evaluation.LetterRangeTokenEvaluatorCaseInsensitive : object {
    private LetterRangeToken _token;
    private char _startUpperInvariant;
    private char _endUpperInvariant;
    private char _startLowerInvariant;
    private char _endLowerInvariant;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public LetterRangeTokenEvaluatorCaseInsensitive(LetterRangeToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    private bool IsMatch(char containsChar);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.Evaluation.LiteralTokenEvaluator : object {
    private LiteralToken _token;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public LiteralTokenEvaluator(LiteralToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    private bool IsMatch(char containsChar, int position);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.Evaluation.LiteralTokenEvaluatorCaseInsensitive : object {
    private LiteralToken _token;
    private string _literalAsUpperInvariant;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public LiteralTokenEvaluatorCaseInsensitive(LiteralToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    public bool IsMatch(char containsChar, int position);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.Evaluation.NumberRangeTokenEvaluator : object {
    private NumberRangeToken _token;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public NumberRangeTokenEvaluator(NumberRangeToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.Evaluation.PathSeparatorTokenEvaluator : object {
    private PathSeparatorToken _token;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public PathSeparatorTokenEvaluator(PathSeparatorToken token);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
internal class DotNet.Globbing.Evaluation.WildcardDirectoryTokenEvaluator : object {
    private WildcardDirectoryToken _token;
    private CompositeTokenEvaluator _subEvaluator;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public WildcardDirectoryTokenEvaluator(WildcardDirectoryToken token, CompositeTokenEvaluator subEvaluator);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.Evaluation.WildcardTokenEvaluator : object {
    private WildcardToken _token;
    private CompositeTokenEvaluator _subEvaluator;
    private bool _requiresSubEvaluation;
    public int ConsumesMinLength { get; }
    public bool ConsumesVariableLength { get; }
    public WildcardTokenEvaluator(WildcardToken token, CompositeTokenEvaluator subEvaluator);
    public sealed virtual bool IsMatch(ReadOnlySpan`1<char> allChars, int currentPosition, Int32& newPosition);
    public virtual int get_ConsumesMinLength();
    public sealed virtual bool get_ConsumesVariableLength();
}
public class DotNet.Globbing.EvaluationOptions : object {
    [CompilerGeneratedAttribute]
private bool <CaseInsensitive>k__BackingField;
    public bool CaseInsensitive { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CaseInsensitive();
    [CompilerGeneratedAttribute]
public void set_CaseInsensitive(bool value);
    public virtual IGlobTokenEvaluatorFactory GetTokenEvaluatorFactory();
}
internal class DotNet.Globbing.Generation.AnyCharacterTokenMatchGenerator : object {
    private AnyCharacterToken token;
    private Random _random;
    public AnyCharacterTokenMatchGenerator(AnyCharacterToken token, Random _random);
    public sealed virtual void AppendMatch(StringBuilder builder);
    public sealed virtual void AppendNonMatch(StringBuilder builder);
}
public class DotNet.Globbing.Generation.CharacterListTokenMatchGenerator : object {
    private CharacterListToken _token;
    private Random _random;
    private List`1<char> _nonMatches;
    public CharacterListTokenMatchGenerator(CharacterListToken token, Random random);
    public sealed virtual void AppendMatch(StringBuilder builder);
    public sealed virtual void AppendNonMatch(StringBuilder builder);
    private void PopulateNonMatchingCharList();
}
public class DotNet.Globbing.Generation.CompositeTokenMatchGenerator : object {
    private IGlobToken[] _tokens;
    private List`1<IMatchGenerator> _generators;
    private Random _random;
    private int _currentTokenIndex;
    private bool _finished;
    public CompositeTokenMatchGenerator(Random random, IGlobToken[] tokens);
    public sealed virtual void AppendMatch(StringBuilder builder);
    public sealed virtual void AppendNonMatch(StringBuilder builder);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(CharacterListToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(PathSeparatorToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(LiteralToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(LetterRangeToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(NumberRangeToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(AnyCharacterToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(WildcardToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(WildcardDirectoryToken token);
    protected void AddMatchGenerator(IMatchGenerator evaluator);
}
[ExtensionAttribute]
public static class DotNet.Globbing.Generation.GlobMatchGeneratorExtensions : object {
    [ExtensionAttribute]
public static void AppendRandomLiteralCharacterBetween(StringBuilder builder, Random random, char start, char end);
    [ExtensionAttribute]
public static void AppendRandomLiteralCharacterNotBetween(StringBuilder builder, Random random, char start, char end);
    [ExtensionAttribute]
public static void AppendRandomNumberCharacterNotBetween(StringBuilder builder, Random random, char start, char end);
    [ExtensionAttribute]
public static void AppendRandomLetterCharacter(StringBuilder builder, Random random);
    [ExtensionAttribute]
public static void AppendRandomNumberCharacter(StringBuilder builder, Random random);
    [ExtensionAttribute]
public static void AppendRandomLiteralCharacter(StringBuilder builder, Random random);
    [ExtensionAttribute]
public static void AppendRandomLiteralString(StringBuilder builder, Random random, int maxLength);
    [ExtensionAttribute]
public static char GetRandomCharacterBetween(Random random, char start, char end);
    [ExtensionAttribute]
public static char GetRandomLiteralCharacterNotBetween(Random random, char start, char end);
    [ExtensionAttribute]
public static char GetRandomLetterCharacterNotBetween(Random random, char start, char end);
    [ExtensionAttribute]
public static char GetRandomNumberCharacterNotBetween(Random random, char start, char end);
}
public class DotNet.Globbing.Generation.GlobMatchStringGenerator : object {
    private StringBuilder _stringBuilder;
    private Random _random;
    private CompositeTokenMatchGenerator _generator;
    public GlobMatchStringGenerator(IEnumerable`1<IGlobToken> tokens);
    public string GenerateRandomMatch();
    public string GenerateRandomNonMatch();
}
public interface DotNet.Globbing.Generation.IMatchGenerator {
    public abstract virtual void AppendMatch(StringBuilder builder);
    public abstract virtual void AppendNonMatch(StringBuilder builder);
}
internal class DotNet.Globbing.Generation.LetterRangeTokenMatchGenerator : object {
    private LetterRangeToken token;
    private Random _random;
    public LetterRangeTokenMatchGenerator(LetterRangeToken token, Random _random);
    public sealed virtual void AppendMatch(StringBuilder builder);
    public sealed virtual void AppendNonMatch(StringBuilder builder);
}
internal class DotNet.Globbing.Generation.LiteralTokenMatchGenerator : object {
    private LiteralToken token;
    private Random _random;
    public LiteralTokenMatchGenerator(LiteralToken token, Random _random);
    public sealed virtual void AppendMatch(StringBuilder builder);
    public sealed virtual void AppendNonMatch(StringBuilder builder);
}
internal class DotNet.Globbing.Generation.NumberRangeTokenMatchGenerator : object {
    private NumberRangeToken token;
    private Random _random;
    public NumberRangeTokenMatchGenerator(NumberRangeToken token, Random _random);
    public sealed virtual void AppendMatch(StringBuilder builder);
    public sealed virtual void AppendNonMatch(StringBuilder builder);
}
internal class DotNet.Globbing.Generation.PathSeparatorMatchGenerator : object {
    private PathSeparatorToken token;
    private Random _random;
    public PathSeparatorMatchGenerator(PathSeparatorToken token, Random _random);
    public sealed virtual void AppendMatch(StringBuilder builder);
    public sealed virtual void AppendNonMatch(StringBuilder builder);
}
internal class DotNet.Globbing.Generation.WildcardDirectoryTokenMatchGenerator : object {
    private WildcardDirectoryToken token;
    private PathSeparatorKind _PathSeparatorKind;
    private CompositeTokenMatchGenerator _subGenerator;
    private Random _random;
    private int _maxLiteralLength;
    private int _maxSegments;
    private int _minSegments;
    public WildcardDirectoryTokenMatchGenerator(WildcardDirectoryToken token, Random random, CompositeTokenMatchGenerator subGenerator);
    public sealed virtual void AppendMatch(StringBuilder builder);
    private bool AppendRandomPaths(StringBuilder builder);
    public sealed virtual void AppendNonMatch(StringBuilder builder);
}
internal class DotNet.Globbing.Generation.WildcardTokenMatchGenerator : object {
    private WildcardToken token;
    private CompositeTokenMatchGenerator _subGenerator;
    private Random _random;
    public WildcardTokenMatchGenerator(WildcardToken token, Random random, CompositeTokenMatchGenerator subGenerator);
    public sealed virtual void AppendMatch(StringBuilder builder);
    public sealed virtual void AppendNonMatch(StringBuilder builder);
}
public class DotNet.Globbing.Glob : object {
    [CompilerGeneratedAttribute]
private IGlobToken[] <Tokens>k__BackingField;
    private GlobTokenFormatter _Formatter;
    private string _pattern;
    private GlobTokenEvaluator _isMatchEvaluator;
    private GlobOptions _options;
    public IGlobToken[] Tokens { get; }
    public Glob(IGlobToken[] tokens);
    public Glob(GlobOptions options, IGlobToken[] tokens);
    [CompilerGeneratedAttribute]
public IGlobToken[] get_Tokens();
    public static Glob Parse(string pattern);
    public static Glob Parse(string pattern, GlobOptions options);
    public bool IsMatch(string subject);
    public bool IsMatch(ReadOnlySpan`1<char> subject);
    public virtual string ToString();
}
public class DotNet.Globbing.GlobBuilder : object {
    private List`1<IGlobToken> _tokens;
    public List`1<IGlobToken> Tokens { get; }
    public sealed virtual IGlobBuilder AnyCharacter();
    public sealed virtual IGlobBuilder OneOf(Char[] characters);
    public sealed virtual IGlobBuilder Literal(string text);
    public sealed virtual IGlobBuilder NotOneOf(Char[] characters);
    public sealed virtual IGlobBuilder PathSeparator(PathSeparatorKind kind);
    public sealed virtual IGlobBuilder Wildcard();
    public sealed virtual IGlobBuilder DirectoryWildcard(Nullable`1<PathSeparatorKind> leadingSeparatorKind, Nullable`1<PathSeparatorKind> trailingSeparatorKind);
    public sealed virtual IGlobBuilder LetterInRange(char start, char end);
    public sealed virtual IGlobBuilder LetterNotInRange(char start, char end);
    public sealed virtual IGlobBuilder NumberInRange(char start, char end);
    public sealed virtual IGlobBuilder NumberNotInRange(char start, char end);
    public sealed virtual Glob ToGlob(GlobOptions options);
    public sealed virtual List`1<IGlobToken> get_Tokens();
}
public class DotNet.Globbing.GlobOptions : object {
    public static GlobOptions Default;
    [CompilerGeneratedAttribute]
private EvaluationOptions <Evaluation>k__BackingField;
    public EvaluationOptions Evaluation { get; public set; }
    private static GlobOptions();
    [CompilerGeneratedAttribute]
public EvaluationOptions get_Evaluation();
    [CompilerGeneratedAttribute]
public void set_Evaluation(EvaluationOptions value);
}
public class DotNet.Globbing.GlobStringReader : StringReader {
    private string _text;
    private int _currentIndex;
    public static int FailedRead;
    public static char NullChar;
    public static char ExclamationMarkChar;
    public static char StarChar;
    public static char OpenBracketChar;
    public static char CloseBracketChar;
    public static char DashChar;
    public static char QuestionMarkChar;
    public static Char[] BeginningOfTokenCharacters;
    public static Char[] AllowedNonAlphaNumericChars;
    private static Char[] PathSeparators;
    [CompilerGeneratedAttribute]
private char <LastChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <CurrentChar>k__BackingField;
    public int CurrentIndex { get; private set; }
    public char LastChar { get; private set; }
    public char CurrentChar { get; private set; }
    public bool HasReachedEnd { get; }
    public bool IsWhiteSpace { get; }
    public bool IsBeginningOfRangeOrList { get; }
    public bool IsEndOfRangeOrList { get; }
    public bool IsSingleCharacterMatch { get; }
    public bool IsWildcardCharacterMatch { get; }
    public bool IsBeginningOfDirectoryWildcard { get; }
    public GlobStringReader(string text);
    private static GlobStringReader();
    public int get_CurrentIndex();
    private void set_CurrentIndex(int value);
    public bool ReadChar();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual int ReadBlock(Char[] buffer, int index, int count);
    public virtual string ReadLine();
    public string ReadPathSegment();
    public virtual string ReadToEnd();
    [CompilerGeneratedAttribute]
public char get_LastChar();
    [CompilerGeneratedAttribute]
private void set_LastChar(char value);
    [CompilerGeneratedAttribute]
public char get_CurrentChar();
    [CompilerGeneratedAttribute]
private void set_CurrentChar(char value);
    public bool get_HasReachedEnd();
    public bool get_IsWhiteSpace();
    public char PeekChar();
    public bool get_IsBeginningOfRangeOrList();
    public bool get_IsEndOfRangeOrList();
    public bool IsPathSeparator();
    public static bool IsPathSeparator(char character);
    public bool get_IsSingleCharacterMatch();
    public bool get_IsWildcardCharacterMatch();
    public bool get_IsBeginningOfDirectoryWildcard();
    public static bool IsNotStartOfToken(char character);
}
public class DotNet.Globbing.GlobTokenFormatter : object {
    private StringBuilder _stringBuilder;
    public string Format(IEnumerable`1<IGlobToken> tokens);
    public sealed virtual void Visit(WildcardDirectoryToken wildcardDirectoryToken);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(CharacterListToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(PathSeparatorToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(LiteralToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(LetterRangeToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(NumberRangeToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(AnyCharacterToken token);
    private sealed virtual override void DotNet.Globbing.IGlobTokenVisitor.Visit(WildcardToken token);
}
public class DotNet.Globbing.GlobTokeniser : object {
    private StringBuilder _currentBufferText;
    public IList`1<IGlobToken> Tokenise(string globText);
    private IGlobToken ReadDirectoryWildcardToken(GlobStringReader reader, PathSeparatorToken leadingPathSeparatorToken);
    private IGlobToken ReadLiteralToken(GlobStringReader reader);
    private IGlobToken ReadRangeOrListToken(GlobStringReader reader);
    private PathSeparatorToken ReadPathSeparatorToken(GlobStringReader reader);
    private IGlobToken ReadWildcardToken();
    private IGlobToken ReadSingleCharacterMatchToken();
    private void AcceptChar(char character);
    private void AcceptCurrentChar(GlobStringReader reader);
    private string GetBufferAndReset();
}
public class DotNet.Globbing.GlobTokenMatch : object {
    [CompilerGeneratedAttribute]
private IGlobToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public IGlobToken Token { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public IGlobToken get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(IGlobToken value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public interface DotNet.Globbing.IGlobBuilder {
    public List`1<IGlobToken> Tokens { get; }
    public abstract virtual IGlobBuilder PathSeparator(PathSeparatorKind kind);
    public abstract virtual IGlobBuilder Literal(string text);
    public abstract virtual IGlobBuilder AnyCharacter();
    public abstract virtual IGlobBuilder Wildcard();
    public abstract virtual IGlobBuilder DirectoryWildcard(Nullable`1<PathSeparatorKind> leadingPathSeparatorKind, Nullable`1<PathSeparatorKind> trailingPathSeparatorKind);
    public abstract virtual IGlobBuilder OneOf(Char[] characters);
    public abstract virtual IGlobBuilder NotOneOf(Char[] characters);
    public abstract virtual IGlobBuilder LetterInRange(char start, char end);
    public abstract virtual IGlobBuilder LetterNotInRange(char start, char end);
    public abstract virtual IGlobBuilder NumberInRange(char start, char end);
    public abstract virtual IGlobBuilder NumberNotInRange(char start, char end);
    public abstract virtual Glob ToGlob(GlobOptions options);
    public abstract virtual List`1<IGlobToken> get_Tokens();
}
public interface DotNet.Globbing.IGlobTokenVisitor {
    public abstract virtual void Visit(WildcardToken token);
    public abstract virtual void Visit(WildcardDirectoryToken wildcardDirectoryToken);
    public abstract virtual void Visit(AnyCharacterToken token);
    public abstract virtual void Visit(LetterRangeToken token);
    public abstract virtual void Visit(NumberRangeToken token);
    public abstract virtual void Visit(CharacterListToken token);
    public abstract virtual void Visit(LiteralToken token);
    public abstract virtual void Visit(PathSeparatorToken token);
}
public class DotNet.Globbing.MatchInfo : object {
    [CompilerGeneratedAttribute]
private GlobTokenMatch[] <Matches>k__BackingField;
    [CompilerGeneratedAttribute]
private IGlobToken <Missed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnmatchedText>k__BackingField;
    public GlobTokenMatch[] Matches { get; public set; }
    public IGlobToken Missed { get; public set; }
    public bool Success { get; public set; }
    public string UnmatchedText { get; public set; }
    [CompilerGeneratedAttribute]
public GlobTokenMatch[] get_Matches();
    [CompilerGeneratedAttribute]
public void set_Matches(GlobTokenMatch[] value);
    [CompilerGeneratedAttribute]
public IGlobToken get_Missed();
    [CompilerGeneratedAttribute]
public void set_Missed(IGlobToken value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_UnmatchedText();
    [CompilerGeneratedAttribute]
public void set_UnmatchedText(string value);
}
public enum DotNet.Globbing.PathSeparatorKind : Enum {
    public int value__;
    public static PathSeparatorKind ForwardSlash;
    public static PathSeparatorKind BackwardSlash;
}
public class DotNet.Globbing.Token.AnyCharacterToken : object {
    public sealed virtual void Accept(IGlobTokenVisitor Visitor);
}
public class DotNet.Globbing.Token.CharacterListToken : object {
    [CompilerGeneratedAttribute]
private bool <IsNegated>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <Characters>k__BackingField;
    public bool IsNegated { get; public set; }
    public Char[] Characters { get; }
    public CharacterListToken(Char[] characters, bool isNegated);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNegated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsNegated(bool value);
    [CompilerGeneratedAttribute]
public Char[] get_Characters();
    public sealed virtual void Accept(IGlobTokenVisitor Visitor);
}
public interface DotNet.Globbing.Token.IGlobToken {
}
public interface DotNet.Globbing.Token.INegatableToken {
    public bool IsNegated { get; public set; }
    public abstract virtual bool get_IsNegated();
    public abstract virtual void set_IsNegated(bool value);
}
public interface DotNet.Globbing.Token.IVisitable`1 {
    public abstract virtual void Accept(T Visitor);
}
public class DotNet.Globbing.Token.LetterRangeToken : RangeToken`1<char> {
    public LetterRangeToken(char start, char end, bool isNegated);
    public virtual void Accept(IGlobTokenVisitor Visitor);
}
public class DotNet.Globbing.Token.LiteralToken : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    public LiteralToken(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public sealed virtual void Accept(IGlobTokenVisitor Visitor);
}
public class DotNet.Globbing.Token.NumberRangeToken : RangeToken`1<char> {
    public NumberRangeToken(char start, char end, bool isNegated);
    public virtual void Accept(IGlobTokenVisitor Visitor);
}
public class DotNet.Globbing.Token.PathSeparatorToken : object {
    [CompilerGeneratedAttribute]
private char <Value>k__BackingField;
    public char Value { get; public set; }
    public PathSeparatorToken(char value);
    public sealed virtual void Accept(IGlobTokenVisitor Visitor);
    [CompilerGeneratedAttribute]
public char get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(char value);
}
public abstract class DotNet.Globbing.Token.RangeToken`1 : object {
    [CompilerGeneratedAttribute]
private bool <IsNegated>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private T <End>k__BackingField;
    public bool IsNegated { get; public set; }
    public T Start { get; public set; }
    public T End { get; public set; }
    protected RangeToken`1(T start, T end, bool isNegated);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNegated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsNegated(bool value);
    [CompilerGeneratedAttribute]
public T get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(T value);
    [CompilerGeneratedAttribute]
public T get_End();
    [CompilerGeneratedAttribute]
public void set_End(T value);
    public abstract virtual void Accept(IGlobTokenVisitor Visitor);
}
public class DotNet.Globbing.Token.WildcardDirectoryToken : object {
    [CompilerGeneratedAttribute]
private PathSeparatorToken <TrailingPathSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private PathSeparatorToken <LeadingPathSeparator>k__BackingField;
    public PathSeparatorToken TrailingPathSeparator { get; public set; }
    public PathSeparatorToken LeadingPathSeparator { get; public set; }
    public WildcardDirectoryToken(PathSeparatorToken leadingPathSeparator, PathSeparatorToken trailingPathSeparator);
    [CompilerGeneratedAttribute]
public PathSeparatorToken get_TrailingPathSeparator();
    [CompilerGeneratedAttribute]
public void set_TrailingPathSeparator(PathSeparatorToken value);
    [CompilerGeneratedAttribute]
public PathSeparatorToken get_LeadingPathSeparator();
    [CompilerGeneratedAttribute]
public void set_LeadingPathSeparator(PathSeparatorToken value);
    public sealed virtual void Accept(IGlobTokenVisitor Visitor);
}
public class DotNet.Globbing.Token.WildcardToken : object {
    public sealed virtual void Accept(IGlobTokenVisitor Visitor);
}
