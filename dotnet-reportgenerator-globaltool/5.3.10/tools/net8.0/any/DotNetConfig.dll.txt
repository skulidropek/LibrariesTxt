[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetConfig.AggregateConfig : Config {
    [CompilerGeneratedAttribute]
private List`1<Config> <Files>k__BackingField;
    public List`1<Config> Files { get; }
    public AggregateConfig(Config[] configs);
    [CompilerGeneratedAttribute]
public List`1<Config> get_Files();
    public virtual Config AddBoolean(string section, string subsection, string variable, bool value);
    public virtual Config AddDateTime(string section, string subsection, string variable, DateTime value);
    public virtual Config AddNumber(string section, string subsection, string variable, long value);
    public virtual Config AddString(string section, string subsection, string variable, string value);
    public virtual IEnumerable`1<ConfigEntry> GetAll(string section, string subsection, string variable, string valueRegex);
    public virtual IEnumerable`1<ConfigEntry> GetRegex(string nameRegex, string valueRegex);
    public virtual string GetNormalizedPath(string section, string subsection, string variable);
    public virtual Config RemoveSection(string section, string subsection);
    public virtual Config RenameSection(string oldSection, string oldSubsection, string newSection, string newSubsection);
    public virtual Config SetAllBoolean(string section, string subsection, string variable, bool value, string valueRegex);
    public virtual Config SetAllDateTime(string section, string subsection, string variable, DateTime value, string valueRegex);
    public virtual Config SetAllNumber(string section, string subsection, string variable, long value, string valueRegex);
    public virtual Config SetAllString(string section, string subsection, string variable, string value, string valueRegex);
    public virtual Config SetBoolean(string section, string subsection, string variable, bool value, string valueRegex);
    public virtual Config SetDateTime(string section, string subsection, string variable, DateTime value, string valueRegex);
    public virtual Config SetNumber(string section, string subsection, string variable, long value, string valueRegex);
    public virtual Config SetString(string section, string subsection, string variable, string value, string valueRegex);
    public virtual bool TryGetBoolean(string section, string subsection, string variable, Boolean& value);
    public virtual bool TryGetDateTime(string section, string subsection, string variable, DateTime& value);
    public virtual bool TryGetNumber(string section, string subsection, string variable, Int64& value);
    public virtual bool TryGetString(string section, string subsection, string variable, String& value);
    public virtual Config Unset(string section, string subsection, string variable);
    public virtual Config UnsetAll(string section, string subsection, string variable, string valueRegex);
    private Config GetConfig();
    protected virtual IEnumerable`1<ConfigEntry> GetEntries();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class DotNetConfig.Config : object {
    internal static string UserExtension;
    public static string FileName;
    [CompilerGeneratedAttribute]
private static string <GlobalLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <SystemLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public static string GlobalLocation { get; internal set; }
    public static string SystemLocation { get; internal set; }
    public string FilePath { get; private set; }
    public Nullable`1<ConfigLevel> Level { get; }
    protected Config(string filePath);
    private static Config();
    [CompilerGeneratedAttribute]
public static string get_GlobalLocation();
    [CompilerGeneratedAttribute]
internal static void set_GlobalLocation(string value);
    [CompilerGeneratedAttribute]
public static string get_SystemLocation();
    [CompilerGeneratedAttribute]
internal static void set_SystemLocation(string value);
    public static Config Build(string path);
    public static Config Build(ConfigLevel store);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    public Nullable`1<ConfigLevel> get_Level();
    public ConfigSection GetSection(string section, string subsection);
    public abstract virtual Config AddBoolean(string section, string subsection, string variable, bool value);
    public abstract virtual Config AddDateTime(string section, string subsection, string variable, DateTime value);
    public abstract virtual Config AddNumber(string section, string subsection, string variable, long value);
    public abstract virtual Config AddString(string section, string subsection, string variable, string value);
    public abstract virtual IEnumerable`1<ConfigEntry> GetAll(string section, string subsection, string variable, string valueRegex);
    public abstract virtual IEnumerable`1<ConfigEntry> GetRegex(string nameRegex, string valueRegex);
    public abstract virtual string GetNormalizedPath(string section, string subsection, string variable);
    public abstract virtual Config SetBoolean(string section, string subsection, string variable, bool value, string valueRegex);
    public abstract virtual Config SetDateTime(string section, string subsection, string variable, DateTime value, string valueRegex);
    public abstract virtual Config SetNumber(string section, string subsection, string variable, long value, string valueRegex);
    public abstract virtual Config SetString(string section, string subsection, string variable, string value, string valueRegex);
    public abstract virtual Config SetAllBoolean(string section, string subsection, string variable, bool value, string valueRegex);
    public abstract virtual Config SetAllDateTime(string section, string subsection, string variable, DateTime value, string valueRegex);
    public abstract virtual Config SetAllNumber(string section, string subsection, string variable, long value, string valueRegex);
    public abstract virtual Config SetAllString(string section, string subsection, string variable, string value, string valueRegex);
    public abstract virtual bool TryGetBoolean(string section, string subsection, string variable, Boolean& value);
    public abstract virtual bool TryGetDateTime(string section, string subsection, string variable, DateTime& value);
    public abstract virtual bool TryGetNumber(string section, string subsection, string variable, Int64& value);
    public abstract virtual bool TryGetString(string section, string subsection, string variable, String& value);
    public abstract virtual Config Unset(string section, string subsection, string variable);
    public abstract virtual Config UnsetAll(string section, string subsection, string variable, string valueRegex);
    public abstract virtual Config RemoveSection(string section, string subsection);
    public abstract virtual Config RenameSection(string oldSection, string oldSubsection, string newSection, string newSubsection);
    protected abstract virtual IEnumerable`1<ConfigEntry> GetEntries();
    private sealed virtual override IEnumerator`1<ConfigEntry> System.Collections.Generic.IEnumerable<DotNetConfig.ConfigEntry>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetConfig.ConfigDocument : object {
    private string filePath;
    [CompilerGeneratedAttribute]
private Nullable`1<ConfigLevel> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<Line> <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Nullable`1<ConfigLevel> Level { get; }
    internal ImmutableList`1<Line> Lines { get; private set; }
    public IEnumerable`1<Line> Comments { get; }
    public IEnumerable`1<Line> Sections { get; }
    public IEnumerable`1<Line> Variables { get; }
    public IEnumerable`1<ConfigEntry> Entries { get; }
    private ConfigDocument(string filePath, Nullable`1<ConfigLevel> level);
    [CompilerGeneratedAttribute]
protected ConfigDocument(ConfigDocument original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    public static ConfigDocument FromFile(string filePath, Nullable`1<ConfigLevel> level);
    [CompilerGeneratedAttribute]
public Nullable`1<ConfigLevel> get_Level();
    [CompilerGeneratedAttribute]
internal ImmutableList`1<Line> get_Lines();
    [CompilerGeneratedAttribute]
private void set_Lines(ImmutableList`1<Line> value);
    public ConfigDocument Save();
    public IEnumerable`1<ConfigEntry> GetAll(string nameRegex, string valueRegex);
    public IEnumerable`1<ConfigEntry> GetAll(string section, string subsection, string name, ValueMatcher valueMatcher);
    public ConfigDocument Add(string section, string subsection, string name, string value);
    public ConfigDocument Set(string section, string subsection, string name, string value, ValueMatcher valueMatcher);
    public ConfigDocument Unset(string section, string subsection, string name);
    public ConfigDocument SetAll(string section, string subsection, string name, string value, ValueMatcher valueMatcher);
    public ConfigDocument UnsetAll(string section, string subsection, string name, ValueMatcher valueMatcher);
    public ConfigDocument RemoveSection(string section, string subsection);
    public ConfigDocument RenameSection(string oldSection, string oldSubsection, string newSection, string newSubsection);
    private ConfigDocument CleanupSection(string section, string subsection);
    private Func`2<Line, bool> SectionEquals(string section, string subsection);
    [NullableContextAttribute("2")]
private Func`2<string, bool> Matches(string regex);
    public sealed virtual IEnumerator`1<ConfigEntry> GetEnumerator();
    public IEnumerable`1<Line> get_Comments();
    public IEnumerable`1<Line> get_Sections();
    public IEnumerable`1<Line> get_Variables();
    public IEnumerable`1<ConfigEntry> get_Entries();
    private ConfigEntry ToEntry(Line line);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ConfigDocument left, ConfigDocument right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ConfigDocument left, ConfigDocument right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ConfigDocument other);
    [CompilerGeneratedAttribute]
public virtual ConfigDocument <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class DotNetConfig.ConfigEntry : object {
    [CompilerGeneratedAttribute]
private string <Section>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Subsection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Variable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConfigLevel> <Level>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Section { get; }
    [NullableAttribute("2")]
public string Subsection { get; }
    public string Variable { get; }
    [NullableAttribute("2")]
public string RawValue { get; public set; }
    public Nullable`1<ConfigLevel> Level { get; }
    [NullableAttribute("2")]
public string Comment { get; public set; }
    public string Key { get; }
    private string DebuggerDisplay { get; }
    public ConfigEntry(string section, string subsection, string name, string value, Nullable`1<ConfigLevel> level);
    [CompilerGeneratedAttribute]
protected ConfigEntry(ConfigEntry original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Section();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Subsection();
    [CompilerGeneratedAttribute]
public string get_Variable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_RawValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RawValue(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ConfigLevel> get_Level();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Comment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Comment(string value);
    public string get_Key();
    public bool GetBoolean();
    public DateTime GetDateTime();
    public long GetNumber();
    public string GetString();
    private string get_DebuggerDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ConfigEntry left, ConfigEntry right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ConfigEntry left, ConfigEntry right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ConfigEntry other);
    [CompilerGeneratedAttribute]
public virtual ConfigEntry <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class DotNetConfig.ConfigExtensions : object {
    [ExtensionAttribute]
public static Config AddBoolean(Config config, string section, string variable, bool value);
    [ExtensionAttribute]
public static Config AddBoolean(Config config, string section, string subsection, string variable, bool value, ConfigLevel level);
    [ExtensionAttribute]
public static Config AddBoolean(Config config, string section, string variable, bool value, ConfigLevel level);
    [ExtensionAttribute]
public static Config AddDateTime(Config config, string section, string variable, DateTime value);
    [ExtensionAttribute]
public static Config AddDateTime(Config config, string section, string subsection, string variable, DateTime value, ConfigLevel level);
    [ExtensionAttribute]
public static Config AddDateTime(Config config, string section, string variable, DateTime value, ConfigLevel level);
    [ExtensionAttribute]
public static Config AddNumber(Config config, string section, string variable, long value);
    [ExtensionAttribute]
public static Config AddNumber(Config config, string section, string variable, long value, ConfigLevel level);
    [ExtensionAttribute]
public static Config AddNumber(Config config, string section, string subsection, string variable, long value, ConfigLevel level);
    [ExtensionAttribute]
public static Config AddString(Config config, string section, string variable, string value);
    [ExtensionAttribute]
public static Config AddString(Config config, string section, string variable, string value, ConfigLevel level);
    [ExtensionAttribute]
public static Config AddString(Config config, string section, string subsection, string variable, string value, ConfigLevel level);
    [ExtensionAttribute]
public static Nullable`1<bool> GetBoolean(Config config, string section, string subsection, string variable);
    [ExtensionAttribute]
public static Nullable`1<bool> GetBoolean(Config config, string section, string variable);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetDateTime(Config config, string section, string subsection, string variable);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetDateTime(Config config, string section, string variable);
    [ExtensionAttribute]
public static Nullable`1<long> GetNumber(Config config, string section, string subsection, string variable);
    [ExtensionAttribute]
public static Nullable`1<long> GetNumber(Config config, string section, string variable);
    [ExtensionAttribute]
public static string GetString(Config config, string section, string subsection, string variable);
    [ExtensionAttribute]
public static string GetString(Config config, string section, string variable);
    [ExtensionAttribute]
public static string GetNormalizedPath(Config config, string section, string variable);
    [ExtensionAttribute]
public static IEnumerable`1<ConfigEntry> GetAll(Config config, string section, string variable);
    [ExtensionAttribute]
public static IEnumerable`1<ConfigEntry> GetAll(Config config, string section, string subsection, string variable);
    [ExtensionAttribute]
public static Config SetBoolean(Config config, string section, string variable, bool value);
    [ExtensionAttribute]
public static Config SetBoolean(Config config, string section, string subsection, string variable, bool value);
    [ExtensionAttribute]
public static Config SetBoolean(Config config, string section, string variable, bool value, string valueRegex);
    [ExtensionAttribute]
public static Config SetBoolean(Config config, string section, string variable, bool value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetBoolean(Config config, string section, string subsection, string variable, bool value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetBoolean(Config config, string section, string variable, bool value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetBoolean(Config config, string section, string subsection, string variable, bool value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetDateTime(Config config, string section, string variable, DateTime value);
    [ExtensionAttribute]
public static Config SetDateTime(Config config, string section, string subsection, string variable, DateTime value);
    [ExtensionAttribute]
public static Config SetDateTime(Config config, string section, string variable, DateTime value, string valueRegex);
    [ExtensionAttribute]
public static Config SetDateTime(Config config, string section, string variable, DateTime value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetDateTime(Config config, string section, string subsection, string variable, DateTime value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetDateTime(Config config, string section, string variable, DateTime value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetDateTime(Config config, string section, string subsection, string variable, DateTime value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetNumber(Config config, string section, string variable, long value);
    [ExtensionAttribute]
public static Config SetNumber(Config config, string section, string subsection, string variable, long value);
    [ExtensionAttribute]
public static Config SetNumber(Config config, string section, string variable, long value, string valueRegex);
    [ExtensionAttribute]
public static Config SetNumber(Config config, string section, string variable, long value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetNumber(Config config, string section, string subsection, string variable, long value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetNumber(Config config, string section, string variable, long value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetNumber(Config config, string section, string subsection, string variable, long value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetString(Config config, string section, string variable, string value);
    [ExtensionAttribute]
public static Config SetString(Config config, string section, string subsection, string variable, string value);
    [ExtensionAttribute]
public static Config SetString(Config config, string section, string variable, string value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetString(Config config, string section, string subsection, string variable, string value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetString(Config config, string section, string subsection, string variable, string value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllBoolean(Config config, string section, string variable, bool value);
    [ExtensionAttribute]
public static Config SetAllBoolean(Config config, string section, string variable, bool value, string valueRegex);
    [ExtensionAttribute]
public static Config SetAllBoolean(Config config, string section, string variable, bool value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllBoolean(Config config, string section, string variable, bool value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllBoolean(Config config, string section, string subsection, string variable, bool value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllDateTime(Config config, string section, string variable, DateTime value);
    [ExtensionAttribute]
public static Config SetAllDateTime(Config config, string section, string variable, DateTime value, string valueRegex);
    [ExtensionAttribute]
public static Config SetAllDateTime(Config config, string section, string variable, DateTime value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllDateTime(Config config, string section, string variable, DateTime value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllDateTime(Config config, string section, string subsection, string variable, DateTime value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllNumber(Config config, string section, string variable, long value);
    [ExtensionAttribute]
public static Config SetAllNumber(Config config, string section, string variable, long value, string valueRegex);
    [ExtensionAttribute]
public static Config SetAllNumber(Config config, string section, string variable, long value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllNumber(Config config, string section, string variable, long value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllNumber(Config config, string section, string subsection, string variable, long value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllString(Config config, string section, string variable, string value);
    [ExtensionAttribute]
public static Config SetAllString(Config config, string section, string variable, string value, string valueRegex);
    [ExtensionAttribute]
public static Config SetAllString(Config config, string section, string variable, string value, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllString(Config config, string section, string variable, string value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config SetAllString(Config config, string section, string subsection, string variable, string value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static bool TryGetBoolean(Config config, string section, string variable, Boolean& value);
    [ExtensionAttribute]
public static bool TryGetDateTime(Config config, string section, string variable, DateTime& value);
    [ExtensionAttribute]
public static bool TryGetNumber(Config config, string section, string variable, Int64& value);
    [ExtensionAttribute]
public static bool TryGetString(Config config, string section, string variable, String& value);
    [ExtensionAttribute]
public static Config Unset(Config config, string section, string variable);
    [ExtensionAttribute]
public static Config Unset(Config config, string section, string variable, ConfigLevel level);
    [ExtensionAttribute]
public static Config Unset(Config config, string section, string subsection, string variable, ConfigLevel level);
    [ExtensionAttribute]
public static Config UnsetAll(Config config, string section, string variable, ConfigLevel level);
    [ExtensionAttribute]
public static Config UnsetAll(Config config, string section, string variable, string valueRegex);
    [ExtensionAttribute]
public static Config UnsetAll(Config config, string section, string variable, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config UnsetAll(Config config, string section, string subsection, string variable, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static Config RemoveSection(Config config, string section);
    [ExtensionAttribute]
public static Config RemoveSection(Config config, string section, ConfigLevel level);
    [ExtensionAttribute]
public static Config RenameSection(Config config, string oldSection, string newSection);
    [ExtensionAttribute]
public static Config RenameSection(Config config, string oldSection, string newSection, ConfigLevel level);
    [ExtensionAttribute]
public static Config RenameSection(Config config, string oldSection, string oldSubsection, string newSection, string newSubsection, ConfigLevel level);
    private static Config Write(Config config, ConfigLevel level, Func`2<Config, Config> function);
}
public enum DotNetConfig.ConfigLevel : Enum {
    public int value__;
    public static ConfigLevel Local;
    public static ConfigLevel Global;
    public static ConfigLevel System;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetConfig.ConfigReader : object {
    [NullableAttribute("2")]
private string filePath;
    [NullableAttribute("2")]
private TextReader reader;
    private int lineNumber;
    [NullableAttribute("2")]
private TextSpan section;
    [NullableAttribute("2")]
private TextSpan subsection;
    public ConfigReader(string filePath);
    internal ConfigReader(TextReader reader);
    public static Line ParseSection(string filePath, string lineText, int lineNumber);
    [NullableContextAttribute("2")]
public static Line ParseVariable(string filePath, string lineText, int lineNumber, TextSpan section, TextSpan subsection);
    [NullableContextAttribute("2")]
public Line ReadLine();
    [IteratorStateMachineAttribute("DotNetConfig.ConfigReader/<ReadAllLines>d__10")]
public IEnumerable`1<Line> ReadAllLines();
    public sealed virtual void Dispose();
    private static Line ReadSection(string filePath, string lineText, int lineNumber, int current, char c);
    private static Line ReadSubsection(string filePath, string lineText, int lineNumber, TextSpan section, int current);
    [NullableContextAttribute("2")]
private static Line ReadVariable(string filePath, string lineText, int lineNumber, TextSpan section, TextSpan subsection, int current, char c);
    private static Line ReadValue(string filePath, string lineText, int lineNumber, TextSpan section, TextSpan subsection, TextSpan variable, int current, char c);
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
    private static int AdvanceTo(string lineText, int start, Func`2<char, bool> predicate);
    private static int AdvanceWhile(string lineText, int start, Func`2<char, bool> predicate);
    private static TextSpan ReadComment(string lineText, int lineNumber, int start);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DotNetConfig.ConfigSection : object {
    [CompilerGeneratedAttribute]
private Config <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Section>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Subsection>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    internal Config Config { get; internal set; }
    public string Section { get; }
    [NullableAttribute("2")]
public string Subsection { get; }
    internal ConfigSection(Config config, string section, string subsection);
    [CompilerGeneratedAttribute]
protected ConfigSection(ConfigSection original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
internal Config get_Config();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Config(Config value);
    [CompilerGeneratedAttribute]
public string get_Section();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Subsection();
    public ConfigSection AddBoolean(string variable, bool value);
    public ConfigSection AddDateTime(string variable, DateTime value);
    public ConfigSection AddNumber(string variable, long value);
    public ConfigSection AddString(string variable, string value);
    public IEnumerable`1<ConfigEntry> GetAll(string variable, string valueRegex);
    public string GetNormalizedPath(string variable);
    public ConfigSection SetAllBoolean(string variable, bool value, string valueRegex);
    public ConfigSection SetAllDateTime(string variable, DateTime value, string valueRegex);
    public ConfigSection SetAllNumber(string variable, long value, string valueRegex);
    public ConfigSection SetAllString(string variable, string value, string valueRegex);
    public ConfigSection SetBoolean(string variable, bool value, string valueRegex);
    public ConfigSection SetDateTime(string variable, DateTime value, string valueRegex);
    public ConfigSection SetNumber(string variable, long value, string valueRegex);
    public ConfigSection SetString(string variable, string value, string valueRegex);
    public bool TryGetBoolean(string variable, Boolean& value);
    public bool TryGetDateTime(string variable, DateTime& value);
    public bool TryGetNumber(string variable, Int64& value);
    public bool TryGetString(string variable, String& value);
    public ConfigSection Unset(string variable);
    public ConfigSection UnsetAll(string variable, string valueRegex);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ConfigSection left, ConfigSection right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ConfigSection left, ConfigSection right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ConfigSection other);
    [CompilerGeneratedAttribute]
public virtual ConfigSection <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class DotNetConfig.ConfigSectionExtensions : object {
    [ExtensionAttribute]
public static ConfigSection AddBoolean(ConfigSection config, string variable, bool value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection AddDateTime(ConfigSection config, string variable, DateTime value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection AddNumber(ConfigSection config, string variable, long value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection AddString(ConfigSection config, string variable, string value, ConfigLevel level);
    [ExtensionAttribute]
public static Nullable`1<bool> GetBoolean(ConfigSection config, string variable);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetDateTime(ConfigSection config, string variable);
    [ExtensionAttribute]
public static Nullable`1<long> GetNumber(ConfigSection config, string variable);
    [ExtensionAttribute]
public static string GetString(ConfigSection config, string variable);
    [ExtensionAttribute]
public static ConfigSection SetBoolean(ConfigSection config, string variable, bool value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetBoolean(ConfigSection config, string variable, bool value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetDateTime(ConfigSection config, string variable, DateTime value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetDateTime(ConfigSection config, string variable, DateTime value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetNumber(ConfigSection config, string variable, long value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetNumber(ConfigSection config, string variable, long value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetString(ConfigSection config, string variable, string value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetString(ConfigSection config, string variable, string value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetAllBoolean(ConfigSection config, string variable, bool value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetAllBoolean(ConfigSection config, string variable, bool value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetAllDateTime(ConfigSection config, string variable, DateTime value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetAllDateTime(ConfigSection config, string variable, DateTime value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetAllNumber(ConfigSection config, string variable, long value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetAllNumber(ConfigSection config, string variable, long value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetAllString(ConfigSection config, string variable, string value, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection SetAllString(ConfigSection config, string variable, string value, string valueRegex, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection Unset(ConfigSection config, string variable, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection UnsetAll(ConfigSection config, string variable, ConfigLevel level);
    [ExtensionAttribute]
public static ConfigSection UnsetAll(ConfigSection config, string variable, string valueRegex, ConfigLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetConfig.FileConfig : Config {
    private ConfigDocument document;
    public FileConfig(string filePath, Nullable`1<ConfigLevel> level);
    private FileConfig(string filePath, ConfigDocument document);
    public virtual Config AddBoolean(string section, string subsection, string variable, bool value);
    public virtual Config AddDateTime(string section, string subsection, string variable, DateTime value);
    public virtual Config AddNumber(string section, string subsection, string variable, long value);
    public virtual Config AddString(string section, string subsection, string variable, string value);
    public virtual IEnumerable`1<ConfigEntry> GetAll(string section, string subsection, string variable, string valueRegex);
    public virtual IEnumerable`1<ConfigEntry> GetRegex(string nameRegex, string valueRegex);
    public virtual string GetNormalizedPath(string section, string subsection, string variable);
    public virtual Config RemoveSection(string section, string subsection);
    public virtual Config RenameSection(string oldSection, string oldSubsection, string newSection, string newSubsection);
    public virtual Config SetAllBoolean(string section, string subsection, string variable, bool value, string valueRegex);
    public virtual Config SetAllDateTime(string section, string subsection, string variable, DateTime value, string valueRegex);
    public virtual Config SetAllNumber(string section, string subsection, string variable, long value, string valueRegex);
    public virtual Config SetAllString(string section, string subsection, string variable, string value, string valueRegex);
    public virtual Config SetBoolean(string section, string subsection, string variable, bool value, string valueRegex);
    public virtual Config SetDateTime(string section, string subsection, string variable, DateTime value, string valueRegex);
    public virtual Config SetNumber(string section, string subsection, string variable, long value, string valueRegex);
    public virtual Config SetString(string section, string subsection, string variable, string value, string valueRegex);
    public virtual bool TryGetBoolean(string section, string subsection, string variable, Boolean& value);
    public virtual bool TryGetDateTime(string section, string subsection, string variable, DateTime& value);
    public virtual bool TryGetNumber(string section, string subsection, string variable, Int64& value);
    public virtual bool TryGetString(string section, string subsection, string variable, String& value);
    public virtual Config Unset(string section, string subsection, string variable);
    public virtual Config UnsetAll(string section, string subsection, string variable, string valueMatcher);
    protected virtual IEnumerable`1<ConfigEntry> GetEntries();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class DotNetConfig.Line : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private LineKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <LineText>k__BackingField;
    [CompilerGeneratedAttribute]
private TextSpan <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private TextSpan <Subsection>k__BackingField;
    [CompilerGeneratedAttribute]
private TextSpan <Variable>k__BackingField;
    [CompilerGeneratedAttribute]
private TextSpan <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TextSpan <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <ErrorPosition>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string FilePath { get; }
    public LineKind Kind { get; }
    public int LineNumber { get; }
    [NullableAttribute("1")]
public string LineText { get; private set; }
    public TextSpan Section { get; private set; }
    public TextSpan Subsection { get; private set; }
    public TextSpan Variable { get; private set; }
    public TextSpan Value { get; private set; }
    public TextSpan Comment { get; private set; }
    public string Error { get; }
    public Position ErrorPosition { get; }
    public Line(string filePath, LineKind kind, int lineNumber, string lineText, TextSpan section, TextSpan subsection, TextSpan name, TextSpan value, TextSpan comment, string error, Position errorPosition);
    [CompilerGeneratedAttribute]
protected Line(Line original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [NullableContextAttribute("1")]
public static Line CreateSection(string filePath, int lineNumber, string section, string subsection);
    public static Line CreateVariable(string filePath, int lineNumber, TextSpan section, TextSpan subsection, string name, string value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public LineKind get_Kind();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LineText();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LineText(string value);
    [CompilerGeneratedAttribute]
public TextSpan get_Section();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Section(TextSpan value);
    [CompilerGeneratedAttribute]
public TextSpan get_Subsection();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Subsection(TextSpan value);
    [CompilerGeneratedAttribute]
public TextSpan get_Variable();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Variable(TextSpan value);
    [CompilerGeneratedAttribute]
public TextSpan get_Value();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(TextSpan value);
    [CompilerGeneratedAttribute]
public TextSpan get_Comment();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Comment(TextSpan value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public Position get_ErrorPosition();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
internal Line WithSection(string section, string subsection);
    [NullableContextAttribute("1")]
internal Line WithSection(TextSpan section, TextSpan subsection);
    [NullableContextAttribute("1")]
internal Line WithValue(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Line left, Line right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Line left, Line right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(Line other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Line <Clone>$();
}
internal enum DotNetConfig.LineKind : Enum {
    public int value__;
    public static LineKind None;
    public static LineKind Comment;
    public static LineKind Error;
    public static LineKind Section;
    public static LineKind Variable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetConfig.Position : object {
    [CompilerGeneratedAttribute]
private static Position <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Absolute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public static Position Zero { get; }
    public int Absolute { get; }
    public int Line { get; }
    public int Column { get; }
    public bool HasValue { get; }
    public Position(int line, int absolute, Nullable`1<int> column);
    private static Position();
    [CompilerGeneratedAttribute]
public static Position get_Zero();
    [CompilerGeneratedAttribute]
public int get_Absolute();
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
    public bool get_HasValue();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class DotNetConfig.TextRules : object {
    private static long KB;
    public static void ParseKey(string key, String& section, String& subsection, String& variable);
    public static void ParseSection(string key, String& section, String& subsection);
    [NullableContextAttribute("2")]
public static bool ParseBoolean(string value);
    public static long ParseNumber(string value);
    public static string SerializeSubsection(string subsection);
    public static string SerializeValue(string value);
    public static string ToKey(string section, string subsection, string variable);
    public static bool TryValidateBoolean(string value, String& error);
    public static bool TryValidateNumber(string value, String& error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetConfig.TextSpan : object {
    [NullableAttribute("2")]
private string text;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public string Line { get; }
    public Position Position { get; }
    public int Length { get; }
    public string Text { get; }
    public TextSpan(string line);
    public TextSpan(string line, Position position, int length, string text);
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public int get_Length();
    public string get_Text();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static string op_Implicit(TextSpan span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DotNetConfig.ValueMatcher : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, bool> matcher;
    [CompilerGeneratedAttribute]
private static ValueMatcher <All>k__BackingField;
    public static ValueMatcher All { get; }
    private ValueMatcher(Func`2<string, bool> matcher);
    private static ValueMatcher();
    [CompilerGeneratedAttribute]
public static ValueMatcher get_All();
    public static ValueMatcher From(string expression);
    [NullableContextAttribute("2")]
public static ValueMatcher op_Implicit(string expression);
    [NullableContextAttribute("2")]
public bool Matches(string value);
}
internal static class EmbeddedResource : object {
    public static string GetContent(string relativePath);
    public static Byte[] GetBytes(string relativePath);
    public static Stream GetStream(string relativePath);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Index : ValueType {
    private static string NeedNonNegNum;
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    public virtual string ToString();
    private string ToStringFromEnd();
}
[IsReadOnlyAttribute]
internal class System.Range : ValueType {
    [CompilerGeneratedAttribute]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Index <End>k__BackingField;
    public Index Start { get; }
    public Index End { get; }
    public static Range All { get; }
    public Range(Index start, Index end);
    [CompilerGeneratedAttribute]
public Index get_Start();
    [CompilerGeneratedAttribute]
public Index get_End();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Range other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public ValueTuple`2<int, int> GetOffsetAndLength(int length);
}
[EditorBrowsableAttribute("1")]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.Runtime.CompilerServices.RuntimeHelpers : object {
    [NullableContextAttribute("1")]
internal static T[] GetSubArray(T[] array, Range range);
}
internal class ThisAssembly : object {
}
