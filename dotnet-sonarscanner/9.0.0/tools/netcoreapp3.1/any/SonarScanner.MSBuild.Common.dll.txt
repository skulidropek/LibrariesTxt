[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class SonarScanner.MSBuild.Common.AggregatePropertiesProvider : object {
    private IAnalysisPropertyProvider[] providers;
    public AggregatePropertiesProvider(IAnalysisPropertyProvider[] providers);
    public sealed virtual IEnumerable`1<Property> GetAllProperties();
    public sealed virtual bool TryGetProperty(string key, Property& property);
}
[XmlRootAttribute]
public class SonarScanner.MSBuild.Common.AnalysisConfig : object {
    public static string XmlNamespace;
    [CompilerGeneratedAttribute]
private string <SonarConfigDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SonarOutputDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SonarBinDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SonarScannerWorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourcesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScanAllAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBeginStepCommandLineCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SonarQubeHostUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SonarQubeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SonarProjectKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SonarProjectVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SonarProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ConfigSetting> <AdditionalConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private AnalysisProperties <ServerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private AnalysisProperties <LocalSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AnalyzerSettings> <AnalyzersSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string SonarConfigDir { get; public set; }
    public string SonarOutputDir { get; public set; }
    public string SonarBinDir { get; public set; }
    public string SonarScannerWorkingDirectory { get; public set; }
    public string SourcesDirectory { get; public set; }
    public string JavaExePath { get; public set; }
    public bool ScanAllAnalysis { get; public set; }
    public bool HasBeginStepCommandLineCredentials { get; public set; }
    public string SonarQubeHostUrl { get; public set; }
    public string SonarQubeVersion { get; public set; }
    public string SonarProjectKey { get; public set; }
    public string SonarProjectVersion { get; public set; }
    public string SonarProjectName { get; public set; }
    public List`1<ConfigSetting> AdditionalConfig { get; public set; }
    public AnalysisProperties ServerSettings { get; public set; }
    public AnalysisProperties LocalSettings { get; public set; }
    public List`1<AnalyzerSettings> AnalyzersSettings { get; public set; }
    [XmlIgnoreAttribute]
public string FileName { get; private set; }
    [CompilerGeneratedAttribute]
public string get_SonarConfigDir();
    [CompilerGeneratedAttribute]
public void set_SonarConfigDir(string value);
    [CompilerGeneratedAttribute]
public string get_SonarOutputDir();
    [CompilerGeneratedAttribute]
public void set_SonarOutputDir(string value);
    [CompilerGeneratedAttribute]
public string get_SonarBinDir();
    [CompilerGeneratedAttribute]
public void set_SonarBinDir(string value);
    [CompilerGeneratedAttribute]
public string get_SonarScannerWorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_SonarScannerWorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_SourcesDirectory();
    [CompilerGeneratedAttribute]
public void set_SourcesDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_JavaExePath();
    [CompilerGeneratedAttribute]
public void set_JavaExePath(string value);
    [CompilerGeneratedAttribute]
public bool get_ScanAllAnalysis();
    [CompilerGeneratedAttribute]
public void set_ScanAllAnalysis(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasBeginStepCommandLineCredentials();
    [CompilerGeneratedAttribute]
public void set_HasBeginStepCommandLineCredentials(bool value);
    [CompilerGeneratedAttribute]
public string get_SonarQubeHostUrl();
    [CompilerGeneratedAttribute]
public void set_SonarQubeHostUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SonarQubeVersion();
    [CompilerGeneratedAttribute]
public void set_SonarQubeVersion(string value);
    [CompilerGeneratedAttribute]
public string get_SonarProjectKey();
    [CompilerGeneratedAttribute]
public void set_SonarProjectKey(string value);
    [CompilerGeneratedAttribute]
public string get_SonarProjectVersion();
    [CompilerGeneratedAttribute]
public void set_SonarProjectVersion(string value);
    [CompilerGeneratedAttribute]
public string get_SonarProjectName();
    [CompilerGeneratedAttribute]
public void set_SonarProjectName(string value);
    [CompilerGeneratedAttribute]
public List`1<ConfigSetting> get_AdditionalConfig();
    [CompilerGeneratedAttribute]
public void set_AdditionalConfig(List`1<ConfigSetting> value);
    [CompilerGeneratedAttribute]
public AnalysisProperties get_ServerSettings();
    [CompilerGeneratedAttribute]
public void set_ServerSettings(AnalysisProperties value);
    [CompilerGeneratedAttribute]
public AnalysisProperties get_LocalSettings();
    [CompilerGeneratedAttribute]
public void set_LocalSettings(AnalysisProperties value);
    [CompilerGeneratedAttribute]
public List`1<AnalyzerSettings> get_AnalyzersSettings();
    [CompilerGeneratedAttribute]
public void set_AnalyzersSettings(List`1<AnalyzerSettings> value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    public void Save(string fileName);
    public static AnalysisConfig Load(string fileName);
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Common.AnalysisConfigExtensions : object {
    private static string TfsUriSettingId;
    private static string BuildUriSettingId;
    private static string VsCoverageConverterToolPathId;
    [ExtensionAttribute]
public static string GetTfsUri(AnalysisConfig config);
    [ExtensionAttribute]
public static void SetTfsUri(AnalysisConfig config, string uri);
    [ExtensionAttribute]
public static string GetBuildUri(AnalysisConfig config);
    [ExtensionAttribute]
public static void SetBuildUri(AnalysisConfig config, string uri);
    [ExtensionAttribute]
public static void SetVsCoverageConverterToolPath(AnalysisConfig config, string path);
    [ExtensionAttribute]
public static string GetVsCoverageConverterToolPath(AnalysisConfig config);
}
public class SonarScanner.MSBuild.Common.AnalysisException : Exception {
    public AnalysisException(string message);
    public AnalysisException(string message, Exception innerException);
    protected AnalysisException(SerializationInfo info, StreamingContext context);
}
[XmlRootAttribute]
public class SonarScanner.MSBuild.Common.AnalysisProperties : List`1<Property> {
    public static string XmlNamespace;
    public static string XmlElementName;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [XmlIgnoreAttribute]
public string FilePath { get; private set; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    public void Save(string fileName);
    public static AnalysisProperties Load(string fileName);
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Common.AnalysisPropertyProviderExtensions : object {
    [ExtensionAttribute]
public static bool TryGetValue(IAnalysisPropertyProvider provider, string name, String& value);
    [ExtensionAttribute]
public static bool HasProperty(IAnalysisPropertyProvider provider, string key);
}
public class SonarScanner.MSBuild.Common.AnalysisResult : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    public static IEqualityComparer`1<string> ResultKeyComparer;
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public string Location { get; public set; }
    private static AnalysisResult();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
}
public enum SonarScanner.MSBuild.Common.AnalysisType : Enum {
    public int value__;
    public static AnalysisType FilesToAnalyze;
    public static AnalysisType VisualStudioCodeCoverage;
}
public class SonarScanner.MSBuild.Common.AnalyzerPlugin : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StaticResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AssemblyPaths>k__BackingField;
    [XmlAttributeAttribute("Key")]
public string Key { get; public set; }
    [XmlAttributeAttribute("Version")]
public string Version { get; public set; }
    [XmlAttributeAttribute("StaticResourceName")]
public string StaticResourceName { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("Path")]
public List`1<string> AssemblyPaths { get; public set; }
    public AnalyzerPlugin(string key, string version, string staticResourceName, IEnumerable`1<string> assemblies);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_StaticResourceName();
    [CompilerGeneratedAttribute]
public void set_StaticResourceName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AssemblyPaths();
    [CompilerGeneratedAttribute]
public void set_AssemblyPaths(List`1<string> value);
}
public class SonarScanner.MSBuild.Common.AnalyzerSettings : object {
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RulesetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeactivatedRulesetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AnalyzerPlugin> <AnalyzerPlugins>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AdditionalFilePaths>k__BackingField;
    public string Language { get; public set; }
    public string RulesetPath { get; public set; }
    public string DeactivatedRulesetPath { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("AnalyzerPlugin")]
public List`1<AnalyzerPlugin> AnalyzerPlugins { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("Path")]
public List`1<string> AdditionalFilePaths { get; public set; }
    public AnalyzerSettings(string language, string rulesetPath, string deactivatedRulesetPath, IEnumerable`1<AnalyzerPlugin> analyzerPlugins, IEnumerable`1<string> additionalFiles);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_RulesetPath();
    [CompilerGeneratedAttribute]
public void set_RulesetPath(string value);
    [CompilerGeneratedAttribute]
public string get_DeactivatedRulesetPath();
    [CompilerGeneratedAttribute]
public void set_DeactivatedRulesetPath(string value);
    [CompilerGeneratedAttribute]
public List`1<AnalyzerPlugin> get_AnalyzerPlugins();
    [CompilerGeneratedAttribute]
public void set_AnalyzerPlugins(List`1<AnalyzerPlugin> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AdditionalFilePaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalFilePaths(List`1<string> value);
}
public class SonarScanner.MSBuild.Common.ApplicationCultureInfo : object {
    private CultureInfo defaultThreadCurrentCulture;
    private CultureInfo defaultThreadCurrentUICulture;
    public ApplicationCultureInfo(CultureInfo setCultureInfo);
    public sealed virtual void Dispose();
}
[DebuggerDisplayAttribute("{Id}")]
public class SonarScanner.MSBuild.Common.ArgumentDescriptor : object {
    public static StringComparer IdComparer;
    public static StringComparison IdComparison;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Prefixes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerb>k__BackingField;
    public string Id { get; }
    public String[] Prefixes { get; }
    public bool Required { get; }
    public string Description { get; }
    public bool AllowMultiple { get; }
    public bool IsVerb { get; }
    public ArgumentDescriptor(string id, String[] prefixes, bool required, string description, bool allowMultiple);
    public ArgumentDescriptor(string id, String[] prefixes, bool required, string description, bool allowMultiple, bool isVerb);
    private static ArgumentDescriptor();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public String[] get_Prefixes();
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public bool get_IsVerb();
}
[DebuggerDisplayAttribute("{Descriptor.Id}={Value}")]
public class SonarScanner.MSBuild.Common.ArgumentInstance : object {
    [CompilerGeneratedAttribute]
private ArgumentDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public ArgumentDescriptor Descriptor { get; }
    public string Value { get; }
    public ArgumentInstance(ArgumentDescriptor descriptor, string value);
    [CompilerGeneratedAttribute]
public ArgumentDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public string get_Value();
    public static bool TryGetArgument(string id, IEnumerable`1<ArgumentInstance> arguments, ArgumentInstance& instance);
    public static bool TryGetArgumentValue(string id, IEnumerable`1<ArgumentInstance> arguments, String& value);
}
public class SonarScanner.MSBuild.Common.BuildSettings : object {
    public static int DefaultLegacyCodeCoverageTimeout;
    [CompilerGeneratedAttribute]
private BuildEnvironment <BuildEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TfsUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourcesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnalysisBaseDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverageToolUserSuppliedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SonarScannerWorkingDirectory>k__BackingField;
    public static bool IsInTeamBuild { get; }
    public static bool SkipLegacyCodeCoverageProcessing { get; }
    public static int LegacyCodeCoverageProcessingTimeout { get; }
    public BuildEnvironment BuildEnvironment { get; private set; }
    public string TfsUri { get; private set; }
    public string BuildUri { get; private set; }
    public string SourcesDirectory { get; private set; }
    public string AnalysisBaseDirectory { get; private set; }
    public string BuildDirectory { get; private set; }
    public string CoverageToolUserSuppliedPath { get; private set; }
    public string SonarConfigDirectory { get; }
    public string SonarOutputDirectory { get; }
    public string SonarBinDirectory { get; }
    public string AnalysisConfigFilePath { get; }
    public string SonarScannerWorkingDirectory { get; private set; }
    public static bool get_IsInTeamBuild();
    public static bool get_SkipLegacyCodeCoverageProcessing();
    public static int get_LegacyCodeCoverageProcessingTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual BuildEnvironment get_BuildEnvironment();
    [CompilerGeneratedAttribute]
private void set_BuildEnvironment(BuildEnvironment value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TfsUri();
    [CompilerGeneratedAttribute]
private void set_TfsUri(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BuildUri();
    [CompilerGeneratedAttribute]
private void set_BuildUri(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourcesDirectory();
    [CompilerGeneratedAttribute]
private void set_SourcesDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AnalysisBaseDirectory();
    [CompilerGeneratedAttribute]
private void set_AnalysisBaseDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BuildDirectory();
    [CompilerGeneratedAttribute]
private void set_BuildDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_CoverageToolUserSuppliedPath();
    [CompilerGeneratedAttribute]
private void set_CoverageToolUserSuppliedPath(string value);
    public sealed virtual string get_SonarConfigDirectory();
    public sealed virtual string get_SonarOutputDirectory();
    public sealed virtual string get_SonarBinDirectory();
    public sealed virtual string get_AnalysisConfigFilePath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SonarScannerWorkingDirectory();
    [CompilerGeneratedAttribute]
private void set_SonarScannerWorkingDirectory(string value);
    public static BuildSettings GetSettingsFromEnvironment();
    public static BuildSettings CreateNonTeamBuildSettingsForTesting(string analysisBaseDirectory);
    private static BuildEnvironment GetBuildEnvironment();
    private static bool TryGetBoolEnvironmentVariable(string envVar, bool defaultValue);
    private static int TryGetIntEnvironmentVariable(string envVar, int defaultValue);
}
public class SonarScanner.MSBuild.Common.CmdLineArgPropertyProvider : object {
    public static string DynamicPropertyArgumentId;
    public static ArgumentDescriptor Descriptor;
    private IEnumerable`1<Property> properties;
    private CmdLineArgPropertyProvider(IEnumerable`1<Property> properties);
    private static CmdLineArgPropertyProvider();
    public static bool TryCreateProvider(IEnumerable`1<ArgumentInstance> commandLineArguments, ILogger logger, IAnalysisPropertyProvider& provider);
    public sealed virtual bool TryGetProperty(string key, Property& property);
    public sealed virtual IEnumerable`1<Property> GetAllProperties();
    private static bool ExtractAndValidateProperties(IEnumerable`1<ArgumentInstance> arguments, ILogger logger, IEnumerable`1& analysisProperties);
    private static bool ContainsNamedParameter(string propertyName, IEnumerable`1<Property> properties, ILogger logger, string errorMessage);
    private static bool ContainsUnsettableParameter(string propertyName, IEnumerable`1<Property> properties, ILogger logger);
}
public static class SonarScanner.MSBuild.Common.CommandLine.CommandLineFlagPrefix : object {
    private static Char[] Prefixes;
    private static CommandLineFlagPrefix();
    public static String[] GetPrefixedFlags(String[] flags);
}
public class SonarScanner.MSBuild.Common.CommandLineParser : object {
    private IEnumerable`1<ArgumentDescriptor> descriptors;
    private bool allowUnrecognized;
    public CommandLineParser(IEnumerable`1<ArgumentDescriptor> descriptors, bool allowUnrecognized);
    public bool ParseArguments(IEnumerable`1<string> commandLineArgs, ILogger logger, IList`1& argumentInstances);
    private bool TryGetMatchingDescriptor(string argument, ArgumentDescriptor& descriptor, String& prefix);
    private static string TryGetMatchingPrefix(ArgumentDescriptor descriptor, string argument);
    private static bool IdExists(string id, IEnumerable`1<ArgumentInstance> arguments);
    private bool CheckRequiredArgumentsSupplied(IEnumerable`1<ArgumentInstance> arguments, ILogger logger);
}
public class SonarScanner.MSBuild.Common.ConfigSetting : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static IEqualityComparer`1<string> SettingKeyComparer;
    public static IEqualityComparer`1<string> SettingValueComparer;
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public string Value { get; public set; }
    private static ConfigSetting();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Common.ConfigSettingsExtensions : object {
    private static string SettingsFileKey;
    [ExtensionAttribute]
public static string GetConfigValue(AnalysisConfig config, string settingId, string defaultValue);
    [ExtensionAttribute]
public static void SetConfigValue(AnalysisConfig config, string settingId, string value);
    [ExtensionAttribute]
public static IAnalysisPropertyProvider GetAnalysisSettings(AnalysisConfig config, bool includeServerSettings, ILogger logger);
    [ExtensionAttribute]
public static void SetSettingsFilePath(AnalysisConfig config, string fileName);
    [ExtensionAttribute]
public static string GetSettingsFilePath(AnalysisConfig config);
    [ExtensionAttribute]
public static Version FindServerVersion(AnalysisConfig config);
    [ExtensionAttribute]
public static string GetSettingOrDefault(AnalysisConfig config, string settingName, bool includeServerSettings, string defaultValue, ILogger logger);
    [ExtensionAttribute]
private static bool TryGetConfigSetting(AnalysisConfig config, string settingId, ConfigSetting& result);
    [ExtensionAttribute]
private static void SetValue(AnalysisConfig config, string settingId, string value);
}
internal class SonarScanner.MSBuild.Common.ConsoleColorScope : object {
    private ConsoleColor originalForeground;
    private ConsoleColor originalBackground;
    private bool disposedValue;
    public ConsoleColorScope(ConsoleColor textColor);
    private static void SetColors(ConsoleColor foreground, ConsoleColor background);
    public sealed virtual void Dispose();
}
public class SonarScanner.MSBuild.Common.ConsoleLogger : object {
    public static ConsoleColor DebugColor;
    public static ConsoleColor WarningColor;
    public static ConsoleColor ErrorColor;
    private static LoggerVerbosity DefaultVerbosity;
    private IList`1<string> uiWarnings;
    private IOutputWriter outputWriter;
    private IFileWrapper fileWrapper;
    private bool isOutputSuspended;
    private IList`1<Message> suspendedMessages;
    [CompilerGeneratedAttribute]
private bool <IncludeTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggerVerbosity <Verbosity>k__BackingField;
    public bool IncludeTimestamp { get; public set; }
    public LoggerVerbosity Verbosity { get; public set; }
    public ConsoleLogger(bool includeTimestamp);
    public ConsoleLogger(bool includeTimestamp, IFileWrapper fileWrapper);
    private ConsoleLogger(bool includeTimestamp, IOutputWriter writer, IFileWrapper fileWrapper);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeTimestamp();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeTimestamp(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual LoggerVerbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Verbosity(LoggerVerbosity value);
    public static ConsoleLogger CreateLoggerForTesting(bool includeTimestamp, IOutputWriter writer, IFileWrapper fileWrapper);
    public sealed virtual void SuspendOutput();
    public sealed virtual void ResumeOutput();
    public sealed virtual void LogWarning(string message, Object[] args);
    public sealed virtual void LogError(string message, Object[] args);
    public sealed virtual void LogDebug(string message, Object[] args);
    public sealed virtual void LogInfo(string message, Object[] args);
    public sealed virtual void LogUIWarning(string message, Object[] args);
    public sealed virtual void WriteUIWarnings(string outputFolder);
    private void FlushOutput();
    private void Write(MessageType messageType, string message, Object[] args);
    private void WriteFormatted(MessageType messageType, string formatted);
    private string FormatAndTimestampMessage(string message, Object[] args);
    private static string FormatMessage(string message, Object[] args);
    private static ConsoleColor GetConsoleColor(MessageType messageType);
}
public class SonarScanner.MSBuild.Common.ConsoleWriter : object {
    private static object ConsoleWriterLock;
    private static ConsoleWriter();
    private sealed virtual override void SonarScanner.MSBuild.Common.IOutputWriter.WriteLine(string message, ConsoleColor color, bool isError);
}
public static class SonarScanner.MSBuild.Common.Contract : object {
    public static void ThrowIfNullOrWhitespace(string value, string paramName);
}
[ExcludeFromCodeCoverageAttribute]
public class SonarScanner.MSBuild.Common.DirectoryWrapper : object {
    [CompilerGeneratedAttribute]
private static IDirectoryWrapper <Instance>k__BackingField;
    public static IDirectoryWrapper Instance { get; }
    private static DirectoryWrapper();
    [CompilerGeneratedAttribute]
public static IDirectoryWrapper get_Instance();
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual bool Exists(string path);
    public sealed virtual String[] GetDirectories(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual String[] GetFiles(string path, string searchPattern);
    public sealed virtual void Move(string sourceDirName, string destDirName);
    public sealed virtual void Delete(string path, bool recursive);
    public sealed virtual string GetRandomFileName();
    public sealed virtual IEnumerable`1<FileInfo> EnumerateFiles(DirectoryInfo path, string searchPattern, SearchOption searchOption);
    public sealed virtual IEnumerable`1<DirectoryInfo> EnumerateDirectories(DirectoryInfo path, string searchPattern, SearchOption searchOption);
}
public class SonarScanner.MSBuild.Common.EmptyPropertyProvider : object {
    public static IAnalysisPropertyProvider Instance;
    private static EmptyPropertyProvider();
    public sealed virtual IEnumerable`1<Property> GetAllProperties();
    public sealed virtual bool TryGetProperty(string key, Property& property);
}
public class SonarScanner.MSBuild.Common.EncodingProvider : object {
    public sealed virtual Encoding GetEncoding(string name);
    public sealed virtual Encoding GetEncoding(int codepage);
}
public class SonarScanner.MSBuild.Common.EnvScannerPropertiesProvider : object {
    public static string ENV_VAR_KEY;
    private IEnumerable`1<Property> properties;
    public EnvScannerPropertiesProvider(string json);
    private static EnvScannerPropertiesProvider();
    public static bool TryCreateProvider(ILogger logger, IAnalysisPropertyProvider& provider);
    public sealed virtual IEnumerable`1<Property> GetAllProperties();
    public sealed virtual bool TryGetProperty(string key, Property& property);
    private IEnumerable`1<Property> ParseVar(string json);
}
public static class SonarScanner.MSBuild.Common.FileConstants : object {
    public static string ProjectConfigFileName;
    public static string ProjectInfoFileName;
    public static string ConfigFileName;
    public static string ImportBeforeTargetsName;
    public static string IntegrationTargetsName;
    public static string UIWarningsFileName;
}
public class SonarScanner.MSBuild.Common.FileInfoEqualityComparer : object {
    public static StringComparison ComparisonType;
    [CompilerGeneratedAttribute]
private static FileInfoEqualityComparer <Instance>k__BackingField;
    public static FileInfoEqualityComparer Instance { get; }
    private static FileInfoEqualityComparer();
    [CompilerGeneratedAttribute]
public static FileInfoEqualityComparer get_Instance();
    public sealed virtual bool Equals(FileInfo x, FileInfo y);
    public sealed virtual int GetHashCode(FileInfo obj);
}
public class SonarScanner.MSBuild.Common.FilePropertyProvider : object {
    private static string DescriptorId;
    public static string DefaultFileName;
    public static string Prefix;
    public static string DescriptorPrefix;
    public static ArgumentDescriptor Descriptor;
    [CompilerGeneratedAttribute]
private AnalysisProperties <PropertiesFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultPropertiesFile>k__BackingField;
    public AnalysisProperties PropertiesFile { get; }
    public bool IsDefaultSettingsFile { get; }
    public bool IsDefaultPropertiesFile { get; private set; }
    private FilePropertyProvider(AnalysisProperties properties, bool isDefaultPropertiesFile);
    private static FilePropertyProvider();
    public static bool TryCreateProvider(IEnumerable`1<ArgumentInstance> commandLineArguments, string defaultPropertiesFileDirectory, ILogger logger, IAnalysisPropertyProvider& provider);
    public static FilePropertyProvider Load(string filePath);
    [CompilerGeneratedAttribute]
public AnalysisProperties get_PropertiesFile();
    public bool get_IsDefaultSettingsFile();
    [CompilerGeneratedAttribute]
public bool get_IsDefaultPropertiesFile();
    [CompilerGeneratedAttribute]
private void set_IsDefaultPropertiesFile(bool value);
    public sealed virtual IEnumerable`1<Property> GetAllProperties();
    public sealed virtual bool TryGetProperty(string key, Property& property);
    private static bool ResolveFilePath(string propertiesFilePath, string defaultPropertiesFileDirectory, ILogger logger, AnalysisProperties& properties);
    private static string TryGetDefaultPropertiesFilePath(string defaultDirectory, ILogger logger);
}
[ExcludeFromCodeCoverageAttribute]
public class SonarScanner.MSBuild.Common.FileWrapper : object {
    [CompilerGeneratedAttribute]
private static IFileWrapper <Instance>k__BackingField;
    public static IFileWrapper Instance { get; }
    private static FileWrapper();
    [CompilerGeneratedAttribute]
public static IFileWrapper get_Instance();
    public sealed virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public sealed virtual bool Exists(string path);
    public sealed virtual string ReadAllText(string path);
    public sealed virtual void WriteAllText(string path, string contents);
    public sealed virtual Stream Open(string path);
    public sealed virtual Stream Create(string path);
    public sealed virtual void Move(string sourceFileName, string destFileName);
    public sealed virtual void Delete(string file);
}
public interface SonarScanner.MSBuild.Common.IAnalysisPropertyProvider {
    public abstract virtual IEnumerable`1<Property> GetAllProperties();
    public abstract virtual bool TryGetProperty(string key, Property& property);
}
public interface SonarScanner.MSBuild.Common.IDirectoryWrapper {
    public abstract virtual void CreateDirectory(string path);
    public abstract virtual void Delete(string path, bool recursive);
    public abstract virtual bool Exists(string path);
    public abstract virtual String[] GetDirectories(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual String[] GetFiles(string path, string searchPattern);
    public abstract virtual string GetRandomFileName();
    public abstract virtual void Move(string sourceDirName, string destDirName);
    public abstract virtual IEnumerable`1<FileInfo> EnumerateFiles(DirectoryInfo path, string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<DirectoryInfo> EnumerateDirectories(DirectoryInfo path, string searchPattern, SearchOption searchOption);
}
public interface SonarScanner.MSBuild.Common.IFileWrapper {
    public abstract virtual bool Exists(string path);
    public abstract virtual string ReadAllText(string path);
    public abstract virtual void WriteAllText(string path, string contents);
    public abstract virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public abstract virtual Stream Open(string path);
    public abstract virtual Stream Create(string path);
    public abstract virtual void Move(string sourceFileName, string destFileName);
    public abstract virtual void Delete(string file);
}
public interface SonarScanner.MSBuild.Common.ILogger {
    public LoggerVerbosity Verbosity { get; public set; }
    public bool IncludeTimestamp { get; public set; }
    public abstract virtual void LogDebug(string message, Object[] args);
    public abstract virtual void LogInfo(string message, Object[] args);
    public abstract virtual void LogWarning(string message, Object[] args);
    public abstract virtual void LogError(string message, Object[] args);
    public abstract virtual void LogUIWarning(string message, Object[] args);
    public abstract virtual void WriteUIWarnings(string outputFolder);
    public abstract virtual LoggerVerbosity get_Verbosity();
    public abstract virtual void set_Verbosity(LoggerVerbosity value);
    public abstract virtual bool get_IncludeTimestamp();
    public abstract virtual void set_IncludeTimestamp(bool value);
    public abstract virtual void SuspendOutput();
    public abstract virtual void ResumeOutput();
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Common.ILoggerExtensions : object {
    [ExtensionAttribute]
public static void Log(ILogger logger, LoggerVerbosity level, string message, Object[] args);
}
public interface SonarScanner.MSBuild.Common.IMsBuildPathsSettings {
    public abstract virtual IEnumerable`1<string> GetImportBeforePaths();
    public abstract virtual IEnumerable`1<string> GetGlobalTargetsPaths();
}
public class SonarScanner.MSBuild.Common.Include : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [XmlAttributeAttribute]
public string Path { get; public set; }
    [XmlAttributeAttribute]
public string Action { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
}
public interface SonarScanner.MSBuild.Common.Interfaces.IBuildSettings {
    public BuildEnvironment BuildEnvironment { get; }
    public string TfsUri { get; }
    public string BuildUri { get; }
    public string SourcesDirectory { get; }
    public string AnalysisBaseDirectory { get; }
    public string BuildDirectory { get; }
    public string SonarConfigDirectory { get; }
    public string SonarOutputDirectory { get; }
    public string SonarBinDirectory { get; }
    public string AnalysisConfigFilePath { get; }
    public string SonarScannerWorkingDirectory { get; }
    public abstract virtual BuildEnvironment get_BuildEnvironment();
    public abstract virtual string get_TfsUri();
    public abstract virtual string get_BuildUri();
    public abstract virtual string get_SourcesDirectory();
    public abstract virtual string get_AnalysisBaseDirectory();
    public abstract virtual string get_BuildDirectory();
    public abstract virtual string get_SonarConfigDirectory();
    public abstract virtual string get_SonarOutputDirectory();
    public abstract virtual string get_SonarBinDirectory();
    public abstract virtual string get_AnalysisConfigFilePath();
    public abstract virtual string get_SonarScannerWorkingDirectory();
}
public interface SonarScanner.MSBuild.Common.Interfaces.IEncodingProvider {
    public abstract virtual Encoding GetEncoding(int codepage);
    public abstract virtual Encoding GetEncoding(string name);
}
public interface SonarScanner.MSBuild.Common.Interfaces.IRuntimeInformationWrapper {
    public abstract virtual bool IsOS(OSPlatform osPlatform);
}
public interface SonarScanner.MSBuild.Common.IOperatingSystemProvider {
    public abstract virtual PlatformOS OperatingSystem();
    public abstract virtual bool IsUnix();
    public abstract virtual string GetFolderPath(SpecialFolder folder, SpecialFolderOption option);
    public abstract virtual bool DirectoryExists(string path);
}
public interface SonarScanner.MSBuild.Common.IOutputWriter {
    public abstract virtual void WriteLine(string message, ConsoleColor color, bool isError);
}
public interface SonarScanner.MSBuild.Common.IProcessRunner {
    public abstract virtual bool Execute(ProcessRunnerArguments runnerArgs);
}
public class SonarScanner.MSBuild.Common.ListPropertiesProvider : object {
    private IList`1<Property> properties;
    public ListPropertiesProvider(IEnumerable`1<Property> properties);
    public ListPropertiesProvider(IDictionary`2<string, string> keyValuePairs);
    public Property AddProperty(string key, string value);
    public sealed virtual IEnumerable`1<Property> GetAllProperties();
    public sealed virtual bool TryGetProperty(string key, Property& property);
}
public enum SonarScanner.MSBuild.Common.LoggerVerbosity : Enum {
    public int value__;
    public static LoggerVerbosity Info;
    public static LoggerVerbosity Debug;
}
public class SonarScanner.MSBuild.Common.MsBuildPathSettings : object {
    private String[] msBuildVersions;
    private IOperatingSystemProvider operatingSystemProvider;
    public MsBuildPathSettings(ILogger logger);
    public MsBuildPathSettings(IOperatingSystemProvider operatingSystemProvider);
    public sealed virtual IEnumerable`1<string> GetImportBeforePaths();
    private IEnumerable`1<string> DotnetImportBeforePathsLinuxMac();
    [IteratorStateMachineAttribute("SonarScanner.MSBuild.Common.MsBuildPathSettings/<GetLocalApplicationDataPaths>d__6")]
private IEnumerable`1<string> GetLocalApplicationDataPaths();
    public sealed virtual IEnumerable`1<string> GetGlobalTargetsPaths();
    private static string GetMsBuildImportBeforePath(string basePath, string msBuildVersion);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetImportBeforePaths>b__4_0(string appData);
}
public class SonarScanner.MSBuild.Common.OperatingSystemProvider : object {
    private IFileWrapper fileWrapper;
    private ILogger logger;
    private Lazy`1<PlatformOS> operatingSystem;
    public OperatingSystemProvider(IFileWrapper fileWrapper, ILogger logger);
    public sealed virtual string GetFolderPath(SpecialFolder folder, SpecialFolderOption option);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual PlatformOS OperatingSystem();
    public bool IsAlpine();
    [ExcludeFromCodeCoverageAttribute]
public sealed virtual bool IsUnix();
    [ExcludeFromCodeCoverageAttribute]
private PlatformOS OperatingSystemCore();
    private static bool IsMacOSX();
    private bool IsAlpineRelease(string releaseInfoFilePath);
}
public enum SonarScanner.MSBuild.Common.PlatformOS : Enum {
    public int value__;
    public static PlatformOS Unknown;
    public static PlatformOS Windows;
    public static PlatformOS Linux;
    public static PlatformOS MacOSX;
    public static PlatformOS Alpine;
}
public class SonarScanner.MSBuild.Common.ProcessRunner : object {
    public static int ErrorCode;
    private ILogger logger;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public int ExitCode { get; private set; }
    public ProcessRunner(ILogger logger);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
private void set_ExitCode(int value);
    public sealed virtual bool Execute(ProcessRunnerArguments runnerArgs);
    private void SetEnvironmentVariables(ProcessStartInfo psi, IDictionary`2<string, string> envVariables);
    private void OnOutputDataReceived(object sender, DataReceivedEventArgs e);
    private void OnErrorDataReceived(object sender, DataReceivedEventArgs e);
}
public class SonarScanner.MSBuild.Common.ProcessRunnerArguments : object {
    [CompilerGeneratedAttribute]
private string <ExeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CmdLineArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeoutInMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBatchScript>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    public string ExeName { get; }
    public IEnumerable`1<string> CmdLineArgs { get; public set; }
    public string WorkingDirectory { get; public set; }
    public int TimeoutInMilliseconds { get; public set; }
    private bool IsBatchScript { get; private set; }
    public IDictionary`2<string, string> EnvironmentVariables { get; public set; }
    public ProcessRunnerArguments(string exeName, bool isBatchScript);
    [CompilerGeneratedAttribute]
public string get_ExeName();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_CmdLineArgs();
    [CompilerGeneratedAttribute]
public void set_CmdLineArgs(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public int get_TimeoutInMilliseconds();
    [CompilerGeneratedAttribute]
public void set_TimeoutInMilliseconds(int value);
    [CompilerGeneratedAttribute]
private bool get_IsBatchScript();
    [CompilerGeneratedAttribute]
private void set_IsBatchScript(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariables(IDictionary`2<string, string> value);
    public string GetEscapedArguments();
    public string AsLogText();
    public static bool ContainsSensitiveData(string text);
    private static string EscapeArgument(string arg);
    private static string ShellEscape(string argLine);
}
[XmlRootAttribute]
public class SonarScanner.MSBuild.Common.ProjectInfo : object {
    public static string XmlNamespace;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectType <ProjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExcluded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AnalysisResult> <AnalysisResults>k__BackingField;
    [CompilerGeneratedAttribute]
private AnalysisProperties <AnalysisSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public string ProjectName { get; public set; }
    public string ProjectLanguage { get; public set; }
    public ProjectType ProjectType { get; public set; }
    public Guid ProjectGuid { get; public set; }
    public string FullPath { get; public set; }
    public bool IsExcluded { get; public set; }
    public string Encoding { get; public set; }
    public List`1<AnalysisResult> AnalysisResults { get; public set; }
    public AnalysisProperties AnalysisSettings { get; public set; }
    public string Configuration { get; public set; }
    public string Platform { get; public set; }
    public string TargetFramework { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectLanguage();
    [CompilerGeneratedAttribute]
public void set_ProjectLanguage(string value);
    [CompilerGeneratedAttribute]
public ProjectType get_ProjectType();
    [CompilerGeneratedAttribute]
public void set_ProjectType(ProjectType value);
    [CompilerGeneratedAttribute]
public Guid get_ProjectGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectGuid(Guid value);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsExcluded();
    [CompilerGeneratedAttribute]
public void set_IsExcluded(bool value);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public List`1<AnalysisResult> get_AnalysisResults();
    [CompilerGeneratedAttribute]
public void set_AnalysisResults(List`1<AnalysisResult> value);
    [CompilerGeneratedAttribute]
public AnalysisProperties get_AnalysisSettings();
    [CompilerGeneratedAttribute]
public void set_AnalysisSettings(AnalysisProperties value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    public void Save(string fileName);
    public static ProjectInfo Load(string fileName);
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Common.ProjectInfoExtensions : object {
    [ExtensionAttribute]
public static bool TryGetAnalyzerResult(ProjectInfo projectInfo, AnalysisType analyzerType, AnalysisResult& result);
    [ExtensionAttribute]
public static bool TryGetAnalyzerResult(ProjectInfo projectInfo, string id, AnalysisResult& result);
    [ExtensionAttribute]
public static bool TryGetAnalysisSetting(ProjectInfo projectInfo, string id, Property& result);
    [ExtensionAttribute]
public static void AddAnalyzerResult(ProjectInfo projectInfo, AnalysisType analyzerType, string location);
    [ExtensionAttribute]
public static void AddAnalyzerResult(ProjectInfo projectInfo, string id, string location);
    [ExtensionAttribute]
public static DirectoryInfo GetDirectory(ProjectInfo projectInfo);
    [ExtensionAttribute]
public static string GetProjectGuidAsString(ProjectInfo projectInfo);
    [ExtensionAttribute]
public static string TryGetAnalysisFileLocation(ProjectInfo projectInfo, AnalysisType analysisType);
    [ExtensionAttribute]
public static FileInfo[] GetAllAnalysisFiles(ProjectInfo projectInfo, ILogger logger);
}
public enum SonarScanner.MSBuild.Common.ProjectInfoValidity : Enum {
    public int value__;
    public static ProjectInfoValidity Valid;
    public static ProjectInfoValidity InvalidGuid;
    public static ProjectInfoValidity ExcludeFlagSet;
    public static ProjectInfoValidity NoFilesToAnalyze;
    public static ProjectInfoValidity DuplicateGuid;
    public static ProjectInfoValidity ProjectNotFound;
}
public static class SonarScanner.MSBuild.Common.ProjectLanguages : object {
    public static string CSharp;
    public static string VisualBasic;
    private static StringComparer LanguageNameComparer;
    private static ProjectLanguages();
    public static bool IsCSharpProject(string language);
    public static bool IsVbProject(string language);
}
public enum SonarScanner.MSBuild.Common.ProjectType : Enum {
    public int value__;
    public static ProjectType Product;
    public static ProjectType Test;
}
public class SonarScanner.MSBuild.Common.Property : object {
    private static Regex SingleLinePropertyRegEx;
    private static Regex ValidSettingKeyRegEx;
    private static IEqualityComparer`1<string> PropertyKeyComparer;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [XmlAttributeAttribute("Name")]
public string Id { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public Property(string id, string value);
    private static Property();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public bool ContainsSensitiveData();
    public string AsSonarScannerArg();
    public static bool IsValidKey(string key);
    public static bool AreKeysEqual(string key1, string key2);
    public static Property Parse(string input);
    public static bool TryGetProperty(string key, IEnumerable`1<Property> properties, Property& property);
}
public static class SonarScanner.MSBuild.Common.RegexConstants : object {
    public static TimeSpan DefaultTimeout { get; }
    public static TimeSpan get_DefaultTimeout();
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Common.RegexExtensions : object {
    private static MatchCollection EmptyMatchCollection;
    private static RegexExtensions();
    [ExtensionAttribute]
public static Match SafeMatch(Regex regex, string input);
    [ExtensionAttribute]
public static bool SafeIsMatch(Regex regex, string input);
    [ExtensionAttribute]
public static bool SafeIsMatch(Regex regex, string input, bool timeoutFallback);
    [ExtensionAttribute]
public static MatchCollection SafeMatches(Regex regex, string input);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SonarScanner.MSBuild.Common.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CmdLine_ArgDescription_DynamicProperty { get; }
    internal static string CmdLine_ArgDescription_PropertiesFilePath { get; }
    internal static string ERROR_CannotCreateEmptyDirectory { get; }
    internal static string ERROR_CmdLine_CannotSetPropertyOnCommandLine { get; }
    internal static string ERROR_CmdLine_DuplicateArg { get; }
    internal static string ERROR_CmdLine_DuplicateProperty { get; }
    internal static string ERROR_CmdLine_InvalidAnalysisProperty { get; }
    internal static string ERROR_CmdLine_MissingRequiredArgument { get; }
    internal static string ERROR_CmdLine_MustUseOrganization { get; }
    internal static string ERROR_CmdLine_MustUseProjectKey { get; }
    internal static string ERROR_CmdLine_MustUseProjectName { get; }
    internal static string ERROR_CmdLine_MustUseProjectVersion { get; }
    internal static string ERROR_CmdLine_UnrecognizedArg { get; }
    internal static string ERROR_ConnectionFailed { get; }
    internal static string ERROR_FailedParsePropertiesEnvVar { get; }
    internal static string ERROR_FileNotFound { get; }
    internal static string ERROR_InvalidPropertyName { get; }
    internal static string ERROR_Parser_UniqueDescriptorIds { get; }
    internal static string ERROR_ProcessRunner_ExeNotFound { get; }
    internal static string ERROR_Properties_GlobalPropertiesFileDoesNotExist { get; }
    internal static string ERROR_Properties_InvalidPropertiesFile { get; }
    internal static string ERROR_SettingsFileNotFound { get; }
    internal static string ERROR_TrustFailure { get; }
    internal static string ERROR_UnauthorizedConnection { get; }
    internal static string ERROR_UrlNameResolutionFailed { get; }
    internal static string Logger_WarningPrefix { get; }
    internal static string MSG_AnalysisFileCouldNotBeAdded { get; }
    internal static string MSG_BeginningRetry { get; }
    internal static string MSG_CmdLine_SensitiveCmdLineArgsAlternativeText { get; }
    internal static string MSG_CreatingDirectory { get; }
    internal static string MSG_DeletingDirectory { get; }
    internal static string MSG_DirectoryAlreadyExists { get; }
    internal static string MSG_ExecutingFile { get; }
    internal static string MSG_ExecutionExitCode { get; }
    internal static string MSG_Properties_DefaultPropertiesFileFound { get; }
    internal static string MSG_Properties_DefaultPropertiesFileNotFound { get; }
    internal static string MSG_Properties_LoadingPropertiesFromFile { get; }
    internal static string MSG_RetryingOperation { get; }
    internal static string MSG_RetryOperationFailed { get; }
    internal static string MSG_RetryOperationSucceeded { get; }
    internal static string MSG_Runner_OverwritingEnvVar { get; }
    internal static string MSG_Runner_SettingEnvVar { get; }
    internal static string MSG_SonarLogLevelWasSpecified { get; }
    internal static string MSG_SonarVerboseWasSpecified { get; }
    internal static string WARN_ExecutionTimedOutKilled { get; }
    internal static string WARN_ExecutionTimedOutNotKilled { get; }
    internal static string WARN_FailedToReadFile { get; }
    internal static string WARN_InvalidTimeoutValue { get; }
    internal static string WARN_SonarVerboseNotBool { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CmdLine_ArgDescription_DynamicProperty();
    internal static string get_CmdLine_ArgDescription_PropertiesFilePath();
    internal static string get_ERROR_CannotCreateEmptyDirectory();
    internal static string get_ERROR_CmdLine_CannotSetPropertyOnCommandLine();
    internal static string get_ERROR_CmdLine_DuplicateArg();
    internal static string get_ERROR_CmdLine_DuplicateProperty();
    internal static string get_ERROR_CmdLine_InvalidAnalysisProperty();
    internal static string get_ERROR_CmdLine_MissingRequiredArgument();
    internal static string get_ERROR_CmdLine_MustUseOrganization();
    internal static string get_ERROR_CmdLine_MustUseProjectKey();
    internal static string get_ERROR_CmdLine_MustUseProjectName();
    internal static string get_ERROR_CmdLine_MustUseProjectVersion();
    internal static string get_ERROR_CmdLine_UnrecognizedArg();
    internal static string get_ERROR_ConnectionFailed();
    internal static string get_ERROR_FailedParsePropertiesEnvVar();
    internal static string get_ERROR_FileNotFound();
    internal static string get_ERROR_InvalidPropertyName();
    internal static string get_ERROR_Parser_UniqueDescriptorIds();
    internal static string get_ERROR_ProcessRunner_ExeNotFound();
    internal static string get_ERROR_Properties_GlobalPropertiesFileDoesNotExist();
    internal static string get_ERROR_Properties_InvalidPropertiesFile();
    internal static string get_ERROR_SettingsFileNotFound();
    internal static string get_ERROR_TrustFailure();
    internal static string get_ERROR_UnauthorizedConnection();
    internal static string get_ERROR_UrlNameResolutionFailed();
    internal static string get_Logger_WarningPrefix();
    internal static string get_MSG_AnalysisFileCouldNotBeAdded();
    internal static string get_MSG_BeginningRetry();
    internal static string get_MSG_CmdLine_SensitiveCmdLineArgsAlternativeText();
    internal static string get_MSG_CreatingDirectory();
    internal static string get_MSG_DeletingDirectory();
    internal static string get_MSG_DirectoryAlreadyExists();
    internal static string get_MSG_ExecutingFile();
    internal static string get_MSG_ExecutionExitCode();
    internal static string get_MSG_Properties_DefaultPropertiesFileFound();
    internal static string get_MSG_Properties_DefaultPropertiesFileNotFound();
    internal static string get_MSG_Properties_LoadingPropertiesFromFile();
    internal static string get_MSG_RetryingOperation();
    internal static string get_MSG_RetryOperationFailed();
    internal static string get_MSG_RetryOperationSucceeded();
    internal static string get_MSG_Runner_OverwritingEnvVar();
    internal static string get_MSG_Runner_SettingEnvVar();
    internal static string get_MSG_SonarLogLevelWasSpecified();
    internal static string get_MSG_SonarVerboseWasSpecified();
    internal static string get_WARN_ExecutionTimedOutKilled();
    internal static string get_WARN_ExecutionTimedOutNotKilled();
    internal static string get_WARN_FailedToReadFile();
    internal static string get_WARN_InvalidTimeoutValue();
    internal static string get_WARN_SonarVerboseNotBool();
}
public class SonarScanner.MSBuild.Common.Rule : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public string Action { get; public set; }
    public Rule(string id, string action);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
}
public class SonarScanner.MSBuild.Common.Rules : object {
    [CompilerGeneratedAttribute]
private string <AnalyzerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Rule> <RuleList>k__BackingField;
    [XmlAttributeAttribute]
public string AnalyzerId { get; public set; }
    [XmlAttributeAttribute]
public string RuleNamespace { get; public set; }
    [XmlElementAttribute("Rule")]
public List`1<Rule> RuleList { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AnalyzerId();
    [CompilerGeneratedAttribute]
public void set_AnalyzerId(string value);
    [CompilerGeneratedAttribute]
public string get_RuleNamespace();
    [CompilerGeneratedAttribute]
public void set_RuleNamespace(string value);
    [CompilerGeneratedAttribute]
public List`1<Rule> get_RuleList();
    [CompilerGeneratedAttribute]
public void set_RuleList(List`1<Rule> value);
}
public class SonarScanner.MSBuild.Common.RuleSet : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Include> <Includes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Rules> <Rules>k__BackingField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Description { get; public set; }
    [XmlAttributeAttribute]
public string ToolsVersion { get; public set; }
    [XmlElementAttribute]
public List`1<Include> Includes { get; public set; }
    [XmlElementAttribute]
public List`1<Rules> Rules { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ToolsVersion();
    [CompilerGeneratedAttribute]
public void set_ToolsVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<Include> get_Includes();
    [CompilerGeneratedAttribute]
public void set_Includes(List`1<Include> value);
    [CompilerGeneratedAttribute]
public List`1<Rules> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(List`1<Rules> value);
    public void Save(string fileName);
    public static RuleSet Load(string fileName);
}
public class SonarScanner.MSBuild.Common.RuntimeInformationWrapper : object {
    public sealed virtual bool IsOS(OSPlatform osPlatform);
}
public static class SonarScanner.MSBuild.Common.SafeRegex : object {
    public static bool IsMatch(string input, string pattern);
    public static bool IsMatch(string input, string pattern, RegexOptions options);
    public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
}
public static class SonarScanner.MSBuild.Common.Serializer : object {
    public static void SaveModel(T model, string fileName);
    public static string ToString(T model);
    public static T LoadModel(string fileName);
    private static void Write(T model, TextWriter writer);
}
public class SonarScanner.MSBuild.Common.SingleGlobalInstanceMutex : object {
    private Mutex mutex;
    public SingleGlobalInstanceMutex(string name);
    public SingleGlobalInstanceMutex(string name, TimeSpan acquireTimeout);
    public sealed virtual void Dispose();
    private static Mutex CreateMutex(string name);
}
public static class SonarScanner.MSBuild.Common.SonarProduct : object {
    private static Version SonarQube80;
    private static SonarProduct();
    public static string GetSonarProductToLog(string host);
    public static bool IsSonarCloud(Version version);
    private static bool ContainsSonarCloud(string host);
}
public static class SonarScanner.MSBuild.Common.SonarProperties : object {
    public static string CacheBaseUrl;
    public static string HostUrl;
    public static string JavaExePath;
    public static string SkipJreProvisioning;
    public static string SonarToken;
    public static string SonarUserName;
    public static string SonarPassword;
    public static string SonarcloudUrl;
    public static string ApiBaseUrl;
    public static string OperatingSystem;
    public static string Architecture;
    public static string ConnectTimeout;
    public static string SocketTimeout;
    public static string ResponseTimeout;
    public static string UserHome;
    public static string ScanAllAnalysis;
    public static string ProjectKey;
    public static string ProjectBranch;
    public static string ProjectName;
    public static string ProjectVersion;
    public static string SourceEncoding;
    public static string ProjectBaseDir;
    public static string PullRequestBase;
    public static string PullRequestCacheBasePath;
    public static string WorkingDirectory;
    public static string PluginCacheDirectory;
    public static string Verbose;
    public static string LogLevel;
    public static string Organization;
    public static string VsCoverageXmlReportsPaths;
    public static string VsTestReportsPaths;
    public static string ClientCertPath;
    public static string ClientCertPassword;
    public static string HttpTimeout;
    public static string Sources;
    public static string Tests;
    public static IEnumerable`1<string> SensitivePropertyKeys;
    private static SonarProperties();
}
public static class SonarScanner.MSBuild.Common.SonarPropertiesDefault : object {
    public static string SonarcloudUrl;
    public static string SonarcloudApiBaseUrl;
}
public enum SonarScanner.MSBuild.Common.TFS.BuildEnvironment : Enum {
    public int value__;
    public static BuildEnvironment NotTeamBuild;
    public static BuildEnvironment LegacyTeamBuild;
    public static BuildEnvironment TeamBuild;
}
public static class SonarScanner.MSBuild.Common.TimeoutProvider : object {
    public static TimeSpan DefaultHttpTimeout;
    private static TimeoutProvider();
    public static TimeSpan HttpTimeout(IAnalysisPropertyProvider propertiesProvider, ILogger logger);
    private static TimeSpan TimeSpanFor(IAnalysisPropertyProvider provider, ILogger logger, string property, Func`1<TimeSpan> defaultValue);
}
public static class SonarScanner.MSBuild.Common.UniqueDirectory : object {
    public static string CreateNext(string path);
    private static string StripReservedChars(string path);
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Common.Utilities : object {
    public static string ScannerVersion { get; }
    public static string get_ScannerVersion();
    public static bool Retry(int timeoutInMilliseconds, int pauseBetweenTriesInMilliseconds, ILogger logger, Func`1<bool> op);
    public static void EnsureDirectoryExists(string directory, ILogger logger);
    public static void EnsureEmptyDirectory(string directory, ILogger logger);
    public static bool TryEnsureEmptyDirectories(ILogger logger, String[] directories);
    public static bool IsSecuredServerProperty(string s);
    public static bool HandleHostUrlWebException(WebException ex, string hostUrl, ILogger logger);
    public static void LogAssemblyVersion(ILogger logger, string description);
    [ExtensionAttribute]
public static string ToDisplayString(Version version);
}
public static class SonarScanner.MSBuild.Common.VerbosityCalculator : object {
    public static LoggerVerbosity InitialLoggingVerbosity;
    public static LoggerVerbosity DefaultLoggingVerbosity;
    private static string SonarLogDebugValue;
    public static LoggerVerbosity ComputeVerbosity(IAnalysisPropertyProvider properties, ILogger logger);
    private static LoggerVerbosity ComputeVerbosity(string sonarVerboseValue, string sonarLogValue, ILogger logger);
}
public static class SonarScanner.MSBuild.Common.WebUtils : object {
    private static string UriPartsDelimiter;
    public static Uri CreateUri(string uri);
    public static string Escape(string format, String[] args);
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.StringExtensions : object {
    [ExtensionAttribute]
public static string ReplaceCaseInsensitive(string input, string oldValue, string newValue);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
