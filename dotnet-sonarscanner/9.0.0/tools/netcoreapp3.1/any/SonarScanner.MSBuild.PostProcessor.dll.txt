[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class SonarScanner.MSBuild.PostProcessor.AnalysisWarningProcessor : object {
    public static void Process(String[] warnings, string outputPath, IFileWrapper fileWrapper, ILogger logger);
}
public static class SonarScanner.MSBuild.PostProcessor.ArgumentProcessor : object {
    private static IList`1<ArgumentDescriptor> Descriptors;
    private static ArgumentProcessor();
    public static bool TryProcessArgs(IEnumerable`1<string> commandLineArgs, ILogger logger, IAnalysisPropertyProvider& provider);
    private static bool AreParsedArgumentsValid(IAnalysisPropertyProvider provider, ILogger logger);
    public static bool IsPermittedProperty(Property property);
}
public interface SonarScanner.MSBuild.PostProcessor.Interfaces.IPostProcessor {
    public abstract virtual bool Execute(String[] args, AnalysisConfig config, IBuildSettings settings);
}
public interface SonarScanner.MSBuild.PostProcessor.ITargetsUninstaller {
    public abstract virtual void UninstallTargets(string binDirectory);
}
public class SonarScanner.MSBuild.PostProcessor.PostProcessor : object {
    private static string scanAllFiles;
    private ISonarScanner sonarScanner;
    private ILogger logger;
    private ITargetsUninstaller targetUninstaller;
    private ISonarProjectPropertiesValidator sonarProjectPropertiesValidator;
    private ITfsProcessor tfsProcessor;
    private IPropertiesFileGenerator propertiesFileGenerator;
    public PostProcessor(ISonarScanner sonarScanner, ILogger logger, ITargetsUninstaller targetUninstaller, ITfsProcessor tfsProcessor, ISonarProjectPropertiesValidator sonarProjectPropertiesValidator);
    public void SetPropertiesFileGenerator(IPropertiesFileGenerator propertiesFileGenerator);
    public sealed virtual bool Execute(String[] args, AnalysisConfig config, IBuildSettings settings);
    private ProjectInfoAnalysisResult GenerateAndValidatePropertiesFile(AnalysisConfig config);
    private void LogStartupSettings(AnalysisConfig config, IBuildSettings settings);
    private bool CheckEnvironmentConsistency(AnalysisConfig config, IBuildSettings settings);
    private bool CheckCredentialsInCommandLineArgs(AnalysisConfig config, IAnalysisPropertyProvider provider);
    private bool InvokeSonarScanner(IAnalysisPropertyProvider cmdLineArgs, AnalysisConfig config, string propertiesFilePath);
    private static IEnumerable`1<string> GetSonarScannerArgs(IAnalysisPropertyProvider provider);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SonarScanner.MSBuild.PostProcessor.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AssemblyDescription { get; }
    internal static string ERR_ConflictingSonarProjectProperties { get; }
    internal static string ERROR_BuildUrisDontMatch { get; }
    internal static string ERROR_CmdLine_DisallowedArgument { get; }
    internal static string ERROR_ConfigFileNotFound { get; }
    internal static string ERROR_CredentialsNotSpecified { get; }
    internal static string MSG_LoadingConfig { get; }
    internal static string MSG_UninstallTargets_CouldNotDelete { get; }
    internal static string MSG_UninstallTargets_NotExists { get; }
    internal static string MSG_UninstallTargets_Uninstalling { get; }
    internal static string Report_CreatingSummaryMarkdown { get; }
    internal static string Report_MdSummaryAnalysisFailed { get; }
    internal static string Report_MdSummaryAnalysisSucceeded { get; }
    internal static string Report_MdSummaryInvalidSkippedAndExcludedMessage { get; }
    internal static string Report_MdSummaryProductAndTestMessage { get; }
    internal static string SETTING_DumpSettings { get; }
    internal static string SETTINGS_InLegacyTeamBuild { get; }
    internal static string SETTINGS_InTeamBuild { get; }
    internal static string SETTINGS_NotInTeamBuild { get; }
    internal static string WARN_CannotProcessCoverage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AssemblyDescription();
    internal static string get_ERR_ConflictingSonarProjectProperties();
    internal static string get_ERROR_BuildUrisDontMatch();
    internal static string get_ERROR_CmdLine_DisallowedArgument();
    internal static string get_ERROR_ConfigFileNotFound();
    internal static string get_ERROR_CredentialsNotSpecified();
    internal static string get_MSG_LoadingConfig();
    internal static string get_MSG_UninstallTargets_CouldNotDelete();
    internal static string get_MSG_UninstallTargets_NotExists();
    internal static string get_MSG_UninstallTargets_Uninstalling();
    internal static string get_Report_CreatingSummaryMarkdown();
    internal static string get_Report_MdSummaryAnalysisFailed();
    internal static string get_Report_MdSummaryAnalysisSucceeded();
    internal static string get_Report_MdSummaryInvalidSkippedAndExcludedMessage();
    internal static string get_Report_MdSummaryProductAndTestMessage();
    internal static string get_SETTING_DumpSettings();
    internal static string get_SETTINGS_InLegacyTeamBuild();
    internal static string get_SETTINGS_InTeamBuild();
    internal static string get_SETTINGS_NotInTeamBuild();
    internal static string get_WARN_CannotProcessCoverage();
}
public class SonarScanner.MSBuild.PostProcessor.TargetsUninstaller : object {
    private ILogger logger;
    public TargetsUninstaller(ILogger logger);
    public sealed virtual void UninstallTargets(string binDirectory);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
