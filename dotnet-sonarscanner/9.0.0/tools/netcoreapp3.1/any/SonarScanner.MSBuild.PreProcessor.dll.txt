[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class SonarScanner.MSBuild.PreProcessor.AnalysisConfigProcessing.AnalysisConfigGenerator : object {
    public static AnalysisConfig GenerateFile(ProcessedArgs localSettings, BuildSettings buildSettings, Dictionary`2<string, string> additionalSettings, IDictionary`2<string, string> serverProperties, List`1<AnalyzerSettings> analyzersSettings, string sonarQubeVersion, string resolvedJavaExePath);
    private static IEnumerable`1<IAnalysisConfigProcessor> CreateProcessors(BuildSettings buildSettings, ProcessedArgs localSettings, Dictionary`2<string, string> additionalSettings, IDictionary`2<string, string> serverProperties);
}
public abstract class SonarScanner.MSBuild.PreProcessor.AnalysisConfigProcessing.Processors.AnalysisConfigProcessorBase : object {
    [CompilerGeneratedAttribute]
private ProcessedArgs <LocalSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ServerProperties>k__BackingField;
    protected ProcessedArgs LocalSettings { get; }
    protected IDictionary`2<string, string> ServerProperties { get; }
    protected AnalysisConfigProcessorBase(ProcessedArgs localSettings, IDictionary`2<string, string> serverProperties);
    public abstract virtual void Update(AnalysisConfig config);
    [CompilerGeneratedAttribute]
protected ProcessedArgs get_LocalSettings();
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, string> get_ServerProperties();
    protected string PropertyValue(string propertyName);
    protected static void AddSetting(AnalysisProperties properties, string id, string value);
}
public class SonarScanner.MSBuild.PreProcessor.AnalysisConfigProcessing.Processors.AnalysisScopeProcessor : AnalysisConfigProcessorBase {
    private static String[] IgnoreParameters;
    public AnalysisScopeProcessor(ProcessedArgs localSettings, IDictionary`2<string, string> serverProperties);
    private static AnalysisScopeProcessor();
    public virtual void Update(AnalysisConfig config);
}
public class SonarScanner.MSBuild.PreProcessor.AnalysisConfigProcessing.Processors.CoverageExclusionsProcessor : AnalysisConfigProcessorBase {
    private static string SonarExclusions;
    private static string VsCoverageReportsPaths;
    private static string OpenCoverReportsPaths;
    private static string DotCoverReportsPaths;
    public CoverageExclusionsProcessor(ProcessedArgs localSettings, IDictionary`2<string, string> serverProperties);
    public virtual void Update(AnalysisConfig config);
    private void Update(AnalysisConfig config, string coveragePaths);
    private String[] CoveragePaths();
    private string CoveragePathsAndDirectories(string propertyName);
}
public interface SonarScanner.MSBuild.PreProcessor.AnalysisConfigProcessing.Processors.IAnalysisConfigProcessor {
    public abstract virtual void Update(AnalysisConfig config);
}
public class SonarScanner.MSBuild.PreProcessor.AnalysisConfigProcessing.Processors.InitializationProcessor : AnalysisConfigProcessorBase {
    [CompilerGeneratedAttribute]
private BuildSettings <buildSettings>P;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <additionalSettings>P;
    public InitializationProcessor(BuildSettings buildSettings, ProcessedArgs localSettings, Dictionary`2<string, string> additionalSettings, IDictionary`2<string, string> serverProperties);
    public virtual void Update(AnalysisConfig config);
}
public static class SonarScanner.MSBuild.PreProcessor.ArgumentProcessor : object {
    private static string ProjectKeyId;
    private static string ProjectNameId;
    private static string ProjectVersionId;
    private static string OrganizationId;
    private static string InstallLoaderTargetsId;
    private static IList`1<ArgumentDescriptor> Descriptors;
    private static ArgumentProcessor();
    public static ProcessedArgs TryProcessArgs(IEnumerable`1<string> commandLineArgs, ILogger logger);
    internal static ProcessedArgs TryProcessArgs(IEnumerable`1<string> commandLineArgs, IFileWrapper fileWrapper, IDirectoryWrapper directoryWrapper, ILogger logger);
    private static string ArgumentValue(string id, IEnumerable`1<ArgumentInstance> arguments);
    private static bool TryGetInstallTargetsEnabled(IEnumerable`1<ArgumentInstance> arguments, ILogger logger, Boolean& installTargetsEnabled);
}
internal static class SonarScanner.MSBuild.PreProcessor.AutomaticBaseBranchDetection : object {
    private static List`1<Tuple`2<string, string>> Candidates;
    private static AutomaticBaseBranchDetection();
    public static CIProperty GetValue();
}
public class SonarScanner.MSBuild.PreProcessor.CacheProcessor : object {
    private ILogger logger;
    private ISonarWebServer server;
    private ProcessedArgs localSettings;
    private IBuildSettings buildSettings;
    private HashAlgorithm sha256;
    [CompilerGeneratedAttribute]
private string <PullRequestCacheBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnchangedFilesPath>k__BackingField;
    public string PullRequestCacheBasePath { get; }
    public string UnchangedFilesPath { get; private set; }
    public CacheProcessor(ISonarWebServer server, ProcessedArgs localSettings, IBuildSettings buildSettings, ILogger logger);
    [CompilerGeneratedAttribute]
public string get_PullRequestCacheBasePath();
    [CompilerGeneratedAttribute]
public string get_UnchangedFilesPath();
    [CompilerGeneratedAttribute]
private void set_UnchangedFilesPath(string value);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.CacheProcessor/<Execute>d__13")]
public Task Execute();
    internal Byte[] ContentHash(string path);
    internal void ProcessPullRequest(IList`1<SensorCacheEntry> cache);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__NullWhenEmpty|12_0(string value);
}
internal class SonarScanner.MSBuild.PreProcessor.ChecksumSha256 : object {
    [CompilerGeneratedAttribute]
private static ChecksumSha256 <Instance>k__BackingField;
    public static ChecksumSha256 Instance { get; }
    private static ChecksumSha256();
    [CompilerGeneratedAttribute]
public static ChecksumSha256 get_Instance();
    public sealed virtual string ComputeHash(Stream source);
}
public class SonarScanner.MSBuild.PreProcessor.FilePermissionsWrapper : object {
    [CompilerGeneratedAttribute]
private IOperatingSystemProvider <operatingSystemProvider>P;
    public FilePermissionsWrapper(IOperatingSystemProvider operatingSystemProvider);
    [ExcludeFromCodeCoverageAttribute]
public sealed virtual void Set(string destinationPath, int mode);
}
public interface SonarScanner.MSBuild.PreProcessor.IAnalyzerInstaller {
    public abstract virtual IEnumerable`1<AnalyzerPlugin> InstallAssemblies(IEnumerable`1<Plugin> plugins);
}
public interface SonarScanner.MSBuild.PreProcessor.IAnalyzerProvider {
    public abstract virtual AnalyzerSettings SetupAnalyzer(BuildSettings teamBuildSettings, IAnalysisPropertyProvider sonarProperties, IEnumerable`1<SonarRule> rules, string language);
}
public interface SonarScanner.MSBuild.PreProcessor.IDownloader {
    public abstract virtual string GetBaseUrl();
    public abstract virtual Task`1<Tuple`2<bool, string>> TryDownloadIfExists(string url, bool logPermissionDenied);
    public abstract virtual Task`1<bool> TryDownloadFileIfExists(string url, string targetFilePath, bool logPermissionDenied);
    public abstract virtual Task`1<string> Download(string url, bool logPermissionDenied, LoggerVerbosity failureVerbosity);
    public abstract virtual Task`1<Stream> DownloadStream(string url, Dictionary`2<string, string> headers);
    public abstract virtual Task`1<HttpResponseMessage> DownloadResource(string url);
}
public interface SonarScanner.MSBuild.PreProcessor.Interfaces.IChecksum {
    public abstract virtual string ComputeHash(Stream source);
}
public interface SonarScanner.MSBuild.PreProcessor.Interfaces.IFilePermissionsWrapper {
    public abstract virtual void Set(string destinationPath, int mode);
}
public interface SonarScanner.MSBuild.PreProcessor.IPreProcessor {
    public abstract virtual Task`1<bool> Execute(IEnumerable`1<string> args);
}
public interface SonarScanner.MSBuild.PreProcessor.IPreprocessorObjectFactory {
    public abstract virtual Task`1<ISonarWebServer> CreateSonarWebServer(ProcessedArgs args, IDownloader webDownloader, IDownloader apiDownloader);
    public abstract virtual ITargetsInstaller CreateTargetInstaller();
    public abstract virtual IAnalyzerProvider CreateRoslynAnalyzerProvider(ISonarWebServer server, string localCacheTempPath);
    public abstract virtual IJreResolver CreateJreResolver(ISonarWebServer server);
}
public interface SonarScanner.MSBuild.PreProcessor.ISonarWebServer {
    public Version ServerVersion { get; }
    public bool SupportsJreProvisioning { get; }
    public abstract virtual Version get_ServerVersion();
    public abstract virtual bool get_SupportsJreProvisioning();
    public abstract virtual Task`1<IList`1<SonarRule>> DownloadRules(string qProfile);
    public abstract virtual Task`1<IEnumerable`1<string>> DownloadAllLanguages();
    public abstract virtual Task`1<IDictionary`2<string, string>> DownloadProperties(string projectKey, string projectBranch);
    public abstract virtual Task`1<string> DownloadQualityProfile(string projectKey, string projectBranch, string language);
    public abstract virtual Task`1<bool> TryDownloadEmbeddedFile(string pluginKey, string embeddedFileName, string targetDirectory);
    public abstract virtual Task`1<IList`1<SensorCacheEntry>> DownloadCache(ProcessedArgs localSettings);
    public abstract virtual Task`1<JreMetadata> DownloadJreMetadataAsync(string operatingSystem, string architecture);
    public abstract virtual Task`1<Stream> DownloadJreAsync(JreMetadata metadata);
    public abstract virtual bool IsServerVersionSupported();
    public abstract virtual Task`1<bool> IsServerLicenseValid();
}
public interface SonarScanner.MSBuild.PreProcessor.ITargetsInstaller {
    public abstract virtual void InstallLoaderTargets(string workDirectory);
}
public interface SonarScanner.MSBuild.PreProcessor.JreResolution.IJreCache {
    public abstract virtual JreCacheResult IsJreCached(string sonarUserHome, JreDescriptor jreDescriptor);
    public abstract virtual Task`1<JreCacheResult> DownloadJreAsync(string sonarUserHome, JreDescriptor jreDescriptor, Func`1<Task`1<Stream>> jreDownload);
}
public interface SonarScanner.MSBuild.PreProcessor.JreResolution.IJreResolver {
    public abstract virtual Task`1<string> ResolveJrePath(ProcessedArgs args, string sonarUserHome);
}
internal class SonarScanner.MSBuild.PreProcessor.JreResolution.JreCache : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private IDirectoryWrapper <directoryWrapper>P;
    [CompilerGeneratedAttribute]
private IFileWrapper <fileWrapper>P;
    [CompilerGeneratedAttribute]
private IChecksum <checksum>P;
    [CompilerGeneratedAttribute]
private IUnpackerFactory <unpackerFactory>P;
    [CompilerGeneratedAttribute]
private IFilePermissionsWrapper <filePermissionsWrapper>P;
    public JreCache(ILogger logger, IDirectoryWrapper directoryWrapper, IFileWrapper fileWrapper, IChecksum checksum, IUnpackerFactory unpackerFactory, IFilePermissionsWrapper filePermissionsWrapper);
    public sealed virtual JreCacheResult IsJreCached(string sonarUserHome, JreDescriptor jreDescriptor);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.JreResolution.JreCache/<DownloadJreAsync>d__8")]
public sealed virtual Task`1<JreCacheResult> DownloadJreAsync(string sonarUserHome, JreDescriptor jreDescriptor, Func`1<Task`1<Stream>> jreDownload);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.JreResolution.JreCache/<DownloadValidateAndUnpackJre>d__9")]
private Task`1<JreCacheResult> DownloadValidateAndUnpackJre(IUnpacker unpacker, string jreDownloadPath, string downloadTarget, JreDescriptor jreDescriptor, string cacheRoot, Func`1<Task`1<Stream>> jreDownload);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.JreResolution.JreCache/<DownloadAndValidateJre>d__10")]
private Task`1<Exception> DownloadAndValidateJre(string jreDownloadPath, string downloadTarget, JreDescriptor descriptor, Func`1<Task`1<Stream>> jreDownload);
    private void TryDeleteFile(string tempFile);
    private static void EnsureClosed(Stream fileStream);
    private JreCacheResult ValidateAndUnpackJre(IUnpacker unpacker, string jreArchive, JreDescriptor jreDescriptor, string cacheRoot);
    private JreCacheResult UnpackJre(IUnpacker unpacker, string jreArchive, JreDescriptor jreDescriptor, string cacheRoot);
    private void CleanupFolder(string tempExtractionPath);
    private bool ValidateChecksum(string downloadTarget, string sha256);
    private bool EnsureCacheRoot(string sonarUserHome, String& cacheRootLocation);
    private string EnsureDirectoryExists(string directory);
    private static string JresCacheRoot(string sonarUserHome);
    private static string JreRootPath(JreDescriptor jreDescriptor, string cacheRoot);
    private static string JreExtractionPath(JreDescriptor jreDescriptor, string cacheRoot);
}
public class SonarScanner.MSBuild.PreProcessor.JreResolution.JreCacheFailure : JreCacheResult {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Message { get; }
    public JreCacheFailure(string Message);
    [CompilerGeneratedAttribute]
private JreCacheFailure(JreCacheFailure original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(JreCacheFailure left, JreCacheFailure right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(JreCacheFailure left, JreCacheFailure right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(JreCacheResult other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(JreCacheFailure other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual JreCacheResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Message);
}
public class SonarScanner.MSBuild.PreProcessor.JreResolution.JreCacheHit : JreCacheResult {
    [CompilerGeneratedAttribute]
private string <JavaExe>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string JavaExe { get; }
    public JreCacheHit(string JavaExe);
    [CompilerGeneratedAttribute]
private JreCacheHit(JreCacheHit original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_JavaExe();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(JreCacheHit left, JreCacheHit right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(JreCacheHit left, JreCacheHit right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(JreCacheResult other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(JreCacheHit other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual JreCacheResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& JavaExe);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SonarScanner.MSBuild.PreProcessor.JreResolution.JreCacheMiss : JreCacheResult {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private JreCacheMiss(JreCacheMiss original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(JreCacheMiss left, JreCacheMiss right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(JreCacheMiss left, JreCacheMiss right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(JreCacheResult other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(JreCacheMiss other);
    [CompilerGeneratedAttribute]
public virtual JreCacheResult <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class SonarScanner.MSBuild.PreProcessor.JreResolution.JreCacheResult : object {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected JreCacheResult(JreCacheResult original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(JreCacheResult left, JreCacheResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(JreCacheResult left, JreCacheResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(JreCacheResult other);
    [CompilerGeneratedAttribute]
public abstract virtual JreCacheResult <Clone>$();
}
[IsReadOnlyAttribute]
public class SonarScanner.MSBuild.PreProcessor.JreResolution.JreDescriptor : ValueType {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha256>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPath>k__BackingField;
    public string Filename { get; }
    public string Sha256 { get; }
    public string JavaPath { get; }
    public JreDescriptor(string Filename, string Sha256, string JavaPath);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public string get_Sha256();
    [CompilerGeneratedAttribute]
public string get_JavaPath();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JreDescriptor left, JreDescriptor right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JreDescriptor left, JreDescriptor right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JreDescriptor other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Filename, String& Sha256, String& JavaPath);
}
public class SonarScanner.MSBuild.PreProcessor.JreResolution.JreMetadata : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha256>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadUrl>k__BackingField;
    public string Id { get; }
    public string Filename { get; }
    public string Sha256 { get; }
    public string JavaPath { get; }
    public string DownloadUrl { get; }
    public JreMetadata(string Id, string Filename, string JavaPath, string DownloadUrl, string Sha256);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public string get_Sha256();
    [CompilerGeneratedAttribute]
public string get_JavaPath();
    [CompilerGeneratedAttribute]
public string get_DownloadUrl();
    public JreDescriptor ToDescriptor();
}
public class SonarScanner.MSBuild.PreProcessor.JreResolution.JreResolver : object {
    [CompilerGeneratedAttribute]
private ISonarWebServer <server>P;
    [CompilerGeneratedAttribute]
private IJreCache <cache>P;
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    public JreResolver(ISonarWebServer server, IJreCache cache, ILogger logger);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.JreResolution.JreResolver/<ResolveJrePath>d__4")]
public sealed virtual Task`1<string> ResolveJrePath(ProcessedArgs args, string sonarUserHome);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.JreResolution.JreResolver/<DownloadJre>d__5")]
private Task`1<string> DownloadJre(ProcessedArgs args, string sonarUserHome);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.JreResolution.JreResolver/<DownloadJre>d__6")]
private Task`1<string> DownloadJre(JreMetadata metadata, JreDescriptor descriptor, string sonarUserHome);
    private bool IsValid(ProcessedArgs args);
}
public class SonarScanner.MSBuild.PreProcessor.PreProcessor : object {
    private static string CSharpLanguage;
    private static string VBNetLanguage;
    private static String[] Languages;
    private IPreprocessorObjectFactory factory;
    private ILogger logger;
    public PreProcessor(IPreprocessorObjectFactory factory, ILogger logger);
    private static PreProcessor();
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.PreProcessor/<Execute>d__6")]
public sealed virtual Task`1<bool> Execute(IEnumerable`1<string> args);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.PreProcessor/<DoExecute>d__7")]
private Task`1<bool> DoExecute(ProcessedArgs localSettings);
    private void InstallLoaderTargets(ProcessedArgs args);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.PreProcessor/<FetchArgumentsAndRuleSets>d__9")]
private Task`1<ArgumentsAndRuleSets> FetchArgumentsAndRuleSets(ISonarWebServer server, ProcessedArgs args, BuildSettings settings);
}
public class SonarScanner.MSBuild.PreProcessor.PreprocessorObjectFactory : object {
    private ILogger logger;
    public PreprocessorObjectFactory(ILogger logger);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.PreprocessorObjectFactory/<CreateSonarWebServer>d__2")]
public sealed virtual Task`1<ISonarWebServer> CreateSonarWebServer(ProcessedArgs args, IDownloader webDownloader, IDownloader apiDownloader);
    public sealed virtual ITargetsInstaller CreateTargetInstaller();
    public sealed virtual IAnalyzerProvider CreateRoslynAnalyzerProvider(ISonarWebServer server, string localCacheTempPath);
    public sealed virtual IJreResolver CreateJreResolver(ISonarWebServer server);
    private bool ValidateServerUrl(string serverUrl);
    private bool ValidateServerVersion(ServerInfo serverInfo, Version serverVersion);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.PreprocessorObjectFactory/<QueryServerVersion>d__8")]
private Task`1<Version> QueryServerVersion(IDownloader downloader, IDownloader fallback);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.PreprocessorObjectFactory/<CanAuthenticate>d__9")]
private Task`1<bool> CanAuthenticate(IDownloader downloader);
    [CompilerGeneratedAttribute]
private IDownloader <CreateSonarWebServer>g__CreateDownloader|2_0(string baseUrl, <>c__DisplayClass2_0& );
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.PreprocessorObjectFactory/<<QueryServerVersion>g__GetVersion|8_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<Version> <QueryServerVersion>g__GetVersion|8_0(IDownloader downloader, string path, LoggerVerbosity failureVerbosity);
}
public class SonarScanner.MSBuild.PreProcessor.ProcessedArgs : object {
    private static Regex ProjectKeyRegEx;
    private IAnalysisPropertyProvider globalFileProperties;
    private IOperatingSystemProvider operatingSystemProvider;
    [CompilerGeneratedAttribute]
private string <ProjectKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HttpTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerInfo <ServerInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperatingSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstallLoaderTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipJreProvisioning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserHome>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScanAllAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnalysisPropertyProvider <AggregateProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnalysisPropertyProvider <CmdLineProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnalysisPropertyProvider <ScannerEnvProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public string ProjectKey { get; }
    public string ProjectName { get; }
    public string ProjectVersion { get; }
    public TimeSpan HttpTimeout { get; }
    public string Organization { get; }
    public ServerInfo ServerInfo { get; }
    public string OperatingSystem { get; }
    public string Architecture { get; }
    public bool InstallLoaderTargets { get; private set; }
    public string JavaExePath { get; }
    public bool SkipJreProvisioning { get; }
    public string UserHome { get; }
    public bool ScanAllAnalysis { get; }
    public IAnalysisPropertyProvider AggregateProperties { get; }
    public IAnalysisPropertyProvider CmdLineProperties { get; }
    public IAnalysisPropertyProvider ScannerEnvProperties { get; }
    public string PropertiesFileName { get; }
    internal bool IsValid { get; }
    public ProcessedArgs(string key, string name, string version, string organization, bool installLoaderTargets, IAnalysisPropertyProvider cmdLineProperties, IAnalysisPropertyProvider globalFileProperties, IAnalysisPropertyProvider scannerEnvProperties, IFileWrapper fileWrapper, IDirectoryWrapper directoryWrapper, IOperatingSystemProvider operatingSystemProvider, ILogger logger);
    private static ProcessedArgs();
    [CompilerGeneratedAttribute]
public virtual string get_ProjectKey();
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public string get_ProjectVersion();
    [CompilerGeneratedAttribute]
public TimeSpan get_HttpTimeout();
    [CompilerGeneratedAttribute]
public virtual string get_Organization();
    [CompilerGeneratedAttribute]
public ServerInfo get_ServerInfo();
    [CompilerGeneratedAttribute]
public virtual string get_OperatingSystem();
    [CompilerGeneratedAttribute]
public virtual string get_Architecture();
    [CompilerGeneratedAttribute]
public bool get_InstallLoaderTargets();
    [CompilerGeneratedAttribute]
private void set_InstallLoaderTargets(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_JavaExePath();
    [CompilerGeneratedAttribute]
public virtual bool get_SkipJreProvisioning();
    [CompilerGeneratedAttribute]
public string get_UserHome();
    [CompilerGeneratedAttribute]
public bool get_ScanAllAnalysis();
    [CompilerGeneratedAttribute]
public IAnalysisPropertyProvider get_AggregateProperties();
    [CompilerGeneratedAttribute]
public IAnalysisPropertyProvider get_CmdLineProperties();
    [CompilerGeneratedAttribute]
public IAnalysisPropertyProvider get_ScannerEnvProperties();
    public string get_PropertiesFileName();
    [CompilerGeneratedAttribute]
internal bool get_IsValid();
    public string GetSetting(string key);
    public string GetSetting(string key, string defaultValue);
    public virtual bool TryGetSetting(string key, String& value);
    public IEnumerable`1<Property> AllProperties();
    private string GetOperatingSystem(IAnalysisPropertyProvider properties);
    private bool CheckOrganizationValidity(ILogger logger);
    private static bool CheckProjectKeyValidity(string key, ILogger logger);
    private ServerInfo GetAndCheckServerInfo(ILogger logger, bool isHostSet, string sonarHostUrl, bool isSonarcloudSet, string sonarcloudUrl);
    private bool TryGetUserHome(ILogger logger, IDirectoryWrapper directoryWrapper, String& userHome);
    [CompilerGeneratedAttribute]
internal static ServerInfo <GetAndCheckServerInfo>g__Error|66_0(string message, <>c__DisplayClass66_0& );
    [CompilerGeneratedAttribute]
internal static ServerInfo <GetAndCheckServerInfo>g__Warn|66_1(ServerInfo server, string message, <>c__DisplayClass66_0& );
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class SonarScanner.MSBuild.PreProcessor.Protobuf.SensorCacheEntry : object {
    private static MessageParser`1<SensorCacheEntry> _parser;
    private UnknownFieldSet _unknownFields;
    public static int KeyFieldNumber;
    private string key_;
    public static int DataFieldNumber;
    private ByteString data_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<SensorCacheEntry> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Key { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Data { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public SensorCacheEntry(SensorCacheEntry other);
    private static SensorCacheEntry();
    public static MessageParser`1<SensorCacheEntry> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual SensorCacheEntry Clone();
    public string get_Key();
    public void set_Key(string value);
    public ByteString get_Data();
    public void set_Data(ByteString value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(SensorCacheEntry other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(SensorCacheEntry other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class SonarScanner.MSBuild.PreProcessor.Protobuf.SensorCacheEntryReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static SensorCacheEntryReflection();
    public static FileDescriptor get_Descriptor();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SonarScanner.MSBuild.PreProcessor.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AssemblyDescription { get; }
    internal static string CmdLine_ArgDescription_InstallTargets { get; }
    internal static string CmdLine_ArgDescription_Organization { get; }
    internal static string CmdLine_ArgDescription_ProjectKey { get; }
    internal static string CmdLine_ArgDescription_ProjectName { get; }
    internal static string CmdLine_ArgDescription_ProjectVersion { get; }
    internal static string ERR_CacheDirectoryCouldNotBeCreated { get; }
    internal static string ERR_DetectedErroneouslySonarCloud { get; }
    internal static string ERR_DetectedErroneouslySonarQube { get; }
    internal static string ERR_DotNetAnalyzersNotFound { get; }
    internal static string ERR_ErrorWhenQueryingServerVersion { get; }
    internal static string ERR_HostUrlAndSonarcloudUrlAreEmpty { get; }
    internal static string ERR_HostUrlDiffersFromSonarcloudUrl { get; }
    internal static string ERR_InvalidCredentials { get; }
    internal static string ERR_InvalidSonarHostUrl { get; }
    internal static string ERR_JavaExeNotFoundAtExpectedLocation { get; }
    internal static string ERR_JreArchiveFormatDetectionFailed { get; }
    internal static string ERR_JreArchiveFormatNotSupported { get; }
    internal static string ERR_JreChecksumCalculationFailed { get; }
    internal static string ERR_JreChecksumMissmatch { get; }
    internal static string ERR_JreDownloadFailed { get; }
    internal static string ERR_JreDownloadStreamNull { get; }
    internal static string ERR_JreExtractionCleanupFailed { get; }
    internal static string ERR_JreExtractionFailed { get; }
    internal static string ERR_JreExtractionFailedWithError { get; }
    internal static string ERR_JreJavaExeMissing { get; }
    internal static string ERR_MissingOrganization { get; }
    internal static string ERR_MissingUriScheme { get; }
    internal static string ERR_SonarQubeUnsupported { get; }
    internal static string ERR_UnableToConnectToServer { get; }
    internal static string ERR_UnlicensedServer { get; }
    internal static string ERR_UserHomeInvalid { get; }
    internal static string ERROR_CmdLine_InvalidInstallTargetsValue { get; }
    internal static string ERROR_DownloadingQualityProfileFailed { get; }
    internal static string ERROR_DuplicateCheckId { get; }
    internal static string ERROR_InvalidCommandLineArgs { get; }
    internal static string ERROR_InvalidJavaExePath { get; }
    internal static string ERROR_InvalidProjectKeyArg { get; }
    internal static string ERROR_InvalidScanAllAnalysis { get; }
    internal static string ERROR_InvalidSkipJreProvisioning { get; }
    internal static string ERROR_MissingSetting { get; }
    internal static string ERROR_Organization_Provided_In_SonarQubeAnalysis_file { get; }
    internal static string ERROR_SonarSourcesAndTestsNotSupported { get; }
    internal static string ERROR_UnsupportedSonarQubeVersion { get; }
    internal static string MSG_CE_Detected_LicenseValid { get; }
    internal static string MSG_CheckingLicenseValidity { get; }
    internal static string MSG_CheckingVersionSupported { get; }
    internal static string MSG_CreatingFolders { get; }
    internal static string MSG_DeletingFile { get; }
    internal static string MSG_DeletingFileFailure { get; }
    internal static string MSG_DownloadFailed { get; }
    internal static string MSG_Downloading { get; }
    internal static string MSG_DownloadingCache { get; }
    internal static string MSG_DownloadingFile { get; }
    internal static string MSG_DownloadingZip { get; }
    internal static string MSG_ExtractingFiles { get; }
    internal static string MSG_FetchingAnalysisConfiguration { get; }
    internal static string MSG_FetchingProjectProperties { get; }
    internal static string MSG_FetchingQualityProfile { get; }
    internal static string MSG_FetchingRules { get; }
    internal static string MSG_FetchingVersion { get; }
    internal static string MSG_FileChecksum { get; }
    internal static string MSG_FilePermissionsCopyFailed { get; }
    internal static string MSG_Forbidden_BrowsePermission { get; }
    internal static string MSG_GeneratingRulesets { get; }
    internal static string MSG_IncrementalPRAnalysisUpdateSonarQube { get; }
    internal static string MSG_InstallTargets_Copy { get; }
    internal static string MSG_InstallTargets_Error { get; }
    internal static string MSG_InstallTargets_Overwrite { get; }
    internal static string MSG_InstallTargets_UpToDate { get; }
    internal static string MSG_InstallTargetsLocalSystem { get; }
    internal static string MSG_JreAlreadyDownloaded { get; }
    internal static string MSG_JreDownloadBottleneck { get; }
    internal static string MSG_JreDownloadUri { get; }
    internal static string MSG_JreExtractedSucessfully { get; }
    internal static string MSG_JreFoundAfterFailedDownload { get; }
    internal static string MSG_JreResolver_ArchitectureMissing { get; }
    internal static string MSG_JreResolver_CacheFailure { get; }
    internal static string MSG_JreResolver_CacheHit { get; }
    internal static string MSG_JreResolver_CacheMiss { get; }
    internal static string MSG_JreResolver_DownloadFailure { get; }
    internal static string MSG_JreResolver_DownloadSuccess { get; }
    internal static string MSG_JreResolver_JavaExePathSet { get; }
    internal static string MSG_JreResolver_MetadataFailure { get; }
    internal static string MSG_JreResolver_NotSupportedByServer { get; }
    internal static string MSG_JreResolver_OperatingSystemMissing { get; }
    internal static string MSG_JreResolver_Resolving { get; }
    internal static string MSG_JreResolver_SkipJreProvisioningSet { get; }
    internal static string MSG_MovingUnpackedJre { get; }
    internal static string MSG_NoCacheData { get; }
    internal static string MSG_NoPullRequestCacheBasePath { get; }
    internal static string MSG_NotCopyingTargets { get; }
    internal static string MSG_Processing_PullRequest_AutomaticBranchDetection { get; }
    internal static string MSG_Processing_PullRequest_NoBranch { get; }
    internal static string MSG_Processing_PullRequest_NoCacheBaseUrl { get; }
    internal static string MSG_Processing_PullRequest_NoOrganization { get; }
    internal static string MSG_Processing_PullRequest_NoProjectKey { get; }
    internal static string MSG_Processing_PullRequest_NoToken { get; }
    internal static string MSG_Processing_PullRequest_RequestPrepareRead { get; }
    internal static string MSG_ResponseReceived { get; }
    internal static string MSG_ServerInfo_ApiUrlDetected { get; }
    internal static string MSG_ServerInfo_IsSonarCloudDetected { get; }
    internal static string MSG_ServerInfo_ServerUrlDetected { get; }
    internal static string MSG_SonarCloudDetected_SkipLicenseCheck { get; }
    internal static string MSG_SonarCloudDetected_SkipVersionCheck { get; }
    internal static string MSG_StartingJreDownload { get; }
    internal static string MSG_StartingJreExtraction { get; }
    internal static string MSG_UnchangedFilesStats { get; }
    internal static string MSG_UpdatingMSBuildTargets { get; }
    internal static string MSG_UserHomeDirectoryCreated { get; }
    internal static string MSG_UsingSonarCloud { get; }
    internal static string MSG_UsingSonarQube { get; }
    internal static string RAP_AdditionalFileAlreadyExists { get; }
    internal static string RAP_AdditionalFileNameMustBeSpecified { get; }
    internal static string RAP_NoActiveRules { get; }
    internal static string RAP_NoAnalyzerPluginsSpecified { get; }
    internal static string RAP_NoAssembliesForRepo { get; }
    internal static string RAP_NoPluginInstalled { get; }
    internal static string RAP_NoProfileForProject { get; }
    internal static string RAP_NoQualityProfile { get; }
    internal static string RAP_ProfileDoesNotContainRuleset { get; }
    internal static string RAP_ProfileExportFound { get; }
    internal static string RAP_ProfileExportNotFound { get; }
    internal static string RAP_ProvisioningAnalyzerAssemblies { get; }
    internal static string RAP_UnpackingRuleset { get; }
    internal static string RAP_WritingAdditionalFile { get; }
    internal static string WARN_AuthenticationFailed { get; }
    internal static string WARN_DefaultHostUrlChanged { get; }
    internal static string WARN_DefaultUserHomeCreationFailed { get; }
    internal static string WARN_ExistingGlobalTargets { get; }
    internal static string WARN_HostUrlAndSonarcloudUrlSet { get; }
    internal static string WARN_IncrementalPRCacheEntryRetrieval_Error { get; }
    internal static string WARN_JreMetadataNotRetrieved { get; }
    internal static string WARN_SourcesAndTestsDeprecated { get; }
    internal static string WARN_TestProjectPattern { get; }
    internal static string WARN_UI_ScanAllAnalysisEnabled { get; }
    internal static string WARN_UI_SonarQubeNearEndOfSupport { get; }
    internal static string WCD_UserNameCannotContainColon { get; }
    internal static string WCD_UserNameMustBeAscii { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AssemblyDescription();
    internal static string get_CmdLine_ArgDescription_InstallTargets();
    internal static string get_CmdLine_ArgDescription_Organization();
    internal static string get_CmdLine_ArgDescription_ProjectKey();
    internal static string get_CmdLine_ArgDescription_ProjectName();
    internal static string get_CmdLine_ArgDescription_ProjectVersion();
    internal static string get_ERR_CacheDirectoryCouldNotBeCreated();
    internal static string get_ERR_DetectedErroneouslySonarCloud();
    internal static string get_ERR_DetectedErroneouslySonarQube();
    internal static string get_ERR_DotNetAnalyzersNotFound();
    internal static string get_ERR_ErrorWhenQueryingServerVersion();
    internal static string get_ERR_HostUrlAndSonarcloudUrlAreEmpty();
    internal static string get_ERR_HostUrlDiffersFromSonarcloudUrl();
    internal static string get_ERR_InvalidCredentials();
    internal static string get_ERR_InvalidSonarHostUrl();
    internal static string get_ERR_JavaExeNotFoundAtExpectedLocation();
    internal static string get_ERR_JreArchiveFormatDetectionFailed();
    internal static string get_ERR_JreArchiveFormatNotSupported();
    internal static string get_ERR_JreChecksumCalculationFailed();
    internal static string get_ERR_JreChecksumMissmatch();
    internal static string get_ERR_JreDownloadFailed();
    internal static string get_ERR_JreDownloadStreamNull();
    internal static string get_ERR_JreExtractionCleanupFailed();
    internal static string get_ERR_JreExtractionFailed();
    internal static string get_ERR_JreExtractionFailedWithError();
    internal static string get_ERR_JreJavaExeMissing();
    internal static string get_ERR_MissingOrganization();
    internal static string get_ERR_MissingUriScheme();
    internal static string get_ERR_SonarQubeUnsupported();
    internal static string get_ERR_UnableToConnectToServer();
    internal static string get_ERR_UnlicensedServer();
    internal static string get_ERR_UserHomeInvalid();
    internal static string get_ERROR_CmdLine_InvalidInstallTargetsValue();
    internal static string get_ERROR_DownloadingQualityProfileFailed();
    internal static string get_ERROR_DuplicateCheckId();
    internal static string get_ERROR_InvalidCommandLineArgs();
    internal static string get_ERROR_InvalidJavaExePath();
    internal static string get_ERROR_InvalidProjectKeyArg();
    internal static string get_ERROR_InvalidScanAllAnalysis();
    internal static string get_ERROR_InvalidSkipJreProvisioning();
    internal static string get_ERROR_MissingSetting();
    internal static string get_ERROR_Organization_Provided_In_SonarQubeAnalysis_file();
    internal static string get_ERROR_SonarSourcesAndTestsNotSupported();
    internal static string get_ERROR_UnsupportedSonarQubeVersion();
    internal static string get_MSG_CE_Detected_LicenseValid();
    internal static string get_MSG_CheckingLicenseValidity();
    internal static string get_MSG_CheckingVersionSupported();
    internal static string get_MSG_CreatingFolders();
    internal static string get_MSG_DeletingFile();
    internal static string get_MSG_DeletingFileFailure();
    internal static string get_MSG_DownloadFailed();
    internal static string get_MSG_Downloading();
    internal static string get_MSG_DownloadingCache();
    internal static string get_MSG_DownloadingFile();
    internal static string get_MSG_DownloadingZip();
    internal static string get_MSG_ExtractingFiles();
    internal static string get_MSG_FetchingAnalysisConfiguration();
    internal static string get_MSG_FetchingProjectProperties();
    internal static string get_MSG_FetchingQualityProfile();
    internal static string get_MSG_FetchingRules();
    internal static string get_MSG_FetchingVersion();
    internal static string get_MSG_FileChecksum();
    internal static string get_MSG_FilePermissionsCopyFailed();
    internal static string get_MSG_Forbidden_BrowsePermission();
    internal static string get_MSG_GeneratingRulesets();
    internal static string get_MSG_IncrementalPRAnalysisUpdateSonarQube();
    internal static string get_MSG_InstallTargets_Copy();
    internal static string get_MSG_InstallTargets_Error();
    internal static string get_MSG_InstallTargets_Overwrite();
    internal static string get_MSG_InstallTargets_UpToDate();
    internal static string get_MSG_InstallTargetsLocalSystem();
    internal static string get_MSG_JreAlreadyDownloaded();
    internal static string get_MSG_JreDownloadBottleneck();
    internal static string get_MSG_JreDownloadUri();
    internal static string get_MSG_JreExtractedSucessfully();
    internal static string get_MSG_JreFoundAfterFailedDownload();
    internal static string get_MSG_JreResolver_ArchitectureMissing();
    internal static string get_MSG_JreResolver_CacheFailure();
    internal static string get_MSG_JreResolver_CacheHit();
    internal static string get_MSG_JreResolver_CacheMiss();
    internal static string get_MSG_JreResolver_DownloadFailure();
    internal static string get_MSG_JreResolver_DownloadSuccess();
    internal static string get_MSG_JreResolver_JavaExePathSet();
    internal static string get_MSG_JreResolver_MetadataFailure();
    internal static string get_MSG_JreResolver_NotSupportedByServer();
    internal static string get_MSG_JreResolver_OperatingSystemMissing();
    internal static string get_MSG_JreResolver_Resolving();
    internal static string get_MSG_JreResolver_SkipJreProvisioningSet();
    internal static string get_MSG_MovingUnpackedJre();
    internal static string get_MSG_NoCacheData();
    internal static string get_MSG_NoPullRequestCacheBasePath();
    internal static string get_MSG_NotCopyingTargets();
    internal static string get_MSG_Processing_PullRequest_AutomaticBranchDetection();
    internal static string get_MSG_Processing_PullRequest_NoBranch();
    internal static string get_MSG_Processing_PullRequest_NoCacheBaseUrl();
    internal static string get_MSG_Processing_PullRequest_NoOrganization();
    internal static string get_MSG_Processing_PullRequest_NoProjectKey();
    internal static string get_MSG_Processing_PullRequest_NoToken();
    internal static string get_MSG_Processing_PullRequest_RequestPrepareRead();
    internal static string get_MSG_ResponseReceived();
    internal static string get_MSG_ServerInfo_ApiUrlDetected();
    internal static string get_MSG_ServerInfo_IsSonarCloudDetected();
    internal static string get_MSG_ServerInfo_ServerUrlDetected();
    internal static string get_MSG_SonarCloudDetected_SkipLicenseCheck();
    internal static string get_MSG_SonarCloudDetected_SkipVersionCheck();
    internal static string get_MSG_StartingJreDownload();
    internal static string get_MSG_StartingJreExtraction();
    internal static string get_MSG_UnchangedFilesStats();
    internal static string get_MSG_UpdatingMSBuildTargets();
    internal static string get_MSG_UserHomeDirectoryCreated();
    internal static string get_MSG_UsingSonarCloud();
    internal static string get_MSG_UsingSonarQube();
    internal static string get_RAP_AdditionalFileAlreadyExists();
    internal static string get_RAP_AdditionalFileNameMustBeSpecified();
    internal static string get_RAP_NoActiveRules();
    internal static string get_RAP_NoAnalyzerPluginsSpecified();
    internal static string get_RAP_NoAssembliesForRepo();
    internal static string get_RAP_NoPluginInstalled();
    internal static string get_RAP_NoProfileForProject();
    internal static string get_RAP_NoQualityProfile();
    internal static string get_RAP_ProfileDoesNotContainRuleset();
    internal static string get_RAP_ProfileExportFound();
    internal static string get_RAP_ProfileExportNotFound();
    internal static string get_RAP_ProvisioningAnalyzerAssemblies();
    internal static string get_RAP_UnpackingRuleset();
    internal static string get_RAP_WritingAdditionalFile();
    internal static string get_WARN_AuthenticationFailed();
    internal static string get_WARN_DefaultHostUrlChanged();
    internal static string get_WARN_DefaultUserHomeCreationFailed();
    internal static string get_WARN_ExistingGlobalTargets();
    internal static string get_WARN_HostUrlAndSonarcloudUrlSet();
    internal static string get_WARN_IncrementalPRCacheEntryRetrieval_Error();
    internal static string get_WARN_JreMetadataNotRetrieved();
    internal static string get_WARN_SourcesAndTestsDeprecated();
    internal static string get_WARN_TestProjectPattern();
    internal static string get_WARN_UI_ScanAllAnalysisEnabled();
    internal static string get_WARN_UI_SonarQubeNearEndOfSupport();
    internal static string get_WCD_UserNameCannotContainColon();
    internal static string get_WCD_UserNameMustBeAscii();
}
public class SonarScanner.MSBuild.PreProcessor.Roslyn.EmbeddedAnalyzerInstaller : object {
    private ISonarWebServer server;
    private ILogger logger;
    private PluginResourceCache cache;
    public EmbeddedAnalyzerInstaller(ISonarWebServer server, ILogger logger);
    public EmbeddedAnalyzerInstaller(ISonarWebServer server, string localCacheDirectory, ILogger logger);
    public sealed virtual IEnumerable`1<AnalyzerPlugin> InstallAssemblies(IEnumerable`1<Plugin> plugins);
    private static string GetLocalCacheDirectory();
    private IEnumerable`1<string> GetPluginResourceFiles(Plugin plugin);
    private static IEnumerable`1<string> FetchFilesFromCache(string pluginCacheDir);
    private void FetchResourceFromServer(Plugin plugin, string targetDir);
    private static bool IsZipFile(string fileName);
}
public class SonarScanner.MSBuild.PreProcessor.Roslyn.Model.RoslynRuleSetGenerator : object {
    private static string SONARANALYZER_PARTIAL_REPO_KEY;
    private static string ROSLYN_REPOSITORY_PREFIX;
    private static string activeRuleText;
    private static string inactiveRuleText;
    private IAnalysisPropertyProvider sonarProperties;
    private bool deactivateAll;
    public RoslynRuleSetGenerator(IAnalysisPropertyProvider sonarProperties, bool deactivateAll);
    public RuleSet Generate(string language, IEnumerable`1<SonarRule> rules);
    private static string GetPartialRepoKey(SonarRule rule, string language);
    private static bool IsSupportedRuleRepo(IGrouping`2<string, SonarRule> analyzerRules);
    private Rules CreateRulesElement(IGrouping`2<string, SonarRule> analyzerRules);
    private Rule CreateRuleElement(SonarRule sonarRule);
    private string GetRequiredPropertyValue(string propertyKey);
}
public class SonarScanner.MSBuild.PreProcessor.Roslyn.Model.SonarRule : object {
    [CompilerGeneratedAttribute]
private string <RepoKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Parameters>k__BackingField;
    public string RepoKey { get; public set; }
    public string RuleKey { get; public set; }
    public bool IsActive { get; }
    public string TemplateKey { get; public set; }
    public string InternalKey { get; public set; }
    public Dictionary`2<string, string> Parameters { get; public set; }
    public string InternalKeyOrKey { get; }
    public SonarRule(string repoKey, string ruleKey);
    public SonarRule(string repoKey, string ruleKey, bool isActive);
    public SonarRule(string repoKey, string ruleKey, string internalKey, string templateKey, bool isActive);
    [CompilerGeneratedAttribute]
public void set_RepoKey(string value);
    [CompilerGeneratedAttribute]
public string get_RepoKey();
    [CompilerGeneratedAttribute]
public void set_RuleKey(string value);
    [CompilerGeneratedAttribute]
public string get_RuleKey();
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_TemplateKey(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateKey();
    [CompilerGeneratedAttribute]
public void set_InternalKey(string value);
    [CompilerGeneratedAttribute]
public string get_InternalKey();
    [CompilerGeneratedAttribute]
public void set_Parameters(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Parameters();
    public string get_InternalKeyOrKey();
}
public class SonarScanner.MSBuild.PreProcessor.Roslyn.Plugin : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StaticResourceName>k__BackingField;
    public string Key { get; public set; }
    public string Version { get; public set; }
    public string StaticResourceName { get; public set; }
    public Plugin(string key, string version, string staticResourceName);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_StaticResourceName();
    [CompilerGeneratedAttribute]
public void set_StaticResourceName(string value);
}
public class SonarScanner.MSBuild.PreProcessor.Roslyn.PluginResourceCache : object {
    private SubdirIndex index;
    public PluginResourceCache(string basedir);
    public string GetResourceSpecificDir(Plugin plugin);
    private static string CreateKey(Plugin plugin);
}
public class SonarScanner.MSBuild.PreProcessor.Roslyn.RoslynAnalyzerProvider : object {
    public static string RulesetFileNameNormal;
    public static string RulesetFileNameNone;
    private static string SONARANALYZER_PARTIAL_REPO_KEY_PREFIX;
    private static string SONARANALYZER_PARTIAL_REPO_KEY;
    private static string ROSLYN_REPOSITORY_PREFIX;
    public static string CSharpLanguage;
    public static string VBNetLanguage;
    private IAnalyzerInstaller analyzerInstaller;
    private ILogger logger;
    private BuildSettings teamBuildSettings;
    private IAnalysisPropertyProvider sonarProperties;
    public RoslynAnalyzerProvider(IAnalyzerInstaller analyzerInstaller, ILogger logger);
    public sealed virtual AnalyzerSettings SetupAnalyzer(BuildSettings teamBuildSettings, IAnalysisPropertyProvider sonarProperties, IEnumerable`1<SonarRule> rules, string language);
    private string CreateRuleSet(string language, IEnumerable`1<SonarRule> rules, bool deactivateAll);
    private IEnumerable`1<string> WriteAdditionalFiles(string language, IEnumerable`1<SonarRule> activeRules);
    private bool TryWriteSonarLintXmlFile(string language, IEnumerable`1<SonarRule> activeRules, String& sonarLintXmlPath);
    private IEnumerable`1<AnalyzerPlugin> FetchAnalyzerPlugins(string language, IEnumerable`1<SonarRule> activeRules);
    private static ICollection`1<string> ActiveRulesPartialRepoKeys(IEnumerable`1<SonarRule> rules);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SonarScanner.MSBuild.PreProcessor.Roslyn.RoslynResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string EAI_CacheHit { get; }
    internal static string EAI_CacheMiss { get; }
    internal static string EAI_FetchingPluginResource { get; }
    internal static string EAI_InstallingAnalyzers { get; }
    internal static string EAI_LocalAnalyzerCache { get; }
    internal static string EAI_NoPluginsSpecified { get; }
    internal static string EAI_PluginResourceNotFound { get; }
    internal static string EAI_ProcessingPlugin { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_EAI_CacheHit();
    internal static string get_EAI_CacheMiss();
    internal static string get_EAI_FetchingPluginResource();
    internal static string get_EAI_InstallingAnalyzers();
    internal static string get_EAI_LocalAnalyzerCache();
    internal static string get_EAI_NoPluginsSpecified();
    internal static string get_EAI_PluginResourceNotFound();
    internal static string get_EAI_ProcessingPlugin();
}
internal static class SonarScanner.MSBuild.PreProcessor.Roslyn.RoslynSonarLint : object {
    public static string GenerateXml(IEnumerable`1<SonarRule> activeRules, IAnalysisPropertyProvider analysisProperties, string language);
    private static void WriteSetting(StringBuilder builder, string key, string value);
    private static string EscapeXml(string str);
}
public class SonarScanner.MSBuild.PreProcessor.Roslyn.SubdirIndex : object {
    private static string MutexName;
    private string basedir;
    private string indexPath;
    public SubdirIndex(string basedir);
    public string GetOrCreatePath(string key);
    private IDictionary`2<string, string> ReadMapping();
    private string FindAndCreateNextAvailablePath(int start);
}
public static class SonarScanner.MSBuild.PreProcessor.RulesetWriter : object {
    public static string ToString(IEnumerable`1<string> ids);
}
public class SonarScanner.MSBuild.PreProcessor.ServerInfo : object {
    [CompilerGeneratedAttribute]
private string <ServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiBaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSonarCloud>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string ServerUrl { get; }
    public string ApiBaseUrl { get; }
    public bool IsSonarCloud { get; }
    public ServerInfo(string ServerUrl, string ApiBaseUrl, bool IsSonarCloud);
    [CompilerGeneratedAttribute]
private ServerInfo(ServerInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ServerUrl();
    [CompilerGeneratedAttribute]
public string get_ApiBaseUrl();
    [CompilerGeneratedAttribute]
public bool get_IsSonarCloud();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ServerInfo left, ServerInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ServerInfo left, ServerInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ServerInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ServerInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ServerUrl, String& ApiBaseUrl, Boolean& IsSonarCloud);
}
public class SonarScanner.MSBuild.PreProcessor.TargetsInstaller : object {
    private static string AssemblyLocation;
    public static bool DefaultInstallSetting;
    private ILogger logger;
    private IMsBuildPathsSettings msBuildPathsSettings;
    private IFileWrapper fileWrapper;
    private IDirectoryWrapper directoryWrapper;
    public TargetsInstaller(ILogger logger);
    public TargetsInstaller(ILogger logger, IMsBuildPathsSettings msBuildPathsSettings, IFileWrapper fileWrapper, IDirectoryWrapper directoryWrapper);
    private static TargetsInstaller();
    public sealed virtual void InstallLoaderTargets(string workDirectory);
    private void InternalCopyTargetFileToProject(string workDirectory);
    private void InternalCopyTargetsFile();
    private string GetTargetSourcePath(string targetFileName);
    private void CopyIfDifferent(string sourcePath, IEnumerable`1<string> destinationDirs);
    private void WarnOnGlobalTargetsFile();
    [CompilerGeneratedAttribute]
private bool <WarnOnGlobalTargetsFile>g__ImportBeforeTargetExists|13_0(string globalTargetPath);
    [CompilerGeneratedAttribute]
private void <WarnOnGlobalTargetsFile>g__LogWarning|13_1(string globalTargetPath);
}
public interface SonarScanner.MSBuild.PreProcessor.Unpacking.IUnpacker {
    public abstract virtual void Unpack(Stream archive, string destinationDirectory);
}
public interface SonarScanner.MSBuild.PreProcessor.Unpacking.IUnpackerFactory {
    public abstract virtual IUnpacker Create(ILogger logger, IDirectoryWrapper directoryWrapper, IFileWrapper fileWrapper, IFilePermissionsWrapper filePermissionsWrapper, string archivePath);
}
public class SonarScanner.MSBuild.PreProcessor.Unpacking.TarGzUnpacker : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private IDirectoryWrapper <directoryWrapper>P;
    [CompilerGeneratedAttribute]
private IFileWrapper <fileWrapper>P;
    [CompilerGeneratedAttribute]
private IFilePermissionsWrapper <filePermissionsWrapper>P;
    public TarGzUnpacker(ILogger logger, IDirectoryWrapper directoryWrapper, IFileWrapper fileWrapper, IFilePermissionsWrapper filePermissionsWrapper);
    public sealed virtual void Unpack(Stream archive, string destinationDirectory);
    private void ExtractEntry(TarInputStream tar, string destinationFullPath, TarEntry entry);
}
public class SonarScanner.MSBuild.PreProcessor.Unpacking.UnpackerFactory : object {
    [CompilerGeneratedAttribute]
private static UnpackerFactory <Instance>k__BackingField;
    public static UnpackerFactory Instance { get; }
    private static UnpackerFactory();
    [CompilerGeneratedAttribute]
public static UnpackerFactory get_Instance();
    public sealed virtual IUnpacker Create(ILogger logger, IDirectoryWrapper directoryWrapper, IFileWrapper fileWrapper, IFilePermissionsWrapper filePermissionsWrapper, string archivePath);
}
public class SonarScanner.MSBuild.PreProcessor.Unpacking.ZipUnpacker : object {
    public sealed virtual void Unpack(Stream archive, string destinationDirectory);
}
public class SonarScanner.MSBuild.PreProcessor.WebClientDownloader : object {
    private ILogger logger;
    private HttpClient client;
    public WebClientDownloader(HttpClient client, string baseUri, ILogger logger);
    public sealed virtual string GetBaseUrl();
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebClientDownloader/<DownloadResource>d__4")]
public sealed virtual Task`1<HttpResponseMessage> DownloadResource(string url);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebClientDownloader/<TryDownloadIfExists>d__5")]
public sealed virtual Task`1<Tuple`2<bool, string>> TryDownloadIfExists(string url, bool logPermissionDenied);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebClientDownloader/<TryDownloadFileIfExists>d__6")]
public sealed virtual Task`1<bool> TryDownloadFileIfExists(string url, string targetFilePath, bool logPermissionDenied);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebClientDownloader/<Download>d__7")]
public sealed virtual Task`1<string> Download(string url, bool logPermissionDenied, LoggerVerbosity failureVerbosity);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebClientDownloader/<DownloadStream>d__8")]
public sealed virtual Task`1<Stream> DownloadStream(string url, Dictionary`2<string, string> headers);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebClientDownloader/<GetAsync>d__10")]
private Task`1<HttpResponseMessage> GetAsync(string url, Dictionary`2<string, string> headers);
    private static void ApplyHeaders(HttpRequestMessage message, Dictionary`2<string, string> headers);
}
public class SonarScanner.MSBuild.PreProcessor.WebClientDownloaderBuilder : object {
    private string baseAddress;
    private TimeSpan httpTimeout;
    private ILogger logger;
    private AuthenticationHeaderValue authenticationHeader;
    private HttpClientHandler handler;
    public WebClientDownloaderBuilder(string baseAddress, TimeSpan httpTimeout, ILogger logger);
    public sealed virtual void Dispose();
    public WebClientDownloaderBuilder AddAuthorization(string userName, string password);
    public WebClientDownloaderBuilder AddCertificate(string clientCertPath, string clientCertPassword);
    public WebClientDownloader Build();
    private static bool IsAscii(string value);
}
public class SonarScanner.MSBuild.PreProcessor.WebServer.RuleSearchPaging : object {
    [CompilerGeneratedAttribute]
private int <Fetched>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    public int Fetched { get; }
    public int Total { get; }
    public RuleSearchPaging(int total, int fetched);
    [CompilerGeneratedAttribute]
public int get_Fetched();
    [CompilerGeneratedAttribute]
public int get_Total();
}
internal class SonarScanner.MSBuild.PreProcessor.WebServer.SonarCloudWebServer : SonarWebServer {
    private Dictionary`2<string, IDictionary`2<string, string>> propertiesCache;
    private HttpClient cacheClient;
    public SonarCloudWebServer(IDownloader webDownloader, IDownloader apiDownloader, Version serverVersion, ILogger logger, string organization, TimeSpan httpTimeout, HttpMessageHandler handler);
    public virtual bool IsServerVersionSupported();
    public virtual Task`1<bool> IsServerLicenseValid();
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarCloudWebServer/<DownloadCache>d__5")]
public virtual Task`1<IList`1<SensorCacheEntry>> DownloadCache(ProcessedArgs localSettings);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarCloudWebServer/<DownloadJreAsync>d__6")]
public virtual Task`1<Stream> DownloadJreAsync(JreMetadata metadata);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarCloudWebServer/<DownloadComponentProperties>d__7")]
protected virtual Task`1<IDictionary`2<string, string>> DownloadComponentProperties(string component);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarCloudWebServer/<DownloadEphemeralUrl>d__9")]
private Task`1<Uri> DownloadEphemeralUrl(string organization, string projectKey, string branch, string token, string cacheBaseUrl);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarCloudWebServer/<DownloadCacheStream>d__10")]
private Task`1<Stream> DownloadCacheStream(Uri uri);
    private static string GetToken(ProcessedArgs localSettings);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IDictionary`2<string, string>> <>n__0(string component);
}
internal class SonarScanner.MSBuild.PreProcessor.WebServer.SonarQubeWebServer : SonarWebServer {
    public bool SupportsJreProvisioning { get; }
    public SonarQubeWebServer(IDownloader webDownloader, IDownloader apiDownloader, Version serverVersion, ILogger logger, string organization);
    public virtual bool get_SupportsJreProvisioning();
    public virtual bool IsServerVersionSupported();
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarQubeWebServer/<IsServerLicenseValid>d__4")]
public virtual Task`1<bool> IsServerLicenseValid();
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarQubeWebServer/<DownloadCache>d__5")]
public virtual Task`1<IList`1<SensorCacheEntry>> DownloadCache(ProcessedArgs localSettings);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarQubeWebServer/<DownloadJreAsync>d__6")]
public virtual Task`1<Stream> DownloadJreAsync(JreMetadata metadata);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarQubeWebServer/<DownloadComponentProperties>d__7")]
protected virtual Task`1<IDictionary`2<string, string>> DownloadComponentProperties(string component);
    protected virtual string AddOrganization(string uri);
    protected virtual RuleSearchPaging ParseRuleSearchPaging(JObject json);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarQubeWebServer/<DownloadComponentPropertiesLegacy>d__10")]
private Task`1<IDictionary`2<string, string>> DownloadComponentPropertiesLegacy(string projectId);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IDictionary`2<string, string>> <>n__0(string component);
}
public abstract class SonarScanner.MSBuild.PreProcessor.WebServer.SonarWebServer : object {
    private static string OldDefaultProjectTestPattern;
    private static string TestProjectPattern;
    protected IDownloader webDownloader;
    protected IDownloader apiDownloader;
    protected Version serverVersion;
    protected ILogger logger;
    private string organization;
    private bool disposed;
    public Version ServerVersion { get; }
    public bool SupportsJreProvisioning { get; }
    protected SonarWebServer(IDownloader webDownloader, IDownloader apiDownloader, Version serverVersion, ILogger logger, string organization);
    public abstract virtual Task`1<IList`1<SensorCacheEntry>> DownloadCache(ProcessedArgs localSettings);
    public abstract virtual Task`1<Stream> DownloadJreAsync(JreMetadata metadata);
    public abstract virtual bool IsServerVersionSupported();
    public abstract virtual Task`1<bool> IsServerLicenseValid();
    public sealed virtual Version get_ServerVersion();
    public virtual bool get_SupportsJreProvisioning();
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarWebServer/<DownloadQualityProfile>d__17")]
public sealed virtual Task`1<string> DownloadQualityProfile(string projectKey, string projectBranch, string language);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarWebServer/<DownloadRules>d__18")]
public sealed virtual Task`1<IList`1<SonarRule>> DownloadRules(string qProfile);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarWebServer/<DownloadAllLanguages>d__19")]
public sealed virtual Task`1<IEnumerable`1<string>> DownloadAllLanguages();
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarWebServer/<TryDownloadEmbeddedFile>d__20")]
public sealed virtual Task`1<bool> TryDownloadEmbeddedFile(string pluginKey, string embeddedFileName, string targetDirectory);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarWebServer/<DownloadJreMetadataAsync>d__21")]
public sealed virtual Task`1<JreMetadata> DownloadJreMetadataAsync(string operatingSystem, string architecture);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarWebServer/<DownloadProperties>d__24")]
public sealed virtual Task`1<IDictionary`2<string, string>> DownloadProperties(string projectKey, string projectBranch);
    [AsyncStateMachineAttribute("SonarScanner.MSBuild.PreProcessor.WebServer.SonarWebServer/<DownloadComponentProperties>d__25")]
protected virtual Task`1<IDictionary`2<string, string>> DownloadComponentProperties(string component);
    protected Dictionary`2<string, string> CheckTestProjectPattern(Dictionary`2<string, string> settings);
    protected virtual string AddOrganization(string uri);
    private Dictionary`2<string, string> ParseSettingsResponse(string contents);
    protected bool TryGetBaseBranch(ProcessedArgs localSettings, String& branch);
    protected static IList`1<SensorCacheEntry> ParseCacheEntries(Stream dataStream);
    protected virtual RuleSearchPaging ParseRuleSearchPaging(JObject json);
    private static string ComponentIdentifier(string projectKey, string projectBranch);
    private static string ParseRuleKey(string key);
    private static SonarRule CreateRule(JObject r, JToken actives);
    private static void MultivalueToProps(Dictionary`2<string, string> props, string settingKey, JArray array);
    private static void GetPropertyValue(Dictionary`2<string, string> settings, JToken p);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
