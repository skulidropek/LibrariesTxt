[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class SonarScanner.MSBuild.Shim.AdditionalFiles : object {
    [CompilerGeneratedAttribute]
private ICollection`1<FileInfo> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FileInfo> <Tests>k__BackingField;
    public ICollection`1<FileInfo> Sources { get; }
    public ICollection`1<FileInfo> Tests { get; }
    public AdditionalFiles(ICollection`1<FileInfo> sources, ICollection`1<FileInfo> tests);
    [CompilerGeneratedAttribute]
public ICollection`1<FileInfo> get_Sources();
    [CompilerGeneratedAttribute]
public ICollection`1<FileInfo> get_Tests();
}
public class SonarScanner.MSBuild.Shim.AdditionalFilesService : object {
    [CompilerGeneratedAttribute]
private IDirectoryWrapper <directoryWrapper>P;
    private static Char[] Comma;
    private static IReadOnlyList`1<string> ExcludedDirectories;
    private static IReadOnlyList`1<string> ExcludedFiles;
    private static IReadOnlyList`1<string> SupportedLanguages;
    private static IReadOnlyList`1<string> SupportedTestLanguages;
    private static IReadOnlyList`1<string> SupportedTestInfixes;
    public AdditionalFilesService(IDirectoryWrapper directoryWrapper);
    private static AdditionalFilesService();
    public sealed virtual AdditionalFiles AdditionalFiles(AnalysisConfig analysisConfig, DirectoryInfo projectBaseDir);
    private FileInfo[] GetAllFiles(IEnumerable`1<string> extensions, DirectoryInfo projectBaseDir);
    private static bool IsExcludedDirectory(DirectoryInfo directory);
    private static bool IsExcludedFile(FileInfo file);
    private static AdditionalFiles PartitionAdditionalFiles(FileInfo[] allFiles, AnalysisConfig analysisConfig);
    private static String[] GetExtensions(AnalysisConfig config);
    private static String[] GetTestExtensions(AnalysisConfig config);
    private static String[] GetProperties(AnalysisConfig config, IReadOnlyList`1<string> ids);
    private static Property GetProperty(AnalysisConfig config, string id);
    private static string EnsureDot(string x);
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Shim.AnalysisConfigExtensions : object {
    public static string VSBootstrapperPropertyKey;
    [ExtensionAttribute]
public static AnalysisProperties ToAnalysisProperties(AnalysisConfig config, ILogger logger);
    private static void AddOrSetProperty(string key, string value, AnalysisProperties properties, ILogger logger);
}
public class SonarScanner.MSBuild.Shim.AnalysisFiles : object {
    [CompilerGeneratedAttribute]
private ICollection`1<FileInfo> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FileInfo> <Tests>k__BackingField;
    public ICollection`1<FileInfo> Sources { get; }
    public ICollection`1<FileInfo> Tests { get; }
    public AnalysisFiles(ICollection`1<FileInfo> sources, ICollection`1<FileInfo> tests);
    [CompilerGeneratedAttribute]
public ICollection`1<FileInfo> get_Sources();
    [CompilerGeneratedAttribute]
public ICollection`1<FileInfo> get_Tests();
}
public interface SonarScanner.MSBuild.Shim.Interfaces.IAdditionalFilesService {
    public abstract virtual AdditionalFiles AdditionalFiles(AnalysisConfig analysisConfig, DirectoryInfo projectBaseDir);
}
public interface SonarScanner.MSBuild.Shim.Interfaces.IPropertiesFileGenerator {
    public abstract virtual ProjectInfoAnalysisResult GenerateFile();
    public abstract virtual bool TryWriteProperties(PropertiesWriter writer, IEnumerable`1& allProjects);
    public abstract virtual DirectoryInfo ComputeProjectBaseDir(IList`1<DirectoryInfo> projectPaths);
}
public interface SonarScanner.MSBuild.Shim.Interfaces.IRoslynV1SarifFixer {
    public abstract virtual string LoadAndFixFile(string sarifFilePath, string language);
}
public interface SonarScanner.MSBuild.Shim.Interfaces.ISonarProjectPropertiesValidator {
    public abstract virtual bool AreExistingSonarPropertiesFilesPresent(string sonarScannerCwd, ICollection`1<ProjectData> projects, IEnumerable`1& invalidFolders);
}
public interface SonarScanner.MSBuild.Shim.Interfaces.ISonarScanner {
    public abstract virtual bool Execute(AnalysisConfig config, IEnumerable`1<string> userCmdLineArguments, string propertiesFilePath);
}
public interface SonarScanner.MSBuild.Shim.Interfaces.ITfsProcessor {
    public abstract virtual bool Execute(AnalysisConfig config, IEnumerable`1<string> userCmdLineArguments, string fullPropertiesFilePath);
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Shim.PathHelper : object {
    [ExtensionAttribute]
public static string WithTrailingDirectorySeparator(DirectoryInfo directory);
    [ExtensionAttribute]
public static bool IsInDirectory(FileInfo file, DirectoryInfo directory);
    public static DirectoryInfo BestCommonPrefix(IEnumerable`1<DirectoryInfo> paths, StringComparer pathComparer);
    public static String[] GetParts(DirectoryInfo directory);
    private static string BestRoot(String[][] pathParts, StringComparer pathComparer);
}
public class SonarScanner.MSBuild.Shim.ProjectData : object {
    [CompilerGeneratedAttribute]
private ProjectInfoValidity <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectInfo <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<FileInfo> <ReferencedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FileInfo> <SonarQubeModuleFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FileInfo> <RoslynReportFilePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FileInfo> <AnalyzerOutPaths>k__BackingField;
    public string Guid { get; }
    public ProjectInfoValidity Status { get; public set; }
    public ProjectInfo Project { get; }
    public ISet`1<FileInfo> ReferencedFiles { get; }
    public ICollection`1<FileInfo> SonarQubeModuleFiles { get; }
    public ICollection`1<FileInfo> RoslynReportFilePaths { get; }
    public ICollection`1<FileInfo> AnalyzerOutPaths { get; }
    public ProjectData(ProjectInfo project);
    public string get_Guid();
    [CompilerGeneratedAttribute]
public ProjectInfoValidity get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(ProjectInfoValidity value);
    [CompilerGeneratedAttribute]
public ProjectInfo get_Project();
    [CompilerGeneratedAttribute]
public ISet`1<FileInfo> get_ReferencedFiles();
    [CompilerGeneratedAttribute]
public ICollection`1<FileInfo> get_SonarQubeModuleFiles();
    [CompilerGeneratedAttribute]
public ICollection`1<FileInfo> get_RoslynReportFilePaths();
    [CompilerGeneratedAttribute]
public ICollection`1<FileInfo> get_AnalyzerOutPaths();
}
public class SonarScanner.MSBuild.Shim.ProjectInfoAnalysisResult : object {
    [CompilerGeneratedAttribute]
private List`1<ProjectData> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RanToCompletion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullPropertiesFilePath>k__BackingField;
    public List`1<ProjectData> Projects { get; }
    public bool RanToCompletion { get; public set; }
    public string FullPropertiesFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ProjectData> get_Projects();
    [CompilerGeneratedAttribute]
public bool get_RanToCompletion();
    [CompilerGeneratedAttribute]
public void set_RanToCompletion(bool value);
    [CompilerGeneratedAttribute]
public string get_FullPropertiesFilePath();
    [CompilerGeneratedAttribute]
public void set_FullPropertiesFilePath(string value);
    public ICollection`1<ProjectInfo> GetProjectsByStatus(ProjectInfoValidity status);
}
[ExtensionAttribute]
public static class SonarScanner.MSBuild.Shim.ProjectInfoExtensions : object {
    [ExtensionAttribute]
public static ProjectInfoValidity Classify(ProjectInfo projectInfo, ILogger logger);
    [ExtensionAttribute]
public static void FixEncoding(ProjectInfo projectInfo, string globalSourceEncoding, Action logIfGlobalEncodingIsIgnored);
    private static bool HasInvalidGuid(ProjectInfo project);
}
public class SonarScanner.MSBuild.Shim.ProjectInfoReportBuilder : object {
    internal static string ReportFileName;
    private AnalysisConfig config;
    private ProjectInfoAnalysisResult result;
    private ILogger logger;
    private StringBuilder sb;
    private ProjectInfoReportBuilder(AnalysisConfig config, ProjectInfoAnalysisResult result, ILogger logger);
    public static void WriteSummaryReport(AnalysisConfig config, ProjectInfoAnalysisResult result, ILogger logger);
    private void Generate();
    private void WriteTitle(string title);
    private void WriteGroupSpacer();
    private void WriteFilesByStatus(ProjectInfoValidity[] statuses);
    private void WriteFileList(IEnumerable`1<ProjectInfo> projects);
}
public static class SonarScanner.MSBuild.Shim.ProjectLoader : object {
    public static IList`1<ProjectInfo> LoadFrom(string dumpFolderPath);
    private static ProjectInfo GetProjectInfo(string projectFolderPath);
}
public class SonarScanner.MSBuild.Shim.PropertiesFileGenerator : object {
    public static string ReportFilePathsCSharpPropertyKey;
    public static string ReportFilePathsVbNetPropertyKey;
    public static string ProjectOutPathsCsharpPropertyKey;
    public static string ProjectOutPathsVbNetPropertyKey;
    private static string ProjectPropertiesFileName;
    internal static char RoslynReportPathsDelimiter;
    internal static char AnalyzerOutputPathsDelimiter;
    private AnalysisConfig analysisConfig;
    private ILogger logger;
    private IRoslynV1SarifFixer fixer;
    private IRuntimeInformationWrapper runtimeInformationWrapper;
    private IAdditionalFilesService additionalFilesService;
    private StringComparer pathComparer;
    private StringComparison pathComparison;
    public PropertiesFileGenerator(AnalysisConfig analysisConfig, ILogger logger);
    internal PropertiesFileGenerator(AnalysisConfig analysisConfig, ILogger logger, IRoslynV1SarifFixer fixer, IRuntimeInformationWrapper runtimeInformationWrapper, IAdditionalFilesService additionalFilesService);
    public static bool IsReportFilePaths(string propertyKey);
    public static bool IsProjectOutPaths(string propertyKey);
    public sealed virtual ProjectInfoAnalysisResult GenerateFile();
    public sealed virtual bool TryWriteProperties(PropertiesWriter writer, IEnumerable`1& allProjects);
    public bool TryWriteProperties(PropertiesWriter writer, IList`1<ProjectInfo> projects, IEnumerable`1& allProjects);
    internal static ProjectData GetSingleClosestProjectOrDefault(FileInfo fileInfo, IEnumerable`1<ProjectData> projects);
    internal ProjectData ToProjectData(IGrouping`2<Guid, ProjectInfo> projectsGroupedByGuid);
    public sealed virtual DirectoryInfo ComputeProjectBaseDir(IList`1<DirectoryInfo> projectPaths);
    private static bool IsFileSystemRoot(DirectoryInfo directoryInfo);
    private AnalysisFiles PutFilesToRightModuleOrRoot(IEnumerable`1<ProjectData> projects, DirectoryInfo baseDirectory);
    private static void PostProcessProjectStatus(IEnumerable`1<ProjectData> projects);
    private void LogDuplicateGuidWarning(Guid projectGuid, string projectPath);
    private static void AddAnalyzerOutputFilePaths(ProjectInfo project, ProjectData projectData);
    private static void AddRoslynOutputFilePaths(ProjectInfo project, ProjectData projectData);
    private void FixSarifAndEncoding(IList`1<ProjectInfo> projects, AnalysisProperties analysisProperties);
    private void TryFixSarifReport(ProjectInfo project);
    private void TryFixSarifReport(ProjectInfo project, string language, string reportFilesPropertyKey);
    [CompilerGeneratedAttribute]
internal static bool <PutFilesToRightModuleOrRoot>g__IsBinary|25_2(FileInfo file);
    [CompilerGeneratedAttribute]
private void <FixSarifAndEncoding>b__30_0();
    [CompilerGeneratedAttribute]
internal static string <FixSarifAndEncoding>g__GetSourceEncoding|30_1(AnalysisProperties properties);
}
public class SonarScanner.MSBuild.Shim.PropertiesWriter : object {
    private static string SonarSources;
    private static string SonarTests;
    private ILogger logger;
    private AnalysisConfig config;
    private IList`1<string> moduleKeys;
    private StringBuilder sb;
    [CompilerGeneratedAttribute]
private bool <FinishedWriting>k__BackingField;
    public bool FinishedWriting { get; private set; }
    public PropertiesWriter(AnalysisConfig config, ILogger logger);
    public static string Escape(string value);
    [CompilerGeneratedAttribute]
public bool get_FinishedWriting();
    [CompilerGeneratedAttribute]
private void set_FinishedWriting(bool value);
    public string Flush();
    public void WriteSettingsForProject(ProjectData projectData);
    public void WriteAnalyzerOutputPaths(ProjectData project);
    public void WriteRoslynReportPaths(ProjectData project);
    public void WriteGlobalSettings(AnalysisProperties properties);
    public void WriteSonarProjectInfo(DirectoryInfo projectBaseDir);
    public void WriteSharedFiles(AnalysisFiles analysisFiles);
    private void AppendKeyValue(string keyPrefix, string keySuffix, IEnumerable`1<FileInfo> paths);
    private void AppendKeyValue(string keyPrefix, string keySuffix, IEnumerable`1<string> paths);
    private void AppendKeyValue(string keyPrefix, string keySuffix, string value);
    private void AppendKeyValue(string key, string value);
    private void AppendKeyValueIfNotEmpty(string key, string value);
    private static bool IsAscii(char c);
    internal string EncodeAsMultiValueProperty(IEnumerable`1<string> paths);
    [CompilerGeneratedAttribute]
internal static bool <EncodeAsMultiValueProperty>g__invalidPathPredicate|25_1(string path);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SonarScanner.MSBuild.Shim.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DEBUG_DumpSonarProjectProperties { get; }
    internal static string DEBUG_FileReferencedByProjects { get; }
    internal static string ERR_NoProjectInfoFilesFound { get; }
    internal static string ERR_NoValidProjectInfoFiles { get; }
    internal static string ERR_ProjectBaseDirCannotBeAutomaticallyDetected { get; }
    internal static string ERR_ProjectBaseDirDoesNotExist { get; }
    internal static string ERR_SonarScannerExecutionFailed { get; }
    internal static string ERR_TFSProcessorExecutionFailed { get; }
    internal static string MSG_GeneratingProjectProperties { get; }
    internal static string MSG_MandatorySettingIsCorrectlySpecified { get; }
    internal static string MSG_ProjectBaseDirChange { get; }
    internal static string MSG_ProjectIsExcluded { get; }
    internal static string MSG_PropertiesGenerationFailed { get; }
    internal static string MSG_SarifFileIsInvalid { get; }
    internal static string MSG_SarifFileIsValid { get; }
    internal static string MSG_SarifFileNotFound { get; }
    internal static string MSG_SarifFixSuccess { get; }
    internal static string MSG_SettingAnalysisProperty { get; }
    internal static string MSG_SettingJavaHomeEnvironmentVariable { get; }
    internal static string MSG_SettingJavaHomeEnvironmentVariableFailed { get; }
    internal static string MSG_SonarScannerCalling { get; }
    internal static string MSG_SonarScannerCompleted { get; }
    internal static string MSG_SonarScannerHomeIsSet { get; }
    internal static string MSG_TFSProcessorCalling { get; }
    internal static string MSG_TFSProcessorCompleted { get; }
    internal static string MSG_UsingAzDoSourceDirectoryAsProjectBaseDir { get; }
    internal static string MSG_UsingLongestCommonBaseDir { get; }
    internal static string MSG_UsingSuppliedSonarScannerOptsValue { get; }
    internal static string MSG_UsingUserSuppliedProjectBaseDir { get; }
    internal static string MSG_UsingWorkingDirectoryAsProjectBaseDir { get; }
    internal static string MSG_WritingSummary { get; }
    internal static string REPORT_ExcludedProjectsTitle { get; }
    internal static string REPORT_InvalidProjectsTitle { get; }
    internal static string REPORT_NoProjectsOfType { get; }
    internal static string REPORT_ProductProjectsTitle { get; }
    internal static string REPORT_SkippedProjectsTitle { get; }
    internal static string REPORT_TestProjectsTitle { get; }
    internal static string WARN_DirectoryIsOutsideBaseDir { get; }
    internal static string WARN_DuplicateProjectGuid { get; }
    internal static string WARN_EmptyProjectGuids { get; }
    internal static string WARN_FileDoesNotExist { get; }
    internal static string WARN_FileIsOutsideProjectDirectory { get; }
    internal static string WARN_InvalidCharacterInPaths { get; }
    internal static string WARN_InvalidProjectGuid { get; }
    internal static string WARN_OverridingAnalysisProperty { get; }
    internal static string WARN_PropertyIgnored { get; }
    internal static string WARN_SarifFixFail { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DEBUG_DumpSonarProjectProperties();
    internal static string get_DEBUG_FileReferencedByProjects();
    internal static string get_ERR_NoProjectInfoFilesFound();
    internal static string get_ERR_NoValidProjectInfoFiles();
    internal static string get_ERR_ProjectBaseDirCannotBeAutomaticallyDetected();
    internal static string get_ERR_ProjectBaseDirDoesNotExist();
    internal static string get_ERR_SonarScannerExecutionFailed();
    internal static string get_ERR_TFSProcessorExecutionFailed();
    internal static string get_MSG_GeneratingProjectProperties();
    internal static string get_MSG_MandatorySettingIsCorrectlySpecified();
    internal static string get_MSG_ProjectBaseDirChange();
    internal static string get_MSG_ProjectIsExcluded();
    internal static string get_MSG_PropertiesGenerationFailed();
    internal static string get_MSG_SarifFileIsInvalid();
    internal static string get_MSG_SarifFileIsValid();
    internal static string get_MSG_SarifFileNotFound();
    internal static string get_MSG_SarifFixSuccess();
    internal static string get_MSG_SettingAnalysisProperty();
    internal static string get_MSG_SettingJavaHomeEnvironmentVariable();
    internal static string get_MSG_SettingJavaHomeEnvironmentVariableFailed();
    internal static string get_MSG_SonarScannerCalling();
    internal static string get_MSG_SonarScannerCompleted();
    internal static string get_MSG_SonarScannerHomeIsSet();
    internal static string get_MSG_TFSProcessorCalling();
    internal static string get_MSG_TFSProcessorCompleted();
    internal static string get_MSG_UsingAzDoSourceDirectoryAsProjectBaseDir();
    internal static string get_MSG_UsingLongestCommonBaseDir();
    internal static string get_MSG_UsingSuppliedSonarScannerOptsValue();
    internal static string get_MSG_UsingUserSuppliedProjectBaseDir();
    internal static string get_MSG_UsingWorkingDirectoryAsProjectBaseDir();
    internal static string get_MSG_WritingSummary();
    internal static string get_REPORT_ExcludedProjectsTitle();
    internal static string get_REPORT_InvalidProjectsTitle();
    internal static string get_REPORT_NoProjectsOfType();
    internal static string get_REPORT_ProductProjectsTitle();
    internal static string get_REPORT_SkippedProjectsTitle();
    internal static string get_REPORT_TestProjectsTitle();
    internal static string get_WARN_DirectoryIsOutsideBaseDir();
    internal static string get_WARN_DuplicateProjectGuid();
    internal static string get_WARN_EmptyProjectGuids();
    internal static string get_WARN_FileDoesNotExist();
    internal static string get_WARN_FileIsOutsideProjectDirectory();
    internal static string get_WARN_InvalidCharacterInPaths();
    internal static string get_WARN_InvalidProjectGuid();
    internal static string get_WARN_OverridingAnalysisProperty();
    internal static string get_WARN_PropertyIgnored();
    internal static string get_WARN_SarifFixFail();
}
public class SonarScanner.MSBuild.Shim.RoslynV1SarifFixer : object {
    public static string FixedFileSuffix;
    public static string CSharpLanguage;
    public static string VBNetLanguage;
    private ILogger logger;
    public RoslynV1SarifFixer(ILogger logger);
    private static bool IsSarifFromRoslynV1(string input, string language);
    private static bool IsValidJson(string input);
    private static string ApplyFixToSarif(string unfixedSarif);
    public sealed virtual string LoadAndFixFile(string sarifFilePath, string language);
}
public class SonarScanner.MSBuild.Shim.SonarProjectPropertiesValidator : object {
    public sealed virtual bool AreExistingSonarPropertiesFilesPresent(string sonarScannerCwd, ICollection`1<ProjectData> projects, IEnumerable`1& invalidFolders);
    private bool SonarProjectPropertiesExists(string folder);
}
public class SonarScanner.MSBuild.Shim.SonarScannerWrapper : object {
    public static string SonarScannerHomeVariableName;
    public static string ProjectSettingsFileArgName;
    private static string SonarScannerOptsVariableName;
    private static string JavaHomeVariableName;
    private static string CmdLineArgPrefix;
    private static string SonarScannerVersion;
    private ILogger logger;
    private IOperatingSystemProvider operatingSystemProvider;
    public SonarScannerWrapper(ILogger logger, IOperatingSystemProvider operatingSystemProvider);
    public sealed virtual bool Execute(AnalysisConfig config, IEnumerable`1<string> userCmdLineArguments, string propertiesFilePath);
    public bool ExecuteJavaRunner(AnalysisConfig config, IEnumerable`1<string> userCmdLineArguments, string exeFileName, string propertiesFileName, IProcessRunner runner);
    internal string FindScannerExe();
    private bool InternalExecute(AnalysisConfig config, IEnumerable`1<string> userCmdLineArguments, string fullPropertiesFilePath);
    private static void IgnoreSonarScannerHome(ILogger logger);
    private static IDictionary`2<string, string> GetAdditionalEnvVariables(AnalysisConfig config, ILogger logger);
    private static IEnumerable`1<string> GetAllCmdLineArgs(string projectSettingsFilePath, IEnumerable`1<string> userCmdLineArguments, AnalysisConfig config, ILogger logger);
    private static IEnumerable`1<string> GetSensitiveFileSettings(AnalysisConfig config, IEnumerable`1<string> userCmdLineArguments, ILogger logger);
    private static bool UserSettingExists(Property fileProperty, IEnumerable`1<string> userArgs);
}
public class SonarScanner.MSBuild.Shim.TfsProcessorWrapper : object {
    private ILogger logger;
    private IOperatingSystemProvider operatingSystemProvider;
    public TfsProcessorWrapper(ILogger logger, IOperatingSystemProvider operatingSystemProvider);
    public sealed virtual bool Execute(AnalysisConfig config, IEnumerable`1<string> userCmdLineArguments, string fullPropertiesFilePath);
    private bool InternalExecute(AnalysisConfig config, IEnumerable`1<string> userCmdLineArguments, string fullPropertiesFilePath);
    private static string FindProcessorExe();
    public bool ExecuteProcessorRunner(AnalysisConfig config, string exeFileName, IEnumerable`1<string> userCmdLineArguments, string propertiesFileName, IProcessRunner runner);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
