[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[XmlRootAttribute]
public class SonarScanner.MSBuild.Common.ProjectConfig : object {
    [CompilerGeneratedAttribute]
private string <AnalysisConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilesToAnalyzePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectType <ProjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public string AnalysisConfigPath { get; public set; }
    public string ProjectPath { get; public set; }
    public string FilesToAnalyzePath { get; public set; }
    public string OutPath { get; public set; }
    public ProjectType ProjectType { get; public set; }
    public string TargetFramework { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AnalysisConfigPath();
    [CompilerGeneratedAttribute]
public void set_AnalysisConfigPath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectPath();
    [CompilerGeneratedAttribute]
public void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_FilesToAnalyzePath();
    [CompilerGeneratedAttribute]
public void set_FilesToAnalyzePath(string value);
    [CompilerGeneratedAttribute]
public string get_OutPath();
    [CompilerGeneratedAttribute]
public void set_OutPath(string value);
    [CompilerGeneratedAttribute]
public ProjectType get_ProjectType();
    [CompilerGeneratedAttribute]
public void set_ProjectType(ProjectType value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    public void Save(string fileName);
    public static ProjectConfig Load(string fileName);
}
public static class SonarScanner.MSBuild.Tasks.BuildTaskConstants : object {
    public static string ResultItemName;
    public static string ResultMetadataIdProperty;
    public static string SettingItemName;
    public static string SettingValueMetadataName;
}
public class SonarScanner.MSBuild.Tasks.GetAnalyzerSettings : Task {
    private static string ExcludeTestProjectsSettingId;
    private static string DllExtension;
    private String[] sonarDotNetPluginKeys;
    [CompilerGeneratedAttribute]
private string <AnalysisConfigDir>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OriginalAnalyzers>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OriginalAdditionalFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalRulesetFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentProjectDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectSpecificConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTestProject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleSetFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AnalyzerFilePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AdditionalFilePaths>k__BackingField;
    [RequiredAttribute]
public string AnalysisConfigDir { get; public set; }
    [RequiredAttribute]
public String[] OriginalAnalyzers { get; public set; }
    [RequiredAttribute]
public String[] OriginalAdditionalFiles { get; public set; }
    public string OriginalRulesetFilePath { get; public set; }
    [RequiredAttribute]
public string CurrentProjectDirectoryPath { get; public set; }
    [RequiredAttribute]
public string ProjectSpecificConfigDirectory { get; public set; }
    [RequiredAttribute]
public bool IsTestProject { get; public set; }
    public string Language { get; public set; }
    [OutputAttribute]
public string RuleSetFilePath { get; private set; }
    [OutputAttribute]
public String[] AnalyzerFilePaths { get; private set; }
    [OutputAttribute]
public String[] AdditionalFilePaths { get; private set; }
    [CompilerGeneratedAttribute]
public string get_AnalysisConfigDir();
    [CompilerGeneratedAttribute]
public void set_AnalysisConfigDir(string value);
    [CompilerGeneratedAttribute]
public String[] get_OriginalAnalyzers();
    [CompilerGeneratedAttribute]
public void set_OriginalAnalyzers(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_OriginalAdditionalFiles();
    [CompilerGeneratedAttribute]
public void set_OriginalAdditionalFiles(String[] value);
    [CompilerGeneratedAttribute]
public string get_OriginalRulesetFilePath();
    [CompilerGeneratedAttribute]
public void set_OriginalRulesetFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentProjectDirectoryPath();
    [CompilerGeneratedAttribute]
public void set_CurrentProjectDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectSpecificConfigDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectSpecificConfigDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTestProject();
    [CompilerGeneratedAttribute]
public void set_IsTestProject(bool value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_RuleSetFilePath();
    [CompilerGeneratedAttribute]
private void set_RuleSetFilePath(string value);
    [CompilerGeneratedAttribute]
public String[] get_AnalyzerFilePaths();
    [CompilerGeneratedAttribute]
private void set_AnalyzerFilePaths(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalFilePaths();
    [CompilerGeneratedAttribute]
private void set_AdditionalFilePaths(String[] value);
    public virtual bool Execute();
    internal static bool ShouldMergeAnalysisSettings(string language, AnalysisConfig config, ILogger logger);
    private TaskOutputs CreateDeactivatedProjectSettings(AnalyzerSettings settings);
    private TaskOutputs CreateLegacyProductProjectSettings(AnalyzerSettings settings);
    private TaskOutputs CreateMergedAnalyzerSettings(AnalyzerSettings settings);
    private string CreateMergedRuleset(AnalyzerSettings languageSpecificSettings);
    private string GetAbsoluteRulesetPath();
    private static void WriteMergedRuleSet(string originalRuleset, string languageRuleset, string mergedRulesetFilePath);
    private AnalyzerSettings GetLanguageSpecificSettings(AnalysisConfig config);
    private String[] MergeAnalyzersLists(IEnumerable`1<string> sonarAnalyzerPaths, IEnumerable`1<string> userProvidedAnalyzerPaths);
    private String[] MergeAdditionalFilesLists(IEnumerable`1<string> sonarAdditionalFiles, IEnumerable`1<string> userProvidedAdditionalFiles);
    private void LogRemovedFiles(String[] removedDuplicateFiles);
    private static String[] GetEntriesWithMatchingFileNames(IEnumerable`1<string> sourceFilePaths, IEnumerable`1<string> candidateFilePaths);
    private static string GetFileName(string path);
    private static String[] RemoveNonAnalyzerFiles(IEnumerable`1<string> files);
    private static bool IsAssemblyLibraryFileName(string filePath);
    private void ApplyTaskOutput(TaskOutputs outputs);
    [CompilerGeneratedAttribute]
internal static bool <Execute>g__ExcludeTestProjects|47_0(<>c__DisplayClass47_0& );
    [CompilerGeneratedAttribute]
private bool <CreateDeactivatedProjectSettings>b__49_0(AnalyzerPlugin p);
    [CompilerGeneratedAttribute]
private bool <GetLanguageSpecificSettings>b__55_0(AnalyzerSettings s);
}
public class SonarScanner.MSBuild.Tasks.IsTestByReference : Task {
    internal static ISet`1<string> TestAssemblyNames;
    [CompilerGeneratedAttribute]
private String[] <References>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestReference>k__BackingField;
    public String[] References { get; public set; }
    [OutputAttribute]
public string TestReference { get; private set; }
    private static IsTestByReference();
    [CompilerGeneratedAttribute]
public String[] get_References();
    [CompilerGeneratedAttribute]
public void set_References(String[] value);
    [CompilerGeneratedAttribute]
public string get_TestReference();
    [CompilerGeneratedAttribute]
private void set_TestReference(string value);
    public virtual bool Execute();
    private string ParseName(string fullName);
}
public class SonarScanner.MSBuild.Tasks.IsTestFileByName : Task {
    public static string TestRegExSettingId;
    [CompilerGeneratedAttribute]
private string <AnalysisConfigDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTest>k__BackingField;
    [RequiredAttribute]
public string AnalysisConfigDir { get; public set; }
    [RequiredAttribute]
public string FullFilePath { get; public set; }
    [OutputAttribute]
public bool IsTest { get; private set; }
    [CompilerGeneratedAttribute]
public string get_AnalysisConfigDir();
    [CompilerGeneratedAttribute]
public void set_AnalysisConfigDir(string value);
    [CompilerGeneratedAttribute]
public string get_FullFilePath();
    [CompilerGeneratedAttribute]
public void set_FullFilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTest();
    [CompilerGeneratedAttribute]
private void set_IsTest(bool value);
    public virtual bool Execute();
}
public class SonarScanner.MSBuild.Tasks.MakeUniqueDir : Task {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniquePath>k__BackingField;
    [RequiredAttribute]
public string Path { get; public set; }
    [OutputAttribute]
public string UniqueName { get; private set; }
    [OutputAttribute]
public string UniquePath { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueName();
    [CompilerGeneratedAttribute]
private void set_UniqueName(string value);
    [CompilerGeneratedAttribute]
public string get_UniquePath();
    [CompilerGeneratedAttribute]
private void set_UniquePath(string value);
    public virtual bool Execute();
}
internal class SonarScanner.MSBuild.Tasks.MSBuildLoggerAdapter : object {
    private TaskLoggingHelper msBuildLogger;
    [CompilerGeneratedAttribute]
private bool <SonarScanner.MSBuild.Common.ILogger.IncludeTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggerVerbosity <SonarScanner.MSBuild.Common.ILogger.Verbosity>k__BackingField;
    private bool SonarScanner.MSBuild.Common.ILogger.IncludeTimestamp { get; private set; }
    private LoggerVerbosity SonarScanner.MSBuild.Common.ILogger.Verbosity { get; private set; }
    public MSBuildLoggerAdapter(TaskLoggingHelper msBuildLogger);
    [CompilerGeneratedAttribute]
private sealed virtual override bool SonarScanner.MSBuild.Common.ILogger.get_IncludeTimestamp();
    [CompilerGeneratedAttribute]
private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.set_IncludeTimestamp(bool value);
    [CompilerGeneratedAttribute]
private sealed virtual override LoggerVerbosity SonarScanner.MSBuild.Common.ILogger.get_Verbosity();
    [CompilerGeneratedAttribute]
private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.set_Verbosity(LoggerVerbosity value);
    private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.LogDebug(string message, Object[] args);
    private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.LogError(string message, Object[] args);
    private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.LogInfo(string message, Object[] args);
    private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.LogWarning(string message, Object[] args);
    private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.LogUIWarning(string message, Object[] args);
    private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.SuspendOutput();
    private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.ResumeOutput();
    private sealed virtual override void SonarScanner.MSBuild.Common.ILogger.WriteUIWarnings(string outputFolder);
    private void LogMessage(LoggerVerbosity verbosity, string message, Object[] args);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SonarScanner.MSBuild.Tasks.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AnalyzerSettings_ConfiguringTestProjectAnalysis { get; }
    internal static string AnalyzerSettings_CreatingMergedRuleset { get; }
    internal static string AnalyzerSettings_ExternalIssueNotSupported { get; }
    internal static string AnalyzerSettings_LanguageNotSpecified { get; }
    internal static string AnalyzerSettings_MergingSettings { get; }
    internal static string AnalyzerSettings_NoSettingsFoundForCurrentLanguage { get; }
    internal static string AnalyzerSettings_NotSpecifiedInConfig { get; }
    internal static string AnalyzerSettings_OriginalRulesetIsNotRooted { get; }
    internal static string AnalyzerSettings_OriginalRulesetIsRooted { get; }
    internal static string AnalyzerSettings_OriginalRulesetNotSpecified { get; }
    internal static string AnalyzerSettings_OverwritingSettings { get; }
    internal static string AnalyzerSettings_RemovingDuplicateAnalyzers { get; }
    internal static string AnalyzerSettings_RemovingDuplicateFiles { get; }
    internal static string AnalyzerSettings_ResolvedRulesetFound { get; }
    internal static string AnalyzerSettings_ResolvedRulesetNotFound { get; }
    internal static string IsTest_InvalidRegularExpression { get; }
    internal static string IsTest_NameNotChecked { get; }
    internal static string IsTest_NoReferences { get; }
    internal static string IsTest_NoTestReference { get; }
    internal static string IsTest_ResolvedReference { get; }
    internal static string IsTest_UnableToParseAssemblyName { get; }
    internal static string IsTest_UsingRegExFromConfig { get; }
    internal static string MoveDirectory_FromTo { get; }
    internal static string MoveDirectory_InvalidSourceDirectory { get; }
    internal static string Shared_ConfigFileNotFound { get; }
    internal static string Shared_ErrorReadingConfigFile { get; }
    internal static string Shared_ReadingConfigFailed { get; }
    internal static string Shared_ReadingConfigFile { get; }
    internal static string Shared_ReadingConfigSucceeded { get; }
    internal static string WPIF_FailedToResolvePath { get; }
    internal static string WPIF_GeneratingRandomGuid { get; }
    internal static string WPIF_MissingOrInvalidProjectGuid { get; }
    internal static string WPIF_ResolvedPath { get; }
    internal static string WPIF_ResolvingRelativePath { get; }
    internal static string WPIF_WARN_InvalidSettingKey { get; }
    internal static string WPIF_WARN_MissingValueMetadata { get; }
    internal static string WriteZeroLengthFiles_WritingFile { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AnalyzerSettings_ConfiguringTestProjectAnalysis();
    internal static string get_AnalyzerSettings_CreatingMergedRuleset();
    internal static string get_AnalyzerSettings_ExternalIssueNotSupported();
    internal static string get_AnalyzerSettings_LanguageNotSpecified();
    internal static string get_AnalyzerSettings_MergingSettings();
    internal static string get_AnalyzerSettings_NoSettingsFoundForCurrentLanguage();
    internal static string get_AnalyzerSettings_NotSpecifiedInConfig();
    internal static string get_AnalyzerSettings_OriginalRulesetIsNotRooted();
    internal static string get_AnalyzerSettings_OriginalRulesetIsRooted();
    internal static string get_AnalyzerSettings_OriginalRulesetNotSpecified();
    internal static string get_AnalyzerSettings_OverwritingSettings();
    internal static string get_AnalyzerSettings_RemovingDuplicateAnalyzers();
    internal static string get_AnalyzerSettings_RemovingDuplicateFiles();
    internal static string get_AnalyzerSettings_ResolvedRulesetFound();
    internal static string get_AnalyzerSettings_ResolvedRulesetNotFound();
    internal static string get_IsTest_InvalidRegularExpression();
    internal static string get_IsTest_NameNotChecked();
    internal static string get_IsTest_NoReferences();
    internal static string get_IsTest_NoTestReference();
    internal static string get_IsTest_ResolvedReference();
    internal static string get_IsTest_UnableToParseAssemblyName();
    internal static string get_IsTest_UsingRegExFromConfig();
    internal static string get_MoveDirectory_FromTo();
    internal static string get_MoveDirectory_InvalidSourceDirectory();
    internal static string get_Shared_ConfigFileNotFound();
    internal static string get_Shared_ErrorReadingConfigFile();
    internal static string get_Shared_ReadingConfigFailed();
    internal static string get_Shared_ReadingConfigFile();
    internal static string get_Shared_ReadingConfigSucceeded();
    internal static string get_WPIF_FailedToResolvePath();
    internal static string get_WPIF_GeneratingRandomGuid();
    internal static string get_WPIF_MissingOrInvalidProjectGuid();
    internal static string get_WPIF_ResolvedPath();
    internal static string get_WPIF_ResolvingRelativePath();
    internal static string get_WPIF_WARN_InvalidSettingKey();
    internal static string get_WPIF_WARN_MissingValueMetadata();
    internal static string get_WriteZeroLengthFiles_WritingFile();
}
public static class SonarScanner.MSBuild.Tasks.TaskUtilities : object {
    public static int MaxConfigRetryPeriodInMilliseconds;
    public static int DelayBetweenRetriesInMilliseconds;
    public static AnalysisConfig TryGetConfig(string configDir, ILogger logger);
    private static bool DoLoadConfig(string filePath, ILogger logger, AnalysisConfig& config);
}
public class SonarScanner.MSBuild.Tasks.WriteProjectConfigFile : Task {
    [CompilerGeneratedAttribute]
private string <ConfigDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnalysisConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilesToAnalyzePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectConfigFilePath>k__BackingField;
    [RequiredAttribute]
public string ConfigDir { get; public set; }
    public string AnalysisConfigPath { get; public set; }
    public string ProjectPath { get; public set; }
    public string FilesToAnalyzePath { get; public set; }
    public string OutPath { get; public set; }
    public bool IsTest { get; public set; }
    public string TargetFramework { get; public set; }
    [OutputAttribute]
public string ProjectConfigFilePath { get; private set; }
    [CompilerGeneratedAttribute]
public string get_ConfigDir();
    [CompilerGeneratedAttribute]
public void set_ConfigDir(string value);
    [CompilerGeneratedAttribute]
public string get_AnalysisConfigPath();
    [CompilerGeneratedAttribute]
public void set_AnalysisConfigPath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectPath();
    [CompilerGeneratedAttribute]
public void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_FilesToAnalyzePath();
    [CompilerGeneratedAttribute]
public void set_FilesToAnalyzePath(string value);
    [CompilerGeneratedAttribute]
public string get_OutPath();
    [CompilerGeneratedAttribute]
public void set_OutPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTest();
    [CompilerGeneratedAttribute]
public void set_IsTest(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectConfigFilePath();
    [CompilerGeneratedAttribute]
private void set_ProjectConfigFilePath(string value);
    public virtual bool Execute();
}
public class SonarScanner.MSBuild.Tasks.WriteProjectInfoFile : Task {
    private IEncodingProvider encodingProvider;
    private IEqualityComparer`1<FileInfo> fileInfoComparer;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionConfigurationContents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExcluded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePage>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AnalysisResults>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AnalysisSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [RequiredAttribute]
public string ProjectName { get; public set; }
    [RequiredAttribute]
public string FullProjectPath { get; public set; }
    public string Configuration { get; public set; }
    public string Platform { get; public set; }
    public string TargetFramework { get; public set; }
    public string ProjectLanguage { get; public set; }
    public string ProjectGuid { get; public set; }
    public string SolutionConfigurationContents { get; public set; }
    public bool IsTest { get; public set; }
    public bool IsExcluded { get; public set; }
    public string CodePage { get; public set; }
    public ITaskItem[] AnalysisResults { get; public set; }
    public ITaskItem[] AnalysisSettings { get; public set; }
    [RequiredAttribute]
public string OutputFolder { get; public set; }
    public WriteProjectInfoFile(IEncodingProvider encodingProvider);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_FullProjectPath();
    [CompilerGeneratedAttribute]
public void set_FullProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectLanguage();
    [CompilerGeneratedAttribute]
public void set_ProjectLanguage(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectGuid(string value);
    [CompilerGeneratedAttribute]
public string get_SolutionConfigurationContents();
    [CompilerGeneratedAttribute]
public void set_SolutionConfigurationContents(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTest();
    [CompilerGeneratedAttribute]
public void set_IsTest(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExcluded();
    [CompilerGeneratedAttribute]
public void set_IsExcluded(bool value);
    [CompilerGeneratedAttribute]
public string get_CodePage();
    [CompilerGeneratedAttribute]
public void set_CodePage(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AnalysisResults();
    [CompilerGeneratedAttribute]
public void set_AnalysisResults(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AnalysisSettings();
    [CompilerGeneratedAttribute]
public void set_AnalysisSettings(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutputFolder();
    [CompilerGeneratedAttribute]
public void set_OutputFolder(string value);
    public virtual bool Execute();
    private Encoding ComputeEncoding(string codePage);
    private List`1<AnalysisResult> TryCreateAnalysisResults(ITaskItem[] resultItems);
    private AnalysisResult TryCreateResultFromItem(ITaskItem taskItem);
    private AnalysisProperties TryCreateAnalysisSettings(ITaskItem[] resultItems);
    private Property TryCreateSettingFromItem(ITaskItem taskItem);
    private bool TryGetSettingId(ITaskItem taskItem, String& settingId);
    private bool TryGetSettingValue(ITaskItem taskItem, String& metadataValue);
    internal string GetProjectGuid();
    [CompilerGeneratedAttribute]
private bool <GetProjectGuid>g__ArePathEquals|68_0(string filePath, FileInfo file);
}
public class SonarScanner.MSBuild.Tasks.WriteZeroLengthFiles : Task {
    [CompilerGeneratedAttribute]
private String[] <FullFilePaths>k__BackingField;
    [RequiredAttribute]
public String[] FullFilePaths { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_FullFilePaths();
    [CompilerGeneratedAttribute]
public void set_FullFilePaths(String[] value);
    public virtual bool Execute();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
