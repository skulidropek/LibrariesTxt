public class FastSerialization.DeferedRegion : ValueType {
    internal Deserializer deserializer;
    internal StreamLabel startPosition;
    internal Action fromStream;
    public bool IsFinished { get; }
    public Deserializer Deserializer { get; }
    public StreamLabel StartPosition { get; }
    public void Write(Serializer serializer, Action toStream);
    public void Read(Deserializer deserializer, Action fromStream);
    public void FinishRead(bool preserveStreamPosition);
    public bool get_IsFinished();
    public Deserializer get_Deserializer();
    public StreamLabel get_StartPosition();
    private void FinishReadHelper(bool preserveStreamPosition);
}
public class FastSerialization.Deserializer : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, Type> <TypeResolver>k__BackingField;
    private StreamWriter log;
    private SerializationType typeBeingRead;
    internal IStreamReader reader;
    internal IFastSerializable entryObject;
    internal IDictionary`2<StreamLabel, IFastSerializable> ObjectsInGraph;
    internal IDictionary`2<ForwardReference, IFastSerializable> unInitializedForwardReferences;
    internal List`1<StreamLabel> forwardReferenceDefinitions;
    internal bool allowLazyDeserialization;
    internal bool deferForwardReferences;
    private Dictionary`2<string, Func`1<IFastSerializable>> factories;
    private Func`2<Type, IFastSerializable> defaultFactory;
    public int VersionBeingRead { get; }
    public int MinimumReaderVersionBeingRead { get; }
    public string Name { get; private set; }
    public Func`2<string, Type> TypeResolver { get; public set; }
    public StreamLabel Current { get; }
    public IStreamReader Reader { get; }
    public Deserializer(string filePath, SerializationConfiguration config);
    public Deserializer(Stream inputStream, string streamName, SerializationConfiguration config);
    public Deserializer(Stream inputStream, string streamName, bool leaveOpen, SerializationConfiguration config);
    public Deserializer(IStreamReader reader, string streamName);
    private void Initialize(IStreamReader reader, string streamName);
    public string GetEntryTypeName();
    public void GetEntryObject(T& ret);
    public IFastSerializable GetEntryObject();
    public void Read(Byte[] buffer, int offset, int length);
    public void Read(Boolean& ret);
    public void Read(Byte& ret);
    public void Read(Int16& ret);
    public void Read(Int32& ret);
    public void Read(Int64& ret);
    public void Read(Guid& ret);
    public void Read(Single& ret);
    public void Read(Double& ret);
    public void Read(String& ret);
    public void Read(StreamLabel& ret);
    public void Read(T& ret);
    public IFastSerializable ReadObject();
    public bool ReadBool();
    public byte ReadByte();
    public short ReadInt16();
    public int ReadInt();
    public long ReadInt64();
    public float ReadFloat();
    public double ReadDouble();
    public string ReadString();
    public StreamLabel ReadLabel();
    public ForwardReference ReadForwardReference();
    public StreamLabel ResolveForwardReference(ForwardReference reference, bool preserveCurrent);
    public int get_VersionBeingRead();
    public int get_MinimumReaderVersionBeingRead();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Func`2<string, Type> get_TypeResolver();
    [CompilerGeneratedAttribute]
public void set_TypeResolver(Func`2<string, Type> value);
    public void RegisterFactory(Type type, Func`1<IFastSerializable> factory);
    public void RegisterFactory(string typeName, Func`1<IFastSerializable> factory);
    public void RegisterDefaultFactory(Func`2<Type, IFastSerializable> defaultFactory);
    public bool TryReadTagged(Boolean& ret);
    public bool TryReadTagged(Byte& ret);
    public bool TryReadTagged(Int16& ret);
    public bool TryReadTagged(Int32& ret);
    public bool TryReadTagged(Int64& ret);
    public bool TryReadTagged(String& ret);
    public int TryReadTaggedBlobHeader();
    public bool TryReadTagged(T& ret);
    public IFastSerializable TryReadTaggedObject();
    public void Goto(StreamLabel label);
    public void Goto(ForwardReference reference);
    public StreamLabel get_Current();
    public IStreamReader get_Reader();
    public sealed virtual void Dispose();
    [ConditionalAttribute("DEBUG_SERIALIZE")]
public void Log(string str);
    internal IFastSerializable ReadObject(StreamLabel label);
    private IFastSerializable ReadObjectDefintion();
    private IFastSerializable ReadObjectDefinition(Tags tag, StreamLabel objectLabel);
    internal Func`1<IFastSerializable> GetFactory(string fullName);
    private void FindEndTag(SerializationType type, IFastSerializable objectBeingDeserialized);
    private void DefineForwardReference(ForwardReference forwardReference, StreamLabel definitionLabel);
    private Tags ReadTag();
}
public enum FastSerialization.ForwardReference : Enum {
    public int value__;
    public static ForwardReference Invalid;
}
public interface FastSerialization.IFastSerializable {
    public abstract virtual void ToStream(Serializer serializer);
    public abstract virtual void FromStream(Deserializer deserializer);
}
public interface FastSerialization.IFastSerializableVersion {
    public int Version { get; }
    public int MinimumVersionCanRead { get; }
    public int MinimumReaderVersion { get; }
    public abstract virtual int get_Version();
    public abstract virtual int get_MinimumVersionCanRead();
    public abstract virtual int get_MinimumReaderVersion();
}
public class FastSerialization.IOStreamStreamReader : MemoryStreamReader {
    internal static int defaultBufferSize;
    internal int align;
    internal Stream inputStream;
    internal long inputStreamBytesRead;
    private bool leaveOpen;
    internal long positionInStream;
    public StreamLabel Current { get; }
    public long Length { get; }
    public bool HasLength { get; }
    public IOStreamStreamReader(string fileName, SerializationConfiguration config);
    public IOStreamStreamReader(Stream inputStream, int bufferSize, bool leaveOpen, SerializationConfiguration config, StreamReaderAlignment alignment);
    public void Close();
    public virtual StreamLabel get_Current();
    public virtual void Goto(StreamLabel label);
    public virtual long get_Length();
    public virtual bool get_HasLength();
    public virtual void Read(Byte[] data, int offset, int length);
    protected virtual void Dispose(bool disposing);
    internal virtual void Fill(int minimum);
}
public class FastSerialization.IOStreamStreamWriter : MemoryStreamWriter {
    private static int defaultBufferSize;
    private Stream outputStream;
    private bool leaveOpen;
    private long streamLength;
    public Stream RawStream { get; }
    public long Length { get; }
    public IOStreamStreamWriter(string fileName, SerializationConfiguration config);
    public IOStreamStreamWriter(Stream outputStream, int bufferSize, bool leaveOpen, SerializationConfiguration config);
    public void Flush();
    public void Close();
    public Stream get_RawStream();
    public virtual long get_Length();
    public virtual StreamLabel GetLabel();
    public virtual void Clear();
    public virtual MemoryStreamReader GetReader();
    public virtual Byte[] GetBytes();
    internal virtual void MakeSpace();
    protected virtual void Dispose(bool disposing);
}
public interface FastSerialization.IStreamReader {
    public StreamLabel Current { get; }
    public abstract virtual byte ReadByte();
    public abstract virtual short ReadInt16();
    public abstract virtual int ReadInt32();
    public abstract virtual long ReadInt64();
    public abstract virtual string ReadString();
    public abstract virtual void Read(Byte[] data, int offset, int length);
    public abstract virtual StreamLabel ReadLabel();
    public abstract virtual void Goto(StreamLabel label);
    public abstract virtual StreamLabel get_Current();
    public abstract virtual void GotoSuffixLabel();
}
public interface FastSerialization.IStreamWriter {
    public abstract virtual void Write(byte value);
    public abstract virtual void Write(short value);
    public abstract virtual void Write(int value);
    public abstract virtual void Write(long value);
    public abstract virtual void Write(StreamLabel value);
    public abstract virtual void Write(string value);
    public abstract virtual StreamLabel GetLabel();
    public abstract virtual void WriteSuffixLabel(StreamLabel value);
}
[ExtensionAttribute]
public static class FastSerialization.IStreamWriterExentions : object {
    [ExtensionAttribute]
public static void Write(IStreamWriter writer, Guid guid);
    [ExtensionAttribute]
public static Guid ReadGuid(IStreamReader reader);
    [ExtensionAttribute]
public static string ReadNullTerminatedUnicodeString(IStreamReader reader, StringBuilder sb);
    [ExtensionAttribute]
public static StreamLabel Add(StreamLabel label, int offset);
    [ExtensionAttribute]
public static long Sub(StreamLabel label, StreamLabel other);
    [ExtensionAttribute]
public static void Skip(IStreamReader reader, int byteCount);
}
public class FastSerialization.MemoryMappedFileStreamReader : object {
    private static int BlockCopyCapacity;
    private MemoryMappedFile _file;
    private long _fileLength;
    private bool _leaveOpen;
    private MemoryMappedViewAccessor _view;
    private IntPtr _viewAddress;
    private long _viewOffset;
    private long _capacity;
    private long _offset;
    public StreamLabel Current { get; }
    public long Length { get; }
    protected MemoryMappedFile File { get; }
    public MemoryMappedFileStreamReader(string mapName, long length);
    public MemoryMappedFileStreamReader(MemoryMappedFile file, long length, bool leaveOpen);
    public static MemoryMappedFileStreamReader CreateFromFile(string path);
    public sealed virtual StreamLabel get_Current();
    public long get_Length();
    protected MemoryMappedFile get_File();
    public sealed virtual void Dispose();
    public void Seek(long offset);
    public sealed virtual void Goto(StreamLabel label);
    public sealed virtual void GotoSuffixLabel();
    public sealed virtual void Read(Byte[] data, int offset, int length);
    public T Read();
    public sealed virtual byte ReadByte();
    public sealed virtual short ReadInt16();
    public sealed virtual int ReadInt32();
    public sealed virtual long ReadInt64();
    public sealed virtual StreamLabel ReadLabel();
    public sealed virtual string ReadString();
    protected void Resize(int capacity);
    protected virtual void Dispose(bool disposing);
}
public class FastSerialization.MemoryStreamReader : object {
    [CompilerGeneratedAttribute]
private SerializationConfiguration <SerializationConfiguration>k__BackingField;
    internal Byte[] bytes;
    internal int position;
    internal int endPosition;
    private StringBuilder sb;
    private Func`1<StreamLabel> readLabel;
    private int sizeOfSerializedStreamLabel;
    public long Length { get; }
    public bool HasLength { get; }
    public SerializationConfiguration SerializationConfiguration { get; private set; }
    public StreamLabel Current { get; }
    public MemoryStreamReader(Byte[] data);
    public MemoryStreamReader(Byte[] data, int start, int length, SerializationConfiguration config);
    public virtual long get_Length();
    public virtual bool get_HasLength();
    [CompilerGeneratedAttribute]
public SerializationConfiguration get_SerializationConfiguration();
    [CompilerGeneratedAttribute]
private void set_SerializationConfiguration(SerializationConfiguration value);
    public virtual void Read(Byte[] data, int offset, int length);
    public sealed virtual byte ReadByte();
    public sealed virtual short ReadInt16();
    public sealed virtual int ReadInt32();
    public sealed virtual long ReadInt64();
    public sealed virtual string ReadString();
    public sealed virtual StreamLabel ReadLabel();
    public virtual void Goto(StreamLabel label);
    public virtual StreamLabel get_Current();
    public virtual void GotoSuffixLabel();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal virtual void Fill(int minBytes);
    [CompilerGeneratedAttribute]
private StreamLabel <.ctor>b__1_0();
    [CompilerGeneratedAttribute]
private StreamLabel <.ctor>b__1_1();
}
public class FastSerialization.MemoryStreamWriter : object {
    [CompilerGeneratedAttribute]
private SerializationConfiguration <SerializationConfiguration>k__BackingField;
    private Action`1<StreamLabel> writeLabel;
    internal Byte[] bytes;
    internal int endPosition;
    public SerializationConfiguration SerializationConfiguration { get; public set; }
    public long Length { get; }
    public MemoryStreamWriter(int initialSize, SerializationConfiguration config);
    [CompilerGeneratedAttribute]
public SerializationConfiguration get_SerializationConfiguration();
    [CompilerGeneratedAttribute]
public void set_SerializationConfiguration(SerializationConfiguration value);
    public virtual MemoryStreamReader GetReader();
    public virtual long get_Length();
    public virtual Byte[] GetBytes();
    public virtual void Clear();
    public sealed virtual void Write(byte value);
    public sealed virtual void Write(short value);
    public sealed virtual void Write(int value);
    public sealed virtual void Write(long value);
    public sealed virtual void Write(StreamLabel value);
    public sealed virtual void Write(string value);
    public virtual StreamLabel GetLabel();
    public sealed virtual void WriteSuffixLabel(StreamLabel value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal virtual void MakeSpace();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(StreamLabel value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1(StreamLabel value);
}
public class FastSerialization.PinnedStreamReader : IOStreamStreamReader {
    private GCHandle pinningHandle;
    private Byte* bufferStart;
    public PinnedStreamReader(string fileName, int bufferSize, SerializationConfiguration config);
    public PinnedStreamReader(Stream inputStream, int bufferSize, SerializationConfiguration config, StreamReaderAlignment alignment);
    public PinnedStreamReader Clone();
    public Byte* GetPointer(StreamLabel Position, int length);
    public Byte* GetPointer(int length);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
}
public class FastSerialization.SegmentedMemoryStreamReader : object {
    private static int BlockCopyCapacity;
    [CompilerGeneratedAttribute]
private SerializationConfiguration <SerializationConfiguration>k__BackingField;
    internal SegmentedList`1<byte> bytes;
    internal long position;
    internal long endPosition;
    private StringBuilder sb;
    private Func`1<StreamLabel> readLabel;
    private int sizeOfSerializedStreamLabel;
    public long Length { get; }
    public StreamLabel Current { get; }
    internal SerializationConfiguration SerializationConfiguration { get; private set; }
    public SegmentedMemoryStreamReader(SegmentedList`1<byte> data, SerializationConfiguration config);
    public SegmentedMemoryStreamReader(SegmentedList`1<byte> data, long start, long length, SerializationConfiguration config);
    public virtual long get_Length();
    public byte ReadByte();
    public short ReadInt16();
    public int ReadInt32();
    public long ReadInt64();
    public string ReadString();
    public StreamLabel ReadLabel();
    public virtual void Goto(StreamLabel label);
    public virtual StreamLabel get_Current();
    public virtual void GotoSuffixLabel();
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
internal SerializationConfiguration get_SerializationConfiguration();
    [CompilerGeneratedAttribute]
private void set_SerializationConfiguration(SerializationConfiguration value);
    internal virtual void Fill(int minBytes);
    [CompilerGeneratedAttribute]
private StreamLabel <.ctor>b__2_0();
    [CompilerGeneratedAttribute]
private StreamLabel <.ctor>b__2_1();
}
public class FastSerialization.SegmentedMemoryStreamWriter : object {
    [CompilerGeneratedAttribute]
private SerializationConfiguration <SerializationConfiguration>k__BackingField;
    protected SegmentedList`1<byte> bytes;
    private Action`1<StreamLabel> writeLabel;
    public long Length { get; }
    internal SerializationConfiguration SerializationConfiguration { get; private set; }
    public SegmentedMemoryStreamWriter(SerializationConfiguration config);
    public SegmentedMemoryStreamWriter(long initialSize, SerializationConfiguration config);
    public virtual long get_Length();
    public virtual void Clear();
    public void Write(byte value);
    public void Write(short value);
    public void Write(int value);
    public void Write(long value);
    public void Write(StreamLabel value);
    public void Write(string value);
    public virtual StreamLabel GetLabel();
    public void WriteSuffixLabel(StreamLabel value);
    public void WriteToStream(Stream outputStream);
    public SegmentedMemoryStreamReader GetReader();
    public void Dispose();
    [CompilerGeneratedAttribute]
internal SerializationConfiguration get_SerializationConfiguration();
    [CompilerGeneratedAttribute]
private void set_SerializationConfiguration(SerializationConfiguration value);
    protected virtual void MakeSpace();
    public Byte[] GetBytes();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(StreamLabel value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(StreamLabel value);
}
public class FastSerialization.SerializationConfiguration : object {
    [CompilerGeneratedAttribute]
private StreamLabelWidth <StreamLabelWidth>k__BackingField;
    public StreamLabelWidth StreamLabelWidth { get; public set; }
    [CompilerGeneratedAttribute]
public StreamLabelWidth get_StreamLabelWidth();
    [CompilerGeneratedAttribute]
public void set_StreamLabelWidth(StreamLabelWidth value);
}
public class FastSerialization.SerializationException : Exception {
    public SerializationException(string message);
}
internal class FastSerialization.SerializationType : object {
    internal int version;
    internal int minimumReaderVersion;
    internal string fullName;
    internal Func`1<IFastSerializable> factory;
    public int Version { get; }
    public int MinimumReaderVersion { get; }
    public string FullName { get; }
    internal SerializationType(Type type);
    internal SerializationType(string fullName, Deserializer deserializer);
    public int get_Version();
    public int get_MinimumReaderVersion();
    public string get_FullName();
    public IFastSerializable CreateInstance();
    public virtual string ToString();
    private sealed virtual override void FastSerialization.IFastSerializable.ToStream(Serializer serializer);
    private sealed virtual override void FastSerialization.IFastSerializable.FromStream(Deserializer deserializer);
}
public class FastSerialization.Serializer : object {
    private StreamWriter log;
    internal IStreamWriter writer;
    internal IDictionary`2<RuntimeTypeHandle, SerializationType> TypesInGraph;
    internal IDictionary`2<IFastSerializable, StreamLabel> ObjectsInGraph;
    internal IDictionary`2<IFastSerializable, ForwardReference> ObjectsWithForwardReferences;
    internal List`1<StreamLabel> forwardReferenceDefinitions;
    public IStreamWriter Writer { get; }
    public Serializer(string filePath, IFastSerializable entryObject);
    public Serializer(Stream outputStream, IFastSerializable entryObject);
    public Serializer(Stream outputStream, IFastSerializable entryObject, bool leaveOpen);
    public Serializer(IStreamWriter writer, IFastSerializable entryObject);
    public void Write(bool value);
    public void Write(byte value);
    public void Write(short value);
    public void Write(int value);
    public void Write(long value);
    public void Write(Guid value);
    public void Write(string value);
    public void Write(float value);
    public void Write(double value);
    public void Write(StreamLabel value);
    public void Write(ForwardReference value);
    public void Write(IFastSerializable obj);
    public void WriteDefered(IFastSerializable obj);
    public void WritePrivate(IFastSerializable obj);
    public ForwardReference GetForwardReference();
    public void DefineForwardReference(ForwardReference forwardReference);
    public void WriteTagged(bool value);
    public void WriteTagged(byte value);
    public void WriteTagged(short value);
    public void WriteTagged(int value);
    public void WriteTagged(long value);
    public void WriteTagged(string value);
    public void WriteTagged(IFastSerializable value);
    public void WriteTaggedBlobHeader(int size);
    public void WriteTaggedEnd();
    public IStreamWriter get_Writer();
    public void Close();
    [ConditionalAttribute("DEBUG_SERIALIZE")]
public void Log(string str);
    private void WriteTag(Tags tag);
    private void WriteObjectRef(IFastSerializable obj, bool defered);
    private void WriteTypeForObject(IFastSerializable obj);
    private void WriteObjectData(IFastSerializable obj, Tags beginTag);
    private void WriteDeferedObjects();
    private SerializationType CreateTypeForObject(IFastSerializable instance);
    public sealed virtual void Dispose();
}
public enum FastSerialization.StreamLabel : Enum {
    public long value__;
    public static StreamLabel Invalid;
}
public enum FastSerialization.StreamLabelWidth : Enum {
    public int value__;
    public static StreamLabelWidth FourBytes;
    public static StreamLabelWidth EightBytes;
}
public enum FastSerialization.StreamReaderAlignment : Enum {
    public int value__;
    public static StreamReaderAlignment OneByte;
    public static StreamReaderAlignment FourBytes;
    public static StreamReaderAlignment EightBytes;
}
internal enum FastSerialization.Tags : Enum {
    public byte value__;
    public static Tags Error;
    public static Tags NullReference;
    public static Tags ObjectReference;
    public static Tags ForwardReference;
    public static Tags BeginObject;
    public static Tags BeginPrivateObject;
    public static Tags EndObject;
    public static Tags ForwardDefinition;
    public static Tags Byte;
    public static Tags Int16;
    public static Tags Int32;
    public static Tags Int64;
    public static Tags SkipRegion;
    public static Tags String;
    public static Tags Blob;
    public static Tags Limit;
}
internal static class Microsoft.Diagnostics.FastSerialization.HashHelpers : object {
    public static int MaxPrimeArrayLength;
    public static int HashPrime;
    private static Int32[] s_primes;
    private static HashHelpers();
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
    public static ulong GetFastModMultiplier(UInt32 divisor);
    public static UInt32 FastMod(UInt32 value, UInt32 divisor, ulong multiplier);
}
internal static class Microsoft.Diagnostics.FastSerialization.ThrowHelper : object {
    internal static void IfNullAndNullsAreIllegalThenThrow(object value, string argName);
    internal static void ThrowKeyNotFoundException(T key);
    internal static void ThrowIndexArgumentOutOfRange_NeedNonNegNumException();
    internal static void ThrowWrongTypeArgumentException(T value, Type targetType);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(string argument, string message);
    private static ArgumentException GetWrongTypeArgumentException(object value, Type targetType);
}
internal class System.Collections.Generic.FunctorComparer`1 : object {
    private Comparison`1<T> comparison;
    public FunctorComparer`1(Comparison`1<T> comparison);
    public sealed virtual int Compare(T x, T y);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class System.Collections.Generic.GrowableArray`1 : ValueType {
    private T[] array;
    private int arrayLength;
    public T Item { get; public set; }
    public int Count { get; public set; }
    public bool Empty { get; }
    public T Top { get; }
    public bool EmptyCapacity { get; }
    public T[] UnderlyingArray { get; }
    public GrowableArray`1(int initialSize);
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public int get_Count();
    public void set_Count(int value);
    public void Clear();
    public void Add(T item);
    public void AddRange(IEnumerable`1<T> items);
    public void Insert(int index, T item);
    public void RemoveRange(int index, int count);
    public void Set(int index, T value);
    public T& GetRef(int index);
    public T Get(int index);
    public bool get_Empty();
    public T Pop();
    public T get_Top();
    public void Trim(int maxWaste);
    public bool get_EmptyCapacity();
    public virtual string ToString();
    public bool BinarySearch(Key key, Int32& index, Func`3<Key, T, int> comparison);
    public void Sort(int index, int count, Comparison`1<T> comparison);
    public void Sort(Comparison`1<T> comparison);
    public GrowableArray`1<T1> Foreach(Func`2<T, T1> func);
    public bool Search(Key key, int startIndex, Func`3<Key, T, int> compare, Int32& index);
    public T[] get_UnderlyingArray();
    private void Realloc(int minSize);
    public GrowableArrayEnumerator<T> GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class System.Collections.Generic.SegmentedDictionary`2 : object {
    private static Entry<TKey, TValue> EntryPlaceholder;
    private SegmentedList`1<int> _buckets;
    private SegmentedList`1<Entry<TKey, TValue>> _entries;
    private static int defaultSegmentSize;
    private int _count;
    private int _freeList;
    private int _freeCount;
    private ulong _fastModMultiplier;
    private int _version;
    private IEqualityComparer`1<TKey> _comparer;
    private KeyCollection<TKey, TValue> _keys;
    private ValueCollection<TKey, TValue> _values;
    private static int StartOfFreeList;
    public TValue Item { get; public set; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    public bool IsFixedSize { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public IEqualityComparer`1<TKey> Comparer { get; }
    public KeyCollection<TKey, TValue> Keys { get; }
    public ValueCollection<TKey, TValue> Values { get; }
    public SegmentedDictionary`2(int capacity);
    public SegmentedDictionary`2(IEqualityComparer`1<TKey> comparer);
    public SegmentedDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public SegmentedDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public SegmentedDictionary`2(IDictionary`2<TKey, TValue> dictionary, IEqualityComparer`1<TKey> comparer);
    private static SegmentedDictionary`2();
    private int Initialize(int capacity);
    private Int32& GetBucket(UInt32 hashCode);
    private bool FindEntry(TKey key, Entry& entry);
    private bool TryInsert(TKey key, TValue value, InsertionBehavior<TKey, TValue> behavior);
    private void Resize();
    private void Resize(int newSize);
    private static bool IsCompatibleKey(object key);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int index);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual void Add(object key, object value);
    public sealed virtual bool Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    public sealed virtual void Remove(object key);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual void CopyTo(Array array, int index);
    public IEqualityComparer`1<TKey> get_Comparer();
    public KeyCollection<TKey, TValue> get_Keys();
    public ValueCollection<TKey, TValue> get_Values();
    public bool TryAdd(TKey key, TValue value);
    public bool Remove(TKey key, TValue& value);
    public int EnsureCapacity(int capacity);
    public bool ContainsValue(TValue value);
}
[DefaultMemberAttribute("Item")]
public class System.Collections.Generic.SegmentedList`1 : object {
    private int segmentSize;
    private int segmentShift;
    private int offsetMask;
    private long capacity;
    private long count;
    private T[][] items;
    private int System.Collections.Generic.ICollection<T>.Count { get; }
    public long Count { get; public set; }
    internal long Capacity { get; }
    public T[] UnderlyingArray { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private int System.Collections.Generic.IReadOnlyCollection<T>.Count { get; }
    private T System.Collections.Generic.IReadOnlyList<T>.Item { get; }
    public T Item { get; public set; }
    public SegmentedList`1(int segmentSize);
    public SegmentedList`1(int segmentSize, long initialCapacity);
    private sealed virtual override int System.Collections.Generic.ICollection<T>.get_Count();
    public long get_Count();
    public void set_Count(long value);
    internal long get_Capacity();
    public T[] get_UnderlyingArray();
    public T Pop();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<T>.get_Count();
    private sealed virtual override T System.Collections.Generic.IReadOnlyList<T>.get_Item(int index);
    public T get_Item(long index);
    public void set_Item(long index, T value);
    internal T& GetElementByReference(int index);
    public bool IsValidIndex(long index);
    public T[] GetSlot(int index, Int32& slot);
    public sealed virtual void Add(T item);
    public void Insert(long index, T item);
    public void RemoveAt(long index);
    public long BinarySearch(T item, IComparer`1<T> comparer);
    public long BinarySearch(T item, long low, long high, IComparer`1<T> comparer);
    public void Sort();
    public void Sort(IComparer`1<T> comparer);
    public void AppendFrom(SegmentedList`1<T> from, long index, long count);
    public void AppendFrom(T[] from, int index, int count);
    public Enumerator<T> GetEnumerator();
    public T[] ToArray();
    public void CopyTo(T[] array, int arrayIndex);
    public void CopyRangeTo(T[] array, int arrayIndex, long startIndex, long endIndex);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    public void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private void AddRoomForElement(long index);
    private void RemoveRoomForElement(long index);
    private void EnsureCapacity(long minCapacity);
    private void SwapIfGreaterWithItems(IComparer`1<T> comparer, long a, long b);
    private void QuickSort(long left, long right, IComparer`1<T> comparer);
    public int IndexOf(T item);
}
